jQuery is on its way out, i don't believe learning it today is relevant anymore. Most jQuery work these days is ripping out old jQuery and replacing it.
In this very particular case it is. What you're arguing is the general, generally you wouldn't use this pattern and I would agree but outright banning it is moronic. You must have never worked with frontend code either, it's pretty normal to see get/set being used for components. We're all from different backgrounds but we should attempt to share a common language and expectations. If we are always catering to the worst engineers in existence we're going to be making very poor software choices. There is nothing magic about what I've done, it's a very real feature that is immediately apparent what it does upon reading it `get variable() {}`. You can't on one hand expect everyone to understand the quirks of JS and then go beyond that and say anything that doesn't reflect the C language is _too hard_ for people to understand. I must ask, what's your opinions on PHP autoloading? It's a completely magic way for it to work. What about DI in general, does an engineer have to understand the entire compiler to be able to debug their program? No, they don't. They don't need to know how DI works at an intimate level to use it. Same with this, they don't need to know how it works, just that this is the interface to the config object (which it's an object). You can't modify or mutate it whereas with javascript functions you can override them.
Like this? https://codepen.io/dougrich/pen/mZGLom Tweak the latency in the JS pane.
class MyClass {} ?
&gt; I must ask, what's your opinions on PHP autoloading? It's a completely magic way for it to work You're right, it is magic, because it's a language deficiency. But that's not the point. The point is that when it's used, your application behaves like code importing in similar languages. &gt; Same with this, they don't need to know how it works, just that this is the interface to the config object (which it's an object) They do if they want to modify it. That's what you keep ignoring. It's literally one extra completely unnecessary translation they have to make to understand your codebase. A codebase full of these is death by 1000 cuts and makes it harder to grok. Every single piece of you code you write has a cognitive cost. Every line. Every name. Every character. Every pattern. Even every formatting style you choice. They all have cognitive costs. Ignore the cognitive cost of your code design at your own peril.
It's effectively this pattern that is encapsulated to a get parameter. I assume you already know this. class Foo { #config = null; constructor(configService) { this.config = configService.get(&lt;arg&gt;); } doWork() { const interval = this.config.interval; ... } }
Yes, and *that* pattern is more readable, conventional, and easier to understand than using a getter. That is my entire point. I see `this.config`, I know to look for a config property to see where it's being set. Or better yet, the config required by the class is dependency injected rather than service located so that the setting happens directly in the constructor and can be more easily unit tested: class Foo { constructor(private readonly config: FooConfig) {} doWork() { const interval = this.config.interval; ... } }
&gt; Every single piece of you code you write has a cognitive cost. Every line. Every name. Every character. Every pattern. Even every formatting style you choice. They all have cognitive costs. Ignore the cognitive cost of your code design at your own peril. You're acting like I haven't been programming for 10 years like I'm some new hotshot on the block who just picked up a rad language known as JS. It's JS for christ sake, it's a truly terrible language by all means and is horrible for most industries. There are patterns which the language provides which are benefits for people who want to metaprogram to provide an easier interface to do another thing. How do you close the gap and make it so your stuff isn't unreliable like 99% of the code written by people on medium? You test it, you test it a lot, you test it even more past that. Anything less than 100% coverage is a failure. Stop blaming a language feature for absolutely garbage engineers who parade themselves as intellectuals. I understand how how cognitive complexity works and in fact you shouldn't even _think_ about how this.config() or this.config works. Consumption is the primary use case. You provide an **object interface** to your config. I'm not being obtuse and foregoing the maintenance of this pattern. It's a **single line** abstraction and it literally _the difference of () and no ()_. There is absolutely no way you can spin my exact implementation any other way. Abstractions introduce whole system complexity but reduce local complexity. Classes and objects are actually quite complex but we use them in OOP everyday, should we ignore that and instead rely on global functions to call everything and manipulate data? My intellisense isn't working so I'll reimplement a function which is imported somewhere else in this 250k line project. Saying abstractions are effectively a code smell is a fatal misunderstanding of how to correctly apply abstractions to _simplify_ code and logic. You test things in units and modules and if one unit or module is correct you can extract from that what's wrong. &gt; You are only looking at one side of the coin when you keep insisting that this.config is better because you only have to type this.config. This is a narrow and incomplete view of your code. I understand your side, and I think you're lacking the understanding that this is a one line abstraction to an function call which returns an object. It's a specific pattern to remove any possibility of reassigning the config variable/function without explicit hacking around it. There is a _reason_ I did it this way that you don't want to believe. Explain to me how you would do it with JS/TS and disallow overwriting of the function. &gt; They do if they want to modify it. That's what you keep ignoring. It's literally one extra completely unnecessary translation they have to make to understand your codebase. A codebase full of these is death by 1000 cuts and makes it harder to grok. If they want to modify the way config is retrieved, edit the function and return an object. Simple as that, tests should be written on the original class that ensure what you change didn't break everything. I'm not going to build something that tries to idiot proof itself from people not finding it worth their time to test their own code changes (hint that's how code gets worse over time). &gt; You're right, it is magic, because it's a language deficiency. But that's not the point. The point is that when it's used, your application behaves like code importing in similar languages. It's a language abstraction and must be abolished! Except not really because it's a vital piece of what make composer even work. It's not a great design but it's certainly a good enough approach. Most people never even know it exists in the first place, do people need to modify it? No, not really. The only time you'd be introduced into the autoloader is if you're a library writer and even then it would be irresponsible to not understand how imports work in PHP. Similar with JS, it would be irresponsible to not know the difference between `import * as package from 'package'` `import package from 'package'` `const package = require('package')` and `import { package } from 'package'`. To put it short and simply, it's a **one line abstraction** to a *configuration object* that is **unreassignable** without significant effort.
Man I envy having those kind of buddies with the same interest.
Nothing is caught. Other languages catch exceptions and errors
&gt; and in fact you shouldn't even think about how this.config() or this.config works. I am going to stop arguing with you because I'm just repeating the same point that you keep ignoring.
 class Foo { constructor( private readonly configService: ConfigService ) {} get config() { return this.configService.get('foo'); } doWork() { const interval = this.config.interval; ... } } Unless you're explicitly relying on everyone in the world to structure their code identically which isn't going to happen. This isolates everything to how config is retrieved to a single function reference. The access pattern is a property but I think between all major editors if you _go to definition_ it would bring you to `get config(){}`. If you're doing your programming in notepad.exe and have to struggle to read your code with no highlighting that's your own issue. Everyone is proficient with their own dev environment and should be comfortable reading code they have never seen before. I don't have to relate a property to where it's assigned in any other function, because what would stop something like this from happening? class Foo { #config = null; constructor(configService) { this.config = configService.get(&lt;arg&gt;); } doWork() { const interval = this.config.interval; const that = this; ... setTimeout(function() { return new Promise((resolve, reject) =&gt; { const variable = async () =&gt; { this.config = that.configService.get(&lt;arg&gt;).sub.package.value } await variable(); }) }, 0); } updateConfig() { this.config = this.configService.get(&lt;arg&gt;).subPackage; } } Absolutely nothing preventing the previous solution to have multiple entities other than discipline and code reviews (potentially through many years of different engineers) to enforce certain access patterns. This leads to more complex code to understand because it's not encapsulated to a single reference which is unchangeable in both value and way of execution.
That's brilliant. Did you just make that? A couple of things. Can you keep the cursor as the standard arrow, and also, even at 0ms, I can still feel there's a little bit of "soupiness". Can you make it more efficient?
developers hate him! click here to find out more
&gt; class Foo { constructor( private readonly configService: ConfigService ) {} config() { return this.configService.get('foo'); } doWork() { const interval = this.config.interval; ... } } There. Now it's simpler to understand.
You're arguing a point which I'm stating isn't a good enough reason to prevent usage for very specific defined use cases with which the exact pattern is used for. You're talking about the general, which I agree using getters in this way isn't proper and it makes things unreliable, what my access pattern ensures is a consistent interface to the config object in **all** cases. Your lack of acknowledging that there are cases which this works for is just plain ignorant and elitist that _your way is the best way_.
Really? Seems you have a bug in your doWork() function because config is a function and not an object parameter... With that you have confirmed that all you were arguing about the entire time is a pair of `()` next to the word config. Goodnight, maybe after a nights rest we may understand each other better, but I doubt you'll make much headway in understand my **very specific use case**.
&gt; Really? Seems you have a bug in your doWork() function because config is a function and not an object parameter... Well shit. Looks like you got me. My entire argument is undone.... Fuck man. EDITED.
&gt; what my access pattern ensures is a consistent interface to the config object in all cases The same fucking thing can be achieved with a simple wrapper method, and then calling it like a method.
&gt; did you just make that? yes &gt; can you keep the cursor as the standard arrow? sure, it's been updated to a cursor from [icons8](https://icons8.com/icon/1405/cursor) &gt; even at 0ms, I can still feel a bit of 'soupiness'. Can you make it more efficient? Not as efficient as actually directly moving it around. if you were making this into a site, I'd recommend when trying to do 0ms latency to either: - remove `cursor:none` and hide the artificial cursor, as this gives you the truest '0ms' feeling - directly set the position from the mousemove callback (although this can also feel 'soupy') (just added this check to my pen) at low milliseconds (&lt;100) it'll probably feel soupy compared to the real deal, as `setInterval` doesn't do great with small intervals.
You sure do like to post one thing then immediately edit it with a lot more information. &gt; Now it's simpler to understand because you don't have to mentally map this.config (which is state), to a method call defined somewhere else in the class. Literally easier to understand the code without the getter. You don't have to map it to anywhere if you can grok it as `this.config`, okay some _config_ somewhere, not important if I get the values I want. `&lt;config&gt;`.value, alright I'm getting the value out of the config. Looks right in my debugger so I can move on. The only case, as you mentioned this would be an issue is if your config didn't resolve to anything, or it resolves to a promise somewhere along the line, but the interface here is a box which maps the package to a folder in the root called `config`. You don't need to know how DI works, or how the configService works if your values resolve, and if they don't you first look where all the configs are held in the /src/config folder. It's your own fault if you make your config system complex, this is a class reference to only be used internally to the class itself, not passed around as some object to other classes. You should never be passing your entire config object because that means you didn't separate your concerns correctly.
Most jQuery developes seem to not actually know Javascript at all. Like they just kind of plug pre-built things together and get totally lost when anything doesn't work right out of the box.
Updated with 'smooth movement'. If you're tweaking the latency, update both the JS and the CSS.
It's not worth learning. If you ever need to know jQuery for some reason, it's not hard to pick up if you already know Javascript.
That's pretty much been my learning experience so far. I'll start out with one aspect and then go "I should really know how this is working underneath the hood and that'll help me understand how to use the next layer up as well"
I'll chalk it up to you not really caring to read it or you assumed the object abstraction was still correct because the cognitive complexity of it was so small you _overlooked it_. It probably was because you didn't read it though.
Almost there! Set at 500ms, when I go round in a circle with the mouse, I don't see the arrow also go round in a circle (I see you use linear interpolation at specific time intervals). I want the exact same movements of the mouse, but just delayed.
&gt;If they know jQuery, they know JavaScript. This statement is hilariously wrong. There are so many people who are *paid* (sometimes quite well) to write jQuery who know basically nothing about Javascript. I think that's likely true to different degrees with most frameworks, but way, way less extreme with something like React than jQuery. Used to see the same thing with Rails, where people learned how to use that with some level of success but couldn't write anything worth a damn in Ruby without the scaffolding. Ditto for people who "know" Bootstrap but are totally helpless if they have to write CSS themselves.
Oooh, that'd be quite tough to replicate - you could probably do the _positions_, but the _timing_ would be difficult to emulate. I can take a stab at it tomorrow if you're still interested.
I'm sorry but you're expecting a organizational pattern to exist globally but it doesn't and won't. You shouldn't be scrolling or searching for code in a file in the first place. You should be using _something_ that allows you to go to the definition. What you're omitting is an access pattern which you don't care to understand or even acknowledge because it doesn't align with the way _you think code should be written_ with your experiences and your own perspective where properties are defined, static members, static functions, and whatever order of public/private/protected afterwards. I've seen people want to declare their public API first and parameters alongside the constructor, or even in the constructor itself. I've seen having public methods and your helper methods come before/after. Do you honestly not refactor code often enough? I've done it professionally and you learn about how to understand code you haven't written and what you're complaining about is actually just you being extremely rigid with your specific understanding of how code should be written, not that it is necessarily correct. For the record, I do put my properties at the top, and functions below but if I'm looking for where something is defined I use a hotkey to go to it not search for it. That's on you for that inefficiency.
Haha thought that might be trickier. Shame there's no easy shortcut. When I connect the laptop of to the TV using HDMI, I find there's around 100ms of horrible lag. Some computer emulators also suffer from it too even on the same PC. Be really cool to emulate that. And yeah if it's not too much trouble. Already have a working version for the keyboard here: https://www.skytopia.com/stuff/lag.html
Based on /u/vither999 's answer, here's another kind of input lag: https://codepen.io/anon/pen/JQaZNR
Wat. That’s just as vanilla as any other framework or renderer a part from the web component API’s
And a lot of the "vanilla" APIs suck ass. Yeah, they can get the job done or whatever, and it's great that they exist so people can write better APIs on top of them, but they aren't nice to use.
Additionally an example of something that I would expect this type of access pattern is when dealing with an ORM type class, where I expect it to be properties of an object and not function calls. Keep thinking it's a complete antipattern though :) Use Go if you want to have a simple language which resists a lot of syntactic sugar language features.
Wait, u/sdrmme cracked it! https://www.reddit.com/r/javascript/comments/c9pdcd/any_way_to_emulate_a_laggy_mouse_cursor_with_an/et17yra/
Wow great job! Even 100ms is hilariously bad lol.
I think framework/library requirements can make a lot of sense. There’s a good chance that an experienced dev with no react background can fare well eventually. But I would also want a colleague that has bumped into a lot of the quirks (if there are any) already.
That isn't the general use case for this language feature, when you want to translate an object to a variable it'd make more sense to use setValue() and getValue().
I agreed with your summary until I read the article. I could be wrong but it seems like something benign like validating user input could lead to a denial of service attack. If merge deep or similar function is used to set default properties on the parsed object, then a method up the prototype chain could be changed, and if that code remains live and loaded in a running node instance, all subsequent calls to that now modified method would fail. That’s what I think they are arguing for. I’d have to test it to know for sure.
Js has try catch throw. I don't know what you are saying. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch
Hi /u/Sandeepikamm, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I've only been in the industry for a couple years(28 now, started when 23), but it amazes me how many candidates I interview actually get mad when I ask them about low level vanilla JS. Thinks like closures, memory management, GC, and the event loop model. They then leave feedback saying "Why didn't you ask me about frameworks like React and Angular?" not realizing that the true foundation in understanding vanilla JS is what I value most because anyone can learn a framework. It's when the framework can't solve all your problems or a low level bug arises that they then have no idea how to proceed. I highly recommend all front end devs learn these skills so keep going!
If 108 kb is enough to make a difference, you're doing something wrong. A company of sufficient size that chooses to use vanilla JS is going to have their own in-house set of abstractions, essentially acting as their own "framework." They'll write their own tests, they'll have their own common patterns. They lose out on the immediate hire-ability of people who know the common libraries. In the end, their solution may not be as optimized and may perform more costly updates to the DOM.
I can see why you may have interpreted what I said to mean "literally try random stuff", even though that's silly, but the point that I was trying to get across was more along the lines of, "don't stop trying things just because you think you've tried everything, because if it isn't working yet, you haven't found the right thing to try yet". I've seen a lot of devs get frustrated with configs and basically give up (including senior devs), only to have someone else solve their problem for them by being more persistent. As I have grown as a developer, fostering that sense of undaunted persistence has helped me solve config problems with a greater success rate. Looking at the source code for the thing you're configuring, and reverse engineering that can be helpful too, and that's a good suggestion for getting more leads if you're out of ideas. I also think that can be daunting for a lot of devs, so it wasn't the first suggestion that came to mind. Honestly, how long into fiddling with the config would you start trying to reverse engineer something like Redis or Webpack? Configs can be a pain, and I was trying to offer encouragement with some mindset advice that I genuinely think is helpful 🤷🏻‍♂️
&gt; Ditto for people who "know" Bootstrap Is this something people say?
&gt; diff DOM elements Like that's what anybody does. It's replacing the entire tree every time lol
ES6+ __is__ vanilla. Not vanilla is when you involve a framework.
&gt; Don't get me wrong, I acknowledge that it's a bug, and a weird one at that. I just feel that describing it as a "severe security vulnerability" is pretty overblown. They overblow nearly every vulnerability they report about. Seemingly because they want people to pay for their service. They claimed to have "found" zipslip or whatever they called it. But that was just a specific pathway to an ages old bug that doesn't exist on modern systems anymore. Overblew that one too and pretend waves were made.
Just for fun, I compiled this page to demonstrate the lag for both keyboard and mouse input: https://www.skytopia.com/stuff/lag.html
Just for fun, here's a nice demo page which includes text lag too: https://www.skytopia.com/stuff/lag.html
How are you compiling it? Automatically on save? I don't really find much use case for it to be honest because I'm not managing enterprise-level projects in JS.
You should try asking job-relevant questions, though, not exact definitions. You're not interviewing people who can't hack closures. At least, hopefully.
Have you tried converting LF into CRLF before encoding? That's the valid newline character in the mailto format ``` `body=${encodeURIComponent(body.replace(/\n/gm,'\r\n'))}` ```
For what it’s worth I definitely agree with you. Config issues often require bashing your head against the wall until you break it down.
I have hidden the project directory structure .
&gt;Ops, I've deleted my previous comment. &gt; &gt; Because my library creates reactive objects I called it ox, yes someone could try to compare it with rxjs but you are right: the purposes are different. RxJS is about async data flow, OxJS is about "low level" changes notifications. &gt; &gt; &gt; &gt;About big comments I am with you, I'll separate code from documentation in future.
Because it's not JS. For me, JS is a deliberate choice if I want to do cool things fast. C++ as a second choice if I need every last squeeze of performance but that also takes a lot longer to build something.
And frameworks are not forever. They come and go.
Autocomplete and linting make TS amazing. Try it - I promise you'll never look back.
ES6 is not a framework and it doesn't have to be compiled. If you're okay supporting ~80% of users and your bundler uses something like broswerlist and your configuration reflects that, you'll find that all it will do is just concatenate all the files and keep the ES6 syntax. You're using Angular at work and not only is it using TypeScript, but it also has its own compiler that does some extra work, like AoT. I get why you feel like it's far from "vanilla JS" I also think it's fair to say that learning some of the older approaches and even older tooling, like jQuery and MooTools will shed a lot of light on why the language progressed in the direction it did. I'm sure if you had to write ES3-compatible code you'd be very grateful for how much easier we have it with the new stuff.
Do you want to force everyone to voice-record all the code they wrote, so that blind people can read it? No, of course not. Blind people use screen readers (read "specially tailored software") to read it. Same goes with tabs/spaces. Use whatever you want and let blind-ish people use whatever specially tailored software they can to make it look how they want it to. It does not even need to be specially tailored. JetBrains IDEs for example allow you to convert whichever configuration of spaces to whatever you want visually. So you see a 2ch tab, but in the source file, there are 6 spaces. To sum up. If there were a definitive argument to use either tabs or spaces, accessibility is not it.
Shameless plug for Vanilla JS: github.com/AdamCollins/JustJS
Why don't those things make JS amazing? Anyhow, I resist it because, again, I don't write enterprise-level applications, and I haven't put in the effort to auto-compile my TS so I can instantly test it, which is the only way it'd be usable IMO.
This is actually an interesting topic, but linking to one of the examples without any explanations as to what is going on is pointless The above is an example usage of this stuff https://ops.city/why
&gt; The "vanilla" nonsense It's crazy. You don't see this in *any* other programming language community. Nobody is compelling you to eschew frameworks or libraries in Java or Python or C or... anything else. Really weird.
&gt; libraries and frameworks are different things Not *really*, though. Frameworks are libraries.
&gt;I love writing VanillaJS &gt; &gt;This is basically my first time not writing ES6 Maybe I'm confused, but Vanilla JS can include ES6. Unless your runtime environment doesn't support ES6 and you need a transpiler like Babel, making it *kinda* not vanilla.
I’m more surprised at the number of people writing CSS who don’t know the first thing about scalable or maintainable CSS.
Wait. Did I miss the new framework? Who's backing VanillaJS, did Google give up on Angular to start this project?
Never lose that curiosity, all the good devs I’ve worked with and admired had it, our field is so vast you could study it for multiplier lifetimes and barely scratch the surface, that’s what make it so fun!
Svelte (as mentioned) tries to do this. As I understand it, it can be effective for smaller apps, but as they grow larger, the cost of removing the abstractions adds up to be higher than simply using an abstraction. Facebook is working on Prepack, which (when ready) is supposed to precompute values, functions, and other things based on partial execution: https://prepack.io/ If you are interested in minimal frameworks, have a look at [hyperHTML](https://github.com/WebReflection/hyperhtml). It is around 5kb minzipped and provides similar functionality to React, but is entirely based on standard JS. It requires no build system for jsx (uses tagged template literals instead, while retaining the ease of use of injecting html-like strings into JS). And it does not use a vdom, removing one layer of abstraction common to such libraries, and making it one of the fastest out there.
i would actually bet that you don't know what your code does. there are no components that you could unit test, there is no one way data flow that is in any way deterministic or reproducible, the view isn't a reflection of state. vanilla apps tend to keep state in the dom, mutate stuff with a net of wired together updaters - there is a reason why people say it doesn't scale - and it starts with vanilla giving you no means to do that, it even encourages layout inflating, mutation and all the dirty things that make apps impossible to reason about.
&gt; Key Takeaway: Stop worrying so much about performance! OR, and hear me out, “Make appropriate mitigations to address all of these edge cases so you can have performance without making things worse.”
Without types there are limits to what autocomplete &amp; linting can do.
 &gt;but at least I know what my code does With all due respect, that's just a lazy pseudo argument. You can easily read the source code of whatever utilities a library uses. Then you'd know what that does too and surprise, it's also vanilla.
Great stuff! Just a small bug to report: if you check multiple items in a row, the trash button only applies to the most recently pressed item. You have to click on the item again which sometimes will show the delete button or will make you press it again to reveal it. Aside from that I really like how clean it looks
Yeah seems pretty similar except for a few things * Mobx has decorators as well as normal functions * OxJS has reactive primitives, which I guess is a better/worse version of boxed observables from mobx
You mean Svelte? https://svelte.dev/
ES6 most definitely *is* Vanilla JavaScript. Even ES2019 is Vanilla JavaScript.
Yes, learning by doing.
but when FW's change they cause a massive amount of problems also. I feel you have to be dedicated and vested into framework just about as much as you are with your own product sometimes. &amp;#x200B; Personally I did some work on micro services and a framework is unnecessary, but for a comprehensive web app or a poc, mock up.. frameworks are the best things in the world
I think the answer here is to not align your code like this. It is * Subjectively * Ugly * Harder to read * Objectively * More effort (unless done by tooling) * Screws with diffs as additions/removals have to adjust the alignment On the "Harder to read" point, it is imo easier to scan either the names or the associated value/type, but much harder to read a single line. I instinctively get drawn into reading in columns rather than rows, and when trying to read in rows, you have to be careful to match things up correctly if there is a big gap.
Vanilla ES6 and Babel will get you anywhere you wanna go. I seriously love it to death.
You can't use tabs for indentation and spaces for alignment because the number of spaces required to align things is going to change based on the render width of the tabs.
I somehow agree. I have 15+ years experience with front and backend and of course I started with vanillaJS because back then there weren't that much frameworks. But I learned to write modular SPAs with micro frameworks (I recommenf http://microjs.com/# as resource) (e.g. for routing) and vanillaJS. It was fun but I clearly go with VueJs nowadays. BUT to know all the stuff about vanillaJS clearly a huge advantage even when I work with a framework.
Question: does Mobx let you easily create observable using observers like ox( [https://github.com/jfet97/oxjs#observable-observers](https://github.com/jfet97/oxjs#observable-observers) )? Is there anything similar?
In the case of node, you don't even need to do that, there's ts-node.
Depends what frameworks we are talking about. React and other 'virtual dom's are much more than a wrapper on top of getElementById...
&gt;I'm surprised that a lot of people writing VanillaJS don't know what the kernel does underneath the browser ( tongue in cheek). I feel like it's good practice to understand at least a step or 2 above and below your level of abstraction
Yeah, I think ```js const source$ = ox.observable({ foo: 42 }) const fooMinusOne$ = ox.observer(() =&gt; source$.foo - 1); ``` would be the same as ```js const source$ = observable({ foo: 42 }) const fooMinusOne$ = computed(() =&gt; source$.foo - 1); ```
Also, I just wanted to add that the bundle size of OxJS is 15 times smaller than mobx (3.4kB vs 52kb) so I'm definitely a fan!
It has but it's quite limited for regular applications. Let's say you have Angular with dependency injection, and a halfway complex project. You wouldn't even get correct 'jump to definition' in a lot of cases. For most frameworks you have a starter with a transpiler in place. For node it should be even more simple with ts-node or smth like this
Exactly. People seem to think you're writing only Angular code if you're using Angular. I can not think of a single JS keyword, syntax, object or whatever that I am NOT using while writing an Angular application. Angular is all that and more. "Oh you're Angular dev, so you don't know what a function is" what the fuck?
Thanks 😃
&gt; it's not marketable because constructing an application like this, big or small, isn't feasible and no one would do this in production, or god forbid in a team Seems like an overstatement. I like frameworks and what they being, but you can absolutely build without a framework and have it be manageable. That's how frameworks get invented. As to it being done in production, I'm willing to bet it's done a LOT more than you think
I believe the major driver for TS was Microsoft maintaining huge js code bases. IDEs rely heavily on strong typing to determine what's what when autocompleting and especially refactoring. Without static typing, you have to rely on regex which becomes unfeasible for a large enough codebase.
For my personal project, I tried alot of framework because I really wanted a shiny single page application. But it was not suited best for seo so I had to rethink everything. Turned out regular vanilla js and multiple html pages were much lighter/faster/easier. Had alot of fun learning angular, but I think people's usage of framework is often overkill
There's no such thing as classes in Javascript. ES6 introduced the ability to use the `class` keyword as syntactical sugar, but it's still prototypical inheritance under the hood. You can create a "class" by using the `class` keyword: class Person { name = null, constructor (name) { super(); this.name = name; } }
Alright, I've somewhat simplified it. It's still way more complex than your dead-simple observer pattern, but being this simple wasn't even my intention. &amp;#x200B; There are two things that I got rid of, because I didn't see much of a value in them. 1. Children matching, eg. Evnt.on("item:\*", callback) 2. Pause/unpause Removing children matching got rid of forced name/path format. I couldn't think of any real-life scenario where pausing/unpausing would significantly help. &amp;#x200B; On the other hand I've added these methods: 1. has(name, callback): boolean 2. list(name): { \[name: string\] : map } | Map&lt;(event: event) =&gt; void, { ctx: data, once: boolean}&gt; 3. count(name): number
Vanilla is ok in general, just very annoying to deal with. I did a small project recently, probably under 500 lines, and stumbled upon so much inconveniences from no arrow functions to different DOM selection mechanics and entities. It's great when you absolutely need to produce a compact cross-browser lib though.
Good luck with IE.
Hi /u/TheMadScripter, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Some of theses might be useful. https://mitmproxy.org/ https://www.charlesproxy.com/ It you want to go really deep: https://www.wireshark.org/
This is interesting to me. I'm also a blind programmer. I use good indentation religiously, because my screen reader indicates the indent level with audio tones. This makes it very easy to track nesting, just as indentation does for sighted people. The way this indicator works is based on white space, though, so two four-space tabs and eight actual spaces are the same level. The problem is that the audio tone is meant to change when the indentation changes, and two tabs is different from eight spaces. Thus, I hear the tone when moving from one line to the other, even though they're at the same level. Thus, white space consistency is the key for me. When you say your screen reader is faster with spaces, what do you mean? "tab" and "space" take about the same amount of time to speak as you arrow past them, and the space is shown the same in braille, if you use a display. I'm trying to work out how spaces are faster for you. I'm on NVDA on Windows if it matters.
Spaces are faster because it generally ignores spaces altogether unless I explicitly navigate by character
It ignores spaces, but not tabs? You mean it reads the tabs, or indicates the indent level? Which screen reader is this?
It reads tabs Voiceover
Same here :(
I’m a blind coder. I work mostly in Python, PHP, and JS. I work on code with two other developers, but rarely have interactions with code outside of my job. I use a screen reader, NVDA, that indicates indentation audibly. I thus find it very helpful to have good indentation, be it done with spaces or tabs, for tracking nesting. I find this debate interesting. I prefer tabs, because there are far less of them to arrow past if I’m at the start of a line and need to get to the start of the text, past all the white space. However, with Nano and Notepad Plus Plus, this isn’t a problem. The Home key can jump between the two points on the line, so at worst, I have to press Home twice. Tabs are easier to remove, since you have to backspace only once, instead of two or four times for spaces. However, in Notepad Plus Plus (my editor of choice), shift-tab will outdent. This also means that both are easy enough to work with when you want to change the level. Tabs are faster to insert than a bunch of spaces, but NPP will handle that as well. It auto-indents most of the time, and I believe the tab key can be set to insert a set amount of spaces if I want it to be. I prefer tabsfor the reasons put forth by OP. I’m the only coder on our team with special needs, but because I have those needs, I know what it’s like. I’d rather we be more inclusive, ready to accommodate a new hire who wants to change the tab width, than that we adopt spaces just so we can align variables based on the variables’ names. Actually, that still confuses me. Do people really do that? Do they indent a different number of spaces than the code base’s indent level, just to line words up perfectly? Why would you do this and not just use indenting? What happens when a variable changes, or you have to add a new one? How and why is this a thing? Do I not understand what’s going on? Anyway, I can’t come up with compelling arguments for spaces, and since tabs are more flexible, I see no reason for my team to change now. I’ve always used tabs, because they were easier to manage years ago when I was using Notepad. Nowadays, I use them because I always have. Turns out I was right to keep using them, given the work we do and the fact that we’re so small, we can set our own standards and style choices. We may as well be ready to bring on someone who finds tabs to be an accessibility feature. My main annoyance is mixing the two. NVDA plays tones to indicate indentation; the igher the tone, the more indented the line is. If I read a line, and the next line I read is at the same level, no tone is played. This makes skimming through code to find the next indentation change easier. However, if a line is indented with two tabs, and the next line has eight spaces, NVDA sees those as different. It will therefore play the same tone, but on each line, making me think there was a change if I’m moving quickly. It’s annoying, and I’d rather avoid it. Finally, a couple random thoughts. First, I love Python, and I use it with tabs. No problems so far, though I don’t use any linters or beautifiers on it. Second, I use Notepad Plus Plus because I have yet to find an IDE that’s fully accessible. None of Jetbrains’ software is even remotely usable by screen readers, VS Code is a web app with a lot of focus/navigation problems, and I’ve not gotten far with the others I’ve tried.
Ah, that explains it! :) Help for punctuation pronunciation is coming in 10.15, but sadly, no changes for white space or audio indentation as far as I know.
To this day, I still haven't figured out how to write in Vanilla JS without ending up with an unmaintainable heap of spaghetti. There's a distinct lack of guides on how to properly do that. Do you reimplement MVC / MVVM? The usual "do DOM mutations in event listeners and read state from the DOM" approach usually ends in disaster.
I've see css many times where everything was based on IDs, they'd repeated styles multiple times for similar elements and wrote everything on one line with important tags everywhere.
Mounted a **[campaign](https://groups.google.com/d/msg/humanities.classics/dnNzBlHIbhI/FMslyDD8CAAJ)** for university Classics departments to offer a course in **[JavaScript](http://ai.neocities.org/Abracadabra.html)** **[artificial intelligence in Latin language](http://rodneybrooks.com/agi-has-been-delayed/#comment-18915)**.
I would disagree most you can't queryselector your elements attach eventlisteners and rely on others from spreading data through you app. When you use virtual dom you lose lots of the built in dom and actual css
I use PHPstorm and IntelliJ a lot. PHP does a LOT more than PHP btw, if PHP is your only backend language then you could easily get by with PHPstorm as your only IDE. I also have pycharm and Intellij. Prolly don't need pycharm as I rarely use python these days but it's free and I like jetbrains. If you're doing anything with java tho Intellij is awesome sauce.
no you can't just use pycharm for both javascript and python. Pycharm is made for python and webstorm is made for web development. if you want to use a single IDE look into vscode or atom they're both great with plenty of plugins
If you use VSCode as your editor, you can turn on live type checking for your JavaScript with this: // @ts-check. This will give you linting of your types as you write the code, along with code completion, etc. One thing, it will use type inference to understand the types. This is not very accurate, but you can provide JSDoc comments to make it very accurate. I wrote an article about how to do that: https://medium.com/@trukrs/type-safe-javascript-with-jsdoc-7a2a63209b76
https://vim.fandom.com/wiki/Converting_tabs_to_spaces
Wait npm actually caught a malicious package? Is it April fool's day or something? 🤣
So... pushd and popd?
I think many people in this thread are missing the point. I chose vanilla because it was the best design decision for the level of complexity the extension will have/who I am working with.
This is because the possibility of using JS without a lot of library / framework support is a very recent thing.
Strictly speaking. Just writing whatever works in chrome. I just didn't want to use a transpiler. Didn't want to scare my buddy his first time
I made a [bac calculator](https://drunkcalc.com) webapp that can estimate how drunk you are. I've been working on it for a while but finally have it ready to go. Any feedback would be awesome!
I love how everyone feels the need to explain everything to me, that should be implied by the post.
Meh, you could always have it thrown at you one day
Not at all. The goal here was to say hey sometimes you don't need a framework or anything fancy. TBH I'm still using arrow functions and some other syntax from ES6 because this will just rub through chrome. I was saying I made the decision to write the simplest 3 or 4 file JS web pages and that's it. Hell the node microservice for this app I already wrote in TS.
Sorry but I will disagree on this. If I decide to compile a typescript (or any other type-safe language) library down to JavaScript and use just that, then I should willingly face the consequences of that choice. I would not burden the library author with this kind of edge cases that are impossible in the language of choice
Jetbrains IDEA has plugins for node and python.
Indenting is a form of alignment. When I think of something that might be an edge case I think of something like this const someVar, ----_someOtherVar, ----_anotherVar Assuming tabs are 4 spaces then that alignment would require 1 tab and 1 space right next to each other which I think is messier than just having 5 spaces. Obviously that specific example isn't a good idea to do in the first place but I'm not convinced something similar doesn't exist in a more legitimate example. If you use spaces then there is no edge cases to worry about because spaces can do it all no problem. Tabs can work in most situations, sure, but why bother? Why use something worse if you don't have an accessibility issue?
I agree. My first job out of college I got to convert some flash games to HTML5. I was the only person assigned to the project because the company was full of Java developers who viewed JS as a burden to be avoided at all costs, and I got to start from scratch. &amp;#x200B; I wrote the entire suite of games using only VanillaJS - not even JQuery - and nobody bothered me about it because I was delivering and nobody else was getting "tasked" with working on the project. I learned so much from that experience that has helped me grow and adapt to any other framework or project I've worked on since. &amp;#x200B; Now I use Angular and TypeScript on a daily basis, and I can say that there is a big difference between code written by people who know what the language does out of the box, and code written by people who only know the framework. &amp;#x200B; And nothing will increase your productivity and debugging skills like knowing the language. &amp;#x200B; Enjoy the journey!
Hi Sam, sorry for the late reply. Is the blog post linked above to hard to follow? If so, I would recommend going through some basic course on machine learning that introduces decision trees. There are plenty of those available on youtube. The introductory material is usually not very math-heavy and this could suit you well.
i have taken ref from here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes
Polymer is a framework and does not even consider itself ”vanilla”, as vanilla is not performant enough. Same goes for lit as it abstracts the rendering and the lifecycles of ”web components”. Lit-html is a renderer and lit-element is a base class abstraction. Neither is ”vanilla” to me in any more sense than any other library or framework. Then as other argue if you should even refer to the web API’s as vanilla JS to begin with.
Involving a transpiler and possibly a few polyfills for IE doesn’t magically make it non-vanilla. You’re still writing plain JS, and using native DOM APIs.
It's great you are learning! Everyone should learn something every now and then (preferable now :P). But I don't see any problems using new features EcmaScript standard has us to offer. Except of course for times when you want to learn how things work (in which case I suggest you to check out `corejs`). Otherwise Node.js and all recent browsers support pretty much everything (we are talking `#` private fields even in recent Chrome release going native).
It is.
How is vanilla not performant enough? I can write vanilla code that will blow away any framework as far as performance is concerned.
Hi thanks for your suggestion. I will work on the items that you have suggested.
I got my recent job without knowing react/loopback which is their stack. I was able to show that I can learn very fast. And indeed I've made my first PR inside the company in a matter of first 2 days :P
Except that you can write a book describing what this line of code is doing (or will do) in javascript: ```js myObj.getProp = {}; ```
What do you call Vanilla? Arrow functions are long ago supported by everything.
Well. since browser support isn't the defining factor for the EcmaScript standard, ES6+ is indeed vanilla. Even new `#` for private fields is vanilla. PS. Sorry
Everything defined in EcmaScript standard is vanilla. `async/await` is vanilla.
How can you prefer one EcmaScript standard over another? Dates and content of those standards somehow matters to you? You reject the newer version of the standard? I don't get it, please explain to me.
Direct competitor for the older [vanilla-js](http://vanilla-js.com/). What are the benefits? Can I select what do I want to bring in like I can in that website?
What a gross fucking name
Well a concrete example is that in my model library all properties of a model are observables, so good.list will return a mobx array but it can be assigned a regular array and it'll be transformed into an observable bound to the model. The getter and setter types don't logically map but this distinction can't be set via Typescript.
After such interview I would assume that if candidate knows what the closure is and can define and write higher order function, he will definitely get started with React (or anything) in a matter of hours and make his first PR in a few days. Understanding core principles is beneficial over hard-learned framework specific APIs.
Vanilla has no frameworks. It's the way around. Frameworks are using the language. Just saying.
Woops scratch that, part of my first thought train.
Not saying I agree with most of your points but you're right that it's not entitlement to ask someone to address your points.
That's why I'm asking
That’s awesome! :)
Lol no problem
Frameworks are an evolution of abstraction. Your plain old js app will eventually acquire enough abstraction, if it grows, that it will start to resemble a framework. If you want a simple framework, a haflway point between plain and Angular, checkout Svelte.
So could we just stop here and agree everything is vanilla except for Dart and WASM? Because React or Vue is still a bunch of libraries written in JS, and TypeScript or Babel also just drops several polyfills and ties the result into plain JS.
IE11 is definitely want to have an argument with you. I call vanilla any ES spec supported by every major browser line. If we want to go further it's too easy to consider just about anything "vanilla", except maybe Dart and CoffeeScript. From the author standpoint I guess he means more frameworks-less code, which I found to be much more "vanilla" than said TS, as it is just a bunch of libs dropped in vs a pretty strong language extension.
I think you forgot the most important thing: the code. Have a look at the source code. Is it minified/scrambled? If yes, try to reverse engineer it. Do you see what (if any) frameworks/tools/transpiler/bundler they used? Do they use any external services/APIs/CDNs? Make a general assessment of their code base.
On its own, it might not be as marketable to certain organizations. However, ones that understand that if you truly have a grasp on the language and concepts you can learn any framework, it is very marketable. I’ve found most larger organizations, Amazon, Microsoft, etc understand this. Smaller ones, right or wrongly, tend to be very focused on their tech stack of today.
You can open the console on your browser and start playing. I think the best place to start is with YouTube. There are a lot of good quality tutorials aimed at beginners on there.
Nice UI, but I'd be REALLY careful how you word the results.
https://medium.com/better-programming/learning-how-to-learn-javascript-1989eeae2122
&gt; Is it minified/scrambled? If yes, try to reverse engineer it. Do you see what (if any) frameworks/tools/transpiler/bundler they used? Do they use any external services/APIs/CDNs? Make a general assessment of their code base. Thanks a lot. &amp;#x200B; using Google Chrome Audits gives me insight about how the website preform ( performance, accessibility, best practices and SEO) currently i can see the weakest point at this website is the performance as it has 42 score! &amp;#x200B; i will deep dive into their code to check what they use and i will mention it.
This looks interesting. Saved so I can check it out when I'm back at my laptop
Try this site: https://mentors.codingcoach.io/
Made a clock: [https://codepen.io/Vosmonster/pen/OeodBa](https://codepen.io/Vosmonster/pen/OeodBa)
Introducing the eye-catching carousel component Flicking \- [https://medium.com/@jongmoon.yoon/introducing-the-eye-catching-carousel-component-flicking-724818d0a678](https://medium.com/@jongmoon.yoon/introducing-the-eye-catching-carousel-component-flicking-724818d0a678)
If you have PyCharm you already have WebStorm. Same goes for IntelliJ, RubyMine, PHPStorm, GoLand etc, with exemption with CLion I think.
Don't rely on tools that much. Everybody can use some tools to assess a website. Show that you understand the actual code.
YouTube Brad Traversy and start with his beginner JavaScript playlist.
Hi /u/Labby92, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Both MDN and the above user say the same thing... its syntactical sugar
Hate him, why?
My IDE can edit JS or Python with intellisense when needed... but for IntelliJ related questions maybe their own subreddit is more helpful: [/r/Jetbrains/](https://www.reddit.com/r/Jetbrains/)
So JS doesn't have a compiler?
www.freecodecamp.org
You should use Webstorm for complex javascript projects. Pycharm works good with node too, there is nice support for it and enviroments and plugins that you can configure
[removed]
Try watching some of The Coding Trains videos. You can learn a lot of the basics there.
No. JavaScript is interpreted at runtime. However there are transpilers like Babel which will allow you to use newer language features on older browsers that don't support them, by converting your code to an older version of JavaScript. There's also TypeScript, which is an alternate syntax which adds type safety to JS and is compiled to JS. But to learn, you should just use a REPL like your browser console, or write some simple scripts and run them with NodeJS in your shell.
Check out [codecademy](https://www.codecademy.com)
Vanilla js just means code you can use without getting dependencies first.
&gt; auto-compile my TS so I can instantly test it, which is the only way it'd be usable IMO. Just use ts-node-dev while developing, that's exactly what it's for.
It's pretty much a scripting language. There's no compilation step like in C++. Modern JavaScript engines do compile parts of the code at runtime, but that's not something you have to deal with.
JavaScript favors syntactic sugar over verbosity, so I feel like arrow functions are the name of the game
This is pedantic, I suppose, but in my view a framework is a set of libraries that are made for each other. Say I need a login form, and a password reset form. I could get a specific library for that, but often in frameworks that's already rolled in.
&gt; where is the sense in that? Longevity and portability. document.getElementById() was around before JQuery, and will be around when JQuery is gone. Same with any other framework.
Fat arrow functions are not only sugar. They allow you to use the same scope, so the fat arrow function does not have an own "this" object.
Hi /u/C0nst4ntin, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
So do you use the library as is? Or do you fork it? In either case, that code is part of your solution, whether you've read it or not. Bringing in 3rd party code has its upsides, but it's still a technical liability.
I am OK with that. But what about readability? Fat arrow functions feel like they need deciphering. Also, optional parenthesis, optional curly brackets, optional return. All these slow down someone who tries to understand what is going on.
Fat arrow functions fit better on my phone screen. Sincerely, an iPhone 5s user.
Sorry you need to get on the train because it's leaving without you
Made a site to manage your configuration files. https://DropConfig.com
Good job and nice to read (chapters I read at least 😁)
how about autocomplete?
If you don't mind me asking whats the difference between the free version and paperback one?
I think its because a lot of web devs didn't start with a traditional CS background. They learned html and enough js scripting to make things work on their own, made a couple cool websites that worked well enough, and now don't understand why it's unmaintainable.
Thanks a lot, glad you are enjoying it
[What in the goddamn hell are you talkin about? ](https://youtu.be/6JUQCyx58Ik)
I don't think you understand. Javascript doesn't consider calling a method incorrectly (e.g. using an incorrect number of parameters) a bad thing. Consequently nothing is thrown for the catch block to catch anything. It's just a silent error.
Thanks for putting that together and sharing it with everyone
That's you, I find them more readable. There's no correct or more readable way to write functions because different ways of writing are either more or less readable to different people.
Inspired by a talk on UI design where the speaker asked “what is the perfect UI for a shovel? Should it have a large handle and a long shaft? No, the perfect shovel UI is a hole, already dug where you needed it. The perfect UI is invisible.” https://www.youtube.com/watch?v=EuELwq2ThJE
Arguably the most important thing Angular/React/Vue does is manage the DOM. Writing to the DOM is slow, and these frameworks fight this problem by controlling when the DOM gets changed and (oversimplifying here) basically bundling changes together at a time to keep things fast. It's way more than extending document.getElement.
I use IDEA Ultimate for everything not C# based - JS, Java, Ruby. I think the way it works is most of the features of most of the standalone IDEs are plugins for IDEA Ultimate (and possibly IDEA Community, I'm not sure). In fact, it's outlined here: https://www.jetbrains.com/idea/features/editions_comparison_matrix.html
Can anyone explain why this is getting downvoted please?
Any time you use “feel” to describe what’s wrong, you are talking about something you personally, subjectively experience, and you should expect many, if not most, to feel the opposite. Any time there is a choice between possible ways to do something, there will be arguments about how it ought to be done (tabs vs spaces). Fat arrow functions have distinct, non-subjective advantages in several areas, which is why most are moving to them, and they are standard. You will do well to force yourself to get used to them, just as I have been forced to get used to things I subjectively dislike.
&gt; What a gross fucking name Not everyone in the world speaks English. Just because a word means something in your native tongue doesn’t mean that it’s the same in another language. My native tongue is English but I speak Swedish, Dutch and I am learning Russian. There are many words that while “gross” in one language could mean something beautiful in another. I have asked the creator about the name and I can assure you it’s got nothing to do with human phlegm. The point is that you exhibited such limited line of thinking with your comment that it rendered me with an aneurysm brought on by daft cunt abundance. Either way, it’s a shame your mother didn’t swallow you.
Yes, I know javascript has a try catch block. I'm saying that it doesn't catch everything. Specifically, calling a method incorrectly in Javascript (e.g. calling a method with the incorrect number of parameters) doesn't register as an error to any of the javascript engines I'm aware of. Consequently nothing is thrown for the catch block to catch anything. it's just a silent error.
I use it as is, don't have the need to fork it. What kind of liability do you specifically mean?
We really need stackable important tags... Otherwise, how will I tell CSS which rule to use if they are both marked important to begin with? /s
Is that not just a Typescript feature?
Sorry dude. You’re gonna have to get on board with ES6. Took me a little while to get used to it but once I did I found it more readable than regular functions.
When you Google 'is CSS importanter a thing?'
Eh just pick it up if you ever get a job that requires it, otherwise nah
Svelte, as has been said. There's an inflection point at which it becomes more expensive than a runtime. I don't know where that inflection point is. Also Stencil, for web components, compiles away. The dev experience for both of these compiler frameworks is pretty great. The tooling for svelte has a way to go yet, though. I can heartily recommend both of them.
I'm glad it can help:)
&gt; doesn't register as an error to any of the javascript engines I suspect that, according to the spec, this is not an error. If you call a function with 3 parameters and it requires 4 and it doesn't throw an error that's bad coding, not the language's fault.
Looking at your post, it seems like you are a bit confused about how JavaScript works in general, which is absolutely normal if you haven't worked with at least a couple of different languages and environments. So I'm gonna try to help you with that and let the others recommend you websites to learn JavaScript. So, first of all, JavaScript is a scripting language. This basically means that the code you write is sent to a running program (called the run-time environment) that uses it to execute tasks. So, answering to your question, there's no official program to write or execute JavaScript, you only need a program that is able to understand (interpret) and execute it. JS is considered the scripting language of the web because all modern browsers are such programs. Web pages are written in a language called HTML, inside which you can write scripts in JS that your browser then executes when the page gets loaded. This basically means that if you want to execute your JS code, the only thing you need is a normal browser like Firefox or Chrome. Open the one you like the most, press F12 (maybe F11 or F10) to open the developer menu. Then, go to console and you'll find a fully functional JS environment. Here you can write instructions directly to the browser. Try writing alert('hello world'), press enter and see how your browser executes your task. Of course, this is just a way to get in contact with the JavaScript core if you've never done so, but it's completely useless in terms of usability, you cannot write code here. If you want to code something bigger than an alert, go an check out the websites they've recommended you in other comments.
[removed]
Hi /u/C0nst4ntin, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Nope, arrow functions have always had lexical `this` since they were added as part of ES6.
Yes it is bad “coding”, but in every other language they let you know when it happens. It’s a. Extremely obvious error and the runtime should let you know when it happens. JavaScript is powerful and it has a lot of good things about it, but silent errors is not one of them.
`get name() { return this.name; }` yikes
learn jest and mocha - https://jestjs.io/ https://mochajs.org/
that code is completely broken.
Wrong link. Goes to the image instead. Interesting project though. Might play with it.
All parameters are optional, you can get the parameters in the args array Sounds like you're just used to typed languages
This. Webstorm is essentially the “base”. So PHPStorm is Webstorm + PHP. Psych arm is Webstorm + Python. If you use some other language, just use whatever IDE for that and Webstorm functionality will be along for the ride.
Because "Reddit"! :D
It’s very wrong. Pycharm includes Webstorm functionality.
Nice work!
FunFunFunction did a good video about TDD: [https://www.youtube.com/watch?v=k\_T\_iuvV-i0](https://www.youtube.com/watch?v=k_T_iuvV-i0)
I've found that even without enterprise-level projects, the type safety of using TS not only makes my code easier to reason about, it also makes it more robust. Compare the following function signatures `calculateTrueFieldOfView(eyepiece, telescope)` `calculateTrueFieldOfView(eyepiece: Eyepiece, telescope: Telescope): number` You have absolutely no idea what the structure of `eyepiece` or `telescope` should be in order to calculate the true field of view of the eyepiece/telescope combination. *What* is `eyepiece`? What properties should it have that the function is dependent on? Well, when you add types to it, you are handed that information on a silver platter. "Oh, I see, there is only one valid type of object that can be passed into the `eyepiece` variable." So you just new up an instance of `Eyepiece` or create an object literal that adheres to an `Eyepiece` interface, and now you're good to go. You don't have to open up `calculateTrueFieldOfView` to read the sourcecode to understand how it's using `eyepiece` and `telescope`. You literally just have to read the typed function signature and you have all the information you need. The same is true of the return value. You don't need to look at what it's returning, you can just look at the typed return value to know what to expect from its output. To me, this is invaluable to helping me understand a codebase. It's true that TypeScript doesn't do any runtime safety checks since it just compiles to plain JS, so you can still shove a bad argument in at runtime (e.g. creating a bad object from API, DB, or user input data or what not), but at least during development, you can catch *significant* numbers of problems *before* executing the code. When designed right, this means that you can basically make your whole domain model and the business rules it satisfies, bullet proof. Then you only have to worry about the runtime transition boundary between API / DB / user input data, and your domain model. Catch bad data errors in that transition boundary, and then your domain model can exist in a pure state that will as reliably at runtime as it does at compile time.
I’ve used python and ruby extensively. They will complain if you call a method incorrectly. It’s bad design when a runtime doesn’t enforce a contract. Why bother having a method signature then? Sounds like you never used anything other than JavaScript
&gt;Sounds like you never used anything other than JavaScript You assume too much.
Yeah but only a cunt would write code like that. No one should be writing "clever" code. Write simple, readable, maintainable code. Source: Old guy who's been doing this a long time.
The number of spaces required to align things does not change based on tab width. If it does, then that means you have put spaces in your indentation whitespace or tabs in your alignment whitespace.
It’s a pretty good assumption, when you think this is a design “feature” of JavaScript. It sounds like you’ve never worked professionally for long in another language. You know especially when it’s only JavaScript that does this. Even VBA doesn’t do this. It’s not like you’re doing anything to disprove my assumption either
[removed]
Hi /u/RasaTamil, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It seems you've confused "this is possible" with "do this"
This is perfectly reasonable code to write for something like a utility library or low level utilities in a large app. However, I would comment it very well somewhere in an attempt to make it readable or more likely look for an existing implementation of the functionality in an existing library such as lodash. Read the source of libraries like lodash, perhaps things that are more recent?, and you will likely learn more of this kind of code. Most JS programmers don’t write or grok this stuff so definitely “hide” / sandbox it away from logic which “does stuff”.
No I haven't. I've been doing code reviews for over 20 years and you'd be amazed how many people like to write "clever" code.
Wow, I can’t believe you’re calling someone a cunt because they’ve realized some of the power of newer constructions in ES. Should we throw away Symbol and generators and async / await, etc? Source: Old guy who tries to keep current and embrace new paradigms in a language that already wants you to think about there being different ways of doing the same things, then decide for that case what the best way would be.
Maybe you need to reread my comment because you're claiming something I never wrote.
There's this [Gentle Introduction to Javascript TDD](https://jrsinclair.com/articles/2016/gentle-introduction-to-javascript-tdd-intro/), and I also like [Exercism.io](https://exercism.io) for actually practicing TDD methods. (Full disclosure, I volunteer as a mentor on Exercism)
&gt; It’s not like you’re doing anything to disprove my assumption either 1. When people tell you you're assuming too much, believe them 1. There's decent odds I have more professional development experience than you 1. More experience doesn't mean anything in this context 1. Why do I have to prove my experience to you? Sounds like you just wouldn't believe me anyway Muted.
That's really cool! Maybe you could create some presets, though? And while I haven't browsed through the code, I'm pretty sure you could make it more appealing to your average Joe with a canvas animation of some sort.
I implemented FirebaseUI Auth to my VueJS project this week and I found it’s quickest way to add sign in flow to the project including OAuth providers...And wrong an article before forget and moving on to other part of the app I am currently building... [FirebaseUI Auth for VueJS ](https://softauthor.com/firebaseui-auth-for-web-vuejs-with-facebook-google-and-email-sign-in/)
Amateur. I've been doing code reviews for nearly 200 years
I use VSCode for most of my development work. I installed Python extensions for Python works. And JS extensions for JS works. PyCharm and Webstorm are very slow on a 16GB ram macbook. VSCode seems fast for what I do.
I think you’re likely being pedantic but I have edited my post and hopefully it no longer makes you feel that what you wrote was mischaracterized. Cheers!
I think the idea would be to use spaces completely in that case, because it is not indenting, but alignment. (Or just double-indent, and not try to align words, which I think we both agree aligning words is just troublesome over time.) The other reason, as mentioned, is that then each person gets to see indents at the level they prefer. That may or may not be a good enough reason. So on one side we have "there may be cases where mixing causes problems" (or there may not) vs "people like to see indents differently (accessibility or not)". Yeah, weigh those how you will, YMMV etc.
cross platform? It runs in a browser except for node, isn't it always defacto cross platform since it's a webpage?
In my opinion, and I'm assuming here that the interview is coming up quickly, it's going to be hard for you to "learn TDD" in such a short time frame. It's a discipline. So, I would suggest doing as much research as you can into TDD itself, and I wouldn't worry about the "in Javascript" part of it. My personal TDD "Aha!" moment came when watching Uncle Bob's (Robert C. Martin) bowling example. He uses Java in it, but for me, it was more of a "this is how TDD is valuable" moment, regardless of the language. That video is not free, but a cursory Google search shows several people doing the same thing he did. &amp;#x200B; Assuming your JS skills are up to snuff, I think that, coupled with the FunFunFunction video u/SimonCantan suggested, should get you to be able to speak to the "why" part of TDD that's sure to come in the interview. Good luck!
Oh my God, thank you so much for the explanation. I found a good course, and will start. Thank you.
"This is possible" was indeed the sole thrust of my post.
Too much dick swinging in here.
Thank you for sharing all your work! Your blog also looks great.
Goddamn! is this r/javascript or r/MurderedByWords
I would not say this about the title snippet. The variables are unclear and the destructuring unnecessary not only being more confusing adding 3 additional characters of syntax but also providing less helpful error messaging for improper usage (e.g. passing `null` for `v`). The other example provided by OP is much better, though I would replace `_` with something like `omitted` for additional clarity. Granted, it's probably not the best, but this is not an uncommon approach given the lack of a built-in pick syntax for the language. Though, in reality, I would have preferred the use of an existing implementation such as lodash's (the exception being, as you point out, if this _were_ lodash, or an equivalent).
Agreed
thank you for sharing your perspective very interesting that indentation is represented by tones with rising pitch, that sounds very intuitive &gt; Do people really do that? Do they indent a different number of spaces than the code base’s indent level, just to line words up perfectly? Why would you do this and not just use indenting? What happens when a variable changes, or you have to add a new one? How and why is this a thing? Do I not understand what’s going on? sadly, yes, some people do use spaces in order to achieve an aesthetic effect of a particular horizontal alignment it really is a bad practice, because of exactly the reason you suspected: whenever any refactoring happens, like changing the name of a variable, this will break the intended alignments a single rename could break hundreds of alignments throughout a codebase — that trauma needs only to happen once for a developer to swear off any aesthetic alignments for good the best practice is to simply use indentation, and luckily, it seems most developers are cognizant of this, and so alignments seem to be falling out of style cheers! 👋 Chase
Jus heard of that today. It really won't. The extension literally reads text from a screen.
&gt; The extension literally reads text from a screen. I think you're talking about something else.
Your initial comment was claiming that try-catch doesn’t work, and now your are just complaining about the fact that JavaScript doesn’t care about function parameters. That has nothing to do with try-catch. I think it’s you who does not understand.
Hi /u/LilacMum, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Good point and one I intended to address but neglected to. The better naming would help with making the code cleaner and reduce the amount of commenting needed. I thought that OP was just excited about coming up with the mental model that this was an *allowed* and possible thing and I don’t want to discourage exploration, inquisitiveness, experimentation, etc. :)
I would actually expect the opposite in library code. The example in my post doesn't really account for edge cases (what if 1st arg is undefined? or 2nd?).
That was in context of the application I am building. We don't really need much JS. It was in response for you saying the app will grow.
Sorry. My earlier comment implied / stated that you were calling OP a cunt. Now everyone knows what I did wrong and that you were totally right.. Thanks for the post review and your help in correcting my unclear syntax. If you can please just approve or decline the PR, I need this to get into QA so that it might land for the release on Monday.
If you want to do it, do it. Worst case scenario, you'll learn something. Best case, you'll discover your passion and then make a boat load of money doing what you love. Pay no attention to the people that "know what they're doing" on these posts. I'm a lead engineer with over 10 years of experience and I can't tell what half the stuff on these posts is about without doing research on it. Give it a couple years of learning and you'll be the one posting the stuff that everyone else is scratching their head over. Everyone, including me, feels completely lost sometimes. That's why we have these massive online suppport systems :) Don't worry about a degree or certificates, especially at this stage. Get enough skills to be able to do even simple things, then go to github.com and find a project you're interested in, or rebuild one of your own sites from scratch. You can use that as your portfolio to land jobs or become a freelance developer. There are not nearly as many women in tech as there could be. Don't let that hold you back!!! Sure you may run into some toxic situation just like any other job, but the vast majority of us are delighted to see and help women in tech. You're on the right track. Just keep chugging along and never be afraid to ask questions. We're all completely lost sometimes, have no idea what we are talking about sometimes, and don't have all the answers ever. Hell, we can't even figure out if we should use tabs or spaces for code formatting. All you need is confidence and passion and you'll do great. You'll never know if you love it unless you try. Good luck and happy coding!
&gt; Do you want to force everyone to voice-record all the code they wrote, so that blind people can read it? No, of course not well that example is quite a stretch, whereas choosing tabs for future projects doesn't seem to cost anybody any exertion for the benefits &gt; specially tailored software they can to make it look how they want it to the problem is that there are no good tools for reliably converting between spaces and tabs it's been discussed a lot elsewhere in this thread, but basically spaces-to-tabs conversions are problematic and error prone because of horizontal spacebar alignments which are unfortunately all too common — with spaces, we can't distinguish indents from alignments, and so the algorithm is liable to hazardously damage the code — switching back and forth between spaces and tabs is actually hazardously lossy, destructive to the code &gt; JetBrains IDEs for example allow you to convert whichever configuration of spaces to whatever you want visually. this isn't true, or at least, you can't do it safely or losslessly, so it won't fly with most teams spaces people are imagining that spaces can also be flexible enough, but that's actually the fundamental problem with spaces — they are completely rigid and inflexible — some perceive that "consistency" as a feature, but it's really a curse the dominant argument to continue with spaces, in this thread, has been an effort to imagine advanced editor tooling to trick spaces into acting just as if they were tabs — this snake eats its tail why consider spaces at all, if you want to retain any possibility towards tab-like flexibility? doesn't that subvert the reason for choosing spaces to begin with?
I find this perfectly readable.
Just want to point out that in many different languages, the underscore character is often used to say “I don’t care about this argument.” In functional languages, where your arguments would be curried or partially applied, using the underscore would indicate that the next argument coming down the pipeline should be applied *after* the underscore’s position, effectively ignoring the argument. I know JavaScript’s Ramda library has implemented something very similar in their partial application system. All that to say, if you’ve programmed in Scalia, ReasonML, or some other languages, the underscore would feel rather idiomatic.
Ah, thank you.
Ah I see. Yeah for your purposes es6 transpiled is perfectly fine.
&gt; there are visually-impaired people that might find using spaces better because their tools are configured for it yes, i'm sure that is true in many cases however it appears that in the long run, for more cases, tabs is the more flexible option &gt; They can use their IDE to format spaces-as-ident as they do with tabs. as discussed elsewhere in this thread, seamless spaces-to-tabs conversions are unfortunately not feasible, because such a conversion is necessarily potentially lossy and destructive to the code (because spaces cannot distinguish indents and horizontal spacebar alignments), and so the risk to most codebases is high (spacebar alignments are a bad practice but interestingly also a major reason people choose spaces over tabs) so this fundamental problem with spaces-to-tabs conversions is the reason that these editor tools do not exist, and when they do, they are dangerous, buggy, language-specific, and not recommended
OK, sure. I posted it because I found it interesting. I even mentioned that it's questionable to use in real projects. But what's important is you restated that point and namechecked yourself, and no one can ever take that away from you.
Try to manipulate dom elements.
let txt1_2=url.split('=')[1];
I agree with this advice (only I would say pick just one testing framework; they are all very similar in principle; and jest is a very good candidate). If, as you say, you have done \&gt; barely any unit testing then practice writing tests. \&gt; Basically where can I do some practice with TDD coding exercises? You can literally take any coding problem — from codewars or wherever — and solve it by first writing tests for your solution. (In codewars tests are already written for you, but you can write yours yourself). Testing is a very simple concept: you are proving to yourself that your code is actually doing what you expect it to be doing. With TDD, you just write these "proofs" first, and then write the code to satisfy them. For what it’s worth, very few developers in practice stick to this discipline.
Not exactly catching the point of this thread because it seems pretty obvious to be valid.
I don't think it's obvious at at all that argument N would be in scope when evaluating argument N + 1.
I think it's "less readable" because it is the newer of the two and you are used to the original way of writing functions. I think you're getting more hate than you deserve though.. Javascript is weird and that's kind of the point, you know it's trying to be a functional language nowadays, or at least read like one. I'm not particularly sure why ECMA has taken Javascript in this direction except that the applications for Javascript- you can use it for machine learning, server-side apps, it's great for web scraping, etc. - beyond "making webpages do fancy things programatically" and the kind of broader direction languages themselves are moving, calls for it. Yeah, Javascript is kind of the leading edge of all this syntactic sugar/functional feel, but languages like C#, Java, and Python have either had similar things or are getting them. I work with C# and Javascript at work, and we often talk about how C# is getting more like Javascript and Javascript is getting more like C#. TLDR: Javascript is the trailblazer but many/most languages these days are moving in a similar direction.
Think this might answer your question: https://stackoverflow.com/questions/29971898/how-to-create-an-accurate-timer-in-javascript TLDR: setInterval isn't accurate, but if you set it to poll Date.now() on a millisecond basis, you can get second accuracy
I would recommend you to use VSCode instead of PyCharm and WebStorm, nothing against those two (or any other JetBrains products), they are awesome! But if, as you, want or have to use multiple programming languages in one project, you either have to buy and use multiple IDEs, because PyCharm has limited JavaScript abilities and in WebStorm you can't install the Python plugin ot you just by IntelliJ Ultimate. But even than, on larger projects it can take PyCharm (and others) a while to "index" your project - specially if you have not so much RAM. I've worked on the PHP Magento WebShow of company i work on and it take PhpStorm about 5-10 Minutes to index the project, after every reboot, git pull, etc. very anoying ... And VSCode solves all the issues i had with JetBrains Products - faster loading of project - support for every language you can dram of - great IntelliSens, specially for JS / TS and very fast in general.
&gt;EDIT: "This post is obvious to me therefore it is useless" Never said it was useless. Just wanted to better understand.
[qs npm package](https://www.npmjs.com/package/qs)
Honestly VSC every time, forget Jetbrains.
Generally speaking you shouldn't be taking variables directly from the URL path as users can modify it. Also worth noting that you should break up the variables in the URL if they are separable i.e. "https://example.com?fname=text1&amp;sname=text2 " for a first name and last name. However the solution for the question as originally stated: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;script defer&gt; // Define anonymous function to be called at page load window.onload = () =&gt; { Object.assign(this, { // Names from our url names: {}, // URL parser function parseURL: () =&gt; { let urlParams = (new URL(document.location)).searchParams; let names = urlParams.get('q'); // Return an empty object if the url contains query param "q" if(!names){ return {}; } //Otherwise try to extract first name and surname from "q" via a regex let nameExtractorRegex = /^([^_]+)_?([^_]+)?$/ let matches = nameExtractorRegex.exec(names); return matches ? {fName: matches[1], sName: matches[2]} : {} }, // Function to insert parsed names into the DOM displayURL: (firstName = 'Unknown', secondName = '') =&gt; { let element = document.getElementById('textDisplay'); element.innerHTML = `Hello, ${firstName} ${secondName}` } } ); this.names = this.parseURL(); this.displayURL(this.names.fName, this.names.sName); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Example:&lt;/h1&gt; &lt;h2 id="textDisplay"&gt;a&lt;/h2&gt; &lt;/body&gt; &lt;/html&gt; The above should work in all modern browsers.
Still working on a Javascript based simple 2D MMORPG that's in open beta. [https://play.consty.com](https://play.consty.com)
I think the problem mainly comes from a historical reliance on frameworks to get anything done. Go back a couple of years and the only way I could describe JS is "incomplete": it lacked far too many basic helper / utility functions despite being a high level scripting language.
i come from c++ is this the one i should use to get started ?
Still working on a simple 2D MMORPG that's currently in beta. [https://play.consty.com](https://play.consty.com)
So assuming I may bundle TS transpiler to the runtime (just one more polyfill, eh) TypeScript is vanilla js. Not that I’m too picky but sounds a bit weird.
I have no idea if people say that specifically, but there are definitely tons of people who fancy themselves "web developers" who literally can't do anything with CSS without Bootstrap. Take this "web development manager" I work with. He barely knows jQuery, doesn't seem to know anything about CSS outside of Bootstrap, and believes PHP is a good choice for developing a webapp in 2019. And he doesn't even know Bootstrap because he tosses "!important" all over the fucking place instead of using the Sass build system to customize his Bootstrap build, which kind of seems like table stakes for "knowing" Bootstrap. Fuck, I know that shit and I don't even use Bootstrap!
Does the client side only runs in a browser? Why do you say that?
Well, yes, the client side does indeed pretty much only run in a browser. JavaScript is the logic language developed for browsers by standard.
You’re right. It’s such a heinous design decision that I couldn’t deal with the fact that it was planned.
Thats not what I mean. As Electron and NW, it does come with a built-in browser, you build your app and have a standalone executable. You don't need to open it on Chrome or Firefox.
vscode all the way.
How much JS knowledge do you think I should have before starting to learn a framework?
Lol you’re so angry, you must be an angular developer
I’ve never had any issues with it, and before ES6+ it was necessary in order to implement optional and variable arguments. The flexibility of JavaScript is always what appealed to me. Just because you aren’t comfortable or capable of effectively working within the constraints of the language does not mean it has a bad design.
IAM is for user management within your AWS account. Probably don’t want to use it as your user data store.
Nice...saved!
Oh man, i tried to use regex so many times, did not work ever :D always went for other ways to solve it. I just can't grasp it. Thanks for the article, i learned something :)
Don't give up on regex, it's way too commonly used to not understand.
OP, your .test() example is missing ending quotes and won't run.
You don't have to be afraid. If you understand JavaScript, you can understand a lot of JQuery quickly. It's fine for normal to small sized code. Sometimes I use in in the JS REPL on pages I didn't author -- to simplify what I'm doing. 1. understand how CSS selector works (this is for both) 2. understand DOM manipulations have a high cost (this is for both) 3. cache DOM queries if possible. Like do not do $(".username").foo(....)
Cheers dude, fixed it ;)
You wrote about 150 words more than necessary
Thanks mate, appreciate it! My advice would be to start simple with regEx, you'll probably surprise yourself as to how quickly you get into it. Glad you got something from it though
I would be surprised if the interviewers will be looking for actual TDD vs just making sure you write some tests. I recommend having some fun with [tddbin](https://tddbin.com/) and practice an interview scenario where you're given a problem statement and you need to describe your plan of attack through tests. Start decomposing the problem by making a test list - think of the most basic cases, expand to more complex cases, prune duplicates etc. If you're looking for a good TDD course I recommend [The World's Best Intro to TDD](https://online-training.jbrains.ca/p/wbitdd-01). The first 2 chapters can be viewed for free online and they cover the basics I've discussed above, which is probably what the interviewers will be looking for.
I'm going to let you in on a dirty little secret: nobody(*) actually practices TDD. *Ok, not really: I'm sure *some* people actually practice it. But if you were to look at job ads, you'd think every programmer, at every company, practiced TDD, when in fact it's more like a tiny fraction of them. So why does everyone have it on their job listing then? Because "good programmers" practice TDD, and everyone wants not just good programmers, but *rockstar* programmers. Virtually every company I've worked for has included TDD somewhere in the job listing, and never have I known a single employee at any of them to practice actual by the book TDD. What everyone's really looking for is just "do you know how to write good software tests?" And while "good" is an art that quality programmers struggle to achieve ... it's also really hard to metric. So most companies just settle for "do you know how to write tests". And to know that, learn Jest or Mocha.
Is this book suitable for someone new to programming or more intermediate/new language?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_riz0n] [TIL this is valid JS: (k, { \[k\]: v }) =&gt; v](https://www.reddit.com/r/u_RiZ0n/comments/c9yrd2/til_this_is_valid_js_k_k_v_v/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
The push for serverless is because they're pushing their pay-as-a-service. If you're familiar with mongo and your own authentication why switch? You're not gaining anything by gong to firebase.
Nice
Thank you Labby92! I'm interested in picking up TypeScript so this is much appreciated
That's really cool! I've had a MUD-bug for a bit now, and this is motivating. What framework(s) and API are you using?
Awesome dude, thank you for sharing this.
Nice
What a weird reddit post
Nice
[VSCode](https://code.visualstudio.com/), by dude.
Nice
&gt; If merge deep or similar function is used to set default properties on the parsed object, then a method up the prototype chain could be changed, and if that code remains live and loaded in a running node instance, all subsequent calls to that now modified method would fail. I'm confused here. So I think what you're saying is overriding a method, not a property, right? Specifically, I mean the `typeof Object.prototype.newMember === 'function'` or `typeof Object.newMember === 'function'`. I think you're suggesting that the danger is that we're overriding a method ("modified method"), which means the function has to be constructed somewhere. I know of no common serialization formats ("parsed object") that would include an arbitrary function generator that would result in vulnerable code here. The function has to be created from code that you own (not dynamic), even if that means you're `eval`ing user input. But if you are `eval`ing user input, the issue isn't lodash, it's the fact that you're `eval`ing untrusted user input.
I can't even imagine writing a JS script that didn't use regular expressions.
nice
I remember that, when javascript was known as DHTML ... &amp;#x200B; You might appreciate Douglas Crockfords talk '[Javascript the Good Parts](https://www.youtube.com/watch?v=hQVTIJBZook)' he is also old timey but this is great video on how to program vanilla JS without jQuery etc.
I used to feel this way about arrow functions. Then got to, "Well, I guess this is something else I'll have to learn." It took a bit of time, but then I got it- and now I use them all the time. The one that boils my piss today is this: const thing = () =&gt; "stuff"; For the life of me, I can't see how that's easier to understand or quicker to scan than just having a function. Yes- it's quicker to type, but if you're willing to sacrifice speed and ease of reading for \_that\_ many keystrokes; I reckon you either need to get better at typing, or you need to re-evaluate some of your life choices. But I know there's a good chance I'll be standing here in a week, "Hey- it turns out; functions \_are\_ for losers, and with all the time I saved I learnt Japanese!" Roll on future us.
I use '_' in the 'omitted' sense all the time. I think most devs intuitively get it quite easily even when they haven't seen it before. Of course not in projects using lodash, but these days people import only the functions they need from lodash, so...
Both ruby and python have optional parameters, yet they don’t suffer from this problem. I think even java does now. I wouldn’t be surprised if other languages did as well. The big difference between all of them and JavaScript is that they check whether or not the method signature is being violated, JS does not
LOL downvoted for being old... :-)
That's my bad, I read something in your comment that wasn't there. Apologies. What about it seemed obvious?
But why?
Guys, Tucker is making a great point. A *non*cunt would definitely curry that shit. const omit = key =&gt; ({ [key], ...rest }) =&gt; rest
Could you provide a minimal working example, because I have done this and any time I add an import statement the whole thing breaks
I also find this code perfectly reasonable, although I am always suspicious of destructuring as it often can, and does, get out of hand. Not in this case though, this could easily come straight from lodash or Ramda. I am not quite sure what the "surprising" bits of information here are - that you can use function parameters in function definitions perhaps? I think this is great news, I lost count of how many times I tried to do that in PHP and got a fatal error `(a: 1, b: a, c: a + b) =&gt; console.log(a, b, c);`. Or maybe computed property names? `{ a: 1, [a | b]: 2 }` again, fantastic news. Or rest parameters for objects? `{ a, ....rest } = obj` Ditto.
Yes, I'm aware of this. However, consider the context of JavaScript's inception. The language needs to be able to compile very quickly, in real time, so as to not disrupt the browsing experience. Furthermore, the language was designed during an era of computing where CPU time was nowhere near as plentiful, so the primary goal was likely to keep the parser as simple as possible. Many aspects of JavaScript that don't make sense now are likely relics from that time. That said, I personally enjoy the flexibility that JavaScript grants, and in my experience checking to make sure the correct number of arguments have been passed to a function call at runtime really doesn't get you very far in terms safety. When an error does occur due to this, it's really not that hard to track down.
Or color text for the important events
&gt; that you can use function parameters in function definitions perhaps? That was the thing for me, it was the combination of this with the interpolated key syntax that took me by surprise when it worked. But now it just makes sense; expressions fit anywhere values do.
Yes but it's wrapped as an app, as a user you never see or are aware of the web page, it looks and behaves like an app.
Thanks for sharing, I am looking into learning javascript this summer, this will definitely be helpful in getting accustomed to the quirks of javascript! Thanks again for putting this togehter and making it available to everyone :)
Reading many JS books is what did it for me. For an experienced programmer 1-2 books should be enough, but reading many different ones help you understand harder topics by putting them in another perspective. What I'm trying to say here is you should definitely give it a shot, and if it doesn't work for you just find another one and see if it fits you more.
I made some simple apps with Ionic &amp;#x200B; They are all listed at \[[https://play.google.com/store/search?q=pub%3AJohn%27s%20Software&amp;c=apps](https://play.google.com/store/search?q=pub%3AJohn%27s%20Software&amp;c=apps)\]([https://play.google.com/store/search?q=pub%3AJohn%27s%20Software&amp;c=apps](https://play.google.com/store/search?q=pub%3AJohn%27s%20Software&amp;c=apps)) . &amp;#x200B; My apps include: &amp;#x200B; \[Smart Decison Maker\]([https://play.google.com/store/apps/details?id=com.smartdecisionmaker.app](https://play.google.com/store/apps/details?id=com.smartdecisionmaker.app)) \\- an app to help you pick a choice to a multiple choice question. &amp;#x200B; \[Fake Data Generator\]([https://play.google.com/store/apps/details?id=com.fakedatagenerator.app](https://play.google.com/store/apps/details?id=com.fakedatagenerator.app)) \\- generate data like personal and business data for any needs you have &amp;#x200B; \[Winner Picker\]([https://play.google.com/store/apps/details?id=com.pickthewinner.app](https://play.google.com/store/apps/details?id=com.pickthewinner.app)) \\- pick a winner for draws &amp;#x200B; \[Random Generator\]([https://play.google.com/store/apps/details?id=com.randomgenerator.app](https://play.google.com/store/apps/details?id=com.randomgenerator.app)) \\- shuffle cards, toss coins, and generate random data &amp;#x200B; \[Mobile Currency Converter\]([https://play.google.com/store/apps/details?id=john.currencyconverter.app](https://play.google.com/store/apps/details?id=john.currencyconverter.app)) \\- get exchange rates and convert currencies &amp;#x200B; \[Linear Algebra Matrix Calculator\]([https://play.google.com/store/apps/details?id=com.matrixcalculator.app](https://play.google.com/store/apps/details?id=com.matrixcalculator.app)) \\- helps you do common matrix operations like adding, multiplying and inverting matrices &amp;#x200B; \[Chuck Norris Jokes\]([https://play.google.com/store/apps/details?id=com.chucknorrisjokes.app](https://play.google.com/store/apps/details?id=com.chucknorrisjokes.app)) &amp;#x200B; \[Easy Simple Mobile Fuel Calculator\]([https://play.google.com/store/apps/details?id=com.easymobilefuelcalculator.app](https://play.google.com/store/apps/details?id=com.easymobilefuelcalculator.app)) \\- calculate gas mileage and prices &amp;#x200B; \[Health and Fitness Calculator\]([https://play.google.com/store/apps/details?id=com.healthcalculatormobile.app](https://play.google.com/store/apps/details?id=com.healthcalculatormobile.app)) \\- calculate BMI, ideal weight, body mass, and pacing &amp;#x200B; \[Math Homework Buddy\]([https://play.google.com/store/apps/details?id=com.mathhomeworkbuddy.app](https://play.google.com/store/apps/details?id=com.mathhomeworkbuddy.app)) \\- get answers to algebra, calculus and matrix questions
That makes sense. Maybe it’s only because I’ve only started to seriously do JavaScript for only 3 years now and I started from elsewhere, but that one design decision is the only thing that annoys me even though now both the IDE and linter catch that problem faster. Without either one, I feel blind when I’m working with it
Correct assessment. Could of dropped paragraph two, the personal experience wasn’t required.
Having said that, this particular case is actually quite pointless, since all it does is `(needle, haystack) =&gt; haystack[needle];` which I think is much more readable :-)
Made an open source Node.js client for Formula 1. It enables the consumption of the game's telemetry information. It works as a bridge between your application and the F1 game. [**Link to F1 Telemetry Client 0.1.8**](https://github.com/jonybur/f1-telemetry-client)
How is a function statement easier to read for that? function thing() { return "stuff" } It's just more noise, and to some extent obscures the fact that functions are just objects like any other variable. I think it's actually a significant contributing factor for a lot of people who struggle with understand first-class functions. Whereas, if you're assigning an arrow function to a variable, the relation is a lot less opaque. I hope this doesn't sound like I'm going in on you, but how long have you been writing JavaScript? I can't believe we're *still* having this conversation in 2019, and I'm super curious how anyone writing JS today would still be uncomfortable with the syntax.
Are we still crying about arrow functions? Or did I somehow go to sleep and wake up in 2017?
I mean, sure :) The idea was for a simple example, esp. one that fit in the title. No one's going to be more productive for having read this post haha.
Also please, stop using 'const' and 'let', what's wrong with good old vars??? 'const' is short for 'constipated', and when I read it I am reminded I haven't been to the toilet for the last 3 days. And 'let' reminds me of tennis, then I want to go and watch Wimbledon and I forget about my work. Thanks.
s/leaving/left/
I read through it a bit. I would say it depends on how you learn. This book looks like a nice simple reference that can clear up beginner questions without boring you with the minutiae. If you like to learn something new, tinker, repeat then this book would probably work well. If you want to be guided through like a tutorial then I would bookmark this book and use it as a supporting text.
Oh, it's a text editor, didn't realize, thought it was something to do with compiling javascript
Thanks a lot!
r/LearnJavascript
Definitely. A regex sandbox like [Regex101](https://regex101.com/) is a very helpful tool for learning, as well as trying out complex patterns even after you know what you're doing. Makes it so much easier to learn than what was available when I learned regex.
This is the actual demo http://fenrir.yigit.kim but it's as user friendly as an microwave interface written in etruscan
Nice, although collision detection needs some work
Worth knowing, fairly common, and extremely powerful in certain situations, but longer than a handful of characters, and it gets very hard to read, reason about, maintain and test. Know it, but use it sensibly, and don't feel stupid if you find it difficult.
It's not...
JavaScript from day one was partially based on scheme, it's a functional language to the core. Having always had first class functions is the big clue. It just also does OO, and is non-typed and dynamic, which makes it weird. Arrow functions are a really natural feature to add given its functional nature. It's trying to read more like one, because it is one.
At least the basics of how object references work compared to primitive values, how the operators actually work, type coercion concepts, etc. A good, firm grasp of asynchronous execution is vital as well. I feel like too much hand-holding lets people get into positions where they are in over their heads and start churning out garbage, but the framework is set up in in such a way that it covers for them and you get something resembling a web app, but it is very difficult and expensive for anyone else to maintain.
I've found Conway's Game of Life to be good practice for TDD. It's small yet complicated enough to really warrant tests. You can figure out if it works without running it yourself until the very end.
I wrap all my loading into a promise (Promise.all if there's more than one resource) and remove the spinner using .finally handler. That might or might not work with how you want to handle errors, but the happy case works well.
I ported a map editor originally made in QuickBASIC for a video game I'm making called First Time Hero. It's been around for a while but I just added palette cycling. Use the arrow keys to move to different map locations. *\*The code is vomit worthy, don't look at it unless that's your thing.*
Also, I would suggest to avoid using greedy quantifiers when possible.
Promise.all() receives an array of promises and you can disable the spinner on its then()
Haha. Dynamic Drive. I used it to steal snippets of code to drive some "DHTML" hiding / showing effects in IE4 and create dropdown menus... A lot of trial and error but ultimately, got me interested in front end after years of Pascal, Pearl, ASM and PHP. Good times...
Totally agree, that's a fantastic tool to get into with and the console as well in the browser. The browser console is what I used to get going. That's one of the great things about regEx, it's quite easy to just start tinkering around with simple patterns
That's what I'm talking about. Them menus were da bomb!
From what I've read so far, the presentation is clean and simple. I like how the code is color-highlighted! &amp;#x200B; The content is straightforward and not boring. However, it's not for someone new to programming. This is more like a reference in case you want to refresh your JS knowledge or if you already have the basics under your belt. But still, very nice content! No BS. &amp;#x200B; Thank you for this. God bless you.
Advanced\_Color.js made to create and manipulate colors with ease, and there is some useful function, for example, checking if two colors are close (similar), check if color is light or dark, convert rgba to hex, convert hex to rgba, generate random color and generate random color between two colors You can find it here: [https://github.com/CoderDot/Advanced\_Color.js](https://github.com/CoderDot/Advanced_Color.js)
I think this is largely a question of code organization. All of your logic that takes some time to finish should be it's own kind of a module, object or class. Each of them should have some kind of a way to listen to when they start and stop doing work (for example a simple event system). Once you have your code organized in this fashion, displaying a loading indicator whenever your program is doing work is just a matter of listening to the events from each object that can do work and displaying the spinner whenever any work is in progress.
I'm a bit of a masochist, which is to say absolutely no frameworks on the client side. Just vanilla javascript. On the server side I use node.js and just two libraries (ws for websockets and nodemailer for password resets). Thanks for trying it out!
Much appreciated, you’ve assisted with a much needed career change and ramping up for a new approach in AI/ML 😎👍🏿
[Codewars](https://www.codewars.com/) is pretty much TDD. There's not much too it; get familiar with a testing framework like Mocha, Jasmine, or Jest and you're pretty much all set. Unit testing is basically saying "If I use my function this way, it will always do that". At it's simplest form TDD simply means writing tests for how your code is _supposed_ to be have **before** writing the code. Approach it from the perspective of writing tests about "what your code is supposed to do", rather than "how your code is supposed to do it" and you'll be fine. IMO, TDD offers the following advantages: 1. Ensures your code is tested 2. Forces you to write code that is easily tested. Easily tested code tends to better organized, more succinct, and more easily decoupled. 3. Allows you to start writing code without knowing the final form of it; by breaking down the problem into bite-sized chunks you can start addressing them one at a time rather than being stumped by the bigger problem. 4. Makes you think about behaviors of your code -- how your code interacts with itself and other pieces -- rather than implementation of your code. In practice it's not always followed in the real world. You'll often find yourself coding before testing... but the concepts it imparts are important. It's a good tool to have in your toolbox, so to speak.
Yeah if I wasn't doing it with a web noob then yeah. I enjoy the HTML/css first approach we are taking
That's me!
Looks useful - first thing I noticed was a lack of Emmet support, though. That would make this bookmark-worthy for me.
Another addition, consider adding the ability to tell whether two colors are within a certain ratio of each other. This is especially valuable when text is on a background to make sure the near-blind can properly see it.
When you append innerHTML the DOM re-creates all the children elements so the button you added an event listener to is now a new button.
 I made " advanced\_Color.js " to create and manipulate colors with ease, and there is some useful function, for example, checking if two colors are close (similar), check if color is light or dark, convert rgba to hex, convert hex to rgba, generate random color and generate random color between two colors it's really useful. You can find it here: [https://github.com/CoderDot/Advanced\_Color.js](https://github.com/CoderDot/Advanced_Color.js)
The paid version include an introduction to JavaScript but if you are a total beginner in programming I would say it's better to first get some basics concepts of programming and then come back to this one.
Thanks a lot!
&gt; This statement is hilariously wrong It's only hilariously wrong because you took it literally. &gt; Ditto for people who "know" Bootstrap but are totally helpless if they have to write CSS themselves. So they don't know Bootstrap... Kinda invalidating your point with the quotes. If you "know" Bootstrap, it means you understand how flexbox works, how grids work, etc. At which case, you "know" CSS. Your definition and my definition of knowing something are very different I guess.
Interesting! Why doesn't this happen when you use `insertAdjacentHTML()`?
I hope you like what I made and be able to use it :)
and if you have an idea tell I wanna add more functions
Same here. I don't get all these people that say this code is perfectly readable. There are ES6 features in there that I have literally never used or needed to use because. This is completely foreign syntax to me, and extremely unconventional language usage. If I saw this in a pull request, I would decline it immediately, with maybe the exception that we were developing a library where literally every byte of code saved was crucial...
[Element.insertAdjacentHTML() ](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML) explains it very well &gt; [..] It does not reparse the element it is being used on, and thus it does not corrupt the existing elements inside that element. [..]
https://www.youtube.com/watch?v=qkblc5WRn-U This video isn`t TDD in JS, is Uncle-Bob talking how to do TDD, some important rules about it , and he do a little demonstration in Kotlin. If you want to learn about TDD in general I recommend you search TDD Martin Fowler.
Yeah, my bad. That `super()` is definitely unnecessary. What nonsensical place are you seeing an expression? The code seems to [run fine](https://codepen.io/anon/pen/XLxWVe), albeit with a single unnecessary comma - which isn't bad for throwing it together in an edit box.
Thank you so much. I also realised that I shouldn’t put name in the URL. You’re the man. 👍🏻
Small and easy. Thank you. 🙏🏻
Thanks! It's been a while since I've updated my blog. I'm trying to find time now to write more articles
Thanks! I hope it can help you in your journey with JavaScript
Yes, in this second edition I've added an intro to JavaScript chapter but you are right, it's best if you already have some basics of the language. Thanks for the feedback
Awesome, good luck in your career change. This book is what also helped me land a programming job after switching career
Thanks! Learn something new every day.
!remindme
**Defaulted to one day.** I will be messaging you on [**2019-07-08 02:32:29 UTC**](http://www.wolframalpha.com/input/?i=2019-07-08%2002:32:29%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://np.reddit.com/r/javascript/comments/c9uj7e/free_javascript_ebook_second_edition_read_for/et58fi1/) [**CLICK THIS LINK**](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2Fjavascript%2Fcomments%2Fc9uj7e%2Ffree_javascript_ebook_second_edition_read_for%2Fet58fi1%2F%5D%0A%0ARemindMe%21%202019-07-08%2002%3A32%3A29) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete%20Comment&amp;message=Delete%21%20c9uj7e) ***** |[^(Info)](https://np.reddit.com/r/RemindMeBot/comments/c5l9ie/remindmebot_info_v20/)|[^(Custom)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List%20Of%20Reminders&amp;message=MyReminders%21)|[^(Feedback)](https://np.reddit.com/message/compose/?to=Watchful1&amp;subject=Feedback)| |-|-|-|-|
This is kind of my thing, and I have a ton of ways I can help: 1. I write vanilla JS tips every single weekday: [https://gomakethings.com/articles](https://gomakethings.com/articles) 2. I write ebooks and make video courses that are short and focused: [https://vanillajsguides.com/](https://vanillajsguides.com/) 3. I just started producing some guided projects if you're more of a "learn by doing" learner: [https://vanillajsprojects.com/](https://vanillajsprojects.com/) 4. I have a more structured training program if you need something more intense and focused: [https://vanillajsacademy.com/](https://vanillajsacademy.com/) 5. And if you're looking for a cheat sheet, I've got one of those, too: [https://vanillajstoolkit.com/](https://vanillajstoolkit.com/)
Downvoted for being arrogant and constantly trying to point out how he knows more
Here it is, with all the right permissions. [https://vimeo.com/43734265](https://vimeo.com/43734265)
Start the form submission/whatever in a redux action. Remove the spinner with another redux action after the async actions have finished. Guessing on time is always going to be wrong - you should be saying “start it” and “stop it now”
The best TDD example that I've come across in Video format is Corey Haines converting roman numerals. [https://www.youtube.com/watch?v=vX-Yym7166Y](https://www.youtube.com/watch?v=vX-Yym7166Y) The great thing about TDD is that it tends to be language agnostic, with the techniques being able to be applied to whichever programming languages you prefer.
I must be hardcore because at my job I always start with system tests when possible, then unit tests and then finally the code. The only time I might code before I write tests is when I’m trying to figure out the best way to use a 3rd party library. But then all the code gets commented out until it’s all covered by tests.
Dang, nice. How do you handle the server-client communication for interface elements? I know most MUDs use something like GMCP, but maybe you wrote something proprietary.
I'd love to be that disciplined; I usually start a project with the best intentions of TDD/BDD, but somehow it always falls to the wayside. Completely forgot to mention iterating! Not only does it help refine your code but, as you mentioned, it's super important to have a failing-then-not-failing test. Makes sure your tests are not giving false positives and all that.
There is native calls support you could check more info here [https://neutralino.js.org/docs/#/](https://neutralino.js.org/docs/#/)
Hi /u/CanadianMailCarrier, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I did. Thank you!
Looks fine. Pasted it into the developer console, prints -10 to 19.
It is your IDE works fine on PlayCode, https://playcode.io/365507
&gt;So they don't know Bootstrap... Kinda invalidating your point with the quotes. If you "know" Bootstrap, it means you understand how flexbox works, how grids work, etc. At which case, you "know" CSS. Not even remotely. "Knowing" that you set a class to "table table-bordered" to make a table display with borders is not even remotely similar to knowing CSS. Come on, dude. At least pretend to have a clue. &gt;Your definition and my definition of knowing something are very different I guess. Finally, you said something correct. My definition of "knowing something" is right, yours is wrong.
Ah yes, the JavaScript-powered ones prior to CSS-driven Suckerfish menus. Man, I remember all those scripts that would check if the browser was IE or Netscape. Then jQuery came along to hide all that.
Honestly just the[ Mozilla Developer Network](https://developer.mozilla.org/en-US/). It has just about everything the modern web dev needs.
anything wrong?
As a personal preference I don't like it in the omitted or ignored case. I prefer more clarity in naming there (especially for anyone not familiar with that convention). I do think its fine for things like partial application where it can literally represent a "blank" in "fill in the blank".
I do this all the time: input.addEventListener('input', ({target: el}) =&gt; console.log(el.value)); Destructure out the target and rename it to `el` if it's the only thing I'm using from the event variable.
Ok will do thanks.
Ok then i will give it a shot thank you.
I don't show any or I do for API requests and only while waiting for content. When to hide is given by the response (success or failure), never timers. Rendering is so fast I never use it for that.
&gt;"Knowing" that you set a class to "table table-bordered" to make a table display with borders is not even remotely similar to knowing CSS. Come on, dude. At least pretend to have a clue. &amp;#x200B; That's not what I said. This isn't an interesting discussion. There is some level of mastery of Bootstrap or jQuery for which one can say they "know" the language. I made the comment flippantly, because the gatekeeping is stupid. And out of all the topics, this is what you're focusing on. &amp;#x200B; &gt;Finally, you said something correct. My definition of "knowing something" is right, yours is wrong. &amp;#x200B; Ohh, ok. Shrug.
Eloquent JavaScript and then You don't know JS are a must read
I have to sit for interviews at around jan so i want to prepare c++ for ds &amp; algo python for opencv, ml , ai and js for web and hopefully i am able to finish all this reading by then :).
They aren't really singletons. Because they are not globally available, you have to actually bring them into scope before you can use those instances. And if you argue that it's still singleton, when I suppose a lot of DI containers are singletons as well.
Your post history is entirely self-promotion
Hi there, I made a schema validator package as a proof of concept that they don't have to be as bloated as they are right now. The API is pretty much taken from Yup, but it is \~200 times faster on complex object validation (up to 900 times on simpler stuff) and \~15 times smaller It doesn't have as many features, but it should cover most of the use cases 😄 [https://github.com/bvego/nope-validator](https://github.com/bvego/nope-validator)
Sorry I wasn't clear, but of course I don't ask for exact definitions or anything. I usually present a code example and ask the candidate to walk me through how it works. The answer is never black and white. It's mostly just to see how they process the code and see what their thinking process is.
I created this over the last couple of days and I'd be interested in your opinion of it. Essentially it turns Reddit into something a bit like Google Images, and it's designed for image-based subs, obviously. How to use it: * Go to your favourite subreddit (one which has images) * Click the Rio button in your toolbar * Everything is removed except the images * Click toward the top of any image to open the image in a new tab * Hover over the bottom of the image to see the title; click on it to go to the thread on Reddit * To see another page of images, click the button again * To get back to normal Reddit, hit Reload On the to-do list, maybe keyboard controls for opening new windows and reloading, also maybe a lightbox/slideshow mode.
Things you can improve: 1. Build your submission correctly. Submit your link, **as a link**. Then, afterwards, you add a comment to that submission explaining about the link you just submitted. Why? For a number of reasons: First people can _directly_ click your link without having to go through all your explanation to find the link. Second the link will be guaranteed to be a _link_, a clickable link. Not doing so, you added a big flashy image but then _failed_ to make your link clickable. Annoying people that way makes the chance of them visiting your link lower and the chance of them downvoting your submission higher. Finally, for simple etiquette reasons. Submitting as you did shows you care about throwing a big unnecessary banner image into people's browsers more than you care about them actually seeing your link. 2. Build your interfaces correctly. Right now your demo's interface is as amiable as an iron maiden. Not only there is no explanation or introduction for the user of the demo, but also both controls and results are _just thrown_ there. Yes, you may not be a designer, you may not do layout, you may hate CSS, you may hate writing texts and docs and explanations. That is all fine and also completely irrelevant. More so since you spent time designing a _cool logo and banner_ to grab people's attention. 3. _If_ you **really** want people to look at your code and provide feedback on it, make an effort to meet some minimal helpful criteria. That is, give an overview of your code, of the things you may want to be looked at, of the doubts you may have about it. Things like "the entry point is in _this_ file", "I named all my module files as `xxxModule.js`, is this a good idea?", "I'm throwing all my functions and variable into the global scope but I would like to find a better solution, how could I do that?", "I've implemented some sort of particular data structure that I've called Heap and when things are stored in it, [I modify the things stored](https://github.com/skywarth/Fenrir-wolfpack-simulator/blob/77b0c65d35d713900d95a5562a652c58086b1fad/data-trees/heap-master/heap.js#L169), is this a bad idea?", or "I do [this thing](https://github.com/skywarth/Fenrir-wolfpack-simulator/blob/77b0c65d35d713900d95a5562a652c58086b1fad/modules/modifiers.js#L143-L151) where I write `if-else` branches that _do nothing_, is this a good practice?". Of course you can ask for a "general critique", but even in that situation it is very useful that you give a brief overview of the code and of your main worries. Not only that, there are some other things on which you should spend some effort. If you want people to look at your code, your code should be _clean_. This means that there shouldn't be any _commented code_ left dangling in there. Worse if it's code that is not commented but it isn't used, of course.
what need to correct in code
Thank you, I will take a look at this
If your IDE/editor was set up in a way to honor the difference between alignment and indentation you could still just tab-tab quickly to the point and it would replace tabs with spaces for the alignment part only. Not sure if there are fine-grained settings/plugins that actually do that but it's not out of the world to create something like this.
What do you mean? You like particular version of the standard?
Good job!!
Yeah, there is definitely a difference somewhere. &amp;#x200B; Say - Meteor.js is a framework, React.js is a library.
Good point! However, \`Eyepiece\` or \`Telescope\` could be type aliases for all I know \`\`\` type Telescope = number | false | { x: string } \`\`\` &amp;#x200B; Ideally you should avoid union types, but when switching from js to ts it is more than possible. &amp;#x200B; Now, it is not making your point any less valid, I think what I wanted to say is that instead of assuming it's an instance of some kind, one should click on that type or hover mouse over it to check what this is. &amp;#x200B; But at least this is doable unlike in plain js.
Oh yeah, IE11 is not supporting this. I did not know this because we are not supporting IE11 at my job. I guess I am lucky one then.
Isn't ES6 basically vanilla now?
Transpiler is a dependency, too.
On the sidebar: &gt; r/javascript Rules &gt; &gt; 3. /r/JavaScript is not a support forum &gt; Is this a help request? Try /r/LearnJavascript instead!
Oh. My bad. I will move the post there.
You can do lots of things, but again, does it make sense? If you look at "vanilla" javascript projects (todoMVC, etc) they basically re-create a naive React in order to have at least *some* structure. I mean, that's what frameworks are there for, to establish boundaries between state and the view, and to allow you to compose re-usable components that react to state changes. There is nothing like this in the dom api. And this is just the start, in order to scale you need to watch out for performance, render only the things that need to change, watch out how you read and write to the dom because of layout-thrashing, etc. You have to re-create all these things yourself or else your app will become less and less responsive.
If you’re iterating over an array use a for...of loop for...in loops is for iterating over objects
Thanks!
I guess it's hard to explain. If you think using the raw dom api makes your app live longer i have a bridge to sell you. Implementation details like getElById do not matter, because they have been fully abstracted, which is the whole point. Jquery was a library of cross browser hacks, not a framework.
I've just started a new educational JavaScript project to practice with JavaScript, TypeScript, Node, oclif, Git, Web Components, Markdown, and many other technologies Github project - [https://github.com/korzio/note/projects/1](https://github.com/korzio/note/projects/1) The medium post introducing the project - [https://medium.com/@korzio/introduce-educational-javascript-project-c913c6e20190?source=friends\_link&amp;sk=8d8aeb40692e6672b5d61e99b768a632](https://medium.com/@korzio/introduce-educational-javascript-project-c913c6e20190?source=friends_link&amp;sk=8d8aeb40692e6672b5d61e99b768a632) I will appreciate any feedback, suggestions, help and reposts.
Did an interview with Softgames. It was all TDD. They'd probably write the tests and ask you to make them pass. This is my second TDD test and it was same format. Tests and solutions here. https://github.com/olajohn-ajiboye/TDD-test
The original comment: "Wow, I can’t believe you’re calling someone a cunt because they’ve realized some of the power of newer constructions in ES. Should we throw away Symbol and generators and async / await, etc? Source: Old guy who tries to keep current and embrace new paradigms in a language that already wants you to think about there being different ways of doing the same things, then decide for that case what the best way would be."
Awesome! Thanks for sharing!
Yeah, I never called the OP a cunt.
Glad u like
Counter is pretty reliable if you know that whoever is calling the functions does it consistently. You can wrap your fetches in a function that does the calls for consistency.
You mean you put `?` after every quantifier? Usually it matches your intents more closely, but it makes it a bit harder to read.
Portability. There are environments that don't handle tabs well. The return of love for spaces was driven by Google policy for maximum portability and ability to edit files with the lowliest of file editors. While I understand it, most companies will never need that portability.
I have multiple spinners in my app. On buttons, certain areas wtf. My point is - you should block only parts that are actually loading and should not be touched. You I have a map where key is name of the spinner and value is a number. And I have Enum with all the spinner names. I have a wrapper on fetch that trigger spinners by increasing their value. And on then and catch, spinner stops. Spinner is displayed when amount is bigger than 0 and I delete keys that have value 0. All this means I just use fetch and spinners just work.
As a suggestion, for some of these functions, you might want to look into alternative colorspaces, like XYZ Color and LAB-X/LAB-CIE color. Your color similarity function, for example, is calculating the distance in RGB space between two colors, however, the response curve for human vision doesn't map evenly to RGB space. For example, if you ask people what color `rgb(0, 20, 0)` is, they'll almost universally say "black", but if you ask them what color `rgb(255, 235, 255)` is, no one will say "white". However the distance in RGB space is 20 in both comparisons. If you were to use RGB similarity in a search, to order results by color similarity, the sort order would be confusing to users, as some very similar tones would be further away from tones that seem jarring together. To fix this, your similarity function could convert both colors to the LAB-X or LAB-CIE colorspaces (which have roughly linear response curves across human vision), and then could calculate distance. An example of a site that offers sort by similar color using LAB-X is [Wild Apple](https://wildapple.com/art/?wa-color-c=%230059f8) You can see how to convert RGB to LAB-CIE in [this PHP script](https://github.com/gschoppe/Name-That-Color/blob/master/includes/color.php)
You say there's a free version on Github? I couldn't find where to read a single page. I would purchase it if I could read a part of it first.
I'm pretty new to discordjs and programming in general, and I started by building a bot for a server with lots if else-if statements, so forgive me if I annoy you a bit. It's a little messy, but it doesn't have any redundant if-else. It also gives me more access I think, so people can't /mute or /kick certain users (higher ranks). Is it a good idea to switch to using packages like [https://www.npmjs.com/package/discord.js-commando](https://www.npmjs.com/package/discord.js-commando) or something else(?) Is it better than lots of if-else other than code-readability/maintenance?
The only surprising thing in that code is using one argument to destructure another, the rest is perfectly standard. Destructuring assignment has been added to the language because you can write really concise, idiomatic code with it const [head, ...tail] = arr; Is a million times better to read and write than const head = arr[0]; const tail = arr.slice(1); There's so much less going on to understand and process. *It's new, and I don't know it*, is just an appalling reason to dismiss something. If I had such a complaint on a PR, I'd feel perfectly entitled to tell the person to piss off and come back when they have an informed opinion.
Back in the 80’s and early 90’s, I used qedit for my projects which converted hitting tab to 8 spaces. I was able to modify qedit to insert 2 spaces instead of 8 but it was easier to hit space twice with my thumb than look for and hit tab. Since my projects over the years has been just me, my habit is two space indents. I have tried tabs a few times over the years when this conversation pops up but generally pop back to spaces.
Yes I myself switched to commando because it simplifies command writing and reduces if statements. Check out their guide its pretty good and you can see commands written with commando in my bot repo on GitHub(search Master-Bot)
Hello Var-foo I wasn't sure if my post went up because I got a bot-reply saying its been removed as I'm new? Anyway, thank you for your reply and reassurance. That's so true, at least I'll end up learning something new. I'm hoping as I go through freecodecamp (plus learning randomly from other sources) I'll be able to build a few things on my own. I think then I'll realise if I can do it or not. Its great to know there are so many helpful people and I've learnt so much already from looking up questions/answers on forums. I haven't had the need to ask anything myself yet. Can you recommend any other courses I could learn from? At the moment I'm looking forward to the journey.. so lets see where it takes me!
Please, if we have this argument, let's all agree to use Elastic Tabs from now on. Regular tabs solve the problem only partially.
Thank you and yes I saw your bot, looks good. But is simplicity of command writing the only benefit it provides?
My go to spot most of the time. Great resource.
Good times. Love all those tinkering hours spent trying to get stuff to work.
There you go https://github.com/AlbertoMontalesi/The-complete-guide-to-modern-JavaScript/tree/master/ebook
Thanks, I will do my best
&gt; What do you mean "portable", dom apps are by definition not portable because they rely on the dom. Imagine you have some code that uses `$("#id")`. Now imagine you want to paste that code into a project that doesn't use JQuery. If you had used `document.getElementById("id")` it would work in every browser, on every OS, in every project regardless of JQuery or MooTools or straight vanilla or Vue or Ember or whatever. That's portability.
Interesting structure, it feels like something is missing. But I don't understand this, so my opinion is not necessary. But I can share information: Soon diamonds will be available for trading, too. Diamond Open Market is a decentralized commodity exchange to buy, sell and trade any types of diamonds.
This example is illiterate as both code and as poetry because there is all this pointless syntax going on and code that doesn't do anything. I like Bill Callahan, but this is not representative of his lyrical talent. Are the lyrics printed, "don't, go" for example? I have written code in order to write poetry. Frank O'Hara has a poem "To Edwin Denby" with an unusual form that repeats the first stanza in alternate lines of the second stanza. Poetry is intended to be read or recited, and this frustrates both of those goals for no reason. Some poetry is visual and the layout of the words on the page or woodcut or whatever is part of it-- that's called concrete poetry. This "code poetry" doesn't work as that either because some of the syntax is intended to be read/pronounced and other parts are not. If your intent is to provoke, it's not even compelling enough to do that. It makes me feel nothing at all and I'm someone who appreciates JavaScript and poetry.
TLDR parseInt takes a second argument.
and like in this case, it's often misused for type conversion.
First off, obligatory XKCD reference: https://xkcd.com/208/ And second, I'm surprised the age old wisdom of regular expressions hasn't been quoted yet: &gt; You had a problem. You tried to solve it with regular expressions. Now you have two problems.
I just created a simple website with a countdown telling us when will most likely IE11 / Internet Explorer 11 die. [www.whenwillie11die.com](http://www.whenwillie11die.com)
I also had some fun debugging JavaScript type coercion recently: https://twitter.com/anlumo1/status/1147623578386481152
Check out eloquentjavascript.net and javascript.info. As was already pointed out, Mozilla developer network is quite good too.
This is not type coercion. This is JavaScripts parameter handling.
Are you gonna hold a techtalk or something in Vietnam? I just came back to Vietnam after my sophomore year in college where I first learnt js and and reactjs. Really hope to meet you in person. Thanks for publishing great content
It's both, it's coercing the second parameter to false sometimes.
This is a pretty interesting point in the debate. Considering most editors "just handle" whitespace for you I've never really stressed about it. Set your tabwidth to whatever you want and let the editor decide if it should be putting in tabs or spaces.
No, that data is not state. You need state whenever you want to move data along from one render to the next. However I think it's better to put static data like that outside of the render/sfc function, so that your actual code is more readable and easier to grasp. I usually place static data like that in the same module as the component that is using it.
I get a white page after the page loads completely (headline is there initially, but then disappears) with Chrome on mobile
Absolutely love it haha and thanks for turning me onto XKCD. That comic couldn't be truer!
https://gka.github.io/chroma.js/
Same. iPhone/safari.
&gt;thanks for turning me onto XKCD No problem, it's a great one for us coders :)
Shortest version let output='Hello, '+url.split('=')[1].split('_').join(' ');
Hi /u/sum__sleples, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/john_horner, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/unohowdashigo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/GabeRothel, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Chaslain, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/benabus, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/joCode_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/maybevaibhav, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dotobird, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AMAdolphinparmegiana, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/vagara, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Moegain, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/JonesK79, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yeah ES6 is basically vanilla I know chrome has like 84% compatabilty or something. I couldn't really find another way to describe I'm writing just JS scripts for an html doc again. No fancy bells or whistles
fr c CRC TC
Dr
`c.lightOrDark())` &gt;returns true if color is ligth Then why not call it `isLight`? Also, I’d rename `similar` to `isSimilar`. It’s self-documenting code. The `is` prefix is a clear indicator a boolean is returned.
Interesting colour repo. I liked it
You're using very simple cases. This is an example from Python but could also be applied to JavaScript. The coding standard in Python is to line up subsequent lines visually under the first argument. This does not always line up with tab stops. ``` self._connection = ConnectionState(dispatch=self.dispatch, chunker=self._chunker, handlers=self._handlers, syncer=self._syncer, http=self.http, loop=self.loop, **options) ```
Start simple, can you support AND alone? If not what difficulties are you having? It’s not clear if you’ve written anything yet or what your question is.
Wish I could have this discussion "Cries in yaml"
How would an IDE know which tab you consider an indentation and which part an alignment?
They could set up hooks to covert to tabs for them, and back to spaces for everyone else on push or commits.
Hi /u/yannbraga, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cmer, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/reditoro, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/twinbee, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jstutorials1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sidnand, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks! Right now only the underlying libraries and the Slack bot are functional, but at some point I'll get around to finishing the website UI.
Hi @kenman, Which point exactly applies here? I don't see any of these points to apply to my post. Besides, the post is 67% upvoted and there are already 18 replies.
I admittedly am not a smart man... but for a long while I honestly though the whole "war" over tabs vs spaces was a joke like flat Earthers. Just another inside joke that I had not figured out yet because I am usually daft like that. Then I realized people were not joking and were very serious. As I advanced and started working on other projects I realized more and more of how much a big deal this is to people. I never understood why anyone would think spaces were better than using tabs. You can tell your editors how to handle tabs and it only affect tabs, but spaces are used for more than just indenting which is the entire fucking point of tabs. You dont tab between every word unless you are mad, why in the world would you space between indents when we figured out a long time ago that we needed something to do that. Much like flat earth I cannot understand why this madness exists and have yet to see one compelling argument for using spaces other than some languages use the space to define segments of a routine (jackiechanshakinghands.png).
For a very long time I thought it was an inside joke, like flat earth.
I will rename them , thanks :)
Checkout my repo unsplash-clone made in react [https://github.com/junipdewan/react-unsplash](https://github.com/junipdewan/react-unsplash)
It’s really not that hard to install a CA on mobile devices, and it’s a one-time onboarding cost. You can also use your “real” certs and configure your LAN’s DNS to map your domain to private local IPs. This is for the HTML5 Geolocation API isn’t it?
Sorry **what**?
Desktop browsers like Chrome have a setting to disable the HTTP requirement, for dev. purposes. For mobile some expose an advanced dev. menu and debugging options, might be worth checking out. Setting up your CA server - you don't need a server, you need to generate a .crt and install it on your test devices. Then certificates signed with that root .crt will be trusted.
This won't solve the problem for the other devices on the network, but Chrome has chrome://flags/#allow-insecure-localhost which will ignore certificate errors on localhost. Also, i'm pretty sure that Both Chrome and Firefox treat localhost as a secure context, so localhost should have access to all those apis
What web browser are you using?
#How do you develop for browser apis requiring https ?
use tunnelling services, port forward to a https port and access it over wifi or even over internet
I think (I haven't tested it in some time, so maybe is now deprecated) that going to `chrome://flags/#enable-recurrent-interstitial` on a phone would disable the https check, and starting chrome with `--ignore-certificate-errors` would do the trick on desktop. If not, i think that you should be thinking on taking the approach of change the configurations of your client, not the server ones.
Hi /u/topheman, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It's 2019 and it seems that not all devs heard of letsencrypt. Greenlock for nodejs if you want to build it with express or stuff like that. Regarding ngrock, try serveo.
Most people in this thread are saying “Tabs for indentation, spaces for alignment.” though I’m not entirely sure if that’s true in python, since there indentation is syntax so you can’t just align things how you want really.
Well horses for courses :shrug:
So, if someone asked you to manipulate the DOM and build a webpage with pure JS (no libraries) and the browser API, and you could successfully do that, I would say you know JS pretty well. But plenty of folks can’t do any of that without the help of a framework or something like jQuery. The libraries abstract away a lot of the “hard” JavaScript design patterns, which plenty of people don’t bother learning. It’s not that there is some language syntax they aren’t seeing. It stuff like creating an event reactor pattern or knowing how prototype inheritance works, or how to properly use a closure for operating on private data. Angular and jQuery can’t teach you that. And that’s usually fine, because most of the time you can get stuff working out of the box without knowing the JS patterns under the hood.
Commando provides you with easy argument handling, permissions, guild only commands, command throttling, validating inputs and more.. Saves time and makes your code cleaner.
And yet here I am, only ever building Angular applications, knowing all of that. Because sooner or later you will need all of those. Except using closures for private, we have modules and let now. Frameworks can delay learning those concepts, sure, but going like "wtf is a closure" from an Angular dev is an insta "no job for you" moment at the interview.
I can try for you but I am not the greatest
Asking for help in programming often includes a, nicely formatted, piece of the relevant source code...
Just post your question with your code in it. Every programmer has had thousands and thousands of dumb questions, it’s part of learning.
Yeah, with Angular it’s a far less common problem. But it’s common to see people using jQuery with very little actual JS knowledge. I’m not saying they’re wrong for not learning it. But there is a big difference. And a lot of it has to do with the types of applications you’re building, tbh. The more complex it gets, the more you need to peek under the hood and get your hands dirty with the raw language.
Just ask the question in a post
Don’t be afraid to ask on here. Other beginners may have the same question! =) Or try r/learnjavascript
I am also new to js but has a year of experience. We could help each other. Just ask bro.
thanks for mentioning this, i wasn't aware of it [elastic tabs](http://nickgravgaard.com/elastic-tabstops/) is a fantastic idea! it seems obvious to me that this is the way code should have worked all along - spacebar alignments are a really bad pattern, because they are so brittle whenever a rename occurs - however with elastic tabs, certain kinds of horizontal alignments become trivial and safe during refactors - i can't see any downsides to this becoming the default way editors should handle tabs in the future - with regular tabs, any tab after any non-whitespace character is a meaningless accident -- but rendering tabs elastically actually allows us to convey meaning in those situations i really, really hope modern editors implement elastic tabs in the future, i love the concept and stand behind it i'd be very interested if anybody can think of any downsides to the thing cheers! 👋 Chase
Well you don't really need hundred of plugins. What you need is a few really good ones. If none of those deliver that, when the rest add close to no value. And there is a lot of JetBrain IDE base functionality, which simply has no equivalent of anything in VS Code ecosystem, like smarter inspections which also allow to customize syntax highlight and coloration or local history cache. It also doesn't rely on RLS servers. Which provides smart inspections for basic editors, but also handicaps the editors to what RLS has to offer. JetBrain teams do their own implementations which generally are a lot better than whatever RLS can offer. Most pronounced example of this would be official Rust plugin. I'm lucky, that my company buys me PHPStorm, it's same as webstorm + sql + php support. I still use vscode for quick file editing like .ini files or as a textpad. But sorry, there is simply no looking back past getting spoiled by JetBrain stuff. If I ever intend to change my job, one of the demand will be buy me license.
Thank you for your comment! I can see the reasoning behind the removal, but this post was upvoted, and I feel that it's almost more of a delving into the deep inner workings of Javascript since even at zero latency, there's around 25-50ms of lag. For science, I say it should be kept up :)
You bring up some good points. I personally like the language-server design that VS Code has implemented, and most of the features you mentioned are available as plugins for VS Code. But there is real value in having well-designed features out of the box. Honestly, I’ve just become spoiled by Vim’s superior text editing system. Combined with my filing window manager, I basically never have to touch my mouse, and things just go much faster. If I could get that same level of control in a more robust IDE, I’d consider using it. But at least VS Code has Vim key binding plugins that I can use. Fortunately I don’t require any particular IDE for work at this point.
''TLDR;'' Everyone lied to you when they said `let` and `const` don't create global variables. They 100% do .. just not `window.` global variables.
It's not a good idea because if one of the qSA doesn't return a value you'll try to evaluate the next qSA on undefined. You can also use more complex selectors in qSA, like: let a = document.querySelectorAll('.a:nth-child(2) .b');
I'm not sure what you want to achieve here. Which dom element do you want to select?
Have you tried stackoverflow?
it's a common misunderstanding, thinking that editors today are capable to seamlessly convert between spaces and tabs, allowing us to simply forget about this old debate unfortunately, it's not true what's often missed, is that spaces-to-tabs conversions are lossy -- it will break any horizontal spacebar alignments throughout a codebase, which won't fly on most teams if you are stuck with a spaces repository, and it uses any spacebar alignments at all (which is an all-too-common antipattern) -- you cannot safely convert to tabs and back, and you cannot display the indentation at a different apparent width either -- you're stuck because of the situation abov , tabs are the only seamless solution that can accomodate everybody
&gt; set up hooks to covert we all wish that editors today could seamlessly swap between spaces and tabs, so we can make this whole debate obsolete unfortunately, editors cannot do this because of one fundamental problem spaces-to-tabs conversions are lossy -- it breaks horizontal spacebar alignments throughout a codebase, which unfortunately makes the technique a no-go for most codebases because of this, tabs are the only solution which really accommodates everyone
The slowest QSA is the first one. The chained QSA's are searching through the children of the first QSA only, so they're relatively quick. I recommend using getElementById for the first selector if you can instead, since that is the fastest. document.getElementById('a').querySelectorAll('.b');
Nope! I just transmit JSON objects across the websocket. Pretty simple and supported natively by js.
Ahh awesome, if the speed is not a issue, then why switch to getElementById?
Sorry! I re-edited the fiddle so it's clearer. I'm trying to get class b! I'm wondering which approach is better to retrieve it!
If speed is not an issue then consider /u/thespite's comment if the element can't be found.
Ahh thank you! I just realized that exists!
Sorry! I mistread what you said! I get what you mean now, thank you!
Freecodecamp is a great place to learn. After that, you should be able to learn from following people, reading documentation, and practice. Don't put too much stock into "courses". Nothing beats practice and reading documentation.
Hi /u/1upreme, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/badboyzpwns, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Go back and enter that page again. It worked for me.
TLDR: 99% of what sucks about JavaScript is trying to pretend it's an OO language, not a functional language, if we'd just admit it's a functional language the scoping would make a heck of a lot more sense.
How does your code look like? It probably removes objects from the DOM, so the listener would stop working. And if you don't reload the page, the listener won't get attached again.
It's actually a Flarum project. I use a 'Pages' extension that allows me to create individual pages inside the forum. I have the listener attached to a simple &lt;a&gt; element, and yes I believe this element is destroyed when loading other pages. What would be the best way inside Mithiril to force my javascript to re-execute (and reload the listener)?
That's always been javascript's problem. It's this shitty weird mix of OOP and functional, and while it leans functional, it supports all sorts of weird things that are confusing. I mean, one of the most famous books for JS is called "Javascript: The good parts" and it tells you to ignore huge language features.
Oh and is it usual that someone would id an element (with no css styling) for the sake of using getElementById()?
They dont :p
Java and Javascript are two very different things. You may want to see if there's a /r/java or something
i don't think this is necessarily true for everyone out there trying to teach the language. in fact, i would say that it actually seems like the number of people trying to teach it as an OO language has gone down in the last 5-10 years. i learned JS \~8-9 years ago probably, and i feel like back then *most* of the resources on JS were taught in a very specific way, but now there are far more resources teaching JS from a lot of different angles. the YDKJS series is particularly good, imo.
So you also tell your coworkers what font and colors for syntax highlighting they should use?
i don't really understand why this is surprising. \`let\` and \`const\` still scope variable in the way that you want them to scope variables, and they still can only be re-assigned in the ways that you would expect. but, *of course*, when you define a variable in the global scope it's going to be globally available. did anyone think this somehow wouldn't be the case? it's not like \`let/const\` are taking variables defined inside of functions and globally defining them. if you defined something like \`const a = 1\` *inside* of a function, you still will get \`a is undefined\` if you try to access it outside of the function itself. and obviously neither \`let\` or \`const\` define variables on the window object. i don't really understand why you're seeing this as a lie. this is exactly how i expect let and const to work, and how they do work. honestly, what part of this is a surprise to people?
I find it to be a good hybrid use of OO and functional. I've never understood why it can't just be its own thing. Outside of implicit type conversions (which makes sense to me for a language that originally revolved around string digestion), it's a very simplistic language to understand.
You can't expect people to help you debug your code if they can't see it. I mean, you can hardly expect them to help you if the _can_ see it...
Overreaction IMHO
The title didn't excite, but it's actually a decent article on FP-style coding
Placing an id on an element for the sake of using getElementById is perfectly acceptable, but you need to be careful to make all IDs unique, especially if your code or plugin is going to be used by a third party.
Yep, same here.
What specifically is your question? What have you tried so far?
It is an OO language, no pretending. Pretty much everything in JavaScript except for primitives, is an object. Even functions are objects. Just because it's different from the OO that most people know - just because it's using prototypical inheritance - does not remove the fact that JS is **very** OO.
People hear something and then go deep on the wrong data.
Honestly just basic no object related stuff, I thought it should be similar in logic at least. I really didn't want to go in the direction of a boot camp so I was more browsing studying material suggestions
That book is famous because it was great for its time. But it is WAY outdated. JavaScript is not that difficult to learn if you treat it the same way you would when trying to learn Python, Java, or C. You actually have to learn it in depth for it to start making sense. And a lot of what are considered the more difficult parts of JS in reality only take a few days to learn. The "You Don't Know JS" series is a good resource. Learn exactly how scope, `this`, closures, and objects work and you are already way ahead of the many programmers who treat JS like it's a scripting language they have to sometimes have to struggle through but never bothered to actually learn.
No one will write the code for you. If you have a specific issue, you can post that.
If you don't know what Stencil is (I didn't): &gt; Stencil is a toolchain for building reusable, scalable Design Systems. Stencil is a compiler that generates Web Components (more specifically, Custom Elements)
Hi /u/bry21323, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cluelessphp, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Whitespace before any non-whitespace: indentation after: alignment
Hi /u/MorningRoseRising, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cmcjacob, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lmandala, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thank you
Hi /u/royslando, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I would recommend Mozilla Developer Network for getting into the details of the language. For classes: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) For regex: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular\_Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) For private fields: [https://developer.mozilla.org/en-US/docs/Class\_Elements#Private\_fields](https://developer.mozilla.org/en-US/docs/Class_Elements#Private_fields)
How should we report posts that would fit an AskJS tag, but are not tagged as such?
You press tab 5 times to align. How many of them are for indentation?
That shouldn't be possible, since any self-post that lacks the tag will be rejected with an error message: ---- Hi u/{{author}}, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked.
That's not an issue if you use modules. The top-level stuff in modules isn't global.
It's not the same. You can be pedantic and ask "how" but it just isn't - and all the people who are against Tabs will agree. Alignment and the overall visual arrangement of code is orders of magnitude more important than the font and color (unless you did something insane like a variable-width-font.
Very true. And with `&lt;script type="module"&gt;` you don't even *have* to use a bundler.
When ES6 was new (and, I'm willing to hazard a guess, even today) some people teaching it didn't fully understand it themselves. As a result I saw many articles say something to the effect of "you should use this nifty new `const`/`let` stuff instead `var` because `var` creates global variables and `const`/`let` don't. And that *is* true ... in the sense that `const`/`let` don't add the variables to the global (ie. `window`) *variable* ... but the fact that they still get added to the global *scope* was often left out.
Uhm. // ignore this &lt;- tab 5 times here: all indentation -&gt; printf("hello, world"); // &lt;- tab 5 times here: all alignment -&gt; // ignore this too
I think you are misunderstanding the meaning of "object oriented", especially in contrast to "functional programming". To be clear: functional programming does not mean you do not use objects! "Object-oriented" doesn't mean you don't have functions either (although that happens to be true in object-oriented languages like Java, where there are no unattached functions, only *methods* of objects). Object-oriented programming refers to the practice of using classical inheritance, aka polymorphism, aka I have a Vehicle class and I want it to share code with my Car and Truck classes so I make those classes subclasses of my Vehicle class. Javascript gives you code that *looks* like it supports that style, but "under the hood" it really uses a prototypal style (and this is a major point of frustration for programmers who come from classical inheritance languages). Functional programming, at least when contrasted with OOP, refer to other approaches for creating objects. Instead of using classes at all, let alone sub and super classes, you just make factory functions which generate objects. If you need to mix together functionality (like the Car/Truck/Vehicle case) you either apply a Vehicle mix-in in your Car/Truck factories or you simply have a Vehicle factory which your Car/Truck factories use as a basis for their cars/trucks.
That assumes there is always a text before the aligned block. ``` function test(param1, param2) { } ``` How do you align param2?
Oh, that's what you're meaning! Was really confused. Well, sorry that I haven't mentioned it: I'd assume a code style format that is predictable independent of what code is actually written. I.e. so that I wouldn't end up in a situation where I would have to align before any non-whitespace. To stay with your example: function test( param1, param2 ) { // foo bar baz }
&gt;I really wish JS would just figure out what it wants to be when it grows up... That will never happen, because no one wants to break the web. Making JS "figure out what it wants to be" would mean "growing out of" it's bad bits ... which would mean breaking old web pages that use those bits. If you code Javascript professionally you certainly can/should learn "the good parts". There was a whole thread here not long ago about `map`/`parseInt` which drove me crazy, because `parseInt` isn't "a good part". `parseFloat` works on both integers and floats (`parseFloat("2")` returns `2`), and it doesn't take a second (confusing) radix/base argument. So it drives me crazy that people don't just avoid the "bad parts" and use `parseFloat` instead of `parseInt` ... but I wouldn't want `parseInt` to ever stop working.
Hi /u/wadie31, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/lavimalik, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
i mean, to be honest, this is part of what i was getting at with my comment, though. i just think calling this a "lie" is really overly dramatic and attention-seeking. anyone that was a beginner likely read that and didn't understand the difference anyway. and i doubt anyone with actual experience read articles like that and confused the colloquial use of the term "global" with the actual use of the term. when i started reading about ES6 i wasn't quite a beginner, but i certainly was still in a key developmental stage of learning the intricacies of JS and other languages, in general. i read these same sorts of articles that you're referring to, and never once did i actually think that anyone was trying to say that these variables don't get declared in the global scope. in fact, i'm pretty sure a lot of articles specifically pointed out this fact. the ones that didn't probably didn't think it was necessary since the way that JS handles variables and scoping in general is a pretty specific feature of the language. the way global scoping works is well-known, and for a declared variable to *not* be available in the global scope would actually be really strange to me; *that* would actually be worth pointing out. it seems like perhaps you're confusing the fact that what makes `let` and `const` different from `var` in an important way is that they are not *automatically hoisted* into the global scope; but if you specifically declare a variables using `let/const` in the global scope, of course it's going to be added to the global scope. like i said above, if this *didn't* happen it would be very strange and note-worthy.
&gt; i just think calling this a "lie" is really overly dramatic and attention-seeking Says the guy writing how many lines over a sentence I wrote in five seconds that clearly wasn't meant to be taken as some kind of gospel statement. There *were* a lot of articles that spread this particular bit of misinformation, and I can tell by the upvotes that I'm not the only one who read them. So relax, there's no need to attack me.
Yep that’s what I meant. You’re right that it can be circumvented with a different style, but using only spaces allows any style to be used.
You're not wrong, but let's step out of "well, actually" land and talk about it how humans think. On paper, JS is an "object-oriented language with prototypical inheritance". You're not wrong. But what trips up newbies writing JS classes for the first time without fail? `this`. What dictates the scope of `this`? In many languages, it represents "the object that owns the current scope". In JS, it represents "the function scope that called this, unless you called a function to redefine the context". Oh. So in functional code, we're encouraged to abhor private state. State should exist as function parameters and will be converted to return values. You create data structures, then compose a series of functions to call. In object-oriented code, pillars like "encapsulation" and "data hiding" suggest that private state is the norm. You create objects. Those objects represent both the data structures and the operations you want to perform on them. In most JS I see, data structures are created then a series of functions is composed. It's easier to manage `this` when it doesn't exist, since it has functional scope rather than object scope. So I don't care what JS is on paper. I write it like it's functional. I have a feeling the reason OO was pressed upon it was in the 90s, there was a worry people would reject it if it pushed FP too far because "FP was for MIT dorks, I want to write C++ and Java".
If spaces are “standard”, why do IDE’s give you preferences for tab spacing? I mean I literally just go to the bottom right of the screen and click the button (in every single IDE I’ve ever used... sounds pretty standard?) but changing how spaces are rendered usually takes messing with files or buried deep in editor settings where you could also set your font to comic sans... but that doesn’t really sound like the standard thing to do ...
i didn’t mean to seem like i was “attacking” you. it’s just that wording it like you did doesn’t really help anyone that may have been confused by this in the first place, since it’s a mischaracterization of how let/const vs var actually works. just saying that those articles lied without providing full context of the articles or how the declarations actually work in differing contexts is in some ways just as much of a “lie” as you claim the articles told. and to be clear, i’m not invalidating your experience of reading these articles. that’s not something i’m interested in discussing because it doesn’t really matter. my point is that you may have misunderstood those articles or perhaps you misunderstood how these concepts work, in general.
It still didn’t work for me, but apparently that’s because I tried to scroll before the page loaded all the way. When I let it load before scrolling it works fine.
Thank you! how do you ensure that all id's are unique? trial and error by seeing if the code works properly? does the linter usually tell you that an id already existed?
**Object-oriented does not mean class-oriented**, nor are modern languages locked into a single paradigm. JavaScript supports both object-oriented and functional programming (though it isn't very good at either). I would say that functional programming, when contrasted with non-FP OOP, typically empathizes *immutability*, *pure functions*, and *point-free style*. In that sense, JavaScript was *not* created as a mainly functional language - at least not a competent one. It has poor support for immutable structures - many built-in methods mutate the receiver. JavaScript itself has no notion of a pure function. It has poor support for currying and partial application - they *can* be implemented in user code but are far from the elegance of, say, Haskell. Oh, and one of the big benefits of immutable state - easy parallelism - is completely lost due to the complete *lack* of parallelism (until recently, anyways).
You're right: on it's own "object-oriented programming" does not inherently mean "class-oriented". I incorrectly suggested as much. What I was trying to say was *in the context of different approaches a JS programmer can choose from* (but I should have been explicit and said that; hindsight 20/20 and all that).
That is what a framework is though lol.
&gt;Object-oriented programming refers to the practice of using classical inheritance, That's entirely false. That is one popular *style* of OO programming. Some light reading on class-based vs. prototype-based OO programming: [https://en.wikipedia.org/wiki/Object-oriented\_programming#Class-based\_vs\_prototype-based](https://en.wikipedia.org/wiki/Object-oriented_programming#Class-based_vs_prototype-based) &amp;#x200B; &gt;Functional programming, at least when contrasted with OOP, refers to other approaches for creating objects. Instead of using any classes at all, let alone sub- and super- classes, you just make factory functions which generate objects That's also not very accurate. Functional programming is far more about things like using declarative programming rather than imperative statements, idempotent code, and treating computation as the evaluation of mathematical functions. &gt;even though Brandon Eich had already created it to be functional, he papered-on the OOP bits at the last second to keep everyone happy. For starters, Scheme is both functional and imperative. Here is a video with [Brandon Eich himself listing the best parts of JavaScript](https://youtu.be/1EyRscXrehw?t=344). He mentions four things, the last two of which refer to the object-oriented nature of JavaScript: * First class functions * Closures * Prototypes * obj = {p:1, q:2, r:3} &amp;#x200B; &gt;If Facebook's smartest web engineers thought it was worth "taking React functional" despite the cost Here is Dan Abromov, one of the most famous faces behind React in his article [Things I Don’t Know as of 2018](https://overreacted.io/things-i-dont-know-as-of-2018/) where he includes the following in his list of things he doesn't know: * **Functional languages.** Unless you count JavaScript, I’m not fluent in any traditionally functional language. (I’m only fluent in C# and JavaScript — and I already forgot most of C#.) I struggle to read either LISP-inspired (like Clojure), Haskell-inspired (like Elm), or ML-inspired (like OCaml) code. * **Functional terminology.** Map and reduce is as far as I go. I don’t know monoids, functors, etc. I know what a monad is but maybe that’s an illusion. React is not functional programming. It embraces a very small subset of the things you'll find in a truly functional language like Haskell. I think the direction React is taking is great, but to claim React has moved away from object oriented programming is not even close to being true. When you use `{this.props.value}` what does `this` refer to? It's an object. The move in the JS community to embrace some functional features like pure functions with no side effects is good. But modern JavaScript is not what most people would call functional programming unless you are using a library like [Ramda](https://github.com/ramda/ramda). I could debate your other points, but I'm just going to stop there.
Kudos for V3, Harris! Any plans of including 'scoped slots', as in vue and angular(transclusion)? As a long term angular 1.x developer and short term vue enthusiast, I am desperately wishing svelte will support scoped slots as well.
The fact that some people are seemingly unable to grasp this simple fact has made me decide they are too stubborn and dense to be worth talking to.
Yeah I'd never thought of that! Destructuring and default assignment seem like the only places where you could actually do that, e.g. function pointless(a, b = a) { return a === b; } pointless(1); // true pointless(1, 2); // false
I agree that in order to understand JavaScript you have to forget about the other OO languages you know and learn exactly how prototypical inheritance works in JavaScript. But objects are *all over the place in JS*. It's literally impossible to avoid them, so you might as well learn how they work in JS, and how `this` works. It really should only take a few hours to learn how `this` works, but most people don't do the work and so are forever confused. I suggest every one read the two chapters in "You Don't Know JS" on `this`. There are only 4 simple rules you have to learn to understand how `this` works. A couple of hours max of reading, and a few days of reminding yourself and that's it. You should never be confused about it again. &amp;#x200B; &gt;about it how humans think If thinking about JS as a functional language is what personally helps you be productive, then go for it. Maybe that context switch is what you need to avoid thinking in classes-based ways. But there are lots of JS programmers who embrace JavaScript's powerful object model and use it to their advantage.
If you're working on something like an npm package or plugin, then prepend your package's name to the IDs that you generate. This way they won't collide with some other package, or your user's IDs. Otherwise, if it's for your own website then you can go wild because you should know all IDs within your own website. Alternatively, you can prepend the feature or component name to all IDs within those components. The reason you should use unique IDs is that when you do a getElementById, it will only select the first element that it finds, so if your users expected their element, but yours came up in the DOM first, then they would get your element and not the one they expected.
I think there are many that disagree, including legitimate language experts and devs alike. JS is not universally recognized to be a well designed language. Starting out in JS I definitely had that opinion, but after having moved to various parts of the stack it really has its issues. While not an objectively terrible language, the fact that typescript has become a "must have" for JS projects speaks volumes about javascript.
I would say most disagree with me, I feel like I implicitly conceded that JS is below average in terms of being a well respected given my language in my original comment. I just don't agree with a lot of the arguments about why it's bad. They almost always tend to revolve around it not being like other languages...and that's just arbitrary to me. Its origin (browsers) is special, and given how history played out I think it was pretty well designed all in all. The complexities of it's growth outside of the browser, and it's general advancement have yielded a versatile language IMO. When I think of a great traditional OOP language (C#/Java) the thought of it being linked to web browsers pains me. You need a flexible language like JS to deal with the flexible/inconsistent data browsers have to parse. I'm not saying it's perfect, but just traditional "good design" debates about language are hard to apply to it in a larger context.
At the moment in just working in Vietnam, no plans of techtalks or anything, I don't think I'm confident enough for something like that lol
Kind of, but you have to be careful. Safari, for example, currently doesn't expose these variables in modules. Window-defined globals, yes, but not these script variables (`let`, `const` etc.).
It's surprising to me that a global variable can exist without being attached to window. Global variables = window property is something I learned and internalized long ago
i mean, practically speaking, equating window and global kind of makes sense, even if it’s not technically the same. as far as talking about when to use them, you can talk about them in a very similar way.
Hi u/highletter, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thank you so much again!!
Just take a look at [MDN for let](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let): &gt; let allows you to declare variables that are limited to a scope of a block statement, or expression on which it is used, unlike the var keyword, which defines a variable globally, or locally ... _Unlike var which defines a variable globally_, suggesting only var defines global variables and let would not. And since the only concept of global that ever existed in JavaScript before this was that the global object (window) _is_ global, then it's easy to see how this could be surprising. ...Though maybe not surprising to the people that didn't even know let and const didn't create global object properties, still assuming they worked the same as var. This assuming they even know var declarations become global. That's not something I knew just starting out (var is local to functions, why wouldn't it also be local to `&lt;script&gt;`s?). Guess it depends where you are in your learning... and the source of your learning. ...in all fairness to MDN, [const documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) does explicitly mention const declarations can be global. At some point I thought MDN also said something about treating let and const as though they were getting placed inside their own, invisible block when declared in the global scope (also suggestive of not necessarily being global), but I'm not seeing it there now. Might have been somewhere else or maybe an older version of the MDN documentation where it has since been scrubbed.
Hi u/kyonenjs, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
see, that’s what i’m saying though—i don’t think that MDN definition is really problematic. to me at least, when it says that const/let are limited to the scope of the current block, that would obviously apply to the global scope _if you’re currently defining a variable within the scope of the global space_; which is unlike var in the way, as i stated somewhere below, in the sense that bar is hoisted outside of blocks. so to me it seems like understanding of hoisting is really what is causing people confusion here.
Note that scopes are not necessarily static as mentioned. Obviously the global scope changes over time, for example, as new scripts are loaded into and executed by the browser. But in sloppy (non-strict) mode `eval` can also introduce new variables into a scope dynamically at runtime. function foo (str) { typeof bar // undefined eval(str) typeof bar // number } foo('var bar = 1') In strict mode, `eval` code is executed in its own closure as not to affect the current scope. In this case those (non-global) scopes become static. Everything in the eval still has access to the surrounding scope given that its closure scope is a child of the surrounding scope, though being in its own closure, it cannot introduce new declarations dynamically to that scope. function foo (str) { "use strict" typeof bar // undefined eval(str) typeof bar // undefined } foo('var bar = 1')
Hi u/lmandala, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/amarillo2019, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yeah I didn't go through the rest of the thread (sorry) but I see what you're saying. I _do_ think it's all very confusing. But I think anyone can think in any direction depending on their experience and pre-existing knowledge. As a thought experiment, I'm going to try to list out the rules of global and its variables... * `&lt;script&gt;`'s are run in global scope * `&lt;script type="module"&gt;` are run in module scope (not global, but a child of) * Strict mode for normal scripts is local to the script (strict mode for functions applies to the whole function scope but for scripts it does not apply to the whole global scope, only that script even though each script is run in the global scope; modules are always strict) * `var`, `function` declarations in global scope creates a non-configurable global object property * `let`, `const`, `class` declarations in global scope creates global variables not in the global object * `var`, `function`, `let`, `const`, `class` declarations in global scope add to the global declaration record * `let`, `const`, `class` declarations cannot overwrite any existing declarations * `var`, `function` declarations cannot overwrite any existing `let`, `const`, `class` declarations (but can other `var`, `function` declarations) * Undeclared assignments in global scope creates a configurable global object property * Property assignments to the global object creates a configurable global object property * Sloppy mode: Undeclared assignments in functions creates a configurable global object property * Strict mode: Undeclared assignments in functions throws an error * Sloppy mode: Non-object-method function calls use the global object as a context * Strict mode: Non-object-method function calls use undefined as a context * Sloppy mode: `eval` in global scope can create declarations in global scope * Strict mode: `eval` in global scope creates declarations in its own closure scope (child of global) * `var`, `function`, `let`, `const`, `class` can override or overwrite (in case of `var`, `function`) any undeclared or global property assignments (as they're not part of the declaration record) ... I think that's most everything. If I think of anything else I can add to it. But it's not what I'd call simple rules for global.
&gt; so to me it seems like understanding of hoisting is really what is causing people confusion here. This I don't think matters. There are no scope differences between var and let/const at the global scope because they're all in the same scope with no other outer scope to hoist to.
Hi u/DEEEPFREEZE, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
lol, i mean if we’re considering every possible variable when it comes to JS scoping, i’m certainly not going to argue that it’s straightforward...it’s definitely not :D
if they’re already in global scope, i agree, but there are cases for var—as opposed to let/const—in which the var is hoisted to a higher scope. this point definitely _does matter_ because we weren’t only talking about var/let/const in terms of how they’re defined in the global scope solely when we’re trying to define them in the global scope. they’re are more nuanced cases with var when it ends up being defined in the global scope even though you didn’t mean for it to, which is one of the cases where understanding hoisting would come into play in contrast to only using const or let in which case you don’t really need to worry about that.
I'm trying to create a discord bot. I'm trying to login but it ain't working (btw I have no prior knowledge of JavaScript) I found how to start the bot on the guide for discord.js ( [https://discordjs.guide/creating-your-bot/](https://discordjs.guide/creating-your-bot/) ) I also asked some other people but it still won't work. Can someone halp me? const Discord = require('discord.js'); const client = new Discord.Client(); client.on('ready', () =&gt; { console.log('Ready!'); }); client.login(token);
Ah, I see what you're saying now ;) I was still thinking global scope vs global object rather block (or similar) scope vs global scope (which is dependent on hoisting).
haha i feel like all of the threads in here are starting to get confusing because, you know, JS doesn't exactly make things easy on everyone.
Maybe edit your comment to clarify that? Because people are upvoting it and perhaps walking away with misinformation they will repeat if they don't make it this far down in the comments.
Your use of a misogynist epithet here is [pretty consistent with your reddit output](https://www.reddit.com/r/MilesMcInnes/), except here you're in a mixed population with real actual adults. Cut it the fuck out.
Hi u/CrystalCrackhead, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I don't know about mithiril and flarum, but normally you could use onload on the element, and add an eventlistener inside that. Or, add it when creating an element.
&gt; let allows you to declare variables that are limited to a scope of a block statement, or expression on which it is used, unlike the var keyword, which defines a variable globally, or locally to an entire function regardless of block scope. Did you I intentionally leave out the context to mislead or did you just not understand what's written on MDN? The use of commas in that article is incorrect, which I could see causing some confusion. They're saying that `var` declares a variable globally *or* locally to the function scope. This is nonrestrictive on the functionality of `let`, which scopes to the block or expression in which it is declared. MDN docs are correct on this behavior, but they need an editor to fix the punctuation. The next paragraph even makes it explicit that `const` and `let` can be used to declare global variables, but that they aren't added to `window`. Again, this paragraph could use a good line edit. &gt; Just like const the let does not create properties of the window object when declared globally (in the top-most scope).
ie, edge not working.
&gt; More freedom to discuss related matters This _may_ need a bit more definition, imho, or It will easily derail and end up accomplishing little.
Done.
nice post [https://androidep.com/website-design/](https://androidep.com/website-design/)
The YDKJS series is great. There are six books total, and one book is totally dedicated to [this &amp; Object Prototypes](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes). So Kyle Simpson for sure teaches JS as the object oriented language that it is. He just doesn't teach it as if we are coming from Java or other class-based OO languages. And I agree that some people were doing that, and it is a good thing that there are fewer of them.
right and that’s a key difference. the way that he actually dives into prototypes and how they work in contrast to typical OOP is really important and actually formed the basis for my in depth discovery of JS internals.
You're quibbling over a lot of details. I don't have the energy to quibble over all those details myself, but what I will say is that a lot of what you're saying isn't wrong, it just doesn't really disagree with what I'm saying. For instance, I never laid out a thesis of what functional programming was or wasn't, I was just providing a basic response to the previous post. Similarly, I never said Javascript was Haskell, I said it was modeled after Scheme, not Java. Either way, it's roots are far more functional than it's name would suggest. However, one specific point: &gt;When you use {this.props.value} what does this refer to? It's an object. You can find that in the first page of their official tutorial! With functional components there is no `this.` anything: const MyComponent = props =&gt; &lt;input value={props.value} /&gt;;
Wow thanks for sharing. I would have never thought of that 🤔
Hi u/cranbog, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
[removed]
Implying that ES6 is somehow not "vanilla" JavaScript? What do you think ES6 is?
The standard from 4 years ago? What's wrong with ES2019?
There's nothing about browsers that precludes a type system. All browsers parse js into typed compiled languages anyways to give perf benefits. Js just hasn't cleaned up it's warts.
Related: A pretty decent site for live-testing your regex. https://regex101.com/
Will go through your feedback as soon as i have some time. Thank you so much, will take notes on it !
Made me laugh. You are right though. I gotta do the interfaces ASAP that's for sure. Thanks.
ES6 was the 2015 spec. Chrome has had 100% coverage of ES6 for years. Hell, it already has 100% coverage of ES2019.
Hi u/campercroco, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I mean that there's usually a standard amount of spaces to use for each language. 2 for JS, 4 for Python/Rust, etc.
Hi u/MartyDevs, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
And you feel this is unattainable using the correct key (tab) and therefore that means the standard is to press the space bar key that many times? Cos I could use post to update data on a webserver but there is already a protocol for updating called put. I don’t just do it cos I like the word post more... I just use the correct tool for the job.
Made some loaders: [https://github.com/gaoryrt/minimal-loading](https://github.com/gaoryrt/minimal-loading)
Hi u/gaoryrt, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Not at all. I use tab too, but it is set to input spaces.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php] [Found this discussion in r\/JavaScript: The real reason to use tabs over spaces. What are your thoughts?](https://www.reddit.com/r/PHP/comments/ca4k18/found_this_discussion_in_rjavascript_the_real/) - [/r/programming] ["i've been slightly dismayed, that in every tabs-vs-spaces debate i can find on the web, nobody is talking about the accessibility consequences for the visually impaired"](https://www.reddit.com/r/programming/comments/caieax/ive_been_slightly_dismayed_that_in_every/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
We have a special key for spaces on the keyboard as well.
[https://stackoverflow.com/questions/2316677/can-git-automatically-switch-between-spaces-and-tabs](https://stackoverflow.com/questions/2316677/can-git-automatically-switch-between-spaces-and-tabs)
&gt; a suitable format like JSON This just shifts the problem to another file, but it still persists.
This naming convention pains me.
Simple, tabs are inconsistent. They are the ones with the "disability" therefore they should use the tools that are required to support such "disability" and in this case, monitors and conversion tools. Hopefully, this post isn't too hurtful for anyone.
Visually impaired guy here. When your fonts are huge it's always a battle to get as much content within view as possible, so tabs of 8 spaces just gobble up too much screen width. On the other hand, tabs of 2 spaces make it hard for me to discern indent depths more than a few lines apart (which is the main reason why I mostly avoid Python). There's another thing that strikes me as weird in coding: manual line breaks. So you're manually breaking at position 80? Now imaging editing that with only 60 spaces available. You'd end up with parts out of view, or with word wrapping, a lot of short wrapped over fragments. Editing that with a super small font and wide screen? Now you're wasting most of the screen real estate. Add to that the fact that different tab widths have effect on this too. Modern editors generally have great word wrapping integrated, so why not use that? Of course I can't speak for all visually impaired people. There's a lot of different kinds of impairments, and probably a few personal preferences scattered around as well.
&gt; one of them uses tab-width 1 because he uses such a gigantic font-size &gt; the other uses tab-width 8 and a really wide monitor Wow, in the midst of your argument in favor of tabs over spaces, you have a first-rate argument against tabs -- that they're arbitrarily defined. &gt; is there really any reason, in favor of spaces, that counter balances the negative consequences for the visually impaired? Yes, there is -- a space has the same meaning in all environments. A tab doesn't. This is particularly true anywhere whitespace is significant, example Python source, or YAML files, among others, many of which become uninterpretable/ambiguous if tabs are used. Consider the basic fairness rule for issues like this -- the greatest good for the greatest number.
I like the function, sadly because it's not part of the language I imagine most people would rather see an if or a switch, just because of familiarity. I really like the style but I can see it being seen as awkward by the uninitiated.
Hi u/nowboarding, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Uuuh how do you type the "@" character? It's right alt + q on German keyboard layouts. And everyone who knows how to touch type uses the right shift key, no matter the language.
Thanks a lot from Your reply, I will rethink my UI in this aspect.
What happens when you change the name of the function that precedes the open paren?
Why should the preference of whomever merged an `.editorconfig` file into the repository, be a default? Other than the classic (but in my opinion still meaningless) argument that it's *their* repository? Github is for collaboration, at least more so than using it as a backup (Git is not for backups) -- what purpose does imposing your own tab width (used for *viewing* the code on GH) to everyone who browses said code, achieve? And with an extra dot file there -- there's typically half a dozen already, just cluttering (extra information is potential extra cognitive load) the repository. I don't understand the decision, but knowing how some decisions are done in this industry, I can't really act surprised.
I'm not expert on error tracking services, but here are some answers: &amp;#x200B; &gt;Does it ultimately depend on window.addEventListener("error", callback) or is there something else they're doing? For most part - I think so. But some error reporting services (like Bugsnag) also have libraries to catch errors from various frameworks - e.g. React error boundaries. &gt;If they're logging this information back to their server, is there any way for them to prevent someone from sending a manual request with garbage data in there? Or at least differentiate between a request that was actually sent to them from your app versus manually? I don't think most of these services prevent that. You can easily send garbage request manually or by "faking" error - but from my experience - nobody does that. There's also another problem (on opposite side) - if someone has tracking blocker extension (or ad blocker configured to also block tracking) - then some error reporting services are blocked and the errors won't be submitted at all. &amp;#x200B; &gt; If you were building your own, what kinds of things would you add to the window.addEventListener("error", callback) callback, in addition to the error object itself, to help you identify the cause of the error? (Or know of any open source error tracking services I could look at to see what information they're sending back?) Most error reporting services already gather useful information automatically and they also allow to add your own additional information. The one thing I like to add is the user info (if user is logged in) - makes debugging a lot easier. Just watch out to not add any secrets (tokens, keys, etc.). [https://docs.bugsnag.com/platforms/javascript/customizing-error-reports/](https://docs.bugsnag.com/platforms/javascript/customizing-error-reports/) [https://docs.sentry.io/enriching-error-data/context/](https://docs.sentry.io/enriching-error-data/context/?platform=browser)
A huge, ugly diff, that’s what. Seriously though - as you would expect, the indentation of the arguments change with the variable name. This the primary reason I’m opposed to this style of indentation - it produces much larger diffs than necessary, which makes version history harder to read and is more prone to conflicts.
You mean like two separate pieces of code and documentation? Why would *anyone* want that?
Because of a valid disability?
Alignment doesn't necessarily survive an automated refactor (renaming variables, functions, etc..)
In some languages (like Haskell) it's not uncommon to see stuff like this if (this &amp;&amp; that || something &amp;&amp; isImportantEnough &amp;&amp; toMultiline &amp;&amp; JustDoIt()) { Ignoring for a moment that this is in no way valid haskell. But odd number of spaces are often used to align things with operators and stuff like that.
That and convinced me that alignment is brittle and not refactor safe.
The comments in this post also makes a good case for never using alignment.
There's no such disability as "tab disability". Nesting your text a bit further or a bit less wouldn't help you if you have poor eyesight.
&gt; your spaces-to-tabs algorithm can't distinguish indents from parameter alignments As pointed out elsewhere here, alignments are brittle and might not survive a refactor. We should be getting rid of spaces, period.
Spacebar alignment won't save a refactor with changing variable and function names, so we should probably drop that too.
It's useful for diffs though though that if you modify the first condition, it doesn't modify the line with the if on it.
Don't tabs automatically convert to your desired format in the IDE?
What personal attack?
And what if you need to rename any of that via a refactor?
It will also survive a refactor.
Those only control how \t is displayed and what happens when a tab key is pressed. OP's settings, aiui, solve the "code has 8 spaces for tabs and I want to see 4 spaces" problem.
That won't survive an automated refactor.
Do the tracking blockers actually remove the “error” event listener on the window object or they operate differently? Are there any open source error tracking services you know of? Just curious how do you personally handle this in apps you deal with?
good bot
Thank you, fsdagvsrfedg, for voting on dadjokes_bot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
[removed]
But now there is an error 502 on the website
Hi u/gandhi89, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The question is how does your team handle version control?
Fuck wheelchair accessibility too, right? That's just optimizing for a minority at the expense of the majority.
Try a refactor that automatically renamed your variables and tell me how you like it.
Sentry is completely open source (disclaimer, i am affiliated with it). Regarding your question about blockers, most of them just block outgoing requests to our service as far as I know, because it's least likely to break the app.
How are they inconsistent?
Do spaces in those languages serve a functional purpose which could not also have been achieved using tabs?
and even if those two particular people could, can the next guy?
Not tab disability, visual impairment. Obviously it does help these two people.
Wasn't it posted on multiple subreddits (including this one) before? I'm 100% sure I read this article before and have seen it on reddit multiple times.
No. Just because they have a disability doesn't automatically mean: - They can't make a bad choice like any other developer could. - Their choices are absolutely beyond critique. It makes no sense that pushing tab indentation few spaces out or in BOTH helps visual impairment. I mean just... engage rational thought I guess. Which helps: smaller tabs or larger tabs? If both, how come? If either, why? What other ways are there to get the same problem solved?
Tabs for indentation, spaces for alignment.
Which helps? Depends on the impairment. They're talking about two different people with two different impairments. For example, there are near sighted people and far sighted people, they use different types of glasses.
Pretty amazing, thanks for the tip :)
Yes, enough talking in the abstract and in theory. What kind of "different" impairment would require shorter tabs, vs. which other longer tabs? Those are not glasses. Those are tabs. Let's not be so loose with terms, phrases and concepts.
Read what OP wrote again.
Turn you monitor sideways (portrait). You'll get 110 lines of code and 120 characters max width. I wouldn't code any other way.
I did. Not convinced, insufficient detail, lots of assumptions.
Nice summary.
Flutter Development Services at CronJ enabled us to rapidly develop our foundation with a product manager, lead developer, and senior designer. In just over 60 days we went from concept to Alpha. The speed, knowledge, expertise, and flexibility is second to none. The CronJ team were as part of tripcents as any in-house team member of tripcents. They contributed and took ownership of the development just like everyone else. We will continue to consult CronJ. As a start up, they are our secret weapon.
Hi u/astrov01, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
How could a tab possibly make code more complex?
What is the price after the free lessons ?!
Elastic tabstops are such an elegant solution to the whole debate. It turns the tab character into what it should be semantically, a character to denote alignment, just as it is used in a wysiwyg word processor. When supported by the editor, it also allows the user to align columns using a proportional font instead of the fixed-with fonts we have to use now.
but I would say lisp is a prime example of code that can be very well autoformatted all the way.
If you only use spaces then all of the white space in your document is between 2 characters. If you add tabs then your white space in your document is between 3 characters. 3 &gt; 2.
around 70$ or 60€
The local editorconfig does not need to specify all parameters, only those you wish to overwrite with your local settings.
FreeCodeCamp is free and does the job real good, plus it comes with a helpful community.
It's certainly a good starting point and really establishes a strong foundation to beginning a fluency in JS, I only wish there were more vanilla JS certifications! Quincy recently mentioned an overhaul to the curriculum in the near future to make all of the challenges based around projects, looking forward to seeing how those play out.
As I said before, I think the fact that JS's web-based origins revolve around digesting strings and converting them into whatever type, a dynamic/weak type system makes sense. You could argue that when you take the browser away a strong type system would make sense again, but with languages like Node part of the desired result is as much unity as you can get between the server and client languages (IMO). Our opinions appear to differ, thems the breaks.
Hi u/matthewfelgate, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Even for not visually impaired tabs have the advantage that each developer can set his IDE to the personally preferred indentation level. I can remember the day when I discussed with a co-worker about 2 vs. 4 spaces ...
Fuck off, just because something’s obvious to you does not mean it’s obvious to everyone.
Definitely other sub not this one. I participate in multiple subs related to JS, node and front end
just don't align { thisIs: 1 aVeryNiceStruct: 2 }
Thanks for the article, even though you spammed 'Snyk' 24 times in a 4 min read article...
Alrighty then
made a morning pages app that blurs as you type, so you can journal at coffee shops. https://blurrish.com
Hi /u/stevoscript, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
TypeScript is not EcmaScript implementation. Babel.js are used to bring current EcmaScript functionality to old browsers.
Using tabs allows for the viewer/editor to determine the appearance of the code, individually. Using spaces, you choose for everyone. Tabs &gt; spaces. Then, set your tab width to whatever you like.
Hi u/Sammanis, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/_f0c1s, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You didn't clarify what you got wrong.... I give up.
I'm not quibbling over details. You got some important stuff totally wrong. Starting with the actual definition of what object oriented programming is. And with claiming JavaScript is not an OOP language, when in fact modern JS uses OOP almost everywhere. It just doesn't use class-based OOP. As far as your example of a pure component, yes React supports that. However, you took my point out of context, where I mentioned that React uses `this` and OOP on the very first page of its *official* tutorial.
Hi there, &amp;#x200B; Thank you for your response. I don't think the post is too hard to follow, I'd just like to get a greater sense for how it's achieved. I'll be following your advice and looking into machine learning / decision trees a little more :) &amp;#x200B; Thanks again! &amp;#x200B; Sam
Hi u/GitW_85, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Spaces are definitely the way to go, leaving visual representation of indentation representation to the code editor. I don't believe however what your workmates need is currently possible with jetbrains or vscode, but feature requests can be put forward. If you have people in your team that need tabs then by all means use tabs.
Any chance for security purposes you could put the book into epub format instead of PDF?
I haven't seen people actually do this, but in Windows Ctrl+Alt is a substitute for AltGr. So in order to type "@" you could also press Ctrl+Alt+Q. This actually comes in handy if you have small 60% keyboard or similar and want to use the AltGr key for another purpose like macros or layering.
Hi u/Pear0, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
triggerElement.addEventListener('click',(evt) =&gt;{ if (targetElement.classlist.contains('active-class)){ targetElement.classlist.remove('active-class) deactivateFunction() }
Don't show code like that you can paste your code in sites like [https://pastebin.com/](https://pastebin.com/) or something, also use [/r/LearnJavascript](https://www.reddit.com/r/LearnJavascript) for "n00b" questions. As for the problem in your code - you are removing whole paragraph in your function restart. You could just delete the line - "hello.parentNode.removeChild(hello) ;" and it should work as intended.
Questions like this are always best suited for /r/learnjavascript FYI
Do you really need to remove the node? You could just change the textcontent to = ’’
It'd probably help your understanding if you use more descriptive variable labels. Changing `hello` to `helloEl` (for helloElement) would show you that `helloEl.parentNode.removeChild(helloEl)` is removing the element where your text content is located from the page. You then can't change the text of an element that doesn't exist.
Hi /u/swurvinmervin, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I think we are saying the same thing, but with a slightly different conclusion. You say nobody is doing it in production, I think you are overestimating most people in thinking that *nobody* is using vanilla DOM in production. There is such a thing as premature optimization, and I can think of a lot of applications that would be just fine to write in vanilla JS, vs the overhead of a framework. It's also worth noting that a person or organization can totally decide to roll their own framework. React and Angular were made by large organizations, but Vue and Elm are really the brainchildren of lone developers. You're totally right that it's most likely going to wind up as spaghetti code, but there's no reason you can't do it well if you put in the time and energy.
Download button for PDF does not seem to work. I did enter email/name before trying to click it.
Feel free to DM me and I'll send you the PDF
Hi /u/traveler_tom, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/EdurekaYouTube, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I'm afraid EPUB will be only available for the paid version.
Hi /u/matthewfelgate, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Too bad. Was interested in the book - but not going to chance opening a PDF.
Hi u/danielgomonea, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Depends on your automated refactoring tool, but yeah for a lot of the popular ones (Prettier, Eslint --fix, etc.) this is true.
You might end up with some misaligned function declarations, it's still readable and whoever edits that file next will fix indentation. There's an option in VS "Align contents to opening parenthesis", if it was arbitrary alignment that nobody uses, they wouldn't put that option in there.
Download as a PDF and then convert it into epub with Calibre, or open the PDF in a sandbox.
I created a react seed with redux and testing. It's a lightweight scalable alternate to create-react-app
Hi u/carrrrrrr4, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
but then programmers will have an inconsistency in their text editors: two different ways of inserting space characters.
I wouldn't open a PDF myself, I understand. My blog is well know in the JS community, I'm Valentino Gagliardi. Why on earth I would hack my readers? Anyway feel free to DM me and I'll send you the EPUB.
That doesn't matter. The code itself is more consistent. Regulating how someone uses their keyboard is a futile endeavour.
Hi u/carrrrrrr4, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Pattern matching limited to text.
when people talk about "code consistency" they usually mean consistent style between different files in a code base. you care about consistency between the characters used at the start of a line and the characters used between words?
You know, I've heard of this new site called "Stack Overflow" ...
I thought that was clear on the [wiki page](https://www.reddit.com/r/javascript/wiki/index/askjs), is it not?
I've not been doing this for long, and then only for fun. For me, I think, it's not so much a question of understanding what it does, rather; it's trying to understand why or when that's a good way to do it. From my perspective- which mainly inhabits blogs and stack overflow- this seems to be how everyone creates every function everywhere. Like this isn't a question of style... Like I trade in 10 characters; and now my function doesn't look like a function, and it now has scope and execution order dependencies. There must be something I don't get. I was expecting there to be an answer like, "It's how you do private functions in js", or "It's how you keep your poorly-encapsulated time-saving hacks out of your functions list." But it doesn't seem to. And if this is a conversation that's still going on- and I wouldn't know- then this could be why.
I think this is pretty persuasive, though I also think that storing the code in VCS with tabs doesn't preclude using spaces in your editor. In Vim that's pretty much a \`bufread\` and a \`bufwrite\` autocommand, and I'm confident that most modern editors will let you convert to your preferred format on the fly with no noticable delay.
It was, it just wasn't mentioned here. C'mon, this is Reddit! No one RTFAs here! ;)
Hi u/brodega, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
https://javascript.info/
Hi u/lysywojtek, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/lysywojtek, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/sshaw_, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; when people talk about "code consistency" they usually mean consistent style between different files in a code base. Yes, thats how I usually talk about code consistency but this thread is about tabs vs spaces and white space. So here I am talking about it. &gt; you care about consistency between the characters used at the start of a line and the characters used between words? Yes, it reduces complexity in the code and I believe code should be as simple as possible. &gt; i notice your comments are inconsistent because you're using both upper case and lower case. English is extremely inconsistent but it's the language we've all agreed to speak here. My comments are also rather low effort. I don't comment on Reddit for a living and don't consider it a craft that needs to be perfected. What is even the point of bringing this up? Are you trying to imply that because I'm inconsistent in one area of my life that I should be fine with inconsistency in other areas of my life? That is fallacious reasoning.
Hi u/wazzalk, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yeah, that's what I was thinking. Almost any semi-decent editor/IDE will recognize leading spaces as "tabs" and let you configure their visual size
The issue with tabs is that they have different meanings in different contexts and environments. This is a particular problem in languages like Python, where indentation is syntactically significant and two editors, side by side, will show what appear to be different programs with different functions, when displaying the same file. I say this after having laboriously removed tabs from large, misbehaving Python programs whose syntactical meaning could not be sorted out -- and which failed to execute correctly -- as long as tabs were present in the source. This issue also comes up with some old-fashioned database files that rely on fixed column widths to separate fields, and that also must be carefully transformed to either use distinct field delimiters like commas, or to be read just once into a modern database like MySQL to avoid the issue altogether. Such files often have tabs and spaces intermixed, usually by people who didn't appreciate the problems this would create when the files were exported into a different environment.
Where is Chapter 2 (in the read online version)?
The book's source is provided as Markdown files? You can build your own EPUB.
It's work in progress :-) It covers JavaScript's fundamentals (functions, variables, objects)
4 spaces for indents ftw
&gt; He barely knows jQuery, doesn't seem to know anything about CSS outside of Bootstrap, and believes PHP is a good choice for developing a webapp in 2019 one of these is not like the others
This looks interesting, I'll be checking it out thank you! Quick personal question regarding publishing stuff in Markdown via GitHub if you don't mind: how do you keep your thoughts and even text layout coherent and in order? Do you have a specific method to keep track of what you want to cover vs what you don't want to within a specific subject? I try to write down notes on whatever I'm learning and try to structure everything so the material can be read and understood by others, but I find it difficult sometimes to structure things...well? Example: https://github.com/jsore/notes/tree/master/v2/enterprise-js Am just curious about your writing structure. Apologies for any ambiguity here, the feeling isn't easy to put into words.
I've been using Vim since the 90's. It's always handled tabs just fine.
Hi u/upworknepal, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Let me know when you have a paper print available.
Very starting point or even for brushing up basic JS. Thanks a lot for very good book!!
Is that what you believe? Wheelchair ramps are fine with me. The more the merrier.
Nah, they're all bad choices in 2019, so there's no issue with parallelism.
Arrow functions are more predictable and way, way, *way* more legible for currying, which is generally enough reason to use them everywhere. Implicit return is also super awesome, because you can omit the braces and return statement for single-line function bodies, which are pretty much every function when you're writing functional code. For example, currying with the function statement is fucking bullshit: function curried (arg1) { return function (arg2) { return function (arg3) { /* do the work */ } } } With arrows: const curried = arg1 =&gt; arg2 =&gt; arg3 =&gt; /* do the work */
&gt;There is some level of mastery of Bootstrap or jQuery for which one can say they "know" the language. Can someone who knows Javascript use jquery? Yes. Do the vast majority of people who use jquery know Javascript? No. You're right again, this isn't an interesting discussion. Reading dummies defending such obviously incorrect positions is never interesting.
simply do tab to two spaces conversion at save and be done with it.
Great job man
I personally use Trello for keeping notes. I try to read every chapters over and over to make sure it has a coerent flow alongside with the rest of the book.
Agree to disagree I guess lol
Don't ask questions, just do as the hivemind is telling you. /s
There goes again the mindless parroting of an out of context quote from Knuth. I recommend you watch this video for a bit to wisen up https://youtu.be/rBwsrLFBg5Y?t=90
You're so angry for such a flippant comment, that I'm just gonna assume I hit a little close to home. &amp;#x200B; Whoa, I did. I found this comment: "Take this "web development manager" I work with. ". &amp;#x200B; Who cares man? Be confident in what you know, and don't worry so much about where the line is for what other people know. You're trying to paint my comment with the widest brush, because I guess it's all you know. But if you stop gatekeeping, you'll get to a better employer with better people, and then you'll begin to flippantly say, eh, knowing jQuery is knowing JavaScript, because nobody gives a fuck about the sanctity of beginning JavaScript
Hi u/bagelonabiscuit, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
jsSpreadsheet Microsoft will have to enforce the tradmark otherwise it will weaken their trademark for it jsSpreadsheet just as cool :)
A switch case would probably be more performant in a hot-path, but for ordinary conditional statements, this looks great! Also, I think Ramda has a function called `when()` which does this kind of thing for a single conditional, e.g. `R.when(isEven, doSomething)`, which is pretty handy.
And you seem to like mindlessly parroting your favorite video whenever anyone mentions Knuth ... even if what the person in question is saying agrees with your video :(
Hi u/maximusGram999, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; 2,3,4... spaces require... Textual code compresses well if you are thinking about sending huge code files over the network. &gt; more keystrokes with spaces &gt; &gt; a lot of fiddling in case of changes to the indentation unlike just hitting shift+tab I use tab and shift+tab in Nopepad++ and Notepadqq. The former inserts two spaces the latter deletes two spaces. &gt; 2 spaces make code so squeezed and hard to read, 4 spaces make your thumb exhausted Use bigger font if that is an issue. The huge 16 spaces per tab-character wastes screen estate which is annoying if I am reading code on a small screen smartphone or when having to refer to documentations, protocol specs and profiling logs while editing the code. &gt; you can set tabsize to what you like Which is quite the problem when people line up parameters, arguments or multi line expressions/statements. &gt; Bill Gates prefers tabs And the last time Bill Gates wrote commercially released code himself was probably when he wrote MicroSoft BASIC in various assemblers for home computers. He was probably disk space constrained then and various other bad coding practices were also common.
Looks nice, will definitely keep this on my list of things to watch. *Small note*: you might want to consider replacing instances of `var` with `let` (seeing as you are already using `const` in your examples) and maybe describe the difference between the two in behaviour and scope (hope it isn't already in there and I've just overlooked it ... ).
Wow! Ok, well; there's a whole thing I knew virtually nothing about. Thanks. At least I know what I'm staying up late getting in to tonight. Learning Japanese will have to wait. Again.
 calcRelativeSpeed ( craftVelocityInMetersPerSecond, targetVelocityInMetersPerSecond ) is something I have seen, both in dynamically typed languages and statically typed languages (well other than Ada and Rust) because the latter kind often do not have proper semantic type enforcement.
I have found the opposite. I use glasses and like to use bigger font sizes for code than most people whose screens I have seen. Four spaces eat up a lot of screen space. Quite a few times I had to lint code into something readable because of the original author using tabs with 16 spaces per tab. And on the screen estate question, the code editor is not the only window on screen. I often have a datasheet open, protocol specification, software library documentation, serial consoles to various chips in the product being developed, datapath schematic of same and profiling/simulations results open. And that on a screen 60x30cm in size.
are you using an proportional font for your code? or are you using a tiny font size?
Hi u/Basicallysteve, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thanks for the interest. There will be a chapter for JavaScript fundamentals covering let and const, plus a chapter on code refactoring from ES5 to ES6
I almost never use the right shift or alt keys and I never thought about it until reading your comment.
Most IDEs I have across are only monolingual per file excepts perhaps those that handle web developement. Embedded developement still uses inline assembly, often in four diffrent assemblers (because not the all chips in the thing are of same architecture) and I have yet to see an IDE handle such correctly.
you just snagged on a huge pet peeve of mine! DO NOT SPLIT NAMES! Not all cultures around the world use surname systems and some have concative words in them like german von or such.
Hi u/OneDarkSoul1, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
so you want to go from textual code representation to hypertextual code representation? A bit like the code tools in Squeak or Dr. Scheme?
When you have that many predicates inside parenthesis, you likely need to refactor something.
IMO, tabs work best. We are well past the Text User Interface (TUI) days, and can just adjust the few places that need consistent alignment. For example: @param port 5 @param protocol IPX The "port" parameter has 3 tabs and the "protocol" parameter has 1 tab. These line up perfectly when my tab stops are set to 3 spaces. But when I set my tab stop to 4 spaces, they do not line up. If I used spaces instead of tabs, they would always line up. If I fix this to align properly with a tab stop of 4, "port" needs 2 tabs, and "protocol" still has only 1. But then changing to a tab stop of 3 will break alignment.
Hi u/milandean, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Is there a library with this function for ruby?
I just took a short look until now, but I really like the visual presentation. Looks really promising. Have subscribed and looking forward to the new additions!
Hi u/texxxo, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I agree that the needs of the visually-impaired are important to take into consideration. Consistency within the codebase is also an important thing to take into consideration. I've seen a lot of talking points around just using `.editorconfig` to maintain consistency across the codebase, and I have to agree that it's the right move for ensuring the project's standards have maximum inclusivity, although I believe just saying "use it" is not a sufficient solution. Here's how to use it properly to solve the problem OP is describing: Most people think of `.editorconfig` as a tool that makes everyone's code editors use the same settings, which is a decent assumption and use for most people. The problem with this assumption is that it forgets that it is _optional_ in modern IDE's, and completely ignored by default in some without the proper plugin. With this in mind, people using `.editorconfig` to maintain consistency across the codebase should really not rely on people having it configured in their editor. The proper way to use the tool for this purpose is the same idea behind `prettier` and `eslint`, which, when used properly, are great, time-saving tools. Include it as a step in a build or commit pipeline, so that once the code is part of the larger codebase, it ensures consistency between contributors of a project without depending on their editor settings being configured properly. With the tool integrated into a build step, it frees users who have special needs such as the visual impairments OP noted (or their own strong opinions on formatting) to use their own settings in their IDE by turning off the `.editorconfig` integration. Using this approach ensures consistency across code in the project while also allowing users to write code however they write code best.
CoNcEpTuAL.
In the worst case, cond should be pretty easy to implement with any language that support functions as first class citizen ( [https://github.com/lodash/lodash/blob/master/cond.js](https://github.com/lodash/lodash/blob/master/cond.js) ).
one more reason for tabs. you can set the width to whatever you want.
Thanks!
Actually, no arrays are created at execution time. Cond is used to build a function, not run it. The execution is just a for of, by the way. &amp;#x200B; Ramda is great :)
Oh, that’s really smart!
Made a visualiser that you can manipulate by changing the relevant algorithms. It's built on top of ThreeJS (WebGL) and is completely front end :) &amp;#x200B; [https://visuals.page/](https://visuals.page/)
Properties can be objects (or references to). I suppose my frameworks have handled the given use-cases different than yours such that I see different needs. That's part of the problem of "standardization" here: it assumes certain things that may not be universal to all after all.
Nothing like a screen reader saying "space" 20 times to indicate 4 tab stops ...
Hi u/ngof15, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; English is extremely inconsistent but it's the language we've all agreed to speak here. My comments are also rather low effort. I don't comment on Reddit for a living and don't consider it a craft that needs to be perfected. What is even the point of bringing this up? Are you trying to imply that because I'm inconsistent in one area of my life that I should be fine with inconsistency in other areas of my life? That is fallacious reasoning. no, my point is that you're using two cases for letters when one would do. should engish prose be as simple as possible? &gt; Yes, it reduces complexity in the code and I believe code should be as simple as possible. more complex in what way? there is more information encoded in a file which uses spaces for indents (namely the size of each indent)
You've gotta check out the [Mostly Adequate Guide to Functional Programming] (https://mostly-adequate.gitbooks.io/mostly-adequate-guide/). It will change your life.
&gt; Should engish prose be as simple as possible? English should follow the rules of English if you care about writing good English. &gt; more complex in what way? there is more information encoded in a file which uses spaces for indents (namely the size of each indent) I said more complex, not larger. It doesn't matter how much information is there because the quantity doesn't matter. Adding an additional character for no good reason is adding complexity. Three characters is greater than two characters.
Come back when you've had to deal with idiots who think they know Javascript (or even how to program) because they can cobble together a couple of pasted lines of jquery, and maybe even type them from memory. You're probably one of those idiots yourself. Is that why you're so scared of people "gatekeeping"? Fuck off.
It doesn't. As I said, you should be using a UI to view data. It's not the data's job to present itself in a readable manner. That's the UI's job. In the case of a JSON payload, an appropriate UI might be either your browser's dev tools, or a 3rd party browser plugin, depending on your specific needs. In the case of an at-rest file, an appropriate UI may be a CLI tool, a web app, or any number of other options.
We can agree that you're wrong. They're nothing but tech debt at this point. Starting with any one of them is like having the cash to build a house and choosing to light the money on fire and take out multiple high-interest credit cards instead.
It’s not just the data you’re interested in, but also the synchronization. These actions each represent a specific piece of data that is being loaded/saved. So we don’t use any data being returned from the dispatch calls. This is also useful for composing larger operations out of smaller ones, eg “FETCH_ALL” dispatches “FETCH_USER” and “FETCH_ACCOUNTS” and more.
I had to disable Firefox's content blocking for the page before it worked.
so you advocate for an alternative to ASCII which does not include tab characters?
No, I was restating what you said, but using a more obvious disability.
ASCII is used for more than just programming.
What if it's not just one file, but a large code base?
I did one years ago, don't remember where I found the code but it basically hijacks functions like setTimeout and addEventListener to add error handling logic, on top of the usual window.onerror. I don't use it anymore but the code is still there: https://github.com/d07RiV/d3planner/blob/master/scripts/errors.js It helped get rid of the actual errors rather quickly, and notified me if I pushed some bad change, but after a while all I got was reports from some really obscure browsers. As for protecting vs bogus requests, not much you can do aside from trying to filter out similar requests based on location, but there will always be a way around it. Are you worried about people making you waste time trying to find mistakes in perfectly valid code.
Some languages are heavily attached to a style of indentation that won't work easily with tabs. For example, the "align with this bracket" style in Haskell and Elm: ``` let x = [ width "860" , height "200" , viewBox "0 0 860 200" ] ``` This would be awkward with mixed tabs and spaces. Also, ghci I believe actually rejects tab indented code; I'm not sure why.
Thanks!
Imagine being this douchy about a wrong opinion
I don't use Jest reporters. I would love to know more about them though. Do you use them? If so, what do you use them for and how do they benefit you? Also, why do you want to create one?
Hi u/HiTek_142857, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It's on amazon https://www.amazon.com/dp/1099295688
Hi u/HiTek_142857, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Wait, is this an actual CAPTCHA that people use? I've never seen it in the wild, and it seems (and obviously is) easily exploitable.
Coffeescript used to be very popular before ES6, since it brought a lot of innovative features over ES5. ES6+ has since added many of those features, so the use for Coffeescript has diminished. However, there are other languages like Typescript or Elm which add features over JS which will never be added to JS, and many are using those languages and transpiling to JS to use those features.
like what?
AW
Mostly an exercise to learn Jest better, practice some data viz. Jest offers the ability to hook into various points in the Jest lifecycle using reporters, essentially exposing the result of each test which you can consume kind of like an API. If you use a test result processor, you can process the entirety of the jest output as a whole. Reporters tend to be used most often in CI, configured via environment variables, and the results of the build can be processed into html which a script can then later email. Majestic is a "zero config" GUI built for local development and offers a bit more friendly of a user interface than the CLI but without any options to customize and export reports. Not much of a need for a reporter for small project but I could see it being useful on larger codebases, for QA engineers in particular.
For prototypes or working on solo projects, use whatever you like using. It only starts to matter a if you are using 3rd party libraries or working with teams. When it comes to the libraries, you’d just see how active and up to date the repos are. If there’s a strong community behind the language, then it shouldn’t be too difficult to find help or hire people if that need comes up.
I assume by ASCII you mean Unicode (UTF-8) and the answer to "like what" is "everything". Nothing really uses ASCII anymore (including programming).
I personally imagine that if you have special reading needs, the ability to override .editorconfig is a top level requirement.
Hi u/WorriedInSF, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
i mean what uses require tab characters
Link please
Lines longer than 80 characters become hard to follow anyway. Source code 'portability' is more or less important, depending on the project. For example: for low level components of an OS it's important for the code to be usable on vim/emacs/nano, in case you don't have a GUI or if you're on a headless server. On the other hand, if we're talking about a Javascript framework, you can assume that the user is running a GUI on a computer with a decently big screen.
This interviewing stuff gets discussed more over at /r/cscareerquestions, FYI, so you might want to look around there. FWIW I'm also self-taught, I've specialized in front-end JS in my career so far (5 YOE), and I started as a SWE at Google a month ago. I spent a lot of time in the weeks leading up to my interview prepping with leetcode and working through Cracking the Coding Interview (and had done several other interviews). My onsite had some practical elements, which I appreciated, but I'm pretty sure I would've bombed if I hadn't done that prep with data structure/algo stuff. I can't really speak to how things are evaluated, but IMO you should do everything you can to learn and practice if you want to pass those sorts of interviews.
In my experience, Algorithms, OOP, and Data Structures were the main technical questions I was asked when applying to major firms. I didn’t have any specific frontend or framework questions. They were mainly interested in your grasp on the fundamentals, more than specific technologies. I’m sure experience varies depending on role and company. I have noticed that smaller companies and startups tend to focus a lot more on specific technology stacks. I would highly recommend not neglecting brushing up on OOP concepts and how to apply them to sample problems.
This is changing. Not only are major companies dropping the CS requirements from jobs (Apple and Google recently did), OOP is also falling off in favor of functional programming, which is usually easier to follow for managing large data, &amp;#x200B; I'm not at one of the listed companies, but our team hired 30 devs in the last two years. More than anything we value being able to explain your decisions, whether that is a carefully planned answer or, "This is for a quick example; I would plan out a more robust solution given more time."
Neat, thanks for sharing.
&gt; i meant what uses require tab characters and would prompt you not to advocate for a simpler alternative to ASCII Yeah hold on let me think of literally every use case for text on computers and see if any of them might want tabs. Who knows, dude. &gt; but if you use unicode in your code that's even more surprising Most things default to UTF-8 which follows the Unicode Standard. The "U" in "UTF-8" stands for unicode. You probably use it in almost everything you do unless you explicitly decide to change it for some bizarre reason.
Never heard of this CAPTCHA, but this is cool nonetheless.
&gt;OOP is also falling off in favor of functional programming, which is usually easier to follow for managing large data Is this really true? &amp;#x200B; and why/how is it easier to manage with large data?
This is beautiful, nice work. /\ /||\ in the pines...
Git
what in particular?
In my experience, yes. It's easier to reason about and test abstractions that are backed by math than abstractions that are backed by what Jim on the architectural team thinks the business domain looks like in his head.
lol
Hi u/myown7thcousin, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked.
Hi /u/oifbert, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked.
- Does anyone here have any insight into the front end engineer interview processes at these companies? Yes. I interview people regularly for a large company in your list. PM me specific questions. - How deep of an understanding of those CS fundamentals Depends on the specific job. For a Sr Eng position (Level 5a) then you're required to know CS fundamentals, networking, DOM-specific features, CSS, HTML, etc. For Eng 2 or Eng 1 you can get away with less knowledge of those areas. - If I don't do that great... You typically have a group of interviewers. At my company it's 6 people who have equal voice. We discuss the candidates and our reasons why we gave a thumbs up, down, or double-up. Quality is determined by demeanor (company fit, personality), as well as knowledge. We've not hired people who were very advanced in domain knowledge, but were condescending to the interviewers. These are signals that the interviewers use to determine if the candidate is hireable.
Some companies like Google and Facebook have Front-End specific recruiting tracks that tailor the interview for people who may not have a CS background. Ask your recruiter at each company if this is a available and if so, avail yourself of it.
and do you check in code as is or minified code?
Hi u/milandean, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Get to the point. These are specific questions. What are you getting at?
OOP is tied to the idea of *what the data represents* and how you interact with it. This is great for modem drivers, where you need to abstract away the implementation details. It is not as good for a large dataset of *anything*, really. &amp;#x200B; Functional Programming lets you work with the data any way you need to, and can be broken into discrete steps that can be validated separately and combined like building blocks to produce novel output with minimal effort.. You can stop caring about the shape of data and start caring about the values.
I was trying to slowly walk you through what was being said, since you're failing to understand. Nevermind.
Oh yeah. Functional patterns are much easier to test, so you can TDD your way through some heinously complex problems. Functional just scales better and is easier to read with less context. The issue with OOP is that you need context on the object you're working with. It may be inheriting all sorts of functionality, so you'll have to read up on it's ancestors. And if your object holds state, you'll need to hold that state in your head too. This is all fine at small scale, but it gets nasty.
Hi u/milandean, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I understand just fine. My original post was playful. You're intentionally trying to ignore that in favor of making some trivial point. Not everyone on the Internet is your enemy nor should be a potential target to satisfy your need to feel right about stuff... in this case... Tabs vs spaces? Chill man. I'm not your enemy. I'm just a fellow human.
I did Dropbox as frontend engineer interview. Not a single CS question. But also zero framework hands on coding, all vanilla JS which threw me a bit. I struggled to implement a fully responsive image slider in the 45min timeframe. Also, a good amount of non coding interviews, which was great fun. Come prepared with tales of success and woe from past jobs.
Why can't he ask you here so that we may all benefit?
He can, but I may be vague in my answers.
freecodecamp.com would be one but if you're someone that learns faster while building projects then just get to it and use blogposts and stackoverflow to help you out
Link!
Disclaimer: I do front end interviews at Uber regularly. I don't have a CS degree either. I don't know the specifics for the interview process for all companies, but as I understand from talking w/ folks that have interviewed or worked at companies you mentioned, they are all more or less similar (first a tech phone screen, then onsite with several 1h sessions, ranging from algos to soft skills). Algorithm sessions are usually NOT textbook algorithms (e.g. implementing binary tree rebalancing), but rather, more like the type of questions you'd find in leetcode (i.e. coding challenges). If the challenge is algorithmic in nature, you're not expected to know hashmaps or tries by name, but you ARE expected to come up with an efficient solution. When people say you're supposed to know algos, it means that given a leetcode problem, ideally you can quickly cycle through a toolbelt of algorithms/data structures in your head and figure out a workable strategy within the first 5 mins of the interview, and then spend the next 30 or so mins writing that out. It's not that CS folks get a leg up for knowing textbook CS, they do because implementing CS concepts in school forces you to practice the types of skill needed to solve leetcode-type exercises. I'd say even reimplementing lodash is a worthwhile exercise since it involves similar types of practice. For frontend, most interviewers have frontend backgrounds themselves (they are often FE people that were hired 1-3 years prior). Some may ask JS-oriented questions. Recursion and asynchrony are common themes. Bombing the algo session doesn't necessarily mean an autofail but ideally you need to be at least close to a solution and get a "soft no". The interviewers usually meet after the onsite and collectively decide whether a candidate passes, based on each others' feedback. If you were placed at a senior level (i.e. 7+ years experience), then one fail would weigh a lot more than if you're more junior/intermediate. Two fails may give the panel enough doubt to not hire, regardless of level, but I have seen people pass even with a couple of "soft no"s if they made an exceptionally strong impression on the sessions where they did do well.
Coffeescript is not that different from JS. It IS quite a bit more lenient wrt commas though. So you might get a bit annoyed about JS being a bit more strict about syntax. On the other hand, you'd not run into obscure coffeescript-to-JS transpilation quirks (e.g. one too few commas in a typo resulting in completely different but valid code). I'd sayoverall it probably balances out. Honestly though, Coffeescript has fallen out of flavor in recent years, now that ES6 has brought many of Coffeescript features to JS.
In my experience, no. Functional programming is an excellent paradigm for working in highly concurrent algorithms and it definitely has its place. However it's also much more difficult too reason about without a strong background in math. OOP makes reasoning about the problem relatively easy since you can model your solution after the domain. Although increasing in popularity in recent years, OOP is and will likely continue to be the dominate programming paradigm for the foreseeable future. One way to test this is simply to look at the job market for OO languages vs functional ones. There's no contest.
Whoa, buzzword alert. "Large data" doesn't really mean anything. When one thinks of "big data", one might think of scalability, throughput, ACID. Not a dichotomy between two paradigms (and never mind that other paradigms exist too) When one thinks of OOP vs FP, they're usually talking about state encapsulation. It's equally possible to implement awful state encapsulation in both paradigms (I've seen some convoluted redux nightmares). As it turns out, before Java came along, OOP originally was about message passing, similar to Erlang, which is squarely a FP language. It's true that it's possible to write code heavily backed by math (e.g. relying heavily on monads and combinators), but realistically, most people don't because procedural code is simply easier to grok on average.
I don't think it's *bad*, nothing is black and white. If it makes development faster for you, than it's good right? *But* you're going to to already start limiting the number of people who can contribute to your code, or at least offer a barrier to entry for those who would. You're adding a build step, maybe just a drop in a bucket, or maybe the straw that breaks the camels back. It really just depends. You're the one doing the code, it really *should* come down to what style of code you want to write. Coffeescript itself has a lot of optimizations, and it compiles to JS. They're both reasonably sound languages. It's not like it's adding overhead to your game as it's all managed at buildtime.
Wait, condescending to the interviewers? What is that? Or how?... Can you explain a little bit more about that?
&gt; Quality is determined by demeanor (company fit, personality), as well as knowledge. Would you say a candidate who doesn't exhibit strong technical skills will still be considered based on their personality? Have you ever hired someone based on a "winning personality" and it ended up being a mistake? I used to work with an extroverted, witty guy who spent most of his time socializing around the office amongst different teams. He called it "bridge building" but he would barely do any work and we had to pick up the slack to meet sprint deadlines. But that was A-OK with management, -*wink &amp; gun*-, because he's fun to have around!
&gt; who doesn't exhibit strong technical skills will still be considered based on their personality? Absolutely. We've hired candidates who were technically weaker (no terrible mind you), but were willing to learn and enthusiastic about the technology. The desire to better oneself is a great quality. Being witty and extroverted isn't necessarily the quality we desire, but if it corresponds with being a "team player" - working with and for the team - then it might be beneficial.
personally the thing is i can and have mastered/memorized all of the fundamental things but forget them after the interview so when time comes for next interview i can't recall them. sure i had memorized dfs/bfs both recursively/iteratively in post/pre/infix manner and 4-6 loops but unless i prepare a week in advance with lot of dedication i wont be able to recall much of it in 45 minute window. which requires first to A) understand the problem B) deduce some data structure will help here C) logic your way to implement it correctly as you just didn't take algo exam yesterday. D) oh not autocomplete or documentation. why couldn't jobs just give like study guide 3 days before interview. People who knew stuff will be able to review quickly, and people who don't wont. But if they can doesn't that make them even more hirable?
you can ask recruiter to certain type of questions?
you mean to tell me as FE dev i wont have reverse a binary tree and write heap sort on daily basis, SERIOUS?
One guy was given a challenge question and took several minutes to understand the problem. Then he talked through his understanding of it. Once he did that I reaffirmed his understanding by saying "Yes, you need to sort this in such particular way. That's correct." And his response was "I know, that's what I said."
Not exactly: you can apply as a front end engineer and get different questions as a result. I wouldn’t ask for specific questions. Not all tech companies offer this. Note that the front end interview track isn’t necessarily easier at companies that offer it, just different.
At Airbnb, we have a special track for Frontend interviewing that is not as focused on DS&amp;A. You'll still have 1 or two algorithm questions mixed in. But most questions focus on practical Frontend skills. Make sure your recruiter is aware that you want to be doing the Frontend track and confirm this with them Good luck!
- world changes: with OOP code looks beautiful if you know all parameters beforehand. But real world changes. When you try to change existing OOP structures it's like going against physic laws. - Many relationships not possible: Bird inherits from a Animal, but Bird also flies, it can't inherit from Flyable. - hard to chase errors down the jungle of inheritance - too much obfuscation - too much coupled code. https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53
aliexpress
Not at all - preprocessors are totally fine. Like you said - coffeescript allows you to be more productive. That's a good thing. It will make you somewhat less versatile, but almost every company is using preprocessors for their production js (typescript being the main one currently) these days.
&gt; but were willing to learn and enthusiastic about the technology. The desire to better oneself is a great quality What's the best approach for this to be raised and discussed during a technical interview? Isn't it risky for an interviewee to essentially admit their technical weakness, regardless if they're willingness to learn? We can fairly assume that most people who wanted to work at any of these companies but failed the interviews also had a willingness to learn.
Hi u/Jewell980, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi u/funcruosity, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I went through FB's frontend interview process last December and I was pleasantly surprised to find that most if not all the technical questions I was asked were real world JS/DOM problems. Now that's not to say that they were trivial questions, but they did feel like problems you'd encounter on the job (especially at FB's scale). I like to think of it as: instead of them asking you to implement algorithm/data structure X, they gave me a practical problem where knowing one of those algorithms/structures was useful for the solution.
I really liked [Eloquent JavaScript](https://eloquentjavascript.net/) if you like a to read and want something more on JavaScript the language. There are also a lot of video courses out there, but I haven't watched any recently, so I don't know any specific ones to recommend. I remember liking [Stephen Grider's courses on Udemy](https://www.udemy.com/user/sgslo/) though.
Hi u/Dade__Murphy, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I was just going to post this a couple of seconds ago, but you beat me to it :) I really liked the first comment on the post. It is contradictory compared to the post itself, and thanks to that comment, we have a nice comparison between the imperative and declarative way of doing things.
I think you confuse the meaning of democracy. Democracy means to define laws that everyone must abide, based on the requirements of the majority. So, in fact, spaces are democratic.
I didn’t read it all, but the first example should be noted that filter takes three parameters, one being the array itself, which should be used instead of the original array value, keep it pure. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
Title is misleading - handling array duplicates is absolutely fine, the problem is determining the equality of two objects, a known issue with JS.
I stopped reading at "without all those virtually unnecessary keywords JavaScript has"
Hi u/dyesiboy31, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I posted in the interview biweekly thread and got no responses :( Thanks for the feedback! I'm definitely studying up as much as I can and doing as many leetcode problems as I can
Are those leetcode-style questions really that helpful? How often do those sorts of challenges actually come up in your day job?
Still a WIP but if it helps you I made [a gist when preparing for frontend engineering interviews](https://gist.github.com/augbog/ed3502543169b6ce844313c69e4e1b2d) Google definitely expects some strong fundamentals in algorithms. If you have more specific questions, feel free to ask or DM me.
I've written python professionally for quite a long time and this is patently untrue. Granted, I've never used tabs in my python code but aligning things is as simple as other languages when you understand the semantics.
Oh damn! This is fantastic! Thanks so much!!
That's actually really reassuring! Thanks a bunch
Awesome, thank you so much for the advice.
That travel company happens to be my top choice :) Thank you so much. Bit shifting? Oh jeez I really hope that doesn't happen to me. I guess worst case scenario is I get to check out the Google office.
I'm definitely on the FE track, thank you for the heads up though
This is just the kind of stuff I was looking for. Thank you very much!
Amazingly helpful, I appreciate it. If I think of anything specific I'll be sure to PM you. Thank you and I'll be sure to be on my best behavior and not be an asshole to the interviewers
On the first example we can also do: `const unique = [...new Set(cars)]`
What if you don't know which algotithm you need? What if it's very particukar for your problem? Also, thinking about efficiency in terms of Big-O is very important in everyday job IMHO.
Big-O isn't very difficult to conceptually understand, but more to the point it's very rare that you'll actually need to understand it in my experience. Most apps aren't performance sensitive enough to care if something is O(1) or O(n) for example, and in the rare case that they are this is something you can research with relative ease.
Message passing in Smalltalk isn't similar to Erlang, that's bollocks. Erlang messages are between *processes* that are run in parallel and that's their point.
Hi u/varsha-spaceo, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yeah, but if you do something O(n) in a loop it becomes O(n^2) and that may be significant. Sometimes very significant.
And, as I said, for most apps it won't matter if you make that mistake. If your team identifies a performance bottleneck then you'll be able to identify it fairly easily using dev tools. It's just a non-issue in the real world for most devs at most businesses and is somewhat akin to premature optimisation.
Hi u/ElegantPlant7, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Better comments is miraculous? Guess why it’s getting easier to be anointed a saint these days?
Especially these days
Hi u/kyonenjs, this post was removed. * Self-posts (text) must follow the `[AskJS]` guidelines, which you can read about [here](https://www.reddit.com/r/javascript/wiki/index/askjs). * All other posts must use the _"Submit a new link"_ option; if additional text is required, add a comment to your post. * Feedback, questions, etc. should be posted to the [\[AskJS\] Feedback](https://www.reddit.com/r/javascript/comments/cacfqh/askjs_feedback/) thread. **NOTE: Learning, Support &amp; Help questions are still off-topic for `[AskJS]`, and should be posted to r/LearnJavascript or a Q&amp;A site like StackOverflow.** Abuse of the `[AskJS]` tag for off-topic questions may result in your posting privledges for r/javascript being revoked. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
lol this captcha is so useless, not only it's still there annoying the user but it also doesn't protect anything
&gt;sure i had memorized dfs/bfs both recursively/iteratively in post/pre/infix manner and 4-6 loops I believe that's called "doing it wrong" in programming. Nobody cares whether you can recite the whole Knuth books from heart; we care that you understand it, and can use it to generate novel solutions. Memorizing is necessary, but it's useless on its own and definitely not useful for whole algos - I don't need you to recite passages from a book for me, Google is faster and more accurate. When you "master" something, it's near impossible to forget; have you ever forgotten how to move your arm?
You've probably seen it already but in case you haven't Hackerrank is great for learning some of these things quickly. I've interviewed loads of people over the years and I personally don't ask these sorts of questions, I just ask people to rank themselves out of 10 in each major area. This is so that if they get the job we can focus on areas where they are not so strong. I throw in a few verbal questions and if I smell BS then I might make them do something more formal. Unless I was hiring a contractor for a specific task the person and their potential was more important. We also used to take lots of physics graduates who could only code a little because they couldn't get jobs easily in the physics world. Just be nice, you will have to sell yourself a bit and don't be weak. If you don't know something tell them but make it known that its something you would love to learn. Or try and find something similar that you can do to switch the focus.
You will want to grab a copy of the book Grokking Algorithms as a lot of these concepts are treated in easy to explain terms. From the different sorting algorithms to hash functions and the rest.
This. Handling array duplicates is really easy, even more with the spread operator in ES6. It can be hard if one does not understand how copy vs reference works in JS.
Might be a good idea to include an OxJS Vs RxJS section in the readme. As I'm sure almost everyone will have this question.
[removed]
That rest client sounds useful, I end up needing something like that pretty frequently.
Awesome, yes I love reading. Will take a look at both sources, thanks!
Annotated saint*