No you are when you state "I don't know what's difficult about saving JSON from a front end app though", it's so far beyond stupid that you should consult any non-expert. Also I don't owe you fuck all education. If you think you know those subjects, your arrogance has ran into hubris.
The problem is, if you're running multiple electron apps plus something like vagrant &amp; virtual box or something else taxing like OBS for streaming, even my laptop that has 16gb starts to struggle. 
Having studied something vs saying you know everything about those topics are completely different things. I've built web apps that save JSON from my front end and found it easy with MongoDB. But keep on calling me stupid and not understanding. I don't know what you gain from having such a discussion. When I join discussions I try to learn something. But you're right, you don't need to educate me or explain your point of view. You can keep insulting me instead. Good talk!
For what it's worth, my insults were targeted to push you into education, but if it's easy and you've studied it all, best of luck
This only mentions atom in two memory comparisons alongside code. [The first one, it wins by a thin margin,](https://github.com/jhallen/joes-sandbox/blob/master/editor-perf/readme.md#memory-used-when-loading-helloc-with-syntax-highlighting-enabled) [but the second bit shows Atom using a shitton more by a landslide.](https://github.com/jhallen/joes-sandbox/blob/master/editor-perf/readme.md#memory-used-for-loading-testxml-with-no-highlighting) Still, outside of benchmarks, it's probably a system dependent factor, dependent on the number of plugins and such.
How did you get the job if you don't already know it to a good level?
I'm the author. I'm not saying to blame Flow for that false sense of security. I agree with you. If you are systematically making everything non-nullable because you want to eliminate having to ever check for null (which I have seen happen in the wild on a fairly large project) then your types are simply wrong. I agree that you only have yourself to blame if you do that. You as the developer got the types wrong. But it's a pretty easy mistake to make. If you're a really good developer and you're the only one working on the project then there's really no reason to consider my words. But if you're working on a large project with lots of developers, then the whole team needs to understand how Flow should be used. So make sure everyone on your team is aware of this. Flow is a guide. It's not guard rails. In my mind it's not an excuse to stop coding defensively and handling edge cases because you don't think they exist anymore. If you have Flow then you can eliminate all kinds of edge cases by simply removing a question mark. But it may not reflect reality. I bring this up because I've seen this happen on a large project and it is not pretty.
Mainly Im doing it for myself, as a learning thing, and to get rid of certain ones that the big names seem to fail on. It's working fine and i thought about distributing it, but then the legal question came up. Seems like it *could* be taken as a DMCA violation, if the site is a paid site. On the other hand, if you send me data - even if it's "covered" by a transparent div, then I have the data and can read it regardless.
I love Flow too. But in my experience you will see this argument from developers, and you will at times feel like this yourself. The larger the code base the more likely you will be to run into insane cases that Flow doesn't quite get. I tend to fix Flow errors as they come up, but I'm human. If I'm doing an intense refactor on some really complex code, I may not be dealing with Flow errors right away or I may just simply forget to run it. It can be disheartening to get done with a really nasty piece of work only to find that you have a bunch of Flow errors which will likely require more code changes. All I can say is stay the course. It's worth it.
Going off of this, if you have programming experience and know other languages, learning JavaScript won't be too hard. The hard part will be familiarizing yourself with the ecosystem and the insane number of options, so explaining your job description would be helpful. 
This. VS Code...never looked back.
Just FYI, `.babelrc` uses JSON5 so you can use comments, and there is an `"env"` flag (although not always intuitive as mentioned), and you can always reference a preset which allows JS, but yes .babelrc.js will be much easier!
Get a CS degree. Then buy a Javascript book and do all of the exercises. 
Yeah, I switched to VS code a few months ago. Pretty happy with it.
You can retrieve the current styles applied to an element using `getComputedStyle()`, but this is inefficient since there are many types of style. One way to do it efficiently is to use `document.styleSheets` as a lookup dictionary for each CSS classes specified for an element (from `classList` property). However, CSS rules aren't accessible if they're defined in external CSS (which are specified using `LINK` elements). So for this case: - If the external CSS is in the same domain as the domain of the current page, you can use AJAX and create a `STYLE` element as a temporary dictionary. - Otherwise, you'll have to use `getComputedStyle()` by comparing the document's HTML element with the element whose styles you want to retrieve. The differences would likely cover most of the applied styles. Before copying the HTML code into the clipboard, first create a copy of it as element objects (not as a string of HTML code) so that the applied style can be copied without affecting the original elements on the web page. e.g. `var eleTemp = document.querySelector('.classIWantToCopy').cloneNode(true)`. Or if you can only have a string of HTML code as the source, create a `DIV` element and assign its `innerHTML` with the HTML code.
It's not the global variable inside the function; it's that a persistent reference is kept (that happens to be global) to an object that includes a function that maintains a reference to the closure object of its parent function that keeps a reference to an older version of that object which has a function which maintains a reference to the closure object of its parent function that keeps a reference to an older, older version of that object, etc. etc. Each time the object is replaced, it keeps a reference to the older object. You end up with a list of objects that reference each other that keeps any of them from getting gc-ed. A simpler version is: var theThing = null; var replaceThing = function () { var originalThing = theThing; theThing = { someMethod: function () { return originalThing; } }; }; Here, `theThing` is set to an object with a function returning the old value of itself. Its a little more clear here that the gc will be unable to cleanup things because they're all linked and can be returned by calling the next thing's `someMethod`. // creates/replaces 3 things replaceThing(); replaceThing(); replaceThing(); theThing //-&gt; { someMethod } (newest) theThing.someMethod() //-&gt; { someMethod } (older) theThing.someMethod().someMethod() //-&gt; { someMethod } (oldest) theThing.someMethod().someMethod().someMethod() //-&gt; null What's tricky about the original is that `someMethod` doesn't clearly maintain a reference to `originalThing` because it's not being used by it. However, the other function in `replaceThing`, `unused` is. var theThing = null; var replaceThing = function () { var originalThing = theThing; var unused = function () { if (originalThing) // a reference to 'originalThing' console.log("hi"); }; theThing = { longStr: new Array(1000000).join('*'), someMethod: function () { console.log("message"); } }; }; This matters because closure references are stored in a lookup specific to the parent function, not the functions referencing the closures. So what's happening is, because `originalThing` is being used by an internal function in `replaceThing`, `replaceThing`'s closure lookup has `originalThing` added to it. Then, when `unused` and `someMethod` get references to their respective closure lookups, they get the same one, `replaceThing`'s. Even though `someMethod` isn't using `originalThing`, it still gets a reference to it through the `replaceThing` closure lookup because its just easier to have one lookup for every function rather than to instantiate new, separate, possibly redundant lookups for each. Its this lookup sharing that makes this version behave like the simpler version I made earlier. You can run this in the console to see this in practice. Even though your code can't access `originalThing`, its there in the closure lookup referenced by someMethod var theThing = 'orig'; var replaceThing = function () { var originalThing = theThing; var unused = function () { originalThing; }; theThing = { someMethod: function () { debugger; } }; }; replaceThing(); theThing.someMethod(); https://imgur.com/hgB5fD9
when you say quickly, what do you mean? express it quickly or something that executes quickly? if its just about execution speed just use a for loop
There's another contender from Facebook: ReasonML. They're focusing heavily on wrapping React and have even taken advantage of sum types in the language to build in a Redux-like reducer feature. A bit more context: https://reasonml.github.io/community/blog/
Do you have a simple example of one of the problems you've seen there, for example with raf? I'm wondering if there's something I should be looking out for that I've missed in the past. Thanks.
Use `arr.slice(1,4)` and compare that?
Quickly as in more easy to do with.
I know basic Javascript. I will need to do Javascript and React and possibly Angular.
Waste of time
Since I have some experience with F# (influenced heavily by OCaml) I am really considering giving Reason an honest try for React development. I just wonder how well it works with the current libraries and toolings or if you are spending half your time writing external type definitions. Do you have any experience using Reason (for React development)?
I had to work with some electrical engineers to explain some of the concepts related to digital signal processing in order to make audio come out and not sound like hot garbage. The API is pretty tough to figure out, but so is audio in general.
This one weird trick will improve your javascript in days. PM me to find out how!
A good API will make doing simple things easy and hard things possible. Alas, most apis make both hard. But possible!
Don't. Learn to accept your personal choices aren't always what everyone should be using, and architectural decisions aren't always made in a box.
I'll tweak the docs 😋
Why not use the number 4?
VS Code is updated a lot. It has a decent sized team working on it. It has a github repo. You can file bug reports. People actually respond to them. It's not just one guy who takes your money and then ignores you. Git support in VSCode alone shits on anything Sublime has to offer I have never noticed any issues with battery life and VS Code. Every time I tried to open a large file with sublime it crashed. Maybe it's one of the plugins and not Sublime, but I don't have the time to start trying to switch off each of the hundreds of plugins you need to make Sublime useful and see which one is the culprit. VS Code comes with a lot of stuff out of the box. I pretty much install it and I'm ready to go. With Sublime I have to keep a list of the hundreds of plugins I use somewhere so that I can install them on every machine I use Sublime doesn't even come with Package Control out of the box for crying out loud. VIM emulation is much better with the vscodevim plugin in VS Code. 
 let a = [2, 3, 7, 5]; let b = [3, 7, 5]; a.slice(1).every((v, i) =&gt; b[i] === v); // true
Oh, thank you for that!
I've been using BuckleScript, which is the OCaml-&gt;JavaScript compiler that powers ReasonML's JavaScript capabilities. Reason technically is a slight syntax facelift on top of OCaml, but the underlying language is the same, so they do JavaScript interop in the same way. So I don't have much experience with ReasonReact, the Reason bindings for React, but quite a lot of people in the community are using it. If you're in the React ecosystem, the Reason team have provided a simple way to use existing ReactJS components: https://reasonml.github.io/reason-react/#reason-react-interop-with-existing-javascript-components . If you're using some JavaScript library, first check https://github.com/reasonml-community and also ask around in the Discord ( https://reasonml.github.io/community/ ) because someone might have already published a binding. Otherwise, you'll pick up how to write some bindings using the FFI to JavaScript. The key thing to understand about the ReasonML/BuckleScript-JavaScript FFI is that the bindings are just stubs and they live in the same source files as the rest of your code. So e.g., say you want to write a stub for JavaScript's `console.log`. It would look like this: /* yourModule.re */ external consoleLog : 'a =&gt; unit = "console.log" [@@bs.val]; Now the function would be accessible in your project as `YourModule.consoleLog`. The documentation and quick start guide are great, and so is the community: https://reasonml.github.io/ . I think it's worth a try.
Nope. Uaer's are tricky. Log the activity on page A or B.
Sometimes you can do it using "document.referrer", but it is pretty bad :T If you need professional solution for evaluating your marketing campaigns, you can use Google Analytics. You can send link with "facebook" tag to your Facebook page and "tommysblog" tag to you friend's blog and see where thetraffic comes from. https://support.google.com/analytics/answer/1033867
No... I was the candidate... 
The article does discuss electron-builder, which can build Linux packages for various distros. (I run Linux, and I use electron-builder builder to package my app.) Incidentally the electron-builder docs have instructions for using a single Travis configuration to build and publish packages for Linux, MacOS, and Windows (using a Linux VM, a MacOS VM, and wine).
I think people misunderstood: I was the one looking for the job. I wasn't interested in the job, if they didn't use WebStorm.
I think people misunderstood: I was the one looking for the job. I wasn't interested in the job, if they didn't use WebStorm.
You can improve it as much you want. As long as it is Electron based application, it will be shit in terms of performance (as well as memory consumption, battery, etc) when compared to the native applications, such as Sublime.
It's a Node bug on Windows: https://github.com/nodejs/node/issues/15374
In theory, perhaps. In practice I don't notice any difference whatsoever. If a command takes 0.455ms instead of 3.4ms it makes absolutely no difference to my experience.
Yeah, too bad if you're on a Mac with a 4k monitor WebStorm can't even keep up with your typing. Its a two year old bug they know about but still can't seem to fix https://youtrack.jetbrains.com/issue/IDEA-144261
hiproxy is a lightweight web proxy tool based on Node.js. The primary purpose of hiproxy is to solve the problem of host management and reverse proxy needs of developers. For example, if you are working as a team and each of the developers in the team need a different proxy setting, you will no longer need to modify your hosts file or use a web server like Nginx as a reverse proxy. hiproxy extends the syntax of hosts file to support port numbers. Besides, hiproxy also supports configuration through a syntax similar to the Nginx configuration file.
Hi DHarry, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi zafercuz, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi CorbynIsScum, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi Akaky_Akakievich, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi buckks, For javascript help, please visit /r/LearnJavascript. Thank you!
Possibly useful and free to read online (so you can easily check if my style suits you): [my books](http://exploringjs.com) teach JavaScript in depth, to people who already know how to program.
Hi Kolvinn, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi internweb, For javascript help, please visit /r/LearnJavascript. Thank you!
What's the use case? Editors/IDEs (VS Code, WebStorm, etc) can format code. Chrome's and Firefox's dev tools have a formatter. JSFiddle also has one.
Agreeing with tme321. Human translation can't be replaced by machine translation (at least not anytime soon). The type of translation API you use depends on what functionality you need and your end user. **Here's an article on a translation API that has vastly different technology than Google Translate**: https://www.pairaphrase.com/best-translation-api-secure/ Reading about the functionality and watching the demo video might help you decide what you require in a [translation API](https://www.pairaphrase.com/how-it-works/api-for-developers).
&gt; Just because you made your type not-nullable, doesn’t mean it’s correct. Be pessimistic. For the most part, make types from APIs nullable. Or don’t, just be aware of this problem. We solve this issue by generating flow type definitions from our swagger spec.
It's a great CDN and I recommend it to use in conjunction with sequential.js https://sequential.js.org/live.html#DYewhgJgFA5A9HAxhAdgOgFYGcIFNgCWAbgE5oq4AucJYAthGHAAxoBMAzDfY2nQemwwAlAG4AUETAkABASwBRIrhQyAvDIBmAVxSJKBECigAPYTIDeM8TNsySVbSVUmApGzWfmEgL4TERlggwLhooADmUABKaGAoAJ5Q8koqADQA2gCMqWypHKkALAC65mJAA 
This could be nice for dev environments. But it really needs English documentation, and I still question if learning a new tool like this holds more value than automating nginx's config.
Hi /u/weeklyWebWisdom, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `weeklywebwisdom.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [weeklywebwisdom.com](/search?q=%28and+site%3A%27weeklywebwisdom.com%27+author%3A%27weeklyWebWisdom%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|18|82%
Ah. I misunderstood who was getting hit by a bus. Fair enough.
Whoa Nice
In what way? It is not clear what output you expect. It appears that the second and third waves are getting overwritten with the third, especially near the smallest frequency animation.
Cool, just a couple issues: * If navigation doesn't have a locale, then "en-US" is used by default in "currencyConvert", but it's not in the list of currencyNames, resulting in error, but there is "en-US-POSIX" in the list. * In showConstants you are using "getCurrencyDetailsByLocale" too, but this time without using "en-US" by default, so there is an error too. You should create another function "getUserCurrencyDetails" to prevent code duplication. * Also that list is out of date a little bit, eg. Latvia and Lithuania are using Euros already for more than 3 years. Updated version here https://codepen.io/kaszu/pen/oGgRdJ except for out of date list.
Wow.. I can't believe I missed that... Do you have any suggestions on how to debug mistakes better so I don't miss things like that? I spent a half hour frustrated as all hell. Thank you.
Thank you buddy
Sorry, what is that? I'm pretty new to Javascript and don't know much
I'm not sure what that is
Careful with the react patent though....
That might be good to do some research on.
well this is the first I've read on it, and the article makes it sound like it isn't for me. I mean I don't get how folks can be like "open source all the things" and shit on linux like that. Is this a common mentality?
Totally this, one day you may leave this job and if you use learn something new and can put it on your resume that's a huge plus
Some APIs also make trivial things hard and usually hard things easy. WPF is one such candidate. I never needed so much generic-programming to get seemingly basic tasks done, such as drag'n'drop in a treeview.
Also: https://unpkg.com/#/
ooh, ooh, I might know the answer to this one. (my line numbers might be off because I deleted a couple of lines, so look a couple of lines around the numbers I'm quoting). There are four problems. The first is that atan(x,y) returns an answer in radians, so adding 90 to it isn't ok (line 72). Either add PI/4 to it, or change from sines to cosines when you reconstruct it later. The "normal" way would be to use cosines. They're sort of default because Real(e^i0) = 1, as is cosine(0) function. On line 129 and 161, you divide the frequency by 3. That's causing problems. Don't divide by 3. Ever. On lines 134 and 161, you take the sine of an argument that is partly in radians and partly in degrees. On the same two lines, you haven't divided by 1000 but you should --- your frequency there is in cycles per thousand steps, so the following is what you need: (Math.sin(phase + (v * 2*Math.PI * frequency / 1000)) * magnitude) On line 112, you have this: if(magnitudes[v] &gt;= 0.287) { unfortunately, that's causing jitter, because the threshold is too high. I recommend this instead: if(magnitudes[v] &gt;= 0.002) { Then it works: The top and 2nd lines nearly match -------------------- By the way, the reason the threshold was causing jitter is because the sines that you used originally are not perfect sines as far as the transform is concerned: They start and stop randomly at the edges. If you take a perfect sine wave, and chop it at 0 and 1000, it's no longer a perfect sine wave. To reconstruct it perfectly, you need many "perfect" sine waves (perfect in the sense that f(0)=f(1000)), so if you cut out some of them, you'll get something other than what you put in. Because the components move slowly across a threshold, the output jumps whenever the component crosses the threshold. --------------------- Summary of summary: * You confused radians and degrees. * You incorrectly converted from cycles per 1000 to radians per grid point. * You put a threshold in, which caused the output to jump about. --------------- Also, your programming style is readable, but it would be more so if you favoured pure functions over state - not in general necessarily, but for functions like these that are almost always written in a pure style normally. That's just my opinion, though.
I made a digital clock out of clock faces (inspired by [this gif I saw on reddit](http://i.imgur.com/l8e9dBT.gif)): https://codepen.io/FullR/pen/eEqQrJ
But most of Browser User Agents reference to each other. And it would be to hard to identify each one, if you have to work with a lot of browsers. Maybe you want to assign your links with dependencies of the running device. For example Iphone
Do you recommend making a habit out of *always* using strict comparisons, unless implicit conversion is desired? What is "inherent falseyness"?
unpkg is great and I'd imagine jsDelivr team took inspiration from it, but they are from different "leagues". From [unpkg's About page](https://unpkg.com/#/about): &gt; unpkg is an open source project built and maintained by Michael Jackson. &gt; &gt; … &gt; &gt; unpkg is a free, best-effort service and cannot provide any uptime or support guarantees. &gt; &gt; … &gt; &gt; The goal of unpkg is to provide a hassle-free CDN for npm package authors. It's also a great resource for people creating demos and instructional material. However, if you rely on it to serve files that are crucial to your business, you should probably pay for a host with well-supported infrastructure and uptime guarantees. whereas [jsDeliver's About page](https://www.jsdelivr.com/about) says: &gt; jsDelivr is public, open-source CDN (Content Delivery Network) developed by ProspectOne, focused on performance, reliability, and security. &gt; &gt; … &gt; &gt; Our smart load balancing system ensures the best possible uptime and the best possible performance. &amp;nbsp; Of course, that's just words on a page and I wouldn't switch all my production websites and apps to use jsDelivr right at this moment, but I'll definitely keep an eye out on how this plays out.
&gt;&gt; unpkg is an open source project built and maintained by Michael Jackson. You literally can't Beat It. 
Well that was horribly depressing :(
Yes, I'd use strict comparison almost always. It's just the undefined vs. null stuff that gets tricky. And that rarely happens in new code. By inherent falseyness I mean that `if (undefined)` and `if (null)` will always do what you expect. When you're checking that something exists or an argument was given, and you don't expect to get explicit `false` values, you can rely on the fact that both `undefined` and `null` cast to false. If you do expect explicit false values, then you have a problem if that doesn't map to the same behavior as something not existing.
Hi Ktorti, For javascript help, please visit /r/LearnJavascript. Thank you!
heh. its over. isn't it. officially. angular 1.x is dead.
I’ve added several FAQ entries to cover questions about the file extension `.mjs`: http://2ality.com/2017/09/native-esm-node.html#faq
`.esm` would have been nice, too. Or `.jsm` (alas, that one clashed with an existing file type).
Thanks! What do you mean by that?
PWM goes in, golden silk comes out.
&gt; Once more, you’re better of relying on inherent falsiness 👉 if (id) Not so fast. `0` might be a valid id. If it is, this check fails. In addition to a linter, it's best to use a type checker (Flow, Closure Compiler, Typescript, ...) as well, to prevent getting unexpected `undefined`s on well-defined objects. --- Obligatory JS Equality Table: https://dorey.github.io/JavaScript-Equality-Table/ 
This won't work for me, I need it to be valid javascript to avoid weird cognitive load that functions wrapped in quotes would give my users.
Keep in mind that some APIs are meant to expose the raw capabilities of what's behind it. For example, OpenGL exposes a number of advanced graphics processing capabilities, but it doesn't include APIs for drawing 3D objects. Why? Simply because that's beyond the scope of it's job. OpenGL lets you write pixels; it's up to you (or more abstracted libraries like three.js) to provide the math that determines what goes where.
The use case is an in-web-app editor for a configuration object that can contain functions. I want to not rely on users to well-format the object, and also to make it easy to store in a minified form (which would require unminifying it somehow for display to and edit by the user)
also: https://wzrd.in/ 
That auto-import looks pretty nice.
My original comment was "Sweet article man (:" But that makes it sound like I'm calling you a sweet article-man. So comma makes it so I'm actually addressing you. 
Great point! That one always gets me :D Luckily id's in most DBs I've use start with `1`.
It does. Also quickly fires lots of errors on me...
You can also check here how it works https://www.jsdelivr.com/network/infographic
Literally all they needed to do was expose a low latency audio callback for processing/synthesising samples that was not on the UI thread. People could have written libraries to take care of the rest of the functionality. But instead re-invented all the wheels. We _still_ don't have a low latency audio callback off the main thread, it is coming however with Audio Worklets I think?
Eslint supports allowing loose comparison when checking against null, so if configured properly, that's not an issue. Also, if you have `foo == null` and the linter is screaming at you, it's really asking you to specify what you actually want. You're supposed to stop, think, and wonder if you want "foo === null" or "foo === null || foo === undefined" Maybe the error message should be more verbose and specify that I suppose, but saying the linter causes bugs is a little misleading. Leaving it as == null could cause bugs too.
Rats of the Maze is a self-playing arcade simulation with a tip of the had to some of my favourite 8bit games. https://ratsofthemaze.com/
Unfortunately it's alive and well at my office. :(
i don't even like programming anymore after being in javascript framework land now. starting to think of other career paths that don't require me to relearn everything I know every 2.5 years.
Feels like an oversight to jump directly from a discussion of side-effects into using Array.sort() without calling out that sort() mutates the array 😬
Yup!
you mean like a polyfill? If you want to be trusting, there's https://polyfill.io which will polyfill only what is missing
Type coercion is a powerful thing when used correctly
Refreshed RE:DOM site and docs with the awesome Interface font by @rsms! https://redom.js.org
It looks like webpack exported native source code for map because I used it in my module. What is this called? Polyfill?
I'm gonna be honest I'm not understanding
&gt;tfw missed the deadline for cancelling my subscription with my shit hoster that doesn't allow CDN's by 3 hours
Those aren't literal brackets, they're html entities, like `&amp;lt;` and `&amp;gt;`. Look at the page source. 
`element.textContent = '&lt;script&gt;...&lt;/script&gt;'` is safe, `element.innerHTML = '&lt;script&gt;...&lt;/script&gt;'` is not.
With a little imagination...
This is called debouncing. You can use lodash debounce function if you'd like , or you can roll your own. Make sure you clear the timer each time using clearTimeout(myTimer) before reassigning it to a new timeout. Sorry bout the bad formatting. On my phone!
I get it but it's scummy.
Bad bot
Are you sure about that? Because I am 100.0% sure that yolpo- is not a bot. --- ^(I am a Neural Network being trained to detect spammers | Does something look wrong? Send me a PM |) ^\/r\/AutoBotDetection
Good bot
Thank you lilred181 for voting on perrycohen. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Well put. This is a decent article with a poor title.
It should be noted that you need to use a Flag to enable this in Edge and Firefox. http://caniuse.com/#feat=es6-module
I noticed this parser also support Async generators, Object spread to mention a few. However. They aren't activated by default it seems.
cool
This is a good overview of the Array.prototype methods, but it's important to note that using higher order functions does not mean you're doing functional programming, rather you're using functional techniques because functions happen to be first class objects. I realize that sounds really nitpicky, but I feel like the difference is important. Take Array.prototype.map. It gives the iteratee the array index as a second argument, which is a strictly non-functional pattern (since it's stateful). You also won't find any for or while loops in functional code. Basically if you like the functional aspects of JavaScript, try out Scheme, ML, Haskell, or another functional language to get the full functional experience. You'll learn a lot of things, but I'd say truly restricting yourself to functional programming can result in really unreadable code. JavaScript is cool because it lets you balance the imperative with the functional.
I think it's only scummy if there is no acknowledgement that it's going to happen.
More fancy good-looking examples would be nice to have XD
Use a computed property name, e.g. {[i]: ...} You’re currently just saying it’s a property name “i”.
Thanks! :)
Ive got one too... https://wzrd.relative.media/
Hehe.
Like arrays do!
hello. Thanks for you reply. We are trying to translate the English version of the document. hiproxy not only provides a similar Nginx configuration, but also deal with some problems that front-end development engineers in the development process encountered, such as https certificate problem. You can look at readme for more details: https://github.com/hiproxy/hiproxy#why-hiproxy thanks
Do note that this is one of the newer features of the language, and so it may not be supported on all platforms unless you're using Babel or similar. Just noticed you're using `const`, so you're probably alright. But, you should probably know the old way aka. [_bracket notation_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors): for (let i = 0; i &lt; 5; i++) { const iterated = {}; iterated[i] = "&lt;-- Iterated Index"; obj.push(iterated); } 
https://github.com/wankdanker/node-tableify works with browserify or you could use http://caldwell.github.io/renderjson/
&gt; it gets worse the longer the string is What sort of calculation is being done? Should it depend on the length of the string? Are you adding new event listeners to the element that you're not removing? That might cause your calculations to run multiple times on each change.
Good to know :) thanks! 
Yes, depends on your configuration. Check out https://philipwalton.com/articles/deploying-es2015-code-in-production-today/ for how to handle that…
Thanks, man. Much love. 
bets on a replacement?
Just want to make sure you're aware that 'oninput' exists. const input = document.querySelector('input') input.addEventListener('input', e =&gt; console.log(input.value));
There is such a thing as writing code that's too terse. 
Any other libs depending on jquery? I think bootstrap does.. but as long as it's minified it should be fine. Slick is awesome.. I probably wouldn't build a slider without it just because of the massive hassle. 
It's an interesting concept. Purposely slow down the performance of your site / users pc's to pay for your site. Will cpu cycles become currency? I would think at some point this wouldn't scale (ie. people realizing how much money in electricity they are spending, battery dieing super fast, etc). Still it's interesting.
I imagine it has something to do with the Flavor of the Month syndrome JS seems to be susceptible to. 
vue and glimmer would be a great choice
 Vue.js might be the winner
They said: &gt; We’ll look for something with most of the benefits of React, but without the baggage of a patents clause It would make sense if they went with Preact or Inferno.
and why do 90% of reddit articles ignore tsc? it can easily transpile 6-5 without using any typescript. https://medium.com/@vivainio/with-latest-typescript-you-may-not-need-webpack-417d2ef0e773
I see, sorry.
I had an issue like this where ESLint changed my let to const for an async/await action. Confused the shit out of me when my app wasn't working all of a sudden.
np
Thanks, I watched all 4 and look forward to more! Keep doing what you're doing, this community appreciates it. 
I work at Adobe and we ran into this same issue. We ended up transitioning to inferno
&gt; You can’t use default param values because there’s no destructuring so hmm… 🤔 Wait what? What's wrong with function createWidget(defaultText, onClick, markBusy = false)
var my_name_is = 'This is global!'; function f() { var my_name_is = 'This is local to f()'; function print_name() { var print_name = 'This is local to print_name()'; console.log(this.print_name); } print_name(); } function print_name() is an inner function of fucntion f(); In the above function,if function f() belongs to Window Object,then to what object function print_name() belongs to?
Have you taken a look here? https://docs.microsoft.com/en-us/scripting/chakra-hosting/javascript-runtime-hosting It's fairly easy to set up a minimal shim that just runs some JS code.
Absolutely nothing. I believe the writer simply didn't know that this exists.
If that was a joke then I'm whooshing hard but a good api can easily make easy things harder but make hard things much much easier. Redux is actually a prime example of this. Changing one tiny bit of state is annoying and complicated. But being able to manage and share multiple state streams across an entire app becomes much easier.
which one should I go for https://wzrd.in/ or https://wzrd.relative.media/ ?
oh god... I have this problem of making things more complicated than they need to be thanks a lot
This. Or maybe Mithril ? https://mithril.js.org/jsx.html AFAIK all of those options ( Preact, Inferno, Mithril) would be better for performance and overhead right? Personally, I don't think Vue is gonna happen, I know this is gonna bring flames but Vue vs React feels like the early Mootools VS jQuery days. For as much as I hate Facebook, React really made me a better developer... i was in a rut for a long time and it's really made me enthusiastic again (even ~3 years into using it now)
Yeah I think I'm having a problem of "reinstantiating or recalling" events over and over or possibly more than once every time a key stroke runs. For the most part the input is just getting repeated in other locations but it can be parsed to decide what's in the input. I will do the oninput approach as /u/e_to_the_pi_i suggested way simpler
`console.log()` is your friend. So, to take your code as an example, you can see I've added a `console.log('hello')` inside the `changeName`function. It should print `hello` to the console every time the button is clicked. If that doesn't happen, then something is wrong. It can either be, that the event was not added (because you made a spelling error somewhere), or that the element that you are trying to add the event to does not exist (because you perhaps misspelled it when setting it as a variable). To test if the element exists, you could have done `console.log(btn)`, and you should see something useful in the console. If you *do* see `"hello"` in your console, but nothing else happens, that means your function runs, but something else is wrong. In that case, I would do something like `console.log(newInput)`. If there's nothing in the console, log something else out which might be wrong - until you have the answer. Obviously, this is a very tedious way to do it, but I think it's the best way to learn debugging for a beginner. I don't know what you use to write code, but many code editors have functionality, either built in or as a plugin, that does code evaluation on the fly. It would tell you some basic things like if you are trying to use undefined methods and stuff. But don't worry about that right now, just keep writing and debugging code. It will get easier in time.
Thanks for the suggestion, I think there is an even simpler approach (using oninput) I don't know why that completely flew over my head. I do have clearTimeout when a condition is met (user input actually changed)
If you're just outputting text, then I should just use .textContent right? It's going into this jquery text editor, I'll try that. Makes sense that the innerHTML would parse the tags as markup language I think.
Thanks for the clarification that can be confusing like &amp;nbsp; and white space, escaping and matching can be a pain too like regex and I think it's trying to escape two or more forward slashes I don't know not related but yeah.
It is unclear what you're asking.
The above code will try to sum nonexisting elements. But it still finds the solution. I was just wondering is that a generally frowned up own way of solving problems.
Thank a lot @dankalen this is really useful to us. We are definitely struggling with the way we present rapid.io. On the one hand we need developers to know what exactly our product does, what are the specific advantages and at the same time we need a non-technical CEO to understand it too. That's why its a mix of technical and non-technical stuff that we present on the site. What's your take on this? Would you only keep the technical content and get rid of the "business bullshit"? :) 
This is big news, and needs to be really looked at, because we could start seeing a lot more of this. Moving to Preact, Inferno etc would mean very few rewrites, so its unlikely they would go to something like Vue and have to redo everything from scratch.
Whatever its doing its going to be near impossible to change a few days later as its not written very clearly and no comments.
Someone is fucking downvoting every comment mentioning vue.js. Here have an upvote.
Vue
I salut you sir
&gt;up own Upon Non-clean code unreuse... please clean up your code and write a succinct and clear question. 
In other news, water is wet, and someone who writes type checking should know the spec or the equality tables. More at 11. 
The variable names do not convey meaning or intent: I can see that it is an array of strings, but not why. The nested for each is pretty horrible, but not as horrible as the caught but unhandled exception. Also, most programmers would like validation upfront and some kind of organization through functions.
Little misleading? It's not the linting module's fault someone doesn't know what they are doing, or what they want. A good guideline is "Do you know what type the expected object is? Check for that." Edit: Using a linter is not for better coding practices, but for better style. A linter is only that. 
15 years ago, that headline would have been complete gibberish. 
Thanks. Why is the nested foreach horrible. And I didn't need to handle the exceptions. All I needed was for my program not to stop every time it tried to access an element of a nonexisting element.
Interesting
There's [a discussion on Gutenberg's Github](https://github.com/WordPress/gutenberg/issues/2733), Vue seems to be the favourite.
Sorry, "horrible" might be a bit of an overstatement. Using separate functions to compose your logic, you could prevent a deep level of indentation as is going on here. I have not spend time figuring out what the goal of the code is, but it is always good to prevent nested loops, regarding time-complexity. Regarding the silent failures, there are two schools of thought: Look Before Leap (LBL) vs Easier to Ask for Forgiveness than Permission (EAFP). The LBL style is the way more formal programmers like their code: correctness and early validation and sanitization are key. EAFP is more free-form: as long as the result is correct anything goes. LBL is how Java and C-like programmers usually think, EAFP is more for Pythonista's. JS, in my opinion, can be either. Pick one and apply it consistently. To me, exceptions are not meant for this so I dislike this way of working. I would try and constrain and sanitize the input so it always works as expected and be explicit about the intent of every step.
what about angular?
I get 50k HTML in Chrome and 19 times that amount in Firefox. 2.85MB JS files. I would fire the youtube development team immediately.
&gt; but nobody is making anybody use the latest stack This is just not true while companies hire for framework experience over general competence. I've spent the last three months grappling with another team's particularly poorly-designed, painful, sprawling redux application, for no reason other than that I'm obliged to have Redux on my CV if I ever intend to move to a better job. There is no way for me to 'just pick and choose tools as they become interesting' without me seriously harming my employability.
Fuck the Slack app. I just open Slack in safari. That app is absolutely shit. 
Some of those languages are either dead, dying, personal projects or used internally on some projects only. Besides you forgot [ReasonML](https://reasonml.github.io/) which is going to be a pretty huge deal.
[Real iterators usage](https://medium.com/@bohdanliashenko/so-real-iterators-77002dbac451) Wrote about that some time ago, a bit more advanced one.
How was your transition? Did you run into any major issues during the process? Or were they mainly minor issues with little to no refactoring?
still gibberish to most
i think theres a secret anti diversity crowd in threads like these
which non compatible version?
Thank you very much. And the point of this is to find the largest product of 4 numbers in a row in any direction in the grid. 
Why not just apply for other roles while you are working for this company? Once you get a proper JS job, resign from your current workplace.
It's simple. This way, variables are available in the global scope. You can access them from inside any function. If you declare them inside the move() function, they are available only inside that function.
https://stackoverflow.com/a/6604783 Example: let name; // ... some code which has conditions and stuff .. // if (name) doSomething(); else doSomethingElse();
If I were you, I would definitely quit it and find a proper job where you could actually do what you like. Nowadays there are tons of jobs for frontend developers so it shouldn't be that hard to find one for your self. I actually had somewhat similar situation 6 years ago, I was working in a company primarily coding in PHP, I didn't really like what I did, I knew that my passion is for frontend, so I quit that company after finding another. I joined new company as intern, not long after got promoted to junior and from that I was generally quickly growing just being a frontend developer and doing what I love. If your passion is for javascript and you don't even get to touch it on a daily basis in my opinion you are just wasting your time.
I can't think of a situation I've encountered where it's been anything but a source of bugs, even when I think it should be useful. Can you point to any examples of "using it correctly" that demonstrates its usefulness?
Gosh that makes total sense, can't believe I didn't put that together on my own 😣 thanks a lot! 
I was in your exact situation. Out of college I started with freelancing but not long after, thanks to mutual friend, was able to get a job at a small production company founded by a husband and wife couple. At the time, before I came on, I believe there were 4 employees total? And it never strayed much from that + the occasional intern. This can be both good and bad. For me it was good. From the sound of things for you, it's sounding bad? It was good for me because, while it was sometimes tough doing everything on my own, it also meant I got to do - and learn - everything. Somethings I never got very good at, but others I did. And I was constantly doing things to help improve my improve my efficiency: scripts, extensions, component libraries, etc. But a lot of that was only possible because I had a fair amount of downtime. As a small company, there wasn't a constant stream of work, so between clients I would work on those tools to help out for the next time around, and learn the things I had more interest in. Ultimately, that gave the bosses the opportunity to promote themselves as being able to do more as well. "Hey bosses, I know x and y now, you can start getting clients for that kind of work" _pizza party thrown in /u/senocular's honor!_ And as it turned out, that downtime work fed directly into the recognition I needed for my next job, which was much nicer (but if you're listening, old bosses, I still love you guys!). If this doesn't sound like your experience, and you're not happy where you are, it sounds like its time to get out. Take what experience you have learned at this place, try to mold it the best you can into your resume that makes it seem more related to what you want to be doing (JavaScript), and then start looking for a new place to call ~~home~~ work. Its not uncommon for people to move around a lot in the tech industry. Its usually not that hard, especially if you have the experience to back it up. You have _something_ which gives you an edge over those just coming right out of school, but if you have, or can start working on some side projects, that would help even more.
The above example of "inherent truthiness" is type coercion. Coercing an empty string, 0, undefined or null to a Boolean is very useful. Interpolating an integer into a string is usually done via type coercion, rather than calling .toString() first. 
Hi /u/chandureddy308, For javascript help, please visit /r/LearnJavascript. Thank you!
Seriously ppl treating frameworks like sports teams 
Hi /u/thomascr9695, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/dingleberry23432, For javascript help, please visit /r/LearnJavascript. Thank you!
I think that Douglas Crockford stated that you should write the 'var' variables at the top, since all `var` variables are hoisted to the top (`let` and `const` are the exception). That way it makes it clearer that they are available for every part of the function-scope. e.g. function test() { var x; if (window.TEST) { x = true; } else { x = false; } console.log('TEST exists: ', x); } In this example, you know that the `x` is available inside both the `if`and `else`block since it's defined beforehand. function test() { if (window.TEST) { var x = true; } else { var x = false; } console.log('TEST exists: ', x); } For the example above, the `x` variable is defined two places inside the `if` &amp; `else` blocks, but it's still available when the `console.log()` function is called. If you were to switch out the `var` keyword with `let`, the function will throw an error saying `x is not defined`.
Hi /u/flickiflacki, For javascript help, please visit /r/LearnJavascript. Thank you!
That's certainly true but the person I was replying to is "just beginning to learn." It's not productive at that point to get bogged down in which tools to use. Once you're further along it can be frustrating to have to deal with a million ever-changing tools, but you're also better equipped to handle the churn. Learning my first MVC framework took months; now they are generally interchangeable. 
lol prolly word.in
That would be great but I've a month's notice in my contract, that would be to long for most employers to wait. 
I agree with other posters that finding a new job is probably a good idea. That said, while you are still there it would be very worth your time to try to learn some PHP, it's everywhere in our field. Symfony is a very good framework.
Horse shit. If you did, then you have simply exposed yourself to a patent infringement. However, it is unlikely that a company of the size of Adobe would not have legal adviser when it comes to disputes such as this, i.e. this probably never happened. This has been discussed over and over again, and reasons explained in entirety.
Naw, there are plenty of companies that take about a month to get things set up. If the company wants you they'll understand.
Not in my experience. If they want to hire you, they don't mind waiting 1 month for you to join the company. Look around, you might be surprised!
~~Not if you need a new line character.~~
funny thing is Facebook actually holds a patent for VDOM so if they want to be 100% patent proof you'd have to dith any VDOM lib
I'd prefer to hire one developer that knows html, css and javascript instead of multiple people. Learning JS these days is so much easier than it was 10+ years ago. The amount of learning resources out there is pretty endless. Honestly, there's no excuse to not know JS if you're serious about working on the frontend. edit: spelling
&gt; Learning JS these days is so much easier than it was 10+ years ago no
so we can't use React anymore?
Is this just an exercise or is there an actual application of it? Also, I agree with /u/rotharius' point about early input checks, 20 years of built up try{}catch{} blocks, in poorly formatted Delphi6 spaghetti, with silent failures was the bane of my existence at my last company, I highly recommend public flogging of people who perpetuate that pattern. ;-)
&gt; funny thing is Facebook actually holds a patent for VDOM Where is it? Their patents clause is [an empty stub](https://github.com/facebook/react/blob/master/PATENTS), it has existed in the same shape for over 3 years now. Never seen any real patents linked to. And if they'd exist, most frameworks are dead in the water. Preact, Inferno, Vue, Mithril, Bobril, Cycle, ... i count about 20 candidates in [this benchmark](http://www.stefankrause.net/js-frameworks-benchmark6/webdriver-ts-results/table.html) alone. V-dom isn't more than this: const createElement = (name, props, children) =&gt; ({ name, props, children }) // &lt;ul&gt;&lt;li&gt;hello&lt;/li&gt;&lt;/ul&gt; createElement("ul", null, createElement("li", null, "hello")) //returns ... { name: "ul", props: null, children: { name: "li", props: null, children: "hello" } } Would be highly unlikely that someone could patent a linked list, which is what the v-dom essentially is. [Rendering, diffing or patching aren't that special as well](https://ryanfunduk.com/articles/react-from-scratch/).
Yeah I don't mind learning PHP at all, it's just when there's campaign deadlines and the boss's wife is screaming in my ear because I don't know a framework/language that wasn't in my Job description, it's a bit annoying. That said, from my dives into PHP from here I'd like to study it more in a non-production environment. 
if someone sets up a dev environment for you, its probably true, but if you asked a newbie to do that themselves....
jsDelivr was launched in 2012 and since the beginning it was built to be used in production. It uses 4 CDN providers and 2 DNS providers to achieve that. unpkg is mostly targeted at dev and demo environments. same for wzrd.in, they mostly offer a software demo rather than a production service
Even then... for any hack of a modern project you need to grasp something about npm/webpack/framework/ not just a language that changes all the time. Imagine someone who learned js more than a year ago and has to deal with await/async, arrow functions, es6 in general. edit* What if you are using typescript, a year ago it was flow? I don't know was crazier the tooling or the language itself. I don't mean bad, it's just a whirlwind.
It's a project euler problem.
Hey bud! So did we. Our team decided on VueJS. How's inferno?
I'm not going to sit here and tell you companies will wait for you. Companies may wait for _some_ people, but considering you haven't been doing what you want to be doing, I don't find it likely that you're the kind of person they'll be waiting for. No offense, but on paper, that's how it's going to look. Instead I suggest start looking now, but for the less ideal positions. Places you can interview with but you're not entirely concerned on working for. This will get you up to speed on feeling comfortable interviewing again, and get an idea of the talents and skills people out there are looking for so you can reign those in for the later interviews you want to excel in. At that point there will be less (if any) waiting to be had. And if by some chance one of these initial companies wants you enough, and they're surprisingly someone you would work for after all, if they're willing to wait, you're still able to test the waters for the other companies you're more interested in before saying ok. If you're concerned about your current level of experience, you may want to work for anyone who will take you so that you can build that up and look better for your next transition a year or so down the road.
&gt; Never seen any real patents linked to. The patents aren't explicitly listed in the licensing file. They're implied via other means. Which unfortunately means you'll never know exactly what patents Facebooks holds that could impact your project.
&gt; ~~Money~~ Software patenting is the root of all evil.
Just because the function is a string doesn't mean it has to be wrapped in quotes
Fucking wow! That's amazing work
i guess i am assuming you're setup with an environment and staying in the lane; if we assume you're a newly hired guy at random showing up at a shop, then yes, its a shit show.
I here Inferno is good!
What, you've never had to do a serious refector because some deep dependency is gpl which spooked the lawyers?
If he can do that with one picture, what can he do with multiple pictures?
Why does this article imply that Array.map is ES6? Surely that can't be true. 
This is really cool. I don't know if uploads are kept but it worked well with this creepy Daniel Radcliffe / Elijah Wood hybrid. http://www.cs.nott.ac.uk/~psxasj/3dme/view.php?name=59bbe98b26cb2
Okay its not VDOM but it's related: https://www.google.com/patents/US20170221242
Not sure what country you're in? In the UK a month's notice is standard. You should definitely look for something else.
The school only give me 700MB of web space, and each model is over 2MB, so unfortunately they are deleted a few minutes after they are created. 
Speaking as someone who learned JS 10 years ago, it absolutely is. Learning resources are just a *ton* better: MDN is a ton, ton better than w3schools was, not to mention quality ebooks like http://eloquentjavascript.net/. And editors and linters have gotten a ton better, too. You couldn't pay me to go back to Notepad++, and I can't tell you how much time I lost to stupid typos when I was first developing JS because I wasn't using something like eslint. And, the language has gotten better, too. You don't have to learn about the pitfalls of `var`, or of `for..in` loops, because you can just use `let` and `for..of` loops, instead. (Plus, the fact the language is just less painful to write helps everyone, including newbies) --- Yes, if your standard of "learning JS" includes learning frameworks and libraries and build tools, and all the new hotness, yes, that's more difficult than just learning JS itself, but there's no reason you need to define "learning JS" that way. There's no reason a beginner needs to learn all the frameworks and libraries and build tools right away, and in fact, they really shouldn't jump into all that at once, IMO. Without all that stuff, a 2017 beginner is exactly as productive as the 2007 beginner, but with a much less painful learning curve and better tooling.
Apply for other jobs WHILE YOU ARE STILL WORKING. Don't quit to look for a job. It's a red flag to employers.
Yep those are ES5.
Super cool, thanks for sharing!
You don't need to setup an environment to learn js. Pretty much all of ES6 runs natively on Chrome these days, and Node isn't that far behind. There's also a ton of live coding tools like codepen. You literally don't need to install anything. Even setting up a basic webpack/babel thing isn't that hard. I went through the exercise of figuring out the minimum required process when documenting my framework and came out with [this](https://mithril.js.org/es6.html#using-babel-with-webpack). It's not a one liner for sure, but it's pretty much copy-and-paste, so it isn't terrible either. Even with all the new syntax in ES6, js is still considerably easier to learn than something like C# or Haskell. It also helps that there's a lot of learning material out there, ranging from video tutorials to games.
I only graduated 3 months ago so it's not a big gap in my CV, can pretend it didn't happen almost. Surely applying for jobs while you're in one is a red flag too?
No. Applying for jobs while you are in a job is the *normal* thing to do. Most people jump from job to job without downtime (unless they deliberately take a break). 1 month notice is standard.
Okay, so what exactly is wrong with VueJS in that regard? I just came off of a ReactJS codebase and into a VueJS one, and I'm not seeing it.
Of course you can.
&gt; Surely applying for jobs while you're in one is a red flag too? No, usually people will accept a job first and then give notice to the current employer, unless they specifically want a sabbatical between jobs. The only times I've interviewed people out of jobs were when talking to college grads, or students for internships. The part that doesn't look so good is the short duration of employment, but personally, for me, it's only a red flag if there's a history of job hopping (e.g. 3+ consecutive gigs of 6 months or less), especially if it's also coupled with a lot of gaps and a "CEO of my own freelance thing" bullet point in their linkedin. If I were you, I'd look into bigger companies (like several thousand employees). It's much easier to get junior level positions in those companies since they are usually understaffed, and it makes it easier for you to get references for future jobs as well.
Hey, article author here. Thanks so much for your kind words and the bug report! I really appreciate it :)
Because it's a very popular language, especially for beginners. My thought was that being JS so popular I could reach more developers and let them know about the goodness of the Actor Model.
So either "above the fold" rendering, or perhaps something like z-index occlusion - not sure how well this would hold up in court but it does mention React by name.
This article feels frenetic and fraught with subjective opinion. A lot of these are intuitively valid points, but may be easier to swallow with some data to back up the "but this is bad" sentiments. Some of the points against some of the patterns rely on also implementing certain other patterns that are mentioned. In some cases it also seems that assumed implementation details are used as evidence against a pattern. The conclusion is kind of a cop out that doesn't solve many of the problems brought up by the individual points. I think this article has some great intuitive findings, but perhaps his book could focus on user testing data as a means of backing up some of these claims. I also feel like there has been a fair amount of academic rigour applied to these topics in the field of HCI that could further help shape informed opinion. 
Having only glanced at Vue, and ignoring the smaller ecosystem, I recall that Vue was more like templating than everything-is-a-component. With the component approach, you can create very complex things using just composition. I have for example a table component that takes column definitions which take Cell components to render the columns, and then I have a ListDetail component that uses the Table + a Detail component to manage showing a detail view of a selected component in that table. I can very easily customize everything. I think this would be harder in Vue, but I could be wrong.
That's why it would really be interesting if someone could link to an actual claim if they really had one. Would be nice to know if an actual threat exists or not, because otherwise we're stabbing into the blue. The patent thing is already close to hysteria. So now Preact is supposedly unsafe, then all frameworks are, because the majority of them have the exact same underpinnings.
&gt; https://www.google.com/patents/US20170221242 Doesn't seem to specify a virtual dom, nor do preact/vue/mithril/etc support culling. Though it would indeed be sad if that's really describing parts of Fiber.
Hi /u/srikavig, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Now i just need a 3d printer and I can bypass the new iphones lockscreen
&gt; Yes, if your standard of "learning JS" includes learning frameworks and libraries and build tools, and all the new hotness, yes, that's more difficult than just learning JS itself, but there's no reason you need to define "learning JS" that way. The reason is that is what our ecosystem is comprised of today. Way back when, it was far less involved. I learned everything I needed to know viewing the source of websites. That got put me on par to just about everything else that was out there at the time. Rarely does that do anything for anyone anymore. And not just because of minifiers and other manglers, but because JS has gotten much more complex in its usage. So much so that all these libraries and frameworks grew around it in support of that. So yeah, to learn what's needed to survive out there, it's far more difficult to learn. There's far more to the language itself (ES6+), and much more is being done with it - more often than not with support from some other library/framework that would also need to be learned. That's not to say the learning resources aren't better. They are. But they grew with the complexity of everything else. Viewing source and a good book doesn't give you everything you need anymore. Those were simpler times. 
+1 for Alan Turing
there's only one Angular now AngularJS is the old garbage framework unless you're just memeing... in which case please stop beating the dead horse
Holy shit, someone needs to test that out 
Vue works the same. Entirely component driven 👍
Good news! You can absolutely do the component thing in Vue, and IMHO it's better-done: https://vuejs.org/v2/guide/single-file-components.html You can organize your markup and scripts in the same file, but also CSS. You can even use style modules, which are amazing, so you don't need BEM for organization anymore. Most hello-world stuff you've seen has probably been just the templating bits, you have to get this all set up with webpack first (like React). But once you're there, it's just as simple. Virtually all of our VueJS codebase is component-based.
Tl;dr use preact-compat My question is how does it compare to fiber and are there any downsides?
&gt; Main differences of TypeScript from JavaScript are the following: &gt; * Static typing; &gt; * Support of full-fledged classes; &gt; * Support of modules connection. That’s quite an outdated article.
can it do full head or just the front part. ?
If it were me, I would give preact a shot. and if I found show-stopper class issues, I would choose Vue. 
Just the frontal part since we used a very fast method of producing the training set. Even on HPC this took a few days. I might leave it running for a while and train a model which can regress the full head.
Great work!! I thought about getting into pix2pix and to train something like this that would generate a height map, but I wasn't sure how to exclude noise, or if I should filter or what not. Think it would work?
Using Inferno exposes you to React/ vDOM patent infringement, not protects you. No lawyer would have recommended to transition to Inferno.
I must say I prefer the look of something similar in React: https://www.styled-components.com/ But I should take a deeper look. One component per file does seem rather annoying - I often have a bunch of helper components (a few lines) and they go in the file with their only user. Having to do the HTML and the JS separately like in ng is also not something that excites me…
I think I misread what you wrote. I interpreted it as "Adobe has expensive lawyers so they wouldn't worry about this" hence my reply.
The fact that "just look at the source code for random websites" was, at the time, the de facto way to learn JS is evidence for how awful it was to learn JS 10 years ago, not how good it was. And, yeah, your average website has much more complex JS today, because your average website is a *ton* more complex than it was a decade ago. But I wouldn't expect a JS beginner to just sit down and pop out a modern website any more than I'd expect a C++ beginner to just sit down and pop out an indie game. It used to be that being a JS beginner and being a JS expert were basically the same thing. That's not the case any more, not because JS has gotten harder, at it's basic level, (again, I think it's actually gotten easier: `var` vs `let`, `for..of` vs `for..in`, etc) but because it's gotten deeper. And that's a normal part of language development. Java was a much simpler language to master before it introduced support for generics, but it's a better language for having generics. (And, neither does a beginner need to master generics, either). And tools like Maven or Spring or Groovy or Grails certainly introduce complexity, but Java is a better ecosystem for having them. (And, again, I wouldn't suggest throwing a beginner straight into the deep-end, either) We haven't raised the bar for getting into JS: the barrier for entry is lower than it's ever been. But we have raised the ceiling of what JS can (feasibly) be used for, over the years.
Apple said that if someone tried to do this it wouldn't work
Still excited/curious to see people's attempts 
Yeah me too
Right. Of course coercion is useful, I misspoke there. It's the *implicit* coercion I find less useful. For the "inherent truthiness" example, I don't often find a situation where I want to coerce to a boolean without knowing the type I'm coming from. So, prefer to opt for an explicit conversion.
Thanks. This comment has changed the way I will solve project euler problems now.
Same here. I'd never go back to React.
doesn't it have an infrared light sensor now as well now? it can probably check for veins under the skin and in eyes. 
*Never* (except for extreme circumstances) quit your current job without having a new one already lined up. A month's notice is perfectly fine. It's a two-way street, as for any role you're applying for, the person you're potentially replacing is also on a notice and while you're applying, they might even still be there.
Just use Aurelia. It's better in every way.
I'm in a fortunate position where I'm not paying rent or anything like that, and I have enough money saved up that studying and working on personal projects feels like a better use of my time than what I'm doing right now. Even working a retail part time job and studying seems like a better option. The atmosphere in work is quite toxic as well.
I understand. Just keep in mind that being employed when job hunting puts you in a better position when negotiating.
Sometimes the best thing you can do is just give them an easy-to-work-with environment. Yea, you can teach them at these sessions, but for the most part, the best way to learn coding (and to actually absorb what you're learning) is to code. Some things you could consider... * Create a sample project with everything built in, so they can start coding right away. This project should have transpilation, linting, and testing set up so they don't have to worry about this stuff. It also encourages a company standard and makes sure new projects don't drift too far off. * Encourage code reviews. Get them in the habit of knowing what best practices are. * Encourage pair programming. Find deficiencies in their understanding of programming. Obviously you don't have to do all of this by yourself. I'm sure among a large company, there is going to be a whole spectrum of experience levels with JavaScript. Get some people with more experience helping those with less experience. It's not a one-man job and creating a culture of high standards and mentorship can go a long way beyond any JavaScript lesson. 
Might be a good idea to xpost this to /r/cscareerquestions
You might want to watch Michael Jackson's [ReactRally talk on his Unpkg CDN and ES modules](https://www.youtube.com/watch?v=2rhkgB8Cohc).
I may be completely wrong because I have not used async await but shouldn't your personality function return something???
Yeah, I'm logging to figure out why it isn't returning a value. It seems to be a scoping issue in the helper functions. Still cant figure out why 
I think its because I'm returning the function inside of that api request
no you're not returning anything from `helpers.personalityInsights`, so there's no way `main` could return anything either, oh and `helpers.facebook` doesn't return either.
Cool. Here in action https://sequential.js.org/live.html#DYewhgJgFA5AFgFwQBwM4C4D0mDuAvAJwgDoBLAO01QTHIjFHIFNNyBXAWwCMmCBaBCD44QRVAAFgYBE2owAlAG4AUAGMQ5VCGBNioAOZR23XgBUQAdVERUxQVbFQAjAAYXAJnlKgA
I am not a bot. Look at the link I posted it's a script leaning on the JSDelivr CDN 
azium, none of them return. I thought placing the return keyword would do the trick? I guess not? What am I doing wrong?
There is no evidence that Facebook holds a patent on anything in React. My understanding is that the vdom technology existed well before them and is not patentable. Is there evidence to the contrary?
This is fucking nasty. Super Impressive shit.
Have you heard about callbacks / promises?
ok, so there is no way to use callbacks? 
I don't quite understand why Auttomatic is abandoning React?
http://www.google.co.uk/patents/US8307277 http://www.google.co.uk/patents/US20170221242A1
I think you need to know JS, but then you also need to know HTML and CSS. It's bizarre there are people who are "JS only". I guess most of the "famous" (relatively speaking) JS developers just contribute to libraries/frameworks and don't really get their hands dirty making actual websites.
Passes the Turing test
Then again that's not a patent they hold but an application for one. Even if there was no prior art in this area(draw-distance, double buffer in game design, etc) the threat of Facebook, inc obtaining a patent on a broad enough VDOM/culling idea has long sailed the day these ideas became public knowledge unless they bought them from an older company or already had them before such a time, but the publication date of that application makes it hard to believe that the second point could be true.
I know of both. Not necessarily the difference outside of callback hell. Does async require promises? 
It's got a shit license that more and more people are finding unacceptable. At this point it seems to be a debate not of *whether* it is shit, but if it is *justifiably* shit. If you find the shit to not be bad for you, by all means, React's great otherwise.
The amount of programming resources today is *significantly better* than it ever has been. Javascript is no exception!
Yeah the response of IR hits 3D printed materials differently than skin ML wouldn't respond the same
Hm, well I suppose that's a good point. Maybe i'll try that. Thanks!
 function callbacky (input) { return new Promise(resolver); function resolver (resolve, reject) { some_api.method(input, (err, data) =&gt; { err ? reject(err) : resolve(data); }); } }
Tableify doesn't handle functions. Renderjson is just a viewer - I need the user to be able to edit it, which is why i'm just looking for a simple formatter. 
You could use a combination of node's fs module and esprima for this, but if one of my devs came to me with this problem I'd really want to make sure it's a problem that couldn't just be solved in a different place. Often when you find yourself needing to do something this complicated it's an indicator of a bad design pattern somewhere in the code base or build process. My advice is to take a step back and see if you can't address this problem on a higher level.
But why?
[And the internet goes round again](https://www.reddit.com/r/InternetIsBeautiful/comments/6zj17p/a_website_that_produces_a_3d_model_of_your_face/dmwivzt/) 
If anyone wants to read the paper: http://aaronsplace.co.uk/papers/jackson2017recon/jackson2017recon.pdf
"Yeah, that won't work, we've tested it thoro... Oh."
I have some decent tutorials on web scraping and web bots on my youtube channel. https://youtube.com/c/powerslacker
CanJS alert
There are userscripts available online that do this sort of thing. Search on greasyfork. If u don't find something that suits you I could help but I'm not gonna do it for you unless you're paying.
He tried Vue and thought it was better than jQuery. Yay. The end.
Which is a thing you can [Do Online Now Guys](https://www.youtube.com/watch?v=kESF39vSC1E&amp;t=191s)
I did one with glasses and got a pretty [hilarious result](http://www.cs.nott.ac.uk/~psxasj/3dme/view.php?name=59bc3c81b7a5b)
It’ll probably eventually be possible, via so-called loader hooks, but isn’t yet. At the moment, you can do your own mapping and use the `import()` operator (where available!).
&gt;there are 7 ways to define a component template with Vue.js I haven't used Vue, but holy shit that is not a pro in my book. Every other component is going to be defined in a slightly different way depending on which developer wrote it, and every code base is going to look slightly different.
Hi /u/srdjan_sukara, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Any code you execute becomes a part of the context for that tab, so the only way to actually _clear_ it from memory is to refresh the tab, just like if it was in a webpage. 
Ok, that sucks a bit. So I guess I would have to import from a vendor or 3rd party folder instead, such as Import * as _ from "vendors/lodash.js"?
I think the 7 ways only provide flexibility. For example: if you want to convert an component you created with React you can reuse the JSX instead of converting everything one shot. Also, in my opinion single file components are one of the most powerful feature of Vue.js this is why I think that most of the code base will use them. I think in the vue.js documentation it is discouraged to use some of the template declaration ways.
Yep, it uses CanJS as an example. I think the suggestions are really valuable for anyone building similar tools: 1. shift statefulness to the user of the code 2. minimize the stateful parts to their "bare" essence 3. let people know if they have loaded the same thing twice
You're linking a random patent owned by facebook, inc, filled in 2010 that doesn't describe a v-dom. All frameworks infringe upon patents owned by large companies. But if you're saying Inferno is unsafe, at least be specific about it.
This is amazing! You could totally turn this into an app and make a shit loads of money, by the way.. 
You can use `white-space: pre-wrap` style for newlines.
Whoa... this is amazing. Nice job!
Ok thanks :)
Just guessing but... * it would be a useful sandboxing layer. * Node.js apps could emulate browsers more accurately. * with WASM&gt;ASM.js converters you could upgrade old browser JS engines (e.g. in Chrome 55 you could run Chrome 60's VM) 
Bad bot
It's unfortunately still missing module support so it's not very useful yet at the moment.. But it's a step in the right direction.
A few notes. 1.) in JavaScript we typically name all variables all start lowercase (except when defining pseudo constants) 2.) your technique works but only if you supply enough zeros for the count you need (eg if padding the number 3 to 4 characters (-4) you need to prepend at least three zeros. Eg var padded = ("0000" + 3).slice(-4); As for whether this should be used vs other techniques you'll have to consider how you would "genericise" this into a utility function. As for maintainability will the next developer reading this code understand what is happening? Finally how is the performance of this technique? (I haven't tested this vs other techniques but feel free to create a jsPerf test and report back the findings.
As in &lt;br&gt; Or an actual space? I do have brs in there, will check it out that would be a concern if those didn't work. edit: oohhh... that sucks. It is a joined array so maybe I'll do it individually and then I can deal with the br's at least those are separate edit: nevermind, the line breaks still work for me, they're added dynamically through parsing not sure if that makes a difference and being outputted into a jquery text editor, but I still think ultimately the last thing that runs is .text('the content')
ES2017 added padStart and padEnd. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd **Edit:** Also: &gt; ("0" + 1).slice(-2); "01" // ok &gt; ("0" + 123).slice(-2); "23" // oops &gt; '1'.padStart(2, '0') "01" &gt; '123'.padStart(2, '0') "123" *Padding* a string should never make it shorter.
Good to know about padStart and End.
It's already on the link here, but at the risk of being redundant, here's the github repo, which includes an in-depth API, and some of the motivation for the project: https://github.com/JRJurman/tram-one 
Keep in mind that module support doesn't mean that you shouldn't bundle, even with HTTP/2. More modules mean more requests and smaller modules mean less chances to compress. * Edit: fix a typo
function PadZeroes(number, pad_length) { var zero_string = ""; for(var i = 0; i &lt; pad_length - 1; i++){ zero_string += "0"; } return (zero_string + number).slice(-pad_length); }
Every single Vue article I've seen touts the ability to use JSX, most of them are about how Vue is so much better that React, but I've never seen Vue dude ever actually use JSX, it's always templates and learning yet another DSL. No thanks. What is so great about single file components? Every React component is the same.
Yeah this is great, I used $('.class').each(function() { $(this).on('input propertychange', function() { // trigger events }); }); got rid of the dumb setTimeouts for 80ms, much better thanks, Reddit and StackOverflow ftw edit: I try to use plain JS as well at this time (in the process of learning a framework) but this site uses jQuery so whatever, not against jQuery anyway no bandwidth/internet restrictions in this case. I'm starting to use const,let,promises pretty cool. I wrote my own dumb async things that wait for something to happen then continue (set timeout) but encapsulating the rest of a block of code as a function and then calling it when the top async is done.
That is really cool
Single file components allow you to use HTML, Javascript and CSS in the same file. You can even use typescript instead of Javascript if you want. What is great? Rather than try to remove HTML Vue lets you use the HTML advantages such a clear markup syntax.
I think someone from the React/Jest/Yarn team already commented on these patents and they related to their past work on MooTools that got acquired by Facebook. They said that almost every UI library and framework today infringes on a Facebook patent and this particular one was highlighted. So if you use Angular, Vue, Ember, Inferno, Marko or Preact, you're basically infringing on a Facebook patent of some kind – so make what you will of it.
because some people just want to watch the world burn? :D
You don't need the .each(). jQuery functions are already applied to each member of the selected query. $('.class').on('input propertychange', function(){ // do stuff });
This was *very* helpful thank you. I have put 0 effort into learning debugging skills. I have spent most of my time learning functionality and how to write, but learning tips like this makes me realize how useful and important it is. I use brackets and utilize a plugin that guesses at what your going to input after you type a few characters (obviously didn't utilize it when writing eddEventListener) and its usually right. I have been thinking of swapping to Atom though recently. I've just heard so many good things about it i feel like it will be more feature rich. Ill be honest though learning more advanced javascript has taken a back seat for me ever since I started using WordPress. I have been spending most of my time learning the features of that CMS which hardly requires any coding knowledge whatsoever. But I'm realistic. I know in order to be a true developer you need to know the code. I've been thinking about switching my priorities to PHP though but I'm stuck on prioritizing what to learn. What do you personally suggest if I'm going to continue using WordPress... PHP or Javascript?
Cool, I thought I needed to run through all of them. Guess that's what a class selector is for haha.
But you can do the same in React. The syntax is the same and not having DSL language, just regular js, is arguably better. To each their own. 
Cool idea. Nice job.
You would need to have an IR ink / material in addition to the visible ones, but as long as we're talking about a face recognition system that only want/need to look at the user from exactly one vantage point, you can always simulate the ”cameras” view, except possibly if it's a true holographic camera, but even then it might be possible. However, if the ID system in addition to the 3D camera requires a moving face, facial movements, estimates things like subsurface scattering, brdf functions, and is able to see vein patterns using a NIR camera? I'd say that then it's probably about time to apply the wrench method if you need it unlocked.
For small one off learning projects, I usually use a Rails backend. For things I generally want up for any significant time I use node. I really embrace the convention over configuration of Rails. 
Am I missing something? It looks just like a CSS transform. I don't really see anything 3D about it at all. 
What's up with the syntax highlighting in your blog post?
You have to wait a bit, and then it turns 3d. It's not obvious.
I generally have used Rails as the API only then hit it with React, I've only used a gem like react-rails to build on top of the view layer once and I was less a fan of that method. For simple stuff it feels much lighter than it probably actually is, but I could scaffold out a CRUD boilerplate in 30 minutes so it's a little give and take. If I sketch out my models quickly I can move on to the part I am actively trying to get better at, the React-app or in your case the Vue-app much faster. 
This seems like a better question for a PHP subreddit. But I've rolled my own API in PHP... It's not too hard. For a small projects i think it's often easier to avoid frameworks unless they really offer something essential. My next little backend project will probably be in Node, or Go as a distant 2nd.
Sadly the JS Perf site is experiencing some issues right now but I made a JS Perf test for a semi-classic append loop vs using slice to compare. https://jsperf.com/zero-padding-perfs Note these tests handle the cases where the value is longer than the requested pad length... but the slice version is pre-optimized to handle only a set expected level of padding.
PHP is not something I've explored, but you are taking the route I would recommend, so have fun!
'We, the undersigned, demand Facebook to remove the PATENTS clause from React.js and change the license back to its original, plain, and trusted BSD license.' https://getyarn.io/yarn-clip/4ff513cf-025c-432e-a338-1e75b6d1bf88
And we demand that beer be free! I love permissive licenses. But having created several open source projects in the past, I believe that it is the original author's right to place any license on their work as they please. Remember, by default, you have been granted no rights at all. A license like this allows you to use it when otherwise it would not have been possible. They could have put a "no lion tamers, pole vaulters or mimes" clause in it, and it would have been perfectly OK. Just appreciate what you have. What might work is a GoFundMe project. Offer FB $10m for the license.
&gt;What might work is a GoFundMe project. Offer FB $10m for the license. Oww, that would set a horrible precedent. If you don't like the license, just don't use the project. That's the only vote Facebook is going to count when considering the cost of their business decision.
sorry, I don't know how to format it to make it clearer.
Interesting, could be a good way to deal with cross browser issues - not including the entire core, but certain new features. But maybe that's already a thing?
You might dig the [@std/esm](https://github.com/standard-things/esm) loader. It follows the Node way by default but can unlock loading `.js` as ESM.
https://www.reddit.com/wiki/commenting#wiki_posting https://www.reddit.com/r/learnjavascript/ https://codepen.io/
 var dice = 0; function setup() { createCanvas(600, 400) } function draw() { background(0); if(dice == 0) { rectMode(CENTER); fill(255); rect(300,200,50,50); rectMode(CENTER); fill(0); ellipse(300,200,5,5) } else if(dice == 1) { rectMode(CENTER); fill(255); rect(300,200,50,50); fill(150); ellipse(290,190,5,5); fill(150); ellipse(310,210,5,5); } else if(dice == 2) { rectMode(CENTER); fill(255); rect(300,200,50,50); fill(150); ellipse(290,190,5,5); fill(150); ellipse(310,210,5,5); fill(150) ellipse(290,210,5,5) } else if(dice == 3) { rectMode(CENTER); fill(255); rect(300,200,50,50); fill(150); ellipse(290,190,5,5); fill(150); ellipse(310,210,5,5); fill(150) ellipse(290,210,5,5); fill(150); ellipse(310,190,5,5) } else if(dice == 4) { rectMode(CENTER); fill(255); rect(300,200,50,50); fill(150); ellipse(290,190,5,5); fill(150); ellipse(310,210,5,5); fill(150) ellipse(290,210,5,5); fill(150); ellipse(310,190,5,5); fill(150); ellipse(300,200,5,5) } else { rectMode(CENTER); fill(255); rect(300,200,50,50); fill(150); ellipse(290,190,5,5); fill(150); ellipse(310,210,5,5); fill(150) ellipse(290,210,5,5); fill(150); ellipse(310,190,5,5); fill(150); ellipse(300,210,5,5); fill(150); ellipse(300,190,5,5) dice = random(0,4) } } function mousePressed() { dice = dice + 1; }
thank you. hopefully that's a little easier to read.
# Mod Applications We're looking to bring on 1-2 mods, depending on availability mostly, so the application itself is really short. Look for the template at the bottom. ### What to expect A couple hours per week, mostly broken down into mundane 1-5 minute tasks, with the rest going to internal discussions, periodic upkeep, etc. You may need to occasionally respond to a protested mod action, or to play the role of peacekeeper/babysitter. The more fulfilling side will include helping to improve the sub in various ways. This might include initiating/facilitating community discussions, making infrastructure changes, pet projects, etc. I already have some ideas I want to explore, and hopefully you'll have some too. ### Minimum Requirements * redditor for at least 1 year * has posted + commented in /r/javascript (prior to this week) * even-tempered (_not easily annoyed or angered_) ### Perks hahah ### Deadline Please respond to this post by **Midnight CST on 9/22** (1 week from now) using the template below. Results will be communicated sometime in the future. And not before. ### About the Template * **Reddit Availability** How many days a year would you say you're on reddit? * **Daily Availability** How many hours in a day would show activity for you on reddit? This is _not_ your total daily time on reddit, but rather, how many discrete visits you make. Examples: if you visit at 10am, 1pm, 4pm, and 10pm, that'd cover 4 hours. If you visit at least once an hour from 8am-midnight, that's 16 hours. Just need a ballpark estimate for your average weekeday here. * **2nd favorite sub** Because obviously /r/javascript is #1. * **About me** Help us get to know you! ### Template // @see `About the Template` for definitions Reddit Availability: Daily Availability: 2nd favorite sub: About me: 
Please put the (complete) code on codepen.io so we can run the project with minimal effort. More people will take a look if you do this.
i hate to be negative, but really? Is it Wishful thinking? Naivete? A petition.. seriously? Go write some code.
This is not meant for a real-time AAA game. This is a different kind of demo. This is path tracing, which is a very expensive mathematical operation. Check out Quake 3 in WebGL, it should be butter smooth on your machine: https://media.tojicode.com/q3bsp/
Where did it "shit on linux"? 
"You never get it done anyway so why bother even trying you idiot" "Facebook is allowed to put anything in the license. They are big and you are small. WHATCHAGONNA DO!?" "Just give up and don't even try. Too hard." Ignore these idiot kibitzers 
We have a little community on [Slack](https://hyperappjs.herokuapp.com/) and welcome anyone that wants to help and share their feedback! 
This is really cool, we get placement students from Nottingham Uni at work, great to see them do stuff like this. I'll share it round the office.
I know this is the typical "but have you tried x" instead of answering your questiion. But have you tried using the integrated terminal in vscode? Also read up on vscode mocha test runner.
I've used this for nicely encapsulating small interactive sections on otherwise server-generated webpages, and for that it is awesome. Curious if someone has any experience of both this and Mithril and can give their thoughts on a comparison between the two? I have the impression that there is a sliding scale of functionality / complexity that runs: Hyper --- Mithril --- Vue/React Ecosystem But I'm not clear on which end Mithril comes in at. Also, anyone have any experience directly comparing Hyper with Svelte?
Bingo
I'm glad I could be of help. Debugging is important, and so is writing "bug free" code. While you can never catch all bugs, there are various things you can do to get close to it. For example, unit testing (writing automated test for your code), having people do code reviews and straight up just getting more experience. It doesn't matter if you're using Atom or Brackets or something else. They are both good editors, and they support packages, so you can customise them to fit your needs and preferences. Use whatever you like best. I don't know a lot about WordPress or PHP. Learn it if you think it's fun and useful for your long term goals.
It would be great if framework authors that has a primary focus on library size at least tried to describe features that available in libraries like React and which they intentionally ignoring to reduce size of the library. 
This is a link to the repo. [Here](https://gist.github.com/JorgeBucaran/e63a1c7976b63df11f53bfbc1a7f4607) is a link to an article that touches on what you asked. Hope it helps. Side note: I am not sure that the "official" docs should go out of their way to discuss how Hyperapp is different from React or other libraries, but I would be happy to hear what more people think and work on it. Thanks for bringing it up.
Yes. I would suggest that new devs focus their efforts on platforms and libraries that don't have the possibility of drawing Facebook's ire. There are several frameworks that meet this criteria. I personally love Angular, but I understand that it isn't everyone's cup of tea. Vue is also a good option.
I understand use cases, edge cases that it won't be able handle, flaws in API and behavior because I've been doing it for a long time, but average web developer will open readme and here is the first thing that it will see "We have aggressively minimized the concepts you need to understand while remaining on par with what other frameworks can do.". Maybe a little bit more honesty? ;) Yes, there is a market for small libraries like this that cover just 80% of use cases and for many projects it will be enough, but saying that it is "on par with what other frameworks can do" isn't fair.
I think Mithril is somewhere in the middle, but closer to React in the spectrum. Hyperapp has a built-in state management solution out of the box. All of it is implemented in [these 100 LOC](https://github.com/hyperapp/hyperapp/blob/3ab5a1e483fc0520447b3280c52ec67c84f66ff1/src/app.js#L3-L102). The rest is the VDOM. The entire "framework" is under 300 LOC. Compared to React, Hyperapp is a simplified, Elm-inspired React+ReactDOM+Redux+ReduxThunk. Since all of it is built-in, there is literally zero boilerplate. 
To minimize concepts while still remaining on par with what others can do _is_ the mission that I embarked on when I started the project. &gt; I've been doing it for a long time... Please share what is that have you been doing for a long time. Maybe Hyperapp already takes care of it, or not! If you don't say exactly what is in your mind I won't be able to tell you if it'll work or not. 
No.
Nope, React is fine and will continue to be fine. I encourage anyone who has doubts to [read this post](https://medium.com/@dwalsh.sdlr/react-facebook-and-the-revokable-patent-license-why-its-a-paper-25c40c50b562) — written by an *actual patent attorney*. There is an argument to made that if Facebook has patents relating to React (and that’s a big if), then it is actually *safer* to use React instead of React-like libraries like Vue, since by using React directly you get the patent waiver.
Ah, bummer. I forgot about that, sorry.
you had: ```var species = getSpecies;``` changed it to: ```var species = getSpecies();``` https://codepen.io/Mikeysauce/pen/yzYyBR
/u/spacejack2114 replied to mine, that you can use `white-space: pre-wrap` style so that the browser handles any ASCI control character in the text. e.g. new line, tab, etc. I forgot that style, sorry.
Unless you compete with Facebook. In which case it's probably a good idea to stay as far away from this shitshow as possible. 
Removing the patents clause is the LAST thing you want. Consider: by simply removing the clause, now there is *absolutely no reassurance* as to what happens if you infringe on their hypothetical React patents. This is even worse. What you should be petitioning for is a more permissive, non-terminating waiver. The amount of people on both sides who have absolutely zero idea what the clause actually means, or how patents even work, is insanity. It is absolutely stunning how much people are taking about this issue without actually doing any sort of research. I still see hundreds of comments a week with people going on about how “you can’t use React if you compete with Facebook” - a complete myth dispelled by Facebook themselves. To see how quickly things have descended into an echo chamber of misinformation is so depressing.
Yeah, I tried that as well, but it just caused the entire code to crash - there should be another alert after the first one, but instead the entire function ends. Maybe the issue is just a second error though. EDIT: Ok, I found the problem - I forgot to add the word 'Name' for the GetElementsByTagName command. I guess I just got too transifxed by the brackets thing and missed it. Anyway, thanks for giving it a fresh set of eyes - I knew it'd be something stupid XD For future reference though, when is it appropiate not to add brackets when calling a function? The script seems to crash if you add them to the *init* function, but I thought that was just because it doesn't have any arguments. Is the reason something different?
What does competing with Facebook have to do with *anything*? Also, what "shitshow"? This clause has been around for literally years without incident - it's only within the past month or so that the internet has collectively decided to freak out about it. Let me quote [Heather Meeker](https://blog.fossa.io/dont-over-react-to-the-facebook-patents-license-629f708f2221) on this: &gt; Unless a company decides to sue Facebook (or accuse its products), the termination trigger has no actual effect. If you want to fling patent claims at a company that developed and released a great piece of code, removing the code from your business seems like a reasonable price to pay. To reiterate: unless your company actually HAS patents and wants to be able to sue Facebook - a process that costs *millions* just to even get the ball rolling - the patents clause is completely irrelevant. The idea that Facebook can somehow revoke your license to use React at any time is factually incorrect. Unless you're Google, Apple, Yahoo, or Microsoft (all of whom use React btw), suing Facebook is a do-or-die scenario. At that point, some front-end view framework is the *least of your worries*.
Alas, he wasn't complete, just half a head.
So much code left out that I can't help you 
The "shitshow" reference was mostly a joke. I agree that this issue has been blown way out of proportion. I was primarily trying to communicate my personal preferences as far as open source projects go. Since I'm not an attorney, I find it difficult to evaluate the validity of Meeker's statements regarding what Facebook can and can't do with the clauses they've injected into the React license. As a result, I use frameworks that do not include such injections. That might be an extreme reaction, but if there is any ambiguity with what Facebook can and cannot do with their license, I'll continue to avoid their platforms like the plague. I wouldn't trust Facebook as far as I could throw them (I don't work out much, so this isn't very far). 
The brackets invoke the function, so for example if you're creating an event listener which you want to trigger a pre defined function, you would omit the brackets. e.g. ```window.addEventListener('click', someFunc)``` But in your case, you wanted the species variable to be the return value of your ```getspecies()``` function, so you wanted to invoke it immediately to get the return value. I hope this makes sense, I'm still fairly new-ish to JavaScript myself, and I'm sure others with more experience can clarify. 
Every time I see this mentioned anywhere I want to try it out but come to realize that the documentation and the examples are still lacking and off-putting. Sure, I am a still beginner but hell, even React was easier to pick up than this. Edit: I actually managed to do something with it this time. One of the most annoying thing for me was that there was no code splitting example so that's what I did [here](https://www.webpackbin.com/bins/-Ku8vTen1yHWD6EDu-kO).
&gt; To minimize concepts while still remaining on par with what others can do is the mission that I embarked on when I started the project. It is a great that it is a mission for this project, but right now it is far away from its goals, and by the time it will be on par, it won't be 1kb. Covering major use cases is the easiest part when building UI library, dealing with small details is the hardest part and hyperapp can't even assign value for input fields properly to make sure that it will have consistent behavior in all browsers. &gt; Please share what is that have you been doing for a long time. Working on a design and implementation of UI libraries.
Oh ok, so you'd only remove the brackets for a delayed function called via an event handle?
There's more than one javascript subreddit 0.0 I'll have to hit that one up next time!
Not only in that case, but just try to think of it like () = immediate invocation and you should be ok
I am always eager to improve the docs and examples, if you have a specific request or something you'd like to see I'd love to work on it. I'm all ears.
Copy of https://github.com/vuejs/awesome-vue
Dealing with the small details is the hardest part and we are dealing with them. What is it exactly that didn't work for you? &gt; can't even assign value for input fields properly to make sure that it will have consistent behavior in all browsers Do you have an example of that? Input fields have been working great since day one. 
Mithril core contributor here In terms of capabilities, Mithril is comparable to a DOM-only React (without PropTypes) + React Router + a Fetch polyfill (and it comes with an optional stream lib). There are good TypeScript typings that support declaring types for the attrs (~props in Mithril lingo) and the state though, to make up for the lack of PropTypes. AFAIK Mithril has a better keyed diff engine, stateful components and hooks that fire both before and after the view is rendered. The Hyper state management is very well though out, and Mithril doesn't have anything like that builtin but [it can be emulated](https://medium.com/@vdsabev/exploring-unidirectional-components-in-mithril-part-1-hyperapp-e33ce35a224). I really appreciate the way /u/jbucaran managed to integrate the state and DOM updates with so little code.
Yes! This sub is out of control!
I read that article a few weeks ago. Great writeup. With that approach you still end up without a single state tree, so it doesn't work for me. The author said he failed to implement a fractal architecture, and I can't blame him, but we have come a long way since the project was first released when none of these ideas had been explored yet. [Fractal state in a single state atom can be done](https://gist.github.com/jbucaran/a25f0f8fedd3f88722fcf8dd0820229a). 
If you are building Virtual DOM based UI library, it would be a good idea to read React sources, you'll learn alot, for example how to deal with input values: https://github.com/facebook/react/blob/master/src/renderers/dom/stack/client/wrappers/ReactDOMInput.js I really don't want to go through every flaw in your library, because many things aren't necessary when you targeting a different audience and there is nothing wrong with it. I just thought that it was intentional decision in your library design.
You don't have to go through every flaw, I would be more than happy if you could just point out a single example where Hyperapp failed to do whatever was you were doing. You seem to be available since you are engaging in this discussion, so why can't you just say what was exactly the problem you had? If there is genuinely a bug or we are lacking somewhere, I would like to work on it right away.
&gt; I would be more than happy if you could point out a single example where hyperapp failed to do what you expected. https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/renderers/dom/stack/client/wrappers/ReactDOMInput.js#L60-L69
Can you make a pen with the problem? [Here is a template](https://codepen.io/hyperapp/pen/Qdwpxy).
Well how about routing, server side rendering or component life-cycle? If such things even exists in Hyperapp.
- [Router](https://github.com/hyperapp/router/) and [live example](http://hyperapp-router.surge.sh/). - [Hydration](https://github.com/hyperapp/hyperapp/blob/master/docs/hydration.md) of pre-rendered HTML. - [Component lifecycle a.k.a VDOM events](https://github.com/hyperapp/hyperapp/blob/master/docs/vdom-events.md#vdom-events).
Cheers! I'll take a look some time later.
MSSQL is certainly performant enough. I used it in production on multiple apps on Azure and it handled any load we've had without any issue. Although writing raw SQL is certainly not my preffered way of working with a SQL database. I wholeheartedly recommend using [Objection.js](https://github.com/Vincit/objection.js). [Knex](http://knexjs.org/) query builder is just awesome. One tiny benefit is that you can potentially swap your DB very easily in the future. Nicer benefit is that while writing knex queries you get autocompletion based on typescript typings which helps tremendously.
if you constantly mention windows and mac, and not linux... and it is an article about cross platform...
Blatant blogspam.
https://github.com/getify/You-Dont-Know-JS
It's odd isn't it? This absolute obsession with filesize as though that's the number one thing anyone is after? It's not. Authors would be better positioned to show us how it makes our lives easier. With minification, gzip, CDN's etc filesize isn't the number one thing I'm looking for. 
&gt; Open source companies don’t want litigation for improvements to their underlying software Are there examples of this happening? someone grabbing a mit pattented code or something, adding features and blocking the original author from adding this features?
Please remove this, your blog and your account. Stop stealing things.
You do you man. We're lucky to have so many good view frameworks to choose from. Although here's a nugget of thought: by deciding to avoid React, then you're using other frameworks which may violate Facebook's patents, with no clause to protect you. It's kind of a funny situation: the more evil you think Facebook is &amp; the more you think they have the capability to wage patent warfare, then the more you should actually lean towards React in order to rely on the explicit protections provided by the clause. You mentioned that you like Angular; interestingly, the current version of the React patent clause was developed through consultation with Google!
One solution: Use a tag manager and a data layer. 
It's not about cross platform. It's about the writer's experience with the toolset. 
Weird. Now it worked right away. Thanks. 
Are these printed physically at all?
The best thing about this is that it's so small you can literally read the source and understand what's going on pretty well within half an hour. Question for u/jbucaran - are there any performance benchmarks available to compare to other view libraries?
if it isn't also about cross platform why do mac and windows get repeatedly mentioned ?!?! your statement is self-contradictory.
Because that's what the writer actually worked with? 
/u/AndyJessop Thanks, sure, the most popular nowadays is js-framework-benchmark and Hyperapp is there. - [rawgit.com/krausest/js-framework-benchmark](https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html)
PS: Please note that the thumbnail is different from the original output.
Me neither, but it's awesome I can read the source and understand what's going on in just a few hours. IMO a normal person can't do that with most other frameworks. So, what are the things you look for on a JS view framework? :)
Does your array work? With string based keys, this would actually be an object - represented in JSON as: { "sone ikke valgt": 0, "sone 1": 900, "sone 2": 950, "sone 3": 1000, "sone 4": 1050 } If you ever need to see a JSON representation of some JavaScript object, use `JSON.stringify(myObject, null, '\t')`.
Isn't this exactly why Stack Overflow exists? Plus a strong Stack Overflow profile (yes, asking good questions helps your profile!) is a great resume builder. Not sure you can say the same for a lot of Reddit karma.
Thank you so much for your answer! I am using the array to assign a value to a function based upon what value the user have selected. The function looks like this: function getSonePris() { var sonePris; var theForm = document.forms["fastpris"]; var selectedSone = theForm.elements["sone"]; sonePris = /* this is where the array is used: */ sone_pris[selectedSone.value]; return sonePris; } Can I give the json object a name like "sone_pris", so that I can access the array in a similar manner? 
Yes but what are you giving up for the opportunity to understand the framework in half an hour? What I look for in a library/framework is to be saved from thinking about certain problems and know they are solved. I want them to abstract complexity away from me. I would gladly take more abstraction at the cost of understanding. I like to know WHAT it's doing, not HOW.
&gt; Yes but what are you giving up for the opportunity to understand the framework in half an hour? Sounds like encouragement to me. --- I like to know what is doing as well as how, that's why I built it. To understand _how_ they work and to choose just the right amount of _what_ that I like.
Yes, they're on Amazon in the UK. I don't know where you are but have a look and you'll see them.
Arrays are designed to work with numeric indexes. If you're using non-numeric keys, then you should be using a plain object instead of an array. 
It's still a little hard for me to see what's going on. If you could make a JSfiddle or equivalent where the issue is reproduced that would help us debug this. But have you tried or can you apply the onclick right after the getElement call?
I added a [jsfiddle link](https://jsfiddle.net/6zj02168/) I have tried the onclick after the getElement, but it still only runs the last object in the array.
Thank you for the resource.
[MDN Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide) [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference) The [Rauschmayer books](http://exploringjs.com/)
I made a generative art generator &amp; library: Demo: https://scottyfillups.github.io/vizplex/ NPM: https://www.npmjs.com/package/vizplex Edit: Formatting. 
You'll have to write you own code or function for that. Although jQuery does simplifies coding in a way, jQuery is a library for generalizing DOM manipulation dues to different implementations by web browser engines. It doesn't add new DOM functionality.
I think it depends on what you want out of your framework. Personally I love that this is tiny, unobtrusive and extremely easy to understand. It's not for everyone, of course, but just because *you* don't want it, don't assume that it's wrong or an odd obsession. 
Thanks for the link! I've been looking for something that isn't react or angular, so I was probably going to end up going with Vue. I'm certainly willing to give this a try though; This does everything I need and nothing I don't, and that's important. I do love Typescript though, so I'm going to wait until your typings are completed. I read a good bit last night and can appreciate what's taking so long. Thanks again!
No, surprisingly. Having a job proves to emplyers you're hirable, especially with your recent entry into the industry. Consider: I found a job within about two weeks of searching while keeping my job. I have two friends who quit their jobs to find a new one. They both took over two months to get hired.
That's real neat, I've been wanting to try something similar with Vue, would you wanna explain how it works? Are you loading from the official Pokemon API as JSON data?
You're probably trying to refer to `i` after the loop has completed. You need to capture the current value in a closure. https://stackoverflow.com/questions/750486/javascript-closure-inside-loops-simple-practical-example
So I need to create a function that creates the onclick portion for each button, create a loop that inserts the onclick functions into an array that holds functions, then create a loop that will hopefully call any button that is pressed?
I started creating a tiny next-gen tweening library called Liike: https://liike.js.org 😎
Yes, and then you could use redux beacon to push to the data layer easily https://github.com/rangle/redux-beacon
Thank you!
Can you explain what you mean by "drawing Facebook's ire"? Or are you just spreading more FUD?
Found this string in the page's source code t="http://pokeapi.co/api/v2/pokemon/"+this.pokeid; this.axios.get(t).then(function(t){ for(var n=[],a=0;a&lt;t.data.stats.length;a++) ... } } That should help answer your question First, the url will tell you where the data is coming from. Second, by calling the api yourself, you can examine the response and find that it is, indeed, json. Another way to find this out would be to open up your browser's dev tools, and [head to the network tab](https://i.imgur.com/hcIRWTF.png). Here you can see any external api calls the site is using, and examing the headers, responses, and other information about them
I want those things TOO. What I'm saying is that for anyone building something, you have to help people see where the real value is in using it. Show us why it solves X problem. A fixation on file size is not really explaining anything. 
If the source code is approachable enough that you can understand it on the first try and keep all of its functionality in your head at once, then you already know everything it can do and where there are gaps in functionality you would need to implement for your use cases.
Sounds like you found yourself a weekend project :) 
Please see /r/learnjavascript for JavaScript help. See also [the MDN's canvas tutorial](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial).
https://github.com/bpesquet/thejsway Disclaimer: i'm the author.
A function denoted with the `async` keyword returns a promise. `await` can be used to "wait" for promises (`await` does not work with callback-style functions, only promises). async function getUser() { const user = await fetch('/user'); return user; } const userPromise = getUser(); userPromise.then(...); The key here is that `fetch` returns a promise. If it was a callback-style function, this would not work. 
Wow, using Pokemon as a theme is a great idea for new projects where you want to learn a framework and just need some data to display. Way better than another boring todo-list or fake-employee-database!
&gt; https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/renderers/dom/stack/client/wrappers/ReactDOMInput.js#L60-L69 Keep in mind that a lot of the complexity in your example (and other parts of React) are the synthetic events for supporting legacy IE 8/9 under a single events system. Hyperapp targets IE 10+
Very cool! How long did it take you from start to finish? And do you have it on github?
In the same amount of time it took me to read 5% of the React source I was able to understand the entirety of Hyperapp, and make proposals on API improvements for core. It turns out that the Hyperapp API happens to be extremely extensible, and most functionality you can dream up that's not in core can be added via [mixins](https://github.com/hyperapp/hyperapp/blob/master/docs/mixins.md).
According to these pages: * https://kangax.github.io/compat-table/es6/ * https://kangax.github.io/compat-table/es2016plus/ it would appear that: * tail calls aren't implemented at all, not even in version 63 * currently the only effect of the enable-javascript-harmony flag is to turn on "template literal revision" from the 2018 spec.
&gt; The best thing about this is that it's so small you can literally read the source and understand what's going on pretty well within half an hour. +1 to this. If you spend the same effort trying to understand React+ReactDOM+Redux+ReduxThunk, you'll probably think there's Voodoo magic powering them. By being so much more approachable we can get contributions from a much larger community, which I believe will lead to a healthy ecosystem.
Why use canvas? Make the images be pngs and then just use css positioning to place chosen images in front of each other.
Actually it is in chrome 60 via chrome --jsflags="--harmony-tail-call" something like that. I run GNU Guile using that
Ok, sorry for posting the file size on the title of the post. I will make sure not to mention this feature of the framework in the future.
Will do, sorry for posting in the wrong subreddit and I appreciate the help :D
Sweet! Try it out and let us know what you think. There's a Slack where you talk to us and there's even a subreddit where you can share what you built, ask questions or post whatever feedback you have: - [slack](https://hyperappjs.herokuapp.com) - https://www.reddit.com/r/Hyperapp.
I want the result that users see to be one image, so that they can save the creation as one single image rather than being able to open/save the topmost transparent layer
It's definitely a scoping issue akin to: https://stackoverflow.com/questions/15860683/onclick-event-in-a-for-loop And here is what I was able to get to work: https://jsfiddle.net/6dfhmtq0/
In https://kangax.github.io/compat-table/es6/ , if you click on the red 0/2 box, it expands to show "No" "No" for direct recursion and mutual recursion. If you look at old versions of the same page in the wayback machine (Internet archive), [as recently as of late August](https://web.archive.org/web/20170823205615/https://kangax.github.io/compat-table/es6/), it was flag-enabled. So that flag may have been removed. And now version 61 is the stable version.
There is a perfect explanation why input value will be incorrect under certain circumstances, and if you think that this code https://github.com/hyperapp/hyperapp/blob/3ab5a1e483fc0520447b3280c52ec67c84f66ff1/src/app.js#L124-L126 covers this edge cases, then I really don't know what else to say.
Yes like he already said, I'm requesting the data from PokeAPI with Axios and from there i just build my own Object with the Json i got and pass it down to the components in vue Edit: the chart is generated by chart.js and vue-charts, which is a wrapper for vue. I think it was a nice project to learn about vue templates, components and ajax calls!
Thank you! I think it took two days for the whole thing, but i had to learn chart.js a couple days before haha Edit: not on github yet, i can pm you the link when i get to upload it :)
Short answer: Yes. According to your description this job is helping you neither in the short term or long term. Your skills aren't being utilized, much less making you any better. After you leave(and you will) you will wonder why you stayed as long as you did. Life's too short to spend at a job you hate. Ditch it immediately.
I would appreciate that, as I'm looking to learn Vue.js myself. 
"JavaScript: The Good Parts" by Douglas Crockford is a very good introduction to the language, particularly useful if you're a programmer coming from another language who needs to quickly learn about JavaScript. "JavaScript: The Definitive Guide" by David Flanagan is a reference book which you *must* eventually read through at least once if you want to use JS professionally.
I'm already using the integrated terminal (thanks for the tip anyways :), but it just does not provide a good user experience. Imagine you were forced to use ESLint in console mode instead of integrating its output into the code editor itself. Well, I think I'll code that kind of plugin myself..
We get it
How did it compare to other front end frameworks you've used? 
I've used hyperapp at work for some time and is absolutely amazing!
Thanks, your jfiddle example helped me solve my issue. For some reason during the loop for the click, it didn't seem like the var btnId array was necessary, probably due to async issues where as let seems to work better. Only the .innerHTML line and the let btns line was needed for my code after simplifying. Thanks for the information!
Here ya go, bud. https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage
You can mutate the date object and it will calculate it for you. var halfAnHourAgo = new Date(); halfAnHourAgo.setMinutes(halfAnHourAgo.getMinutes() - 30); Now the `halfAnHourAgo` date object will be 30 minutes in the past - you can call getMinutes() again to get the value. This works with the other values - if you have a date with 1 January, and use "d.setDate(d.getDate() - 1)", it will go to 31 December, etc.
The page source code is most likely transpiled.
this should work var today = new Date(); today.setMonth(d.getMonth()+1); today.setMinutes(d.getMinutes()-30); var dd = ... and then you do the same as before. there are some nice libraries such as moment.js to simplify working with dates and differences 
Make sure you remove your console.logs before publishing! console.log(this.displayDex); For your next step, you might want to handle invalid text entry a little more eloquently than just a 404 in the developer log. Awesome work!
Can you give some example IDs? Typed in some random numbers, but didn't work. No idea about Pokemon, but would like to try your work.
'You Don't Know JS' series by Kyle Simpson 'JavaScript/JQUERY' by Jon Ducket
This is kind of exactly the precipice i'm at in my own programming. Could someone show me the light? Let me guess: You use async/await to do a HTTP GET call to the api, and then once the request comes in you use object.map to create an object out of the response, and then you pass a ref of that object to set it into your own component's state? Do you do that all in the scope of the component? In the react event listener's function eg "onDrawButtonClick:"? I have a feeling my problem lies in the *way i'm thinking of* this fairly standard procedure. I'm just now attempting to use a front end framework and a recreational api. I'm all good with my javascript, and react is making a lot of sense to me with the more I read. Could someone help me bridge this gap and explain how this http get/state set procedure SHOULD work in the concept of ES6 best practice and React? I'm trying to make a simple draw poker game with React and a deck of cards API that returns nice tidy json. Simple enough, right? What's the explain like I'm a N00b explanation for how to best request data from a JSON API and then set that data to be a component's state? Is that API going to be fast enough for video poker? Don't I need like Express for that shit? How long will returning the request take on a regular network? Milliseconds? Should I forgo the API and just try to program in vanilla card deck logic myself? Feel like i'm missing a piece and i'm not sure what to expect. Is this piece AJAX? What resource will best help me fill in this crack?
Sweet! How did it go? and are you still using it? What did you find lacking and would you like to see in the future?
This is really cool! Maybe you could throw in an error message for bad inputs instead of just leaving the page as is?
It sounds like something like this exists for [jest](https://github.com/orta/vscode-jest). I would think something similar exists for mocha?
IDs start at 1
try - pikachu, squirtle
And you can also integrate a to-do list of all the Pokemon you've caught. It's a mastapeece! 
I think it's worrying that you aren't able to do this with basic arithmetic, maybe work on that
Is there any way to have this produce higher-fidelity versions of the meshes? I downloaded a few that were produced from pretty high quality pictures, but even though the meshes were high-poly, they had a very “blocky” look to them. I haven’t taken a look at the code yet, but would this be something doable locally? Edit: There also isn’t an option to download the texture it generates for them, did anyone figure out how to do this, or is that also something I would need to do locally? Edit 2: Damn, looks like you need a CUDA-capable GPU, so running locally for me is out the window. Help is still appreciated, though!
Just a thought but work on handling names too? Create a translation key and the value for the name is the ID number. I love being able to see the stats in the chart. Great work!!!
You can any js code in this without a xss concern
Awesome! Everything from the demo to the docs was well executed. 
Thanks! 👍 It's still work in progress (actually just started yesterday), so I will add more demos, features, docs, etc.. 😉
It's not really a feature though, is it. It's just a fact about the codebase.
Hi /u/joyPhase, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/PKO_AU, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/uberKingTJ, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/stiros, For javascript help, please visit /r/LearnJavascript. Thank you!
He's not asking a question about arithmetic; he's asking about date mathematics. If he's never worked with the concept before, it can be confounding, especially given that [date calculations are notoriously difficult](http://www.atomicbird.com/blog/date-math-is-hard-lets-do-it-tomorrow).
Hi /u/Pixie1001, For javascript help, please visit /r/LearnJavascript. Thank you!
Have a look at wallaby https://wallabyjs.com/
You can accomplish currying (and other FP concepts) in OO languages. Here's an example in C#. https://dotnetfiddle.net/9fC85u
No victini....
I think the missing piece of the puzzle for you might be vuex (if using Vue) or redux (on react). In Vue your components often have computed properties derived from the flux state (vuex). You dispatch an action (like getPokedex) and vuex would perform the API call, and commit the data mutation to the vuex state... which updates the computed property in your component which causes it to trigger a DOM render. It seems counter intuitive, but it is great. The joy of one way data binding 🤓
A small code size is a major feature if your audience uses mobile phones.
Agreed, about to do this myself.
Pikachu is 25, for an example. Mewtwo is 150.
We have two repos, one for API and UI and each had their own types. We had talked at one point about having a third repo just for the types so we didn't have to try keep all the types in sync. But if you're using something like Swagger that is a decent option.
Code example is a little too similar to this recent FunFunFunction episode: https://youtu.be/sD94szvFqGw?t=532 Not that it's such a original example in the first place, so I guess it could be a coincidence, but still seemed a little weird. **Edit**: The article actually acknowledges that this is the source of inspiration. Not sure if this acknowledgement was there from the beginning and I just missed it, or if was added later.
Thanks!
Thanks I'll check it out!
Thanks. I'm not a programmer but will look into first one.
In response to the general question of: "What does React have that Hyperapp doesn't, to let Hyperapp be so small?" - Any framework will make a tradeoff of what it does for you, and what it leaves up to you. It's not *only* that Hyperapp is small -- it's that it's *simple*. You can just pick it up and go -- no CLI-tool to scaffold out a project, no bundlers necessary. Essentially zero boilerplate. Just start making your app. I hear some say: "Well that's all well and good, but how far can you take it before it starts getting in your way? Before you start wishing you wrote your app in something else?" So far I haven't encountered anything you *can't* do in Hyperapp (with the exception of supporting legacy browsers). (Disclaimer: my only previous experience with any of the current "big" frameworks is with Vue.js -- and at a hobbyist level) This is where the simplicity tradeoff comes into play: Every time I've encountered something Hyperapp doesn't do built-in, it's been a cinch to work in a custom solution. Every time Hyperapp did something I didn't understand or expect, five minutes of looking at the source has been enough to figure out my mistake. In contrast, similar situations with Vue or Knockout have had me either give up or use a cookie-cutter solution that's only *almost* what I was trying to do. So, if I were to start on a big, complex, business critical app today, I would actually be *more* confident doing it in Hyperapp, than in any of the other bigger, more complex frameworks -- despite how young it is. The last big, complex, business-critical app I was involved in was written in Backbone (yeah -- it's been a while ;) ) In a way, I kind of see Hyperapp as the Backbone of 2017. When we selected Backbone for the project, it was for all the same reasons above. It's not sexy, but tiny, straightforward and unmagical. Customizing behavior is trivial. That app is still going strong, still under active development. Although the current devs sometimes have wished for some more modern constructs, the framework itself has never been an impediment.
I actually needed one of these for a project of mine. I'll take a look :D
Why do people who write guides like this barely seem to grasp the basic concepts themselves? &gt; let x = 'abc'; &gt; let y = x; &gt; console.log(x); //prints 'abc' &gt; console.log(y); //prints 'abc' &gt; In the example above, both x &amp; y contain the value abc but they have separate copies of it. Changing one won't affect the other. You can't change strings, they are immutable. You can assign a new value to a variable, which is what you actually do: &gt; y = 'xyz'; &gt; console.log(x); //prints 'abc' &gt; console.log(y); //prints 'xyz' This shows absolutely nothing. Assigning a new value to y would never change x, regardless of its type. You don't seem to know the difference between assignment and mutation.
`TDD` (Test Driven Development) Is an amazing add-on, it should do most of what you describe. It just won't highlight failing lines in the file itself. Link: https://marketplace.visualstudio.com/items?itemName=prashaantt.node-tdd **But**, if you use Jest, this is what you're looking for. It highlights failing tests alongside the code, and watches for file changes before running. Link: https://github.com/orta/vscode-jest I hope this helps! Cheers
That's neat! There has been some recent interest around native function composition in JavaScript that you might find interesting: [ESDiscuss Thread: Native Function Composition](https://esdiscuss.org/topic/native-function-composition) [Strawman Proposal](https://github.com/TheNavigateur/proposal-pipeline-operator-for-function-composition).
Try any number between 1 and 700
Thanks! Names actually work too but they have to be written all lower case. Definitely will look into that nonetheless.
You got me haha forgot about that one. Error handling might be the next thing I'm tackling, thanks for the heads up.
Just rewrite later. Use react now
Honestly, not being an attorney, it's hard for me to be certain regarding the possible applications of Facebook's clauses in this license. Since they tend to be litigious, I stay away from their software. I admit that I may be overestimating the potential issues with this framework, but since there are alternatives that don't contain such a risk, why would you take the chance? I admit that I may be unnecessarily concerned though, to be honest.
Help Me /r
Not that far in the right direction. I've wanted to use createjs a few times, but i always use alternatives that I can easily import.
Yes, quit and find something else. Life is too short to work somewhere that doesn't fit.
Hi /u/thr0binh00d, For javascript help, please visit /r/LearnJavascript. Thank you!
I didn't arrive at that number by sheer luck. The most challenging aspect of building Hyperapp has always been fixing bugs and adding new features while maintaining the bundle size in check.
I consider this to be Malware. Not that `coin-hive` is inherently malicious. However pinning CPU usage *without consent* while a tab is in the background is an abuse of the users trust.
Very nice. 
Very nice, I like it!
I must be getting old, I remember when there was only 151 Pokemon.
TPB is that you?
Because I had no idea what this was and would have liked more info before clicking through. "This is a tool to check if your files consider your .editorconfig. Most tools - like linters for example - only test one filetype and need an extra configuration. This tool only needs your editorconfig to check all files." Neat.
I'm a simple man. I see Aurelia and I upvote. Bonus for the good content.
Sweeeeeet! 
Reduce all the code bloat of boilerplate document.getElementById's ! https://codepen.io/SarahC/pen/PJPmzx 
It's looking good. =)
why can't I get it working? I entered 25 and press the button but it shows nothing. in the console log it shows XMLHttpRequest cannot load http://pokeapi.co/api/v2/pokemon/25. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://www.angelosweb.bplaced.net' is therefore not allowed access. The response had HTTP status code 403.
Have you tried another ID? I'm just guessing here, but the api is limited to 300 requests of the same pokemon-id per ip address a day.
**[Soundtracking](https://jew.ski/soundtracking/)** A little app for helping me build a travel playlist. I tried using Firebase and it was pretty easy to get setup. I would probably use it again for one-off projects where data integrity/security doesn't matter.
sure I have. if I access the API directly (http://pokeapi.co/api/v2/pokemon/25/), I can see the JSON result just fine, but not from your web page. Tried with another browser and still the same error. weird :(
That was over 20 years ago, of course there's more now :P
Today I made a canvas clock using Composi. Demo: https://codepen.io/rbiggs/pen/ZXbpVE?editors=0110 Composi: https://github.com/composor/composi I usually do SVG. This example was based on a React example that I converted to Composi. Conversion was pretty straightforward. Maybe it's a bit gaudy.
It depends on what's being tested. API-specific tests belong with the API. Client tests belong with the client. 
Nothing. This algorithm only works for one picture. What you could do is take all the 3d faces resulting from multiple pictures and interpolate the 3d models. 
Hi /u/stevmachine, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
This. Also, we keep end to end tests in a third repository
Just as browsers now have icons for tabs playing music, this will be the origin of an icon for high processing usage. "This tab would like to use more than 25% CPU." * Allow * Block
Well I just read how it sort of works with the single image and there's some assumptions that the software uses.
Are you saying that you'd just have two separate sets of acceptance tests?
I would love to have a look at the repo too if possible, great work OP - looks really nice. 
I think we know whose SiteKey is used in that example code.
Why tho?
Thank you! 👍
Worryingly I think it's the news that Pirate Bay uses Javascript to mine crypto on visitor's computers without them even needing to download anything. Lots of people are just finding out that's possible and could be thinking they should get in on it too.
Perfect, have fun! 😉
494
&gt;over 20 years ago That can't possibly be... *mother of god*. 
If you are using the Vue-CLI webpack boilerplate, you can automatically remove console calls when building
The splash is very nice. Are animations tricky in Vue? 
On mobile, for Mew, the info bubble when I click on the speed bar appears under the bar, but all the other info bubbles appear to the right. 
Would love a github link ! Really nice. Made the animations yourself ? :)
Is that chart.js?
Yes, they are actually pure css :)
Yup
Very nice ! Can't wait to see :)
I tried this quick code in the console while my origin was on http://www.angelosweb.bplaced.net : function reqListener () { console.log(this.responseText); } var oReq = new XMLHttpRequest(); oReq.addEventListener("load", reqListener); oReq.open("GET", "http://pokeapi.co/api/v2/pokemon/25/"); oReq.send(); And the response header showed 'Access-Control-Allow-Origin': *, indicating that the PokeAPI server (as necessary) has configured their server to add that response header. So the servers should be able to communicate with each other just fine (indeed, I press the button and it's working). ... So it seems more like it might be a browser-level issue, or the server only adds the response header under some condition (very unlikely; not even sure of the feasibility). Are all your web browsers ancient?
Well all the Data sits in that Json, I'm not sure what you mean with preprocessing. You can look it up, google Pokeapi.
I know Java. That means Javascript is easy to learn yes?
Managed to find a workaround by placing the editable div on top of another div and adding some extra css. Hope this helps. https://jsfiddle.net/GingerBunny/n4sxc774/
What cunts our species is, programming such malicious shit. 
It's only 17 years ago that gold/silver made it out of Japan, if that helps. 
My first was blue version, which was 19 years ago for the NA release.
My point being that yes, (roughly) 20 years ago there were 151 Pokémon, but that was still the case until the next game came out a few years later. So if you look at it that way, you can feel a bit younger :)
I'm using the latest chrome : https://imgur.com/a/21KQ1
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/5jHRzUZ.jpg ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dn4dqy0) 
Put your break condition in an if around the send() call
Huh. Same browser and version as mine then, so I'm stumped. If you run my code snippet with OP's website open, does it succeed?
Thanks :)
Please provide more context
This is the way JSPM tried to go-instead of bundling, just serve a manifest so that there is no need for bundling. Utilize http2 to load multiple files at once. I recommend this talk: https://www.youtube.com/watch?v=szJjsduHBQQ I am afraid we're never going to get rid of bundling. Which is unfortunate, because all of those bundles use common libraries and clients are downloading them over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, over, again.
I hope Adblockers will quickly adapt to block this maleware too.
Yes. They test two different parts of your codebase. Why should they be together?
nope, it's the same error, but I found something interesting. When I inspect the request in the network tab, it shows the cloudflare protection page : https://i.imgur.com/FHPxCfd.jpg is this the cause? because obviously cloudflare's page wouldn't have access-control set to all right?
There is no loop. &gt; The problem is it detects it's own message and keeps repeating it. There should be a way to tell who sent that message. Check if you're the sender.
Well this was fun :) So a simple example to get you started. Would need to be extended to handle breaking out of `blue-text` for back/spaces (this is what `checked` would be used for). https://jsfiddle.net/64s7h5ny/16/ Let me know if you have any issues/questions.
There are two ways. If you can modify the message add a variable to the message indicating that this was already processed by you and if you get it back again with that variable there set don't send the message. If you can't modify the message keep a last message variable outside of this call and set it to the last message that you send. If you then immediately get that message again you know it's a repeat and you don't send it. This way is a heuristic that could trip you up but these are your options.
You may be onto something - if the PokeAPI website is using a load balancer, it could well be that they've misconfigured one of the redirects on the load balancer, and thus we may be getting redirected to different places. One of the servers involved in a redirect may not be adding the 'Access-Control-Allow-Origin: *' header. I just copied the cURL made by Chrome (and added `-v -s -o /dev/null` to get the headers and silence the body) and got this: curl 'http://pokeapi.co/api/v2/pokemon/25/' -H 'Pragma: no-cache' -H 'Origin: http://www.angelosweb.bplaced.net' -H 'Accept-Encoding: gzip, deflate' -H 'Accept-Language: en-US,en;q=0.8,ja;q=0.6' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36' -H 'Accept: */*' -H 'Cache-Control: no-cache' -H 'Referer: http://www.angelosweb.bplaced.net/projects/vuedex/' -H 'Connection: keep-alive' -H 'DNT: 1' --compressed -v -s -o /dev/null * Trying 104.18.58.143... * TCP_NODELAY set * Connected to pokeapi.co (104.18.58.143) port 80 (#0) &gt; GET /api/v2/pokemon/25/ HTTP/1.1 &gt; Host: pokeapi.co &gt; Pragma: no-cache &gt; Origin: http://www.angelosweb.bplaced.net &gt; Accept-Encoding: gzip, deflate &gt; Accept-Language: en-US,en;q=0.8,ja;q=0.6 &gt; User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36 &gt; Accept: */* &gt; Cache-Control: no-cache &gt; Referer: http://www.angelosweb.bplaced.net/projects/vuedex/ &gt; Connection: keep-alive &gt; DNT: 1 &gt; &lt; HTTP/1.1 200 OK &lt; Date: Sun, 17 Sep 2017 13:23:28 GMT &lt; Content-Type: application/json &lt; Transfer-Encoding: chunked &lt; Connection: keep-alive &lt; Set-Cookie: __cfduid=d48d7ec18a971ff1e554b0fb0dbf007651505654601; expires=Mon, 17-Sep-18 13:23:21 GMT; path=/; domain=.pokeapi.co; HttpOnly &lt; Vary: Accept-Encoding &lt; Vary: Cookie &lt; X-Frame-Options: SAMEORIGIN &lt; Access-Control-Allow-Origin: * &lt; Allow: GET, HEAD, OPTIONS &lt; X-XSS-Protection: 1; mode=block &lt; Content-Encoding: gzip &lt; Server: cloudflare-nginx &lt; CF-RAY: 39fc612ad57e0a6c-LHR &lt; Doesn't look like a redirect is happening though (HTTP status 200 rather than 3XX), so maybe no load balancer is involved. Not sure what capacity Cloudflare is being used for, then. Would be interesting to compare `traceroute` outputs to see if we're both taking different paths during the API call, but I can't get the command working (it says 'unknown host'). Disclaimer: reaching the edge of my expertise here. I've wrangled with CORS before, but these symptoms don't fit problems I've encountered in the past.
So easy you don't even have to learn it! /s
So are downvote bots. 
Googling `message.channel.send` shows this is most likely Discord.JS. Try something like `if (message.author === this.user) return;` No idea how Discord.JS works, so I tried to adapt from my Discord.py knowledge. Also, try sending this in the Discord API server. (Google it for the invite) 
A bit of an ugly hack, this will make `message.content` false and immutable so that the if-condition will never be met. Object.defineProperty(message, 'content', { writable: false, value: false }); 
This is exactly how I learned Kotlin!
one can do both
besides, superficial beginner was contradicting me based on obviously 0 experience, needed a shock into humility, first step to learning. But thank you so much for your contribution, really helpful.
This is discord.js, isn't it? Check `message.author.id` (or maybe `user.id`?) against the User ID of your bot.
Having done this already on another project, I highly recommend using codemirror with markText (which allows you to supply a dom element to replace a selection of text, piece of cake. I'm mobile right now, but if you'd like an example, I can post one later. 
Hahahah it's malware, but I will consider using this technique.
I'll also add this: saying "json easy to store muh" is disrespecting decades of DB researchers, if I'm a "smug dick", parent is magnitudes worse
Is it worth to have that feeling that you will be forced to rewrite everything you made someday? I personally feel that facebook will steal some technologies because this patent, but even without this believe, I don't think building with React instead of Vue, inferno, riot and many other good technologies will worth it. Why would you take the risk?
I'm one month late, damn! I'm the one who wrote this web app. It's nice to see it mentioned in the wild. Just yesterday I posted a major update to the model. Go check it out!
https://developers.google.com/identity/sign-in/web/ [get data like pic and name](https://developers.google.com/identity/sign-in/web/people)
As others said, Mithril falls somewhere between hyperapp and react in terms of functionality. Some of the things that it provides over hyperapp: - onbeforeupdate lifecycle method (analogous to shouldComponentUpdate in React) - onbeforeremove lifecycle method (basically for "run this animation and then remove the dom element" cases) - fragment vnode type, basically you can return arrays from components (similar to React Fiber) - lifecycle methods in every node, including text node, fragments, html nodes and of course components - data fetching (optional) It doesn't provide any code for state management per se, but rather documents a pattern that works for 95% of projects. It's possible to use other patterns and libraries, as u/pygy_ pointed out.
I've been screwing around with Discord.js and making a simple discord bot. Right now it has a few commands that just reply with a little message. It also welcomes users when they join a server and has the ability to give/takeaway roles. I'm planning on adding music functionality by later today. Also yes I know that the token is visible in that code, but that's not the current token for the bot account so it shouldn't be too bad. [Github](https://github.com/OfficialExedo/Discord-Bot)
Hey thanks for nice docs. However I can't seem to find anything related to choosing email accounts from specific domain. I mean, I get list of all emails I have and I'd like to get to choose from only @student.school.com. I guess it is not possible then ?
/u/Meowish: I missed your edit and I hear you. I'll make sure to talk about "code organization" on the docs somewhere and work on a more useful quick start example after "hello world" based on your feedback. For now, I added another important piece of the puzzle, "building" to document how to setup JSX/Hyperx tooling. - https://github.com/hyperapp/hyperapp/blob/master/docs/jsx.md - https://github.com/hyperapp/hyperapp/blob/master/docs/hyperx.md Thanks for your feedback!
Hi /u/lhorie! :) Sounds good, but it is not completely accurate: we also offer an "official" [router](https://github.com/hyperapp/router/), VDOM events in every node (you are right about text nodes), and `oncreate`, `onupdate` and `onremove` can be used for animation just as well, so I didn't choose to complicate the API with `onbeforeupdate`, `onbeforeremove`, etc. I am not going to blame you for not knowing every detail about Hyperapp! Thanks for sharing your feedback.
I work on [cpp-loader](https://github.com/arcanis/cpp-loader), a webpack loader that takes care of converting the C++ code on the fly (currently to asm.js, but hopefully wasm soon). Cherry on the cake, it also automatically generates the boilerplate required for everything to be properly exposed in the Javascript side. It uses [emmagic](https://github.com/manaflair/emmagic), a work-in-progress library that uses advanced metaprogramming to seamlessly cast the STL data structures from C++ to JS (my vision is that embind would only have to deal with pointers, while emmagic would focus on converting concrete data types). If any of those projects looks interesting to you, I'm looking for fellow contributors! 
I *definitely* recommend Vue still, I haven't tried hyperapp and it looks really neat but I've had a very good experience using Vue.
https://developers.google.com/identity/sign-in/web/reference#gapiauth2clientconfig &gt; `hosted_domain`(string) &gt; The G Suite domain to which users must belong to sign in. This is susceptible to modification by clients, so be sure to verify the hosted domain property of the returned user. Use GoogleUser.getHostedDomain() on the client, and the hd claim in the ID Token on the server to verify the domain is what you expected. 
never heard of code mirror before. Checking it out now and it looks promising. if you could throw an example together that would be great. Thanks a lot for the tip! 
just playing around with your solution myself. will get back to you in an properly in an hour, looks great though!
I feel.. oh this simple, just a little bit of looking. nonetheless thank you very much!
Sounds like a fantastic project! Keep up the good work :)
Hi /u/jamesfriedal, For javascript help, please visit /r/LearnJavascript. Thank you!
Ah thanks for the correction. I'll fix my other comment Do you have an example of animations before removal? It didn't seem to be supported from looking at the source (at least not without doing extra work in app space) EDIT: btw, I forgot to say this earlier, but I really like what you did w/ hyperapp, it's a really cool project :)
Unless they have extremely narrow patents that cover only React and not other similar frameworks, other frameworks aren't safer. Hard to judge without knowing *what* patents they have, and to my knowledge nobody has done an in-depth review of that.
Those look great! Is that the loader they were talking about in [the post](https://medium.com/webpack/webpack-awarded-125-000-from-moss-program-f63eeaaf4e15) about implementing WebAssembly support in Webpack? I didn't find any details about their implementation and thought they didn't start yet. Speaking of the limitations mentioned in your cpp-loader, WebAssembly support might prove easy to add once [this](https://github.com/kripken/emscripten/pull/5296) pull request gets through. It adds an option to combine both .wasm and .js into a single .js file. However, to address the separately compiling issue, I believe it has to become a Webpack plugin rather than a loader: only plugins can access all files at once, whereas loaders work on a per file basis. emmagic looks interesting. From a quick glance I see the conversion to/from TypedArrays is [done](https://github.com/manaflair/emmagic/blob/master/includes/emmagic/stl/vector.hh#L48) by iterating over and converting each element. That proved to be very slow in my [case](https://github.com/zandaqo/iswasmfast/blob/master/src/wasm.cpp#L13) where I used the build-in vecFromJSArray doing a similar thing. I've opened an [issue](https://github.com/kripken/emscripten/issues/5519) about in the emscripten repo. 
ok, any questions in the future will go there
This was a fun problem -- I still don't have the text cursor being set to the correct position at the end, but my implementation involves evaluating the string in a stream-like fashion -- handle every input event, processing the data as you go along. There are a couple of variables you need to track -- the previous character that was processed, the current array of characters including the symbol and the rest of the word, and a flag to determine whether to add the currently processing character to the array. will update later with the complete implementation, but this at least has the main part of it working https://jsfiddle.net/naveedn/uknzz2rk/
What problem does this solve that a general purpose CPU does not?
Indeed, it is in motion: https://github.com/easylist/easylist/issues/613
So, read through your code and its a really nice solution. thanks so much !! Any idea on how it would work for enter presses (as currently the text remains blue) if you press enter and start a new line. 
ok, nice code thanks a lot. i'll try and implement it for spaces later tonight. 
* there won't be no OS anymore * a program will be work every device * there will e 1 language (no more java, C++, PHP or anything) * there will be no DBMS (no more SQL, Reis, MongoDB) * and ofc there will be ONE chip which rules everything
Hi James, updated the fiddle, should now work properly for enter presses. :) https://jsfiddle.net/GingerBunny/n4sxc774/2/
Javascript can't run on a chip. Do a bit of reading on assembly language and [machine code](https://en.wikipedia.org/wiki/Machine_code)
Fawkin' zooted.
Nice, but if you hit the localstorage limit, Safari will error out suddenly - something to protect against.
Whoa completely forgot about that, if you’re available would you be down to collaborate? 
Well, your idea has already [been sort of tried, but with Java bytecode](https://en.wikipedia.org/wiki/Java_processor). It didn't go very far. Javascript is script, so that first needs to be translated to intermediate code that CPU would be able to run, and anything that does that is already so complex that you just have a CPU. Right now, the best VMs for JS already compile JS down to machine code instructions, changing the code on the fly depending on circumstances. JS is not that much slower than native code any more; the biggest differences are architectural (not being able to express 64 bit ints, having everything be an object, single thread, …)
Sorry, no time, but best of luck :)
Haha understandable! Thanks for pointing it out though.
There aren't animation features per se in Hyperapp, but this line: https://github.com/hyperapp/hyperapp/blob/712516a7ca2355f0a5dd7671e30f13b01c70173a/src/app.js#L176 tells you that if you use the onremove VDOM event, then hyperapp will not remove it -- that's up to you. So you can do your own fade-out (or whatever) animation, and then remove the element once it's done. So you are correct in that it leaves extra work to be done in app-space. It's not too much work, in the simple cases anyway. Incidentally, for the more complex cases, I made https://github.com/zaceno/hyperapp-transitions 
Not gonna happen
I have started work on it again .. thanks for your reply ☺
Now that's smart :-) Edit: it may be nice to pass the parent as well to the `onremove` hook.
Dude you don't need to write your post as a bunch of javascript comments. It's kind of annoying
why not just use iconic or something similar? what do you gain by reinventing the wheel? 
There's like 20 lightweight frontend application frameworks. It's no longer impressive.
https://www.reddit.com/r/reddit.com/comments/6ewgt/reddit_markdown_primer_or_how_do_you_do_all_that/c03nik6/
Hey, This is the first thing I've made outside of work and got to a point of releasing it. I know its a little rough around the edges but decided I'm fed up of never finishing anything or showing anyone! Its something i made to add some variation to another project I'm working on. by using templates you can change words and sentences or control if they should appear. so for instance `{{greetings}}, i hope you {{'really'?4 like}} my library`. May translate into "hey, i hope you really love my library" the first time but go to "howdy, i hope you enjoy my library" the next. Its fairly basic but using those concepts I've been able to build up some interesting functionality. everything was TDD and it uses web pack to wrap it up so you can import it pretty much however you want (including just dumping it in the console!) any comments or tips are appreciated (just go easy!). 
oh my god no - the creator of redux (and many people surrounding the react team) recommend to NOT learn redux until you're very comfortable with react - it's clear that the person you're replying to needs to get comfortable with just using setState and rendering components as a function of state before touching redux
I've often heard the quote "flux state is like glasses, you'll know when you need them" .. kinda figured he's on the edge discovering the missing piece of the puzzle :P I agree though that it's not the most obvious thing to wrap your head around. 
Nice work, though I'd suggest a couple things. #1 you should advertise this for what it is which is a NoSQL-like interface to localStorage. #2 as w00t mentioned, you might want to mention the limitations of using localStorage. The limit varies from browser to browser. Here's a link for reference. https://www.html5rocks.com/en/tutorials/offline/quota-research/ As an exercise, you might consider adapting it to use IndexedDB under the hood, as NoSQL is still a nicer interface than that. Maybe give the user a setting that lets them pick which storage method they'd like to use under the hood.
No, what we need is a mastaball
No OS? Also how are you going to store data without DBs?
Seriously, I can't thank you enough. More than happy to send chocolate if you give me an address. This problem has genuinely been plaguing me for weeks, so much so that I started learning React so I could implement Draft.js which allows a rich text environment. I've been playing around with your last answer in my text editor and there is a small issue. Because you are replacing div's with &lt;br&gt;'s the text doesn't always line up. If you double tap enter straight away and begin typing the text comes up 1 line below where your caret is for instance. So to eradicate this issue I replace '&lt;div&gt;' with ' &lt;div&gt; '. Here is an updated JSFiddle (using your idea) with one pretty funny bug going on: https://jsfiddle.net/harrydry/0pex5bhx/3/
I would say - do not resign until You find Yourself a new job. You can learn a lot from php/symfony.
&gt; We are sorry, but you do not have access to this service. Please log in to your Admin Console to enable this service.
interesting solution pal, glad you had a good time. an update would be great. I'm currently working off GingerBunny's solution but there is a few bugs. Thanks a lot for giving it a shot and I would love to see a complete implementation later !!
JavaScript + C++ = Dart
I think OP just isn't familiar with how computers work on a low level. 
Thanks, Google! *fuckin peice a shit wanned to see that post* (( not directed at @geoff ))
Demo's busted for me. Error: Uncaught DOMException: Failed to execute 'send' on 'XMLHttpRequest': Failed to load 'https://api.ipify.org/?format=json'.
Interesting, I just checked and it seems to be working fine. Maybe the ip api call failed, you should try again later.
Weird, my blocker is causing the issue. I use uBlock Origin. I'd recommend looking into why an ad blocker would cause that error cause I know a lot of devs who use one. Anyway, this is really neat! Good job :)
[removed]
Can we stop with the [project] heart [project] bullshit already? 
In a bad mood? 
Hi, I have been a programmer for a VERY long time, and have some opinions too. I like the idea of a "help" post being informative for everyone. I have been in a lot of programmer forums, mail lists, and IRC channels. I have always been OK with giving advice -if- I think the person has worked hard on the problem, searched the web, SO, etc and is still stuck. If the person phrases their question like "I have tried A, B and C and am still failing", then I am more than happy to help. But if the person has done nothing and is asking for help *first*, then I am not so charitable. I don't like homework questions. "I need to do this without using iterators, semicolons or the letter 'e'." Ban them totally. I don't like webby questions, where they consider javascript to be some kind of black magic. These guys don't even try to understand it, but only want their "l33t" page to look cool. I have even seen people who have been the recipients of assistance, telling others to FO. Not a good character trait. And the same as others, I think the "is this valuable to the subreddit?" question is important. Does answering this question on the reddit give information to everyone else who might potentially have the same problem? But good, hard questions, about Javascript itself, where the answers will help everyone? Let them stay. 
I love Sublime and use it for everything. I can't use Electron, it feels so slow. The user interface or lack thereof, however, is designed for geeks. I'd rather some simple text boxes for configuration rather than having to edit JSON files (while still having that option). Also on macOS, the find/replace menu is not under the Edit menu like all other apps. That can be a little frustrating 
For some reason on mobile, I was able to see a preview of the image. https://imgur.com/a/12ZRH I'm not entirely sure what the point of this table is, but there it is. 
Updated: https://jsfiddle.net/harrydry/0pex5bhx/5/ I believe this solution works in all circumstances. Thanks Again
Reddit Availability: I'm on most days. I browse primarily on the bus to and from work. Daily Availability: Typically about three hours, 8am, 4pm, and perhaps 7pm. Second Favorite Sub: /r/learnprogramming About Me: I've been using JavaScript since about 2000, professionally 2005 - 2008 and 2015 to the present. I prefer it to other languages for personal projects because it's very easy to get up and started with and it's not difficult to make basic UI. I browse Reddit to help people who are learning where I can, continue to learn in the cases where I can't, and to stay up to date.
&gt; uBlock Origin This blocks third-party scripts from loading. It's not just an ad blocker.
Two weeks is the norm in the US. Though that depends on the state, I suppose. Most of the time employers will just drop you on the spot where I'm at.
&gt; the boss's wife is screaming in my ear There's your problem.
You could use a &lt;map&gt; element with &lt;area&gt; elements rendered based on your hotspots: https://www.w3schools.com/tags/tag_map.asp and https://www.w3schools.com/tags/att_area_coords.asp
Genuinely curious. What are the benefits to using a cpp loader with webpack? Is it just simply being able to use cpp in web apps or are there performance boosts or? I have a interest in cpp as well so I will give this a play with for sure.
Object.assign isn't object composition. There's unfortunately blogs and videos out there with bad information. https://www.reddit.com/r/programming/comments/5dxq6i/composition_over_inheritance/da8bplv/
No problem, keep the chocolate just happy to help! I tried to fix the problem above, it's somewhat fixed but not perfect as of yet, play around with it. :) https://jsfiddle.net/GingerBunny/n4sxc774/3/ Edit: Should have refreshed the page before posting :P Your solution above is as close as I could get!
Jeez, almost a whole day passed since we last reinvented the wheel. I was beginning to worry.
You could accomplish all of this with images, hyperlinks, and css.
It seems silly that the Typescript source code would be any different than the JS source code. For example, in Typescript, it uses new Array() which is the slow path array whereas in JS it uses []. Not a very good comparison to me.
Functional programming doesn't mean declarative. Functional programming can be imperative. * https://en.wikipedia.org/wiki/Imperative_programming * https://en.wikipedia.org/wiki/Functional_programming &gt; In functional code, the output value of a function depends only on the arguments that are passed to the function, so calling a function f twice with the same value for an argument x will produce the same result f(x) each time; this is in contrast to procedures depending on a local or global state, which may produce different results at different times when called with the same arguments but a different program state. Although the Wikipedia page for functional programming claims it is declarative and contrasts to imperative programming the above quote is how Wikipedia actually defines functional programming. In JavaScript that definition and the imperative programming definition can be applied to the same functions simultaneously, particularly when those functions primarily exist to define structures, are used as closures, and always return a value derived from arguments to the function.
In your entry file (after you define your 'app' object): require('./routes/index')(app); In your routes/index.js file: module.exports = function(app) { app.use('/api', require('./routes/api')); }; Replace "api" above with whatever you want. In my example, api.js includes the router and exports it in the module exports: const express = require('express'); const router = express.Router(); const user = require('../../api/database/user'); router.get('/users', user.list); router.get('/users/:UserId', user.details); router.put('/users', user.update); router.post('/users', user.add); router.delete('/users/:UserId', user.softDelete); module.exports = router; Here's another example I scrounged up on SO. https://stackoverflow.com/questions/6059246/how-to-include-route-handlers-in-multiple-files-in-express
Thanks! I've updated the original post with something closer to what I'm seeking.
The distributed web? Could you give me an idea of what is meant by that? Are we talking a bittorrent protocol sort of deal?
Thanks for the links! I see how I could use these techniques to create image maps myself, but what I'm unsure of is how to create a UI that allows the user to set the size and location of the hotspot. So looking at the area element, I would need to somehow let the user set the coords attribute.
As I mentioned to andynocandy above, I am aware of how to use html/css to create image maps, but I'm trying to figure out the best way to create a UI that lets the user determine the size and position of the hotspot. 
I haven't had a chance to actually try this, but I think this is going in the direction you're looking for. app.js const app = require('express')(); require('./routes/main')(app); routes/main.js module.exports = function(app) { app.use('/users', require('./routes/users')); app.use('/locations', require('./routes/locations')); }; routes/users.js const router = require('express').Router(); // user router stuffs module.exports = router; Quick note: all of the routes in the users.js file will be prepended by "/users" when calling the route. E.g. http://yourdomain.com/users/userMethod
This looks correct. I'll give it a shot. Thank you!
No prob! 
Confirmed. It works!
Nice! Glad to help 
`other` isn't invoking `sayMyName`, though. It's invoking `invokeFunction`. `this` in `invokeFunction` is `other`. In the body `fn` is getting called (defined as `sayMyName`) but _without_ any context because there's no object reference in front of it. When this happens, the context of the function defaults to the global object, or `window` (which has a `name` property as part of the `window` definition that defaults to an empty string). You can change how `fn` is invoked by using `call` or `apply` or assigning it to the `other` object first so it can be called from it. let other= { invokeFunction : function(fn) { fn.call(this); } }; or let other= { invokeFunction : function(fn) { this.fn = fn; this.fn(); } };
I'm not sure if I've responded elsewhere about this, but this study is misleading when it brings TypeScript into the mix. Specifically, for certain TypeScript examples, it uses class syntax which gets compiled directly down to ECMAScript class syntax. In other words, the discrepancy in results is due to V8's ability to optimize newer ECMAScript constructs. The authors may want to note that in their findings. 
Yup! We are deliberating it! :P
And to boot, we're reinventing it with javascript... #what a time to be alive! Also, I can have this view and still be thankful for people that do work on such projects. 
downvotes without explanation? pls explain if you downvote
Thanks for the bug fixes, and data update I appreciate them.
Err I don't think you really understand what you are talking about.. Aside from the obvious glaring holes... javascript is not the answer to every single problem in computing. Let's not pretend it is..
Checkout https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout
Sorry it took so long to get back to you, been on the road all day. Take a look at this example. https://codepen.io/anon/pen/dVYwzX 
So much help! Thank you! I've had a baaad gum infection that's kept me in bad, sorry for not saying thank you sooner. I'll need to get a good hour or two to work through these - but one thing I noticed is your concerns about not converting to Radians... I use the reciprocal of 180 * PI. https://codepen.io/SarahC/pen/gGaZLW?editors=1010 You've got some great points I'll look into after work.. Thank you! I may have more questions!
The first line is the input, and the histogram of frequencies from the input. The second bar is the output after combining all the frequencies back together. The bars below that are the most important frequencies from the histogram. (the ones with the largest magnitude)
I'd say mainly two reasons: 1. utilizing existing C++ codebase to avoid rewriting it in JavaScript for whatever reason; 2. performance gains in computationally heavy tasks. To give you a real-life example, in my latest startup, I have a back-end server doing NLP written in C++. Part of its pipeline is tokenization (breaking text into words), however, I also need the exact same tokenization in the browser and the fornt-end Node.js server. Instead of rewriting that part in JavaScript, I can just compile the same C++ code into a WebAssembly module and use it everywhere.
I'm sorry if it annoys people. I didn't know it was a cliche, not with programming programming languages at least.
 Tried this but it's still not working.. What am I doing wrong? function funcWebcam() { var varFlash = document.getElementById('home-flash'); var varSnap = document.getElementById('home-photo-snap'); var varNoClick = true; while (varNoClick) { document.getElementById("coords-webcam").onclick = ''; } setTimeout(function funcWebcam() { varNoClick = false; }, 10000); if (varFlash.style.display === 'none') { varFlash.style.display = 'block'; } else { varFlash.style.display = 'none'; } if (varSnap.style.display === 'none') { varSnap.style.display = 'block'; } else { varSnap.style.display = 'none'; } }
Thank you :)
Sounds like you need a cropping library. They will let a user drag a crop area over an image and you'll get back the dimensions. There's usually options for min/max width, etc. I recently integrated `cropperjs` with react... it wasn't *too* difficult. I had to do some event registration and math wizardry to get the previews to show up properly, but it wasn't that tricky thinking back on it. Once you have that information, it would be fairly trivial to output an image map with the same coordinates, or maybe just include hoverable overlays over top the image.
Yeah, you're totally right. Most websites work fine with it, though, and hopefully OP can make his site work with it as well.
I created an Esperanto tokenizer https://github.com/maroun-baydoun/new-hope
it was really nice, worked very well my boss is happy i am happy and really liked the Elm architecture, definitively i will be using hyperapp at work and in personal projects. i would like to use hyperapp in all my projects but for that i really need seo. 
Can't make an API request to a third party on client side without it breaking.
Was building the app any easier with Quasar for you?
Don't use `while` loops like that to block code execution. The code will run hot and burn cycles waiting for the condition to be false. let lock = false function funcWebcam () { if (lock) { return } lock = true // do your thing. setTimeout(() =&gt; lock = false, 10000) }
You could use addEventListener and removeEventListener. Pseudo-code: - add click-eventlistener - set timeout for 10s - remove click-eventlistener 
Thanks for your help guys. I got it working by adding a timeout function with the onclick handler restored. function funcWebcam() { var varFlash = document.getElementById('home-flash'); var varSnap = document.getElementById('home-photo-snap'); setTimeout(function() { varFlash.style.display = 'none'; varSnap.style.display = 'none'; document.getElementById('coords-webcam').onclick = funcWebcam; }, 10000); if (varFlash.style.display === 'none') { varFlash.style.display = 'block'; } else { varFlash.style.display = 'none'; } if (varSnap.style.display === 'none') { varSnap.style.display = 'block'; document.getElementById("coords-webcam").onclick = ''; } else { varSnap.style.display = 'none'; } }
I figured out how to disable javascript in Opera. I get a few extra hours of battery life on my laptop. 
Good news! You can [hydrate your pre-rendered HTML](https://github.com/hyperapp/hyperapp/blob/master/docs/hydration.md) with Hyperapp ;) This is a relatively new feature (a month or so), so maybe it wasn't available when you first tried it out or you never heard of it mentioned on our docs. 
gah, that is unfortunate. I'm using it for our main BaaS. Epic BaaS, but Rhino sucks.
You may wish to consider switching from Rhino to Nashorn. http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html It supports template literals. https://www.oracle.com/corporate/features/nashorn-javascript-engine-jdk9.html
/wave thanks -- it's not my decision, however I will definitely pass the link along
Thanks for that will keep in mind. Very thoughtful regarding viewing inbox vs. thread
This is a JavaScript subreddit not Java. Those are very different things. 
ping /r/javahelp your pattern seems incomplete, maybe try this ? Pattern Pusuario = Pattern.compile("^[A-Za-z0-9_]+$"); 
also "made with ♥ by x"
I've done stuff like this using &lt;canvas&gt;. Render an image to that and you'll have your coordinate system.
What tokeniser is it? Please say MeCab 🤓
I'm a newcomer in this area, so I couldn't say is it good article or not
There are many ways to solve this issue. One solution is to use the CSS pseudo selector ::before instead of using the img tag. For more info check out this site: [https://css-tricks.com/almanac/selectors/a/after-and-before/](https://css-tricks.com/almanac/selectors/a/after-and-before/)
Not sure how IIFE (functions wrapped in quotes) are relevant, but I see what you're after.
Because I hadn't read the fine manual well enough? :)
How do you prevent XSS attacks or similar security problems?
https://github.com/beautify-web/js-beautify 
thaks for you share
Thank you
Maybe this is better: https://developer.mozilla.org/en-US/docs/Web/Events/transitionend
If I understand correctly, I think you want to change the text content of the relevant child #text node of the h5 tag, rather than the content of the tag itself (which replaces the img tag) See the MDN page for more info: [Text](https://developer.mozilla.org/en-US/docs/Web/API/Text)
your if is using a variable doesn't exist
Yes, thank you. That was it:)
Do huge companys actually do this? Like does facebook have tests for their front-end ui? 
Had a brief look and two things: - hyphenated filenames/directories would be more preferable to me - it might be something new to me but do you need to specify `async` if you're not using `await`?
Just use GSAP and put your animation on a timeline. Seriously... you'll get much better results. And learning GSAP will literally take you 2 hours, no more. 
Am I the only one who thinks "always" makes more sense? Ughhh, nomenclature is my #1 enemy!! Edit: thanks for sharing btw 🤘🏻
 let other= { invokeFunction : function(fn) { fn(); } }; See how there's nothing to the left of fn()? It doesn't magically know it's being called within other.invokeFunction.
It's so it matches try/catch. It is a bit weird though.
I'm sceptical about this. Functional tests are brittle and have a pretty poor ROI as is - that's why the thought leaders in testing have spent recent years advocating the 'test pyramid', comprising many unit tests, only a few integration tests, and hardly and E2E tests at all. When I tried out visual regression testing in a gig a few years ago, we found that the signal-to-noise ratio of genuine to false positives made the tool far too unreliable to use in continuous integration. Errors would be triggered by platform differences, rendering quirks on CI, and genuine but minor page changes - which was dangerous, because this could hide actual bugs. I still feel automation should only be for tests that are highly deterministic and easy to break down into discrete tasks. The rest I think are better handled by human beings.
Thanks. Now another thing I didn't understand d was why when I define the sayMyName function with the arrow function syntaxis, this refers to the window object, both when invoked by user and other. I assumed it would refer to user in both cases since its supposed to be always executed in the context in which it was defined.
Reddit Availability: 300-330 days. Daily Availability: 6-8 hours 2nd favorite sub: /r/theocho or /r/shittyrobots, I have a hard time deciding About me: I've been doing front end development as a hobby for 7 years and professionally for 4 and have a deep love for JavaScript in whatever context it can exist. I've been on reddit for about 4 years and have been following this subreddit for about 1 of those years and absolutely enjoy having a dedicated hub for news, articles and new tech talk that is solely dedicated to JavaScript. Personally, I would like the content baseline to be a little higher due to the, as you correctly identified, large amount of requests for help, which is why I'm submitting this application. 
[removed]
Hi /u/xblade724, For javascript help, please visit /r/LearnJavascript. Thank you!
[removed]
[removed]
&gt; its supposed to be always executed in the context in which it was defined And that's what's happening. The brackets used in creating `user` don't define a context. They're part of the object literal syntax. Though the same characters are used in function [context] blocks, they behave separately depending on their use. Function blocks have their own context, object literal blocks do not. // in global (window) context let user = { // &lt;-- not creating a new context name: 'My name', sayMyName : () =&gt; { // &lt;-- still in global context console.log(this); //-&gt; window console.log(this.name); //-&gt; window.name } };
I will take a look thanks!
Hi /u/rocconz, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/THEVGELITE, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/PyBet, For javascript help, please visit /r/LearnJavascript. Thank you!
Yes, E2E tests are more brittle than others, due to the fact that they do I/O. That is why you should spend more of your time on unit tests and integration tests. But the fact that you do not have to do a lot of them, doesn't mean that you shouldn't do them at all! GOOS, the bible of TDD, even advocates _starting_ with an E2E test. Yes, you _could_ give up, and delegate visual testing to manual testing, but that's copping out. Lots of people talked like that about testing in general 10 years ago. I believe visual testing to be where testing in general a few years back. And the situation _has_ changed for the better in the last couple of years. The algorithms and tools have gotten better and eliminated practically all the false positives of visual testing. Try them out, you may be pleasantly surprised.
Hi /u/Bleached__Anus, For javascript help, please visit /r/LearnJavascript. Thank you!
Not sure about FB, but I know for a fact that MS and Google do Visual testing. Also, check out the list of customers on our site (https://www.applitools.com/).
Okay but then why when using the function keyword, user is it's own context, but when using the arrow function it's not creating it's own context?
[removed]
Seems a bit late to have this in an async/await world.
Right, thats how arrow functions behave. They're not just shorter functions. They also have a different way of handling context. You can read more about it here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
Can posts not be moved between subreddits?
finally
Is this different from accessing the 'constructor' property of an object? this tool would be good for visualizing all that information in one place, but personally I'm not sure if I'd save much time compared to just doing something like this: console.log(x, x.constructor ? x.constructor.name : typeof x); Nonetheless, it's pretty cool and could be useful for debugging. EDIT: As usual, thought of something else to add as soon as I click submit. This could be really, really useful for converting to webassembly (as the author had also mentioned using it to generate TS/JSDoc). I might look into this a bit more, and play around with it. thanks for sharing this
I vote for `Promise.prototype.irregardless` .. it'd be unanimously hated, but everyone could pick their own reason :)
Take that up-vote.
More importantly do *small* organizations do UI/front-end testing? Not that you can't learn from their best practices, but Facebook, Google et. all's decisions on major projects have about as much to do with the average developer as NASA does with a car mechanic. 
Thats not true. If I know that not even big companies with more than enough ressources do it then why should I, as someone with probably way too little do it? 
Maybe it's too early for me, but how does it match try/catch?
Thanks very much for the recommendation. It looks like there are already a few cropping and image map libraries for react, so I should be able to combine these for the desired effect. 
Now we need Promise.prototype.try ! new Promise() .try((resolve, reject) =&gt; { resolve() }) .catch(error =&gt; { console.error(error) }) .finally(() =&gt; { console.log("done") })
Thanks! &lt;canvas&gt; looks like it could really help in this regard. 
There are plenty of 0 or 1 comment responses over there. What reason is there to believe that the existing number of teachers lurking there will somehow increase their response rate sufficient to cope with the alleged torrent of learner posts that'll be sent there?
Further comment on this one: Stencil is very promising, and worth the look especially if you were skeptical about Web Components "happening" at all in the first place. It turned my expectations around for one.
I agree with that sentiment, to an extent. Conversely, if they do unit testing does that prove you should do it too? The massive scale of their products might alter the math involved with the value of testing. Specific to your example they might skip certain types of testing because with their resources those methods are superfluous / redundant / inefficient but for a smaller shop those methods make better sense. Again I'm not saying you can't learn from them, but personally I'm more interested to hear whether smaller dev shops in general have had successes with unit testing because their experiences and pitfalls are more likely to holistically line up with what I'll deal with.
No.
I've got a non-trivial sized app which contains a number of hand-rolled web components which could benefit from a light weight library to eliminate the boilerplate. There are plenty of front end frameworks and libraries in JS land but few are aimed at web components and are light enough that they don't dictate your whole application architecture. Stencil seems to be exactly what I'm looking for. 
 try { something(); } catch (e) { console.log(e); } finally { console.log(‘always called’); }
My same word 😁
Ah. No idea why I forgot about finally with try/catch. Hah, thanks
How long have you been waiting for thin pun?
That's what the Promise constructor is doing already.
the [bluebird syntax](http://bluebirdjs.com/docs/api/promise.try.html) is nice Promise.try(() =&gt; { if (foo) { return bar } else { throw new Error('nop') } }) and btw, the other one I really miss in the standard is [`Promise.props`](http://bluebirdjs.com/docs/api/promise.props.html) Promise.props({ a: getPromiseA(), b: getPromiseB(), c: getSomeValueSync() }) .then(({ a, b, c }) =&gt; { // enjoy }) 
Feel free to add yourself to https://github.com/gajus/sister#similar-libraries
It probably is. It's in early stages now (0.0.4) but they seem to have nailed the ergonomics
My job is web automation (using NodeJS against react apps..) and /u/Bosola is on the money with the visual stuff. It's incredibly unreliable and I discourage it whenever I can (disclaimer, our GUI is very dynamic) Where it is useful is for Canvas testing, because webdriver cannot interact with a canvas element (outside of clicking coordinates). We make a server change (rest call/etc.) then verify the new canvas matches the reference canvas. The nice thing about a canvas is you can get a base64 string representation of it, transfer through selenium via driver.execute(function() =&gt; { return document.getElementsByTagName('canvas')[0].toDataURL() }) Convert the base64 into a png in your node script, skip all the other junk outside of the canvas, and use that for comparisons. Also, I highly recommend using [WebdriverIO](http://webdriver.io/) over the base selenium package
Mfw people talk about things they don't know about
I suppose that would depend on when it was run. Is `.finally()` always run last? Couldn't you `.always()` do something `.then()` do something else? You wouldn't `.finally()` do something `.then()` do something else, would you?
10/10, will get trolled again
But it doesn't complete try/catch/finally
Consider using a queue for image processing, and then something like nginx for static serving. If there are any other tasks, express can handle them.
needs the alias regardless, obv.
Const just makes it so that the variable name can't be reassigned to something else.
in ES6 Javascript, you should declare any variable as const if you don't need to mutate it. In this case, this is not a "const" function, but a "const" variable holding a reference to the function.
Having read your post history ellerdrop, I suggest you need some real education, and learn what having an uninformed opinion is - and why its not good to share uninformed opinions as fact. If you research your beliefs and questions the reasons you hold those beliefs in the first place, you may get insights into the world that you didn't realise. On the topic of JPUs for instance, a program merely utilises the facilities provided by the computer - the Operating System. Otherwise, for instance to integrate with any of the physical devices, the program would have to manually work out how to operate those devices correctly, handle memory, and whatever else it would need - network cables, wifi drivers, sound, PCI, and all the rest - that is why we have operating systems. 
If you declare a function with `var` or as a function statement... var someFunc = () =&gt; { whatever; } someFunc = 0; //no error, except until you try calling the function... But if you declare it using `const`... const someFunc = () =&gt; { whatever; } someFunc = 0; //error occurs here immediately instead of being confusing later Essentially `const` makes it so you can't reassign a different value to a certain identifier. If you intend for some identifier to always be the same (which is probably what you want for functions...) it's generally a good idea to use `const`. While you usually wouldn't intentionally reassign a function like in the example above, it's always possible you do it accidentally, so this helps you avoid annoying debugging headaches later. (keeping in mind some older browsers don't support it)
yes, i'm already using that feature is really nice and so simple! what i don't know how to do is the ssr part but with routes. i have in mind something like staticRouter from ReactRouter4 using the match function from the hyperapp router.
why not just create a normal function? is there some added functionality by doing it this way rather than creating a normal function?
Holding a function in a variable lets you passing it to other function as a callback. It's a common technique in javascript, it however has nothing to do with the const topic.
The reason you define a function as "const" is that, if you define a function with "var" or "let", it is possible to reassign that function. let foo = () =&gt; "foo"; foo = "bar" foo() // error at runtime: foo is not a function. const foo = () =&gt; "foo"; foo = "bar" //type error at transpile/compile time, because "foo" cannot be reassigned to another value. What's interesting is that const foo = () =&gt; "foo", foo, is actually assigned to the *pointer* (Javascript abstracts away pointers, but it's essentially the same thing), so you can mutate the const function, adding methods to the function normally, like any other object. But you can't reassign it to a *different* function. There are some who prefer named functions of the form: function foo () { return "foo" } because foo is now a *named* function and you can get the name of the function by getting that function's name property. function whoami (someFunction){ return someFunction.name } whoami(foo) //=&gt; "foo" But I usually declare functions with const simply because it helps me scan the code better when I read it back. Javascript isn't a typed language, so the "const" doesn't refer to what the function returns (as in C++), it just means "When you allocate the memory space for this function, make sure that nobody else can claim this memory space and that this memory space can never be reassigned to another function. 
sure, but why not just create a normal function? function helloWorld() { return 'Hello, World' } it's essentially a 'const' function because you can't change it or the function name, and it should work the same. Is there some benefit to this more complex, verbose method? it seems silly to me, because literally every other programming language i've used treats function names as unchangeable. (not sure about c++ because i've only done a little bit and c++ is fucking complex)
thanks! that's the answer I needed. I'm used to being able to pass traditional functions directly to other functions as a parameter, so I guess that's why this slipped past me.
Except it doesn't. Try it and you'll see. Declare a function like that, and then assign some other value into it... it won't cause any errors until perhaps much later in some totally different file where the error is just going to be super confusing :) *Personally* I find it a bit pointless. I just declare functions the old fashioned way, like you showed here. But there is some kind of a point to using `const` at the very least.
wow now that's a shitty design. Thanks for the info. I never imagined js would allow something that pointless.
Except that it's named, your function is the equivalent of `var helloWorld = function(){ return 'Hello, World'; }`: It can be reassigned and it's hoisted. I like my function named and hoisted but I don't mind anonymous function (for oneliners) and I use `const` to assign them.
Wow! Didn't see this one coming
This is no longer a super set of JavaScript. It's just now a non standard JavaScript clone. They need to look back upon their original goals and see ES2017 has gotten us there. Coffeescript doesn't need to exist anymore
&gt; you should declare any variable as const if you don't need to mutate it Well, that's just an opinion... there is no difference between using const and let (besides the obvious) and the non-mutation thing only holds for primitives const family = { dad: 'homer', mum: 'marge' }; family = { dad: 'peter', mum: 'lois' }; // runtime error! yes I protected! yoohoo family.dad = 'peter'; delete family.mum; // oh... It's common practice to use const, but I personally don't find it that useful. Except, funnily enough, for functions
Sorry, isn't this valid? doSomething .then(doSomethingElse) .catch((e) =&gt; console.error(e)) .then(doAFinalThing) with the final "then" acting the same way as a "finally"?
Love it!
He's wrong though. You can ALWAYS pass a function as a callback. The main difference is that with `const|var|let` you can use the fat arrow notation, that besides being _cooler_, has the extra benefit of not binding `this` - but the disadvantage of being anonymous. On the other hand, functions are hoisted and are not anonymous. // error because fnAsAConst is not hoisted setTimeout(fnAsAConst, 1000); // no error setTimeout(plainFn, 1000); // an anonymouse function bound to fnAsAConst const fnAsAConst = () =&gt; { alert('I was a constant'); } // a named function function plainFn() { alert('I was a plain function'); } // no errors setTimeout(fnAsAConst, 1000); setTimeout(plainFn, 1000); 
O_o gosh, and people are upvoting you.... /facepalm
What else can they steal from ruby by now? Though I would really like `return unless/if`.
What is the point of this /r/? Obviously I don't need help with it, I'm asking about an industry update (if you actually read the post.... The very short post.... ) 
That's the worse possible way. The function is anonymous so it won't ; it is hoisted but not properly (so if you try to use it before it's defined, `helloWorld` exists but is undefined, so it won't throw an error, but `helloWorld()` _will_ throw an error, because undefined is not a function). And then you can overwrite it, of course. In modern JS there should be no place anymore for var.
&gt; This is no longer a super set of JavaScript. Huh? CS never was a superset of JS.
You get a squiggly line with ESLint or TS if you try to redeclare a function. It really isn't a problem in practice.
Great job on the event emitter OP. I really like the API. User friendly. If someone wants to keep it even more nano, it could be solved in 8 lines of code. https://bjarneo.codes/light-weight-event-emitter-for-javascript/. Although, those 8 lines are missing features like once etc.
Yes I guess were on the same page then. I was more wondering if visual testing itself is a practice that pays off or not and in that sense would have taken their decision not to for a clear indication that it only seldomly finds its use and pays off. To me it seems as if it highly depends on the application itself
I know many people hate on CoffeeScript, but I still find it's syntax far superior both for writing and reading code. CoffeeScript allows me to fit more code on the screen and iterate faster when writing code. Significant whitespace is something I actually enjoy, just like in Python. Sure, some of that is certainly just a matter of taste, but that's still no reason to dismiss it. Also, even if everything about were completely pointless, it's still just a small language that transpiles to modern JavaScript. So it doesn't impact you, the vanilla JavaScript dev, at all.
Yes, I agree with the general sentiment of the comment, but that was just dumb
Wow! I am thinking of removing once method. I never used it.
If I wanted to use a transpiled language I would pick something more useful like Elm or ClojureScript. CoffeeScript has no reason to exist anymore. Although I must admit, it's much nicer to write tests without having to close all those bloody brackets
Are you still actively using it?
I wouldn't have expected that this mjs extension thing would be accepted.
Hm. The same can be written on 1 LoC. `const events = {}; function on(event, callback) { if (!events[event]) { events[event] = []; } events[event].push(callback); } const trigger = (event, data = null) =&gt; events[event].forEach(callback =&gt; callback(data));` Thats 92% LoC reduction!
lol +1
[removed]
I feel like all of this would be obviated with a proper `async`/`await` syntax.
&gt; Const just makes it so that the *fucking* variable name can't be *fucking* reassigned to something else, *fuck*. Ftfy.
Very cool. Just gotta learn to write my own custom lexer and parser 😑
That's half the fun of it! Personally, what got me started learning this kind of stuff was LLVM's docs on building a simple language called "Kaleidoscope". It's in C++ but all the concepts still totally apply. Here's the link for that: http://llvm.org/docs/tutorial/LangImpl01.html also, if you want to check out the code I wrote for this article, it's all up on GitHub! Here's the lexer: https://github.com/ajmd17/blockml/blob/master/lexer.js And the parser: https://github.com/ajmd17/blockml/blob/master/parser.js
Every function in JS is a closure. So in C++, imagine all functions were defined like this: auto helloWorld = [] () { return "Hello, World"s; }; Since it's just a variable holding a value, it could be reassigned a different value later. Unless you make it const.
Thanks for ideas. I released nanoevents 1.0 and reduced size to 130 bytes (2x reduction!).
Probably a silly question but are you that set on shapes? If it's designed to be as simple as changing the top face and not "rolling" a die, and also limited to a d6, why not just use 6 different svgs, tie them to css classes and psudoelements and just change the class based on the random value? 
I was replying to the named function code and I was illustrating how a named function is different than an anonymous function assigned with `const`. ps: err, function expression assign with var only hoist the variable, not the function.
&gt; I never imagined js would allow something that pointless. [JS allows more pointless things than any of us could possibly have imagined](http://www.jsfuck.com/)
I never do-VSCode always closes for me. Not sure what you're using as editor that you have to close it yourself.
&gt; ps: err, function expression assign with var only hoist the variable, not the function. exactly my point...
oh my god that's beautiful. Thanks for the share.
&gt; Also, even if everything about were completely pointless, it's still just a small language that transpiles to modern JavaScript. So it doesn't impact you, the vanilla JavaScript dev, at all. Until, someone without coffeescript experience needs to contribute and have to deal with subtle difference between coffeescript and javascript. 
One reason for function expression vs. function declaration is more readable syntax for curried functions. Consider: const curriedAdd = x =&gt; y =&gt; x + y; vs: function curriedAdd(x) { return function (y) { return x + y; }; } Function currying are somewhat common in React world. For example Higher Order Components.
Wrong subreddit. Try here: https://www.reddit.com/r/learnjava/
Awesome! Thanks for the materials!
You'd still have to do .then(doAFinalThing, doAFinalThing) since an error can be thrown from the catch callback, and even that's not quite equivalent to finally, which is more along the lines of .then(val =&gt; { doAFinalThing(); return val; }, reason =&gt; { doAFinalThing(); throw reason; }) Edit: to fix return values in example
For all of the missing things it seems to be larger than 254 bytes post minification?
I totally agree. Entity Framework was one of the best software products/libraries I've ever used!
It wasn't a decision made lightly, believe it or not it was the most elegant solution that didn't break backwards compatibility
There's a brazillian online options for learning the basics. It's an incredible waste of your company's money to have you teach someone if statements and for loops. Your time is better spent finding online resources for this individual to learn from. 
Yes, it does all the boilerplate stuff for you. The overhead for setting up PhoneGap isn't huge but there's a bit of a learning curve with some of those tools. Weex is interesting because it turns your Vue components into native components rather than running a webview, but the alibaba team doesn't seem very interested in making weex available to the public, or at least to non-Chinese speakers. Hopefully the apache incubator helps motivate them to move forward with that.
You should make it an NPM package.
Actual title: Javascript for React cheatsheet. Real Javascript programmers don't need this.
Just a few minor issues with no major refactoring! We used inferno-compat and added a webpack alias. https://www.npmjs.com/package/inferno-compat 
Finally.
Thanks for your honest feedback. But as much as I understand what you mean, I'm not very fond of the "real" JS developers you are reffering to. JS community is enough victim of that "real developer" thing IMO. However, it is indeed purposedly made to be read before getting into libraries like react/preact :)
yes, but the question wasn't whether I should teach this person or not, but more what I should teach them. By your logic, no one should go to school and just learn online instead. thanks but not helpful.
Perhaps you should be looking at the bigger picture and question the task in the first place.
Won't something like try { startActivitySpinner(); const result = await whatever(); // do something with result } finally { stopActivitySpinner(); } just work?
Thanks again, but I'm looking for answers to my question.
Yep, that's exactly what I mean.
It looks like you want to replace the contents of the observable with the new data from SignalR. You don't need to muck around with pushing all the new contents. You can just set `Locations` to the array you got passed in: ``` vm.Locations(data.Locations); ``` `observableArray` is really just some wrappers that make changes to the contained array and trigger the dependency subscriptions. You can call `push` on the observable rather than getting the array and pushing to that, for example. If you're replacing the entire contents every time, you can just use `observable`, although it can be clearer to indicate the intent by using `observableArray`.
Good catch, thanks! If you have other things to point out, I suggest you to open an issue on github and I'll gladly look for it :) Edit: Fixed!
Subtle? Bwaha. Good one.
Teach them JavaScript. (I recommend ES5 and then ES6 at the end.) Then teach them NodeJS. Then teach them how the internet and APIs work. Then put them all together. 
https://twitter.com/iamdevloper/status/909823471504494592
&gt; I'm trying to decide whether to go over any C basics You might want to include some basic assembler as well. I know in uni we covered MIPS -- i'm sure you could cram that in one of your lessons. 
I guess I should learn some MIPS basics first :)
Neato I'll have to try this
Cool, but `once` is pretty good feature. And i never got the idea `on` to return an "off"/unbind function. It was discussed at `mitt` too. That's why i introduced same minimal things at `dush`, but allow plugins to allow everyone to add or modify what they need.
huh? They were never a superset. CoffeeScript is doing exactly what they've been doing all along.
I know the codes
In the frontend, because ostensibly you're testing the frontend - does it take the input properly and create output based on server calls properly. We have a specific e2e server setup with data for testing. All tests make sure to leave the server "in the same state" as it was (delete and created models, revert any edits). This way anyone can run the e2e tests on their machines (and the CI runner).
Looks ok for someone coming to js from another language, but I thought the point of cheatsheets was that they were supposed to cram as many snippets as as possible in a standard A4 sheet of paper, for quick look ups.
Hey man you didn't like having one transpiler? How about we make it so you transpile your code into something that needs to be transpile again in order to use on a production site.
2 ??? 3 Profit!
That first step is a doozy tho
But... why?
umm, full disclosure (I'm sure you noticed) I was being sarcastic and full of sass. Do not teach them assembler. Do not teach them C. What I would do is work through http://javascript.info/ with them.
`dash` looks great. Sad that it didn’t exist when I started Logux, I could save few days for myself :). When I removed `once` I thought that it could be implemented by: ``` var unbind = app.on('some', () =&gt; { doSomething(); unbind() }) ```
lol
`dush`, not `dash`, but yea no problem :D &gt; Sad that it didn’t exist when I started Logux, I could save few days for myself :) Don't know, probably. It's out there from around when `mitt` was release. I found `logux` before few days and looks interesting too.
Thank you for the response. I'm a c# dev that got thrown into this little web issue we are having, so Ive been crash coursing JS, Jquery, and KO this past week. You are correct. I am replacing the entire contents of the Datatable with new info from the server. Its only about 10 rows, not a lot to move around. Unfortunately i cant just hand the location array to the ko.ObsArry. There is some data massaging that happens in `vm.Fill`. I did, however, see that instead of pushing each new row to the ObsArray, that i should build a regular Array, and pass the whole thing at once. Before I started working on this, thats how it was actually setup (to pass each row individually). The thing is, even if i dont add any new data, the old data isnt getting cleared out of the UI datatable. Running `removeAll()` on the ObsArray, or passing in an empty array clears the ObsArray, but that change isnt reflected in the UI. I hadnt tried just handing the array to the observable without clearing it first. So i just tried that and dont really see any change. So, i can successfully pass the data over. Confirmed that the ObsArray is being cleared and filled. Its just that, for some reason, the UI datatable wants to hold on to the old data. Unless i call `dt.clear()`, but then nothing is able to be added. It gets added visually, but if you try to search or sort, it all clears out, like its just a visual glitch that the data is there, but its not actually bound the the DataTable anymore or something. The other thing is, this all works perfectly fine if i am not trying to use the JQuery DataTable. My boss wants this table to have that all columns instant search feature, so I'm trying to get it to work with that, but if i leave out the `dt = $('#tblDashboard').DataTable();` altogether, then the table updates perfectly. I may end up abandoning this and just writing my own instant search filter and work it into the dataAccess.
Is this really what the people who made ES6 modules intended? No platform really supports them like they're part of the language. They don't work in normal &lt;script&gt; tags, you have to use &lt;script type="module"&gt;, otherwise they're syntax errors in web browsers. And now you have to use this made up file extension in node.js. It hardly feels a language feature at this point, but rather like an inofficial convention, something like PSR-4 in PHP for autoloading that people have just agreed on. And it doesn't even look like it will be easy to share modules between the browser and node.js now...
Great to see that CoffeeScript is still alive. Kudos for adding the JSX support !
Oh, I missed that. Yes, that looks like the jQuery Data Table is stomping all over the elements and breaking the Knockout bindings. I'd pick either Knockout or DataTables, but not both! Probably I'd go with DataTables to get the search and sorting features, and use the `rows().add()` API to load the table.
Just as some additional reading, there is definitely a precedent for a composition operator in other languages as well. [This article](https://blogs.msdn.microsoft.com/ashleyf/2011/04/21/programming-is-pointless/) touches on composition operators in Forth and F#, I believe. And Haskell just uses `.` if I remember right.
i made this http://vue-multi-select.tuturu.io/ a vue component who can single, multi select with a search.
Thanks. Yea, like I said, I didn't start this project, and it's pretty fleshed out already. Just tweaking some ui functionality for a version 2. I'll see how much I can strip out before it all breaks, and see if I can get it down to just one framework. Thanks for all your help. 
I saw you used/created https://github.com/ai/size-limit, which is pretty neat. 
Strongly disagree. There were other solutions that the majority of devs perfered (package.json approach), you can look at thumbs ups on the old issues, and a few community polls even. Community feedback was basically ignored. Links: - [Github discussion](https://github.com/nodejs/node-eps/pull/3) - [Community Poll (81% in favor of package.json)](http://es2015-node.js.org/#feedback) &gt; it was the most elegant solution Elegance is a subjective measurement and should not be used to determine standard. Maybe if you were to poll for which proposal is most elegant, but even then standing on elegance alone as a reason is not great.
Dear God, I had no idea there were that many reinventions of the wheel...
The problem, I think I remember, was that although the reciprocal of 180 * pi is correct for degrees to radians, the angle you had there was in thousandths of a cycle. You set the frequency in the fourier transform code, using the iterator as your frequency, and that iterator was looping over cycles per thousand grid steps. When this is then multiplied by the grid index, you do indeed get an angle, but the angle is in thousandths of a cycle, rather than degrees or radians. 
I don't understand why you call it javascript for react since basicly it is new updates from javascript world for old javascript coders. I realy miss some concept and found here. Thank you 👍🏻👍🏻
Pretty interesting if I'm reading the code correctly. Add a non-noticeable animation/transition, and listen to those anim/trans events beginning?
There is another article that just happens to be about that on the front page: http://blog.mgechev.com/2017/09/16/developing-simple-interpreter-transpiler-compiler-tutorial/
This makes a lot of sense.
Author here. Just wanted to note that there's an open issue with the Chromium team for some glitchy behavior on Android I noticed... https://bugs.chromium.org/p/chromium/issues/detail?id=766021#c5 I just updated the demo, but it's been around for years and worked well. Hoping they can fix this for those devices. Also, mobile firefox seems to be really sluggish. Think that can be solved by debouncing the renders from the trackball controls.
Reddit Availability: ~60 days Daily Availability: 4 hours 2nd favorite sub: /r/Showerthoughts About me: I've been programming for the past 5 years (mostly in Java). Been lurking here for a while now. I mostly posted help posts a while ago. I'd love to get involved with the community by helping in moderating the sub and learning more about javascript in the process.
I don't understand. If the majority of it is transpiled almost 1:1 to ES2015+, then what is the point of CS.
Link?
[removed]
From what you are saying I would point them at some online free interactive JavaScript training to keep them busy while you make a configurable visualization script and then they can tweak the parameters. If they are scripting tasks themselves then yes they are a developer. They will need months or more realistically years of self training before they can write useful or maintainable scripts by themselves.
Maybe I'll try that, thanks!
In this case, XSS is the *feature* not the bug. The whole point is for an administrator of a project namespace to be able to customize that namespace. If users of that project load it, they load the functions configured for it. They're only required to trust the admin of that project, who has access to all that project's data anyways - so no security problems there. 
Hey guys I'm over in the web team on www.thetimes.co.uk Can verify that we have a fairly large e2e regression pack using cucumber jvm / selenium around 1500 step assertions run reliably in about 10ish minutes. We've also implemented visual regression testing. Take a look at backstopjs / wraith I've used these both with great success. One thing to point out I wouldn't recommend using any of the headless browsers unless it's chrome purely because your user base won't be using them! Also worked on a number of other sites where we have similar test coverage. E2e automation can work, it just needs a bit of thought on how and what to test! 
I'm so proud of my dear modest mouse and Radiohead fans
I don't understand why there needs to be a CoffeeScript 2, especially if a majority just maps 1:1 into ESNext anyway. Javascript has evolved to the point where CS is not needed anymore, but at the same time, we need to acknowledge that without CoffeeScript, we might not have some of the syntax and features that are currently in Javascript.
Ended up removing that part since like you pointed out was misinformation thank you for pointing that out
Was on mobile before, updated post with links.
While they aren't necessarily opposites from one another being in fact quite complementary. They are different ways to approach your code so having a notion of how to identify what is functional and what is not is still, in my opinion, a good asset to have. Will take a look on what to edit on the article so that is more evident. Thanks for your feedback ^
Isn't `Promise.try` the same as a new promise or then-ing a promise: // New promise new Promise((resolve, reject) =&gt; { ... }).then(...) // Promise then Promise.resolve() .then(....) // I think you can also do Promise.resolve(() =&gt; ...) And the second one is just as usable right now with `Promise.all`: Promise.all([a, b, c]) .then(([a, b, c]) =&gt; ...)
The destructuring example defines a const object that doesn't contain the city property used in the subsequent examples. 
One thing that kicked my ass a while ago was passing `null` to a function with a default specified expecting the default to be used - it won't be, only no parameter or specifically passing undefined. function foo (bar = 'baz') { return bar } foo() // baz foo(void 0) // baz foo(null) // null !! Also, missing sections for `async` and `await` ? 
There is no async/await because this guide seems to be about the ES6 revision -- async/await was ES7 (I think).
Nah, working on a PR for Ayo.js that supports ES2015 EXACTLY as mjs does, but with js extension. All the hard work was done by Node, but I think they missed the easy wins of supporting ESM as .js with a flag.