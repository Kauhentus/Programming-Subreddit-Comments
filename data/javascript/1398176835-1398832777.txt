Ooh, interesting. I've never run into this, but I suppose I haven't really looked into it, do you have an example of this?
&gt;Do you know any HTML, CSS and JavaScript or are you looking for a library to solve all your unique needs right off the bat? Yes, that would be nice. My problem is fairly general, but even if it weren't, should I feel bad about wanting to leverage work someone else has already done? &gt;If you rely on others to guide you through everything step by step, you'll miss a bunch of stuff you might learn trying to implement it yourself. What? I looked at the examples and commented on the codebase of notifyjs and in my original post I mentioned I could just use jQuery.slideUp to create my own solution. &gt;If you check the DOM after clicking on one of the examples you'll see that there is a container for all the notification elements with a class name of "notifyjs-corner" which you could probably style to achieve the desired result. I previously said I could easily implement an expandable panel inside the notify.js element;I don't need a lesson in javascript selectors or inspecting an element using a browser. I like to do things myself so I don't miss a bunch of stuff ;)
Yes, I was thinking about that. I've done some cool stuff with canvas before, like [Conways Game of Life](http://diegosalazar.github.io/ConwaysGameOfLife/). For CircleWaves I sort just threw it together quickly but I might change it to use canvas since it would most likely animate much smoother. Thanks!
Awesome, that sounds pretty easy. Thanks for the tip!
Yep, I've worked with canvas before and it most certainly would out perform the "hacked DIVs" approach. And I likely will convert it to Canvas once I have more time. Though, I'm curious to see how using CSS keyframe animations (as Paul Irish suggested) would perform.
My comment was well intentioned. The task is easy regarless of the terms as I said. jQuery or no. It felt as if you were not ready to put in 5 minutes to adopt notifyjs to your needs and wanted someone else to find a perfect solution for you instead. You wouldn't be the first one to want others to do their simple job on this subreddit so excuse me if I'm just pointing out the obvious.
- What is Bower? - A package manager - How do I install it? - Use npm - What's npm? - A package manager - .... Credit: https://twitter.com/BlueBoxTraveler/status/453685413115203584
As others have said, there's way too much going on in this single file. Typically, the `src` directory should be a full set of files and folders which represent the source, and then you run Grunt/Gulp/etc. which builds your final .js and .min.js files. I can see at least the following different concerns, which IMO should have their own file (or series of files): 1. string utils 2. error handling 3. adapters 4. parser 5. Pomo itself Come to think of it, you could just pull in [underscore.string](https://github.com/epeli/underscore.string), which implements `sprintf` using the same reference implementation that you used. ---- Also disagree with this: &gt; /** &gt; * Add trimming to the String type. It is something that should be present anyway. &gt; */ &gt; if (!String.prototype.trim) { &gt; String.prototype.trim = function () { &gt; return this.replace(/^\s+|\s+$/g, ''); &gt; }; &gt; } Philosophically speaking, yes, it _should_ be present... but that doesn't mean that you should come along and "fix" it if it's not IMO. ---- Minor nit-pick, but none of these replaces need to be in a character class (the `[]`'s); also, `"` isn't a special character in regex and thus doesn't need to be escaped. &gt; .replace(/[\"]/g, '\\"') &gt; .replace(/[\\]/g, '\\') &gt; .replace(/[\/]/g, '\/') &gt; etc. Just write as: &gt; .replace(/"/g, '\\"') &gt; .replace(/\\/g, '\\') &gt; .replace(/\//g, '\/') &gt; etc.
my friend makes pixel art and just likes to use photoshop. I'll send this to him and ask him to try it out and let you know what he thinks of it
&gt;The task is easy regarless of the terms as I said. jQuery or no. It's one line in jQuery and I know it will work perfectly in IE7+ using the 1.1x branch. And my project already has a jQuery dependency. I don't know what value you think you're adding by pointing out things like that. Cool to know you're a framework-less JavaScript god. I'm trying to get something done, not have a discussion about the task at hand. The point of this post is to find the best solution.
Absolutely hate sites that do this. Such a waste.
I was, Windows 7. It worked fine in Firefox for what it's worth. 
Ah, thanks for the clarification! That makes much more sense now.
hmmm... I do not like technology that does not work in Mozilla Firefox :(
Very clean write up. I would just mention that SVG, like any DOM material, benefits from good DOM manipulation technique. For instance, appendChild is better than insertAdjacentHTML which trumps innerHTML. And as always, using a DOMFragment will usually help reduce reflows when you apply several changes at once.
I don't know why you're losing time upsetting over this. As I said, I meant no harm and am sorry to have upset you. jQuery is great, not sure what you got the impression I was suggesting you shouldn't use it or that it's somehow bad. Initially I felt as if you were asking others to do your work beyond inquiry and that's that. &gt;I'm trying to get something done, not have a discussion about the task at hand. Well this is Reddit, not Stackoverflow. I'm pretty sure discussions are what it's for.
It should work in the current Firefox nightly (version 29). If not, please let me know!
This is the third installment of a blog/tutorial series I started on Functional Programming in JavaScript... This is still sort of laying a foundation for the "fun stuff", since this post is intended to reach a wide spectrum of experience levels, but I think it is always useful to go into these concepts in detail. Would love to hear any feedback! Thanks.
Interesting solution. An alternate route is static analysis (compile time), like with TypeScript. 
So I ran [this map](http://mcordes.me/sim/index.html#%5B%5Bnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null%5D,%5Bnull,"g","g","g","g","g","g","g","g","g","g","g","g","g","g"%5D,%5Bnull,"g","g","g","g","g","g","g","g","g","g","g","g","g","g"%5D,%5Bnull,"g","g","g","g","g","m","m","m","b","m","g","g","g","g"%5D,%5Bnull,"g","g","g","g","r","r","r","r","r","r","r","g","g","g"%5D,%5Bnull,"g","g","g","s","r","g","g","g","g","g","r","f","g","g"%5D,%5Bnull,"g","g","g","s","r","g","p","p","p","g","r","f","g","g"%5D,%5Bnull,"g","g","g","s","r","g","p","p","p","g","r","f","g","g"%5D,%5Bnull,"g","g","g","s","r","g","p","p","p","g","r","f","g","g"%5D,%5Bnull,"g","g","g","s","r","g","g","g","g","g","r","f","g","g"%5D,%5Bnull,"g","g","g","g","r","r","r","r","r","r","r","g","g","g"%5D,%5Bnull,"g","g","g","g","g","s","s","s","s","h","g","g","g","g"%5D,%5Bnull,"g","g","g","g","g","g","g","g","g","g","g","g","g","g"%5D,%5Bnull,"g","g","g","g","g","g","g","g","g","g","g","g","g","g"%5D,%5Bnull,"g","g","g","g","g","g","g","g","g","g","g","g","g","g"%5D%5D) for seven days, and here's what happened. The resident's first favorite activity appeared to be going for a swim, followed by going for a swim while drunk. It's fortunate they had infinite money, because they had $-1284.80 between them, with no sign of slowing down. When they weren't working for free... [Day 005 of Year 001 | 04:20] Lily received a check worth $0.0 for 9 hours of work ... they were stealing from the register... [Day 006 of Year 001 | 22:09] Joanna received a check worth $12.0 for 0 hours of work
Dude... wait..... what? http://www.wilfredgodfrey.com/hector/#1111
I've just begun reading and it looks nice. I was trying to go to your part 1, and your link at the beginning of the text to part 1 leads to part 2. 
I'm not sure if its you're falling short on reading or comprehension. I'll try again: &gt; It uploads your files to the BoxJS servers. Files are then minified, compiled (if coffeescript), concatenated and cached. The single compressed file is served from the boxjs server. ... BoxJS does all that stuff and RequireJS doesn't. BoxJS is *completely* different to RequireJS, a comparison is as good as useless because there aren't many similarities to begin with.
The money issue happened because I had to make every resident more stupid as they crashed the game later on, so they don't really know what to do when they're low on cash. Second, every worker have to work for a fixed period of time to get upgraded from trainee to whatever comes next, during this period they won't get paid (Had to do something like that in order to keep the shared cash at a reasonable amount, back when the residents were cleverer) *EDIT*: Apparently you can't link to maps on reddit, so I don't know what it looks like D:
Fixed! thanks.
All three parts read now, good stuff, will keep reading the next one(s).
Actually, that call is correct. The arguments object is always the arguments object from the current scope, which will be the nested function (with no named parameters), not the logWrapper function (with one parameter, `f`. var logWrapper = function (f) { var args1 = arguments; return function () { args1 !== arguments; // true // ... }; };
I realised that a wee bit too late. :) 
I'm a little curious to find out why it was crashing. 
dang. rookie mistake. updated!
It's the square brackets. If you update your app to encode [ to %5B and ] to %5D, and then decode these properly after the hash, it should work better. If you try to do a full proper URL [encode/decode](http://meyerweb.com/eric/tools/dencoder/), URLs start to get a little messy. Here's the, um, block: [[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],[null,"g","g","g","g","g","g","g","g","g","g","g","g","g","g"],[null,"g","g","g","g","g","g","g","g","g","g","g","g","g","g"],[null,"g","g","g","g","g","m","m","m","b","m","g","g","g","g"],[null,"g","g","g","g","r","r","r","r","r","r","r","g","g","g"],[null,"g","g","g","s","r","g","g","g","g","g","r","f","g","g"],[null,"g","g","g","s","r","g","p","p","p","g","r","f","g","g"],[null,"g","g","g","s","r","g","p","p","p","g","r","f","g","g"],[null,"g","g","g","s","r","g","p","p","p","g","r","f","g","g"],[null,"g","g","g","s","r","g","g","g","g","g","r","f","g","g"],[null,"g","g","g","g","r","r","r","r","r","r","r","g","g","g"],[null,"g","g","g","g","g","s","s","s","s","h","g","g","g","g"],[null,"g","g","g","g","g","g","g","g","g","g","g","g","g","g"],[null,"g","g","g","g","g","g","g","g","g","g","g","g","g","g"],[null,"g","g","g","g","g","g","g","g","g","g","g","g","g","g"]]
The issues are with your if statements. Here's an example of one you got wrong: if("Hug") alert("Ouch, the bear rips you to shreds and tears you 8 new assholes"); if statements take a boolean condition between the two parentheses - an expression that can be seen as either "true" or "false". What you did here was give it the string "Hug". Since you didn't compare it to anything, it tries to convert that string to a true/false value. Javascript sees all non-empty strings as true, so the if statement is executed. You have two options for fixing this. You can either compare it to something (in this case, I assume you want to check if useranswer is equal to "Hug"): if (useranswer === "Hug") alert("Ouch, the bear rips you to shreds and tears you 8 new assholes"); Or even better, you can use a [switch statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch): switch (useranswer) { case "Hug": alert("Ouch, the bear rips you to shreds and tears you 8 new assholes"); break; case "Run": alert("You fell and broke your neck, dumbass"); break; } There are a bunch of other issues with the code (the response to the prompt "You look for a light switch, [...]" is never saved, the hug/run/flip if statements aren't inside the look if statement, you seem to not know about curly brackets, and I could keep going) - I'd recommend you have a look at some of the beginner tutorials out there. I can recommend [CodeAcademy](http://www.codecademy.com/).
I still don't see how `this` is harmful.
Callbacks are the strongest case against it. "this" will not refer to your object anymore, and that is counterintuitive behavior inside a method. You can work around this by writing "var self = this;" at the top of methods that involve callbacks, but since that is so often nearly all of them, you might as well follow the "self pattern" and write it only once.
your script initially set with some sets of colour and so does in the onclick script? Why do the same colouring? http://jsfiddle.net/6pYCT/
"this" considered harmful if you don't know Javascript.
This is awesome.
How does this compare to [jekyll](http://jekyllrb.com/)? It seems quite similar to me, but what do you think is better about techy?
Sleepy programmers should use `'use strict';` then, as it doesn't fall back to the global object if you forget to bind some context when passing functions, so attempts to access `this.&lt;whatever&gt;` will throw errors :)
Very good point. I got the same feedback from some other people too. I recently pushed a change where if you don't pass the level resets and your last score is displayed next to best. Thanks for trying it out!
Between the lack of an example (a jpeg, seriously?) and the stupid 'share this' box floating **on top of the text**, I've decided to give this a pass.
http://en.wikipedia.org/wiki/Considered_harmful Considered harmful articles are considered harmful. LOL click bait!
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Considered harmful**](https://en.wikipedia.org/wiki/Considered%20harmful): [](#sfw) --- &gt;In [computer science](https://en.wikipedia.org/wiki/Computer_science) and related disciplines, __considered harmful__ is a phrase popularly used in the titles of diatribes and other critical essays (there are at least 65 such works ). It was popularized by [Edsger Dijkstra](https://en.wikipedia.org/wiki/Edsger_Dijkstra)'s letter *Go To Statement Considered Harmful*, published in the March 1968 *Communications of the [ACM](https://en.wikipedia.org/wiki/Association_for_Computing_Machinery)* (CACM), in which he criticized the excessive use of the [GOTO](https://en.wikipedia.org/wiki/GOTO) [statement](https://en.wikipedia.org/wiki/Statement_(programming\)) in [programming languages](https://en.wikipedia.org/wiki/Programming_language) of the day and advocated [structured programming](https://en.wikipedia.org/wiki/Structured_programming) instead. The original title of the letter, as submitted to CACM, was *A Case Against the Goto Statement*, but CACM editor [Niklaus Wirth](https://en.wikipedia.org/wiki/Niklaus_Wirth) changed the title to the now immortalized *Go To Statement Considered Harmful*. Regarding this new title, [Donald Knuth](https://en.wikipedia.org/wiki/Donald_Knuth) quipped that "[Dr. Goto](https://en.wikipedia.org/wiki/Eiichi_Goto) cheerfully complained that he was always being eliminated." &gt;==== &gt;[**Image**](https://i.imgur.com/OVgeRRE.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Achievements_considered_harmful.jpg) - *"Achievements considered harmful?" presentation at the 2010 Game Developers Conference* --- ^Interesting: [^Goto](https://en.wikipedia.org/wiki/Goto) ^| [^Structured ^programming](https://en.wikipedia.org/wiki/Structured_programming) ^| [^Fortran](https://en.wikipedia.org/wiki/Fortran) ^| [^Programming ^language](https://en.wikipedia.org/wiki/Programming_language) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgzcsuy) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgzcsuy)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Your coding style is wrong, it is just ugly to put CSS code into JavaScript, avoid it. In more detail: * avoid using elem.style property, use css classes instead. * avoid using elem.onclick property, use addEventListener or 3rd party methods, like JQuery's ^on instead. A much better approach could be something similar to this: [jsfiddle](http://jsfiddle.net/6pYCT/1/) You can read some useful stuff about modularizing, and putting right code to the right place [here](http://www.slideshare.net/fgalassi/refactoring-to-unobtrusive-javascript)
Upon further reading I don't think I'd ever actually use this. The biggest reason is that it uses a proprietary template system, so pre-existing themes are out. The second reason is it is using gulp. I guess that's not really a problem, so long as it serves, but its an unnecessary dependency as far as I can tell. (just use [glob](https://www.npmjs.org/package/glob) to get the files) The third reason is because it's trying to get me to use AbsurdJS. I could turn that off, but why include it in the first place. I have the philosophy that less is more when it comes to dependancies.
in ES6 arrow functions are automatically bound. Not useful ATM but eventually...
Your debugger also told you which line the error occurred on, which would lead you to products_calcTotal() which is indeed not a function. This was probably supposed to be products.calc_Total(), which is a method defined in your projects object. Aside from that, I'd recommend restructuring your code a bit, it's sort of upside down. Hoisting is the only reason it would work, but it makes it a bit harder to follow and debug for humans! You also use the variable "total" before defining it. Happy coding and keep on trekking 
Image() is a bit old-school, similar to : var img = document.createElement("IMG") See : https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement#Example According to MDN it's been available since DOM level 1, but if memory serves correct this is older than that -- pretty sure it started as a proprietary IE constructor like a decade ago, but I can't find anything backing that up. 
This takes advantage of the fact that you can add a custom property to any object in javascript. Setting the 'href' on an Image would normally have no effect, but it is referenced in the 'slideit' function to set the anchor's href attribute. &lt;script type="text/javascript"&gt; var image1 = new Image(); image1.src = "images/slide1.png"; image1.href = "http://example.com/site1"; var image2 = new Image(); image2.src = "images/slide2.png"; image2.href = "http://example.com/site1"; &lt;/script&gt; &lt;div id="slides"&gt; &lt;a href="#"&gt;&lt;img width="702" height="226" name="slide" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; var step = 1; function slideit() { var img = document.images.slide; var a = img.parentNode; img.src = window["image" + step + ".src"]; a.href = window["image" + step + ".href"]; if(step&lt;2) step++; else step=1; setTimeout("slideit()",10000); } &lt;/script&gt; I've replaced the use of 'eval' with a better alternative... using this is still pretty dirty and pollutes the global namespace -- but considering you're already using it I imagine your needs are met and the script just needs to be adapted without completely rewriting it. 
 Thanks for providing the link- I unwittingly clicked on the "download here" link and instantly rage-closed my browser window.
An interesting point. Would this work for a case like setTimeout(), where the object you seem to get stuck with in your callback is the timer object? 
Size != execution speed. Size only affects loading speed. While jQuery would take longer to load, it could be faster at executing. Also if you are on desktop and using a cdn, jQuery is likely faster to load.
Look into .call, .apply, and .bind Once you master them you should *almost* never need to use "self".
OK, __might__ have gotten it right this time. Is it looking any better? - Added a couple more tests, especially browser based but there's more to come - Exploded the source into a bunch of smaller mostly-coherent pieces. I'm wondering how to avoid the IIFE-start and IIFE-end blocks, they suck a bit as they are right now. - Provided gulp tasks for building and testing Will later try to kill the String.trim too, to see what happens. 
Come at me bro http://www.wilfredgodfrey.com/hector/#2311
Mouse cursor gets slower and slower and slower.
Hmm, I've run tests for 30 minutes without anything slowing down. Which browser, browser version and platform are you on?
Do you just abandon those browsers? 
Oh wow, great job! Now the next step would be to convert those files into modules, and there's a couple options to go with: CJS (CommonJS), which is probably the most popular, and AMD (Async Module Definition), which is also very useful. It's a very different way of thinking about JS when all you're used to is script tags and global variables, but it's been one of the better improvements that the ecosystem has created in the past several years (largely driven by NodeJS I believe). Here's a chapter from a really good book that should get you started: [Learning JavaScript Design Patterns: Modern Modular JavaScript Design Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modularjavascript)
Sorry, I can't replicate this with near identical specs, even on a crappy slow VM. If someone else has a problem with this I'll look into it, but this seems to be a fringe case.
Didnt read the post, but its awesome to know Math.max takes more than 2 arguments. If I knew that previously I must have forgotten because I've only used it recently to get the max of 2 numbers. Still, interesting to know
I would suggest to simply read and write more. Study general programming patterns to give yourself a broader understanding of programming, and then apply that knowledge to JS. When writing code, always have a set outcome of what you want to better understand to keep yourself focused and make sure you don't get to deep into an area that really isn't helping yourself get better.
Techy uses Gulp mainly because I wanted to work with streams. Glob doesn't give me this approach and I have to create some temporary files as Grunt is doing. I didn't get your point about the themes. Techy is actually based on themes and I started it with this in mind.
I think this video would be more helpful. It's a talk from one of the principal developers of React: http://youtu.be/DgVS-zXgMTk
Didn't know it was free online, I bought it the day it was released. Please buy a beer with this money, you deserve it.
http://blog.mozilla.org/webdev/2012/05/04/how-browser-engines-work/ I think you mean this?
which will not be for a pretty good while
youll be fine, i would just buy it. 2.0 is on the horizon and there will be some pretty big changes, but thats not coming out for a while
learn c, erlang, be a senior developer instead a senior js developer.
Crockford does a really good job at explaining the DOM API, reflows and repaints. Youtube search is not working at the moment where I am but I'll post the video later.
Fixed it, you can now link to maps :D 
It had something to do with them taking too long to think; tried to limit their thinking time, but it didn't seem to work... Anyhow, I've given them back their old brain so if you want to take a look at it you can! *EDIT*: It's [this](https://github.com/Mobilpadde/Simulator-Two/blob/master/assets/js/homeland.js#L169-L205) part of the code.
Read Joel's article on [The Duct Tape Programmer](http://www.joelonsoftware.com/items/2009/09/23.html). Excerpt: &gt;Here is why I like duct tape programmers. Sometimes, you’re on a team, and you’re busy banging out the code, and somebody comes up to your desk, coffee mug in hand, and starts rattling on about how if you use multi-threaded COM apartments, your app will be 34% sparklier, and it’s not even that hard, because he’s written a bunch of templates, and all you have to do is multiply-inherit from 17 of his templates, each taking an average of 4 arguments, and you barely even have to write the body of the function. It’s just a gigantic list of multiple-inheritance from different classes and hey, presto, multi-apartment threaded COM. And your eyes are swimming, and you have no friggin’ idea what this frigtard is talking about, but he just won’t go away, and even if he does go away, he’s just going back into his office to write more of his clever classes constructed entirely from multiple inheritance from templates, without a single implementation body at all, and it’s going to crash like crazy and you’re going to get paged at night to come in and try to figure it out because he’ll be at some goddamn “Design Patterns” meetup.
Yep, I think it's the only real drawback of it's API. But hey, it's just an interface, so if I want to replace jQuery with your lib, I just have to write that part ! Anyway, it's a great addition to the current ecosystem - I myself try to avoid using all these bloated DOM libraries.
have you ever considered that maybe you're just not very bright
Cmon now. The level of discourse in this subreddit has absolutely plummeted lately.
To all the people who asked me why my company and I don't use these things (just yesterday), this is the answer, but I doubt they read these things.
It's an incremental process. Ruby helped popularize mapping and reducing as first-class behaviour rather than special looping magic. Google popularizing its distributed MapReduce didn't hurt. Ruby stole that from Smalltalk, of course. That mentality leeched over into JavaScript in some places when people writing Ruby back ends started to write "single page applications," as they were called. Now the pendulum has swung and promises are a chance for JavaScript to get out in front of popular languages rather than lamely limp along copying ides like Java has been doing for years.
I came across that exact Stack Overflow question awhile ago and it did take me awhile to figure it out. It's not the best example, and the concept is a little complicated. However, the fact that Angular is different than what you're used to doesn't make it worse. Take a look at this example of an explanation of custom objects in JS: http://stackoverflow.com/a/1598077/1351741 For someone new to Javascript generally (like me) and coming from a C#/Java background, both of these concepts seem unnecessarily complicated and obscure. Constructors, OO, and factories are a pretty straightforward concept in anything other than JS. In my opinion Angular takes what is already a mess, rife for abuse (Javascript) and makes it into something that is at least unit testable and modular. 
both suggestions work but &lt;a href="#"&gt;&lt;img width="702" height="226" name="slide" /&gt;&lt;/a&gt; sets all images in the slide show and wont work.
If that's all you're trying to do a) Angular isn't the right solution to your problem. b) If you are using Angular, you wouldn't need Factories to do it. 
Angular is a bit of an odd duck in the JS world. It is pretty complex and I'm convinced that most of that complexity arises from their need to be fully testable. If they would have went with a 90% testable, they probably would have made fewer of these weird decisions. There is nothing wrong with a factory, service, or other thing in javascript. There are problems when those things are taken to the extreme. I personally see JS as moving to a refreshing direction. We are moving away from the giant awful JS hodgepodges and into more structured programming and paradigms. JS is getting best practices and its about time.
There's legit uses for all the big and complex frameworks, but I think there's a pretty unfortunate "complexity rush" with JS developers. Previous job descriptions of "web developer with a good knowledge of html/css/js" are turning to "haml/jade/angular/scss/coffeescript/grunt/gulp/nosql/node" and at least I feel like there's pressure to learn and use it all to remain relevant and competitive in the job market. People start forcing these things to basic tasks and simple websites, creating a huge learning curve and layer of abstraction. Don't get me wrong, I like learning new things and I love some of the new tools like task runners, but getting into the field is becoming increasingly difficult and keeping up requires quite a bit of effort.
Thanks for your response. I have a lot of more code in my gameloop, including a clearReact and save and restore on the canvas. I was surprised to see it pop up in the fiddle as well as my game, at least my game logic isn't bringing it down. I'm mostly using the pattern because it seemed like a free solution to what I had already spent 1-2 hours implementing (dynamically drawing and translating sprites and rects based on the player position in the space)
&gt; both of these concepts seem unnecessarily complicated and obscure It might be because using JS in a purely OO manner is akin to sticking a square peg in a round hole. It isn't Java, it isn't C#. Trying to treat it as such is difficult and painful to say the least 
FYI, you accidentally double posted this comment
tl;dr; patterns in js? Screw you guys, I'm going home
This kind of shit always amazes me. You've got Hero coders on the one hand that are full of enough self belief to write their own framework per project (and inflict that on all those who come to maintain it's undocumented glory later) - and Enterprise grognards that would rather spend their time tooling up a monolithic transpiling build chain than simply get to grips with some DOM manipulation (which is always fun when they bounce off some of the cross browser horrors that native JS devs live with every day). At some point, you'll build up enough repeating code that you'll save it out as a re-usable component. Eventually, you have a library. Then you have a framework. If you write it yourself, then you're confident enough to get under the bonnet - if it's someone elses, then you rage against the Twittersphere while trying to figure out how this godawful maguffin is put together (until you figure that bit out, then you go quiet and knock shit out at a rapid pace until the next roadblock). The target always moves, most software turns to unmanageable shit that culminates in a rewrite, the framework is not the problem.
He reacts to documentation the way Jon Stewart reacts to video clips of Republicans.
That was a terrible article and I feel dumber for reading it. He is the smartest dev that has ever existed and java devs are idiots for creating apps where thousands of devs can contribute to complex code without breaking things.
I understand his critique, and I was making this exact point yesterday to a friend who wanted to know the difference between s/p/f in Angular, but his rant against using Angular is undermined by mentioning that he uses Facebook React. Really? You like putting an arbitrary XML standard in your JS templating? Or, if you don't use that "feature", recreating the DOM in a third-party library (React.DOM.div)? How the hell is that better than putting non-obtrusive HTML5 valid 'data-' tags on DOM elements for interpretation by Angular? I can take any valid HTML layout and make it 'Angular enabled' without breaking any rules or making up new values for the type attribute inside a script tag. This also means that, at any point, if I want to ditch Angular, I can just remove Angular, and nothing else breaks, I just have a bunch of leftover valid tags. It's called separation of concerns. If I want to ditch React...I can't. The render logic is inextricably linked to to the data model and internal plumbing of the library. The message here should be about using whatever framework works for you at the moment, and if something seems too complex (transclusion? jsx templating?) it's probably bullshit. Instead we get a click-bait rant with no honest suggestions on how to fix the problem. Also, Erlang video-encoding is the pinnacle of human achievement, or something.
Is it just me that missed the whole point of this article? Factories and services really aren't that complicated at all. It's basically just a way of taking data and http requests out of your controllers, separation of concerns. I'm not even a professional software developer. I make apps in my spare time and transitioned from jQuery. If you're making something simple you could benefit from using just templating. It's seems a strange notion to condemn what's actually a very elegant framework just because it HAS features like factories. The bloggers attitude seems to be "I don't like the terminology, I don't understand it and fuck anyone who does." No one's forcing you to use either Angular or these particular features...
I've just gotten interested in making static sites when I decided to make a site with github pages. Their recommendation to use jekyll didn't appeal to me so I tried to make something I liked better. I haven't had time to get require-text to work properly, so I've been creating some .json files, but the markdown is rendered on the client, making a lot of the maintenance of the content pretty easy. Once I get the require-text module working correctly, I won't have to do any modification to the .md files before they are passed to the client for rendering. It's still a work in progress, but I think that the idea is pretty nifty. At the moment, the content is created in wiki fashion, but getting it to handle journal entries and such shouldn't be very difficult. I just put this together in the last couple of days. https://umeboshi2.github.io/
... b-b-b-but my manager's bosses boss told him that everything we code has to be in an MVC framework because "that's where the web is headed". He has an MBA so he must know what he's talking about... /s
I agree, but so having this question as a way to show that the candidate knows it doesn't make sense is useful. If the candidate just happens to write JavaScript on the side but mostly writes Ruby (for example), this question will probably trip them up.
&gt; changing times It seems more like he's saying that time is literally repeating as opposed to progressing. 
What did I just read? This guy haven't learned Angular or understood any principles behind it, and the result: He's fucking mad. Maybe some of points make vaguely sense but mostly I feel I wasted my time reading this shit.
&gt; Sure, if you're building a full-javascript-stack-implementation of your product and you plan on having thousands of concurrent customers all able to hit your website and API simultaneously....maybe you need to start thinking about these things Er... why would I be thinking about these things in client-side code? Or are we talking about node.js all of a sudden? I thought the article was about angular.js? If I plan on having thousands of concurrent customers, I'm designing robust, scalable server-side code. Whether or not I use angular.js is irrelevant to that. 
Will they copulate and increase the population?
&gt; That was great for people like me who wanted to get paid enterprise rates but didn't want to have to put up with layers of awful "best practises" and performance problems that came from the irrational fear of letting anybody who wasn't a DBA touch the database. I don't think that's irrational at all. Only the database guy (or at least not everyone) gets to fiddle with the database? Fine. 
I could tell where he was going when he brought up "Hello World". Well of course when you try to do something as simple as "hello world" in an enterprise environment it's going to look ridiculous. It's the same argument as this: I just want to go from my house to the end of the block. And you're telling me I've got to invent internal combustion, vulcanization, road paving, build a factory and manufacture cars? Utterly ridiculous! All this infrastructure is worthless and only makes our lives worse! ... except it's a straw-code argument. We don't build roads and cars to go 100 feet. We build roads and cars to go thousands of miles. Just like we don't build enterprise frameworks to print "Hello World". Hello World factories are ridiculous, which doesn't necessarily make all code factories ridiculous. Some people obviously can (and do!) take things to extremes in the opposite direction, but there's a time and a place for enterprise javascript. I would much rather do this kind of coding in a framework designed for enterprises, but the rabid pro-HTML5 crowd decried Silverlight and Flash and pretty much killed all client-side enterprise frameworks. So now we're stuck with Javascript. 
`&lt;rant&gt;` The first thing would be to abandon the _“It’s Just JavaScript”_ slogan/tagline. Sure, the end result may be JS, but CS isn't the end result, and thus CS != JS. Seriously, would you consider C/C++ code targeting Emscripten as "just JavaScript"? I think most rational people probably wouldn't, so I don't get why CS tries to make that argument. `&lt;/rant&gt;` As for a more targeted criticism of OP's article, many of the proposed syntaxes aren't an improvement on standard CS syntax. I do like that some of the code more closely resembles JS, but the proposed uses of `**` and `&amp;` make the code look more like C/C++ than JS.
Oh, I didn't know that RequireJS didn't do that. So, your statement makes a lot of sense now that I know the answer to the original question. Thanks!
&gt; npm install a module and have it JUST WORK then you need a framework like Angular. That is of course, if you don't want to use any modules from NPM without having to wrap it and stuff it into the framework. You could do all of that, no doubt. But there are times when browserify works just fine. The browser is not special, the same patterns used for node are easily adapted to the front end. 
&gt; would you consider C/C++ code targeting Emscripten as "just JavaScript"? I think most rational people probably wouldn't, so I don't get why CS tries to make that argument. The validity of the argument rests on the question of whether CS's *semantics* are the same as JS's semantics. C++ semantics are radically different, for example C++ supports private and protected inheritance. It supports non-virtual member functions. It supports programmer-defined coercion. It has programmable operators. Its classes are not metaobjects. CoffeeScript semantics are almost 100% identical to a subset of JavaScript semantics, so it's reasonable for CoffeeScript to make that claim. Whether that's a good thing, on the other hand... While that is CoffeeScript's greatest strength, it also makes it completely optional. I *like* using CoffeeScript, but I can't make the claim that my project would seriously suffer without it. Whereas, if I were using ClojureScript, I think I would find it very difficult to downgrade back to JavaScript. 
From his site: &gt; My ideal contract length is between 2-6 weeks If I could drop projects and walk away after this short period of time, I'd probably have his opinion too. I have maintained code developed by people like this. *He is the problem, not the solution.* **Edit: [damn... trolled](https://twitter.com/RobAshton/status/458973245333848064).
You're right, I meant to say an npm like repository.
If it's not an SPA, then there's not really much point in a framework - but it doesn't take long for the customer to expand scope until you need one. Unless you're working on five page "show and tells" with a bit of contact form validation/tooltips/hero boxes, your clientside can get beefy real quick.
So have the submissions apparently..
Well presumably if you're part of a team maintaining and contributing to a project it would be better if it was modular and testable etc?
I think the contrived architecture of angular requires your code to be thoroughly tested. I haven't had any problems testing Backbone or CanJS apps so I see the "angular was build with testing in mind" claim as a cover for the fact that the testing came to Angular as a result of complex architecture. Seems to me the process was more like this: - hey guys, I've implemented directives - cool. how do we test them? - hm... let me think about ... one week later - guys, here are the 10 lines of code you must write before executing the tests for directives while other frameworks go and say: "we have this new component/class/whaterver which is an object with a specific API that you can test like you would with any other object"
I can see that the semantics might be congruous, however, it's not just semantics that defines a language; it's semantics + syntax. Languages that share semantics yet not syntax are not equivalent, just as languages that share syntax but not semantics are not equivalent. I'd have no problem if the tagline was "Semantically the same as JS", but to claim _"It's just JavaScript"_, and then conveniently gloss over the fact that the syntax is radically different, makes it a dishonest (or at least, factually incorrect) claim.
Reminded me of the classic [how to build a spice rack](http://discuss.joelonsoftware.com/?joel.3.219431.12). 
I am not sure. Is there a way to tell? Our company uses Bluecoat to censor content.
This guy likes to complain about other people being the problem but *he actually is the problem*.
THIS^ I feel like most the people who write these rants simply have a naive view of how the web works. Many of these frameworks exist for a reason and do simplify real problems that really are just inherently complex. The introduction of asynchrony into the core of everything JavaScript is an inherent complexity that requires complex solutions. Promises for example, are an amazingly innovative way to restore a lot of the goodies we had with synchronous code while still gleaning the benefits of asynchronous code. Even still, promises are very complicated for a beginner. It's not like some egg head just invented promises for no reason other than to confuse people like the author of this post. I'm not saying all frameworks or libraries are useful simply because they exist, but I would argue that most of the popular ones (re: Angular) are popular for a reason. Many, if not most of the developers using these tools actually do grok what they're doing, even if others choose to believe everyone else is just dumb and building complicated stuff for no reason. Use the right tool for the right job. ps - I bet he's a PHP fan too ;)
Definitely chorkled @ 'monolithic transpiling build chain'. BBBut I need to GulpGrunt my SASSLess Compass Coffeescript ..... !
Big companies have many developers and not all of them are brilliant or experienced. Those horrible Java projects allow junior developers to contribute code with minimal risk. Angular is one of the first frameworks that could allow multiple developers to work simultaneously on the same project while maintaining some sanity and separation. If this article had spoken about how frameworks are NOT the goal, the final product is the goal and there are many ways to accomplish your goal, including not using any framework, I would have been on board.
&gt; straw-code argument Stealin' that.
What pushes me the most is learning how to *program*. You can do a lot with JavaScript. Functional programming, reactive programming, object oriented programming, and other paradigms are totally applicable. If I were to give you advice on which direction to truly explore, I would say to learn about how functional programming can work in JavaScript. These two resources alone will teach you pretty much everything you need to know about JavaScript. Raganwald is becoming one of my personal JS heroes. JavaScript Spessore: A quick foray into what JavaScript is made out of at an object and function level. https://leanpub.com/javascript-spessore/read JavaScript Allonge: Applying functional paradigms to JavaScript structures. https://leanpub.com/javascript-allonge/read Honestly, if you can read through JavaScript Allonge even just once, you will be well on your way to being a 'Full-Time' JavaScript developer. Raganwald writes in a way that makes it seem like you've known JavaScript all your life! Beyond these inner workings of JS, there are other programming elements you should learn such as Design Patterns and Algorithm Design. Frameworks are just applied JS, and JS is just applied programming. Don't get caught up in the next 'Big Simple Framework' like Angular or Ember. They are just tools, and you'll only be able to wield them appropriately when you understand programming.
I think this problem is an epidemic in the current atmosphere. A high percentage of the 25 year olds in the current landscape with someday turn 45. Will they somehow become stupid? Will their brains atrophy? No, they'll probably just realize that jumping from one technology to the next to keep up with the "new hotness" every year is foolish. At one point or another, we all will realize that stability is actually a good thing. But we're gonna have to realize that we won't stay in our 20s forever. Nor should we TRY to. The current job market in my area is loaded with need for Rails developers. I don't believe this has anything to do with Rails being a great framework, but instead being the cool tech from 5 years ago. All of those devs have now moved on to Node and SPA/JS-framework-dujour. We'll find out if I'm right in about 5 years when Dice/Indeed/SimplyHired have a ton of openings for Node developers... and barely anything for the new hotness.
Well I learned a lot considering I've never really written javascript, or hacked anything like this together.
&gt; but getting into the field is becoming increasingly difficult and keeping up requires quite a bit of effort. A dark part of me thinks that's exactly why the frameworks lovers are doing it.
Not exactly, but new peasants will move in from time to time (Though, in case you don't want to wait, type `homeland.fill()` in your console)
Most of what you say makes sense except for the inevitability of frameworks. Major software products were built with libraries only until recently. Frameworks only started to be a thing with the rise of web development (my suspicion is because web frameworks sell themselves as an alternative to actually learning web dev.) I worry that frameworks are part of the problem, not part of the solution.
Pinesy are you referring to the TechCrunch hackathon?
I like number 6; since then I've dropped about 70 pounds! :D You might like my other videos as well, www.youtube.com/user/vidjadavemo/videos Cheers :)
&gt;If you are using Angular, you wouldn't need Factories to do it. This is the most important bit. Usually, if you're using Angular, you're using the services/providers that are *already* built out of the box. You never need to write your own. When you get to the point where the complexity of your application warrants writing your own services and providers, then it's probably also complex enough that using Angular's "enterprisey" patterns will save you maintenance headaches in the long run.
I've seen frameworks cost hundreds of thousands of dollars on multiple occasions. Bad development is framework agnostic.
There are a few different things you can do to check it. Step one, open the dev tools (hit F12) and make sure no errors are shown in the Console tab when you hit the up-/downvote buttons. Optionally hit the cog icon (upper right of dev tools, besides the close button) and tick "Log XMLHttpRequests", then try it again and make sure it logs something to console (should be "XHR finished loading: POST "http://www.reddit.com/api/vote""). Step two, try right-clicking an up-/downvote button, click "Inspect element" and make sure the onclick attribute of the div that's highlighted is equal to "$(this).vote(r.config.vote_hash, null, event)". If both of those pass without hiccups, try writing the following into the console (one line at a time), and tell me any errors that pop up: $("arrow").vote // should be "function (b,c,e,i){if( [...]" r.config.vote_hash // don't show us the value of this. Just make sure it's some long string :)
There are are very simple and clearly stated reasons for the complexity of angular. The pattern they are using is well known and is not their own invention: http://en.wikipedia.org/wiki/Inversion_of_control Generally it's a bad idea to criticize things from a place of pure ignorance. Let alone making your own ignorance the centerpiece of your criticisms.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Inversion of control**](https://en.wikipedia.org/wiki/Inversion%20of%20control): [](#sfw) --- &gt;In [software engineering](https://en.wikipedia.org/wiki/Software_engineering), __inversion of control__ (__IoC__) describes a design in which custom-written portions of a [computer program](https://en.wikipedia.org/wiki/Computer_program) receive the [flow of control](https://en.wikipedia.org/wiki/Control_flow) from a generic, [reusable library](https://en.wikipedia.org/wiki/Reusable_library). A [software architecture](https://en.wikipedia.org/wiki/Software_architecture) with this design inverts control as compared to traditional [procedural programming](https://en.wikipedia.org/wiki/Procedural_programming): in traditional programming, the custom code that expresses the purpose of the program [calls into](https://en.wikipedia.org/wiki/Function_call#Main_concepts) reusable libraries to take care of generic tasks, but with inversion of control, it is the reusable code that calls into the custom, or problem-specific, code. &gt; --- ^Interesting: [^Dependency ^injection](https://en.wikipedia.org/wiki/Dependency_injection) ^| [^Implicit ^invocation](https://en.wikipedia.org/wiki/Implicit_invocation) ^| [^Software ^framework](https://en.wikipedia.org/wiki/Software_framework) ^| [^Spring ^Framework](https://en.wikipedia.org/wiki/Spring_Framework) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ch008sm) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ch008sm)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
OK. Here is what I get when I try to upvote you: &gt; Uncaught TypeError: undefined is not a function (index):3 onclick When I try to press the **context** button, I get this (along with some other stuff—hope I've copied the right section): &gt;Denying load of chrome-extension://phhpajlkjeoakfmckfnogpnfeidgbhil/jquery-1.10.2.min.map. Resources must be listed in the web_accessible_resources manifest key in order to be loaded by pages outside the extension. ch000ez:1 &gt;GET http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js &gt;net::ERR_TOO_MANY_REDIRECTS ch000ez:1 &gt;Uncaught TypeError: undefined is not a function reddit-init.en-ca.vqu8eChJ-_M.js:126 &gt;Uncaught TypeError: Cannot read property 'init' of undefined reddit-init.en-ca.vqu8eChJ-_M.js:42 &gt;Uncaught ReferenceError: $ is not defined ch000ez?context=3:46 &gt;Uncaught TypeError: undefined is not a function When I right click and inspect element, I get this: &gt;&lt;div class="arrow up login-required" onclick="$(this).vote(r.config.vote_hash, null, event)" role="button" aria-label="upvote" tabindex="0" pairnum="1"&gt;&lt;/div&gt; &gt;&lt;div class="arrow down login-required" onclick="$(this).vote(r.config.vote_hash, null, event)" role="button" aria-label="downvote" tabindex="0" pairnum="1"&gt;&lt;/div&gt; And when I post what you wrote into the console, I get: &gt;$("arrow").vote // should be "function (b,c,e,i){if( [...]" TypeError: Cannot read property 'vote' of null When I type in the second line into the console, I get this: &gt;r.config.vote_hash // don't show us the value of this. Just make sure it's some long string :) "O7QRlJrdhT3+33ndBjItAWCLijn/in8X+kEsAHV+YKNEOK5xxOWtkyAp/1KknodqiGC8B6F0n2gVkUAMSQRZ1xHMX+fG/gY5T4nsnwJK+wYdErofjinsLiJnmuYjgvartJ9Dh6tHwHZPCkVLLW5DS6r2+oeytlLMaTRib9sDSo2w3J3b8r25njs=" I'll re-check this to make sure the formatting doesn't screw things up. I hope you'll get the gist of what's happening from this. 
Frameworks aren't really anything new...MV* (which lots of frameworks are built around) is a concept that has been around [since Smalltalk-76 \(from the 70s\)](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History). The problem isn't the tool, it's the people wielding the tool. We're using a bazooka to kill a fly sometimes and that's a problem. On the opposite end we're also trying to fight an army with a fly swatter. We should be making it a point to properly assess projects and use the right tool, not just think one tool fits all.
Do you have Reddit Hover Text installed? If so, try disabling it.
OK, I disabled it. In fact, I should try to disable all Reddit stuff for now. Anyway, I disabled Hover Text and I was able to use the CONTEXT menu, but I still can't upvote. Thank you for looking into this. I can still Reddit, and I don't mind if being broken at work, but, you know, myserious and all that. It only changed and stopped working in the last couple days.
Looks like, for whatever reason, the JQuery hosted by Google redirects to itself (or is intercepted by Bluecoat, which then refers to itself, ending in an infinite loop). Can you load http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js by opening it manually?
Ah. No. I just tried, but it is blocked and will not resolve. I wonder if there is an extension I could find that would localize this .JS and substitute it.
Second this. If you don't understand basic logic, programming logic, the language you're using, the libraries you're using, and the framework you're using, in roughly that order, then you're going to have a bad time.
JS evolution has been like reading lord of the flies. The wet ears can't separate the dogma from the good stuff, too much "look what I can do", not what can I do for you or your business. If it isn't about business sense then what the hell are you doing here? FYI node is the ultimate example of single-systemitis. "my little brain can't learn other existing and entrenched server side languages which are much better at processing data, javascript is so awesome, it is just like assembly language!". I would fire the first nitwit that installed node. Have fun reinventing everything that has already been done in a dozen different languages. Dumbest business idea ever. More solutions in search of a problem. Part of the problem there also is the middle techs, they read a glossy magazine and give their orders, hoping to be marketable.
Build stuff. Put it on github. Gather feedback from people and iterate/refactor/redesign furiously. Also read through the source of some of the top js projects there; send pull requests, open tickets, just engage with people who are really good at writing javascript (you'd be surprised to find a lot of them are very friendly). Stay persistent, don't get discouraged, and you'll level up in an incredibly short amount of time; good luck!
Hahahahahahah this is it!!!! Thank you so much!!!! hardwire!!
omg...you're the one!! i've been looking for!!!!!! I will definitely check out other videos!!! I didn't mean to offend you by...#6..my apology if it made you uncomfortable. I think i'm completely wrong with #8 though. You're on the video all the time!
i dont disagree, but where is the good system. There is no system with good tooling and limited overhead. Java and .net are too complex and expensive for casual use. php is a mess and lacks type safety. Rails is not too bad but you have to learn a language that has no other use and lacks type safety. Node is not the answer but what is?
Thanks for the compliment, and I'll second the whole 'cost of doing nothing' when it comes to client-side architecture. I've seen some truly troubling inline jQuery-only hack jobs in my recent experience, and I'm talking about within the past year. I'm a huge Resig fan, but if I ask a dev team at one of my customer sites what they are using client-side and I get an answer along the lines of "it's a jQuery-based architecture" combined with that pregnant pause that intimates their buzzword should have been enough to placate me, I know to stay the hell away from that project.
I don't totally agree. A lot of the patterns you see in angular are "testable" patterns (Factories? Services? Service factory providers? DI?). Just look the complexity that DI adds to the whole system, all for testing purposes. Java sees the same thing. Things get really complex really quickly when you try to apply all of the best practices of testing. You end up with big dependency injection frameworks, Mocking frameworks, and you design your classes with rules like "you can't use new in a method" to avoid problems with testing too deep. Strictly adhering to TDD can make things really complex really quickly.
My comment was more in response to the poster above, but I mostly agree with what you're saying. I feel that it's very advantageous to stay up to date with current technology. But I do fear this is leading to a massive amount of instability. There's nothing wrong with taking the time to learn a new framework with a sample project. The problem comes when we want to change gears every couple of years. Many larger "enterprisey" apps simply cannot pivot with the changing tide. It's definitely not that the developers aren't smart enough to grok the technology. For the web, sure that entire stack may be rebuilt in 5 years. For enterprise apps, people may well be using the same stack in 10 years. But the inverse is true as well. The number of recruiters that contact me about working in some PHP shop making 100 grand a year astounds me. The big thing keeping me from taking the bait is that I know I'd be working in a place where time is standing still, and I'd never get a chance to move forward. And I'm already not a fan of writing PHP.
Yes. I was basically trying to say that with my first paragraph, but that's a good way to put it. 
Any feedback on the downvotes? I thought it was interesting to see the commentary about Angular "screwing up JavaScript" and felt it would be nice to show the flipside on how easy it makes building simple apps ... but all feedback of course is welcome.
&gt; I would much rather do this kind of coding in a framework designed for enterprises, but the rabid pro-HTML5 crowd decried Silverlight and Flash and pretty much killed all client-side enterprise frameworks. So now we're stuck with Javascript. Apple killed flash. The Iphone became popular, adobe tried to get flash on the iphone, apple staunchly refused to put it there, and now flash is a dieing tech (I heard this from a former adobe employee who worked on the flash project and saw the writing on the walls and moved to my company.) BTW, don't tell /r/gamedev this, many of them live in denial about the death of flash. (They will cite some adobe VP who says "we are totally not killing flash... but seriously what company EVER says they are killing a tech? MS hasn't even said they are killing off siverlight, yet everyone sees the writing on the wall there).
Study.
No offense taken, I'm Canadian; we can't really ever be offended ;)
Can you load https://code.jquery.com/jquery-2.1.0.min.js ? If so, do the following: Install [Redirector](https://chrome.google.com/webstore/detail/redirector/lacckjdlmkdhcacjdodpjokfobckjclh/), and add the following rule: Match: http://ajax.googleapis.com/ajax/libs/jquery/* Substitution: * Replacement: https://code.jquery.com/jquery-2.1.0.min.js
The author, Rob Ashton, definitely already knows what Inversion of Control and Dependency Injection are. 
We are close, I can feel it. I am getting an error when I try to put an asterisk in the substitution field I am adding: Match field: http://ajax.googleapis.com/ajax/libs/jquery/* Substitution field: * Replacement field: https://code.jquery.com/jquery-2.1.0.min.js Do I have this correct? I believe it is throwing the error due to the asterist in the substitution field.
Very interesting library. I've worked on something similar, and ran into issues when trying to work with tangents (such as y=tan(x)). This seems to have the same issues. Haven't found a workaround, though.
I believe roughly 40% of the problems with how people write Javascript could be fixed by accepting that Javascript is not [that one language you wish you could write everything in].
Glad you got it working :)
No, YOU got it working, hahah. I learned something, too, for which Gold is a MORE than fair exchange. I could troubleshoot this myself next time with what I learned, so I am grateful to you. Please buy yourself a superhero cape (or a picture of one if you prefer). I'm not even sure what gold does, but here we are. Have a great day.
where's the deriving?
So in other words, nothing to do with JavaScript.
i hate the responsive design used on that page... the navigation scales without need for it, the content never scales down in width but goes left on high width, and the logo/name just has its own thing going on, sometimes having no left padding... ugh
In the equation box, type d/dx and then your formula. The underlying code for that is XCalc.createExpression("x\^2").derive()
NO/YES!!!!
By issues do you mean the way asymptotes are displayed?
Attitudes like this are why ageism is rampant in our industry.
Yes - because of the rather simple drawing method (move one pixel, calculate y-value, draw to point, repeat) the asymptotes are cut off, and a line is drawn to the next asymptote. Google have worked around this in their grapher, but I haven't had time to check how.
How big is your team? In a big team, it doesn't matter. Just hire people with diverse skill sets. In a small team that isn't dependent on a flashy UI, it's not going to matter. My current project only has a few thousand lines of JS, and only about 500 of these can be considered to have any real complexity. That means only one of us has to be able to be able to write JS above the level of copy and paste. (Even so, I've slowed down in writing JS because I'm not doing it every day now. The transaction costs are higher.) However, let's invert a project. Let's say that we have a complex front end attached to a fairly trivial back end. And we only have the budget for a small, non-'rockstar' team. Node.js is a good fit for that use case, because the advantage of browserify and common libraries can lower the cognitive overhead, which leads to fewer bugs and higher productivity. It doesn't fit my current project. It might fit my next one. Remember, we used to have many projects that didn't require polyglot programming. They were written in Delphi, Visual Basic or C++. 
MVC was invented for Smalltalk as an architectural style. It was never, ever a framework, nor was it intended to be. If you read that paper, you'll also see that it is nothing like the MVC being used today.
Fair enough. But as I said after that, the frameworks aren't the problem. It's how they're being used. 
No, the one I was referring to is this one: http://research.microsoft.com/en-us/events/womens-hackathon2014/
Apple may have been the final nail in the coffin, but they wouldn't have been able to hammer in that nail without a significant number of vocal web-plugin opponents making it known that not supporting Flash wouldn't be a death-knell to the iPhone platform.
Yep. I jumped from flash to JS myself. I missed the classic OOP parts of AS3 (which these MVC frameworks try to fix) but the DOM is so much better than anything Flash had it's not even funny. Flash hasn't been truly alive since what, 2009? It's only really used in banner ads.
This not a very specific question but I'll try to provide some tips. Reading through your spec is tedious and remembering it while thinking about an approach even more so. I'd suggest you create some test cases and use those as specification. Divide your code so that you can call something like `getFeeFor(date)`. This will make testing easier. I would try to come up with a data model that would let you store the fees/months so that you can change them later. Here's an example of how to save some (not yours) ranges: /** * The ranges for fees. * * Note, overlapping ranges are not valid. */ var feeRanges = { even: [{ from: 1, // 1-based month to: 4, fee: 100 // cost in cents }, { from: 5, to: 12, fee: 200 }], odd: [{ from: 1, to: 4, fee: 200 }, { from: 5, to: 10, fee: 300 }, { from: 11, to: 12, fee: 300 }] }; Then you can iterate the proper list until the given month falls in some range. If you wish to display the next fee you could create a separate function for getting that too, something like: `getNextFeeFor(date)`. Separate any code repeated from `getFeeFor` to its own function. Try to keep functions short and make each of them responsible for a single thing to achieve testability, readability and world peace. For example: displaying a modal dialog, creating the contents for it and getting a fee for a date are each completely different things. Edit: also note that `date.getMonth();` returns the month according to the user's local time settings.
I feel like they might use an algorithm that starts simple like you described, and then recursively (to a specified recursion limit) adds new points in between two existing points if the curvature between the points is larger than a set threshold. I'm not sure if that would completely get rid of the problem, but it would help.
A version of Jekyll written in Node (with no dependencies on Ruby) would be totally awesome. My blog uses Jekyll, and redeploying is slooooow due to how slow `apt-get install ruby1.9` and `gem install` are. Even when NPM is under load and having issues, it's still way faster. Also, this is a bit too opinionated for my tastes (templating, gulp, AbsurdJs).
https://github.com/wearefractal/glob-stream
Ha, actually this is a dependent of Gulp. glob-stream -&gt; vinyl-fs -&gt; gulp
&gt; An Angular "service" is a singleton object created by a "service factory". These service factories are functions which, in turn, are created by a "service provider". "The service providers are constructor functions". When instantiated they must contain a property called $get, which holds the service factory function. &gt; **What the actual fuck *is* this?** Whole article worth it for this.
Wait... you mean this *wasn't* a parody blog?
/r/coffeescript is where this should have been posted. 
I've often hit stumbling blocks while burning out small scripts where I've asked around on how to solve this problem, and almost universally I'd get an answer like "just us jQuery, it'll be able to do it for you with one line...". Just as invariably, I want to *learn*, and I especially don't want to litter random frameworks into my tiny scripts before I at least know what kind of headache it'll save me from. 
Successfully reproduced the issue when using your JSFiddle. I profiled before and after the issue appeared and even captured canvas frames before and after the issue appeared. Neither of those showed any differences. However, I found that the issue can be resolved by adding this before line 38: `ctx.beginPath();` So, as /u/mattdesl mentioned, it must be an issue with the path being added on to or something. This might be faster than having to do a save/restore.
Everytime i write JS code today, I feel like it will be completely outdated 3/4 years from now, and that is sad :( I still remember the time when we didn't use any library or framework and writing JS was fun... good times
I think we all need a cathartic blog post every once in a while. 
The guy doesn't know what the fuck he's talking about if he thinks that you need services or factories to print hello world with angular. The correct way to write a hello world page in Angular would be to not use Angular at all just a plain HTML page. Or if you really wanted to use some angular feature you'd just set some scope property in a controller.
Most of the explanations I've read for services, factories, providers, etc. in Angular are all fairly confusing at first, mostly because they usually explain it backwards. I believe it's what causes ignorant people to write rants like this because they've failed to understand the concepts and think the whole thing must be stupid. Explanations for these concepts tend to start with what appears to be the simple form, which is usually *service* or even *value*, and then go up the chain through factories and up to providers. In reality, all of them are the same thing: Providers. They should start by teaching what a provider is, what they do, why they're useful, how to use them, etc. Once they've illustrated enough examples, and it's clear that writing a providers generally involves a fair bit of boiler plate code that is basically the same for most cases, then they can move on to the shorthand versions: factories, services, values and constants.
I don't remember seeing it used anywhere, thanks for the update!
&gt; (my suspicion is because web frameworks sell themselves as an alternative to actually learning web dev.) This is my suspicion, as well.
The part that really rustles my jimmies is that this idiocy got enough upvotes that it showed up on my front page.
Looks like the script is running something from the reg key, using Script Encoder (http://msdn.microsoft.com/en-us/library/d14c8zsc(v=vs.84).aspx). My advice is to check the reg key and if you can delete the key or any links to it. 
&gt; my suspicion is because web frameworks sell themselves as an alternative to actually learning web dev There's just something about web frameworks that nearly guarantees that if you don't use one yourself, you believe that the people who do are only doing so because they're not very good programmers and can't be bothered to learn.
You have chosen an annoying title.
ehh? I felt like it was the opposite. There were a lot of people saying that apple's refusal to support flash was a terrible move. They effectively cut themselves out of a huge number of applications available at the time. (before the iPhone, flash was deployed everywhere). I think more the reason apple pushed against Flash is because it presented yet another programming paradigm for their environment. In fact, if they could get away with it, they probably would have banned javascript. Apple was pretty staunchly "everything must be Objective-C" in the early days of the Iphone. It is a recent event that they have loosened the restriction and allowed other frameworks/languages.
I heard some buzzwords from some important sounding person on a blog, so it must be true! 
&gt; There were a lot of people saying that apple's refusal to support flash was a terrible move. And then they actually tried to use it on a phone (with Android) and understood why it was a *bad, bad idea*.
:) I'm not saying it was a great idea. Just that a lot of people thought this would hurt iphone adoption. As you point out, flash isn't very high performance and most flash applications were developed with desktops in mind. I think that was another factor in apple's decision. They didn't want a poor experience for their users when webpages failed due to poorly coded flash apps that they couldn't control.
It seems intereseting but could you tell us more about what you are trying to plot or give reference? I don't even know what to google for. ( O_O ")
You could draw into a canvas object and then save the canvas data to a jpeg.
Those are some purdy rose coloured glasses you got on there. Writing JS /DOM before there were libraries/frameworks was a huge pain in the ass, you had to know each browser and all their quirks. Manually parsing XML *blech* no thank you.
Have you tried autoruns http://technet.microsoft.com/en-us/sysinternals/bb963902 ? Usually I use this tool to manage startup, logon, process ...
Basically how the algorithm works is it goes through a function and divides it into two segments separated by an operator where each segment (represented by brackets in this example) is its own object. For example, (x+1)\^2 + 3 gets divided into [(x+1)\^2] + [3], and then into [[(x+1)]\^[2]] + [3], and then finally into [[([x]+[1])]\^[2]] + [3]. Because the chain rule for derivation is recursive, it lends itself pretty well to having a function divided up into recursive segments. The part of the code that does this parsing is [here](https://github.com/pahgawk/XCalc/blob/master/js/XCalc.js#L874) and the part of the code that recursively applies the chain rule is [here](https://github.com/pahgawk/XCalc/blob/master/js/XCalc.js#L527).
After experimenting with Angular for a while, I ended up wanting to do realtime remote syncing, and ended up going with a custom service to utilize websockets. It seemed perfectly fine to me and worked well. I'm not sure why people have a problem with easy patterns?
If I were you I would sign up in [r/learnjavascript](http://www.reddit.com/r/learnjavascript). This sub is geared more toward people who are already JavaScript developers who want to share interesting links, and more advanced content. As for a starting point in learning, I would highly suggest starting with [Eloquent Javascript](http://eloquentjavascript.net/contents.html). It's a great book that covers a lot of ground and it has an interactive environment - sort of akin to chrome dev tools console - where you can test out code (and it's free - as in beer). Once you finish that, there are tons of resources on the [Mozilla Developer's Network](https://developer.mozilla.org/en-US/docs/Web/JavaScript) Also - and you can take this with a grain of salt if you like - I would be careful about saying that you "know html5". I work at a company that interviews people who regularly claim this and they often really mean that they've used the article, footer, and header tags within a project. Html5 is a collection of a lot of new tags, but it also involves quite a bit of new JavaScript api's: * Canvas * Web Sockets * Microdata * Messaging * Web Storage * Web Notifications * Server-sent events * Geolocation * Forms * File api ... and of course others. Some of these are functional in some browsers and not-so-much in others. I would say that you should at least have worked somewhat with a few of the api's before putting html5 on your resume. That's just my 2 cents. 
That's the real problem. How could there be ~200+ people that actually thought this was a legit article?
It's unfortunate you chose a terrible answer full of non-issues coming from a guy that has absolutely no idea what he's talking about.
That's your new "architect".
Lol, it's my new startup buddy. He's never actually built a product, he just fixes trainwrecks. Why it's so hard for him to do it all is beyond me. I think it's a mental block + laziness (he's not a UI guy).
You have to use the [File API](http://code.tutsplus.com/tutorials/toying-with-the-html5-filesystem-api--net-24719) load local files via javascript. 
He's exactly right. AngularJs is such a steaming pile of shit. I use Google Web Toolkit now, and thank god I never have to deal with javascript's == vs === and other crap any longer.
Okay, not to be annoying, but I'm learning and have only really gotten as far as doing all the khan academy and code academy courses on javaScript. Besides that I have been simply using a textEdit file with something like this: var sketchProc=function(processingInstance){ with (processingInstance){ size(400, 400); frameRate(30); fill(255,255,2); ellipse(200,200,50,50); }}; and I have been trying to learn by making games and then running said code through a browser. I really don't understand what that website is saying. Is there any simpler to get a image, either from a link or a local file? Something like var picture = getImage("image"); and then I can manipulate it with something like: image(picture,200,200)? If not I will try my best to learn/understand what is going on with that site. Thanks a lot.
I went and looked at the processing.js docs. Did you preload the image properly? That is the only way to use a local file. You can also try using a URL to load an image like the third example from the docs: http://processingjs.org/reference/loadImage_/
One could say that the frameworks are being used to enforce ideology upon a language with a great many ways to enable developers. Every framework I've used attempts to tie my hands and place restrictions on what I do.
The problem with frameworks is that they attempt to leapfrog the first 3.
It's unfortunate I chose to respond to something on reddit at all. 
I dunno if you think about it, had you actually showed them this article they might know that you didn't actually read it and that would reflect poorly... so now you know not to at least. Crisis averted.
Have you read the angular docs? They make FBEE look like the Poignant Guide. 
Well I wouldn't say _everything_ but what's wrong with hoping that you only have to contend with as few languages as possible doing what you normally do? By as few as possible, one sounds like a good deal. I mean, I certainly won't say it's crazy to work towards using only Javascript for an end-to-end web solution's (for example) plumbing, logic, glue, ORM etc. I certainly won't use it for styling, of course (as well as some other stuff it clearly wasn't made for) , but I see little reason not to use it for stuff it can potentially perform efficiently.
Hey buddy, ʸᵒᵘ ᵐᶦᵍʰᵗ ᵇᵉ ᵒᶰ ᵗʰᵉ ʷʳᵒᶰᵍ ˢᵘᵇ...
Nice. I've been working on similar tools, but using Typeface.js/Freetype to generate the paths and kerning offline, then using it for [canvas/WebGL effects](http://imgur.com/I8LnOU7). Cool to see an entirely different approach. Something I've found useful in my own lib is exposing the path simplification and triangulation options. eg. Adding random Steiner points produced a nicer wireframe for simple characters like "T", especially for animations and effects (eg exploding/cracking text).
[Here is the article](http://taligarsiel.com/Projects/howbrowserswork1.htm) that the author of the video refers too if you want to use it as a reference. For example, I found this gem. &gt; **[Dirty bit](https://www.youtube.com/watch?v=JwQZQygg3Lk) system** &gt; &gt; In order not to do a full layout for every small change, browser use a "[dirty bit](https://www.youtube.com/watch?v=JwQZQygg3Lk)" system. A renderer that is changed or added marks itself and its children as "dirty" - needing layout. &gt; &gt; There are two flags - "dirty" and "children are dirty". Children are dirty means that although the renderer itself may be ok, it has at least one child that needs a layout.
Trying this out today, figured y'all would be interested as well. Seems somewhat similar to React for the most part, but with a much more plug &amp; play style of creation (and no JSX). Built by the team at Segment.io, which has people like TJ Holowaychuk and Julian Gruber so you know it's most likely quality stuffs [Live Markdown editor example](http://jsfiddle.net/anthonyshort/QGK3r/light/)
The complexity is growing because what we're asking JavaScript to do a lot more than just make a few things on a web page dynamic. Early JS programming was mostly one-off throw aways. Once it starts moving into the back end or wanting to create complex single-page apps you start running into the same issues of complexity and maintainability that every other popular language has gone through. Mostly because maintainability and stability becomes more important than new features. 
&gt;and now in the workforce with only "Hello World" knowledge. Sorry to be a downer: but dogg... shit is real life out here: Learning javascript at a professional level has now become incredibly involved (compared to how it was just a few years back.) Prepare to work very hard at not only learning the language, but picking up software engineering and architecture while you're at it. People are basically building what used to be called a "back end" on the front end now, you can't just know how to glue together jQuery plugins.
Nice 
&gt; L ''Hurricane Bob'' ‏@RobAshton &gt; &gt; I was never one to let facts get in the way of a good rant.
&gt; The complexity is growing because what we're asking JavaScript to do a lot more than just make a few things on a web page dynamic. Which is fine. When you are building a large web app with 10 other developers, you can't just have one file with bunch of anonymous functions tied to DOM events. That's where you should definitely pick a framework and task runner, make unit tests and so on. My concern is just that all the complexity is making it's way to the cases where you really "just make a few things on a web page dynamic", your average websites. Everyone wants to keep up with the latest trends to remain relevant, but when they put that accordion menu or mobile navigation script behind a process involving git, gulp, bower and coffeescript and whatever, the maintenance won't become easier, the barrier of entry will only become higher. I'd say even the people who occasionally write a jQuery oneliner for a campaign site in ad agency feel a bit of pressure when web development jobs start listing 20 buzzwords they've never heard of. When you start to search this stuff, it can be pretty overwhelming. There's so many layers to it you might not have any idea what the readme.md is even talking about.
It's funny. He posts this guy's article which promotes /u/homoiconic s book. I smell a conspiracy /u/homoiconic ;) but seriously everyone...go read his book Also someone should probably point out that TCO is supposed to supported natively in es6. I didn't see that mentioned.
My average contract length is 3 - 14 days so tell me about short times and deadlines...
The proposed syntax looks like a teenager's tweet
&gt; In fact, if they could get away with it, they probably would have banned javascript. Apple was pretty staunchly "everything must be Objective-C" in the early days of the Iphone. In the *earliest* days, they were banning Objective-C and saying everything must be JS. I think they'd've kept that up if they could've gotten away with it. 
Then they rediscover make. Then its quirks. So they reinvent 10 new solutions to their build problem which they would not have if they kept things simple.
&gt; I've been writing a bit of Clojure and really enjoying myself. Aaaand there's nothing else to it. Some people cannot grasp the concept of doing actual work using a computer, so they tend to be "writing a bit of" %obscure_language%, circlejerk, and very little else.
I think eventually, the result of this over-complication trend will splash back the opposite way: lean, simple, minimalistic JS is bound to come back in style.
Why does this person hate commas so much
I have been using Handlebars in an SPA and it is a pretty smooth sail with a few exceptions: The helpers can get very messy when you start to have a lot of them. No inheritance nor out of the box partials (I wrote one myself that seem to work so far, but I think it should be included in the project itself.) For a side project I started a few days ago I choose Swig (which is not included in the article) because of the reasons above. I have read many people had problems using Swig in the browser, but a very simple make target solved all of the issues for me. Over all I like Handlebars simplicity and ideology better, but I have been much more productive with Swig. 
&gt; Never forget that Javascript hates you. This is a good example of "projection". JavaScript is not a being, it's a computer language - surely not the best there is, and definitely not conscient, let alone capable of feelings towards those who use it. If you hate JavaScript, you're usually using it wrong.
Non-functional is now more functional! Joking aside: you need reduceRight in this case. Other than that, I like this example, so have an upvote :)
&gt; Eventually, you have a library. ~~Then~~ When you *string enough libraries together you can wrap them all up into* ~~have~~ a framework. ftfy 
I thought about using typeface.js, but the problem is that it is doesn't really handle foreign languages. In general, I think it is pretty easy to get a 90% solution for text rendering, but pushing it to something that is close to 100% (as the browser already does for you) is extremely difficult. Also if you look at the code for that module all the path simplification and triangulation code is handled via separate modules, which you can easily use yourself to implement more advanced geometry processing: * https://github.com/mikolalysenko/surface-nets * https://github.com/mikolalysenko/simplify-planar-graph * https://github.com/mikolalysenko/planar-graph-to-polyline * https://github.com/mikolalysenko/triangulate-polyline * https://www.npmjs.org/package/poly2tri
Why is Underscore on this list?
I tried out handlebars, then swig, then eventually settled on Jade because of inheritance, blocks, mixins, and writing JS logic right in my templates.
Jade's syntax is a bit too funky for me and writing JS logic write in the template sounds like something that will get messy real quickly if you have more than 20 templates.
javascript -jquery : 2 950 000 000 results, javascript : 2 210 000 000 results WTF?
I'm using it with grunt-contrib-jade to generate static html, so it was useful for me to do simple things like: if dev script(src="//cdnjs.cloudflare.com/ajax/libs/modernizr/2.7.1/modernizr.min.js") else if prod script(src="js/modernizr-custom.min.js") So far I haven't done anything beyond that, but I do see what you're saying, it can getting messy. The most compelling reason was blocks (append/prepend/replace). They're amazing. I couldnt get them to work with swig, so I abandoned it. 
When you return an object inside a constructor, that object is returned when you use `new` *instead* of the object the constructor built for you. As a consequence, the newly-constructed object does not have its prototype and constructor set the way you might expect. In the case of your example, when you do `new Line(type, posX, posY)` you will get back an object whose constructor is set to `THREE.Line` and whose prototype is set to `THREE.Line.prototype`. If you extend your own `Line` prototype with more functionality, it won't be available on the object. You can get around this by using the implicit `this`... var Line = function (type, posX, posY) { 'use strict'; if (type === 'shark') { THREE.Line.call(this, lineGeometry.shark, lineMaterial); /*...*/ } In this case, rather than *creating* an object using `THREE.Line`, you are just invoking `THREE.Line`'s constructor logic on the object that was created for you. Alternately, you could set the properties explicitly on `obj` before you return it: obj.__proto__ = Line.prototype; obj.constructor = Line; And in both cases, you probably want to set `Line` to inherit from `THREE.Line`: Line.prototype = Object.create(THREE.Line.prototype); which means that all the `Line` objects you create with your own constructor also have the functionality available to `THREE.Line` objects. **Edit**: Let me be a bit more explicit about the way constructors work, in case it isn't clear to you or readers: A constructor is just a function like any other. When you invoke a function (call it `Constr`) using the `new` keyword... * A new, empty object is created. Call it `obj`. * The property `obj.constructor` is set to be `Constr`, and the property `obj.__proto__` is set to be `Constr.prototype`. (By default, every newly-defined function has a `prototype` property that is an empty object inheriting from `Object.prototype`.) * The body of `Constr` is then run, with the `this` reference pointing to `obj`. * If the return value of `Constr` is falsy, then return `obj`. Otherwise, return what `Constr` returned. Because a constructor is a function like any other, the following are equivalent: return new Constr(arg1, arg2, arg3); or var obj = {}; obj.__proto__ = Constr.prototype; obj.constructor = Constr; var result = Constr.call(obj, arg1, arg2, arg3); return result ? result : obj; This is why the first example works. (But only if you set `Line.prototype = Object.create(THREE.Line)`!) **Edit2**: fixed
I think the author is confusing parallelism and concurrency. 
Hah, kinda cool. But it'd be cooler if you used more tags, so that more things were draggable individually. 
You might give dart or typescript a shot (I like dart myself). With dart at least, you get the classic OOP with some pretty good language semantics and a pretty decent set of default libraries.
Oh yeah, ill be fixing up my personal site soon™ to do exactly that.
When you say window.onLoad, do you mean window.addEventListener('load', ...) ? You could be fighting with other JavaScript. However, I have not programmed an extension before, so I may be mistaken. Have you considered making your calculations lazy (i.e. not calculated until the moment the user requests them)? That could also fix your problem of images that are not loaded yet.
I've attempted the event listener idea with no avail - the problem persists. To the best of my knowledge, they function the same. I do in fact use window.onload(){stuff} As far as a lazy implementation goes, this information is pretty much required to be displayed as soon as the extension is opened (as per my requirements.) That's why I'm only executing the scripts after page fully loads and the crux of the issue. I've considered (and did, for a while) just implementing a wait on the whole damn page to ensure that they're loaded fully. Then I ran into 4k+ resolution images on shit tier internet and it made me rethink my solution...lol. Thank you for the reply.
I am a little confused about your first statement *"... it won't be available on the object."* Because I can call this function perfectly fine: var collision = SAT.testPolygonPolygon(line1.sat, line2.sat );
The company I used to work for developed something that sounds like what you are describing; check out https://www.owfgoss.org/
What I mean is this... var Line = function (type, posX, posY) {...} Line.prototype.posToString = function() { return '(' + [this.posX, this.posY] + ')'; }; This is a common way to add functionality to objects in JS, by adding functions to the prototype. But with the constructor as you wrote it, nothing ever has `Line.prototype` set as its prototype, so it can't access `posToString`.
Thanks for clearing that up.
Underscore has a templating framework built in. Backbone actually uses it by default. It probably still doesn't belong on this list. 
Personally, I wouldn't use the word crazy, I would use Fucking Awesome.
He wasn't saying Closure &gt; JS. He was just pointing out what really should be obvious: recursion is the functional approach to iterative constructs, but functions in JS are stateful, so they add to the stack on each call to maintain their state. The title is very misleading, because he's not saying 'Garbage' in the sense that it's bad to use JS for FP, he's saying that using FP as you would in functional languages incurs overhead. I agree that Closure examples would have been illustrative. Then again, I also feel like this article's audience is probably Clojure devs, not JavaScript devs.
If the apps are small enough I would refactor them to work together and share libraries, rather than glue them together through iframes. Modularize and refactor, then you'll have a maintainable app.
Why? The purpose of using `new` is to create a new instance -- but if you're not using that instance at all, then there's no reason to use `new`. Why not just use `this` in place of `obj`? Either way, the function as-is is actually not a constructor, it's a factory. Small but important difference.
If your using grunt why not use usemin? 
Yes I can see that it is a factory. I am trying to fix that. Sadly when I am updating the code like @rooktakesqeen told me to my line returns this in the console: [object, object] And trying to use *this* instead of obj like the following: this = new THREE.Line(lineGeometry.shark, lineMaterial); or like this: this = THREE.Line.call(lineGeometry.shark, lineMaterial); gives me an: *Uncaught ReferenceError: Invalid left-hand side in assignment*
I would advise against it for many reasons... performance being one, using an iframe is like opening up a new tab, so if you have 5 iframes on the same page, it's like having 5 tabs open. For some browsers, this could increase your memory footprint by 5x's without any code at all being run! There's also the fact that security makes interaction across iframes challenging, and this has been steadily getting more strict. If they don't need to communicate or share at all, then that may not be a concern, but if they do then you may one day wake up and suddenly everything's broken and you have to totally rethink your paradigm. Personally, I'd keep them all in the same page, modern libs are much safer to use simultaneously than they used to be. &gt; I'm thinking if something like web components would be a better/more of a 'modern' solution? I'd agree here, sounds like what they were made for, but they might be challenging to implement on top of your existing libs. 
Because that's a really hard concept to learn..... 
I think the downvotes are due solely to the author's choice of title. The article itself is well written and presented, but the title smacks of FP-smugness _and_ JS-bashing. Nobody likes smugness, and considering we're in /r/javascript, you're of course going to find a lot of users taking issue with bashing the language -- whether the criticisms are fair or not -- when it's phrased as it currently is. I think a title of _"Functional Programming in JavaScript is imperfect, but here's how you can improve it"_ or something would've focused the attention on the content more than the abrasive title.
You should make a project page for your script. (Read more [here](https://pages.github.com/)). Right now your example just links to a raw HTML file.
in that example I am using: https://github.com/Modernizr/grunt-modernizr to build a custom modernizr build using only what I need. Since I don't want to constantly rerun that in the grunt watch task, I just load a dev version of modernizr.
Most of your questions have been answered, but I would suggest a slight change in the logic. Use "else if" after your first if statement checking the type. There is no need to check if the type is 'jellyfish' if you have already determined it is 'shark', and there is no need to check if it is 'shark' if you have already determined it is undefined.
This is why I said I had a horrible experience learning it in school. Most of my classes were primarily basic courses, but primarily web design based, that is my job.
[I would be a little more bashful about my use of `&lt;center&gt;` tags](https://jessehorne.github.io/).
Boredom + JavaScript = https://kickassapp.com/
Funny title. Using two different tools to debug and to develop, sounds to me like one of the worst way to debug. But I guess it's a step up from `console.log()` peppered with `console.log('=======')` for visibility
I think that depends on the framework. Backbone, for example, isn't going to hold your hand and walk you through the JS minefield, and if you don't understand scope binding you pretty much can't get 'Hello World' out the door. Things like Angular certainly make it easier than it perhaps should be for a beginner, but for an experienced dev it's just a neat tool to add to the box.
not sure if you noticed, but title is a question :P
I found out about it through a tweet, and started to read it, and there was a link to my old trampolining article... But since you ask what I think, recursion is not a simple subject. TCO is coming in ES6, and I think that is necessary so that you can choose to write recursive and co-recursive algorithms. But that being said, in most cases these should be hidden inside of iterators and generators and should only rarely be the first thing people are expected to read.
how is that even remotely relevant 
the company I currently work for just replaced their internal portal page that was exactly as you described, imagine a page that is a grid composed of 3 columns with 10 rows and each cell as an iframe. It was a slow horrible mess , and since they had Windows authentication in IIS turned on for the site, if you went there in any browser other than IE you had a login window pop up for each frame. What about something like what jsfiddle.net does?
Agreed. It's the age old pendulum swinging between performance and readability. Know your profiling tools and introduce the complexity if it's become a problem (the article is definitely spot on that these situations can create large amounts of garbage). I'll allow the conspiracies as long as it leads to more articles like this and your work around here.
iframes &amp; postMessage are good for app separation :) http://html5demos.com/postmessage2
I've spent the last nearly 10 years building a highly complex corporate app in precisely this way. I can tell you from that experience that it can work fantastically well if you exercise some care. Yes, memory utilization is a concern. Yes, performance can be a concern. Yes, there is some added complexity to the code in terms of security and such. None of this is insurmountable though. The benefits are well worth it: we have multiple teams working on essentially separate apps with no risk of conflicts... our "core framework", that is, the parent frame's code, provides a host of services that all can reuse and save time, effort and money... we can provide deep integration between these apps that otherwise might not be possible... we even now have some of the apps entirely hosted separately so they can deploy independently. All of this, and more, is a result of this "controversial" architecture. It has worked out VERY well for us, though I had my doubts when I proposed the idea a decade ago. My advice is don't fear this approach... but DO think it through carefully and challenge every decision as you build it. There's no question you can screw it up easily, but if you think things through it can serve you extremely well. Reply here if you have any questions, I'll be happy to answer any I can (may need to tailor my replies a little to avoid sharing any info I shouldn't, but I've presented at conferences about this architecture so I can definitely talk in general terms at least). 
Well try this: function CustomThreeCtor(type, posX, posY) { // instead of setting as `sat`, then immediately changing, set as `type` instead this.type = type; if (!(this.type in lineGeometry)) { throw new Error('Unrecognized type: ' + type); } // call original constructor with the current obj as the context THREE.Line.call(this, lineGeometry[this.type], lineMaterial); // Gets position property from THREE.Line Object. this.position.x = posX | 0; this.position.y = posY | 0; // Pass obj to give createSat access to type and position. this.sat = createSat(this); } Then use as... new CustomThreeCtor(type, posX, posY); 
You should disable bubbling though. When I drag a link, I don't want to click it! :)
/r/nodejs
You can use JS and a traditional RDBMS, if you want, or you could use PHP and MongoDB. Most of the major databases have fairly solid drivers in all major languages. In regards to MongoDB specifically, if you're trying to create the next Amazon, I wouldn't use it - the document interface is too fluid, it's only eventually consistent, and I err on the side of Luddite in these cases. If you're messing around with a simple blog, then I'd play with the tools that most interest me - MongoDB uses documents, it has a simple querying API, and it's quite fun. In your specific case, I *personally* would probably use a traditional RDBMS, although I would use Node.js, or Go, or some other relatively speedy server-system, and probably not PHP. (In answer to what Mongo is specifically, it's essentially a store of Javascript 'documents' or objects. You can think of a document as a row in a conventional RDBMS, except that you don't need to specify your columns. It runs, on the whole, very quickly, and it scales horizontally quite well, so you can connect multiple MongoDB instances on different servers together, which increases storage space decreases server load. There used to be some problems with a 'fire and forget' model, where it would send data to the server, and return without checking if the data had been properly saved. It's more secure now, although I believe there still are a couple of areas where the team have traded speed for security.)
Mongo isn't a database as such, more of a document store. You can keep any data you like in a key-value "object", and even nest objects. There isn't a schema as such, so you might (for your part shop) have a collection of "parts", where each item looks like: { "id": 5, "images": [ "/images/part/1.jpg", "/images/part/2.jpg" ], "description": "This is a part", "name": "part" } If you don't have any relations to other bits of data, that'd be fine. But if you have users logging in, placing orders for these parts, and so on, you'll have to start building yourself a full-blown database, in software. That's what they did at my last job, and that's why I left. So I'd say "go with an actual database"; your mileage may vary.
WOW! You did it!! :D *(I had to change "type" to something else. Apparently type is used by Three.js)* This is great. So the benefits here are that I can call *CustomThreeCtor* prototype properties now, correct?
I love the if (!(this.type in lineGeometry)) { So much cleaner looking that my ugly if, else if
I feel you; trust me I do. "Web development" has morphed into an incredibly sophisticated field with the onset of the node ecosystem, HTML5 api's, etc. People are doing some crazy shit in the browser these days.
If I follow you correctly, yes, you can call any of the methods that are on `THREE.Line`, and/or you can add your own (without affecting `THREE.Line`), like so: CustomThreeCtor.prototype.getX = function() { return this.position.x; }; Then: var line = new CustomThreeCtor(...); console.log(line.getX());
*shudders*
Thanks! Happy to help.
&gt; I'll allow the conspiracies New phrase: "Trampoline Jerk:" When FP enthusiasts retweet and cite each other with breathy admiration. 
The use of iframes is not ideal. It is also not ideal to rebuild working applications to satisfy dogmatic ideals. Is your goal to create something using the newest technology or is your goal to build an application quickly that makes use of tested code? If it were my project, I would see how much code I planned on changing to make this work using iframes. If I had to change 25% or more of the code, I would start from scratch. If I could make a few minor changes and have a working application, I would not care what reddit had to say about the use of iframes. This is a cost benefit question that only you can answer.
I think you are mistaken about interaction across iframes. If they have the same origin, then you can treat them almost like regular DOM elements. If not, well, hello postMessage fun.
Well, not _me_, but I know what you're saying and I agree completely: it's impossible to make too terribly an informed of a decision when we're so uninformed on the entire situation. However, as a general rule, I suggest avoiding iframes.
I'd highly recommend trying it, but also trying RethinkDB. It's made the DB in Javascript the least of my worries.
omg, you are very talented to create your own CAS, bravo!
Have you tried using the chrome.webNavigation API, rather than window.onLoad? I use it as a fundamental part of an extension I've written with success. You could try adding a listener for webNavigation.onCompleted and see if it is more reliable for you: https://developer.chrome.com/extensions/webNavigation#event-onCompleted
It's nice and all but the demo video is awful, I mean it has scene cuts that fade to complete black every second which makes it hard to see the effect. You should (assuming you're the author) consider changing it.
I had to upvote both you and fzammetti. 
So basically they're saying that you should love JS because it has no rules and is inherently broken. I don't buy it.
If you are doing `console.log`-ish style debugging, at least use [`debug`](https://github.com/visionmedia/debug)
Yeah, web workers don't have anything to do with concurrency, they cannot access any resources concurrently, just pass messages.
Because OP will find himself writing much better code, and his JavaScript knowledge will work quite nicely with Rails.
What about arrow functions?
I think they are not yet supported in the latest versions of Node.js. Probably soon in the future.
You guys didn't use schemas?!!
Its an extra complication to constantly be worrying about, i.e making sure that your integers are integers and not strings, and an empty string is not a null, etc. One slip up and you can open a major security hole. 
Take a look at Ionic
My Approach whould be: edit the input field by dev tools. If the validation is only bind to focus loss and not before submitting you succeed. If not try to remove the event binding, rewrite the dom again. Try sending the request by a console/ ajax request, you rebuild from the original one and modify the important attributes. Without understandment it's difficult to give acutal advice.
&gt;Say Grunt again. SAY GRUNT again! I dare you... I double dare you motherfucker! Say Grunt one more goddamn time.
Eventually I will make a webpage but my idea is really for people on the move. I want to handle user registration and payment all from a mobile device. 
Well, some things are work in progress. You have to take into account that ECMAScript 6 contains a bunch of new features and I am not sure how many resources the Node.js project actually has and how much time is dedicated to stabilizing the platform versus supporting new language features like this. And since they are based on V8 engine, who knows if they have resources actually working on that. Maybe they have to wait until Google actually implements the features. You can see in this blog post, that many of these features have been [available for a long time](http://dailyjs.com/2012/10/15/preparing-for-esnext/), whereas others are still work in progress. You can see [this entry](https://code.google.com/p/v8/issues/detail?id=2700) in the V8 issue tracker where they discussed the addition of arrow functions to V8 recently. And you can see [a branch](https://github.com/aperezdc/v8/tree/arrow-functions) in the V8 Github repository dedicated to arrow functions. So, once V8 supports it, it should be available soon after that in Node.js. Regarding your question about generators, perhaps the [specification drafts](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts) can shed some light on the question.
Because OP will find himself writing much better code, and his JavaScript knowledge will work quite nicely with Rails. 
Rails is a ghetto
This is a level of awesome that I hope to achieve one day!
I will do that!
My web design is off the charts, why would I not use &lt;center&gt; tags? ;)
I've never seen and can't think of a way to do exactly what you describe, if I'm understanding it correctly. So short answer, no. I'd have to see your code for the version you figured out that ends with .get(). That seems like the way LoDash (or Underscore..one of them) does chaining--you can chain as many methods together and tack a .end() or something on to it to actually get the result returned..lemme check and I'll come back to edit. Edit: Yeah, apparently both of them do it, using an explicit _.chain (optional in your case, since you seem to want it one way or the other), and then a .value() Edit #2: Oh! You can try and be tricky with currying or something, but it's probably not worth it... Like, you could do api.dogs(), api.dogs(123), and api.dogs(123)('diseases') Or.. api('dogs'), api.('dogs', 123), and api('dogs', 123, 'diseases') Or.. api(['dogs', 123, 'diseases']); Or... api.dogs(123, 'diseases')... but none of these are really what you're looking for. Sorry :( The main problem is letting your methods know when you're done with them. Now I'm stuck on this, too. I want to figure out an automated way of doing that..but you're right, it might not be possible.
What you are basically after is a server to store meta data and data on the dogs, cats or pigeons for that matter. How many dogs are there, do the dogs get along with each other, are the under medications, etc.. hey maybe we can make dog tags with a QrCode for lost or deceased dogs, on new puppies and parental line..
All right, that's.. very slick. I like it.
yep, came here to suggest ozone.
AngularJS/Ionic
You could do this in pure Javascript, if you just want to play around - either store everything client-side, or use Node.js as the backend. However, the most common way is with a standard backend and a database (PHP/MySQL are the most common pairing, but Python or Ruby and Postgresql would work as well). Then, from that, you could return the data to Javascript via ajax using an API. If you want to learn something practical, that'd be a good way to go. Mongo really does *not* make sense for this, since you are talking about relational data. All of the properties that you're talking about - parts, sizes, types - those are *relational* properties, and you'd do well to store them that way. Otherwise you'll have to write a lot more boilerplate code to make it work.
I might be misreading, but I think this wouldn't allow me to get a dogs's diseases. Or am I wrong?
Yeah, the big problem is letting the methods know when they are done so they can get (or post/put/delete/whatever). I'd never heard of currying before and will take a look at it, it might be somewhat useful.
This looks pretty cool and I haven't seen it before. thanks for the tip!
Let's clear up some misconceptions quickly. 1. I think they botched their 'launch', badly. 1. It is __completely__ open source: [repo](https://github.com/Famous), [examples](https://github.com/Famous/examples/tree/master/src/examples), [docs](http://famo.us/guides/) 1. It's not magic either: [this is why it's fast](http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/) 1. What is in the beta is access to the demos and tutorials, which take the form of something like codecademy. A picture says a thousand words, so let's try this. [screenshot from positioning page of interactive tutorial](http://i.imgur.com/08gn1sf.png). It gives you the _absolutely pain free_ way to center any surface (which is just a DOM element) both vertically and horizontally. { origin: [0, 0] } // left top corner { origin: [1, 1] } // bottom right corner { origin: [0.5, 0.5] } // dead center // and THEN.... { size: [500, undefined] } // full height column sidebar { size: [undefined, 100] } // full width footer { size: [undefined, undefined] } // full screen surface I think this is a breath of fresh air, and I'm going to build more stuff with it (or something that is like it), because I really think it makes the code much much easier to reason about. _This_ is how you make responsive layouts in it: [stackoverflow question])(stackoverflow.com/questions/23140046/what-is-the-best-pattern-for-responsive-apps-in-famo-us). If size &gt; width. so much simpler than media queries and css overrides and what not. What they have done is package known good techniques in a way that I would actually consider using them in real projects with mid level developers who might not otherwise understand the nuances of linear algebra. I sure as hell don't, but this makes it accessible. I am honestly not affiliated. I knew it existed, but I recently discovered a good reason to play with it, so i figured it out from the examples and the docs. While compiling this, I was unable to find any dissenting opinions from anyone who actually had tried it, because of how the launch went down. I think more people should try it before they reject it. Just play with it. Please. 
Created a github page for it, to let people play around with it with little to no hassle. http://jessehorne.github.io/unstickify.js/
Also, I forgot to ask. Do you intend to use it like... var foo = api.dogs(123).diseases(); // foo is now an array of diseases Or something more like... api.dogs(123).diseases().then(function(diseases){}); ?
Thanks. The idea of having sandboxed apps that can be basically ignorant of each other is really what is appealing about this. I feel like I've heard a lot of people who use this approach do so to deal with legacy applications - was that a motivation for your team? would you recommend this same pattern if there *isnt* a large amount of legacy code? Also, if you feel like doing some self-promotion I'd enjoy hearing one of those conference talks. 
Oh man that sounds rough, what did they replace it with? &amp; what in particular does jsfiddle do? 
In order to use the former I'd have to make it synchronous, no? That's the only way I can think of achieving that and making it synchronous is not what I had thought, so I'd return a promise
I asked this a lot.... no really. for months. [When is MongoDB the right tool for the job](http://daemon.co.za/2014/04/when-is-mongodb-the-right-tool). I wish I didn't need to say that one of the replies I got most often when asking this was that MongoDB was great as long as your data doesn't matter. It's the truth though. =\ I personally think now that the M in MEAN stands for Mongoose, because it happened to be the most complete "ORM" available at the time, and people seem to feel they really really need an ORM. (I don't really like them) ## It's possible a NoSQL database is the wrong choice. You shouldn't use them for the same things. Also... please never ever use any NoSQL database for any kind of financial or transaction data unless you are absolutely entirely completely sure that you know exactly what you are doing. If your data feels like it should be written down in a ledger of some sort, use a relational database. If you would be ok with it written on a bundle of loose sheets of paper with nested bullets on them ... you might have a case for a NoSQL database. ## My Preference __Example:__ [Browsr](http://daemon.co.za/2014/03/mirror-tumblr-picture-blogs-browsr). I often tend to use CouchDB as my datastore, because it is just a REST server, basically. You PUT and POST documents to it, and then you can GET them back. The whole thing when you need to write a REST layer to translate it into DB queries and back again? That's just there, out of the box. Usually I write a proxy of some sort to transform and filter requests as it comes through, maybe tieing it into backend permissions. For the most part though, it's just REST. CouchDB views are very different from a query language though, because you have to know your data very well beforehand. I actually kind of avoid them. What I do when I get data that I need to query in different unpredictable ways, is that I [set up elasticsearch to index my couch records in realtime](http://daemon.co.za/2012/05/elasticsearch-5-minutes), and then I query ES instead of Couch, and use Couch as my single source-of-truth. ## Data access patterns matter a lot If your data changes regularly though, like for user sessions, instead of just getting new records added / a few updates... I would suggest looking at Redis before mongo or couchdb. (redis in addition to couchdb is something i've done too) 
Sure... I have the slide deck up on my site, zammetti.com... find your way over to the Presentations section and it's the SenchaCon 2010 one you're looking for. In addition to the slide deck, here's a direct link to the sample app it talks about: http://www.zammetti.com/presentations/sencha_webapp.zip Note that talk was not specifically about this architecture, it was about ExtJS more generally, but the architecture doesn't fundamentally rely on ExtJS in any way and it was a reasonably large part of the talk (and the sample app demonstrates it specifically). What was interesting is I had a nice group of people come up to me afterwards who wanted to hear about it in more detail but nobody was asking about anything else I talked about... so either they were especially interested in this approach or especially DISinterested in everything else I had to say :) BTW, I realize I said "conferences" there, but that's not technically accurate: I don't recall discussing this topic anywhere else I've presented... I may have discussed it a little at one of the Java user groups I've spoken at, but it's never been the focus of any for sure.
How else would you do it?
It's literally live after each keystroke. Not too shabby. 
I agree, although the license is pretty pricey if you want to actually sell your app built with it. 
I'm assuming you're referring to the [Test Anything Protocol](http://en.wikipedia.org/wiki/Test_Anything_Protocol). TAP is just a format to save/communicate test results. Test Driven Development and Behavior Driven Development are development practices/strategies. Test Driven Development is a practice that describes a particular workflow when developing a new piece of software or set of features. In TDD, you write your unit tests for each component first, and then developing until your tests pass. Behavior Driven Development is a similar, but with the idea that a user story should drive the unit test. So the test might emulate a specific action that a user would complete in the course of using the software.
MongoDB has the GridFS specification which is great for storing files. http://docs.mongodb.org/manual/core/gridfs/ I personally like using JavaScript from the front end to the backend, you might find productivity benefits by using MongoDB instead of an SQL database since you get to write DB queries using javascript. :)
I saw another one like this a while ago. There's still no simple HTML to PDF... plus I can easily create a PDF through the printer dialog.
Yes, because the point of this is to print existing webpages. /s
You were expecting that you could write a PDF out into a div? Not sure what the problem is here.
Wow, beside all that great comments, yours is the most useful! Thank you!
Okay, but what can I do with this that can't be done with CSS and an HTML canvas?
Can you generate a PDF with a canvas? edit: No one seems to understand that this is not meant to replace ctrl+p functionality. Personally I don't print every PDF I come across on the internet.
A lot of your proposed syntax/changes would break backwards compatibility... there's a reason new symbols or keywords are being introduced.
MongoDB has a reputation of being more hype than substance. According to [multiple sources](http://hackingdistributed.com/2013/01/29/mongo-ft/), MongoDB tends to play [fast and loose](http://diegobasch.com/ill-give-mongodb-another-try-in-ten-years) with your data, mainly to [win benchmarks](http://nosql.mypopescu.com/post/12466059249/anonymous-post-dont-use-mongodb). However, if you look more closely, their performance claims are inflated by cheating. For example, MongoDB will acknowledge that data has been written before it is fully committed to disk. There are many other reputable NoSQL databases worth considering first. [CouchDB](http://couchdb.apache.org) is designed from the ground up to work well with JavaScript. Another non-relational document store you might want to look at is [PostgreSQL's hStore](http://rhaas.blogspot.ca/2014/04/why-clock-is-ticking-for-mongodb.html).
&gt; less verbose function definition syntax Not really necessary. It's not so hard to write the function keyword. And you can use some kind of key bindings / precompilers. &gt; existence of the yield keyword in a block to recognise whether a function is a generator This would be really slow for the compiler. &gt; introduce the new for/of structure What does the first for do? I don't get it. The second one already works. &gt; no special weakmap or set syntax This would be nice but it could unfortunately break lots of existing scripts which work only with string keys. &gt; we'll be able to build our own multiple inheritence Multiple inheritance is a pain in the ass. Imagine the following situation: var a = { test: "test" }, b = extend(a, {}), c = { test: "test2" }, d = extend(b, c, {}); What should be inside of the d.test? Should it go through the whole chain of the object b and fint the property inside of the object a or should it return the c.test which is closer? Also we don't really need this. It's just fine to have only one prototype with a possibility to mixin some other objects. ;-) If you meant just editing the `__proto__` property of an existing object, I agree. That would be nice. &gt; introduce a standard for function documentation Hell no! Why should it be a function? JSDoc is good for this. &gt; provide typed arrays by simply introducing a new object A few lines of code and you can implement it on your own. ;-) &gt; block scoping will be great, but can't we just use var? Again, this would break lots of existing scripts. And it's nice to have two ways to define a variable. This doesn't seem to be a problem. 
PDF.js is for viewing PDFs. PDFKit is for creating them.
If you're already in the browser and want HTML to PDF, there's ctrl+P. And on the server, something like wkhtmltopdf or PhantomJS work fine using webkit. PDFKit is like the canvas API, but generates PDFs instead of images.
&gt; I assume, perhaps incorrectly, that the entire function body would be parsed by the compiler at the same time. Yep, exactly. &gt; use of functions for 'class' definition feel more natural They were not meant like classes. They were meant like constructor functions. And you can use some kind of library which will help you to write "classes". &gt; extract the key, value, and index of an object or array Keys and indexes have the same value, but OK, I agree there could be some possibility to get both key and value. But maybe using something like this: for (key : value in collection) { // … } If you by index mean the order of properties, it's useless in most cases. Every engine sorts them differently.
the yield one, the block scoping one and the weakmap one Also ES6 has a better function syntax, `a =&gt; a * a` is better `than (a) { return a * a; }`
Adding JS code is a better approaching for this. It's not practical to edit the exiting JS, the process would be too convoluted. Copy-paste this function call into your console before submitting the form and let me know how it works ;) - Disclaimer: Will not work if there are additional checks to validate these words are lowercase or if the website uses non-default form submission. var exceptionWords = ['these', 'words', 'will', 'be', 'capitalized']; (function (exceptionWords) { var submitCallback = function (event) { var form = event.target; var inputs = form.querySelectorAll('input'); var textareas = form.querySelectorAll('textarea'); var replacer = function (inputElements) { for (var i = 0; i &lt; inputElements.length; i++) { var value = inputElements[i].value; for (var j = 0; j &lt; exceptionWords.length; j++) { value = value.replace( exceptionWords[j], exceptionWords[j].charAt(0).toUpperCase() + exceptionWords[j].slice(1) ); } inputElements[i].value = value; } }; replacer(inputs); replacer(textareas); }; var forms = document.querySelectorAll('form'); for (var i = 0; i &lt; forms.length; i++) { forms[i].addEventListener('submit', submitCallback); } alert('Systems Operational:\nWords will be capitalized on form submit.'); })(exceptionWords);
So I can totally use tap in a TDD way. I was a bit confused because of the tape hype. Thanks !
Yeah I'm planning to modularize a lot, make unit tests on all those small parts and then test the whole thing.
http://vanilla-js.com/ - small, fast, supported virtually everywhere.
I came across the node module while searching for a library to format numbers, and noticed this demo on the Github page https://github.com/sheetjs/ssf I tested it on my iPhone and in chrome and it seems to work in both places. Out of curiosity, what is the right way to set up the demo? Maybe you can raise an issue
This is great I will be using this a lot!
WeakMap too, passing a object into [] will call it's toString method. Any code that uses the String class for keys will break.
Not to mention there's probably code out there that uses yield as a variable name.
There aren't timer objects. setTimeout() returns a number. setTimeout(function(){console.log(this);},0); &gt; `[object Window]`
The jasmine/mocha/qunit philosophy is to augment your environment with lots of magical globals (it, describe, before) that obscure what a test actually is: a program that verifies the output of some code paths. You often get a flow control library, a mocking library, an assertion library, and a harness all in one. The magical obscurity also means that you've can only run your code through special command-line or browser runners. Even worse, the runtime configuration changes which globals are available, like `mocha.setup()` yikes!. tap/tape and some other runners that don't even care about TAP output just use the module system as it was intended to export ordinary functions and do not require special runners to inject magic globals that obscure how your code actually executes.
That doesn't mean that it will break backwards compatibility. `yield` can still be used as an identifier name in ES6 as long as it's not used inside of a generator function. That's likely the reason that they made generator function syntax different than normal function syntax. 
Gold worthy!
Fat function arrow: just convenience for small function declaration. Default parameters: cause more problems than they solve. Classes: I've yet to see why they are useful (other than the convenience of declaring prototypes along with structure).
This would be a very long post ;)
Ok thanks for the responses. In answer to egonelbre then I would say some of the reason I use coffeescript is because I like those convenience things and general find that the help my workflow. However there are issues in preprocessors and es6 feels like it might give me those niceties without some of the pain points, as well as getting up to speed with the new features (as _punk_ says). There are a number of things like promises, classes, modules all look interesting and imo potentially very useful. From the sounds of it though it probably not ready for production though (which doesn't deeply surprise me). But I think I might start digging around on personal or smaller projects to get a feel. Thanks folks! :)
Wasn't aware of that memory footprint issue, thanks. &gt; security makes interaction across iframes challenging, and this has been steadily getting more strict This is something I'm worried about, if I'm doing weird stuff with iframes I guess there's a chance that the web may evolve to a point which makes this implementation not possible. I should go read the latest from HTML WG. 
For anyone looking at this, I came across this [slidedeck from a guy @ Disqus ](http://benvinegar.github.io/seamless-talk/#/) about the seamless attribute for iframes which simplifies a lot of the issues apparently. Although [browser support might be an issue](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#Browser_compatibility)
Won't a call to `api.dogs(123).diseases()` do an unnecessary GET to `/dogs/123`?
Fair point
I'd probably make use of generators, sets, and string interpolation. Object.observe isn't really part of the ES6 spec, but it looks like it may make it into the big browsers. (so sorta like 'innerHTML' was back in the day; not official, but everyone supported it) 
https://github.com/SheetJS/ssf/issues/6 maybe you can expand a bit more there
Grunt and Gulp are about writing your build system in the same language you're writing your program in. I have make files at work, they suck ass, and no one wants to maintain them. The witespace requirements in bash are worse than most whitespace significant languages. It's just a shit show. Why should someone who's going to spend all their time writing in non-c-based styles (ruby, coffeescript, python, sass, stylus, etc...) sit down and bust out a shitty bash file that will fuck everything up the first chance it gets?
I was about to try and argue the ugliness of two http requests away, but I had a new idea :) Consider the following code: var api = { dogs : function(dogId) { if ( dogId === undefined ) { return $http.get('dogs/'); } else { var deferred = Q.defer(); var timeout = setTimeout(function() { $http.get('dogs/id').then(function(dog) { deferred.resolve(dog) }); }, 0); deferred.diseases = function() { clearTimeout(timeout); $http.get('dogs/' + dogId + '/diseases').then(function(diseases) { deferred.resolve(diseases) }); } return deferred.promise; } } } I'm using a library like [Q](https://github.com/kriskowal/q) for promises here. Now we explicitly create a deferred object, and only fulfill it after calling either dogs/:id or dogs/:id/diseases. The former call is wrapped in a setTimeout of 0ms, so it will execute as soon as javascript runs out of things to do. Now, any call to api.dogs(123).diseases() will immediately clear the timeout set for the call to dogs/:id, so that call will never happen, and the promise we return from dogs() will be fulfilled with the results from diseases. I hope that's sort of clear, if not, I made a jsfiddle that shows this example working (the fiddle uses jQuery's Deferred instead of Q, but the rest is the same): http://jsfiddle.net/9dM63/
I'm wary of conflating the buzzword [BIG DATA](http://www.brentozar.com/archive/2013/03/you-dont-have-a-big-data-problem/) with simply [_'lots of data'_](http://www.chrisstucchio.com/blog/2013/hadoop_hatred.html).
You really did a great job on this site. I always wish I had something like this for my portfolio. If you don't already do this for a living, this will likely land you a job.
It looks like really early stages. I don't see a shred of WebGL code in there... :) My main suggestions: * support a tool like Tiled editor * use lower level GL libs like Kami, Pixi or gl-modules rather than reinventing the wheel with a custom half-baked GL renderer. * consider writing the library in a modular fashion and publishing to NPM. That way somebody can use and improve on, say, your TMXParser module without needing to use the rest of your library. 
They could try to keep their builds simple. If you need more than 5 bash commands I think you're trying to find a solution to some inexistant problem.
It is indeed on *very* early stages! - The Tiled support is being implemented at the exact moment of this comment. We're going to support JSON, XML and TMX parsers, and the way of creating tile maps is going to be extremely easy. - PIXI.js is also on the roadmap for rendering optimization. It should come soon enough. - That part is the most difficult for me. Any guidelines? And thanks a lot for the feedback! Really appreciated!
&gt; If you need more than 5 bash commands I think you're trying to find a solution to some inexistant problem. Boy do I fucking know it... :(
&gt; Fat function arrow: just convenience for small function declaration It also captures this lexically making it quite the convenience indeed. &gt; Default parameters: cause more problems than they solve. Default parameters are basically sugar for `var p = param || default` that everyone is doing today. Can you explain further why this is problematic? &gt; Classes: I've yet to see why they are useful concisely declaring prototype methods and static methods, wiring up static-side inheritance, plugging into ES6 subclassing machinery for you (so you can do, for example, `class extends Array { }` and it actually works), static super references... not to mention being syntactic sugar over a pattern many of us write into every program.
JavaScript already shits all over my numbers. Why would I want it to shit on them again while pretending to shit on them the same way excel does?
Both excel and javascript use IEEE754 doubles under the hood for everything (there are no 64-bit integers in excel). The difference is that excel displays 0.1+0.2 as 0.3 even if the actual number is not exactly representable 
Excel takes credit card numbers, sees that they're nemaric, and converts them to scientific notation, dropping the least significant digits. At least javascript recognizes that it can't be expressed as a number and uses a string. Neither javascript or excel are great for working with numbers in a programatic way, so forcing a broken model ontop of another broken model is just asking for more trouble than using either broken model in the first place!
This sets back human dignity by a decade.
I actually found it quite funny, if I was 12 and had this, I'd be proper web smart. On the other hand when I was 12, I had no friends, so I have achieved the same outcomes.
JavaScript converts numbers to strings when they can't be exactly expressed? According to the console, 12345678901234567890 is stored and acts as if it is 12345678901234567000
Regarding NPM, I just had a quick look and found a tmx parser already exists in two forms: https://www.npmjs.org/package/tmx https://www.npmjs.org/package/tmx-parser So, basically, if you are writing _another_ parser, you better have damn good reason to re-invent the wheel. ;) If you do have good reasons, you should follow the same practices as the above libraries by decoupling the parser from the rest of the rendering/tiled map engine. That way your parser can be useful for a lot of scenarios. Other game engines can build on your TMX parser (and contribute in the form of issues and PRs), and people can even use it offline in Node (e.g. to pre-process TMX files for your game). 
[adventures in long numbers](https://imgur.com/a/3mACv). TL;DR: i was able to make javascript cooperate with some quotes, excel took 4 steps and extra confirmations to cooperate.
The excel analogue is simpler: click the destination cell, type single quote, then paste the number. That forces excel to treat the data as text, just like wrapping the number in quotes in JS http://i.imgur.com/nhQNR7u
I think it's because you forgot to put document.form. before the values you are checking in the final expression before your alert. Change: genre.value === "drama" &amp;&amp; year.value === "1994" &amp;&amp; location.value === "USA" &amp;&amp; director.value === "Frank" to: document.form.genre.value === "drama" &amp;&amp; document.form.year.value === "1994" &amp;&amp; document.form.location.value === "USA" &amp;&amp; document.form.director.value === "Frank" and maybe add an } else { alert("I have no recommendations");} so that you don't have a hole in your form where nothing happens and everything proceeds "as normal". Additionally for the HTML: You do not need br elements to separate options, that is handled automatically by the browser. The radio button groupings will fail because different name attribute values are being used. To group radio buttons so that only one in a set toggles, use the same name attribute.
well, TIL. Usually excel blows up with unbalanced input, but i must be only thinking of parens and brackets.
There are some interesting efforts being done on the Java community to implement [compatible node.js engines](http://blog.jonasbandi.net/2014/03/running-nodejs-applications-on-jvm-with.html). I was reading about [Avatar.js](https://avatar-js.java.net/) and [Project Avatar](https://avatar.java.net/index.html). They both look really promising.
so you're telling me to take my machine generated CSV file that come from third party sources, and massage them to make excel behave? Thanks, but I think i'll continue to avoid importing my CSV files into excel.
BTW, I've just added the isometric tile map example on the docs. Check it out!
Default parameters, I guess Go documentation puts it best... &gt; One feature missing from Go is that it does not support default function &gt; arguments. This was a deliberate simplification. Experience tells us that &gt; defaulted arguments make it too easy to patch over API design flaws by &gt; adding more arguments, resulting in too many arguments with &gt; interactions that are difficult to disentangle or even understand. &gt; The lack of default arguments requires more functions or methods to be &gt; defined, as one function cannot hold the entire interface, but that leads &gt; to a clearer API that is easier to understand. Those functions all need &gt; separate names, too, which makes it clear which combinations exist, as &gt; well as encouraging more thought about naming, a critical aspect of &gt; clarity and readability. Basically, allowing "default arguments" makes people think less about clean API design, which in the end causes functions with too many parameters. But there are other sources explaining it more in depth e.g. [something like this](http://huestones.co.uk/node/130). "Concisely declaring prototype methods and static methods?" function Point(){ this.x = 0; this.y = 0; } Point.prototype = { add: function(p){ this.x += p.x; this.y += p.y; }, sub: function(p){ this.x -= p.x; this.y -= p.y; } } Also, I've started moving away from sub-classing, because it also seems to cause more problems than it solves; it makes testing more difficult and it makes things harder to modify... basically, doing things without sub-classing, makes the end result simpler and clearer. I've yet to find a really strong case for sub-classing...
I don't use their API
It's fine for a new language to say defaults are bad but JS is where JS is, and people use the default pattern all the time. I think it's good to make that code more readable. Your class example doesn't contain any static methods, and also your prototype doesn't have a constructor reference and so would break code that depends on that convention. I think once you add those things you'll see how much typing "Point" N times instead of once gets really annoying.
i believe they have good stuff in there, but the whole thing is suitable to be a neat little util lib and not taken to silly proportions like it was the release of half life 3. the launch and everything/everyone around this "thing" makes me not want to touch it ever...
How do you get their info? By scraping their site? I've had so many ideas for Netflix apps, but not much is possible since they closed their API.
I crawl their site and archive relevant information, some info is piked up elsewhere. This API will remain open so get to making! 
I really like this as a start. Good work so far. :) I hope you keep going because this has a paradigm that I really think would be useful. Also, don't concentrate on tiled so much that it is hard to generate random maps. That's a mistake some frameworks make early on.
thanks for this! I really wish JS was a "pure" or close to pure functional language, but you make it feel as functional as possible. and being forced to program in JS, this functional approach is great
So I completely understand the blowback on that level. I hate hype myself, but I try to see past that to what things actually _do_ in the end. I can also see what they were trying to do community-wise, even if it feels a bit off to me, but I can see is why they felt they needed to do it in this manner. The amount of people that react defensively to "css layout/position is good enough for me because I already know it", is quite astounding. If they tried to push famo.us with the "makes your day-to-day life so much easier" angle, those people would be the major voice of dissent. And they would never make any kind of splash. I think it is because it's outside their comfort zone, and they feel it invalidates the time they invested in figuring out how the entire front-end DOM situation works. On the other hand, by trying to push it with the "css can't do this" angle, they are pissing off everybody who hates things scaled to the HL3 proportions. I'm only really trying to get people to put aside their prejudices and give it a spin. I have no other dog in this race, other than I can see myself having fun using famo.us. I suspect others might too. 
Why do you need static methods? Well, when you need it, you need it, and it's a very common JS API pattern. Just look at the built-ins, say Object. It has a ton of static methods - defineOwnProperty, etc. In your point example, it's where you would implement a "fromTuple" or somesuch method to consume other point-like things. In ES6 you also want it if you wanted to provide custom @@create or @@hasInstance behavior for your "class".
Makes sense. If you're looking at building a fully distributed system with separate installs, it might make sense to glue them together on the back end with something like RabbitMQ or NodeJS. The company I work for has gone through a similar transition (disparate pieces -&gt; framework -&gt; merged modules in application -&gt; etc) and we've found the biggest problem in bringing those pieces together in interesting ways is the disparate ways in which they respond to events. Hooking them together with a legitimate messaging framework is our next big step. Check out the [MEAN Stack](http://en.wikipedia.org/wiki/MEAN) which, other than Mongo, is a pretty solid framework.
Only use an embed tag. All relevant data is placed within that tag and the style is scoped with its shadowDOM.
Argumentum ad populum is not a good way to argue a point. You are still hand waving regarding where you need it; if you want prove a point show a really good practical example where it significantly improves the code. &gt; It has a ton of static methods... When adding static methods to a class you are conflating object and its utilities. As an alternative approach: https://gist.github.com/egonelbre/a567cf92466b70314d65 here you keep the "Point" type separate from its utilities, by providing a proper namespace for Point-y things. &gt; In ES6 you also want it if you wanted to provide custom @@create or @@hasInstance behavior for your "class". Why would you want that?
&gt;Why? What problem are you going to solve by using ES6? Well, for one you'll stop having to write a bunch of shit like: var self = this; or having to .bind(this) on every god damned function thanks to the fat arrow syntax &gt;The other stuff is just convenience. Well, yes: we thankfully have a lot of "convenience" layered on top of raw assembly too, so i'm not sure what your point is.
that site has a really sluggish and laggy feeling scroll and interaction. is this built on famo.us? that really puts me off wanting to try it
The title seems to have set off my company's filter funny enough
Very nice work, looking forward to testing this out, I have been looking for a decent canvas isometric engine for a while
no. it's plain-old-javascript. it depends on the iframes it loads, and how many of them there are. 
I don't always create public fields in C# but when I do pubic int number;
haha. it's really helpful to create an autoexpand shortcut from something like "cl" to "console.log()" for this reason!
What do you mean by rendering large sets of data. Do you mean visualization or tabular display? browsing? filtering? What kind of data? For displaying a table, the technique I describe in this post works just fine. http://fulmicoton.com/posts/fattable/ 
I more commonly switch letters that are across hands. select * form some_table; If I had a nickel every time i spelled from as form in a sql query...
..you wloud be a rich mna? 
throw a `debugger` keyword up in dat bitch, chrome breakpoints there for yo ass
Nice. In the event that I, or anybody else, should generate a lot of traffic using the API will it be possible to get a copy of the database? I'm sure you don't want someone using up all your bandwidth for free. Also, what are the chances Netflix will issue a cease and desist?
As I've said, anyone using the String constructor will have their code fail. It's not a small a group as you would think, extJS uses it in all their code, for example. It's not a matter of only a few people using it, you just can't ship language updates that break code. I like some of your other suggestions, tough.
In c++ I end way too many cout statements with enld instead of endl
Yeah! debugger is great
in the event I have to shut down i'll release the crawler and the database
Cool, thanks for the info! Nice work too.
I'm always programming in Italian or something... functino something() { ... }
public int number{get{return _privateField;}set{value = _privateField;}
I'm on my phone right now, but I'm pretty confident that jsfiddle uses iframes.
I'm of a backgorund type of guy.
[`cornsole.log()`](https://gist.github.com/brianfryer/5987888)
I've done a pubic inerface more than once.
 if (DEBUG) { window.cnosole = window.consoe = window.console } I have a different problem than you, but it's easy to just keep adding them up! uglify rips it out for prod :)
Did I do something wrong? http://imgur.com/hDTtbg3
Cool but what is the business use for this though?
Whenever I do `u_char* bug;` instead of `u_char* buf;` I take solace in the fact that the typo is at least accurately named.
I read it as "Dirty Chicken..." and had to find out what the hell it was!
flows right off the fingers.
Yes. Thank you. I think that's a more elegant solution than the one I was going to use.
You could loop over Object.keys (foo) instead or look into Array . reduce which gives you access to the current and previous index. Arrays in javascript are just objects with numeric keys so x is a string here when it's actually used to address an "element" in foo. In your case though, it looks like you could just use x + 4. Javascript doesn't care about your silly types and all that bs. Edit: it's worth noting that v8 cannot currently optimize for in statements. Looks like it doesn't matter so much in this case but because of this its a good practice to avoid it team wide. Here is an interesting read and video on how a simple for in loop caused massive garbage collection issues while creating the road to oz game http://www.html5rocks.com/en/tutorials/performance/mystery/
Sparse arrays are probably a sign of code smell, ie. Maybe there is a cleaner way of achieving the same results. ;)
I do the *tion -&gt; tino* thing ALL THE TIME. I CAN'T FIX IT NO MATTER HOW MUCH I TRY
cnosole.log? cnosle.dir is where it's at! Seriously though, once I discovered console.dir, I stopped using console.log almost entirely.
So what's on your hamster branch? 
 error: src refspec hamster does not match any. :(
Now is the time for you to learn Ctrl T (Disclaimer, it'll only work on OSX (or a shell or REPL that supports Readline.) ^(or Emacs) 
`xp` for vim users
Hey /u/drunkenfaggot is right! Debugger keyword all the way baby!
But...but..functions *are* objects which are *reference* types. There I got the pedantic dick weed over in this thread so it can progress in a more useful manner.
LOL. I just lost it reading that
Absolutely functions are objects, but of course they are "magic objects."
One of the things I've noticed newer people have weird beliefs and misunderstandings about on here is arrays in javascript. It'd be interesting if somebody did a write up on javascript arrays by creating one from a simple object, starting out at var array = {}; just sayin.
Or with `var array = Object.create(null)`.
West, west. Blao!
My god. We should form a support group.
looks neat, gonna try it out later 
Mine are functoin and 4("#id") // damn it, didn't press shift hard enough
Yes.
Gerp, functino
I have a shortcut in vim: noremap &lt;D-d&gt; Odebugger&lt;Esc&gt;:w&lt;Return&gt; When I press Command-D, Vim opens a new line, inserts the text `debugger`, and saves the file. Brunch notices the file has changed, does a quick build, and tells Chrome to reload the page.
I always somehow manage to type console.lgg(). That's hurts. 
I end up with funciton a lot.
Glad to see they work on smooting native addon use flow.
I cannot program in any of the OSX Java IDEs because none of them support transpose. I suppose I should look at this as a blessing. 
__CAN YOU DO THIS???__ This is javascript my friend: you *can* do anything. Here ya go: http://jsfiddle.net/html6dev/b9bHn/ (note that I am not doing anything other than logging the url you will call by calling the respective functions (further note, I do not advocate this whatsoever. please don't do it)). In reality, maybe there is a more valid hack to do what this is doing with process.nextTick or something but even that would be a pretty big travesty imo. 
Sencha ExtJS has support for handling very large sets of data in grids with both buffered data stores and buffered dom renderer that basically allows you to handle ANY amount of data. 
consolo.log()
If I had a nickel for how many funtcions I've declared, I'd be able to afford a nice dinner.
(defn itcouldbeworse [fuck this] (+ fuck this))
Somehow I managed to write **consone.log** today 
We at pixel press (http://projectpixelpress.com) are going live on the 30th on the App Store with a UI written in Unity3D+CoherentUI+Ember :)
ok that's awesome. now staring at it until i attain enlightenment. reformatted a bit: var foo = (function(f,g,n){ return [f[n]=g,f][1] }) (function(x){ return x*x; }, function(x){ return x+1; }, 'bar'); 
I don't see why a regular print dialog would render the canvas differently. Then you "Save as PDF"
&gt; ... i'm not sure what your point is. My point is that, if you are going to build an application without a proper foundation then you could get into problems. Many features of ES6 haven't yet been implemented, this means that they will likely get implemented with bugs or inconsistently across browsers. If the only reason to use something is "to shorten the syntax" then it's probably not a sound business decision. If you take a risk, there should be some convincing benefit from it. e.g. I could understand using TypeScript, it gives you type checking, which will become helpful at large scale.
use a constructor function? While js doesn't have classes it's generally considered good practice to not attach properties to one off functions like this that are never called with or created through a factory function. You can sort of consider the latter as 'function objects' and this sort of thing as simple functions as a good mental model. 
mine's usually functio n, too quick with the space bar var bananas = functio n(){}; ReferenceError: functio is not defined
Race condition between fingers. It's nasty to debug.
So there's a use case for dragging a couple of billion rows into a grid so someone can spend a week or two scrolling through them?
A million monkeys chained to a keyboard probably wouldn't come up with Shakespeare but they came up with this. 
Some people think vanilla JS would be a joke, but the joke's on them.
Yes. Many customers have that demand. I spent too much time to argue against it. :) With that said it is till a excellent dom node count save even on smaller more manageable grids. 
When you print a regular canvas to PDF, will it have the character data available (will you be able to copy and paste text)? I haven't tried it, but I don't think so.
Works in Sublime Text too.
functoin - the js crypto currency for people who can't type. Mine is, ironically, error. I see eror and erroe all the time.
I'm glad it's not only me
Does sublime have transpose words too? Readline shortcut is Alt-T
Hey Comic, sorry it took me so long to reply. I've gone ahead and done the following of your suggestions 3 4 5 Please verify for me if this meets those standards you expected. I'll work on 1 and 2 later. 
For those who want to use angular in mobile development, [Ionic](http://ionicframework.com) is awesome and the performance is excellent.
I don't really know. But I'm sure you can bind it.
I remember when I just started out with JavaScript. I had one large file. And every few days I would re-write it because I coulndt understand what I tried to do.. Even with chapters full of "useful" comments like: // add 1 to position x position.x += 1;
 function add ( a, b ){ return a + b } var sum = foo.reduce( add )
Administartor
http://originalhampster.ytmnd.com/
Or just use a breakpoint in the source window.
console.log("fuck"); .. console.log("fucking"); .. console.log("fucker"); &gt; fuck &gt; fucking .. ahh I see the problem console.log(this); &gt; Your mother .. oh fuck you javascript!
When I try to analyse a doc, I get this error in the console: GET http://demo.filepreviews.io.s3-website-us-east-1.amazonaws.com/9dc54b05444465e2e2b40dc7be23e2c106ae65228deba4824ca1aaa587e1d25a/metadata.json 403 (Forbidden) 
I love you...
Is the intent for the leading underscore not to indicate that the member should be treated as private? 
There's a timer object as "this" in the callback in node, but apparently you get the global object in the browser. At any rate, you don't get something useful. I'm not against "use strict" certainly. But my larger point is that the self pattern gives us back functional programming. All of our methods are also first class functions that can be passed in any context and expected to be have sensibly. We can get back to thinking big thoughts about composing functional programs with tools like lodash and stop getting stuck in the gotchas of binding this correctly for every single situation. 
&gt; NOTE: This library is far from finished! Only some very basic features are in place right now. 
Not sure who downvoted without explaining... The intent is that prepare does not say what it does. Prepare is generic and gives no explanation into what processes are being taken to prepare it. This is why I generally dislike even using init() when I code and hiding a bunch of one-line assignments in there.
Cool man! Thanks for sharing!
What's the point of the array used in the IFFE's return? Why not avoid the array instantiation all together? var foo = (function(f, g, n) { return f[n] = g, f; })(function(x){ return x * x; }, function(x){ return x + 1; }, 'bar'); 
I have always practiced (and preached to my coworkers) that code should explain what it's doing and comments are only there to explain why you did it that way. If you need comments to tell the next developer that a line of code does something special and it's not pretty obvious by the names you gave... It's not well coded. This is the main reason I like this rather short rant the OP posted, but I think it needs to expand upon the thoughts already written. If you are writing a higher level explanation on what this prepare function is doing, you are doing it wrong. This is not universally applicable, but it drives me to write my code in such a way that it explains what it's doing in naming. I still find occasions where I would need to cut and paste several lines of code that need to run in sequence, to which I spend a good quantity of my time trying to find an elegant way to write it better. Of course, I could just dump some lines of text to the file and have a working product in less time than someone else, but I find the extra time weighing my options helps me later. Sometimes it gets me in trouble by the armies of comment nazis, but I've been known to state that comments are code smell. Comments are shortcuts for the developer to put in an explanation to a problem that's not explained clearly enough with the primary language you are writing in. It wreaks of someone trying to speak in a foreign language and continuously saying... "Uh, how do you say..."
The complexity of angular isn't dependant on the complexity of other projects. Angular and Ember can both be complex.
Clearly you mean: cnosole.trace()
I'm a fan of console#profiler, that stuff is magical for tracking down performance issues.
np. I too have felt frustration when the API I dealt with is crazy complex for no apparent reason.
Not a proper answer. OP is looking for a framework to build mobile apps, such as Phonegap, which gives you access to a host of typical mobile services (gps, accelerometer, camera, etc.), and lets you bundle everything up as a native app (for iOS or Android.)
Not in chrome: https://developers.google.com/chrome-developer-tools/docs/console-api#consoleerrorobject_object
Wait until you find out about *breakpoints*!
If you can get the name of the array variable, then in console Firebug, you can just `array_name.push( "newword" );` Or you can write Greasemonkey script.
In Node, `console.log` goes to stdout, whereas `console.error` and `console.warn` go to stderr. http://nodejs.org/api/stdio.html#stdio_console_warn_data
The main reason to use this would be that it accumulates a counter each time `console.trace()` is called from the same line. However, if that's the main motivator, then one would probably get more bang for their buck by using [`console.count(label)`](https://developers.google.com/chrome-developer-tools/docs/console-api#consolecountlabel) combined with [breakpoints](https://developers.google.com/chrome-developer-tools/docs/javascript-debugging#breakpoints).
Tom Boutell has a blog post ["this" considered harmful (sometimes)](http://justjs.com/posts/this-considered-harmful), that promotes the `var _this/self/that = this;` pattern as you describe. There is always a give and take with this, because some would argue that the `.bind(this)` version of your code above is more expressive and readable, whereas the `var _this = this;` is easier to write especially if you are dealing with passing many functions as callbacks. As far as answering your question of performance, you are right in assuming that the `var _this = this;` pattern will be faster, as long as you don't reference `_this` too far down a stack of callbacks. http://jsperf.com/bind-vs-self-closure In the end, I would suggest you to not worry about it unless your game starts becoming slow. Write it in the way that you prefer, the way that's most expressive and easiest to maintain/debug.
And here I've been doing... var err = new Error(); console.log(err.stack); Like some kind of sucker.
interesting. what's the downside that makes it "bad practice"? in this case i am creating a function object to pose as a library object so that i don't have to special case my code.
Pretty cool. But I have to ask: what's wrong with React? Is it a modularity issue where React is "doing too much" that motivated this project? 
Right. Also: &gt; BitTorrent in JavaScript. What more is there to say? Well, maybe tell us specifically what the intent is, here. Stand-alone client? Tracker? Library to integrate BT features into a JS app?
You should have an `extend` or `meld` function in your toolkit for composing objects. Underscore and Lodash provide one, or you can roll your own: function extend () { var consumer = arguments[0], providers = __slice.call(arguments, 1), key, i, provider; for (i = 0; i &lt; providers.length; ++i) { provider = providers[i]; for (key in provider) { if (provider.hasOwnProperty(key)) { consumer[key] = provider[key]; }; }; }; return consumer; }; Then you can write: var foo = extend(function(x){ return x*x; }, { bar: function(x){ return x+1; } });
Well one way to think about it is that foo is an operation. It's a literal function in the mathematical sense as it maps x to x*x. Therfore it's strange to attach properties to it. Now, in javascript people become confused because functions are functions but they are also objects and can have properties. What it seems you want is an object that has the functions foo and bar. This can be done quite simply and doesn't even require a constructor function if you are using object literal notation: var myObj = { foo: function (x) { return x*x; }, bar: function (x) { return x + 1; } } myObj.foo (2); mmyObj.bar(2); That is if I am understanding what you want. If you were looking for bar to act on the value x that was passed into foo we could do that as well but it requires slightly higher level functional programming concepts but not bad at all.
It is super handy - just be sure you remove them before you put a slew of them into 5 files and push them to github. (not that I would have done such a thing)
Yeah i agree. Try to find pain points when FPS starts dropping. The tricky thing with JS is that it's so easy to allocate new memory, and have something cleaned up, especially when it comes to creating anonymous functions as callbacks. The GC pauses are a big cause of lag. One of my games actually I realized i was initializing a new array of vectors after a tween finished. It worked much like a loop. Tween -&gt; (new array) -&gt; finish -&gt; Tween. I switched the array and vectors to more permanent objects, and just set X &amp; Y values on the vectors at the start of the tween. Performance issues towards the end of the game went away.
looking for an object with call signatures identical to var foo = d3.scale.linear(); //http://d3js.org said object allows foo(x) and foo.bar(). my realworld problem has been solved. this is now just a great discussion on JS function zen. so thanks to everyone for the contributions.
Finally? It's been there since Firebug came out with the API.
Hey, thanks for your feedback! The basic idea was to make it even more easy to get started with gulp and to make people love it. Unfortunately we can't implement all the great parts about gulp. Thanks for your hint about asynchronous tasks. I will try to improve the generated code.
now i get it. thanks. for posterity, this formatting helped me: var foo = (function(f,g) { return [f.bar=g,f][1] }) (function(x){ return x*x; }, function(x){ return x+1; }); 
I keep seeing Mongoose everywhere and I might be missing something but isn't the whole point of NoSQL db to be schema-less? Why bring schema to it again? And what's the benefit of mongoose over just mongodb driver? Doesn't mongo already come with javascript-like db operations like find(), remove(), save() etc.? I guess what I'm asking is what's it's benefit over the official mongodb driver?
Sorry, I don't get it. Could someone explain this joke to me?
A reference to this post http://www.reddit.com/r/javascript/comments/23zi5d/i_dont_always_debug_javascript_but_when_i_do/ where console.log is misspelled
I'm also a dev on the FilePreviews.io project. While working on our apps (getblimp.com) we found that having previews from files is a very desirable UX feature to have on file manager. We believe this is a very common use case and we'll like to offer our solution as a service to other developers that need it and don't want to think about this. Also we have 2 distinct interfaces, a formal REST API and the one on the demo which works great with client side JavaScript application that don't have a server. For example a Google Chrome app that saves data locally could use our service to create file previews on our servers then download the results locally. Also, I just published a client library that will help devs make little apps that use our api: https://github.com/GetBlimp/filepreviews.js
Looks like you tried the demo while we where shipping new code to the server. Try this url: http://jsbin.com/losaf/39/edit?js,output 
At some point I rewrote one of the popular jQuery based github repo ones to use vanilla js - https://github.com/abeisgreat/Github-Repo-Widget
That's because we poll the metdata.json url until the file appears. This is a little hack we did for the demo. Code here: https://github.com/GetBlimp/filepreviews.js/blob/master/dist/filepreviews.js#L77-L94 We are already working on a WebSocket solution that will send a message to the browser when the previews and metadata are ready so we won't need polling. Also the endpoint we are hitting with the polling is an AWS S3 bucket so we are not too worried about it.
Breakpoints can be good, but if you're in the middle of editing code, it can be nice to not need to go find that exact line within the code again in the browser. `ctrl+o` within the source panel can assist with this, but it's still an additional step. Depending on the situation, it can be better or worse. I tend to use breakpoints more when I'm within a state where it would be disadvantageous to refresh. That being said, there are a few caveats: * Breakpoints will *not* work if you are cachebusting on each request (ie: the file name request changes on each request) * You can't set conditions around a breakpoint That's about it. Sometimes I do want a break to occur only in certain situations, and that's where `debugger` can shine. Use JSHint automatically in your development tool to ensure you don't check in debugger statements though ;) I also tend to deploy the use of exceptions, and switch "Pause on Exceptions" to either its "On all exceptions" or "On uncaught exceptions" setting.
Thanks a lot, that the easiest solution for someone inexperienced with JS. It worked, they have no server-side check. Thanks to everyone else who participated in this thread and shit, I'll save the thread and try the other methods as well. 
I only remember googleing it like half a year ago and nothing was to be found.. was that at the same time that the console finally "properly" supported console.info ?
Have you tried the debugger; keyword? That'll kept around cache busting and works straight from the text editor. Just don't forget to remove it.
Awesome! I starred you on Github so I plan on following it as you make changes. I also might see if I can contribute if I ever get some free time. :)
&gt; 4("#id") // damn it, didn't press shift hard enough Man, sometimes I think of preprocessor, so I can type 4 instead of $ in PHP.
This is why at work we have a lint rule for it. You can't actually check in code with debugger statements as they won't pass code review :) 
console.error also gives you a stack trace. 
You didn't read my post too well, eh?
Depends on what browser you were using back then. There are some methods in Firebug for console API that's still not available in Chrome and Firefox yet. You can compare them yourselves:- [Firefox](https://developer.mozilla.org/en-US/docs/Web/API/console) [Chrome](https://developers.google.com/chrome-developer-tools/docs/console-api) [Firebug](https://getfirebug.com/wiki/index.php/Console_API) And to answer your question, here's the farthest I could go back in history where [it was supported in Firebug](https://getfirebug.com/wiki/index.php?title=Console_API&amp;oldid=38). 
Haha, I guess not. In my defense, it blends in a bit, especially on a mobile app.
chrome, since the link goes to the chrome docs, so I mean chrome
Adding on to the previous comments: as always, over-optimisation is evil. Using a `for` loop to iterate over an array is much faster than using Array#forEach, **but Array#forEach is still really fast**. `getElementByID`, `getElementsByTagName`, and `getElementsByClassName` are much faster than `querySelector` and `querySelectorAll`, **but `querySelector` and `querySelectorAll` are still really fast**. Storing `this` in a variable and referencing that variable in scopes further down is much faster than using Function#bind, **but Function#bind is still really fast**. If something is genuinely causing you strife and it's not your fault (e.g. you aren't accidentally calling a function thousands of times, which is what's causing your script to be slow), then you can worry about this kind of thing. Otherwise, in the vast majority of circumstances, you really don't have any reason to be worrying. As [/u/kavunr](/u/kavunr) said, write your script in a way that's expressive and easy to debug. If you hit a perf road bump, then worry.
You guys kick butt. I'm going to play around with some of these and let you know what I settle on. 
You can set conditional breakpoints in chrome: http://stackoverflow.com/questions/14598561/javascript-how-to-set-a-conditional-break-point-in-chrome-debugger-tools
Awesome!
I actually wasn't with you until this explanation, but this point makes me understand its desirability. Thanks for the detail!
Just curious, in what scenario would you change the filename on each request? That sounds kinda counter-intuitive. Shouldn't it change after each file modification? Cheers.
Interestingly enough, I was asked to account for a possible use case where there would have been a billion rows -- my reply was that this would be an *extreme* edge case. Typical users however, would never be dealing with that much data. The real question is how to deal with say, 100,000 rows of related data in a performant way in JS on the front end?
It would be tabular data specifically -- amusingly on the whiteboard in my cubical I outlined a very similar solution since DOM redraws are probably the most expensive operation on the front end!
When you work with Javascript long enough you forget just how insane it actually is compared to everything else.
console.error is almost the same thing honestly. Only difference is it prints an error message in addition to showing a stack trace.
Here is the part of the .js file that I think you would need. Let me know if I should post more. Thanks so much for taking a look. $(".ps-vote-left").html("&lt;div class = 'ps-vote' data- ps-winner = '"+ res.posts[0] +"' data-ps-loser = '"+ res.posts[1] +"' onclick = 'pslikevote()'&gt;Choose&lt;/div&gt;"); $(".ps-vote-right").html("&lt;div class = 'ps-vote' data-ps-winner = '"+ res.posts[1] +"' data-ps-loser = '"+ res.posts[0] +"' onclick = 'pslikevote()'&gt;Choose&lt;/div&gt;"); 
From what I can see your onclick function in your code is linked to the id or variable of the "Choose" button. change the "&gt;Choose&lt;/div&gt;" to the id of the picture if the pictures are in a div. Do your images load from an array? and does your counter post the counts to a particular file?
angular runs in the client. everything else on the server
There are advantages in having a schema and there are advantages in not having a schema. Mongo doesn't enforce one but you'd still need to mostly apply one at the application level to be able to handle the various types of data an application usually needs. Mongoose tries to bridge that and provide best of both worlds. You can still save data outside of the defined schema so it's not really limiting you but having a schema also provides you with many benifits. You can create relationships between models, add default values to fields, require certain fields, create pre and post operations on each entry etc. It's a higher level tool where you can still use all the lower level mongo functions so it really doesn't take away anything while providing many very useful tools and a structure you would mostly need to create on your own anyway.
Its an aggressive cache busting technique, one which is recommended by [require.js during development](http://requirejs.org/docs/api.html#config-urlArgs).
I'm not OP and I don't believe there is anything wrong with React, but the core of React is the v-dom and the diff alogorithm. Pulling react apart into components is core to it's philosophy - but they would have no motivation to do so. The v-dom is web 2.0 technology, paradigm shifting shit. React's library is better than most of the proposed w3 dom standards for future web. This repo is an added level of complexity, and I would have no reason to use it over react. But OP's repo is still important because it's a fundamental building block of the future web and projects that could be even better than react or more specialized for different things. If people here (r/javascript) really realized wtf was happening with this crazy shit we'd see 2000 upvotes, not 2.
Is your project on Github or somewhere you can post a link to? It's a lot easier to give advice on code if it's visible.
The basis behind a RESTful application is that when you request a page, the server acts on that request somehow. The type of request should determine the type of response. For instance, a GET request should lookup data and return data in a format that you can work with; usually JSON. This separates the front and back end completely. What you should do is model your data in angularjs in a service. Start off with the basic [$resource service](https://docs.angularjs.org/api/ngResource/service/$resource) to create it. See [this video](https://egghead.io/lessons/angularjs-using-resource-for-data-models) to see a basic example. You'll then be able to call: contactMessage.$save(); This will make a post request to your server with the contactMessage object in the request parameters. You will need to handle this request in your express app. something like: app.post('/api/contactMessage/', api.contactMessage); The above should follow the MEAN yo generator. In your api module, you will have a function that will interact with the mongoose schema as you describe above.
&gt; Pulling react apart into components is core to it's philosophy If only we had bundled JS, CSS, HTML and other dependencies into components years ago - with a nice interface that separates the external from internal mess, and repositories of ready-made components to assemble basic apps in minutes instead of days. Fiddling with CSS seems like working in machine code - you have to manage things in your head to make sure there are no unwanted side effects.
You may want to consider using my library, especially if you have an infinite number of rows, and if you want a solution that is like and does not make any styling choice in your place. http://fulmicoton.com/fattable/index2.html A more featureful solution, is slickgrid. Both can handle large set of data.
1. But that's what you perviously proposed. Why to have two keywords when we have already var. 2. There would be lots of compatibility issues. Even with your lambda proposal. Using the arrow operator I can write this `x =&gt; (foo(x), x)` which will do something with x and then it returns it. But using your solution `(x) (foo(x), x)` the compiler wouldn't know if it's a function call or a function expression.
you mean like this https://www.npmjs.org/package/torrent-stream or https://github.com/feross/webtorrent?
What about textures?
I am surprised: closured is 5 times faster here! [This revision](http://jsperf.com/bind-vs-self-closure/7) is even more drastic. Why is bind so much slower? I would expect the runtime to translate it to code very similar to the other one.
I'm going to expand and clarify a bit of what Castas said below to hopefully help you understand a bit more of what is going on in your application. The first is, the basis behind REST is not requesting pages, but resources. A resources is a logical thing that you expose to the world, in your case above, Contact Message is a resource. Now that we have our resource defined, how do we do things with it? The basic flow is that a client, and this is your client, or some other client that you didn't write or have control over, and may not be a browser, makes a request to the resource. Every request contains at least 3 parts * The method the client want to perform. GET, POST, PUT, DELETE, UPDATE * The format the client wants the result in. HTML, JSON, XML, etc. * And of course the resource it wants So, given the above, what would your services look like? You may have a /contactmessage resource that has for it a GET method that returns either JSON or HTML. This is now your API that your client interacts with Now, once your services are written, mentally treat these as written by someone else, you have no knowledge of the internal model or methods on that internal model. Your client, the Angular code, takes the data emitted by the service, and manipulates it independently. If you want something to be done on the service side, you ask the service to do it for you, but the key is the client and the server are completely separated. Someone else could theoretically write a completely separate client that uses your services, without having to know what is happening. So tldr; Your client should know nothing about what is happening on the server, treat your services as another API that you develop against. 
With backbone.js you define a model and give it the rest api url. var contactmessage = new Backbone.Model.extend({ url: '/api/contactmessages' }); then you fetch all data with a single command contactmessage.fetch(); you have all your data, you can set defaults, and do further data parsing too.
My main goal in writing vanilla JS is that it doesn't require any dependencies. One thing I missed after leaving jQuery is not DOM abstraction but $.deffered object and AJAX stuff, because handling it sucks with native browser methods.
1. Don't use `for(key in object)` without `hasOwnProperty`. 2. Use meaningful names (`Person`). 
Of course you can. It's a usage of the comma operator. You can have a bunch of expressions in parentheses and only the last one is returned.
In JS you can (in most cases) put spaces wherever you want. Or omit them. It's both a good and a bad part of JS. :D &gt; the asterix is an 'ES6' function Not really. For example you can't return anything like you could in a normal function. Of course we could add more changes, but not necessarily to generators. We could get async and await, but they can already be used as long as we have yield and promises.
got push origin
"Utube" is YouTube, right? I tried googling "Utube" and I only found YT so I'm guessing that's what this is about... anyways -&gt; http://www.youtuberandomvideo.com/ 
Yes that's what I meant, I also said googol. I know about that site, but if you use it a little bit you'll notice that the videos tend to repeat or be from the same user more ofteh than would be expected. I'd be okay with building an external page to remove the clutter at some point but at the moment I just want to work on this fuction.
Just a tip, but it's possible to edit posts.
Here is the full js file: [Pics Mash](http://codeshare.io/58oqk) The images pull from a gallery, so I'm assuming that would be the array. I'm trying to learn this myself and I really appreciate the help. I'm thinking that I'd have to replace the "&gt;Choose&lt;/div&gt;" with this: $(".ps-img-left").html('&lt;img src = "' + res.images[0] + '" style = "width:100%" /&gt;'); Am I close or am I totally wrong? Thank you again for checking this out. 
No worries, these things happen
Yeah my main priorities right now are keeping track of the scene, and fixing depth ordering. I decided to open source it to give me a little push to keep working on it. EDIT: Added a bit of [animation](http://jdan.github.io/isomer/), but it's done manually (redrawing the scene each tick)
You are essentially implementing `mixins` or `traits` in a weird way. When trying out new things, you should consider why are you implementing the things you are implementing. Also what are the alternative approaches to those. e.g. "Why do you need inheritance at all?" // this is bad API Object.prototype.addAttributes = function(attrs, toProto) // this is nicer Object.prototype.mixin = function(other) // toProto isn't necessary and will be confusing // prototype is also an object, so you can just do Person.prototype.mixin(obj)
Really interesting library. Is there an easy way to import existing assets?
I manually extend things whenever I can, aka: var obj1 = { extend: extend, a: 5, b: 6 } var obj2 = { c: 7, d: 8 } function extend(food, props){ for(var i=0,j=props.length;i&lt;j;i++){ this[props[i]] = food[props[i]]; } } obj1.extend(obj2, ["c","d"]); But most of my objects only have to merge certain properties so this implementation is like 100 times faster than if you would need a more catch-all solution.
This looks great! I wonder if there's any potential for easy architecture diagrams like you see from AWS... 
Load a site you have an account with in a hidden iframe and steal your cookies.
If that were possible then people would have their accounts stolen constantly left and right. The same-origin policy applies to iframes just like everything else: you can't access anything in an iframe of a different origin.
Did not work in Firefox Nightly until I re-opened the page.. Pretty neat though!
You could open iframes to those services' logout pages. Bwhahahaha.
Bitcoin mining. I'm pretty sure that's a thing.
[That... that...](http://i.imgur.com/s2zg1qc.jpg)
This may not be horrible , but back when "Words with Friends" was big, there was a site that helped you cheat by telling you your best move with the letters you have. My friends were constantly using it to beat me so I decided to go there and see how easy it really was. This site was poorly put together and it had a comments/live chat section as well. I noticed that the input box allowed any type of input, so I decided to inject a js script to while(1) a string output. After that, the page wouldn't load unless you 'stopped the script' (which they didn't realize). Nothing too serious, but I felt pretty satisfied when my friends couldnt use it for a little while. 
Because javascript is running on the client (and their network), you can build a network scanner and port scanner that will run on their private network. There are several ways to do this, but my favorite is timing the error callback on an &amp;lt;img&gt; tag. If it's fast then the client responded (it's up). If it's slow then the host didn't respond (it's down). Port scanner works the same way with the opposite direction, but with tighter timings. This works because each layer of the network stack takes time and doesn't know that there is nothing up the stack listening. Most routers use http auth, and are using default usernames and passwords. So you can create a form in an iframe and post to various setting scripts. For instance, tell the router that it should proxy all data through a host you control. Now you have a man in the middle attack. There are javascript ports of bitcoin mining software, so you could steal the client's CPU cycles for profit. If you have enough clients, you could have them make hundreds of requests on a weak host, basically a DDoS using &amp;lt;img&gt; tags. That's all I could think of quickly, but there are many more. (Edit: words)
- Mine bitcoins with your visitors CPU time, using, say, WebWorker - Crash or render unresponsive your user's browser. JS is a Turing complete language, so unless your browser maker has solved the halting problem this is always a possibility - Become part of a DDoS botnet, with hidden `iframe`s and such, eating up a good amount of bandwidth both for the user and the victim - And of course social engineering attacks like phishing, though this doesn't necessarily require JS to pull off 
I would love to hear them the others if you feel like doing a write up. :) No worries if you don't.
Much nicer with the formatting. Does that return syntax work in all browsers? I.E. does this return 2 in all browsers? function getTwo() { return 1, 2; }
 var i = new Image(); i.onerror = function(){ alert('You are now logged out of Google') }; i.src = 'https://accounts.google.com/Logout';
Ah, but depending on how this site functions you might be able to dig into the client side code and determine *why* this happens or get some insights on how to go about what you are trying to do. This is a great way to learn in general.
I can verify. I have used Javascript to control robots.
Kek, you dont need to solve halting to kill unresponsive process. 
It's basically an extend function, just as underscore's extend, except that it's part of the object's prototype. I think it becomes a bit convoluted when there's a long chain of inheritance. You don't know what's part of the prototype and what's not (so you don't know what is truly shared), and what will be inherited or not. For example, if you add the hasOwnProperty check in addAttributes, you end up having objects that inherit from A1 but not its prototype. But if you don't check with hasOwnProperty, everyone would get its own reference to every attribute, including addAttributes itself. Also, don't mistake prototype for [[Prototype]]. The toProto parameter would make no sense whatsoever if it were not called on a constructor function. An object does not have a prototype, it has a [[Prototype]]. In your example, can you tell me what's the effect of this line Object.getPrototypeOf(prototypedObjects[0]).whatClass = 1; for all of the instances created that are an A1 or inherit from it?
&gt;Mine Bitcoins Sounds like a good alternative to advertising to me /s
But casually mentioning the halting problem makes you look so smart and knowledgeable.
Choosing it as a solution to a problem when you're not forced to.
This. (though I don't know what kek means.) The browser doesn't need to decide whether the program is ever going to halt, it's good enough to decide that it's been running for too long.
There are at least three implementations attempting to replace advertising with mining bitcoins. Not sure why you think this is /s worthy.
Is it possible to perform buffer overflow in conjunction with this type of attack? (assuming you could randomly guess where in your data you could put your pointer and the code to be run in the memory addressed being pointed to by said pointer)
It doesn't work well. Requires end user to run Java Runtime. 2 days into running it Chrome was red flagging my content to users as possibly malicious. 
I believe "kek" is a reference to World of Warcraft, where the other race's language would be unintelligible to you, but you could pick up certain common phrases and "lol" was "kek" in Orc.
That's actually what I tried to do when I first found the site. But there was nothing that I could isolate to understand both what it does and how it does it. I'm very out of practice with working with javascript so it could be something I'd be able to figure out after I've gotten a little more used to reading javascript.
Is kek not a thing? It should totally be a thing.
Cool idea; but how could anyone do it on a large enough scale? 
[Such is difficult](http://stackoverflow.com/questions/233719/is-it-possible-to-read-the-clipboard-in-firefox-safari-and-chrome-using-javascr) without some kind of Flash applet working alongside it. It would be a pretty significant security flaw if it was as easy as `window.clipdData.getData("Text")`. IE did once allow this, but I believe it has since been changed. Becuase Flash is typically not handled by the browser (asides from Chrome's PepperFlash for example) the browser cannot lways prevent a successful Flash method.
Because there are several reasons not to: 1) It's inneficient. Glad we solved that issue. Anyway seriously it's not a good thing: 1) it's slow so earns minimally, 2) visitors probably don't like their cpu going crazy when they visit a webpage 3) it uses way more power compared to asics and stuff so it's pretty bad for the environment too So it's unrealistic, it's not gonna replace ads.
I'm sorry that you've been downvoted. What you said is in fact not possible, but it triggered replies that expanded the conversation, so have an upvote.
I think I do need a catch-all solution because I want the child to inherit everything from its parent -- but not always necessarily. It makes me wonder about ways I could limit what's copied and what isn't. Maybe on the parent object I would define a list of keys which can be inherited, and then iterate over that like you're doing here...
I made a test page and it does indeed work: http://squarific.com/annoying/test.html
First figure out which line causes the reload and remove that line. Then read about functions and how to create and call them.
Hey egonelbre, I didn't know about the mixin design pattern! Thanks very much for mentioning it! Yeah, I'm not sure what I was getting at with that toProto argument. I was probably just [confusing prototype for [[Prototype]]](http://www.reddit.com/r/javascript/comments/243be9/prototyping_vs_redefining_attributes_merging/ch3dwj8). I'm implementing what I'm implementing because I want to be able to define objects which have a certain kind of functionality, and more complex objects which share that functionality but have more utility... Imagine you're making a 2D, tile-based game. You have a Tile class which defines size and position attributes, then you have a Unit class which extends Tile so it can have size and position, but also have a move() method, or a health attribute, etc. I don't want to just define a Unit class and not use the move() method or the health attribute, it'd be a waste of memory. I'd argue that mixins are inheritance. The new object is inheriting attributes from another one, so maybe I'm misunderstanding your last comment?
which algorithm? sieve?
Thanks for the explanation. I don't feel bad about not knowing it any more.
This little guy will crash any tab: while(true);
The thing is you can do it client side, so it can cost you nothing while earning you bitcoins.
This is the best I could come up with. It's for pasting in your console right now: var x=document.getElementsByTagName("div"); for(var i=0;i&lt;x.length;i++){x[i].style.fontSize="100px"; x[i].innerHTML="I LOVE JUSTIN BIEBER";}
If you have the type of product where people leave the browser for long periods of time open you can probably get a lot of work done.
Reddit and imgur? Omg conspiracy unveiled! 
The point wasn't that it would be expensive because of energy costs, but that it would be bad for the environment (JavaScript inefficiencies). However, if someone were seriously considering client-side bitcoin mining, environmental ethics probably isn't going to be that important to them.
This is wrong, "keke" is the romanized form of laughter in Korean, like "haha" or "jaja", and "kek" is just a shortened version (like "hah" or "heh"), and it was a thing long before WoW because of Koreans in Starcraft and other games. People thinking it's from WoW is rather like when traditional quotes get attributed to popular sources that actually just reproduce them, like "With great power comes great responsibility" being attributed to Uncle Ben, even though it's a much older saying.
Luckily then, WoW is not the origin of "kek", just something that's popularized its use.
Write two functions. The first function measures the distance your mouse travelled since last measure. The second function gets in the value by how many degrees the SVG should get turned and turns it. Now you need to write a timer that calls the first function every 100ms or smth like that and calcs the degree the SVG needs to be turned and calls the second function. You should be done now :) 
Kek is short for kekekeke which is korean for hahahah
I'd rather have money
http://www.urbandictionary.com/define.php?term=kek Look at the second definition.
*Here's the Urban Dictionary definition of* [***kek***](http://www.urbandictionary.com/define.php?term=kek) : --- &gt;Kek literally translates to lol on World of Warcraft. When someone from the Horde side types lol in /say, members of the alliance side see kek instead. Not specific to Orcs. --- _Human Paladin: Dude, that Orc totally just pwned you._ _Orc: Kek._ _Human: Dude, now he's laughing at you. Kick his ass._ --- [^(about)](http://www.reddit.com/r/autourbanbot/wiki/index) ^| [^(flag for glitch)](http://www.reddit.com/message/compose?to=/r/autourbanbot&amp;subject=bot%20glitch&amp;message=%0Acontext:http://www.reddit.com/r/javascript/comments/243w0y/what_are_the_evil_things_that_can_be_done_with/ch3kleo) ^| ^(**Summon**: urbanbot, what is something?)
Did you even read what I said?
&gt; urban dictionary says the same as me The point is that UD has different definitions, and there are other popular ones explicitly disagreeing with WoW being the origin of "kek".
&gt; I'd argue that mixins are inheritance. The new object is inheriting attributes from another one, so maybe I'm misunderstanding your last comment? It's not inheriting, it's copying. Inheritance also preserves the parent-child relation, whereas mixins don't. Traits only add methods, whereas mixins can add other stuff as well. &gt; I'm implementing what I'm implementing because I want to be able to define objects which have a certain kind of functionality, and more complex objects which share that functionality but have more utility... Usually these kinds of relations are simple in the beginning, but once you've got a lot of stuff, then changing something higher up the chain can have devastating effects on the rest of the program... it's just hard to reason about changes that are several levels deep. Using as flat hierarchy as possible is much simpler to deal with. &gt; Imagine you're making a 2D, tile-based game. You have a Tile class which defines size and position attributes, then you have a Unit class which extends Tile so it can have size and position, but also have a move() method, or a health attribute, etc. Making such a relation between Tile and Unit would be very weird. Does it make sense for a Tile size to be specified in the same terms as a Unit size? What if you have a Unit type that doesn't move? What if you have an immortal, immovable Unit? Anyways, currently the best decomposition for this kind of problem seems to be ECS [1](http://en.wikipedia.org/wiki/Entity_component_system) [2](http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/). Of course it's not perfect, inter-entity communication can get kind of hairy. Also, if the gameplay simulation is very simplistic, e.g. tic-tac-toe, then this would be a total overkill. &gt; I don't want to just define a Unit class and not use the move() method or the health attribute The move method wouldn't use more memory. There would still be a single prototype for methods. Although each instance would indeed contain health attribute. &gt; ... it'd be a waste of memory. JavaScript VMs do a lot of optimizations under the covers, when you start creating custom objects at runtime you could be throwing it out of the window.... which means you could end up using more memory. The only way to be sure is to compare different approaches.
Yeah, I didn't mean to suggest it would be ethical, or even practical, just technically and financially possible.
Other way around it's 'bur'.
All the times I've seen it on malware sites, it just seems to get used to put people on redirect roundabouts and stuff, to send them to drive by download pages. EDIT: Also inserting an iframe to a strange, obviously malicious Flash file I've tried decompiling. The site that it was on, got HEAPS of Viagra spam put on it. I might submit it to /r/malware or something if anyone's interested.
It's totally possible (it's just SHA-256) and people have done it too (I can dig up the link if /u/dreamtroit is interested, be sure your users are properly informed though, just burning their CPU the second they visit is pretty unethical imho). At this point though, mining Bitcoin even with Assembly optimized algorithms on the CPU is not worth it... I believe someone managed to get a GPU assisted algorithm working using WebGL, which is slightly less futile, slightly.
Bind is very different from closure. If you just want to "make `this` work" and not all the baggage that comes with Function#bind, you can use: function fastBind(fn, ctx) { return function() {return fn.apply(ctx, arguments); }; }
&gt; Usually these kinds of relations are simple in the beginning, but once you've got a lot of stuff, then changing something higher up the chain can have devastating effects on the rest of the program... it's just hard to reason about changes that are several levels deep. Using as flat hierarchy as possible is much simpler to deal with. I think this could easily start to conflict with DRY methodology. Particularly in the Unit extends Tile example because that one is so simple. Still, reading your [second ESC link](http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/) I appreciate what you're getting at. &gt; Making such a relation between Tile and Unit would be very weird. Does it make sense for a Tile size to be specified in the same terms as a Unit size? I'm imagining something like checkers. &gt; What if you have an immortal, immovable Unit? Then is it really a unit? I've defined a unit as something that has health and moves. That neither moves nor has health, so why not just use a Tile object. While I'm aware of ECS being a thing, I haven't really looked into it too much. Thanks for the advice :)
To the best of my knowledge yes. [According to MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator) this feature has been present since JS 1.0. FWIW JS 1.0 predates the ECMAScript specification [[source](http://en.wikipedia.org/wiki/ECMAScript)]
*Did you even read what I said?* I said "Perhaps WoW didn't invent it but just popularized it." which is **exactly** what urban dictionary suggests because the **most popular** entry is a WoW reference and then the 2nd most popular entry disagrees and says that WoW merely popularized it and did not invent it.
Hey, I'm very thankful for that but it did not work. I did some searching around and found a PHP file as well that I think would need to be edited. Here is that file: [Pics Mash PHP](http://codeshare.io/WQ5MV) If you wouldn't mind taking a look at it, that would rock. If not, I still appreciate what you've done so far. 
I'm on mobile and the site doesn't seem to work. So this is just a guess but it may generate a random url when you click the button and then open it in any iframe? Either way I'd start by finding out how the event handler is attached to that button. Put a breakpoint in that handler and step through and watch what it does to create the url (provided that is what it does. I'm curious now so I'll take a look when I get home).
&gt; At this point though, mining Bitcoin even with Assembly optimized algorithms on the CPU is not worth it... I believe someone managed to get a GPU assisted algorithm working using WebGL, which is slightly less futile, slightly. yeah I think they are way past that point already. Even custom ASICs aren't as potent as they were anymore
&gt; Fiddling with CSS seems like working in machine code Can't agree more with this. For something that is often taught to beginners as a fundamental part of web design (along with basic html), you'd think it would be less convoluted. Maybe I'm just terrible at design, but trying to create any non-trivial, adaptable layout using CSS is a royal pain. As for components, hopefully the browser vendors can finally decide on reasonable implementations of future standards in light of the new developments in javascript itself.
Personally, this project seems like an attempt to provide a better pure javascript DSL for a virtual DOM. JSX, immutability, no data-binding, etc. are points of contention with React (even if they make coding with the library so much nicer), so having a less opinionated, neutral implementation is a plus.
No that was a different one but that one is on youtube. "How I met your girlfriend". It's got some really interesting ways to track people through social media and such. Definitely worth checking out though. If I find a video of the one I was talking about I will post it. Really interesting stuff. 
How about: var x=document.getElementsByTagName("div"); for(var i=0;i&lt;x.length;i++){x[i].style.fontSize="100px"; x[i].innerHTML+="I LOVE JUSTIN BIEBER";} In case it is too hard to tell the difference, I added a '+' to the innerHTML statement. Without it, a page wrapped in divs seems to shorten the loop significantly, as the inner divs disappear. Also, to optimize the loop, you should use a separate variable for the length, like so: var x = document.getElementsByTagName("div"); var length = x.length; for (var i = 0; i &lt; length; i++) { x[i].style.fontSize = "100px"; x[i].innerHTML = "I LOVE JUSTIN BIEBER"; } [Source](http://youtu.be/mHtdZgou0qU?t=25m56s)
diabolical
THANKS! Thanks everyone for your responses. The situation is making sense to me now. With everything being in JavaScript, I was not seeing the logical division between server and client. I see it now. I will create angular services to wrap my server code endpoint functionality and pass data with json, just as I would with my .net apps. When I debug client/server code via MEAN, it makes better sense because I do not see server code unless I use node inspector. That was my "aha" moment. It's that everything written in JavaScript that was confusing me. So thanks for your help and pointing me in the right direction. 
The most heinous (legally) things a browser could be made to do via javascript are: * email death threats to the president * download/serve child porn * hack into other sites by launching password-guessing attacks * participate in a denial of service attack against other sites 
Actually at the first mention of UD I also said that exact quote, so no, it's not confusing at all.
&gt; I think you're in the wrong subreddit. /r/outdated is thataway -&gt; Nope hipsters/posers often don't qualify as engineers. Some engineers may do some amazing things with the shitty platform, but that doesn't make it a smart call when better platforms exist.
What platform is that, exactly? Are you referring to js that runs in the browser?
The thing about Bitcoin mining is that an individual miner using just a single i7 running 100% all cores would statistically take 3 years to validate a block. It's no longer about what an individual can contribute, but rather how large a pool of miners can be pulled off. At current difficulty, it takes [14Terahashes per second](http://www.alcula.com/calculators/finance/bitcoin-mining/) to make a bitcoin. Reddit recently saw almost [7 Million pageviews per day](http://www.reddit.com/r/AskReddit/about/traffic). Per use, that would mean reddit could produce a bitcoin a day if each user did [2 million hashes](http://jsperf.com/sha1-speed-test) per page view. tl;dr: I prove /r/almaaltevinden's three points with numbers.
**OCP Bugtracker - Bug 91776:** Robots in sentry mode kill everything in sight after firmware upgrade. **Comments:** Some dumbass wrote target.isEnemy = "false"; Since "false" is a string, it initiates the kill sequence whenever it locks onto a target. I don't know which I regret more: not using a type-safe language, or hiring this bunch of idiots to write the code for an automated weapons system. Fixed.
mbostock does that in the d3 api via closures function foo(x) { function my() { return x*x; } my.bar = function() { return x+1; }; return my; } baz = foo(27); baz(); baz.bar();
Unless I'm not following you right, even if the JS implementation allowed silent clipboard modification, the clipboard manager on the OS would have to be vulnerable to a buffer overflow in order for it to do anything besides jam a load of crap onto the clipboard. Though I suspect I don't understand what you're getting at. Explain?
I was asking if the clipboard didn't have any limit on the text that could be copied there, would it be vulnerable to a buffer overflow and the probability one could be pulled off?
Whoa Samy Kamkar is the one who made that Myspace virus a while back.
- Read the browser history Not directly, but you can insert hidden links into the page and detect if they have been visited by using the CSS :visited selector and checking the styling. This has been fixed in some browsers. - Log out of some sites Without CORS you can't send post requests or read the return value from get requests. But you can still fire off get requests if you don't care about the return value. Some major sites allow users to log off using get requests. It's kind of a weak list. Most truly scary attacks rely on browser bugs or flash.
That's not how websockets work.
[It's also **exactly** what /u/slikts said.](http://www.reddit.com/r/javascript/comments/243w0y/what_are_the_evil_things_that_can_be_done_with/ch3k3pp)
It was pretty close. Damn you brain! Gotta view some more defcon vids. 
Go on...
That works surprisingly well in the Android webview.
I see. I have to admit I haven't played with mongoose much. But based on your explanation, if mongoose doesn't really restrict user with schema and just adds another layer of feature on top of mongo to make the life of dev easier then it makes sense. It kinda acts like jquery for JavaScript but for mongo. ( not with the same functionality, of course)
To clarify, if you XSS, then it will look like it's from the domain you are on.
Fork bomb (if the pop up blocker is disabled) http://en.wikipedia.org/wiki/Fork_bomb Basically you create a script that uses the dom to make pop ups, and slowly increases the number of pop ups until the person's ram is completely consumed by browser popups. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Fork bomb**](https://en.wikipedia.org/wiki/Fork%20bomb): [](#sfw) --- &gt; &gt;In [computing](https://en.wikipedia.org/wiki/Computing), a __fork bomb__ (also called __rabbit virus__ or __wabbit__ ) is a [denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack) wherein a [process](https://en.wikipedia.org/wiki/Process_(computing\)) continually replicates itself to deplete available system resources. &gt;==== &gt;[**Image**](https://i.imgur.com/e8NZbdR.png) [^(i)](https://commons.wikimedia.org/wiki/File:Fork_bomb.svg) - *The concept behind a fork bomb — the processes continually replicate themselves, potentially causing a denial of service* --- ^Interesting: [^Fork ^\(system ^call)](https://en.wikipedia.org/wiki/Fork_\(system_call\)) ^| [^Denial-of-service ^attack](https://en.wikipedia.org/wiki/Denial-of-service_attack) ^| [^Jaromil](https://en.wikipedia.org/wiki/Jaromil) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ch3x0oz) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ch3x0oz)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
That's not an evil thing that can be done with JavaScript, that's just a vulnerability on the site. By that logic you might as well say JS can read anything on any site, or run native code on user's computer. You are conflating a couple of unrelated things in your posts.
If the person uses any kind of grease monkey extension you could be a huge jerk and load a userscript that auto logs people out of a website every time they try to visit the page.
tl;dr: (From the README) This is an implementation of a particle simulator in D3 inspired by the basic collision demo. This implementation provides many new features including: * Dynamically set gravity and charge * Randomized size and charge percentages * Interaction with the mouse * User-control of these values through dynamic sliders
&gt; I think this could easily start to conflict with DRY methodology. DRY-ness can fragment design, which means the some part understandability decreases. Forcing shared code, means you couple things together... essentially making the dependency chain complicated. Sometimes it's preferable just to duplicate code to make the dependencies simpler [1](http://www.sapiensworks.com/blog/post/2014/01/15/DRY-Code-Rich-Code.aspx). DRY-ness should be achieved by restructuring/remodeling things instead of making things share code. &gt; I'm imagining something like checkers. Then having "Tile", "Unit" and "health" doesn't make sense, however having a "Board" and "Piece" does. &gt; That neither moves nor has health, so why not just use a Tile object. Because it's a Unit that could still attack.
Totally agree. 
But if the attacker has been able to install a Javascript file on the site he's going to attack you for, it *would* work.
Use CSRF to reconfigure their router to give you some access. If the router is not too bad and prevent this, use some clickjacking. Not 100% success, you need some crafty page to make the user click but it's always better than nothing.
Which part are you stuck on specifically? The mongo/express part is pretty much covered in the standard passport tutorials. Do you want to d something specifically ember-ish with passport? 
I want to have the ember app open a login page that lets the user login etc this then will auth them on the node server using mongo etc. Then be able to pass the token to the ember application to allow for auth checking on the routes of the ember application. I want to then be able to check if the user is authenticated on the client without having to call back to the server on ever route of the ember application. 
I've not really looked closely at this one yet, but "predictable" and "consistent" are not terms often associated with WYSIWYG HTML editors :)
this happens if you send several simultaneous request at the same URL at such speed that next request is sent before previous request got response, it doesn't matter if it's a GET or POST request
Anything - it traditionally wasn't sandboxed so could run with the same rights as any other app under your user.
I implemented one with Express, Mongo and Passport as boilerplate code (no Ember). I believe it has a good Passport setup. [Link to github repo](https://github.com/diki/nodejs-passport-boilerplate)
I made something a bit similar to visualize to sieve of eratosthenes: http://dzautner.com/sieve-of-eratosthenes/
if you send several http request very fast (for exmaple 10 requests in basic forEach loop), Google Chrome will send one request but it call 10 callbacks
I didn't check but are you sure this is same for get and post? AFAIK, similar looking get requests are cached.
yup, same for post. i looks like it's a bug, because if you make several requests that are cached they are all sent and they have 304 in response also Google Chrome Canary build work fine, so i think this is definitely a bug.
I'm not sure what I'm looking for. When executed chrome sends three network requests sequentially to the same address? Is it that they're not executed in parallel or what? What am I not seeing here? Running the dev channel (36.0.1951.5).
I've found it on 34.0.1847.131. &gt; Multiple requests to the same resource in a small span of time result in only one network request. I guess it's a bug
How about adding more CDNs with this API https://github.com/jsdelivr/api ?
This is what SPDY does. If fiddle is using SPDY then that is what should be occuring. Otherwise, Chrome may be doing some enhancements of its own but I'm not somewhere where I can look into it.
Angular 2.x uses actual classes (ES6/Traceur). It also borrows a bunch of other ideas from AngularDart. http://blog.angularjs.org/2014/03/angular-20.html
The first test I always do for an editor is to zip over to Project Gutenberg, copy the full text of The Metamorphosis by Franz Kafka, and paste it in. This drags most editors to their knees. This one barely breaks a sweat until I paste in several copies. So, congratulations on that. Performance is surprisingly good. Couple things that could be tweaked... * There do not appear to be keyboard shortcuts for formatting commands? I've tried Ctrl-B and Command-B and no bold. * Clicking the formatting buttons causes the text field to lose focus, it probably shouldn't. I want to type `blah blah`, click bold, type `blah blah`, and get the second half as bold, without having to click back into the text manually. * The editor properly has the idea of a "point format" -- as in, I'm editing plaintext and click bold, now I should be inserting bold text even if there isn't a bold span already available to append to. But the point format only works if you put the cursor back in the EXACT spot it was when you clicked the formatting button. This problem would be mitigated if clicking the format button didn't lose focus and/or there were keyboard shortcuts. In that case BTW, I'd expect losing and regaining focus on the text area to clear the point format, if any. * Copy/pasting is a smidge buggy. Do what I did: copy [the full text of The Metamorphosis](http://www.gutenberg.org/files/5200/5200-h/5200-h.htm) starting from "One morning" and ending with "young body." Go to the [Morrigan demo page](http://morrigan-editor.org/), Ctrl-A or Command-A to select all, then Ctrl-V or Command-V to paste. In some paragraph, select a range of text, cut, and paste. You expect it to appear in the same place from where you cut it, but instead it is put into a new paragraph, centered. I think some formatting from the original document is left over? If you instead select all from the original document, and press backspace/delete *several times* to get rid of the existing formatting, then paste... It behaves as expected. * After adding a link, you cannot unlink it, and cannot edit the URL of the link it was going to. * There is no format option for underline, but there is for strikethrough, that's kind of odd. * Links are being added with href prepended with `http://`... even if I included the `http://` part. The URL dialog doesn't have any hint that this is going to happen, and it's probably inappropriate, what if I want to link to an `https://` URL? Another positive: the HTML generated by the editor is beautiful and elegant compared to some other editors I've seen. Adjacent format tags are merged together in appropriate ways, you don't end up with a bunch of crufty meaningless spans all over the place... All in all, one of the better web-based rich text editors I've seen. If the integration is as easy as it looks, that also puts it WAY above most other editors, which are a pain in the ass to integrate.
I'm not aware of anything that exactly matches this, but it would very easily be accomplished using [angular js](http://angularjs.org) and some creative css + js which you can find in this tutorial [here](http://tympanus.net/codrops/2013/05/21/natural-language-form-with-custom-input-elements/).
Cool, have been looking for an AngularJS project to do anyway. Will give it a shot barring any frameworks that may pop up. Thanks konbit!
I made [this boilerplate](https://github.com/kevinchandler/node-passport-local-demo) for myself a few months ago, in case I ever needed to mess w/ passport and didn't want to read through their documentation again
explains a lot
What I'm saying is that linting wouldn't really help you catch it though because you should be trained to expect a line error there, I doubt you'll take the time to actually read the error message.
I tend to code with the `devel` option set to true, and I believe that's the default.
Ah, I still remember the Clipboard Bandit, which I can't find any reference to now; it might still be out there, but I'm scared to look too hard on my work's network. Basically it was a pic of Burt Reynolds with a _Smokey and The Bandit_ background, and on page load, it'd automatically copy your clipboard and post it to the server. The page itself would then show what all it had captured, which included of course passwords, naughty links, etc. Was fun to send to someone then keep refreshing the page...
Have you thought about adding support for local fallbacks?
Actually AngularJS was developed as framework simplifying feedback surveys. So it should be spot on!
Have fun with [this](http://jsfiddle.net/BU9Kb/).
Its a good start. you will always find ways to improve things, so don't worry about getting it perfect. A working game that is inefficient is better than a not working game that is blazing fast. Get it working, get it organized, then get it fast. A few things I saw offhand were: * whitespace is your friend! use it as much as you can to make code more readible. * change your looping counter variables names, don't always use i. This will lead to problems in the future. And declare them as vars `for( var z = 0; z &lt; 18; z++ )` to avoid globals * put all the bricks into 1 array for easier looping. Your many sets of brick arrays are all following the same formula. Look into a nested loop (a loop in a loop) to do rows and columns. (definitely don't use the same loop counter var in a nested loop, easy mistake to make! maybe use row = 0; and col = 0; to keep them organized) * loops can be stopped with `break;` after you found a brick, so you don't have to loop over all the bricks after you found one. Assumes you can only hit one brick at a time. * you use &lt; and &gt; but never &lt;= or &gt;= which can cause problem when they are equal. * javascript is loosy goosy with equality. Look into == vs === to tighten that up. your collision code was not checking the right things. Thinking about a brick, we have 4 points that make up its edges: x, x+width, y, y+height. Your original was I think confusing x and y, or y and width, but anyway to check for something inside a box you need all 4. Check ball x with brick x, ball y with brick y. Also notice how whitespace makes this nice and easy to read and () can group conditions for easier reading or order of operation control for(var z = 0; z &lt; 18; z++) { if ( breakerBlocksSet1[z].visible == true &amp;&amp; ballSprite.x &gt;= breakerBlocksSet1[z].x &amp;&amp; ballSprite.x &lt;= (breakerBlocksSet1[z].x + breakerBlocksSet1[z].width) &amp;&amp; ballSprite.y &gt;= breakerBlocksSet1[z].y &amp;&amp; ballSprite.y &lt;= (breakerBlocksSet1[z].y + breakerBlocksSet1[z].height) ) { brickPos = z; collisionOccurs = true; break; // return should happen last when this is a function // return true; } } http://jsfiddle.net/6DkYP/
It's default but it's a bad practice and should be disabled as shipping with it on can cause problems.
Sure, that's why it should be set to false in your Grunt deploy JSHint config (or other deploy script). Turning off development mode while developing because you won't want it on when deploying seems backwards to me.
I have seen that there is a client side auth for ember using simple auth but Id rather not have to use to types of auth. 
You know what? You're right. I was being handed a horrible json file with unordered numerical name/value pairs (ie. { "10": "6.92", "3": "4.75", "17": "13.85", } ) and I was, in turn, being lazy with how I handled them. Just because my boss doesn't know nor give a shit doesn't mean I should lower my expectations of myself. I wrote out a huge excuse as to why I was doing it like I was but stopped halfway through it and realized what I was doing. I know you probably didn't mean it to have that effect but thanks for the reality slap. I apparently needed it.
Oh thank you, I've been waiting for a response all day. I really appreciate your advice as well, since I'm only just starting out I find it difficult to find help when there are so many different sources for it. Regarding the collision code, I guess I just tried to re-use the collisions I had for my paddle seeing as how both the bricks and the paddle are rectangles I thought that they would work in the same way.
cool. do you have a pointer to the specific line of source? note that in this case we need baz(x) and baz.bar(x) to evaluate differently for specific x. so we get: function foo(){ var z = function(x){ return x*x; }; z.bar = function(x){ return x+1; }; return z; } which is where the post starts :) unless i missed something.
You're sure it's a bug and not a feature? http://www.chromium.org/throttling
https://github.com/trevorlinton/webkit.js
It is hard to get specific help, but in general there is an incredible amount of information on JavaScript online, which is absolutely amazing for learning. You can look at anyone's code! But yes, there is that leap from tutorial to project, and that is where you really learn. My biggest tip when I am trying to figure something out is to use the console A LOT. If you are not familiar with console.log(), it will help you figure out what is going on, you can log vars or objects or whatever you want to the console. Also look into setting breakpoints in the developer tools if you're having a problem in a specific place. It will pause JS execution at that spot so you can explore what is going on. Chrome devtools has a lot of videos about debugging oneline.
that's exactly how I feel...
An easy fix should be to include an extra query parameter with the current time (i.e. bust=1398708132). Chrome will be forced to send a new request since it can't guarantee you are requesting the same resource.
Did your team develop SPAs before you did Backbone/Marionette? Was the original application built from scratch? Our first Backbone SPA app, I could probably refactor that down to half the code it is now by just doing another pass through with things I have learned along the way. Do you have a change in the overall size of the JavaScript each user is downloading now? You might have cut down on the size of your app but Angular is also way bigger in size than Backbone/Marionette. 
At places where many people work, PDF generation is still a requirement. This will definitely come in handy.
I hit Run and get 3 requests sent, so not seeing what you're reporting. On Chrome 36-dev.
Citation?
It should as comma is considered a full operator. You can use a comma in any spot that is expecting a single statement to add an additional.
A.K.A. little bobby tables
I wouldn't say that a 10k LOC application is complex or difficult to built. Taking into consideration that it's a Single Page App and it is powered by websockets, it not so trivial to built either. It is not a huge app, but it is fast and it tries to provide the best experience it can. 4 things that angular helped a lot with: * easier to assemble and configure the whole application * 2 way data binding * declarative markup * unit testing
~5%. http://bocoup.com/weblog/organizing-your-backbone-js-application-with-modules/ Most of the code was application logic. 
Nice, thanks.
this is the first solution I've found the second one was to wrap requests in subsequent promises
&gt; I've found it on 34.0.1847.131. &gt;&gt; Multiple requests to the same resource in a small span of time result in only one network request. &gt; I guess it's a bug 
Do not use this. This is the wrong way to handle SQL querying. http://blog.codinghorror.com/give-me-parameterized-sql-or-give-me-death/ The screenshot at the bottom even says ["really, you should use a parameterized query."](https://camo.githubusercontent.com/95463246577cb3fc458c71bfc9159f33c1d6fa23/687474703a2f2f662e636c2e6c792f6974656d732f324b30633263326e3236315130363149313230742f53637265656e73686f74253230323031342d30342d323725323030302e34372e30382e706e67)
I'm still getting text/plain for requests that don't include the type parameter (looks to be sending JSON by default) and for JSON requests. Looks like you're setting status codes with your errors now, which is good, but I suggest taking it a step further. Instead of just saying error: 404 (information I can get by grabbing the status code), include a helpful message. This is usually done with something like error:{ code: 404, message: "Sorry! We couldn't find a movie with that title!"}. Hope that helps! If you need any additional information or anything, PM me. I don't claim to be the authority on APIs, but I've written a pretty good number of them so I can at least be somewhat helpful.
Example with this breaking in POST too http://fiddle.jshell.net/fxKJa/
My favorite advanced javascript breakdown is this website http://bonsaiden.github.io/JavaScript-Garden/ 
As far as i'm concerned, anything goes, i'll gather some suggestions here and then continue development
may I ask why you're looking for a JS framework to do this and you don't investigate using a service like SurveyMonkey or a more generic form building service like JotForm?
From my research all I've seen have been very generic-looking forms with paid options. I'm looking for something fully customizable (CSS, jQuery) with the one-page questions. I'm knee deep in this Angular thing but if you'd like to recommend a service that I can host locally, has a fully customizable interface and is open source/free, please recommend!
Actors are one [way of dealing with concurrent computation](http://en.wikipedia.org/wiki/Concurrency_%28computer_science%29#Models), but don't deal with handling concurrent access to e.g. memory -- they largely avoid that. The WebWorker actor model is also a rather simple one compared to what that wiki page talks about. Javascript just has no memory model and threading model like e.g. Java. No memory protection, locking or synchronization, but instead is built on the concept of being inherently single-threaded, with the WebWorkers added on top with exactly the kind of parallel mechanism possible in such a world -- the aforementioned simple actor model. (Except maybe something sucky like [python's global interpreter lock](https://wiki.python.org/moin/GlobalInterpreterLock)).
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 3. [**Models**](https://en.wikipedia.org/wiki/Concurrency_%28computer_science%29#Models) of article [**Concurrency %28computer science%29**](https://en.wikipedia.org/wiki/Concurrency%20%28computer%20science%29): [](#sfw) --- &gt; &gt;A number of formalisms for modeling and understanding concurrent systems have been developed, including: &gt; &gt;* The [Parallel Random Access Machine](https://en.wikipedia.org/wiki/Parallel_Random_Access_Machine) &gt;* The [Actor model](https://en.wikipedia.org/wiki/Actor_model) &gt;* Computational bridging models such as the [BSP](https://en.wikipedia.org/wiki/Bulk_Synchronous_Parallel) model &gt;* [Petri nets](https://en.wikipedia.org/wiki/Petri_net) &gt;* [Process calculi](https://en.wikipedia.org/wiki/Process_calculi) &gt; &gt;* [CSP](https://en.wikipedia.org/wiki/Communicating_sequential_processes) model &gt;* [Tuple spaces](https://en.wikipedia.org/wiki/Tuple_space), e.g., [Linda](https://en.wikipedia.org/wiki/Linda_(coordination_language\)) &gt;* [SCOOP](https://en.wikipedia.org/wiki/SCOOP_(software\)) (Simple Concurrent Object-Oriented Programming) &gt;* [Reo Coordination Language](https://en.wikipedia.org/wiki/Reo_Coordination_Language) &gt;Some of these models of concurrency are primarily intended to support reasoning and specification, while others can be used through the entire development cycle, including design, implementation, proof, testing and simulation of concurrent systems. Some of these are based on [message passing](https://en.wikipedia.org/wiki/Message_passing), while others have different mechanisms for concurrency. &gt;The proliferation of different models of concurrency has motivated some researchers to develop ways to unify these different theoretical models. For example, Lee and Sangiovanni-Vincentelli have demonstrated that a so-called "tagged-signal" model can be used to provide a common framework for defining the [denotational semantics](https://en.wikipedia.org/wiki/Denotational_semantics) of a variety of different models of concurrency, while Nielsen, Sassone, and Winskel have demonstrated that [category theory](https://en.wikipedia.org/wiki/Category_theory) can be used to provide a similar unified understanding of different models. &gt;The Concurrency Representation Theorem in the Actor model provides a fairly general way to represent concurrent systems that are closed in the sense that they do not receive communications from outside. (Other concurrency systems, e.g., [process calculi](https://en.wikipedia.org/wiki/Process_calculi) can be modeled in the Actor model using a [two-phase commit protocol](https://en.wikipedia.org/wiki/Two-phase_commit_protocol). ) The mathematical denotation denoted by a closed system S is constructed increasingly better approximations from an initial behavior called ⊥S using a behavior approximating function __progression__S to construct a denotation (meaning ) for S as follows: &gt;&gt; &gt;&gt;__Denote__S ≡ ⊔i∈ω __progression__S^i(⊥S) &gt;In this way, S can be mathematically characterized in terms of all its possible behaviors. &gt; --- ^Interesting: [^Computer ^science](https://en.wikipedia.org/wiki/Computer_science) ^| [^Ada ^\(programming ^language)](https://en.wikipedia.org/wiki/Ada_\(programming_language\)) ^| [^List ^of ^Stanford ^University ^people](https://en.wikipedia.org/wiki/List_of_Stanford_University_people) ^| [^Bachelor's ^degree](https://en.wikipedia.org/wiki/Bachelor%27s_degree) ^| [^Open ^source](https://en.wikipedia.org/wiki/Open_source) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ch4fwuu) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ch4fwuu)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
check out jotform. you can include it via iframe or just include their JS, and use your own CSS, etc. they have a free account you can tinker with before deciding on paying. I just used it on a project not long ago.
Cixis, you can build a parameterized query with that as well, see other examples above. I was just trying to showcase the fact that you can put javascript in if you'd like. I should use a better screenshot though. Nonetheless - thanks for the feedback! Let me know if that addresses the concern or if you have more.
Apologies for not reading more thoroughly.
This looks pretty cool, pretty sensible, and pretty useful, actually. That said, in the README, you imply that `webwork` takes a callback with args `(err, result)`, but in your example, it's the worker created by the `webwork` factory function that takes the callback. I understood what you meant, it just caused me to double-take for a moment.
Fixed it! Check out a live demo: [demo](https://reem.github.io/d3-particle-simulator).
Agreed. A very nice update on a already great library. 
If you are using browserify, there is already a much easier and better way to get web workers *without* increasing your bundle size. Specifically there is the webworkify module: https://github.com/substack/webworkify It doesn't require browserify transforms or any tricky stuff, and just works out of the box.
Awesome, thanks!
I've written several survey engines in the past couple of years. Rendering a survey is easy. Sending the responses back is easy. Figuring out the best way to store the answers and report on them is a black art all by itself. Use Survey Monkey if you can.
I like it, looks interesting to better visualize big javascript libraries. If anything, it gets you all the functions existing in that code. It would be cool to easily follow different paths, improvements in rendering big graphs (zoom in/out) etc... I've tested it with some 54000 lines of javascript, it really did draw the whole thing. edit: For start, it would be cool to have colour coded lines and some export option (jpeg or even better some vector format). When there's a lot of code, it starts to be a mess to read and follow and not all the functions are visible.
While this is a good article, just an FYI for anyone who is going to copy and paste code. You should never return 'Wrong username!' or 'Wrong password!' from a login method. You are leaking information to a potential attacker. A generic "Invalid Credentials" response would be more secure.
&gt; What platform is that, exactly? Are you referring to js that runs in the browser? Node.js, JavaScript in general. In the browser you're stuck with it, so you might as well try to make the best of it like Angular or Ember. However, the people using it for server side, command line tools, etc... have to be on crack. 
I made this script a while back for April Fools Day. It’s a far-cry from the maliciousness of CSRF or XSS, but it will slowly drive a user insane: http://restlessdesign.github.io/pestilence/
I like it! thanks a lot for the work. I think I can use it in a project very soon.
For POST requests that send any data (even the same data repeatedly) this doesn't happen.
I love it. I just started a new gig with a new architecture and am currently slogging my way through the new code. This would make that kind of familiarization much easier. Regarding improvement, maybe you could add the ability to interact with each node? You could also use D3, Three.js or Two.js to further visualize it as a good graph. Using one of the latter would make the graph interactive as well.
Great work. I love small libs like this 
Nice! Graph is clear and gives me a quick overview of the interactions between functions. Like the other commenters said maybe a more elaborate graph view with zooming in/out. What I did notice is that it doesn't show functions defined like this (although I am not quite sure if people actually do this): var functionName = function(){ } And also maybe something to think about would be showing parameters.
This is one of my favorites. Not completely javascript, but using an http proxy you can get the browser to cache a copy of bankofamerica.com that includes your own javascript code. DEFCON 20: Owning Bad Guys {And Mafia} With Javas…: http://youtu.be/kLt_uqSCEUA
(revised in response to feedback)
For starters, try explaining what you want it to do. It's not immediately apparent.
it was this from blackhat actually btw http://www.youtube.com/watch?v=qB52xwRlDsk
finally found this video http://www.youtube.com/watch?v=qB52xwRlDsk check it out 
Damn, I like this. Nice work! Would love to see those performance tests
I can confirm people do it. And some frameworks too: $scope.something = function () {} The tool is nice however. I agree on showing parametrs, it could be useful too.
link?
&gt;remainingDosh.value = remainingDosh-25 This line says that the value should be some DOM element - 25, which will result in NaN. I think you want the following instead: remainingDosh.value = remainingDosh.value-25 Edit: formatting.
I did it about a year ago https://github.com/carlbarrdahl/tonematrix Take a look at this for better timing resolution http://www.html5rocks.com/en/tutorials/audio/scheduling/
Isn't that how it's supposed to be done? Have I been doing it wrong all these years?
FYI Your web host CPU limit has been reached
There are various ways to define functions. function xyz() {} var xyz = function() {} var xyz = function xyz() {} var xyz = function abc() { abc() } then IIFE (function() {}())
local fallbacks have been added
Hello, utuxia. I had forgotten to put the link before. It's there now, thanks!
nice, memorable url :p
TIL dogecoin is a thing.
This is actually really cool. This might be a really useful tool for refactoring legacy code. Definitely needs more work, though. Please keep us posted on your progress!
Yeah, it's crazy that /r/bitcoin has 118k subscribers and was started years ago while /r/dogecoin has 78k subscribers and was started in Dec of '13.
/r/dogecoin /r/bitcoin ***** [^report ^a ^**problem**](http://reddit.com/r/LinkFixerBotSnr) ^| [^delete ^comment](http://www.reddit.com/message/compose?to=LinkFixerBotSnr&amp;subject=Comment%20Deletion%20%28Parent%20Commenter%20Only%29&amp;message=%2Bdelete+ch4wou6) ^| [^source ^code](http://github.com/WinneonSword/LFB) ^| [^contact ^developer](http://reddit.com/user/WinneonSword)
Just Javascript, with Jquery, on a regular website. The images can be both in the form of &lt;img tags and Canvas images.
Yes! I could use something like this to analyze our code. Put that up on GitHub and register with NPM :)
Why would you allow users to view your MySQL structure..?
I know, a great idea. I'm really curious about performance as well. This isn't my project but comes from /u/bittered.
It's not like yours, but check out [bramp/js-sequence-diagrams][0] [0]: https://github.com/bramp/js-sequence-diagrams
The tool errors on my code sample: http://prettydiff.com/prettydiff.js My other code samples either return merely a dot for the graph or jspretty.js throws the same error as the prior mentioned sample. http://prettydiff.com/lib **EDIT** The previously mentioned issues are fixed! So far the tool only operates on global functions, which is not always helpful. This tool would be extremely valuable if it worked with all functions.
The first client is you. Is it useful for you? If it's useful for you, chances are it will be useful for someone else.
I like it, but it draws nothing for window.onload = function()
Embrace. This is the Extend part. Extinguish. Nothing to see here. Move on.
I'd like to read an article like this one to get a better idea of what Node.js is all about. The problem is that this article is so poorly written and edited that I don't think I should trust what's written.
http://3.bp.blogspot.com/_G2axnQ_mP7g/TKDZkqWb8cI/AAAAAAAAAA8/tFDZS5NAzPc/s1600/homework_alert.gif
Is it of use to you?
I pretty much always do it this way.
var xyz = function() {} are kept in place, function xyz(){} are hoisted to the top of the block and don't need to be executed in-order
[wow.....](http://imgur.com/PUZ91cS)
heh, Magento uses it so i have to do it like that :) They also use Scriptaculous but trying to do an Effect.scrollTo() didn't work :/
Its been 6 years since I've used the framework, so can't help ya on that one. Good luck!
YES!!! I've been looking for something like this for a while. Next steps: export to dia. srsly.
Thanks for this. We have been considering moving to Dynatable from Datatables at our firm. Is there anyway we can freeze columns (lets say the first column) for horizontal scroll? Also, anyway to hook in custom scrollbars (like jScrollPane) to Dynatable?
Im interested in your project. I have made a few JS games myself, can we work together? Tip: use canvas drawtext function if you want
/r/thatHappened 
My guess is because it's being executed after the page has loaded. Document.write is performing a document.open behind-the-scenes and is wiping/rewriting the page. Alert's don't rewrite the page, they're just a blocking UI widget. Document.write's can be useful in some instances. I can think of writing script nodes as one use case, but your use case is a bad example of using document.write. 
document.write shouldn't ever be used at all anymore. It was ok when there was no alternative in the early 90s. You can use createElement/createTextNode/appendChild/insertBefore or even innerHTML nowadays, if you want to keep your JS vanilla. If that's overcomplicated for you, there's no shame in using jQuery.
The Extend part here is extending into the direction of what future versions of javascript will be (with regards to the standards). That's not an extension in a way that is separating Typescript developers from JS developers, they're just able to use upcoming features earlier. Apart from that, typescript compiles into javascript that you could have written yourself, but in a much more efficient way. How do you see a possible Extinguish part? 
You'll want to convert each index to an object. 
This [SO](http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js) answer has a list of Node.Js resources and should be able to help you get started.
 function Movie(name, genre, location) { this.name = name; this.genre = genre; this.location = location; } var movies = [ new Movie("Shawshank", "?", "?"), new Movie("Godfather", "?", "?"), new Movie("Pulp", "?", "?"), new Movie("Good", "?", "?"), new Movie("Flew" , "?", "?"), new Movie("Breakfast", "?", "?"), new Movie("Samurai", "?", "?"), new Movie("Kes", "?", "?"), new Movie("Knight", "?", "?"), new Movie("Rear" , "?", "?"), new Movie("Rope, "?", "?")" ];
You would have to make it an object (effectively an associative array). I would recommend something like: var movies = {"Shawshank":{}, "Godfather":{}, "Pulp":{}}; Like an associative array, you can access each movie with the syntax movies["Shawshank"] and then each entry has an object attached to it, where you can set whichever attributes you want with something like movies["Shawshank"]["location"] = "USA"
&gt;How do you see a possible Extinguish part? Microsoft's history.
I would recommend this alternative if you don't need to preserve the order of the movies. Otherwise you'll need an array.
So true.
I like the idea of using a Movie object to ensure uniform attributes. One challenge with this, though, is that you lose random access. For example, if I don't know that "Shawshank" is at index 0, there's no easy way to find its info.
Like this? function Movie (location, duration, genre, rating, year){ this.location = location; this.duration = duration; this.genre = genre; this.rating = rating; this.year = year; } var movies = [ Shawshank = {"USA", "142", "drama", "15","1994", "Frank"}; Godfather = {"USA", "175", "crime", "15","1972", "Francis"} Pulp = {"USA", "154", "crime", "18","1994", "Quetin"} Good = {"USA", "161", "westerm", "15","1966", "Sergio"} Flew = {"USA", "133", "drama", "15","1975", "Milos"} Breakfast = {"USA", "97", "drama", "15","1985", "John"} Samurai = {"Japan", "207", "action", "PG","1954", "Akira"} Kes = {"UK", "110", "drama", "PG","1969", "Ken"} Knight = {"USA","152", "action", "15", "2008", "Chris"} Rear = {"USA", "112", "thriller", "PG", "1954", "Alfred"} Rope = {"USA", "80", "thriller", "PG", "1948", "Francis"} ];
Is it just me, or does anyone else experience severe browser performance degradation from loading this page? I have a modern system with a modern browser, and yet I can barely even scroll... it actually locks up my entire UI for many seconds at a time.
&gt; For example, if I don't know that "Shawshank" is at index 0, there's no easy way to find its info. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find You could also use an object where the key is the movie name, and the value is its attributes.
This is really cool. As others said please get this on github and open source it. This could be an interesting tool for performance diagnostic or debugging.
Small nabble: when I drag the slider and my mouse moves up too high the text above gets highlighted (see [here](http://i.imgur.com/qn3HYIx.png)). Using Google Chrome 34.0.1847.131 on OS X Other than that, pretty cool!
You.should oversize the touch hit box. Very hard to grab, even on my tablet.
Look at how he creates the new objects again. You did it differently. Theres an article that does a better job explaining this concept, http://www.phpied.com/3-ways-to-define-a-javascript-class/.
I tried it with the jQuery source code, the [result](https://i.imgur.com/2PtgePF.jpg) is quite hilarious
Nice, thank you
use it on body element. in production there's an approach called unobtrosive javascript, which means you subscribe to events from javascript, and not with inline calls. You can use jQuery's ready: $(function(){ //Dom is ready for you to do what you want. }); which actually is $(document).ready(function(){ //Dom is ready for you to do what you want. })
God damn that's a lot of boilerplate code.
So more like this? function Movie (title, location, duration, genre, rating, year, director){ this.title = title; this.location = location; this.duration = duration; this.genre = genre; this.rating = rating; this.year = year; } var movies = [ new Movie = {"Shawhsank", "USA", "142", "drama", "15","1994", "Frank"}; new Movie = {"Godfather", "USA", "175", "crime", "15","1972", "Francis"} new Movie = {"Pulp", "USA", "154", "crime", "18","1994", "Quetin"} new Movie = {"Good", "USA", "161", "westerm", "15","1966", "Sergio"} new Movie = {"Flew", "USA", "133", "drama", "15","1975", "Milos"} new Movie = {"Breakfast", "USA", "97", "drama", "15","1985", "John"} new Movie = {"Samurai", "Japan", "207", "action", "PG","1954", "Akira"} new Movie = {"Kes","UK", "110", "drama", "PG","1969", "Ken"} new Movie = {"Knight", "USA","152", "action", "15", "2008", "Chris"} new Movie = {"Rear", "USA", "112", "thriller", "PG", "1954", "Alfred"} new Movie = {"Rope", "80", "thriller", "PG", "1948", "Alfred"} ]; You see I have a form which asks the user for input for each property of the film (duration, genre, rating, year). So if the user only selects "action" then all the action films should be displayed. If the user selects action with director Chris, then only "Knight" should be displayed. By displayed I mean, the title of the film in an alert. Is that possible?
Interesting. Do you know what the runtime is of that find function? And yeah, I was thinking that, in a larger system, you would probably have some sort of movie ID that you used as a key and the movie title was stored in the object along with its other attributes. But in a small-scale program, using movie title as key will probably suffice.
It is very possibly, but you have quite a bit to learn before you get there, pay close attention to syntax... You have... &gt; new Movie = {"Shawhsank", "USA", "142", "drama", "15","1994", "Frank"}; several things wrong here... First, the equal sign is for setting variables, you are creating an object here. Curly brackets are used to create a blank object, and the syntax is wrong for that anyway. I will skip those because they don't belong there, but you should look up how to properly use them. To create a new instance of the object "Movie" you created, the syntax is &gt;new Movie("Shawhsank", "USA", "142", "drama", "15","1994", "Frank") Now from there there are issues with your array as well. The syntax for creating an array as you did requires commas and no semicolons. you have [val1; val2 val3 val4] it should be [val1, val2, val3, val4] What you are trying to do is possible, but is probably a bit above your level today. I would do some more reading, and running your practice code to see what different things do (had you ran what you posted it would throw errors and you would have known it was not correct at least). But once you get the setting of your array down, look into loops and if statements. You will probably want to practice with the basics of those first, than think about how you can use them to analyze your array.
No wonder Magento is such a pile of shit. But I digress, here is a page that uses scriptaculous for smooth scrolling http://madrobby.github.io/scriptaculous/effect-scrollto/ Check out the sample code to make it work: &lt;a href="#" onclick="Effect.ScrollTo('article_top'); return false;"&gt;Click me to scroll to the top of the article&lt;/a&gt; I think Effect.ScrollTo takes a DOM id as its argument.
&gt; but in a much more efficient way. Really? How? If it compiles to vanilla JavaScript how could it write more efficient JavaScript than I can do by hand?
Don't get me started on Magento :( I can't modify the HTML cause it's autogenerated from an extension (i guess i could add stuff to the elements after page load but is that a performance issue?), but i will try to hook into them using this. Thanks
Ahh, okay. That's what I figured. So I guess it's a matter of how large the movie set is going to be.
I meant efficiency in the writing part, not the efficiency of the resulting js code.
Just finished the syntax errors: function Movie (title, location, duration, genre, rating, year, director){ this.title = title; this.location = location; this.duration = duration; this.genre = genre; this.rating = rating; this.year = year; } var movies = [ new Movie ("Shawhsank", "USA", "142", "drama", "15","1994", "Frank"), new Movie ("Godfather", "USA", "175", "crime", "15","1972", "Francis"), new Movie ("Pulp", "USA", "154", "crime", "18","1994", "Quetin"), new Movie ("Good", "USA", "161", "westerm", "15","1966", "Sergio"), new Movie ("Flew", "USA", "133", "drama", "15","1975", "Milos"), new Movie ("Breakfast", "USA", "97", "drama", "15","1985", "John"), new Movie ("Samurai", "Japan", "207", "action", "PG","1954", "Akira"), new Movie ("Kes","UK", "110", "drama", "PG","1969", "Ken"), new Movie ("Knight", "USA","152", "action", "15", "2008", "Chris"), new Movie ("Rear", "USA", "112", "thriller", "PG", "1954", "Alfred"), new Movie ("Rope", "80", "thriller", "PG", "1948", "Alfred") ]; I am well aware of how to use loops and if statements. The previous code I wrote looked like this: if (document.form.genre.value === "crime" &amp;&amp; document.form.year.value === "1994" &amp;&amp; document.form.location.value === "USA" &amp;&amp; document.form.director.value === "Quetin") { alert("Pulp Fiction is perfect match for you"); } But I figured it'd be better to use an array to hold the film and it's details. I'm just unsure how I can avoid doing an if statement for each possible entry. I'm sure I can use a for loop to loop through the array and see if there is a match for what the user has input, just not 100% sure. Maybe something like: var Movie = ["Objects","Here"]; var arrayLength = Movie.length; for (var i = 0; i &lt; arrayLength; i++) { //Do something } Just not sure what to do next.
That's interesting. It's really similar... Structurally, it's exactly the same thing, apart from the function support. If I could have one remark, though, supposing you're using this code generally on big objects - even if you probably aren't (because: huge maps) - is that `for(var key in obj) {}` is a *lot* slower than `var keys = Object.keys(obj); for(var i = 0; i &lt; keys.length; i++) { /*...*/ }`. I've some rough benchmarks on this: https://gist.github.com/yamadapc/10604931 But function support is interesting. I'd say what I like the most about this "formatting" idea, is that one could use a JSON map, to format objects, but I guess you could represent a function as a String, and try to make the code safe, from that. Plus though I'm a heavy user of lodash, I don't like introducing many dependencies, unless they are necessary. But I really like it... haha :) 
Yep. The alternative is doing what databases do, define search criteria categories and build indexes on the side.
K, thanks mate!!!
scripts are executed as soon as they load, so putting your script at the bottom of your pag is everything you need. ...&lt;script type="text/javascript"&gt;myFunction();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
It would be beautiful if it also visualized variable activity and when calls are being made within a function as a zoom-in feature.
Great tool... Having trouble reading function names that are left of "popular" functions, where their names get covered by all the incoming arrows. (maybe make font lighter color &amp; z-index'd to the front for short term... or for long term use one of the fancy graphics libs suggested by others?)
I never downvote cause it's a useless, childish thing. Especially on reddit where 80% of the posters don't know what they're talking about and under the age of 18. Microsoft's history shows it has a habit of intruding into a technology, appear to embrace it, extend its capabilities to where you rely on it, and then they have you. Open source does mean you are free to do whatever you want with it and the license needs to be looked at. However, Microsoft, on the web, is a minor player and any attempts on their part to do a similar thing would quickly be found out and dismissed. Not that I think Typescript has any chance in hell of succeeding.
You can place this anywhere and it will run after the page has loaded : document.addEventListener("load", myFunction); You can also try to include just a `myFunction()` call somewhere, and the function will be executed -- however, it will be executed while the page is still loading. If you execute a script during load, and try to reference elements further down in the page (i.e. the `demo` element) the script won't be able to find it and you'll get a `null` back from the `getElementById` call. This is one of the reasons a lot of scripts appear at the bottom of the page right before `&lt;/body&gt;` as /u/And7s mentions -- you get the advantage of quick inline script execution and can reference all the page elements. It should be noted the the 'load' event only fires after everything has loaded -- including any images, etc. -- if you're waiting for a long time for a resource to load your script execution is delayed. There is a "newer" event for this, [DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded) that will execute when the structure of the page is ready but not all the resources have finished loading -- but the support in older versions of IE isn't there. There's a lot of weird hacks to get a similar sort of function in IE to work.... take a look at this [stackoverflow answer](http://stackoverflow.com/a/5959273) to see how jQuery does it. The smart thing to use is use jQuery like /u/kuzditomi says.
People do indeed do this, but not with simple variables (which is silly) but for object attributes or functions that are in another way in a namespace. Very often it's done in an anonymous function that is immediately called. The advantage of `function foo() {}`is that the function retains the name "foo", which is useful for introspection. My current tendency is to do function init() { ... } h.init = init; where h is an object of any kind (data structure, prototype, whatever) precisely to retain the function's original name.
I inherited this project several months ago. Thanks for helping me illustrate exactly the clusterfuck it is: http://i.imgur.com/txglQpH.jpg
Enforcing immutability in javascript is no joke; here's another example of how awkward it can be: http://facebook.github.io/react/docs/update.html At some point, switching to ClojureScript + [Om](https://github.com/swannodette/om) seems like the only sane way to work with all of this.
Well, that is certainly a claim. But sorry, I don't think it is true for me.
Sorry to message you again but I think I almost have this done. I'll post the code that I've got: function Movie (title, location, duration, genre, rating, year, director){ this.title = title; this.location = location; this.duration = duration; this.genre = genre; this.rating = rating; this.year = year; } var movies = [ new Movie ("Shawhsank", "USA", "142", "drama", "15","1994", "Frank"), new Movie ("Godfather", "USA", "175", "crime", "15","1972", "Francis"), new Movie ("Pulp", "USA", "154", "crime", "18","1994", "Quetin"), new Movie ("Good", "USA", "161", "westerm", "15","1966", "Sergio"), new Movie ("Flew", "USA", "133", "drama", "15","1975", "Milos"), new Movie ("Breakfast", "USA", "97", "drama", "15","1985", "John"), new Movie ("Samurai", "Japan", "207", "action", "PG","1954", "Akira"), new Movie ("Kes","UK", "110", "drama", "PG","1969", "Ken"), new Movie ("Knight", "USA","152", "action", "15", "2008", "Chris"), new Movie ("Rear", "USA", "112", "thriller", "PG", "1954", "Alfred"), new Movie ("Rope", "80", "thriller", "PG", "1948", "Alfred") ]; var userLocation = document.getElementById("location").value; var userDuration = document.getElementByName("duration").value; var userGenre = document.getElementById("genre").value; var userRating = document.getElementByName("rating").value; var userYear = document.getElementByName("year").value; var userDirector = document.getElementByName("director").value; if( movies ...... How can I check if movies contains the variables I have set up? In java I could use .contains but this isn't an option in JS.
this is meant for use on the server side (node.js)
On mobile so not really equipped to go answer your main question here, just wanted to point out that you need to have this.director = director in your constructor function. You are missing that one.
Bookmarklets execute a bit of Javascript code in the context of the current window/document. For example it can load a Javascript file from an external URL, or it can enumerate all links in the current webpage, for example.
No problem.. Thanks, I didn't realize that. I planned on doing something like. if( movies.contains(userLocation) &amp;&amp; movies.contains(userDuration) and so on... I feel like thats how I can complete this.. Just can't seem to get it to work.
I'm not sure exactly how you want your logic to run, but here is an example of testing one input on one property of all the movies, and putting all matches into an array... var arrayLength = movies.length; var matches = []; for (var i = 0; i &lt; arrayLength; i++) { if(movie[i].genre == userGenre){ matches.push(movie[i]); } }
Thanks I will try this now. I basically have a HTML form. Which asks the user for movie duration , location, genre, director and year of release. I wish to store the answer to each of these inputs in the variables which I have set up: like I did below. var userLocation = document.getElementById("location").value; var userDuration = document.getElementByName("duration").value; var userGenre = document.getElementById("genre").value; var userRating = document.getElementByName("rating").value; var userYear = document.getElementByName("year").value; var userDirector = document.getElementByName("director").value; Now, I want to check if the answer which the user supplied meet a any movie combination from the array of objects called movie, and if it does, have an alert with that movie name. If it doesn't then have a prompt saying no movie found. By combination I mean the following: new Movie ("Shawhsank", "USA", "142", "drama", "15","1994", "Frank"), 
I understand currying, what it does and how to do it. But I still don't get why I would want to do it. Don't get me wrong, partial application is awesome but why would I want a function to take just one argument and return a function? And why do people act like that should be the default way of doing things?
I've never understood it either. The only thing I can come up with is passing the function to a number of handlers, each of which adds a parameter. But that just feels odd. I'd be very interested in hearing some solid use case for this. 
 in as in if('genre' in movie) console.log("Yup, it has a genre") (but why not simply `if(move.genre) ...`, assuming all valuable values for genre are true when taken as a boolean) and also in loops: for(p in movie) console.log(p + ': ' + movie[p]); 
Hi ard0, Mithril author here. Just stumbled upon this (pretty late to the party, I know). Sorry to hear that Mithril is not something that is useful to you: can't please everyone, right? :) I understand that you might find it annoying that a lot of framework choices can cause analysis paralysis, but I hope that you can judge things more rationally than the kneejerk reaction that your comment came across as: It sounded like you didn't actually read the docs, (which is understandable, given that the framework was just a few weeks old when this article came out, and there's a lot of docs to go through) FWIW, I do talk about a lot about how it compares to other frameworks, and I even go into more advanced topics that aren't talked about in other frameworks' docs. You can argue that a framework is not noteworthy because it just does framework-y things, but that's like saying a Ferrari isn't noteworthy because it just does the same things as other cars. I think it's a bit of a disservice to pass misinformed judgement on something that you don't even care about. In the interview, I did highlight a few things that some people find nice (e.g. preference to rely on FP rather than providing framework-specific magic). Some others have been drawn in because of the performance (I'm not trying to brag, but it *is* small and pretty fast), some like the API simplicity, some like the fact that it uses virtual DOM diffs (which is something one would care about if they were into templating engines, FWIW). Anyways. I'll just leave this post here in the hopes that it is a bit more informative for those who might actually benefit from the project. Cheers.
I think what you need to do is iterate over the entire length of your movies array and look for the user entered values and build another array out of the positive matches. Then use your new array to build the search result on the page. There are other more elegant solutions like using the array.prototype.filter() method if you want to look into that as well. Again, on mobile, so bear with me on any typos here, but something like. for (i = 0, len = movies.length; i &lt; len; i++) { var results = [], tempObj = {}; if (movies[i].location === userLocation) { tempObj = movies[i]; results.push(tempObj); } } I'm only checking the one user parameter of location here. You will need to extend it to check the other user entered params before pushing the movie object into your results array. Good luck!
Old school asteroids with some new-school powerups. Tell me what you think!
overall great stuff. to say that JS is not functional is an overstatement. (in fact your second solution for alive/dead is functional.) JS does value and support functional programming, it's just not PURE functional since it allows side effects. if you want to illuminate an algebra of functions (a beautiful idea), then you will want to break down all of the operations at a finer level of granularity: before, after, compose, etc. each with code snippets that are as short as possible. although, it does not handle the n-ary case, algebra over unary functions is prettier and, most importantly, easier to read = better didactically. function compose(f, g){ return function(x){ return f(g(x)); } } in the same vein, it would be instructive to see "around" built from "before" and "after." again, OK to handle the n-ary case in the appendices for the sake of clarity (the apply calls will throw beginners). for that matter, once you establish the pristine beauty of function "algebra" from a few short and elegant primitives, game of life, etc. become footnotes. when establishing the algebra, minimality is clarity. might be a bit afield of your topic, but "function objects" i.e. functions with fields foo(x) and foo.bar(x) would go a long way towards establishing functions as first class. minor note, "algebras" have a few formal definitions (e.g. http://en.wikipedia.org/wiki/Relational_algebra), so you might wish to note the context in which you use the term.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Relational algebra**](https://en.wikipedia.org/wiki/Relational%20algebra): [](#sfw) --- &gt; &gt;In Data Management, relational algebra describes the how data is naturally organized into sets of data, aptly so as data is the documentation of a real life person, place or thing and the events or transactions between them at a point in time. Relational algebra, first described by E.F. Codd while at IBM, is a family of algebra with a well-founded semantics used for modelling the data stored in relational databases, and defining queries on it. &gt;To organize the data, first the redundant data and repeating groups of data are removed, which we call normalized. By doing this the data is organized or normalized into what is called first normal form (1NF). Typically a logical data model documents and standardizes the relationships between data entities (with its elements). A primary key uniquely identifies an instance of an entity, also known as a record. &gt;Once the data is normalized and in sets of data (entities and tables), the main operations of the relational algebra can be performed which are the set operations (such as union, intersection, and cartesian product), selection (keeping only some lines of a table) and the projection (keeping only some columns). Set operations are performed in the where statement in SQL, which is where one set of data is related to another set of data. &gt; --- ^Interesting: [^Projection ^\(relational ^algebra)](https://en.wikipedia.org/wiki/Projection_\(relational_algebra\)) ^| [^Selection ^\(relational ^algebra)](https://en.wikipedia.org/wiki/Selection_\(relational_algebra\)) ^| [^Rename ^\(relational ^algebra)](https://en.wikipedia.org/wiki/Rename_\(relational_algebra\)) ^| [^SQL](https://en.wikipedia.org/wiki/SQL) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ch5arex) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ch5arex)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Just curious: why not?
&gt; &gt;for (i = 0, len = movies.length; i &lt; len; i++) { var results = [], tempObj = {}; if (movies[i].location === userLocation) { tempObj = movies[i]; results.push(tempObj); } } &gt;I'm only checking the one user parameter of location here. You will need to extend it to check the other user entered params before pushing the movie object into your results array. Would I need to have a loop for each parameter, such as location and genre or would it all be done in the same loop? For example movies[i].location.genre.director 
Why the strict equality comparison to void(0) as opposed to null?
I was just doing it for fun, but now that you mention it, it really looks nice and understandable with the uncompressed version.
Nope one loop. And you have to access the properties of the object one at a time. &gt;movies[i].location.genre.director Wouldn't work. Your movie array is an array of objects. Each iteration of your loop would be referencing a specific object. You use the dot operator to grab the value of each property, I.e. movies[i].location movies[i].genre movies[i].director So really, you need to be modifying that if statement inside the loop to be smarter. I assume that the user parameters are optional. Meaning that someone doesn't have to fill out all of the filters in order to get a result. Therefor you should be checking for nulls. Let's modify the if statement inside of that for loop to be smart enough to check for the above three properties and if they are null or match the user input, then add it to the results array. if ((movies[i].location === null || movies[i].location === userLocation) &amp;&amp; (movies[i].genre === null || movies[i].genre === userGenre) &amp;&amp; (movies[i].director === null || movies[i].director === userDirector)) { tempObj = movies[i]; results.push(tempObj); }
I don't buy Microsoft's claim that classical inheritance and strong typing is required to code 'efficiently' or needed to build large applications. There are other ways to build applications than building monolithic creations. I prefer small modules, the UNIX philosophy makes sense to me, and I'm a fan of the loose typing even though it comes with the occasional headache. A project like [Tern](http://ternjs.net/) can provide me with code analyses, so I get awesome documentation and code completion in my favourite editor, without having to do any special hoopla I would not do otherwise. I am not gonna switch to a language that attempt to fix javascript in any way anytime soon. I think that projects like coffee-script is a "nice experiment," but I tend to pass on a module on Github if it is written in coffee-script—I want to be able to fix stuff and bugs in my dependencies, so ease of getting into development is often a factor when I choose a dependency—and I take the same approach to the other compile-to-js-languages out there. TypeScript may be able to implement features of the future today, but monkey patching can do a lot of the stuff to vanilla JavaScript. If I go crazy I could even boot up V8 in harmony mode and check out those generators. **Should** I consider a JavaScript-language-that-attempt-to-fix-javascript I would probably go with Google Dart. They provide a VM that actually run Dart, so they can use the type information to up the performance of the application—hence a benefit of declaring types. But again, no javascript-fixer any time soon. (Please note: I am checking out other languages, such as Elixir and Erlang, so it is not like I'm against new languages or approaches.) In TypeScript the compile step is, to me, just a hassle (I do know about compile-on-save, and I did set it up in my editor when I tried TypeScript). For third party modules you have to declare the type definitions, if somebody else haven't done so—and you would have to do so every time the API of the third party module changes. Also: I know about source maps, but it still feels like there is a layer between my code and the run-time when I run a debugger. So, I prefer my JavaScript vanilla. Sorry for the loose structure in my response and the occasional language boo-boo, I am a bit tired, and not a native english speaker.
This is awesome; beautiful effects too. 
Agreed, it's incomprehensible. I'm not sure if it's due to a language barrier, or poor writing; but in either case, it's tough to make heads or tails of it.
So brave
Ysince Javascript is asychronous, its starts the setTimeouts one after another. You need to increment the setTimeout Interval for every list item like: var i = 0; ("li").each(function(){ var that = this; setTimeout(function(){}, ++i * 2000)( }); Like that. 
Can't you do the same with Promises?
Yes ofcourse, i could make a few usage example snippets and create gh-pages or something of the like :)
Okay so this is now how the code looks: var movies = [ new Movie ("Shawhsank", "USA", "142", "drama", "15","1994", "Frank"), new Movie ("Godfather", "USA", "175", "crime", "15","1972", "Francis"), new Movie ("Pulp", "USA", "154", "crime", "18","1994", "Quetin"), new Movie ("Good", "USA", "161", "westerm", "15","1966", "Sergio"), new Movie ("Flew", "USA", "133", "drama", "15","1975", "Milos"), new Movie ("Breakfast", "USA", "97", "drama", "15","1985", "John"), new Movie ("Samurai", "Japan", "207", "action", "PG","1954", "Akira"), new Movie ("Kes","UK", "110", "drama", "PG","1969", "Ken"), new Movie ("Knight", "USA","152", "action", "15", "2008", "Chris"), new Movie ("Rear", "USA", "112", "thriller", "PG", "1954", "Alfred"), new Movie ("Rope", "80", "thriller", "PG", "1948", "Alfred") ]; var userLocation = document.getElementById("location").value; var userDuration = document.getElementByName("duration").value; var userGenre = document.getElementById("genre").value; var userRating = document.getElementByName("rating").value; var userYear = document.getElementByName("year").value; var userDirector = document.getElementByName("director").value; for (i = 0, len = movies.length; i &lt; len; i++) { var results = [], tempObj = {}; if ((movies[i].location === null || movies[i].location === userLocation) &amp;&amp; (movies[i].genre === null || movies[i].genre === userGenre) &amp;&amp; (movies[i].director === null || movies[i].director === userDirector)) { tempObj = movies[i]; results.push(tempObj); } } When I fill out the form like so: location (USA), I should get all the films from the USA but the form just gets reset. Here is my code in full : https://gist.github.com/anonymous/7f003c1b6d7415d7c89e
I just made a bookmarklet for a client and used the shell fro this tutorial: http://code.tutsplus.com/tutorials/create-bookmarklets-the-right-way--net-18154
I have no idea what i'm supposed to get out of this article. None, whatsoever.
As of now you are only filling that results array. Are you saying that the array is always empty even after calling your validate() function? After the for loop write alert(results[i].location); You should see USA. If so, you now need to loop through your results array and build the UI (list of matching movies or however you want to display them). If it is undefined, then something is wrong with your existing code.
I don't really understand what this does: for (i = 0, len = movies.length; i &lt; len; i++) { var results = [], tempObj = {}; if ((movies[i].location === null || movies[i].location === userLocation) &amp;&amp; (movies[i].genre === null || movies[i].genre === userGenre) &amp;&amp; (movies[i].director === null || movies[i].director === userDirector)) { tempObj = movies[i]; results.push(tempObj); } } Well I do, just not the tempObj = movie[i] part. It's tough to explain what I want to achieve but basically the only fields which are mandatory are: location, genre, year of release and director. So if the user enters those like so: "USA", "142", "drama", "15","1994", "Frank" Then there should be an alert with "The Shawshank Redemption is the movie for you". As we can see the Shawshank has that criteria from this line: new Movie ("Shawhsank", "USA", "142", "drama", "15","1994", "Frank"), This should apply for all the movies and their criteria. I have already set up validity incase the user leaves a field blank so it's impossible for that happen. 
It makes it easier to reuse functions, especially when building specific functions up from more general ones. It can also reduce the amount of terms in a function definition, which (hopefully) means less to tackle mentally and more focus on what the function actually does. IMHO it's harder to use when working with objects and the dot operator isn't first class. (This means you have to do stuff like `x =&gt; x.name`, which sticks out like a sore thumb when you're trying to build things from existing, named functions!) It also doesn't help that coming from Javascript, functions are either methods or the arguments are in an order that makes it very awkward. So *with currying*, say I have a fold function (array.reduce) like the following: function fold(callback, initial, array) { return array.reduce(callback, initial); } and some helper functions, since operators aren't first class functions: function add(x, y) { return x + y; } function or(x, y) { return x || y; } function and(x, y) return x &amp;&amp; y; } I can then define the following functions pretty simply and tersely: sum = fold(add, 0); all = fold(and, true); any = fold(or, false); `sum` adds up all the numbers in an array, `all` returns true if every element in an array is true, and `any` returns true if at least one element in an array is true. Then `sum([1,2,3,4])` returns `10`, and `any([false,true,false])` returns `true`. You don't have to define function variables again just to use them in a very short function, no curly braces are required, and code is reused via a common pattern. The reason that articles about currying refer to functional programming languages like ML and Haskell is because they have been designed to abuse this feature for the sake of writing functions this way, building from smaller pieces in a common vocabulary. If you study one of these languages, you will be able to see much more benefits than if you only saw or used a Javascript implementation.
Just want to point out if anyone finds this: you would want to cache the jquery element so it's not fetching it each time the loop is ran.
You actually don't need the tempObj part. You can just do results.push(movies[i]); The push method is just taking the object passed into it and adding it to the results array. E.g. Var myArray = []; myArray.push("HELLO"); myArray.push("WORLD!"); If you alerted myArray[0], it would say "HELLO". If you alert myArray[1] it would say "WORLD!". Also, since you said you are validating that those certain fields can't be null already, you don't have to check for nulls in that big if statement.
That makes sense. What do you think needs to be done now to get output? so if the four fields the user input matches the details of a movie in the object array, then the title of said movie will be alerted. 
Esri uses a lot of Dojo in most its JS teams, you could take this opportunity to properly get to know Dojo and the best practices. Then couple it with the ArcGIS API 3 year experience and apply for a job with them. If you don't want to shoehorn in Dojo to learn it, you could build everything using requireJS so you have the AMD format experience. Then learn a bit of Dojo on the side.
@raesmond, I think a lot of people are in the same boat as you. I'm a bit bummed that my article didn't do a better job explaining the valid use-cases. I will try and compile some useful examples and arguments, and add to my post tonight. Currying is useful to help (and encourage) you the programmer to break up complex logic into smaller pieces and allow you to re-use (read: staying DRY) those pieces in other places. I like to think of functional programming as a way of making your application like an assembly line or car manufacturing plant. The plant itself is a large web of levers, cogs, and buttons etc... but in one end comes the raw materials and metal (ie, the "data"), and out the other end comes the car (ie, the end-user application). It would be difficult to determine whether or not the car works properly just by looking at it, or the factory as a whole. Each "sub-station" of the factory has a specific task, and has narrowly defined constraints about what it is expecting to get in (x) and what it is expected to put out ( f(x) ). By allowing functions to be curried, you are easily able to take more generic operations like "drill hole somewhere", and define them more precisely as "drill 3/8 hole somewhere" and then again more precisely as "drill 3/8 hole at coordinates { 3, 4 }" This is a very hand-wavy argument and I'm not expecting you to be convinced, but I will say that FP sort of "clicked" for me whenever I started thinking about it this way. It's also important to note that FP is not needed to organize your code this way.... it's just easier IMO. I'm also of the belief that you don't need to write purely functional code in order to reap the benefit.
So I was thinking you wanted to return a set of movies. If this is only supposed to return one movie each time ten instead of pushing he movie object I to the results array just alert(movies[i].title). By the way, your for loop is just kind of out there you should add an else condition after the if condition that is checking if errorFields.length &gt; 0. That is where you should put the code that initializes the user Variables and loop through the array looking for matches.
Thanks; it helped me spot two unused functions left-over after doing a major code refactoring.
I'm so confused now, what should be removed and what shouldn't. You say the tempObj isn't needed but is that in the for loop, if statement or both. You also say that instead of pushing to add an alert but again, in the for loop or the if statement? This is the code, it gives no output and I'm not sure what needs to be added or removed: var movies = [ new Movie ("Shawhsank", "USA", "142", "drama", "15","1994", "Frank"), new Movie ("Godfather", "USA", "175", "crime", "15","1972", "Francis"), new Movie ("Pulp", "USA", "154", "crime", "18","1994", "Quetin"), new Movie ("Good", "USA", "161", "westerm", "15","1966", "Sergio"), new Movie ("Flew", "USA", "133", "drama", "15","1975", "Milos"), new Movie ("Breakfast", "USA", "97", "drama", "15","1985", "John"), new Movie ("Samurai", "Japan", "207", "action", "PG","1954", "Akira"), new Movie ("Kes","UK", "110", "drama", "PG","1969", "Ken"), new Movie ("Knight", "USA","152", "action", "15", "2008", "Chris"), new Movie ("Rear", "USA", "112", "thriller", "PG", "1954", "Alfred"), new Movie ("Rope", "80", "thriller", "PG", "1948", "Alfred") ]; var userLocation = document.getElementById("location").value; var userDuration = document.getElementByName("duration").value; var userGenre = document.getElementById("genre").value; var userRating = document.getElementByName("rating").value; var userYear = document.getElementByName("year").value; var userDirector = document.getElementByName("director").value; for (i = 0, len = movies.length; i &lt; len; i++) { var results = [], tempObj = {}; if ((movies[i].location === userLocation) &amp;&amp; (movies[i].genre === null || movies[i].genre === userGenre) &amp;&amp; (movies[i].director === null || movies[i].director === userDirector)) { alert(movies[i].title); } } }
You could store a reference to the object with something like: function Movie(name, genre, location) { this.name = name; this.genre = genre; this.location = location; Movie.List[name] = this; } Movie.List = {}; When deleting the object though you would need to make sure you delete it from the List as well.
I don't know what this is, but it needs a new name.
Go to meetup in your area and network with other developers, that alone will help with your hirability more than some framework 
It'd be nice if you could make it accessible which, in this case isn't difficult. First, give it a 'role' of 'slider'. Instead of using data-* attributes, you could use WAI-ARIA. Instead of data-range_min, use aria-valuemin Instead of data-range_max, use aria-valuemax Represent the current value with 'aria-valuenow'. If you have a text-based representation of the value, also add 'aria-valuetext'. Also, add tabindex=0 on the "grips" so they can be interacted with via the keyboard. Allow the value to be modified via keyboard: left/ down arrow should decrease the value and right/ up arrow should decrease the value. jQueryUI does a good job on keyboard accessibility of their slider, but I always have to add the ARIA stuff whenever I use it. It'd be cool to have something like yours as an alternative.
Isn't it possible to achieve much the same effect with promises? Fire off a promise for each request, and then tie them together sequentially after the fact. Using currying for this case seems a bit contrived, especially considering that you have to change the arity of function being curried if the number of images to download changes.
What about [mori](https://github.com/swannodette/mori)? You get Clojurescript's data structures without using the language. Toss in a library like Bacon.js and one can get plenty done without much boilerplate.
WebGL always does this for me. I never click and WebGL demos if I got other interesting tabs still open.
The name is perfectly justifiable. Would you prefer "schonfinkelization"?
"functional encapsulation"? "derivative functions"? The verb "to curry" just doesn't make any sense for what this does, in my opinion. The semantics just don't fit.
Effect.ScrollTo() either takes an element id or a reference to the element. CSS selectors won't work. So either Effect.ScrollTo('elementid'); Effect.ScrollTo($('elementid')); will serve your purpose
It is named after Haskell Curry http://en.wikipedia.org/wiki/Haskell_Curry. Changing the name isn't justified, it is a piece of history that gives meaning to the concept. You woudn't rename "Church numerals" or a "Turing machine" because people don't know the concept or understand the history of the term. The verb "to google" doesn't make sense either, until you understand what Google is and how to use it.
It's really fun (and I agree with others that the power ups are great), but the thruster feels *way* to strong for me. I give it two quick taps and go *flying*.
What do you mean by "Doesnt Work". 
I should have added more details. I have an iframe in my html named "backdrop." It is initially set to display none. After 100 milliseconds, I want to call the function create backdrop that basically sets the properties as such. The properties will make the iframe take up the entire window and be black with an opacity of .75. So it's basically a backdrop. The script does nothing (at least visibly) right now.
Because you didn't do it exactly like [I did it](http://jsfiddle.net/AgcPd/).
On a bus to work so cant add more, 2nd and 3rd are not function declaration but assigning a return value of a function to a variable. Correct me if am wrong. 
What do you mean by iframe domain is external...
Nice, I'll use it as a reference. Would like to know why mine didn't work, though. I'm guessing it has something to do with certain iframe properties being changed after the page is parse... maybe?
Fucking great work. Really fun. Thruster too strong.
See http://en.wikipedia.org/wiki/Same-origin_policy
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Same-origin policy**](https://en.wikipedia.org/wiki/Same-origin%20policy): [](#sfw) --- &gt; &gt;In [computing](https://en.wikipedia.org/wiki/Computing), the __same-origin policy__ is an important concept in the [web application](https://en.wikipedia.org/wiki/Web_application) [security model](https://en.wikipedia.org/wiki/Computer_security_model). The policy permits scripts running on pages originating from the same site – a combination of [scheme](https://en.wikipedia.org/wiki/URI_scheme), [hostname](https://en.wikipedia.org/wiki/Hostname), and [port number](https://en.wikipedia.org/wiki/Port_(computer_networking\)) – to access each other's [DOM](https://en.wikipedia.org/wiki/Document_Object_Model) with no specific restrictions, but prevents access to [DOM](https://en.wikipedia.org/wiki/Document_Object_Model) on different sites. Same-origin policy also applies to [XMLHttpRequest](https://en.wikipedia.org/wiki/XMLHttpRequest) and to [robots.txt](https://en.wikipedia.org/wiki/Robots_exclusion_standard). &gt;This mechanism bears a particular significance for modern web applications that extensively depend on [HTTP cookies](https://en.wikipedia.org/wiki/HTTP_cookie) to maintain authenticated user sessions, as servers act based on the HTTP cookie information to reveal sensitive information or take state-changing actions. A strict separation between content provided by unrelated sites must be maintained on the client side to prevent the loss of data confidentiality or integrity. &gt; --- ^Interesting: [^HTTP ^cookie](https://en.wikipedia.org/wiki/HTTP_cookie) ^| [^Cross-origin ^resource ^sharing](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing) ^| [^JSONP](https://en.wikipedia.org/wiki/JSONP) ^| [^DNS ^rebinding](https://en.wikipedia.org/wiki/DNS_rebinding) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ch5ml14) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ch5ml14)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
The `fold` function should look like this for your example to work, though: function fold(callback, initial) { return function(array) { return array.reduce(callback, initial); } }
Not that I have a problem with functional programming per say, but I thought [this](https://twitter.com/wm/status/7206700352) was perfect: &gt; i love functional programming. it takes smart people who would otherwise be competing with me and turns them into unemployable crazies &gt; [William Morgan](https://twitter.com/wm/status/7206700352)
&gt; how would I ever have linked the two? &gt; I thought the term was literally "to curry". You know, as in Indian cuisine? The problem is that you didn't think to google an unfamiliar term, not that the author, who already spent the time to write the article helping people learn, didn't also save you the few seconds it would have taken to google.
Yeah, down vote the guy that talks sense.
I wonder if it's possible for Velocity to act as a drop-in replacement, so it can be called with $.animate instead of having to change code for it...
I am talking about these two &gt; var xyz = function xyz() {} &gt; var xyz = function abc() { abc() } And in fact even this one &gt; var xyz = function() {} is not **function declaration**, these are function expressions. Function expressions are not function declarations. Coming back to return value argument. Wrong way to say return value, stupid me. It is more of *value* returned by expression. which is basically a function expression. When you do something like this &gt; var xyz = function () {} JS engine will hoist xyz, making it undefined then later on whatever the right hand side returns is *assigned* to left hand side, basically xyz ends up being a reference to an anonymous function. 
haha i literally laughed out load on that.
Promises are not inherently sequential... You are just writing them that way. You can absolutely fire off a hundred async promises in a when and it will happily wait for them all.
great! I want to know how u made it..