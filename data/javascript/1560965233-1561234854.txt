1. css bugs don't disappear with prefixes alone 2. Transpiled js has bigger file size and worse performance
&gt; if you take minified code, and run it through a prettifier, you get back very nice code Sure. Theoretically, yes. I've not found a prettifier that I like, but I haven't looked. And yeah... Agreed. Making the code shitty is a strategy. Might not be a good one for your use case tho. For instance, I can unplug my PC from power and network to make it unhackable... but then its as useful as a large paperweight or something to put drinks on. :)
Idk, but my scrolling performance on this site was bad. It's slow, and unresponsive.
&gt;Did I miss something? The cost of dynamic bindings is extremely important. If UI library doesn't have WPO and inlining, application that is built from reusable components will have a lot of dynamic bindings. And in solid implementations you've removed almost all dynamic bindings.
But that was not my question.
Still have to use babel with Node projects simply because I want to use 'import' instead of 'require' without doing hacky stuff.
That's a great question. I am more of application developer than a site developer (makes sense given focus on performance on updates rather than just TTI) I've never seen SSR as really high priority. Small library, incremental transferred code + Service Worker seems a place where someone would be much happier than how complex SSR is getting to support large libraries having some semblance of performance. I was a .NET developer my first years out of school in the mid 2000s and I'm very wary of all in one solutions. Honestly I was so set in my Web Components are the future view that I have been waiting for more progress on SSR with the Shadow DOM. But more recent exploration (as depicted in this article) has me questioning that view a bit. &amp;#x200B; While I haven't worked through SSR yet specifically, the rendering part should be straight forward enough for a library of this nature. The easiest approach would be take a similar approach to Andrea Giammarchi (WebReflection) basicHTML and just use the same compiler as now. I suspect that would not be the optimal way and coming up with a different compiler output would be able to handle this well. Any lightweight DOM in node solution should handle this relatively well but I haven't put the testing in yet. Others have tried this with Surplus in the past and it should be similar. &amp;#x200B; Rehydration on the other hand is a much more interesting problem. Since the library works off cloning nodes then walking it would seem like reconstructing the graph piecewise could be possible (just skip the cloning step). However, the format at which to transfer the serialized data is trickier, since it's essentially detached (and fine grained). I have been working on this problem piece by piece. I've introduced a Context API into the Reactive Graph which is a pretty new development. In theory with careful consideration there could be a serializable format, but this is definitely an area of research. The approach is different enough that I'm forced to solve problems different and I think there is a lot of room to find new ways to do stuff with this sort of Reactive programming. It sort of flatlined in 2012, but I believe there is a lot of potential if we can get enough heads on it. The move to React Hooks mimicking these patterns has me very hopeful.
That was barely the warm up. I was feeling pretty confident until about 14, then I made two dumb mistakes and found a couple things I didn't know about.
Damn, I had no idea order of object keys became standard in ES6. That bit me. I got about a B- overall. That was really fun.
Native import is supported in Node 12 behind a flag, and will be enabled by default when Node 12 gets LTS'd
Well, hot dog! I didn't know that last bit. Thanks for the heads up!
If you’d like to review a game I made for practice , https://github.com/miaklwalker/JavascriptIsYou Feel free I’d love some feedback on things I could do better , if still very much learning I’d love some constructive criticisms ! If you are on desktop here is the link for the code sandbox version https://codesandbox.io/embed/browserisyou-rzuxw?codemirror=1 The github link also has a link to the code sandbox !
Yeah, and ivi (although I know that is beside the point). But that's an area that I think is really interesting. We take for granted that most things update when they don't. Or that the dependency graph needs to be so tightly coupled. The work with Solid is exploring what happens if you approach that differently. Right now it's a bit explicit with directives, but my hope is one day this will be handled by the compiler. I recognize that certain boundaries will need to stay but I also think that we are quick to break out Components for organizational purposes rather than for functional boundaries. That's fine but we shouldn't pay the cost for it. While this benchmark was contrived it isn't too far from what someone might do. That's why I really liked what you originally posted (it lead to me fixing some bugs in Solid). Instead of normalizing on things that would expensive for all non-Virtual DOM libraries, I let them all event delegate etc. Use the common techniques at their disposal. But even in a handwritten optimized sort of way that cost is still there. That's the interesting part to me. That's what makes the this comparison valuable. Let the libraries use all their tricks. Virtual DOM still scales better. ivi hands down is the winner of this comparison. But can we do better. I'm trying with Solid. It's ludicrous to make a Cell Component for something that lightweight yet we might want to do that. I'd argue the same for the a Table Row. Is there any exposed interface? Does it have context outside of the Table? I agree for this to have more meaning the Components made would need to be substantial but we need a different scenario that doesn't involve iterating over a list. In those scenarios local optimization is a thing. I imagine you might have an idea of what such a test would look like.
Great work ! It's nicely working and really nice looking :) Any plans on adding subtitles ?
Correct, syntax should never define a good programmer. It's all about concepts.
Some features can't be transpiled and are difficult to polyfill properly.
Hi /u/averagejoe0719, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I MUST support IE :'( God help me It's worse than people think
It's not a matter of how long browsers have supported it. It's a matter of what browsers your users use.
Fuck 'em
i've stopped supporting old IE, my excuse is always "if they're using old IE, they're used to the web looking shitty"
It's leading to a situation of split code bases. Not all features are polyfillable. Shadow DOM, ES Proxies (MobX 5), etc.. While there are solution, pretty soon supporting IE will be supporting a different platform. Like iOS vs Android. Are you ready to debug different generated code bases? My hope is that Edge for Windows going back to Windows 7 will push the dial for some last Microsoft hold outs, but I said it back in 2015: IE11 will be worse than IE6 ever was. Official support until 2025.
&gt; Is it finally time that I can start *\[thing\]* everywhere without worrying about compatibility? No, you're stuck with Babel forever. I'm not joking. Luckily, [@babel/preset-env](https://babeljs.io/docs/en/babel-preset-env) exists and you can mitigate the overhead by only using the helpers you need.
I came here to say this. To my knowledge Microsoft has no road-map for replacing/supporting ActiveX in Edge. It's like it hasn't occurred to anyone working there that scores of enterprises use proprietary ActiveX controls and simply don't have the option to move off them. Hell, even Sharepoint, a Microsoft product, has a dependency on an ActiveX control for opening Office documents via WebDav.
Hi /u/kenman I'm sorry for the trouble. I wasn't sure about this. Thanks for taking time to clarify it. My rationale was that, although the content is aimed for beginners, it covers a less popular topic so that it could benefit even seasoned JavaScript programmers. I'm writing this for transparency, not to argue :) I agree with the decision.
there was a nickname we used for KnockoutJS at my previous work - "Poopoutjs"
&gt; Yeah, and ivi Class names in `Cell` and `RemoveIcon` are dynamic in ivi and static(bind once) in solid. &gt; I imagine you might have an idea of what such a test would look like. I don't care how it looks like, the most important part is what it tries to test. If you want to test dynamic bindings, just use them :)
I did not check the sourcecode but I did like the site, even on mobile (the search gets kind of small but you already knew that ;) )
Yeah but number 9 is when they started to get hard.
I made an app for my friend a neon sign maker. This let's you draw the sign, and even animate it. http://neonbeyond.com/ Not on github yet, but the source is not minified or obfuscated: http://neonbeyond.com/sign-maker.js
Man this girl is 21 and knows way more than I do and I’ve been doing this for 10 years. 😫😫
How do you beat the second level? I can push the STOP through the wall, then I have the power to walk through walls. But I can't capture the flag.
Yep it's nothing more than a glorified if statement. I personally never use case statements because you simply don't need them. (incoming nerd rage)
Thank you this is the kind thing I thought I might have missed. I wasn't trying to test introducing unnecessary dynamic bindings (in this test the className never updates so no need to make it updatable) just the cost of Components. If there is a way in ivi (or any of the other libraries for that matter to suggest that the className won't update) I'd have preferred to use that. I just used the baseline implementation which I assumed was the most performant and tried my best to not add any other performance hits as I added Components in.
Very nice effect
Hey everybody has their style man. I love me some switch/case statements just because of the way they flow if I have a lot of conditions. Otherwise I'll use the classic if/else. There's a thousand ways to code something lol.
Yep exactly. 1 destination but a million ways to get there.
What's that classic quote? It's not about the destination, it's about the journey? Haha
It all comes down to readability for me. Switch statements work better when you need to operate on a variable that can have many different values. While if statements work better for isolated conditions. For example: if a user has many roles and I need to operate depending on the role I would use a switch. If I need to operate on whether the user is logged in or not I would use an if.
Largely. There are some subtleties. For example `switch` comparisons always use strict equality (`===`) to compare the switch value against the case. You can also allow case matches to fall through to the next matches if you don't `break`, though this is seen as a bad practice. As far as syntax goes, `switch` statements have the advantage of allowing you to specify the switch value only once, whereas with if statements, you would need to repeat it for each comparison. This can reduce that repetition, but even so, given the extra added syntax of `case` and `break`, you might not necessarily be saving any space (though not repeating yourself is always a good thing).
Frankly, we'll never be there. The spec evolves faster than the browsers, and frankly the ability to use upcoming features via babel does wonders IMO to inform the spec.
Frankly, we'll never be there. The spec evolves faster than the browsers, and frankly the ability to use upcoming features via babel does wonders IMO to inform the spec.
Thought the same thing. I wish I had started coding as early as she did.
Hi /u/Jncocontrol, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This is interesing example but in my opinion also very trivial and rudimentary. For an app of this size (just couple routes) it doesn't make sense to split it into separate parts - as it bring almost no benefits with many downsides (which author states in the bottom part of the aricle). For any larger SPA / javascript application there are so many shared / cross-app concerns and dependencies that makes it much harded to implement. Just think about cases like: server side rendering, shared user (session) state, sharing/reusing data models, user behaviour tracking, deployment and so on.
Hi /u/regalwk, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I really enjoyed your post. Thanks for that! I will pass it to my collegaues too to have a better understanding on 'this'
You have to make “flag is win”
These feel way too contrived to be relevant.
Terrible idea to do this with JS. This is the kind of stuff that CSS is built for.
Sorry for the late response Thank you so much! I took a look and it helped me a lot.
Thanks for the extensive answer and quite a coincidence that you are already making a priced version. Wish you all the best.
i heard Eloquent JS was a good book.
Thank you so much! and yes, I opened up the issue on github, new update coming this weekend!
Just the usual ones you will find with a simple google :roll_eyes: For example my first result was this https://www.goodreads.com/list/show/10757.Best_JavaScript_Books
I've come to the conclusion that it's a mistake to use FP concepts in JS when similar primitives exist. I think this is one of those cases. If you look at Rust for example, it makes extensive use of the `Result` type (similar to the `Either` monad here), but the important thing about `Result` is that it's a zero-cost abstraction, i.e. it compiles to good old boring conditionals, and it _doesn't compile_ if you forget to handle the sad path. There's never runtime code to map/chain/ap over a `Left` because the compiler already knows that those are all fall-through no-ops. In JS, you could do `either(lolNotAFunction, showMessages, messagesArr)` and the code would happily plow through to the end and throw a runtime exception in your user's face. And just as you could "forget" to try/catch, you could similarly forget to unwrap the either and just return `messagesArr` and get an error. If your goal is to avoid forgetting to handle certain cases, what you want is not a runtime `Either`. What you want is a compile-time Nullable type or similar. But if you're going down the rabbit hole of FP, there's a good chance you're also making it extremely difficult to statically type your code, in addition to bundling a crapton of runtime code. Beware of over-engineering.
What you've posted isn't JavaScript, just the HTML elements that it would manipulate. You'd need to use Chrome's dev tools or something like Firebug for Firefox to see what's going on.
A very comprehensive tutorial
1. Where is the JS code? 2. The 2 html codes only difference is the missing time in the second one
I use chrome &gt;= 55 in my babelrc, because that's where you don't have to polyfill async/await. I then only load the required polyfills if the browser doesn't support an es6 function I'm using. Why include 100kb polyfills for the 5% of users who need them? Compile for your majority audience and then include polyfills as needed imo.
You could serve 2 versions of your build: one for modern browsers, and one for everything else.
The core-js project does a pretty nice at polyfilling. What things did you find were difficult to polyfill?
Not sold on the generic "avoid horizontal teams" advice earlier in that article. Nothing results in harder to maintain and harder to reuse code with inconsistent styles and UX than splitting up a single product/web app/site into silos with each soon choosing it's own framework, testing, styling, pipelines and so on (especially if there's not strong, long-term UX guidance and QA.) That's not to say that aggressive reuse can't be it's own dangerous decision (hammers used as screwdrivers, etc.,) but when one has been in an organization that then had to update the dependencies of and/or harmonize the UX of a bunch of micro apps masquerading as a single offering that had built over the course of years, the value of solid horizontal organization or at least cross-silo decision making is obvious. Spotify did a great article on that issue: [https://labs.spotify.com/2019/03/25/building-spotifys-new-web-player/](https://labs.spotify.com/2019/03/25/building-spotifys-new-web-player/)
U actually follow her on Instagram and she’s super friendly and very smart. Gives back a lot to the community.
I agree, I usually just output 2 builds. Shitty browsers get the shitty version, polyfills included.
if this is a javascript course you should probably learn it and stop trying to skip the timer
Proxy for one, Map and Set to a lesser extent. I use Typescript not Babel though. I realize Babel does some sophisticated polyfilling but it adds undesirable complexity to the build for me.
Secrets of the JavaScript Ninja by John Resig is a great way to learn fundamentals of the language
I have yet to see anyone do horizontal "parallax" (parallax is a misnomer) with vertical scrolling in CSS alone.
I honestly don't think that there were much syntax in this. A lot of them were about understanding this, hoisting and scope. Things that I actually do think interviewers should at least care a little bit about.
[https://developers.google.com/maps/documentation/javascript/reference/geometry#spherical.computeDistanceBetween](https://developers.google.com/maps/documentation/javascript/reference/geometry#spherical.computeDistanceBetween) &amp;#x200B; Compute and sort for all the markers and the entered address's LatLng .
Wait, why forever? Are you just taking a pessimistic take on modern browser adoption/upgrade rates?
Interesting idea, but a no go for me due to the duplication and increased browser payload. I'd rather we just focused on making simpler, smaller web apps. I'll give this trend a pass, but I may gleefully take part in its overblown backlash in 5-10 years.
Are they really *your* users though? I bet they use AskJeeves to find websites. What’s your SEO strategy for AskJeeves?
You would think, but man, those LAMP guys will defend their franken-architecture to the death.
so its basically just a matter of pride you think? what are some things you could think of that js wouldn't be suited for and why?
That means you have to send an initial bundle over the network to load some setup files, and use some JS or CSS to determine browser capabilities, and then request the correct main bundle from the server. That’s at least two network calls instead of one. It’s definitely not the worst thing in the world, but it has a certain cost. On the other hand, you could maybe cache your bundle on the client machine...
More inertia than pride. Just my $0.02.
Proxy is currently impossible to perfectly polyfill, and Map/Set polyfills are slow, unfortunately... I feel your pain.
could you elaborate on what you mean by inertia? ur saying that some devs just have the tenancy to do nothing correct?
Making your devs not wish they were dead
Javascript is typically not the main language people use, they are more or less forced to use JS because it's the only language available in the browser. If most were to choose, they would drop JS rather than their main language.
&gt; Try getting an sql db guy over to mongodb, you'll need to break bones before the process is complete. Is there a good reason for doing so? I'd too be hesitant to switch unless there was a major reason for adapting other data model.
Inertia here means the tendency to just keep on doing something you've done before, especially if you percieve that it works for your purposes. LOL @ "do nothing correct"
Poor performance compared to compiled languages? Lack of static typing and easy automated refactoring unless you use typescript and the likes? Naive notion that there shouldn’t be a standard library but is a-ok with the absurd overhead of 1000s of one-liner micro packages)? Lack of built in immutability and data access controls (still not implemented as #privatevars=thing yet)? Terrible date / time built ins? Mediocre ORMs? Unstable .sort() on only one of the platforms (which unfortunately everyone uses)? ES6 Module loading is only recently not a minefield I like JavaScript and do it for a living but I can go on and on about the absolutely frustrating state of the language. Many other languages are past their teenage angst years and do whatever they were designed for pretty well compared to other languages.
ohhh ok I see ur point, if js is the langue of the browser and are forced to use it why wouldnt devs opt to only use js? i guess the question im trying to answer is what are flaws that people percive with JS. why wouldnt they use it if its a standard for the browser. Its not inherently hard to learn
ahh I see thank you for you insight :). I meant to put a comma "do nothing, correct?" lol. familiarity is comforting I suppose.
It depends on tooling. What kind of backend are we talking here? HTTP/WS? workers? search indexing? media streaming? a database? &amp;#x200B; JS is only practical in some use cases, not all. That's why. &amp;#x200B; Your choice of language should be driven by the task at hand, not ideology.
This is more so the answer I was looking for thank you :). Do you think any of these issue can/will be fixed or something in the future? how do u personally as a current js dev se the outlook and willingness to learn js in the future? do u think more and more people will opt to use it?
&gt; what are some things you could think of that js wouldn't be suited for and why? Anything to do with report generation on demand, for example. Because ain't nobody got time for that.
People on the backend generally prefer strongly and statically typed languages since they offload a lot of correctness checking to the compiler. JS doesn't offer that. JS is also not suitable for workloads where CPU load is the primary concern (node is designed for mostly IO-heavy workloads where most of the time you're waiting for the data or putting it from one buffer into another) or when you have very strict performance requirements (components like databases or caches typically use languages closer to the metal to avoid the overhead of the runtime).
I mean you’re really only forced to use it as a compile target at least, you have a lot of choice for languages to actually program in. The main difficulty is interoperability, TS is strong here because it’s just a superset of JS and tons of people put work in to the DefinitelyTyped repo.
Look at how long the language has been around, and then look at how little of it's problems have been addressed.
sorry im actually not very proficient in js i took a basic js class (we made calculators and tic tac toe games lol) pretty much why im asking allot of questions (that and i genuinely enjoy talking to people who know this stuff well). that make allot of sense to be driven by the task not an ideology :)
these are great answers :). thanks for your insight.
Related discussion: https://www.reddit.com/r/learnjavascript/comments/c2i06g/learning_js_away_from_the_computer/
Thank you!
The problem with compiling from another language which was not designed from scratch to do just that (like TS) is that certain mechanisms of the language, and a lot of the libraries, might not be available due to limitations of the runtime. As to TS I agree it's a great effort, but this effort is still built on top of a dynamic, weakly typed language. TS to a large degree tames the weak typing part, but not so much the dynamic nature of it, so while I like how much MS was able to achieve with it, it's a language which still requires you to know JS to work effectively. For me it's a preferred solution to raw JS in larger projects, but it's still typically a language you learn for the singular purpose of making shit work in the browser (and maybe in some backends, but that's much less common).
forgive my ignorance, I am by no mean an expert on pros n con of js compared to other languages.(I barely know enough js to make a crappy calculator lol). do u think the stated problems will ever be addressed? or its simpler to jst opt for a more suitable language for the task?
I agree so much - I was really excited about this article when the intro was posted last week, but now seeing the whole thing and not a single mention of a common requirement like server side rendering is such a disappointment. The naive reading of this article (and many others about microfrontends) make it sound so intuitive because they leave out pretty fundamental use cases. I really wish that, somewhere in the article, authors would specifically enumerate use cases for which their solution is not appropriate, or would require further investigation.
Knowing several languages also offers the benefit of looking at your problem from many angles. By the en of it all, you shouldn't see syntax, only concepts/idioms/patterns.
Because JS engines will always trail the latest language features, be it by a couple months or by a couple years.
Haha, I totally misinterpreted that without the comma! Definitely thought you were impling JS is the only "correct" way to do anything anyone
It is fine lol. JS has gone through some iterations over time that have greatly improved it, however it has a habit of outright lying and totally fucking people over. I personally find it amazing people would want to use it on the backend
I wish I could say yes, but unfortunately, there are some aspects I have high doubts will ever be resolved. &amp;#x200B; \- Performance: a lot of bright minds at Google, Mozilla, and Microsoft have been trying for years, but due to the dynamic nature of javascript, it lends itself to at best half the speed of c#, java, c, and c++. And in many work loads, 10-100x slower than them. Static typing and disallowing re-typing variables has serious impacts on performance. Subsets of the language lets performance improve under some work loads (see asm.js) but in general? Womp womp. \- Terrible builtins / lack of standard library: There is a TC39 proposal for a standard library that has stagnated for years and no signs whatsoever on improving. Nobody can agree what should be standard, even on npm. Many in the community are outright offended by the notion of a standard library because they think it'll stagnate the language. It's a terrible extension of the stupid notion that nothing can ever be deprecated due to browsers which is absolutely detrimental to the improvement of language. \- Speaking of TC39. They have no power here. It's all google at this point since they are the dominate browser and backend platform. If Google decides to ignore any standard, or flop on it, too bad, we all have to deal with google brain cancer with no recourse. I know many celebrate the death of edge and IE, but I mourn it since it asserts whatever google thinks is right is right. Go ahead, check out the \[\].sort() stability, it's an example of their dominance (and weasels infesting the ECMAScript standard writing process). They are the only implementer of an unstable sort algorithm, and their dominance means we have to accept that .sort() is probably unstable sorted. \- Mediocre ORMs and honestly most platforms on the language is more a cultural problem than technical that can probably be fixed. Not Invented Here is a serious problem where on npmsearch, looking up \`fs\` returns 1809 results. There probably shouldn't be this many packages for fs, but, hey, I have a slightly different paradigm in my app, \[better reinvent the wheel\]([https://xkcd.com/927/](https://xkcd.com/927/)). If we could collectively decide what packages are good, and make them work for generally everyone instead of forking at every opportunity, we could have some really, really nice things. Luckily there are some people curating packages, but unless the community (in general) agrees on something that can work for most people, and hell, migrate some improvements into popular projects instead of abandoning them every 6-18 months, I don't see javascript having anything mature like other languages.
I really love the `esm` loader/package from npm! You simply do `node -r esm foo.js` instead of `node foo.js` and everything magically works. You can also use it as part of your code so you can run you script normally, without the `-r esm` flag.
I tried going that route at first, but I gave up after a while. The reason is JavaScript itself. It is a weird language to put it mildly. The issues that made me want to code the least amount possible in JS are the following ( as compared to my current backend language Go) 1) highly fragmented echo system, requiring you to use several libraries to achieve the same stuff you would do with the standard library in another language 2) it fails silently. Variable not assigned eighth ? JS will just call it undefined and keep going. I write a backend function and the front end (react) end up displaying empty, I have to go back and console.log every step to see which one is the failure. On several occasions, I would be pulling my hair on why something doesn’t work and then find out it is because it wasn’t receiving the correct input somewhere up the chain 3) JS community culture is to find a library for everything, as opposed to, for example, the Go community where the culture is that you don’t use anything outside the standard library unless you really have too. After working with that concept with go, I went back to my front end and removed several added libraries I thought was necessary while in fact all I needed was one or two function. Vanilla JS is almost of academic interest as well as for some hardcore developers. Everybody else is just using frameworks. For example, Node has an HTTP module, but who uses that in production. While the same package in Go is production ready 4) performance is tricky, it is not multithreaded out of the box like Go is. For example, I thought that making a function Async would automatically make it execute in a different thread, but I was obviously wrong. While in Go simply putting the word Go in front of something make it execute in a new thread
Vanilla es5 works just fine, it's only a matter of time before people can write vanila es6. Babel will be required forever for those who want to use the latest features though.
JavaScript the Good Parts is a great, short read. From what I remember, it's a great read for when you don't have internet/a computer
Go sounds interesting i will defiantly have to see about learning more about it. Thank you for the great answers :)
No usually you don’t.Just use nomodule and type=module, and it will only download once in most browsers.
Dynamic bindings is the biggest cost of components, when you create reusable components you can't assume that its properties won't change. Just take a look at any react, vue, angular, polymer UI component libraries, application that is built with such components will have a lot more than just one dynamic binding per DOM element.
If yo knew it well you could figure it out?
&gt;Your choice of language should be driven by the task at hand, not ideology. This sounds like a recipe for success.
Again... Yup
Demos ran smoothly on my phone. First thing I checked was that you were using `requestAnimationFrame` and you passed the test 👍
I've been looking for something like this, i feel like it's a bit too messy with css and just hard in general
Mileage varies. The caveat is that you have to understand the languages you choose. That's the only real way to be able to make a good choice. The best choice is the one where you don't write a single line of code and just configure something to do the job. A lack of discipline is a recipe for disaster.
That's the best way. I suppose you could also inspect the user-agent and serve a different file that way? Way hackier though.
I am so happy I don't have to use knockout any more.
&gt; if they're using old IE, they're used to the web looking shitty I'm being pedantic here (and I agree dropping support for old versions of IE would make the web a better place), but ES6 has no direct effect on how a website looks. In this case you would say something to the effect of: "if they're using old IE, they're used to the web being broken"
&gt;The best choice is the one where you don't write a single line of code and just configure something to do the job. How would you configure an entire app without a single line of code? &gt;A lack of discipline is a recipe for disaster. It could be argued that knowing several languages, and overlaps in capability/functionality, leading to the options/choice at the heart of this discussion... That shows discipline moreso than shoehorning one language into every corner of a project because you can, or because it's possible.
If you're already familiar enough with modern (ES6+) syntax, Javascript Allonge is worth a read
I don't really mind not having all the latest spec or stage 3 available. And if loading dozens or hundereds or thousands of modules over HTTP2 can compete with bundles, I'd be game. What I would miss is Typescript (or something better if it comes along.) Modern JS has gotten pretty good but it's far from perfect and likely never will be good enough to prevent a significant number of of webdevs from seeking alternatives.
I've seen this approach in the wild and I've not seen it succeed... Too many visual inconsistencies to chase down, and then you end up with shared fe code anyways What's worked for me when dealing with large, separate apps is a single fe 'host' that does the css, common libs etc and in essence knows how to fetch and load an app bundle. Each app is packaged as it's own bundle and can be developed semi independently, is small and you can be reasonably sure that you have isolation from other apps.
&gt;It could be argued that knowing several languages, and overlaps in capability/functionality, leading to the options/choice at the heart of this discussion... That shows discipline moreso than shoehorning one language into every corner of a project because you can, or because it's possible. That's the entirety of my point. &gt;How would you configure an entire app without a single line of code? Pointy, clicky.
You must have missed my point. Later, bubs.
Or... You may have missed mine. We shall never know! Cheers. Um... "Bubs"
You are definitely not wrong. Our org finally built a full fledged and fully supported style framework that I think will finally allow us to achieve the micro strategy. It was tried about 10yrd ago and ended up exactly how you described it, but there was no cohesive style framework, which is where it all fell apart.
Additionally: Legacy front-ends are arguably an order of magnitude worse for businesses (and developers) than legacy back-end systems. Just ask anyone who’s stuck supporting an Angular 1.x application with no chance of migration.
Don't give up. Ideas change the world, even when they are not new ideas. I really appreciate hearing you say that you enjoy it. That's the whole "never work a day in your life" scenario. As for feedback, I love html. It has transformed the world. Literally. I see js and css as auxiliary to html. Html is the storage format, the kitchen table upon which meals are prepared and consumed. I don't like to store content, particularly free form content, in json or javascript. I like the trinity of css/js/html. For these rather religious reasons, I wouldn't use your framework . But I wouldn't use many of the others either so (incoming compliment) yours would be at least as good as theirs for me. Thanks for putting your neck out. Keep on keeping on.
I used to program with java, python, and ruby. I’ve recently transitioned to Typescript after using JavaScript for both front and backend work exclusively for a year. My biggest beef with using JavaScript is that it’s not strict enough even with use strict declared. I use it with node and I can’t tell you how many times silent errors happen. Call a method or function wrong (wrong number of parameters)? Node and the browsers don’t complain. For large applications people just need to use Typescript or they will go insane even if they have a decent IDE. Without a real-time linter, I even have that issue with Typescript sometimes
Id like to see one of these for TypeScript. Been reading the handbook lately and my brain is melting. I have no idea how someone could get a handle on it enough to know every tool in that toolbox without referencing the docs constantly. It seems like for ever 1 good way of doing something you could clobber together a terrible way to do it.
Basically you don't understand programming fundamentals wells enough. You're kind of asking if wetness is a problem that can be fixed with regards to water. It's not that those points the person mentioned above are problems per se, they are just trade offs. I suggest experimenting with a compiled language, like C# for example, to see the things you have to do differently (and even then, you might not completely understand why it is the way it is.)
Great article, though there's one super common scenario that I think is worth explaining even though technically you've given all the info one needs to understand it. This scenario is when you pass an object method as a value to a callback. If you have the following object and method: foo.bar(); Where the `bar` method references `this`. And you then do something like this: fooHttpService .getFooList() .then(foo.bar); You're going to get an undefined error. Why? Because you "detached" the context once you passed the method in as a value. When it's executed, it no longer is scoped to the original `foo` object, and as such, `this` has no meaning anymore. There are two solutions to this (which you've covered, but I think are worth pointing out again for this common scenario: ## 1. Use `bind` fooHttpService .getFooList() .then(foo.bar.bind(foo)); ## 2. Use a lambda so you can call the method without detaching it from its context fooHttpService .getFooList() .then(results =&gt; foo.bar(results)); For the record, I hate this about JavaScript. It has really great closure behavior that allows it to remember the environment that a function was defined in, and carry with it that environment's scope, but as soon as you pass a method as a value, it goes full alzheimers and forgets the context it was associated with.... So what was nice and clean and elegant: fooHttpService .getFooList() .then(foo.bar); Becomes this ugly bullshit: fooHttpService .getFooList() .then(foo.bar.bind(foo)); *Sigh*....
Remember that no one can tell you when is the right time. Tools like Pendo, GA, and https://caniuse.com/#feat=es6 will tell you.
"But we do things differently than legacy" is the largest fallacy driving fads in our industry. It's like a fad diet. You have to spin 10 times in circle while chewing, and only read orange things on odd days, and red things on even days. "Well that makes no sense". "Oh yeah? Well you didn't do that before, and look how fat you got!" Just changing things doesn't mean you'll achieve better results, if you don't fully understand what you did wrong in the first place. Angular is an architectural nightmare, so please don't take this as an endorsement of monolithic framework-tied apps. But this doesn't mean you can't have logic in the front-end in a framework-independent way. Talking of framework-independent way, the article seems to propose a React-specific architecture which rubs me the wrong way (despite 70%+ of my web UI is React).
I seems that it is a good suggestion for you to take your time and take the course as it was created. Who knows... but maybe you would learn the difference between JavaScript and HTML.
I still hold out for the Web Components standard to meet some sort of earnest consistency in adoption. I realize I might turn blue from holding my breath, but I’m not exhaling yet.
Web components aren't too bad, but I don't feel they solve some brand new type of problem for us. It's basic OOP design to keep our apps modular and connected via generic, simple interfaces. What do web comp. do for you that you can't do now?
Oh heyyyyy. Thank you!
It isn’t what Web Components can’t do for us now (aside from Shadow DOM, we’re already doing it), it’s about having the standard evenly applied.
My question was why do you need that standard in the first place?
This is so important. Unless you're in a complete greenfield where you have absolutely no idea who your users will be, your own analytics—not 3rd party browser share surveys—should be your guiding data.
Hi /u/NoDub17, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Finrojo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Single-spa?
What you'll find is that mastering a given language (e.g. its syntax, features etc) is the easy part of programming. It's not like JS has such a high barrier to mastery that you really need to spend years learning it. As such, there is plenty of opportunity to explore different languages and use them for different purposes. In fact, knowing multiple languages provides a kind of synergy where your total competence as a developer is greater than your sum knowledge of each individual language. You start to think about problems more efficiently, design code differently, think about the ramifications of your designs more thoroughly etc. All that being said, when you are just learning, then I do in fact recommend focusing on one language until you're comfortable with it. Jumping between languages before you've gained a basic competency and comfort in one, is going to make the learning process less efficient. At the end of the day, the challenging part of programming is code design and problem solving, and that's something you will spend your whole career getting better and improving. Those are challenges that language-agnostic.
These are all kinda interesting, but really most of them won't come up writing more modern JS (such as combining var, let, and const) or writing at least somewhat decent code.
Why would someone want to write vanilla ES6?
Not really on topic, but why is everything aligned all the way to the left on that site? It's really weird reading through it like that.
Why not just use Babel and have the best of both worlds?
Sorry to read this... What browser did you use?
Because learning one language only gives you one perspective on programming languages and the various practices and patterns that are built on top of them. Learning multiple languages results in seeing programming languages in general from different perspectives and actually gives you a better understand of programming beyond just the syntax. I found concepts like object oriented programming, functional programming and dependency injection easier to understand when I saw how more than one language implemented these concepts.
For such info I agree, but not for the game itself. This is more like "Well, you _can_...".
Unity would be the likely recommendation for anything 3D, and it's coded in C#, so not native in that sense, but probably compiled to native.
Also, people don't worry code like: let a = {}; let b = { "key": 123 }; a[b] = 456; A lot of these questions are like driving: there's lots of little twists and turns on the road of life, but not every cul-de-sac is worth driving down. Other roads are fun.
One day maybe CSS will allow us to do that :) but for now this is simply impossible. CSS is used for the transition itself, but JS is essential to calculate and get the metrics.
Because people do things other than write web apps, so for them there isn’t a front end to work with...
&gt; I’ve written js for fifteen years how many times?
Is there anyone to translate English? If so, please translate and I'll translate to Turkish later.
This is a good example of an approach to micro frontends and raises some challenges of managing the architecture and development process. Speaking from personal experience, we adopted the micro frontend architecture concept late last year and have gone through various iterations to solve a bunch of problems that threaten the concept’s viability. We now architect each micro frontend as a separate set of contextually linked components with a strict rule of component, not screen (page) level scope. The primary app is responsible for global state and theme management. We have an express layer which directly supports each component and we have a strict rule that micro frontends cannot communicate with each other (strict decoupling). By doing this, we have created a small group of micro frontends which contribute components that handle a tremendous amount of UI for a pretty significant, high volume production app. We have seen a significant reduction of tech debt, release friction and increased freedom that we found the monolithic layered architecture can sometimes restrict. To combat dependency conflicts, we recently decoupled our JS framework (React in our case) and took the small package size increase hit for the return of dependency independence. Once gzipped, our complete micro frontend asset size is about 100kb. Definitely acceptable in our opinion. We pass our theme configuration along with the props and mounting DOM component to the micro frontend to provide a consistent theme and appearance for our multiple brands. It’s a journey and it’s an emerging architectural pattern. I feel that it might not be for everyone but to discredit it entirely is premature. To the OP, well done and thank you for taking the time to create this and know there are a bunch of teams also facing and solving these problems.
The ydkjs series is great for deep dive into js knowledge needed in the real world
You Don't Know JS series by Kyle Simpson. He also has some new books. There's one I just picked up called "Functional Light" or something like that.
There are plenty of large companies using js/node on the frontend and backend. Netflix, PayPal, uber, to name a few.
Chrome desktop
We done this in our enterprise, it's a disaster. Some teams using jquery, others angular1, latest angular and react. There are inconsistencies between the webapps making up the larger cloud product that are jarring. Also when people leave company it makes it harder to find expertise within company to fill spot, example moving from angular to react takes time, time is money. If anything there's a push to separate front from backend teams, there's already separate backend and devops and data teams.
I look forward to the phone interview where these questions are read aloud to me without context by someone who doesn't know JavaScript, and my experience as a developer is judged by how many of them I give word-for-word the same answer!
That's also why I have mixed feelings with this kind of list. It tends to encourage people into learning all of JavaScript's quirks but that's definitely not what makes a great developer. If you are aware of that then great, it's a funny and interesting game!
The original English version is here [https://github.com/lydiahallie/javascript-questions](https://github.com/lydiahallie/javascript-questions) There is also a playground at [https://javascript-questions.netlify.com/#1](https://javascript-questions.netlify.com/#1)
I agree that interviewers should care a little about it in the sense that it can help to make sure the interviewee has some decent experience with JavaScript. For the rest, I think the focus should be put on the developer's problem-solving skills (for the technical part of the interview at least).
Just because something is popular (i.e. not just JavaScript), doesn't mean it's best for everything.
I do a lot of JS interviews and I use questions like this all the time. I don't mind if the candidate is getting them right all the time, but it clearly separates people who know how the language works from people who don't. If you can't solve these questions, how will you be able to debug or review someone else's code?
I think your comment is getting downvoted because it looks a bit condescending but I have to admit that I didn't know developers were posting this kind of content to Instagram. I guess I'll have to spend some more time there!
Thank you :)
Out of curiosity do your teams have a guild? Somewhere that code standards etc are discussed and agreed upon? Also do you single or multiple frontend architects?
It's Atom
Interestingly we’ve started looking into the problem of user sessions for our spa. Our ultimate goal is to remove the server entirely for front end assets and go for a cdn only front end app. Anyways, we’ve been investigating using event sourcing to handle user session state. The advantage being session state can be quickly written and played back for tracking and reporting. Also, a user session can be shared and consumed by any of our micro services.
I agree and few that without proper planning and without establishing solid contracts between micro frontends and primary apps things can go very bad. I feel that having a good common component library shared across all micro frontends is a good place to start.
The thing is with doing professional development is that it isn't always fun. You'll be sick at it. Sometimes it's the best job in the world and sometimes you will wish you had any other job. This goes for all jobs. You CAN get lucky and get a job at some cool start-up where you really enjoy the product you're making but truth be told you aren't always going to enjoy that either. I guess my tip for you is find something that pays decently and try to stick it out. Sometimes you'll do stuff you really hate and sometimes it's something exciting.
I've literally only read the first question, but taking it as an example, *it doesn't matter* what the output is. It has no bearing on how you would go about debugging or reviewing that code. The review is going to say "👀 These variables haven't been declared yet!" either way. There's no reason to know it because there's no reason to use variables before they're declared, ever. I'd give bones points for knowing it, ina "congratulations you've been revising" kind of way, but realistically I would expect a candidate not to have made this mistake for so long they don't recall what error it causes.
https://developers.google.com/web/updates/2018/03/smooshgate
I mean, exciting is a subjective matter. My coworker in the company still enjoys working on our product, while i personally find it too simplistic. But the thing about simplistic is that it doesn't tire me mentally, so while it pays the bills, i get to work on my side project after working hours. If you could land an easy job, then maybe that's one way to go about it.
I have a web application which uses JWT auth and I used Passport with Passport-JWT and the JSON web token package and it all works quite fine for me. I am personally not familiar with Permit so I cannot comment on its functionality but it seems like a package which extracts the token and authenticates it. You can do exactly the same thing with Passport - which has a longer history and more support articles/tutorials out there. I would personally suggest you go with Passport.
Some hiring manager somewhere just got an erection
The only thing, that matters is what the candidate knows about Javascript execution in general. If you apply for a role as a software engineer and you don't have the knowledge that helps you approach questions like this (in any language) will make it hard to put you on project. And we have a lot of projects that have been written before let or const even existed. Being backwards compatible in a fast moving industry is a must. There is one reason to know it :-)
It’s a joke, right?
Seconding this. Same context for me.
You should use backticks for template literals, but not regular strings. Use single or double quotes there instead.
It's also worth remembering that they are not compatible with IE11.
Yes, and no way to polyfill them either.
I’ve worked on many projects over the years. From front end to back end and everything in between. From fixing existing problems someone else abandoned, to coming up with features no one else asked for but did it just because you thought what the hell why not, to porting from JavaScript to c++ and back, to full stack web development and database management. I feel that no matter what you encounter, you’ll eventually get bored if you stick with one thing for too long, at least in my case I have. The only way to truly enjoy something is to switch it up every so often without getting too burnt out. Eventually your interests will fall in place and naturally gravitate to that area more often. There’s always going to be a time where coding will suck, but on the other hand there are times where you get that ‘ah-ha! Eureka moment’ and it’s a high like no other, and then you can code for another half a day. Lastly, if you’re good enough, people will start to notice your work and sooner or later you’ll be picking and choosing from your own selections and that’s when it gets a little more interesting! :D Good luck!
&gt;but not regular strings. What's the problem with using them as regular strings?
They probably require extra work in parsing, unless you use something that compiles them to normal strings.
Performance overhead. The engine will still parse the content as if it’s a template.
["Front End Development is hard".](https://imgur.com/OXyCbq8) You don't say.
Oh my goodness, I render this stuff in my sleep. If you guys need any help with collisions, physics, particle effects, FPS throttling, game theory etc, I live html5 canvas vanilla JavaScript send me a message. I love it so much I’m porting a lot of these animations and simulation to SFML c++ and back. I’m trying to learn as much as I can before tackling 3d and more, I love it.
 [https://www.reddit.com/r/javascript/comments/52ions/your\_opinion\_on\_using\_backtick\_as\_the\_default/](https://www.reddit.com/r/javascript/comments/52ions/your_opinion_on_using_backtick_as_the_default/) vamship says that it is actually faster to use backticks. Or that is in a different scenario?
To me i have no issue with them as what u/theodore_q said they aren't compatible with ie11 well node js won't run in the browser so thats not relevant, plus backticks make stuff like \`/url/${param}/\` and stuff like that so much easier than doing string concatinations
W3schools is your best friend in this
If I saw backticks in code I would expect a template literal. Quotes will make the intention of the code more clear (simple string), and that improves code readability. I haven't consulted any style guides but I can't imagine you'd see backticks chosen over single or double quotes in every situation. Following a common style again helps with readability. The issue of browser compatibility might not be relevant if you're working in node but getting more familiar with wider-compatible version is still in your best interest.
Babylon and TypeScript are soft-of-that. I know, compilation step.
Only use them in concatenation. eslint has a rule that helps you with that: [https://eslint.org/docs/rules/quotes](https://eslint.org/docs/rules/quotes)
It's faster to build dedicated objects for every string literal? Yeah. sure... B.S.
Fair. I was thinking in-browser polyfills. Babel can perform all sorts of magic.
I doubt it's "faster". Don't fall into this trap.
Why?
https://www.reddit.com/r/javascript/comments/c2tpwe/is_it_wrong_to_use_backticks_everywhere/ermi6y6/
Go to school. I mean that. If you need to be nurtured and validated every step of the way, then you don’t have the aptitude for the work.
Feel free to DM me, let me know what you expect / plan. There are several different paths depending on the type of projects/jobs you want. Hopefully I can be helpful.
But why? What is the problem with using it in a simple string? It can't be a rule just because someone said it... it has to have a reason and I'm looking for that specific reason.
Because there is a material difference between &amp;#x200B; `\`I have ${count} fingers\`` and `'I have ${count} fingers'` &amp;#x200B; When you use backticks, you're communicating to other developers your intention for that string - that is should be interpreted or not. &amp;#x200B; Think about it like the difference between **let** and **const** \- there's nothing stopping you from using **let** for everything, but if you do so you lose some of the semantic richness of the code. Remember that the code you write is \*at least\* as much a communication with other developers as it is with the machine!
Most of these issues would be easy to fix if noone cared about backward compatibility. Without breaking half the existing JS sites.. we're stuck with most of these.
Babel simply replaces them with concat() functions on strings.
You could also use a brand new Porsche as a hammer. Nobody specifically instructs you to not use it as a hammer. It'll definitely get a nail into a piece of wood if you handle the Porsche correctly. Coding conventions don't need to make sense other than keeping the code clean. Your colleague devs will see: const something = `your string`; And they'll expect you want to concatenate something in there, or have it be multiline. Alternatively, if they see: const something = 'your string'; They will know it's not meant for concatenation, or multiline. This is nice because there will be consistency in your code. Without consistence you'll get a mess like: import {something} from 'lib'; import { somethingElse } from "lib2"; import { something_else } from "lib_three"; import something_else from 'libFour'; Sometimes a single quote, sometimes a double quote, sometimes with spacing around the curlies, sometimes camel cased, etc. &gt; But why? What is the problem with using it in a simple string? Counter argument: why aren't all your strings a function? const myString = (function myString() { return 'wee'; })(); Because that's not what they're for. Back ticks have a semantic reason and purpose, on top of a functional one. You can definitely just ignore that because you feel like it, but teams will hate you.
https://ponyfoo.com/articles/template-literals-strictly-better-strings
Lots of assumptions on your comment, like he is not at school or that what he is asking for is a person that will nurture and validate everything he does. Mentoring is very helpful independently from the way he is learning, be it school or not.
It’s a waste of CPU cycles, simple as that. Template strings get additional parsing because of interpolation, normal strings can’t be interpolated and are slightly faster because of this. It’s such a small difference, you won’t notice it, but it’s there.
Can I DM you too? 😧
i like them because it's impossible to copy and paste left and right backticks, unlike the handed quotes that slack displays occasionally inexplicably.
I like to use single quote primarily and template literals only when needed. For a simple reason, though - you can't use template literals in object declaration like this (and maybe even in other places?): &amp;#x200B; \`\`\` var hw = { \`hello world\`: true, } \`\`\` But you can use single quotes \`\`\` var hw = { 'hello world': true, } \`\`\` So single quotes are better default for me because I can use them in more places than template literals which is better for consistency.
I believe that when you say *concatenate* you actually mean *interpolate*. It makes sense to use words in agreement with their meaning.
Wow. What an asshole. Mentorship is half of this damn job. Get over yourself. Your time isn't THAT precious.
Uh.... school is just paid mentor ship. I should know, my professors kept repeating that to anyone who came to office hours.
I completely agree with this. I often say "professional software engineering is boring by design", in that at the highest level it's get/change/set data. If you're having a blast, chances are you're doing something that is academically interesting but not necessary for the job (micro optimizing, etc.) Of course, there are exceptions to every rule! The exciting part of software for me now is teaching others I work with, and learning things from them along the way!
I wouldn't worry about it unless you're working in a codebase with other people, if so just do whatever is consistent with what exists already.
Thanks. I will 😍
Schools are not that great as you think. Atleast according to me.
&gt;You could also use a brand new Porsche as a hammer. Nobody specifically instructs you to not use it as a hammer. It'll definitely get a nail into a piece of wood if you handle the Porsche correctly. I truly don't understand the analogy. Back tick strings are new. They are superior. Mixing them does not make it cleaner and almost no other language does that, when they do it's hacked on to maintain backwards compatibility and either you migrate to the new style, or the new style is prefixed (c# prefixes with a $), it has the opposite affect. It makes the code inconsistent. What if a string no longer needs to be interpolated and you remove the variable, now you have to change the backticks too quotes to be consistent. Want to add an interpolation? Change those quotes to backticks. &amp;#x200B; Unless there's a serious performance difference, I can't wrap my head around this thinking. Mind you I'm not a js dev. &amp;#x200B; Another poster compared it to let and const but that doesn't make sense either. Let or const affects how your code is written on a fundemental level. A backtick string does not, it's semantic sugar.
This is EXACTLY what I need for a project, but I have no idea how to import it into WordPress. I’m not a developer and my JavaScript knowledge is extremely limited. Could you provide some ELI5 instructions on how to get this working on a WordPress website?
[https://jsperf.com/strings-vs-template-strings](https://jsperf.com/strings-vs-template-strings) &amp;#x200B; Running this a few times would suggest that the complete opposite of what you're saying is true. Backticks perform the same or better but negligibly so.
Eloquent JavaScript by Marijn Haverbeke is exactly what you're looking for. You can buy a hard copy, or get the full PDF provided by the author [here](https://eloquentjavascript.net/Eloquent_JavaScript.pdf).
 const hw = { [`hello world`]: true, }; Babel optimizes them out to string literals if there's no interpolation anyway.
This, perfect explation!
&gt; First, let’s add an empty .map() method to the Object prototype. Let's not do that.
Airbnb's eslint style guide enforces quotes over backticks unless interpolating.
Yah, I know about this and that it's a bit more powerful - but I use this syntax less often than the one I mentioned. Whenever I can I don't want to use square brackets because they are less readable. And babel will not optimize backticks to quotes in the example I provided. You'll get SyntaxError in babel parser. And on top of that eslint will also get you parsing error with that.
&gt; at the highest level it's get/change/set data CRUD life.
Hi /u/tk_tamani, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Oh yes, we doin' it.
Nope go ahead and use them everywhere, even in place of parentheses. console.log`never enough backticks`
I believe was asking about using backticks for every string declaration, e.g ``` const a = `simple string` // using this const b = 'simple string' // instead of this ``` IMO it has such small effect on readability that you should just let your linter decide which to use
\&gt; should just let your linter decide which to use Linters are configured by the developer
We have eslint which checks if there is variable interpolation ( ${myVariable} ). If it does not it will throw an error before commiting. This is to ensure the same style is applied throughout the whole of the project. Mostly because template literals about 3 years ago were slower, but now browsers have significantly optimized and adapted ES6. IMO, I would only use them if required to interpolate variables / expressions or to prettify a formatted string block.
You contradict yourself a little there. You say, based on the first question, that it doesn't matter what the output is, but then talk about never using the \`var\` keyword. Which would mean you'll typically be using \`let\` or \`const\`. That first question gives you an indication of whether or not someone knows the differences between the two, you can't expect someone to never be using \`var\` if they don't understand scoping and why you would use a \`const\` or \`let\` etc. Ultimately, whether or not their interview questions depends on the level your interviewing for. But I don't think the questions are too crazy and if you could answer a question on scoping of \`var\` vs \`let\` I'd be a tad worried if you're being interviewed for a JS role
Use em, but if it's going on the front-end make your babel/compiler/linter recognize it and possibly even auto-fix it to be IE compatible.
There's another real-world case for template strings: multi-line strings.
I actually like backticks as the default because it's less refactoring if down the road you need to add a variable as part of the string. Just wrap it in ${}. Most modern build systems will have a compilation step from es whatever down to es5 so it's generally not an issue. Only time I'd say not to use it is if for some reason you're on a team that doesnt have that.
What have you not understood in the explanation?
Yeah, that's true. In that case it's just a question of browser support vs code cleanliness.
&gt; What if a string no longer needs to be interpolated and you remove the variable, now you have to change the backticks too quotes to be consistent. Want to add an interpolation? Change those quotes to backticks. Yes. What's the problem here?
I don't see what the commotion is. I wrote/found my own flatten helper and it's like 4 lines of code. Did this native method's absence really stop people from developing? Also, why should anyone care about people who misread an article and immediately went and changed their production environment to use .smoosh()? I doubt that actually happened, but the article uses that as a point to stir up why this is an important conflict.
I don't see what the commotion is. I wrote/found my own flatten helper and it's like 4 lines of code. Did this native method's absence really stop people from developing? Also, why should anyone care about people who misread an article and immediately went and changed their production environment to use .smoosh()? I doubt that actually happened, but the article uses that as a point to stir up why this is an important conflict.
Well, I think we're on the same level here, but my question in the moment is just "how can I find a programming \*internship\*". I know this is an useless comment , but I just wanted to say I hope you find a nice job dude!
1. He said Node which is server side 2. If this were client side then you should be using Babel or similar to transpile all the fancy code into browser friendly code which means turning all the back ticks into regular quotes.
Sounds like an UX disaster, unless you have a good design system in place.
Well maybe his example made me think he sort of misunderstood the question, but rereading it I see he did not
FreeCodeCamp. Check it out.
What a joke :D If my company would decide to develop our applications this way I would leave same day :D
Why?
What's working well for me, but maybe wouldn't translate to other people, is to simply dedicate yourself to making customers happy. Right now I have just the right amount of freelance work to keep me busy without overloading me, and it happened because people spread my name for me without being asked to. I can be more confident that the people who hear about me from a friend will be a better customer than somebody I had to cold-call or petition for work.
Everyone should be using eslint (or another linter) in their project. It’s important for teams to be consistent in their style
Sure, if you copy the &lt;script&gt; tag from the freezeframe core, you can paste that into your WordPress site. If you don’t have access to the FTP server, in WP you can go in the navigation to Appearance &gt; Editor, to edit your theme php files. Paste the freeframe CDN script tag into header.php, and then just put the class name “freezeframe” on any images you want to freeze. Almost forgot, in your footer.php, add the following: &lt;script&gt; new Freezeframe(); &lt;/script&gt;
Do you have any explanation for me why backticked strings would perform better than normal strings?
You write code, not for the compiler or interpreter to speed through, but for the next human who has to read and parse said code. If you want a string use something that implies string. If its your codebase and you are never look at it again. Do what you want. If, however, you're learning to code with the intent of writing code on a team; understand the premise of intent and how it helps understanding foriegn thought processes - which is kinda what code is.
It's so sad that in 2019 we need to think about IE. But that's just the way things are :( But if u/lipe182 is talking about node, he is not that bothered about browsers. :)
In addition to the semantic arguments made here -- use backticks to signal either interpolation or multiline, single/double ticks to signal normal strings -- there are behavioral reasons not to just use the backticks everywhere: * if you use backticks on the use-strict pragma, it will look like you're in strict mode but it doesn't activate strict mode... super bad idea to confuse like that. * backtick strings cannot be used (syntax error) in object-literal property names (and no, using [ ] to compute it is not better, that's even more convoluted!). * backtick strings cannot be used in the ES6 import statement for the module-specifier (also syntax error). My advice is, use backticks only when doing interpolation or multi-line strings, and stick to regular string literals elsewhere. Just like I don't think you should omit all semicolons just because JS will fix those parser errors, don't rely on tools to fix improper usages of string syntax.
Yeah, only the base/shell is loaded and then it pulls in each app as the user moves around
Why is this being downvoted? I'm legitimately curious, as I thought this was a realistic concern. I've never used Node.js--or any JS for the back-end--but I've used PHP for a very long time and I've always had the understanding that one should always use single-quotes for pure strings and only use double-quotes when embedding variables, as it will increase performance--albeit minimally--by not having the server parse strings needlessly.
Also strings containing quotes, you can escape them but sometimes I just use backticks instead
Yeahhh they enforce a lot of crazy stuff though.
I've yet to run across someone who's used the single-spa library in the wild. I've been contemplating introducing it where I work. Would you say, based on your experience with it, that it is a worthwhile endeavor?
I get where you're coming from but I personally find it very hard to interpret code as difficult to read if I see backticks over single quotes. Mind you I use single quotes by habit unless I need interpolation or multiline, but I feel that it's the `${}` that helps me identify interpolated strings, not the backticks because they look almost exactly like single quotes anyway. Because of that I don't really see this as a good reason against backticks everywhere.
Thanks. But mentor is different from teacher.
Been using it for years in a team setting. Kind of curious what “crazy” stuff it enforces, because it’s introduced a lot more sanity to our team. A lot of the rules seem odd at first until you dig into the reasoning.
I think you mean de-antiquating?
Two things. 1) When developers see a back-tick, they are expecting a template literal. By using them for regular strings, you're lowering readability and thus maintainability. 2) Back-ticks are going to be handled at run time by the templating engine at the expense of time. The net effect is that it will slow your code for no (or negative, see 1) gain.
If their style guide works for you that's great. I'm just saying that a specific style guide that enforces one particular rule doesn't really mean that it's a bad practice altogether. What's introduced sanity to your team is having a style guide and everyone adhering to it, not necessarily the specific style guide itself (although airbnb's is obviously popular and comprehensive)
Ah whoops. It's still a good warning!
The app I referred to was more than three years ago with knockout - that's definitely dated. If you want to do a spa, then react being more a library than fx doesn't help(I know you can bring in routing, state mgmt etc - but having to deal with versioning isn't fun). Angular is a full fx... But back then it couldn't do in demand loading and after angular 2, I've never looked into it. I did try vue recently and liked it a lot for being the best of both worlds... Lightweight library feel but provides a full fx that's first party and tested to work together. That said, I've not done and major js dev for quite done time (and I hope I never have to)..
That’s a deflection, not an answer. What’s some “crazy” stuff you think it enforces?
Browser support isn’t particularly great with Web Components, not sure how we can benefit from them with React and Vue on the scene
It is.
Don't use jQuery. You're learning dead-end technology. Find a React tutorial instead.
Use a custom sequence of the Unicode ticks, so you can tell if Google (or one of their partners) scrapes your code
Just so I'm clear, are we both taking about [single-spa](https://single-spa.js.org/)? I can't tell if you're commenting on building a spa in general or building multiple and combining them via single-spa.
Heh... Never knew that there's now a project called single spa¯\\\_(ツ)\_/¯ So nope...
Haven't used it in a couple of years but `no-plus-plus` and having to disable eslint `no-param-reassign` in every reduce made me quickly stop using it for personal projects.
Hi /u/loot6, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dittospin, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hopemanryan, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lobstahcrushah, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/noquarter1000, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/lokendra15, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/iamthezerojoker, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/proteeti13, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dead4586, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Olumyco, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SYnchro210, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Or, you know, just use lodash. Or map over Object.entries or any other number of things that aren't a bad idea.
Here's my reasoning for enforcing using backticks everywhere: - Easy to switch between template literals and regular strings (no need to change the quote types) - Come across having to escape characters less often (backticks aren't nearly as common in regular strings as single and double quotes). Only exception I've come across are import statements.
Thank goodness my 8th grade english teacher is here to correct me
Just an FYI, using `console.log` in JSPerf is just asking for inconsistencies. I reworked your example and the tests are now running into the billions of cycles and showing there's no computational gain or loss in the simple string manipulation: https://jsperf.com/strings-vs-template-strings/3
Those templates strings are interpreted at compile-time. Hello ${name} Becomes ‘Hello’ + name So if there’s no literals in your string it’ll just get converted to a static string anyway. There are other reasons not to do this - but performance isn’t one of them as far as I can tell
I like hard enforced rules as eslint and prettier can fix most of them. Just write code, save and it's styled to team likings. No need to bikeshed over it.
You use them when you want to have a multi-line string. Basically a readability feature. If I have a big long copywrite paragraph for instance I can make it a nice square paragraph within the code but just put a "backtick" on either end and it'll be read as a string the same as a single line. Using them in a single line makes you a dirty communist though and we can't have that. Oh no no no.
For performance it may make sense to apply plain quotes in most place
It's not likely to cause any problems with the execution of your code, but it's always a good idea to use the right tool for the job. Use quotes for strings, backticks for template literals.
You will meet people in the forums.
I wouldn't consider either of those crazy rules. `no-plus-plus` is definitely more of a style choice, as it's so rare to see code without semicolons anyway so the error it's catching is odd. I haven't ever heard complaints about writing `+=1` instead of `++` though, since it's such a minimal style difference. `no-param-reassign` is a legit thing though if you're writing code in ES6 and using destructuring arguments frequently. There's definitely cases where we've had to disable it in projects, such as working in AWS Step Functions where you're passing around an event object. Overall though, it's a great default setting since it ensures `...args` is actually the passed arguments and not manipulated.
I don't see how micro ops are the bottleneck, they're mostly not, and these tests are also mostly not so relevant in the real world. An app starts to choke on when too many operations choke the main thread. The browser isn't terribly fast, and the dom paints very slow, so web applications already choke easily compared to native applications. The virtual dom is a fraction slower when it comes to micro ops, but it has the very real possibility to solve the actual bottleneck because it can schedule content: [https://youtu.be/v6iR3Zk4oDY?t=245](https://youtu.be/v6iR3Zk4oDY?t=245)
I loved this!
Thx for reading!
I was reading through all the comments and started thinking, "hmm, maybe it's not so bad to backtick everything. I mean, all these arguments against it are so flimsy and contrived..." But your post is what talked me off the ledge (particularly the additional examples of it's non-universality). So thank you.
It wasn't a personal attack there brotato chip. Just trying to add some clarity if there are any newcomers here who might not yet know that Javascript has no direct effect on how a web page renders.
Enjoy )
To that I say: 🖕 airbnb or just remove that rule.
My only point against using backticks exclusively is that regular quote is in more convenient place on a keyboard
Both responses here have moved the goalposts of question 1 to "How are variable declarations scoped and hoisted differently when using var, let and const?" That would be a reasonable question, although I'd wouldn't ask it that way myself. What question 1 actually asks is "What specific runtime errors occur when deliberately using undeclared variables that are later declared with var, let and const?", which is just trivia that no one needs to know.
&gt; I've really started liking it because it's less refactoring There's a vscode extension called "toggle quotes" that cycles the type of quote a string is wrapped in by pressing `ctrl` \+ `'` , makes doing that a non-issue
It's confusing to the reader: it says this string has interpolation but oh wait no it doesn't.
But I suspect that difference is like 0.1% of execution time. I haven't seen an actual comparison.
Thanks! I still can't get the GIFs to respond to the code, though. I have the CDN tag in the &lt;head&gt; of the site, the new script you provided in wp\_footer... images have 'freezeframe' as the class, but they're not freezing. I've also tried two variations of injecting the code - one by using effectively a plugin to inject the code into the wp\_head and wp\_footer, and by using a child theme to edit the header.php and footer.php files.
For the love of god explain this to my workplace. I have to submit code that makes me gag daily. I tried to introduce linting once, regretted it when it caused a stink and everyone treated me like I was trying to show off.
If you use single qoutes, you can just use quotes normally and the browser will escape them for you. const single = ' "quote" ' const double = " 'quote' " both works Using double quotes allows you to use single quotes in the same way
Chances are: you need to change jobs (..."he said, like it was as easy as breathing") . I would absolutely hate to be in a job where coders didn't want to improve. Constant improvement is kinda our shtick, and without it, what do you have?
Exactly. I didn’t spend years busting my ass to know this stuff to submit the sort of shitty code I’ve been told to produce. I have a very exciting interview tomorrow so hopefully I can tell them to stick it soon!
I never found anything like this that the javascript community can agree on. So don't bother with right or wrong, just do whatever you want, it's a lost cause anyway :P
Nice work :)
Introducing linting to an existing project is a pain in the ass, while starting a project with one usually solves a lot of the stink.
Backticks for me denote interpolation. If you aren't using that, then I wouldn't use backticks. Think of it as adding an api for something that isn't necessary. When you look at something with single/double quotes you know immediately that there isn't interpolation.
We have 4 huge shitty protects and won’t be starting any new ones. I’m outta here ASAP
Awesome. Good luck! I love where I'm at now, startup with a tiny team looking to expand. Everyone is constantly challenging and helping everyone else grow. It's hard, because of how busy we are, but that team desire to grow and learn is what makes it awesome. Find something like that and hang on to it.
In that case, one of you sanctimonious pricks can do his homework for him.
I mean, it’s probably closer to the least important thing than it is to the most important thing. But it’s helpful and practically zero cost/overhead, so why not?
There's a minor performance difference: ``` for (let index = 0; index &lt; 1000000; index++) { arr.push(`this is a longish string and it doesn't have any interpolation`); } ``` 19.96 ops/sec vs. ``` for (let index = 0; index &lt; 1000000; index++) { arr.push("this is a longish string and it doesn't have any interpolation"); } ``` 26.27 ops/sec I'd link the JSPerf but I'd be doxing myself :)
Sounds like a horrible environment. I personally only want to work somewhere where new ideas are always encouraged. Don't let them get you down. Our industry is about always evolving and people with that kind of attitude will be stuck in their old ways forever.
Well, I'm not much aware of JS good practices (are there any? sometimes it looks like a few seconds after one is decided, a new framework comes and changes everything all over again), but, overall, I try avoiding them as much as possible, specially on regular strings or little code snippets that can fit fine on one line. That said, I **love** using them to help me with the templates, but strictly with the templates :)
&gt; The virtual dom is a fraction slower when it comes to micro ops, but it has the very real possibility to solve the actual bottleneck because it can schedule content Any rendering library can (theoretically) schedule changes to the dom. Just because React popularized scheduling doesn't mean it is exclusive to the virtual dom. Another point is that removing the overhead of a virtual dom gives you a bigger performance margin and scheduling might not be necessary in the vast majority of use cases. See [Svelte for example](https://youtu.be/AdNJ3fydeao?t=1073).
This is true, but I always use ESLint with a config enforcing single quotes, so I can’t just switch back and forth. It’s a compromise I’m happy to make.
If you PM me a link to a page with the gifs I’d be happy to take a quick look
I see, thank you!
If it's wrong I don't want to be right.
Can we please stop religiously following Airbnb highly subjective linting rules?
&amp;#x200B; Busy work for the sake of busy work. I would only use single/double quotes if I was intentionally printing out ${}. Otherwise I won't make my life intentionally harder.
Probably because once the compiler in the browser has done it's thing it's optimized to a static string anyway, if I had to guess 🤣
Pretty neat. Contrary to the sentiment in this comment section there are very big companies (eg Amazon) that have developed ways to manage large sites with different frontend code bases without the user knowing. There are technical challenges of course and I'm glad the article pointed them out. This type of architecture should be a tool in a developers belt like any other pattern or design. When the need arises it should be used. Which probably won't happen until a website matures and the needs become different rapidly.
It's messy to use both. Conventions for strings should be defined, upheld and if backticks aren't used for string definitions than just escape single and double quote characters.
There's not really a reason not to, so go for it
I started a project recently and set up my WebStorm so that each save, prettier runs and just formats all the style on the saved document immediately. It's so nice to just... not have to worry about style, and have it automatically just all be consistent.
There is an option on that rule to allow double quotes when the string contains single quotes.
I'm not telling anyone to use both at the same time, I'm just starting that both work.
You don't need to switch back and forth. You can just use my first example. No need to escape anything. I merely included the second line to show people that the opposite works too.
How do you add a window on OSX? DRagging a window to it does nothing
Did you grant to it accessibility rights? Also, after granting you need to restart Multrin.
redux, redux-thunk, lodash, axios, react router. Dev tooling: create react app, prettier, husky, ling-staged,
You need to switch if your string contains the same quote
Fair enough.
Look, I honestly don't really care. I just care about project coding guidelines. If you're on my team and you use back ticks for every string even when you don't need it, then you're screwing up my TSLint. It's the same as people forcing anonymous arrow functions into everything, even if it doesn't make any sense. Often a named function is older, but superior, because it makes debugging so much easier.
Hi /u/n-bixa, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
If you base your project on create-react-app and properly configure everything then just use npm build command. You will not have to worry about anything
Very cool. I will look into this today.
I have a few differences of opinion from it (I strongly prefer named exports for example) and found it to be quite restrictive, but that's what the .eslintrc is for.
Sure thing :)
Would you use numbers instead of booleans? They can act like booleans but have a lot of additional functionality to them as well, like booleans with magic if you will.
I found even with the shared component library model, you can end up with the same pitfalls you'd have without a shared component library despite intending to avoid them. The shared components aren't guaranteed to be consumed under the same framework/boilerplate unless that's also made mandatory, so that alone can result in weird interface/lifecycle compromises if not a risk of memory leaks as frameworks with different life cycles end up forgetting to destroy components and watches. Further still, without a strong UX/style bible/guide (either one made internally, or for smaller organizations, making the rational decision to embrace a major company's style guide to lighten the load of a smaller to non-existent UX team,) even the shared components can end up with multiple style variants of the same underlying component due to UX personnel turn over. Each new designer may have a different idea they like for say, button placement in a modal. Those changes can be made everywhere easily depending on the original architecture of that component in a monorepo front end (of course it can be bad here too if people are copy/pasting code.) However, with a shared component library, especially one with versioning and options for component style, it could in the worst case mean getting a bunch of other teams to upgrade a bunch of old micro frontends to the new shared component library version, then updating the style settings, plus regression on each individual repo, something they may simply lack time to handle. Obviously, this kind of thing is the type of UX decision devs should push back on - demand good reasons to risk a lot of work, inconsistency and regression - but that isn't an option in every organization. Also admittedly, in the best case, the changes made to a shared component library are non-breaking and the upgrade painless because it's just CSS changes and nothing using the component in a weird way, but it'd also be that in a monorepo. Both micro and mono can have their expenses and wins depending on other previously made decisions and org culture, but that's maybe mostly my concern with the language in the in the original post. There's not hard and fast rules, and glossing over the gotchas helps ensure someone gets got. Articles like the OPs and the Spotify one I linked end up getting forwarded up the chain in orgs to leads who aren't as in tune with gotchas and are then taken as gospel. Later, those same leads they wonder why under-estimation and maintenance issues have become endemic because the gotchas and thus the best practices to avoid them weren't considered, and thus weren't factored into any work estimates.
F
You could start with a very small ruleset. Most important rule IMO is `noUnused`. I am also a not big fun of styling lint rules. You can delegate a ton of styling rules to prettier. Enforce everyone to use prettier and thats it. Or you could upgrade from `noUnused` to a real "linting" tool, typescript.
I'm looking for the same, but for Python. I have project using MongoDB in production, but for local development it's unnecessary to install mongod (particularly for occasional project contributors or for non-source-code contributions). SQLite is already part of Python standard library (so it is in any Python installation), so SQLite-based wrapper with MongoDB (pymongo) API would be best solution.
&gt; 2) Back-ticks are going to be handled at run time by the templating engine at the expense of time. The total cost of a zero interpolation template vs. a string literal is roughly just pushing and popping a single entry to a c++ vector during parsing. Scanning is pretty much identical (regular strings have to check for newlines, while template literals check for `${`), and both are passed to the interpreter as string literal tokens.
I changed a bunch of ‘../../../../services...’ to ‘@/services’ and done a bunch of tidying up and install prettier on the project so that any file that was touched would get cleaned up. I suggested we use it as it would be a positive improvement, and is a first step to being more productive etc etc The idea was rejected and they weren’t interested. It was just an annoyance and my commits were reversed.
How do you serve the shitty build only to shitty browsers?
Just make it so that passing linting isn't mandatory to commit/push, and it'll be fine. As you work on a file, try to leave less red squiggle underlines than it started with. Incremental improvement FTW.
I use the [airbnb](https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb) eslint and am very happy with it. I just made some small modifications for IE11 and Babel compatibility. I also added JSDoc requirements to enforce function documentation. VSCode has some good plug-ins that will autofix a file for you. I also add a `jsconfig.json` to type-check JS files and disallow implicity `any` types. It's very satisfying getting a whole folder project to show no red dots (lint errors) in VSCode.
Read through the comments to make sure someone had said this!
I would personally say that all three of those are fine exceptions since none of them behave like "real" strings - you can't use variables, you can't concatenate them, you can't use an expression in place of them.
From strictly a performance standpoint, you shouldn't because \`backticks\` invokes a internal function. The compiler will parse what's inside the backticked string, much like how C++ works with `printf`. If there's nothing to parse, it's a waste of CPU cycles.
Microsoft has also said that IE is not considered to be a browser but a "compatibility solution" for users who need it. So, if you want to continue on with this "compatibility solution" through to 2024 or perhaps past that then more power to you. &amp;#x200B; On the other hand, if you already know that you aren't going to support something that hasn't seen any new features since 2015 that long, then you know you're going to quit it sometime before then. What's the difference between giving it up now vs. six years from now? Or four? Or two? If it's going to be a painful transition either way, do it now.
When dealing with json, they are wrong to use.
....how do you even type backticks...(never knew that was the name of them)
linters automatically fix these things and you don't have to manually replace the quotes with backticks.
In v8 at least the difference is negligible. A template string with no interpolations is passed to the interpreter as a simple string literal (see [here](https://github.com/v8/v8/blob/5cf2ae5a4d7224198a0474eb27cc618b6843bc32/src/parsing/parser.cc#L3496)). It would take parsing millions of strings to get a measurable difference, and that difference happens exactly once during scanning/parsing (so just on startup) regardless of the number of times the line with the template literal is actually executed.
I think this example is a bit confusing for those of us with heavy web backgrounds, only because a button as a finite state machine is generally not a problem we solve with JavaScript (CSS handles all of this super well). It makes sense that the demo is done in react-native, but I kinda which the state machine was an example of something that doesn't collide so much with web paradigms
But is there a parsing or execution cost? It is this just a stylistic / semantic preference?
tilde is ~
For real tho, please don’t advise people to modify prototypes, learn from history that this is not a good practice
Backticks also force the interpreter to scan for `${...}` tokens. Unless you mean to do something, don’t. It’s like devs doing `{meth: () =&gt;{}}` instead of `{meth(){}}` without referring to this. There are semantic differences for `this` that affect how it is interpreted.
According to google he is a far-right Italian politician dubbed "The Italian Donald Trump"
Common convention is only to use them when interpolating values or for multi-line strings. And it is generally a good idea to follow common conventions when you don’t have a compelling reason to break them.
First, let’s add an empty .map() method to the Object prototype. Big NO! at this point.
It is very common to follow a “except to avoid escaping” rule when it comes to quotes. For example, this code would pass the AirBnB style guide: const foo = 'hello'; const bar = 'world'; const baz = "world's end";
no, smart choice
&gt; Introducing linting to an existing project is a pain in the ass, while starting a project with one usually solves a lot of the stink. Linting without enforcement is pretty much no linting at all. You can lint your own code, but if people aren't going to change their minds before the red squiggles, then you won't after. The best way to get linting incrementally is pick one or two rules to start enforcing at a time. "In a week, we will require all white space to be spaces."
Doing this as a strategy seems weird. However, I feel like it's only natural as the company grows. They might have begun with jQuery-app. But now more than 5 years later, it's not viable anymore. (the boat have got too many holes, just let it sink) Thus leading towards building a second front-end using "insert name of framework here".
IANAL, but whether or not the library is supported doesn't have any bearing on whether you must comply with the license.
If its just you and you love doing it then go ahead. But if you’re working with other people, I highly suggest not to. Especially if you are working with peolple who knows languages like c/c++ where ‘a’ is different from “a”
I don't see how you can schedule when you remove the runtime. And i do think that scheduling makes for the staggering majority of cases where performance is not enough. The budget to draw is very slim, 15ms maybe, go above and the app skips frames. Sure enough any framework can do it, but it appears like only the ones with a vdom have managed to pull it off (React, Vue, ...?).
You say that like composition isn't a huge part of OOP?
It’s a bad idea. If you want to subclass the host Object (i.e. `class CustomObject extends Object {}`), that’s fine. But modifying the prototype can lead to “prototype pollution,” which can cause nasty conflicts. If any other library/coworker/CDN’s code implements a different version of `map` on the Object prototype, then it will conflict with you implementation, leading to all kinds of strange, hard to track bugs. It’s one of those things where, because everyone knows not to modify host objects &amp; prototypes, it’s actually pretty safe to do this in your own code, since it’s rare to interact with another code base that has also done this. But if everyone took that as a license to modify host objects at will, then all that safety would vanish. So it’s best not to do that.
The real answer to your question is: No one agrees on quotes. Try to be consistent what the file you are working in does, but otherwise knock yourself out.
Typically it is akin to look at the ECMAscript support specifications. (Unless it is out of date) [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template\_literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) MDN says that " Experimental. Expect behavior to change in the future." So I wouldn't use it yet if you want to use it in other areas besides node. If you want to export your node js to the browser with browserify, I don't know if it would work or not but I would try it. Well this feature is super useful, I would only use it when you need to use it.
Well I mean enums are basically used when true/false doesn't cut it and are typically implemented as integers. So yes, people often use numbers to handle values with possible cases beyond true/false.
I didn't, how do I do that? Didn't see any prompts upon installation.
There is no problem. It's just what OP is used to...
I am sorry but this is bullshit. An operator doesn't "imply" anything, it is what it is. I suggest you revisit your expectations
Your "common style" can simply include backticks for all strings. Again, you are advocating what you are used to as some sort of general rules. It isn't. It's simply what you are used to.
Yeah, but - who cares? I am experienced enough to not need some Silicon Valley dev what is and isn't acceptable, thank you very much
Not true, _you_ are expecting a template literal. It's absolutely not the case. I expect a string, for example, perhaps multiline, perhaps one with quotes inside.
Haha! I don't think this would be appreciated between co-workers :-D
That makes complete sense. However. There are developers and companies who build their software once and may not be able to upgrade their libraries for long time. So they licence library "ABC-9.3" and pay annual licence fees. Many years later annual licence for library "ABC-9.3" is no longer available for sale however that developer has no ability to upgrade to "ABC-10.5". I am sure this situation can't be that uncommon.
Second this! I would also recommend and highly encourage teams to use automated formatting (we use Prettier https://prettier.io/). All this stuff is better handled by machines than humans :)
&gt; How can you schedule when you remove the runtime (Svelte)? You probably can't, but Svelte was an example of the perf increase when removing the virtual dom not of scheduling. &gt; These are the only frameworks in the web you can call "fast", they could potentially rival native apps. I've never seen any ui benchmarks for native though (desktop or mobile) but I'd tend to agree on principle that native UIs written in C++, Swift, etc, should be faster. Not sure how much faster though. One order of magnitude? Two?
Eh, I think then you end up accepting the red squiggles, and linting becomes something completely meaningless. I'm planning (and I'm not sure how well this will work) to introduce linting in one of our codebases by enforcing the lint rigidly, but not turning on the majority of the lints at the start. Introduce it, turn off all the lints that we're currently failing (apart from the ones where the problems are tiny enough that we can fix them there and then), and then slowly turn those lints on again as we get time to deal with them. I have no idea how well this will work, though... :P
Convincing people to do changes sometimes must be done very carefully. So one thing I’ve learned is that “just submitting a PR” is one of the worst approaches you can take ever. Sometimes you must gather very solid evidence (like examples from sucessful repos and articles) or even ask the person to implement himself so his ego is not hit. Programming “democracy” is way harder than programming itself, but absolutely important. Im not saying you had fault for it, but that even on the best environments you can benefit from sharpening your “politics” skills.
Pffft, tabs or I quit.
Hi /u/lexaxy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Only escape sequences in tagged template literals are experimental.
A good portion of failed lints can be auto-fixed (such as indentation and semicolons). It would likely be worthwhile to just perform a single commit auto-fixing everything possible.
I think you’re absolutely, 100% right. That said, I’ll just say that using FP concepts in JavaScript has plenty of benefits besides pattern matching (which is basically what this Either monad is trying to do at runtime). FP can improve our ability to compose functions and procedures. It keeps the code cleaner and more standardized, at least within a given domain. Additionally, hiding raw implementation details inside a function is a good thing, as long as the performance cost is minimal, and the functions are pure (read: “predictable and easily testable”). It frees up space in our minds to think about programs at a higher level, which is quite useful and enjoyable. Admittedly, that’s only a small part of the FP picture. It would be nice to have a compiler which handles all these things for us. TypeScript has some degree of pattern matching, but it can’t give us monads. Real-world implementations of monads in functional languages essentially generate code at compile time to implement different computation strategies. The best FP solution I’ve seen so far is ReasonML. The JS interior is close to seamless, and the resulting output is both intelligible and extremely efficient—something you might expect from languages like Haskell or Ocaml. So my recommendation is to use something like ReasonML or PureScript if you want real FP in your JS. Short of that, there is always Ramda or sanctu
Isn't it possible to just feed a lint file to your editor and it changes your code to the correct style?
&gt; I personally only want to work somewhere where new ideas are always encouraged. To be fair not all new ideas are good and even good ideas do not fit all projects. It's hard to "always encourage" new ideas in those cases.
&gt; It can't be a rule just because someone said it That's literally how most things are in programming. I'm happy you're questioning things; keep always doing it.
You won't do it. You'll forget. Unless you have a linter. &amp;#x200B; No matter what you\`re creating extra work
Again you're comparing a functional difference to a semantic one. There is no obvious downside, I'm quite convinced of it now by the responses I've received, to simply using backticks. Arrows fundementally change the code being executed. Ticks do not, at all.
No, I'm not a JS developer or expert. I suspect they don't. I suspect performance is identical, which is why if you run the above code over and over you'll see both backticks and quotes winning at least half of the time.
If you hate IE yeah lol
&gt;. I reworked your example and the tests are now running into the billions of cycles and showing there's no computational gain or loss in the simple string manipulation: &gt; &gt;https://jsperf.com/strings-vs-template-strings/3 Which is basically what I said (In that comment I'm a bit wrong, further down I have a correction to say what you said). There's absolutely no reason not to use the same string type. "Convention" makes no sense to me, because all it does is add mess and inconsistency with no benefit.
Right, but if commits aren't lint enforced, people will keep committing changes switching back and forth between various styles. White space is really painful with this, as people can commit lines that are just switching back and forth between tabs or spaces.
Good job man! Looks great, you should store those scores and/or player information in a database such as mySQL and then post those scores live so that in a way you have an interactive method for players to compete, sort of a pseudo-multiplayer way. I worked on a pong clone that did this and used updated physics from scratch with particle effects and had a blast doing it! :D
I disagree. Passing linting is mandatory to commit/push
I prefer tabs, but it's like tabs &gt; spaces &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mixed whitespace
Hello, a friendly reminder to my JavaScript friends developing frontend applications using .env values in their Axios calls using ES6 Template literals (i.e: backticks). Don't do that. For some reason, this: `${process.env.absoluteUrl}/project` is not a same as this: process.env.absoluteUrl + '/project' and definitely not the same as this: '/api/v0/project' For some weird reason, absolute URLs are behaving as a relative URLs and you will get a one day headache debugging this problem as me :) Enjoy
Yeah I don't care either way as long as it's consistent. But it's a fun debate anyway, I try to start it whenever possible
https://imgur.com/7aptWmt No thanks
.editorconfig files are great, too!
most of the people reading this don't know what "Strict mode" is and probably don't know what "interpolation" is either lol. So...yah...nice explanation though.
I never said every idea was a good one but to work on a team that makes you feel bad or stupid for brainstorming is clearly toxic. His idea might have been a bad one but a good idea comes out of hearing many bad ones first.
Also fair :)
**[Instead of typing it twice in one day](https://old.reddit.com/r/javascript/comments/c2tpwe/is_it_wrong_to_use_backticks_everywhere/ern09u2/)**
&gt; Give me one good reason to use inconsistent string types. If you can't or don't want to answer that that's fine. Honestly, I can't think of a single *good* reason. The only reason, and not a good one, would be that it looks weird to me because I like the look of a single-quote more; I think back ticks look funky. But that's just personal preference. So, you're right. It's a valid question.
Svelte marketing really confuses people. Svelte doesn't actually remove the runtime. Not really. Of course it schedules. Think of it as hyper-optimal Tree Shaking where you don't have to write the import statements yourself. Like I use Webpack with my React app to make my 200kb app.js. "Look no runtime just a 200kb file." No we know the runtime is in there. Svelte is no different it is just smaller. 8kb app.js has Svelte runtime pieces in it. It is built from simple primitives so it's pretty small. There are also really small Virtual DOM libraries. Check out attodom. Probably smaller than Svelte in most applications. So no the VDOM is not the only way to do this. It's just one model.
Lol. The conversation was about what is a common convention. AirBnB is very commonly used, whether or not you personally like it.
And normal strings don't need to be parsed?
Not having a convention isn't a common convention.
“Use single quotes except to avoid escaping” is absolutely a convention. One with built in ESLint rule support, and which is recommended by the AirBnB Style Guide, StandardJS, and the Google Style Guide. Once again, just because you personally don’t like something has nothing to do with whether or not it is a common convention.
Then you're choosing to mis-read the code. That's entirely within your right to do, but it won't fly in one of my teams. At some point in the future, it's also possible that it will be a maintenance nightmare. For example, if there was a performance regression or security vulnerability in template literals that required manual mitigation. The election then, to use them everywhere, even when not necessary, is a problem. Unlikely, yes, but it's an unnecessary risk with no upside.
The strategy fits perfect in our mammoth legacy system and our overhaul plans. Allowing us to quickly convert individual components to our new systems away from the Marionette system currently in a few places rather then rewriting the application from the ground up which would take much longer and could never get approval for. And let's be honest those sort of ground up rewrites rarely go well either. It also allows us to quickly experiment with new frameworks and system designs whilst being able to isolate them from the rest of the system fairly well. It's been a fairly big success in our large multinational systems so far.
As a Director, explaining to executive leadership why I unilaterally pulled support for 5% of our users—users that tend to convert higher and at a higher ROI than the cost to support it—might as well have me applying for unemployment. It’s not even remotely as easy as you make it sound, whether IE11 is a “compatibility solution” or not. Grandma doing her holiday shopping doesn’t exactly follow HN or the Edge Team from her Windows 7 machine.
You're 100% correct. The *only* difference is maybe pushing and popping a value to a vector when parsing, which doesn't even affect actual execution time. As far as the interpreter is concerned "normal" string literals, and template strings with no interpolation are completely indistinguishable. Just for fun (I looked into it last time this came up), [here's the exact line](https://github.com/v8/v8/blob/5cf2ae5a4d7224198a0474eb27cc618b6843bc32/src/parsing/parser.cc#L3496) where v8 just passes those template literals along as string literals.
I wasn’t disagreeing with you. Just making your point without muddying the water. The reason it matters is because the logging will take up way more computational power than the thing you’re measuring. If the log is 95% of the total computational power, then your measurement of the strings is meaningless. For instance, if you’re measuring the run time of a method you wouldn’t also measure the network time to call the method from an external source. I can’t really explain why console logging does introduce a good amount of variance, but if you sit and run it many times in a row you’ll find it bounces around a lot. Even a 5% variance in run time caused by the logs could be more than the computational time of the string manipulation itself.
&gt;if you use backticks on the use-strict pragma, it will look like you're in strict mode but it doesn't activate strict mode... super bad idea to confuse like that. &gt; &gt;backtick strings cannot be used (syntax error) in object-literal property names (and no, using \[ \] to compute it is not better, that's even more convoluted!). &gt; &gt;backtick strings cannot be used in the ES6 import statement for the module-specifier (also syntax error). That's because none of the things you described are strings. But, using backticks for all your strings comes with no cost, and I actually think it's better because it separates things that look like strings from things which are strings.
No, string literals in JavaScript are raw strings and don't need to be parsed. Template literals are interpolated. You can see Babel's implementation to get an idea of what the browser is doing. https://babeljs.io/docs/en/babel-plugin-transform-template-literals Even if you don't use `${}` inside your string, the compiler/runtime still has to scan for them.
Replied and deleted it because I was even confusing myself. Anyway, I wasn’t disagreeing with you. I was just reducing the tests to just testing the strings and not also console log. If 80% of the computational time is the console log, then it’s not a very good performance test of the strings, even if each test is calling the same logging. You can narrow the scope and keep the results truly string based to produce way more consistent results. In my experience, console logging produces way more inconsistent results from test to test and especially from browser to browser. So even if you’re getting consistency within a browser, you can’t accurately compare browsers then.
Messing with JavaScript at this level and others is what enables developers to experiment their way through understanding the language better and more deeply. If it stokes anyone else's curiosity like it did mine, I'm gonna keep it up.
These are absolutely legitimate concerns, but messing around like this only served to help me understand the language better. There's huge value in that.
I appreciate what you’re saying, but it would be nice to offer some thoughts on why this isn’t a great practice in production applications. Without that insight people who are learning will shoot themselves in the foot
Yeah, that sounds about right...
Hell NAAAH!! Bactick life fo lyyyfe - put that shit everywhere, fuckin love backticks (context: i like perl btw)
I've been programming for years, and I still have days like this. &amp;#x200B; It's alright - we've all started where you are. Repetition, practice and trying to understand the mistakes you make (usually comes much after day 1) are all part of the learning process. &amp;#x200B; Just remember to celebrate your small victories. Sure, you re-did something 20 times... but hopefully, you learned 1 or 2 things along the way, which is the important part!
Our team defers to AirBNB's ESLint config, which does limit it when not using variable interpolation. &amp;#x200B; Is there any harm? Not at all, especially if you are transpiling the code.
Hi /u/jeanmachuca, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Obviously but you're missing the point on purpose.
&gt; Svelte was an example of the perf increase when removing the virtual dom not of scheduling. It has nothing to do with virtual dom, he just showed that it is faster than React in one super flawed benchmark (created by Imba developers) and in a React demo that used [victory](https://github.com/FormidableLabs/victory/) components (this component library has a lot of userspace perf problems). In React demo he didn't even tried to produce the same DOM output, svelte implementation is using different SVG elements to draw charts, so it is most likely that the biggest perf increase in this demo has nothing to do with with switching to Svelte, it is how you implement charting components.
Congratulations!
The words I needed to hear, cheers
Yeah it sounds like Safari is messing up. As far as I know, while a top level `const` won't create a global variable on the global object, it's still in the global environment. And the module environment should be a direct child of global making those variables within scope. I guess for now what you can do is replace your uses of `const` with `var` so that those variables get thrown into the global object and are therefore accessible within your module.
&gt; Svelte is no different it is just smaller. Smaller on "hello world" demos. As soon as we start using conditional rendering, transclusion, dynamic lists and subscriptions, application will have roughly the same size as apps built with ~3KB(minigzipped) vdom libraries. It is more important how much code it produces when using different composition primitives, for example if you take a look [conditional rendering](https://svelte.dev/examples#if-blocks), you'll see that it generates an insane amount of code, so its size overhead will grow really fast in a big application.
:D
Can you explain to us what is the "new way of thinking"..? What parts of the language are you having problems with. I code in JavaScript and it's almost never the error causing me headaches but rather bad code by other developers or logical problems I have to solve.
I’m not a logical person
You're doing fine, just make sure to transition from sucking at remembering the basics to sucking at building a project.
&amp;#x200B; Good catch. I’m a bit fuzzy because it’s been a while, but I’m pretty sure you can store the correct context within a closure inside the method you intend to pass as an argument. Just create a variable (conventionally called \`that\` or \`self\` or \`\_this\`), and have all the internal operations of the method refer to that variable. Alternatively, you could bind all the methods inside the object’s constructor (if using a class). If you don’t own the object, you can always extend it like so: \`\`\` class NotMyObject { constructor() {} inheritedMethod() { console.log(this); } }; const notMyObject = new NotMyObject(); &amp;#x200B; // assuming we don't know the constructor name... class MyObject extends notMyObject.constructor { constructor(...args) { super(...args); this.myMethod = this.myMethod.bind(this); this.inheritedMethod = this.inheritedMethod.bind(this); } myMethod() { console.log(this); } // MyObject instance /\* inheritedMethod() { console.log(this); } // MyObject instance \*/ } \`\`\` You can also do something similar with plain old JavaScript objects: \`\`\` let notMyObject = { method: function() { console.log(this); } }; &amp;#x200B; function bindMethods(obj) { const keys = Object.keys(obj); for (let i = 0; i &lt; keys.length; ++i) { const key = keys\[i\]; if (typeof obj\[key\] === "function") { console.log(i, key); obj\[key\] = obj\[key\].bind(obj); } } return obj; } &amp;#x200B; console.log(notMyObject.method); // '\[Function: method\]' bindMethods(notMyObject.method); console.log(notMyObject.method); // '\[Function: bound method\]' \`\`\` &amp;#x200B; So, those are just a couple of options to programmatically bind your object methods prior to using them, so you don't have to inline those \`bind\` calls every time, *without requiring you to edit to the source code* that generated the object.
Cool project! Haxball is a great time killer.
Just use prettier with husky and lint- staged on the precommit hook. Set your eslint rules on top of prettier's sensible defaults and never think about it again.
tldr; it's a pain in the ass. But it's not as bad as Date() in java
Great! Even more now that handsontable isn't free.
I've personally found a happy medium where, in addition to interpolated and multiline strings, I tend to use them anytime I'm writing any sort of message in English, simply due to the chance that it might contain `'` or `"` (in order to avoid escaping or changing delimiters).
Autoformat the while project at once. So much nicer than gradual. Makes pull requests easier to see what changes were made going forward. Yes I could hope people did a formatting commit and 5hen look at the non formatting commits but what a pain in the butt. The one thing with this approach is you do pretty much wipe out commit history. Depends how important that is for you
Yes this completely. I really like Svelte's approach and am a strong proponent of the reactive programming including Rich's vision of compilers and the future of UI. But the marketing, explanations of how things work, and benchmarks are all worthless. I will give it this, it's no more egregious than the marketing around React's release. But it's infuriating since Svelte does good things it shouldn't have resort to fomo. I tried to get an implementation into the Imba benchmark last fall, and submitted an issue to change things to be friendly to libraries that aren't Imba but the author pretty much acknowledges that the benchmark is useless in any remotely useful or meaningful way. In fact it's impossible to implement the benchmark properly in a Reactive library where nested data is mutable. Someone submitted Glimmer which demolished the benchmark until I pointed out that it circumvented the whole test and half the work wasn't even being measured. Svelte would have taken the same tact. On top of that React implementation isn't close to optimized. These are known issues in the github repo, in the open issues. Choosing this benchmark to promote your library is suspect. Unless it's supposed to be like an inside joke. references: [https://github.com/somebee/dom-reconciler-bench/issues/5](https://github.com/somebee/dom-reconciler-bench/issues/5) [https://github.com/somebee/dom-reconciler-bench/issues/7](https://github.com/somebee/dom-reconciler-bench/issues/7)
Nice work. 👍
Code review with a nice diff can help prevent this.
Maybe I'm just a perfectionist, but I always try to get rid of red squiggle underlines even when optional. It's a sign that the code is bad, and professional engineers should to always make the code better than they started with.
Roger that. I’m definitely going into this with the mindset of this being a hobby. When I started web dev in community college, I took it too serious, especially with my lack of experience and when I didn’t get direct results I quit. 3 years later I’ve decided to get back on the horse. I’m taking a different approach but JavaScript is a different animal from what I remembered.
JSDoc is basically a format for writing docs that is very similar to javadoc. Then you have a documentation generator which and things like \`typedoc\` for typescript and \`documentation\` for js are pretty good. For the \`documentation\` module we have some script that generates the documentation for a small module right into the project's own README. I haven't found a comparable thing for \`typedoc\` and found if I tried to write into the projects own readme it completely rm -rf'd my entire project directory but that's now fixed... [https://github.com/tgreyuk/typedoc-plugin-markdown/issues/53](https://github.com/tgreyuk/typedoc-plugin-markdown/issues/53)
Ouch. Supporting IE11, e.g. ES5...is basically the limits of my/our tolerance at the moment
https://stackoverflow.com/q/5129386/8037425
Thank you 😊
Is teaching programming part of your job or just something you like to do?
Yeah that makes sense.
Great work, but you should probably change the name. Microsoft owns the trademark to "Excel" and while they can't stop you from making the tool, nor do they care, they can absolutely make you change the name. Especially because it is being used in the context of a spreadsheet-like tool. They will claim that it is confusing to consumers, blah, blah. But in the end, they will have the law on their side.
That was just an example. Svelte beats React in every possible metric. Inferno is still faster than Svelte in some benchmarks, but Solid which doesn’t use a virtual dom is one of the fastest. https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html
To understand numbers in this benchmark you need to understand the differences between implementations, this benchmark has basic requirements so the best possible way to win in this benchmark is to optimize towards basic DOM primitives, but as soon as we start adding different composition primitives to this implementations we will see slightly different numbers\[1\]. So in a componentless applications, Solid will be definitely faster, but I don't care about such use cases, to me it is more important how it performs when application is decomposed into many components and I don't like how Solid scales even with such low ratio of dynamic data bindings. &amp;#x200B; 1. [https://localvoid.github.io/js-framework-benchmark/webdriver-ts-results/table.html](https://localvoid.github.io/js-framework-benchmark/webdriver-ts-results/table.html)
I really wish it supported microseconds, seeing postgres and MySQL do.
If it isn't obvious localvoid is the author of ivi. This is the original test I mentioned that inspired the article. They basically start in the same place, but in this one he normalizes implementations in 1 by removing any directives/techniques that optimize performance where I did the opposite and kept them in all tests. 2 is essentially my level 1 and level 2 in my article is roughly equally to 3 in that test from inclusion of component standpoint. In addition as he adds components he makes the bindings dynamic even if the values never have the potential of updating. In that sense he keeps all things equal. I do think ivi-4, solid-4 is worth pointing out. Solid's a bit out there because of the de-optimizations but it definitely is a tipping point where real cost comes in. It's just unfortunate since the benchmark never does partial update on that condition which is where reactive libraries tend to out perform virtual dom libraries. It is important to understand what this is illustrating and to understand the cost of initial rendering of 1000's of dynamic bindings being heavier than virtual dom equivalent. However, to me including this scenario without including the actual use of the dynamic binding limits the comparison. It's like if the JS Frameworks Benchmark just skipped test #3 and #4 (partial update and select row) in the results but you still needed to code it to support. The only other take away I suppose is how little the difference in code is between the implementations in both tests for Solid. Which I suppose you could take one of 2 ways. Either Solid is really easy to miss something and accidentally de-optimize, or look how easy it is to take something and optimize it to the extreme.
If J means Jquery he should change the name since the latest version has been rewrite in vanilla.
I'd say it's part of every software engineer's job to learn and to teach each other. It's also something I find very rewarding.
Of course I have a linter which does that and much more for me. It's exactly zero extra work.
This tool is incredible easy to use! I made the QCObjects implementation in just a few minutes. Here is the demo code! https://github.com/QuickCorp/QCObjects-JExcel-Demo
\&gt; Component boundaries do not mean more dynamic bindings. &amp;#x200B; Can you show me a set of reusable components implemented with Solid that doesn't require dynamic bindings? To solve this problem you'll need to add whole program optimization and inlining, facebook tried to solve it with prepack, but it is extremely complicated problem and it has downsides because it will increase code size and it is most likely not worth it.
It is more like a data grid than a spreadsheet or excel but it is useful anyway
Yes it's beneficial for consolidating your learning. I just meant was it something you're paid to do or something you just do because you want to.
True, whenever I have to work with Date in JS I just straight up go and use Moment.js, It's just not worth the hassle.
I haven't written it. But it isn't hard to imagine. Maybe I can find an old KnockoutJS Component library. In a similar way binding an event handler doesn't need to be dynamic. You just pass a function that gets bound on creation. No additional reactive computation needed. The value inside changes but the function doesn't. If you pass observable rather than bind the value, you don't need to resolve it in a computation until its final DOM binding. But that is the case Component or not. The "Component" is a function that executes once, there is no need to bind to it. Solid and Surplus don't have real Components. Surplus has no equivalent to dynamic binding Components, it always passes functions. I added it since its nicer syntax with my state proxies and in so more comfortable fir React devs. In the end you end up with a mostly flat graph. My push for compiler optimization and inlining is mostly to streamline template cloning and uncertainty whether adjacent nodes are dynamic (perhaps loaded async) or not. More Components break apart templates and separate modules prevent analysis. Which is unfortunate since while dynamic components are possible they are usually just lazy loaded ones. And might not even be that common (pretty much nonexistent in benchmarks). I haven't yet resorted to inferno like hint attributes. The other reason is my non-proxy implementations are even faster but since Components mean nothing in Solid I have no clear boundaries. Using Svelte like techniques would cause the overhead you are thinking about and Id like to have my cake and eat it too. If I could optimize further I might be able to smartly determine when to pass function or bind value and compile the proxies out allowing a React useState like API with primitive values and not necessarilly the need for state objects.
&gt; I haven't written it. But it isn't hard to imagine. Can you show me this component[1] without dynamic binding that will change class name when `preload` value is changed? https://github.com/ryansolid/js-framework-benchmark/blob/62acc6bc697eb4f7663990954924ab7779d0b08c/frameworks/keyed/solid-2/src/main.jsx#L25
From my experience, its better to enable all rules and incrementally fix files. Your approcach didnt work for us.
Good luck enforcing that outside of America. Heck, maybe it won't even work in America due to the "j" infront of the name, changing the entire name.
Is this close enough? My point is 1 &amp; 2 have the same number of dynamic bindings (1). The component added the overhead of a function wrapper(avoidable if I used createSignal instead of createState) and the one time function call. More importantly it splits us the template so there are 2 cloneNode calls now instead of 1. &amp;#x200B; [https://codesandbox.io/s/solid-component-function-wdlwb](https://codesandbox.io/s/solid-component-function-wdlwb)
But you've added dynamic bindings to the component. My point is that when you create reusable components you can't make any assumptions that its input properties won't change and you'll need to use a lot of dynamic bindings, for example when you create a button component with \`disabled\` property, it is obviously will be used in a dynamic binding, even if in the most use cases it will have a static value, so what is the point of testing components performance if you don't even use dynamic bindings.
Your first problem is where you declare your now variable, if you put it before your setInterval function declaration the variable won't be recreated on each iteration.
It will click soon so keep working
Thanks man, messaged.
I definitely agree the backticks are weird and I wouldn't like to be using them. I'd be annoyed if my language used the for strings (heck for just about anything, except maybe stringified method names in tests)
Your work both demo and node package is not accessible.
Define a code style and stick to it. Doesn't matter if it is `, ', or ". Just be consistent.
GitHub is hosted in America
You need to declare "var hourLater = new Date().getTime() + (60\*60\*1000);" before the timer, also put interval of 1000ms on your timer, you don't need it to run every 0 seconds
I want the timer to start when click the button associated with start() function. How will the timer get me my accurate result if I keep the var hourLater outside the function.
With all due respect, I don't care about what flies in your teams. And the example you are giving is frankly risible
Are you more of a visual thinker? I'm fairly new to programming too (I'm 14 weeks in and counting); and for me it really helped to draw things out every now and then. :-)
Not outside, just before setTimeout, if you put it inside it gets new value with every timer tick and that's why your seconds are always 0
Not outside, just before setInterval, if you put it inside it gets new value with every timer tick and that's why your seconds are always 0
you are wrong, 'now' should be in the timer, hourLater should be outside of the timer scope
Yes! \`MomentJS\` is constant JS Date-Time Library
Try using the syntax given in this MDN example: [https://developer.mozilla.org/en-US/docs/Web/API/Response#Examples](https://developer.mozilla.org/en-US/docs/Web/API/Response#Examples) The table says it's compatible with Edge.
So, some context I've done this and is incredibly complex and imo has a few scenarios where it's suited. In the company I worked for I think it was the best thing we ever did .. business was extremely satisfied with it. https://imgur.com/a/dhDtNFt Not sure how well I did in creating this graph. One cool thing about this is, API's + FE's never really concerned themselves with security .. the auth gateway took over all that. API's would only need to occasionally do some role based checks, but NodeJS Containers had nothing of sorts. I did a presentation at a local conference on the whole process/infrastructure but I can't find the slides :/. Might be worth a medium post but I suck at writing :)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/y3fJzlJ.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20erpb9e6)
j means javascript ;)
Waaay too long.
Hi /u/Reddit_Aadya, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Also, the trick to 'sharing' is Std/Common libs. - lib for analytics ( GTM wrapper - already baked in to most things ) you rarely needed to add custom events - lib for passing data (very rarely needed) in between MicroFE's - either local or session storage - design system - you cannot do it without IMO - not performant at least - std component library ( form elements, headers, fonts .. pretty much everything ) - std api layer lib ( in our case GraphQL) - with models lib as well - standard SSR implementation provided as abstraction
You need to put hourLater before setInterval. So that the hourlater time is fixed and now is the latest time which then gives you the proper difference. Here is the code: function start() { var hourLater = new Date().getTime() + (60*60*1000); var x =setInterval(function() { var now = new Date().getTime(); var distance = hourLater - now; var hours = Math.floor((distance%(1000*60*60*24))/(1000*60*60)); var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)); var seconds = Math.floor((distance % (1000 * 60)) / 1000); document.getElementById('timer').innerHTML = hours+'h'+minutes+'mins'+seconds+'secs'; }, 1000) } And put that 1000 interval time. So that it runs every second.
Looks very nice. If it can it handle large data sets without becoming too slow, and freeze columns / rows it will be a mega-hit.
Is that "Access Denied" error the complete error message? Does the network request succeeded in the first place? Or does the server returns a failure response?
Hi /u/liashchynskyi, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Neat-o! You mentioned adding multiplayer, what other features were you planning on adding? Are you looking for contributors? What drew you to p5.js? What are you using for collision detection? I see .setCollider and .colide( ...) but I can't find any physics code in your repo. Overall it seems like a decent wireframe.
In your case, are your mikrofrontends really a set of separate / independent applications, or just components that are plugged in during render time?
How long we talking?
Use LocalDate (and LocalDateTime) in Java 8 and beyond
Glad you like it :-) Features - I was thinking of adding something to make the gameplay more unique and less boring, like sprinting or random "boosts" on the map that you need to hit with the ball to activate (for example a speed boost, freeze one random enemy, make enemy's gate bigger etc) Contributors - yes, I'd be happy to see other people contribute their ideas, that's why the project is open source after all :) If you want to chat more about it feel free to add me on discord - cal1fxrniaaa#2260 Why p5.js? I was somewhat familiar with it because we used to code simple sketches in school using it, and its not very complicated so it seemed like a good start. I didn't like other js game frameworks because they seem to over-complicate alot of things. As for collision, I'm using the [p5.play](https://p5.play) extension, and the .setCollider() and .collide() functions are exactly from there
they are separate applications, the std lib is only base components, but the actual 'business' components are implemented per app
J means Java :-P
jsGrid? :)
I think at least till there will be any other language that will allow to do both front-end and back-end on it. + should be faster than js
I was only 50% of the way through the survey before I gave up.
I was talking about how long the survey was.
Actually, core js shim has helped us almost every case, and with Babel it is not hard to cover IE8 except a few cases.
Unless you're doing something specific with Moment, I'd recommend [Day.js](https://github.com/iamkun/dayjs) instead. _Much_ lighter and in my experience feature comparable enough.
We've too tried this before and failed, but I would still willing to consider it as a solution though in the future. I think our mistakes with this approach were: * Our app wasn't big enough for this to worth it. \*personal opinion\* From reading through the comments ("Is this a joke?", "that would never work") I suspect what's happening is people assuming this is a good fit for their product, cause their codebase is big, but there is a difference between big and OMG WTF BIG. I suspect this approach might work better for the later. * We didn't have strict design guidelines. I can imagine, if you have everything style related in SASS or LESS variables, that you just use this might work. Unfortunately I've never worked at a company who did that. Mostly the UX designers were just drawing in Photosohop / Sketch, and gave us pictures to implement however we see fit. * We had our common components in a npm package, to be able to re-use them inside several teams. Always deploying that package, and working with two node projects at the same time was a pain in the ass. Something like Lerna could be a solution for that, it just didn't exist back then.
&gt; They will claim that it is confusing to consumers, blah, blah And, in this instance, they'd be entirely correct. Just look how many people think JavaScript has some relation to Java. Patent and copyright law are both highly abused and in dire need of updating for the modern world, but for the most part trademarks work as intended.
Great points Kyle! (amazing JS lessons btw!), especially about the object literal syntax. I feel like using template literals everywhere would also take away from the semantic meaning of it. If I saw backticks for a single line string and with no interpolation, I would for sure double and triple check, and think I'm missing something. &amp;#x200B; Also +1 for the promoting the proper use of semicolons. :D
Sure, but they can still contain escape sequences and such that need to be processed. I don't really why the browser should have to do more work to parse a template string literal without interpolated bits over a regular string literal.
oops :)
You can save and finish later. You're halfway to finishing and you might win something really cool.
I actually stopped because I was using the reddit mobile app and accidentally swiped back to here and there was no way to continue from where I was and I'm not going through that again.
Now that BigInt is a thing, microseconds are technically possible to implement.
Sounds like Javascript is the right language for you then. :) Source: C# coder learning Javascript. More seriously, it's a mind warp. The fact that you can define functions within functions and make these anonymous within those functions makes me want to stand up and scream, "BLASPHEMER!"
Thanks it worked.
It's about 35-minutes long, but it's worth it [https://www.developereconomics.net/](https://www.developereconomics.net/)
thanks, will take a look
I said layman's terms for a reason, and the terms used on stack overflow aren't layman's terms. The answers on stack overflow are for professional and enthusiast programmers, not laymen. I already looked on stack overflow and still don't understand, hence why I looked elsewhere.
Thank you for trying to explaining to explain it to me, but I don't know where the dataset array is. Its for a college assignment (I suppose it would be same level as high school if you use the US style of education system). I only know the basics of HTML and no javascript, and not much about programming data structures and stuff, so I thought I'd ask somewhere where people who knew about this stuff could explain it to me, but its been pointed out that I need to go to /LearnJavascript so thank you for your helpfulness :)
Hi /u/highres90, this post was removed. _"It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account." - Confucius_ * If you advertise or promote a paid product or service, or a site which you would in some way benefit financially, then please [buy a sponsored link](http://www.reddit.com/advertising). * It's ok to promote your own projects or content, as long as that's not all you do. See ["What constitutes spam?"](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) for more information. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ismailkhuz16, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/chovy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Darngoodfella, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hemantcompiler, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MonojitSarkar, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/c0deftw, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/habesojamilchmitdass, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/experiencenext, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; this benchmark has basic requirements so the best possible way to win in this benchmark is to optimize towards basic DOM primitives Ok. And what about this? https://www.freecodecamp.org/news/a-realworld-comparison-of-front-end-frameworks-with-benchmarks-2019-update-4be0d3c78075/ These are real world results, not synthetic benchmarks. Neither Solid nor ivi are there though, but Svelte is.
&gt;It's perfectly fine to be a redditor with a website, it's not okay to be a website with a reddit account I a person who wrote a blog post to help people learn tdd... wtf
Also the irony that GitHub is also owned by Microsoft.
How did phpExcel last so long then?
It's behind a paywall, so helping people to learn obviously wasn't your first objective.
Because PHP.
Theoretically yes, that will happen as the application gets larger, but it has to become *really* big to become a problem. See this comparison of a medium-sized real world project: https://imgur.com/RdeK2Sn [Source](https://www.freecodecamp.org/news/a-realworld-comparison-of-front-end-frameworks-with-benchmarks-2019-update-4be0d3c78075/) Once you start building a cathedral you will have to implement something like webpack chunks anyway.
Hey, I'm back for an update. How is that code going so far? Has there been any more interesting changes?
This is seriously great work, thank you for sharing.
&gt; another language &gt; the language &gt; the new language I'm on the edge of my seat. What is the name of "the language"?
Java! Should have mentioned! Sorry!
If I'm not mistaken Chrome has developer mode for testing plugins. It ignores the hash and runs it anyways. But I haven't played around with it in months so I may be wrong.
Medium has a high number of free reads before users have to pay to read posts...
You could tell your boss/co-workers that you need time to actually learn the language and to be patient with you. Regarding your co-worker losing his temper, tell him you're expecting a certain level of professional behavior. Basically, stand your ground and address your issues to them. If they continue to bully you, start looking for a new job.
For discussion of code, projects, and news: but we draw the line at language specification? I'm not asking for help that's not what I needed. I'm asking a question about the language.
What you're saying is teachers shouldn't be renumerated when there is opportunity to provide that in a fair way... 👎
Just another benchmark that doesn't bother to get into details, even DOM output isn't consistent between different implementations: - [Vue](https://vue-vuex-realworld.netlify.com/#/articles/darius-here-trying-out-conduit-jk06dq) - [Svelte](https://svelte-realworld.now.sh/article/darius-here-trying-out-conduit-jk06dq) Some implementations are using external libraries like `useragent` to perform network requests and some implementations just use fetch and save ~6kb minigzipped. I highly doubt that any framework author is using this numbers to make any decisions, it is used for marketing purposes.
Yea, but sadly it disables them automatically when you close the browser...
I agree that's extremely unprofessional behaviour and u/ottersforever you should not feel useless just because one of your coworkers is being a jerk, that's on him. Also its really common to feel like you "don't know what you're doing" in software dev so don't feel bad about that either, there's so many things to learn and you're just starting out so don't let it discourage you, just keep learning and doing your best and it will get easier.
How exactly does your coworker lose their temper? Is QA supposed to give you feedback about your code or just tell you if it works or not?
I would focus on getting help debugging/troubleshooting issues while making sure to tell them “I thought it was this but it’s working, etc.” Show that you’re trying but not quite getting it. That may be the cause of some of their frustration. They may have forgotten how what they now consider “second nature” or “common sense” came about through struggle and experience as a junior. Or they’re a dick. As long as you show that you’re trying, eager to learn, growing, etc. you should be ok. Also, one last thing is to ask for help in the least intrusive manner possible, maybe send an im asking for them to come see you when they have a break, don’t talk to them when they’re wearing headphones, etc.
thank you for responding. i have been following this link, but I hit the same error I mention in the post ("Access Denied") you can read about similar experiences at [https://stackoverflow.com/questions/32217537/windows-edge-and-opening-a-blob-url](https://stackoverflow.com/questions/32217537/windows-edge-and-opening-a-blob-url) but the solution mentioned there will not work for me, as I do not want to "SaveOrOpen" the file, i want to display it in the browser and want to set "data" field on an object element.
 thank you for responding. network request does complete (i can see http 200 in the network tab of developer tools for the fetch) "Access Denied" is the complete error message. You can read about similar experiences below [https://stackoverflow.com/questions/32217537/windows-edge-and-opening-a-blob-url](https://stackoverflow.com/questions/32217537/windows-edge-and-opening-a-blob-url) but the solution mentioned there will not work for me, as I do not want to "SaveOrOpen" the file, i want to display it in the browser and want to set "data" field on an object element.
One thing I've come to learn over the years is that, even with the developers I like and respect, there's always this really big difference from one developer to another in terms of how they respond to being asked for help (or for a second opinion, or just when you want to show them something cool/interesting). Some developers will get excited about the prospect of helping someone, learning with/from someone. Some are pretty neutral, they'll come when they've finished the thing they're working on because they don't want to lose their flow. With some, it's like pulling teeth. Even if you can't physically, you can effectively hear the tired sigh when you ask them for help or their thoughts. Or at least, it can really appear that way from the outside. There also are definitely a bunch of people with preconceived notions about female developers. None of that is your fault. So long as, when you don't know something, you try/google for a reasonable period of time and then ask politely. You're doing exactly what can reasonably be expected from a junior developer (that's not a dig at you or any junior developer out there). Try engage with different colleagues and find out which are better at helping. It's certainly not always the most senior developer. If your entire work-place consists of people who it's really hard to get help from; consider trying to look somewhere else. Not everywhere will be like that (though it's entirely possible to get unlucky a few subsequent times).
It's Java for anyone wondering, OP replied below.
angular projet?
That's definitely a good bit different from Javascript, and if you're not familiar with any other Object Oriented languages you'll likely have some learning ahead. Do you perhaps have any experience with Typescript? Some of that knowledge would certainly be applicable to Java. On the upside though. Java is used an absolutely enormous amount. Meaning that most problems have been asked a thousand times, and google will generally do a good job finding you the answers.
My org is stillll on 7. FML
Most of the times, the QA files bugs that are not even bugs. Also, for some reason is a person in position of making designing decisions..
&gt; 2) Back-ticks are going to be handled at run time by the templating engine at the expense of time. Rubbish. Practically everyone has Babel in their build-pipe. Also anyone who has trouble understanding that a template-string in fact works perfectly fine without interpolation probably shouldn't be touching any code.
&gt; even DOM output isn't consistent between different implementations That's technically true, but I doubt ultimate precision is the end goal here but rather getting in the ballpark. If you have a better example of comparing real apps (not hello world) with different libraries I'm all ears.
But what if a security vulnerability pops up with single quotes? Oh my god we could all be screwed! PS. if such a thing happened, transpiling it would be really, really easy. PPS. Your argument is really dumb.
I've been in similar positions several times. Businesses are frequently toxic and dysfunctional and it looks like you've found yourself in a typical example of unprofessional culture. I'd love to tell you the secret to fixing this, but I've never discovered it. The best solution is to find a new job, but when you are in an abusive situation it's hard to put in the time and energy needed for a successful job search on top of the effort it takes to deal with your current position (especially since you are a junior.) I've seen it happen to juniors frequently as most organizations simply don't know how to mentor. If you are going to try and makes this work, one strategy I've found is to find an ally or two on the ground level - people in similar positions as yourself. They might provide some good advice for coping and may, at least, be sympathetic ears. This is easier to say than do, but try not to let it affect you too much. Don't let them see you cry or lose your temper. Yes, you may end up getting fired. I see it happen often to good people. I've been terminated more than once by incompetent and toxic companies, but it did not end my career. You will probably need a few bad gigs to improve your resume enough to get a better job. Junior gigs can be trials by fire. You are paying your dues right now, but if you do the best you can and stick with it, one day memories of this situation will help you appreciate how far you've gone.
I'm a senior software engineer and get thrown into things that are new and often overwhelming at first. The trick is to stay positive, communicate and do what you can do. Often getting help is what you can do. As for your bosses issues.. I don't really know, sorry. What language is it?
This may be an unpopular opinion, but I don't feel that anyone in development should expect to be trained on the job. While it would be nice if we were all given the opportunity to be trained on company time, that is often not the case and it will benefit your career if you take the extra time to learn and train yourself. A curious mind and a can do attitude will take you far! I advise you make the best of your situation and learn as much as you can. Your resume will thank you later. As far as the situation with what I'm reading as not being hospitable to junior devs or females, even if someone has a problem with you it's very difficult to argue with sound logic. If you made the case for better QA by taking the time to document the issue and present it to leadership professionally, you could get some traction and help solve the problem. Whether this would make the specific workplace more hospitable to you I don't know, but I've witnessed change coming about as a result of professionalism and reason, and it's glorious.
Java is just enough similar to JavaScript to trip learners up (and vice versa, I once interviewed for a JS job at a mostly Java shop and had to explain that my solution worked the way it did, and not the Java-y way the interviewer suggested because JavaScript !== Java!) To OP: I would suggest that much of the basic principles of Java are quite easy to pick up, but it’s learning all the APIs that is the real learning curve. Also, Java tends to support certain patterns of engineering structure (I’d argue over-engineering!) which JS does less, although things like Redux are more in that direction. I’d suggest finding a good book on Java engineering patterns.
I learn the new language on my own (had to do that with JavaScript). Java is a relatively clean language, which should make it fairly easy to learn the fundamentals. You already know software development well enough with your existing portfolio. Don't give up.
nice ;)
&gt; If you have a better example of comparing real apps (not hello world) with different libraries I'm all ears. It is highly unlikely that there will be a good "real app" benchmark, we couldn't even agree in js-framework-benchmark if it is acceptable to abuse such techniques[1][2] to get better numbers :) Some "real apps" can stream changesets from the backend to make sure that their reactive libraries could perform updates efficiently without any diffing, some "real apps" just send data snapshots, there are so many details that can have a noticeable impact on the results. It isn't worth to waste time on such benchmarks, as a framework author I am more interested in detailed benchmarks that I can use to observe performance of specific code paths in my library. 1. https://github.com/krausest/js-framework-benchmark/blob/6b496de5b8623b2843edcac5fa4f1908cea7022f/frameworks/keyed/surplus/src/view.tsx#L42 2. https://github.com/krausest/js-framework-benchmark/blob/6b496de5b8623b2843edcac5fa4f1908cea7022f/frameworks/keyed/surplus/src/view.tsx#L41
How does a fresh grad not know Java?
The best time to get hired is when you already have a job. When I first started I couldn't get hired for a year, but then once I got hired I got my second job a year later with my very first . Of course, try to make things work at your current job, but if they don't just be glad this industry is in desperate need of engineers, which means there are plenty of opportunities elsewhere. And of course while it doesn't look great to leave after half a year ... if you just say "I had a male co-worker who was very difficult to work with", don't go further and don't badmouth your company any further, it absolutely shouldn't stop you.
I think this is a good exercise and I am working on an implementation for Solid currently. It's just unfortunate it only measures one thing, bundle size. I like the LOCs measurement as it gives some clue into Developer experience. But Bundle size and TTI are pretty related and once you get into a certain range (ie you aren't Angular or React) the differences are minimal. Unfortunately it would be hard to performance benchmark this in a meaningful way. Right now JS Frameworks Benchmark is the best semi-realish test although it is still completely contrived. And for synthetics localvoid's UIBench is where you want to be. UIBench is particularly more difficult for libraries like Svelte or Solid. But that's sort of the point. But we are talking from the perspective of library implementors. The real takeaway I suppose are all benchmarks are tainted. Use what has good DX. In which case RealWorld Demo is really quite nice. Just take any performance indicators there with a grain of salt.
"There are hundreds of timezones in our world. In JavaScript, we only care about two" Well fuck me for having a node server with timezone-specific business logic, right?
Yes, it might work in America, but unlikely abroad. I've worked at companies that have had similar law suits in Europe and won.
Can I Ask what's is your use case for it?
True. I think there is probably something in the middle here. See Solid (well S.js) detects when computations do not wrap over dynamic signals. In that case I cache the last computation, and reuse it when the next one comes along. Basically we take the hit for creating the computation, and if it isn't necessary we recycle it. I haven't benched the performance there yet which I should do (it's still new not even on the version of S.js released to npm). It means though that it's important that in like your Benchmark example even if you wanted to make the Cell children dynamic, do not dynamically wrap something like [row.id](https://row.id) on the props of the Component since it will never update (and the caller knows that). The Cell Component while having dynamic children will detect that '1' isnt dynamic and recycle the computation and reuse it when it creates the next computation on row.label. I mean for that matter the Cell for Solid in yours isn't quite right since if props are dynamic you can't use a function rest/destructure. You need put props.children inside the {( )} since the accessor triggers on property access. In any case seems like measuring this should be one of my next priorities.
My guess would be a 3 month bootcamp grad. Also might be part of why OP's feeling this way about their coworkers and why they think QA is "reporting things that aren't bugs".
&gt; QA files bugs that are not even bugs Can you give an example of bugs QA found that don't think are bugs? Also, why do you have so little respect for QA?
Hi /u/aminsena, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
\`rm -rf .git\` in the root directory will remove all references to git from your project. Use wisely
I mentioned that I only know JS.. There is no reason for you being such uptight...
I don’t have a little respect of QAing at all! Don’t know how u figured that out.
This guy gets it
Sure, I need to organize and separate events based on the day they occur with respect to a certain time zone. Events that start on 11:59 New York time go in a different pile from ones that occur two minutes later. At its core, the problem is that I need to be able to find 12 midnight for an arbitrary time zone, with DST taken into account. Right now I'm string parsing the output of toLocaleDateString which sucks.
A big part about being a dev is getting thrown into situations where you are not knowledgeable about a topic, and making yourself so. Don’t be to hard on yourself about not having all the knowledge. It’s okay. Instead focus on getting there. It may take time, and some studying outside of work hours but, this situation could very well turn into a great and positive learning experience. Most junior devs I’ve worked with got thrown on projects with languages, frameworks, designs, etc. they didn’t understand. You learn as you go, and do the best you can to your ability. In a few months you’ll be surprised at how far you’ve come.
Any job where you're unfamiliar with the language, and this is known by all parties before being hired, should provide you time and resources to learn it. This may come in the form of tickets that can serve as introductions to the stack and setup. This should be particularly obvious to your employer as you're a junior dev. Besides the fact that it's in the company's best interest for you to understand the technology before contributing, they should be investing in *you* and your professional growth. You can mention this to your boss, diplomatically. &amp;#x200B; Your coworker sounds like a baby and I'd ask him to behave more professionally and if it continues speak with your boss and if that fails then speak with HR
Hope my words can help you today. &amp;#x200B; First of all, I want you to know that you're not alone and your situation is not that unusual. Most of us have worked through difficult periods and struggled with some of the challenging emotions that go along with them. It's normal, even though it's not pleasant, and you'll get through it. &amp;#x200B; Second, it's ok to ask for help. It's more than just ok, it's good and it's expected, and you should do it early and often. Apply "the 15 minute rule" though, which is just the simple guideline of making sure you spend at least a full 15 minutes yourself earnestly trying to find an answer to a question before you ask for help on that specific question. That way, when you do ask for help, you'll be able to talk through the problem in more practical terms instead of just saying "help I'm confused what do?" &amp;#x200B; Third, your coworker with the temper problem is not your fault and not your responsibility. Some people are just not that easy to work with and it sucks that you have to deal with a guy like that. If you are able to, it might make sense to have a confidential conversation with your manager about how it's difficult to work with him. Don't need to trash talk or ask for pity. Just calmly explain the situation and ask for advice, or ask to be given opportunities to work with other people. &amp;#x200B; Fourth, being a young woman in a space with mostly older men can be challenging but I want you to know that you have SOOOOOO much support from the broader community here. We're really glad you're here and if you ever want to talk about it there are lots of us (men and women both) who are happy to listen. Stick with it! &amp;#x200B; Fifth, learning new technologies is a part of this job at all levels of experience. I've got 9 years of experience and I'm still learning new things every day and feeling like I'm a hopeless idiot while I'm climbing a learning curve. The feeling never goes away, but with experience you get used to working through it anyway. You'll get it. Don't feel discouraged. Climbing learning curves is hard but necessary in this line of work. They hired you with full awareness that you're on a learning curve. They know it takes time to learn. Don't feel like you're failing because you're learning. Just focus on learning. You're doing it right. &amp;#x200B; Sixth, it's ok to talk to your manager about your workload. It's good to do this proactively actually. If you're being assigned more work than you can do in the allotted time then it's not helping anyone and is causing you anxiety and causing your manager to misallocate resources. Don't be embarrassed or feel inadequate because you didn't get done everything they assigned. Instead, talk to your manager about where you're at in terms of your learning process and your capacity to handle tickets. Getting more accurate estimates of your capacity is in everyone's best interests and you need to talk about this in order to reach a resolution. It might be an uncomfortable conversation, but if your manager is competent, they'll be glad to have it with you and it should lead to improvements. &amp;#x200B; Finally, it's a really good idea to proactively ask for feedback. Being more proactive about communication is a VERY valuable skill in business in general and I recommend cultivating it. It's hard. It will require you to step out of your comfort zone a bit. It's worth it. You got this.
Use the JodaTime library then
If a person is hired for a job where they don't know the tech stack, and this is understood and accepted by both the employer and employee before the hiring, they should absolutely provide time for the dev to get up to speed. Especially if it's a junior dev.
This. Employment is a two-way street, and it sounds like this employer knew they were hiring someone who might need some additional training. That's fine; it happens from time to time. Learning new programming languages isn't hard -- each one will feel easier to pick up than the last -- but a senior person might be forgetting or underestimating the time it takes to learn the \*second\* language. They probably hired OP because they thought she was smart, learns quickly and is good to work with, which are what you should be hiring for anyway. So yes, to OP and like parent says, stand your ground. Communicate clearly what your roadblocks are, ask for help, etc. For the other dev who can't handle it, that's his problem. If you can bear it, be up front with him. "You know I'm inexperienced. I'm working to fix that. Your getting angry about my inexperience does not help anything. Either help, or get out of the way." And if it continues to be a problem, if he doesn't budge after you communicate, go to a supervisor. Also, programming "Real world" stuff is hard. If you're dealing with legacy code, it can sometimes be madness. Dealing with other people in general is sometimes madness. Since you're junior and just out of school it may be hard to determine whether you're merely experiencing this reality shock for the first time, or this situation you're in is atypically bad.
&gt;they never gave me the time to learn the new language Learning new skills is your responsibility as a professional. Employers pay you to solve problems, not for the opportunity to train you. Further, spending your off-hours training and growing only serves to make you a more valuable resource. Managing your career is your own responsibility. Taking ownership of your situation is important. Are you asking good questions, or questions you could answer yourself? Thinking about your own role in the relationship w/Mr. Temper may give you another perspective on how to interact and find personal success. Best of luck!
the QA role has the responsibility of ensuring that the product behaves as designed. QA is usually working very closely with design in this capacity.
Feeling overwhelmed by a new language is normal, but you may want to consider playing with it outside of work hours if you don't already, to speed up your learning process. Regarding your co-worker, losing temper is unprofessional and unacceptable. You can try having a private conversation with him and telling him you don't appreciate the way he vents. You can also talk to your boss to make them aware that this is going on and they might have a talk with this co-worker. You can also seek support from other co-workers and they may just speak up if his abuse is happening in public. Talking to HR is also an option, but may or may not help and may or may not backfire. Asking for a transfer or getting a new job are other more extreme options (the latter is not as scary as it sounds). For QA, given your tenure, it's probably going to be difficult to make sweeping changes, but you can try pointing out inefficiencies, and making suggestions to improve it. One example is to ask for tickets to follow a template with reproduction steps, expected behavior and actual behavior (QA folks often only do the latter but skip the former two). Another example is to ask tickets to be categorized (e.g. cosmetic, SEO, nice-to-have, spec change, error) and have a senior person (preferably one on "your side", like the tech lead) triage. On your part, try writing tests of your own. On the JS side, using puppeteer and jest are a good start. On the Java side, there's JUnit (learning this stuff is a good hobby project to invest time into). Good luck!
It's all coming together now.
Most likely just luck that they didn't get noticed by MS Legal or someone at MS who would report them to the same? And now it wouldn't be worth MS's time: that product was deprecated a couple of years ago in favour of another (with a name that is far less potentially-confused-with-another-specific-product).
I feel your pain. PM: Hey guys, there's some bug involving the date picker. Coder Boss: Okay I think I fixed it. PM: Hey guys, there's some bug involving the date picker. Me: Okay I rewrote the whole thing. PM: Hey guys, there's some bug involving the date picker. CB: Okay I rewrote it. PM: Hey guys, there's some bug involving the date picker. Me: I spent 3 more days on it, I think it is working. PM: Hey guys, there's some bug involving the date picker. CB: Okay I rewrote it. I have resolved that there will always be a bug with the date picker, no matter how many hours we spend on it, it will always be a shit show.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Because there are two phases: compile and runtime Escape characters are used by the compiler to know how to input the text string in the code file into a string into a memory allocation. That happens when the compiler reads the whole file. Things like missing closing braces are checked and handled by the compiler. Escape characters just tell the compiler how to store the string to memory (ie: binary) Runtime is different. Even sometime as simple as `var a = 'a' + 'b'` won't be stored as `ab` by the compiler. The concatenation of the string is a runtime operation. The interpolation of a string is a runtime operation. Even if it's a useless interpolation, it's still discovered at runtime. Let's say you do want to do this at compiler time, as an optimization technique. A template literal is still flagged as needing interpolation. That means the compiler would have to still initialize whatever variables or arrays it needs to do the interpolation (even if the result is the same as the input). Also consider that templates can include references to variables or need evaluation, which means you still need to interpolate during the runtime phase. If you're thinking you can easily just convert it in the same fashion Babel does, consider that the interpolation of a template string is an interval and native function, which isn't the same as the `+` operator, which includes a type-check. Template literals always return a string. In some cases, template literals are faster than using the `+`, so it's runtime optimization that you want at times.
I have now added the license.
I've jumped between 3 shops last 3 years. Onboarding has luckily been good at all spots. However all of them have oversold / blatantly lied about their tech stack. I've learned to be very blunt about what I know and what I don't. First I'd say identify yourself as front end or back end , and say you're open to grow into a fullstack. Don't fake or try to figure out something you don't know what you have some potential mentors in that company. If that guy's a dick he's a dick. He may not even be mad at you but the company in general, and them hiring you without a proper mentor etc etc may just add to him being pissed and a terrible person to work with. Don't let this sell you on the meme that make developers hate female devs. If you need money , you need money, but don't stop looking for opportunities in the tech stack / industry you're into.
&gt; In any case seems like measuring this should be one of my next priorities. And maybe add some documentation on how to implement and consume components with dynamic properties :) In the examples I couldn't find such components, and this section[1] doesn't explain it either. 1. https://github.com/ryansolid/solid/#components
If they are a front end developer.
Damnit, there's another side project idea someone else beat me to! Oh well, saved me the time anyway. Looks pretty useful, I'll have to give some repos at work a scan and see what comes out. It would be awesome to run an automated job that posts the results to slack every week or something. Just to keep on top of things.
I actually don't know the answer, pretty sure it should do such code in optimize way, and there should be some tools at least for ci But I would recommend to you find people in Twitter who actually build V8, check their videos from confs, twits, blogs and/or just write to them. Usually they are very friendly and open)
Yeah, I mean it's especially infuriating when I know EXACTLY what needs to be done, I know the language implementation understands timezones to some extent (toLocaleXXX), but it won't let me solve my problem without hax
Yes. This is area that has been under active development the last month and a bit and I haven't caught up on the documentation. Admittedly when I first started out I was thinking that I'd use Web Components for everything. But over time I've realized there are other options.The Component section needs a big overhaul even in basics like handling the props.children, etc.
You can use `node --inspect` which allows you to use chrome's devtools to profile and debug your app.
That's what we do. It took me a month to get the lib approved by IT
I dunno , by virtue of having a junior role , learning on the job is a given. To increase retention &amp; happiness, a half day a week to do some reading, experiments, pocs, tutorials to me is a no brainer for an employer. I wouldn't want you as a boss lol.
&gt;It would be awesome to run an automated job that posts the results to slack every week or something. so there's your new side project
Closures in V8 are basically objects that point to their code. You definitely don't have to worry that a single piece of source code is going to get parsed, compiled, or otherwise analyzed more than once, no matter what it closes over, because all "instances" of a function created at runtime share the same bytecode. A function expression does allocate a heap object — it has to, in the general case, because you can attach properties to doThingToElement, compare it with ===, and so on — but in theory, V8 could inline the call to array.map and then do escape analysis, see that the function object is not used outside the local scope, and eliminate the allocation. I don't know if V8 would ever do that in this case, but V8 does do inlining and escape analysis. If you are doing an AJAX request, then allocating a constant number of objects per request is never going to be noticeable, performance-wise, because it's so much more work to do an AJAX request than to allocate an object. You can get some insight into what V8 is doing by passing flags to Node like --print-bytecode, though note that this is the unoptimized bytecode. You can do --print-opt-code and then invoke your code enough times that it gets TurboFan-optimized, and look at the machine code. There are plenty of articles and videos about V8's architecture and inner workings. However, in practice, in a case like this, there is absolutely no need to worry about performance. I've been writing client-side and server-side JavaScript since 2007, and the engines are very fast and good at optimizing now. The need to think about relative performance of various language constructs has been dropping every year.
It's normal. The trick is that you just have to work 24/7, either directly working on your company's projects or on your own projects in order to learn. The last part is really important if you don't really know anything yet. The problem gets worse if you don't do learn and study on your own outside normal working hours.
You need to reply to the comment for which this is a response. Right now you're replying directly to your own post so a) its hard to know what this is referring to and b) the poster of the comment won't know you've replied to them.
Looks cool, i appreciate your work! One thing I miss in pretty much all JS implementations of table grid is the Sort/Filter menu from Excel when your range is formatted as table. People (normies ofc) at work use that functionality pretty much in every company, and if I want to move my department from Excel to online to display their trending/metrics/lists, this is the first 'UI feel' everyone will miss. Please have a think - no need to reinvent the wheel - I'd rather my users had seamless experience between what they're used to in Excel, and on online website I was playing around to make a VueJS component mimicking this menu, but it's in early phases and unlikely will ever be production quality. For date filtering I'm using DayJS - it's lightweight and offers sufficient functionality with plugins to filter/manipulate dates like Excel implementation. &amp;#x200B; Menu for dates: &amp;#x200B; &amp;#x200B; This is table menu for numbers Text sort/filter:
What do you mean “is not accessible”? Could you please share a screenshot? Thanks
"hundreds of timezones" I don't think the author knows how timezones work.
Still paywalled.
That's funny, I see a question mark at the end of your post title, which _really_ makes it look like a question. ## r/javascript is not a support forum
Same guy who release Git standup to figure out what someone has done in the last X days https://github.com/kamranahmedse/git-standup
The sort is basically a double click in the Header. In regards to the filter, we are considering that in future versions. Thanks for the suggestion ;)
&gt;but I don't feel that anyone in development should expect to be trained on the job Why should we be any different than most careers? I can understand not having job training available for every little technology out there, but if you get hired to be a Java dev, you should absolutely expect to be able to train in Java at your job. On company time and on the company dime.
Can we automate project managers next?
Thanks! How is your engine done? Canvas, SVG or maybe WebGL? I haven't looked through your code yet - just curious how hard would it be for me to bolt on a little icon in every column header with popup menu in Vue to get the functionality? (end effect like here: [http://tinypic.com/r/2dadr0i/9](http://tinypic.com/r/2dadr0i/9) ). Or to style with CSS/CSS-in-JS. &amp;#x200B; As for filtering, I'm no expert, but maybe check out [transducers](https://medium.com/javascript-scene/transducers-efficient-data-processing-pipelines-in-javascript-7985330fe73d) or a lib like [fromfrom](https://github.com/tomi/fromfrom) Thanks a lot, your work looks awesome.
I have been dealing with daylights saving time and timezones in multiple languages for 20+ years and it is still a pain in the ass. I created this video to try and explain some of the pian to newbies. https://youtu.be/oKFb2Us9kmg
Thank u! I really appreciate the feedback. I felt so ready to throw the towel, but you really encouraged me :)
" Don't use closing brace comments. " I can think of many instances where I later returned to my commented out code and was grateful I had.
[removed]
Everything here, 100% agree. OP, for further reading you may want to check out: - https://v8.dev/docs/turbofan - https://benediktmeurer.de/2017/03/01/v8-behind-the-scenes-february-edition Also highlighting the inpractice statement, and this is something that Benedikt Meurer hits on as well: - engines are trying to widen the path of performance optimal code - engines behave differently in different scenarios In general you shouldn't write your code for one specific engine (because that engine might change where performance cliffs are underneath you). Write good code, and let the engine do it's thing.
You define a function `mouseClicked' but you haven't told the browser to call it when the mouse is clicked. You can tell the browser that by calling [addEventListner](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) for the type `"click"`.
The issue is wit your conditional: if (mouseX &gt;=96 &amp;&amp; mouseY &lt;=176 &amp;&amp; mouseY &gt;=240 &amp;&amp; mouseY &lt;=275){ } Because if you remove that, and just add the below code into your `mouseClicked` function, it works fine: textSize(20); text("It Works!!!", 300, 300); So figure out why the conditions youve set aren't being met, likely because your conditions are restricting te coordinates your mouse needs to be in and so aren't firing the "it works" logic. Hope that makes sense :) replied drunk from cab o :)
CS may not be the right field for you, hahah.
Thanks!!
Thanks for reminding me of this!! Just added a license :)
That's awesome :D
We are dealing only with DOM elements. It is just an regular HTML table. And there is no selectors at all. ;)
It's ~~turtles~~ hax all the way down!
This is awesome!
I've never actually coded in Java, but whenever I need to learn a new language I will build specific things in it at home on my own time to get good at it.
[https://openclimatefix.github.io](https://openclimatefix.github.io/)
Problem: Complex form's with a lot of conditions and logic. Example: A form to calculate the price of a car which seats, color, rims and so on. Type: new module Other solutions: Vue, Angular, React or even jQeury those libraries have a huge learning curve or are outdated and are not developed for this specific problem. You and up with a lot of code and is not maintainable for others.
Yes, but the counter could be slower time-to-production for new features that help the user get their job done. &amp;#x200B; Maybe the multi-framework approach that has the cost of downloading different frameworks on different pages has the benefit of faster development time for new features for each team since. I think it's a trade-off like most (all?) things in software development.
That's my exact stack except I used PHP for backends... I started work and they had me (on day 1) jump into an Angular v1.0/MongoDB/Node.js full stack. I've never touched any of these technologies. When you start as a developer, you're dedicating your life to learning new languages and frameworks. Now? I'm working on Python making machine learning APIs and I couldn't be happier doing it. Stay strong. I have days where I feel like my code is shit and I don't get proper feedback. Don't rely on your coworkers to give you feedback on what good coding paradigms. If there's a company coding style guide, follow it. Otherwise follow YouTube tutorials and documentation of the frameworks you're using.
Ahaha that's a nice nickname
Yeah.. Lucky you! But there is worse :D
I was just reading that and thinking, “wow, UX Designers can help, too”. Just you know, just have shift my entire career.
I'll do my best to maintain it! I would like to start using it in my own company so that would help with maintenance as well!
True
Can you add support for Firefox? I [commented on GitHub](https://github.com/dpw1/youtube-filter/issues/2#issuecomment-504566889) with some guides how to do this.
Good "hack". I sometimes also use such tricks. &amp;#x200B; Problem is that is is probably against Google's Terms of Service: &gt;For example, don’t interfere with our Services or try to access them using a method other than the interface and the instructions that we provide. If they discover this, they could add CAPTCHA to each request or even ban IP. So I think that this is (unfortunately) only usable for testing and not for production.
Oh I see. Well, I suppose I'm paid to do it in that I now run a team and it's part of the role to build and grow a team, but I've always done it.
I wish Jest would let me use Chrome headless instead. There are many things missing in jsdom.
Similarly I just found this plugin for VS Code to list todos, etc https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree
This is correct. 👆
I think animating the DOM is my weak point.
But that's the point - micro frontends are a completely dev-centric approach, that's exactly what's wrong with it. Make life easier for them and to hell with the user. To me that's unacceptable
 [https://github.com/NiGhTTraX/mugshot](https://github.com/NiGhTTraX/mugshot) \- framework independent visual testing library. &amp;#x200B; Built in TypeScript, it differs from other solution by being very flexible and allowing you to use your favorite tools (test runner, browser automation tool, assertion library etc.) without modifications. It's highly customizable with diff options (colors, threshold, anti-aliasing detection etc.), multiple differs, pluggable file system interface and more. &amp;#x200B; Actively working on it with a roadmap already planned.
I do this (almost) by creating mobile applications using Cordova (that are coded in JavaScript) where speech-to-text (and text-to-speech) is available as a plugin. As far as I know there are no usage limitations, and I don't have to handle any audio files. Have you tried this (Chrome PC or Android)? [https://developer.mozilla.org/en-US/docs/Web/API/Web\_Speech\_API/Using\_the\_Web\_Speech\_API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API)
Hi /u/piyiotisk, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/agk22, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Grll3rCrawl, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ottersforever, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Why it was removed?
Why it was removed?
Higher order functions and dealing with multiple parts at the same time in general. I'm finding the learning curve quite steep at the moment.
Just need to wait for someone else to beat him to it.
No problem!
Mrwhoistheboss
I finished building for my thesis project a web crawler/scraper in Java that gathers the data of open pharmacies and stores them in a Neo4j database,which can be accessed from a mobile app.I wanted to do this using nodejs but my professor insisted on Java and now i might have a chance! I can use graphql to check another item on your interest list too ;) Also this would my first paying job too i guess Anyway you are awesome for doing this,good luck to all!
RemindMe!
**Defaulted to one day.** I will be messaging you on [**2019-06-22 21:57:00 UTC**](http://www.wolframalpha.com/input/?i=2019-06-22 21:57:00 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/c3bf4s/gitpending_list_todo_fixme_testme_docme_comments/erqx0dh/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/c3bf4s/gitpending_list_todo_fixme_testme_docme_comments/erqx0dh/]%0A%0ARemindMe! ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Or if github could surface them automatically
What about all that energy used dynamically type-checking? If you care about the polar bears you must use something like like Go or Rust. And no, typescript is even worse!
Lol i stopped reading as soon as i read the world java, but then i noticed you mentioned node.js. Playing the devil's advocate here, but did you mean that you plan to rewrite your crawler in node, after your professor forced you to use java?
Problem: Batching graphql queries from the frontend is difficult without Apollo and difficult to customize. It also doesn't really optimize your queries in order to do things as efficiently as possible. Proposed Solution: A ts library for graphql batching that groups queries/mutations together in a simple way, but also reduces the structure of the request as necessary. For example, if I query for the same thing twice within the batching window, I could just do that request once, then distribute the result to both calls. I've done the simple batching in a separate project, but it was more of a proof of concept than a well thought-out solution. Stipulation: I work full time. So while I would be able to commit regularly, most of my work would be done on the weekends or after hours.
I built a npm package https://github.com/strdr4605/mockingcase . It does not solve a important problem and maybe many of you will think that is useless but I built it to learn more about js and npm packages. Also I think that it is very beginner friendly for contributing. My question: Is it possible to raise some money and then share them with newbie contributors (don’t intend to get all money for me) as I am only the maintainer and create issues only for other to contribute ?
I have a very nerdy project that i'm postponing since last year. I want to make a website for learning morse code, with a live internet morse radio where people can chat and practice on their skills. I already made a version of that morse chat some time ago, but it was before i learned about es6 and clean practices, so the website is very messy (written in vanilla es5 and backed by php) My idea is to rewrite it using node as backend, And to rewrite the frontend in clean es6, but integrated with babel and webpack
he had some points and i thought i could learn a bit extra by doing it like that and i did.The focus was on the back end mostly(neo4j/cypher queries) so i did not suffer that much
I've found that with interactors, I can test in any browser :D
I will require 20% of your salary if you get the job.
https://developers.google.com/web/updates/2018/09/inside-browser-part1
;\_;
Stop writing JavaScript. Stop using computers. Stop using electricity. Live in nature and consume wild vegetables.
When you use destructuring to import, you actually import the entire file. So, this feels like every single file would import every single dependency. A big point of scope in JavaScript is to handle garbage collection. You might end up with a lot of unkept garbage.
Is this irony? I can never tell... It seems very ironic.
I'm not sure I understand. The file is going to get imported either way when I'm bundling. Is there a difference if I'm importing lodash in SignInModule1.js vs index.js?
Hi /u/drdaydreamv2, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/chrmon2, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Cal_Mack, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ProgrammerBro, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/simkessy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/damjanst, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ikitty555, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Do you smell your own farts as well? :D
‘get’ for deeply nested properties. Can not wait for this to be part of the language (I think it’s stage 2 now).
How does this differ from `Object.assign`?
I would do a quick test to see if your bundle for a page importing only one module includes the entire barrel file
You want to keep the amount of data per component minimized so javascript’s garbage collectors can do their thing
The top post this week was whether or not someone should use template strings for everything or not. How is this any different?
I'd brush up on basic security stuff like http headers and how to deal with XSS and SQL injection attacks for sure... Scaling questions like how does caching work or how to manage sessions in a clustered environment? what are some things you can do to speed up a slow webpage? basic SQL. probably more but im tired.
Once, I wrote a proof-of-work algorithm that ran on a site with 2.5 billion page hits a day. Someone’s gotta fix that red in my ledger.
AL gore invented Javascript
groupby
Thank you !
zip, takewhile, groupby, union basically the stuff that comes in python's standard library
We didn't catch that one in time.
I guess what I’m proposing is that dev-centric **can** be focused on the user. Make dev life easier and better, features get developed faster and better, more devs are happy to work for you, it’s easier to hire more devs, more features get built for users, users are happier. I don’t think a single metric can be applied industry wide. The above may be the priority for one industry and set of users for a certain product, while payload size and page load time and responsiveness may be the priority elsewhere.
Hi /u/i_am_extra_syrup, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I've been having the frustrating experience of interviewing full stack devs at work, and seeing a handful of them fail to demonstrate skills that they probably could show off impressively if they just spent a bit of time improving a few gaps. But without these candidates knowing a critical skill well enough to code pair and talk at a high level about it, they're unproven &amp; too risky to hire for the positions we have. It sucks! So if you want, I could give you a pretty realistic mock interview over video chat and give you feedback afterwards. PM me the job listing that you're applying to and we can set something up! And if you're ok with it, also include your resume / portfolio site / GitHub - whatever you would send the place you're applying to - and I can give you more realistic questions and better feedback.
Thanks so much. You gave me lots of keywords to type into Google to figure out where to go next. &amp;#x200B; You deserve more upvotes, sorry this post got removed; I respectfully disagree with mods that this post belongs in /r/learnjavascript
Be able to explain the difference between var, let and const. Also be able to explain what a closure is. Know what the different http methods are and what they are used for
It looks great. But how do I export data tojson or csv ?
It’s cool to see someone willing to do this in the tech industry. Thanks for being part of the community!
Would you retain any sort of ownership over the open source project as a result of your contribution?
No way, serious? Link?
Common ones I use: debounce, throttle, isequal, clonedeep, union.
This is awesome that you are willing to do this. I've been looking for a mid level full stack .NET position, but I suck at interviews. It has definitely been a humbling experience especially after being ghosted after thinking you did quite well in an interview.
memoize
I believe /u/wijsguy is referring to optional chaining. https://github.com/tc39/proposal-optional-chaining. We're also super excited about it and are already using the [babel plugin](https://babeljs.io/docs/en/next/babel-plugin-proposal-optional-chaining.html).
`isEqual` and `cloneDeep` are probably the two we most commonly use. Almost everything else for our use-case has been replaced with native equivalents.
Check out pramp: https://www.pramp.com/ will definitely be useful for you
The best thing you can do it start interviewing right away. It will help identify gaps, and go get you good places to start brushing up or things to learn.
Yes well that's not how the Internet works.
I wonder if CSS can help too!? Seriously though... If the greenhouse effect is causing the world to head up as a result of CO2 emissions every individual could completely stop emitting CO2 and it would not make any difference until corporations and industry cut emissions. Nice idea but I’m not sure the app could make any difference even if widely used.
https://thenewstack.io/which-programming-languages-use-the-least-electricity/
Ha good luck enforcing it, I live in another country and my project is hosted on github, which is owned by...
I didn't know that nature had reddit compatibility
I used to rely on this heavily, until I realized that all it was doing was masking bugs. If a part of your application depends on a value at the end of a chain that may or may not be complete, you have to ask yourself *why* the chain is not complete in the first place, and what that means for required business rules. I work on an enterprise Angular app. The data coming from the server was basically some totally unbounded JSON object, which was stuffed right into our application's business logic, where it was mutated and changed and what not. Some parts of the application then look for values at the ends of the object tree (e.g. `foo.bar.baz.buzz`). We were fucking *plagued* by "cannot read property of undefined` errors. Our naive solution? `_get` abuse. What did this do? Hid the console errors and stopped the UI from crashing, but now we had silent bugs where template variables were just empty in places where we couldn't supply a sensible default. We didn't actually solve the problem, we just swept it under the rug. Why? Because when you're trying to reference shit that's undefined, it means there is something fundamentally wrong with your data model. It doesn't match your business rules. So replacing `_get` with `foo?.bar?.baz?.buzz` or whatever the syntax is going to be, won't solve that issue. I would argue that optional property selectors are a code smell *right out of the gate*. What you should be doing instead is truly understanding the business rules, and designing a data and domain model that reflects them. Objects should be as reliable to use as simple scalar values are.
Big company, do leetcode. Small company, know your projects inside out.
That’s fair. That’s actually a really great exercise for learning about prototypes. I would just add a note to the reader (perhaps in bold font) that modification of host objects is not recommended for production code, or any kind of code that other programmers might interact with. Otherwise, hack away!
Wil there be wifi though?
Object.assign gives a shallow copy
If somebody could overwrite the base level add method would it so 1 + 1 != 2 How would you feel about this? Because this is what you're essentially doing by overwriting prototypes.
Ok I see. Yeah it's always a good idea, very beneficial for not only the person you're teaching but also yourself.
Have you tried reactive forms in Angular? Treating the form control data as streams allows for a crazy amount of control and customizability. Once you have a solid understanding of observables, it's simple to wire up a form that updates in a variety of ways when 1 or more of your controls changes data or status (valid, invalid, etc.). There's definitely a learning curve to it but I'm not sure if that's something that can be eliminated if you want to have a decent, dynamic complex form library that can tackle any situation you'll run into. IMO the complex forms problem is kind of like the state management problem. From a theoretical perspective it SEEMS like it should be easy for someone to implement an intuitive and straightforward library that should cover all types of state management, but in reality there are so many different levels of complexity with the problem there just can't be a one size fits all solution. Angular forms actually caters to this idea as they have anther type of forms called template driven that's meant for quick set up on more straightforward forms. Regardless, I think reactive forms covers complex forms well but it can only be used in Angular.
Could you maybe, in future occasions, submit links **as links**, instead of submitting them _as text posts_? Thank you.
Sometimes online stores have a good deals but sometimes they have price errors or very very good deals, the problem I'm trying to solve is that the majority of applications who parse and store prices for products on (amazon, ebay, alibaba etc.) have just history/compare, I'd love to implement an application which on the first page will say "Hey, this is the most discounted product found on this website" and from here you should consider buying it in order to resell it at a higher price or just enjoy a very very good deal on something. I tried working on that by using Firestore Database from Firebase(I wanted to learn it so that's why I didn't use from start a local nosql database), but unfortunately the writes/reads are limited to 20K/50K daily, which is not sufficient even for a single website so a local solution with mongodb might be better in terms of cost. For the web scraping part I used nodejs with cherrio because I had a simple site (no javascript on it) which I parsed, for more complex ones the solution is Puppeteer. What's interesting to implement after the main feature "Hey, this is the most discounted product found on this website" is a matching of products on different sites, basically an algorithm to group products based on a confident factor based on different weights of different values like price, name, description, pictures etc... I have a semi-functional working deployed version on Firebase Hosting which I can send you by PM if needed (not posting here because of the security rules, everyone might be able to delete the database :), silly me). The technologies I'm confident using right now from your list are nodejs + Webscraping (cheerio/puppeteer) - already knowing them, mongodb - need to learn but I'm already confident in my ability to architect a nosql database so just the way to insert/update from node is to learn, React - I'm not a fan of frontend except of normal html/css to style something a little bit I didn't had time/was more focused on backend technologies to learn react/anuglar/vuejs something dynamic so I think this will be the biggest thing to learn but not impossible. Anyway, thanks for doing this and encouraging people to pursue their dream project, I'll be interested on watching the winner progress in July, have a good day everyone!
&gt; In recent times map, filter, reduce, find among others are well supported in browsers. To the point where a library like lodash isn't *necessary* in some cases like it used to be. You've got it sort of a bit backwards. The original Underscore is from 2009, with version 1.0.0 in 2010. Lodash is from 2012. `map`, `filter`, `reduce` have been supported in all browsers since 2011 (IE9 being the last one to do it, it released with support for all those). Those are _basic building blocks_. They are included in `_` because it would be somewhat weird to write a _collection manipulation_ library and not include those in a manner consistent with your API shapes. But that's it. Those were never _the point_ of `_`, even remotely.
[https://imgur.com/w7AZy14](https://imgur.com/w7AZy14)
I‘ve had an fullstack interview the other day where I had to design a whole application using some provided informations. In my opinion what people want to see from fullstack devs are the abilities to build complete apps or functionality. For example they want to see that you understand that validations have to happen in the backend always and not only in the UI. Or to do heavy computation async in the backend and poll results and so on. So to know how to choose the right tool for the job. Also you should know best practises You should know for example when and how to cache data or how to make an app fast overall.
That's cool, now if it could do opposite as well that'd be really nice coupled with chrome's "copy as fetch". &amp;#x200B; All you'd need to do is define your own \`fetch\` that populates the form.
https://www.w3schools.com/ https://www.w3schools.com/js/default.asp And for further questions: https://stackoverflow.com/questions
I recommend [https://www.freecodecamp.org/](https://www.freecodecamp.org/)
Problem: Javascript comes by default with different standardized logging types. (Log, Info, Warn, Error, Debug). But as it stands only browsers are taking advantage of these different methods of logging. While there exists tons of logging libraries for nodejs already, few focus on zero config, seamless integration into already existing applications. Solution: My library aims to improve the default logging experience of any node application, it is designed to be a drop in replacement for the default logging methods. Since it only proxies the default logging methods you won't lose any functionality provided by other tooling. However, it is not meant to be the be all and end all of node.js logging. It is just supposed to increase the usefulness of the default logging methods. Stipulation: I'm free to work almost full time for about a month (starting next week). During this month I'd focus on finishing the currently planned rewrite, followed by a migration to typescript. Usage example: `require('better-logging')(console)` Repository: https://github.com/Olian04/better-logging
Most interviews are a complete f'ing sh*t shows. I've been in the industry since the late 90's, I have no idea how many interviews I've been on... I have a fair idea of how many jobs I've had. How many interviews go: 1. Personal interview with middle manager to make sure you're not complete lunatic... or at least you can trick them into thinking you're not. We both know if you're coding you're probably a bit nuts. 2. Heavy duty high anxiety technical questions including white boarding which proves you can be driven to a point where you forget what a g'damn array is. They are required by internets law to ask, "Derp what's a closure?" That style of interview I've been refusing to do AND to give. My brain works in two ways: 1. communicate with humans, 2. communicate with computers. When I attempt to mix them, I am guaranteed to come off as: 1. a complete psychopath OR 2. knowing absolutely nothing about a language I've been programing in since shortly after it was called Elm. Seriously on #1 I may have said, "Adolph Hitler" in an interview once; I probably would have gotten an offer, but I told the manager they didn't need someone with my skills. When I interview someone I start off with saying, "I like to start the interview with a really tough question... WHAT IS YOUR SHOE SIZE?" This kicks the candidate out of anxiety mode. The problem I have found in many interviews is: You're not interviewing the person, you're interviewing the person's anxiety. I don't want to interview the person's anxiety, so I kick them out of their anxiety brain by starting with some weird question. I need the candidate to communicate with me like a regular person. After I ask the weird question, I explain exactly why I asked them the question so they understand there's no weird manipulative BS going on. Last time I got the "What's a closure question?" I answered with some of the lyrics to a song called "The Rattlin' Bog" and told them if they didn't understand they probably didn't know what a closure really was. I got an offer for that job. When I interview folks I ask, "Would you like to do some white boarding?" If they answer, "No.", which only one has so far; I reply, "Oh thank gawd, I hate that crap!" If they answer, "Yes."; I pretend to give them the pen, then I say, "Just kidding, I'm gonna write some stuff on the white board and talk to you about it." I'll then write something complex or completely stupid and ask how it can be improved or if it should be used or whatever I think of at the time. One of the stupidest things I've been asked in a technical part of an interview is: "If you had a ternary operator how would you do nothing for the second part?" I said, "I probably wouldn't do it that way, but if there was some dumbass requirement which forced me, I'd probably just use void." The guy replied with this super snobby attitude, "Well, there's no void in javascript." I said, "Are you sure? Last time I checked there was a void." He literally got pissed and left the room. I didn't get an offer for that job. Another stupid thing I was asked in an interview was, "Write a regular expression for a phone number." I said, "Okay, what is a phone number?" They got pissed off at me and said, "Let's move on to something else." I replied, "Why? My question is legitimate, if I don't know what kind of data I should be expecting there's no way I can write a regular expression there are more options than a standard seven or ten digit phone number." They got more pissed and demanded we move on. I continued to press the fact that I wanted to write a regular expression. I didn't get an offer for that job. My current job, I work for a tiny company doing some crap involving maps. My boss confessed, "Yeah after your interview... Me and the other guy were telling the director how much we wanted to hire you, because you answered our questions very well and have a great github." The director replied to them, "Yeah, but he cursed a lot, we didn't get five minutes before he dropped the F-bomb!" My boss replied, "Yeah that's f*ing great!" A fun one I got asked, when I was working at a cable company, by the CEO of a small company was, "I've got two questions: 1. what is the future of cable, 2. how do you pirate cable?" I said, "For number two I can't tell you because of NDA, for number one eventually all cable companies will merge together into one giant cable company the name will be THE FUCKING CABLE COMPANY, because that's what everyone already calls them." I didn't get a job offer there, mainly because I told them I don't know how to Windows any more and they were a 100% Windows shop. I actually interviewed there twice, years later I interviewed the guy who took the job I was interviewing for; he said that the company was a complete sh*t show. He was the guy who didn't want to do white boarding. I told my boss we should hire him, the company I worked for at the time was only hiring idiots, so we got one of those instead. I never care if I get the job or not, the interview is just a practice for the next interview.
I just want to say, that this is a very respectable proposition. Thank you on behalf of the community.
Problem: No existing password management solutions have all of the following features: * Opensource * Beautiful and intuitive UI UX * Free * Offline and cloud storage options * Physical key option for dual encryption * Virtual keyboard option for bypassing keyloggers Solution: https://qvault.io (contains link to GitHub and download) it's a desktop app built using modern JavaScript with electron + Vue Combinations of aes-256-gcm, sha256, and scrypt are used for the cryptography.
Never heard of that one, thank you for the tip. :)
No matter how much of an experienced programmer you are, I would never hire/want to work with you.
\*laughs in IBS\*
https://github.com/sifrr/sifrr Sifrr is a set of libraries for web development, it has frontend framework, http+ws server, SSR using puppeteer, browser storage, library to create Graphql apis, etc. I have been actively working on it for more than last 6 months.
For step-by-step learning (a great plus is availability of tasks on each topic) - [https://javascript.info/](https://javascript.info/). Docs - [https://developer.mozilla.org/en-US/](https://developer.mozilla.org/en-US/) .
Please consider my node.js app Qodemate, which is a CS education tool that lets teachers give step by step presentations of programs! If you'd like a demo I can make a video for you. https://github.com/quinton-ashley/qodemate I'm also working on a front-end for video game emulators called Bottlenose, you can download v1.0.65 right now! https://github.com/quinton-ashley/bottlenose
Making an open source app "Adhyan" where you can upload your currently reading ebook and the app will extract all the content from the pdf and make small courses for you to revise. The app will let you answer the topic that you recently studied and output the result like how much of your answer got matched with the content with the topic. I have some more features in mind and will add slowly. Techs are: \- React \- Typescript \- CRA \- firebase
Nope.
It's less weird than doing that in Python.
Yes, it's weird. Do what your team does. Consistency is more important than aesthetics. If you are a team of one, do whatever you want - it's your code.
Hi /u/purvishpatel, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
https://github.com/getify/You-Dont-Know-JS is the definitive guide
I'm currently working on creating a tracking web application to allow importers and exporters to easily view the status of their shipments. Currently they have to view each shipment 1 by 1 on several different websites and it takes a long time, but I am scraping that data based on the tracking number given and returning the relevant information. It will also keep on checking the tracking for the numbers you entered daily until they arrive so you always have the most up to date information about the shipments. I am also using React for the front end to display all the data in an easy to understand manner.
Would you be willing to provide some insight for the rest of us, what kind of questions do you ask, what do you focus on, look for, etc?
I find them impractical though, and use single-line comments also for blocks. The only exception is comments that will be grabbed by a tool for creating documentation, where the format is enforced. As a side-note: I prefer not to use comments and instead have the code speak for itself. Comments tend to deteriorate during maintenance, and can become completely useless and even destructive in regards to understanding the code over time. Therefore I have only class/function/method and block comments and leave out statement comments altogether. Coding is a procedure to, as economically/fast/securely as possible, turn concepts into working reality, also in the long term (don't forget that the code will be maintained). The easiest to maintain code is the one that explains itself without crutches, using simple patterns, high abstraction level, simple constructs, descriptive names on everything, the right type for the data at hand (if types are available at all) etc. Type + a descriptive name says a ton about the intention, more concisely than a comment. If you do things like `double x = 0; // This is the total cost` then you only have yourself to blame, and the next in line will potentially throw away your code, racking up the cost for maintenance.
I started out with Head First JavaScript book. And it gave me a good kickstart, I can definitely recommend it.
Best JS book ever: [https://www.manning.com/books//secrets-of-the-javascript-ninja-second-edition](https://www.manning.com/books//secrets-of-the-javascript-ninja-second-edition)
I loved this one https://eloquentjavascript.net/ but I would recommend it to people who have existing programming knowledge.
Yeah I got that, but then you can just give them 4 days week or send them to Vegas once a month... sorry I don't see it. Mountains of data point to the fact that every extra second delay rendering your interface makes you lose big chunks of your audience. This is the inescapable fact that makes the whole approach invalid IMHO
We still use cloneDeep, mergeWith, and debounce.
Hey, next time could you please submit your link **as a link**, instead of submitting it _as a text post_? Thanks.
I'm used to comment with `//` because it allows me to temporarily comment a large block with `\* *\` by modifying only two lines although it's also convenient to use the editors to comment on a whole block with `//` but it forces me to select the whole block. If you have a `/* */` comment somewhere, then it forces you to comment temporarily with `//` because `*/` breaks the comment bloc.
Second this one, it's very readable and easy to understand. The perfect first book. It's slightly dated, 2014 I believe, but I wouldn't let that scare you. Maybe they don't use let/const for example, but core concepts are still there.
 /* using block comment syntax can help you isolate a logic block while you're developping // and still contain ad hoc comments without breaking the comment flow */
I have no reason to think your judgment is particularly good about these kinds of things, so that's not a very helpful comment.
Regarding your side note, I follow a simple rule of thumb that states, comments should not describe what, but why. You're totally correct, your variable names should state what they are clearly. Comments are for when your code can't quite describe why it's there, that's what comments are for.
In short, no. I want the project to remain available in the public domain. There are no requirements about mentioning this sponsorship though I think linking back to this thread in the project Readme would be nice. I chose the MIT license and public github repo rules as I thought that would give us the best chance for success. I've wanted to give back to the JS community for a while and had several different ideas of how to make this happen. This one seemed the simplest and had the least startup/organization requirements. If this project is successful, I may look to start a more formal org/collective/foundation. Those future projects may have additional stipulations like being hosted in a github org, linking to the foundation website, etc
No, but always do when it fits. For any multi-line comment, it is beauty to use this instead of // because that would make it ugly. Especially for comments having lists in them, block comments fit. For single line or inline use //, it is conventional. When you use many //, but you want one to be focused or worst, just make prominent by using /* grabbing reader's focus */
I kindly invite you to try and start using QCObjects! (https://qcobjects.dev) A framework to allow web developers to code full stack applications in a fancy and quick way as well as applying a clean architecture concept based in stacked and isolated objects and components. The MVC pattern is fully integrated and it was originally thought for frontend but now it can be used to build node microservices as well in the backend. QCObjects is open source! Licensed under LGPL3 so you can use it in your company projects for commercial purposes, your personal projects, or you can fork it to make your own technology. My main purpose is to change the mind of developers thinking to code legacy in javascript is hard. Now, with QCObjects, it’s easier than ever. I want to make a community of deep tech developers who are willing to code their own web apps using QCObjects. QCObjects has builtin app templates generated from cli tool what help developers to be ready to start with progressive web apps and their own accelerated mobile applications, so it’s really easy to quick start with. The components architecture of QCObjects will let you split and scaffold your application to a professional level quickly and standardised. You can make effects, transitions and other cool stuff and everything is extendible to your own purposes. And you don’t need to mix the HTML code with JavaScript, you don’t need to use a dialect to write your app, it’s pure JavaScript and it’s updated to support the latest conventions like ES6, ECMA262 and ARIA. It is cross browser. It works in node and you can use qcobjects-server command to launch its own HTTP2 server to test your app in a local development environment. You can use the QCObjects snippets for Atom editor and Visual Studio Code for rapid development. It has a playground in docker hub where you can play to be familiarised with main concepts. To contribute you just need to follow this guidelines: https://github.com/QuickCorp/QCObjects/blob/master/CONTRIBUTING.md I personally work in this full time. I make updates every single day and I’m wanting to get feedback to improve the QCObjects ecosystem even more. I’ll appreciate your help and very happy to promote your QCObjects based projects. Thanks very much for your time reading this! I hope you rejoice your soul using QCObjects to develop your new awesome app! Cheers
It already exists look up chrome plugins for amazon
Qodemate looks interesting. Do you have a demo/screencast/video of it anywhere?
Here is what I did, and I highly recommend it. Watch and write code at the same time from Bob Tabor's tutorial on js fundamentals that is available on youtube. Then take on some code chef beginner tasks. After you get comfortable enough with logic and syntax it is time to synergize your logic and syntax with the way language mechanics work. Watch net ninja's tutorial on oop in js, also on yt. Watch mosh's tutorials on oop in js, also on yt. Start writing some tasks in oop from code chef. Then when you get really comfortable with tasks, do a small project, if you have no ideas, google something like 'oop beginner project ideas'. Afterwards watch advanced javascript from pluralsight from Kyle Simpson. I have gone through this process in 25 days and am now completely comfortable with any JS task I am presented, meaning both parts of the bigger task or a whole feature that I get to make magically work.
Interesting. How do you imagine that it would make the questions? With Kindle one thing that is nice is that you can provide highlights and annotations that could potentially be useful in marking where to make questions and how.
Came here to say this.
Anything special about how you are scraping the data that you are envisioning putting in an open source project?
When I was first learning I thought W3Schools had much better docs than MDN. Now though, I strongly prefer MDN.
This could be done in most cases by mocking the fetch API and evaluating the JS, and indeed it would be great (eg by wrapping with `(fetch =&gt; { ...body... })(mockfetch)`) - but a bit tricky
I'm using these on my journey: **[Rithm School Free JS Course](https://www.rithmschool.com/courses)** I started here and am working my way through the course. **[Frontend Masters](https://frontendmasters.com/learn/beginner/)** The first two courses on this are free and I highly recommend doing both. Kyle Simpson, the author of You Don't Know JS has many fantastic courses on Frontend Masters. **[JavaScript 30 by Wes Bos](https://javascript30.com)** I recently discovered this amazing course. It goes through 30 JS projects in 30 days (or at your own pace). It's free too. **[MDN Web Docs](https://developer.mozilla.org/en-US/)** I constantly refer back to the docs to find out how something works.
I'm curious to hear more about the physical key card and the details about how that works.
Sources that worked great for me: 1) Colt Steele’s fullstack bootcamp 2) Wes Bos’ React for Beginners 3) Brad Traversy fullstack React/Redux
When dealing with visual testing in the past, my baseline images have quickly gotten out of order and become difficult to manage as the number of images exponentially grows. &amp;#x200B; Looking at the WebDriverIO site, I saw \`applitools eyes\` which looks like an interesting concept that could potentially be brought to the open source world.
why would be the next logical question
[removed]
Gordon Zhou's Watch and Code: https://www.watchandcode.com
Just throw a couple of bucks against skillshare or a good Udemy course. All those free options are great, don’t get me wrong. But they leave big chunks in your knowledge. I wish I just followed a Udemy/Skillshare course at the beginning. Would’ve saved me years of frustration
Being able to intelligently merge queries for batching would be really nice. Often you are grabbing information about the same entity but in different sections that could be merged or stitched together to reduce both http request but also to help the server/db interaction &amp;#x200B; Query 1 `Entity(_id) {` `_id` `name` `}` &amp;#x200B; Query 2 `Entity(_id) {` `_id` `description` `}` &amp;#x200B; It'd be great if this was batched into a merged query but the appropriate data went to query 1 and 2. `Entity(_id) {` `_id` `name` `description` `}`
Back at you!
I have no problem with people sharing a portion of the money but that would be on them to distribute.
It's more complete. Though w3schools is nice to get a simple description
What I generally recommend is to be mindful when writing the tests. If you have a large number of "page tests" (where you screenshot many components at once) then you can end up with a lot of noise when you make changes to the smaller components that make up those pages. Since a benefit of visual testing is checking the interactions of CSS styles when composing smaller components (think a margin or padding pushing content away), these page tests are sometimes necessary. With Mugshot you can reduce the amount of noise by ignoring elements on the page. For instance you can ignore the content of a page sidebar, but still keep it in the page's flow to see how it impacts the elements around it. You can also play with higher thresholds and perceptual diffing to strike a balance between noise and false negatives. Mugshot has pluggable differs so you could potentially write smarter ones like one that uses ML trained on your past acceptance criteria (when you commit a failed screenshot as being the new baseline) to predict the likelihood of you accepting a failed result. At the end of the day, it's all about the testing pyramid. You don't need to screenshot every component/page variation, just enough to offer you confidence that everything seems right in terms of visual consistency and cross component CSS interactions. If your aim is to test correctness, then I would go lower down the pyramid and write non UI tests.
If you're a beginner take a look a Sololearn.com its great for getting the basics and they have cool app as well.
You don't know JS book series
The rule i use: // single line comment /**/ multiline comment
Why? * Because my harsh language would hurt your feelings? * Because I hate stupid interviews? * Because I like to see change in an industry? * Because I don't want to torture candidates with stupid crap? It takes no time to click the little down arrow, it takes more time to prove that YOU are the prime example of crap humans who further garbage in the industry. You don't want to work with me? FUCK YEAH! I hope one day I interview you and you do really well and I hire you. I doubt that will ever happen.
[W3Schools](https://www.w3schools.com/) may be a better option.
"But I don't need to escape the mysql code, I've already validated it in the UI before posting..."
I mean, you might as well help by not writing power hungry Electron apps.
How often do you push comments anyway? I find it if everything is lean structured and well named those aren't really needed. Sometimes I provide a JSDoc for a function but that's it. export function drawDog() { console.log('woof') /* this barks in case you can't read the code */ } like is that really neccssary?
assembler is only carbon neutral language!
👍
Your tolerance for opinions/ideas/thoughts/whatever that goes against your own is very, insanely low. Idc about your badass harsh language, I care about how if someone would make a slight opposition against your self-defined this-is-the-best-way of doing things, you would belittle them to the ground. I just really hope you’re too cowardly to do it in person and this is all just internet confidence, save them the torture. Trust me, I hate those so-called “stupid crap” interviews too, but to pound whoever thought of it to the ground is just absurd and I hope you stick to only being an engineer with no management responsibilities. I’m sure you’re smart, but you definitely have the “I’m so smarter than you listen to me hahahaha you stupid fuck” egotistic vibe.
Your tolerance for opinions/ideas/thoughts/whatever that goes against your own is very, insanely low. Idc about your badass harsh language, I care about how if someone would make a slight opposition against your self-defined this-is-the-best-way of doing things, you would belittle them to the ground. I just really hope you’re too cowardly to do it in person and this is all just internet confidence, save them the torture. Trust me, I hate those so-called “stupid crap” interviews too, but to pound whoever thought of it to the ground is just absurd and I hope you stick to only being an engineer with no management responsibilities. I’m sure you’re smart, but you definitely have the “I’m so smarter than you listen to me hahahaha you stupid fuck” egotistic vibe.
Personally, this tutorial from Anthony Alicea was the one that really broke through to me and I’ve tried many. https://www.udemy.com/share/100YI0B0Udc1hQ/ He explains really well the little things that most tutorials gloss over or ignore.
I prefer `//` for comments throughout code, with `/* */` for larger comments above classes or methods.
Comments are supposed to document intent. Code is implementation. They might seem redundant to you, but it helps visiting months or years later knowing why something is a certain way. Also incredibly useful for JR or less experienced devs.
I love the You Dont Know JS series. But it's not for newbies for sure. Great if you have been going at it for a while though, a must read to be totally honest. JS 30 days also recommended for sure. Udemy has many, many courses. Quality isn't always super high but if you check the reviews you'll find out which courses are good, and which aren't.
 [https://www.udemy.com/the-complete-javascript-course/](https://www.udemy.com/the-complete-javascript-course/) if you are complete newb
W3schools.com
Wrong.
I finally got around to adding Area Charts to my 3D chart library, d3-x3dom. Combining the power of the D3.js data-driven documents visualisation library, and the X3DOM declarative 3D DOM framework, d3-x3dom makes it easy to quickly produce beautiful 3D data visualisations with minimal code. Examples here on Observable: https://observablehq.com/collection/@jamesleesaunders/d3-x3dom GitHub: https://github.com/jamesleesaunders/d3-x3dom
I always use /* */ because almost everything I write is C, so I just also use my C-styles in JS. It’s is, however, objectively better to use // so that you can wrap block comments around your code when you need to for debugging.
I personally don’t use // comments. I use code blocks for class and method documentation. Apart from commenting variables inside methods for auto-documtors (ie. JSDoc, PHPDoc, etc), if you have logic inside a method that needs explaining then chances are it should be broken out to its own method.
Damn this thread got downvoted as fuck. I did not expect the js community to be like this
cmd + alt + 7 gives you //, so I use that ;-D
You clearly have serious problems.
I always wonder what kind of people have problems doing their job, if they see a different way of comments in the code. This 'consistency' thing is getting way out of hand. Its ridiculous
It's not that it's difficult to do your job. It's more about it being a "speed bump" you hit when scanning code. I'm not saying this would in this case, but that's the general reason behind the requirement for consistency.
I would suggest the app: SoloLearn It has javascript and many more programming languages. Easy to understand with challenges in between every course. You can learn in the subway or the bus , anywhere really. Community is amazing and more importantly its completely free :)
Problem: Tools like Firebase (and their new DB Firestore) are great for prototyping and deploy quickly new products but they have to problems &amp;#x200B; Clod based, so you never will be able to abandon the Google infrastructure (Vendor Lock-in) &amp;#x200B; Queries are somewhat limited and cannot full-fill complex use cases. &amp;#x200B; Solution: &amp;#x200B; MongoServer, a framework where you can get a REST API with User/Pass Auth in less than 30 seconds &amp;#x200B; Some of the features (Both Planned and implemented) includes: &amp;#x200B; \- Fine-grained Permission Handling \- Pagination and Advanced Queries \- ServerSide filtering \- Automatic Population \- Multiple Auth Methods \- Automatic Admin Panel \- Automatic Documentation generation \- Built-in security &amp;#x200B; &amp;#x200B; Check it here [https://github.com/fega/mongo-server](https://github.com/fega/mongo-server) &amp;#x200B; I'm also planing to convert it in a suitable RealTime Service, just like Firebase, Some people are already using it in production, which makes me very happy
Yep. Not arguing that. I'm saying that JavaScript is built into the web and that web developers don't have the option to use Rust lmao.
freecodecamp and you don't know js to top it off
I use a lot: &amp;#x200B; get( ) -&gt; specially in webscrapping and react. omit() -&gt; for Objects flatten() -&gt; for serializing /deserializing data. cloneDeep() isString() -&gt; I'd prefer a native version, but there isn't
Dude these are pretty solid. Nice work!
It can actually lead to unexpected results when you nest comments in that format. For example, you could have a code block some in-lined comments in `/**/` format, and if you try to comment out that same code block by surrounding it with another `/**/`-formatted comment, it might not fully comment out. It has to do with the interpreter escaping the comment block too quickly based on the specifics syntax. That said, I think people underestimate how easy VS Code makes it to comment in `//`. As a NeoVim user myself, it’s often much easier just to jump to the top of a block, insert `/*`, jump to the end of the block to insert `*/`, and be on my merry way. Otherwise I have to manually comment out each and every line. I really need to to just write a VimScript function to handle that for me, but alas...
I played screeps to practice my practical skills
Everyone does. I think you imagine “problem” being like your monitor is broken. It ain’t that serious, fam. I work with several developers on a project that has has 40+ developers over 20 years and it’s 10,000+ files. Everyone of those developers before me formatted everything the way they want. Comments, if statements, includes, tabs/spaces, etc It slows down work considerably when you have a team that switches between files a lot. Bringing into a new dev and it will take him much longer to get used to it. TLDR; if you work with others be consistent or the project will suffer later.
I typically highlight what I want to comment and then use the editors hot key for comment and let it decide. I think it is weird to do a multiline for a single comment, but it is definitely not something you should be concerned about.
Hello @rmrf_slash_dot! I’ve updated the documentation of how to get started with the React.js version. You can also check out the CodeSandbox link below: Docs: https://github.com/davidcetinkaya/embla-carousel-react CodeSandbox: https://codesandbox.io/s/embla-carousel-react-znjzv Enjoy 👍🏻!
Interesting tool. Did you find your IDE doesn't have this feature built in? I thought that was a pretty standard feature
It is, but the IDEs do not show who added the comment, what was the commit and when was it added. You can do git blame on each file but that would be cumbersome. Also you can't apply filters such as get me all the comments from specific team member. I wanted something to get the compiled list with all the details in a single command, also to apply team member filters so I made this.
true enough... I've just been trying to keep my team from even adding in obscure comments like that because they aren't typically helpful. Especially if you have to do an investigation to figure out wtf they mean haha. &amp;#x200B; Still, awesome project! I bet you learned a lot while doing it!
Same here.
Do a project!
that's sad. Most developers can usually be convinced of the usefulness of linting because it keeps people from fighting over semantics like spaces vs tabs, where to place brackets, and formatting code to be consistent... When I first rolled out linting I kept everything as a warning as a first step so that the build didn't break or anything. What that did is make people aware of all of the problems and it seemed like they then realized that there is actually some value in linting. I'm a huge fan of it because I don't want to spend all the extra time to format my code blocks when I can just have it done perfectly for me on save.
Since a few years I have been working on and off on a very large plugin for a Javascript Game Engine. The plugin was initially created in a very basic way, using &lt; ES5 features as that was what was accessible at this time. I started to rewrite completely the project from the ground up, in TypeScript. There's a big community involved in the game engine and in the project too, but most of them still do not know how to create JS projects the modern ways. I'm trying to bring modern TS and toolings to its ecosystem. By working on that project, I had to do a lot of undirected work on the side too: * I had to find a way to extract the typings of the legacy base code of the game engine, and this led to [es5-to-dts](https://github.com/CyriacBr/es5-to-dts), which is a cli for generating TypeScript definition files from legacy JS code. There was nothing like that available before. For example, the VSCode quick-fix functionality does not support prototype inheritance, Object.defineProperty, etc. * I have been creating a declarative programming language that lets you embed TypeScript features in it. That's to extend the scripting capability of the game engine. The use case is simple: I want to collect structured data from the users, but they have low to decent JS coding capability. JSON, XML or Yalm are such languages that could help collect these data. However, they are very limited and you can't embed any scripting capability in them. You can, of course, insert a JS function as a string inside your JSON, but you lose all features from your IDE. That's why I created UserDeclaration (shortened for URD language), which is a parser and a code editor that let's you write structured data like XLM, but with embedded TypeScript. For now, I haven't committed anything, but it looks something like [this](https://i.imgur.com/FCzv7kJ.png). Urd is strictly based on a JSON model so any field is supposed to be strongly typed, and that helps with enforcing TypeScript features. When Urd will be released, I plan to discuss with devs if there could be any more meaningful use-case for it. But at least for now I know that the fork of `monaco-typescript` that I made will help people embed TypeScript into their custom languages. * A modern testing suite for `NWJS`, based on `mochawesome`. &amp;#x200B; \------ &amp;#x200B; Besides, this project, which is mostly driven by passion, I have in sight a tool that I'd like to create to help dev better performs animations and transitions in their web pages. The problem there is right now, is that, most solutions, no matter which framework you use, rely on hard-coded logic. You end up with a LARGE part of your component's logic being how it is supposed to be animated throughout it's lifetime. My idea is to create a fully fledged language like CSS but only for animating components in a clever, structured and more readable way. And it'll be framework-agnostic. So you can plug any "animation style sheet" into your Rect, Vue, Angular or vanilla project and it'll perform the same. I had a proof of concept once for a VueJS project about 2 years ago but I wish to completely rework it with the modern toolings and idea I gathered over the years. But it looked like that: myComponent { animationName { a_command: some_args; another_command: arg1, arg2; [ command_in_parallel1: arg1; command_in_parallel2: arg2; ] complex_command: ( arg1: value; arg2: value; ); call: versatilAnimation, 5, 2; } versatilAnimation { ~argument: $a, 0; ~argument: $b, 0; ~another_option: arg; command: arg1, $a; command2: arg1, $b - $a; } @eventName { } @eventName .child_selector { } } The idea basically is that animation sheets are read in sequence, each command at a time. A command could be anything really, a CSS property change, tweening, waiting, calling another animation, etc. This is a frankly a more readable way than CSS animations. When I worked on my Vue project with it, I frankly really loved to write my transition and animation logic as a stylesheet instead of hard-coding it. Voila, that's it. Regardless of which project you choose, I think that's a freaky initiative.
It's likely related to belog Edge's bug. https://web.archive.org/web/20171123042137/https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/13442439/ There may or may not be a hotfix for it.
React Query - an imperative testing library for React with a familiar syntax: import $ from '???'; import Counter from './Counter'; test('It increments one', async () =&gt; { const $counter = $(&lt;Counter initial={0} /&gt;); expect($counter.html()).toBe('&lt;div&gt;0&lt;/div&gt;'); await $counter.click(); expect($counter.html()).toBe('&lt;div&gt;1&lt;/div&gt;'); }); **Why?** Because the best way to test a declarative component is with an imperative interface. This reduces bias that might be introduced otherwise. **Why me?** Because I've [made a jQuery clone](https://umbrellajs.com/) previously so I'm familiar with this paradigm. I've also got something already started [**early code**](https://github.com/franciscop/statux/blob/master/tests/react-query/index.js) &amp; [**example usage**](https://github.com/franciscop/statux/blob/master/tests/counter.test.js), right now as part of [another library I'm working on](https://github.com/franciscop/statux). My Github Profile: [http://github.com/franciscop/](http://github.com/franciscop/) **Scope:** My idea is to create first these parts: selector `$()`, transversal `.find()`, events `.click()` and serialization `.html()` with their corresponding tests and docs. Once this is done, I'd create new issues with more features to help people get started on OSS through [Up For Grabs](https://up-for-grabs.net/) as [I've done before](https://github.com/franciscop/umbrella/issues?q=is%3Aissue+label%3Aup-for-grabs+is%3Aclosed) (note: from experience helping people contribute to OSS for the first time is MORE work than me writing the code, but I think it helps the community overall).
https://javascript.info/ It's how I got my first js job.
We are working from industry standards where some things are optional properties so sort of outside our control a bit.
Ugh, so bad!
It doesn't really matter to me which people use they come out the same color on the text editor either way
I think there are a handful of rules that just don't matter at all. Indentation, capitalization, variable name and type consistency is super important. Whether your whole team agrees to use single or double quotes is bikeshedding. I do just use prettier which does it automatically, but I think if prettier simply did not include that feature, the world would not be a worse place and code would be equally decipherable. I don't think prettier even has a rule for comments (granted, it's harder to know when it should be inline). The only issue I'd have with inline /**/ is it's slightly harder to type/delete, but it's so minimal I wouldn't even mention it. Certainly the fact that it's "inconsistent" wouldn't ever be an issue.
You don't need vim script, in my opinion. Start at the beginning of the block, at the beginning of the line. Ctrl-V to get into visual block mode. Navigate to the bottom line at the beginning of the line, so now you should have the whole first column of each line selected. Now, shift+I to enter insert mode. Type "// ". Escape.
I really like that idea. It would be fun to see what kind of features the community might come up with as well.
We have prototyped, and are in the middle of ordering our first real batch this week. Pics are on the site. The functionality will be open source so we may not be the only sellers if it becomes popular. Basically the Qvault cards will come in a pack of 2, and there will be a "recovery card" and a "key card". They are plastic, well designed cards that are the size of a credit card. The key card will have a QR code that contains a 256 bit private key, which can be used for dual encryption. Each time you lock and unlock your vault you need to type your password AND scan your card. This card will go in your wallet or desk for easy access. The recovery card will have the same QR code as the key card, as well as a space for the user to write a backup code generated by their vault. If they forget their password or lose their key card, the recovery card can be used to regain access.
Brad Traversy on YouTube and Udemy. He is a great instructor and very down to earth. Also I recommend focusing on vanilla js before getting into frameworks and libraries. And try to find a good balance between studying/tutorials and coding your own projects. I find the most progress is made from coding your own projects plus there is a feeling of accomplishment that goes along with that. Good luck!!
Big fan of that idea! I'll make that update when I get a moment.
What if that prototype method didn't exist to begin with?
Yes, that's a great point! I'll update the post with a disclaimer like this.
Hi /u/happensonitsown, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I tend to use them for group separation or really well documented functions
wow, I just noticed I've been following this pattern myself without realizing.
it's not weird enough, i bet you could get weirder if you tried
Hi /u/pranay_rauthu, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This looks really exciting! I have been interested in a really solid visual diffing library for quite a while. I wanted to use [happo](https://github.com/happo/happo.io), but I am working primarily in react-native lately and they don't seem to support that (and now they seem to be going the full SaaS route.) They do have a really cool feature though, where when comparing two images you can hover scroll over the images and see the differences on the actual images. I think that might be useful for this tool. You can see an example on [happo.io](https://happo.io/). Maybe you've already seen that, but I thought I'd point it out just incase. Also, do you have any plan to support react native?
Hi /u/luka7711, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FlorinPop17, last warning about submitting links as self-posts. Next time we'll ban your domain from r/javascript.
thanks a lot
Hi /u/manekinekko, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
yes.
That would be very helpful. Thank you
I use // for all comments, except for jsdoc function comments and lint ruke disables.
You cut off the ability to comment out big code blocks using /* */ This is Handy when doing the scope isolation step in troubleshooting.
Awesome!
Use vim commentary. `gcip`
For real though, are people manually typing the comment indicators? Highlight that shit and use a keyboard shortcut!!!!!!!
I handcode everything :/
I use the /* */ for commenting classes and functions and the // syntax for commenting a particular step of my code like a calculation or something that I know I'll forget as soon as I'll close the editor 😅
That 20 lines is everything I hate about Java. * Mandatory declared exceptions leads to developers mishandling error cases. * No standard library utility for an extremely common use case. * Forcing the developer to choose among and declare and work with low level streams. * Streams which must be closed by hand to avoid resource leaks.
One time I was sitting in chair in my front yard in the middle of the night, in the dark. It was the spot in my yard where I could connect to my neighbor's WiFi. Randomly, a guy appeared under the street lamp on my quiet street. He proceeded to do a martial arts routine like something out of a Kung Fu flick, alone, in the middle of the road, for about 2 minutes. Then he kept walking. That was weird.
Though I like this series, this tutorial is only about JavaScript language itself, not including the host environment. I think it's not the best choice for beginners.
Don't tell me you hand-format the code too...
I bloody well do!
prettier is prettier when its *artisanal*
Look at you with your hands. I elbow-code everything with a pen and paper.
Tbh, I used to just smash my face against the keyboard then stackoverflow the result. Worked 90% of the time.
**[JSDoc](https://github.com/jsdoc/jsdoc)** uses block comments. If your team doesn't already have a convention on commenting, you could document your code in this standardized way. *Example:* /** * @description Creates a new Circle from a diameter. * @param {number} diameter - The desired diameter of the circle. * @return {Circle} The new Circle object. * */ Circle.prototype.fromDiameter = function (d) { return new Circle(diameter / 2); };
I just let WebStorm handle it with Ctrl + /
// is also available since C99
if you press / twice also gives you // It's one key stroke less
I’m aware and refuse to change
i like your website. interesting articles
That's not weird at all unless it's inconsistent with the rest of your codebase. A lot of code editors will have a keyboard shortcut to comment out highlighted lines with `//` which is probably why you see that more often. Typically I'll use JsDoc `/** */` syntax as I have VSCode set up to show me the function docs as I'm writing out a function call
lol old school. That's fine.
I prefer ESLint but either is better than doing it manually
I use // for comments and /* */ for documentation
Hi /u/denomer12, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Could someone explain to me the advantages to this over a normal express server?
I'm so confused.. how was this deemed asking for help?
Nothing weird about it. For a while, I had a strong preference for /* */ comments. There was utility in the choice, because Abobe had a minifier in Adobe Edge (yes, I was building web apps in that monstrosity derp! Client requirement). Adobe's minifier in Edge basically just removed all whitespace from your code, with zero regard to JS syntax understanding. Therefore semicolons and comment style choices were super important. Imagine the bustedness that could potentially occur by using a // comment in that broke ass builder. Yeah, fun times.
If you want to comment out a piece of code, you'll find the task more troublesome because the /* */ will get in the way.
The top post is about comments right now 😂
CTRL+/
&gt;when comparing two images you can hover scroll over the images and see the differences on the actual image I plan to support this via test runner reporters. For instance, running `mocha --reporter mugshot` would produce an `index.html` with some sexy visualizations. &gt;do you have any plan to support react native? Since everything in Mugshot is pluggable, it should be fairly easy to provide an adapter that talks to some native API, for instance [appium](http://appium.io/docs/en/commands/session/screenshot/). I would love to provide this out of the box.
Just do it
&gt; For beginner content, please post to /r/LearnJavascript instead of here.
I wrote a comment yesterday, but it vanished. Anyhow, check out [https://github.com/mdn/web-speech-api](https://github.com/mdn/web-speech-api)
Great work!!
Hey, everyone! Yesterday, I published some work I've been doing in Node.js with the Snoowrap Reddit API package. My goal with this was to teach myself something new as well as publish a starter project that anyone can learn and build from. This is also my first time putting a GitHub project out to the public so, please let me know if you see anything I'm doing incorrectly. The project only contains a few basic API calls so far but, I plan to continually develop it until all possible API calls and methods are incorporated. GitHub: [https://github.com/extrasyrup/snoowrap-node-express-demo](https://github.com/extrasyrup/snoowrap-node-express-demo) YouTube: [https://www.youtube.com/channel/UC2ErUw\_bFu4\_vghe7cdgMHg](https://www.youtube.com/channel/UC2ErUw_bFu4_vghe7cdgMHg) Thanks!
/** is the real king for method names as in most editors it creates a “doc block” Self documentation while coding is a win win for everyone. Usually you have to /** and hit return to auto populate the text.
Who doesn’t
Well.. I'm not a beginner, but I found this useful. Oh well, just my 2 cents.
That was a limitation with the used API itself and I changed it already. Now it works as expected. https://tarekraafat.github.io/autoComplete.js/demo/
Hi, thanks for pointing it out. Will keep that in mind. :)
/* * I like to comment like this. * You get some nice syntax highlighting. * So your comments stand out and people read them. */
This looks like a great idea, it is very much like the way rust does their documentation, and checks the code in it. I might start using this for my ts projects.
Do you also use notepad?
You're already ahead of the game by commenting, regardless of your style.
I’ve never met someone so unaware of their public persona. I’m really fascinated lol. Please go outside more, smell the flowers or something.
What's the difference? Are you planning on proxying or switching out your dependencies? Looks like needless complication to me.
If it speeds up performance, what's the problem? Do you really need that 3.5gb?
Web speech api does not offer the ability to send your live audio to google and give you back your speech in text
I do not recommend Brad Traversy. He is good for knowing how something is built with the tools but not necessarily the best at teaching you start those tools are. He's great for code along sessions, but he barely teaches how these things work. His courses lack depth. I've bought several of his courses in the beginning but I later discovered others and learnt a lot more from them instead. I'd recommend Stephen Grinder, Colt Steele over Brad. They are more in depth and I find them to be better teachers. Brad's YouTube channel is amazing for free content though. Paid? I'm not so sure.
That's true, haha! But also good for blocks :-D
This looks great!
Tagging /u/happensonitsown for the above recommendations.
Semi-unrelated, I put some code I was working on into Js lint, and it like got really shitty because I was using tabs instead of spaces; is there a reason to use tabs instead of spaces outside of code consistency?
Thanks for this - I was just looking for something like this the other day for a documentation poject. I ended up using the following from gatsby: https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-remark-embed-snippet So i was forced to use gatsby... But now maybe I wont have to. Quick question - what do you mean by: &gt; Glob matching &gt; If you want to run embedme over multiple files, you can use glob matching, i.e. &gt; &gt; embedme src/**/*.md &gt; Note that this globbing is shell expansion, not internally handled so don't quote the glob expression. You can test you output with ls, i.e. ls src/**/*.md I can still run this as regular script in package.json - i.e. postbuild or prebuild, i.e. "yarn embed-docs" which just calls "npx run embedme src/**/*.md" or something like that right?
Notepad++
CMD+/ (for mac people)
When it comes to commenting, I can't imagine highlighting and using a shortcut could possibly be any faster than actually doing it manually.
I only use /\* \*/ if there's something I don't want my minifier to remove.
Generally how I tend to comment too. All methods get a description, list the arguments and the data types they are in a multi-line comment block and any info within them or classes get single-line comments
JustifiedTalent or PartnerQuest or Lightbulb.moment Problem: In today’s market, we use a number of different services to find the perfect job opportunity that will check every checkpoint in the list. Thing is, it’s very difficult to the perfect candidate and hence, why we need recruiters to help speed up the process and delegate the work to spend time elsewhere. Solution: A platform based on cultivating your skills and used to skills to join active projects that fit your working personality and interests. Based on your work you completed on the past, your evolving interest, you'll be recommended to exciting projects to look forward to. When you select your profile, you can see a skill graph such as you’d be able to see in a role playing game that evolves through time. First, you get to see the realm of expertise such as front-end, database, functional programming and whatnot. Then, as you select domains, you can see the graph being updated based on the accumulated experience of the individual in sais realm in both projects/jobs along with the skills that were acquired along the way such as .NET Core, Django, C++ or whatnot. When you move to the match section, you'll be able to see how many projects are currently active. You'll also know the number of projects that you'd like to work on based on how you work, your skillset and your job. When you look at the projects that would piqued your interest, you'll have key elements to summarize the project through: - [ ] The headline - [ ] Project tags - [ ] Recommended skillset If you like what you see, you can swipe up otherwise swipe down. The system would get better with time as not only will it use info on your profile but also the key elements you favorited. On the platform, you’re selling a product. Yes of course you are! You’re selling the best possible version of yourself because that’s exactly what people are looking for; a good sales’ pitch. You need to advertise yourself in a way that it is virtually impossible to not give you at least a phone call and learn more from you than what’s out there. As for the tech stack I’d be using to build such an application, there’s a few I have in mind. I’m a huge enthusiast of functional programming along with having a strong typed system to make sure the architecture and logic are sounded. With that in mind, to make sure to deliver a functioning application which would target the highest number of users in the smallest timeframe, I’d suggest using the language ReasonML which transpiles OCaml to JS directly with Bucklescript. Why do I mention ReasonML? [ReasonML Github.io](https://reasonml.github.io/docs/en/what-and-why) One of the main reasons is that the ideology behind FP mostly translates in JS space already. Let’s also take a moment to see that FP has gotten a lot of traction in the past years with the great practices it stipulates to follow to have a clear implementation of the requirements that are easy to understand and scale up. Now for the main juice! Using the project [Revery UI ](https://github.com/revery-ui/revery) ! “Revery is kind of like super-fast, native code Electron - with bundled React-like/Redux-like libraries and a fast build system - all ready to go! Revery is built with reasonml, which is a javascript-like syntax on top of OCaml This means that the language is accessible to JS developers. Your apps are compiled to native code with the Reason / OCaml toolchain - with instant startup and performance comparable to native C code. Revery features platform-accelerated, GPU-accelerated rendering. The compiler itself is fast, too!” (TLDR - Basically, à super-charged Electron which provides a great development experience along with awesome performance) With this in mind, we can build not only a cross-platform application for desktop or we can leverage React-Native to build something that can be used for both iOS and Android or simply target React to build a website.
Probably to be honest, I've got into such a swing of it that I just don't think anymore..
Click, drag, Ctrl+Q. Much faster than both /**/ and multiline //s.
Is.. is THAT how you comment your code, orrr... ?
I have another suggestion. Use MobX.
Yeah.
I like Redux-Actions. It's got a lot of flexibility and is recommended in the official documentation.
The whole idea of having modules is letting the system handle them for you. This seems unnecessary.
No it's not weird if the comment is multi-lined however comments are usually considered bad practice because the code should be expressive enough to not require comments. The problem with comments is that people update code and not comments, so code and comments tend to be out of sync. The code should express intent so it doesn't need a comment, adding a comment is conceding that the code is not simple enough to understand without the comment. Now that's not a hard and fast rule but it is more ideal to have small modular code with intent clearly expressed, when you add a comment you're declaring that the code is obscure and needs a comment to explain its purpose.
Or mobx-state-tree :)
This. The project looks cool, but would be nice to see a “motivations” section in the GH readme.
Not really, I use titles like this for example: /**** TITLE ****/
Thanks! I'll post a video of it for you tomorrow
My professor used to say "consistency is better than being right". Reality is not quite that dogmatic but quotes sound better that way.
**Submission**: [locker.dev](https://learnlocker.dev) **Description**: A social learning platform for software developers. **GitHub**: [https://github.com/learneda/learnlocker-FE](https://github.com/learneda/learnlocker-FE) (frontend) [https://github.com/learneda/learnlocker-BE](https://github.com/learneda/learnlocker-BE) (backend) **Tech**: * Frontend: React, Redux, styled-components, [socket.io](https://socket.io) * Backend: Node, Express, PostgresQL, knex, [socket.io](https://socket.io), cheerio (for web scrapping), passportjs * We are excited to add a GraphQL endpoint if sponsored! **Devs:** * luiscmartinez ([https://github.com/luiscmartinez](https://github.com/luiscmartinez)) * Riley-Brown ([https://github.com/Riley-Brown](https://github.com/Riley-Brown)) * cesarnml ([https://github.com/cesarnml](https://github.com/cesarnml)) &amp;#x200B; [locker.dev](https://locker.dev) is a continuation of a [Lambda School](https://lambdaschool.com/) Capstone Lab project.
yes and what if the standard language added it 1 year from now. your case would break a lot of stuff.
Try to adhere to [JSDoc](https://en.wikipedia.org/wiki/JSDoc) specifically in that case.
vgc for vim people
Depends what you're commenting. If you're commenting code, yeah, it's way faster. Drag selection across the relevant lines, hit `ctrl+/`. Done. If you're writing explanatory comments, it would be absurd to use the shortcut. Of course, you still should have a good comment formatting add-on, as well. E.g. I've got one for Sublime where I press `ctrl+alt+q` and it automatically wraps the comment to my ruler, automatically inferring how each line should begin based on the comment you're wrapping.
What makes you say that? What signs of “serious problems” did I show? I can clearly show cases of how you displayed serious, almost mental, problems.
Casual. If you aren't coding with text to speech then you aren't even on my level.
Yes I agree. I dislike however commenting about member variables.
Are you even a real developer? Real developers use speech to text &gt; text to speech &gt; speech to text. Computers understand computer voices better. Less errors.
&gt; speech to text &gt; text to speech &gt; speech to text Fucking lol. You should be speech to text &gt; text to speech &gt; Google translate &gt; speech to text
From Javascript: The Good Parts: The /* */ form of block comments came from a language called PL/I. PL/I chose those strange pairs as the symbols for comments because they were unlikely to occur in that language's programs, except perhaps in string literals. In JavaScript, those pairs can also occur in regular expression literals, so block comments are not safe for commenting out blocks of code. For example: /* var rm_a = /a*/.match(s); */ causes a syntax error. So, it is recommended that /* */ comments be avoided and // comments be used instead.
Stop downvoting valuable responses in a discussion. Downvote is NOT a 'i disagree button'
I’ve been using Mobx for the last year and have started to not like it. The mutability is the objects is annoying.
My IDE makes comments grayed out. Thats how i scan code. I assume people dont use uncolored code anymore.
Doesn't look like it's trying to compete with Express, just a Promisified wrapper for Node's builtin `http` module (with types.)
Interesting I remember creating a multi-level CSV converter/parser long time ago. Probably was never actually used. How this new file format would support "new line" value and how it would escape value it's own symbol such as "|"?