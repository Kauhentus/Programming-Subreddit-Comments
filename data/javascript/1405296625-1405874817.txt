Of course, but this isn't to say you can't write an extension where each tab is a different document. Anyway, only pointing out the "you'd have to know C" part isn't entirely accurate.
[It has at least one...](https://www.dropbox.com/s/xgmm1mundz9x93y/Screenshot%202014-07-14%2010.10.23.png)
I see you link to evernote. Unfortunately their app for the desktop does not know how to close. You have to ctl-alt-del and kill it from the task manager or you get incessant "synchronizing" pop ups. So it's unusable. Good luck with spidernotes.
nice to see the explanation of classes as syntactic sugar. i hope people won't over-rely on them.
Just a disclaimer that I'm the author of this library. I released it about a month ago as a grunt plugin, but I've factored it out into its own library for the connect middleware framework. This post documents the development beyond its core functionality: * gulp support &amp; core library usage * delay – simulate real world latency for mocks * 404 stubbing – create mocks for endpoints that don’t exist * URL rewriting * mock &amp; record mode Let me know what you think!
I think so - I'm not sure without testing whether your code would have overwritten the variable. On second thought, you might be able to get away with overwriting the same variable with new markers each time. I'm 60% sure it might get garbage collected. The main part is your url should be set to an actual url rather than a file name like something.html, but additionally for each marker you need to create an event listener that waits for a click before redirecting the page by setting window.location.href setting window.location.href is what actually redirects your page to the new url
&gt; who wants to maintain 500k lines of outsourced Javascript? Maybe that's a bad example, because who wants to maintain 500k lines of outsourced *anything*?
I think all of these new features will be great but I have to wonder: am I the only one that prefers the CommonJS approach to modules better than the ES6 module syntax? Maybe it's just because I'm used to it.
I think this sounds awesome. Will definitely give it a test drive soon. 
&gt; something new will replace JavaScript I wouldn't be surprised either if this happened. Dart in particular seems promising, as much as people like to hate on it, I like what I've seen of the language so far.
Oh, you mean security against malicious devs?
You should just be able to do setInterval inside your init method with the proper time frame and pass your load data function to it no? 
Use setTimeout and re-call it once the AJAX call completes. If his server were to slow down and requests get to the point where they take over 20 seconds to process, you would see overlapping requests. e.g. function doMyStuffs(){ [...] $.getJSON(self.config.url, function(resp) { self.data = resp; $(document).trigger("marketdataavailable"); setTimeout(doMyStuffs, 20000); // Call my parent again in 20 seconds. }).error(function() { throw new Error("Could not load exchage rate data from:" + self.config.url); }); [...] } doMyStuffs();
What's stopping you from swapping the document out with some other html, or even using an iframe? To be clear, I am not discussing a document or a tab as a separate, sandboxed process. Regardless of what's happening in the background, the tab I am discussing is a visual way to organize and navigate to other content.
Well sure. I guess I'm just not sure where he is having the issue since he is doing some reasonably complex things so I'd assume he would know about set timeout/interval. Maybe it's something more specific and OP could post a more pruned down example of what he is running into. 
JavaScript the language isn't maturing, but the community sure as hell is.
forgive me for my dumb question, but wouldn't it require for a feature to be impemented in google's v8 before it lands in node.js?
You could use set timeout but what I think your looking for is setinterval
__^[wow ^so ^verify]__: ^/u/bit_watcher ^-&gt; ^/u/irocgts __^Ð100 ^Dogecoins__&amp;nbsp;^__($0.0269163)__ ^[[help]](http://www.reddit.com/r/dogetipbot/wiki/index)
I HATE JS's half assess objects. =( Ohhh prototyped? Yeah, it's horrible. It looks like we're stuck with them.
JavaScript - inheritance, interfaces, and abstraction..... no, it just doesn't sit right using prototypes. Fuck, I wish Java had made it instead.
&gt; "classes" Yeah, JS can fuck off, I hate prototypes. =/
Is node.js forever tied to v8?
To learn tricks, I invite you to http://140byt.es
"No old browsers" is no ridiculous goal, it's already been achieved. Chrome, Firefox, and Opera all update so aggressively that not even jQuery worries about supporting more than one version back. The only thing it would take to let us see a feature one day and deploy it a few months later, is for IE and Safari to catch up to the competition.
Very cool indeed. I'll see if I can come up with something to contribute 
Its a versatile language and much more powerful when learnt properly instead of thinking it must work like Java, but there are definitely bad parts to the language. This describes only some of them: https://wiki.theory.org/YourLanguageSucks#JavaScript_sucks_because
Be our guest :) I'll gladly be your caddy for that code golf.
&gt; Duplicate keys no longer cause a hard error; now a warning is logged (and only one of the children with the same key is shown) Awww yiiiiisss.
Odd. It worked for me just then...
They're using Chromium/Webkit as the actual page renderer so very little, if any, of the security issues would have to be done by them. The code for the UI itself shouldn't create any new security flaws.
All of that stuff was completely subjective, and was all things people had a problem with because they came from a different language. None of it was objectively bad or broken, only new or different and therefore disliked by whoever happened to have edited that particular wiki page.
This *really* reflects what percentage of javascript is good parts. I love douggy's book, so small, so neat.
Java. Source: open a google for business app and watch the user agent headers when they verify domain ownership.
oh good i hadn't seen this on reddit the past 15 minutes.
I'm on a team that also maintains a very large Robotlegs based ActionScript/Flex/Java based learning application. It's heavily mediator/service based and I cringe every time I need to add or modify something in it. It takes 10 minutes+ to compile and get to a running state so small changes take forever to test. The amount of boilerplate code needed to do the simplest thing is ridiculous and I think the last time we checked the LoC count was well over 1.5 million. It wasn't even outsourced, but it still sucks.
Try &gt; $("#sub").click(function(event){ event.preventDefault()
Try using sth like this: $(function(){ // called when document has finished loading $('.yourForm').on('submit', function(evt){ $.ajax({ type: "post", url: "action.php", data: $('yourForm').seeialize(), success: function(){}// your cb }); evt.preventDefault(); evt.stopPropagation(); return false; }); }); Basically return false already does 'preventDefault' and 'stopPropagation' but i still include them because in my use cases return false isn't enough sometimes. stopPropagation prevents the event from bubbling up which means other events aren't triggered. Also preventDefault stops the default action. 
Hey Guys, Last August I had an idea for a weekend project and created a library called 8bit.js. I figured it should be more than just 8bit oscillator sounds and broadened the API so other people could create their own Instruments, hence the name Band.js. I'm now looking for people to collaborate with who are Audio Engineers and also know the Web Audio API who can help me create new Instrument Packs for Band.js. If you've seen this library in the past, you should know that I've recently refactored the whole thing to work with Browserify. I've also added the ability to change the tempo of a song, even while it's playing (you can test that out with the examples below). I've also fixed numerous bugs and performance issues. If you would like to hear what it can do right now with just your basic Oscillators and white noise, checkout the following: * [Super Mario Bros Theme](http://plnkr.co/edit/LG20SL?p=preview) - Created by me * [Tetris Theme](http://plnkr.co/edit/ZmsCCS?p=preview) - Created by /u/rooktakesqueen * [Zelda Main Theme](http://plnkr.co/edit/jFnos1?p=preview) - Created by /u/legosjedi * [Frog's Theme - Chrono Trigger](http://plnkr.co/edit/vVrFxg?p=preview) - Created by Me &amp; Jarred Mack If anyone else is musically inclined and knows a bit of JavaScript, you can fork any of the songs above in Plnkr and create your own song :). If you do, let me know and I'll add it to the list of Examples. Brian Rinaldi held a talk about my library in this years [Fluent conference](http://fluentconf.com/fluent2014/public/schedule/detail/32348) which was quite cool :). Thanks again to everyone so far who have helped me out!
IIRC someone here on reddit made this, I think it was posed in webdev last week possibly.
This is true, but typically google &amp; apple handle security differently right? Prior to google moving to their own fork of webkit, chrome was known as being one of the safest browsers around, while safari on os x was one of the more vulnerable ones. Also don't get me wrong, i think this is a really cool project. Was trying out the browser a bit last night. But I do think browsers can be quite a bit of work. So long as this gains good traction, I'm sure it will turn out well.
I like it, very cool :) I played around with Web Audio API at work a while back and thought it would be really cool to make a whole music making app with it :) You could always make something like that in the end by using band.js as the API :)
The title says it all really. I've recently started learning the [pixi.js](http://www.pixijs.com) framework and noticed there wasn't a sub for it on reddit, so I made one. There isn't much there yet apart from a few experiments of my own and some links a friend and I found to be interesting or useful. The pixi.js framework shows a lot of promise though, so join me on the sub and we can make cool things together!
You've got a couple of typos. $("$myForm").attr("action") should be $("#myForm").attr("action") and $("myForm : input").serializeArray() should probably be $("#myForm").serialize() but if you want to keep your serializeArray(), you at least need to add the # before myForm.
Try using just CSS and display table. Should be fast (no JS at all) and flexible. Here is sample usage with Bootstrap-like classes - http://www.minimit.com/articles/solutions-tutorials/bootstrap-3-responsive-columns-of-same-height
&gt; envify is properly listed as a dependency instead of a peer dependency THANK YOU!! 
Or better yet, why not stop using inheritance altogether. OO is a poor man's closure. http://people.csail.mit.edu/gregs/ll1-discuss-archive-html/msg03277.html
The problem is that is HAS to be js. I work in a huge web-team as part of the js team. I got asked to do this as a part of a js library. I can't make any changes to the html/js what so ever (yes I know it sucks) If it was me, I would have made it pure css, ^but ^^some ^people ^here ^just ^aren't ^^that ^smart Thanks for your response though.
I was having trouble finding a good example of how to make a single page application with backbone and node.js, so decided to make one! You can also check out a live demo here - http://morning-tundra-8603.herokuapp.com/
This is great. I've been wanting to build callable objects for a while now. It isn't perfect but it's close enough to be useful. Edit: I'm doing some due diligence on this method and it appears proto is actually [deprecated](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto). They want you to use Object.create, which wouldn't be able to pull this off. Edit2: setPrototypeOf is still in the ES6 spec, it's just advised against. So using that first and \_\_proto__ as a fallback should still be future proof. Edit3: First build, works pretty well. function callify (ConstructFunc) { var CallStruct = function () { var instance = function () { return instance.onCall.apply(instance, arguments); }; var f, fProps = ["call", "apply", "bind", "toString"], fl = fProps.length; for (f = 0; f &lt; fl; f++) instance[fProps[f]] = Function.prototype[fProps[f]]; if (typeof Object.setPrototypeOf == "function") Object.setPrototypeOf(instance, CallStruct.prototype); else instance.__proto__ = CallStruct.prototype; ConstructFunc.apply(instance, arguments); return instance; }; CallStruct.prototype = ConstructFunc.prototype; return CallStruct; }; CallStruct.prototype = ConstructFunc.prototype; return CallStruct; }; You just pass in a normal constructor to callify to get back a new constructor that builds a function rather than an object. You also need to make sure that your prototype chain implements an onCall method because that's what the root call will delegates to. And [here's a jsfiddle demo to make it simpler.](http://jsfiddle.net/zd9Tw/) CODE EDIT: Added a loop which reestablishes the native Function.prototype call, apply, bind and toString methods in the function instance.
Nice. Id like to see your solution.
That's incredibly helpful. A while ago I naturally came across a design pattern which I named [Cascading Asynchronous Javascript and HTML (AJAH) Regions](http://glassocean.net/cascading-asynchronous-javascript-and-html-ajah-regions/). It's a quick read, if you check it out let me know your thoughts. Since I prefer SPA now, I'm taking the pattern in a new direction, doing it in Javascript (client-side) instead of PHP (server-side) with custom components similar to Ember.js and a system that will cache frequently used templates. Currently using {Dot.Notation(index)} for data accessors and [my-component param1="asd" param2="asd"] for custom components. I'm going for templates like this: **Data:** &lt;Games&gt; &lt;Game&gt; &lt;Properties&gt; &lt;ID&gt;3ead9ed3-94fd-4ec5-9c91-2a5b565175c6&lt;/ID&gt; &lt;Title&gt;Galaga&lt;/Title&gt; &lt;ReleaseDate&gt;1981-08-01T00:00:00-07:00&lt;/ReleaseDate&gt; &lt;Rating /&gt; &lt;Genre&gt;Shooter&lt;/Genre&gt; &lt;Platform&gt;Arcade&lt;/Platform&gt; &lt;Developer&gt;Namco&lt;/Developer&gt; &lt;Publisher&gt;Midway&lt;/Publisher&gt; &lt;/Properties&gt; &lt;Boxart&gt;front.jpg,back.jpg&lt;/Boxart&gt; &lt;Fanart&gt;7861-1.jpg,7861-2.jpg&lt;/Fanart&gt; &lt;/Game&gt; &lt;Game&gt; &lt;Properties&gt; &lt;ID&gt;3d779477-f7b5-44cb-8920-ae7843d72b2e&lt;/ID&gt; &lt;Title&gt;Space Invaders&lt;/Title&gt; &lt;ReleaseDate&gt;1978-06-01T00:00:00-07:00&lt;/ReleaseDate&gt; &lt;Rating&gt;E - Everyone&lt;/Rating&gt; &lt;Genre&gt;Shooter&lt;/Genre&gt; &lt;Platform&gt;Arcade&lt;/Platform&gt; &lt;Developer&gt;Taito Corporation&lt;/Developer&gt; &lt;Publisher&gt;Midway Games&lt;/Publisher&gt; &lt;/Properties&gt; &lt;Boxart&gt;front.jpg,front2.jpg&lt;/Boxart&gt; &lt;Fanart&gt;116-1.jpg,116-2.jpg,116-3.jpg&lt;/Fanart&gt; &lt;/Game&gt; &lt;/Games&gt; **Output a list of Games:** [each {Games}] &lt;div&gt; &lt;img src='{Game.Boxart(0)}' /&gt; &lt;span&gt;{Game.Properties.Title}&lt;/span&gt; &lt;/div&gt; [/each] **Output an Edit Game menu:** &lt;h2&gt;Edit Game&lt;/h2&gt; &lt;span&gt;{Properties.Title}&lt;/span&gt; &lt;img src='{Game.Boxart(0)}'/&gt; &lt;h3&gt;Properties&lt;/h3&gt; [property-list props='{Game.Properties}'] &lt;h3&gt;Boxart&lt;/h3&gt; [image-list images='{Game.Boxart}' root='{Properties.Title}.{Properties.ID}'] &lt;h3&gt;Fanart&lt;/h3&gt; [image-list images='{Game.Fanart}' root='{Properties.Title}.{Properties.ID}'] The component [property-list] renders a list of label:field pairs for each property (ID, Title, ReleaseDate, etc). The component [image-list] renders a gallery of images that supports drag-drop arrangement and moving images between lists. All files for a record are stored in an indexed folder, and any time we make use of a file (say an image) within the app we create a soft link to that resource in the data set (not a hard path). This lets the end-user sort a list of images any way desired, and deliver them in a certain order to their templates, because it's a virtual list not a directory. This is built around semi-structured data, currently XML for flexibility and quick development. The plan is to use NoSQL for a document-oriented database that is fully customizable by the end-user. Unlike Ember.js components and WordPress shortcodes, this system should support nested components of the same type. For example: [each {a}] &lt;span&gt;{a.Property1}&lt;/span&gt; [each {b}] &lt;span&gt;{b.Property1}&lt;/span&gt; [/each] [/each] or: [grid span="1" count="4"] [grid span="1" count="2"] [/grid] [/grid] If you can guess what app I'm eventually going to build with this, you win an upvote. Because I'm too cheap for gold, and karma is worth more than currency since it is the only thing you'll be taking to the grave :)
But does it ask to remember your password on Firefox, Mobile Safari, IE, and Android? Because that's why I never do login forms with AJAX -- all the tricks required to get each browser to remember the password aren't worth it. Just use a separate login page that redirects and get the added benefit of not loading your entire application just to login.
Possible solution would be to fire an "appReady" event at the end of your app.js and run your 2nd block of code when that event is fired.
Gmail actually still has an HTML only version.
Of course that always works to! But I have seen tons of example like that. I wanted to build an example where everything was on a single page. 
I always love reading your stuff. Here's my "fix" for "auto-instantiation" (which I usually prefer): https://gist.github.com/AutoSponge/e4327a316f44f255d60c
Thanks I'll try to take a look during lunch. 
Fucking over that lifter was a mistake. You should delete your account.
Could Lazy.js be used to replace Underscore completely. I mean, even if we're using Backbone, could we just replace underscore for this and everything would just work? (with the obvious modifications of course)
wow, what a very violent collision! pew pew pew pew BOOOOOOM!
Not being able to add 0.1 and 0.2 together and get the right number isn't just subjectively bad, its objectively bad. When it comes to mathematics, no other remotely serious language in the world sucks like JavaScript.
You're using a constructor as a factory for itself. It would be much cleaner to use a separate factory method that returns your instance of Logger.
Ext.js/Sencha is a popular one. You can pay for dojo if you want, but with so many open source alternatives, you should have a very good reason to shell out cash.
&gt; `new` doesn't compose with other functions One thing I've done successfully: ensure that my decorators/whatever expect to receive a constructor function (not a regular function), and behave accordingly. It's definitely risky to treat constructors like any ol' function. This is part of why I'm so psyched for `class` in ES6. 
I was of the impression that using `__proto__` was widely considered to be an anti-pattern because its non-standard, security, has inconstant behavior across browsers, debugability, and some other stuff I don't remember. Yes, you *can* use it, but that doesn't mean you *should*. The only scenario where its use may be reasonable would be something like Node.js where your environment is static, but even then I'm not sure the benefits outweigh the costs.
Latest Chrome
Yeah, this seems like a big code stink for writing what looks like clean code on the outside. 
This could be a subset of a larger library called Canada JS.
&gt; just a dumb-looking version of it It's really not though, it's just a different ways of dealing with inheritance and method/property sharing. Prototypes are another way of thinking about classes, not a "dumb" version of whatever language you like.
Why do you want paid, guaranteed support? 
There is a saying by (I believe) Martin Fowler that goes something like: there are only 2 hard problems in computer science, naming things and cache invalidation ;) The question basically comes down to a) how 'real time' do you want the data to be and b) does the api you are interacting with it allow it. If the api does allow it, it works out pretty well to have a task that runs on whatever interval you want on the server to get the data and store it in a local dB that you then send the data from to your users. This can also help with daily rate limits but, again, provided it's allowed or you risk being banned permanently. 
That's the thing: it's _not_ a coherent class keyword, it's syntactical sugar over the 'dumb-looking version of it' that we have. But our 'dumb-looking version' doesn't behave like a Java or C++ class, and neither will the class keyword. No one I know really creates objects [like this](http://www.joezimjs.com/javascript/javascript-prototypal-inheritance-and-what-es6-classes-have-to-say-about-it/). What does the 'class' keyword offer to someone like me? I'm used to defining an object with a list of functions (or other), and understanding the Javascript code that turns that object into a pattern that is then replicated to create multiple instances of a "class." **That Javascript isn't encompassed by the class keyword.** There's also a desire, I think, to move away from [inheritance in general](http://en.wikipedia.org/wiki/Composition_over_inheritance) precisely _because_ the 'dumb-looking version' exposes the weaknesses of prototypical inheritance. All in all, the 'class' keyword seems to me to be a weak, rote concession to a poorly-thought OOP standard. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Composition over inheritance**](https://en.wikipedia.org/wiki/Composition%20over%20inheritance): [](#sfw) --- &gt; &gt;__Composition over inheritance__ (or __Composite Reuse Principle__) in [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming) is a technique by which classes may achieve polymorphic behavior and [code reuse](https://en.wikipedia.org/wiki/Code_reuse) by [containing other classes](https://en.wikipedia.org/wiki/Object_composition) that implement the desired functionality instead of through [inheritance](https://en.wikipedia.org/wiki/Inheritance_(computer_science\)). &gt;Some languages, notably [Go](https://en.wikipedia.org/wiki/Go_(programming_language\)), use type composition exclusively. &gt;==== &gt;[**Image**](https://i.imgur.com/6Wfcvb7.png) [^(i)](https://commons.wikimedia.org/wiki/File:UML_diagram_of_composition_over_inheritance.svg) - *This diagram shows how the fly and sound behaviour of an animal can be designed in a flexible way by using the composition over inheritance design principle. [1]* --- ^Interesting: [^Object ^composition](https://en.wikipedia.org/wiki/Object_composition) ^| [^Liskov ^substitution ^principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle) ^| [^Entity ^component ^system](https://en.wikipedia.org/wiki/Entity_component_system) ^| [^Design ^Patterns](https://en.wikipedia.org/wiki/Design_Patterns) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cix94a2) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cix94a2)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I've been wondering if something like the Unity Asset Store could work for Javascript libraries. Perhaps it could simply be an extension to npm / bower.
For instance, how does the class keyword inform/aid [mixins](http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/)?
Thanks for your idea
We are still burdened with partial support for IE8 and will likely be stuck with IE 9 forever. 
Highstock/Highcharts is a fairly popular charting/graphing library, licensed under a non-commercial use free license. For commercial use, a paid license is required.
impact.js for rapid game development
What made you think TypesJS doesn't check Object vs Array?
Yep. Best-case scenario we still need to wait for current browsers to die. But it's still better than having to do that same wait perpetually.
So, I guess I should point out that I've read a lot about conceptual React stuff, which all makes sense, but when it comes to actual application I just fail to understand how/why it works. I know all about the virtual dom and the diffing, but how components work together is what is lost on me. The top level of every page is just a component that combines other components into a page layout? Also, the few components I've tried to write result in (to me) a tremendous amount of javascript just for a simple component. I saw that diagram that Pete Hunt (I think?) drew which separated each DOM component into its own React component, and I thought that was a relatively bloated approach (but I assume that is more just my own misunderstanding than a problem with the library).
Highcharts is worth the money if you do a lot of charting/graphing. We previously used fusion charts and as flash has grown out of favor we needed to either update fusion or look elsewhere. Highcharts does everything we need at a fraction the cost of fusion (they are ridiculously expensive). Highcharts is good, and their support is quite good as well for a small outlet.
What would you want to use?
&gt; it's not a coherent class keyword, it's syntactical sugar What's wrong with that? I love sugar, both the programming and culinary varieties. &gt; No one I know really creates objects like this. Most OOP patterns in JS can be accomplished with object literals, if you want. There are many ways to skin a cat. &gt; There's also a desire, I think, to move away from inheritance in general I don't see a problem, short-to-mid term, in making it sweeter for people who want to do things that way (and will, no matter what). Especially because such changes are going to take a really long time; might as well be comfy on the journey. &gt; For instance, how does the class keyword inform/aid mixins? Does it hinder them?
Think of it from "Everything in javascript is just a function". And functions can define other functions, contain functions. You can derive a function from another function. The only point i'd agree with you is the inability to use destructors. Those would have been so helpful at times. At anyrate, javascript's use of functions for everything allows you to create class-like paradigms without strictly adhering to what you may have to on say Java or C++. You can have protected, private type access without having to add syntax keywords. This also gives you more flexibility in how to implement "classes". I've found in other languages that have strict class types, that there's always piles upon piles of "corner cases" that must be implemented at a syntax level (such as friend classes, templates) that really are just bandaids because the class spec/syntax didn't work so well for everyone. I believe javascript only tries to add to the language syntax when whatever functionality can't be replicated via other ways/semantics. You can represent the semantics of a class already, by adding syntax it doesn't give you much beyond easier validation/maintenance, and if you need that, just use a transpiler. 
Interesting perspective, thank you for that. &gt; if you need that, just use a transpiler. [Already do.](https://github.com/google/traceur-compiler) Obviously, it sucks because transpiling sucks.
A lot of the newer features _are_ implemented in v8, but they're hidden behind the "experimental features" flag. You can't really use them in the browser (unless you can make your users turn them on) but you can use them in Node v0.11 with the --harmony flag. 
What is polite about this library?
Oh, you can go completely overboard with it. Making each element on the page into it's own component would be where I labelled it overboard. You could also use React to "contain" a HTML subtree of just the interface involving that component. The biggest thing is breaking up your page into components that are easy to manage given data and with the latest updates, it's even easier to "hide" a specific component if the data isn't there. &gt; The top level of every page is just a component that combines other components into a page layout? It could be. You could make a "ReactDocument" component that went through and loaded in every child from that point on just like a normal HTML page (written in JSX or React.DOM.*) but that's developer preference. You could also make "widgets" for your regular page that get sent to React to deal with ( I think Facebook actually does this now, Facebook is not entirely React, but they use React for components of the page. ) I'm curious what your components were doing to net a "tremendous amount of javascript" I'm fairly new to React and have only been doing pretty simple stuff with it, but the component itself is fairly simple as far as getting the appropriate data to the correct element. I could paste arbitrary examples, but I don't think that'll help and they'd look like the official docs examples for the most part. I will say that the [Thinking in React](http://facebook.github.io/react/docs/thinking-in-react.html) example was great for getting my head around it. I think I would have shaped my data object a little better for the example, but it was interesting how they got around the flat data and rendering in [128 lines](http://jsfiddle.net/F8H7p/light/) (including data). It also includes component interactions, which you stated you had some issue wrapping your head around. This includes filtering and searching, which would require some potentially long winded JS to restructure a typical SPA using templates or such.
This matches against .constructor, not with instanceof. This is not 100% "safe" -- see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor -- but its good enough for most cases. 
&gt;I don't see a problem, short-to-mid term, in making it sweeter for people who want to do things that way (and will, no matter what). I mean, I'm not exactly up in arms about it. I'm just generally opposed to or disinterested in the keyword, and I tend to think it indicates the ES6 process isn't as solid as we might like. &gt;Does it hinder them? Of course it doesn't; that's not the point. The point is that it's unaware of them. Class abstractions in current Javascript culture have nothing to do with the 'class' keyword. The 'class' keyword only captures one particular behavior, and not a (in my view) notable one. It isn't a step forward to add syntax to a language (that already has enough useless features) encapsulating a doubtful habit just for people uncomfortable without it.
&gt;I've found in other languages that have strict class types, that there's always piles upon piles of "corner cases" that must be **implemented at a syntax level** And that's exactly it; in Javascript we've been free to implement specific desired class behavior _programmatically_. Even destructors are something you can program into a Javascript object, with the exception that they can't be invoked automatically before garbage collection... except I think that's a good example of something that, because you _can't_ do it, you have to manage more specifically and elegantly. You _should_ have to keep track of making sure your models destroy themselves; if it's that important, it shouldn't be automatic. 
I used Sencha for a project once. It looks nice and wasn't bad to work with, but it was terribly slow compared to other frameworks I've used.
Because it obfuscates the prototype based inheritance which we love and understand - and which confuses many "hard" coders. Once in a while a wild post appears here - a post from another c++ devotee who semi-understood prototypes and now will rescue the whole poor javascript community with his genuine `class like` approach - which is of course nothing but unnecessary layers of abstractions and wrapped scopes. 
I make games. I use oo a lot. However - functional code can also be readable - I love the source code of [Heroine Dusk](https://github.com/clintbellanger/heroine-dusk/tree/master/release/js)
I'm sorry, but it appears as though your post doesn't meet our [Guidelines](http://www.reddit.com/r/javascript/wiki/index), mostly because it really doesn't have anything at all to do with JavaScript, and is merely self-promotion. If you'd be willing to post a link to your source, or write a blog post about your architectural decisions, etc. then the post would be welcomed here. Thanks for your understanding!
&gt; [...] a post from another c++ devotee who semi-understood prototypes and now will rescue the whole poor javascript community with his genuine class like approach lol, I'm picturing something like the [xkcd: Regular Expressions](https://xkcd.com/208/), except the hero says _"I know classes!"_
[Image](http://imgs.xkcd.com/comics/regular_expressions.png) **Title:** Regular Expressions **Title-text:** Wait, forgot to escape a space. Wheeeeee[taptaptap]eeeeee. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=208#Explanation) **Stats:** This comic has been referenced 53 time(s), representing 0.1995% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcdcomic/)/[kerfuffle](http://www.reddit.com/r/self/comments/1xdwba/the_history_of_the_rxkcd_kerfuffle/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cixegmg)
Understanding a prototype isn't exactly necessary to be able to write the vast majority of day-to-day javascript. You are limiting yourself, though, if you are not able to make meaningful use of the tools you have available. In the javascript-application world, we certainly make use of OO features and principles in our day-to-day work. For instance, if I am tasked with the ability to create an 'order' with a set of 'customers' and 'items' on it, you better believe I will have objects that represent each of these entities. In the instance that a specific type of 'customer' needs to have specific behaviors or override defaults, I am not going to copy/paste the customer class and make changes; instead I am going to figure out my inheritence chain to setup this relationship in a cleaner way. This all doesn't come in a day - architecting an application is often not junior-level stuff. If you're unaware of how this stuff works, hopefully you're not in a position to have to make use of this knowledge just yet.
I am working on an in production webapp powered by Angular of a pretty decent size (about 20 routes). I never use prototypes nor inheritance. I'm vere well aware of how you do these things in JS, and I've done so in other projects. But with the structure that Angular provides (dependency injection, MVC, services) I havent found any need. And I program my controllers in a functional style with Lodash. That's my experience with a CRUD app. But obviously other use cases might benefit from the inheritance and encapsulation OOP gives.
yeah, except - nobody is clapping 
I have switched one of our pages to rgraph because we needed some graph/chart styles that highcharts didn't have. Other than that it was easy to use and work with. 
I can see that being pretty handy.
I don't use inheritance or even polymorphism on a day to day basis (and when I do, I prefer to use parasitic constructors over prototypes), but *encapsulation* is the most powerful tool in my arsenal. Only by encapsulating private state with lexical scope do I ever feel confident reasoning about a program. Surprisingly, though, this is why I tend to eschew the most popular element of JS OOP these days - the prototype. Prototypical inheritance does not let me inherit private state or grant safe access to non scalar values, whereas parasitic inheritance gives me pseudo protecteds and makes me confident that any maintainers won't have to think too hard about the misuse of static methods (as they may with prototypes). In terms of approach, I would say that I've gained more power from functional constructs like lambdas, functors, curries and monads than classical inheritance. I think it's pretty much agreed in the comsci community these days that code reuse is probably the weakest reason to use OOP.
The javascript community hates change and learning. If it had its way, we would still be copying and pasting functions from the geocities.com view source.
Hmm, sounds logical. I guess I'll research this tomorrow. Wrapping second code block to run when specific event runs sounds fine.
Thanks :). Ya, I usually have JSHint running in my grunt config, but never got around to adding it to this one. I'll be updating that later today. I also need to add in Jasmine so I can start creating tests.
It's very slow as components relayout constantly. Writing performant components and using built in components in a performant way really requires a lot of effort and attention to what you are doing. We've done some preliminary spikes that indicate both Angular and React are dramatically more performant. It has a steep learning curve. It's very difficult to customize components to meet new functionality. Recently we have found ourselves usually opting to use Ext.XTemplate and creating template driven components instead of container based components, but at that point you're far better off using many other frameworks which were designed with this approach in mind. Upgrading from 4.0 -&gt; 4.1, then 4.1 -&gt; 4.2 was *extremely* painful. Other misc things include not a single developer at our company (really, not a single one) coming away liking the framework. The docs seem adequate at first but when you're really digging deep into Ext, you often find you just have to read their source code extensively. Backwards compatibility is an afterthought, if even that, for Sencha. The upgrades were so painful because they change method signatures, method functionality, side effects and just about anything they please as they wish. We even worked directly with Sencha and one of their developers agreed and admitted that they do that. Each new release couples the build process even tighter with their tools. For example with Ext 4.0 we were able to take their SASS and integrate it with ours to build our stylesheets. With 4.1 and then 4.2 and Sencha Builder, Sencha actively did work to try and make this as difficult as possible to tie you into their tools as much as possible. ExtJS is entirely built on outmoded concepts that are really largely going away. Essentially container components which contain prebuilt components. The components attempt to be stand alone, the containers attempt to lay everything out, and it's all 100% driven by JavaScript. We often joke that Sencha rewrote the HTML layout engine in JavaScript. So when you start digging in and seeing the kind of DOM Ext is giving you, it's incredibly deep and bloated (divs and tables **galore**!), and directly placing styles right on elements and using absolute positioning is the order of the day. The assumption is Ext Layouts can lay out the components better than HTML and CSS can. Which may be true in some cases, but in many cases you just end up fighting their layouts *and* receive a huge performance penalty. Ext is completely monolithic and about 2 megabytes of JavaScript. In theory you can only package what you need, but Ext components pretty much end up needing all of Ext, so trying to chop that 2 megs down is futile. They use Ant, Ruby, and their own proprietary tools for building. The whole community has completely gone to node for this, and integrating Sencha tools with a typical node build process can be difficult. I could go on and on with this stream of conscious post. Ext isn't too bad if you're doing simple stuff and want some fast components thrown up on a webpage. If you're creating a cohesive, large, longterm web application though, I can't recommend ExtJS whatsoever. 
ALL of the UI is added through modules. When it starts up it requests that you install the module for the search bar and tabs.
JS pls
I'm actually shocked this is even a question. Do you know any professional who doesn't?
I don't think anyone is objecting to inheritance as a tool, but rather the reliance by (novice?) developers who can see an opportunity to reuse implementation but can't see costs in terms of coupling and the value of 'locality' when reasoning about how something might work. Whilst I appreciate the comsci community has been railing against inheritance for some time now, I still see a lot of articles, blog posts and email list posts 'introducing' inheritance and prototypes as the Secret Sauce to less experienced JS folks. That's what I'd say the issue is.
Angular's $scope object is a great example of prototypal inheritance in JS. There is one $rootScope object per application, but there can be many child $scope objects. If we create a property on $rootScope and then in our controller we can access it from the $scope injected there. Unless we shadow the property on the controller's $scope object. app.run(function($rootScope) { $rootScope.userId = 1; }); app.controller(function($scope, $rootScope) { console.log($scope.userId); // logs 1 $scope.userId = 2; console.log($rootScope.userId); // logs 1 }); The source code for this is pretty simple. It's all in the $rootScope.$new() function. If we're not creating an isolate scope, then create a new $scope object that inherits from the parent scope. https://github.com/angular/angular.js/blob/master/src/ng/rootScope.js#L186-L200
Could you clarify what you mean by "coherent classes"? I don't like it because JS doesn't natively support the concept of classes. JS has prototypical inheritance, not [classical inheritance](http://www.crockford.com/javascript/inheritance.html). Adding the `class` keyword to the language implies that JS is behaving in a way that it is not. I'm all for the syntactic sugar, but I don't like it at the cost of clarity or the ability to make reasonable assumptions about the language. I'd much rather TC39 adopted a different keyword like `proto` or `obj`. That said, I imagine there are technical and historical limitations that prevented them from doing so.
I've used [jqwidgets](http://www.jqwidgets.com/jquery-ui-widgets-toolkit/) and [KendoUI](http://demos.telerik.com/kendo-ui/). Jqwidgets is a bit better value for the $$$.
CoffeeScript features not currently in JS (although most/many are coming in ES6), in order of usefulness (IMHO): - [Splats](http://coffeescript.org/#splats) - [Object destructuring](http://coffeescript.org/#destructuring) - [String interpolation and blocks](http://coffeescript.org/#strings) - Comprehensions - Concise function syntax - Inline if-else - Classes (the last thing JS needs, but if you're going to write classes in JavaScript, you may as well skip the nonsensical hoops you have to jump through to get it to work right)
[I've been trying to wrap my head around Functional Reactive Programming](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754). It's nice to not have to worry about state as much...
As noted by /u/Wbeard its a call order problem. If the user of your library is dropping a script tag into the page it will be evaluated before the DOM ready event fires (the `$(function(){ /* ... */ })` call in your app.min.js file). If I may, why are you wrapping the contents of your window.app declaration in the jQuery call? It also looks like you're using Angular or something. If it is angular you should replace the `src` attribute on your script tag with `ng-src`. I'd also be curious why you're conditionally loading jQuery rather than just always inserting it. It seems like the most direct solution is to remove the jQuery wrapper and replace it with a static window.app assignment in app.min.js. This will should guarantee that jQuery is ready when your app is declared and that your app is ready when other code blocks are encountered. **HTML** &lt;html&gt; &lt;head&gt; &lt;script type="text/javascript" src="/foo/bar/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/foo/bar/app.min.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- ... --&gt; &lt;/body&gt; &lt;/html&gt; **app.min.js** ;(function(){ "use strict"; window.app = { json: {}, initialize: function(json) { this.json = json; } }; })(); EDIT: By the by, when you declare `window.app = foo` you're making a global ;) Yes, it's good practice to limit the number of global vars you create, but you don't have to go crazy. Thing of your main app object as a namespace. If you want to populate that namespace with some data but it doesn't exist yet, just make it. ;(function(){ "use strict"; var app = window.app || {}; app.jsonData = { /* ... */ }; window.app = app; })();
ES6 is a long way off currently as well. (especially if you have to support IE). I think also that you need to really dig into the documentation. It takes a concerted effort to use coffeescript's goodies everywhere you should. OP said only diff is leaving out ; and comma, but what about arrow functions, brackets on control structures, ruby style suffixed ifs for example: alert "It's cold!" if heat &lt; 5 I think you need to read through this: http://arcturo.github.io/library/coffeescript/02_syntax.html to get a better idea of coffeescript's elegant alternatives to native JS. 
Thanks to Angular's dependency injection, you can bring together lots of factories/services into your controller, so you really don't need to use prototypes at all. I just would advise to use them where you need the best performance, because V8 might be able to optimize JS code better, when many instances of one pseudotype share the same prototype object.
&gt; Could you clarify what you mean by "coherent classes"? The way to currently follow a class-like pattern is obfuscated by usage of function, .call, and setting prototype equal to "new" something. It is wonky as fuck and most new developers don't even learn about prototype because it is such. &gt; Adding the class keyword to the language implies that JS is behaving in a way that it is not. I wouldn't be able to tell the difference, and I think that goes for almost the entire community. "class Foo extends Bar" is silky, English-readable syntax, which JS needs more of. 
i find people use oo indiscriminately while what they seem to really mean is used class-based inheritance. it is sad that class-based inheritance is the only thing devs are taught. i recommend this for an alternative viewpoint: http://bibliography.selflanguage.org/_static/organizing-programs.pdf
Well, JS hasn't changed substantially for like a trillion years. Ironically, this probably saved the Web back in the IE6/FF2 days; JS, omitting the DOM API, was the only thing you could rely on to behave consistently! As for sucking at change, it was the same way for CSS devs once mobile became a thing. Some people *still* don't understand transforms. Things will start turning around for JS faster; in a year or three, I think.
Hi, Okay, so I believe the $ prefix is a shorthand for domready event for jQuery. Well, actually, we're developing an application that will run on other websites. You can think it like Google Analytics codes. User will get the code from us, and place out widget somewhere in his page. The reason we manually load jQuery is because our widget allows some jQuery plugins to be dynamically attached. User can select which jQuery plugins they like and generate their code. So, our loader.js checks the page if jQuery is set. If not, it loads the jQuery itself with any other plugins that has to be loaded. That's why we can't always load jQuery. Some pages come with jQuery set, some pages doesn't have jQuery, some pages has old jQuery versions which require .noConflict() and such. Loader.js handles it all for us. I don't use AngularJS. (though I really would like to use it one day) This handlebar syntax is used by Laravel, a PHP framework. The reason I wrap my `window.app` declaration in jQuery, is because when I remove the `$` prefix, I cannot use the features of jQuery. (that means, no $('.something') selector, which I widely use.) At first, I thought about developing it using vanilla js, but then the company wanted jQuery plugins to be allowed so I use jQuery, and while using jQuery, why not use it's awesome selector? :) By the way, what is the reason for `;` prefix? Also, the reason I use `window.app` is because I was previously told that it was one of the ways to access `app` from outer scope. (the html) That's why I use `window` to make `app` accessible from outer scope. If there is a better and alternate way, I can use it. Thanks alot for the example scripts. I can compare them to mine and see what mistakes I did. :) 
Anytime. You might even be able to code it as a generic duck-type check if you use Object.keys and a little recursion. It might also be nice to be able to... var t = require('typejs')({errors:false, silent:true}) ... maybe this is already possible. Didn't notice from the documentation.
those kinds of inline ifs are bad IMO. Maintaining them is hard (add logic and the line just grows towards your line border),change the behaviour(If it's cold send a signal to your smart thermostat(Smart House NOW plx!)) etc. New developers in a project can't easily see them or know why they are there. They often bunch together into a mass which is hard to read: It's freezing!" if heat &lt; 0 It's cold!" if heat &lt; 5 It's chilly" if heat &lt; 10 It's mild" if heat &lt; 20 It's warm" if heat &lt; 30 It's too hot" if heat &lt; 40 and again hard to maintain. drop another one in there for if the temp is precisely 37 degrees and it is a Wednesday. I also continually see: return blah if something matches condition return always stands out the conditional is easy to miss. I also totally can't wait to see someone write "CoffeaScript" (Coffea is the genus of plant that products coffee beans). Which compiles into CoffeeScript which compiles into JavaScript. 
While i love the functionality and the name. In the context of code it makes less sense. A developer skimming code is going to have no idea that this is a color framework. That's only a naming concern though. Pretty colors are pretty. 
[nvd3](http://nvd3.org/) seems to do a good job these days as a library of free charts. Also check out [dc.js](http://dc-js.github.io/dc.js/).
My team uses Google's [Closure library](https://developers.google.com/closure/library/) and compiler. It feels somewhat like writing Java, for better or for worse. I like that the compiler can do some static type checking (based on annotations) but it's not perfect, and some errors slip through. Still, it's a lot more manageable that plain Javascript for a team of 8 developers.
I concur with all of this. Spent half my days in the docs and the rest were trawling through forums where people had written endless addons. Such a large library shouldn't need them.
I'm glad that the class keyword has been added, mostly because it'll set forth a standard for classes and put an end to custom implementations. But that's not to say that classes should be the only paradigm in javascript, just it's a kind of minimum acceptable solution for people that aren't sure how to model something.
Object Oriented, as in your primary interactions are with objects full of properties and methods, yes. That's most of what you do in javascript anyway. Need to manipulate a DOM element, you get the object that represents that element and change its properties. Now, as for class and classical inheritance, well yes and no respectively. The class keyword in ES6 will make it even easier to model a class, rather than having to extend the prototype and hurt my fingers in the long run. But classical inheritance is still a minefield, and a lot of behavior you need from objects is best done as objects that contain other objects that compose together.
OO is a lot more than just inheritance. If you're talking about objects that encapsulate their data and expose public methods for interacting with the data, then yes, OO is prevalent in JS apps. Consider jQuery -- `$('.foo')` returns an object with methods for interacting with the collection of matched DOM elements. Under the hood, the composite pattern is used to provide a common API for one element or many elements (e.g. `$('.foo').show()` can show 0, 1, or *n* elements). However, calling `$('.bar').show()` has a much different effect, even though the same method is called. That's OO. In Angular, you're encouraged to encapsulate services into objects that can be injected via dependency injection. The objects are generally singletons (lowercase "s"), but you can also provide factories for creating new objects. Angular also uses prototypical inheritance for scopes, which can simplify templating. But overall inheritance in JavaScript can be rare depending on the team.
I came from a background of developing mainly with Java and using OOP style before my current job which heavily uses Javascript (Node.js as well as front-end JS). I initially found concepts of inheritance and functional-style JS (among other oddities) to be very strange and unfamiliar to me at first, but you eventually get used to it. You should check out some books if you want to familiarize yourself with it: "Javascript: The Good Parts" by Douglas Crockford is certainly one I would recommend, as well as many others published by O'Reilly (I have found their books to generally be more reliable in terms of actual working code examples, and overall they just seem more organized IMO)
I use Object.create() a lot, and tend to favor domain model type objects over transaction scripts and literals. I love prototypal delegation for polymorphic methods. I do use FP for some things, though, especially collections.
Object.setPrototypeOf(obj, proto) is the standard way. You're right that it has debuggability and performance concerns still, however.
For anyone that wants to learn Angular JS without reading 20 books, I highly recommend checking out the free series at https://egghead.io/articles/new-to-angularjs-start-learning-here
http://stackoverflow.com/questions/245062/whats-the-difference-between-javascript-and-java Ignore the first couple of joke answers
Hes trying to communicate that you said &gt; but I don't see where it's functional. There are multiple for loops used that can easily be replaced with array.map. and he gives a direct example of ArrayMap from the code
Ah okay. So I should be putting my event listener in the for loop then? Because then it would be creating a listener for each marker created. Correct?
Using an array map is the object oriented approach, not using one is the functional approach. Once you decouple an object from an operation and make it swappable by passing it through as a variable object it becomes object oriented programming.
Yeah that quirk also occurs in the interface that I'm trying mimic, but you're right it is a bit strange and I'll fix that. http://www.polymer-project.org/components/paper-elements/demo.html#paper-button 
This is a depressingly vapid article with a dearth of useful information. It's a shame this stuff makes it to the front page. 
He might be referring to the somewhat popular... var isArray = obj.length &gt; -1 ... or that type of thing. Checks for array-like objects.
I've got two apps right now I'm building. I'm using a mix of oo and regular code. There are cases where oo helps out a lot with pretty code. Though if it doesn't need oo structure, I'm not going to go through that effort.
A nice alternative to inheritance is to use mixins and to mixin properties that may be common across your objects.
Do I need to preserve state? (e.g: some entity in a game) -&gt; OOP. Am I transforming some input into some kind of output? -&gt; functional. (most of the code). Something algorithmicky? -&gt; procedural. Am I on a tight deadline? -&gt; obfuscated brainfuck and pray i don't have to touch it again. 
I'm currently lead architect for a multi-thousand-line production enterprise JS project for my company - I would say after writing multiple enterprise apps with Angular that OO is built into the MVC paradigm, so it's best to not think strictly about OO as it is to think about the design patterns given to you by Angular.
I'm not sure about Angular -- I work in back-end, and we use Node. I'd say OO isn't *particularly* huge in what I do personally, because Node uses the module paradigm. In browser Javascript, you have to encapsulate everything because of namespace collisions, but in Node, each module is its own separate thing. There'll usually be one constructor in the module (depending on what the module is for) that loads all of the needed configuration, and you call functions on that object. I have so far not come across a single instance of inheritance at work. At my previous job, we used Perl and there was indeed an inheritance hierarchy (yes, just one) in my team's module because we needed so much custom code for special cases, but we haven't reached that point where I am now. That said, in my personal JS projects (like games), I do use inheritance aplenty. I'd say that, compared to Java, JS is a lot easier to code in and to fuck up in. I can dynamically create an object and call a method on it that it doesn't have, crashing the application, and there's nothing the compiler could do about it if it even existed. But the difference in paradigm here is that Javascript objects are ad hoc structures while Java objects are data types. I can put some shit in a pile and call it a Javascript object, but in Java, it would need to be a Pile template of objects that implement the Excretable interface or something like that, and it would need to happen at compile time. So it's quite different. Javascript also has closures, which basically means that you can use variables from the enclosing scope when you define a function. This means you generally define your functions inside other functions, especially when -- as you do all the time in Node -- you have to define a callback. It basically means that you don't need to carry around a constructed object in order to get the stuff you need. To put it another way, object-oriented programming is nice but Javascript generally does things differently.
Yes, there are good patterns for that. Those patterns work well with other people's constructors, but sometimes we want to use other people's decorators. e.g. `_.memoize` or `_.once` from underscore.
Yes, the event listener should be in the loop so you can create one listener per marker. The concern I have is with overwriting the marker variable. You could just reference each one as an element in your marker array - then it wouldn't matter.
Honestly the only reason to use CoffeeScript is if you are heavy into OOP JavaScript. If that's the case, you'll find that CoffeeScript is an amazing language that abstracts away the pain points of using classes/ prototypical inheritance in JavaScript. That being said, for most mundane tasks it's not very good. If I had a choice at work I would be using vanilla JavaScript. :(
&gt; I encountered multiple situations where there was something I wanted to do in CoffeeScript, and I couldn't, so I had to use the `` plain js instead wat. I thought you could do absolutely everything with coffeescript. You have to use plain old javascript inside CS? I knew my knee-jerk reaction of not liking CS was justified. All these reasons suck and I'm glad I never had to experience that.
30? Ho do you JS-folks don't find it funny/ridiculous? 
I'm so excited about some of these, I need to get into nvm and find a way to use these ES6 features.
I'm really curious as to what kinds of things you had to resort doing in JS. As far as I know, the only thing you can't do in CS that you can in JS is variable shadowing, and that's an intentional design choice. Complaining about things happening implicitly is just *not* a valid complaint when you're talking about Javascript, which implicitly casts stuff around all freakin' day long. Sure, it doesn't have implicit returns, but it certainly has implicit globals and automatic semicolon insertion and type coercion, which are *far* worse evils, IMO. Not only that, but the implicit returns are an explicit feature of functional-style programming; you're *supposed* to be thinking of everything as an expression, rather than thinking in terms of imperative state mutations. The "you can't compare code" thing used to be a valid complaint, but we have source maps now. You can debug Coffeescript directly in the browser now.
This is blog spam. Many of these aren't even relevant.
How would you write that in javascript?
Our app took the same approach, but we have recently been moving towards OO since we updated our angular version to support 'controller as' syntax. It offers a lot of nice encapsulation benefits and helps prevent *scope creep*.
exactly - i like CS but have never used its classes - I prefer the js way
&gt; I'm really curious as to what kinds of things you had to resort doing in JS. As far as I know, the only thing you can't do in CS that you can in JS is variable shadowing, and that's an intentional design choice. I stand corrected, I cannot find the code anymore where I had to include javascript, my source for the code unable to run was an old stackoverflow post. &gt; Complaining about things happening implicitly is just not a valid complaint when you're talking about Javascript, which implicitly casts stuff around all freakin' day long. I disagree, while JavaScript's implicit behavior isn't good, adding more doesn't do the language well. &gt; The "you can't compare code" thing used to be a valid complaint, but we have source maps now. You can debug Coffeescript directly in the browser now. Fair enough, that'll make debugging better. My opinion still stands though. It raises the barrier of entry for collaborating on (github) projects, I don't think it's (sufficiently) more readable than JavaScript, and I generally dislike how it does things implicitly for you.
I can attest to extjs being a bunch of garbage. I used it for a project and spent months getting little things to work and had to hack my way around it all. Now since I understand Javascript a lot better, I have been able to rewrite the entire project using simple jQuery in a much smaller fashion. The complexity that extjs had was simply not necessary. I also remember going through the docs and cursing at them because they did not explain things well enough. And the developers of it do as they please, consistency is not present. And the speed difference of my jQuery written code versus extjs is astonishing, not to mention now all of my bugs are gone. Since converting I have been able to add some new features to my project/system that would have taken an unimaginable amount of hacks to work with extjs. TL;DR Avoid extjs like the plague. 
I was using a promise lib once with CS and CS did not like the libs chainable catch methods. Dont know of it was a bug or my lack of CS mastery. Overall, i still like CS but as of late i have used just vanilla JS, mainly because when used with angular CS feels kind of verbose compared to non-framework development in eg node. I think CS has its place, and its going to be interesting to see how the ES6 stuff is going to be implemented.
Could be better. Lots of repeated code and hard-coded values.
Hello. Yes, I'm a little hard to follow as I've at least 5 different names :)
Hum... I can't reproduce that :\ *(but I'll try again)*
So much this.
Angular encourages you to use not-actually-OO objects (usually POD/POJO or a derivative of the `ngResource` module), instead encapsulating everything into controllers, scopes, and directives, and sort of leaving you on your own to enforce any kind of structure to your data. I would say that, for the few Angular projects I've worked on, maintainability was significantly hampered by not having distinct types. Other frameworks do not encourage this in the same way. Projects that include Backbone have discrete objects as Model subclasses, and go a step further with custom Collection types, too. Ember has Ember Data, which is sort of like `ngResource`, but AFAICT Ember encourages data encapsulation into OO types. I haven't used Ember on a project yet, though, so take the previous claim with a grain of salt. AngularJS is sort of special when it comes to application architectures. You definitely have to do things "the Angular way" (which is usually not your first instinct until you start thinking in "the Angular way"), otherwise you will definitely be fighting the grain the whole time.
ToDoMVC - I had no idea it was a development framework. Here's me thinking it's more of a reference/set of examples.
Oh god ... tests. I reeeally need to learn how to test properly :D
I can use js to change the css and html of course, how else would you do it ? :p
I would suggest trying to get your head around Inheritance and the prototype chain. While not essential, i have found it very useful to be aware of/understand. Function wise, take a look at apply(). Also i recommend MomentJS (http://momentjs.com/) if you are ever dealing with date/time.
You learn something new every day, whether it's true or false...
1; Everyday is a school day! =]
Needless to say I have a lot of Brown experience. But to be honest I-m comfortable with other colors too. Call me a carpenter for any color if you like. ;)
Well, you yourself aren't using prototypes or inheritance, but, if you're using scopes correctly, Angular is for you. Each child scope sets its parent as its prototype. Understanding how prototypes work can really help you figure out why variables are getting lost and not propagated around the app correctly. That all being said, using more elaborate models than pojo greatly facilitate communication between services. A lot of the pojo that comes down from our web services gets wrapped by more complete objects, which use inheritance.
array map still uses a for loop under the covers rather the recursion, which would be the functional way of iterating through a list.
I use the natural inheritance that comes from lambda expressions and try to avoid OOP. OOP is really nice if you cannot program without some declarative nature and want to manually specify how inheritance works at every turn, but I would solve problems more directly.
Check out a similar library I made a while ago https://github.com/antivanov/jsAspect
Cool, ok, so yeah so set [`display:table`](https://developer.mozilla.org/en-US/docs/Web/CSS/display) and set some inner elements to `display:table-cell` and it will align heights like a real table. You don't need `display:table-row`
I'd hand it to a localizer, it's their job. They could use http://l20n.org it looks cool.
Hey Beakers. I just found your engine while googling and I must say it seems very interesting. The one problem I am facing is that seems incredibly heavy at the moment. Running your demo samples is slowing my laptop considerably. I was wondering if you have attempted any simple benchmarks which I can check out. Also, if I were to use your engine, where could I ask questions and be part of the community? If you dont have a place for the community yet, i'll suggest still adding links for it in your git site and pointing the links to stackoverflow with your lib as the tag.
Oh come on... I clicked this thread only to read some sarcastic comments and there are none :(
Link to demo?
I like this list. One comment though. Preserving state has nothing to do with OOP. There are a lot of (not pure) FP languages with mutable data structures which allow you to preserve your state.
I avoid prototypes and inheritance whenever I can and use mixins and composition instead. Nice article: http://raganwald.com/2014/04/10/mixins-forwarding-delegation.html I also have a rather complex JS project (front-end) which doesn't use OOP at all. It uses FRP (bacon.js). http://baconjs.github.io 
Yes, I was going to say this. For example, we have a library which mimics the computation expression builder in F#. We also created a library built off of this which manages state and transitions.
Well said. Super important to understand what Angular is doing with the $scopes and how their object model works. Worth noting also that using OO principles with controllers can greatly assist in architecting ngApps http://www.devign.me/angular-dot-js-coffeescript-controller-base-class
Yes, but then, are they really the best tool for the job?
I think what's happening is the ruby vs js debate that is sort of silently happening. I normally see this happening with LESS vs SaSS, but also see it developing here. While Coffeescript is not ruby, its syntax is closer to ruby or python than it is to JavaScript. Which, to me, is pretty damn silly. But to someone who is used to writing code distinguished by line breaks rather than punctuation they might like it. Just my two cents.
I tend to prefer thinking of TDD not as a rigid process; it's not about writing tests first or what not, but more about being mindful that you want to write tests for things and make your code testable. To that end, you end up naturally: 1) Making smaller chunks of logic 2) separating concerns 3) injecting your dependencies 4) giving more thought to the non-happy path code flows In that respect, you may not be writing traditional TDD, but you end up writing better and more maintainable code that is easily lent to unit testing. You can make tests for things when you have no implementations for a specific dependency and continue working.
We are using native object oriented features and once you get used to the specifics of the JavaScript, it becomes quite easy to use. We have built full-stack javascript SDK, completely object oriented without a problem. But as I said, there are bits and pieces that are tricky in the beginning.
A lot of it comes down to style and the function in question. I try to validate for catastrophic errors or situations where clearly the input is incorrect. Otherwise I tend to fall back to default values where applicable. If a method needs more than a few arguments and isn't getting called in a hot code path (ie. Image processing) then I use an "options" object as the parameter with a bunch of optional arguments. Edit: I also typically avoid arguments.length since it may be misleading. Ie. If the user passes undefined explicitly. 
Overall, this method is pretty good because you would indeed only have one repaint but it's important to note that you would have to calculate heights before making the copy or on the original element that is in the DOM for this to work. That is because an element that is not in the DOM has a height of zero (because it is not rendered), therefore you would not be able to know which element has the biggest height and set the others to this height. You can test this easily on reddit in the console : console.log($('#header-bottom-left').height()); // 45 var _clone = $('#header-bottom-left').clone(); //_clone is not in the DOM console.log(_clone.height()); // 0 $('body').append(_clone); // _clone is now in the DOM console.log(_clone.height()); // 45
It's all about defining a clear boundary for inputs, and ensuring robust validation at those points only. I've wasted too much of my life pushing my TDD peas round the plate validating inputs on methods that are only really used internally by an application. AMD/CJS module loading makes this a little easier to reason about, because you directly export your interface. That being the case, you can wrap those inputs in validation rather than writing it inside each function.
If type correctness is what you want, then it is a much better idea to just use TypeScript. I've been playing with it and am mostly happy so far. It doesn't feel as heavy-handed as Java's type system, and I like that it is JS + static types, and not some completely different language. Its optional nature and type inference makes it work *for you*, and not you working *for it*. 
based on what i've seen? no.
Sounds interesting. Some feedback - That page takes too long to tell the story. Also those arrow-in-circle things looked like buttons to press to see a video; when I pressed the buttons, nothing happened. 
Thanks for the feedback. It is actually a control for playing the animated Gifs. I'll look into it now.
Hey! Thanks very much for the nice comments :). Can I ask what browser and age of your computer? I've been testing it on various devices as I've been building. I've seen strange lag caused for FF on macs compared to Chrome but I think that was a strange one. Was there a particular demo that played up? Right now there isn't a community sadly. I've been trying to drill up interest into the engine and I've had a couple of people emailing saying they're using my engine but it never really goes any further. Most my effort has been with the reddit community though so maybe these are some perfect ideas! Thanks again rishav_sharan, it's great to read such messages after spending months grinding away at it! Iain
I can't read :p You should use promises for async operations anyway.
Sometimes complexity is required to simplify things. For example, JavaScript simplifies programming in binary, even though binary is less complex than JavaScript. Learning the concepts can lead to simplified code, where things like ranges and context-aware functions (fat arrow) reduce the number of lines required to write the JS equivalent expression. CoffeeScript is less about simplification, and more about compactness. It takes fewer lines of code to do the same work, which can sometimes simplify complex problems.
Check the account history, just spam from toptal.com. And they're idiotic interview questions to boot. Congratulations on a shitpost.
This is confusing. It seems to add unnecessary complexity for very little benefit. The `Logger` function is now serving two purposes: as a constructor when using `new`, and as a factory for connect middleware when not using `new`. This would be easier to grasp if there were two distinct functions: new Logger(); // constructor Logger.middleware(); factory for connect middleware
Have you tried using other canvas libs? If you have — I'd be curious to hear how pixi compares. https://docs.google.com/spreadsheet/ccc?key=0Aqj_mVmuz3Y8dHNhUVFDYlRaaXlyX0xYSTVnalV5ZlE#gid=0
Consider [Vanilla-js](http://vanilla-js.com)
From the [guidelines](http://www.reddit.com/r/javascript/wiki/index): &gt; If you advertise or promote a paid product or service, please be aware of [reddit.com/advertising](http://reddit.com/advertising).
Yep, that's what TypesJS uses.
The fiddle will only work in FF
Being a pedant but prototypal inheritance is OO. Just not traditional class based OO, ala Java.
I don't find it any more succinct than the straight up JavaScript approach? function add (n1, n2) { // Argument mitigation if (typeof n1 != 'number' || typeof n2 != 'number') throw new Error("both arguments must be numbers"); if (isNaN(n1) || isNaN(n2)) throw new Error("NaNs not allowed"); // Addition return n1 + n2; }
I do not use CoffeeScript but various blog posts like [Why CoffeeScript Isn't the Answer](http://www.walkercoderanger.com/blog/2014/03/coffeescript-isnt-the-answer/) and the ambiguous nature of the language steered me clear of making the investment to learn it. I mainly write Python so it isn't a case of me not liking the style, more over it is the fact that it is full of surprises and you can easily end up with subtle bugs. This is not a trait that in value in programming languages, I like predictability and one obvious way to accomplish something, something I'll trade for a little verbosity. At work the front enders are considering using ES6 converters. They get the fancy new features today and it is more "just JavaScript" than CoffeeScript, especially when it comes to compiled code, onboarding new hires and transferrable skills. 
I was literally just thinking about developing something which does this this morning. Seriously - thank you
What's the best way of making js behave like an oo language, and not a prototyped one?
Instead of using an anonymous function, you can just name it and call it through the events you want to use. For example: var submit = function(event) { // do your submit stuff } $('#internal_view').on('blur', submit); $('#apps_all').on('blur', submit); etc.
The problem with this feedback system, and all the ones like it, is that it requires you to use their bug tracker. My organization already has a bug tracker. We will not switch, because the current tracker's integration into our system is deep and indispensable.
The Closure compiler can do that kind of checks. However, you have to add rather annoying JSDoc-like type annotations everywhere. /** * @param {number} a * @param {number} b * @returns number */ function add (a, b) { return a + b; } There are also a bunch of to-JS languages to choose from. E.g. TypeScript, Dart, Ceylon, Kotlin, and so forth can do that kind of thing. Same as above (Dart shown, the other options are similar): num add (num a, num b) { return a + b; }
Sure thing! Thanks for your interest. Let me know if you have any questions. :)
CS is all about pressing fewer keys even if a dumb editor is used. It doesn't improve tooling or scaling. It also doesn't offer nicer semantics. So, depending on your priorities, CS can be completely uninteresting. In that case you should perhaps take a look at Dart and TypeScript.
Also relevant: http://www.slant.co/topics/1515/~what-is-the-best-solutions-to-the-javascript-problem-haskell-like-front-end-development
NO, it's not worth it. The only kind of checking I find I have to do is null/undefined checking, and that's on a case by case basis. Do you really want to add this to every function you write? Think about how often you get errors where the wrong types are being passed to functions. In my experience it almost never comes up. I'm not saying you never need to do this, but the cases where it's justified are few and far between.
`Object.setPrototypeOf()` will be the standard, but at the moment [its not widely supported](http://kangax.github.io/compat-table/es6/#Object.setPrototypeOf). Supported in: * Chrome 34 (current is 35) * Firefox 31 (current is 30) * Internet Explorer 11 (current is debatable) 
You could set an array of your checkbox ID's and use something like: var checkboxes = ['#check1', '#check2']; function checkboxClick() { checkboxes.forEach(function (checkbox) { $(checkbox).click( function (event) { ... }); }); } EDIT: although frankle's solution is probably nicer.
I think abstraction is key to a lot of coding, not just functional
spreading the word of interesting stuff.
Just installed, nice work so far! I don't have a whole lot of freetime or much experience with backbone. I have created a few chrome extensions using angular though. If you need some help down the road, I might be interested. https://github.com/orrybaram
http://usersnap.com/connect
It's more readable when the person reading doesn't know JS very well :-D I've raged against CS for a couple years, but I'm still working in it and slowly forgetting what real JS looks like...
Hi! Thanks! :) Went ahead and followed you on GitHub. Hopefully we can do some work together at some point!
Is that not a bit of a cop-out argument? "This code looks awful in CoffeeScript" "Show me it in JavaScript then" "Not my job sorry"
This is cool. Ours isn't on here, but I'm impressed.
I figured it out, thank you for the help. 
You can use a comma to include multiple selectors with jQuery. $('#internal_view, #apps_all').on('blur', submit);
Tweaked your fiddle but I think you've got the correct idea from /u/frankle. Added some minor styling and formatting changes. http://jsfiddle.net/t3DSw/ 
If only you had a way to get a console recording from Ayematey...
I'll try to get back to this to provide some more meaningful feedback based on your info, but for now I can quickly answer the ; prefix question. When reviewing other people's code you'll sometimes see a `;` prefix as a guard against unexpected results from concatenating/minifying files. Here's a quick contrived example: **file-a.js** (function(foo){ return function(){ console.log("Only a test"); }; })() **file-b.js** (a = 0) **minified.js** // Combined file-a.js and file-b.js (function(foo){return function(){ console.log("Only a test");};})()(a=0) Now if you run minified.js in a browser "Only a test" will appear in your console. If you look at file A and B in isolation it would be obvious that this wasn't intended, but it happened due to a naive concatenation strategy. The reason we add as semicolon before and after is we can ensure that other people's mistakes don't cascade into our code. That is, if a 3rd party lib appears before our code but they didn't add a terminal semicolon, the semicolon prefix guards us from that error. Similarly we add a terminal semicolon to guard against possible accidental invocation of a library that follows us. Here's the same minified code, but with the semicolon inserted: **minified.fixed.js** (function(foo){return function(){ console.log("Only a test");};})();(a=0) Note that if you execute this code in your browser it will behave exactly as originally intended.
http://usersnap.com/help/troubleshooting &gt; **Which browsers are supported?** &gt; &gt; We are supporting all major browsers. So... no clue.
I found the article [Handling errors in node.js](https://www.joyent.com/developers/node/design/errors) to be quite educational on this topic. The gist is to make a clear discrimination between *Operational Errors* and *Programmer Errors*. Is your hypothetic `add` function something that will be accepting external input, or is it taking fairly trusted values from upstream and simply doing a dummy check? Also, watch out for 'interesting' behaviours of `isNaN`. For example, `isNaN(null) == false`. My personal version of your example function would be: var add = function ( number1, number2 ) { number1 = parseFloat( number1 ); number2 = parseFloat( number2 ); if ( isNaN( number1 ) || isNaN( number2 ) ) throw new TypeError( 'Invalid arguments' ); return number1 + number2; } This is assuming the the data being passed to the function is already somewhat validated, and the exception is to track down a programmer error rather than a problem with the data. If the function is designed to handle external or untrusted input, the handling will be more explicit, but in my opinion this validation should be done in a separate function from processing of the data. 
Almost never. I like to use object literal format, so it keeps code nicely wrapped similar to a class, but its not OOP. i.e. ui_datelib - { // vars v_current_timezone: "UTC", // default timezone // methods init: function() { ... }, get_current_date: function() { ... }, add_n_days_to_date(v_date, v_days) { ... }, get_current_time: function() { ... } } 
There really isn't; I would suggest embracing the language for what it is. That being said, I would still advocate parasitic inheritance as the simplest and least problematic OO approach. Whilst it's true that not having static members isn't very memory efficient, most UI code I've seen only really employs single instances of e.g. widget objects. You can shove big hairy things in closures if you really want efficiency around static members, I suppose.
Impact is nice, it's clean and simple. If you are making a platformer it's very good, as that's the type of game Dominique really targeted. I'd now say though that melonjs is a good open source "clone" of Impact.
Object.observe will fix this. Unfortunately, it's not part of ES6. It will take a while until we can actually use it. http://kangax.github.io/compat-table/es7/
Hi, Thanks for the clear explanation. I wonder one thing though. Isn't ;function() alone is a syntax error? Why javascript parser ignores that? I'm pretty sure a similar use on PHP, C or C++ would throw a syntax error, but Javascript is so merciful on the use of semicolons. 
u need to have a look at an actual big app code to see how things r handled there. u will never appreciate non-OOP style like FP with lodash or lazy.js &amp; using closures for encapsulation, ..etc without seeing it in action. I think the guys have very good points but looking at code will be decisive in ur choices
&gt; Is there a universal way to do this for both browsers or do I need to use a browser check? Never do a browser check if you can avoid it, just check capabilities. Alternatively you could do something like checking whether variables are available, var x = e.pageX || e.touches[0].pageX; var y = e.pageY || e.touches[0].pageY; In practice though, just use Hammer.js next time. It's small and it normalizes browsers.
It's a bit shorter if you omit the descriptions: function add (n1, n2) { pre: typeof n1 === 'number' &amp;&amp; typeof n2 === 'number'; !isNaN(n1) &amp;&amp; isNaN(n2); main: return n1 + n2; } 
I think TDD is very explicitly about writing tests first. I think all of those things you listed are good ideas regardless of whether or not you're ever going to write tests, insomuch as they simplify maintenance. Maintenance is inevitable, but tests may never come. I may know from the beginning that I'm never writing any tests, but opt to do all of those things for the sake of maintenance, and I think calling that TDD is kind of ridiculous.
Check out http://twitcher.steer.me/ It opens the User endpoint, and that has a followers count value. This can be used without a backend with just JS/jQuery. I've used it, it's super easy to use.
Say my model doesn't change and it is a render only once, would you still make an assertion that the view rendered a model in the template as expected? something like: view.render() assert(view.el.outerHTML).equals('&lt;div&gt;some html here&lt;/div&gt;') that seems kind of pointless/brittle, since the template may change. Im just not sure how to use the TDD philosophy with something so simple. And if you're using something on top of Backbone like Marionette, what would you test here: var ProductItemView = Marionette.ItemView.extend({ template: '#product-template' })
I wasn't aware I had to backup my opinion with code examples. Just as a code review might fail the change and not provide a solution. I'm just pointing out that it might not be maintainable or clear what is going on.
So I am using Marionette which does abstract away a lot of boilerplate from Backbone. But I still have to create certain classes for things to work, such as: var ProductItemView = Marionette.ItemView.extend({ template: '#product-template' }) Following TDD would mean write a test first for this peice of code. But what would I test? There really is nothing going on. Personally, I just dont write tests for these kinds of things. Im just curious when people say they do TDD, how would they test something like this. 
You're right, that test is too brittle. An exact string match is too specific. Maybe try asserting that a div with a specific class exists in the rendered output by using a CSS selector like `div.foo`. Or if you are using dependency injection, you can assert that the view is created with the provided string using [sinon](http://sinonjs.org). 
JavaScript is also not the poster boy for traditional TDD imo - the language is so dynamic that maintaining your test battery can be more trouble than it is worth (some tooling can help here, such as grunt). EDIT: I should clarify I mostly mean browser based JScript here, as I've only messed with node just a bit. However, in other languages (C# comes to mind), its very easy to write tests first and then provide the implementation later and have a good confidence that your battery is providing value.
I like it, makes it easier to build objects. Current constructor + prototype setup is so verbose to write every time. The new keyword does the same thing but nicer looking. Note ActionScript 2 already did the same sugar layer, and with great success.
Mjah, I don't like Traceur specifically but `esnext` is pretty good.
Semantics aside, practically this new syntax clears up prototype code a lot while doing the same thing. I mean, this kind of stuff is so verbose: function Foo() { Bar.call(this); } Foo.prototype = Object.create(Bar.prototype); Foo.prototype.doSomething = function() { }; I like this a lot better, less crufty noise and repetition: class Foo extends Bar { constructor() { super(); } doSomething () { } }
Yes and no. Not very strict TDD as per ideal, but after years of experience I find it helps to write some code using the new API the way you want to use it before you write the actual implementation. I mean, if you write implementation first and only then use it in practice you may find you created something that doesn't quite work well or is obnoxious in usage. But if instead you write some snippets to figure out how you'd want to use the functionality you can be sure you will create something usable. And once you do that you might as well write it in the form of a test. Then you can implement it and run it and verify it is what you expected to be.
You can still do that. The class keyword is just sugar over regular verbose constructor+prototype setup. Nothing really changes, it only makes the code less crufty and more Dry.
Personal experience is by definition limited and may not reflect wider reality. I'm very pleased with this new keyword, but then I've used it before, in ActionScript 2 it was the same sugar layer over classic prototypes. That served well for years. Now I use the same in TypeScript, it is nicely concise way of getting objects with methods. Declared prorotypes work very well with JIT optimisations (like V8's hidden classes), less chance of slipping in 'bag of properties' de-optimisation hell.
I did, but with helpers to cut down verbosity of syntax. Nice thing about prototype methods is that each method exists in memory only once.
JS is so meta for such crummy old language. You can do a lot of interesting stuff and odd notations with it. Great power, responsibility jadajada.
Are you sure you want to do this? Usually you get the data as JS values and then build the table with that.
basically all you have to do is remember the id of the cell before the redraw. once redraw is finished, select the element by it's id and focus on it.
The Zen of Polymer is its killer feature in my opinion. Of course there might be some drawbacks but overall I think it's a step forward
Pixi uses WebGL so it is *really* fast. And it uses Flash's displaylist (tree) model so pretty easy to use.
I feel like this is good for someone, but apparently not me. My eyes quickly glaze over without some visualization in section 1 :( Maybe it's just me. It's well-written, though.
Code school has a free course that's pretty good for a first try. It gives you just enough to make it easy and also hungry for more.
It depends. If I'm writing an application or the project is large enough to warrant an OOP approach, I'll unit test, but if I'm doing a one-off for an ad campaign, movie site, or any site with a quick turnaround time and short shelf life, I won't bother since I usually don't have to worry about regression.
Yes you should be validating function arguments to the extent of checking for nulls and 'undefined' but if you want to do type checking, why would you not write a 'isA' function? that you could just pass your arg to it and it would handle all the error logging? Either that or use typescript! My main gripe with people not validating is when they pass in an object then try and get an attribute directly from it... function testFunction(objPassedIn) { //should check !null &amp;&amp; !(typeof objPassedIn 'undefined') var x = objPassedIn.thingy; //KABOOOOM } If the null or undef check isn't done and the objPassedIn is either of those. JS will chuck an error when trying to fetch thingy. This is especially scary if you're writing a SPA. 
Somehow I've gone my entire career never needing to write a function like your latter examples. I think we'll be okay.
The point is, why not add a 'mixin' keyword? An argument against adding a 'mixin' keyword applies equally, I think, to adding a 'class' keyword. 
Using it for an internal company app right now and will ship it in production of client facing app later this year if all goes well. The Polymer way of data binding is so simple that I rarely have to think about it and the default styling is incredible out of the box. However I would caution anyone willing to try to use this to be ready to try to eliminate any libraries except Polymer. When everything is componentized you quickly learn to differentiate single component patterns vs helper patterns and ways to access those methods. You also start realizing data and content flow and then can start controlling them.
For each Polymer project page: 1. **blank screen** for 5 seconds, then the GUI appears. 1. if you happens to disable JavaScript, yet another **blank page** again This is what you get when introducing **non-standard tag element** like `&lt;gangnam-style&gt;&lt;/gangnam-style/&gt;` that really needs JavaScript to expand that tag to proper HTML element and it takes time to load. If we were **using standard DOM, the GUI is always there** but maybe not the functionality when JavaScript is disabled. However, using Polymer, the GUI and also the functionality is not there; we do not know whether the current page is **loading too slow** or **broken completely** because JavaScript is disabled. Even AngularJS will show the GUI when JavaScript is disabled, not like Polymer. I have not tried running Polymer inside Android WebView yet, but the thing I heard is that it needs to be `vulcanized` because HTML import for local files without going through a webserver host is not allowed in Android, let alone if we want to create .CHM files. In my humble opinion, the only attraction for Polymer is just the beauty of **Material Design**. I hope somebody out there, extract the essences of Material Design and port it to **Twitter Bootstrap**, and then we only need to include `bootstrap.min.js` and `bootstrap.min.css` no more no less no fancy-fancy thing. Somebody out there [user/holloway](http://www.reddit.com/user/holloway) already ported the ripple button effect in a stand-alone JavaScript library http://www.reddit.com/r/javascript/comments/2akspu/ripplejs_ripple_button_effects_for_your_website/
A quick google finds some chatter about an `Object.mixin` but apparently it didn't make it. I'm pretty sure some digging can tell you why.
You're correct. However most people associate OO with classical inheritance.
Thanks for your submission! Unfortunately, it appears as though it doesn't meet our [self-promotion guidelines](http://www.reddit.com/r/javascript/wiki/index), and has been removed. If you would like to resubmit, please take the guidelines into consideration. Thanks for your understanding.
What interests me about Impact is this: https://github.com/collinhover/impactplusplus Does melon have something similar to that?
I totally agree. I planned on making some images before submitting it but I never got the chance to. Maybe the demo app images should be much higher in the article. Thanks for liking my english though.
In that case FireFox Nightly is broken. It works on my FF stable. The polyfill supports a broad range of current and older browsers: http://www.polymer-project.org/resources/compatibility.html I would personally wait a bit more before using this in production. It will need some time for it to settle down and have the bugs knocked out of it. 
The polymer project pages make extensive use of custom tags, so yes, it doesn't show much until it gets going. Part of the specification which this is all built on does provide ways of styling elements which are unknown while their JS code is loading in. It will be possible to show a "Loading..." etc. I think that most web sites will use tradional HTML most of the time, like what we have now, and mix in Polymer style custom tags for things like Google of Facebook log in, embedding a Google map etc. complex functionality. Web applications may have to display a splash screen or loading message to pacify the user until it starts up, which is fine in my opinion. Other points: * no one turns off Javascript. * if you are on a slow connection then the **standard GUI** often doesn't look like anything either until the CSS and some images have arrived. * a half loaded GUI which doesn't actual work, isn't much of an improvement. * I'm sure the Android issues will be sorted out. It is still early days for this tech. 
What's yours?
I could be wrong (probably am) but I thought the 'all major browsers' phrase inferred latest and two versions back, so IE 9?
Hi, Gregor from Usersnap here. The widget (incl. console+XHR tracking) is supported from IE8+. For enterprise plans we do have a legacy snippet supporting IE7+. 
They are wrong. Saying that JavaScript is not OO, when almost everything is an object seems rather silly.
I downvoted this post because I don't find it relevant to this sub. Did you activate 3d in CSS? There's a CSS hack where if you invoke any 3d transform, or 3d anything within the css class it will use the GPU for hardware acceleration. If that doesn't help, use a better animation library like greensocks (works with jquery).
Since I chose to learn and use Durandal, I'll switch to Angular at 2.0 , by then the migration path will be clear. Until then I'll be enjoying dynamically loaded views and all the knockout jQuery ui components
Since I chose to learn and use Durandal, I'll switch to Angular at 2.0 , by then the migration path will be clear. Until then I'll be enjoying dynamically loaded views and all the knockout jQuery ui components
This article has several typos. For instance: $scope.add = function(event) { if (e.which &amp;&amp; e.which === 13) { $scope.todos.push($scope.newTodo); $scope.newTodo = ''; } }; should actually be: $scope.add = function(e) { ... }; **EDIT**: this was fixed. Let me also mention: &lt;div class="page-container" ng-controller="TodoCtrl"&gt; &lt;input type="text" ng-model="message" /&gt; &lt;span&gt; {{ message }} &lt;/&gt; &lt;/div&gt; should be: ... &lt;span&gt; {{ message }} &lt;/span&gt; ...
I recommend [Vanilla-JS](http://vanilla-js.com) ;)
&gt; I think that most web sites will use tradional HTML most of the time, like what we have now This is the common text, textarea, select, checkbox, radio, buttons that **were always rendered** regardless of JavaScript is disabled or not, even without any CSS stylesheet loaded. &gt; no one turns off Javascript. You are just one of those users who do not use **NoScript Add-on**. Have a look at Google home page without JavaScript, it is still works fine. The text box is shown, we can type into it, we can press Enter, we can click the button. Imagine a Google homepage without text box, without button, there is nothing to type, just because it totally depends on Polymer and JavaScript is disabled and we just see a blank white page. Google Webmaster itself encourage users to always provide GUI whenever JavaScript is disabled, never ever-ever give a blank page. Quote from the site &lt;http://googlewebmastercentral.blogspot.com/2014/05/understanding-web-pages-better.html&gt;: &gt; It's always a good idea to **have your site degrade gracefully**. This will **help users enjoy your content** even if their browser doesn't have compatible JavaScript implementations. It will also help visitors with JavaScript disabled or off, as well as search engines that can't execute JavaScript yet. How to help users "enjoy your content" when the page itself is just blank?
Yes, you need to run javascript. Assuming you have the basic knowledge, you can open the Js console and run a piece of code that enters random word In text areas and then clicks on the submit button, or initiates an Ajax call to the backend directly. If you're lucky, you can also submit obfuscated code and cause the backend to suffer or even drop.
Want to go into further detail about Ajax calls? EDIT: I pretty much got this far myself... I'm struggling with the code, want to give me a basic outline?
If I wasn't clear enough in my comment above, yes you can build ways to gracefully handle slow loads, JS off etc etc, if you wish. 
I'm surprised by how many people still use id. I got the funniest looks the other day when I told one of the other guys that I wanted my HTML output without ids. He couldn't figure out how I was going to make it work... Granted, he was a .Net dev...
Depends. can you explain a little bit more what's happening. Why it's it replacing the whole table on every key up?
I was just looking into it yesterday, oddly enough. I gave up after about an hour though, because I couldn't find any information about it. Their site is shit, their links to information go nowhere, and I can't find the source code for it anywhere. It almost seems like they're trying to keep it a secret. I'll just stick with Ember components for now. Maybe I'll come back to it in 6 months when the project is a bit further along.
i got this as an example: &gt;document.test.firstname.value = "butts" but i have to rename the web form to 'test' everytime. Anyway around this? 
I'm using [brackets](http://brackets.io) for js/html/css editing. 
The module is not decoupled though because you must have defined that function otherwise it will throw. With reqres you can ask for a response, and if you don't get one back you can choose the correct behavior. 
Yes, I was planning on sending you one once u get to a computer.
ST3 for code, iTerm for running things like grunt, and git. Firefox is my main browser, and i use the built in tools for debugging/testing.
Impossible to read on mobile - both in the reddit is fun browser and in Chrome. 
The problem with using var x = e.pageX || e.touches[0].pageX; var y = e.pageY || e.touches[0].pageY; is that e.pageX and e.pageY seem to exist but are always 0 in non-safari browsers. I will look into hammer.js, but I'd prefer to not have to overhaul my logic if I don't have to since everything is working nicely. Thanks for the help.
Not sure why you're getting down voted - don't really think it's good to extrapolate compatibility from a nightly build of one browser.
Looks fairly clean and tidy for web dev. Not sure how good it would be writing full on JS applications though.
Mozilla is also in the process of implementing parts of the Web Components APIs. If I were to take a guess, I would say that the polyfill is seeing the new APIs and trying to use them. It is not surprising that nightly is not working correctly on this. They are still building it! 
I saw an interesting talk on Angular a few weeks ago where the representative had solved issues managing a large API that delivers a very bloated response that wasn't all required for their Angular app (they had several platforms consuming this API and therefore each platform needed to be represented). They ran their objects through a model factory. A factory specifically created to remove unneeded properties and attach required functionality, this would then be returned to the original service making the request, and then pushed into the singletons data and returned to the controller... kinda what they are doing here but no need for Restangular.
One step further Thinkster.io's [A Better Way to Learn AngularJs](http://www.thinkster.io/angularjs/GtaQ0oMGIl/a-better-way-to-learn-angularjs) it incorporates Egghead, and the Angular Docs in a very logical, easy to follow manner.
When I took inventory I found it's surprisingly few. Vim/Terminal - Simply the best editor/pseudo-ide combo a coder could want, goes unappreciated by most but 4 years ago when I gave it a shot I saw the light. Vim Plugins: * Surround.vim - great helper method for surrounding things with things (e.g., foo bar baz -&gt; "foo bar baz") * syntastic - real time static code analysis (jshint, jscs) * ctrlp - fuzzy file finder Grunt - For running tasks such as static code analysis and unittests. Ack/Ag - Super fast searching of a file system for text within a file. Chrome Dev Tools - Firefox, Opera and IE all have servicable dev tools but Chrome is my favourite. If the extent of your debugging is a bunch of `console.log`s (or heaven forbid, `alert`s) then you're doing it wrong. All the dev tools support (and have done so for a very long time) breakpoint debugging. Angular Batarang - Dev tools extension for debugging AngularJs apps. Advanced Rest Client - Chrome App that helps debugging the APIs I use to communicate from my angular apps to the back end servers.
Not exactly on point but on that site, I was particularly distracted by their buttons, and how wherever you click inside the button circle ripples appear (they are using shadow doms for them). Polymer to me sounds a lot like a great tool for prototyping, but I'd prefer to be more closely aware of what my JS is doing.
lol i totally agree. using .class is SO much easier for button listen, stats etc. ID's are too abusive and should be gone. You can even use attributes better.
You have an entire library for twitter api in javascript: https://github.com/BoyCook/TwitterJSClient What you need is basically an oauth token. you can obtain it by first creating your oauth app here: https://apps.twitter.com/ once its created you click on it and you'll have a tab for oauth keys, you can also grab an access token for it if you need. I highly recommend avoiding doing oauth client side, any of those keys can harm you. Using consumer and secret keys can access your app. Your generated access token can post tweets with your name. those are not supposed to be passed client side or be visible to any user. 
There will be a day in the future where the number of JavaScript libraries exceeds the number of living humans, lol, it keeps increasing everyday. :P
Load jquery on page first, (function() { // Load the script var script = document.createElement("SCRIPT"); script.src = 'https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js'; script.type = 'text/javascript'; document.getElementsByTagName("head")[0].appendChild(script); // Poll for jQuery to come into existance var checkReady = function(callback) { if (window.jQuery) { callback(jQuery); } else { window.setTimeout(function() { checkReady(callback); }, 100); } }; // Start polling... checkReady(function($) { // Use $ here... }); })(); http://stackoverflow.com/questions/10113366/load-jquery-with-javascript-and-use-jquery than start manipulating the form, find the form input fields id's or class, insert content into it, and than find the form name &lt;form name=&gt; or id and do $('#formid').submit(); or even $(form) because it might be the only one on page. and your pretty good to go... put the entire thing in a function called iToldYouMom() {} and than write in console afterwards setinterval(function(){iToldYouMom()},500); this will generate a fair amount of spam until you close the window.
ST3 with a variety of plugins, linters and some additional autocompletes, with a dark theme (legacy) and a Dark UI theme. M+ as font. Usually Chrome, and iTerm2 as terminal. Usually git stuff from the new (imho very nice) Github app for osx. I still debug quite alot with logging to console, its fast and efficiant. Sometimes more advanced stuff though. Jasmine / Karma for javascript testing. Oh and nodejs for tools/builds (gulp mostly). I tried webstorm, vim, atom, brackets but ST is damn fast and very goodlooking, i want my tools to be fast and beutiful. Maybe im a little hedonistic ;)
So, there are quite a few things you can do. One of them could be using a headless browser, like PhantomJS, and do all this stuff. The easiest way, however, is to open the JS console on the page and, assuming you're running jQuery, do the following: &gt; $("#id-of-username-field").val("ddsads\\][[[/adas"); &gt; &gt; $("#id-of-email-field").val("dsadsa//////////////////////////////][][]@@@/"); and then you can trigger a click event without even needing to move your mouse: &gt; $("#id-of-submit-button").on( "click", function() { &gt; console.log("Submitted!"); &gt; }); Then, the next thing would be to listen on the result of the post, and trigger the event again. EDIT: Note that: You don't always need to pass an "id" to jQuery, you can also pass a class name in the following way: &gt; $(".classname").method() // Where method() is non existent - just a dummy to show you 
Let's see... Sublime Text: outside of vim its just the best text editor. Brackets and Atom are great in their own way, but Sublime rules. Ruby: good for whipping up a quick backend, and I've been playing with using it for building projects (minify, compile, etc) Node: just editing this in here... Literally the swiss army tool of the web. Chrome/Firefox/Safari(WebKit): use all the browsers! Chromes devtools are still the best, Firefox is catching up. Github for osx/windows: will probably switch to command line git, the recent versions of the desktop apps are far to buggy, more crash happy than the older ones. As for actual js things, it depends: I'm working on some useful (hopefully) library's, and I tend to include bits of those in my pages, and I've been on a bit of an angular kick. MDN is literally the best resource for JavaScript bar none. It makes me wish other languages had such a complete resource. And I would be remiss to not mention StackOverflow. `python -m simpleHTTPServer 8080` quickest way to bring up a local sever
Works for me in Chrome on a Moto G.
And this is why I use react.
Adobe and Javascript should never be in the same sentence. I'm still having nightmares from porting a Spry project to native Javascript.
Awesome
It's not my lib, and haven't done complete testing on it. I'd imagine that any browser that supports web workers though http://caniuse.com/webworkers 
* Sublime Text 3 * Terminal on Unix, Cygwin on Windows * Chrome and Firefox (prefer FF as a day to day browser, but Chrome has better debugging tools IMO) That's it! I try to keep it minimal. This is also my setup for Rails/Django when doing backend work.
The jQuery source is where I discovered $.grep for the first time. My curiosity got the best of me so I started playing with it. Now I use it all the time, filtering like a boss.
Nice list, some of these you can learn about by just reading the documentation for a given function. Others are internal functions, which I would suggest not relying on them always being there.
You should really look into underscore (or a similar, functional-inspired lib) then, since it excels in working on sets of data.
It's absolutely non-functional (pun intended :). It's procedural.
I'm sorry, but it appears as though your post doesn't meet our [guidelines for self-promotion](http://www.reddit.com/r/javascript/wiki/index), and has been removed. It also hardly has anything to do with JavaScript... Thanks for your understanding.
Google, mostly.
Mozilla Developer Network, MDN, for references. caniuse.com or similar for checking how much much better the world would be without IE. Apache.
Very cool. Do you happen to have a link to the talk? I'd love to check it out.
Lodash is worth checking out after learning the basics of underscore.
For those that don't yet know, polyfill just means to add functionality to the browser that you might be expecting to be there. Not all browsers are the same, so polyfilling helps make them seem the same to your code. I hate the term, personally. Sounds like an advanced geometry term. My brain can't change its association with polylines and polyline filling.
It would be much better if close to the top, on the Github page, it explains what is meant by 'Fuzzy searchable dropdown'.
The templating looks far to similar to Angular. I've also learned to steer clear of anything adobe does with web development directly.
There is no video that I'm aware of yet, but the slides were posted: https://medium.com/@alanhietala/many-ng-apps-one-core-b8c4d2ae3fc9 Checkout slide 7+, the Model Factories slides. I should mention the presenter was from [Ecobee](http://www.ecobee.com/), so these methods are being used in production at scale.
&gt; 5 $.fn.addClass accepts a function That's quite handy! I've always run a bunch of checks agains `$(element).index()`, like `index % 2`. This should make index based classes so much easier to do. &gt; 13 $.fn.on accepts an object Again, another nice time saver. I usually curry `.on` calls, but this is even better!
&gt; Again, another nice time saver. I usually curry .on calls, but this is even better! Isn't currying something else? You're probably just chaining `.on` calls.
Heavily agree here, it's faster and has some other methods underscore does not implement at all. One of my favorites is cloneDeep, I forget the others... 
I've been working on a pretty large app that has a LOT of Ext.js throughout, and the company is actively moving away from this framework for every reason you mentioned.
You prefer it to Sublime? I really think the inline css thingy is awesome. But otherwise I am not sure if I should jump onto it.
Some things I'm using: * *[Beefy &amp; Browserify](http://didact.us/beefy/)* are really handy for web development, no messing about reloading the browser and so forth. * *[Git](http://git-scm.com/)* for source control of course but also pushing things around, deploying, and so forth. * *Mechanical Keyboard* - It's one of those things that as soon as you do it, you wish you'd done it years ago. It's such a joy to type on, I can't recommend it enough. Check out /r/keyboards for information and advice. Some things I'm looking for: * A good inline documentation solution (like JavaDoc). I've tried several over the years and the projects either fade away or JavaScript isn't properly supported. The one that looked most promising was NaturalDocs, I liked their format, however that seems to have done nothing in so very long. Ideally I'd like something that runs under node.
And then try out [Lazy.js](http://danieltao.com/lazy.js/), because lazy sequences are really cool.
\* burns all the freshly printed rally posters for 2016 *
Yeah, that terms ... sucks. Expected something to do with scanlines. Instead found a repository with no documentation and a reference to another project with even less documentation.
Being able to use the "pluck" and "where" notations with many other methods like _.filter, _.find, _.any, etc. was what pulled me over :) So much better to write: var object = _.find(list, { id: someId }); Rather than: var object = _.find(list, function(item) { return item.id === someId; });
A: Try using localStorage to set a value you can use to prevent the popup from showing: https://developer.mozilla.org/en/docs/Web/Guide/API/DOM/Storage B: You need to add a cursor:pointer style to your button class. This will do what you need. C: You need to look into z-index styles. Whatever contains your ad needs to be given a z-index high enough to push it above the other content. (Higher number means it will overlap things of a lesser z-index) Hope this helped!
Maybe something like this then, var x = e.pageX &amp;&amp; e.pageX !== 0 &amp;&amp; e.pageY !== 0 ? e.pageX : e.touches[0].pageX; var y = e.pageY &amp;&amp; e.pageY !== 0 &amp;&amp; e.pageY !== 0 ? e.pageY : e.touches[0].pageY; Obviously e.pageX and e.pageY could both be genuinely 0 but that's unlikely and so this would work. A bit of an ugly approach though, granted.
+1 for Lazy.js. It is insanely fast for big data.
So awesome
This was such a fun project to mentor. So stoked they got it working!
eval(... ಠ_ಠ this code is verrrrry old and pretty bad. please don't use this.
You could just use Array.prototype.filter which is built-in in all modern browsers (and can be polyfilled in all older ones).
I haven't used Marionette either, but it seems like the important bit is the '#product-template' parameter. *If* I were to test this--and I don't know that I would--I would probably write some sort of assertViewUsesTemplate() function, and use it like this: describe("product item view", function() { it("uses correct template", function() { assertViewUsesTemplate(ProductItemView, "#product-template"); }); // more meaningful tests go here }); ...or perhaps not. This might fall into the "I don't test simple one-line functions that just call another function" category. 
I use node http-server. I was actually using connect as you could write a 5 line server but they managed to mess up the package about a month ago. Now it's a case of Npm install http-server Http-server . -p 8080
We can't use jQuery DOM manipulation in our day to day work as it's too inefficient but we do use jQuery Deferred objects to do promises for all our async stuff. Looking forward to ES6 native promises though!
Anything wrong with JSDoc? Given that it's based on JavaDoc, it seems like it would be the natural choice for you.
We use YUIDoc. Fairly familiar syntax and which nearly all IDE's and code editors can mock out when you type /** &lt;&lt;Enter&gt;&gt;
So do you plan to open source the code, or build a paid product out of it, or some combination/in-between option?
Most of the code is available at github.com/thinkcopter. The idea is to provide a checkout service. The user will select a drone to fly and billing will be based on flight time.
Everything I've seen shows that `innerHTML` is much slower than `document.createElement`, or `document.createElement` + `cloneNode(true)`. Can you show benchmarks to batch this up?
What went wrong?
Sorry, phone autocorrect. 
Said it before and I'll say it again, I'm all for syntactic sugar. My concern is exactly the semantics of the syntax ;)
You know how I know this is made in Famous.io? Because the scrolling is fucked.
And then there's [this](http://jsperf.com/lazy-js). No doubt Lazy.js is fast, and definitely faster than many alternatives, but if you're worried about speed, you're better off without these libraries.
Commented elsewhere. Just incase ... &gt; And then there's [this](http://jsperf.com/lazy-js). No doubt Lazy.js is fast, and definitely faster than many alternatives, but if you're worried about speed, you're better off without these libraries.
Dave Methvin commented on the blog post with exactly that. Be careful if you use undocumented features. http://quickleft.com/blog/18-surprises-from-reading-jquery-s-source-code#comment-1488823510
I can't speak to the quality of the shims, but that's not the point of this project. The point is that you don't have to think about what needs to be shimmed before you do it. Like Autoprefixer, you just write the modern, standards compliant code you want and the lib automatically makes it backwards compatible. Sure, you could manually include everything in ES5Shim, but that could add stuff you don't need to your code -- this makes sure that only the required shims are added.
Use it in a real life application. Tutorials only teach you so much, actually using the framework to accomplish a goal teaches you so much more.
Lodash is great. I only use Underscore these days when it comes baked in.
For multiple dom insertions innerHTML is faster: http://jsperf.com/dom-vs-innerhtml/34 For one dom insertion appendChild is faster: http://jsperf.com/dom-vs-innerhtml/35
sublime is good for anything else.. I switch between those daily. but when comes to javascript, brackets wins.
thats pretty wild.
The :empty pseudo selector is also valid in CSS.
Ah ok. So I guess TDD doesn't necessarily dictate that you always write a test before some code, like for simple one-liner things like this example, but whenever there is actual stuff happening with logic, then you would.
I only compared Lazy and a for loop because I genuinely wanted to see what the difference was between the two. We all know Lazy is faster than non-lazy evaluation libraries. I think demonstrating that fact in my jsperf would detract from what I wanted to know, and what other's should be aware of.
I actually just wrote some code like this today. My use case is as follows: Sometime we want to combine multiple fetches (multiple models) into a single HTTP request for performance reasons. Our models have a sync function that handles this nicely. If you call `model.fetch({aggregator: myAggregator})` it will queue the request instead of making it immediately. But the aggregation strategy may change throughout the lifetime of the app (depending on which models are being fetched at a particular time). I have code that looks like: ``` model.fetch({aggregator: app.reqres.request('aggregator', this.componentName)}) ``` There are 3 cases: * The app hasn't set up a handler for aggregation (return undefined) * The app has set up a handler, but this particular fetch doesn't need to be aggregated (return undefined) * The app has set up a handler, and this fetch needs to be aggregated (returns aggregator instance) Moreover, the code that I'm writing is shared among multiple applications, so I don't necessarily know whether or not this feature is needed until I ask the application. I think this way keeps it pretty clean. The way I think about it, it is like you are requesting a resource. If it returns undefined, then the resource doesn't exist. Whether this undefined is implicit or explicitly returned from a handler is irrelevent. If the resource is mission critical then the thing requesting it should throw an error. Similarly, you can use commands.execute do do something like logging. `app.commands.execute('log', 'my message')`. The thing that wan'ts to log something doesn't really care whether or not it actually happens. It shouldn't be an error if there is no logger hooked up. But you can still write nicely decoupled code that logs using whatever logging implementation the application happens to register (or not register)
It appears as though your post doesn't meet our [guidelines for self-promotion](http://www.reddit.com/r/javascript/wiki/index), and has been removed. If you would like to resubmit, please take the guidelines into consideration. Thanks for your understanding.
I'd recommend learning plain Backbone before getting into Marionette and thinking about how it works. You'll understand Backbone better and appreciate Marionette more after doing it the "hard way". Also, learn about the observer pattern and try making a standalone demo of something silly since Backbone heavily uses this design pattern.
2 min video: shows what the result would look like: https://www.youtube.com/watch?v=oogKKfbRyMQ The table is a spreadsheet, and on key up I want the spreadsheet to recalculate. But the table is replaced when it recalculates. 
It's Spry. It's slow, it's a pain to debug, it's spaghetti code, and the only people who find it useful are those who like to point-and-click their AJAX. So, again, what went wrong? Spry -- that's what.
While you're watching the screencasts or reading the tutorials, have an editor open and write out the code that is being demonstrated. Watch what you've written work. Tweak it to behave a little differently. This is no different from learning a human language; reading and listening are trained differently than writing and speaking, and you need to do all four (or both, in the case of a programming language) in order to really comprehend the language. Don't just be an observer, immerse yourself right away!
My current toolkit: - webstorm (big projects)/ Sublime 3 (quick projects) - Beyond Compare (I don't like conflicts) - Ghostlab (Also a bunch of my old mobile phones) - Sourcetree - Charles Proxy/fiddler (I use both) - Google Chrome Canary (just to see what's in the pipeline) - Vmware (so I can run any os) - A digital ocean account for temporary servers - IIS (painless local servers) - Photoshop (bread and butter for slicing) websites: MDN, reddit, stackoverflow, jsperf, jsfiddle, caniuse.com, regexr.com, many many others hardware: - company issue PC - washable keyboard - karotz - two monitors one landscape, one portrait. - vanamco device lab (for the phones) - stress putty - do not disturb sign -&gt; "Please do not disturb, i'm disturbed enough already". - a paper stack of briefs, ux docs, func specs, style guides - a few of the o'reilly handbooks (regex, powershell, git, canvas etc)
Where's the demo?
Source: https://github.com/STRd6/composer
No prob, I should have been clearer and added a comment linking it!
Source: https://github.com/STRd6/composer
Before anyone talks about their problem of the way this handles separation of concerns (same as React.js), you really should watch this video first: https://www.youtube.com/watch?v=DgVS-zXgMTk
See my comment: http://www.reddit.com/r/javascript/comments/20pzbj/mithril_a_javascript_framework_for_building/cizprr5
First we should establish the proper vocabulary; "web design" specifically relates mostly to the visual UI concerns, for the large part unrelated to JavaScript. Design doesn't specifically require JS, though it can leverage it at times (like for responsive layouts). See also: /r/web_design, and Wikipedia's [web design](http://en.wikipedia.org/wiki/Web_design) page. The term you're probably looking for is "web development", which is a larger grouping of basically everything required to create a website (most would probably agree that web _design_ is a subset of web _development_). See also: /r/webdev, and Wikipedia's [web development](http://en.wikipedia.org/wiki/Web_development) page. And IMO you are just fine using jQuery, probably 99% or more of web devs use jQuery or some similar library, or a framework that does even more. The evolution I believe, is that sooner or later you'll find yourself with a ton of jQuery plugins and your code is a mess, because jQuery doesn't encourage good patterns (and some argue that it encourages bad patterns), at which point you'll move on to a framework that lets you solve your problems and keeps your code well organized, maintainable, and testable.
As a general rule, yes, that is why jQuery exists - to make work faster and cleaner. However, the important thing to realize is that jQuery is built on top of javascipt and therefore inherently less versatile. I would encourage you to learn plain javascript in order to understand the inner workings of what you are creating - it will enable you to make more educated decisions. A very important component of web sites is speed - and this is not something that jQuery excels at. Side note: jQuery is a library. Libraries are almost always a good thing. Frameworks tend to be a matter of personal preference and are often unnecessary (overkill) for smaller projects. 
Read the official docs and source. Any other resource will go stale. This crap moves really quickly. You do it once, then you can generally get by on changelogs. Backbone's source is relatively small. I could understand not wanting to try to read all of Ember's source. Source can be overkill, but it's probably necessary if you want to be an expert, and work through unanticipated cases sometimes.
If you're not up at 2am pulling your hair out over some error, then you ain't learning.
It could be from Perl, which also calls it `grep`. It's similar to the *nix usage, using a predicate instead of a regex.
Beyond Compare, I use Meld at the minute. Have you used it? How does BC stack up against Meld?
jQuery is nice because it absracts (i think that's the right word) most cross-browser issues (event listeners, .each() loops, styles ...). It isn't really a framework though, but a library : it doesn't force you to code in a specific way like Angular or even React do.
It's important to remember when comparing benchmarks that asm.js is *not* Javascript. It's a low level language that happens to be syntactically valid Javascript for backwards compatibility purposes, however it's not idiomatic JS and code not compiled specifically for asm.js would not execute with the same speed. Obviously modern JS VMs have done incredible things performance wise with the language, but the Javascript you write when building normal web applications would not achieve the same performance benefits.
Not saying you shouldn't use jQuery, but take a look at [youmightnotneedjquery](http://youmightnotneedjquery.com/). As long as you don't need to support old browsers or want to implement jQuery plugins, vanilla JS is a good choice. If you want to add more functionality, you can always add specific libraries like hammer.js, etc. It's quite up to the restrictions you set yourself.
Really? Can you edit multiple lines ? I have been spoiled by sublime now.
sure!
Sweet :) I give it another go then. I really liked the design of the Brackets editor. Perhaps it should not matter, but I really appreciate good design of my editor. 
How is it less versatile? Whenever jQuery is available, plain JS is too, and you can extend jQuery as required, can't you?
Doesn't look like it - here's [_.map](https://github.com/jashkenas/underscore/blob/0a53eba8129bd3a2d01ac6f4bab9b0b65c98052e/underscore.js#L121), for example.
Ohhhhhhh dear. That... I guess you could. Maybe. That seems like a horrifying amount of infrastructure and stuff that could go wrong, though.
GMail
I'm not sure that React makes you code in a specific way... You can update state in multiple locations, they have two different ways to declare the interfaces (jsx/React.DOM), but I don't think it forces you to structure your objects in a particular way or require that you create your controller in a certain fashion. It's really more like the V part of MVC but not really.
Convenient polyfill files inc minified versions. 
I use D3 a lot at my job. It takes a lot to learn it but in the end it becomes a highly strong tool for many purposes. What mbostock needs is a few more examples of dynamic charts where the creation of the axis and scale objects are separate from the data bindings. Many of his examples tend to mix that code together. 
I am curious if they prerender, I only have exp with it in Node since the server side jsx-tools are JavaScript.
&gt;A Canvas element is like an image, you can overlay it with some DOM-based UI. Whoa now. I didn't know this was even an option. Like, you can drop an HTML table or something on say the right side of a Canvas element where the UI will go? What is this sort of thing called? I just did a cursory google search for "overlay HTML on top of canvas" and didn't get much relevant to this idea. Do you know of any blog posts or examples out there? edit: I think I found a decent example of what you're talking about. Thanks! http://www.ibm.com/developerworks/opensource/library/wa-htmlmark/index.html
Just use absolute positioning: http://jsfiddle.net/xfCBQ/
Next step: Using brain power to put Legos together.
Google Charts ToS require you to always link it directly from Google servers, so if offline functionality is a requirement, they are off the table.
Did anyone else notice that the responses from French speakers were almost all negative, while the responses from English speakers will almost all positive? Is there a French cultural prejudice against the Observer pattern?
Hopefully we'll get rid of $scope.$apply soon.
So, improgrammer spam... Again. *sigh*
It's just two French guys talking with each other. Also, only one of them thinks it's not necessary.
Don't forget- it's faster to develop *the first time*. When new features need to be added, or bugs fixed, etc.- dealing with thousands of lines of code with little support beyond jquery can be maddening. Either you've written your own framework to deal with it, or you're likely in for a bad time.
It is a bizarre conversation. Who wouldn't want Object.observe? Second french guy's argument makes no sense.
If you don't really want to learn the technical merits of web development and have no plan to write JavaScript professionally I would just stick with jQuery. Originally jQuery, and other similar frameworks, became popular because they solved for cross-browser problems. Most of those problems no longer exist in modern browsers. The primary reason, therefore, to continue using jQuery is because you can't be bothered to learn to write vanilla JavaScript or walk the DOM. There are many people who work professionally in web development and who use frameworks precisely because they cannot be bothered to learn the technical qualities of their job. It is a common belief that hiding from problems with abstraction is good enough. It is often good enough for a while, but eventually this line of thinking always fails. When this line of thinking is applied to small projects that need to get out the door quickly you are probably okay won't have to deal with many problems that leak through the abstraction. If you end up working for a large company or on any sort of enterprise level massive web application you are screwed. If the entire team thinks this way the company will be just fine until the entire project is screwed far after the tech debt can no longer be escaped without completely starting over. This is when weaker developers get laid off and expensive agencies like my employer get called in. I recommend just writing all personal projects in vanilla JavaScript. You will be substantially more valuable in the job market if you do not require dependencies and technical debt merely to do any job. Not only will you be able to command a higher salary, but you are also more free to choose between a wider diversity of employers/positions. You are in the best possible shape, though, when you never have to look for a job because corporate recruiters are after you, which is only happens if you have a diversity of experience solving technical problems.
Clear, readable code is the same, regardless of what framework you used (or not). I have seen code written with jQuery that was far less maintainable than the vanilla.JS code that became its replacement. Don't get me wrong; I like jQuery, because it allows you to ignore cross-browser inconsistencies and lets you do stuff without much hassle. But it also encourages endless lines of $(selection).do(some).more(stuff).in(a, 'single').line({than:'anyone' in their['sane'].minds }).could().comprehend(); Frameworks are useful, because they relieve you of the task to write everything yourself, but you'll still need to write good code anyway.
I do know javascript -- I just found jquery a lot faster and I haven't encountered a situation where I couldn't do something with jquery and had to do it using javascript
What's the status of Observe.observe() in Firefox?
No problem, I didn't post this.. and I'm a co-founder, it was from the Famo.us community.. 
http://kangax.github.io/compat-table/es7/ ~~It's supported by Firefox 32 (current stable one is 30).~~ In the meantime, you can polyfill it: https://github.com/Polymer/observe-js
It's not there yet: https://bugzilla.mozilla.org/show_bug.cgi?id=800355
Not according to your own link?
Opened it in the wrong browser, sorry. The columns were misaligned. Yes, Firefox currently doesn't support it. My bad.
You're right, I shouldn't put Angular and React at the same level of constraint. Still, you have to think "the React way" when you implement your feature (modules, where is the state, etc) : this is one level above jQuery.
I have bad experience with Google Charts when it comes to customization. If the default design is good for you, it's fine - if not, stay away from it. D3 takes time to learn, but it's undoubtly the most powerful framework.
I've been playing with this since you posted, and wanted to tell you again that it was immensely helpful. I do have a noobish question that might be better for /r/learnjavascript, but it's in regard to your example, so I'll ask here. I believe it's a question of scope. http://jsfiddle.net/xfCBQ/2/ In this example, I've got an object "map" outside of the event listener, and a function whatAttacker also outside the event listener. If I want the to run whatAttacker based on whatever the map object is at the time of clicking the button, how am I getting that map object into scope? The way I set it up in the updated fiddle, obviously doesn't work. Also, adding map into the clickevent parameters doesn't seem to work. In my actual case, map is being generated dynamically, so isn't defined at runtime. I'm guessing that is sort of my problem...
http://www.danielx.net/composer/#359b9082c855a2b111d3 I'm pleased with what I made in a few seconds, but then when I go to the published version there are pauses that prevent it from sounding right.
But then I tried again just now and it sounds fine.
Using Chrome 35.0.1916.153 m
Do you have an example of such code?
I'm writing something that I struggle to classify as being either a library or a framework, I'm not sure if I can say it's both though. My intent is to have it operate as a framework, using intelligent defaults that could be modified, but modular in such a way that different parts of it can be used separately, for example integrated within a Backbone app. In other situations jsgui would cover the ground covered by Backbone and Express.
There may be some stuttering if request animation frame doesn't fire exactly at 60fps. I'll look into improving the timing in future versions.
Are you saying it was /u/improgrammer? And thanks for flagging, it does help!
I'll give you that. It's a different way to think about the UI, but you can back the data with just about anything and it still works. There's even one example where someone re-renders the whole UI with one dataset performantly, so you could essentially just feed it from a websocket. Probably the hardest thing to think about is how to handle special animations or effects.
You should just give up, this is the shittiest piece of code I have seen in a long while.
Well, whats disliked about frameworks from programmers in general (not just javascript programmers) is it forces patterns. If you can push your framework into a library where its use at anypoint in the program can be optional used or not (such as jquery for example) then that's a plus. If it requires adhering to those patterns (such as angular) thats not so great.
I'm not avoiding writing some features in a way that make them a platform for other features. For example, I'm using data structures as a platform for the MVC Data_Object, and that as a platform for GUI Controls, and that as the base class for particular UI components like a Horizontal_Slider. Some abstractions building on others are fairly framework-like. However, I have kept things modular where possible, so that all of those things can be brought together to generate HTML and activate it in the DOM, without requiring other functionality that is part of the system. I'm planning that when jsgui is used in its entirety, it's very much like a framework, providing the structure in which the developer can be productive by focusing on what makes their app distinct. I also want it so that using it like a framework is more like following a recommended configuration, than having to use it in its entirety. I'm also planning on having the system have a configuration application, so in some ways this system will operate as an app, rather than a framework or library. 
Will you be coding these widgets yourself? You might be looking for a *javascript templating engine*. Check out [Ember.js Components](http://emberjs.com/) which looks like what you've described. You could build a WYSIWYG editor around Ember, but it would be a large task.
&gt; If I want the to run whatAttacker based on whatever the map object is at the time of clicking the button, how am I getting that map object into scope? It already is in the same scope. The handler closes over it and it does successfully log "dude". Anything defined in a function is also available inside inner functions: function a () { var a = 5; function b() { console.log('b: ' + a); // 5; } function c() { var a = 7; console.log('c: ' + a); // 7 - local 'a' shadows the outer one; } b(); c(); console.log('a: ' + a); // 5 - the outer 'a' is still the same; } a(); Anything from the original context is remembered. In this case that `factor` argument still exists as far as that returned function is concerned: function xerize (factor) { return function (value) { return factor * value; } } var fiverize = xerize(5); console.log(fiverize(4)); // 20 In your example, the outermost scope which contains `map` and `whatAttacker` is the global (`window`) one. &gt;Also, adding map into the clickevent parameters doesn't seem to work. Changing a function's header doesn't change how it's called. When that handler is invoked, it only gets that "event" parameter handed to it.
All arguments in French make no sense to me.
Yes, I'd be coding the widgets. Personally, don't envy coding a WYSIWYG editor and maintaining it. I'm looking at dillinger (ace based), but am not sure how extensible it is and am a little concerned about the learning curve with markup for some of our computer illiterate users. The goal was kind of to use templating (mustache) and give users the ability to add widgets (such as slideshows) directly into their page by typing in something super simple. ie. {{slideshow}}. The widget would automatically create an image gallery for the user and he could upload pictures right there. Server side it would replace {{slideshow}} with the actual gallery. 
Ya confidence is what I've been going by too. Looking at my tests, Im seeing that almost all my tests are for my collections, services, Backbone abstractions, and state objects - the things with real logic. I have quite a few views but because they don't do a whole lot, I don't have very many tests for them, which made me question if I am following TDD correctly. I stumbled upon this jasmine extension, jasmine-jquery, last night. https://github.com/velesin/jasmine-jquery After reading some of the examples, it definitely gave me some insight into how I could unit test my DOM since it has a lot of useful, DOM-specific matchers.
Because it formalizes a really bad and slow design pattern.
Well jQuery is mostly comprised of Sizzle, a library which offers a way to select DOM nodes based on existing CSS using traditional CSS selectors. In the past, jQuery was able to fill in where pure Javascript was lacking, but the latest version of Javascript now incorporates much of the jQuery stuff, such as querySelector() and querySelectorAll(), so I'm sure you could get by without jQuery even if it means you'll be using slightly more code to achieve the same thing. Where jQuery still shines is with complex animations that are easy to produce with chaining, offering something that still cannot be achieved with CSS animations. If jQuery helps you be more productive though, continue using it. It's still the single greatest library/framework I have ever worked with besides .NET. I started out in pure Javascript and did not feel limited, but all of the helper functions you will inevitably create in pure Javascript just makes jQuery look all that much better. It's the write less / do more philosophy.
Hm. Hopefully this contrasts and clarifies it. A framework cannot be taken out of a program without significantly changing or refactoring the flow of a program. If I use a angular framework, I can't easily integrate other preprocessing technologies, or use imperative declarations (which are VERY useful in circumstances). That's ok if I never have a need, but if I do, i'm in trouble. Contrast that with a library use case: if I use an animation library to pull in something from the left, I know what its doing, I just don't want to write the animation function from scratch, its not that difficult, four lines of code, but its a pain after the 50th time, i'm also not too eager to deal with cross-browser issues, i'll just load a library and have it do it for me. However one day, if i decide to I could go in and replace all of the animate function with other functions for maybe, say a library that does it faster, or my own library, or something else. Think of frameworks as "opinionated programming". Frameworks are infamous for what Joel on Software termed "leaky abstractions". Most frameworks dictate that there use case is right, and their design pattern should always be used; when in really its simply just right for **them** in **their** situation. Every framework forces design patterns to make it easier for beginners, and certain tasks, but as corner cases show up, it becomes exponentially harder to use. Be careful getting sucked into the siren call of frameworks, we've all done it at some point. 
We'll use a house metaphor, jquery is a screwdriver with extensions. Frameworks are prefabricated homes with a few things you can customize. Note, there's also boiler plate code which is very helpful and similar to frameworks, in this house metaphor it would be all of the materials "loosely" assembled for you that can be broken apart and reassembled easily.
Hi Matt Sorry for the late reply. I'm not on Reddit much. To answer your question: the way Mithril re-rendering works is that redrawing is tied to async things like event handlers and ajax requests so that changing data from anywhere redraws (and there are documented ways to integrate other sources to allow them to trigger redraws properly). You can definitely structure code in the way React does and there's an example of that in my blog article called "an exercise in awesomeness", where I ported some examples from a React article by James Long ( http://lhorie.github.io/mithril-blog/an-exercise-in-awesomeness.html )
BH is a mammoth compared to my little smurf of a plugin. While it might be possible to have BH do fuzzy string matching on hardcoded data, it wasn't actually built for that per se. It was built do provide completions on items fetched over the network and hence is optimized for that. I built fuzzyDropdown to be simple to drop into projects that already use select boxes, be familiar to devs that have worked with jQuery, be very usable and be light weight (BH is about three times the size of fuzzyDropdown). The usecases in which you would employ either solution are quite different imho. 
Je suis une pomme de terre.
Observers? I'm not gonna argue that observing objects and triggering events is slower than not observing them, but what's a good alternative? Immutable objects / functional programming?
Yes, I think immutable objects are a more performant way of detecting changes at scale than Object.observe(). More importantly, most uses of Object.observe() observe a change in some value and as a result write a new value to something else, which then triggers another observation. This pattern is really hard to understand and as a result makes it hard to guess what's going to happen from a performance and correctness perspective.
Is there a performance cost for using this?
How rigorous is this? What does this offer above the excellent compliance of `es5shim`/ `es6shim` with their horde of prolific contributors?
Consider also the difference between Object.observe and an in-language implementation (Backbone.Events) where you programmatically trigger additional function calls. When you call a function like Backbone.Model.set, you _know_ you're creating an event chain and you're doing it deliberately. a.b = c; The fact that simple assignation can now result in _literally any behavior_ is an inscrutable design choice on the language front. (Google's just trying to fix Angular.)
In playing around with this quickly, I noticed that when a change is made to an object via push the observer is not called. Is that wrong? var Lizzzard = {}; Lizzzard.test = ['test1']; //Observed Lizzzard.test.push('test2'); //No observation
It should've been rolled out with the latest bootstrap 3.2 which was cut 21days ago: https://github.com/twbs/bootstrap/releases
Looks good! You might want to add a link on your `readme.md`. I tried clicking on the 2nd example (search) and then pressing down and that didn't work though. Some feedback: Replacements for multi-select usually use checkboxes because that's easier on users.
So I'm sorry but all I can say is: 101 ? Why the fuck do you add 2 functions to the global score???
You're gonna loooove object proxies!
On the search example you can't arrow down because the search input gets focus. We should probably move that example much further down the page since the search isn't actually shipped with DK. It's just a little showcase of the API we provide. We went with the idea of replicating exactly like a select, but style-able. Changing the behavior of how a select works didn't jive with us :) Thanks for the feedback! I appreciate it :D 
80k (first full-time job, too) and yes, I love what I do.
No? Setting Lizzard.test = some array modifies Lizzard, by adding a property that wasn't there before. Modifying the array has nothing to do with Lizzard, though, since Lizzard only has a reference to the array.
Huge. But compared to what? The only way you can approximate the same behaviour is via polling+diffing keys/values, and that will be more costly.
Except Backbone allows me to `a.set(b, c, { silent: true })` to prevent the event from firing on an as-needed basis. How do you do that when your object has been observed natively?
Looking forward to a four time increase on my pay...
Absolutely!
Throwaway for obvious reasons. For these types of posts, you really need to include the location, and years experience can help give context to the numbers too. For me: $100k, SW US, ~6 years professional experience (was a hobbyist previously). I also do a lot of PHP. -- slightly off-topic rambling follows -- I'm currently looking for a big career shift though, which may just take me out of this field completely (on a professional level; I'll always love and play with JS on a personal level). This is due to me only being interested in the technology, and unwilling to move over to management. I would love to hear from others on this, but in my experience, once you progress past "senior" level, there's really nowhere else to go but middle management. Once there, you just manage a team of jr. and mid-level devs, with a majority of your time spent on administrative tasks and personnel management, and very little actual technical work. I'm sure there's some outliers that are doing really interesting things and getting duly compensated, but those gigs are seemingly few &amp; far between, because I can't seem to find them....perhaps I'm just looking in the wrong places, though. I also have no desire to be a "super-rock-ninja-star coder" or whatever it is they're calling for these days at startups. edit: Forgot to address this: &gt; I increasingly find the finance world empty and am constantly seeing what the tech world can provide for humanity. Actual humanitarian work pays very, very little (unless you get sponsored by a large entity).
180K + Stock but no other benefits whatsoever. I love what I do.
I make 110K and I love what I do. While I enjoy programming it's more the challenge of solving different problems every week with whatever tools I deem to be the best fit. Sometimes I mess up but I learn from that too. It's pretty great.
Thanks for your reply, that's an interesting perspective I wasn't aware of. And sorry when I said "provide for humanity" I didn't mean it as literally as you may have taken it. I meant that in the sense of how the tech companies are creating [better] living standards for humans. Things like nest, phone apps, and the services revolution come to mind.
There is more beyond senior developer besides middle management. Platform engineer or solutions architect are roles I'd like to land as long as I can stay out of meetings all day and stay in the trenches so to speak.
Are java script jobs considered front end engineers?
90k in the Midwest is quite a lot right? Costs of living aren't too bad?
Most of them probably are, but you can run a backend on node these days, or you could be a full stack developer doing javascript as only part of your job.
Isn't that what [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) is for?
I'm in the low $100 thousands. Full stack dev, learned JS in the 90s, with a decade of PHP experience as well. I'm probably underpaid for the amount of experience I have, but I've only been actively advancing my career for about 5 years.
I'm not in development per se, but there may be an architect job for someone of your level to design products and specify how they would be implemented. 
Tyvm.
How are you and your parent building your business? I'm doing some contracting and I'd love to be at that range. Where are you finding clients that pay that much?
As someone who's trying to start a career by teaching myself, I'm drooling and a little scared at the same time.
Toronto, contract, $65/hr. 10-15 years of really heavy JavaScript experience. Not happy with my current contract, because the client is not making full use of my capabilities, and hence also not paying my full rate. I'm working on beefing up the portfolio getting back to better JavaScript work at $80+/hr. I love JavaScript development. Even when it's bad, it's still pretty good.
This is the sole reason I stopped using angular and started building apps from scratch.
Single page web application, hosted on Google app engine. I do the full stack from data design, access layers, front end technology and html application elements. Java and javascript mostly but the new version is in a reactive language I wrote that is similar to coffee script but with sensible variables and optimized for long term maintainability. Have a background in C# as well. Been doing application dev on web for ten plus years. I am indispensable to my current employer, so I have leverage. 
May I ask where are you located? Is that a common entry level salary?
I would consider http://www.highcharts.com/ as well. It has a lot of customisation. If it can do what you want out of the box, that will save a lot of time.
Yup! That is awesome!
$110 full time with benefits, southeast, 3 years professional (many time periods personal hobby / freelance), senior UX dev. Love what I do, but to get that pay I had / have to work for corporate America and I hate the old way of thinking / roadblocks that come with that. Thankfully I work for a company that is rounding a corner towards a modern way of thinking and our team is the front horse to carry that carriage around the corner. 
You could structure your app perfectly such that you don't have to observe, but that would require too much thinking.
I'm making less than half of what anyone else has posted here -_- However, I'm also right out of highschool, entirely self-taught, and just fell into this job out of sheer luck. I'm planning on putting out applications where I'll be asking for 40-70k next month. I have about 1 year experience. I highly enjoy what I do. Every job I've had before this I've had to deal with bosses who just assumed all their workers were idiots, minuscule wages, and mind-numbing work. This work is more like solving puzzles, it can be frustrating, but it's fun at the same time.
100K, but on a contract basis with no benefits. Last job was ~75 plus benefits. I like the coding, but I work for a big media company and I'm finding the company environment annoying and stressful. I'm coming off a long stretch of working from a home office though, so maybe I'm just getting reacclimated to having to exist in an office. Also the company hired me as a JS developer, then on day 1 sprung it on me that everyone is expected to act as full-stack. Not super happy about that.
D3 isn't so much of a charting library as it is a library for building charts. i.e. in a charting library you might expect a function like "drawPieChart" which you would pass a set of values of labels along with some configuration and you would hope that it came out how you wanted. D3 gives you all the tools to build a pie chart how you want it - and then some. e.g. want to display 8 different pie charts with a consistent colour scheme and/or combined legend? Easy in D3 because you have the building blocks, but typically problematic in a charting library. So if you can get your head around D3 there's nothing else that comes even close - but there is certainly a learning curve.
I would say it is above the average but would not consider it a lot. Plus the benefits that my company provides are top notch. 
D3 is not a charting library, it's a DOM manipulation library designed for data visualization with SVG. This means that any charts you want to make with it will require actually making the chart, not just plugging data into an existing layout. However, because you're building the chart yourself you have a hell of a lot more control over how it looks than you would with any of the other chart toolkits. So yes, higher learning curve, but the payoff for mastering it is huge. As for resizing the image with the website, the width and height attributes on an svg tag define the size of the internal canvas. If no css width/height is defined then the browser uses those attributes for the size of the image, but if you override the css width/height then the svg will scale to whatever size you define. The [viewBox](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox) and [preserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio) attributes control how that scaling is done relative to the new shape that you define.
jQuery is great for cross compatibility, and abstractions over some of the rough parts of JS. Unfortunatly for jQuery, with more people moving to more standards compliant browsers, and the dearth of library's offering a lot of the same features (abstractions over JS) often in a smaller or faster package, there ends up being a lot of times where jQuery is either outclassed, or the dev wants to try something new. jQuery is here to stay, for sure.
If you want to automate filling the form you can use selenium or just send a post request. An easy trick to block spam (not 100% perfect but works really well) is to add an additional field that is hidden using CSS. Users can't see it but bots can. Then you just use an if/else statement to weed out spam. The bot coming to the site will sew the field and want to fill it out... i can give u an example I use later I'm on my phone right now. 
Yeah i'm pretty close to that now. I spent the last 2 weeks firefighting by trying to just keep up with emails and organize people. You're right of course - but the other option is to be a less respected and lower paid 50 year old. I'm not there yet, but i work with some. 
Also: just added error code management in the parser.
Very very cool, if I could, I would use this for making tunes for my HTML5 games if I the ability was there.
Dude, unless you live somewhere like Romania, you're getting exploited if you only make a quarter of that.
That's a pretty idealistic view honestly. The vast majority of companies want to make money. The people that start them just want to make money. 
I'll defer to mbostock's [Towards Reusable Charts](http://bost.ocks.org/mike/chart/), but his particular style of object is rough to understand for most. In the classical OOP way to build these charts, you construct all of the parts of the chart but don't initialize anything. So you have your svg group, the axis object, and the scale object, the group that your data is displayed from, but you haven't called any of their members. Then, in a separate function that I tend to call `update` or `refresh` is where you make use of all of those objects together, but you have to make heavy use of the selector you get from `data()`, with `enter()`, `exit()`, and then applying your `attr()` kinda like so: var self = this; selector.attr({ x: function(d) { return self.xScale(d.x); }, // and so on... }); It ends up being less code and works better overall.
Are you west coast?
90k is the beginning of the cherry zone in the midwest. It's the point where you actually "make money". It's only up from here man, for a while at least :)
How much JS experience do you have?
My employer is in Seattle, where I used to work. I work remotely from wherever. 
Hi Eli, Looking for resources/forums etc for "Google's Realtime API". Have you seen anything around. I have seen: https://developers.google.com/drive/realtime/ Question ... if you can help ... is there a way to control who has access to what? I want to give anonymous access to part of the data. 
Well I'm not a developer. Aspiring... and the pay increase is a big part.
You in the Research Triangle Area? I'm Looking to head that way - seems like a cool thing happening there
Portland, $75k, JavaScript makes up about half my job (ColdFusion, unfortunately, is the other half). Only have about 4 years real-world experience, but was a self-taught hobbyist for at least 5 years before that. Love what I do!
I have a coworker in Central America who makes almost double what I do (live in DC). Let your work speak for itself and know that there are companies or individuals who will pay top dollar for good work, regardless of where you are located
$12/hour, Full Time, central California, entry level (they hired me with very little expereince). The pay is about 33% less that my previous job (not STEM), but I enjoy it. Looking forward to ay increase as my experience and portfolio grows.
Well you usually don't make a website in just Javascript, you use it to make the interactive bits (usually). You would use HTML / CSS to make the actual website and then maybe something on the backend if you needed to store information from users.
Thanks, I'm planning on adding an export feature at some point!
How did you fall into your job?
20k is barely minimum wage.... ouch.
Cool, thanks!
how many hrs do you bill per year?
$70k, live in the midwest. I work for myself, mostly as a sub-contractor for other folks and work about 20 hours a week. I didn't start programming until I was in my mid-30's (I'm 45 now) and the reduced hours, combined with "enough" money leaves me with a lifestyle that lets me spend plenty of time with my kids, which matters greatly to me. I am starting to think about moving into a full time position (or taking on more work), though, as my kids will be going to college soon and I need more money to cover the associated expenses.
wanting to make money and wanting to better people aren't mutually exclusive though
Yeah man, go get some more money. SW where?
Talk about throwing the baby out with the bath water. I stopped wiping with toilet paper because it sometimes gets stuck, now I just use my hand. 
Arizona, phoenix area.
Oh hey I'm doing the same thing and at $65/hour in Toronto! I only recently started to focus on freelance full time after moonlighting for a couple months. To be honest I'm not quite sure where $65/hour fits on the scale - cheap? expensive? about average?
Its also an approach that is very resistant to change after you have the app in place. 
I actually do use my hand. If you got shit on your arm would you just take a piece of toilet paper and wipe it off? No you'd take it off with your hand (and water) and then wash your hands.
Not necessarily...it's resistant if you use a jquery approach but not if you use an object oriented approach.
Welp. I'm getting a new job. I'm not strictly a JS developer, I do a mix of that and other languages, but I'm 5 years out of college and I make $72k. And I live in a major city. Forget this.
Now compatible with mobile browsers
Ew you do that? Walk around all day with dirty underwear?
Not since that one time in Tokyo. 
Well, the three lowest hanging fruit would be * [Backbone](http://backbonejs.org/docs/backbone.html) * [Coffeescript](http://coffeescript.org/documentation/docs/grammar.html) * [Docco](http://jashkenas.github.io/docco/) All by Jeremy Ashkenas, as is Underscore. Meta-bonus: Docco is the tool that turns source code with markdown comments into those nice annotated code pages. 
I am a UI developer who works mostly in JavaScript. The most important thing to understand is if development is something YOU would enjoy doing. Developers (whether front-end or back-end) tend to have a certain mindset and be good with certain things. The tech world is a wonderful place to be, but only if you find a niche that you fit in with. Warning: oversimplification ahead: You might enjoy dev if you're a process-oriented person who enjoys coming up with solutions, and would rather do something right than fast. You might enjoy front-end (HTML/CSS) if you're a results-oriented person who enjoys seeing the product of your work. Of course, there are many more areas if neither of those quite fit you. You may also want to look into Business Analyst/Project Management type positions inside the Tech world. Those are a bit closer to your existing focus.
Wait really? I thought 80k was only common in the bay area.
Word. I grew up around Chandler/Gilbert/Tempe area. Little bit of Mesa too I guess. It all blends together. Is talent just cheaper there? I am up in SLC now, the dev market is great. I'm pulling 93k for just a few years of experience, and only heavy JavaScript in the last year. Before that I did all C#. Our cost of living is about the same too.. Move up here!
Well, I would still say you're being exploited. :)
Seems to work just fine for me. Open it in Incognito/Private Browsing mode—does it still not work correctly?
Works fine here. As soon as everything loads the slider changes, I can manually change the image using the left and right buttons. What specifically isn't working for you? Any console output?
I guess I'm getting pretty screwed.
This is the same talk as all the talks given in 2012 + 2013. Web components need a polished framework of web components to use and deploy before people really dive in to use them.
go become the trader person, test your models, show the case and they give you a quant desk (small commitment). You profit you go for much more...I just left after 14 years and want to finish my PhD..life is weird!
Ah, I see the issue now. When I "turn off" Line 62 - owl-carousel.css owl-carousel .owl-wrapper, .owl-carousel .owl-item { /* -webkit-backface-visibility: hidden; */ -moz-backface-visibility: hidden; -ms-backface-visibility: hidden; /* -webkit-transform: translate3d(0,0,0); */ -moz-transform: translate3d(0,0,0); -ms-transform: translate3d(0,0,0); It works just fine - As in, removes the seemingly randomly positioned white bars. EDIT: [Screenshot](https://www.dropbox.com/s/4bi9imx77zxcs3f/Screenshot%202014-07-18%2006.24.06.png) Just taking a look into why this might be.
Source: https://github.com/jsemu/gba
real source: https://github.com/grantgalitz/IodineGBA That repo you linked is IodineGBA with a wrapper full of preloaded games.
How much is your salary after taxes?
It's a common entry level salary...
Shit. You sound exactly like me, except that I work in the Philippines, and thus, is severely underpaid for the potential of work that I do and I know that I can do so much more than what I'm being utilized for. (think 12k.) I've been thinking about finding work abroad, but I seriously don't even know where to start. Reading stuff like this really puts a lot of things into a very bleak perspective. 
I have a 4 year degree in IT live in the NW and am a full time UI developer. I have 3 years of professional experience. 95k. My previous job was 100k but the hours were shit.
Our data center is in Scottsdale XD
195K a year, salt lake - ut, but I have 12 years experience, C++, javascript, C#, ASP.NET, Assembly mips/x86, MSSQL/MySQL and a whole other random languages under the belt. BTW, salt lake/denver are ripe with great pay and very low cost of living.
Interesting you say that. There was an article about how Google didn't think a college education mattered much ~~was just picking up people without degrees as they didn't think it mattered much~~. College definitely helps with the theory behind it all, but if you aren't given good projects to work on, kinda missing out. Experience is how you apply to the real world problems... Edit: I mislead, they didn't suggest they hired these people. Don't get me wrong, a college education does help get your foot in the door, but anyone can be a bad programmer.
$80k - 30% ~ $56k
ReactJS
My salary is $91K, and my company does quarterly bonuses that vary, but usually push it up to around $120K. Technically my job isn't just as a JS developer, but as a full stack developer. I also work on Python code occasionally, but my role has shifted further and further towards JS over time. I was hired straight out of college, and have been working at this company for about 2 years. I'm in Mountain View, CA (Near San Francisco), but I'm moving to Portland, OR soon, where I'll be with the same company, and make the same money. I really enjoy my job, mainly because it's a really great place to work, and we do interesting things.
TL;DR: we've come a long way, JS and us developers. The once ugly duckling of DHTML has finally grown into a beautiful swan.
As a full stack developer, i guess you also need to do some tasks on the operations side... So i guess some scripting languages wil l also be involved. Not just JS...
I am Czech, so finding suitable JS position was hard just a year ago. Today-things have changed. So many opened JS positions. I make 40k gross with very little to pay on income taxes, so here in Czech republic, I can live like a king. I love web development. At work things are not as exciting as when I build my pet projects, but it is still the most rewarding work I have ever done.
The fact that this thread has 132 upvotes, and React's new version [thread](http://www.reddit.com/r/javascript/comments/2azlvr/react_v011_is_out/) has 6 (at the time of writing this)... [wtf?](http://www.reactiongifs.us/wp-content/uploads/2013/08/shaking_head_breaking_bad.gif) 
FF will get there, soon. The thing im more interested is when will IE get it? How much as i hate ie, its still has to be supported because clients usually have windows with a default browser...
Works fine for me, ios/chrome
I make ~25k USD per year after all taxes in Eastern EU so it is comparable to ~50k in US / Western EU due to the differences in price of everything. I kind of like what I do, but I would rather be more of a web developer than a javascript programmer. I just want to code the site, click through it and hand it in. The code reviews, architectural discussions, unit testing, integration testing and overall working on the same codebase with 10+ people and having to share their mindset can be quite frustrating. However, this is the better paying job for exactly these reasons. I would recommend you to try and start building websites for people on WordPress. You can get one site done in a week or two and make about 1000 bucks for each. Find a designer and give him/her a half of that, you do not want to worry about both visuals and the code. This is a less reliable option than a stable job but you can do it along your normal thing before you pick up enough clients and reputation to make it your normal thing.
I learned to program in order to start a business, my business started flopping like a wet fish, I just happened to contact a friend of my to-be-boss on an unrelated matter, and he made the introduction and I was immediately hired.
The articles about that were a little misleading. Google said that college grads weren't necessarily performing better than those who were self taught. They didn't say that that was affecting their hiring policy however.
Crazy, isn't it?
At the time [this article](http://blog.nodejitsu.com/npm-innovation-through-modularity/) was published about a year ago, NPM had about ~32,000 unique modules, but they recognized it was growing rapidly. If you had asked someone about NPM 2 years ago, they'd probably dismiss it as a fad. Ask someone four years ago, they wouldn't know what the hell you were talking about because it didn't exist. Today, npm has [~84,000 unique modules](http://modulecounts.com/), many of which can be used in client side code. Combined with node-build systems, you can literally write JS code in any style you want. From haskell-esc functional to ruby to dogescript. OOP, Lisp, MVVM, MVC, ~~MV-FUCK THIS~~ use React. Sometimes I want to go up to people and shake them and say 'Do you realize wtf is going on right now!!??!!'. It's not about computers, it's not about languages, it's about *being human*. Human interaction with computers, communication, art, transcending cultural values. Programming is so *fucking cultural*, and I feel like an anarchist when it come programming architecture. Our computers expand exponentially, cultural evolves linearly. Something that'd be considered 'really really bad' in programming 4 years ago may have no consequence now, and the 'old patterns' we were forced to use, even as little as 4 years ago, are substantially hindering our progress. We just need to *let go*, accept that the machine I'm typing on right now is far, far beyond *anyones* grasp to understand. The gap between our programming cultures and computing potential is so vast that we've *barely scratched the surface* of our potential. Monkey's playing with fire. 
&gt; 80k isn't "common" in the Bay Area. That's cheap as fuck in the Bay Area. I'm an intern and I make around that. Gadzooks, for real? That's mindblowingly phenomenal! What's your background/qualifications, if you don't mind my asking?
100k + kpi bonus. Mid weight Front End Developer. Sydney, Australia. 7 years experience. Full time role. i'm moving into a Senior role soon. I absolutely love what I do. JS Contracting in Sydney offers upwards of a $800 day. There is so much JS work over here. My American dev friends mentions there is more work here. Come visit :)
It depends. If you are full time W2, they take the estimated amount out of each pay check, and then you make the correction in April by either paying a bit more or getting a small refund. If you are a 1099/corp2corp contractor, you generally get the whole sum you invoice for, and pay taxes 4 times a year.
It does the same thing for me, like in your video. Ubuntu, chrome Version 36.0.1985.125 Ubuntu, Firefox 30.0 seems buggy too. It doesn't do the stripes like in chrome, but the images load somewhat slowly and overlap sometimes. Edit: Also note that the explore button in FF is probably not positioned where intended: [screen](http://i.imgur.com/MbbAXzv.jpg) 
bloodhound is a "suggest" engine, it can be used for many things other than completions. it wasn't really built just for that purpose, as suggestions are essentially search results. it works on local and remote data. so, while you may be correct about it being a mammoth in comparison, it certainly isn't made just for the purposes you mentioned. i do agree yours provides a smaller, simpler solution which is a bit higher level than bloodhound, though :)
XML as a programming language.
Ok, then its the same as here. Thanks.
&gt;I'm an intern and I make around that. I was an intern and I made less than a dollar an hour.
Probably a bit late, but it would be lovely if the people replying could say what frameworks they're using. From what I've seen simply saying 'javascript developer' doesn't really mean much and there's a huge difference in skill set and salary between people specialising in using things like Angular or Backbone versus say people doing general jquery web builds or node or even game stuff.
Tech creates value for everyone, economics just plays with value created by others, creating... none
&gt; I'm making less than half of what anyone else has posted here -_- Don't forget about selection bias. The successful minority making 100k+ working in large cities who feel good about it are *much* more likely to post about it than the large majority in crappier jobs or in more rural areas who only make a fraction of that.
What frameworks do you use?. I have just finished a 3 month contract using jquerymobile. This was my first mobile based project and went with jquerymobile because I was already familiar with jquery. It was pretty easy to use, but was wondering if there are better frameworks around?.
Awesome work, some worth while improvements there - particularly rendering to null and JSX namespacing!
Does *fullstack* mean you also do backend as well?, eg php,MySQL etc.
What do you mean *fullstack*?
I'm in Victoria and have just finished my first jquerymobile site. What technology's do you think are are the most sought after?
ain't that the sad truth. most managers are incompetent from my experience. its rare to find a good one.
wow, that's pretty decent. 
Economic slave I am.
I was interested by the fact that the author implemented the object-lookup version of `getDrink` with functions: function getDrink (type) { var drink; var drinks = { 'coke': function () { drink = 'Coke'; }, 'pepsi': function () { drink = 'Pepsi'; }, 'lemonade': function () { drink = 'Lemonade'; }, 'default': function () { drink = 'Default item'; } }; // invoke it (drinks[type] || drinks['default'])(); // return a String with chosen drink return 'The drink I chose was ' + drink; } Why was that exactly? He wasn't entirely clear. Another way to go about it would be like this: function getDrink (type) { var drinks = { 'coke': 'Coke', 'pepsi': 'Pepsi', 'lemonade': 'Lemonade' }; var drink = drinks[type] || 'Default item'; // return a String with chosen drink return 'The drink I chose was ' + drink; } which I feel is a little more concise, while keeping in line with what the article was saying. Other than that, I pretty much agree: object lookups can be a lot nicer than if- or switch-statements in these scenarios.
Very similar, major difference is it only needs the bits that are required rather than fetching the file first.
Feels like suicide looking at these numbers while living in a 3rd world country.
Keep in mind this is New York. I live in Houston and would have to make probably 2x what I make now to live equivalently in NY.
Also full-stack here, yes that is what it means.
You're 100% correct. NYC is a very expensive place to live. That said, I actually live in MA, work from home part of the week, and stay at an apartment I have in NYC two nights a week.
You couldn't tell me apart from a full-time employee just by looking at me. One client, 7.5 hours per day, I go to their office every morning. There is a lot of that going on now in larger companies.
Unnamed *numerical* constants. Any literal which is used directly is an unnamed constant. foo('bar', [], {}, true);
Are you JS only, or do you do other things like Rails?
Living in 1st world, feels like an outsourcing opportunity.
Sure, it's more concise, but I just chalk it up to being an arbitrary example.
thats a bit over 100 an hour, there are places that are billing javascript devs @ 300 an hour I'm sure there are those that can negotiate getting 30% of that.
Don't you need a visa to work? (If you are a US citizen).
what big data problems do you usually tackle with lazy??
Great stuff, I really love webpack. Some tips on getting it to work well with things like npm packages that contain SASS and what not would be great. I still can't get it to work with bootstrap-sass
We are hiring too, in tempe. Send me your resume too.
yeah no kidding right? :-D
NYC but I wouldn't consider it an entry-level job. I did freelance first while learning.
He lives in the Bay Area. That barely pays rent.
Just moved to the Triangle from Michigan and working remotely for a San Francisco company. Working in the actual Research Triangle is cool if you can handle office parks, however there are some nice companies in downtown Raleigh and Durham that are a lot closer to cool restaurants and activities if thats your thing. So far I love it here. The weather is great and people are generally nice.
You've got this. Just work hard, learn like crazy, and know when to ask questions. I started developing professionally in 2010 (but I had done freelancing in college) and my salary trajectory has been: 55k-&gt;60k-&gt;70k-&gt;100k. As someone who came from a family with no money at all, my first programming job paid a life-changing amount of money. Seriously one of the best decisions I've ever made for me and my family.
It depends on the market. Are you working with skills that are hard to find, etc? The NodeBB team works in Toronto, we charge $95 USD / hr, but this is because there are very few developers who are comfortable with writing plugins in javascript/node. We also have overhead. For an independent dev, I think your rate is more than comparable. 
http://140byt.es http://atk.github.io/m2.js/
Being right out of high school and 1 year experience probably won't net you $70k. From experience, unless you're an absolute genius/prodigy, you work your way up. I'm not saying this is fair, but experience does matter. Every business is different and sometimes learning how the business works is the toughest part. If you have an excellent portfolio and can prove you're worth it, you might be in a position to negotiate a higher salary. Hiring managers are always reluctant to hire 18-19 year olds for high paying jobs. When I was that age, my work ethic was non-existent. I wanted to party and hang with friends. Remember, a lot of these high salaries are just a small percentage of the work force. Some of these people are far above the average salary in these fields. Our society tends to lean more towards the experience. Don't be bummed if you are turned down for jobs because you demand such a high salary at a young age. Build up your knowledge and work towards it.
Never realised that it was a thing. How can you only know just one of those without learning the others.
Oh fuck all. Get the hell out of there. I worked as a developer in the phoenix area for about 15 years. The pay range is ridiculous, like 30K-200K. The #1 trick when negotiating salary: the first person to say a number loses. 
Lol, you can definitely pay for a veeeeeery nice place in the bay area and pay rent on that salary, don't be ridiculous. 
It's common to file/submit your taxes in April (actually any time between January 1st and April 15th, but most people procrastinate), and at the same time pay if you owe any. The refunds come months after that.
Programming in general is a lot of fun. Clean sedentary indoor non-customer facing challenges and pay too. Javascript is lots of fun although you'll need to learn more than a language if you are going to be a developer. You also have to stay current.
Are you guys using "ninja" ironically? Because I'm fairly sure we had a backlash against those kinds of terms after recruiters started using them.
I think its so you can provide some sort of logic for each case - thats what a switch statement is doing. The example breaks down here because its so simple... but he didn't want to bog down the example with other distractions, so we just return a string
I live in Ireland, can confirm.
Very cool. The sound seems to be a tad off though.
at work here we have a management track and a technical track, you can be supervisor and director, or you can be engineer and architect. They make sure that the salaries match as well.
Coool :) The first link is pretty cool. I got a few errors on m2.js though :(
Thank you. What kind of errors and what browser were you using?
Using Chrome Version 36.0.1985.125 on OSX Mavericks! Uncaught TypeError: Cannot read property 'name' of undefined atk.github.io/m2.js/:808 Uncaught TypeError: Cannot read property 'version' of undefined atk.github.io/m2.js/:809 Uncaught TypeError: Cannot read property 'name' of undefined atk.github.io/m2.js/:810 Uncaught TypeError: Cannot read property 'name' of undefined
I wrote [Cryptbin](https://cryptbin.com). It's not entirely JS related, but the bulk of the project is handled by JS.
If you are single, have no kids and no pets, maybe. A studio apartment in San Jose is over $1k/mo. You can buy a double-wide trailer in a slum for $300k.
ditto where I am. The architects are still in a lot of meetings, as one of their main roles is to advise on different projects, but they're technical meetings at least 
English person here. I'm not STRICTLY a full-time Javascript developer but to be honest it's pretty much all I do these days. I'm on 38k GBP, which is 65k USD. Would be interested to hear from other developers in the UK if that tallies with their earnings.
I learn by doing, so I usually start by building a simple app (like a blog) and following all the best practices I can find. This let's me focus on the framework instead of my app's features. It's also helpful to try porting an existing website over to the framework.
Ooooooh, that is a very interesting idea :) Do you get much traffic ? The whole, paste destructing after first view thing is pretty cool!!
Pretty cool!! Quite similar to a site my friend wrote, [encryptmyshit](https://www.encryptmyshit.com/) . Seeing a lot of these encryption things pop up - they're very handy.
Well said. I'm in my late 20s and still learning this. I'm 3 years into my 2nd job out of college. I spent 3 years at my prior job. I've learned a lot, but there is still plenty to learn.
Thank you. I'll check them out
https://github.com/usablica/_s/blob/master/_s.js#L7 :( Messing with the prototype just isn't worth it. I get that it's cooler, but it's really, really dangerous. I would never incorporate a library that extended a native in a codebase. Would you be open to _s(Array, 'key')?
Thanks! When I first posted it to Reddit I got a lot of traffic. It has since dwindled down but I have done absolutely no advertising since.
Nice! I had been asked to add file encryption but I have, as of now, refrained from it. Too many concerns with people encrypting illegal content at this time.
Friend: - http://heyokadesign.com/coachboard/ Mine: (three similar drag and drop projects) - http://drop64.com - http://colorpal.org - http://mwcz.org/static/projects/colorpal_colorcube/
Front/Back/Full-stack is more about specialization than it is about *only* working in a certain space. Full-stack are essentially meant to be experts in both the front end and back end stacks of whatever platform you are using.
Don't have any friends who are into javascript :(. Here's something I did last summer though. http://fuzzley.info/spider/ github: https://github.com/fuzzley/fSpider
So yeah, sure. But I can't get the point, why not prototype?
Ooooooh Coachboard is cool. Not in to sport but I can appreciate that it works well and looks great. I actually did something similar in Uni with Silverlight for an assignment. It was good but at the same time terrible because of the language :) The color pal projects are pretty cool. Never done anything like that, is it hard to make it extract the colors from an image?
Makes sense. Now that you have a year of experience on your resume I imagine it will be a fair amount easier to get some interviews. My very first dev job I got lucky even getting in. I don't know how it is for the average 0 experience guy, but I felt like landing that first job was nothing short of luck. So given that, my salary was about what you got, low 30s. Its only been a few years and I'm at 93k per year, I work from home, and pretty standard benefits otherwise.
I worked with html and got it to show up in the browser, live, but it was quite boring and somewhat more difficult than Javascript. I can work with html but how would I implement Javascript?
Spider was a bit slow for me :( Its a bit weird, I would have thought that KineticJS would have made it pretty quick?
Oh?
Those concepts were required knowledge for getting the job. What I want to do is solve the fun problems like big data, machine learning, distributed caching, interfacing with custom machines etc. 
$72k, US (DC), three years of experience. I'm a journalist, but one who works on data analysis/reporting (which I mostly handle in Python and MySQL) and interactive graphics and data visualizations (which are primarily a frontend thing, as you might expect). The money's not as good as a lot of the other posters here, but if you're interested in something that isn't empty and has a lot of potential to help out in the world, you ought to give it a try. The end results are out in the open (no proprietary grind), iterations are crazy fast (projects rarely take more than a couple of months to release), and you deal with all kinds of neat people and problems. A couple of posts full of links/stories/examples of other people who do this kind of work: [1](http://dansinker.com/post/55724537132/opennews-why-develop-in-the-newsroom-part-1) [2](http://dansinker.com/post/55903929153/opennews-why-develop-in-the-newsroom-part-2) [3](http://hackerjournalist.net/2013/07/18/why-i-work-in-a-newsroom/) The Knight and Mozilla Foundations' [OpenNews](http://opennews.org/) partnership has a 10-month fellowship every year for people who want to get into development within newsrooms, and there's still a little time to [throw your hat in the ring for next year](http://opennews.org/fellowships/), if you're so inclined. (I haven't been through this program myself, but one of my friends has. Also, next week is OpenNews' first [SRCCON](http://srccon.org/), which might be interesting to follow on Twitter.) On the non-OpenNews side of things, there are [the National Institute of Computer-Assisted Reporting](http://ire.org/nicar/), which has a particularly investigative bent and [a very active mailing list](http://ire.org/resource-center/listservs/subscribe-nicar-l/), as well as [this site](http://datadrivenjournalism.net/) from the [European Journalism Centre](http://ejc.net/).
There are 2 ads on the site. Turn off ad block ;-)
I will try to find a good link with an explanation, but my quick reasoning would be: If nobody extends natives but you, and you don't plan on having your library used with others, that's probably fine. But, if everyone feels like, "why not?" and extends natives, you'll eventually end up clashing with others. It can be even more likely in Node land. Imagine your app having a dependency on `_s#1.0.0` and one of your dependencies having a dependency on `_s#2.0.0`. Between the versions, let's say your library has two entirely different APIs. Well, I threw a repo together with an example that doesn't work due to conflicting prototype overrides: https://github.com/stephenplusplus/prototype-extending-in-node-is-bad
A friend and I have been hacking on [DropKick.js](https://github.com/robdel12/dropkick) for a while
I often setup a `State` object, then bind other components to the changes in the state. Currently my State object is a Backbone.Model -- I'm thinking Object.observe() would let me accomplish this natively. Is this a bad pattern? &gt;The fact that simple assignation can now result in literally any behavior is an inscrutable design choice on the language front. If I know that an object is a state object, I expect that any changes to it will effect other components in my application. Yes, this often gets messy, but it's the best messy solution I've come up with :). I do see where this could be dangerous, if developers start observing whatever kind of of objects. But *danger* is Javascript's middle name《〠_〠》
OOPS. How embarissing :)
Thanks, I'll tell him you like Coachboard! It isn't terribly hard to extract colors, but tweaking the algorithm to produce good color palettes for many different types of images takes a lot of time. The algorithm I created is a [modified median-cut](https://github.com/mwcz/median-cut-js).
Ah cool. So if I wanted to I could take that JS and extract colors from images then?
Friend: http://planetaryjs.com/ * Custom interactive globes for the web. Mine: http://reactions.us/ * New reactions for Facebook posts. 
I think I'm a bit underpaid as well, but I think it's important to note I haven't finished college and had little experience. I've been here about 5 months now, so we'll see if that changes soon.
You clearly don't live in the bay area. At $80k in CA your take home would be about $56k after tax, breaking that down you should be spending $1400/mo on rent. That will get you a very old, unrenovated 1br an hour drive from work. You want a 1br built in the past 30 years within a 30 minute commute? That's over $2k/mo at this point. The bay area is the highest cost of living in the county at this point, they just announced our housing prices have reached the pre-bubble levels yet salaries have yet to recover. 
Yeah! It's all FOSS. (AGPL)
I'm working on a project that uses websockets (via SockJS) to stream live log file updates: http://www.github.com/joeattardi/tailstreamer
Thank you, I'll definitely look into that issue next week.
First off, I love JS. I have been programming pretty much since college - even though I didn't go for CS. Have been in the industry for about 13 years doing a variety of things (web/graphic design, fullstack web dev, nodejs, APIs etc.) Right now I make $75k/yr + full health + other bene's - Upstate NY Primary work on AngularJS projects, with a smattering of Node / jQuery / Knockout in between.
Oh cool, so you can view logs without having to SSH in?
Posted it a month ago, but I wrote a cross-platform hardware driver and report-runner for a medical device (that's only supported on Windows) in Chrome. https://github.com/altintx/chromadex
I see, well I cant think of a use for it at the moment but its good to know :p
http://jsiso.com/rabbitzombies/ Still basic but it's hooked up with web sockets and works on any device. You can chat, move around, there's day/night clock cycle and if you press space bar at a door... it will open... for no reason at all!
Not really. I mainly use jqgrid (may not be the prettiest, but I have found that it is the most versatile) for all my crud interfaces, jqueryui and a few other plugins. I have written some standard front and back end routines (patterns?) that allow me to whip up a basic app in no time. There are so many frameworks that have so many passionate users that I am lost in deciding which one I should go for.
Don't get me wrong, I make a lot more than I would in most jobs here, the main reason I freelance was to avoid the code sweatshops. I've been at it for about 2-3 years and have done fairly well, but it's difficult to get started. That said, the reality is that in many contracts there have been negotiations to adjust initial estimates based on my geography. It's simple economics, we're considered offshoring.
I am primarily a javascript developer though right now I am working heavily with iOS and Android development.
Was offered meth by another rabbit. 10/10
This thread is the answer to the question, "why isn't my site making money?"
Did you go to school for computer science? My BA is unrelated to this career path and I have nothing on my resume that applies to programming. The only thing on my resume that's related is [my github projects so far ](https://github.com/MarcoAZ) where nothing is quite a finished project and a web design class I took in college. My dream job is game development, if you couldn't tell. And also, thanks for the words of support!
Right. You start the server on the system with the log you want to monitor (the server side is a Java app), then you just log in via a web browser to watch the log file.
Firefox has known sound bugs. 
My friends haven't open sourced much but here's some things I've made... [taptempo](https://github.com/mrchimp/taptempo) - Find the BPM (beats per minute) of a piece of music by hitting your keyboard repeatedly. [blabber](https://github.com/mrchimp/blabber) - Web chat/IM system built in Node using websockets. Features text-to-speech and voice recognition because why not. Also: multi-room support. [[Demo](http://blabber.jit.su/)]
Interesting - what are you using for Android? Phonegap?
Thanks for the correction. I hope you can find some use for fuzzyDropdown. :)
A website contains many different components. In its simplest form, it is just an HTML page. What you are talking about is probably a modern site with nice style and cool interactions. In those sites (let's say server less, no data being saved in forms or whatever) JavaScript falls into the 'interactions' category, mostly.. If you want cool things to happen when the user does something, js can do that. In this sense JavaScript executes when it is responding to an event, like clicking or hovering. Go a step further and introduce some really cool JavaScript and it can do a lot more, like send data up to the server, dynamically change what is shown on the page, and much much more. SPAs utilize a lot of JavaScript to accomplish what they do. This is a pretty oversimplified explanation, but that is the gist of where your js knowledge comes into play when making a website. Now go figure out HTML and CSS.
Webpack is great when browserify cannot provide the control you need. I use it with the official grunt plugin to do some crazy powerful build systems.
Regular front end dev here for a small brand/web studio in Cardiff. I make £28k which is about normal for here I guess. 
I'm using Chrome.
I assume it's not running fullspeed for you then. Chrome is a quarter slower than firefox. 
That repo is also precisely what is represented by your link. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) require that posts relate to JS and offer at least a modicum of discussion fodder, and a simple demo alone does not meet that criteria. Someone reported your post, and I agreed that the post should be removed, but I try not to remove content when I can. Since the site was hosted on github.io, it's trivial to trace it back to the source that powers the site. So that's what I did in lieu of removing the post. tldr: If you post something like this in the future, please include a link to the source.
Why I don't get it? [1,2,3,4,5,6]._s('0'); // returns [1] [1,2,3,4,5,6].slice(0,1); // returns [1] [1,2,3,4,5,6]._s('-1'); //returns [6] [1,2,3,4,5,6].slice(-1); //returns [6] [1,2,3,4,5,6]._s('0:3'); //returns [1, 2, 3] [1,2,3,4,5,6].slice(0,3); //returns [1, 2, 3] [1,2,3,4,5,6]._s(':'); //returns [1, 2, 3, 4, 5, 6] [1,2,3,4,5,6].slice(); //returns [1, 2, 3, 4, 5, 6]
Sure. `switch` is awful. If you forget to write `break` and you don't want to fall through, it will fall through. Nasty boy.
$45k/year in the mid Atlantic region, no benefits. Contracted out by a non-profit to work on site in state government as a GIS devleoper (so I make interactive maps mostly and display the data that goes with the maps). It's my first job out of school, I've been here for about two months, but I had an internship working with the non-profit for 2.5 years. I'm more full stack than straight JS because I'm the only one with a diverse enough programming skillset. I love this job a lot but I'm not optimistic about salary increases keeping up with my experience so I'll probably move on in a year or two.
Manipulating global state is a direct conflict with modularity. Why does node (and modern code in general) use modules with their own dependencies? Because then you can have different versions of the same libraries without conflicts. If two incompatible versions of your library get used in one single app shit breaks because they are racing to manipulate the global state. Appending stuff to global prototypes is a huge red flag on the author. Don't do this. You break the contract of using modules. 
Why do you have the arguments as separated string? That's just nonsense, use individual numeric arguments like everybody else. Also: does this even work? Where are your tests?
&gt; even Douglas Crockford recommends not using it ... and he still uses `switch` like crazy in his own code.
Last year it took 3 months to get it. Still haven't gotten ours this year.
You should fix the scrolling.
I have this issue on webstorm's inspections and for the life of me I can't figure out how to resolve it.
&gt; not trying to find a higher paying or more rewarding job is the best way to not achieve it Well yeah - I wasn't arguing people *shouldn't* look for better jobs; I was just explaining why/that there was a systematic selection bias that might cause people to misjudge the average salary based on a "random" sampling of comments in a thread like this.
This is really sad. Given that people are all but coerced into using JavaScript because it's the language of the browser I'll just chalk it up to Stockholm Syndrome and move on. 
Amen. Javascript became one of my favorite language to work with once I understood its quirks and learned to avoid its pitfalls.
I'm one of the slow April filers. 
If the file iteration portion of the program seems slow, try placing buddy.js's try catch clause into its own function and call it rather than have it within the foreach function body. Doing this should allow V8 to optimize the looping function, and if there is an issue with optimizing the try catch clause it won't impact your program overall. From [V8 optimization killers: unsupported syntax](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers) Other than that, the program looks very clean.
Working on: * https://github.com/fmtoffolo/SeasonPremiere - Stream latests TV shows from a dynamically created library. * https://github.com/fmtoffolo/showsearcher - Get TV shows torrents and subs in multiple languages.
Yes mostly cordova. I've written a few plugins for Android and iOS for a project I'm working on and hope to release the plugins as foss soon. That experience got me interested in native development (Java/ObjC) but I haven't committed myself fully quite yet.
I don't have time to find it right now, but someone profiled this awhile back and the switch statement was quite a bit faster. I'll try and find it and update my comment later. edit... So, as I started looking into it, I found lots of conflicting jsperf tests ([1](http://jsperf.com/switch-from-switches), [2](http://jsperf.com/switch-from-switches/4), [3](http://jsperf.com/switch-from-switches/2), and most of those have many, many revisions), but [this SO answer](http://stackoverflow.com/a/13384020/84473) makes some good points about the asymptotic nature of the problem. I won't regurgitate what was said there, but I will add my 2 cents... For performance, there really is no substitute for profiling the actual code in question, and iterating different techniques. For instance, I wouldn't be surprised if a `switch` could be optimized better if you could guarantee that a few of the cases covered a majority of uses, with only a smattering of outliers that rarely occurred, because you could move those cases to the top of the `switch`. But then again, `O(1)` is pretty tough to beat... For code structure, sometimes it may be easier to externalize the data as a lookup table (hash map/object), which could even be precomputed and/or persisted to it's own file, which makes it more portable across implementations (easier to isolate for testing, among other things), and it's usually a good idea to keep data and logic separate anyways. But if it's not just pure data and there's some logic required, then a `switch` is probably better. I say _probably_, because I would start questioning at that point whether the behavior should be abstracted to a separate object (and/or family of objects). **Ultimately, it depends on your specific situation;** declaring either approach as _bad_ is just dogma. Use whatever is the most maintainable and testable, and if a performance concern arises, then search for alternatives. Also, I found a thread from just 2 months ago in this sub with quite a few very good comments: [Is "switch" ever a good idea in JavaScript?](http://www.reddit.com/r/javascript/comments/2582qv/is_switch_ever_a_good_idea_in_javascript/) Lastly, `switch` has the distinction of being able to implement [Duff's Device](http://en.wikipedia.org/wiki/Duff%27s_device), though I've yet to ever [see one in the wild](http://jsperf.com/duffs-device)...
Nice. I am interested in learning PhoneGap/Cordova - any advice?
I hate MIPS 
My big personal project is just crud but it is helping me learn! 
I don't get the obsession with JavaScript. I used to love its little quirks and eccentricities, but the level that people have taken it to is ridiculous. Are you people really so in love with JavaScript that you need to make other languages more like it? While we're at it, what are y'all smoking that you really want to write your fucking servers in JavaScript too? Sorry that this turned into a rant. As someone who used to call JavaScript my favorite language, the whole JavaScript jerkfest really bothers me for some reason.
well, this one's just for fun, written when I was checking how much of the code of a Titanium app (===written in JS) can be directly pasted into a Swift app
145k in San Francisco will probably go as far as 12k in the philippines. (*slight* exaggeration)
mxGraph
Are you ranting to everyone of the 48,818 subscribers? What are you doing here?
I live in Santa Cruz, born and raised. I can only afford a tiny room in a shitty house atm. I spend $700 on rent and I make less than 20k a year at this point. Your vastly exaggerating the cost - there are tons of places in the bay where rent is cheaper. Not talking about getting some sexy place in the heart of the valley next to work. Santa Cruz has higher rent than most of the bay area.... My friends live just outside SF for less. 
I love JS. But every language has its pros and cons, and I don't get why the JS community has taken it to such extremes.
I did go to school for computer science, but none of the companies I've worked at care about that. They only care about a few things: - Are you smart? - Can you deliver? - Will you fit well on the team? I'd say 80% of my past/present co-workers either didn't have a degree or had one in unrelated fields. Game programming is a tough nut to crack. I suggest finding some other programming that you like (maybe front-end web development [AngularJS in particular], or Node.JS) which can pay the bills while continuing to teach yourself game development on the side. There is a ton of need for it out there, particularly with start ups. Good luck!
Maybe you're using it wrong? If you (not specifically you from here on) come into JavaScript with the standard college education thinking that you are going to bust out some classes and inherit from some library using Java techniques to solve your problem... you are in for a headache like no other. If you think there's one true solution to making a web server and anyone breaking that mold is obviously going to fail in a burning inferno or thinking outside the box to solve an problem without being able to pull out the good old C++ Algorithms book and implement a solution, you are in for another headache.
It is. Though I don't actually develop financial software. I work on more of foundational things used by other developers at the company.
Others: chrisdickinsin's glslify is pretty cool, [I blogged about it here](http://mattdesl.svbtle.com/glslify). Also [shader-school](https://www.npmjs.org/package/shader-school) shows a lot of promise. Mine: - [impressionist paintings](http://mattdesl.github.io/impressionist/app/) - [vector font utils](https://github.com/mattdesl/fontpath) for rich text animations, like [this](http://mattdesl.github.io/fontpath-renderer/demo/tris.html) - [match-two game in canvas](http://mattdesl.github.io/html5-match2/) - there is also [kami](https://github.com/mattdesl/kami-demos) but it is still a bit unstable 
You've tangentially hit upon the point I'm trying to make. You're right, there isn't one solution to writing a web server. But there are solutions that are better than others. And using JavaScript, a language that was originally creating for client-side scripting, for writing a web server feels a bit absurd. And trying to port JavaScript paradigms to other languages is absurd. Part of the beauty of programming languages is the syntax and idioms of those languages, and what they do well, and what they do badly. Trying to shoehorn JavaScript into all kinds of random things just irks me a bit.
Turning over £100-120k as a freelance Node dev in London. There seems to be a lot more work than people available at the moment, so it's a pretty good time and place to work right now.
UI/UX Dev. ~2 years of experience but just graduated college. Salary is 55K.
Remember kids, when in doubt just add more callbacks! Seriously though, my advice is to write more switch-constructs until you know why they're useful. After that, go read about design patterns and how to not invent your own anti-patterns.
Forget performance -- what you are doing is not secure at all. It introduces a gaping hole for cross-site scripting (XSS) attacks. For example, I could post a link on your forum that steals the session cookie of anyone that is logged in who views the page. That would allow me to compromise any of those people's accounts. 
Sorry I should write unit tests.
 if ( (lhsArray.length !== resultArray.length) ) throw new Error("Arrays must be the same size"); This is one of the most bizarre javascript coding styles I have ever seen. I can't understand how anyone could find that more clear than: if (lhsArray.length !== resultArray.length) { throw new Error("Arrays must be the same size"); } Or, at the very least, you could just aim for consistency and reformat your for loops: for ( (var i = 0, l = lhsArray.length) ; (i &lt; l) ; (i++) ) resultArray[i] = divide(lhsArray[i], divisor);
It's possibile to detect if something has overwritten native prototypes. Check out how lodash does it: https://github.com/lodash/lodash/blob/master/lodash.js#L660 https://github.com/lodash/lodash/blob/master/lodash.js#L2880 Checks to see what Function.toString() looks like on a native prototype method, and then sees if other prototype methods match the pattern. That being said, if you find a library is modifying built-in prototypes, that is sufficient grounds to falcon punch it out of your code base.
Reactive dependencies are the future of user interface development, but HTML sucks. It's far better to bake reactivity into the language and then manipulate the DOM or any output structure directly. Reactive dependencies are a generally useful so we need a general solution not coupled to twenty year old HTML document declaration syntax. 
Have you seen async functions? They're insane. Coming in ES7. If you have generator support (which I believe you do in Node) you can polyfill them too. 
A whole bunch of things. My biggest gripe, as I am the one most frequently trying to manage the relationship between the client and the server, is that ColdFusion's implementation of WebSockets sucks..so..bad...also, we had to create our own REST framework from scratch because nobody uses ColdFusion for that kind of thing, and we're just stuck on it. Thankfully, we're starting to talk about the dire need to move to a more modern language (we're all leaning toward Go).
The auto-scroll effect works OK in the latest Chrome (Dev Channel), but is pretty iffy on mobile browsers. Could you describe what happens and your setup? Thanks :)
Coerced? Really? Someone held a gun to your head and said "you have to be a front-end developer."
Use /vendor or something a little less ambiguous, instead of /private.
Works fine for me too -- Chromium on Arch. Are you sure none of your extensions are interfering?
What doe she do that is particularly good?
I always found JS on the server to be a really baffling trend. The first time I heard about NodeJS, I thought it was an interesting idea and a cool proof of concept, but didn't think it was worth much outside of nerdy academic/computer science curiosity and "because we can". ...then it BLEW THE FUCK UP. Suddenly everyone was writing everything in NodeJS. THEN people started writing *[desktop software](https://atom.io/)* in it. What's next? [Desktop software in PHP](http://wxphp.org/)? Seriously though, I think Node was just in the right place at the right time. Websockets had enough mainstream browser support that "realtime web" was officially *a thing* and there wasn't really anything out there that was designed to handle it. Java was the only real option in the web sphere unless you wanted to write something in C/C++. Ruby, Python, PHP - none of the solutions for writing servers and handling concurrency in these languages were particularly good. Even the solutions that have emerged in the years since Node aren't exactly great. The fact that Node seemed like a good idea compared to the other options is the most telling. Javascript was also a language most web developers already knew (or thought they knew), so it was an easy sell. However, today we have Go. It's extremely well suited to many of problems Node was trying to solve, and probably more importantly, is proven in production at scale.
So not a "veeeeeery nice place" then. 
Are you seriously trying to say that writing convenience functions is "absurd" and a sin against the racial purity of the language?
Uhhh no?
well, these are just convenience functions - not sure why you're ranting. also: a lot of programming languages history was "porting other languages paradigms". not the case here, i just wrote few convenience functions for fun, but following your logic one should not extend C beyond K&amp;R first edition.
I'm just confused about how the term "racial purity" entered this conversation...
it followed "ridiculous", "jerkfest" and "what are you smoking", so I don't think you're exactly the person who should call for high discourse standards on this thread...
&gt; When the "legacy IE problem" is finally over (in maybe 2 years?) That's pretty optimistic. IE6 has just (in the past 2 years or so) become something most people don't have to worry about anymore. Comparatively, IE8 is the default browser for Windows 7, which is still in widespread use and has support from Microsoft until [2020](http://en.wikipedia.org/wiki/Windows_7). Unfortunately shims and polyfills are still going to be a part of the client side Javascript landscape for many years to come.
Where at? Some kind of hacker house?
You're kind of ignoring what he's talking about, though. He's wondering why JavaScript has a cult-like following around it. I use it heavily, too, but I'm not of the opinion that it needs to be everywhere. Dude was just asking that.
Perhaps look around the freelancing websites and select projects that will help you gain experience.
`document.write` is a dangerous API that should only be used by advanced developers in very specific situations. It allows you to inject new markup into the HTML as it's being parsed. If you are not careful, you can completely clobber the page by doing this. The `console` is a completely unrelated thing. It's a set of APIs that let you trace out debugging information into the Web Inspector. If you don't have the Inspector open, `console` does effectively nothing. `document.write` _changes_ the contents of the page. `console.log` traces out debugging information to a place where only developers will ever see it. If you are just learning JavaScript and want a place to store test information, use `console` and forget that you ever read about `document.write`. I can almost guarantee it doesn't do what you want it to.
While the page is still loading, any calls to document.write will inject whatever into the document... this can be useful in certain situations but in 99.98% of cases it isn't really required. Also, if you wait until the document has loaded and make a call to it you'll blow away everything on the page and replace it with the string.... not particularly useful. It used to (and by this, I mean, a decade or so ago) be the defacto way to write out dynamic content to a page -- this was before the DOM apis and when innerHTML wasn't widely adopted. These days though it's a bit of a relic of the past. The only use case I can think for it off hand is in a popup -- if, after you call `zz = window.open(etc)`, `zz` has a document that you can open, write to and close.... even then, there are, most-assuredly, better ways to go about that.
Try out the angular tutorial https://docs.angularjs.org/tutorial I recently went through it and I thought it was pretty good.... gives a really good intro to, not just angular, but things like node, npm, testing frameworks, etc. 
You can use them right now in node 0.11. I am.
I think you're trying to understand too many things at the same time. I suggest you follow a guide (for example http://emberjs.com/guides/testing/unit-test-helpers/) about automated testing of emberjs apps. Try to get a basic test suite running with the frameworks the guide suggests. Get to know the frameworks in your list as you run into limitations or annoyances. This approach will give you a better idea of what frameworks you'll actually need (to know) and which ones you can safely ignore.
Jesus!
If you use document.write(), you will see ̴͉̘̦͖ͤ͆͆̔́Z̘͈̗̝̳̓͒͒ͯͦͭĄ̰̋͌͒ͣͪ̈́̀́L͕̰͉̈͐̽ͭ̕G̹̬͕̹̟̺̤̎̀̉̃͆̚ͅO̐ͯ̽ͨ͏̦̻̣̹
Does this seperate between development, and production mode. That is, in development i don't commit anything, I write a test, and see it fail/pass quickly, So my guess is i don't use travis and sauce labs, i use karma with phantomjs to run tests locally, but it only tests against one browser (phantomjs). Then, in production i commit code, I test against all browsers, so my guess is Travis runs my tests on Saucelabs that tests against every browser. Actually i want to integrate testing concepts into my gulpfile, so is this an accurate workflow for testing?
I followed the ember guides. and watched these amazing videos [Erik Berry at EmberConf2014](http://www.youtube.com/watch?v=MGRJUJteWPA) and [Erik Berry at SLCEmberMeetup](http://www.youtube.com/watch?v=GRT5YcXmm7E). They talk about how to get the basic test suite running. But it doesn't talk about continous integration and things that John Dalton talks about. I have only tried server side testing, but i am confident enough that i know the basics. I would like to see a complete guide of all these things combined together, or a sample ember project with a gruntfile that includes all these testing related tasks.
egghead.io. way better.
mocha and qunit are test frameworks, basically gives you the syntax for writing tests. karma is a test runner. Can run client side unit tests. phantomjs, casperjs are a headless browser (for running said unit tests). It just means its a browser running hte page, but no window. travis ci and jenkins are for running unit tests for each commit and then automatically deploying that code somewhere. I'm not sure what the other stuff is, testem, sauclabs.
Jenkins (or something similar) is probably the glue you need. In Jenkins you can run tests automatically when you push code to a repository. Jenkins will run your test suites using Saucelabs, Grid driver, Karma, whatever, and generates reports on them. In Jenkins, you can perform a task based on the output of a test build. So when all tests runs green, you execute a command that integrates code in mainline. You don't have to run Jenkins locally, but do make sure you setup your test suites in such a way that they can be run on your local machine, because you don't want to push your code just to run tests on it.
what?
Can you explain it the difference in simple terms please? Thanks in advance, if you decide to.
My goal is to build apps-I'm really interested in that kind of stuff.
Any example of freelancing sites I can try? 
I'm in the same position as you are right now. I feel comfortable with javascript and such but I'm not entirely sure what to do next. what I've been trying to do is find cool and simple apps on the web and try to mimic them see if can. I've been also doing some problems from [problem of the day](http://problemotd.com) and /r/dailyprogrammer.
The document is the web page you see when you load a site. Writing to it means changing the markup (HTML) of the site (usually used for changing the site before the DOM is loaded, but that's another discussion), and can easily mess it up. The console is what you see when you press F12 and go to the console tab. It's a tool for developers to see what's going on in the code, and doesn't actually change the site at all. You should never use document.write for debugging purposes (or pretty much anything else) - that's simply not what it's meant for, and console.log is a much better alternative.
Freelancer odesk to make two. Even fivr!
I'd advise not doing that, as most of freelancing isn't actually building. It's dealing with the client, contracts, etc... and that can be overwhelming when all you're trying to do is learn. Think of some small app ideas, and build them. Throw them up on github, and shit like that. Off the top of my head: * Todo List * Picture Slideshow * Poll application. Keep your projects super, super, *super* small. It's so easy to get sidetracked or give up on something, and leave everything half finished. 
Yes.
It was bumped to ES7 for whatever reason. The proposal itself isn't that new. The [wiki page](http://wiki.ecmascript.org/doku.php?id=harmony:observe) was created on 2012-09-21. It was meant to go into ES6 and many older resources still call it an ES6 feature. It has been in Chrome Canary (behind a flag) since version 25 (~November 2012).
If you're looking for your JavaScript skills to be challenged then I suggest you try out www.codewars.com/
My suggestion is to start doing something from scratch. Implement a simple idea, then challenge yourself with more and more complicated tasks.
Northbound was a bit of fun. I was exhuasted the whole time though, is there any way to rest ? :)
Why is the Server side Java and not something like Node.js?
So is a "chromadex" a medical device?
probably u will need to learn these: -Advanced function like function Composition,Currying or what they call it functional pattern http://www.youtube.com/watch?v=m3svKOdZijA -.apply(), .call(), .bind(). -Debugging. -Asynchronous execution. -Stuff like WebWorkers and other new HTML5 API. -JavaScript design patterns. -Learn one of the most popular MVC libraries. Angular,BackBone,Ember. I dont have good resources for all these but you can try search.
Apologies in advance for not including videos as I don't know of any. But, I can include some references that help to wrap your head around promises and their purpose: https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns Shows some ways in which promises are commonly mis-used. Might be tough to make sense of if you don't already use promises, but it does help to show you how they are supposed to be used, which can be very helpful. The same library has an explanation of promises in its readme: https://github.com/petkaantonov/bluebird#what-are-promises-and-why-should-i-use-them And, from experience, a brief example from a recent project of mine: I wrote a file tagger in node-webkit that stored data in SQLite. All calls made to the database were async, and so each and every call made use of a promise, as there were often many calls made in sequence. So rather than have a nested sequence of callbacks, the code looks like (oversimilified pseudocode follows): getFiles().then(getTags).then(associateTagsWithFiles).then(initUI); Each of the functions in the above chain returns a promise object and then does some work asynchronously, eventually resolving the promise that it returned with the newly processed data. In short, any time you have multiple asynchronous processes that needs to run in sequence, you can use promises to avoid nesting callbacks. In the nodejs world, everything is (or should be) async, and so promises do a world of good at letting you write code that looks synchronous.
Codewars.com
You'll never win this argument. To the NodeJS fanboys, if you don't consider Javascript to be the greatest thing since Jesus and the one true language, then you just don't understand the paradigm. It's like watching North Korea "Invent" all these things the rest of the world has had for 40 years, while patting themselves on the back about it. 
Doesnt path finding usually mean its automatic? Like when non player characters follow a predefined path around a map?
I did actually abuse it once to write out stylesheet links for my blog. I wanted multiple themes, but the fact it was a static meant that I couldn't determine which theme a user wanted before the page was loaded, so I stuck a tiny bit of JS at the top that read localstorage and wrote in a link tag. It made more sense conceptually than manipulating the DOM using the more general methods, and because everything was so small, it worked a treat. This is a terrible way to use JS and I should have sorted out theme issues on the server.
But it could also be used in cases such as: enemy finds and follows player; finds farthest past from player to place an item; calculates best part to follow so it can hint to the player which turn to take next, etc. The whole point of my project is to have a random map from which to show some pathfinding algorithms for edu purposes - in an engaging and practical way.
Try to think of a "problem" you think you can solve building an app. Just can be anything, even something stupid. Once you have a problem, you can work towards a solution with the skillset you have now. You will see that once you start building, you eventually learn new stuff and want to add new features in your app. This way you will not only learn new things, but you also have something for your online portfolio :)
Build something for fun. Think of something useful, or hell, just make a clone of a site just to learn how to do it. I strongly suggest against doing freelance work at this stage, since you and your client will probably have a lousy experience. Keep on building things until you're comfortable building something from scratch.
Hum...videos probably aren't the best way to learn this one (although to each his own). I'm working on a large-ish JS codebase (160k lines of first-party JS), and we use promises for all async (which is pretty much everything we do). There are a few things that you should be aware of: 1) Most promise libraries are terrible at cancellation. If you're doing a single page client side application like we are, this is a major problem. If you're doing a node service, meh, don't bother cancelling stuff since it's runs until completion. 2) Debugging promises is difficult, but far easier than callback hell. learn how to get long stack traces, and catch possibly unhandled exceptions in whatever library you're using. 3) Keep in mind that not returning something from a function is the same as returning undefined. If you do this in a failure callback, it will convert to success...we have had bugs because of this dozens of times. Hope this helps, welcome to the world of Promises.
Now that you get the absolute basics of how the language works, learn how to properly be a programmer in general. - Start a project using proper design patterns. - Force yourself to use github for code versioning. - Get into JS helper tools like grunt. It has lots of helper plugins too, like watch and uglify, so force yourself to use that. Alternatively, check out bower or node/npm - Yeoman is another nice helper tool for bootstrapping a js project build environment. - Definitely look into node. There's also node-webkit, which, once JavaScript gets SES (a js implementation to address security problems inherent with js), will be the defacto way to make nice redistributable desktop apps IMO. Sorry for the lack of links, I'm on mobile. 
Make a simple website which does things like generate lists from javascript arrays, learn about media queries and make it responsive. 
Or write stuff to an iframe (or frameset), like before there was AJAX/xmlHttp. Hacking DHTML was radical like that and nobody gave a shit about cross domain security. Fun times.
React. But if it's really just Dojo or Angular, always Angular.
Secrets of the Javascript ninja. Then learn angular. By that point you will know what's what.
this is the second unnecessary thing i've seen this guy post recently. switch statements look the same in most languages (roughly), he presents no valid reason to stop using them. Another useless article.
Like iOS? In that case you should focus on obj-c or swift.
Agree, I couldn't tell which key that was on my mobile since it shows up as a square. If the author wants to leave it in as a shortcut, I don't really care, but 'meta' is pretty standard convention.
A "full stack developer" is someone who can work on any level of the application, front-end / back-end / database / CMS / whatever. An alternative term would be that you "wear a lot of hats". It's valuable to be able to do this, certainly, but I mention it because I was told the position would be mostly front-end and got then got saddled with a bunch of PHP work.
I was a full-stack PHP developer for eighteen months out of college and then switched projects and was a pure JQuery dev for another 2 years. Only been in the field since I graduated in 2010, but the market is crazy for front-end developers right now.
The negative comments about this might have been caused by his use of one-line FEs for the values. They don't have to be functions, and if they need to be functions they will be longer. This is a good, performant pattern, which is used all day in the Python world, which lacks a switch statement by design. The author's examples were just unfortunate.
Codecademy is really lightweight and doesn't go in-depth in anything. I used Team Treehouse after it to get a deeper understanding of the various languages. It costs $25/mo. If you refer people it knocks $5/mo off your bill per person, up to free/mo. 
Design patterns for sure, as mentioned by one or two other comments. I made the mistake early in my career interpreting design patterns as being applicable to enterprise size applications only. This was pretty silly of me and now that I have a few patterns for constructing js applications under my belt I feel like I've unlocked even more potential for what I can do with the language. Tons of resources on patterns, I used pluralsight myself.
It started as a project to help me learn the Spring Framework. Also, I'm mainly a Java backend/JS frontend guy. Node is definitely on my list of things to learn... someday. Besides, apparently there is already a project built on Node that does the same thing.
Thanks! That one was pretty fun to make since I had a good idea in my head of how I wanted it to look.
Repost from yesterday :P http://www.reddit.com/r/javascript/comments/2b152o/deprecating_the_switch_statement_for_object/
That's true of any language community, though. I use C# everyday at work, and actually really like it, but anytime I make a comparison to node in /r/csharp I get downvoted like it's my jerb. 
The only suggestion I have is to allow days to be disabled, it's a feature that's constantly missing from datepickers. A few common things I've been asked to implement is: weekends disabled, holidays disabled, 3 days from current disabled, etc. If you can make it easy to do the above, you'd be ahead of the rest of datepickers out there.
Thanks for the constructive feedback, I've updated the post with some more examples/explanations.
[Kalendae](https://github.com/ChiperSoft/Kalendae) does that. You define a blackout function that gets evaluated for every date. Returning true disables the day for selection.
All good advice. Another thing you could think about is learning a little bit of MySQL and PHP so you can get external data (non-api) of your own from the server to the browser. All of these languages (HTML, CSS, JS, PHP, SQL) exist together in the same page so knowing a little about each helps demystify the whole web stack. You don't have to know much besides the fact that PHP scripts go between &lt;? ... ?&gt;. I agree with FORTY4 about APIs. My favorite is the Google Maps API. 
Can someone explain why below method is not good for inserting rules into stylesheets programatically: var sheet = document.styleSheets[0]; sheet.addRule("body","background:red");
And that road is not a bad road in the end. You can have all the tests you want and still end up with code that is broken.
in link.
Damn you Lawsky.
I am mostly into gamedev Friend - [Treasure Arena](http://www.treasurearena.com/) Mine spawns: * [Action and rotation - QbQbQb](http://qbqbqb.rezoner.net/play/) * [Cyberpunk Paper's Please - Limbs repair station](http://rezoner.net/labs/limbs/) * [Frustrating racer - Hotline Trail](http://hotlinetrail.rezoner.net) For non gaming - [online music composer - chirp](http://chirp.rezoner.net) 
Its parsing CSS. I would imagine a use case might be that one is grabbing CSS from an external source, and then applying it programmatically instead of simply injecting the CSS in to the page `&lt;head&gt;`. 
i really dont think bitcoin bs should be here
http://i.imgur.com/L3J6n.jpg
Dude coding with promises is ridiculously easy and makes async a breeze, check it out! 
Real men debug with alert()
No I am not saying that at all. Switch statements have an important use in most languages. Dismissing an entire language feature just because you don't like the look of it is just terrible. He is using objects to do something for which there exists a native language construct already. This is likely inefficient (seeing as switch statements were made for what they do, objects were not) and is just going against the language as a whole for reasons which don't justify such a decision. Don't reinvent the wheel.
Making open source illegal effects everyone. 
$105k, which is 30% down from past years, but I took a break. JS since 1998, a decade of Asm/C/C++/Perl/VB before that. JS is only half of what I do - throw in CSS/LESS + flavor of the week tech. I LOVE what I do!
Sounds interesting. I'm going to start with simple ideas and just work my way through make more complex stuff.
It just shows me this http://imgur.com/bBy5HWN
It sounds super complex. I'll do some searches and buy some books on JS. 
I was hoping to build mobile &amp; web apps which will probably mean that after JS I'll have to learn some other languages? Btw, what is front end and back end?
Thanks I put a lot of thought into the tweeno docs. No one seems to care about or use it though. I don't know of any other games with that name. The point of dig-rig was to be a puzzle game where you couldn't kill the enemies directly. I ran into performance problems, got burned out and lost interest in the project. The roguelike "rogue tower" is my current project. Need to find an artist to hire for help with sprites. Here are some images of the map graphics generation progress. I don't use a tileset everything is procedurally generated. http://imgur.com/a/MKyEc#21
Yes. There's something wrong with that piece of code, you have to fix it and click submit. 
I'm not interesting in clients atm I just want to learn so I think I'll take your advice. 
fuck this thing
It makes more sense now, way more sense. Now I'm wondering why codecademy recommended I use it. I'll probably just stay away from it until I become an advanced programmer.
I pretend to learn Meteor after I finish, I find it very very cool!
The paint app is very cool. I have been eagerly watching the progress on kami as well.
If you're not able to complete the 2 challenges on the sign up page, I don't think this would be the site for you then. A major part of the site is problem solving and the challenges there would be considered rather easy. If you'd still like to try it out, send me a private message and I'll do what I can to help you with the challenge.
So you sign up after you solve those problems?
Thanks ! The core modules for v1 (kami-texture, kami-batch) are in a pretty good place. Just need to update docs/demos and fix a few little things. I've already been using it for various projects that need a little more oomph than 2d canvas performance, without the bloat of a full blown framework. 
`addRule` is a non-standard method. It appears to have originated in IE, and apparently WebKit added it at some point. But it doesn't work under Firefox, and probably other browsers. For those you have to use the standardized `insertRule` which has slightly different syntax -- it takes the rule as a single string, rather than a separate selector and style. If you look at the source of the library, it's abstracting away this very thing. It also allows for specifying styles as object key/value pairs, which can be useful to avoid having to mess with string concatenation if you have them as variables. 
It depends what context you use this in. If you're just reacting to something the user clicked, then any amount of inefficient code is alright. If you're launching into rending something complex to canvas or svg, then this pattern needs an asterisk. You have to close over the switch object and in a way that doesn't cause bad memory problems.
Got it.
Not at all. Your post was fine, it's just foreign to people without experience in a language where functions are first-class and that have dicts/objects/tables.
It's not for the look. As the number of "cases" increases, the performance of the object (hash table) gets better than the average cost of the switch (the order of the cases matter). The object approach is a hash table lookup, and the switch has to evaluate each case until it hits a match and a break. As I said elsewhere, this pattern is very common in Python, which doesn't have switches. That's putting aside the danger of fall-throughs that /u/homoiconic mentioned, which is also perfectly valid. There's probably other things that JS could lose, as well... But we could definitely get by without switches.
http://todomvc.com/
Learn Node. It's JS on the server side. You can make things from command line apps, web servers, games, desktop apps... whatever. All in Javascript!
Not really a freind, but this is just a super cool isometric graphics library: [isomerjs](https://github.com/jdan/isomer) I have a [bunch](https://github.com/hansolo669/element1.js) [of](https://github.com/hansolo669/dryr) [projects](https://github.com/hansolo669/circular.js) [going on](https://github.com/hansolo669/Sapphire) at the moment... but I'm pretty proud of [my IRC bot](https://github.com/hansolo669/really_awesome_bot). Everything I'm playing around with goes up on GitHub, usually under the MIT license. /Edit: completely re-factored my IRC bot, I think its pretty neat. [Linky](https://github.com/hansolo669/really_awesome_bot)
If you are the author, I can't use the site as the plugins won't load. [blocked] The page at 'https://jonthornton.github.io/Datepair.js/' was loaded over HTTPS, but ran insecure content from 'http://jonthornton.github.io/jquery-timepicker/jquery.timepicker.js': this content should also be loaded over HTTPS. [blocked] The page at 'https://jonthornton.github.io/Datepair.js/' was loaded over HTTPS, but ran insecure content from 'http://jonthornton.github.io/jquery-timepicker/jquery.timepicker.css': this content should also be loaded over HTTPS. [blocked] The page at 'https://jonthornton.github.io/Datepair.js/' was loaded over HTTPS, but ran insecure content from 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/themes/ui-lightness/jquery-ui.css': this content should also be loaded over HTTPS. [blocked] The page at 'https://jonthornton.github.io/Datepair.js/' was loaded over HTTPS, but ran insecure content from 'http://jonthornton.github.io/jquery-timepicker/jquery.timepicker.js': this content should also be loaded over HTTPS. [blocked] The page at 'https://jonthornton.github.io/Datepair.js/' was loaded over HTTPS, but ran insecure content from 'http://jonthornton.github.io/jquery-timepicker/jquery.timepicker.css': this content should also be loaded over HTTPS. [blocked] The page at 'https://jonthornton.github.io/Datepair.js/' was loaded over HTTPS, but ran insecure content from 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/themes/ui-lightness/jquery-ui.css': this content should also be loaded over HTTPS. 
&gt; 'meta' is pretty standard convention. It's actually not and [varies](http://en.wikipedia.org/wiki/Meta_key) between different systems.
BTW switch statements in most languages are compiled down to hash-table lookups. In most cases though this is such a micro-optimization that even debating about it is stupid. Do what looks the best and is the easiest to read and debug.
That's a cool site; love the idea of micro-challenges to get in. Signed up (under your ref link).
Thanks, I appreciate it. It really is a great site, I've learned more from it than most tutorials. It forces you to think about things differently and gives me a reason to go out and learn more about the obscure features of javascript.
&gt;I understood a great percentage of what I learned Great! Now you're all set to write short, useless pieces of code formatted in a very specific manner! The next step is to forget everything you thought you learned at Codecademy before your imagination and sense of free will die a horrible and completely unnecessary death, and do an actually reasonable Javascript tutorial (try [this one](http://www.w3schools.com/js/default.asp) or [this one](http://www.tutorialspoint.com/javascript/) ). Every time you finish a stage in one of these tutorials, modify the code a bit to do something different that the tutorial didn't mention. *Then* you'll be ready to write your own Javascript programs. If you want to learn deeper program logic concepts, you can try writing games or statistical simulations. If you want to learn more about interfacing with the DOM, you can try writing user scripts. Go one step at a time, and take on projects that are around the limits of your ability so that you'll be able to learn something without getting too frustrated.
In my opinion, long if/else trees or switches are a code smell for not using the right level of abstraction. This might happen because you are writing low-level code like emulators or communication protocols that have a very procedural interface, but most people generally don't write that type of code. If you need different behaviors for the same method depending on certain variables, put it into different classes with the same interface. If you need to look up things based on a string, use an object instead. Input strings should always be transformed into some kind of object representation as early as possible. Chances are, at some early point you actually know exactly what type of object you need, but by moving the decision further down the chain by only passing along the string version of the input, you distribute the differences in behavior through the whole system instead of encapsulating them in one object. Then you end up with large if/else or switch blocks spread everywhere. 
After I finished I began doing Codewars for a few months to continue learning. It was really helpful seeing other's solutions to problems and shortcuts you didn't learn on Codecademy. After that I began developing a website from scratch using Nodejs. It really pulled everything I learned into a real-world scenario.
Thanks for the feedback, be interested to hear more about the performance side in Canvas/SVG - if you've got time drop a comment on the article for others. Cheers!
it was complex for me at first too. i kept reading and searching articles and videos until i found the one that helped me understand it. you might want to check AynGhandi link.
I saw someone else saying [citation needed], and the reply saying it's in the link. I followed the link, checked 200.2n5, and saw: controlling, administering, or issuing a Virtual Currency. OP, please would you follow up on the request for citation, I had a look in the link and could not see where it says OSS is illegal.
I am fairly sure that OSS is not illegal in the United States.
... In Mac. Linux refers to this key as meta. Ditto for the Windows key. I assume that's what op was referring to with "meta" 
True enough, though I'm not sure what current JS engines do. But it's not _inefficient_, as the post I was replying to said, and it's probably more idiomatic at this point. And I guess I do like the way a map looks ;).
&gt; I don't like putting crazy symbols in my source. From this I assumed OP meant they didn't know it was (*also* if you want to be picky) called command and thus didn't know they could type `command` instead of `⌘`. The term meta [varies](http://en.wikipedia.org/wiki/Meta_key) on different systems and would be more confusing I think. Also some programs on Linux refer to the "Windows key" as super; Compiz being a notable example.
Yea, I'm not so sure about all that. I suppose with larger examples it could be proven to have some value. At skim surface it seems like a way to write a lot of boilerplate for a simple problem that, if you're struggling with, you have other issues to begin with.
lazd here, author of [DOMly](https://github.com/lazd/DOMly), arguably [the fastest client-side template system](http://jsperf.com/domly-vs-the-world) out there. I take issue with these benchmarks and believe they're inherently flawed. **The tests were appending to the same fragment every time instead of creating a new one** The fragment was not reset in the teardown or at the beginning of the loop. This means the size of the fragment's children was growing at all times. **The tests were appending to a *string*, NOT the `innerHTML` of an actual element** The string was never assigned to the `innerHTML` of an element at the end, so this test was benchmarking string concatenation and had nothing to do with the DOM **There is a decent amount of overhead to assigning the ID property in Firefox** This causes tests to seems slower in Firefox than they really are. In real-world situations, you're not creating thousands of divs with only ID properties. **Nothing ended up in the DOM** We actually want to know how fast these tests are when they actually do something the user could see. **So, with the above in mind, watch `innerHTML` get smoked in every single browser, including IE 9, Firefox, and Mobile Safari** * [with the same tests](http://jsperf.com/dom-vs-innerhtml/37) * ID assignment was removed the the above problems were fixed * [in a more real-world test that uses "nested [and] more than one element"](http://jsperf.com/clonenode-vs-createelement-performance/32) * This is what we were *incorrectly* warned against in the presentation. * [in a real-world template scenario with DOMly](http://jsperf.com/domly-vs-the-world) * See how precompiled string-based template systems stack up to a fluffy little sheep that creates DOM From my work with DOMly, including less arbitrary tests like creating a complex, nested DOM structure and conditionally applying attributes and properties, it's pretty clear that creating DOM in JavaScript smokes `innerHTML` in every scenario that matters. I'd love to be proved wrong, so feel free to bring it on.
Webpack is insanely powerful. It's a worthy successor to browserify.
Oh right ok. Only experience I have with path finding is my dad used to do a bit of game stuff :)
**9 Things to Consider When Choosing a JavaScript MV* Framework** by Dan Munckton &gt;tl;dr &gt; &gt;You may find it useful to consider this list of factors when deciding between several JavaScript MV* frameworks. We’re not going to lecture you about which solution you should choose – we’ll leave that up to you. https://www.neo.com/2014/06/30/9-things-to-consider-when-choosing-a-javascript-mv-framework
Ah ok. Yeah it can be easy to get burnt out on project, especially if you have a lot of ideas. Node is pretty cool, the way of coding if uses more async way of thinking, bug other than that it's really similar to JS in the browser :) There's probably similar projects to everything in every language ;) bit it's fun to do then yourself sometimes!
Hehe. YESMAN like the Jim Carey movie? I'm guessing it just responds yes to everything you ask it? Maybe I should put it in my IRC channel!!
Now that node is so easy to set up and get rolling with, I'd also recommend writing a bunch of little utility functions for yourself that you can run at the command line. This is a really great way to learn the intricacies of the language decoupled from the dom. Hell, try recreating some common Unix commands even. Also at this point I'd start learning basic testing with a test framework like mocha or jasmine. Overall, the point is just build things. Reading, watching videos, etc are vital resources but nothing allows you to learn faster than failing and getting back up. Finally, read code. Read good code and steal ideas. Find bad code, determine why it's bad and fix it.
I have a bad habit of trying to learn too much at once, so node has to wait for now. I'm currently learning Groovy, which isn't as popular as some languages but as a Java developer I love it. When I do challenges on codeeval, though, I try to do those in JavaScript.
The name was inspired by the fallout: new vegas character. But yeah It can totally respond yes to anything you ask it. I tried to make it as extendable as possible, but also with some simple config avliable for common request-&gt;response style things. I actually should implement some wildcards for the commands, thanks for that bit of inspiration! 
I was impressed how small it is, but it doesn't quite work with attribute selectors containing CSS special characters. a[href="{"] { color: red; } 
Sounds like a cool dad
It's the only language that I feel like my code is expressing itself. I feel hindered in every other language the minute I need to start using it. It's flexibility can cause bugs but I appreciate the language itself allows me to say "I understand this well enough to know that I am blatantly and intentionally 'breaking the rules' when I want/need to". You've got complete freedom to create at that point.
Can you: Write clean valid html/css from scratch based on a mockup? Add in basic javascript/ajax functionality? Understand how to work with a JSON based API? Setup a server and be comfortable on a unix command line? Build simple Wordpress/(Insert whatever CMS) themes? Build a simple RESTful API connected to a database? UI/UX Design? If so, start spiffing up your resume and putting yourself out there. Unless you are a Comp Sci graduate from a top tier university, no one will ever care where you went to school or what you majored in. I was in your exact position a year ago. A 23 year old high school dropout with no idea what my skills were worth. I make 90k in the bay area now at my first "real" job. I was so clueless as to my value that the company came back with an offer 10k HIGHER than what I was asking. It's all about knowing how to market yourself and having the balls to get out there and not be afraid of looking stupid. There's no magical moment when you'll say to yourself "OK I'm ready! I have all the skills to get a job now!". You just have to go for it. Put out a million resumes and ask companies to give you real world coding challenges to showcase your skills. Not having a CS background can hurt you in the interview proccess, but it's only because most companies have no idea how to identify talented developers. I couldn't solve a whiteboard puzzle if my life depended on it, but as soon as I started building demos for people, the offers started rolling in.
Commenting for viewing later.
You can perfectly well afford a very nice place, you simply have to pay a higher percentage of your income in rent. You can get a very nice place easily for $80,000 a year, to say otherwise is plain stupid. You could assuredly get a much bigger or better place elsewhere for cheaper, but you'd be making less too.
But, but, this is more semantically correct: (function(){}()); JSLint will even throw you [a warning](http://jslinterrors.com/move-the-invocation-into-the-parens-that-contain-the-function). 
That never made sense to me, why do you wrap it in parentheses if you've already called it? I would think you define a function in parentheses and then call it..
crockford is a chump
You wrap it in parentheses because something that begins with `function(...` is a function declaration statement (which cannot be immediately executed), not a function expression. The parentheses are just there to force expression context. You can also use a unary operator: +function() { ... }(); !function() { ... }(); -function() { ... }(); ~function() { ... }(); 
Protip: You can see the unminified JS by running the gulp task without uglify: gulp.task('scripts', function() { return browserify('./assets/js/app.js').bundle() .pipe(source('all.js')) // .pipe(streamify(uglify())) .pipe(gulp.dest('./public/')); }); It's pretty cool to look at what browserify is doing to require your modules in the browser.
mbostock/d3 ftw! also https://github.com/component/dom or its component pieces which you can pick and choose what you need.
When it comes to frameworks, for almost every app you might develop, "performance" is the last thing to worry about. Ease of use, tooling, features (client side routing, two way binding etc), documentation, stability, are all much more important factors. 
http://theie8countdown.com widespread? IE 8 is also a problem, but wasn't comparable to 6/7.
Side note for anyone that still reads this: large refunds are a sign of a bad tax strategy (unless you truly can't save that money or put it somewhere that pays you something. Then you at least have a forced savings account)
This
In the U.S., in my experience, other contractors would claim that is low that people will think you aren't serious about your business and I've seen the same on /r/webdev. 100/hr is a minimum at your level of experience. However, since you have a long term gig they may be taking care of other benefits contractors generally have to foot the bill for? Also I have no idea about rates in canada. Edit: my figures may be pretty far off as I've never heard the rates of front end specific contractors which I completely filtered out mentally there for some reason. Mainly I mean to say the going rate for guys running their own show and taking on their own clients seems to be 100 to 150 USD an hour.
[Zepto.js](http://zeptojs.com/) is pretty light-weight and awesome =)
Yep, bloody charlatan. JSON was almost as obvious as noticing you have limbs.
I'm excited to see the next fad coding movement in JS, where they claim that +function(){}(); Was always the most idiomatic way to express it. ^(you know because it's adding it to runtime execution or some other lame excuse.) Of course, everyone knows that %function(){}(); is the one true way... ^(oh, I don't know, let's say 'the closure now occupies a percentage of the memory'?!?) /s
I'm only kidding, he has done a pretty good job with jslint. I'm onboard with the vast majority of his recommendations.
So you're getting a real response blob in Firefox but a 0 status? Does the response look correct?
Overall numbers like this tell you nothing useful. On my last e-commerce project (6 months ago) &gt; 20% of our users were using IE8 and below. Corporations are very slow to update software, and Windows 7 is the new XP. Even at 10%, any site with a sizable amount of traffic would take a huge revenue hit for dropping IE8 support.
Can you please provide the entire raw http request and response including the headers so we can illuminate the server as a culprit? 
Your title is kind of confusing in the context of your examples, because many on your list are only DOM libs, while jQuery is a whole lot of things, and Ender is the only that comes close to jQuery's featureset. But for libs similar libs to jQuery: * [prototype](http://prototypejs.org/) / [script.aculo.us](http://madrobby.github.io/scriptaculous/) * [Dojo](http://dojotoolkit.org/) * [YUI](https://yuilibrary.com/) * [MooTools](http://mootools.net/) * and more on [Wikipedia](http://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks) Those are all old-school, but I think they have some die-hard fans even though they're not as popular as they used to be. I know there's got to be some newer ones, but none come to mind offhand. For DOM-only, it'd depend on what you really want and need; do you need/want events, AJAX, templating, animations, promises, etc.? You can use a different lib for each...
I like this, but I think it would be much better if the time picker used a native select. The current implementation for the drop down is lacking in usability, especially near the bottom of the screen.
The [comma operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#comma_operator) evaluates the first operand, discards the result, then evaluates the second operand, which becomes the value of the whole expression. For example: var x = Math.sqrt(42), 12; This calls `Math.sqrt(42)`, discards the return value, and then assigns 12 to `x`. This: return parse(clean(css), /([^{};]*)([;{}])/g, css = { block: [] }), css; ...is just a dickish way of saving a couple of lines of writing. It's equivalent to: var parseTree = { block: [] }; parse(clean(css), /([^{};]*)([;{}])/g, parseTree); return parseTree; The `parse()` function merely applies the given regex repeatedly until there are no more matches, taking some action based on each match. The regex that is passed to it splits the CSS into runs of tokens separated by `{`, `}`, or `;`. If it finds `&lt;stuff&gt; {` then it appends an item to the current list of blocks, placing `&lt;stuff&gt;` in the `selector` key and creating a new sub-list of blocks. The fact that `object` is reassigned here creates a nesting, which is necessary because of things like at-rules: @media print { #foo { background-color: red } } If it finds `&lt;stuff&gt; }` then it just moves up one level in the nesting hierarchy, discarding `&lt;stuff&gt;`. (It can only do this because one of the cleanup regexes tries to add back a trailing `;` to the last property if missing, such that `&lt;stuff&gt;` will always be empty for the closing brace.) If it finds `&lt;stuff&gt; ;` it adds `&lt;stuff&gt;` to the current block. This code is far too cute for its own good. It's not doing parsing properly, it takes a far too simplistic approach. The example that skeeto gives is a good one, but it's far from the only problem. And it's written in a way that obfuscates how it works just to save a few lines here and there. 
That would be the Stockholm Syndrome component. 
Rofl. First World problems. I feel ya.
According to the Lawsky License it will be.
That is done under open source. 
That was probably in an .html file. Webstorm freaks out when I put JSX in an HTML file.
I do remember something similar happened to me, but it was years ago so I don't remember the details. What I do remember is that the problem vanished after I deactivated Firebug. Try that.
So your argument is that you can live in a nice place by knowingly over extending your budget in rent? Well of course you can. I can get a amazing place if I ignore the fact that I hadn't to eat and pay for my commute to work but that's not being realistic. The fact of the matter is the only way you're getting a great place at $80k a year is by spending at least half of your net income on rent and your life as a whole is suffering
like dog's balls hanging at the end
Promise pattern is also fantastic for avoiding callback hell. I used to use async library for handling multiple callbacks too but I kinda like promises now when I'm familiar with them. I've thought about the structure of the application in a lot of different projects and now especially if I'm developing REST api my directory structure would be something like this: * app * index.js * resources * cat * index.js * controller.js * dog * index.js * controller.js Now my **app/index.js** only contains configuration for express.js/database and it requires every **controller.js** file under "resources". This way all the route definitions are nicely stored under resources own directory. The name "resources" could also be something more descriptive. **index.js** file under resources/x/ contains the model for the resource. The reason the file is named "index.js" instead of "model.js" or something is just because I kind of like to just say var Cat = require('./cat'); Usually the model is a [mongoose](http://mongoosejs.com) model.
Any reference to a specific part of that Lawsky License that says so? Also, this is a proposal, rather than existing law. 
How does it compare to phaser.io?
Try deactivate firebug and/or adblock if you use them..
**Friend:** [FlickSurfer.com](http://flicksurfer.com/) - He scrapes Netflix every day and then gets the ratings from IMDB, Rotten Tomatoes, and the Netflix ratings. He then puts them into Elasticsearch for near instant results :). It was a weekend project where he wanted to get more familiar with AngularJS and Elasticsearch. It's his first project he's ever released and it's really quite good! **Mine:** [Band.js](https://github.com/meenie/band.js) - An interface for the Web Audio API that supports rhythms, multiple instruments, repeating sections, and complex time signatures.
I used this, works great! 
It is not comparable : Babylon.js is for 3D games, and Phaser is only for 2D games. They are two different framework, but I like both :)
I've heard a lot of about Treehouse online but I can't afford it, even though it's a pretty cheap investment for a great return.
&gt; Design patters for sure... What do you mean by design patterns? I feel like a noob for just asking... 
&gt; Meteor Would you say it's better than all the other apps recommended? 
how about "this language was written in 10 days, feel fortunate that Flash didn't win"
&gt;Bitwise double NOT &gt;Faster substitude for flooring number: &gt;// bitwise floor &gt;~~(5.3) // 5 &gt;~~(-5.3) // -5 &gt;~~('foo') // 0 &gt;~~({}) // 0 1. That's a truncation, not a floor. Math.floor(-5.3) yields -6. 2. I've never seen a benchmark that showed this kind of bit-trickery was statistically distinguishable in terms of performance from Math.floor(). 3. Silent, implicit type coalescing may be fine for null or undefined values, but generally programmers will not use strings or Objects when they want a 0 value. Either they made a mistake or they misunderstood the interface, in which case picking an arbitrary default can lead to other unexpected behavior, farther removed from the source and therefore more difficult to understand and fix. In other words: don't try any of this at home.
Well, so does Photoshop, doesn't it? /r/contentawarescale
No worries. It means how you structure your code. In JavaScript for example there are patterns that make your code easier to 'separate', other patterns help you reuse a lot of code that it similar, and a lot more. Just woke up so this explanation is weak. Google JavaScript design patterns and you will find some great info.
yep ;D
Only time I've seen a status of 0 is when the json was formatted incorrectly and jQuery bonked out. Don't know if that'll help at all, but at least it's something to look for. EDIT: It was the native json parser that failed now that I think about it. 
Any plans for a pure js version of this? Please post here once you are comfortable fully 'releasing' this regardless. I've been saying for sometime that 'reactive thinking' can be applied in so many varying contexts, you are on to something really important here imo.
The world of Javascript development is pretty open-ended. You're free to structure your project in any way you like. However, if you organize your project all willy-nilly, you'll find yourself confused and sad at some point for any one of a million things that will come back to get you later. For instance, lets say you build a `three.js` project (because they tend to be large and require a lot of assets) and you're not using [require.js](http://requirejs.org), you're just using script tags and hoping that they all load and execute in the right order. That's going to be a problem for somebody when they download one script faster than the other and it executes out of order and they have to F5 the page a couple times to get it to load right in the first place. Enter require.js, it is a commonly used *pattern* in the *design* of your app. Other common ones are MV* (see backbone, angular, ember), jQuery, etc. See [here](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#whatisapattern) for more detail.
I did and mentioned another use case I am hoping to release a post about in the future that relies heavily on the ideas you have presented. Great article and don't worry about the comments about the examples being too contrived too much. You can only get so in depth but the point should be clear based on the article imo (that's the main thing hampering me in creating the post I mentioned because the ideas are something that are in a current code base of mine. It's difficult to show the concept so one can see all the areas it's applicable without bogging them down with details)
Great tutorial. One question, why is the skybox so small? Are there performance issues with making them bigger?
Looks a bit like bone.io
The numbers at least show us the curve is significantly different than with ie 6. Hopefully that means the release cycles in general are headed in a much better direction. For example, Microsoft is now at a point where they are releasing a major version yearly so the tc 39 is now heading to a point where they can aim for a yearly release. I believe things like progressive enhancement will still be a part of the web for a long time and no, dropping support for ie8 altogether is not a good idea. But we no longer need to cater to the lowest common denominator as if they are the main customer base anymore either which is a good thing. I don't think providing the base functionality on ie8 is all that difficult with all of the tools we have and most of these new features in ECMAScript are related to the more dynamic/complex versions of our apps. In short, I think we are seeing what the limit tends to overall and we will have to worry less and less about legacy browsers in the next few years (and I definitely agree with the other poster that 2 years is a great guess as far as ie8 if you look at the decline over time).