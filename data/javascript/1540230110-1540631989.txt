I'm the author of this article and you're right - that's totally my mistake. I've fixed it and updated the article. Apologies!
Why would you respond at all if you don't have an answer to the question?
The same way you can say "that car is not broken, it's just missing a wheel"
I see, 3 weeks ago. Thks for informing me. Cheers!
Smh why do they always have to bring politics and religion into computer science
Yup! I use it for my personal site's blog module on a subroute in its own Docker container. Simple, lightweight, yet powerful. 
Of course, there is no question about that! I mean look into all those possible rules and compare it with the few compiler options and prettier rules. You will very fast recognize that there is a separation of concerns in there. yes some options will overlap, but it should have a clear line between the usage of those tools. 
I guess the answer to my question is a yes then, haha. The main reason why I replied the way I did was because I find the Wordpress theme development side of things to be quite tedious when extra features or custom admin pages are needed for a end-user to maintain (who is also non-technical)...
Yup, I know of that trend. :) 
I did see that, but it doesn't match the licence attribute in the package.json, which is what npm will use on it's website.
Just to give u a quick update- it seems like Firefox is running a much older version of the site.. we’re still looking into it, hang tight:)
Hey dude, good shit. 
I’d recommend Craft CMS. It is php based, but you don’t need to delve into that unless you’re doing custom plugin development. It’s actually been a joy to develop in - it’s like if Wordpress didn’t suck and ACF’s were native
You'll need to upload the file somewhere where others on the internet can see it (only you can see files served through a file:// url). You'll also probably want to post it in /r/learnjavascript :)
Thanks I'm new to this :)
Cool! I never heard of them before, but just hearing ACF being native caught my attention. I used to have my personal website run on Wordpress. 
https://www.reddit.com/r/webdev/comments/9pnaq8/is_jquery_needed_anymore_in_the_current_web/e82yrrv Apart from that there is bunch of pretty cool code. You should read it.
Cool project, i love building boilerplates. My only suggestion is to shorten up that readme, its a bit overkill. Oh, and use Hapi.js, express sucks :)
Thanks! I'm going to do a few follow ups to explain different parts of the API outside of synths, like sampling, sequencing etc
Absolutely love it. 
I am using eslint with the tslint parser. I am a big fan of the airbnb styleguide, so thats why I am using eslint.
Your variable is scoped to the function. You need to use a module-level variable. 
right. should see 2, exactly what the book was saying. But, I do everything like in a book. All that code is sitting in empty .js file. It's created on global object and I get 'undefined', not 2. 
So do you mean a global variable? As in export req.body outside of the Post request? 
you can wrap the app with Cordova or Ionic will solve the problem
Love the design of the article website! Very well done
honestly i am happy they are dime a dozen. As someone who is learning its great to come across variety of articles on the same subject to give me a better handle on things.
Some people don't love what prettier does to their code. Everyone loves what prettier does to their coworkers' code.
Not really global, but define your variable outside the express call. 
It's making a `POST` request to `https://www.nasdaq.com/symbol/wmt/historical`.
Thanks! It's [tufte-css](https://edwardtufte.github.io/tufte-css/)
Lol. No, it runs fine, though debugging it might be a bit of a pain, if you've made things that are probably overly complex
Btw, the fancy term for what you're doing is 'grouping', search for groupBy methods
Does it matter that it can't tell between a scroll and purposeful touch? The effects will show. Worries about size? make it bigger. Cool effects need a big platform on the small screen.
Can you reply posting the code again? Since the post was removed, the original code was removed as well.
Nevermind about replying, I see a new post in /r/learnjavascript. Looks like someone else is already replying there too ;)
The Vimeo video is fucking with the width on mobile chrome
I do library-free development for web. I used to use libraries (like jq) as a crutch for *years* and it was just bad; It lead to me being lazy and out-of-the-loop on things. So I said fuckit and started writing everything from scratch. And when my shit breaks, I know exactly why it broke and how to fix it. Yes, it takes a bit more time getting a project setup and working, but they work better and there's no barrier to entry when other people have to work on my stuff.
That's such a bad practice. Don't do that.
I'v heared about a headless CMS called [Strapi](https://github.com/strapi/strapi) They brand themselves as the most advanced open source NodeJS CM Framework. You can pretty much use it with any js front-end
Yeah except for the inability to get to other pages on the site
I’d say how many years you slept? :))
Alright, you've convinced me. I'll put a link to the home page at the top.
its relevant because of all the plugins that depend on it that were developed in the past 10 years.
Yeah, I heard of them too. It is definitely one amazing CMS. I might use it for a future project one day when it's appropriate. :) I'm more curious as to how they're able to implement the ability to allow users to make custom content via drag and drop. 
Noted. :)
For what reasons? What benefits does Symbol provide in this situation?
It makes debugging painful, regardless of the complexity of your code.
The Vimeo player should be better behaved now, thanks!
Why don’t you try to put it fixed on the top left in the empty space between the window and the article? I think it will compliment the design even more considering the sources are placed on the left side. Plus it gives easy access to the homepage after reading the article to read more / know more about your work!
Since your an IOS developer you probably don't need much hand holding. I'd recommend starting here: [`w3schools`](https://www.w3schools.com/html/default.asp) to cover the basics of building web apps. They have tutorials on HTML, CSS, Javascript, plus many more topics for free. There short and concise which allows you to move through them quickly. &amp;#x200B; Since your just starting out in web dev work I'd recommend using [Bootstrap](https://getbootstrap.com/) . It's easy to use and understand and will help you build responsive web apps. &amp;#x200B; Finally, google and stackoverflow are your best friends. But you probably already know that :)
If you need to handle certain errors different then you can throw a custom error and check instanceof in your catch block
Hey just want to say I think this is a cool idea! 
Enjoyed this vid a lot gj
You arrogant prick, I'll use whatever libraries I want because I've hoyt systems that aren't potatoes to run my code on. Fuck wit
I really never read anything on Medium any more, it all seems like overly long explanations for basic things that I could figure out by reading the docs if I don’t know already.
Hi /u/sendintheotherclowns, please refrain from personal attacks. Thanks.
I would say freecodecamp.com is best option to start with 
I mean design patterns aren’t always super necessary. Just try to practice good coding techniques. Brainstorm on how you want to organize your code before starting. Try not to be repetitive. Etc. If you don’t know what polymorphism is, I would suggest looking into that. It can be applied to almost any size project and is a very good thing to practice. 
Hey, I'm the course author :-) I did a lot of my research on MDN, specifically in the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), [async functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) and [await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) operator pages - so you should be able to learn a lot from those pages. The course's main difference is that it gives you interactive exercises/examples and presents topics in an appropriate order, but you could probably just apply the order on the course outline while reading from MDN. If you'd rather learn with exercises/examples but need a student/PPP discount, ping me and I'll sort something out.
Anyone else remember when laziness was considered a *desirable* trait in developers?
It's more idiomatic than using objects, IMO. You _can_ use `{}` as the value for unique constants, but Symbols express intent a little more. They're also immutable, so while your objects could be modified (no reason to do that, and they'd still function the same way as unique values), doing something like `PENDING.foo = 123;` would no-op if it was a Symbol. Finally, it's nice to be able to provide a description, especially when debugging. It's a very small benefit, to be sure.
I am sorry but how will faker will give name for name key? 
There's a difference between types of laziness. Laziness as an impetus to save work overall is fine, but laziness for it's own sake is not.
Make it work, THEN make it good, THEN make it fast. Don’t let design patterns get in the way of you having fun making something you’re proud of. Jumping the gun to the 2nd and 3rd steps might only discourage you until those aspects are fun/exciting to you. 
Yes.. it will take care of coding standards.
Sweet! I love synths and JS too!
I'm thinking we developers aren't making this weird push against jQuery, but rather those financing frameworks etc competing with jQuery are spam posting reddit about how eeeeeeeeeeeeeeeevil it is because they cannot make any money for it. Actually I'm rather thinking thats the source of hatred towards javascript itself, it lets a man build up a business without having to pay anyone.
Doubt it dude, I'm a developer, we love a good tool anywhere we can get it. Doing this stuff is like a slog uphill through mud and it gives me a bloody headache, if I can speed it up, I do it. Don't get me wrong, I love it, but in a masochistic kinda way.
&gt;Oh, and use Hapi.js, express sucks :) Thanks. i'll surely try hapi.js and i'll do something about readme
Thank you- we're really glad to hear that!!
Jesus christ. Just out of curiosity why do you need this
Would it be possible to default non-hovered links to be pushed a little back and when you hover over it, it animates and moves forward?
[https://github.com/anargu/lit-app-starter-template](https://github.com/anargu/lit-app-starter-template) I made this repo (the first one I would like to share with the community) to let people know more about [lit-html](https://github.com/Polymer/lit-html) and show some things it can do and how it works. Any feedback would be appreciated to improve this starter template.
&gt;Any advice or resources? advice: you're doing well, keep doing what you're doing. you're learning and trying to analyze things. keep the attitude of "it's possible i don't know how to use x at this point" because it's a great way to getting better. it's good that you've seen both sides, with and without a sort of design. did you use a framework? it might make things a lot easier if you tried using an mvc framework. search around for different ones if you don't know where to start. &gt;There seems to very little on how to approach smaller learning projects. you're doing it. you learn by doing. keep trying new things and analyzing what works. don't get discouraged. part of the learning process is knowing when to use what tool. sometimes a project calls for a lot structure and design. sometimes a project can get by with a few scripts strung together. it really depends, and it takes experience to know how to do that. you're getting experience by trying new things. if you just want a list of design patterns, they're usually broken up into [structural](https://en.wikipedia.org/wiki/Structural_pattern), [behavioral](https://en.wikipedia.org/wiki/Behavioral_pattern), and [creational](https://en.wikipedia.org/wiki/Creational_pattern). it sounds like you want to focus on structural patterns - they relate to how pieces of code interact
Yes, when it comes to headless CMS, both Strapi and KeystoneJS are very powerfull. It always depends on your use case, however.
Nevermind, I read “TSLint” instead of “TSC”. I thought you were using both linters in the same project.
Hey guys, new JS learner here. I'm learning about jQuery now and it seems really valuable for shortening code. I keep seeing people say that modern stuff doesrn't need jQuery. Why is that exactly and if you don't use jQuery then what should you use instead? Thanks!
I forgot to reply to these messages, and they were very helpful thank you :D
Thanks, very helpful! (I forgot to reply to these messages when I had read them the first time)
the home page is [https://carvuejs.github.io](https://carvuejs.github.io)
I assume you're talking about node here. This is safe as node first [tries to load files as javascript text](https://nodejs.org/api/modules.html). However, I gotta wonder why you need the .bb extension.
God I will never make a synth in JS but damn that was fun to watch, great job !
Cypress is a fantastic up and coming integration testing framework. Though it's more focused on running a full integration test, than to test individual components.
&gt; you'll notice he is a russian, which immediately makes me suspicious o_O
https://en.wikipedia.org/wiki/Fsn_(file_manager)
Real Code is present in this link please click it to watch a complete code [https://codesandbox.io/s/jj1218v7l3](https://codesandbox.io/s/jj1218v7l3)
Great article. Personally, I think doing it with the movement of the mobile device is way better than on touch events. If the example scrolled off screen as I was playing with it I'd think, who the hell coded something that when I want to test I can't see it! It also avoids the need for horizontal scroll on mobile, and scrollable areas reduce touchable real estate when you then actually want to scroll. 
I think this is true for people coming from OOP languages. I haven't found it to be true myself. I don't mind TS, but coding point-free in JS means it doesn't really offer much, and often hinders development.
So you're saying...it's better because you can choose to not use its primary feature?
Nice blog. Especially the part about the feedback loop. I think that's why creative coding is a great way to teach (young) people how to code. Nothing better than instant feedback, and gratification!
`() =&gt; () &gt; {}` is a function returning a function. a other way to write it would be function() { return function() { code here } } 
Jakaria
Cool idea! 
Thank you
```js try{ writeCode(); } catch (exception){ } ```
While your question may be relevant to you, it's not particularly relevant to the rest of the subreddit and honestly belongs much better in /r/LearnJavascript.
While your question may be relevant to you, it's not particularly relevant to the rest of the subreddit and honestly belongs much better in /r/LearnJavascript.
Nope, but because I can choose where I want to use it and not be bothered to use it anywhere else.
Browser support. Unfortunately `Object.values()` [isn't supported by IE11](https://caniuse.com/#feat=object-values) and many older versions of other browsers. If you need to support IE11, which unfortunately many do, then you're stuck with Lodash or similar tools.
&gt; I'm not expecting much in the next 3-5 years. same here. I think we'll see react dominating and Vue will be close second. I predict a slow diminishing of all other frameworks.
You should let the candidate choose.
Why not?? It's sooo easy and fun.
Your return should be — return tagFunction’${string}’
There is no single right answer. From a performance point of view it **really** depends on the extent and complexity of your computation. Clearly, doing the computation in the back-end, allows you to have greater control over the platform. If you need more power, you _just_ add it, or you offload it or do some of many possible choices. Running it on the browser, puts the platform obviously out of your control. Performance may be acceptable on some clients and not so on others, and you can do little to nothing about that. So, _generally_ doing it in the server is a "safer bet". But I insist, this all depends on the complexity and extent of the computation. Just how much data are you processing? How heavy is the process? Even knowing this, there's no definitive immediate answer. Maybe the best approach is to built a _small_ but **representative** prototype of your computation. Run it in a fair sample of browsers/devices and _see_ for yourself how it performs. Of course, if you _do_ know that the process is indeed heavy or that the data is big, you already know the chances will be low. Also evaluate the cost of doing such a prototype (which should be low to be worth it). These are things only you can know and evaluate, as they are heavily dependent on the actual computation and data. Then, about the various choices... 1. If it's slow in JavaScript in the browser, you won't gain much by going the Emscripten and/or Wasm route. The only way you'll gain something is taking it into the server. 2. In the server, if it's slow in JavaScript in Node, you have a number of options to take it to something more performant. Which one is "better" will depend on a number of particular factors (which language you know better, if you already have something done, etc). Building a Node module in Rust is... generally easy. If you are ok with Rust (or with C++) build a Node module that does the computation and call it from JS. 3. It's also fairly easy to build a module that doesn't do the work on its own and just calls an external application which you can then build in whatever language you prefer; you can even find some generic templates out there that show this easily. 4. Maybe, again depending on your particular case, you can take the computation completely offline. That is, the server always serves already processed and stored data. And then you have a separate process that produces that data. For _very heavy computations_ or for very large amounts of data, this ends up being the safer way to go. So, to summarize: Evaluate how heavy is your computation and data. If in doubt, build a small but representative prototype and run it in a _varied_ sample of browsers/devices. If you already know the process _is_ heavy, take it to the server and decide, again, based on your particular circumstances the route that best fits.
The issue with this approach is that passing ``` `${string}` ``` is not the same as passing ``` `${hello}, ${world}` ```, even if ``` `${string}` === `${hello}, ${world}` ``` Run the following to see what I mean: const tagFunction = console.log; const bigFunction = (string) =&gt; tagFunction`${string}`; const hello = 'Hello'; const world = 'World'; tagFunction`${hello}, ${world}!`; bigFunction`${hello}, ${world}!`; The two console.logs both log different things, and that's where the issue lies. Fortunately, I think typing this all out has helped me rubber duck the problem. I'll test a couple of things and post back if I find a solution.
I am the candidate.
Ah got it. Let me know if you do find a solution to this! But I’m curious, why are you tagging a template literal twice? What purpose is it serving you?
I've just realised a simple solution that appears to be working for me. I just needed to change the structure of `bigFunction`, and change the way I call it. const bigFunction = (strings, ...expressions) =&gt; { // Call tagFunction to do something with strings and expressions const someVar = tagFunction(strings, ...expressions); // Return another function which accepts other params and return (otherStuff) =&gt; { // Do some stuff with someVar and otherStuff return someVar + otherStuff; } }; const hello = 'Hello'; const world = 'World'; bigFunction`${hello}, ${world}!`(anyOtherParamsYouNeedToPass); Essentially, bigFunction can be used as a tag function itself, which can then return another function to accept a few more parameters.
I'd go with JS. Significant whitespace can prove a PITA on whiteboard.
Why can’t you use polyfills to provide missing features for older browsers? Then your code will use native methods whenever possible and fallback implementation if needed
I don't come from a OOP language. Properly written TS is preety bulletproof. Easy to refactor. That speeds up things a LOT.
I'll consider using Object.values when I need to run it more than 777k times pr second
Isn't Lodash basically a polyfill?
Take this for a grain of salt because I am old and senile but the most popular use of JavaScript in 2018 is a library called Angular. I often pronounce it "Ang-gyou-laaaah" as I believe that is the intended way. I once had a dream Bill Gates was in my kitchen cooking dinner for me and that's how he was saying it over and over and over, telling me to start learning "Ang-gyou-laaaah". Then he disappeared and it was just me and a pot of lentils.
Shakira shakira 
Does Node even care about file extension?
I think the correct answer would be consistency... When I use _.flatMap, I am very likely to use _.values instead of Object.values() Additionaly, not all functions behave the same, Array.sort mutates the array, as does Array.reverse
I really like the Observer pattern: [https://www.sitepoint.com/javascript-design-patterns-observer-pattern/](https://www.sitepoint.com/javascript-design-patterns-observer-pattern/) You use it when some value changes and multiple other things need to react to this change in some way. 
This is even faster and don't need polyfill: https://www.measurethat.net/Benchmarks/ShowResult/37133
for more advanced websites/apps modern frameworks like react/angular/vue make development a lot easier. for content based sites jquery still works fine, it's just not needed like it used to. browser compatibility used to suck a lot, it's not bad now. So basically it comes down to how complex the thing you're making is and whether you mind an extra few k to include a library that's purely syntax sugar
On mobile but should to the trick. const Filter = “XXXXXX”; const Items = { ... } const Filtered = Items.map(Item =&gt; Item.Type).filter(Item =&gt; Item === Filter); const Quantity = Filtered.length; console.log(Quantity) Where items is your JSON object.
It's more of a [ponyfill](https://ponyfill.com) if anything.
Don't know why people wouldn't user `Array.prototype.sort()`, it's been standard since IE 5.5
I used to do it like that before values and never cared to check about speed since I assumed Values was an improvement over keys.
JSON.parse() to parse the JSON. [].reduce to reduce the array to the number of elements that match argument1. So create a function that does something like: return JSON.parse(_json).reduce((accum,val)=&gt; { //comparison and accum increment stuff here },0); 
No.
I get the opposite results on my phone (iPhone 7 plus) - values comes out significantly faster.
People don't use Array sort?
One other advantage to lodash is that it does all sorts of normalization and type checking for you such that you don't need to worry about what had been passed into it. I mean, you should, but you have that extra layer of assurance.
I think a lot of it comes that most frontend developers kinda grew up with the whole jQuery thing, and that's the only thing they really know. Even frontend developers in my company just use jQuery by default for the most basic things, things that you could do in vanilla JS for years. I notice the same thing with people who put "bootstrap" on their CV, they literally only know how to do things with bootstrap. Ask them to build a simple grid; "uuh, can we use bootstrap". Great, you know how to apply css classes to elements...
This
Nobody cares about minute speed differences nor should they
Yes and no. Using a "real" polyfill means that at least modern browsers will benefit the performances of the native version of Object.values()
Well, \`Array.sort\` mutates the array. You may not want that. There are also faster alternatives when you really care about performance. Being a standard is not the only criteria you can use. 
I was just going off OPs remark
Lodash is already imported and it's in the middle of a chain of other operations, at least one of which uses lodash. Or habit.
I, for one, quite like the gyro controls. Puts on a good light show when you're tilting your phone to the sound of Eurobeat.
Not even slightly
Can you post a link to a git repo with your code? Concrete suggestions on what you could improve might be more helpful to you.
There are multiple possible reasons: \- code style consistency: if your entire project is using lodash/underscore, then it's better to just forbid the native implementations via linters in order to have consistency. Having consistency will help you a lot during code reviews. \- behavior consistency: avoid polyfills and make lodash work as a ponyfill \- undefined values: this is not necessarily applicable to \_.values, but people are using \_.map for example because it won't throw an error if your object is undefined. Type checking won't help you as from time to time you will end up using nulls or you will have a dynamic response from an API. \- "functional programming" (or better said "functional linking").
I just love this. Maybe I would want to make a script/service to use this as randomly (re)generated Wallpaper. How do you feel about time based color scheme ? Sunrise, morning, afternoon, sunset, midnight... Your sources are unlicensed, are you open to fork, to PR ? 
That's a neat idea, and seems pretty safe as far as the fallback goes, but I think the additional burden on QA and the need for a server-side component is just too much for us. I'm looking forward to the day that our browserlist makes this article obsolete. :)
The examples on this site just remembered me how jQuery is cool.
Exactly. Stop worrying about premature micro optimization.
Of course. I'd still say that for older browsers you're better off using a "fix it all" tool like Lodash and never worrying about whether a browser supports it or not. Then it just works all the time. Lodash is reliable and a complete package.
&gt;JSON Object list array JSON is a string. You don't have a string. You have an array of ob objects.
Doesn't babel do this automatically (useBuiltins: usage)? Specs and browsers shouldn't matter with transpilation.
Not quite as nice though if what you actually want are the values and not the keys.
.
Good effort, but that is [not the polyfill](https://github.com/tc39/proposal-object-values-entries/issues/18#issuecomment-300633846) you should be using. You should use [es-shims/Object.values](https://github.com/es-shims/Object.values) instead. The example uses e.g. the [Reflect API](https://caniuse.com/#search=reflect) which has even worse support than the native `Object.values`.
Ah, didn't really it mutated, just assumed it created a new copy, TIL
That polyfill implementation is horribly unoptimized though. [Here's a run](https://www.measurethat.net/Benchmarks/Show/4063/0/object-values-vs-values-vs-improved-polyfill) with a faster implementation which does exactly the same.
UPDATE- you can now use the app with a PostgreSQL db via the GitHub repo. We’re currently working on keeping the web app’s version (esp for those accessing it on Firefox) current with the repo! Many new features to come ahead:) -Thank you all for your continued support! 
I really like that you added a gif to the repo, but it's almost pointless. I feel like the repo is missing a "result" from the site audit, it only shows it processing, like a game showing off it's loading screen in a trailer. Does it output to pdf? .doc? .html? Why would I need docker to run it?
Good point, i will add output information in the readme! For the docker I use it in the CI to run audit after the deploy of the container and don’t have not useful dependencies in my repo (like chrome) 
Yep, read the link above.
Never knew that! Thanks
So let’s be honest, the real answer is “it doesn’t really matter”. If it’s on the client side I’m going to have Babel env loading the poly fill anyway (so it’s going to be in the bundle size regardless) and if I have to run the function enough that this is ever an issue, at all then I obviously made a way larger error before this performance nitpick
You show them the data they searched for. Maybe rephrase your question, show off what you tried, highlight the issue.
You're being downvoted but you're not completely wrong. In 99.9% of cases, the speed differences between `Object.values()` and `_.values()` are so negligible you really shouldn't care about it. _But_, something like including lodash in a browser is probably a big enough speed setback that you should pay attention to where you can live without it. I personally agree with you, unless I'm working with hundreds of thousands of records in JS (which is basically never), optimizing for functions like this isn't something I care about. There are dozens of performance gains elsewhere that would have a real effect, vs the tenth of a millisecond gained from using a native function over lodash. 
madness! :p
Because _ is so 2016
I still don't get it. Is this a design question? Is it a technical question? If the later, I assume you receive your data as a JSON array? If you want help you need to provide as much details as possible. You want me to help you: Do not create effort for me to follow your explanation.
I clicked that and now I’m just more confused.
I assume the better performance you are referring to is a result of tree-shaking (unused code removal) by tools like webpack. The performance improvements would largely be things like reduced load time. I am curious about this topic also though, because I use the revealing module pattern a lot, and as far as I believe that prevents tree-shaking from doing its job. I am interested to know what other think.
After applying beta-reduction all topics become just politics and religion
Also good: Camtasia
[https://caiogondim.com/post/city-state-state-management](https://caiogondim.com/post/city-state-state-management)
Will keep in mind!
You can include just the specific functions of lodash you use though right? I do hate religious debates about performance. They can just go off the rails sometimes.
Absolutely, feel free. I've added a public domain license. Do what you want with it. I'm still working on it, but I'll start working on branches. Please PR to the develop branch, as the master branch goes straight on GitHub Pages.
[https://caniuse.com/#search=Object.values](https://caniuse.com/#search=Object.values) people that care about that?
Cool. Just like the [Lighthouse CLI](https://developers.google.com/web/tools/lighthouse/#cli)
In the old days I'd say John Resig and Jeremy Ashkenas, but now both are just known for their outdated frameworks. Today Dan Abramov for sure.
Obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/837t82/who_are_some_of_your_favorite_speakers_educators/dvh0br6/)^3 from Eric Elliott.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [davidguttman/ns-livecoded-audio-visualizer/.../**index.js** (master → ac45f7b)](https://github.com/davidguttman/ns-livecoded-audio-visualizer/blob/ac45f7bd7a21545fe7fec605a77e58f78711eb42/index.js) ---- 
&gt; because when I try to console.log the said object without running the exe file, it gives me 'undefined'. That could still happen even if the object was created by JavaScript within a function scope.
What does lodash use for modern browsers, for `.values()`?
Hi /u/harry_powell, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/carterb188, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Here's another way to do it without having to update express/have a separate html file. https://philipwalton.com/articles/deploying-es2015-code-in-production-today/
I wonder how this adds additional QA burden - if QA is not already actively testing sites on older browsers, then you're very likely to things anyway. If they are, then I don't see any additional effort required.
Microsoft did huge impact with TypeScript.
Thanks, this is helpful. Also cool to hear about people related to past frameworks.
What's wrong there? 
Seems very derivative of what [meteor did](https://blog.meteor.com/meteor-1-7-and-the-evergreen-dream-a8c1270b0901). By derivative I mean hell yeah, everyone should be doing that.
by convention, underscore prefixes for properties usually imply "private"/don't touch. using them in an example of public fields is certainly odd.
Good idea - https://github.com/Hapachino/todoList
Just added data comparators, so I'm on my way to ORM's and GraphQL.
I think it's the opposite for me. I really hate doing things sub-optimally, it just feels kinda gross. And I feel no structure beforehand also makes projects more difficult. Maybe "design patterns" are too formal - I'm just looking for a general approach for organizing code for these kinds of things. 
/u/leeoniya has already given the main reason. I'll add that when writing a piece of example code, one should strive to make it as _neutral_ as possible in all other aspects that are not involved in the feature you want to focus on. Otherwise it can produce confusion and/or distraction. People will naturally wonder if there is any implied connection to that.
Lentils. I'll remember that!
I didn't use AngularJS etc if that's what you mean. I only used the MVC framework for structuring my code. 
I’m reading through it now - I had never read rail diagrams before.
This is very very helpful, thanks so much for the thoughtful response. Your response really got to the heart of the tradeoffs between speed, technical complexity, and flexibility, which is exactly what I was trying to understand. Your point about emscripten made a lot of sense, since learning that toolchain will take a fair bit of time and practice, for potentially not that much benefit in this use case. &amp;#x200B; I will also think about the offline option too. I could calculate a representative set of parameter values, and then just generate data for each of those values. Then if a use asks, I can check the datastore, or run the computation. Sounds like this might actually work :). Thanks agan. 
&gt; That said, if you are still comparing Web Components against React, Vue, Polymer, whatever-framework, you’re missing the point and, honestly, is not fair. What?
Oh, one small thing I forgot about the offline option... Note that you can, sometimes, split parts of the computation. That is, you might do the heaviest parts offline, but still keep some lighter processing _live_. This is not always possible, of course, but when it is possible, it's generally a fair compromise. In any case, good luck with this.
Does a shim detect if its needed? Or are you always running the shim and ignoring native browser support?
Hi /u/hitlers_crusty_poop, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I'll probably be downvoted for saying this, but ... while Crockford may or may not be "relevant", I would argue he's a bad voice to listen to. I once attended a speech of his where he spent the entire first half explaining why you should follow one specific practice (something like adding semi-colons to every line). He took all that time because he explained how important it was to not just follow certain practices, but that you understand and can justify following those practices. He then proceeded to spend the remaining half of the lecture essentially listing his pet peeves: a giant laundry list of things he said we should do, but provided no explanation or justification for any of them (immediately after telling us how important such justification was). Now most of the laundry list was best practice stuff, but some of it wasn't, it was just "cranky old man Crockford" stuff that absolutely wouldn't make your code better, it would just make it more like Crockford's. That's Crockford in a nutshell to me. He has a lot of good advice, but then he also has a fair bit of bad advice, and unlike most JS thought leaders he seems to have no ability to distinguish between the two or self-correct. So while you can listen to the guy, and I'm sure 90% of The Good Parts really are good, I find people like the ones I listed above to be far more consistently solid in the advice they give. Crockford's signal to noise ratio is just to high.
reminds me of what kylo ren said about letting old things die. if we keep support old browsers people will continue to avoid updating. heck that.
Kyle Simpson is pretty good. [https://github.com/getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS)
Shoutout to AirBnB as a company that has contributed heavily to open source, especially around React. Mozilla is big for MDN. Facebook is big for React. The NFL is underrated for contributing React Helmet. :) These are more people with good PR, though. The biggest contributors will be the developers who commit to and participate in the open-source process of ECMAScript implementations. Check them out on GitHub to see who really contributes!
Looks clean! Good job
A framework like react or vue will help you with state management
I created spotifyplaylistfinder.com It uses a bit of jquey and google cse I'd appriciate some feedback :)
I assume it does not work locally ?
It's why I created blodash (https://loda.sh).
Following the trail from https://github.com/lodash/lodash/blob/master/values.js ... 1) lodash's values() calls baseValues(object, keys(object)) 2.a) baseValues() calls the native array.map() 2.b) keys() either calls arrayLikeKeys() or the native Object.keys() 3) arrayLikeKeys() is a mess: https://github.com/lodash/lodash/blob/master/.internal/arrayLikeKeys.js So it has a lot of overhead, and I doubt it's on par with the native values()
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [lodash/lodash/.../**values.js** (master → 6bdb8a2)](https://github.com/lodash/lodash/blob/6bdb8a2f75fa61473f2a93e4d65d0a0ccdea0c86/values.js) * [lodash/lodash/.../**arrayLikeKeys.js** (master → 6bdb8a2)](https://github.com/lodash/lodash/blob/6bdb8a2f75fa61473f2a93e4d65d0a0ccdea0c86/.internal/arrayLikeKeys.js) ---- 
The shim which I linked to [always overwrites `Object.values`](https://github.com/es-shims/Object.values/blob/master/shim.js#L7-L12), but the `getPolyfill` function it uses will [return `Object.values` if it exists and is a function](https://github.com/es-shims/Object.values/blob/master/polyfill.js#L5-L7).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [es-shims/Object.values/.../**polyfill.js#L5-L7** (master → 66caa4a)](https://github.com/es-shims/Object.values/blob/66caa4a74e08de777c1b00185f796e609704bb83/polyfill.js#L5-L7) * [es-shims/Object.values/.../**shim.js#L7-L12** (master → 66caa4a)](https://github.com/es-shims/Object.values/blob/66caa4a74e08de777c1b00185f796e609704bb83/shim.js#L7-L12) ---- 
Most of us don't/won't care until WebComponents have performance better than comparable React components on ALL major browsers. Honestly... they are heavier weight and more complicated than the value the provide.
&gt; I'm looking forward to the day that our browserlist makes this article obsolete. :) Don't worry, by then Microsoft will finally have forced their enterprise users onto Edge, just in time for them to abandon that in favour of something new.
I think you need to read it again - that gives you the values, not the keys. 
Huh - I would not have guessed that Microsoft Edge supported it before any other browser.
How the hell does that happen...? 
[removed]
Actually if you just click and see the test you’re gonna notice there’s values in output.
How are they heavier weight?
I think the author may have meant that web components solve the problem of encapsulation and reuse of code via a standard, something some frameworks do solve, and some don't. 
Yes, that is one part of it.
That’s a great note about the individual contributors - I’ll dig into that
Yes it work, just install it with npm install -g
I was of the same opinions as you until I tried building a web app with one of these modern frameworks. I don’t hold that opinion any longer. If you’re building a web app, React &amp; Vue give you a much (much) better architecture to build on. If you’re building a website with some minor interactive elements, jQuery is still fine. 
Web Components are a low level API, not a framework or a library. Libraries and framework are built on top of this standards so a comparison is just unfair.
One would hope that a polyfilling library would use be most performant option they can, but it’s gotta be tough to keep up with these things
Because is a uneatable sort https://www.dmcinfo.com/latest-thinking/blog/id/9312/sorting-in-javascript-handling-google-chromes-unstable-sort
If you'll allow me, not everything is good in what Crock says. _There are some bad parts in The Good Parts_
I mean, who really has had performance issues that ended with "we moved to object.values cause it was faster."? Most of performance issues I've encountered so far were more on bad design pattern. 
&gt; Does anyone really give a dam in what an app is built on these days or am I simply getting sucked into all the hype that is around these modern frameworks? Users **don't care** about the framework you use. You can even use old ASP generating spaghetti HTML: all that matters to the user is that you app works, and it has good usability. However... the framework matters for the developer(s), because if you choose one that is hard to mantain, you're screwed. jQuery is still good, you can develop good stuff with it. But if you have time, it's a good opportunity to learn a new framework like React, because it will make you more productive, and ease your development. So if you have the time to learn, consider it an investment, it's good.
Good ol' Kent C Dodds with the react best practices and for making render props popular John-David Dalton, creator of lodash, always doing innovative things at the intersection of userland and the compiler Sindre Sorhus is prolific as hell, writes thousands of very small, useful modules and osx apps 
I realize that, I'm just saying the code is clearer if you use `Object.values`.
Alternate title: "Here's a random list of things I got when I googled this question"
“Thanks for the ad revenue!” 😂
Ah yeah, I can see the shadow dom not being free, especially if it needs to be emulated, with that said if you can give up the encapsulation you can still have the code reuse by using custom elements and regular ole dom access.
I didn't buy anything dipshit.
Thx!
using comparision with levensthein algorithm the shortest distance is a match. This is just the beginning , trained algorithm in future could do much more.
Second for Kyle Simpson. That guy is amazingly good at explaining the core concepts of JS and why things behave the way they do. 
So are we going to see this in Chrome 71?
I'd mostly credit Michael Jackson for really helping to popularize render props - his talk and articles brought a lot of attention to the pattern.
Because _.sortBy / _.orderBy is more readable than Array.sort() when sorting arrays of objects. I can say something like: _.sortBy(arr, 'name') as opposed to implementing the comparison function.
But this part is done (better) by Vue, React, etc.. 
I like to use underscores for function/constructor parameters. Am I a weirdo or does that make sense to anyone else? It's helpful when setting a public variable. this.var = _var
It increase development time, and tooling can be a pain sometimes. 
(Definitely this guy.](https://www.reddit.com/user/me)
Windows 2019 just launched, and it doesn't support Edge, just IE11. Enterprises will be stuck with IE11 for some time yet.
Perhaps in this example, it's a "protected" field.
PropretyTypes?
I think the idea is interesting. But if I wan't to test this locally with multiple browsers including IE, wouldn't this double the build-time since I have to generate everything twice? Also, would this work with hot module replacement so that in IE the legacy modules are considered?
&gt; Web Components work everywhere For me this is the main selling point of Web Components. When 90% of our visitors can handle them without expensive polyfills, we'll be all over WC:s, but until then... no dice.
Looks useful. But dude fix your typos. 
Yeah lots of spelling errors from them. Kind of makes me weary about using it this code. Obviously this is only a dev tool that won't go into production but... myea.
They had to be at the cutting edge for something ;p
I mean, that's like saying C is a low level API and python is built on top of that, so comparison isn't fair. It's a true statement (at least for the reference implementation of Python), but comparing the two is a legitimate comparison.
Loging 
It's an artificial type checking gate that can be circumvented by stupid things like the "Any" type. There is a reason why types never made it to Javascript in es4 (aka AS3). Static type analysis leads to propagation of dumb types and is a cognitive overhead that isn't necessary and causes over engineering of domain models. Also, Typescript is not JavaScript. See [https://www.reaktor.com/blog/fear-trust-and-javascript](here)/ for things you'll have to deal with when using JavaScript as a functional language.
Or you can make a PR
clean**_**logs
I hate comments like this. Yeah no shit we all know how git works. 
What you do is simple: You count the money. That is, you make an analysis of how much the two options cost: 1. Maintaining two different, divergent versions of_Lib_. 2. Updating project _B_ to version 2. Number #2 is usually an estimation of how long it takes to upgrade, and possibly of any downtimes or delays or other effects it has. Number #1 is usually counting the number of bugs and fixes you need to do on a certain period and an estimation of how much each typically costs. Then, with these two calculations you figure out how long it would take to make number #2 worth it. Let's see this with an example. Say you take a look at your bug tracking system and see that on average you get about 10 bugs a month on _Lib_. On average, each costs about a full day for one person. Note that here you need to take into account this: bugs that only happen in version 1 must be counted "in full", bugs that happen in both versions should only count for the cost of fixing version 1 (if you know how much is that, then great; if not, well, you could say about "half"). Say that _on average_ these bugs take about 7 person-days per month on work that is dedicated to version 1. Now, imagine that you estimate that upgrading project _B_, could easily take two people about two full weeks. That's 20 person-days. This gives us a figure: After around three months after finishing, the option to update project _B_, has already paid for itself and you start saving. Of course you need to do your own calculation. But also be aware that there are some finer details here and there. In general, these are all estimates, and if it's the first time you do this, they probably won't be very good. So, you apply some margins and will get not a single figure but an estimation (as in you may amortize the upgrade between 2 and 4 months, or whatever). Also, you need evaluate the estimation in your own context. That is, you may get, say, 4 months, and then it may turn out that project _B_ ends in three months, or whatever. Or that you can't assign people to update _B_ right now, or... You need to evaluate the whole context and make a decision taking all this into account. But in the end, what you do is just that. You count the costs for each option and decide on the one that makes most sense. (Also note that this is a decision involving budget, so if it's you making the calls, then great, just make the decision and that's it. If it's not you, then just present the options to whoever makes the decision in a fair manner and just let them decide.)
I do. No one anywhere has any obligation to contribute to any project and you should be allowed to point out typos without some smartarse who’s just learnt about pull requests butting in. 
mozilla's wasm? I thought it was part of w3c, not being directly associated with any one company.
We utilised a jQuery UI component to make our own framework that enables fast app loading as well as enabling our software to be easily customised by anybody. https://www.hirehop.com/blog/customising-widgets-hirehop-api/ just in case you are interested. 
If your app is small (like less than a few thousand lines) AND your team isn't versed in Typescript at all AND you won't be doing much JS or TS going forward then it probably isn't worth it.
I am not too familiar with service workers, but I'm familiar with the fact that playing videos makes range requests. I guess it just struck me as odd that, in order to do better caching, a blog would have its own implementation of an HTTP proxy, in the form of a JavaScript function, that sits as a layer of the network stack along with Nginx and a CDN, but the JavaScript function doesn't really understand HTTP so it doesn't work in all cases, and somehow Safari ends up getting the blame. But I learned something about what service workers can do; it's definitely interesting technology.
&gt;I made this utility to help visualize the props on my react apps while debugging the formatting on this tool is nice and makes reading easier, for sure. i used to `console.log` state and props for debugging. it's much easier to use the react browser extension to inspect the props and state and even change them around to see how your app handles different data.
https://cloud.google.com/translate/docs/reference/translate
It's like asking if XSLT is a thing. Firefox dragged their feet so the momentum is lost. Too busy with yet another bullshit project like WASM most developers will never both using.
Imagine if Google instead spent their time optimizing their browser for those frameworks and making them better instead of providing a Google^TM way.
Try Yandex - the russian version of Google its free for now [Yandex translation API](https://tech.yandex.com/translate/) 
The purpose of these questions are to test how you approach and think about difficult problems under pressure. Everywhere I've worked that has had these sort of tests doesn't require that candidates get them 100% correct, but rather that they present some coherent thought process and give a good effort trying to solve the problem. Importing libraries and managing dependencies doesn't cut it at these companies. You will be expected to think on your feet and come up with original solutions, and you aren't always going to have all the time in the world to do it (especially if it's something affecting a production environment and even more so if it's interfering with revenue generation.)
Don’t be a white nationalist /u/esr360
On a related note, Firefox 63 was released today, with native web components support! https://twitter.com/mozhacks/status/1054745952488177664?s=19
Firefox launched web components support today! FF 63 have them natively!
&gt; dragged their feet 
s/weary/wary/g Weary is tired. Wary is apprehensive.
Yes, Facebook.com is a good React example.
That’s normally exactly the opposite of what you would do. 
what the fuck
Oh, Good project :D I wish you further development.
There are coding test before actual interview for screening purposes. When it comes to recruiting, false negative is fine while false positive is not. It is just like the standardized tests. They needed a way to evaluate a candidate while spending the least time possible. And in fact, it works fairly well. Most of times, the “smart” people who spend their times to practice such algorithms tend to be better. doing well or not doing well does not necessarily tell you are indeed good or bad, but it is a number game. think bayesian
&gt; Now, i think this tests are ridiculous and also who ever gives it as part of job interview ( with exception of small bunch of companies that write some low level stuff) is a retard. I'm on the same boat. Last year been on interview just out of curiosity, I like the company, so decided why not. position was for front-end developer and technical questions started with with some basic stuff, but moved to algorithms and array management and asked me to write code on the board. I've got lost and messed the whole thing. Successfully working as front-end dev for the past 8 yrs fulltime and +4 year freelance and contracting. Job was managing website + move some of these to react. I don't have computer degree or ever completed related course, and lack of theoretical knowledge sucks sometimes.
Good logging environment maximizes your **development** environment ! 
100% agree ReasonML is the best choice for static type enforcement.
TypeScript added “unknown” type to help library developers manage unknown objects by clamping type assertions so that you must perform checks before your code compiles. It’s a great improvement. Essentially, it forces you to write runtime validation. Any methods or properties need strict checks before their use. TypeScript ensures discipline. Also, JS is multi-paradigm on purpose. Mixing functional and OO is allowed and can yield really nice code. For example, using a map to turn an array of plain objects into an array of classes, which might have accessors, mutators or validation to make their augmentation easier. My team makes fewer errors and moves faster with TypeScript. It may not be for everyone, but it’s great for my team. 
You're joking, right? If you try to sell someone else's content you're in a world of legal hurt. The only reason Dash gets away with it is probably because they're still so small.
 I'm not making decisions, but I can make estimations. I just thought that I'm missing some well know approach, and your answer saying that there is no simple solution. Thank you.
Read the article I posted above on why the need for Any is giving up the security blanket that all Type Checking evangelicals rabidly cover themselves in. It's a magic cape.
`any` and `unknown` are two different types with different purposes in TypeScript. You can learn about it here: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html
Easy PR for Hacktoberfest though
Personally I think this._var = var looks better. I like when the underscore represents an internal property.
Non-Mobile link: https://en.wikipedia.org/wiki/Muphry%27s_law *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^222333
The tweet and this thread’s title appears to be incorrect, if the comment referencing the actual proposal is accurate. So `count` is a private backing field here and the underscore is fine, if you subscribe to that convention.
You know there’s an official react devtools extension that lets you see props right? 
If I am not mistaken, don't you have to pay for that?
But then all code, including packages / plugins you didn’t write, that rely on that api that’s missing, will fail. You could modify them, but then again, it’s code you down own. 
You misunderstand the nature of TypeScript. TypeScripts types are only used at compile time and it's type system is much more powerful and expressive than either Java's or C#'s.
This is false, as typescript is strictly a superset of Javascript with static typing. If worst comes to worst and you decide to abandon Typescript then you can easily strip out the types and have plain Javascript, or just tweak your compiler settings for your desired target and use the compiled output as your source. Your bet is as safe as Javascript.
The only serious reason not to is if you're writing something that you want to be more familiar to people who don't know TypeScript or if it's very important that there be no compilation step required in what you're writing. Learning TypeScript takes a bit of time and will slow you down a little bit. Once you learn it then your velocity will be effectively a lot faster. You won't need as many unit tests as you do on JavaScript since it catches most stupid errors for you. You will also be able to very quickly do major refactoring to your codebase which is something that you will just tend to avoid in JavaScript. For any serious project that will comprise more than 2 files I use TypeScript. I have been writing JavaScript projects for almost 20 years now and I would never voluntarily use a non statically typed language again now that we have TypeScript.
it could be worth easing them into typescript too, you can enable checkJavascript and use jsdoc I think
Ah... I guess we just haven't tried to turn it on yet :) Would certainly appreciate a PR doing that if you could. Thanks, and thanks for helping maintain Docusaurus!
Wasn't aware of this. Thanks!
https://twitter.com/whyevernotso/status/1053057099809210368?s=21
In development, you'd most probably be running the modern build. For when you require testing on older browsers, you'd simply have to set the BROWSERSLIST_ENV environment variable to `false`. A double build isn't required.
You can clean up the stack trace using Error.captureStackTrace on browsers with V8: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error
Oh, god. You think that the documentation Dash makes available is *"under copyright"*? Lol. FWIW, Dash isn't *"small"* at all. It's the most well-known offline reference amongst web developers at the very least.
I've used Typescript for some smaller personal projects and while I have to say that I really like using it, like any tooling there are some caveats: If it's a really small project &lt;1k line, it might not be worth it to setup a build step. Being able to refresh and instantly load new Javascript is nice and while you can get a really nice dev workflow setup w/ Typescript, Webpack, and hot module reloading, it can be quite complicated and you'll need to worry about source maps when you're debugging. If you're on a larger project with multiple devs, you'll need to consider the "evangelism" / "education" aspect. A lot of people with experience in Javascript are skeptical of compile-to languages. Think about Coffeescript which used to have a decent following but since ES6 has declined in usefulness / popularity. That said, I think Typescript is a different story and their team has been wise in sticking very close to normal Javascript semantics and following the standards very closely. Still, Typescript has a significant learning curve. Many Javascript programmers have no experience with statically typed languages and will need to learn how to effectively use interfaces and abstract classes. Furthermore, even if you've used a statically typed language like Java before, Typescript has a much more powerful type system with non-nullable types, conditional types, union types, intersection types, etc. While it lets you model some very complex type relationships that are idiomatic of javascript (e.g. think Object.assign(...)), some of the error messages can be quite complicated to read (e.g. union type where the types are very large nested objects). That said, I'm a very big fan of Typescript and would recommend it for many projects.
As someone who's had to deal with 64 bit integers in a web application, I'm very excited to see BigInt! Dealing with numbers as string type is a pain and error-prone. It looks like this won't be polyfillable because it's introducing new syntax?
Can you make apps without it? Are you able to call a script from another script? Is it a large team project? Are you looking for performance? 
Beautiful. Installing now.
I think if I categorized all the bugs I wrote in the last year, very few of them would come down to type mismatching. Maybe that's just rosey glasses, but there it is. 
I wonder if anyone's like me: I use React heavily, but just the DOM, never the rest. This means I've never used things like "shouldComponentUpdate" etc.
There is no problem in using the word "function" in a project, it's a common mistake to think that arrow functions came to get rid of the standard function but both of them have their use cases 
jQuery is redundant and probably you shouldn't be using it as of now. And it was made redundant not by view lib like React or Vue but by ES6+, that is by vanilla JavaScript spec. For browser you always have babel so there are no excuses. If you don't really trust a well established view lib, you can look up WebComponents like polymer. I personally find jQuery to be absolutely terrible. It was necessary hack fest back in the days, but now there is simply no excuse. 
Array.sort doesn't mutate the array. It returns a new array that is sorted.
Types are: * Statically checked *documentation* * A design tool in the same sense as TDD * Probably more powerful than you think Most of the bugs caught by TypeScript are never written, because of the first two. This is especially true in multi-person projects. Many of the bugs missed are likely due to the third. 
TypeScript is an extra layer of tooling, and all JavaScript tooling sucks a little. 
You're missing the point. The value Web Components provide is that they allow for reusable and encapsulated components which work with *any* framework and are *isolated* from the rest of page. For example, Web Components can work without conflicts on pages which contain nasty legacy code which stomps all over the global CSS rules. React doesn't give you that. What we are likely to see is frameworks like React supporting Web Components so that you can reuse your React components with any random other framework. Before Web Components the only kind of effective isolation mechanism we had was iframes. 
Not really, you're comparing a pile of bricks to a house. They don't have the same function. 
In that case, you should consider if React is overkill for your project. Of course, I know nothing about it, so it's just a suggestion :D
And yet you’re wasting time that could be spent on a PR commenting on Reddit
Same, but that's very normal. It's essentially just an optimization hook. Don't need it? Don't use it.
Maybe English is a second language? How many languages do you speak? Documentation has bugs just like code. You should evaluate the repo first on the strength of its tests and code coverage and organization. Not spelling
all good. cheers :)
I wouldn't say it's an overkill, because the incremental update of the DOM based on an immutable node representation is 80% of the value of React (to me at least), and JSX of course, but that's a convenience. I get 80% of the benefit for 20% of the effort. Well, honestly the effort is about the same, but I get to mix React components with non-React components a lot more seamlessly compared to if I follow the React architecture to the letter.
I create enough PR's in public repositories as well as my own that I should be free to browse Reddit without people like you making assumptions.
Adds overhead in development phase and introduces new dependencies which may not play well with other tools due to static type definition requirements. While the benefits are not entirely obvious. As most JavaScript code is composed of small standalone subsystems so it's not that difficult to keep track on things without using interfaces and things of that sort. So the answer is the annoying "it depends".
Ah. Well, if it's convenient and works for you, then by all means, it is the right choice!
I think the first 1M characters are free.
That means your apps aren’t very complex.
Works like shit on mobile. 
I'm not exactly blaming Safari, it just happens to work differently to the other browsers, so more code is required. &amp;#x200B; I hope you do get to look into service workers and see what they can achieve though. They're much more than just an HTTP proxy in JavaScript. :)
I was looking for something like memo. My components are always 100% pure and immutable. However, the ability to attach static functions to event listeners in each instance is the last remaining thing to remove most of my reliance on PureComponent.
Any objective evidence of superiority of static type languages remains elusive: https://github.com/Fiedzia/type-system-research/blob/master/README.md But lots of people have strong feelings: http://blog.metaobject.com/2014/06/the-safyness-of-static-typing.html To quote from above: "not only were development times significantly shorter on average with dynamically typed languages, so were debug times." " So it looks like static typing is "safy": people just know intuitively that it must be safe, without regard to evidence. "
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Fiedzia/type-system-research/.../**README.md** (master → 405e5ad)](https://github.com/Fiedzia/type-system-research/blob/405e5adeea713f33b970f06cfcd23220d02bd86b/README.md) ---- 
You made me double check! But I'm afraid it does mutate. https://jsbin.com/bapapedoma/edit?js,console
Oh crap, you are right!
You’re right, I could. But I wanted to build something that was more intuitive for my own uses.
[https://i.imgur.com/ek1t10k.jpg](https://i.imgur.com/ek1t10k.jpg)
Don’t think this is possible. Imagine the things you could do to someone’s device if js had access to hardware. You probably will have to go native.
If you're using recompose wrapping with `pure` usually does the trick, but it's nice to have it out the box.
I envy your knowledge and ability to be able to even tackle this. 
thanks for writing this, I realize it had been a while since I had done something more \*fun\* and less product oriented, so I decided to whip up [this.](https://mikep.ro/pretty-fly) It uses the open-sky API, and does some geometry to plot every plane it can find on a map and approximate where they are when they go out of range, and then color them all according to their airline (well, their callsign prefix, but it's pretty much the same). It led to me redoing my whole dev setup, so I can more easily make projects like these/deploy them to github pages, so now I'm even more inclined to do this.
It's the V (and code splitting) in MVC!
We are almost there, only Edge support is missing for now. Btw, you can start using only Custom Element, the polyfill is really small and reliable.
It can _really_ get in the way if you wish to utilise Javascript's beautiful dynamic type system.
This is correct. Thank you for having the balls to share this in the face of the TS army. TypeScript is nothing more than a product of people misunderstanding Javascript, likely due to their experience with other styles of programming.
People are still wondering how he did that moonwalk!
I'd also point to Andrea Giammarchi, who has a whole ecosystem of extremely portable polyfills for writing modern code that works on old browsers.
It's not only out of the box but memo will also be more performant.
I wouldn't say John Resig is outdated... it's more that jQuery got built into JS specifications. When you see document.querySelector which is now a built-in, you're looking into the heart of jQuery. John Resig more or less, basically made JS feasible and the fact that we're still using JS today is because of jQuery in the past.
&gt; risk future developers not understanding it's significance that's what code comments are for. use them.
This comment is littering the internet. 
Existance of new ES6 features does not mean older stuff is deprecated. function() is not the same as () =&gt;. var is not the same as let. Read about new features; they’re interesting and you can learn a thing or two. :)
A 27 h project with well defined requirements and the same members from start to finish is not a real world situation - at least not one worth arguing over. Students, like with inheritance, are prone to misuse types, and make poor study material. The "Purity" language, though I've only skimmed the study for code examples, doesn't seem to have a very good type system. It is probably on par with Java, but which I mean that it nearly *can't* be used properly. They also built their own IDE, which I highly doubt is on par with modern equivalents when it comes to type support. The study mentions (as an example of common arguments against static type checks) that they don't protect against null pointers - but with well defined types, they do. They just choose to test this with a language that doesn't support good types. 
Here is a PR [https://github.com/reduxjs/react-redux/pull/1060](https://github.com/reduxjs/react-redux/pull/1060) :)
&gt; That far.read() call back Autocorrect has betrayed you brother.
I generally prefer focusing on some _smaller voices_. I'll make a bad generalization here but... Generally, bigger voices tend to become biased by their own particular business interests; this happens too but a lot less for smaller voices, IMHO. Anyway, some people I appreciate for their contributions, in no particular order and probably leaving some just because my memory is not that good, may be: - Raganwald aka Reginald Braithwaite aka /u/homoiconic. I've read him for a _long_ time, writing about JS and about many other things. His thoughts are almost always interesting. - Leo Horie, mainly because of Mithril, but also in general. I do think his views are practical, pragmatic and generally very good at a technical level. - André Staltz, mainly for Cycle.js and for the beautifully simple ideas contained in it. Also he explains things _very_ well. - Andrea Giammarchi, Nicholas Zakas, Mr.Aleph, Marijn Haverbeke, Rebecca Murphey, Lea Verou, Dmitry Soshnikov (has some truly excellent writings on the finer details of JS, and many other things)... Others. - Here in this subreddit, while they may or may not be extremely active, some interesting users are /u/MoTTs_, /u/lhorie (also mentioned above), /u/rauschma (who also has some nice books and a very thorough and helpful website)... of course /u/kenman does a great job moderating but not only that, mmm... /u/senocular, /u/acemarke... I'm surely leaving many good ones out. Some seem to have left. Blame my memory, not any ill intention, for those left out.
The idea is that now YOU are in control over deciding how to provide this new functionality. If you have the ponyfill version setup but some of your dependencies need the polyfilll anyways, you can just link that yourself still. But if they're not needed, such as when you're really just using the function yourself, then you're now no longer polluting global scope with polyfills. Also, polyfills are rarely perfect. Sure, most of the time the actual functionality is provided perfeectly (but sometimes this isn't entirely possible/feasible). But there are other potential differences, such as performance. If a library is extensively using some new browser feature, and the polyfill is 10x or even 100x slower (actually possible), then you may not want that library to use the polyfill at all! But it's not like I'm saying ponyfills are the best and you should never polyfill. Not at all! In fact most of the cases for ponyfills are irrelevant for more casual projects, and it's way easier to just use polyfills there. It's the classic difference that you can also see in tooling. Let's say you can choose between two different build tools. One is very simple to use out of the box, no configuration required; but is also quite opinionated and doesn't have many configuration options available. Meanwhile the other is much more extensive with over twice the number of configuration options, but documentation is poor in comparison, but you'd end up spending a week trying to get it to work. In a way, polyfills are the former type, while ponyfills are the latter.
This lifecycle is normally only used by libs that want to optimize, like redux, apollo and so on. I think i have never had any component that would use sCU by itself. Even when you need to shallowCompare, there's been React.PureComponent which fills it out for you. 
React does exactly that, and that was also the reason why project Gutenberg uses React as a common component glue, read: https://pbs.twimg.com/media/DpT-cLSW0AEK2RJ.jpg:large A React component is by itself [cross platform](https://twitter.com/0xca0a/status/1000513216672403456) as long as it doesn't output views, something which web components lack, and it can be run in any context with as little as a dom-node to mount it to. In many situations you can cook down the overhead down to 3-4kb (for instance by aliasing the React dependency), which is less than any web component polyfill ever will be. As for encapsulation, that is such a weak argument. When has that ever been a problem over the last years. I feel more like it is a really dirty bandaid that only further cements the insane direction css is currently going. 
MediaDevices is the API which should see the device i 2nd this Example Usage r/https://github.com/philnash/mediadevices-camera-selection if you can't select it here, the browser does not recognize the device and you have to fix that on OS level first
&gt;/u/homoiconic Thanks for sharing these people, and your notes about why you like them. I definitely hear you about focusing on the smaller voices as well.
Friendly reminder to skip odd Node versions in any production applications you are deploying. 
The "A book Apart" Series is very good - I used them as desk reference books, but I think they could definitely help you get up and running with HTML, CSS, and JS. Last time I checked it was hit or miss getting them on Amazon, but here is their website: [https://abookapart.com/products/](https://abookapart.com/products/). The "Front End Fundamentals" Book Pack might be a good option: [https://abookapart.com/collections/front-end-fundamentals](https://abookapart.com/collections/front-end-fundamentals).
Here's a link to the V8 changes: https://v8.dev/blog/v8-release-70
I think web components would be useful for framework-agnostic widgets like selects, date pickers, range sliders... even checkboxes and radio buttons. Commonly needed things that you basically have to rebuild from scratch otherwise in order to style them. They're definitely not appealing if you have to download a polyfill library to use them though.
I'm surprised this announcement didn't coincide with the new LTS release. 
Gotta spelling in timeout example last line cis/is
THE FUTURE IS [DENO](https://github.com/denoland/deno). (Seriously, I would avoid starting projects which make complicated use of npm, node-gyp, node_modules, node Buffers, or the node.js built-in apis)
As someone new to programming, why?
*There* it is. . . The response that defines the reason why I won't.
Thank you... Updated :)
Odd versions,like for Ubuntu, aren't LTS (long term support).
Sounds fantastic, excited to check out their work thank you!
I started using it in production recently. Awesome framework! Simple, elegant, it does one thing and does it well. I wrote an article about it the day before yesterday ([https://blog.capsens.eu/stimulusjs-on-rails-101-f22a0818dff8](https://blog.capsens.eu/stimulusjs-on-rails-101-f22a0818dff8)), it's now in my must-have tools list for any new rails projects.
You should definitely make it on the db side, in SQL-based systems simple COUNT() and GROUP BY would make it and probably there's something similar in Mongo and other document-based. With this array of objects you have to manually count meats: var counts = dataFromDB // merging all meals into one array: .reduce((meals, el) =&gt; meals.push(...el.meals) &amp;&amp; meals, []) // reducing to object with counted meals: .reduce((counts, meal) =&gt; { counts[meal] = (counts[meal] || 0)+1; return counts; }, {}); // making sortable array: var countsArray = Object.entries(counts).map(el =&gt; ({ meal: el[0], count: el[1] })); // sorting counts DESC: countsArray.sort((a, b) =&gt; b.count - a.count); And now you've got `dataFromDB.length` with number of *times* and you know that `countsArray[0].meal` will be one of the most popular, and of course you can also look into `counts['steak']` to look for count of selected meal. Take a look into other Array/Objects methods and make it for yourself.
thanks for that, but i imagine that still doesn't answer the question. why would one need LTS? especially if we just stay on the most stable version of node anyway? if you're going to make a sweeping blanket proclamation, at least give some reasoning for it.
Why? The schedule is pretty static. New major version every 6 months. Unless you simply mean announcing v12? I think it’s assumed by now that v12 will be out in summer 2019 based on their schedule. 
Do they normally announce the next 2 versions together? I can't recall. I feel it's safe to assume based on their planned schedule that v12 will be out in spring/summer 2019. Actually, just did a quick look through their Github and there's a PR for adding v12 dates to the LTS schedule. Should be landing soon. https://github.com/nodejs/Release/pull/371
Because 11.0.0 *isn't* the most stable version. Right now, 10.x (which is LTS now, or should be very soon) is the most stable, because half a year of development has gone into it, and the NodeJS project or whomever plans on supporting it with new updates for 3 more years or so. There *are* breaking changes between the node versions, so if you have a large production application, it's nice to not have to fix it for a new version every six months. People with those kinds of applications should probably stay on 8.x anyway, for now, unless they really need async iterators, because that's the version they've been building their application for for a year or two.
We generally adopt a rule of only upgrading Node after the next even major release gets its first minor release. So `v8.1` `v10.1` etc etc. Get a lot of the kinks of the major version of the way so we know it's more stable. We're only now looking at moving apps to `v10.1` for that reason.
There are complications around wrappers like this, with open bugs suggesting solutions like: https://github.com/Microsoft/TypeScript/issues/10247 but I think in your particular case, what you might be after could be solved with: export default wrapperFunc(originalFunc) as typeof originalFunc; ?
That's what I'm saying. It's the future but you can get ready for it by avoiding "complicated use of npm, node-gyp, node_modules, node Buffers, or the node.js built-in apis"
Because the `areEqual` function just determines whether the next and prev props are equal, not whether the component should update. This signature allows for passing any comparator function like [_.isEqual()](https://lodash.com/docs/4.17.10#isEqual) without having to create a negating version of that function.
This post was removed. Please read our guidelines before posting. Especially, remember the human.
Thanks for the suggestion! That still doesn't appear to give me the typings when I come to importing and using that function unfortunately. I've taken a dive through the linked issue (and it's linked issues) and haven't come out any the wiser really. I'm at that frustrating point of not quite knowing enough about TS to figure out exactly where I need to look for a solution, let alone actually figuring out the solution!
Have you ever seen anybody abandon Typescript once it's setup? 
Why’s that? Struggling to think of a reason you’d call it if you don’t do anything with the data or check for an error. 
You can check the example on my website - https://alalfakawma.in/
Is this not what you were after? https://i.imgur.com/mD6PwsO.png
Is there any documentation for using `&lt;Suspense&gt;` for asynchronous code besides module importing? What if I just want to fetch an API?
Just pushed an update to my library [vue-cookie-accept-decline - github link](https://github.com/promosis/vue-cookie-accept-decline). It's a simple component to let you show messages to your users, let them accept/dismiss or decline, and then store that selection in a cookie. Makes the whole process really easy. The new update adds a nice floating panel and the option to use multiple instances of the component on the same page. It's MIT licensed so go ahead and fork it if you like.
Looks great, but could you possible add more comments to your code to understand certain functions?
Extremely excited to use `memo` once the React TypeScript types are updated!
You are. Though you seem to have a persecution complex.
React memo can be deprecated first as well. Just call the function `shouldUpdate` instead of `areDifferent`, you'll have the same logic.
I've never seen anything like that, but I mostly use Node for build processes and simple Koa servers.
React/Vue.js/Angular!
&gt; React memo can be deprecated first as well. Yes, so there's no reason to couple them. &gt;Just call the function shouldUpdate instead of areDifferent, you'll have the same logic. Memoizers are a [well established programming concept](https://en.wikipedia.org/wiki/Memoization). They aren't powered by `shouldUpdate`s. They're powered by `areEqual`s.
I've heard about the objections to the rest, I don't understand why buffers are an issue. Do you have any background on that?
Dude, that's what having a real ide gives you. Take a look at intellij or webstorm sometime.
I have to agree with your answer but it seems this is the current situation... Indeed: " wrangling with a naked dom all over again ". I experimented for a while with them but I found the lack of a data binding syntax really frustrating. React, Angular, or anything else will have the advantage of easy to read templates. Your data just magically gets there. With Web Components I was not able to figure out a way to have template literals (template strings) and decent change detection. It's all manual (declarative vs imperative)... If somebody knows a way to have actual data binding in web components I would happily use it. And I don't mean Polymer or Stencil. I'd like something really basic that is not vendor dependent or at least very light. Otherwise with Universal Router u can set up all the stuff and have a ready to run single page app with minimal frameworks lying around.
The Node.js Buffer class was created before TypedArrays became a thing in browsers. Deno aims to be maximally browser-compatible, and this includes using v8's TypedArrays in their APIs over a custom binary data type. There are small differences between Buffers and TypedArrays, and you can't use Buffers in the browser unless you use a shim like [feross/buffer](https://github.com/feross/buffer). In any case, it's probably better just to use TypedArrays throughout in future code b/c browser APIs like fetch and FileReader all use TypedArrays. They’re also faster in node.js according to [these benchmarks](https://github.com/feross/buffer#node-01114).
I saw the crosspost in r/reactjs but thought I'd reply here as it's a JavaScript question and not a React one. I think a lot of the answers you've gotten so far are overcomplicated and add unnecessary complexity. Breaking down the problem we can see it really only consists of two key parts: 1. Listing all the ingredients of the recipes 2. Counting each ingredient So we can achieve this by first reducing the recipes into a single array, and we flatten it as we do so. The second step is simply zipping the array into an object, and increasing the count against each ingredient if it already exists in the object we're creating. You can achieve this with 5 lines of code: const count = recipes .reduce((acc, { meals }) =&gt; [...acc, ...meals], []) .reduce((acc, value) =&gt; acc.hasOwnProperty(value) ? { ...acc, [value]: acc[value] + 1 } : { ...acc, [value]: 1 }, {});
To me, it would be a reversal of expectations of a memoization function to have the signature `memoize(fn, comparatorNegated)` rather than `memoize(fn, comparator)`. Memoizable SFCs are referentially transparent functions that take params and return a React element tree. So the current function signature makes more sense to me, as it aligns with my expectations of memozation more broadly.
Damnit!
Their site still lists 8 as the LTS release, is 10 not going to get the same treatment?
Imagine you are a parent component. You've got this great array of biscuits as a property `myBiscuits: Biscuits[];` You have a child component nested inside of your template. As a parent, you want to give your child access to your biscuits. But all you have to reference your child component is its selector in your template. `&lt;app-child&gt;&lt;/app-child&gt;` How to pass along your biscuits? Well, elsewhere in angular we can do property binding with HTML elements by doing something like this `&lt;input [value]='bojack'&gt;` That binds the value of bojack to the value of the input field. Since that pattern is so familiar and awesome, it would be great if we could do that with our own components. So that would look like this: `&lt;app-child [biscuits]='myBiscuits'&gt;&lt;/app-child&gt;` Unfortunately, by itself, that won't work. You're trying to pass in something to the "biscuits" property of your app-child component, but your app-child component doesn't know what that is. So in your child component, you set a property for it. `biscuits: Biscuits[];` Unfortunately, that's still not good enough. That just defines it like a normal property. There's nothing to tell it that this property will receive data from the outside. That is a special case. That's why we prepend Input() to the front of the property. `Input() biscuits: Biscuits[];` As long as you import Input from @angular/core in your child component, you will now successfully pass along your biscuits.
Something odd's going on here, which makes me think there's something wrong with my TS set up. I copied the code from your image into its own directory, and it worked exactly as you described. I then modified it to do what I actually need it to do (rather than the simplified example I posted), and again it worked perfectly. Finally, I copied that into the actual file I'm working in and I get an error around `originalFunc` on L27 of your example, essentially saying: Types of parameters 'fancyParam' and 'options' are incompatible. Type '{}' is not assignable to type 'SomeFancyType'. Property 'type' is missing in type '{}'. (NB: to make your example match my actual code, give SomeFancyType a type of `{type: string}`) I've checked and checked again and the files are identical, the only difference is that the one that doesn't work is in my src directory, the one that does is in it's own testing directory in the root of the project. I'm not importing anything external into either file, they are character for character identical. Appreciate the help so far, and also that this is a difficult one to help debug without access to the actual code!
Currently, I'm making my own email templates, so they use JavaScript template literals. But I wanted my code editor to know that the page should make the syntax highlighting as if it were js. I could just change it manually but I figured, "why not see if a random extension works?" Thanks for the help! I'll just keep it as a .js file and manually set the highlighting.
I think it will. https://github.com/nodejs/Release/pull/373 Mentions next Tuesday (the 30th) as the start date.
Neat
ESlint.
?? I don't know what to do with this information
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
So you can predict the future and how deno will be used and what will be the migration path?
You, sir. Are a gentleman and a scholar. This explained it perfectly! Thank you so much! This was the first step in figuring out how to pass data between components. Now I need to figure out how to pass data from my input text box \*after\* the user presses enter.
Yes! This helped so much thank you!
Most languages just use the generic expression "idiomatic in languageX" rather than invent a word like Python people did. People don't usually say _JavaScripty_, _Haskelly_, _CSharpic_, _Javy_, _Perlish_, _Rubysh_... mmm... maybe that last one...
They sort-of touched on that in the blog - &gt;The Suspense component will also allow library authors to start building data fetching with Suspense support in the future.
Are you generating it using your own google API, or you want to solve captha on random pages? 
I'm pushing for "rusty" but it doesn't seem to be in common use already.
Yeah, I didn't include that one because I've heard it used... maybe even twice xD
Fair enough. Although i will say Pythonic is way shorter than "idiomatic in Python" 
Most of the time, though, you're already talking around a certain language and you would just say "idiomatic".
"In the future" gets me. I saw the demo Dan made for a conference, and he was using data fetching to showcase Suspense, but saw no mention of it here.
by design, there is no non-trivial method to solve CAPTCHAs with code.
I'm not questioning the memoization concept... I'm questioning two similar functionalities with opposite logic. Imagine things like that in the head of newcomers.
I'm sure we'll see more tomorrow at reactconf. 
I have posted this on a ‘Showoff Saturday’ previously but not in a WTF Wednesday... https://github.com/jamesleesaunders/d3-x3dom D3 X3DOM Data Visualisation Library I am interested in any feedback, comments etc really, but in particular I an keen to get documentation right, I want it to be easy to use. Also interested if anyone has a view as to the way I have broken it into ‘charts’ and ‘components’. Also would love any contribution help! Cheers all!
&gt;it is a spec no one needs and is massively inferior compared to what we have Since "what we have" seems to be massively better than this, which is this tool that lets me create an encapsulated, framework-agnostic component which is reuseable in React/Vue/Angular without any glue code and no external dependency?
Yes, and if you ask me, I think shouldComponentUpdate should be the thing to change, not memo.
Well, Mozilla does have tons of resources on current and upcoming web technologies.
You'll want to read up on OCR (optical character recognition).. there are a few JS libraries already written. One of them specifically mentions solving Captchas on their website. I won't tell you which one though, you'll have to find it yourself.
i already knows about that but it also fails.
I posted this a while back over in the react.js thread. It’s a web app that lets you query stock market data. Here’s the [repo](https://github.com/Ll2NZ/securities-app). 
Real threads in wasm! Now we just need multiprocessing.
Pop this in your console and let us know: var npm_devs = ['Mild Mental Retardation', 'Moderate Retardation', 'Severe Retardation', 'Profound Mental Retardation', 'Smarter Than You']; console.log(npm_devs[Math.floor(Math.random() * npm_devs.length)]);
A milestone for Firefox and web component!
Maybe because NPM team is too busy to fight white man instead of improving code. https://medium.com/@bgourlie/nodejs-leadership-is-a-toxic-mess-34e2b8faa003
Yep https://dailycaller.com/2017/09/25/tech-ceo-isaac-schlueter-calls-for-fewer-white-men-in-tech/
Socket.io should be suitable for this 
Hi /u/Tie28, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/Sebsun93, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Noticed maybe a small bug. I selected only Vue in main library and no other options and in App.vue it uses &lt;script lang="ts"&gt; Whille the other .vue file uses &lt;script lang="js"&gt; &amp;#x200B;
adding magic to redux to simplify consts - actions - reducers to a more robust code. saves dozens of lines and bad practices. [https://github.com/welldone-software/redux-toolbelt](https://github.com/welldone-software/redux-toolbelt)
There are no behavioral differences; it is purely syntactic preference. 
👍 the script seems pretty useful 
THE FUTURE IS PLAN 9
THE FUTURE IS PLAN 9
Having the game logic in the backend makes sense from a security point of view, while the drawing functions not so much (will you send the client every rendered frame?). For performance purposes, you should keep the drawing functions in the frontend, and pass the state from the backend to the frontend to be drawn. Depending on the game's nature, this too can cause noticeable lag, if it's anything with more than 0.5 fps. What you could get away with is duplicate the game logic in both backend and frontend, but only trust the backend when it comes to the results. That is, send inputs to the backend, but in the meanwhile interpret those inputs as if the source of truth is in the frontend. When you get the response from the backend, adjust the state in the frontend to match that. That way you keep a smooth experience, for most of the time, and if you do it right, only cheaters would notice the discrepancies.
THE FUTURE IS PLAN 9
Posts get auto-tagged with "help" it seems, and you can't remove the tag. LOUD NOISES it is, then.
Posts get auto-tagged with "help" it seems, and you can't remove the tag. LOUD NOISES it is, then.
THE FUTURE IS PLAN 9
I've been doing my own research and [Socket.io](https://Socket.io) seems to be the main solution. I'm holding out to hear other methods and surprised there isn't more of a variety readily available 
Having the game logic in the backend makes sense from a security point of view, while the drawing functions not so much (will you send the client every rendered frame?). For performance purposes, you should keep the drawing functions in the frontend, and pass the state from the backend to the frontend to be drawn. Depending on the game's nature, this too can cause noticeable lag, if it's anything with more than 0.5 fps. What you could get away with is duplicate the game logic in both backend and frontend, but only trust the backend when it comes to the results. That is, send inputs to the backend, but in the meanwhile interpret those inputs as if the source of truth is in the frontend. When you get the response from the backend, adjust the state in the frontend to match that. That way you keep a smooth experience, for most of the time, and if you do it right, only cheaters would notice the discrepancies.
Interesting. Well I’m running a rails Postgres back end and I am not too familiar with it so I don’t know how to run the query. 
It was only a matter of time before someone implemented the blink tag in react
Just the one, of course
Just the one, of course
there's far more than just 2 forms. (function () {}()); // has its own "this" scope (function () {})(); // has its own "this" scope (function () {}.call(this)); // has outer "this" scope (function () {}).call(this); // has outer "this" scope (function () {}.apply(this)); // has outer "this" scope (function () {}).apply(this); // has outer "this" scope (() =&gt; {})(); // has outer "this" scope (() =&gt; {}()); // has outer "this" scope &amp;#x200B;
I always use sCU because PureComponent is way more difficult to target. It's much simpler (and more performant) to just compare one or two props manually with sCU.
The april (.04) version, to clarify. EG: 18.10 is even, but not LTS. 18.04 is the next LTS after 16.04 (and the next one will be 20.04).
You can delete all passwords using the "Clear Browser History" feature: https://imgur.com/2X8zEpP
You can delete all passwords using the "Clear Browser History" feature: https://imgur.com/2X8zEpP
You can delete all passwords using the "Clear Browser History" feature: [Screenshot of feature](https://imgur.com/2X8zEpP)
You can delete all passwords using the "Clear Browser History" feature: [Screenshot of feature](https://imgur.com/2X8zEpP)
You can delete all passwords using the "Clear Browser History" feature: [Screenshot of feature](https://imgur.com/2X8zEpP)
I didn't insinuate that it does. Odd numbers have a lifespan of 6 months. Period. They are EOL and no longer receive any patches after that. So, let's say you deploy a new production app in March with v11.0.3 or whatever. Everything is running smooth. v12 is releases in June. You don't deploy an upgrade to your Node version for whatever reason, be it project prioritization, or simply that the service is one of a few dozen your team manages and you just don't roll out major version updates the second they are available because that shit is time consuming to test across your dozens of services. Then in August a critical security bug is discovered in Node 10+ that affects your deployed service(s). Node 10 receives a patch, Node 12 receives a patch. Node 11 doesn't, because it's EOL. Now your team is scrambling because they can't just pull in the latest patch version, knowing that it's a safe update. They must update to a completely different major version release and test for breaking changes across any services utilizing v11. The first time it happens, you will swear off odd number releases for forever. Considering there's only a 6 month window where odd number releases are supported, it's just safer to wait until the next version with LTS. 
I didn't insinuate that it does. Odd numbers have a lifespan of 6 months. Period. They are EOL and no longer receive any patches after that. So, let's say you deploy a new production app in March with v11.0.3 or whatever. Everything is running smooth. v12 releases in June. You don't deploy an upgrade to your Node version for whatever reason, be it project prioritization, or simply that the service is one of a few dozen your team manages and you just don't roll out major version updates the second they are available because that shit is time consuming to test across your dozens of services. Then in August a critical security bug is discovered in Node 10+ that affects your deployed service(s). Node 10 receives a patch, Node 12 receives a patch. Node 11 doesn't, because it's EOL. Now your team is scrambling because they can't just pull in the latest patch version, knowing that it's a safe update. They must update to a completely different major version release and test for breaking changes across any services utilizing v11. The first time it happens, you will swear off odd number releases for anything going to production. Considering there's only a 6 month window where odd number releases are supported, it's just safer to wait until the next version with LTS. 
When you think about it, Suspense is just a facilitator for async templating.
The april (.04) version, to clarify. EG: 18.10 is even, but not LTS. 18.04 is the next LTS after 16.04 (and the next one will be 20.04).
check out WebRTC and there are some other implementations that use decentralized systems like the torrent network
Personally I would not recommend socket.io as its an external library. Just use native Websockets. Either way, sockets are the solution to your problem
If you can update from 12 to 12.1, you can probably update from 11.0.3 to 12.1. Same amount of testing involved either way.
Websockets, WebRTC and straight HTTP requests. The former is the easiest, the latter won't work when latency is important. WebRTC is the best for latency, but IE/Edge don't support it well enough (I don't know whether you care about them).
...and here a possible i18n framework ➡️ https://www.reddit.com/r/Frontend/comments/9r171h/awesome_to_see_first_i18n_library_for_omi_omii18n/
Building Front End apps can usually rely on very recent node.js versions. For production node.js app, there are setups where it's possible to use latest major version (I'm not talking about a x.0.0). Depends how much reliability you need and how frequently you can release &amp; deploy. Having latest features &amp; performance has been really enjoyable for some versions. 9.x was pretty stable. I don't remember specific issues with 7 and before 7 well it has been bumpy :)
This is like Mallett's mallet.
Plenty more where they came from (async function () {}()); (function* () {}()).next(); !function () {}(); void function () {}(); typeof function () {}(); +function () {}(); -function () {}``; new function () {}; new class { constructor () {} }; ({ get _ () {} })._; [...{ *[Symbol.iterator] () {} }]; ...
thats kinda what im trying to get at...why do they both work if the semantics are different...or for that much like /u/HipHopHuman say is theres more....what "allows" these to happen...just the code a
LTS provides stable APIs and security updates. I'm excited for 10.x to go LTS so I can upgrade to some cleaner APIs around processes. 8.x will never have the cleaner APIs but it will get bug and security fixes for a while.
In a lot of cases you are probably right, but the actual wording of your comment is 100% wrong. [https://semver.org/](https://semver.org/) &amp;#x200B; 12 to 12.1 = NO breaking change 11.X to 12.X = Breaking Change
And Node is pretty good at following semver.
For instance, `(function foo(){ .. })()` the first enclosing ( ) pair makes the function an expression, and the second () executes the function. And in the second, `(function(){ .. }())`the invoking () pair is moved to the inside of the outer ( ) wrapping pair. I get that they both work the same...but even bother to allow for two different ways. are the mechanisms the same? whats the reason for why they are the same. Just curious. 
IIFE is just a pattern, not a language feature. It's something people do using the language rather than something the language offers to people to do. As such, there is no official syntax for it. For an IIFE to work, it needs to be done with a function expression. Function declarations can't be called immediately. Thats a rule of their syntax. Function expressions, however, can. Funny thing with function declarations in JavaScript is if you put them in the context of another statement or expression (not counting function bodies), they become expressions. This is what the parens in the IIFE syntax is doing - allowing the function to be treated as an expression and not a declaration. In the end, the parens don't do anything else, and outside the parens, the expression resolves to the function inside, which is why you can call the function with the calling parens (`()`) either within or outside of the wrapping parens. It doesn't matter. You also don't need to use parens to enforce the expression. I have some examples below that don't use parens and instead use operators like not (`!`) or addition (`+`) that do the same thing, and can in fact, save you a character of typing (though would affect the return value if your IIFE is returning anything of ... _value_). There are also different kinds of functions used in those examples, but generally IIFEs are standard functions, often anonymous, or arrow functions that are wrapped in parens and called with some calling parens either inside or out. I don't think anyone cares enough to prefer either way there. One thing to be careful of if using parens and you're not one much for semicolons, is that an expression before your IIFE could see the IIFE as a function call. // OK, first in script (() =&gt; {})(); // Uh oh! call's console.log! console.log (() =&gt; {})(); // OK console.log; // &lt;- semicolon prevents next line calling this one (() =&gt; {})();
People have encoded most of the best practices into linters, programs that analyze the code for form related problems, ESlint is both the most complete and popular of JS linters. Furthermore, it is very customizable, because there are few things as certain as exceptions.
I'm trying to understand node's "net" documentation but it's not making much sense to me. how did you learn how to use it? do you know a good starting point?
You do realize that not every developer uses VSCode, right?
I see your point, however Pythonic means doing something in more idiomatic fashion per example using list comprehensions or lambda functions. Lint doesn't help you write more Pythonic code
You'll need to know these in case you ever meet one that does.
I think the essential knowledge of text editors for developer is how to quit vim. Anything else is optional. But I have to agree, that you should know your tools and how to use them efficiently. 
Frontend: check the example tab, super easy to use https://developer.mozilla.org/en-US/docs/Web/API/WebSocket Backend: package is called `ws` Simple boilerplate: `const WebSocket = require('ws') const wss = new WebSocket.Server({ port: 8080 }) wss.on('connection', ws =&gt; { ws.on('message', message =&gt; { console.log(`Received message =&gt; ${message}`) }) ws.send('ho!') })` _Edit:_ sorry for my terrible formatting, I'm on my phone, if you need help with it pm me :)
Oh boy a thing we can't use realistically for another 5 years.
In any language, the behavior comes down to how the lexer of the compiler breaks down the tokens for the parser to then generate a syntax tree. This can get complicated, but you can picture this process as simply an iteration over the entire expression with the callback being a huge switch-case statement that determines what to do with that particular token based on what has come before it and what comes after it. The goal of this is to reduce the high-level language into a simple set of instructions for the machine to execute. If you want to see the result of this process, there is a cool online tool I like to refer to called [AST Explorer](https://astexplorer.net). If you punch these two statements (function(){})(); (function(){}()); into the tool, you will see that, as far as the syntax tree is concerned, these two statements are equivalent. They are both identified as a `CallExpression` (an invocation), called by a `FunctionExpression` (the function definition). It is purely a consequence of how the AST is generated. This is as far as my knowledge goes. Whether or not this behavior was intended, you would have to ask the language designers or the compiler developers. :)
Yeah you’ve hit on something people realize too late - keeping docs lang agnostic is smart and markdown is the way to go. +1 for docsource.io - it has saved me and our team a lot of time. Reminds me of slack UX, high ease of use and navigation 
Hey thanks for your comment. I do realize that. However, forget about the shortcuts for a minute as the blog post is more than that. The essence of the post is to make people aware of such features that their code editor provides out of the box. 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Great looking code, well done!
Not every developer uses a mac. There's no command on my keyboard 😑
[Link](https://github.com/jpasholk/JSDrumKit/blob/master/index.html) to code. :)
the key down should work fine, regular events work fine on touch screen. a touch still triggers on click, etc. problem is, the keyboard only opens when an input is highlighted. you could try creating an invisible input that is autodocused which should trigger the keyboard to come up. or you could put actual instrument images o the page and go with an on click instead of on key down.
Hm, yeah I didn’t want it to use the keyboard on mobile as that might be a bit janky - but I’ll look into that as well for fun. What did you mean by ‘actual instrument images’ Like pics of the drums themselves? The effect id like to go for is to have the ‘buttons’ on mobile be functional. [Link](https://jpasholk.com/JSDrumKit/) to working site. View on mobile to see the buttons and not ‘keys’. Sorry, I’m a super noob with this stuff too so I’ll have more questions most likely. :/
For every new browser feature, there's a comment like this. What's your point? Discourage new features?
If wild equals bad, I agree. Best: const isPrime = num =&gt; { for(let i = 2, s = Math.sqrt(num); i &lt;= s; i++) if(num % i === 0) return false; return num !== 1 &amp;&amp; num !== 0; } Wild: const isPrime = n =&gt; ![...Array(n).keys()].slice(2).map(i =&gt; !(n%i)).includes(true) &amp;&amp; ![0,1].includes(n); And both of the above perform way better than rhe regexp.
Maybe you should ask this question in a Swift or iOS forum, since it's not about JavaScript per se.
Are you sure about that? https://github.com/jamespamplin/eslint-config-idiomatic
Right. We can “not use it for five years” or we can not use it for... ever. 
Reading this on my phone so it's tough to read, but I'll give my two cents. I think what might be happening is that you are adding event listeners to the buttons after the datatable instance is initialized but this only effects the buttons that are present at that time. When you page or change the number of items viewed, the datatable is redrawn but not reinitialized. Therefore the new buttons that are rendered didn't get the event listeners attached to them. You can probably fix it by moving the code from initComplete to drawCallback so it runs after each draw.
I'm all for new features. I'm just annoyed that IE11 is still a standard which means this won't get adopted into many (or any) frameworks for at least a few years.
&gt; However, forget about the shortcuts for a minute as the blog post is more than that. &gt; Top 10 VS Code Shortcuts what
I wonder if we'll be able to use `Suspense`/`lazy` with react-native... that would be a huge deal for me.
So... this one goes to 11? 
Assuming the order is always `[meat, side, topping]` function mostFrequent(arr) { var obj = {}, mostFreq = 0, result = []; arr.forEach(ea =&gt; { if (!obj[ea]) { obj[ea] = 1; } else { obj[ea]++; } if (obj[ea] &gt; mostFreq) { mostFreq = obj[ea]; result = [ea]; } else if (obj[ea] === mostFreq) { result.push(ea); } }); return result; } data .reduce((acc, { meals }) =&gt; [ [...(acc.meat || []), meals[0]], [...(acc.side || []), meals[1]], [...(acc.topping || []), meals[2]], ], {}) .map(set =&gt; mostFrequent(set));
I believe what you want is called [Mousetrap](https://craig.is/killing/mice). Despite the name, it is actually a keyboard library :P
&gt; Best: Good, maybe. Far from best. 
&gt; (() =&gt; {}()); // has outer "this" scope That's a syntax error. Only the "dog balls" version with the invoking parens at the end works with arrow functions.
Holy shit you're Sarah Drasner. You are amazing - thank you for your contributions to the Vue community!
Have you played with Stencil.js?
Did any value come out of gdpr? It felt like a farce
need a way to filter by remote ok
I plan on adding it in eventually, this was something I created in an afternoon as an MVP. I can shoot you a message when I implement that if you'd like!
No kidding! I must have been looking in the wrong areas then. I'm qualified enough that I shouldn't have struggled for a couple years before finding one, but your comment definitely spread some light on the situation. I'm happy with the job I'm in now but I thought it might be cool to make a platform that doesn't have all of the spam of other job search platforms.
just repost it. i'll see it. you can also post your remote positions to /r/remotejs
Here's a sneak peek of /r/remotejs using the [top posts](https://np.reddit.com/r/remotejs/top/?sort=top&amp;t=year) of the year! \#1: [\[HIRING\] \[REMOTE\] Javascript developer](https://i.redd.it/dhia72d4ohd11.jpg) | [0 comments](https://np.reddit.com/r/remotejs/comments/93p9cb/hiring_remote_javascript_developer/) \#2: [RemotelyJS - remote javascript jobs](http://www.remotelyjs.com/) | [0 comments](https://np.reddit.com/r/remotejs/comments/8oj69b/remotelyjs_remote_javascript_jobs/) \#3: [Get remote front-end freelance leads delivered to your inbox twice a week for free.](https://remoteleads.io/) | [0 comments](https://np.reddit.com/r/remotejs/comments/7ku3oz/get_remote_frontend_freelance_leads_delivered_to/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Protip - look into the yachting industry - none of them are posting jobs, but all of them are looking for capable developers, Florida is full of rich idiots who need web pages, but you need to use non-traditional means of finding those people.
Most work by replacing command with ctrl 
IE11 is not a standard. Only shit companies (yes some major companies are shit) support IE. Nobody should and IMO it doesn't have any reason to be.
I can’t tell you how many times I’ve gone to copy a line up or down and accidentally flipped my screen orientation instead 😂 
This is great news. The webcomponentjs polyfill has caused a few headaches on my team (composed event propagation issues, timing bugs), I'll be happy to have one less browser to worry about. 
I dunno, it's the responsibility of the developer to have pollyfills in place for the things they want to use. &amp;#x200B; [https://github.com/webcomponents/webcomponentsjs](https://github.com/webcomponents/webcomponentsjs) &amp;#x200B; A polyfill for Shadow Dom and web components already exists.
Don't ever underestimate your networking opportunities, more than half the Brazilians I met there were developers, the little old Mexican woman I met was an engineer, the funniest woman I've ever seen perform comedy was a Chinese woman who likely had a data scientist job, the friendly Chinese guy I met at toastmasters was a senior engineer, I met a crazy intelligent Chinese data scientist who English was her 5th language and she was then looking for a Spanish instructor as well as several politicians and lawyers, absolutely take advantage of how much art, culture, social and networking advantages you have in front of you, because the other side of the coin is living in Boofu, TN surrounded by.... - a whole lot less culture than that...
Everything you mention (aside from node-gyp) isnt all that complicated...
I wrote something similar for removing my Google account from over 130+ Google Tag Manager Containers. 
Yes. That is the purpose of the token. It is safe from tampering, which you can verify on your server with the secret used to generate it.
Visual yes. No visual.
Have you seen many that really wanted to?
It's all covered by licenses. You can't just take documentation and resell it all willy nilly. That's how you get sued into the ground.
This is too weird. I ran into this just yesterday and thought “this is dumb that I have to remove these all individually”, then I thought “how will I script this”, then I thought, “no, don’t, spend 3 min and do it manually”. I’m so glad you did it haha. 
drcmda answered this pretty well. I understand their initial motivation, but that's not really what drives me. My desire primarily was to leverage someone else's work on things like Date picker, Google Material Design inputs and other controls. I have control over my page and can make sure it plays reasonably nice with whatever component I want it to. I just want reusable widgets, just like we used to have with VBX, OCX, COM, ActiveX and similar types of technologies. That's the basic promise of WebComponents, but it's just too complicated. Maybe it will be there someday... maybe, but I doubt it. The fact that it's still a pain to pass non-strings as state to the elements is especially irksome. (Yes, I know the article points out that you can use properties, but the divergence of attributes and properties is yet another one of the weaknesses of the web platform that we should have been able to move past by now, and most frameworks have)
No, that doesn't help me. I write web applications. I'm not interested in publishing Web components, I'm interested in consuming other peoples useful web components.
C'mon man, it's more than just a vapid fluff piece about OPs favorite editor, tons of developers don't know their editor can copy and paste, or toggle comments without pressing "leftleftleftleftleftleftdeletedelete". It's valuable learning material to be told your editor can not only undo, but also redo! /s
I'm legit scared of how much I hate render prop based APIs. I simply don't understand how anyone can see them and think this is a good pattern.
You're not selling the documentation.
Like most software, Node doesn't follow semver.
When you say app you do mean web app right? You looked at netlify? 
Wow, that code looks 500% more transparent to me. When you write it out like that you see, for instance, that the animations aren't executed in the regular React render/props/state execution (and really, animations shouldn't run on prop/state changes, at least until sebmarkbage figures out how to "fiber" everything together in a coherent API). Additionally, when you start adding multiple render-prop based components together, you get a ratking of anonymous functions which make your code starts to look like OG node's heavily nested callback hell (I know there are libraries which manage this but it's still ugly as hell IMO). I'd much rather compose HOCs (you can usually use lodash.flowRight) than use render props.
&gt; At least until sebmarkbage figures out how to "fiber" everything together into a coherent API Todays react-conf, let's hope he did :-P
Super interesting, thanks!
&gt; good luck repeat-solving problems &lt;s&gt;already&lt;/s&gt; *incompetently* &lt;s&gt;solved&lt;/s&gt; *attempted* by &lt;s&gt;other devs&lt;/s&gt; *inept hacks* *Almost all* programmers are bozos. That's why you can't find any good ones. Piles and piles of broken bozo code isn't really a great idea. It's just endless bugs and babysitting. 
Well, here is your explanation, this one short file is all that this is: https://github.com/wahengchang/js-meter/blob/master/index.js
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [wahengchang/js-meter/.../**index.js** (master → f44ad98)](https://github.com/wahengchang/js-meter/blob/f44ad9815da580e1a9b0bebeb56f68505ca91629/index.js) ---- 
Hey normally you can replace the Command Key with the Control key on Windows. I will add a note on the blog post.
How does this compare to GSAP?
For a new major release number there are not a lot of changes. Hmm.
As an aside, I'm pretty sure Maven has range support. The biggest reason is probably that `npm install` uses ranges by default. 
yep... the polyfill has been beneath great 
What is a half-width string? 
I assume you mean half width characters to full width? I believe that you can do this by subtracting 0x20 from their character code, then adding 0xff00 You can do this by splitting the string at every character, then using charCodeAt(0) for each item, and String.fromCharCode to re-encode to a string. I have tried it, and it does work, but it's good to attempt things yourself.
You're forgetting the most important command, alt-f4, to close that shitty editor lmao
Just curious bc im not advanced or anything, is there a reason you’re using var over let or const? 
Just like GSAP this can animate in the background using a requestAnimationFrame-loop, which is unusual for react-animation libs. The main difference is that it is declarative, while GSAP is fully imperative. For UI animation doing it imperatively is very hard, because you're constantly chasing behind loose-end animation-handles, stopping this, starting that, orchestration and chaining. Declarative animation simply reflects state, animation becomes as easy everything else you do in React: this.state.show says "true", sidebar slides in, this.state.show says "false", sidebar moves back. GSAP on the other hand is very strong for gaming-type animations, where you tell stories with moving svg's or whatever. You can do that as well in react-spring since it can script, but GSAP is far more powerful for things like that.
I'd say: use `Array.prototype.reduce()`. But it's hard to tell which index of the outer array corresponds to which `userid`. You also need to keep track of that while grouping your objects. That sounds like a pretty big reducer. Personally I'd create an object like this: { 9: [{ eid: 1, userid: 9 }], 2: [{ eid: 2, userid: 2 }, { eid: 3: userid: 2 }] } This would be a lot easier to create - with a for loop or `Array.prototype.forEach()` ...or again `.reduce()`. Technically you loop over your items and push it into the array that corresponds to the current `userid`. If there's no array yet, create it first. Does this help you or do you need more details?
Of course.
Github supports webhooks. You can write a simple process (I've done this in PHP before, because it was just one script I could execute, but any language is possible) that pulls in a repo, and does whatever you want with it by executing shell commands. I use GitLab myself, so I use GitLab CI (integrated), but for Github you might want to use Travis CI to handle these deployments for you
[https://stackoverflow.com/a/40774906](https://stackoverflow.com/a/40774906) Found this and I was able to do as u/alinnert said
Thanks mate
Yep, exactly that. I just don't know why one would create an object with `Object.create(null)` instead of `{}`. I know the difference but I don't know a practical use. But whatever...
I'm not familiar with GCF but do you not need to call `res.send()` like in the hello world example to actually send the response?
There are 3 forms of IIFE's :) &amp;#x200B; !function() {...}() &amp;#x200B;
I did the same to remove all facebook liked pages using puppeteer
It has big bold text that says how to do it for Windows..
check the network tab in chrome or firefox to see if it goes through correctly, and check if you can find the headers 
Instead of call `res.send()`, Im using `res.status(200).json({ message: 'Data stored', id: req.body.id });` which should give a response for the request. It seems that Im only getting CORS issue when using the `admin.database()` and returning the response when the promise is fulfilled. I'm still confusing why Im getting CORS, I'm also new to GCF.
I think the above commenter is right, you need to call `res.set('Access-Control-Allow-Origin', '*');` inside the storePostData function also. They're independent calls, and each needs its own header set. &amp;#x200B;
Think your forgot the /sarcasm tag.
we are shipping webcomponents to ie11. it’s not awesome and has a few gotchas but we can at least talk around them and continue to move forward.
Not everyone is a windows or mac user. Linux for the win!
Ah. It didn't show me that comment. Sorry guys. I goofed.
Np. Apologies for undue snark.
&gt; by subtracting 0x20 from their character code, then adding 0xff00 [with some exceptions](https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms#In_Unicode)
You are right, in the first (broken) example I use a cors middleware that should automatically add the headers, I have also tried to add it manually but no lucky. Here is the docs for the cors package: [https://www.npmjs.com/package/cors](https://www.npmjs.com/package/cors). Im trying to troubleshoot this and see where is the issue.
Someone mentions React Suspense
I ran into this too a few days ago! lol 
Think that comes with being a German :D
Out of topic question: are lamda functions really considered 'pythonic' by Python people? Python support for lamdbas is pretty meh, the expression is quite lengthy and max. one line, both of which really limit the usage in favor of regular functions.
sounds like we're really moving forward now :D
localStorage is freely accessible. You do not want sensitive data like passwords on it. You do not want any information in it that the user wouldn't want other people to have access to. localStorage isn't modifiable by the server. If you have session data in localStorage, you cannot set an expiry for it. The _front end_ has to log the user out. This is not ideal for situations where the user cannot access your website to receive that front end. If the user loses Internet connection and does not regain it before leaving the device, the next user of the device will have access to their session. A cookie on the other hand can be set to expire when it is created, and it can be destroyed with any server communication, whether or not a new front end is retrieved. localStorage is freely modifiable. It cannot be trusted, like your own back end database. The data you retrieve from it could have come from anywhere or anyone. localStorage is not necessarily permanent. If the user expects their data to still exist when they change devices, they will have a negative experience when they find out their data only existed in localStorage.
Pretty sure all browsers encrypt when saving to disk now. Started to Google, but didn't have enough time to find anything. 
&gt; localStorage is freely modifiable. It cannot be trusted This is the most important. If you rely on localStorage to, say, get the full real user name, keep in mind that the user can modify this data and put someone else's name, for example. If you simply trust the data, you have a **serious** security flaw.
I love his accent
It appears basically to just be a result of JS Gcing
I think the common thread here is overly-clingy companies, that don't want to give you easy tools to manage your data.
I will be messaging you on [**2018-10-27 12:58:49 UTC**](http://www.wolframalpha.com/input/?i=2018-10-27 12:58:49 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/9r9owd/andrew_meads_vs_maximilian_schwarzmullers_node/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/9r9owd/andrew_meads_vs_maximilian_schwarzmullers_node/]%0A%0ARemindMe! 2 day ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
To my knowledge, Max's NodeJS course was JUST released, so I can't weigh in on that specifically. I also haven't tried Andrew Mead's courses, so I can't say whether he's better or worse. What I can say is that I've purchased 3 of Max's courses and completed them: The MEAN stack guide, the Angular course, and the React course. After each project, I was able to start building with the information I gained. The projects you create ultimately serve as a great reference. I will continue to use Max for further courses because I have been thoroughly impressed so far. My only complaint with Max is that his naming conventions can be a bit wonky in my opinion. During his React course, I found it hard to follow at points because of how he chose to name variables within his state. Even with that minor complaint, I would continue using his courses. I finished his React course 3 days ago and I've already got a React app up and running!
From what I see you have the cors setup only on the hello world function \- it means that this endpoint will have the cors header whereas the other (the one that errors) doesn't have it I think you would need to change the way you're exporting the endpoints a bit if you want to have the preflight added to everyfunction autmatically, or simply make a wrapper function that will pass the enhanced request to the actual function like so: function enableCors(req, res,next) { res.set('Access-Control-Allow-Origin', 'r/https://mydomain.com'); res.set('Access-Control-Allow-Credentials', 'true'); next(req,res) }
I would skip udemy and go for the NodeJS course from Frontend Masters. 
Better to use session storage in this case 
Both courses are currently $12, lol, buy them both. I'm a big fan of Max.
What do you want to do actually? **First case:** Persist data about the user between two sessions? If so, don't use localStorage as "single source of truth" principle would not apply anymore. The server is the only one who can offer information about the user. Long story short: have a look over JWT. Basically: generate a token when the user logs in and use that token to re-authenticate while the token is valid. The token is stored in cookies or any other place you would like. When the user refreshes the page, send it to API for verification (validity, correctness etc.) and authenticate the user without username/password. **Second case:** If you want to store that information during the same session and read it in different parts of the application, then localStorage is an extremely bad thing (starting with performance issues - JSON.parse/JSON.stringify - and going to security issues). The user should be a singleton through the entire app.
Nice, ty for this text, easy practical examples to show how to write faster code with less confusion 
No I just did I don't even know why
You are right about maven, thanks! ([https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html](https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html))
What about security concerns? I can imagine i should update only to versions which i am certain they are safe. Arent you afraid of compromised package would update itself before anybody could react?
I miss developing projects for the sake of expression. I saw a GIF on reddit many years back that really resonated with me. I created [I'm fine.](https://charlesstover.github.io/im-fine/) to recreate the GIF as a live web animation. It was a fun project, and I hope I have the opportunity and inspiration to start making these again, now that I have the benefit of GitHub's open source and Pages.
My personal favorite that's not included in the list is: &gt; If you have both an if and an else, the if should **not** contain a negative E.g. Don't do ``` if(!user.isActive){ console.log('inactive'); } else { }
Why would you break space to page down on your blog? Did you think that made it better?
Literally did this a few weeks ago, I had transitioned to a password manager but could not stand Chrome suggesting the existing password again and again. I tried without the interval first, Chrome did not like it!
Hes a great inshtructor tho :)) I've watched a couple of his courses, but I will always remember his pronunciation of some words that contain s I imagine someone going into his office and he saying "Please take a shit" :D :D :D it kills me every time
I kind of got to the issue, it seems that an error when executing `admin.database.ref()` and from there, there is a CORS error. However I can't test it right now because my free quota on Cloud Functions exceeded. =/ 
Yes, Im setting the `{origin: true}.` The 200 status for the error was only a testing I was doing. I guess I found the culprit of the issue after hours debugging. It seems that an error is happening when executing `admin.database.ref()` and from there, it throws a CORS error. However I can't test it right now because my free quota on Cloud Functions exceeded. =/ 
OK, I think I see the issue. I think the cors package you are using is middleware specific to the express server. So while the request / response objects in Google Cloud Functions look similar to those in express.js, I don't think they are the same. Therefore this package won't work. &amp;#x200B; There is another way though that you can easily configure the cors headers for all your functions, check out [this answer on SO](https://stackoverflow.com/a/45503426/1305841).
I feel the opposite; I'd rather have explicit if-else for that case, to make it explicit that only one of those statements will be executed.
I'm not that familiar with Frontend Masters, I see it's pricey though, and I can't find an intro Node course on their site.
Yeah, they both are definitely a steal at this price! I've actually thought of getting the other one at some point to fill some gaps that weren't explored in the first course, but I still want to choose one of them and go through the entire course before I do that.
I am using a custom scroll bar which probably is what "breaks the "space" key. 
Some good reasons for not having the explicit else were discussed in [this post](https://www.reddit.com/r/javascript/comments/9jw5iw/one_of_the_devs_that_does_code_review_for_my_code/?utm_term=54d0ed39-9f22-4572-81f1-b5318f928b8c&amp;utm_medium=search&amp;utm_source=reddit&amp;utm_name=javascript&amp;utm_content=2), but it's ultimately up to personal preference (/ team preference).
I appreciate the reply! He released this course just yesterday and there are literally no reviews yet. I'm sure the course will do very well though, he's has made a really good impression on me and I haven't even taken any full course of his :P It's great to hear you were able to put what he teaches to practice, the "sticking knowledge" is definitely a big point for me! I think both of them are probably very close in terms of "teaching level" so no course is "a loser" here. How does Max's style look when it comes to practice though? I've only taken Javascript course of Andrew's, he incorporates a lot of challenges in almost every video to have us work on the concepts explored in the video, and sometimes we have to do our own coding before he shows us anything, which is great. Anything similar in Max's style?
True, and I'll often eliminate the else and use the code like you have when it's possible.
This is kind of old but - I am working on a React project right now where upon creation, a component will make an api call and then perform a few operations with the response. Coming from an Angular background, it makes sense to me that I could just unsubscribe from the http request when the component is destroyed because I no longer care about the response and do not want to continue the promise chain. Is there a simple way to do that without turning to observables?
I read it and saw some good arguments, but most seemed to assume it was just about guard clauses, which I'm entirely for. But when having two outcomes on equal footing, I don't want one to look like the "default" when it isn't.
Exactly. By this logic, there are actually an infinite(probably not quite) number of iife syntaxes.
The compiler will optimize for this.
FrontEnd Masters isn't cheap because they provide top notch workshops from some of the industry's best developers. Also, I have heard LOTS of content providers talk really bad about Udemy as a platform and how they shaft their content creators. I don't have any examples of how bad it is, but I can't imagine the course creators getting much of a payout when the courses are ALWAYS $9-15 a pop. 
IMO `else` is equally a "default" the same way a guard clause can have one. If there are two "equally likely" branches of code, I pretty much always opt for a ternary that calls one func or another, or a guard clause.
If you use a map or object lookup, the key to performance is to create it once, outside the function where it is used. Don't create it inside the function every time it's called. This article links to \[another article\]([https://toddmotto.com/deprecating-the-switch-statement-for-object-literals/](https://toddmotto.com/deprecating-the-switch-statement-for-object-literals/)) that naively uses the wrong approach: function getDrink( type ) { var drinks = { 'coke': 'Coke', 'pepsi': 'Pepsi', 'lemonade': 'Lemonade', 'default': 'Default item' }; return 'The drink I chose was ' + ( drinks[type] || drinks['default'] );` } Don't do that! Instead do this: var drinks = { 'coke': 'Coke', 'pepsi': 'Pepsi', 'lemonade': 'Lemonade', 'default': 'Default item' }; function getDrink( type ) { return 'The drink I chose was ' + ( drinks[type] || drinks['default'] );` } This will be much faster, and likely faster than a switch statement when there are a large number of entries in the map/object. 
I don’t know anything about the technical details of using localStorage, but if you save anything locally you basically give the end users the ability to do anything they want with that data. For example, quora.com uses cookies to save how many questions you’ve looked at. If you try to read more than 1 without signing up, you’re asked to create an account. But this is easily bypassed by clearing the cookies.
O've even seen `user.isNotActive` :D
&gt; Shows you didn't lookup touchstart, or know what it's doing. I did look it up, but your right - I have no idea what it’s doing. Honestly I’m in way fucking over my head. &gt; You need to think of implementing events at the beginning of the project. That way you know you will get keyboard, clicks, and touch events. This will lead to much cleaner code and overall better implementation. I was hoping to learn a bit more about JavaScript through WesBos’s tutorials - however it looks like they’re just going to send me down the wrong path and write shitty code. This is pretty disheartening, but I’ll just try and move on to the next thing... &gt; I've already said before, but if you need any help I have a channel on my discord just for this. I didnt realize that there were any web development channels in your server - when i click on that link it takes me to a locked and read only channel named ‘vipdls’. 🤔 https://i.imgur.com/2NW76rc.jpg
Mutations are bad ! Ternary return is the real solution instead of that.
Thanks for the reply! I haven't worked with anything server-related yet, so saying "intro(ductory Node course" made sense since I'm looking for an anything to get me started with Node. I know it's just a Javascript runtime and generally what it's used for, but most back-end concepts and terminology are foreign to me. Now on to FM, first of all thanks for listing the courses that would be more relevant to me! I'll definitely take a look at them although I think I'll stick with Udemy for taking the first steps anyway, since it's already proven itself to me and is way cheaper (40 bucks a month currently would hurt). I do like the idea of moving on to FM eventually for some more advanced concepts.
Hello, once again sorry for the troubled code. This seems to have worked for the most part but for a few caveats being strange combinations makes it go wrong. For example: Everything on Page 1 works, from here everything on page 2 works as well, however if I go from page 2 back to 1 all buttons refuse to change color and text. If I increase the list limit from 10 to 25, all of the new loaded buttons work but the first 10 do not. Or sometimes all buttons simply refuse to work after a while. The function to build the tables is already evoked in a $(document).ready(function() code block.
I think someone's mentioned this before, but i don't plan to release anything for java, also don't keep tabs on what's going on in that eco system. I mean, this is literally a spring in react, wouldn't know how to name it more aptly. :-D
There’s also lodash groupBy which does exactly this
Well I would say that using them in certain cases makes their use "Pythonic" but yeah I think list comprehensions is a better example of something being Pythonic
[There it is](https://i.imgur.com/RG0BS1U.gif)
&gt; If thats just a random fluctuation then is the heap reading even useful?
Yeah I read it before I posted. My problem is with the "article" its literally just the example given in the README
Npm ci. There is nothing dirty using lock to ensure same build. It's one of it's purposes. And it's common practice. Not just js, but other languages too. Npm was a bit slow with it's lock implemention. Otherwise we would probably not have yarn. 
The low effort article is consistent with the package it describes though...
You can always ask in [https://www.reddit.com/r/learnjavascript/](https://www.reddit.com/r/learnjavascript/)
Yeah, I sort of feel bad and good at the same time about using Udemy. These guys really produce a lot of content for it to be sold for \~10-15$/piece, but it really gives a lot of value to students at low risk. I also heard that Udemy itself are pretty shady.Still, instructors on Udemy get 97% of the course price if the student enrolls with their coupon, although I think the price goes down to 10&lt;local currency&gt;, otherwise they get 50% Personally, I'd love to pay 10-15 bucks a month instead to guys like Max or Andrew for access to their courses, instead of one-time payments. For whatever reason they chose to put everything on Udemy though.
http://i.imgur.com/mypHG.gif
I agree, it is their choice to put it up on udemy. There are some great courses on there and I have learned a lot from them. Another great course creator is Stephen Grider. He has quite a few courses on different topics. 
&gt; Multiple returns are tricky because it hurts the ability to cleanly predict the flow of code It doesn't, really. Yes, it does help you to answer the question *where* you return the result, but it still doesn't help you with *what* you return. A very important feature of multiple returns is that it **stops** further code execution. &gt; the lack {} is asking for a future bug No, not really. Maybe it takes some getting used to, but it's super common (probably even the standard way to write short if statements). I would guess that you come from a more "classic" CS background, hence your style preference. &gt; being explicit is better than being clever Absolutely agree with this statement, but I just don't see anything implicit in my code above. Again, maybe I'm just used to it.
I agree with you. I clicked on thinking it was related to the Spring Framework
how about throwing exceptions instead of conditionals whenever possible? is that not common in JS?
Thinking more on the issue since posting I would really just use a ternary as pointed out to someone else who responded to me. My problem in recent history has been with having two different modes of writing code. What I prefer vs an "enterprise" mode. The example I provided and the suggestion for including {}s were with the intention of building something I know another developer probably won't mess up or misinterpret. Maybe I've just had bad luck with colleagues but things like ternaries and if statements without {}s have introduced confusion and bugs. My normal mode of operation is. If I asked one of the less js savvy developers (generally new or junior devs) to introduce an additional status would they be comfortable and how would they do it. I think your implementation allows for it just fine and the mutation in mine could cause issue just as easily. What Im ultimately settling on thinking about this further is that it really depends on who you know is going to read and contribute to your code. 
Max's course includes SQL AND noSQL and also goes into graphQL. You could also just do Max's course after Andrew's, it looks like Max's course covers more stuff, but between the two I think Andrew Mead is the better instructor. 
Good job. Where are you storing data? 
Hi /u/nitty727, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/jiendang, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Not in the example. But in something where you’re actually consuming heap you’ll see change above the noise.
for all the shit flash got, it sure was nice to have a guarantee across all browsers that your 1 single all encompassing file containing graphics, fonts, video, audio would work exactly the same.
Not all data requires safety. Giving blanket advice to people assuming their situation is the same as your's is usually not the best way to give advice.
**Third case:** OP wants to persist non-sensitive data, but doesn't want to use localStorage as the "single source of truth": OP should use localStorage. And what is with "starting with performance issues - JSON.parse/JSON.stringify"? No matter where you store data, you're going to need to serialize it and then deserialize it when you retrieve it. Doesn't matter if you store it on the server, in a cookie, or wherever: stored data requires serialization (and later deserialization).
You're someone who understands the pain.
 if (user.isDisabled) { return; } ... do something ... 
Happy to help! On the plus side, it looks like Udemy offers a 30-day money back guarantee, so you can't really make a wrong choice trying one or the other!
proof for this ? It seems like a Map invocation has some memory allocation overhead compared to just Switch(object). 
I keep seeing Stephen's name "up there" whenever there are talks about the best Udemy instructors. Any specific course of his you'd recommend me to take? :)
I bought most of his React courses to keep up with how React is changing and how to use it differently. It depends on what you want to learn, I haven't come across a bad course from him.
Neat! It’s good to see them addressing the inherent problems with class-based architecture.
FWIW Most tutorials will not give you an "advanced" tutorial. Most will give you the basics which leads to simple code, not really "shitty" code. For beginners it's nice, but later down the road you will find things that seem to be a better way to go. For example if you look at a touchstart example it won't teach you how to make a library to handle touch holds. &amp;#x200B; The refactoring I did isn't the best code, but it's contained, readable, and easier to extend. Example if you wanted to add a new sound. You just add an object to the keys, the code takes care of the making of elements. This will lead to less bugs as you don't repeat yourself multiple times. Also if this was to go in say an application you could convert the keys object into json and push updates to the drumKit ota. Meaning you would only need to update that json file to add new sounds. &amp;#x200B; It's also contained in a drumKit object so only one global variable. This helps by not filling up the global space. If this wasn't a simple application then this is almost a must imo. Some of the huge projects I have if I didn't do this separation things would become a mess very quick. &amp;#x200B; The channel is private, just send a message on the general chat and I will give you permissions. &amp;#x200B;
Is this only possible on certain units? I have a Play:1 and I'm getting the error "NOT CAPABLE"
If you just need it for the session, use sessionStorage which gets cleared when the page session ends.
What a strange way to create state for a component. It is really messing with how my brain handles React components right now. I can definitely see how it'd be useful though. Reduces a lot HOC boilerplate into simple function calls. Very strange. Excited to play around with it.
except it is true. The context of op's post refers to Flash's dominance in the non mobile era. OF course flash's performance on mobile browsers was abysmal... but the few it did run on looked and functioned exactly like the desktop.... and maybe you do, but performance on Linux is not considered a viable measure of a technology's success. As of Jan 2018, Desktop Linux is 0.66% you can nit pick specific words all you want but you know exactly what I'm talking about. Especially in the context off of a /javascript subreddit where most people understand the many many many many individual moving parts of a javascript application.
* Lock the versions of the older packages in your package.json * Make sure every developer does PRs * If they change a previously locked version close their PR immediately 
In a ideal world, design your system so that the name is `isEnabled` instead. For object properties that follow some legacy poorly designed schema this tends to be hard, but this kind of double negatives is also common for things like `if (!shouldHideForMobile)` and those are typically entirely within your control. Early returns are a good option as u/n0xx_is_irish suggested. If you absolutely must use a double negative for some bizarre reason, at least do this: const isEnabled = !user.isDisabled if (isEnabled) {...}
#2: If you have more than 2 exit points from a function (early exit for error conditions, and exit at the bottom), you're turning your code rapidly to un-followability. On that point, follow the wisdom of the ancients: throw at the top, return at the bottom. Yeah, you may need to violate that occasionally, but if you need more than that, a lot, then your functions are too big, and/or are not easily maintainable. #3: Follow that, and stop reading when you get to "use lodash". Don't use an external library that contains a LOT of stuff to avoid using a language feature. #4: Pretty much everything that runs Javascript at this point, has millions of users, many of whom complain about performance issues. Constantly creating and destroying objects, maps, and arrays, to run comparisons, is horrible on performance. If you're going to do it that way, make sure that the object creation is only done at the module level, and therefore the performance cost is static, once, upon creation. Do NOT do it inside functions. This goes for arrays and maps and pretty much everything else. The more temp data you create inside a function, the worse your whatever you're writing is going to perform, overall. Keep that in mind -- the garbage collector is always your enemy. add-on: Use ternaries. 
The more time you spend in the business, you'll come to realize that the users are all disabled. /s ;-) 
Never rely on an optimizer to do something correctly. 
Thank you. I used AsyncStorage to store the data locally.
That’s why I provided a link on the article, if you’d take a look on it you would have seen that it describes what’s exactly are suitable for local storage and what is not. 
I'm interested to know more about #4. Could you provide more info? What do you mean by making sure to do the object creation at module level and not in functions? Do you know of an article that talks about this more in depth? Would love to read up on it.
&gt; Follow that, and stop reading when you get to "use lodash". Don't use an external library that contains a LOT of stuff to avoid using a language feature. Not sure what you mean here. The lodash get isn't about avoiding a language feature - it's about using it inelegantly. For example, if you're calling an API that returns a nested structure that could be null at any point, then const mainSiteData = _.get(data, 'allData.edges[0].node.name', ''); is a lot more elegant than checking each of those levels for null. 
This is really very strange. The thing I liked about having both class components and function components was that their purpose was clear to me. This blurs the lines significantly. So odd having these functions imported without passing them into the function. 
 A composed function expecting a combination function to make a reducer is called **transducer**. Transducers are useful to compose adjacent **map()**, **filer()** and **reduce()** operations together to improve performaces. A **jducer** is similar to a transducer because it is a composed function and can be used to compose **map()**, **filer()** and **reduce()** operations together, but there are some differences. Powered by sync and async generators :)
Use early returns and boolean operators to prevent nesting.
Simple case of reading your logic out loud to see if it makes sense
Cool idea but if you're going to have all this state management, just use a class component... seems like react can't decide where it's going. Also poorly named, I wouldn't call these hooks, not hooks are [already an understood idea](https://en.wikipedia.org/wiki/Hooking) in computer programming that is different than this.
RIP classes
[Why Udemy is Bad](https://www.youtube.com/watch?v=X7jf70dNrUo)
no need for downvotes on a legit question. It's not that common in js. Libraries can throw, but "final" code should not. Node loop is interrupted, you block/crash other's process, so you throw with a mission. It doesn't play nice with non blocking/async code, promises resolve and reject which is akin but different and is used more often. And it's not in in the culture of js to throw, dare I to say. check that code: try { setTimeout(() =&gt; {throw "far"}, 100); } catch (e) { console.log("do I catch or not?"); } finally { console.log("hint, I didn't"); } This is best explanation I know on the 4 ways of the error: https://www.joyent.com/node-js/production/design/errors 
Hi /u/sam_107, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Cloud_Strifeeee, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/pverma8172, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Why not use a Set instead of an array and get yourself some constant time lookup while you’re at it? const redFruits = new Set(['apple', 'strawberry', 'cherry', 'cranberries']); if (redFruits.has(fruit)) { console.log('red'); }
I think if I saw the latter case in a PR we'd have an in person conversation :)
Been doing it 18+ years now and I've realized that the users is how I get paid, and I show up to try and make their lives better. I did laugh at the joke, however.
Yeah, that's a good use and where my mind went. And I'm 1000000% on board with not doing things like `if(!shouldHideForMobile)` I'd say that I bring that up all the time with younger developers. Sometimes, we work with legacy APIs that are 100% outside of our control so we get the `isDisabled` or even a mix of positive and negative boolean names.
Technically `self` is just a convention in Python. You can name it anything you want ( including `this` ). It refers to the instance of the object that contains the method you're using. It is passed as the first argument to a method. But, it's behavior is different from `this` in JavaScript.
I know some people don't like this, but I think it's terse and very readable: if (user.isDisabled) return; // continue
I was using Set in a side-project of mine and discovered that Chrome, unlike Firefox, fails to correctly save Sets to LocalStorage, at least for WebExtensions. It'd just chuck an empty object back at you. :-(
Agreed. I'd love to see JS implement Ruby-style returns as well. I think Coffeescript had this too: \`\`\` return if user.isDisabled // logic &amp;#x200B; or &amp;#x200B; return unless user.isActive //logic \`\`\`
You can totally do this with destructuring: const { edges: [ { node: { name } = {} } = {} ] = [] } = data; /s (but it works)
In methods where I want the caller to handle the error, which in my express web server is most of my methods, I’ll do ‘await foo().catch(err =&gt; {throw err})’ 
Would using a let would be a solution there? 
They picked a poor example for the introduction. State management isn't hard in react. However, read the `useEffect` hook and you can see the potential benefits. https://reactjs.org/docs/hooks-effect.html
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Hapachino/todoList/.../**app.js#L150** (master → a3188e2)](https://github.com/Hapachino/todoList/blob/a3188e2203e5a761f23dcf4117502a62142ee324/app.js#L150) * [Hapachino/todoList/.../**app.js#L184** (master → a3188e2)](https://github.com/Hapachino/todoList/blob/a3188e2203e5a761f23dcf4117502a62142ee324/app.js#L184) * [Hapachino/todoList/.../**app.js#L99** (master → a3188e2)](https://github.com/Hapachino/todoList/blob/a3188e2203e5a761f23dcf4117502a62142ee324/app.js#L99) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e8gcthv.)
The Periscope Live Video API allows you to tweet any video you create, by default. To NOT tweet a video, you set *doNotTweet* to true. My forms and models use *tweetBroadcast*, with the service layer sending it as *doNotTweet: !tweetBroadcast* so it wouldn’t break my brain.
I'm not selling anything. Dash is attempting to sell access to copyrighted materials.
Transpiling won't cover object methods, you'll need a polyfill.
if I were an interviewer, I think I would be satisfied by your answer, but as a fellow programmer I think that despite the current situation with tail call optimisation, at least attempting a tail recursive solution is worth it, because you can 1) be future proof for when the tail call situation improves and 2) use a trampoline to put a tail-call style recursive function into an iterative process in the meantime, which solves the issue. Here is an example of a tail-recursive `flatten` function that uses a "trampoline" to put each recursive call into an iterative `while` loop. It's probably not the most efficient way of going about things, but due to the trampoline, there should be no stack growth issue. I also opted to not "return a continuation" for the continuation part of the trampoline. Returning a continuation function would increase the amount of inner function executions and definitions, so instead I just take a "snapshot" of the arguments and call the original function with those arguments. const trampoline = fn =&gt; (...args) =&gt; { let step = fn(...args); while (!step.done) { step = fn(...step.args); } return step.result; } trampoline.done = result =&gt; ({ done: true, result }); trampoline.next = (...args) =&gt; ({ done: false, args }); const flatten = trampoline((list, accumulator = []) =&gt; { if (list.length === 0) { return trampoline.done(accumulator); } const [head, ...tail] = list; if (Array.isArray(head)) { return trampoline.next(head, accumulator); } accumulator.push(head); return trampoline.next(tail, accumulator); }); console.log(flatten([1, 2, [3, [4, [5, [6, 7, [8, 9, 10]]]]]])); &amp;#x200B;
[https://30secondsofcode.org/#deepflatten](https://30secondsofcode.org/#deepflatten)
Function arguments are passed by reference, so a pointer to the objects wouldn’t make a big impact
Right, its a reference. The object isn't copied.
You may want to correct [line 13](https://gist.github.com/jcarroll2007/4ee72b3e99507c4f8ce3916fca147ab7#file-flatten-array-js-L13): `flattenArrayRecursive` instead of `flattenArray`.
Thank you so much. I guess I was thinking, 'Well, I'm creating this button here, why not just slap on an event listener." But you're right, it actually ends up less convenient and more confusing this way. 
Downthread (or probably upthread, because people downvote me a lot ;-) ) from here, there's some people talking about how it's pointless to do it because the compiler does it for you. Don't trust that. :-) Put your Set/Map (Array/Object) definitions that are unchanging outside of the function logic. 
You \_must\_ be joking. The real advice is not to preoptimize, and to make sure to do a performance profile before trying to optimize.
Use PapaParse. Parsing CSV is more complicated than you think, with lots of edge cases. 
you'll need to use recursion. 
It would depend on what you're building. But in general, no, I'm not concerned
Oh god no
&gt; I don’t know anything about the technical details of using localStorage, but if you save anything locally you basically give the end users the ability to do anything they want with that data. Not if the content is signed, as with a JWT. JWT is typically used for authentication, but really, it can be used to store anything, including non-sensitive data. 
We limit usage of ternary at my work because it often throws off the newer devs. Or they go too far the other direction and you get shit like this: const someBool = user.isActive ? true : false
I disagree with the first example. Array construction and filtering is arguably much more expensive and far less readable than a simple logical comparison. 
The trick to better conditionals is to use blodash. https://github.com/Sieabah/blodash
No, I'm not joking -- You probably have no idea what it's like to chase down bugs that in a specific engine (namely, the most popular one that was available at the time), cause your code to cease to function entirely, because of errors in the optimizer, but your code was perfectly valid, and ran 100% in all the other engines that were available at the time. Worse yet, it was a CPU specific problem, as well as an engine specific problem. The real advice is to write code that *does* what you *mean*, not assume that the compiler will understand what you mean, and do something different from what you told it to do. 
Yes, you can do this, but it creates a new array every call and returns the new array. My recursive solution never uses a total of two arrays.
Why is that?
No real reason this couldn't be used in JS land. A little late for the reddit post title, but do a little rebranding and it would probably pick up some more adoption
Very interesting! You make a good point about preparing the function for the ability to use TCO. The trampoline piece is particularly interesting. I've never seen this pattern before. &amp;#x200B; Looks like you could use and ES6 generator function for it. 
That's not a double negative. "If the user is not disabled"
I liek it
I had an edit in progress but never finished. I saw an example somewhere else in here so I think I get what you mean now. I'm surprised you are getting down voted, I think your feedback was the best. 
It is not true. My complaint with Flash on mobile devices has little to do with performance, although it’s no secret that Flash runtimes were horribly inefficient, and it really showed on mobile devices and older computers. But that’s beside the point. The main problem is that Flash apps absolutely did *not* function on mobile exactly like they did on the desktop. Virtually every Flash app in existence was designed around the mouse as the primary input. Adobe tried to convince developers and users alike that touch-based input was equivalent, and it was bullshit. *Many* interactive elements of the web were utterly broken with on mobile. Entire websites were completely useless on mobile, with or without Flash. And that’s entirely because Flash gave developers a false sense of security in the idea that it was a safe assumption that every single browser would be able to offer the same functionality, screen resolution, etc. 
IMO you should always assume that whatever is interpreting your code is going to do exactly what you tell it to: function x() { const arr = [ 1, 2, 3, 4 ]; } should, by all means, construct a new array every time you call that function. That's what you *told* it to do. Nevermind that the optimizer pass can tell that you probably really want to do const arr = [1,2,3,4]; function x() { ... } and will probably optimize the first to the second. Sure, it probably will. But when you write code specific to a particular engine, expecting it to do something that you didn't explicitly tell it to do, you're going to eventually end up spending days tracking down bugs in someone's javascript engine. 
If you think the f is bad wait till you see some of the Italics. It's from a font called "Dank Mono" self described as "the rather special coding font". Only £40 to make your eyes bleed.
It's selling access to itself, and it happens to be a tool that operates on freely-available documentation. If someone were to sell you a commercial web browser, you wouldn't assume that it's trying to *"Sell you the Internet"*. Ponder that for a moment.
u n l e s s
You're right for heap allocated data. Small, short lived objects that only exist sitting the runtime of the function will get JIT'd onto the stack. V8 is really solid at making minimal closures, too. So, no, no garbage collection.
 Why are you avoiding the point of what I'm saying? Again, of course mobile had it's issues, I've stated that. Of course as time progressed and mobile browsers became a thing people actually used, existing flash applications that were never intended to run on a mobile device had issues. I'm referring to the time before all this, when full screen flash websites won FWA awards for years on end. In their prime, Flash websites worked everywhere it mattered, and functioned and looked exactly the same.
It does. You can just pass it into the constructor and then create your bindings: `const el = document.querySelector('.your-element')` `const mousetrap = new Mousetrap(el)` Keyboard.js is another one I've tried but I like Mousetrap's API more. 
That's true but polyfill is still part of Babel, you need to include it as a script in the head tag but you are still able to write your code according to the latest ES standard and still have it runnable in most browsers.
If this was for performance. Then you needed to show benchmark 
This is a lot more than I expected. Thank you for such a detailed response. I think I can work with this.
We must conserve those precious microseconds.
Thanks
Take a look into Server Sent Events - it's essentially unidirectional websockets that works entirely under the HTTP protocol. Since an SSE connection is fundamentally HTTP, you avoid all the overhead of plumbing in the websocket infrastructure. Not dissing websocket at all - right tool for the right job and all that - but given a situation of a single SSE connection to the client, you can make the connection "bidirectional" by simply using your favorite XHR library/built-in to hit a remote endpoint that has a handle to the code maintaining all existing SSE connections and broadcast to all or just one. Hopefully some of that made sense, I'm pretty burned out from the day :/ SSE is supported by nginx using the [nchan module](https://nchan.io), there's a pretty awesome example and tutorial on the [uWSGI documentation](https://uwsgi-docs.readthedocs.io/en/latest/articles/OffloadingWebsocketsAndSSE.html) and if course there's a dead-simple [node module simply called "sse"](https://www.npmjs.com/package/sse) which makes it look so damn easy to use that you'll end up feeling like you've been conned. SSE efficiency is comparable to websockets (there's a chart on the nchan site), so don't be worried about chewing through data. Enjoy!
For me `Unless` take quite some time to mentally parse 
Brilliant. I absolutely was thinking of Parser Combinators, the ability to compose patterns is a superpower. My fascination with composeable patterns and/or parsers goes back to learning SNOBOL, which had patterns as a first-class concept, and operators that composed them as easily as concatenating strings. Thanks, this is worthy of a post in its own right.
Inthink you’re right about Resig and would say the same about Ashkenas. When people say that CoffeeScript is dead, I say, “No, it got merged into master.”
Quick rule of thumb: enhances user experience? Local storage is fine, if not preferred. Relates to authentication, authorization, or external resources? Use something you have control over.
No, it's selling access to copyrighted material. If you remove the copyrighted material, all Dash is, is a damn user interface. Stop playing dumb.
localStorage is supposed to save strings only, that's actually weird if firefox can handle objects there
Into simple function calls that hold your state in some magical global singleton somewhere that depends heavily on order. I'm interested, and I agree with the underlying goals, but skeptical about the implementation (and I'm not the [only one](https://github.com/reactjs/rfcs/pull/68#issuecomment-433155682)).
By all means native array methods should be faster than a for loop but at least last time I checked they were still an order of magnitude slower. But that's beside the point of what I said. Write your code in a way that means what you want it to do. Don't expect something to fix shit for you, that's why JavaScript was so shit back in the day.
By all means native array methods should be faster than a for loop but at least last time I checked they were still an order of magnitude slower. But that's beside the point of what I said. Write your code in a way that means what you want it to do. Don't expect something to fix shit for you, that's why JavaScript was so shit back in the day.
Gross...
why is this bad?
/u/iamlage89 and /u/BehindTheMath, thanks so much for all your help with this! I've decided to use a JSON file instead, made with [this converter](http://www.convertcsv.com/csv-to-json.htm) I found. I really appreciate it!
Because it's the same as `const someBool = user.isActive`
I have read the documentation which is 50% sales pitch. This is a solution to a problem that nobody had except them. It doesn’t really fit with anything else, lite it was just tacked on. How does this fit in with modern practices like typing. It doesn’t. I is really hair brained. 
As /u/Pstrnil said, it's the same as doing const someBool = user.isActive; However that can be unsafe (in case `user.isActive` is not a boolean but a string, `someBool` will be a string as well). The safest option is const someBool = Boolean(user.isActive);
maybe i misread. i thought it was assigning one of two values to a variable, depending on how the ternary expression evaluated. like `const someVariable = ‘big’ ? x &gt; 1000 : ‘small’;` whoops. typing from my phone so formatting is probs ass.
maybe i misread. i thought it was assigning one of two values to a variable, depending on how the ternary expression evaluated. like `const someVariable = ‘big’ ? x &gt; 1000 : ‘small’;` whoops. typing from my phone so formatting is probs ass.
:smile
Um... what the fuck is this? [https://twitter.com/ReactEurope/status/1055501526687457280](https://twitter.com/ReactEurope/status/1055501526687457280)
I did this a while ago. The Express middleware works. Are you on the free plan? If I recall, you had to pay to make requests to a different domain.
A ternary is essentially an inline `if/else` statement. const someBool = user.isActive ? true : false Is the same as doing let someBool; if (user.isActive) { someBool = true; } else { someBool = false; } It's just a more succinct way to accomplish the same thing. It's often used to assign a value, but it doesn't have to be used that way. You can do things like isLoggedIn ? showLogoutBtn() : showLoginBtn(); (Not a great example but it gets the point across). The 3 core components of a ternary are `[condition] ? [if resolves to true] : [if resolves to false]`. You can check whatever you want as the condition and do whatever you want with the results. One thing I recommend is to use ternary operators only for similar types. Like string and string, or array and array, or function and function. Like `let someVar = condition ? 'string a' : 'string b';` or `condition ? foo() : bar();`. Code gets really messy and confusing when ternaries are used like `let someVar = condition ? 'string a' : conditionWasFalse(); `
ah yeah i know what they are. i use them in the way you were describing. i was just saying i misread your code initially and was trying to understand why using ternary operators to assign a value was bad. but i misread your initial example many posts ago
Nnnoooooooo!!!!!
Many people appear to be misunderstanding what you are asking for. Here's my solution. It's a bit long, but the result is that you end up with an object that has all three types of food along with the highest occurring item, or 'none' if that particular type of food has purely unique choices. (You didn't specify how to handle that case, so I assumed this value would make the most sense) `function mostCommonSelections(meals) {` `let mealItemCounts = getSelectionCount(meals);` `let mostCommon = {};` `// let default be 'none' if max occurrence is 1, otherwise set common to max occurrence` `Object.entries(mealItemCounts).forEach(selection =&gt; {` `let type = selection[0];` `let choices = selection[1];` `let max = 1;` `let common = 'none';` &amp;#x200B; `for (food in choices) {` `if (choices[food] &gt; max) {` `max = choices[food];` `common = food;` `}` `}` &amp;#x200B; `mostCommon[\`${type}\`] = common;` `});` &amp;#x200B; `return mostCommon;` `}` &amp;#x200B; `function getSelectionCount(meals) {` `let count = {` `meat: {},` `side: {},` `topping: {},` `};` &amp;#x200B; `// determine category by index and add item, or increment if exists` `meals.forEach(meal =&gt; {` `meal.meals.forEach((item, idx) =&gt; {` `let type =` `idx === 0 ? 'meat'` `: idx === 1 ? 'side'` `: 'topping';` &amp;#x200B; `count[\`${type}\`][\`${item}\`]` `? count[\`${type}\`][\`${item}\`] += 1` `: count[\`${type}\`][\`${item}\`] = 1;` `});` `});` &amp;#x200B; `return count;` `}` So the result for your example would be: `{ meat: 'steak', side: 'none', topping: 'queso' }`, like in example one, and you could easily grab any of those values using destructuring, like in example two. Example one: `const mostCommon = mostCommonSelections(meals);` Example two: `const { meat, side, topping } = mostCommonSelections(meals);` `console.log(meat, side, topping) // steak, none, queso`
I like clean JavaScript without compilation. Moved from C# and Java world to JavaScript non compilation and never looking back.
I just got interested on JavaScript and while I was looking fot something to get started I found a boom called "JavaScript: The Definitive Guide" by David Flanagan and what I've been reading seems pretty good and a clear.
So there is no point using classes with React now? Guessing everyone will only use this once it's implemented.
The number of people fawning over this is amazing 
I just started learning JavaScript from a Python background as well. One thing that tripped me up was Promises. It was hard to understand at first, but now that I understand them they have proven to be very useful, especially with async/await.
Whats so bad about compiling? You might read up on tree-shaking and uglifying.
I’ll just keep using classes 
The two screenshots aren't fully equivalent. The right side (function component with hooks) shows _all_ the work the component is doing, including state management, side effects, and use of context. The left side (standard class component) only has enough space to show just _some_ of the side effects. Hooks generally look to be an improvement size-wise, if nothing else (especially when you start looking at use of context).
Damn I had an answer I was going to post, but then an exception came up. What if you have a situation where you have three meats like steak, chicken, and ham, and steak and chicken show up two times while ham shows up once? Technically, both chicken and steak are the most frequent compared to ham, but neither of them can top each other. What should the output be then? Also, if all items are unique, or the frequency is the same, what should the most common be? (I assume 'none').
I wish the movement to make JavaScript more like Java would die.
No idea why people are downvoting you.
Yes. You have no idea how JavaScript will evolve as a standard and whether TypeScript will be able to implement the same features or keep up.
Idk, I kind of like it.
Highly recommend [Eloquent JavaScript ](http://eloquentjavascript.net) Coming from Python, I’d say just-in-time compilation and hoisting tripped me up a lot at first. Arrays are like lists, but in JavaScript they’re actually special types of objects. `arr[0]` where 0 is a key value, not just a position in the list like Python. Also get ready for a lot more curly braces!
Kinda reminds me of state monads in a weird way. I think this makes a little more sense as an HOC, but I guess they wanted to avoid HOC-hell.
Well it was going to be a CRUD app where I would only allow 1 of each(meat, side topping)
What you said. So have a notes table with the userId. I just don't understand (in the examples) they also have a method where the users document would hold a notes array that only stores the id's. And then also a separate notes table with the full data. Isn't the method you proposed easier?
This is not how it works. Please read the documentation and examples more carefully.
Vanilla JavaScript. If your coming from strict oop language javascript might be very valuable experience as you learn to reason about the code in a different way. You can always add typescript on top of it later. Knowing the core will make you better at typescript too. Which probably wont take long to get a hang of it youll be familiar with strict class based oop language and dynamic prototype based language. After all ts is somewhat a facade.
I really disagree with this because I often find that negatives are usually exit conditions. My functions will often look like if (!user.isActive) throw new Error('ERROR'); // do work I feel this is much more readable than if (user.isActive) { // do work } else { throw new Error('ERROR'); }
Maybe the user have an array that stores Note objects?
On job experience mainly, out of necessity first, but as the time went I felt that I enjoy it a lot. However, I watched few courses which helped immensly to make process faster. The biggest boost I think was "JavaScript: the weird parts".
Transducers provide better performances because they combine map filter and reduce. So there are not mutliple iterations nor intermediate arrays. It's easy find benchmark about them. How about my implementation? It was only a challenge against myself, I did it but - for now - without test its performance. Like transducers you could combine map filter and reduce, so this isn't so bad. Maybe yield operations are not so efficient, but...if I transpile them? I earn something? I'll see
This. Only if one suspects the notesarray will exceed the default 16mb of size, it should be stored as array of objects.
&gt;I know deterministic builds are somewhat possible with package-lock.json, but it seems like a dirty patch to fix flawed underlying system. Do you consider package-lock as flawed, or lock files in general? Works pretty good in other ecosystems. Ruby, PHP, and Elixir all use lock files and they work like a charm. &amp;#x200B;
If It exceeds, could be a collection of Notes and the user have an array of Note's ObjectIDs, right?
Better off importing pieces individually though, the Babel polyfill adds quite a chunk to your total file sizes. Not sure how good webpack would be at tree shaking if imported through a module system
Ok I read those. In the first example, the guy is talking about composition in the general sense of the term, not the niche specific one those commenters have in mind. (and god, can you be more pedantic?) In the second, holy fuck way to miss the point. He's talking about constructor functions in JavaScript, not Java constructors... I read your post complaining about him not understanding the OCP, but ironically, you yourself are using the later definition while [he is using the earlier one](https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle). And for fuck's sake, don't use Java terms and ideas when talking about JavaScript like that commenter did. Have some empathy for people who have to read that garbage and make sense of how it in any way relates. I wish they would just put the class syntax in the trashcan and force people to use prototypes so people wouldn't think that they could talk about JavaScript in sensible way just because they know Java. Third example is a guy bitching about feelings. I wish people would just relax a little and not get triggered over trivial details that may just be misunderstandings in the first place. Give people the benefit of the doubt and not go crazy over every perceived violation of the holy rules of programming.
Still...yikes
Looks like react changed overnight in react-conf. Here's i guess what you want: http://react-spring.surge.sh/manual
This is honestly one of the few mistakes the React team has made with the public API. I hope this doesn't last.
Then again, according to the [explanation](https://reactjs.org/docs/hooks-rules.html#explanation), `useEffect` is tied to `useState`, so it does make some sense to start from `useState` and then work up to `useEffect`.
No I mean in the data. If you are looking at the data and trying to determine the highest frequency, then you look at which one occurred the most right? But what happens if all items are unique or chosen the same number of times? Then you can’t say any particular meat was chosen more often. Or what if you have three choices, and one is picked 1 times while the other two are picked 2 times? The latter two are chosen more frequently than the former, but you cannot say that one is chosen **the most** frequently, because they are tied. If you want I can share what I wrote. It doesn’t take into account that last factor, and so it will either go for the highest frequency item if there is one, or it will choose the first item of a tied set of higher items.
Damn, everybody that deal with Redux seems to face the same issues...
Some IDEs allow an easy way to flip this. WebStorm for example can even add the missing `else` block, so `if (!user.isActive) {` `console.log('inactive');` `}` would become `if (user.isActive) {` `} else {` `console.log('inactive');` `}` once flipped.
Yes! I think composition is way too underused. Especially since there's the pipe operator in the ...pipeline. :D
Seeing that hurts my eyes
I saw the italic characters [here](https://dank.sh/) and completely agree. The "f", "k", and "s" glyphs are the worst I've ever seen in a code font. The font author has a [Medium article](https://medium.com/@philpl/what-sets-dank-mono-apart-1bbdc1cc3cbd) explaining his design decisions; I thought it was an interesting read. He definitely put a lot of effort into it, but still... maybe coders aren't designers after all.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
nope.
(user.isActive) ? connect() : redirect() Aside that, **IF** is beautiful. We can make all logical states with it alone. [**NOT**](https://en.wikipedia.org/wiki/NOT_gate) [**AND**](https://en.wikipedia.org/wiki/AND_gate) [**OR**](https://en.wikipedia.org/wiki/OR_gate) [**NAND**](https://en.wikipedia.org/wiki/NAND_gate) [**NOR**](https://en.wikipedia.org/wiki/NOR_gate) [**XOR**](https://en.wikipedia.org/wiki/XOR_gate) [**XNOR**](https://en.wikipedia.org/wiki/XNOR_gate)
And arrays.
Typescript is great. But JS has some particularities that you better understand from the start. I think it’d much harder for you to understand how OOP or dynamic typing works using Typescript. Typescript is just a superset of JS, so by learning JS you’d be learning Typescript too. 
Yes thats right. Personally I try to use mongodb as it’s meant to be used (as a documentdb) and add relations only when necessary.
mongoose has the .push or you can do the $push in update. I don’t think its so hard :)
You can json stringify to store and json decode to read. This way it can act as a complex database.
I don’t fully understand but I was just going to make a drop down menu for each choice. 
There might be a point if you have a heavy component with lots of state management and hooks to specific dom node refs. Or you just feel more comfortable with classes.
Iis this still the case if it's: function getData (someJSON) { let stuff = apiCall (someJSON); checkAndMakeData (stuff); } function checkAndMakeData (rawData) { if (senseCheck (rawData.x) &amp;&amp; senseCheck (rawData.y) { rawData.z = someCleansing(rawData.z); updatePlot(rawData.z); } } In the checkAndMakeData function, there's no new object creation, but there is mutation. I'd assumed that it doesn't take extra memory space, but I'm very unsure what the rule is about when it's going to be making something new and taking more memory.
Your second example is an object, so that has already been said. Your first function is a string if it's really JSON and you didn't just fall for the annoying habit of calling *anything "JSON"*. Strings are handled in many different ways i the implementation of today's runtimes. Usually it's also just a reference (pointer to memory location of the original string), combined with "copy on write" (create a copy for the function to work on) because in Javascript strings are supposed to be value parameters.
&gt;calling a function useEffect inside a render function to attach a behavior seems weird. It could be useful for a better control of UI animations and transitions. UI animations result from the transition of UI state, and the according to my mental model of React, the render function is basically the "movie editor" that composes the sequence from state. Attaching behavior to the render function is basically special FX, introducing stuff that isn't part of the "real world capture" to enhace the user (viewer) experience.
Which is an object. So no need to also mention Set, Map, etc.
I stopped when I reached the word "stuffs" -- you might want to use proper English if you want to be considered seriously
https://javascript.info It covers modern language features and is quite detailed. Even if you don’t take it all in at first, you’ll be well orientated for future learning.
Hmm. I don't know. I'm just putting my personal notes on github, I think this kind of tone is totally okay. The course is called understands the weird parts after all 
Im on the free plan! I think I found out the issue, however I can't even try now as it shows an error that Im exceed my limited quota. =/
Same goes for arrays: &amp;#x200B; \`\`\`let arr = \[1, 2, 3\] const fn = arr =&gt; arr\[1\] = 99 fn(arr) console.log(arr) // \[1, 99, 3\] \`\`\`
One thing can goes wrong: your page embeded into an iframe without restriction, the parent can access some infos of the local storage. One workaround is to disallow completly frame embeding with the header [X-FRAME](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options) 
You're still casting here which can introduce weird cases. Make `isActive` a method that explicitly does a strict equals check to true (`this.isActive === true`) or do the same directly with the exposed property.
Ternaries are OK in lambda's and for boolean to value mapping. Anything involving more complex control flow can be solved using functions, ifs and returns. If need be, add if/elseif/else or a switch for single value conditions.
Right. localStorage is okay then, to make stuffs acting fast.
Well.. symbols are symbols, from JS' point of view they are primitives. http://2ality.com/2014/12/es6-symbols.html &gt; You can see that symbols are primitive if you apply the typeof operator to one of them – it will return a new symbol-specific result How a runtime treats it internally is a different subject.
I love guard clauses, but I like to have braces and the statement on the next line for consistency with other if-statements. On the other hand, single-line if/return makes it an explicit guard clause and a construct its own right which might make this notation more intentful.
Take a chill pill it ain’t that serious
This is one of the best courses I've found on JavaScript. And the instructor is brilliant too. Thank you for the notes OP. Starred your repo in case i need to reference in future. 
So, how might that apply to this question?
Thoses tips are really useful, thanks
It's just a dude sharing some learning notes, who also doesn't speak English as a first language. &gt; you might want to use proper English if you want to be considered seriously You might want to not be a petty fuckwit, unless you want to look like an insecure edgy teenager.
When I finished this course I catch myself thinking on how good it would be if I had found the course years ago. Now I’m able to write and read advanced Javascript faster and doing it in a smart way due to the concepts well explained by the instructor.
Huh, interesting. Thanks.
This is nice, but makes me really glad I don't have to write JavaScript anymore. The language has a lot of neat ideas, but is in general a dumpster fire. 
How do you determine whether something serializes properly? Is there a spec/protocol for this?
The mutation doesn't change anything. The object as a whole is the same object in both functions. If anything, the mutation would show you that as being the case.
Good to hear my assumption is correct, thanks! 
Valid point.
Really, you can say everything is passed by reference, including primitives. There's no way of knowing if a primitive isn't because they have identity equality by value and are immutable. In fact modern runtimes will use references for strings (as well as potentially other primitives) internally to save memory. There's no point on making giant string copies every time a giant string is passed into a function when there's no reason to. In fact strings themselves can be combinations of references to other strings, just hidden away by implementation. People like to say primitives are passed by value and objects passed by reference but it's not the passing that makes the difference, it's the quality of the data type. In fact symbol behavior (not having value equality by nature) is suggestive of this despite it being a primitive. Pass one through a function and you have the same symbol as before, not a copy which one might expect to not have equality with the original.
Take this function: function double (innerNum) { innerNum *= 2 } Your statement is true for: double(5) But value vs. reference makes a difference for: let outerNum = 5 double(outerNum) If `outerNum` gets passed by reference `innerNum` would be a reference to `outerNum` and both would change their value to `10`. But that doesn't happen. It might be true that internally these things work with references until values are needed, but when we're talking about "by reference" or "by value" we're talking about the behavior. Or at least I am.
It’s not the tone, it’s just that stuff is not pluralizable. So just write stuff not stuffs. Thanks for the article!
Okay, I didn't know about that :D But since this isn't real "by reference" behavior, shouldn't we differentiate between "pass by reference" and "pass a value that is a reference"? I mean, what is a function parameter if you can alter its origin but not override it? It seems like JS is switching between "value" and "reference" (or rather "reference of a value" and "reference of a reference of a value") depending on what makes more sense for the current action. When I think about it, this makes "pass by reference" a very vague term which could mean anything, doesn't it?
Thanks! If you're curious you can find the sources [here](https://github.com/danielberndt/danielberndt.net) :)
Thanks for the tips, I have implemented them in my SPA and now it's .043 microseconds faster!
Its more of a pass by value always, though the value you're passing is potentially a "reference". The idea of what a reference is, is also a little odd. There are no variable references in JavaScript, where changing one variable identifier also changes another identifier (with the exception of a quirk with `arguments`). JavaScript references are more of a kind of value, like a pointer, but not something you can necessarily get the direct address of. Assignments will copy the reference by address and dereferencing happens on property access or invocation. var a = {} // a contains the address of the object {} in memory var b = a // b contains the same address a.toString // dereferences a to access value of {}, returning its toString value (also a reference) b.toString // deferences to the same as above a.toString() // deferences a to get toString, () dereferences toString to invoke its function value foo(a) // pass reference into foo function (address of a) function foo (c) { // c has address of a, referring to original a {} c.bar = 'bar' // c address dereferenced to a {}, adding bar property to that value // each a, b, and c now have the same address so all dereferences will reveal bar c = {} // c assigned new address of separate {}, a (and b) is unchanged // changes to c deference to a different object so changes there will not affect the original a (and b) object } The meat of it is, passing values through a function is the same as assignment to another variable. b = a foo(a) // -&gt; c = a The behavior of the variable on the other side is largely a consequence of whether or not its immutable. If a in the above example was a string or a frozen (`Object.freeze({})`) object, without any reflection or inspection to tell what they really were, would it really make a difference? a === c would be true, and in neither case could changes to c be made that would be noticed back outside of the function in a. 
```( ! ... == false )``` you probably meant ```(! ... )``` or ```(... == false)```
&gt; a(){ thisfuckingformatting
:D
So what does this mean then? &gt; When exactly does React clean up an effect? React performs the cleanup when the component unmounts. However, as we learned earlier, effects run for every render and not just once. This is why React also cleans up effects from the previous render before running the effects next time. We’ll discuss why this helps avoid bugs and how to opt out of this behavior in case it creates performance issues later below.
Somebody wants to share the purchase? If we take the package of 160 usd, then you are able to download it??
I had to do this once, probably a little over 15 years ago or so. The designer (an ancient one I was not fond of at the time) was _adamant_ that her site look exactly the same online as they did in her photoshop designs, exotic font choices and all. Without backup from my boss to oppose the idea, the site went up as a series of images, straight from her psd. In the end, it was a lot easier to do than any actual web dev work, so maybe I shouldn't have fought back so much ¯\\\_(ツ)\_/¯
What inherent problems?
Dude, it's not his first language. Chill out 
The entire function runs on every render. React uses some external state to make `useState` return the current state value when the component function is called for re-rendering. In other words `useState` (and other hooks) return different values depending on which component instance in the component tree is currently being rendered, and the number of times the hook has already been called during the invocation of the component function.
Hmm, maybe we could use a state monad with generator syntax to get similar features with less magic (depending on one's definition of magic.)
Yes, language is a barrier to knowledge. /s
Thanks for sharing!
Kommentaren din er like dum som den du svarte på. Du skjønner kanskje ikke at språk er et viktig verktøy for å formidle ideer og kunnskap, eller? Hvis ingen klarte å forme ord og setninger på et felles språk hadde vi ikke kunnet samarbeide eller utvikle noe som helst på kryss av landegrenser.
Thanks ☺️
They talk about them a bit [here](https://reactjs.org/docs/hooks-intro.html#classes-confuse-both-people-and-machines). tl;dr harder for people to understand and harder for compilers to optimize
[removed]
It feels odd though. It messes with my sense of immutability that it's a black box with some magic inside. If I was to use these I'd still treat it similar to recompose and prefer to wrap my components in a HOC to separate out the view from the logic where possible.
It's cool and all, but this doesn't really feel like they can be stateless functional components anymore. There's now a black box of magic inside your component if you're doing things like this. It also doesn't separate out your view component from any logic. It's a class component inside a singular function, but I think it's actually harder to reason about in the long run. I know you can have too many wrapper components, but I like the approach that `React.memo` has which you can just use to wrap your component. Similar to how recompose has `Pure`. If I was to use these I'd end up writing some generic HOC components that can take an effect and a component (a la `recompose`) and just pass down props to the view layer.
Submit a Pull Request.
Thank you both for the answers! Seems like my browser can't find the device... Hmmm... That's rather inconvenient. Oh well, there must be other ways that lead to Rome I guess :)
I actually didn't knew he did a nodejs course, what did you think about it?
I was just thinking something similar. It must be from a psd. The company probably has a photoshop heavy workflow. You loose pretty much all hover effects and it must be a pain to maintain.
Horrible grammar. It’s a pain to read. 
I can access my device through WebUSB, but due to restrictions set by the developers of Chrome and WebUSB I can't access the video interface... Seems like I can't get around it by using some flags or something either.
Yes sure he is a little bit opinionated on that, but you can craft your own of set of tools to use (if you can call it like that) and use whatever it suits you. 
Hi /u/Slight_Role, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Notes are for reading. Someone else publishing your notes would be dumb and a little fucked up. 
Is "harder for people to understand" a good argument? I come from an object oriented background, so classes are easy for me to understand, whereas cramming a bunch of behavior and side effects into a single function seems like a huge SRP violation to me. &amp;#x200B; Dependency inversion is somewhat hard to understand, but that's why you learn variables, functions, objects, classes first. And dependency inversion (as well as classes) is used to solve real problems in development. I am really curious, from a design and code architecture standpoint, what makes this better.
I'm excited for this!
It is, at least in comparison to C++ or even Golang.
I didn't quite believe you because there's a fair amount of CSS and JavaScript on the page but, sure enough, around line 850, there's an image map containing links for this image: &amp;#x200B; [http://media.burton.co.uk/wcsstore/ConsumerDirectStorefrontAssetStore/images/colors/color2/cms/pages/static/static-0000126346/images/Homepage\_burton\_w8\_1280\_uk\_v01.jpg](http://media.burton.co.uk/wcsstore/ConsumerDirectStorefrontAssetStore/images/colors/color2/cms/pages/static/static-0000126346/images/Homepage_burton_w8_1280_uk_v01.jpg) &amp;#x200B; That's pretty much everything but the header and footer, 1280 x 4876 pixels. &amp;#x200B;
Great course. He still keep his motto: "Don't imitate. Understand."
no, this bot is annoying and the person who wrote it should feel some amount of professional disappointment at themselves for writing this behavior into their program.
I agree with this. Kyle can get very opinionated. Some of his lessons feel more like personal rants. But there is some really good stuff in his course if you can get past that. Definitely learned a lot 
Doesn't incrementing by 0.01 eat a lot of performance? Web apps are pretty laggy without additional performance baggage. I once did something like that, but it drew inputted functions, and when I set the step too low it took a long time to render. Wouldn't better approach be to animate SVG-s ?
Maybe in 1 week you can get used to JS, but to code with documentation open. To learn blockchain to a level that you can securely say what's happening and improve your blockchain further the basics, maybe more 1 week. I say that if you practice everyday and when you're not coding, you're reading something about JS. 
Nicely done. I would recommend a popup / reset option when the puzzle is complete.
I see a promise in title, but no resolve in post :(
E. G. Vue-custom-element - it's fine example how web components could be used for wrapping e.g. Vue components. Such approach could be used for making microservices on front-end, where you share common api but inside could be anything. 
[This video on what goes on during for-loops](https://www.youtube.com/watch?v=Nzokr6Boeaw) really highlights just how weird even the most normal aspects of JavaScript can bee.
(or you can include a build step and/or polyfill)
that's amazing. that totally screw my mind, and I love the format :) 
I played around with some *hooks* yesterday and wrote an article with some practical examples, if you want to check it it is: [https://enmascript.com/articles/2018/10/26/react-conf-2018-understanding-react-hooks-proposal-with-simple-examples](https://enmascript.com/articles/2018/10/26/react-conf-2018-understanding-react-hooks-proposal-with-simple-examples)
I'd be down for that if we could maybe split it with like two more people. I feel like ~40 bucks is what I'd value this course at.
Yeah, I think I assumed this was r/programming. &amp;#x200B;
This is the best JS course I've found, improved my skillset drastically. Nice job.
Well, that's one way to build a site🤣
Nevermind him. "stuffs" is perfectly acceptible. It doesnt' just mean "stuff", which is a reference to generic things. I would take it to mean "all kinds of stuff", more than just one thing. Really. . . It's fine. ***Put it back.***
Good one.
I think more the point is that it may have better been done as a github page as opposed to an entire repo. It's fine of course as is, but that's what they're there for.
That makes sense. Plenty of generalized JS hate there.
Dude I get their format and what they're trying to do, but does it need to be :15?
Nice notes. Did you use any program or anything to create your readme? Or was it all done by hand? I am working on a similar project where my readme is going to basically be a long-ish read but doing it all in markdown by hand is a pain. If there is some kind of program that lets you write a word doc or google doc and turn it into markdown would be great. 
I do not think you are wrong. I think they and others have driven too much on the idea that classes make things difficult. In its current state, a lot of React projects use functional components, and purely functional state libraries (e.g. flux). This was problematic as it did not allow for the use of component state or context, or life cycle. So anytime you wanted a post mount action, you had to make it part of the global state. Now you can have lifecycle hooks exist in functional components. Also, you can now have actions take place after every render, even if they change state. Lastly, I may be wrong, but can you not use hooks inside class components?
thanks i will look into some extensions for markdown in vs code then
You posted this yesterday.
IIRC, you need to set a flag when starting chrome to allow XHR access to the file system. 
I am new to front end development and React. So I don't think I can answer your last question easily. The way we use functional components on my current team is as stateless, easy to express components. If we see a functional component, we know it's stateless, doesn't rely on any lifecycle hooks, etc. And we can know this without having to scan the code for any special function declarations - we just know. Likewise, if we have a class component, it's because we need to take advantage of the constructor or a particular component lifecycle hook, or implement ShouldComponentUpdate or similar. The "blurring of the line" is just a little jarring to me.
How can I do this? Thanks so much!
I'm on Ubuntu
 if (z &lt; 0) z = 0;
I just remembered that I have a local server on my computer on `localhost`, so I figured I could put it there. That mostly fixed the problem, but for some reason in both Google Chrome and in Firefox I am getting the error `Synchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user’s experience. For more help` [`http://xhr.spec.whatwg.org/`](http://xhr.spec.whatwg.org/). Any ideas? Thanks so much for your help, I really appreciate it!
I don't hate JS at all. I actually really enjoy writing stuff in pure JS from a language standpoint. What I don't like is the old crufty stdlib and legacy bits of the language that haven't aged well. Other languages deprecate those things and have a good single source of documentation for it (typically per OS, but still) that points you at the new, better way. 
So you'll always want to have the developer tools open when you're writing JavaScript. &amp;#x200B; When you click the submit button, you'll see \*Uncaught TypeError: Cannot set property 'innerHTML' of null\* &amp;#x200B; Digging a little deeper you're calling \` document.getElementById('status')\` all over the place (there are cleaner ways to write that validateForm() function, but that is outside the scope of the question) &amp;#x200B; The problem is, there are no elements with the id of \*status\*, I do see \` &lt;div class="status"&gt;&lt;/div&gt;\` though
Derek Banas' youtube videos are a great way to get a quick crash course on a language. Anytime I need to learn a new language I'll see if he has a video on it. They don't go super in-depth, and I wouldn't exactly call them friendly for learning how to program, but if you need a quick overview to get you going, I recommend watching some of them. Here's the link to one of his javascript videos(he has a few) [https://www.youtube.com/watch?v=fju9ii8YsGs](https://www.youtube.com/watch?v=fju9ii8YsGs) I would also recommend going to codewars(or something similar) and solve a few basic problems with it, as well as building stuff of course &amp;#x200B;
.... and? Sure, it probably doesn't keep any front-end javascript developers employed, but when your page is just a bunch of images stitched together with links, that's exactly what an image map is. Probably generated on the fly by some server side code, though. 
Ruby supports ternary, why would you do it like that?
Why use ternary if there's only one value to assign for a single condition result?
Touché 
z &lt; 0 &amp;&amp; z = 0
The problem with deprecation is unique to JS... when they do that, it will eventually break webpages. New version, leads to browser adoption, leads to broken legacy sites that haven't been touched in years. Suddenly, thru no fault of their own, a billion 15 yr old websites get trashed. Same thing for adopting official versions of popular features. \`array.includes()\` is a perfect example of this, as most of the add-on libraries used \`array.contains()\` and they didn't want to break them. So those aren't warts, they're scars.
I am utterly baffled by this. It makes no sense.
The div with the classes wrapper-page bg-sky has that image as a bg image. If you can edit the css just remove that and change it to a solid color. No need to edit the canvas or anything. It is just CSS. 
So `variable` gets assigned a new reference. But it doesn't change the reference stored in `a` because it's a copy. Yes, I got it now. Thank you.
It seemed like the validation wasn't working. So you still recommend to add it as a subdoc under the users? Do you maybe have an example of the .push for multiple elements? I only see examples where they push 1 element 
Thank you I completely missed that div, so I thought it was in the canvas somehow.
Somethings wrong with you
incredible
Figure out why you are making the mistake of reassigning a variable. Solve the problem and use `const`
[removed]
Sequence was the wrong word I guess, as the render function describes just a frame of that sequence, the UI at a moment in time. Hooks and the new way of doing things in React seem to focus more on making it easier to think about the entire lifecycle of a component, making it easier to think dynamically. 
I’m not the original grammar-complainer. I wrote my comment in the most neutral way possible.
`z = Math.max(0, z);`
mistake? 
`if (!(!userIsNotDisabled)) {}` How about that?
it says you have an invalid version of that package. try upgrading it. &amp;#x200B;
Mmh, readability though... I wouldn't want to be the one to maintain this code. 😅
 z = z&lt;0 &amp;&amp; 0 || z :)
May I suggest you use the Fetch API for this, or will that not work? It's much nicer to work with in my opinion. ☺️
I see what you mean. Yeah, I suppose I will have to find my own balance in terms of toolchain and approach to javascript. You are right, I have never been a fan of Ecmascript 5 syntax. Ecmastript 6 syntax is an improvement. Okay, you have given me some good ideas about how to approach my project. Thanks so much. I appreciate you sharing your experience. 
Ok maybe I don't even know what you're asking for. I'll post the code and you tell me. It's a bit long, but the result is that you end up with an object that has all three types of food along with the highest occurring item, or 'none' if that particular type of food has purely unique choices. (You didn't specify how to handle that case, so I assumed this value would make the most sense) The second function creates an object with the categories of food, the specific foods that come up in each category, and the number of occurrences for each one. Example: { meat: { steak: 2, chicken: 1 }, side: { 'white rice': 1, 'brown rice': 1, 'black beans': 1 }, topping: { queso: 2, 'sour cream': 1 } } And then the first function filters for the most common items using this list. function mostCommonSelections(meals) { let mealItemCounts = getSelectionCount(meals); let mostCommon = {}; &amp;#x200B; // let default be 'none' if max occurrence is 1, otherwise set common to max occurrence Object.entries(mealItemCounts).forEach(selection =&gt; { let type = selection\[0\]; let choices = selection\[1\]; let max = 1; let common = 'none'; &amp;#x200B; for (food in choices) { if (choices\[food\] &gt; max) { max = choices\[food\]; common = food; } } &amp;#x200B; mostCommon\[\`${type}\`\] = common; }); &amp;#x200B; return mostCommon; } &amp;#x200B; function getSelectionCount(meals) { let count = { meat: {}, side: {}, topping: {}, }; &amp;#x200B; // determine category by index and add item, or increment if exists meals.forEach(meal =&gt; { meal.meals.forEach((item, idx) =&gt; { let type = idx === 0 ? 'meat' : idx === 1 ? 'side' : 'topping'; &amp;#x200B; count\[\`${type}\`\]\[\`${item}\`\] ? count\[\`${type}\`\]\[\`${item}\`\] += 1 : count\[\`${type}\`\]\[\`${item}\`\] = 1; }); }); &amp;#x200B; return count; } So the result for your example would be: { meat: 'steak', side: 'none', topping: 'queso' }, like in example one, and you could easily grab any of those values using destructuring, like in example two. Example one: const mostCommon = mostCommonSelections(meals); and then mostCommon.meat // steak Example two: const { meat, side, topping } = mostCommonSelections(meals); console.log(meat, side, topping) // steak, none, queso Let me know if you have any questions about it. (like I said, there are corner cases also, and I'm not sure I even understand what you mean to do)
Math.ceil(number / 10) * 10
Yes, but my JavaScript only requires the access of one external file. In addition, the `XMLHttpRequest` function is only ten lines long. I'll consider using the Fetch API in the future if I'm writing more complicated scripts that require file-fetching. Thanks for you input anyway, I really appreciate it!
Hi /u/rossbulat, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just your own content. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [medium.com](/search?q=%28and+site%3Amedium.com+author%3Arossbulat+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|16|89% [link.medium.com](/search?q=%28and+site%3Alink.medium.com+author%3Arossbulat+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|6%
A lot of the newer features? Or just classes? :P I ask because classes deceive people about how JavaScript works, and I can understand why he dislikes the inclusion because I do as well. You don't want to bring people from other languages and let them think JS is the same. Prototypal inheritance is not hard and we should encourage people to learn it.
Hi /u/iiNiv, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/justjust000, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Naturious, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/theodore_q, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/SillyPickle, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
This notes apply to nodejs?
It's better because it's more closely aligned with functional programming. For many people, using functions for everything is more straightforward than classess. They are just boxes, but a file is a box enough.
Yes, because you attach event to variable that's being changed, instead of class, which should react to state changes. It's close to MobX conceptually.
Exactly. Very good thing.
This doesn't really solve the jagged issue, but if you change \`ctx.lineTo(e.pageX , e.pageY -60 );\` to \`ctx.lineTo(this.X , this.Y -60 );\`, you won't get any angled lines anymore. They'll be straight up and down.
Exactly you might not like his opinion but his reason is much better than oh it new and shiny. He gives actual reasons why he doesn’t think it’s a good idea so how that comes off pretentious I don’t understand. People want to be new and trendy so when someone old school comes along and says hey maybe that’s not a good idea and he’s why they get upset and instead of engaging with the ideas so he’s pretentious and it’s “impossible” for him to understand how they are doing “architecture”.
How would you enhance them..? 🤔
Have a look at this [other gif library](http://jnordberg.github.io/gif.js/), it looks like it has a bigger userbase and documentation.
So uncivilized....
Sorry about the formatting. Basically I start with a linear line much as you described with the moveto, lineto business. I then create 8 virtual points between each 'real' point using the nspline function. this creates a nices smooth line. 
Not to rat myself out but I’m the idiot that said that, and in re-reading what I said I definitely misspoke. Of course he understands js architecture, arguably moreso than anyone. If I could redact my statement I’d say that he’s reluctant to incorporate ES6 into his perception of js architecture. Admittedly, I’m overstepping as I’ve only been working with Js for about 8 or 9 months. I enjoy having discussions like this though, I don’t mean to troll. 
I don't know anything about java, but perhaps you need penis reduction surgery.
window.FOO = lib.FOO 😈
Would like to look at the code but Im on mobile atm. The general algorithm to detect collision between two circles (or balls) is: radius1 + radius2 &gt;= distance When both radius are bigger then the distance, then there must be a collision happening. If you're not sure just draw two circles and apply that algorithm. it will make sense afterwards. The radius is a given though not the distance. there are a couple of ways to calculate though the easiest imo is to use vectors. You first compute the vector that points from one origin (middle) of the circle to the other. The result could look like this: {x: 5, y: 3} Then to get the distance you just use the mathmatical formula to calculate the length of the vector (which becomes the distance) The formula looks like this: Math.sqrt(x * x + y * y) In that case you insert x and y from the object and voila you have the distance. Use that with the algorithm and you're good to roll!
oh my gosh that formatting
Sorry, formatting help was not very helpful. Will throw it on github. 
You need to update the element itself. I'm on mobile so forgive my formatting. So your element has an onclick function checkTiles &gt; &lt;i src="img.png" onclick="()=&gt;{checkTiles(this)}" /&gt; This needs to be updated to a function that returns false. &gt; &lt;I src="img.png" onclick="()=&gt;{return false;}" /&gt;
Beklager, jeg burde ha sagt det annerledes. Språk som konsept er selvsagt nødvendig for et uttrykk for ideer mellom mennesker. Ville bare påpeke hvordan den lille feilen i en helt forståelig setning ikke skal hindre noen fra å spre kunnskap.
Can you provide something like JsFiddle of an example?
Usually not but to be sure you should check the license conditions of any libraries you’re using. Especially substantial ones. 
What do you mean 'breaking into open source'
There’s not really much to it. Find a project with something you can improve and submit a pull request is the high level task. Often the best projects to help with are the ones you’re using: if you are encountering something that could be better see if an issue or PR is already open. If one isn’t, make one. You’ll be helping yourself by fixing an issue that is affecting you and helping others who are affected by the same issue.
I guess it depends on your interest. There are many missing gaps and tools you know? 
Hi /u/Alfen_16, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Most of the projects I use on a day-to-day basis are pretty large and well supported. More often it's the lack of library that I notice.
I'm not sure I understand that question (statement?).
I would like to add what you should do to the speed on circle collisions. The velocities to be reflected over the line perpendicular to the line between the circle centers. This would be something like: if ((first.centerX - second.centerX)**2 + (first.centerY - second.centerY)**2 &lt; (first.radius + second.radius)**2) { // Assuming a perfectly elastic collision between balls of equal mass: // The normal between the circles let norm = {x: first.centerX - second.centerX, y: first.centerY - second.centerY}; // Normalize normal to length 1 const normLength = Math.sqrt(norm.x**2 + norm.y**2); norm.x /= normLength; norm.y /= normLength; // The portion of the velocity parallel to the normal is the part that needs to be flipped during a collision. // This portion is found with the dot product. const firstVParallelMagnitude = first.speed.x * norm.x + first.speed.y * norm.y; const secondVParallelMagnitude = second.speed.x * norm.x + second.speed.y * norm.y; const firstVParallel = {x: firstVParallelMagnitude * norm.x, y: firstVParallelMagnitude * norm.y}; const secondVParallel = {x: secondVParallelMagnitude * norm.x, y: secondVParallelMagnitude * norm.y}; // Subtract the parallel part of the velocity from the total velocity to get the perpendicular part. const firstVPerpendicular = {x: first.speed.x - firstVParallel.x, y: first.speed.y - firstVParallel.y}; const secondVPerpendicular = {x: second.speed.x - secondVParallel.x, y: second.speed.y - secondVParallel.y}; // Add them all together to get the new speeds, inverting the parallel parts. first.speed = { x: firstVPerpendicular.x - firstVParallel.x, y: firstVPerpendicular.y - firstVParallel.y }; second.speed = { x: secondVPerpendicular.x - secondVParallel.x, y: secondVPerpendicular.y - secondVParallel.y }; } Or if we had operator overloading: if (colliding(first, second)) { norm = normalize(first.center - second.center); firstVParallel = norm * dotProduct(first.speed, norm); secondVParallel = norm * dotProduct(second.speed, norm); firstVPerpendicular = first.speed - firstVParallel; secondVPerpendicular = second.speed - secondVParallel; first.speed = firstVPerpendicular - firstVParallel; second.speed = secondVPerpendicular - secondVParallel; }
Well supported definitely doesn’t mean flawless. React has a large number of open issues, for example and many aren’t too difficult to hit especially in IE or Edge. But even in smaller projects you’re likely to stumble on an issue at some point or might find yourself with sufficient knowledge that you can tackle some of their open issues. Here are some examples of things I’ve contributed: * React was relying on Edge to behave according to spec for a text input event but Edge wasn’t. The PR and issue were eventually closed because Edge fixed their bug and React didn’t care to support older versions of the browser. * A library that implements the SAML protocol had an overly restrictive validation for URLs. I fixed that. * A library for generating Word documents didn’t support custom styles. I added that support in a very basic way (hey, this XML file is the definition of the styles... trust me). Most of my contributions didn’t require deep knowledge of the library, just something that bit me and a little bit of debugging to see why. Some projects are kind enough to have a label for good first bugs. React might be such a project, though I can’t recall.
See my reply to the OP. It’s ok to submit a PR. The worst they can do is not accept it or ignore it.
I mean what kind of open source projects would be of interest? For example I do AR/VR. There is three.js, aframe.js, and a lot of other game engines. So if i were interested in contributing id find something missing in those libraries and build out something. For example three.js has a rather incomplete editor. I could do a better editor if i were so inclined. So you know find what interests you then see what tool is missing form its ecosystem. At least thats how I would approach it.
Not sure if it’ll be helpful for the client side GIF stuff, but if you’re interested I made a client side gif reverser about 5 years ago. https://github.com/umbrae/gifreverse If I recall the pain points where background colors and retaining them and frame speed.
Why XMLHttpRequest over fetch?
For someone making this up on the fly on mobile, bravo
Here's the problem: the Intermediate Value Theorem is NOT TRUE. In traditional physics, if an object goes from here to there, it must pass through all of the points in between. This means that if two rectangles are moving (your rectangles may be painted to look like circles, but they're still rectangles), their edges will touch exactly before they overlap. But your little model is not traditional physics. You have discrete time. In between frame 1 and frame 2, there *isn't* a frame 1.5. It goes from 1 straight to 2; the rectangle doesn't *move* from one spot to another; it *teleports* from one spot to another. This means that there's almost never a time when the edges line up exactly. You're checking whether the left side of rectangle 1 is *exactly* at the right side of rectangle 2, but this will almost *never* happen. You have to assume that they will overlap and deal with the overlap however you see fit. This means that the left side of 1 isn't exactly the right side of 2; instead, the left side of 1 should be on the left side of the right side of 2 but on the right side of the left side of 2. The two rectangles will be overlapping (in the horizontal direction) if you have either **[1** [2 **1]** 2] or [2 **[1** 2] **1]** (or, if 1 is smaller than 2, [2 **[1 1]** 2], or the opposite, **[1** [2 2] **1]**). Of course, you have to remember that the two rectangles must collide both horizontally and vertically. If you want to treat the rectangles as actual circles, then you need to use circle math instead of rectangle math. You currently have a left side and a width, but instead, keep track of the center and radius instead. Then, just draw the circles on paper and the collision algorithm will be trivial: two circles are overlapping if the distance between their centers is less than the sum of their radii. This is obvious just from looking at the diagram, so make sure you draw it if you don't see what I mean right away. An important thing to consider when doing a collision is that the new velocities are going to depend on... physics. I hope you remember kinematics from high school, because that's what this is. Just draw the diagram of the collision, assume that the objects have some value for a mass (they could well have the same mass, and the term will cancel out, but that's a decision you can make), and decide if the collision is elastic or not. Elastic collisions are usually expected in simple physics models like these because we've been trained from 1980's videogames. In any collision, m1v1 + m2v2 will be the same before and after, and if the collision is elastic, you'll also have (1/2)m1v1^2 + (1/2)m2v2^2 be constant. If the masses are all the same, this comes out to v1i + v2i = v1f + v2f and v1i^(2) + v2i^(2) = v1f^(2) + v2f^(2), where v1i is the initial velocity of object 1, v1f is the final velocity of object 1, etc. This gets a bit more complicated in 2D because while the momentum equation happens in each component separately, the energy conservation equation adds up all of the components together. Luckily, you can abuse some physics and change reference frames to the inertial frame where the center of mass is stationary, which means that the total momentum is 0, and this also means that, in this frame, the two objects will simply exchange energy. It sounds complicated, but really, if you have basic high school knowledge of physics, you can just do this on paper easily. Good luck!
It depends on the licenses for the libraries (etc.) you are using. This applies even if you are giving your project away and not turning a profit. 
Finding workarounds for time-related constraints is definitely a relatable issue especially since it may be quite a while before a new version of the project is released with your change and so now you’re stuck maintaining a fork. The employer policy is unfortunate.
Why
Maybe spend more time learning how that's not related to JS?
Describe your Form naturally: ``` &lt;Form use="bootstrap"&gt; &lt;Field&gt;Email | email&lt;/Field&gt; &lt;Field&gt;Birthday | Date of birth (mm/dd/yyyy) | dob&lt;/Field&gt; &lt;Button type="submit"/&gt; &lt;Button&gt;Cancel&lt;/Button&gt; &lt;/Form&gt; ```
I am rewriting from scratch 😉
These notes applies to javascript generally. The course was not necessarily browser oriented or server oriented, so yes I would say these notes apply to nodejs :) 
💣💣💣
I wish my balls had collision detection...would save me a lot of pain.
Nice! Make another post later so we can see the new version ☺️
as someone that has tried with some successes but mostly not with [https://github.com/antimatter15/whammy](https://github.com/antimatter15/whammy) this looks great
Thanks!