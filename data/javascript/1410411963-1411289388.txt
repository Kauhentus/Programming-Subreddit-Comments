1. How challenging is the test? 2 2. Are the instructions/requirements clear?: 9 The only place I goofed was in erroneously thinking you meant for the strikethrough to apply to the entire line, and so I traversed a little too high in the DOM. Once I re-read the requirements, I realized what you were after. Take that as you will -- it's probably a product of my fuzzy, un-caffeinated mind at 11pm. 3. Depends on the type of code you're looking for. Most devs can probably bang something out that's horrible to look at and difficult to maintain in just a few minutes. Something that is a little more robust? ~45 minutes. If you're looking for drop-dead gorgeous code? 60-75 minutes. Anything more than two hours (for any of this) is... not going to work. (I do wonder how you're going to ensure the candidate respects any time limit given that this is take-home?) 4. Would I be upset at taking the test? No; I'd expect it. I *might* wonder if the interviewer really knew what they were looking for, assuming I'd already read the job description with "ui-heavy" in it. 5. Is this a useful tool to measure proficiency? No. In my opinion, the test is *far* too restrictive, opinionated, and simple to really say much beyond whether the individual can rattle off some basic JavaScript and if they have any searching skills when it comes to looking things up on the Internet. If you could watch the individual code and debug, that would give you some valuable insight into their methodology, but even then, it's still pretty basic. Since this is a take-home test, you don't even have that option. The test is too opinionated wrt libraries and structures. I understand this makes it easier for you to judge the results, but it removes a tremendous amount of flexibility and invention. I would be more interested in whether or not I have the fundamentals and can write easy-to-read and maintainable code rather than whether or not I can code to jQuery or Knockout (all of which a competent dev can learn very quickly). I did the test without *any* jQuery at all -- there's really not a lot here that requires jQuery or that jQuery even makes simpler -- it's just a few event listeners, DOM element creation, and DOM traversal, so I'm not sure it really would tell you anything about the user's jQuery proficiency either. It barely says anything about JavaScript proficiency beyond some basic programming skills. The test is too restrictive and provides too much to the candidate. Personally, I'd leave out the CSS &amp; HTML and let the dev build it -- see what can they come up with. Does it look good? Does it work well? Can they defend their choices? You'd get an awful lot of insight into the dev's mind and design process this way. Spelling out requirements is fine and necessary, but let them come up with the complete implementation. (And here's also a kind of litmus test -- If you got a dev building a table instead of using list items without a *really* good reason, you know to reject them as a candidate.) The test is far to simple -- at least have them hit an API somewhere to see if they can handle XHR and async. Allow them to make changes to some of the functionality (for example -- perhaps someone would build a UI for multiple lists), and then press them on why they made those changes. (The answers will be most revealing.) Personally, I'd also go a bit further and require some CSS work (animations and transitions perhaps?) and perhaps even some view management, given that this is a take-home test. As @jaman99 mentioned, I'd also want to cover cross-browser stuff and basic HTML. Hope that helps. Any competent JavaScript devs out there should be able to pass this test with flying colors in a short amount of time, but it will tell you nothing about their ability to handle UI-heavy work. Good luck with your search, and thanks for a fun diversion!
You can't learn data structures using javascript, the language abstracts away too much from you. For example, everything in javascript is a hashmap. Objects are actually just hashmaps. Hell, even arrays are hashmaps. Everything is a goddamn hashmap. How are you going to learn how to implement a hashmap in a language where everything is already a hashmap? You need to learn data structures in a language that has real arrays, and by real I mean fixed length contiguous blocks of memory allocated in the heap. I'd stay away from using C or C++ because the manual memory management is a headache and doesn't necessarily teach you more about data structures. Java's a good choice.
No worries. It's not like this thread was ever going to be the epitome of civilized discourse anyway :P
1. 3 ( Java developer with 1.5 years of js dev recently ) 2. 9 3. 20 minutes 4. Not upset actually id be happy to see such an easy problem. I did this with no mouse in around 15 minutes 5. No not tough enough. Only a few concepts are examined if any at all. You give too much boilerplate. Just tell them to write a todo application and give them 30 minutes. If they cant do that they will probably just let you down in the end. I mean there are literally 1000 implementations in every framework / language of a todo application. On top of that...in the real world when are requirements given like this and as straight forward. What I would do is describe a situation and get them to come up with a solution. For example, I've given interviews where I tell the candidate...how would you design an application X where I'd want to do Y (ex. creating a task monitoring list, basically a todo for web team ) I let them describe how they would design the architecture. I like to see if they immediately turn to OO principles or come up with something a little less abstracted. Then I say code it / pseudocode for longer functions based on what you just told me while I add random requirements that introduce harder concepts like uses for closures, inheritance, etc... Note: Yes I bring it back college style and make them write everything on a white board while we discuss...
I'm pretty sure its a little over kill for this "test" project to be doing anything but doing simple DOM traversal to find elements.
1. 3 2. 10 3. Half an hour, assuming the programming environment of candidate's choice. 4. No. 5. Eh. As written it's basically a test of your knowledge of jQuery's api, and basic JS coding.
It's minified. First thing to do before you solve the problem is give it real variable names. 
If you sign up for codeschool, you can take the jQuery course for free. I would recommend it. https://www.codeschool.com/courses/try-jquery
1. 5 2. 9 3. ~1 hr give or take 30. 4. no 5. I think it would be useful in that it would be a red flag if they couldn't complete it as a takehome test.
codeacademy is the best. try.jquery and codeschool free course are the same. Tuts has a nice one: http://code.tutsplus.com/courses/30-days-to-learn-jquery I also did teamtreehouse jquery courses (you can get a month for free) and they were definitely helpful but the instructor is annoying.
I would recommend [jqFundamentals](http://jqfundamentals.com/)
Would the input event be a suitable alternative for your needs?
if you use WebGL you can achieve huge boards and speeds, here is my version using 2048x2048 boards http://tamats.com/apps/conway/
Pretty unusable on mobile
I'd say a good solution to this problem can and **should** take more than 10 minutes, without one being incompentent as a front-end dev. If they're going to be evaluating everybody's code, it will be easy to fish out the ones who have a good scalable solution.
See my answer [here](http://www.reddit.com/r/Frontend/comments/2g31v2/highcharts_question_xpost_rjavascript/ckf772b).
It would be much better if it actually ran the code, you could add lines, change things around and then it ran the code and tested the expected output. In theory you would re-write the entire function and pass. The site is a nice idea but need work.
What's the 'html5' angle here? Looks like this could just work pre-html5 as well.
This is breaking news if I've ever seen it. It's not like this has been powering node.js for years now.
You post an introduction video about V8 from 2008 as if it's a new thing...
Also try reading the documentation http://api.jquery.com/ and version 1.4 is older, but I don't think it'll be a huge problem.
Try this book: jQuery In Action. Good one. It explains everything beautifully!
Is there /r/JavaScriptJobs? If not it should be created IMHO.
All js developers in our company use Vim, but I don't remember seeing any must-have plugins besides Emmet, which isn't about js at all. FWIW, here's my [vimrc](https://github.com/mvasilkov/dotfiles/blob/master/vimrc), it's fairly plain.
 var json = JSON.parse(document.getElementById('container').innerHTML);
I use Vi to jungle
I have completed the JQuery track on Codecademy (which is very good), but what really helped me *know* JQuery was TutsPlus' "30 Days to Learn JQuery" course. It's free; just make yourself an account to access it: http://code.tutsplus.com/courses/30-days-to-learn-jquery
Using jQuery: $.ajax({ type: 'POST', url: 'http://192.168.1.57:8081/University/webresources/generals/getAppVersion', data: { someVariable: 'foo' }, success: function(response) { console.log(response); } }); Inside the success function response will be the json payload from the specified url.
I think that jQuery is as much overkill as using something like Knockout. I would swap out jQuery for Knockout for this in a heartbeat. ... It wouldn't be much of a test though at that point since MV* frameworks advertise using this type of project.
the 1st forum that i get so quickly and quality answers... mmartinx honestly u rule thank you so much thank you in the power of n... were n is infinite... ok enough with the sauce... and a last question if u allow me of course... the text that i want to read from this specific webpage is inside the body and inside a span class called string... so can u be more specific? i m asking to many things, iknow,, but by asking we are going tothe town..(joke) anyway thankyou u really helped me
I guess in the programming world as far as web dev is concerned this is probably similar to 2+2 but you need to keep in mind not everyone is you hah I do like your high standards though id work for you.
You should take a look at scion.js :)
A quick introduction to jQuery is in these two videos I recorded during one of my training programs.. https://vimeo.com/album/2554038 Hope these help!!
Thank you for such a through reply. You've hit on nearly all of the points others have mentioned. My original goal was to use this test as a discriminator to filter out bad candidates, but now I see I'm being a bit too kind. Also I was worried that candidates would be 1. put-off by a test and 2. doubly put-off if they had to spend more than an hour working on it. Based on the feedback I've gotten it seems like I was being too kind. I'm going to come up with a new test. 1. It will be less opinionated * You can use libraries that make you smile or none at all 2. It will have less initial code * You're all right, if it's a "UI-heavy" position then they should be able to create something from much less 3. It will be slightly more challenging * I don't want it to be **much** more challenging. I'm more interested in seeing the candidate create maintainable code for a relatively simple implementation. This is a core principle in our workplace. 4. It will cover more concepts * HTML/CSS * AJAX/async * A variety of events * A couple of browser inconsistencies (specifically IE 8 as we have to support that \**gag*\*) Thanks again for all the feedback!
I recommend that you take a look at Eloquent Javascript for your overall learning (www.eloquentjavascript.net) As to learning jquery, I recommend jquery's own resources. They will teach you the basics and the API docs will fill in the rest. http://learn.jquery.com/
Wow. Why? Because.
Atwood's Law.
Must be slow or? **npm** is awesome and all, but it can be slow here and there.
jquery succintly and jquery enlightenment are other good (free!!) resources. 
All that's left is Javascript hardware. Node machines. . . EDIT: all kidding aside, I actually like the sound of "node machines".
No. No no no.
Because someone wanted a new shiny for their resumé.
Read the jquery source itself. Not only will you learn all the behaviors, but you'll probably learn a lot about JS in general. There's a lot of really good code in that library.
Well... there's already two competing JS microcontrollers, [Espruino](http://www.espruino.com/) and [Tessel](https://tessel.io/). Atwood's Law is real!
http://nodebots.io/
Can you really presume X is always greater than 0? First thing I've read is foo() either returns ar[i] or undefined. To eliminate confusion I'd put a simple check: x = x &lt; 1 ? 1 : x;
I build a website using angular as well. On the backend I use rails to provide an api which has basic authorization logic. My angular client uses an predefined API Token which gives access to most common features. I also give users an api token as soon as they register. If the users logs into his account the angular app uses his API token instead (this let the angular app do more things for example: add comments.). I also validate any api call on the backend to do this I create another unique token for the current session and submit this token whenever angular pulls a request. Sure people can still use custom clients if they manage to receive the tokens but I don't think there is a 100% solution for this scenario. My server is also logging referrer for api calls (but I didn't explicitly told angular to do so, most browsers submit the referrer automatically). So in the end I just check all API tokens with a referrer which doesn't belong to my app and remove them. As soon as I removed the app token people have to generate a new one. I'm also interested in a solution for this. 
This can actually get interesting.
Your post was caught by the spam filter since you used a URL shortener; please repost without using goo.gl and it should go through.
Removed, /r/javascript is not a job board.
Feel free to create it :)
No. Setting date component one at a time is OK, as long as you use the correct order. That SO OP problem is because at the time he calls `setDate`, the currently stored month in the `dt` variable only has 30 days. e.g. if `dt` was `12 Sep 2014`, setting the day of month to 31 would be 31 Sep 2014. But since September only has 30 days, the date is adjusted to one day after 30 Sep 2014, which is 1 Oct 2014.
I'm really down with this conceptually. We getting closer to [the birth and death of JavaScript](https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript).
I contacted IKM and already got a response from them. They seem like a good resource. Thanks for the tip!
Dude, I had to use rubygems for the first time in probably a year and half the other day, and holy shit. It was a 10 minute process to download vagrant. I remember rubygems being the shit... NPM is on a whole new level compared to it.
I'd say they are more general comp sci problems. I don't think these would best test a candidate's knowledge of actual javascript.
&gt; Not sure how I feel about this. . . I love node.js, but things like this are starting to feel a little /r/cringeworthy
It doesn't look like anything was done on this project. it looks like it was just starter git files. 
Every new JavaScript "quirk" I learn just reinforces how much better it is to throw errors than try to make sense of a nonsensical input.
Wow, pretty cool! Loved it!
Best of luck with your search! Sorry about having to support IE8. :-(
Good tips! Thanks!
Well you're right, the idea was to make sure people know that it runs on the browser without any plugins. Many examples I saw were done with java, and flash .
Do you have a source for this?
Truth. I have to maintain a ruby server with a sleek webpack'd client. Ruby and it's ecosystem feels so uhg, now.
The proposed solution in the accepted answer isn't fullproof. Starting out at the 31st of a month, if you set the month to a month with 30 days, you'll *end up in the next month*. Example: d = new Date; d.setMonth(11); d.setDate(31); // starting point: first of December d.setMonth(10); d.setDate(1); // first of November? d Result: Date {Mon Dec 01 2014 22:49:39 GMT+0100 (Romance Daylight Time)} So, nah! 
nope. nope nope nope. yo dawg i heard you like JS, so now you can JS on your JS while you JS in your JS. Hardware: http://www.espruino.com/ Kernel: http://runtimejs.org/ Usermode utils: http://node-os.com/ Browser: http://breach.cc/ kill it all with fire.
https://github.com/charliesome/jsos
Are you being a dick? Or do you just have a weird way of asking genuine questions? It's not a joke, manual memory management has nothing to do with algorithms or data structures. [Intro to Algorithms by Cormen](http://www.amazon.com/Introduction-Algorithms-Edition-Thomas-Cormen/dp/0262033844) is a famous book used by a lot of universities with top computer science programs and all of the examples in the book are written in a garbage-collected pseudo-language. A proper algorithms &amp; data structures course focuses on the mathematical foundation that algorithms &amp; data structures are built upon. Worrying about allocating and freeing memory is a distracting implementation detail that adds no value to the course. 
Presumably it would be ***on***DOMMouseScroll="..." if it's an attribute event. Sometimes events don't exist as attributes if they're in development, so try it via `addEventListener()` because according to MDN DOMMouseScroll is not really supposed to be used yet, &gt; Non-standard &gt; &gt; This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future. Also don't use `alert()` to test events because sometimes browsers can suppress them (because they can annoy users, like popups). Better to use `console.log` to test for whether an event is firing. 
Yes, but also set the API to cycle every 6 hours and only make the last days worth of keys valid.
By the gods....what have we done
&gt; The proposed solution in the accepted answer isn't fullproof. It is when you follow the code as prescribed. Your code suffers a similar problem as OP's... I'm going to step through your code, giving the resultant date string for each operation: d = new Date; // Thu Sep 11 2014 19:08:23 GMT-0500 (Central Daylight Time) d.setMonth(11); // Thu Dec 11 2014 19:08:23 GMT-0600 (Central Standard Time) d.setDate(31); // Wed Dec 31 2014 19:08:23 GMT-0600 (Central Standard Time) d.setMonth(10); // Mon Dec 01 2014 19:08:23 GMT-0600 (Central Standard Time) d.setDate(1); // Mon Dec 01 2014 19:08:23 GMT-0600 (Central Standard Time) As you can see, it fouls up when you set `d.setMonth(10)` (and the subsequent call `d.setDate(1)` is a no-op). Since November only has 30 days, and considering the "current day" as `Dec 31` at the time `d.setMonth(10)` is called, it rewinds back to November -- but it overflows on the day, since it's trying to force day 31 on a 30-day month, and so it takes November 30 + 1, which is `Dec 1`. I think the moral of this story is to not reuse date objects unless you're extra careful, and to mind which order you set the properties. 
I really like the idea! Having said that, I would highly recommend not labeling this "1.0.0" software (version specified currently in package.json). An "enterprise" level application without any unit-tests is far from ready for prime-time. Without "live" store examples, I'd consider unit-tests pretty crucial to prove that the existing functionality works as expected. It's also pretty difficult to become a contributor to a new project with a large codebase, without having a test suite to ensure you haven't caused any regressions. If you're not familiar with semantic versioning, I highly recommend checking out http://semver.org/.
I've always felt I should choose the right tool for the job. I think having more available tools is never a bad thing with that philosophy. The advantage of a NodeJS embedded board could be a micro-service deployed in "the real world" with low maintenance/power/space requirements.
Agreed. I'll write some Javascript, because I like the Internet, but Jesus Christ, I actually thought this insanity had peaked with node... 
I f!@#ing love JavaScript. Node.js lets me build sophisticated systems that do arbitrary things efficiently. Bash lets me tell the computer what to do right now. Don't sacrifice Bash on the alter of JavaScript. Rewrite Bash in JavaScript.
Well, since edison is just an stripped down x86; that isn't exactly hard.
ok. Color me ignorant. Why are npm's so great? What do they do better than a more common package format like deb files?
Nodebots just uses node to control the arduino from an actual computer, not compile or interpret js on the actual hardware.
The vagrant gem is deprecated. For a modern version check out the installers on its site
/r/atwoodslaw
yep, found that out the hard way 
Unlike the other gentleman who suggested you can't write data structures in javascript, you very well can. I think his argument should have been, it's ultimately hard to consider yours or any implementation as correct because: 1. It is bad to extend Javascript built-ins like arrays. 2. Some structures you'll just have to emulate a lot of things that will have some unwanted overhead and degrading performance, such as Sets. For instance, a set can be represented using an object: var set = {bar: bar, foo: foo, a: a, b: b} a in set // true set['bar'] // bar set['foo'] // foo It is kind of a hack to say the least. But to be clear, this shouldn't prevent you from implementing your own solution to the problem. For example, [montagejs](https://github.com/montagejs/collections/blob/master/sorted-set.js) and [Facebook](https://github.com/facebook/immutable-js) have pretty descent JS collection libraries. Luckily, ES6 is going to cater to these needs in a better way, so time will tell.
hmm are there any nice books for jQuery?
The problem is npm getting cluttered. It can host non-javascript material. This is an important and useful fetcher. The problem is that it can be abused. Let's face it, npm's real value is that it was a brand new namespace for node developers. Any repository system could do the same thing. We don't use them because we don't want all the crap in a regular repository cluttering ours. 
That doesn't stop apt or yum.
Node is like, fast, dude.
You can't just make cross-domain requests like that. It won't work unless the server sends CORS headers.
Tessel transpiles JavaScript to LUA apparently .... https://news.ycombinator.com/item?id=7869864
This comment haha. . . 
This thread: most amusing I've come across here. First the peak JavaScript comment, then the Yo dawg.. LMAO 
Why not use Express v4 instead express v3?
I heard they want to rebuild Earth's core in JavaScript so it's easier to tweak.
yes, check my blog, I explain there most of the process http://www.tamats.com/blog/?p=409
Dependency hell.
BeagleBone Black does too and it is on ARM
For TypeScript, [json2ts](http://json2ts.com/) does a great job of this.
still cant get through... i m missing smthng here :( i want to read and then store in a variable the text from a specific webpage the text is inside in html body and more specific in span class named string (&lt;span class="string"&gt;"2.00.000"&lt;/span&gt;) i want to read and store the , 2.00.000 , so here is my code $.ajax({ type: 'GET', url: 'http://192.168.1.57:8081/University/webresources/generals/getAppVersion', dataType: 'json', success: function(response){ console.log(response); var appversion = document.getElementsByClassName('string').innerHTML; alert(appversion); } }); but is not working is it a syndax error ? a logical error or missing code?..ohh i m so confused now...
It was also relatively easy to use. I remember going from Python and Ruby to Node.js and wondered why all other package managers were so hard to use. I sometimes have to use Ruby and when I have to install something I mostly have no clue what is going on and hope for the best. You could even just remove the package manager. I believe that duo.js lets you do `require('github-name/repo')` and it will pull in everything without having to create a manifest file.
The equivalent typescript from the OPs sample is: declare module namespace { export interface Post { id: number; title: string; } export interface Comment { id: number; text: string; postId: number; } export interface RootObject { posts: Post[]; comments: Comment[]; } } But as far as I know this gives you nothing in terms of transferring over-the-wire json to instances of these types, does it? You still have to construct these by hand, correct? 
You'd think people would build things because other people thought it'd be useful. Or it serves a need that has gone unserved. Etc. 
I guess it depends. TypeScript interfaces are completely compiled away, but the objects you're left with probably adhere to the contract. You can send these over the wire pretty easily. The idea is that the types are checked at compile-time (which is obviously a benefit of Typescript), which may eliminate the need for runtime checking.
&gt; You can send these over the wire pretty easily. This is about receiving those types over the wire and having them as proper objects with prototype chain etc, instead of dumb data containers.
&gt; Unlike the other gentleman who suggested you can't write data structures in javascript, you very well can. You can also do it in assembly. My argument wasn't that it was literally impossible, but there are so many other better languages for the task that attempting to learn data structures using javascript is wasted effort. Also, I still stand by my statement that you can't write a proper hashmap in javascript, or any other data structure that relies on the indexed fast random access that only real arrays provide. 
&gt; You can do anything with javascript but should you? Exactly my point. You can also learn data structures using assembly but why would you? Javascript's high level of abstraction and general idiosyncrasies get in the way of properly learning data structures, and it is by no means the best language for the job. I've done a couple internships at two totally different web companies and the frontend devs at both clearly had a weaker understanding of data structures compared to the backend devs.
As someone who is currently learning js, can someone explain (or link a site) that explains how #8 works? I've read the brief explanation, but I still don't understand it. 
Saw this on DailyJs just now. Great stuff!
Nice prize, but I call that a half-month's billings.
Ah this is pretty cool! 
See kumiorava's answer. You can't make requests to different domains unless CORS or JSONP is implemented on the remote server. Barring that, you will probably need to use a proxy server. Read more: http://en.wikipedia.org/wiki/JSONP http://en.wikipedia.org/wiki/Cross-origin_resource_sharing
You should change your username to MeBetterThanYou.
/r/humblebrag/
Ain't even humble, I just don't understand these prizes when engineers are already so well paid.
Maybe it's not about the money so much as having an excuse to build something?
Sure, makes sense.
College kids
Sure, I'd happily hire them part time though!
This brought me back to 28.8k for sure
TIL The Onion is on GitHub.
Nice work!
If you're using HTML5 you can use the download attribute. Check it out at [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a). Note that Content-Disposition will override this value if it is set in the header from the server.
Whoops, you're right about the input. Can you fake the input by doing an &lt;a&gt; and stylizing it as the input?
Huh, I might be able to. I managed to find the actual href that's called when the button's clicked. If I could use an &lt;a&gt; instead, I could then use the download attribute if I'm incorrect about the Content-Disposition being set. EDIT: I was so wrong on the href. EDIT: Found it, but I was NOT wrong on the Content-Disposition being set, unfortunately. Is there no way to download the file to, say, a buffer with Javascript, and then export that to a file with a given name?
I believe there's no getting around the Content-Disposition being set. Possibly you'd be able to grab the file and save it into a blob and then have the user download that locally, but I have no idea if that would actually work. Maybe someone else will chime in.
Speak for yourself. I make 5 digits. The largest is not at the beginning.
A couple years ago I made [ResurrectJS](https://github.com/skeeto/resurrect-js) for similar purposes. It seralizes and deserializes object "instances" directly, automatically hooking the parsed result back into the prototype chain so that methods keep working. However, the serialization format, while still technically JSON, isn't structurally the same. 
That's why you should use interlaced images.
This is awesome.
That's an incredibly vague question, you're going to have to be more specific.
Add something to an array and load it
On mobile but the "betty-
Yes, from the same makers of [fartscroll.js](http://theonion.github.io/fartscroll.js/)!
If you'd also like to share your thoughts on the [stackoverflow question](http://stackoverflow.com/q/25813452/1253312), your contributions are appreciated.
Add what to what? Load it where? 
Off topic but I studied under Cormen for my intro to Algorithms course last year! Really great prof. 
Like in a normal programming language add thomething to a databes and also load thecdata base into an javascript array
I ran it in all my browsers, and somehow IE 11 is by far the fastest (it shows up as 'other' in the graph)... kind of wary of those results though. And I'm not sure if you're looking for something async-specific, or just variadic in general, but /u/homoiconic's [allong.es library](http://allong.es/) has a [variadic](https://github.com/raganwald/allong.es/blob/master/lib/allong.es.js#L183) implementation.
Ha, just went to submit this and here it is. Cool, huh? :P
Self post to get more feedback. Mostly Python folks follow me, I'm interested in the opinion of people who actually like JavaScript.
Posted this in r/html5games, but thought you guys might be interested too. Last year, I discovered that many moons ago EA released the source of one of the ports of SimCity, to allow it to be included in One Laptop Per Child projects. I thought it would be a great project to port to the web, give me a chance to tear the thing apart and see how it works, and force me to learn how these new-fangled &lt;canvas&gt; things work. No *Emscripten* here: this was ported by hand, with love. I released a rough cut last November-ish, but have finally had a chance to circle back, give her a lick of paint and squash a pile of bugs (though I'm sure plenty remain). I don't have appropriate devices to test on, so for the moment it remains a desktop-only "no touching" experience. Sound is the other big omission at present. Interested to hear what you think! **Edit**: Thanks for the bug reports everyone. They were really helpful, although there were more latent bugs than I hoped! I've pushed a bunch of fixes live to the site, so hopefully it's more stable.
This honestly sounds like novice level JavaScript - barring, of course, clean code, coding standards, update-ability, etc. If you feel like it, shoot me a PM with the spreadsheet, and I'll have a look at it (no promises yet, though). I haven't really done much professional work, so all I have to show is [my CodePen](http://codepen.io/birjolaxew)
Wouldn't help here. The library doesn't actually cause the images to load slower, but instead takes fully loaded images and clips them, then slowly removes the clipping based on a timer until the image is fully restored, thereby creating the illusion of an image downloading.
Doesn't work for me =(
Oh sure, just make a connection to the database, add your rows of data and then serialize as JSON. See? It's that easy, but seems you are asking for a complete solution rather than having a specific question. We are not here to do your homework. 
Tell me what you think and what can I improve. 
Sorry, betty-cropper.
2. Try using loops to generate many values at once, such as the random numbers. Loops also make it easy to perform functions (such as drawing entities) on many entities at once. 1. Try using arrays to hold items that are similar to each other. For example, the random numbers can be stored in an array. You could also keep all of the enemies in an array, then simply loop through the array and render each of them. 
Yep, rgbRegex3 was an error. Yet I'm not so sure about the semicolons thing. I used to write with semicolons in js, this is my first project where I chose to not use them. 
You should be using semicolons for minifying purposes. You might also consider using [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode). 
I really like it. It's similar to Rails in that it's very easy to get an app up and running with their generator commands. You get a lot of cool stuff out of the box with blueprint routes and web sockets. I didn't use any frontend frameworks with it, just their standard .ejs templates. But because you get free API-like endpoints with your models, you could probably integrate one fairly easily. I think /u/porphyry3 is mistaken that you can't do [model associations](http://sailsjs.org/#/documentation/concepts/ORM/Associations). They were set to include that in their 0.10 release (which appears to be out now). At any rate, big thumbs up for me too.
You really need more than that snippet to understand what's going on. I am assuming all that is contained inside the scope of something else; also that the variable oSession is a custom object that is set and updated elsewhere? For instance, why do search the URL string twice (once with a 'uriContains' function, then later with an "indexOf" string prototype function? It's a bit confusing.
ReferenceError: assignment to undeclared variable onMove file:///home/artificialidiot/micropolisJS/js/MonsterTV.js Line 63
How do I start contributing?
yep, I use it with angular and restangular to access REST endpoints exposed by sailsjs. It works great!
Github link at the top right of the page 😀
This is not "superpowered": function getMeBeers(count){ return count || 1; } Because getMeBeers(0) will return 1. Also about using String.link() - it's a neat trick, but it's even better to avoid compiling html with javascript, at all.
0 (the number) is falsy. So you can always have a check on that in your code. This is just a demo to show how to supply default values using OR operator. 
Check back on JavaScript frameworks in a few years when ``Object.observe`` is in place. That will make it possible to implement two-way binding that resembles what Angular has today, but without a framework that is in charge of "everything" to trigger the dirty checking (the digest cycle in Angular). I think Angular will be much more modular then, and we will see several libraries with a similar approach. Today you might need some kool-aid to believe that this kind of two-way binding is worth the pain of the Angular digest loop and the frameworkness. However, most alternative architectures involves other drawbacks that will not disappear, so I haven't found anything better.
Very good point, and thanks for the comment!
10 really obvious javascript things... like a boss... meh
I understand, but the point I'm making is that you should avoid this kind of syntax for numerical values (at least if the default isn't 0 itself), since 0 is falsy. For example I've made this mistake in a game engine: function Sprite (x, y) { var x = x || 10, y = y || 10, pub = {}; pub.getPosition = function () { return { x : x, y : y }; } return pub; } var player = Sprite(0, 0); var position = player.getPosition(); // position is { x : 10, y : 10 };
Yes. That's a point. I have updated the article now. :)
its not my homework :D but on the internet i found this: $.getJSON("test.js", function(data) { }); but i have no idea how to use it i now how i create the json databese file but i dont now how i can export/inport data.
Can you create a variable to remember if you've ran it already? var hasran = false; //would have to live outside your function if (!hasran &amp;&amp; oSession.uriContains("www.youtube.com/results?search_query=")) { hasran = true; var str = oSession.fullUrl; var sAppend = "+test1+test2+test3"; if (oSession.fullUrl.indexOf(sAppend, str.length - sAppend.length) !== -1) { oSession.fullUrl = str + sAppend; } }
Thanks for sharing. I was just looking into d3 this morning. The timing is perfect!
I've been looking for CSS component integration since I've been using React. Mainly because having to declare a dependency twice (once with npm/browserify for the JS, once with bower for the CSS) feel stupid. react-style is cool but a bit verbose for me. And it doesn't solve the problem of using existing CSS files from dependencies. I think the best solution would be a lib which import a CSS file into your ReactClass.
**To whoever reported this:** While the article isn't bleeding-edge or advanced, it's fairly well-written and appears to be original (at least it's not plagiarized or blogspam). We try not to moderate quality, so long as the rules of reddit (and the sub) are followed -- we try to let up/down votes do their job. Edit: Thanks for the report regardless, it was good to bring this to our attention due to the nature of the account. **To the author (/u/htmlxprs):** You're really close to getting banned by reddit, since your account is indistinguishable from a spammer's account. Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site to /r/javascript, we'll be forced to ban both you and your site from /r/javascript, as well as reporting you to /r/spam for an account ban. Thanks for your understanding.
VBA -- not VB.NET, right? If so it's not just-in-time compiled so a modern JS VM will almost certainly be faster.
Yep, just VBA (Visual Basic for Applications), not VB.NET. Any idea of how much faster? What makes you say it would certainly be faster? I'm new to programming overall and curious. (Thanks for the answer btw)
That's pretty well justified actually. I don't like that bower doesn't provide build features - the fact that people are still have to check compiled artefacts into their repos is pretty abominable. Suppose I just like bower because holy-shit-thank-god I don't need to rely on unstable CDN links anymore haha.
You haven't told us how long your current script takes... but, I would say js would be faster. I have a node script that loops through 45,000 data objects and does some processing and it takes about ~1.5 seconds. [lodash](http://lodash.com/) or [lazy.js](http://danieltao.com/lazy.js/) might be of interest to you.
This is exactly what I've been looking for, can't wait to give it a spin. Thanks!
The script takes about a minute to run. The csv file has about 400k rows but (assuming I'm getting my runtime right) the time should increase linearly.
Wow, interesting. I'm laughing at R - fewest pushes/repo *and* most forks/repo? Either there's something flighty about R programmers, or the language is not great at generalizing things.
Awesome! Let me know what you think.
Anywhere between same speed and an order of magnitude (10x) faster would be my guess. I think we've seen 2x-5x speedups when going from non JIT JS to JIT JS
I sometimes use the `||` operator for default values too - it's my dirty little secret. It feels good: it's short, and, if you know something about the value, it's just as reliable as an explicit check. But, that being said, we should really avoid it when we're trying to Do It Right. If there's one programming principle I believe in, it's writing code that is as simple as possible, and implicit is not simple. Using `||` makes you think about all possible values of a variable and their boolean conversion rules; an `undefined` (or even `arguments.length`) check only makes you ask one question.
http://www.programmableweb.com/apis/directory
Sails is awesome, using it together with Angular too. But yesterday I uncovered a big SQL vulnerability in the Sails-MySQL package. Which is seriously bad IMHO. https://github.com/balderdashy/sails-mysql/issues/147 A friend of mine who's better with this kind of stuff fixed it up, but we've had 0 response from the package maintainer ... https://github.com/balderdashy/sails-mysql/pull/148
Do you have functional specs for this? What is your budget? You can view my experience here: https://www.linkedin.com/profile/view?id=3092214&amp;trk=nav_responsive_tab_profile Let me know if you want to proceed.
Freaking cool. I'm running on a 4GB Dual Core so it's kind of laggy for some of the visualizations. Using canvas instead of SVG might help with the visual performance, but you'll probably see the code base grow because of that. It's nice to see a demo of the Web Audio API and usage of the AnalyzerNode to give you the wave form. FFT is tricky stuff, so it's cool that it's this performant and a lot of it is abstracted for you. I havn't used the Web Audio API, but back in the day (~5 yrs ago), only Flash was able to do this kind of stuff. Altogether, well done.
It depends on the Javascript engine. Node, probably (which is based off google v8). There are dozens of javascript implementations.
The numbers seem somewhat relative to the # of total repo's for that language. My guess is, Java being the second most used language (1st in server development), it would have the community size to uncover a larger amount of issues. C++ and Python being the next two. Vice versa, I think there are probably too many Javascript repo's that do the same thing, and you don't have a large enough community following each distinct project, thus some bugs may go overlooked. 
This is awesome. My only concern is this CDN is brand new and may not have good enough financial backing to ensure a long service life.
Initially looks super cool. May try and use it this weekend.
It's very hard to guess without knowing that the macro/script does. If most of the time is spend on I/O then I say there may not be much of a difference. If you're performing a lot of calculations, then probably JS will be faster.
the "port" also seems to cause problems sometimes. "freezes" the clock and prevents arrow keys from working, etc.
What you have looks fine to me. I saw what I expected to see...
What do you know about the mashable API list? The programmableweb list isn't all free right?
It looks like you can host this locally via node.
Do you mean [this](https://www.mashape.com/)? It depends on the API provider, a lot of them provide a basic limit for free, and to increase you have to pay up
&gt; If you sacrifice the performance of modern browsers in order to improve performance in legacy browsers, you’re doing something wrong. QFT!
Obligatory comment about how number one recommends using type coercion for conditionals and number two forbades it. 
If it is a contract position it doesn't concern me when looking to hire, EXCEPT when I can tell they are bouncing around from place to place because they can't get along with people or a bad developer/employee. "I wanted another contracting position (salary)" in my mind is an acceptable answer when I ask "why do you want to leave your current position?" 
have power plant issues after 5000 population, the you reached 2000 population is forever stuck on the screen. Using latest chrome.
PDUOIA
http://www.publicapis.com/
Www.mashery.com 
VBA has been all but abandoned and mostly still exists for legacy support. JS engines have had a huge amount of work put into them over the past several years. Modern JS engines in Chrome, FF and even IE10 are literally hundreds, if not 1,000x faster than older engines in, say, IE7. VBA was _roughly_ on par with JS on IE7, and although I'm sure some work has gone into it since, I can almost guarantee it hasn't been on the same scale. I'd make an educated guess that current VBA is 10-100x slower than a modern JS engine.
Stack overflow. Their unofficial motto is &gt; Needs more Jquery!
I don't like how it depends on user-agent string being correct. I though we're supposed to rely on feature detection, not browser (version) detection. edit: since they have all the shims on a webservice, maybe a conditional-shim-as-a-service would be nice. You'd include a script that checks what shims to apply and insert only those.
But now a user with chrome will have this script blocking all other scripts for no gain
Looks like you have some misplaced single quotes around rgb().
You're missing most of the closing brackets to your rgba rules; eg: 'rgba(255, 255, 255, 1' But I also agree with /u/Missiles in that you should refactor this code to reduce duplication. 
I totally agree: putting that logic in a separate function makes it easier to test and will make your code cleaner. I'd go a step further and save the output in a variable first, that way you can easily add breakpoints or console.log() for debugging, but that's nitpicking.
I may not understand your use case, but this seems like something better suited for CSS. I would add and remove classes from the element and define the style in CSS. This keeps your themeing in one file and your application logic in another.
This is similar to the [interactive chart example in the Dynatable docs as well](http://www.dynatable.com/#an-interactive-chart) (I'm the author of the latter). Pretty cool.
Always remember to keep your code [DRY](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself). i.e. as soon as you need to copy/paste something within your code more than once, you should step back and re-evaluate how you are approaching the problem in the first place. Also, take a look at [this](http://toddmotto.com/deprecating-the-switch-statement-for-object-literals/) approach which favors object literal syntax over a switch statement.
&gt; react-style is cool but a bit verbose for me Can you elaborate on this? Do you find `ReactStyle(function() { ... })` decorator to be verbose or what? &gt; it doesn't solve the problem of using existing CSS files from dependencies With webpack you can just `require` existing CSS files and then use `className` or `styles` (via react-style) prop to define needed CSS class names on DOM components.
First thing I can see wrong here is that you are using setInterval() instead of setTimeout()
that's because I want the function to check if the layer is loaded or not. It has to be in intervals, since it's checking if the layer is loaded or not every 10 ms.
PIIHB
Link to github repository: http://github.com/appbaseio/jam-with-friends Post on how it works: http://news.appbase.io/posts/233094-jam-with-friends
The rest of the jQuery written in the js.js file works just fine, btw. It's just the form handling that doesn't work. 
&gt; there's literally no reason to be using any timers at all. there is. I am running two Ajax pages inside the layer of "newwindow". Also "newwindow" itself also loads its page by Ajax. All these Ajax pages can't be run at the same time (I tried. Only one of the loads). That's why I created a delay between these Ajax pages by using timers. What other option do I have to do this?
Can I ask why you used deeply nested ternaries instead of a switch? Also why the no-op? Why not just null or undefined or a default value?
Mostly just because I'm a noob and I like the way it looks more than switch :P 
I don't know; it depends where the bottlenecks are in your VB script. If they're I/O related, it might not make much difference. Why not see if there are some profiling tools for VBA and try replicating a simple version in JavaScript using dummy data, and comparing the speed?
I changed the path to the path of the file that's loading the js, but it's still the same. It just reloads the same page but with the form info in the url. The php is PHPMailer. It works with using the action and method in the html, and not the jQuery/AJAX. 
Except it's nintendo game &amp; watch [MC-25](http://p-edge.nl/parachuter/game_watch_games/041_mickey_mouse) Soviets just cloned it.
Haha, man I had that game.
The switch looks fine... It doesn't work because the RGBAs are declared as, e.g. `rgba(0,0,0,0,.25` which is an invalid rule... rework it to `rgba(0,0,0,0,.25)` (closing brace) and it should work. But, the easiest way to do this with the least amount of code is to ensure you separate display from functionality; put your styling in CSS and apply the value as a class directly to the element: &lt;style&gt; .backdrop0 { opacity: 0; } .backdrop25 { opacity: 0.25; } .backdrop50 { opacity: 0.5; } .backdrop75 { opacity: 0.75; } .backdrop100 { opacity: 1; } .backdropWhite { background-color: white; } .backdropBlack { background-color: black; } &lt;/style&gt; &lt;script&gt; $("#textContainer") .addClass(backdropColor) .addClass(showBackdrop) &lt;/script&gt;
Better yet - describe the state of your program in JS/HTML and CSS will describe what colors these states will have. This way, styling and description will be separate. Although in this case it might seem trivial at first glance, since the program describes visual states, eg. &lt;div class="container"&gt;&lt;/div&gt; &lt;a href="" class="backdrop-selector" data-color="white" data-opacity="25"&gt;&lt;/a&gt; &lt;style&gt; .backdrop-white { background-color: rgba(255, 255, 255, 1); } .backdrop-white.opacity-0 { background-color: rgba(255, 255, 255, 0); } .backdrop-white.opacity-25 { background-color: rgba(255, 255, 255, 0.25); } .backdrop-white.opacity-50 { background-color: rgba(255, 255, 255, 0.5); } .backdrop-white.opacity-75 { background-color: rgba(255, 255, 255, 0.75); } .backdrop-white.opacity-100 { background-color: rgba(255, 255, 255, 1); } &lt;/style&gt; &lt;script&gt; var backdrop = $(".container"); $(".backdrop-selector").click(function() { var color = $(this).data("color"); var opacity = $(this).data("opacity"); backdrop .addClass("backdrop-" + color ) .addClass("opacity-" + opacity); }); &lt;/script&gt; 
You are using an iframe or popup window, yes? If so, you can use the onload event and do it without timers Edit: The requested URL must then be on same domain
You're checking, 100x/sec for the page to have updated. When your first request completes, fire of the second in its callback. That's still a lousy answer elegance wise, but isn't going to kill your site on low power devices.
If you're new to programming then I suggest you try to follow best practice over what looks pleasing, because everything looks pleasing once you're in the habit of using it but its other pros and cons will remain.
This is based on a popular Russian cartoon of the same name. It was essentially Tom and Jerry except now its a wolf and a hare.
A good point, but I'm not sure that there are a lot of bugs that are so hard to find that they're much more likely uncovered by a community of thousands than one of hundreds. Another explanation may be that "issues" also includes feature requests and similar commentary, which would definitely increase alongside community size. Then of course there are factors we don't know, like which languages lend themselves to bugs, misunderstandings, or feature requests. Also, if we're talking about a correlation between total repos and open issues per repo (which does seem present but pretty loose to me), then we've got some pretty strong noise from TypeScript and a few others, which would require their own explanation.
no. It's a layer.
Layers have not existed since Netscape 4. (15y ago.) What do you mean when you say "layer?"
&gt; getElementsByClassName is not universally supported It's supported in everything but IE8. And I'm sure there are shims for IE8. As for why your code isn't working, you're `longinfo` variable contains a _list of nodes_, not text.
From my understanding, changing classes forces the browser to re-render everything, though, doesn't it?
What I mean is while I'm all for the CSS right in the component approach, I don't want to write my stylesheets using js functions. I'd prefer a bridge from CSS files. Which would leave you free to use any CSS preprocessor (less.js) It's still a step in the right direction don't get me wrong. 
Thank you for that. I'm still stuck, though. Will getElementsByClassName get every single div with the same class name? How else can I give each div unique text so my function knows which text goes with the click?
Removed, please see our [guidelines for promotion](http://www.reddit.com/r/javascript/wiki/index).
You have some on **http://www.codecademy.com**.
why do you even have a switch statement if every case runs the same code? Also, you can combine multiple cases that run the same code, like [so]( http://stackoverflow.com/questions/13207927/switch-statement-multiple-cases-in-javascript)
Why isn't this a JS fiddle? If you want people to spend time helping you at least meet them halfway. It's likely you'll solve this yourself in the process of making a fiddle.
'rgba(255, 255, 255, 1'); the single quote must go after parentesis NOT before, and you miss another parentesis to close .css(
In your submit event handler you have event.prevent.Default. It should be event.preventDefault(); Sorry about formatting, on my mobile.
Seems very similar to the [Crossfilter](http://square.github.io/crossfilter/) demo which uses d3.js. Also leads to [dc.js](http://dc-js.github.io/dc.js/).
I like this much better. It is always a good idea to avoid using javascript to add CSS to the markup. Keeping the CSS in a CSS file is always superior since you know where to look and others that use your code can find it easier.
Whoops. That fixed everything. Thank you!
Wow. Thank you all very much. I feel like an idiot for not checking the bracket and comma. This is my first week with javascript and and purely only learnt off another script so I guess it's teaching me some bad habits. I appreciate all your comments and will try a bit better. Thanks again
Don't know why, but I hate every nodejs tutorial that use as database mongodb.
thank you!
Thanks for the tip on Sequelize. I will check that out.
Can you add the popularity of the rooms into the room list? They all look empty, and it's frustrating to click through all of them to find that they're all empty.
http://en.wikipedia.org/wiki/Don't_repeat_yourself http://en.wikipedia.org/wiki/Cyclomatic_complexity Here these should help. Knock yourself out.
is this for node or a browser? If it's for node, the v0.11 branch has generators built in. You have to enable them with the `--harmony` flag
 $ nvm use 0.11 Now using node v0.11.13 $ node --harmony &gt; function *double(start, end) { var n = start; while (n &lt;= end) { yield n*2; n++ } } undefined &gt; var numbers = double(0,50) undefined &gt; numbers.next() { value: 0, done: false } &gt; numbers.next() { value: 2, done: false } &gt; numbers.next() { value: 4, done: false } &gt; numbers.next() { value: 6, done: false } &gt; numbers.next() { value: 8, done: false } ... &gt; numbers.next() { value: 96, done: false } &gt; numbers.next() { value: 98, done: false } &gt; numbers.next() { value: 100, done: false } &gt; numbers.next() { value: undefined, done: true } &gt; numbers.next() { value: undefined, done: true } 
everyone's super overcomplicating this function getRGBA(showBackdrop, backdropColor){ return 'rgba(' + (backdropColor === 'backgroundWhite'? '255, 255, 255, ' : '0, 0, 0, ') + parseInt(showBackdrop.replace(/\D+/g, '')) / 100 + ' )'; }
darn you did the same thing i did
Besides the fact that you can programatically generate the proper rgba value as shown by /u/fjfjjfffjjf this would otherwise be a great case for refactoring large conditionals/switches using a lookup table. You can simply create an object like: var colorMap = { 'backdropBlack' : { 'backdrop0': 'rgba(0, 0, 0, 0)', .... //all the others }, 'backdropWhite' : { 'backdrop0': 'rgba(255, 255, 255, 0')', ... //all the others } }; //now you can just do var textColor = colorMap[backdropColor][showBackdrop]; $('#textContainer').css('background-color', textColor); 
Cuts down on round-trips to the server. Without frontend validation, the user has to be redirected to either an error page, or back to the original form with information about the failed validation. For an service with few users, it's fine to pass on the frontend validation. When you've got millions of users, failed validation redirects cost you money.
frambot, didn't anticipate these many rooms :D, and such a great response. Adding room popularity is a good idea, will be adding it!
&gt; Use `[]` to create a new array. Writing `var a=[1,2,3]` will create a 3-element array whereas `new Array(N)` will create a physically empty array of N logical length. The situation described here is one of the few cases where I would actually **want** to use `Array(length)`. To declare an array with a predefined length. A better comparison would be: `[1,2,3]` vs `Array(1,2,3)`
Yes, google "javascript createEvent mouseevents". It's a rather obscure API that I've only used a couple times, so I can't really help much on specifics.
Yesss!! Thanks!! :)
User experience and immediate feedback. People hate it when they submit a form only to have it come back failed -- even worse if inputs are lost along the way. 
Worth mentioning that if you're feeling lazy and/or only care about supporting the latest browsers/devices, if you use html5 attributes/types the browser will do the validation for you (aka no extra work). E.g. "type=url" for a text input box for a web address, or simply adding attribute "required" to make sure a field has a value.
This is for the browser.
If you're not sure why you hate something, you probably should do some reflecting on that. That isn't very healthy.
Great post. i use NoScript to disable JavaScript by defaut, then selectively whitelist (either temporarily or permanently) JavaScript from certain domains. My primary reason for doing this is not to block ads in general - i'm more than happy to look at ads that aren't animated or flashing, or that don't take up a substantial part of the screen[1] - but as a security measure. Why would it make sense to automatically trust code from a server with a name like 'axdv. zscfbh.com'[2]? [1] And indeed, sometimes click on them. i try to encourage advertisers that don't scream at me, metaphorically speaking. [2] Not an actual example, but pretty close to a number of hostnames / domain names i've encountered.
They serve 2 different purposes. The purpose of backend validation is to prevent wrong data. Frontend validation is there to guide the user in entering the correct data in the most convenient and quick way. Backend is for prevention. Frontend is for guidance and convenience. 
I would recommend Hapi has a great alternative to Express. However, we still use Express for our production server. We are planning on switching whenever we find ourselves not so busy.
Part of the equation is that it's validation without leaving the page. If you only want to write backend validation and thus prevent doing redundant work,: some frameworks can automatically provide server side validation with the form submitted via Ajax, thus, without leaving the form page, too. 
It certainly is one of the most used frameworks. In our company we have a number of actively maintained projects based on Node and Express.
Uh, better user experience? Why make your user wait for their data to have to make a server roundtrip before they figure out they fucked up?
https://facebook.github.io/regenerator/
First of all, IANAL, so I cannot lawfully give legal counsel. Usually, a lawyer drafts up the terms for such a license. This is going to cost a bit, but if you get into legal hassles about the license, he is liable to recompensation for damages. If you try it yourself, good luck with that. Those terms have to include the limits on your and the customers' side, e.g. redistribution (someone who includes that library wants to sell the result to someone else), liability in case of errors, support, etc.; You'll also have to define those applications that are free of use and those who will have to be paid for.
I thought about using the CC 3.0 for the free use ( http://creativecommons.org/licenses/by-nc-nd/3.0/ ). I think we are relatively secure with that. I am aware that the other, commercial license needs to - at least - be checked by a lawyer first, because of course IANAL, too ;) My question was more about how to sell and distribute such a license.
sails uses express :)
It's quicker for the client and saves you server time. The client does not have to wait for a request to go out and a response to come back. The server might be quicker at checking than the browser, but the added request and response makes it slower. I have no data on this, but I've seen enough examples of lightning-fast JS form validation that I don't think an AJAX request can be quicker. The main reason JS is so popular is that more and more tasks can be handled by the clients browser. In the old days, every aspect of dynamic pages were handled by servers (PHP/ASP/Python scripts rendering HTML pages), but nowadays they only have to handle the data and server some JS files and HTML templates. So, checking form data before sending it to the server makes sure that there is no wrong data sent to the server. Again, you take away a bit of the server load and ask the browser to work a bit more. Of course, since you'll have to recheck on the server it does not take away all the work, but if you prevent sending wrong forms to the server, you'll have less requests, so the server has to check less often. Note that server-side checking is always obligatory, because your frontend is not the only script that can send requests and JS is easily 'hackable', i.e. validations scripts can be turned off.
Indeed this - Its far better to be defensive on your frontend as if you have to parse a server error it creates more work to pop a friendly notification, plus any time it spent in transit.
Usability
Express *is* the quasi-standard web framework for node. We have a large express codebase, but we are going to move to [koa](http://koajs.com) soon.
Oh, thanks for that heads up! I'll need to investigate in this.
What would be the reason of that? I won't uglify the code since I want people to be able to look into it and understand how it works in order to extend the library with own UI modules. I don't understand how the ability for humans to read our code affects the restrictions on using it commercially. I could still take a obfruscated library and drop it into my project. The browser won't care about that and it would work fine even when I never purchased a license.
Yeah, and the fact that basic validation was added to HTML5 explains a lot about why you'd do it in JS. Not only is it faster to check client side, if you ask for a number and someone puts in "cat", you can prevent any server requests at all, and leave the server free to more deeply validate legitimate requests. 
We often forget when the thrill of creating something new is pumping in our veins, but we should remember that most **programming is basically maintenance**. If you have to choose between *anything* and making your life easier in the future, choose the latter.
Did you consider exposing your backend via RESTful service? By transferring data as JSON to/from the client side you would have the option to still have a firm grasp over how data is processed while giving you some room to experiment what to put on the client side. I have a good experience with DurandalJS, but unfortunately that's going to be discontinued in favour of AngularJS (I personally don't like Angular). There's also EmberJS which I heard was difficult to wrap your head around. What is your development/target platform?
No reason why not. There was a bit of a kerfuffle with the main contributing team resenting the fact that the express brand been unceremoniously sold out from underneath them to StrongLoop, but I see no reason to conclude that Express itself has jumped the shark. **Edit**: Was it strongloop?
User data validation on the frontend is for user experience. Data validation on the back end is for security and data integrity (and fallback user experience if, say, the browser doesn't support your HTML5 form validation). 
I have to agree, although our CTO gave us a heads up whereas making things easier to give out a prototype sooner will be much worse when it gets larger and it will be difficult to maintain and refactoring it will be closely to impossible.
UX
You can draw inspiration from how [HighCharts][1] has done this. They use the same model for their product. [1]: http://shop.highsoft.com/highcharts.html
Behind every great web framework there's express lying around(Or at least it can be plugged into express)...
As long as you can spit out JSON from the server (and consume it as well), ultimately it doesn't matter what you use on the client side, it will come down to personal taste. Try out a few. I don't know how easy it is to unit test your REST API's on Rails, but the separation concept is generally favourable. If the project is simple, only needs to look good and doesn't require a fancy client side MVC infrastrucutre, you can just use [Twitter Bootstrap](http://getbootstrap.com/) (or [Foundation](http://foundation.zurb.com/)) for rapid UI prototyping.
I think you should try out Flux + React. Here's why I chose it over angular: - Component based programming. - Can be pre-rendered on the server so you don't lose that SEO stuff. Keep in mind that Google crawler is not the only robot that crawls - Embedly is another one and it utterly fails on most angular setups. - Lower learning curve (compared to Angular). - Doesn't care about the rest of your stack. If you're already using Angular or Backbone, it should be straightforward to add react. - React components &gt; Angular components. Especially when using JSX. I'll take JSX over concatenated HTML strings anyday. Why Flux: - Data goes one way - "Global" states and data stores - React will be used to display information and trigger actions, that's it. The gist of the business logic will be in flux. 
And of course you can use [polyfills](http://html5please.com/#form validation) for older browsers.
[**@feross**](https://twitter.com/feross): &gt;[2014-09-12 15:04:45 UTC](https://twitter.com/feross/status/510443904152653824) &gt;WebTorrent now works in the browser, end\-to\-end! Check out an example app: [*instant.io*](http://instant.io) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2ggc78%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
[Yeoman](http://yeoman.io/) is popular and worth a look. It creates a workflow using a lot of the tools you've mentioned. 
I recommend giving Webpack a try. It will do end-to-end building and optimization for both js and css. 
JS lives on the front-end as a protection layer. IO and over-the-wire are by far and away the slowest parts of any transaction. The extra over-the-wire caused by multiple, needless requests to the server can be alleviated by a simple check on the front-end. There's no need to make a request to the server, for example, to determine whether the user's password contains upper, lower, and numeric characters. You protect the user on the front-end, by making their life more 'idiot proof', but you protect yourself on the backend as well in case someone disabled javascript, or uses some other means to submit invalid/incorrect data. Business rules should always be enforced server side, and try to protect the user from having to wait to be told it violated some rule, when it can be done immediately on-screen.
This is very cool! 
So basically a tutorial on how to use their API...
RequireJS is my go-to solution. I'm looking into webpack as well, but there's not enough there to make me switch, yet. Browserify is the other go-to solution, but I'm not a big fan of it for two reasons: - Code can't run in the browser without first going through the build process - browserify, like node, doesn't handle duplicated dependencies across submodules; my understanding is you need to rely on npm dedup, which is still marked experimental and completely failed the last time I gave it a shot If you can overcome those two problems, you'll have access to the huge repository of third part code through NPM Traceur and other ES6 transpilers tend to not put out code that is extremely slow- nothing to stop you from experimenting, but not really ready for prime time either- I think the 'let' keyword was one of the worst offenders, IIRC.
I use an abbreviation of the class itself (or function name), so I can see that it represents the "global namespace". 
"self" is already preset in many browsers. I use var _this = this if I really feel the need to save my context, though I prefer not to do that if possible.
Always used "self". Like /u/acoard said, it fits with OOP-development. It is also a JavaScript keyword (but not reserved)... it normally contains the Window object. I also use Function.apply(thisarg, arguments) a lot
Neither. I use `.bind(this)`. Which is always the correct answer.
You're asked for a Java program, not JavaScript. I won't tell you the finished program, but only pseudo-code to show you how to solve this: // definitions: speed = 69, driving_per_day = 12, distances = { memphis: 767, tampa: 1436, vegas: 1829 } print heading for item1 print distances.memphis / speed as float print line of dashes print heading for item2 print distances.tampa / speed as float print line of dashes print heading for item3 days = distances.vegas / (speed * driving_per_day) print days as int, (days modulo 1 * driving_per_day) as float Have fun.
I used to work with a guy who was big on Hungarian notation; so, he would use either mThis or oThis depending on the situation.
I changed the code to emit a better message in [commit 2c519de](https://github.com/graememcc/micropolisJS/commit/2c519de75d61f0a5bca09cbdc4b01f7dfbdac198) and have pushed the fix to the live site!
Thanks for both reports. I think the "sprite is undefined" error was coming from getBoatDistance, which I've fixed in [commit fa89304ab](https://github.com/graememcc/micropolisJS/commit/fa89304ab4a5588455c4438dd70062018850290c), and I found a whole host of bugs relating to ports and ships, which I've also fixed
Thanks for the bug report! Fixed the makeShipHere issue in [90b3a3ec](https://github.com/graememcc/micropolisJS/commit/90b3a3ec1ab48e9adbfe17417b4d347e7044b042). It was the rail over water that was buggy: I uncovered a few bugs relating to water and sprites - too many commits to list. Have pushed the fix live.
If you have to support IE6/7, I'm sorry. If you have to support IE8, a polyfill is cheap and easy.
Correct--but you should be handling that reference like you would any other function reference.
I'm looking at the population message issue, although it could just be the sim had nothing negative to say! Not sure about the power issue, but note that power plants have a finite capacity, and you need to build more as your city size increases.
I think it would be a very good idea to speak with your professor/teacher.
You're right, but I know a bunch of devs who will put their original function reference into the object prototype and bind that function to this when they call addEventListener. Actually, I used to make this mistake a ton back when I started writing OO JS, and it's a common mistake many devs make.
Interesting project idea. Is the source code up anywhere?
Thanks for mentioning the polyfill thing. I wasn't aware of that term before. This right here is why I love coming to this sub :). I've written some small similar stuff to support array/dom functions that IE8 didn't have, this type of thing sounds pretty handy.
You can use either grunt or gulp and some associated plugins to do this. Check out: https://www.npmjs.org/package/grunt-usemin https://www.npmjs.org/package/gulp-useref
WebTorrent now works in the browser, end-to-end! WebTorrent is a pure JavaScript client for the Web. ([http://webtorrent.io](http://webtorrent.io)) [MIT License](https://github.com/feross/webtorrent/blob/master/LICENSE) [watch the progress on openhub.net](https://www.openhub.net/p/webtorrent)
Browserify + npm is really all you need. If you want something fancier at the application level (i.e. asset management) you can use webpack, parcelify, atomify, etc; but keep that code out of your core npm modules.
- if you use beefy or a watch task you will never notice it. Everybody has watch tasks already for LESS/etc so I don't really get why this is a problem. - browserify doesn't duplicate dependencies unless they are different versions. The extra file size is negligible in almost every case. RequireJS isn't going to help you there; it will just give you headaches when you realize your code is breaking because of version hell The real trouble with browserify is getting into the "small modules" mindset. If you are developing apps with jQuery, ThreeJS, and other "monolithic" frameworks, and have no intention of modularizing and re-using your code, then you will probably find it hard to switch. 
https://github.com/feross/webtorrent
Very cool. I'd love to see this turned into some sort of service with accounts and such. ^^^- ^^^NSA
Maybe you can use es6 arrow functions. It fixes some issues with current function literal, including the need to keep a reference to this, because it autobinds this. Or so I have heard. 
Missing my favorite uh.. "feature" of JavaScript: &gt; Math.pow(2, 53)+1 === Math.pow(2, 53) true
&gt;There's also JSTorrent, which is a Chrome extension. But I guess WebTorrent takes the idea a little farther by not requiring you to install a plug-in either. If something requires API that is not part of a browser out of the box, it is irrelevant in this regard; so yes, i agree :) &gt;If it works the way I think it does, this could be a great way for legitimate sites to let users download big files like Linux distributions and videos without the website having to pay for tons of bandwidth. And also for the illegitimate ones. We can guess how long it will take thepiratebay &amp; co. to have it on their sites -- popcorntime purely in the browser, in time, on every modern desktop, laptop, smartphone, tablet, even TV. Including iThings -- do you know how much Apple hates bittorrent and tries to fight it as much as it can?
Actually in the context of this question, `.bind( this )` is _rarely_ the correct answer if you know what you're doing. The only time you should be using `.bind` is to pass functions around (event handlers, functional programming, etc). But OP's question is about scope closure, so that doesn't apply. The _actual_ correct answer: - Use `thisVar` whenever it's available, e.g. on Array methods: someAry.map( function(){ ... }, this ); thisVar ----^ which passes `this` into the nested function - Use `self` or `that`, or whatever you want (I use `self`) otherwise. It's _significantly_ faster than `.bind()`
Use `thisVar` whenever it's available, e.g. on Array methods: someAry.map( function(){ ... }, this ); thisVar ----^ which passes `this` into the nested function. If it's not available to whatever you're doing, my personal preference is `self`, but it's just that -- preference.
I don't think this class has covered such advanced things like hashes, multiple declarations per line, and having fun.
This is my preference as well.
Significantly faster is a moot point when 99% of the time it will not make a difference. ;) Bind is fine if you like it. I prefer it to selfs all over the place. 
If i'm not mistaken, this is more a feature of floating point numbers
And that thinking is what leads to slow code. Bind is _not_ fine in many circumstances. It shouldn't be used in tight loops, for example. Yes, it's a tool, and all tools have their place, but saying "always use it" is stupid.
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 1. [**IEEE 754 double-precision binary floating-point format: binary64**](https://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64) of article [**Double-precision floating-point format**](https://en.wikipedia.org/wiki/Double-precision%20floating-point%20format): [](#sfw) --- &gt; &gt; &gt; &gt; &gt; &gt;Double-precision binary floating-point is a commonly used format on PCs, due to its wider range over single-precision floating point, in spite of its performance and bandwidth cost. As with single-precision floating-point format, it lacks precision on integer numbers when compared with an integer format of the same size. It is commonly known simply as *double*. The IEEE 754 standard specifies a __binary64__ as having: &gt; &gt;* [Sign bit](https://en.wikipedia.org/wiki/Sign_bit): 1 bit &gt;* [Exponent](https://en.wikipedia.org/wiki/Exponent) width: 11 bits &gt;* [Significand](https://en.wikipedia.org/wiki/Significand) [precision](https://en.wikipedia.org/wiki/Precision_(arithmetic\)): 53 bits (52 explicitly stored) &gt;This gives from 15–17 significant decimal digits precision. If a decimal string with at most 15 significant digits is converted to IEEE 754 double precision representation and then converted back to a string with the same number of significant digits, then the final string should match the original; and if an IEEE 754 double precision is converted to a decimal string with at least 17 significant digits and then converted back to double, then the final number must match the original. &gt;The format is written with the [significand](https://en.wikipedia.org/wiki/Significand) having an implicit integer bit of value 1 (except for special datums, see the exponent encoding below). With the 52 bits of the fraction significand appearing in the memory format, the total precision is therefore 53 bits (approximately 16 decimal digits, 53 log10(2) ≈ 15.955). The bits are laid out as follows: &gt;[](https://en.wikipedia.org/wiki/File:IEEE_754_Double_Floating_Point_Format.svg) &gt;The real value assumed by a given 64-bit double-precision datum with a given biased exponent and a 52-bit fraction is &gt;&gt; &gt;or &gt;&gt; &gt;Between 2^52=4,503,599,627,370,496 and 2^53=9,007,199,254,740,992 the representable numbers are exactly the integers. For the next range, from 2^53 to 2^54, everything is multiplied by 2, so the representable numbers are the even ones, etc. Conversely, for the previous range from 2^51 to 2^52, the spacing is 0.5, etc. &gt;The spacing as a fraction of the numbers in the range from 2^*n* to 2^*n*+1 is 2^n−52. The maximum relative rounding error when rounding a number to the nearest representable one (the [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon)) is therefore 2^−53. &gt;The 11 bit width of the exponent allows the representation of numbers with a decimal exponent between 10^−308 and 10^308, with full 15-17 decimal digits precision. By compromising precision, subnormal representation allows values smaller than 10^−323. &gt;The double-precision binary floating-point exponent is encoded using an [offset-binary](https://en.wikipedia.org/wiki/Offset-binary) representation, with the zero offset being 1023; also known as exponent bias in the IEEE 754 standard. Examples of such representations would be: &gt; &gt;* Emin (1) = −1022 &gt;* E (50) = −973 &gt;* Emax (2046) = 1023 &gt;Thus, as defined by the offset-binary representation, in order to get the true exponent the exponent bias of 1023 has to be subtracted from the written exponent. &gt;The exponents 00016 and 7ff16 have a special meaning: &gt; &gt;* 00016 is used to represent a [signed zero](https://en.wikipedia.org/wiki/Signed_zero) (if M=0) and [subnormals](https://en.wikipedia.org/wiki/Denormal_number) (if M≠0); and &gt;* 7ff16 is used to represent [∞](https://en.wikipedia.org/wiki/Infinity) (if M=0) and [NaNs](https://en.wikipedia.org/wiki/NaN) (if M≠0), &gt;where M is the fraction [mantissa](https://en.wikipedia.org/wiki/Significand). All bit patterns are valid encoding. &gt;Except for the above exceptions, the entire double-precision number is described by: &gt; &gt;In the case of [subnormals](https://en.wikipedia.org/wiki/Denormal_number) (E=0) the double-precision number is described by: &gt; &gt;Although the ubiquitous x86 of today use little-endian storage for all types of data (integer, floating point, [BCD](https://en.wikipedia.org/wiki/Binary_coded_decimal)), there have been a few historical machines where [floating point](https://en.wikipedia.org/wiki/Floating_point) numbers were represented in big-endian form while integers were represented in little-endian form. There are old [ARM](https://en.wikipedia.org/wiki/ARM_architecture) processors that have half little-endian, half big-endian floating point representation for double-precision numbers: both 32-bit words are stored in little-endian like integer registers, but the most significant one first. Because there have been many floating point formats with no "[network](https://en.wikipedia.org/wiki/Computer_network)" standard representation for them, there is no formal standard for transferring floating point values between diverse systems. It may therefore appear strange that the widespread [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754) floating point standard does not specify endianness. Theoretically, this means that even standard IEEE floating point data written by one machine might not be readable by another. However, on modern standard computers (i.e., implementing IEEE 754), one may in practice safely assume that the endianness is the same for floating point numbers as for integers, making the conversion straightforward regardless of data type. (Small [embedded systems](https://en.wikipedia.org/wiki/Embedded_system) using special floating point formats may be another matter however.) &gt;(1/3 rounds down instead of up like [single precision](https://en.wikipedia.org/wiki/Single_precision), because of the odd number of bits in the significand.) &gt;In more detail: &gt;Using floating-point variables and mathematical functions (sin(), cos(), atan2(), log(), exp(), sqrt() are the most popular ones) of double precision as opposed to single precision comes at execution cost: the operations with double precision are usually slower. &gt;One area of computing where this is a particular issue is for parallel code running on GPUs. For example when using [NVIDIA](https://en.wikipedia.org/wiki/Nvidia)'s [CUDA](https://en.wikipedia.org/wiki/CUDA) platform, calculations with double precision are 3 times as slow as with [single precision](https://en.wikipedia.org/wiki/Single-precision_floating-point_format). &gt; --- ^Interesting: [^Single-precision ^floating-point ^format](https://en.wikipedia.org/wiki/Single-precision_floating-point_format) ^| [^Quadruple-precision ^floating-point ^format](https://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format) ^| [^Floating ^point](https://en.wikipedia.org/wiki/Floating_point) ^| [^Half-precision ^floating-point ^format](https://en.wikipedia.org/wiki/Half-precision_floating-point_format) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ckj1d6n) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ckj1d6n)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I hope you killed him.
Removed, Java != JS.
It doesn't matter much. I use `self`. Flip a coin.
I think you're confusing VBA with Visual Basic. VBA is still a very live, viable part of Microsoft Office.
I use a single "self", defined at the top of my class definitions. When writing your codebase thoughtfully and OOP-ly, you shouldn't need any other finicky "this" hacking. In ES6, arrow functions will make everything **way** simpler, as they inherit their parent closure's definition for "this". Beast for async scenarios (e.g. requestAnimationFrame, XHR).
I have the exact opposite opinion as you. Requirejs makes doing anything other than its particular workflow incredibly complicated. I think it is okay as an async loader, but not as a general module system. Edit: can you elaborate on how browserify adds another dependency?
Just because people commit a mistake out of ignorance (and/or lack of experience) doesn't lessen the utility of any technique. Arrow functions will help avert .bind shenanigans, though.
This is key. If you're automating the Excel object, performance will be slower than it will be by using ADO. If most of the processing time is reading the file, you may find little difference in processing time if your'e using the same method of data access in both languages. 
As a name, `that` has all the problems `this` has, so `that = this` is more confusing . `self` is a better name all around.
No, I'm not. VBA isn't only part of office, it can be used in .htaccess files, as a script type in ie, etc. That doesn't mean it's widely used. My statement was that tons of effort have gone into JS engines over the past few years. VBA has an extremely limited audience, and the vast majority of applications using VBA have no need to be highly performant. Therefore, I'm saying I highly doubt VBA had come even close to keeping up with JS as far as performance increases go.
As many already has pointed out what you need is to start writing your modules as either AMD or CommonJs modules. This means using either RequireJS or Browserify/Webpack. Both got their pros and cons, so I would suggest you read a bit on both before you decide. I personally ended up on Browserify(for development you can use Watchify, that is Browserify with a built in watch). Browserify runs on NodeJs( as almost all web-development tools these days), so you will need to add this to your workflow also. It was mainly two reasons I went with this over RequireJS. * The first was being able to use NPM(Node Package Manager) for my handling all my external dependencies. This means that almost all modules you will need already is available on NPM, so the need for creating "shims" for external dependencies is something that happens very seldom! I earlier used Bower, but using NPM and being able to "require" all my dependencies out of the box just works! * The second reason is, that in my opinion, Browserify(and CommonJs) is just easier to get up and running on. Very little configuration needed and very easy to create a module. *"module.exports ="* and your good to go. In addition to Browserify I would recommend a task-runner. Once again you god a couple of very good tools running on NodeJs. Here you got Gulp and Grunt. They are basically the same, some syntax differences in the configuration, but they perform the same service for you, run tasks. These could be concatenating, minifying and so one. 
I use var me = this; It is only 2 characters and does not look like 'this'. This is the only thing that has survived my ExtJs days.
If you know Express and like it just continue. It is proven, well tested and works great! A new framework pops up every week, trying to solve the exact same problem over and over again. So instead of following the hype jumping from framework to framework, just learn one really good instead!
You need a master controller. It could plausibly be one of your pages. var p = [ window.open(/* page 1*/), window.open(/* page 2 */), window.open(/* page 3 */) ]; setInterval(function() { p[0].location.href = p[0].location.href; }, (15).minutes()); setInterval(function() { p[1].location.href = p[1].location.href; }, (45).seconds()); setInterval(function() { p[2].location.href = p[2].location.href; }, (2).minutes();) edit: fix formatting
I haven't experimented with setInterval before, but I assume it will reload the pages at the specified times? The only problem I see with this, is if the user in on the current page and scrolling...then interrupted by the reload. Is there a way to call the reload of page 1 in the success of a function on page 2?
If I understand correctly you got 3 instances running in separate tabs/browser windows? You go two obvious solutions. * Do it all client-side. What you wish to do is to create a parent/child relationship between the different tabs. To open a tab from another you can do: *"var childPage = window.open("http://page.url","_blank")"*. You can then to *"childPage.location.reload()"*. If you wish to reload from the childPage you can run *"window.opener.location.reload()"* * Another method, is to do it server-side using web-sockets. This might be a bit more complex, but also a bit cleaner. What you wish to do is open a web-socket with each of the 3 pages, using some kind of user-id/cookie, to identify the user. So when one of the pages requests a refresh it sends a request to the server, which then pushes a reload message to the other tabs listening. 
I always use `bind`, which I consider cleaner than binding scope to a variable. Example: someMethod: function() { $.get('helloworld.txt', this.someOtherMethod.bind(this)); }, someOtherMethod: function(text) { console.log(text, this); } IE8 and below and Safari 4 and below need a shim: https://gist.github.com/jussi-kalliokoski/978329
hmm, I'll take a look into the web-sockets. The parent-child approach will only work for one of the 3 pages, depending on which of the 3 tabs was the parent. But I need to refresh all 3. Thanks.
"popcorntime purely in the browser" this would be amazing. 
&gt; Until BitTorrent clients support WebTorrent, "pure" WebTorrent clients can only download from other WebTorrent clients. This is really cool, but WebTorrent != BitTorrent...
If performance was a concern you should not be using a forEach anyways.
Express and Koa seem so similar, what advantages will it bring you?
I avoid .bind(this) for two reasons: * Performance cost * Hinders readability as you aren't sure on the scope of "this" until you've read the entire function body. Sometimes it's bound, sometimes it's not. It's especially annoying when people use bind when a function body has 50+ lines, or is deeply nested. I'd much rather "this" be consistent. Using "self" or "that" is fine, but what about being more descriptive? E.g. function User(name, age) { this.name = name; this.age = age; } User.prototype.doSomething = function(callback) { var user = this; db.somethingAsync(function() { user.save(callback); }); } 
What kind of monster am I for using var _self = this; ? 
Fair enough. Though my point about bind holds true. jsfiddle benchmark of the iteration of a loop with 10,000 elements normal loop: 46,000 ops/sec foreach w/ thisarg: 6,557 ops/sec foreach w/ bind: 394 ops/sec foreach causes a 6x slowdown bind causes a 16x slowdown
I didn't say that the technique should be disregarded, but that's an issue that devs need to be made aware of when using it. Otherwise, they'll be banging their heads against the wall wondering why removeEventListener isn't working.
Templates don't get rendered _that_ often. Speed is definitely important, but - I really don't like your syntax - Sacrificing a few ms of speed for a better syntax is highly preferable
If you have dependencies, you have to obey the order, period. There are _loading_ patterns that don't need to obey any order, but that's just to get the source of the file, not to execute it. For instance, you can download fileA and fileB at exactly the same time, as long as fileA is executed _before_ fileB.
&gt; I am not a regex expert Dear god... Well you're trying to learn ;) /^(?!.*hiq\.pw)(https?:\/\/)?[\w.\/]+$/i - `i` flag -- ignore case. [Hh][Tt]... that's one of the most hideous things I've ever seen - `(?!.*hiq\.pw)` -- fails if it finds "hiq.pw" anywhere in the string
Oh, I thought requirejs is a solution to this problem. I must be misinformed.
Um... you _specifically_ asked for an explanation excluding requirejs, etc. requirejs implements the loading pattern I mentioned
The situation you're describing is one in which FileB has a dependency on FileA, but that dependency is not listed or specified anywhere. That is why FileA must be loaded first - FileB has a dependency on it. But FileB doesn't declare that dependency explicitly, it just fails to work if FileA isn't around. In a JS module system (either requireJS or node-style modules), each module explicitly lists its dependencies, and it is the job of the module system to load those dependencies. Browserify goes through all your scripts, finds all dependencies, and smashes everything into one big bundle that you load in the browser. requireJS loads dependencies one-by-one until it has everything that a given module needs. The way to fix this situation is to concatenate all your JS together, so that it all loads together, or use a module system and declare dependencies explicitly. But if you choose concatenation, the order the files are concatenated in must be correct or you'll still have the same problem. Ultimately you have to specify dependencies in some way, so you might as well make it explicit.
not the worst kind.
Really, the application isn't too complex so you can use whichever front end framework you like or want to try. I personally am a fan of Angular. If you're just starting out, I'd recommend installing Yeoman and the Angular Full Stack generator. This will build all of the boiler plate code for your stack including database persistence. From there, it's just a pretty typical MEAN application. Tutsplus has a great course on the MEAN stack and Scotch.io has some great articles/tutorials as well. edit - I kind of assumed you wanted to do use Javascript for everything. If you choose to use Django, Rails, etc. on the backend, Angular and Ember are both great front end frameworks to make your app a quick SPA.
&gt; I use a single "self", defined at the top of my class definitions. So all your 'classes' are really singletons :P
No problem. This tutorial should get you started: https://docs.angularjs.org/tutorial
How does it actually save files? The Chrome only APIs?
Probably wouldn't take too much since it sort of is already a browser application. It uses node-webkit (chromium embedded).
Agreed. Browserify runs from command line, no need for grunt/gulp/gloop/glugle/gleffy/gloran/whatever task runner comes out next week
&gt; you shouldn't need any other finicky "this" hacking. But what you described is a "this" hacking. The proper way to bind a function to a different scope is by using .bind(), .apply(), and .call()
The site I mentioned to you is a "JavaScript regular expression tester" I removed the two components you mentioned, but then it was even detecting a single string of **abcdefg123**
Yep, that's what I'm saying. Circular dependencies are a problem in any software project. Here's how requireJS deals with it: http://requirejs.org/docs/api.html#circular (FWIW, didn't say this earlier, but I recommend node-style modules and browserify because I think requireJS kinda sucks)
Yeah, I guess it would. try: /^(?!.*hiq\.pw)(https?:\/\/)?[\w.]+\.\w{2,}(?:\/[\w.\/]*)?$/i It now requires the domain to end with a dot and 2 or more letters
Cool, makes sense. Thanks for the info.
The built-in dependencies are usually small and negligible, and only included as you need them (i.e. often never). It's pretty funny when people say browserify needs a lot of setup. It's just a single line: `browserify app.js &gt; bundle.js` For development and watching you can just use beefy or watchify; both of which are also one-liners. 
Can't ever connect to bittorrent users because of WebRTC restrictions :(
IIRC there are "crossover applications" that can download/upload from/to both regular bittorrent clients and webtorrent. Until a JS app can open and use ports as they wish (which will probably never happen) this is the only way to do it.
I got it figured it out today :-) and when we went over it in class it was actually correct, thank you all for your suggestions!
Removed, please see our [guidelines for promotion](http://www.reddit.com/r/javascript/wiki/index).
I was a minor contributor before it was taken off github...didn't care to follow it much after that; and the changes were minimal.
I bet a very simple WebTorrent proxy could be made, maybe using Java or Flash, that could handle the cross connections.
I'm sure there will be many stylistic reasons not to do this, but... In the head on your main page: ---- &lt;script language='javascript'&gt; var checkDependency = function(dependency, callback,outputVariable){ if(dependency != undefined){ window[outputVariable] = callback(); return; } setTimeout(function(d,c,o){ checkDependency(d,c,o); },1000,dependency,callback,outputVariable); return false; }; &lt;/script&gt; FileB: ---- checkDependency(window.fileA, function(...){ ... file B stuff that uses fileA },"fileB"}; // stores output in fileB FileA: ---- window.fileA = function(...){ ... } You could split this out even further... window.fileA2 = function(...){ } checkDependency(window.fileB, function(...){ ... file A stuff that requires FileB },"fileA3"}; ---- Circular references won't work unless you break out in a modular way. You just can't say that A requires B and B requires A so only load A when you have B or vice versa. Neither will load. 
As a battle hardened old front-end web developer who has seen it all, I sympathize with your lack of enthusiasm for being stuck in The Great Front-End Framework Wave of 201x. AngularJS is the one I have worked with the most, and it is rather silly. 
I use self, as it is used in the delegation pattern, which i like to use often instead of inheritance. 
Give [duo.js](http://duojs.org) or [component(1)](https://github.com/componentjs/component) a try. The former is a super-set of and inspired by the latter. I use the latter at work and it's amazingly simple. I use duo for my personal projects and intend to move it to my work projects whenever it reaches a certain level of maturity. Along with opinionated modular coding built into the builder, these two also give you package management for free. There is already a wealth of components built and maintained by other projects that you can take advantage of using them.
Browserify dosen't handle circular dependencies. But it will help you write better code; you should really consider using it from day one as opposed to starting off with poor practices (like cluttering global scope or writing your own script loaders). It's also really easy to use with tools like beefy/watchify. You can get things up and running immediately with: `beefy index.js --open` Quick code example: https://gist.github.com/mattdesl/b416e9d18e20651ada6a 
I think I'm confused. You want to force your users to type "hiq.pw"? Why not just pre-fill that for them and make it un-editable? like this? http://jsfiddle.net/2pxqtgn6/
simply put, nice.
Great. Next step: Streaming 
You should never be generating functions inside of a loop unless that's *really* what you mean to do in the first place (and if you do, feel free to ignore my advice because you clearly understand the implications). And you should *never* assume something is the performance problem *without actually measuring it*.
Most likely this: http://www.w3.org/TR/FileAPI/ I was able to seed a picture of a cat in Chrome, and grab a copy of it in Firefox without a hitch. 
The module specification is a pretty good indicator that you are in the same boat as the majority of developers. amd is a great idea, but the execution is poor. Importing files in every other platform is something that doesn't require any sort of learning curve and we should expect the same for ourselves. *That* is why the cjs method took off instantly in my opinion. Anyone can instantly grok the Idea of a simple require statement for the code they need in a given file.
Good decision. It took me a couple of days to move a rather large project from Express to Koa. Mostly erasing and simplifying code. Generators (combined with promises or thunks) are so much better than plain old callbacks.
Yeah, that's true. On the bright(?) side, most JS devs have rarely touched the native event APIs. :P
Yes, but it gets far worse. I see some crazy spaghetti in otherwise decent code, with 5+ aliases for "this" within various scopes throughout a single function. After just a teensy bit of hackery, a "self" assignment at class-wide scope keeps good DRYness by eliminating tons of bind calls. This can actually improve performance in some cases, too.
1. 6 more time consuming than anything 2. 8, but it's a bit long winded because you've chosen to test building forms from JSON data requiring a 2nd page. 3. 2+ hours, much of that digesting the docs and double checking requirements are met. 4. I'd be unlikely to take it unless very interested in working with you because it's too long and find forms tedious at this point. Having everything in dropdowns when your data is begging for range sliders is a bit of a put off as well. 5. Perhaps. DOM, AJAX and templates are being tested. Is this at all typical of the projects you actually work on? 
I use the native APIs, but I don't know anyone else who does. More likely, people will continue to use jQuery exclusively until 1) native events support delegation and 2) that native delegation API is supported in all the platforms they target.
updated my comment as well including a response.
No offense but that syntax is ugly as sin.
node-webkit (although it completely defeats the purpose)
&gt; who's creating millions of objects at a time Those who use Node :)
The image links are broken, they refer to files on your C drive. You either need to give me access to your C drive or make relative links.
1. 6 2. 7 3. 3 hrs ~ 4. Yes, because of the length. I wouldn't complete this unless there was a guaranteed job offer waiting behind it. 5. Yes. It would be a good way to discern how well they organize code.
Right off the bat, how can you call this an evaluation when YOU the assessor cannot even properly reference image files... Your path tells us your name is Cody J and you work for ResMed and that this is some weird viral hiring scheme. With that note out of the way, here are my responses: 1. 4 2. 3 3. 1 4. I would be confused why they only want me to be able to populate drop-down menus with data when the assessor is demanding a UI-heavy developer. The task is such a small subset of what a skilled front-end developer would normally be required to do. 5. Not at all, populating drop-downs, listening for a change event, and replacing text while following unclear instructions is a very odd test. I feel like the test is way too focused on your end goal and that you overlook many other important features of JavaScript. If you really want to test their skills I suggest removing any framework and having them develop a solution from scratch. Knowing pure JavaScript is going to be extremely important in the coming months with further browser adoption of ECMAScript 6. Many of the 'great' methods from famous frameworks are going to be further integrated into native JavaScript and those frameworks will become obsolete. I think a very important portion of your project is not explained at all. How frequently does the data change? Should the user be requesting AJAX every click? Every 5 seconds? Only once? Do you prefer the utilization of a DataStore/Dictionary of data? Etc.. Also your data structure is odd you should be using your 'settingKey' as the object key rather than creating an array of anonymous objects. It would be much more efficient to create an object of objects that more clearly enumerates specific keys with specific objects.
Function.bind, i've never had to save a context in 3 years.
awesome!!! as a dev myself I would hate vague bug reports like this but I figured you might know what was going on :) +1 beer!
You can use atan2: http://requirebin.com/?gist=de0554522eb146c63a48
one thing i get tripped up by on large projects are api changes. there are really no rules about calling functions with the right parameters are there... 
This is positively gorgeous, simple and fast, as opposed to MathJax etc. I'm so using KaTeX in my next project.
Usually you save the context because you want to work in a mixed context, which is rather confusing. Saving the context also uses rather more memory. One of the main examples is an each-iterator that needs to process it's parent's context. Using a for loop costs less memory and is faster.
It is always better to double check data at the front-end and later at server end. SQL injections are powerful and effective means for destroying database, trust and reputation. There are thousands of codes, which your front-end cannot understand, detect and prevent. If these malicious codes do get pass the front-end, the validation codes at the server and database level must detect, understand and stop. Now, you choose. 
Nice. Saved. 
I really appreciate the feedback. Do you think there is anything I could do to change your mind, or is '+ +' doomed? For example, would you prefer if I removed loops, partials and if-statements and just used this for simple objects?
Thanks for the feedback. Is there anything i could do to make you looooove the syntax or is it doomed ?
If you have the time and money to create a singe page application, then you can make it feel much more responsive and/or snazzy than a traditional multi page website. Look at Google - almost all of their major services are single page applications - search, gmail, drive, calendar, etc. The whole collaboration aspect of Google Drive wouldn't be possible if it wasn't a real-time, multi-user AJAX application. If you want to make a mobile web application, it will need to be single page to feel like a native app. Search engines can crawl AJAX applications if you implement [Google's AJAX crawling specification](https://support.google.com/webmasters/answer/174992?hl=en). WebSockets/SockJS work fine with HTTPS/SSL, and otherwise security is similar to non-single page applications. I highly recommend checking out [Meteor](https://www.meteor.com/) (docs are [here](http://docs.meteor.com/)). It makes developing single page applications extremely simple. It's got a really nice, powerful (if still a bit immature) templating engine that works with Handlebars or Jade, an isomorphic client/server database API, built-in latency compensation if you choose to use it, and a secure drop-in accounts system. It also has a `spiderable` package that automatically implements Google's AJAX crawling spec, and various security packages, including one for easily setting up a content security policy. Plus tons of user made packages, check out the [Meteor packages website](https://atmospherejs.com/) (which is a *beautiful* real-time SPA made in Meteor, btw).
i'm new to this js backend thing... is there ane real-world example of meteorjs web applications in wild? any high traffic if possible...
When developing an application, you want to design a system that gets the job done with minimal, readable, and appropriate code. The single page application is a design pattern that may or may not help with that. A single page application makes sense if you want views to be bound to a persistent UI. The UI can stay the same or mutate somewhat, and the views can swap in and out. A single page is also nice if you don't want the user jumping around from page to page, such as if the application's behavior changes a lot from page to page. In contrast, a multi-page application makes more sense if your views are composed of discrete pages that are seperable from eachother and either don't need a persistent UI or, if they do, that UI is not the most important part in terms of form, function or bandwidth. Multi page apps are fine if users jumping from page to page doesn't complicate things too much. That's the only necessary difference. In principle, everything else you can do on a multi page application can also be done on a single page. For example: web links lead to a particular resource, the back button and refresh button do what you expect, and more. In practice, achieving these features in a single page application is a lot of extra work, so you should ask yourself if you are willing to do the work to allow it. Security: there really isn't any difference. It's a big topic but you could mess it up or do it right either way. SEO: if you want to use a single page application and want search engines to find it, you'll have extra work to do. There are a few approaches that depend on how your application works, what you want to say to the crawlers, and how dependent your Ajax calls are on the rest of your javascript in terms of being useful. One possible SEO option is to use a noscript element to show a static page to web crawlers that has the information you want to show. Another is to create a directory-type system, detected and served via noscript or to a crawler user agent, that allows the crawler to see public data. If you do this, google might link directly to a resource in your application, so you should be prepared to get a user's browser settled into the application from there and show them the resource that they requested. Long story short: there's no single answer for everyone.
I don't really understand your problem but your naming conventions are making my head hurt
assuming this is inside a function, D will always be undefined because the declaration will get hoisted to the top and you dont assign it to way below your if statement. 
You need to actually parse the URL query string parameters, you can't just tack stuff onto to the end.
Can you please give me an example? I'm new to programming
I am trying to explore regex and get used to it. TeamSpeak lets you have regex ban entries for IP and names of people, so I am blocking websites but then I thought what if I wanted to let people have one site in their name? So that is what the deal is.
Application - yes Website - no
[Here's](https://github.com/hapijs/qs) an example of a library you might use. 
Requires WebGL, it seems?
This would be my approach too. Just add some inputs with ids, and use document.getElementById('id-here').value; If you wanted to keep the modularization, you could return a config object from your IIFE. Then you could set those configs from a submit handler of sorts and keep the hard-coded ids out of the module.
check out https://github.com/dataarts/dat.gui
Cool really smooth after the updates. Btw.. Fire dept doesn't get enabled later if I click when funds is low. Nice work with this :)
 +(25.4 * 24).toFixed(12); will help avoid those kinds of issues. Or alternatively, multiply by 254 and divide by 10 at the end. Or use a number library.
I just did a quick and dirty addition of a form to update the settings. PR is in https://github.com/timbennett/delaunay/pull/1
&gt; The task is such a small subset of what a skilled front-end developer would normally be required to do I have to chose a small subset so that the test isn't too long. Is there another subset that you could suggest that would be more useful? &gt; ... while following unclear instructions ... You indicated my instructions are a 3 out of 10 as well. What is unclear about the instructions so that I may improve them? I tried to be clear and concise so that the docs aren't *too* long. They are pretty long still though. Maybe it makes more sense now that the prototype pictures are referenced correctly. &gt; I suggest removing any framework and having them develop a solution from scratch The stub I provided contains code to mock-out AJAX calls and one JavaScript object with a bit of information about device modes. How could this be more "from scratch?" &gt; Also your data structure is odd you should be using your 'settingKey' as the object key rather than creating an array of anonymous objects. The docs didn't specify this so I will add the information. The settings should be shown in the order they are listed in the metadata.
Professionally in this order perl/c (yeah mod_perl) , bash modem init scripts some VB visual c++ (ugh) tcp stack installer for Windows javascript ( in Netscape 1.2 alert("this is so cool") ) and yes VBscript Coldfusion &amp; Java &amp; php objective-c, ruby, python, R Currently messing around with go, clojure(-script), rust 
Actionscript 2/3 and PHP
Professional: Perl, Bash, C Hobbyist/Student: Java, PHP, Python, Prolog, MIPS, C, Ruby, and very little experience with a few others that I can't remember off the top of my head right now
Visual Basic C C++ ASP (the old, ugly one...wrote millions of LoC too :/) PHP Bash Perl (a little) Java C# (a little)
Mostly depends on your budget, your dead line, and then competences of your developers. If you can afford making an SPA, and don't mind the drawbacks it has with old browsers compatibility and terrible SEO, just do it. It's fun.
I'm on mobile so I can't write a more involved answer, but there's a event you can hook into something like type ahead.selected -- thus event has access to the selected datum so you should be able to pull out the I'd and put it elsewhere
Thanks. I had a good look at Browserify today. I found a way to transform ES6 style imports / exports into ES5 syntax. It indeed works, but Browserify adds "considerable" overhead to my JS files. With Sprockets, I can concatenate all my JS files in an order that's determined by the "//= require" statements. There is no extra code injected in the final bundle. Browserify adds all kinds of strings with class names and extra functions to the final bundle. Any way to fix that?
Thanks for this! I do some side work developing online courses so this is really helpful. 
God I completely forgot about ASP and IDC ( MS internet databaseconnector http://www.thenetworkencyclopedia.com/entry/internet-database-connector-idc/ )
Professionally, I've done: - Ruby - PHP - Objective-C - Swift As a hobby: - Python - Go - Elixir - C
Tell him to prove it, he'll be forced to realize his own mistake unless he's delusional.
Professional * PHP * Ruby * Perl * C# * VB * ColdFusion * LabVIEW Academic * Scheme - I learned more JS doing this than just about anything else * C/C++ * Java Personal * Python * Delphi
I have thank you for the suggestion. Unfortunately I like a front-end that's not so busy. It does have nearly all the functionality that I want though! I have already given them 4 stars in my app store review. :) disclaimer: I'm abnormally picky.
The main problem is this: var imagePresets = (function(presets) { presets = presets.slice(); var i = presets.length, j, t; while (i) { j = Math.random() * i | 0; t = presets[--i]; presets[i] = presets[j]; presets[j] = t; } return presets; })(IMG_PRESETS); You basically need to refactor this entire module so that these values are set *after* the init function. Then the init function needs to be able to override the default values.
If you don't need an accurate by-the-clock period, then your way is just fine. To make him happy, instead of using a closure, just call another function you wrote. Problem solved. His way is for a different requirement entirely. If you need precise delays within a given granularity, then his method is the way... Say you want to wait 100sec within 10ms: var timeout = Date.now() + 100000; function wait100() { if (Date.now() &lt; timeout) { setTimeout(wait100, 10); } else { //do your stuff! } }
I bet he's talking about chrome ignoring "use strict" mode. The setTimeout spec doesn't include anything about strict mode, so V8 doesn't optimize it the same way. This was hot like a week ago until everyone realize it's just another weird JS edge case. I think your coworker is just a JavaScript hipster; he knows not the words he speaks.
perl,pascal,c, some vb,a touch of java
C, C++, Python, C#, Perl, Ruby, Common Lisp, Clojure, Scheme, DarkBASIC, Visual Basic, Haskell. Everything except C++ I have done more than a "hello world" in. I've also done "hello world" style things in many other languages that I don't bother to keep track of. Edit: Oh yeah, I suppose BASH counts. ugh. Edit: Since everyone else was saying it, professionally the list is down to: C, Python, Perl, Ruby, BASH. However, the other languages I have written full non-trivial programs in.
When animating you should use [requestAnimationFrame](http://www.html5rocks.com/en/tutorials/speed/animations/) **Edit** while(x) { sleep(); } sounds like an old game programming routine from back in the '80s
&gt;The problem with closures is that they can leak references to objects in the parent scope, meaning that the garbage collector won't ever get rid of those objects. Huh, this isn't something I've heard of before. Can you give an example of code that would produce this problem, and explain why? I tend to avoid inline functions anyway (let's face it, they make the code formatting look like shit), but I'm still interested in what exactly the pitfall is here.
There are simpler ways to do this. You can get the xml with the jquery load function, and you can simply style the raw XML like [this](http://jsfiddle.net/zavxg4ex/)
Please refer your coworker/friend/bad-advice-guru to this thread. What kind of idiots are we expecting JavaScript implementors to be? *Of course* they've optimized-to-hell something as fundamental as `setTimeout`. function lol () { console.log("lol"); } setTimeout(lol, 1000); The above is perfectly normal. It does however, happen asynchronously (almost always a good thing), such that your JavaScript can keep on executing. The `while` method that your coworker guy is talking about, would completely halt all javascript execution (and totally block and lock up the browser/website's UI), which is generally a bad thing. Unless there is some esoteric reason for halting all script execution and locking up the browser. If you illuminated your use-case, we could tell you whether or not your coworker is talking about an edge-case solution for an edge-case problem. Probably not, but it's possible. As a side note about timeouts, I'd like to mention that there can also be benefits to using setTimeout in a recursive manner as opposed to simply setInterval. There are a number of good articles and posts floating around the internet about the difference between using a recursive setTimeout versus a setInterval, but in essence, setInterval is more accurate and will queue up if the function takes longer than the given interval, whereas setTimeout will always wait for the function to finish executing before waiting the timeout (won't queue up and 'clog'). function lol () { console.log("lol"); } var timeout; function startOngoingProcess () { lol(); timeout = setTimeout(startOngoingProcess, 1000); } function stopOngoingProcess () { clearTimeout(timeout); } This recursive `setTimeout` method is superior over `setInterval` for ongoing processes that shouldn't queue up.
Vanilla JS (can be run from the Chrome console): var links = document.querySelectorAll('a'); for(var i=0; i &lt; links.length; i++) { links[i].href = links[i].href.replace('thumb', 'main'); } 
Closures are one of the most fundamental features of the language.
Sure. Java, C, Lua, Python, Haskell, J, Befunge, (limited) Prolog, some Brainfuck, Migol, some assembly (various dialects), some Go, GLSL, CoffeeScript, Clojure, some Scheme, some C++ (with Qt), a very limited amount of Matlab, and then a whole lot of arguable programming languages (sh, bash, zsh, TI Basic, TeX, ...), and whatever I've forgotten to mention.
.... not quite. So close, yet so far. 'this' doesn't refer to the current object. It refers to the object that a method was called from. All methods when called without an object notation are assumed to be called off the window. Methods lose their call scope when passed around. For example, this probably doesn't do what the examples shown in the article might assume: var m = { a: 5, y: function() { return this.a; } }; var n = { a: 10 }; var o = m.y; n.y = m.y; m.y(); // returns 5, because this = m n.y(); // returns 10, because this = n o(); // returns undefined, because this = window Lastly, variables are resolved by going up the *declaration* tree. In the example shown on the article using exp.x actually references it based on the 'exp' variable in the global scope, not on the object name. The method itself doesn't know what the variable name it was declared as and having that naming requirement makes the code more rigid.
Author, assuming you're reading this, it's great that you're learning to 'script for the web' for the first time -- but perhaps it's best you hold off on writing educational resources until you have some of the fundamentals down. &gt; *"Anonymous functions have a global scope and have access to global variables".* Not quite correct, you see, **EVERYTHING and EVERYWHERE has access to ALL global variables.** ***That's what 'global' means.*** That being said, it's not 100% exactly true, as things can get tricky and confusing once we start talking about Web Workers, which have their own global scope.. *let's not worry about that today.* Anonymous functions (like all functions) create local scopes, and can also be assigned to a variable which is non-global. Remove `type="text/javascript"` from your script tags. These days, it's totally redundant. At least I don't see CDATA ;) Let's talk about globals a little bit: &lt;script&gt; // Simple script tag is totally sufficient. // Here we are, at the global level. var x = 5; // Here we've just defined a global variable. // The nifty secret, is that all globals are actually just // properties of the 'window' object. console.log( window.x ); //=&gt; 5 // As you can see, defining the global 'x' was the same as defining 'window.x'. window.y = 10; // Defining a window property is the same as defining a global. console.log(y); //=&gt; 10 // As you can see, window properties and globals are one and the same. // Don't declare your globals with `var` at the global scope. It's ambiguous. // If you're going to define a global, do so as a property of the 'window' object: window.MyThing = (function DEFINE_MY_THING () { // All functions create a new variable scope function MyThing () {} var lol = "lol"; // local scope (within DEFINE_MY_THING, ie, not global) MyThing.lol = function () { console.log(lol) }; // logs the locally scoped 'lol' variable. MyThing.prototype.x = 6; MyThing.prototype.y = 11; return MyThing; // Exporting MyThing (to window.MyThing). })(); // Writing modules within immediately executed closures (which create new variable scopes) // are beneficial because they shield your module's internal variables from being exposed // to the global scope, and allow us to explicitly export the global. // Using our global module: $(function(){ // why not within a jQuery document ready, eh? MyThing.lol(); //=&gt; "lol" var thing = new MyThing(); // locally scoped within the jquery document ready console.log(thing.x + thing.y); //=&gt; 17; }); &lt;/script&gt; Many javascript professionals are completely against all use of globals in almost any way. They avoid globals like the plague. They instead use modular systems like RequireJS, CommonJS, Browserify, etc. Godspeed.
Java, PHP, Delphi
More to the point, people who say things like that use magical thinking and don't properly understand the things they use. This causes them to form opinions not based in facts, and they make a mess of everything, and so it's really just best to steer clear. Don't argue with them or try to correct their uninformed opinions, just treat everything they say like it didn't happen. Also revert as many of their commits as possible
What is considerable? A few kbs is not going to make a difference unless you are delivering content to a toaster. The benefits of modularity and npm far outweigh the few milliseconds that you will save in the bundled HTTP request. If you are desparate to save some more bytes: [bundle-collapser](https://www.npmjs.org/package/bundle-collapser) + [minifyify](https://github.com/ben-ng/minifyify). Not sure why you are using ES6. You can use CommonJS just fine; in fact many would argue it's a [more sane approach to module loading](http://blog.izs.me/post/25906678790/on-es-6-modules). 
In the example you gave, doing things functionally would also get around memory leaks I think. function parent() { var a = 2; var child = function(val) { return val * 2; } child(a); }
Not if you `return child`. Once you go down that road, you're stuck with whatever was in the scope of parent always in memory until whatever is consuming the return value makes sure that it goes out of scope. Instead, if it was used to create a dom node, and the dom node is hidden and still present, the GC will not recover those assets.
Thanks guys! I will be re-writing this article shortly! cheers!
you might want to fix the image links and format the code to make it easier to see nested tags. great intention on the article!
http://opendata.stackexchange.com/
Java, C#, PHP, Python, Swift I lack interest in lower level languages at this point :/
Mind if I can use your example on my blog. This explains it better!
I don't think it's as bad as you make it. Runtimes certainly HEAVILY optimize closure capture. Further, in your example, as long as the child function isn't referenced, a will be collected. Certainly if you return child to someone that holds on to it or you store child in an outer scope or something you will have a "memory leak" but presumably if you're storing the function for later you need it (and therefore anything it encloses) for some reason. Setting a to null in your second example doesn't help you at all. The value of a has no bearing on whether it is closure captured or references to it are preserved. Null is just another primitive value like 2.
Nice! This is cool. I've always been a fan of Unity and JS is pretty sweet. If anyone has a gripe with using a 3D engine for a 2D game, don't. You can achieve a classic themed 2D game and have some advantages like awesome camera perspectives changes and effects that just make the overall feel of the game more immersive. Just my 2 cents.
C, C++, Objective-C, Ruby, Pascal, Modula-2, Go, Scheme, Lisp, BASIC, 6502 and 68000 assembler, Smalltalk, Perl, Lua, Java, shell script, Prolog, Fortran, AWK, and I've reluctantly hacked on some PHP. Also TeX, ConTeXt and LaTeX if you count those.
Ah, yes, I realize that. I was just using a very simple example to demonstrate closures and how variables captured inside one could possibly not get dereferenced. You're right that engines heavily optimize for closures (it's one of the defining features of the language), and that using primitives would never cause a noticeable memory leak. Setting to null at the end of the function for a captured variable (ie, not declared using *var*) does work. *a* inside the closure is a new reference, so pointing it to null releases one of the references pointing to the contents of the original variable. It makes no difference with primitives, sure, but with other objects it's helpful.
Legitimately used: Java, C#, C, C++, Python, PHP, Scheme, Bash Poked around with: Haskell, Go, Clojure, Lua, VB, RISC assembly The second list is actually quite a bit longer, but those are the ones I remember off the top of my head.
A js minifier which changes the logic of the program is a broken minifier. There are several rules which can be taken into account while writing without semicolons, you can check [this source](http://inimino.org/~inimino/blog/javascript_semicolons) out for more information.
Do you have any link to improve SPAs SEO ?
What is the usage of the stream. 1 to 1 call, 1 to many, many to many? 1 to 1 and 1 to many would be simple, as no audio mixing is necessary, which means all you might need to do is create a timecode data to make sure your audio and video are synchronized, if you don't care for synchronization you can probably just create a buffer containing both streams. 
Depending on what framework you're using, it could be quite a bit of work, or downright impossible. Angular has already announced they are only supporting "modern browsers" in their upcoming 2.0 release. It seems like most modern frontend frameworks are heading towards dropping support of IE8.
That actually blocks UI and everything else and makes the thread use the all of the CPU core, terrible advice..
Sorry, I have no experience with syncing audio and video streams, I've only done audio via binary socket. But from understanding using something like getUserMedia api will allow you to grab video and audio streams. I don't think it is a simple problem. Things to consider is amount of data a video stream contains versus that of an audio stream. Setting up a proper frame size to stream to the server, and of course how do you ensure that they are relatively in sync. If someone would like to chime in with more knowledge that be great. 
https://developers.google.com/webmasters/ajax-crawling/
You know how people joke about the "evolution of man" lineup, with the monkeys turning into homo sapiens, where the dude at the end says "no, go back"? No, go back. edit: http://www.philosophicallychallenged.com/blog/wp-content/uploads/2014/04/human-evolution-go-back.jpg 
Pretty much my whole career before JS was C#. Other than that, lots of em. Python, Sass, C, Perl, Java, VB &amp; VBScript, PHP, ObjC, sh... lots of em
Yes, but that's a framework limitation, not a technological limitation of SPAs in general. A lot of libraries that are not specifically made for SPAs are also transitioning out of support for old versions of IE, notably jQuery, Bootstrap, and Foundation. Even more new libraries (D3, CreateJS, Three.js, PDF.js, etc) are being created with web standards/technologies that didn't exist in old browsers. Conversely, Meteor works on IE6+ out of the box. So the difficulty of supporting old browsers is more of a consequence of the evolving nature of the Internet than a problem unique to SPAs.
Yeah the prospects of real time collaboration and cross platform applications that feel native are new and scary!
Thank you very much for this addition. I think the scope issue was why I couldn't modify the variables.
Languages I actually use other than JS: C, Python, Groovy, Java Languages I have used at some point: C++, Ruby, PHP
Just what I needed thanx 
[This article](http://www.html5rocks.com/en/tutorials/getusermedia/intro/) has some informations to get you started.
Google search is a SPA? I don't think it is.
Go to google and start typing in the search bar, but don't hit enter. The search results are automatically retrieved and appended with AJAX. Also, switching to another page of results does not create a synchronous request, though switching between search types (images, videos, shopping, etc) does. Each individual search type is essentially a single page application. Also, try searching for something like ["apple nutrition"](https://www.google.com/?gws_rd=ssl#q=apple+nutrition). A nutritional information widget pops up on the right, with controls to adjust things like the portion size. Of course none of this requires an additional page load. Try searching for something like ["z=x\^2+y\^2"](https://www.google.com/?gws_rd=ssl#q=z%3Dx%5E2%2By%5E2). A graph widget will be appended to the page automatically, with dynamic controls. Google has tons of widgets like this - and none of them require a synchronous page load. It's all loaded dynamically as you type in the search bar.
1. There is no sleep command in JavaScript 2. Your co-worker is just plain wrong There is nothing fundamentally wrong with setTimeout or closures. However there is something fundamentally wrong with blocking code in a single threaded environment, which is exactly what he is proposing. Source: JavaScript engineer for Spotify
It's all in C#, right?
When you click between results pages you reload the entire page, regardless of whether you then can get AJAX effects in the page that loads. Go into developer tools and add a bogus attribute to the HTML tag, when you hit a pagination link, it goes away. This would not happen if the view was not totally reloaded.
I'd also like to know, but just for audio
That was pretty fast!
Great name. Good screencast, too.
yes
Smooth!
He has no idea what he is talking about. Javascript doesn't even have a sleep statement.
Unity supports C# and JavaScript (well close enough: http://wiki.unity3d.com/index.php/UnityScript_versus_JavaScript)
Is there any justification for using plain Backbone views these days?
Can't say I've ever even briefly considered using a CSS library for buttons. I just.. make my own buttons. Has it really taken anybody more than a couple of minutes to make a nice button?
Runs at like 10-15 FPS on a Nexus 5. Good work! (This sounds sarcastic but I truly mean it. I've been doing WebGL on mobile for a bit now and its not a great scene in there.)
The testing bit was pretty cool.
Professionally, PHP and Ruby. For fun I've dabbled with Java (Android).
It's pretty obvious in a function this size that you're not going to have a reference error (age is declared as a parameter in the line above the check). And, as I originally stated, this is the most terse way to code this implementation. If you wanted to be thorough, avoiding reference errors and being explicit about exactly what you were checking for, you would write: function setAge(age){ this.age = (typeof age === 'undefined') ? 10 : age; } 
Thanks, that's amazing to hear actually! I'm pretty surprised it runs at all.
Oh man I love shadertoy.com. I played around with trying to submit to it, but it seems pretty difficult since my code really relies on the javascript to properly pre-process data to give to the shader. If they ever allow for custom javascript then I would just to share through them. Actually, even if they allowed us to use custom textures as inputs to the shaders I could potentially add a less dynamic version... but alas!!
Thanks for the comments!! Here's an improved (fixed) version that also implements anti-aliasing. https://rawgit.com/sschoenholz/WebGL-Raytracer/master/index.html
Crazy nice work there.
I haven't ever messed with this kind of thing. You say object data is within the textures, does that mean you can't source obj or fbx or something like that?
I like the idea, but I don't really like most of the buttons, I probably wouldn't use them on a site/app. edit: I should probably expand on this... the drop downs aren't styled. It feels weird to press a styled button and get an unstyled dropdown list. Most of the buttons seem like for me to use them, I'd have to change the styling quite a bit at which point, i'd be better off writing my own. 
You mean UnityScript, not Javascript
Gamemaker supports JavaScript too! (Well close enough: [ActionScript](http://i.imgur.com/nH7qg1z.gif) )
Just a black square in my Firefox and Chrome.
This is great, nice work!
I made a box spin once. With Three.js.
No fun for me :( Chrome v37: could not initialize shaders Firefox 32.0.1: memory leak and hang
This is awesome. /u/lessmilk, when is the next part coming out?
Here's one with refraction http://iamnop.com/ray/
It crashes my browser everytimme.
I found some more links. https://news.ycombinator.com/item?id=4299501 http://dathor.blogspot.fr/2012/02/webrtc-getusermedia-and-websockets.html Apparently it is possible now to capture the binary stream for audio, but not for video. The only way for video is to render into a HTML tag and retrieve each frame individually... 
Same thing for me on both + same for safari.
Same for me.
OS X: Chrome 37.0.2062.120, works fine... Will try in windows and see if I get the same results...
Ehh nevermind, I can [Google that](https://developer.mozilla.org/en/docs/Web/HTML/Element/script). TIL.
Why can't you use WebRTC?
If you don't mind, what kind of GPU do you have? I tend to think the more common error would be having a GPU that isn't compatible with webgl + glsl shaders, especially since I developed it on chrome v37. I feel like many laptops with integrated gpu/cpu aren't able to run webgl, but that could be wrong. Also good to know though!
First off, any serious project should be using build tools like grunt/gulp anyway, so you'll already have npm. Want minification? One command line to install it, and like 2 lines to the grunt file. No work for the next guy working on this project. If you want to produce a reusable library, you need to set up shims in either browserify or require... Way more work in require. Want to precompile templates? 1 line of config. If you're not using good build tools then I understand why you might disagree with me, but I think that is the problem, not browserify
You only need to specify [type] when it's something other than JavaScript.
Can confirm that I'm having the same shader error in Win 7 / Chrome 37.0.2062.103 on an HP laptop with integrated Intel HD Graphics 3000.
Error, 'this' has no property 'attr' ;)
Agreed - although this wasn't animation. Just needed the app to wait a certain amount of time before doing something else. And he was trying to tell me that a setTimeout was the wrong solution
Exactly what I was thinking. I wanted to make sure that I wasn't hanging on to some sort of incorrect notions, and this thread has made it clear that I've been doing nothing wrong. Thank you!
&gt; *'this' doesn't refer to the current object. It refers to the object that a method was called from.* Not quite correct. `this` merely provides context, in an arbitrary way. You can't rely on `this` being *anything in particular*, because it can be *anything at all*. function lol () { console.log("THIS IS", this); } lol(); //=&gt; THIS IS (window) var obj = { lol: lol }; obj.lol(); //=&gt; THIS IS (obj) lol.call(5); //=&gt; THIS IS (5) By using `call` and `apply`, you can call a function and specify the given `this` function. In a big way, `this` is just a fancy mandatory argument. Python does a similar thing by providing `self`, but it's always the first argument of every function (honestly annoying, I like how JavaScript's `this` is more.. subtle)
Interesting, on my laptop, setting anti-alias to None leads to a bit of jerkiness, lower-than-ideal framerate, maybe a bit of jank. However, setting anti-alias to 2x makes the animation very smooth. (and setting to 4x feels almost as slow as setting None) CPU: *Intel(R) Core(TM) i5-3317U CPU @ 1.70GHz* CPU Video card: *Intel Corporation 3rd Gen Core processor Graphics Controller (rev 09)* OS: Ubuntu 13.10 (64-bit), Linux kernel 3.11.0-26-generic Browser: Chrome 37.0.2062.94
If it makes you feel any better, it froze my browser (firefox) and I had to use windows task manager to shut it down. :P (I was on a laptop with an Nvidia quadro 1000m, I'm not sure if that's compatible with webGL or not.)
Works fine on Chrome, Safari and Firefox for me. 10.9, recent Macbook Pro. It probably is mostly to do with the GPU.
I'd like to add, that while this is false: "hello" instanceof String The following is actually true: "hello".constructor == String But watch out, that `undefined` and `null` don't have properties, and will throw an error if you attempt to check their `constructor`, so if you're looking to check the type of a variable, you could do it like this: var x_is_a_string = (x!==undefined &amp;&amp; x!==null &amp;&amp; x.constructor==String); var x_is_a_number = (x!==undefined &amp;&amp; x!==null &amp;&amp; x.constructor==Number); var x_is_an_array = (x!==undefined &amp;&amp; x!==null &amp;&amp; x.constructor==Array); *We live in a crazy, crazy world, ladies and gentlemen.*
yes, this will be a fucking nightmare. your best shot is creating one team responsible for building a library of UI components and other teams trying to use these components as much as they can and possibly submitting pull requests to the library when they need something new.
 function getType(o) { return Object.prototype.toString.call(o).slice(8, -1).toLowerCase() } &gt;&gt;&gt; ['', new String(''), 1, new Number(1)].map(getType) Array [ "string", "string", "number", "number" ]
Yep. The Firefox hang actually brought my whole laptop to its knees - was quicker to reboot than wait for task manager.
&gt; The following is actually true: &gt; &gt; "hello".constructor == String Sort of. 'hello'.constructor Is actually: new String('hello').constructor That primitive value is auto-wrapped and this temporary object is then immediately discarded. &gt; var a = 'foo' undefined &gt; var b = new String('foo') undefined &gt; a.x = 'bar' "bar" &gt; b.x = 'bar' "bar" &gt; a.x undefined &gt; b.x "bar" This line: a.x = 'bar' Is actually: new String(a).x = 'bar' FWIW, Dart fixed this. From the user's point of view, everything is an object. Things like strings and ints are just immutable objects. JavaScript should have done the same. There is absolutely no benefit in exposing that wrapper machinery to the user.
nvidia gtx 460, latest drivers, so full support for webgl as far as I know. Console output: GL_INVALID_ENUM : glBindFramebuffer: target was GL_READ_FRAMEBUFFER_ANGLE index.html:1 GL_INVALID_ENUM : glBindFramebuffer: target was GL_DRAW_FRAMEBUFFER_ANGLE index.html:1 WebGL: CONTEXT_LOST_WEBGL: loseContext: context lost index.html:1 Uncaught TypeError: Cannot set property 'itemSize' of null 
Unrelated but I thought PubSub was a sub reddit about pubs.
Nvidia GT 630M. I forced the use of the GPU with both, Firefox and Chrome Same log on Chrome: GL_INVALID_ENUM : glBindFramebuffer: target was GL_READ_FRAMEBUFFER_ANGLE index.html:1 GL_INVALID_ENUM : glBindFramebuffer: target was GL_DRAW_FRAMEBUFFER_ANGLE index.html:1 WebGL: CONTEXT_LOST_WEBGL: loseContext: context lost index.html:1 Uncaught TypeError: Cannot set property 'itemSize' of null Firefox refuses to work so...
Sounds like he's the one sleeping.
That is awesome!
Runs great on Firefox on a Mac with just an Intel HD Graphics 3000, but not on Windows 7 (Firefox or Chrome) with a newer HD Graphics 4400. But then Firefox and Chrome on Windows don't use native OpenGL, but something called ANGLE which tries to translate everything to Direct3D calls. [Many](http://madebyevan.com/webgl-water/) [demos](http://iamnop.com/ray/) work fine in spite of that. The stack dump of Firefox's main thread while hung looks something like this: ...snip kernel stuff... d3dcompiler_46.dll!D3DDisassemble10Effect+0x7baaf d3dcompiler_46.dll!D3DDisassemble10Effect+0xa3f09 ...snip 75 near identical lines... d3dcompiler_46.dll!D3DDisassemble10Effect+0x70a10 d3dcompiler_46.dll!D3DDisassemble10Effect+0x6efba d3dcompiler_46.dll!D3DWriteBlobToFile+0x399 d3dcompiler_46.dll!D3DWriteBlobToFile+0x9c8 d3dcompiler_46.dll!D3DCompile+0x5d Why it's disassembling shaders back to text, recursing 80 deep is anyone's guess.
Ah yeah, it didn't even load for me. It froze as soon as I opened it in a new tab. Firefox does hang on occasion for me when trying stuff like this but I figured I'd mention it anyway for the sake of science. 
Has anyone ever had to troubleshoot a Yeoman generated Gruntfile?
can anyone explain how this is better than a simple EventEmitter?
I mean, they are almost identical concepts. Pub/Sub is often used alongside data streaming, like websockets
It is only better if you're use the extra features like message filtering. For example you want to create a event based API that sends this calls to the backend for example: (function () { VPpubsub.sub('api.*', function (data, evnt) { $.post('/' + evnt.replace('.', '/'), data) }); }()); By a simple event emitter you need to subscribe to every type of event. Or another example can be that you've a debugger that logs all events: VPpubsub.sub('*', function () { //some debugger logic }); Basicly it has all normal features of a simple event emitter plus some extra features.
First off isDefined(options.foo) ? options.foo || defaultOptions.foo; should be isDefined(options.foo) ? options.foo : defaultOptions.foo; But to answer your question, the typical pattern is: var default_options = { foo : 1, bar : 2, baz : 3, } function initialize(user_options) { var options = $.extend({}, default_options, user_options); } The jQuery extend function merges *n* objects into the first object you pass it. In this case we're taking a new object, merging in the default options and then merging in the user's options. Each one overwriting any existing keys from the object before it. *If you're not using jQuery you can just write your own extend function. It's pretty trivial and I'm sure there are a lot of examples if you Google it.*
[gulp](http://gulpjs.com/) is waaaay better than grunt, and I haven't looked back since I switched. Also worth checking out is [slush](https://slushjs.github.io/), which is the gulp equivalent of yeoman
Ok. It's really not that hard to understand the gruntfile and it's configurations if you know what you're doing. I mean if you don't understand how to troubleshoot a Yeoman generated Gruntfile than thank god you have Yeoman to begin with since you would obviously not be able to set it up from the ground. Also, yeoman is as good as the generator you're using. There is nothing inherently bad about Yeoman so I'm really not understanding the "Fuck Yeoman" attitude.
For those a little less comfortable with the Command Line, [CodeKit](https://incident57.com/codekit/) does most of this with a nice GUI.
For no reason. Probably you have seen this pattern used by someone that does not understand 100% of what they are doing. The double not is used when you need a boolean value (most of the times when you have to return a boolean value from a function), and it is optimized by javascript engines (since it is very common). 
&gt;most of the time Propper javascript skills include a lot of "===" and "!==", which is a pretty good motivation to have booleans if the specifications require it. 
* ASP * C# (WCF, web forms, MVC) * PHP * SQL
Seems like building an awake tracker would be more energy efficient.
Returns the type of any value passed in. It will also handle `null` and `undefined`.
Thank you, random internet stranger. I thought I was going crazy.
How is it better exactly? One is configuration-based, one is stream-based. They seem equivalent to me.
Thank you. I agree with this wholeheartedly.
What? You get confused by Yeomans output because of ... grunt? Do you know what these tools even do?
What do you mean?
I would say that is good practice to have variables of the type you expect them to be.
It doesn't convert the object to a string, it gives you its internal class: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.2
MAKE FTW ! Down with all these (slow) half-backed farces.
I was unaware of this library until this post. Is anybody using this library for production apps?
We all know strict comparison is a good thing. I think the problem lies in consistency. I do double-bangs as often that I seem necesary, and I won't change that habit only because it's useless in a line of code. if you have multiple lines of code of type (obj.somefunc() === !!variable), i wouldn't change if(!!variable) because of consistency. 
I find Gulp far easier to understand and write. I was able to pick it up far more quickly than Grunt.
I don't think something being "mostly just a configuration file" really means anything. Configuration files are as confusing as you make them. In grunt's case, it's all very declarative. You have these large nested lists of objects and what's going on underneath the covers and how each plugin interprets these objects is largely hidden from you (hence the magical part). Also, there isn't a lot of consistency in how these objects are structured. One plugin may accept a different format than another. 
If you want to read more on slush check out the creation/announcement post http://joakimbeng.eu01.aws.af.cm/slush-replacing-yeoman-with-gulp/
Imo gulp is way better at processing assets and creating an asset pipeline. My problem with grunt is that you have to manage things like temporary directories and files manually. With gulp you can just pipe the output of one plugin (i.e. scss) into another plugin (i.e. autoprefixer). Another example would be coverage with istanbul and mocha. In grunt it was a hassle to do yourself (or use a custom grunt-istanbul-mocha package). Grunt is still pretty good if you don't have to handle asset processing and simply want to run independent tasks. Here's the question if you really need these custom grunt plugins or write something like a makefile and use packages directly (like [eslint currently does it](https://github.com/eslint/eslint/blob/master/Makefile.js)) .
Do you mind giving a quick code snippet as an example?
I have used both grunt and gulp, and I find myself preferring grunt even still. I'm not sure where temporary directories come in, I don't seem to have to do that? Maybe I'm just using it wrong.
If you have a task like mentioned (scss -&gt; css -&gt; autoprefix -&gt; minify) you could do it like this: 1. copy all files to a temporary directory (avoid anything overwriting your application code) 2. run scss and copy result in a temporary location 3. run autoprefix on the result in the temporary location and store it in a temporary location 4. run cssmin on the autoprefix in the temporary location and store it in another temporary location With gulp it could look like this: Read assets, pipe into scss, pipe into autoprefix, pipe into cssmin, write to build directory
&gt; That doesn't change anything. See my example above. &gt;`"hello".constructor==String` is still totally true. Yes. However, the point was that a string doesn't have a constructor because it isn't an object. By the way, there is no point in doing this: x.constructor &amp;&amp; x.constructor==String If `constructor` is undefined, it won't equal `String`. I'd just use `typeof`. var x_is_a_string = typeof x === 'string'; No reason to guard against anything: &gt; typeof NaN "number" &gt; typeof null "object" &gt; typeof undefined "undefined"
The idea behind these types of projects (Bootstrap being another) is that they enforce consistency. Sure, it's easy for you to whip up a button, but how about for someone who spends 90% of their on the backend? And how can you be sure that back-end guy's button is going to conform to your style guide (other than manually reviewing it)? And how do you handle a team of 15-20 devs, each with varying levels of skill? Before we implemented a style guide and a custom widget library (with buttons), we had various flavors of each of the following being used as "buttons": * `&lt;input type="button" value="click me!" /&gt;` * `&lt;button&gt;click me!&lt;/button&gt;` * `&lt;span class="button"/&gt;` * `&lt;img class="img-button"/&gt;` Likewise, since they were all over the place implementation-wise, it was usually less painful and time-consuming to simply reinvent the button every time you needed one. Sure, you could update the CSS for `.button`, but that's used in a bajillion places and you only need to change the padding a tiny bit; will it break other buttons, or make them sloppy? A library makes it easy to say: this is the one way you will make buttons. You give it some data, it gives you a button. All implementation details are hidden from normal devs, and only library maintainers have to keep up with them.
Strict comparison is a good thing when you need strict comparison. When you don't need it, it is not.
To be honest, I don't think this submission applies to the sub -- it'd be much more appropriate in /r/webdev, /r/frontend, etc. -- but it's been up almost a day now, and so I'll leave it alone.
That's debatable, but i don't think there's a specific "corect" opinion. I strongly believe in strict comparison, probably because of my C background. I'd like to leave that for another discussion, though. 
You can set up multiple WebRTC connections, not just one. Use WebRTC to send to a specialized server that broadcasts using WebRTC to many receivers. The reason I ask is that I doubt you can get the quality you want using websockets and manually encoding the image and audio into binary. 
I mean, like I mentioned, maybe I'm doing it wrong, but my grunt tasks would operate in order on the same files, in a new directory (ie, the distribution directory). So I'd have my SCSS output there, then I'd do CSS on that directory, then autoprefix, then minify. I'm guessing that's not the way to do it, but oh well.
This is a kinda annoying thing about JS, most of my code looks like this: function Foo(opt) { opt = opt||{} opt.myArg = typeof opt.myArg === 'number' ? opt.myArg : 25 opt.myOtherArg = typeof opt.myOtherArg === 'number' ? opt.myOtherArg : 15 } If you just need defaults then an extend method can clean that up. Pulling in jQuery as a dependency just for that is pretty stupid. Use an npm module instead: https://www.npmjs.org/package/xtend
I have the same issue. It worked before. I used IntelliJ 12.1.6 all that time... only chrome has been updated from 36 to 37.0.2062.120 m in the meanwhile... 
From what I understand, I think it's mainly targeted towards those developing Windows marketplace apps.
I've used Grunt for a couple of years and I'm pretty comfortable with the command line but I use CodeKit a ton. I prototype a lot so just clicking through the menu and saying " yeah, I need Sass, autoprefixer, minifier, lint, and... oh, yeah! A server!" and I'm ready to go. Plus you can use Bower now, too, which is a big bonus. I can't recommend it enough for designer-devs.
So the answer is "almost no one", then. 
&gt; They seem equivalent to me. Pretty much. In practice the only difference I notice between the two is that Grunt is much more mature. Take, for example, gulp.watch. [It doesn't watch for new or deleted files](http://stackoverflow.com/questions/22391527/gulps-gulp-watch-not-triggered-for-new-or-deleted-files) and [it exits when there's an error](https://github.com/gulpjs/gulp/issues/259). (Save a CoffeeScript file with a typo in it? Better restart your BrowserSync task.) You could work around these problems using gulp-watch and this.emit/gulp-plumber or you could just use grunt.watch and be done with it.
I've got to agree. I mean its good that they're focusing on cross platform issue and I dont want this to be a damned if you do damned if you dont sort of post but the fact that the cross platform support was that bad to begin with doesn't give me any hope for the library.
rack city bitch, rack rack city bitch. http://www.youtube.com/watch?v=AE3yia1AJeQ&amp;t=32
Yikes, this field moves too fast for me.
Works for me. I just tried adding `class="foo"` to the html tag and it is preserved when switching between results pages and when dynamic results are loaded from typing in the search bar. This works for me on both Chrome and Firefox. I also added `&lt;div class="foo"&gt;&lt;/div&gt;` right after the opening body tag. My `foo` div is also preserved between results pages. In fact I can see the attributes on other tags such as the body tag changing, and my changes are unaffected...
* https://github.com/facebook/watchman * https://github.com/visionmedia/watch It's super, duper easy. Use whichever one you're more comfortable with, interval based or change based.
I think keeping front and back separated between bower and npm is nice though.
Why would they dynamically add content while leveraging instant search, but then reload and redisplay the nearly identical content because you hit enter or click the button? I certainly hope Google isn't actively making decisions like this :p
Pretty cool. A few recommendations: *Add a way to toggle NSFW posts/reddits *Show the context of the post in the new window, and not when I exit out.
What would you do if you needed to bundle css from an installed module? Using bower &amp; gulp you can use the [main-bower-files](https://github.com/ck86/main-bower-files) module to grab all the main file paths (js/css) and then filter &amp; bundle the files separately. I would love to stick with npm for web package management too but.. how?
What do you recommend between browserify and webpack, and why?
I've been paid to also code Python(Django), C, C#, Java, and Perl. I mainly use JavaScript and Go these days.
&gt; *Yes. However, the point was that a string doesn't have a constructor because it isn't an object.* I'd say quite the opposite. Strings, like all primitives, are always treated like objects (being autoboxed) and thus they always have a constructor. Primitives become objects the moment you try to do anything useful with them -- like check their constructor, or in String's case, use any of its properties (replace, splice, etc). You're right though, the excess `x.constructor` was redundant, thanks for noticing. function isString (x) { return (x!==undefined &amp;&amp; x!==null &amp;&amp; x.constructor==String) }; I'm wondering if anyone has a better type-checking function, which always yields the naturally expected result? Are there any instances where this function fails, and yields an unexpected or undesirable result? &gt; *I'd just use `typeof`. No reason to guard against anything* Up until this awkward moment: typeof new String("hello"); //=&gt; "object" 
What I've done is turned audio samples into a frame that I defined of about 255 samples and then I create an arrayBuffer of int16Array to send over websocket. But again this is just for audio. 
Yet still, I don't see why we would want to do so much string manipulation in order to do something so fundamental -- we're obtaining the internal class as a string, then we're slicing it up, then we're lowercasing it, and then we're performing a string comparison? Even putting the performance nightmare aside, on a purely conceptual level, it's not at all an elegant solution. If even if for some odd reason it performed better in V8, I'd imagine it would be considerable as a V8 implementation quirk/bug, which for the sake of future-proofing, neither are the sorts of motives we should be developing for.
You don't like jquery, what do you like?
I'm assuming you're running this in your dev console without something like `console.log` wrapping it - the `{}` is being interpreted as an empty code block, followed by `+ []`, which evaluates to 0. Try something like `({}) + []` or `console.log({} + [])` and you should get the desired result.
As others have mentioned, when you have some kind of common boiler plate that you end up with appearing in multiple functions and requiring you to figure out how to style it, you'll want to extract that functionality out somehow into a reusable function like `extend`, or lodash's `_.assign` or `_.defaults`. 
Why don't we just put all our NPM modules in Apt or Homebrew while we're at it?
wow, that's right. Could you help me explain why in your case and my case they happen like that?
I apologize that I don't have formatting and if I have any mistakes since I'm on my phone, but it should look something like this: //bad example -- like netatai dom.addEventListener('event', this callback.bind(this), false); /*do some stuff*/ dom.removeEventListener('event', this.callback.bind(this), false); //good example, cuz it's okay -- sadatay var cb = this.callback.bind(this); dom.addEventListener('event',cb, false); /*do some stuff*/ dom.removeEventListener('event',cb, false); 
http://try.buildwinjs.com/ looks awesome.
Just going off what he said, but puttting {} without the params gets evaluated as just empty code, not an object. It would be like seeing this in a script { } alert('woot') You will just get an alert, the braces are really just skipped.
Your start button has absolutely no hover effect, not even a pointer cursor. It's obvious what you have to click, but you do need at least something.
you are totally right. I forget the rule of ASI
$('input.checkbox#male').prop('checked',true).change() You need to call the change event, since that's likely the way out was programmed to change the data. If it was just a simple submit it would work. 
Did manually checking it set a value on the element? Your code didn't set a value, just made it true. It might even be throwing an error in the console or response from the server.
You should watch [wat](https://www.destroyallsoftware.com/talks/wat).
`find [list of directories] -name "*.min.css"` for example Or list them out by hand, which isn't as fun
Mmm, love me some absurdum in the morning. 
Agreed, but it's a great way to start up a new project.
I don't have a background in native application development, so make is as new to me as grunt and gulp. But of the three it's the only one that has been very easy for me to get running with a real project, not just some arbitrary tasks that the framework is good at, and there is far less (arguably no) syntax/library noise in the config files. I feel like some sort of hipster saying "the original was the best", but can somebody actually give me a real advantage of grunt or gulp over make? Because all I see are comments like the other reply here, from people who clearly have never tried to use make, and praise for rudimentary features in grunt/gulp, like pipes.
This is interesting, but please never write a program that relies on it.
Haha, sorry I worded that kinda funny. I just found the last time I used Yeoman to bootstrap a project, I found it's gruntfile to be really hard to understand. Maybe it's gotten better since I last used it, it has been a little while. That said, Gulp can be confusing/complicated too, so yeah not trying to bash grunt or anything. I just find gulp more readable and easy to get started with! Hope that makes a little more sense.
Yeah, I've been using Browserify with debowerify, and it's working so far. But I'm wondering if it would just be simpler to switch exclusively to NPM. My only concern is not finding the packages I need there. Would you say people are trending towards using NPM for web libraries though? I know there's a lot already, but I get the impresion that some are un-official and often out of date.
Good point. I love gulp so much more, but you can't deny things like what you mentioned. Has given me a few headaches since I've started working with it. Are these issues being worked on though?
Sounds similar to how the Meteor team added SVG support to [Blaze](http://meteor.github.io/blaze/). It's really awesome to be able to work with dynamic SVG in a declarative way.
Why use both angular and ember? Are they moving from one to the other? Both prototypes or in production? 
Exact same issue here. Used to work. Very frustrating since I really really like the intellij IDE in general.
As Issac puts it, NPM now stands for "No Problem, Meatbag".
&gt; Everything is a goddamn hashmap. How are you going to learn how to implement a hashmap in a language where everything is already a hashmap? This really strikes home.
It's been explained why, but for something fun see: http://www.jsfuck.com/
Nvm. Found out jetBrains made javascript editor which takes all what I love about Idea and made i for javascript use. That elevator! 
It had not cross platform support at the begin because it was created first to support w8/wp8 native apps development, even if since the beginning the team had a cross-platform goal. Obviously at the time they had to prioritize things
I use bower and npm together. Bower contains some client-side packages that are not available in npm, yet.
I switched from Browserify to Webpack because Webpack allows you to use variables in require() statements, and Browserify's author made it clear that this will never be a feature. This has allowed me to create an auto-require system that loads all files in a directory, which I've found useful.
That relies on a non standard naming scheme.. You'd likely have to do a lot more work than that. https://github.com/ivaynberg/select2 for example. 
&gt;Strings, like all primitives, are always treated like objects If that would be the case we wouldn't have to make the distinction. There are many languages where everything is an object. JavaScript isn't one of them. From the outside, primitives kinda behave like frozen objects, but those didn't exist in JavaScript until recently. `''.constructor` is a bit like checking for `undefined` with `== null`. Sure, it works, but your code isn't actually doing what it says it does. &gt;Up until this awkward moment: &gt; typeof new String("hello"); //=&gt; "object" As I said, exposing that wrapper machinery was a mistake. You should *never* use them. In Java, they served a purpose (e.g. if you wanted to put `int`s into an `ArrayList`). In JavaScript, they don't. Things get really weird if you use them: &gt; var s = '' undefined &gt; !!s false &gt; !!new String(s) true &gt; var b = false undefined &gt; !!b false &gt; !!new Boolean(b) true In Java, those wrappers are a lot less messy.
There's a lot of ways you could conceivably do that. The simplest would probably be to keep track of the state explicitly. [Here's an example](http://codepen.io/anon/pen/yLEtJ). 
While this article is rather straight-forward, I disagree on some of its conclusions. E.g. if maturity in terms of code quality was measured by the amount of releases, then the quality of e.g. firefox should be over 9000. Kidding aside, every release that breaks compatibility shows that there were design flaws before. Since these flaws were fixed afterwards, that leaves space for two possible conclusions: those projects that don't have a compatibility break were either flawless to begin with (fat chance) or still are riddled with their original design flaws. Therefore, it can be concluded that those projects that had the most refactoring are usually the best for what they do - but that doesn't answer the question if what they do is what you need. For example, both Underscore and lodash are utility toolkits full of functions you'll probably won't need 99% of the time.
2 + 3 * 6 - 4 equals 16. Multiplication goes first!
&gt; only a third of packages are even close to production quality That agrees with my experience. Coming from a Java and Python background it has been a difficult process for me at least, to piece together something which resembles a "standard library". I mean a "one stop shop" for the most common library functions which are also production ready and receiving maintenance updates. "most depended upon lists" help a lot but there are still gaps compared to Python. Do people want to share their lists of "go to" mature modules?
Yoose jay-kweeree
The only thing that stopped me from creating a blog with AngularJS was Adsense! I hated it even more when they allowed only bigger brands like Mashable to use Adsense for Ajax. It's complete partiality. Think about this: Google makes AngularJS to encourage SPAs and then on the other hand they stop Adsense for Ajax. Do they mean, web developers should create websites for FREE? 
thanks, fixed.
I'll believe you when you show me how do a 2 lines matrix multiplication.
You do not need to support any pre-SVG browsers?
i dont understand what you mean as 2 lines matrix
I've been using entr for this purpose. Running "make watch" just fires up entr. When something changes entr just runs "make build". The only disadvantage I can think of is that entr might not be installed on most people's systems. A pure nodejs replacement for entr would be better. http://entrproject.org/ 
you mean this? http://www.purplemath.com/modules/mtrxrows.htm
I agree with what you are saying. I think that most people just don't know that make exists, nor are they used to working with the command line. My biggest problem is that they are just "command runners". They are only good at running one pipeline of commands and that is it. They're poor build systems, especially when your project grows and needs different things built or needs different targets/tasks. Not to mention all of the different plugins you need to get grunt and gulp working. Why can't we just invoke commands/tools directly? 
Is this 2 lines matrix multiplication? http://i.imgur.com/tLXbe3N.jpg
I don't claim that high release count indicates good quality. I say that if package have only one release version ever, it's future is very unclear. Firefox is at least maintained and developed further.
No, not really. you are not supposed just to multiply each cell from both matrix to get the product of the third one 
I mean multiplying a matrix by an other. https://en.wikipedia.org/wiki/Matrix_multiplication
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Matrix multiplication**](https://en.wikipedia.org/wiki/Matrix%20multiplication): [](#sfw) --- &gt;In [mathematics](https://en.wikipedia.org/wiki/Mathematics), __matrix multiplication__ is a [binary operation](https://en.wikipedia.org/wiki/Binary_operation) that takes a pair of [matrices](https://en.wikipedia.org/wiki/Matrix_(mathematics\)), and produces another matrix. [Numbers](https://en.wikipedia.org/wiki/Number) such as the [real](https://en.wikipedia.org/wiki/Real_number) or [complex numbers](https://en.wikipedia.org/wiki/Complex_number) can be [multiplied](https://en.wikipedia.org/wiki/Multiplication) according to [elementary arithmetic](https://en.wikipedia.org/wiki/Elementary_arithmetic). On the other hand, matrices are *arrays of numbers*, so there is no unique way to define "the" multiplication of matrices. As such, in general the term "matrix multiplication" refers to a number of different ways to multiply matrices. The key features of any matrix multiplication include: the number of rows and columns the original matrices have (called the ["size", "order" or "dimension"](https://en.wikipedia.org/wiki/Matrix_(mathematics\)#Size)), and specifying how the entries of the matrices generate the new matrix. &gt;==== &gt;[**Image**](https://i.imgur.com/EzvY3Rs.png) [^(i)](https://commons.wikimedia.org/wiki/File:Matrix_multiplication_row_column_correspondance.svg) --- ^Interesting: [^Matrix ^\(mathematics)](https://en.wikipedia.org/wiki/Matrix_\(mathematics\)) ^| [^Cache-oblivious ^matrix ^multiplication](https://en.wikipedia.org/wiki/Cache-oblivious_matrix_multiplication) ^| [^Matrix ^chain ^multiplication](https://en.wikipedia.org/wiki/Matrix_chain_multiplication) ^| [^Min-plus ^matrix ^multiplication](https://en.wikipedia.org/wiki/Min-plus_matrix_multiplication) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ckls01t) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ckls01t)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
You probably have an issue with oSession.uriContains(sAppend) not being true when it should, otherwise the replace would not happen again. Are you sure oSession.fullUrl = oSession.fullUrl + "asdfgh" will cause oSession.uriContains("asdfgh") to return true? You could always try if(!str.match(sAppend)) instead of if(!oSession.uriContains(sAppend))
Yeah, I think everybody has their own recommended modules and if there was a way to pool them it would help increase overall discoverability. A bunch of Node-focused ones [here](https://github.com/sindresorhus/awesome-nodejs). Some frontend/game focused ones [here](https://github.com/hughsk/game-modules). I mostly do frontend, but here's a short list of my favourites or most used: tape, xtend, lerp, canvas-testbed, [npm-dom](https://github.com/npm-dom), uniq, vectors, clamp, color-style, domready, events, inherits, deepcopy, domify, eases, frame-loop, hyperglue, [stackgl](https://github.com/stackgl) You'll start to see authors that put out reliable and consistent modules, like: hughsk, mikolalysenko, substack, jongleberry, tmpvar, timoxley, etc. 
thanks for sharing. 
Would love to see this! Thanks!
Interesting proof of concept, but I'd have a hard time using it in produciton or depending on it in a module. 
Half the problem of NPM, imho, is that if you don't *know* what library to use, googling won't necessarily get you any closer. There are probably no less than three libraries that do what you want, that are in varying states of decay, and all of them are probably just not-kept-up forks of other packages upstream that *aren't* in NPM. It's a total mess. And that's in the case that there's something available in NPM in the first place, often there isn't at all, so you're still manually including libraries.
&gt;There are three times more grunt packages than gulp packages, though it begs the question of what those extra thousand grunt packages do. I assume this is just trolling, because in most cases whatever you're used to doing with grunt usually hasn't been ported to gulp yet. About once a month I consider making the switch, look to see if my most commonly used tools have been ported yet, and then shake my head in dismay.
I think the problem come from ASI. You can check http://es5.github.io/#x7.9
There is probably more crap in npm than good modules, but that doesn't mean there aren't still thousands of good modules. ;) These problems are annoying but they shouldn't stop you from using npm. And hopefully the problems will be mitigated as npm improves search/discoverability, and as the community begins to enforce more stringent standards on how to write modules (eg, tests, semver, auto-doc, etc)
If you really love working with matrices, check out MATLAB.
As opposed to?
You could have at least measured how big the releases were. Changing the same single line a 1000 times doesn't make a well maintained package neccessarily.
I dont use CoffeeScript but I have set up this for any Sass errors: gulp.task('sass',function () { browserSync.notify(messages.sassBuild); gulp.src('_scss/main.scss') .pipe(sass({ loadPath: ['_scss'], style: "compressed", trace: true, noCache: true })) .on("error", browserSync.notify) .pipe(cmq()) .pipe(cssmin()) .pipe(gulp.dest('resources/css')); }); So when Sass errors it doesn't break gulp
 str = "5 of diamonds" ; console.log( str.replace(/^([0-9]{1,2}).*$/, "$1") ); // returns 5 str = "10 of diamonds" ; console.log( str.replace(/^([0-9]{1,2}).*$/, "$1") ); // returns 10 You can use a regular expression to find the numbers at the start of the string. The {1,2} means it will match either one digit or two digit numbers.
This article is incorrect about crawling. Google now parses and executes Javascript when crawling. Most content sites shouldn't have to do anything to get their content indexed.
Whatever you're trying to do in gulp that you can do in grunt must be something pretty obscure. I'm skeptical of your claim of your not finding a gulp plugin of common tools. By now, other developers have already ported pretty much all of them. Mayhaps you're not looking hard enough? You can easily port stuff you want to gulp with a through2 wrapper. 
OK, I get it now, Google Instant predictions is a preference you have to turn on to get the behavior you are talking about. Anyways, the concept of a SPA with one view vs. just an AJAX page is debatable. One page is always a single page, and AJAX is not necessarily the end all of a SPA. Arguably a SPA requires multiple views to be handled as a single complete dynamic UI returned from one round trip. Having only one view is cheating, there was never a reason to magically handle multiple views as a single page, which is the trick to a SPA. Anyways, its just a buzzword.
SPA is still generally an accessibility failure.
I haven't used webpack on a large project, but I've heard good things. To me browserify was a simpler choice and so I normally go with it. Next time around I'll be giving webpack a shot since it has a lot of useful features that browserify is missing. They both get the job done.
Not to be pedantic, but I said *my most commonly used tools*, not *common tools*. Sure, other people *are* using it - but it's not yet ready to roll for a lot of us. (You know, the ones using the other *thousand* or so packages not ported to gulp.) And there's really no point in wrapping your own just for the sake of doing so if you already have a working solution (grunt).
Doesn't Google Analytics have a full API that allows you to send information about page interactions manually using javascript (specifically in the cases where content interaction does not result in a new page load?)
Thanks alot gatorpower! I will definitely look further into regular expressions!
1. To avoid the popup blocker: put your `window.open` statement directly inside of your `getFile` handler, and set all your XHRs as synchronous, which you can do by changing the last argument in XHR.open from `false` to `true`. 2. Don't use the `onclick` attribute. Use the [`addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener) method.
I have never thought of ditching grunt for gulp what would even be the point? It'd be like having a perfect maven setup, and switching to ant + ivy because why not?
This is mentioned in the article. While Google supports this, other search engines don't do the same currently.
Thanks for you very ellaborated answer achen2345. Really, big creds! Even though I might not fully understand the meaning of array notation or having a complete grasp of what you've just explained I feel that I could've added some more information about the application and my thoughts about it. I've built one deck with 4 different colours (only including 1 colour in the example): baseDeck.push("2 of Spades"); baseDeck.push("3 of Spades"); baseDeck.push("4 of Spades"); baseDeck.push("5 of Spades"); baseDeck.push("6 of Spades"); baseDeck.push("7 of Spades"); baseDeck.push("8 of Spades"); baseDeck.push("9 of Spades"); baseDeck.push("10 of Spades"); baseDeck.push("11 of Spades"); baseDeck.push("12 of Spades"); baseDeck.push("13 of Spades"); baseDeck.push("14 of Spades"); After the "baseDeck's" been created I ask the user for how many decks they'd like to play blackjack with (as this seems to differ from casino to casino). Taking value of users input i then: var newDeck = []; newDeck.push(_.shuffle(baseDeck)) x amount of user_inputted_value. In this way I get 3 shuffled decks but in three different arrays (thinking of trying to solve this problem with by generating a random value for which deck-array to choose) With this technique the value of each card will not have any relations with its position in the array hence I'm questioning wether I should re-think and maybe go with something more aligned to your suggestion or just make a regular expression to retrieve the value, just as gatorpower suggested. Br, Mac-ten
Netflix has Ember, Angular and React on various apps. They're all different and separate applications. My project at Netflix is 100% Ember. However, prior to being at Netflix I developed in Angular for years, and I'm still an active participant and contributor in the Angular community.
[The best JQuery replacement ever.](http://vanilla-js.com/)
[https://developer.chrome.com/devtools/docs/javascript-debugging#breakpoints-dynamic-javascript](https://developer.chrome.com/devtools/docs/javascript-debugging#breakpoints-dynamic-javascript)
I have an idea, instead of what you are doing, make a tiny html page that just has the image in it, and use $(“div”) .load("image.html", function() {// Do my callback });
[As promised.](http://www.reddit.com/r/javascript/comments/2gpmoq/i_work_a_lot_with_emberjs_and_svg_at_netflix_here/cklchpm) Here's my write up on using SVG with Angular. This was a fun one because I got to work with Igor Minar in a late-night hack session solving the problem with an initial pass. Subsequently, Tobias Bosch and (I think) Igor hacked on it some more and came up with a cleaner approach than what was initially put together.
Removed, please see our [guidelines for promotion](http://www.reddit.com/r/javascript/wiki/index).
Oh, thanks, youre right! I'll change my baseDeck into an object instead. I'll let you know how it progresses :)
yup :)
Very cool thanks for the insight
[Posted here](http://www.reddit.com/r/javascript/comments/2gs2do/working_with_svg_in_angular_on_the_heels_of_my/)
Hmmm... phaser vs flixel
Do you know any spa in production crawled by Google without implementing the Ajax crawling scheme?
This.. is actually wonderful. Somebody should post an explanation of how this was pulled off, and what `who.is` could have done to prevent it.
Yep, it is actually! I may not be using the latest tools but I make functional, well-designed websites that meet my clients' needs.
So it prints the selected element to the console? I don't get it, when or why would I need/want to use this?
Vanilla JS: ``` var img = new Image(); img.onload = callback; img.src = theImageURL; ``` Edit: formatting, answered on my phone. As said below, you can set your dynamic background-image in the callback, the image will be fully loaded.
As for how he pulled it off, there's a TXT DNS record for the jamiehankins.co.uk domain, the content of which is just a script tag with a "src" attribute to loads a javascript file he has hosted somewhere else on the internet. When who.is reads the DNS records and outputs them to the page, it does nothing to sanitize the data, so &lt;script src="//peniscorp.com/topkek.js"&gt;&lt;/script&gt; gets added to the page as-is, and the script runs.
You can put whatever you want inside TXT records. Even if an unexpected form, DNS are still a source of input, and you should not dump them into the DOM without sanitizing.
Removed. Although this appears to be harmless, we can't guarantee that the XSS won't be altered to something harmful. Also, I'd highly suggest that you practice responsible disclosure of vulnerabilities.
You were [warned](http://www.reddit.com/r/javascript/comments/2gb19p/10_quick_tips_to_superpower_javascript_time_to/ckhfszk), it's a shame you didn't take it seriously. Also, be advised that if you create a new account and continue the same posting habits (of only posting your site), we'll just shadowban htmlxprs.com so that it can never be posted to /r/javascript again, by anyone.
While true in theory this has not been show to work. Just as /u/check_ca did I challenge you to prove this with search results.
Please let him/her at least respond to comments in this thread since it's important for future discussions relating to this.
Even though you only explained half of it, this is the solution. OP, after the Image is loaded, you can assign it to a background.
Very true, but when the audience is known (like an intranet for a small company) it can be a very good tool to have in your toolbox, but it certainly isn't for the web at large until the accessibility issues are worked out.
Yes, yes it does.
asynchronously downloaded script, not asynchronous script.
Sure, no problem, I was not telling that to criticize or to be negative. I just believe that what you are multiplying is arrays, not matrix. Check the pictures on the wikipedia article, they are quite explicit. 
Then you should do a blog post about these tools! 
That... *that's actually the link, isn't it?* Beautiful. [//peniscorp.com/topkek.js](//peniscorp.com/topkek.js)
It's like it is minified, but still has all the whitespace.. Not sure what this might mean: var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"];
debugger; is the solution I've been using. I was just trying to figure out why I couldn't get the other solution to work... thanks for the reply though! 
As I already mentioned in the /r/webdev thread, this stuff is documented. Here are the complete lists: https://getfirebug.com/wiki/index.php/Command_Line_API https://developer.chrome.com/devtools/docs/commandline-api
Pretty hard to do much with everything minified - can you post the uncompressed source somewhere?
Which do you like more Ember or Angular? I'm learning Ember now and wondering if I should also learn Angular. 
It keeps track of what's selected, too. Pick a node. It's $0. Pick another node. It's $0. The formerly selected node is $1. And $2 and so on. I'm not sure where it caps out. For non-DOM stuff, use $_ . It's the result of the last console call. 
I think it is because that only works when the code is dynamic, but in a synchronous way, like an eval statement. When you get to the point that you are doing the line //@ sourceURL=dynamicScript.js any functions in the asynchronously loaded script are not loaded yet, so how could it work? It boils down to when does $.getScript fire, and when is the code loaded? I put a pointless line in the AJAX callback under the dynamicScript thing, and put a breakpoint on it, and when I was at it, I called a function in the $.getScript loaded file, and it was not defined.
I guess debugger; will have to due!
Other neat tools: * right click the output of a console.log and store it in a global variable * right click the side of a source file and create a conditional breakpoint * you can unobtrusively add log statements in the conditional and since they don't evaluate as truthy, it won't actually stop execution * command + t or command + o will provide source-file search (this one is more apparent in the UI than it used to be) 
They all seem to be disabled for some reason. 
This would leave the no-js crowd without any image at all (just like OP's technique), if this technique is used then there really should be a fallback for them.
Sure, here is a zip of the source: http://www.clearsoftinc.com/Archive.zip
I succeeded in making the $.getScript call synchronous with $.ajaxSetup({async:false}); but it does not help, it seems the "//# sourceURL=dynamicScript.js" thing only works for eval.
You should have posted this information sooner.
https://news.ycombinator.com/item?id=8334767
I would argue that a fallback would make more sense here than anywhere else. JS is more ubiquitous than ever but whether it be for the no-js crowd or for accessibility a fallback is always good practice in a web/browser context. Especially when people are blocking scripts because of privacy reasons. We need to differentiate between necessary JS and flourishes and treat them differently.
Then you will have two problems to worry about.
[I actually did a six part blog entry on that.](http://www.benlesh.com/2014/04/embular-part-1-comparing-ember-and.html) I don't really have a preference. I know that's a wimpy stance. When I'm working in Ember, there are times I wish it was Angular, when I'm working in Angular, there are times I wish it was Ember. I do need to revisit this topic again in another post I think. I have learned a lot more about both frameworks since I did the blog entries.
Well, if he wants to call a function (callback), that means he's using JS :D
Bluebird already has this as [`Promise.props()`](https://github.com/petkaantonov/bluebird/blob/master/API.md#props---promise). There's no need for another dependency.
Which does not preclude also including a fallback.
The same could be argued about the web in general: it's filled with crap and therefore can't be searched or indexed in any good way. Of course we know this isn't the case... ;) 
How is this a new way to [share code](http://www.sitepoint.com/7-code-playgrounds/)? 
I'm not trying to promote.. In fact a mod told me to post again since my last post used a shortened URL 
You are promoting it by posting it here. That may not be your intention, but that is the end result. And I apologize if our guidelines aren't clear, so I'll try to explain further: For posting a game/site/etc. that uses JS, we need you to provide something more than just a link to the game for us to actually discuss. What would that include? Per the guidelines, at least one of the following must be included: * a link to the project page (like on Github or similar) * or, a technical write-up about the project; this might include your reasoning for choosing specific frameworks and libraries, your post-mortem opinion of those frameworks and libraries, your development tools and workflow, etc. This information can be included either as the post itself (say, a github link or a link to a blog post), or in the comments if the post itself links to the end result. Thanks for your understanding.
i seee, thank you, i'm not a mathematician, until now i was thinking that matrices are arrays into other arrays, i use that kind of operations for have good speed on 3d calculation of poligon vertex, i build a little rendering engine for fun using cos() and sin(), this happen more than 10 y ago and i was using lingo of macromedia, now i was trying to remake it on javascript and html5. Matrix seem very interesting, thanks to introduce it to me, i go to study more :)
Hash? You lose information by hashing.
It is the secret sauce of the medicine :D
Lucky you.
Thank's for your comment :) I tried to make the design as simple as possible. How would you design it?
There are definitely valid reasons for switching to gulp from grunt. For large projects with certain configurations, the build times can start to get pretty excessive with grunt. Specifically projects with large amounts of files that have multiple tasks performed among them. Avoiding hitting the disk that many times can speed things up significantly. Of course, it all depends on your project and your specific needs.
If you put the code on GitHub I would be happy to create a branch and mess arund with the design. If you don't like it you can scrap the branch.
[lz-string](https://github.com/pieroxy/lz-string/)
Similar idea to http://hashify.me/. They went a step further though and implemented url-shortening through bit.ly, essentially making bit.ly a document store :)
Nice catch. The example in that blog post is actually using Bluebird :X
I'm thumbing through the code and noticing a few minor things here and there, like for instance, here you have a [inherit function](https://github.com/ratalaika/flixel-js/blob/master/src/Flixel.js#L21) thats a Polyfill for Object.create. If you're targeting HTML5 the all of the functionality from ES5 is safe for using.
Almost positive this counts as spam bud, need to read the reddit self promotion rules.
Im not super skilled in JS. Is that a good thing or a bad thing :S?
Package size hardly correlates with quality. Hopefully you didn't mean that. Yes, I could have checked how version strings have evolved over time, assuming everyone follows semver specification. I don't think it is so. People are too afraid of increasing the major version. The [semver specification](http://semver.org/) says &gt; Major version X (X.y.z | X &gt; 0) MUST be incremented if any backwards incompatible changes are introduced to the public API. It MAY include minor and patch level changes. Patch and minor version MUST be reset to 0 when major version is incremented. Yet last underscore release (1.7.0) did: &gt; For consistency and speed across browsers, Underscore now ignores native array methods for forEach, map, reduce, reduceRight, filter, every, some, indexOf, and lastIndexOf. "Sparse" arrays are officially dead in Underscore. I think that one is definitely a backwards incompatible change.
[Here](http://jsfiddle.net/a5hbx5qg/1/)
wow! Thanks!
It also monitors your face to see if you're watching the road. Code is [here](https://github.com/octoblu/att-hackathon). Warning: this was written during a 24-hackathon, so the code's a little...special. A lot of the "glue" to get the devices to talk to each other was written using our free, open source internet of things communication system [Meshblu](https://github.com/octoblu/meshblu). 
&gt; Package size hardly correlates with quality Agreed. But the size of a change can in many cases mean a refactoring, which I assume does. I don't think version numbers are always a certain indicator. To really get the image, one will have to look at the code. There are metrics to measure its quality, but those are really complicated.
GFY (that doesn't stand for "Good For You" either)
You broke the shit out of my back button
Can you make it disable my online poker account as well? 
The blog post is somewhat confusing. I didn't understand if this style is somehow better than `Array.prototype.map()` or is it just more efficient for very alrge Arrays. I am guessing a common use case for Transducers.js would be creating a transformation function (*e.g. sum()*) and reusing it for various types of collections. The code examples would be easier to understand if they used a single transformation throughout the post.
Your code will automatically be completely accessible the second you put it up. I can take everything you just made, HTML, CSS, JS, images etc, and make a perfect clone (barring server side interaction). Typically, folks minify it before pushing into production, it basically removes all the white space, comments, and replaces variable names with single letters and such. That's more for reducing the size, but it obfuscates it a bit as well. But if somebody wants to figure out how it works, or how to copy it, they will. 
Thanks for the response. Which leads to my next question: why would anyone use it to develop an app they intend to make money from? If it's instantly reproducible won't they lose any unique selling points? Or is the idea that the clever parts of an app are carried out server side, and client side just shows some whizzy stuff? 
There's a lot of reasons, but yeah most of the time the magic happens server side. Code isn't everything when it comes to businesses anyways 
I see why someone would think this is a good idea, but decoupling something this low-level and introducing extra overhead is a huge waste of, well, everything - time, bandwidth, resources. The end result isn't more readable or efficient than a simple filter or map statement, so I'm not sure why anyone would want this in Javascript. Honestly if you feel you need that level of separation and control, Coffeescript's list interpolations are probably a better place to start.
&gt; why would anyone use it to develop an app they intend to make money from? That seems like a really silly question. That's how traditional software has always worked. "Why would Microsoft ever want to develop a word processor/office suite, when anyone that has the software has all the code and can make copies of it?" And yet Office brings in the majority of Microsoft's pile of dough. Being able to make a copy does not mean it's legal to do so.
it turns undefined into false
Are you rocking a Samsung Chromebook there? Awesome! 
Makes perfect sense, thanks!
why don't you install RES?
A basic JavaScript bookmarklet is what you want. You could make it so that when you click the bookmarklet, it transforms all imgur links on the page the way you want. Something along the lines of: javascript: (function TRANSFORM_IMGUR_LINKS ($) { $('a').each(function(){ this.href = this.href.replace(/imgur\.com/i, 'i.imgur.com'); this.href += '.jpg'; }); })( jQuery ); You'd literally create a bookmark whose URL text is the script above. Clicking the bookmark would run the script on whatever page you're currently on. The script assume jQuery is loaded on the page, as it is on reddit. Of course, weird stuff might happen if you assume the `jpg` extension for an image that is actually a `gif` or otherwise. If you wanted to go deep, you could make it so when an imgur link is clicked, a dialog box asks what the format is (gif, jpg, etc)... not sure how else you could do this.
How about just turn off the switch port for 10 hours?
I have Microsoft Office, but I don't think I have all the code for it.
for the lazy: http://redditenhancementsuite.com/
If you have a thorough look at copy protection schemes, you'll see them all failing because their basic concept is erroneous, since it falsely assumes that reading is a different action if followed by writing instead of being executed. JS (as is any other interpreted language) is insofar an exceptional example of this because it is at least at some time present in plain text. But even with compiled languages, there are such things as disassemblers, so there is absolutely no technical way of protecting yourself against those who try to rip you off. There are, however, both legal and logical ways of dealing with this. I guess I don't have to talk at length about the legal way of solving this. The logical way is more interesting anyway, because it allows you to thrive from your opponents: just always be at least a bit faster and better than them. Let their attempts of imitation keep you on your heels of innovation. Just copying your code doesn't help if all users use your service exclusively. This logical way resolves another misconception. Businesspeople always think of software as something that is finished at some stage. But there is no way that even a small piece of software is ever finished. You can always improve, fix bugs, add new features, refactor your code, improve performance or usability. It never stops and so shant we all.
I did something better. I don't get drunk.
http://www.amazon.com/Structures-Algorithms-JavaScript-Michael-McMillan/dp/1449364934/ref=sr_1_1?ie=UTF8&amp;qid=1411131886&amp;sr=8-1&amp;keywords=Data+Structures+and+Algorithms+with+JavaScript
If your computer can execute it, you already have it, albeit in a compiled form.
You have the compiled code, which is more or less in the same category as minified JavaScript. All the comments, formatting, and meaningful variable names are gone, but everything else remains for anyone determined enough to want to reverse engineer how it works. It could not be any other way — Office would not work as a program if it didn't contain complete instructions for how to do everything.
npm search is awful, no doubt. There is a lot of work that can be done to improve the search, either by npm or a third party. This doesn't mean npm is forever doomed; as zobier pointed out there are already some tools being built to search npm in a better way. [Another good one](http://npmsearch.com/).
There is no irreversible way to hide client-side JS code on the web. And if you try, someone will take that as a fun challenge to untangle. The same goes for any program that runs on a CPU within your arms' reach. Hell, [the original Xbox got hacked with a belt sander and clever hardware probes](http://books.google.com/books?id=FdPNE6beKcMC&amp;pg=PA126&amp;lpg=PA126&amp;dq=belt+sander+xbox&amp;source=bl&amp;ots=vykIKQfgNH&amp;sig=NDzsZ52Tb6I2GenhhDzlRsnZ6pQ&amp;hl=en&amp;sa=X&amp;ei=WjAcVP2fB_WMsQSC-IKIDQ&amp;ved=0CDQQ6AEwAA#v=onepage&amp;q=belt%20sander%20xbox&amp;f=false). Sounds complicated, but only one guy had to make it work for everyone in the world to benefit. The only obstacle here is *how hard* is code to inspect. And *how hard* is balanced by *how rewarding* is it to accomplish. So, you can get on with your job and make it not worthwhile to dig up your code - i.e. by making it worthless when not paired with the rest of your service product; by not offering a fun puzzle in obfuscating your code; through threat of legal action. Or, you can try obfuscating your code - and enjoy the treadmill chase as people work to crack your code just for the sheer transgressive enjoyment of it. The entertainment industry has been hosting that game for years, now.
i didn't notice it. However I disabled the useless animation in accessibility
I updated it to ignore links that are albums or are already i.imgur links. javascript: (function TRANSFORM_IMGUR_LINKS ($) { $('a').each(function(){ if (this.href.match(/imgur\.com\/\w{2,}/i)) { if (!(this.href.match(/i\.imgur\.com/i) || this.href.match(/imgur\.com\/\w{2,}\./i) || this.href.match(/imgur\.com\/a\//i))) { this.href = this.href.replace(/imgur\.com/i, 'i.imgur.com') + '.jpg'; } } }); })( jQuery );
Sorry, I just noticed the bug :( Will try to fix it
Exactly :D Someone just showed me that page. Making a free url-shortening service a document store doesn't seem reliable in the long run... 
I have an answer for you, but it's obfuscated...
http://www.jsexample.com/#DwZwLgngNgpgfAKAAQqQIwPYBMIG9mqEC2AhgE4DmAlgHYBcATAAwAOAHks+56x12wG4ChFCxJYstCo149u/OYOEjlhTGSwwydJAEZuIDFCpZ0UEgGMA1kMIBfZY8LKAxGQwB3fCNRpLVincAVxosAFoLIwxtFwAxAGYE2IBOWx8kMQkpOl1ZXO58jkK0n1JKWhzZKu5eEpF1TW09AyMTJBdczqY6wgAvMNpNNkqmUbqHZ0I3TzoACwwANy1vdL9rQIwQ8MioaLoXeMPE2J7UHb2PWaowGHGEJ1QXMGvYFZ8AMwwaMBluAAkYFAls8LCRTigytR6EhqhxYeCkMoJqhXCQgmB5mQ3iJJCAWOYIHRaMYaDAwmhdtYEZ9vjkAKz/QHAqighGQip6PKwmHsO7OYAAenA0HgCGAmBwiGUwEkCyQJgAvAAidweJWIdJIGVUOWKpXPMCwdUAFReMEFso16W1uqwyrRGOi6oAgujMRadVafDb5XalQ7MeqAMpgcggD0LL0iH16gNOuAAYVmJCgsBoFC04YFltUqBjfrjZGDybIMCzOc1+ftbvjAFV8RhxDAsBGo62HigqyrPOrc53Zb7lQajXBTYbzdnPX2tQPYzWi3BXY6yO3K7OC/Pg6GyOWp2udYP/ZvE8nUzB05nV9b19Xl8XyGWr96b0e73B67smy3J5HpT+o9KL6qr2+62kOZommaT7Ri+hYuvO0GEF2cFwCGYaIXmsHHkmKZphmO4Yf2B5zm+QYlo+/7Tshx4fo2mjfhWeaUYKEoQHAQAAA== Now reddit is the document store :)
You say*"You start with: https://www.google.co.uk/search?q=test1+test2+test3"*. But my homepage is https://www.google.co.uk/ . Basically, how do I tell javascript to **NOT** replace when search?q=+test1+test2+test3 is already present in the URL?
Fair enough. I just speak in chrome extension, I guess. I think imgur lets you fetch images via XHR like dropbox, so it would work without the permissions, actually.
yeah mine is on, il turn it off
Hey yeah, good thinking :) Maybe instead of using `String.prototype.match` for boolean tests, we should use `RegExp.prototype.test`: javascript: (function TRANSFORM_IMGUR_LINKS ($) { $('a').each(function(){ if (/^(|http|https):\/\/imgur\.com/i.test(this.href)) return false; // skipping any non-imgur links if (/i\.imgur\.com/i.test(this.href)) return false; // skipping 'i.imgur' links this.href = this.href.replace(/imgur\.com/i, 'i.imgur.com'); this.href += '.jpg'; }); })( jQuery );
I don't get it. If you have enough of your whits about you to think 'oh I should blow in into the breathalyzer' why do you need a breathalyzer? 
As far as I recall, we hard-wired a raspberry pi directly into the wiring harness of the car, haha. That car is the [Rally Fighter](http://localmotors.com/rallyfighter), and they're planning on putting one with Meshblu in their actual production vehicles! So yes, we may have cheated a little :)
Can you get it to take a pic of you trying to get into your car, smashed out of you branez, and then upload the pic to a PAGE OF SHAME? Even more people will buy it then.
Why don't you autodetect the source? if (input instanceof Image) { ... } else if (/^video$/i.test(input.tagName)) { ... } else { ... } Have fun!
This is perfect. The developers at my work have actually been naming all of our apps internally after bread so this is an amazing find haha. But seriously though. Thank you, this is exactly what I was looking for.
I have RES, how would that help?
sounds good, thanks... Only really want it for a single loaded page though, because as you say some links are gif or whatever
Could you speak up a bit? I couldn't hear you from all the way up there on your high horse.
Foreign knock-offs hardly ever be makin' more booty than ye originals. Piracy be a fact 'o life. *Yaarr.*
Ah I didn't know that... Good point.
Because then I'd have no internet access and I'd have to play solitaire in silence. 
New feature: Texts your employer and plots your fired-ness on a graph?
Quicklink Git Repo for those only interested in the open source part of it: https://github.com/robicch/jQueryGantt/
Well what do you know, an even more esoteric "language" than brainfuck... 6 base characters vs. brainfuck's 8... well, fuck.
Well I have to say it is kind of cool even if it won't translate to the real world.
We've hit the same problem. Looks like WordPress and Facebook are [also affected](http://stackoverflow.com/questions/25790873/uploading-files-over-http-fails-on-ios-8-gm-safari). iOS Chrome works. 
That sucks. Hope this bug is short-lived
I'm not sure of any clients that do specifically what you ask but you might want to check out [Video bridge](https://jitsi.org/Projects/JitsiVideobridge) and Jitsi Meet. It's open so you can customize it to your liking.
That's something trully valid to do :) I'll open an issue for it so that we can keep with the old methods and let a `qr.decode()` method do what you've said, wrapping the others. Thanks! 
I think it browser needs to support WebGL.
Just a bit overkill...
Videobridge maybe "backend", sure. If you want to do WebRTC Video, read about WebRTC. [Here's a good start](http://www.html5rocks.com/en/tutorials/webrtc/basics/). Maybe you're not all that familiar with what WebRTC really is. Perhaps structure your question better next time. Please, please read about the technology first before asking a question.
You're a waste of time.
You're actually the condescending one here. 1. "READ TEXT BEFORE POSTING" is just in poor form -- do you take us for a bunch of kids? 2. You then insult the first person who sincerely tries to help. 3. You're abusing the report functionality to try and win this little spat. I've gone ahead and removed your post for the above reasons; if you decide to repost, please try to keep things civil. Thank you. 
But apple can do no wrong!
Pro tip, if you ever have to ask "You'd think they would have unit or integration tests for...." the answer is "No, they do not"
nice. will be fun to see how far you can push this. also you could shim node.js apis and name the transform 'phpify'.
For some reason, /u/tali241 has chosen to delete this post and their comments (for probably the same reasons that they've deleted their entire reddit history). Anyways, for posterity, I'm going to copy the PM that I received from /u/tali241 here, so at least future moderators dealing with this bit of unpleasantness will have some reference: &gt; ## I am very disappointed in how you handled the situation... &gt; To answer your questions... &gt; 1) Yes people here have a tendency to just read the title and answer without making sure it fits the entire question. If that is an unreasonable thought, then let me know. But since I have posted here a couple times, and each time I have gotten people way off topic on my question due to them not reading the text inside. &gt; 2) I didn't insult him... he didn't answer any part of my question, he is very off topic if you didn't noticed, but I guess that is allowed here. &gt; 3) I am not abusing any report function, he is off-topic and condescending to me. I just reporting a justified issue. I read the rules and this fits that he is off-topic. I guess talk like this... &gt; https://www.reddit.com/r/javascript/comments/2gvlkt/what_is_the_best_webrtc_client_read_text_before/ckn00m0 &gt; is welcomed here. &gt; I will leave this community as the mods don't have a good handle on this community. Extremely disappointed and I didn't even get an answer to my question. &gt; I will be filling a complaint against you with the reddit admins. I am sorry this has come to this but again, I was justified in my ways.
You can write any piece of software and if it's good enough, someone will reverse engineer it and release a similar product. But these days, web applications are usually focused more on *providing a service* rather than *selling a product*. People pay to use web services because they get a service that is always up to date, comes with technical support, and/or has a growing collection of assets/tools/components/etc. Someone can steal your code, but that doesn't mean they can replicate your service. And if they can, they would have done it even if they couldn't copy your code. And if you minify your code, it's probably less work for them to just reverse engineer it and write new, legible code.
Point me to someone who said this.
Anything you would recommend if I needed to have information show up on hover of the photo but still have the click handler to open the lightbox?
Interesting that Chrome works. Given that they use the same engine... How's that even make sense.
fart
thanks for the info, I'll check it on ff29
Exactly, because if they did it wouldn't be a bug in the first place.
[Github too](https://twitter.com/zachwaugh/status/512987261240352768)
Good, because any angularjs or any other client side site is pretty worthless without javascript
I think the point is that they will be crawlable/indexable and therefore good for SEO...
Kind of an odd project... &gt; Quick Link Previewer isn’t finished or ready to be used. In fact, it has barely started. And then: &gt; We will be launching the project on Product Hunt and the Chrome Store in about two weeks, October 6th. I mean, it sounds like someone simply got a bright idea, but they only coded a proof-of-concept before realizing that they didn't want to finish it. So they created this "experiment" (their words) to outsource the work to the FOSS community, who're expected to hop on and complete the project in a few weeks time. Just sounds extremely odd to put a public launch date on something that you're going to depend on volunteers to complete. Good luck...
Yep, that's exactly my point. Without Javascript being executed by the spider my Angular sites have no content at all.
Very odd, I completely agree. I'm working with a bunch of people in the hackathon communities to publicize this and talking with people who have never participated in an open source project to get them involved and help them learn. The oddness of the plan is the exact reason why it is an experiment. :-) I expect that even if/when contributors take part, I will still be doing the majority of the work keeping things organized and on track. If no-one else contributes then I'm on my own to build and ship a v1 in two weeks. An experiment. :-)
You're not on a horse. You're just drunk.
That's not possible with the native JSON API, but there are [libraries](https://github.com/mirkokiefer/canonical-json) for doing what you're trying to do. 
That's the link in the OP...
My RES does exactly what you asked. All my links have i. and end in .jpg or .png. When I open reddit in an other browser, those disappear. Hence I thought that RES could take care of it for you.
http://www.reddit.com/user/TheAngryDesigner
[Well, that's technically true.](http://imgur.com/sy9lVl4)
Maybe he is, but he was saying you were on the horse, bub.
while(1){} or make googlebot factor rsa numbers? 
The commentator deserves down votes for not contributing in a meaningful way, but you know full well that way too many members of the design community give apple more credit then they deserve.
I don't really have a strong opinion on the subject of os design, so I don't think you need to bother with convincing me how great (or productive) the osx experience is. However, you're arguing over a side opinion I gave when I was suggesting that you're wrong to tell /u/TheAngryDesigner that there aren't apple fanatics in this sub that unconditionally approve of everything they do. That's pretty damn ironic, because your response was a massive wall of text showing approval for the work they do.
I see this is actually an issue that needs some solving... My data structure is guaranteed only 2 levels deep, so I feel I can whip up a home brewed solution. edit: I'm writing a library, so having a dependency or adding another 200 lines ain't justifiable. Thanks though, you've helped me decide a course of action.
I never said they can do no wrong, like the original post I responded to suggested Apple fans think. They had a massive SSL bug in public code that wasn't even fixed quickly enough after it was revealed. There are bugs in pretty much every new OS release they make. They had a really bad image retention issue in their first run of retina macbooks. My point is just that you can acknowledge that Apple is a company of non-genius human beings and still prefer their products. I work with a lot of people who use Mac, and I doubt any of them think the company infallible. Though my "wall of text" was only so long because I agreed with you that there are people out there who do think the company is infallible. But the majority of Apple developers do not.
Why is your comment almost a duplicate of the top voted comment on the same issue on r/webdev?
Maybe you're confused by the term "empty statement". `{ }` is not an empty statement; it's a block statement in ES terminology (which happens to be empty). Compare the Java example I gave. As I said, Java doesn't have ASI, but it's perfectly fine with `{ }` without a semicolon. Also see http://es5.github.io/#x7.9.2 , which says: &gt; [T]he source &gt; &gt; { 1 &gt; 2 } 3 &gt; &gt; is also not a valid ECMAScript sentence, but is transformed by automatic semicolon insertion into the following: &gt; &gt; { 1 &gt; ;2 ;} 3; Note that even after ASI, there's no semicolon after the `}` [[here you can see the grammar does not follow a block with a semicolon](http://es5.github.io/#x12.1)]. So `{ } 3` just becomes `{ } 3;`, and `{ } + [ ]` just becomes `{ } + [ ];`. ASI doesn't affect the completion value. You also may be helped by playing around with Esprima, a really awesome JavaScript parser, which can help you see what syntax creates an "empty statement" or "block statement" or "expression statement", etc. http://esprima.googlecode.com/git-history/harmony/demo/parse.html?code=%7B%20%7D%20%2B%20%5B%20%5D%3B%0A%0A%3B%20%2B%20%5B%20%5D%3B The link above shows two productions: BlockStatement followed by `+ [ ]` and EmptyStatement followed by `+ [ ]`. Please note which parts of the code are parsed as each kind of statement.
Are you familiar with the [JWT spec][jwt]? JSON Web Tokens can be used for exactly what you're trying to do when combined with [JWS][jws], defining a standard way of performing authenticity checks against JSON objects. There's a [growing body of libraries][jwt.io] that will perform the decoding, signing, and verification operations for you. [jwt]: https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-25 [jws]: https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-31 [jwt.io]: http://jwt.io/
Might wanna change your description for grammatical reasons. It should be "divisible", not "dividable".
Why the hell isn't this just the 10 lines you need to get past an interview? wtf.
I believe it's a different engine. Chrome is using the old UIWebView and Safari is using the new WKWebView. 
Your post was caught by the spam filter since you used a URL shortener and you'll need to repost without a shortener.
For a second, I thought it would be something to make the browser background transparent...
Trivially avoidable. Google doesn't even have to think about the halting problem, they can just set an execution time limit. There will be no legitimate backlash for failing on sites that are cut off, because no legitimate site requires seconds of pure JS computation just to compute the underlying HTML. And if there is an exception, they can hardly complain about being only partially rendered when previously they were not rendered at all. ... were you joking? If you were, ha.
I know this wasn't the point, but the syntax for testing a property's existence bothers me. Not the naming, the fact that it's still repetitive. Here's another idea: var url = maybe(app, 'config.environment.buildURL', ['dev']); And [an implementation](https://gist.github.com/anonymous/befd711892fc613ffab7). It's tested, a little bit.
My first version was the 10 lines. But it's typical evolve the code to a version with a rule system. Furthermore, I'm doing this to improve my Javascript skills.
Out of curiosity. What are they? I like building gulp plugins..
I started with gulp, so I'd ask the same question in reverse :P
It seems now they will be crawlable though not affecting your SEO
I usually tend to abuse the template engine (mustache or handlebars) to serialize the data, since it is there anyway.
This is good news for those who dislike the dark voodoo parts of SEO and prefer modern web apps.
&gt; j sex ample ^^^sry
I'd love to see github come up with a similar feature.
Right, this has already been invented: the Maybe monad. Using a [fantasy-land](https://github.com/fantasyland/fantasy-land) compliant [maybe](https://github.com/folktale/data.maybe) all we need is a reducer to resolve the path, which may return `undefined`, then wrap it in a Maybe, then chain: Maybe(key('config.environment.buildURL', app)) .chain(function(buildURL) { var url = buildURL('dev') // do something with `url` }) Where `key` is defined as: var key = function(path, obj) { return path.split('.').reduce(function(acc, x) { return x &amp;&amp; acc[x] }, obj) } You can go even further and define: var maybeApp = compose(Maybe, partial(key, _, app)) And use it like: maybeApp('config.environment.buildURL') .chain(function(buildURL) { var url = buildURL('dev') }) 
Website: Main focus on content. Think online magazine or marketing literature, or a forum. Application: Main focus on functionality rather than content, think of it as a tool, something that in the past would been a desktop app. Eg. an app to analyze the stock market with pretty graphs.
Videos have a currentTime property. The rest is just linear mapping of the scroll value into the time domain of each video.
Note: This post is about beer, not about OS X.
&gt; if (!err) One of the reasons to use promises is to not have to deal with if(err) everywhere.
I kind of wrote something similar while back: function safe_get(object, prop) { var parts = prop.split('.'); if (parts.length == 1) { if (object.hasOwnProperty(parts[0])) return object[parts[0]]; else return null; } else { var a = parts.shift(); if (object.hasOwnProperty(a)) return safe_get(object[a], parts.join('.')); else return null; } } might not be pretty, but it gets the job done.
Someone make a perf of Brototype vs [steelToe](https://github.com/jclem/steeltoe)?
Despite the fact that the documentation was funny to read, it would confuse all the casual developers. Great tool!
I wouldn't say joking. I would say that I was inviting introspection on potential shortcomings and interesting applications. You don't need infinite execution time to make it do useful work in batches. ;)
I've had a good good laugh reading the documentation, i'm totally sharing this with all my js dev friends and using it from now on. Thanks bro!
2.0 is still a long ways off, but they have dropped 'official' support for IE8 in 1.3 - although it still works, they are just not actively trying to ensure it works with it. The 1.2 branch works well enough with IE8, and with IE7 with a bit of effort. I do think/hope though that we are at the point of which IE6 can be considered dead. I was forced to support IE6 for a very long time because a lot of our clients were in the 'we force our users to use IE6 because our crappy intranet only works with it and we are slow to upgrade' - but within the last year or two that has changed. If you are still in the unfortunate position of being forced to support IE6 - going with an SPA may not be the best idea. 
that's too harsh. the names may not be to your taste but they are descriptive.
Doesn't happen on FF; ~~looks like a Chrome bug. You should file a bug report.~~ The following works fine in Chrome, though: module.exports = function isPhoneNumber(num) { return !/[^\d+()\s-]/g.test(num) } EDIT: Learn something new every day.. thanks mikrosystheme
I am on firefox, it also happens when I run tests using Phantom JS
Thank you ! That could have driven me mad all night.
If I implied that I was the first person to invent the concept of a variable that may not exist, or to use the word "maybe" for it, then I apologize. The point of my post wasn't to create or implement any particular philosophy (despite the overlapping naming), just to create an API that solves the given problem in one line and efficiently - which the above does not.
I didn't respond to getting work out of it at first because it's an entirely different problem than trying to overload Google's servers. The problem there is feedback cycle - it takes a ridiculously long time to get results. Hijacking Google's servers for 1 second per hour (an optimistic refresh interval, that) won't be nearly as effective as just doing it yourself. Unless you can think of a was to vastly improve feedback time, or to accumulate results before feedback. edit: OK, idea. The URL is example.com/somescript?id=[long number]. When you fetch it, the server returns a script that yields HTML that is the result of a bite-sized computation keyed off "id", and also generates links to 20 different URLs, each with the same domain and path but a random id. Alternately, the computation code is unrelated to the ID but linked to it by the server, which associates the two as it serves the id along with id-specific computation code. The server knows when an ID has been fetched by Google, and, after a set interval, watches for it in Google's cache. The question is, has Google ever had enough of indexing a website with seemingly unlimited pages? If not, this may be something they would need to detect. Probably, though, you wouldn't be able to get enough work done on Google's servers to justify the cost of both serving the pages and checking Google's cache for the results, possibly repeatedly.
On a side note, if you return in an if conditionnal, you don't need the else, e.g.: if (isSomethingTrue) return 'true'; return 'false';
Some might consider if/else to be more readable
The IIFE is just being called immediately in the constructor. It's perfectly valid to use IIFE's within other functions. His usage of this is also perfectly valid.
Then those people should be shot. 
`"true"` and `"false"` are both valid strings; hence they are both considered truthy. Try `true` and `false` (no quotes).
I've been using getPath from underscore-contrib http://documentcloud.github.io/underscore-contrib/#getpath which basically does the same thing, only without all the fuss 😀
&gt; var maybeApp = compose(Maybe, partial(key, _, obj)) Shouldn't that be something like this? var maybeApp = compose(Maybe, partial(key, _, app)) I'm still unsure where `_` comes from as it's not defined in this context.
Sorry twitter; but you got your shit pushed in by Facebook's React. Ain't nobody using Flight
You could also just test for deep equality of the instances themselves; I believe lodash provides an implementation 
I'm not sure I can if the objects are separated into a client and server.
Expressive JavaScript for today's teenagers.
Someone should fork this and use API names that don't make most normal developers cringe. 
Just curious, why aren't you using `prototype` for your methods?
Those look really solid. I didn't know TopoJSON existed, but based on what I found, it looks like you can add them to Google Maps using the same geojson method. Also, there seems to be a sick CLI tool to autogenerate topojson files based on parameters you pass in, which makes it a snap to highlight any geographical data. Thanks! Source: http://zevross.com/blog/2014/04/14/putting-topojson-on-a-google-map/
I feel like invoking readability when discussing different solutions is often a lazy argument since usually if one solution is clearly more readable than the other, there wouldn't be a debate, and most of the time readability ends up being about a purely subjective preference in a situation where any programmer worth their salt would easily understand both solutions anyway.
Seriously, I can't and wouldn't use something called "bro".
One reason is you can store all the necessary build in functions ONCE. The browser will go up the inheritance chain to find properties and so you can store them in once place, the prototype, instead of physically wasting memory by copying everything over for EACH instance.
return !!isSomethingTrue; //coerce that type!
Couple suggestions. One is you should never monkey-patch or add methods to built-in JS objects (like String, Number or Object). Two is that you should be thinking about using prototypes and function constructors as it will lead to better performance and generally give the engine (V8/Nitro/etc) an easier time optimizing the code. An example of a class using prototypes: https://gist.github.com/mattdesl/14526742dfd2c7950af0 The second example in the gist shows how you can achieve the same thing with less repetitive and error-prone code, using npm modules.
Funny but would never use. I don't really encounter this problem, and when I do it just means I have a bug somewhere else.
Upvote for using a 60 word sentence to comment on readability. 
This will improve the stack overflow experience so much. Although jsFiddle will always be the go to example provider. 
Is the Law of Demeter not a thing in js?
It's funnier than it is useful.
I find it more useful than it is funny.
Best thing I've seen today
Funny! No wait it's that other thing...unfunny
One of the reasons to use the posted approach is not having to deal with trying to correctly promisify every function you plan to use. Another is performance. Another is wanting to explicitly handle errors. I don't personally find `if (err) error(err) else &lt;whatever&gt;` particular painful to read nor write. Don't get me wrong. Promises are great when you know that all your libraries provide promises with the same spec and you're using something so that you an use arrow functions. Sometimes you don't know that this is the case though. Even where promisify works, the example from the bluebird readme... var fs = Promise.promisifyAll(require("fs")); fs.readFileAsync("myfile.json").then(JSON.parse).then(function (json) { console.log("Successful json") }).catch(SyntaxError, function (e) { console.error("file contains invalid json"); }).error(function (e) { console.error("unable to read file, because: ", e.message); }); [becomes this](http://sweetjs.org/browser/editor.html#%0Amacro%20@%20%7B%20%0A%20%20rule%20%7B%0A%20%20%20%20$x\($params%20...\)%20-%3E%20%7B$body%20...%7D%0A%20%20%7D%20=%3E%20%7B%0A%09function%20$x\($params%20...\)%7B$body%20...%7D%0A%20%20%7D%0A%20%20rule%20%7B%0A%20%20%20%20$x\($params%20...\)%20-%3E%20$body:expr%0A%20%20%7D%20=%3E%20%7B%0A%09function%20$x\($params%20...\)%7Breturn%20$body%7D%0A%20%20%7D%0A%20%20rule%20%7B%0A%20%20%20%20$x\($params%20...\)%20-%3E%20if\($cond:expr\)%20$t:expr%20else%20$f:expr%0A%20%20%7D%20=%3E%20%7B%0A%09function%20$x\($params%20...\)%7Bif\($cond\)%20$t;%20else%20$f%7D%0A%20%20%7D%0A%20%20rule%20%7B%0A%20%20%20%20$x\($params%20...\)%20-%3E%20if\($cond:expr\)%20$t:expr%0A%20%20%7D%20=%3E%20%7B%0A%09function%20$x\($params%20...\)%7Bif\($cond\)%20$t;%7D%0A%20%20%7D%0A%20%20rule%20%7B%0A%20%20%20%20$x:expr%0A%20%20%7D%20=%3E%20%7B%0A%09$x%0A%20%20%7D%0A%7D%0A%0Amacro%20\(-%3E\)%20%7B%0A%20%20%20%20rule%20infix%20%7B%20\($params%20...\)%20%7C%20%7B%20$body%20...%20%7D%20%7D%20=%3E%20%7B%0A%20%20%20%20%20%20%20%20function%20\($params%20...\)%20%7B%20$body%20...%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20rule%20infix%20%7B%20$param:ident%20%7C%20%20$body:expr%20%7D%20=%3E%20%7B%0A%20%20%20%20%20%20%20%20function%20\($param\)%20%7B%20$body%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20rule%20infix%20%7B%20\($params%20...\)%20%7C%20$body:expr%20%20%7D%20=%3E%20%7B%0A%20%20%20%20%20%20%20%20function%20\($params%20...\)%20%7B%20return%20$body%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0Alet%20catch%20=%20macro%20%7B%0A%20%20//rule%20infix%20%7B%20$l:expr%20%7C%20$r:expr%20%7D%20=%3E%20%7Btry%7B$l%7Dcatch\(e\)%7B$r\(e\)%7D%7D%0A%20%20rule%20infix%20%7B%20$l:expr%20%7C%20$r:expr%20%7D%20=%3E%20%7B\(function\(\)%7Btry%7Breturn%20$l%7Dcatch\(e\)%7Breturn%20$r\(e\)%7D%7D\(\)\)%7D%0A%7D%0A%0A%20%20%20%20var%20fs%20=%20require\(%22fs%22\)%0A%20%20%20%20fs.readFile\(%22myfile.json%22,%20@fileReadComplete\)%0A%20%20%20%20@fileReadComplete\(e,%20data\)%20-%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20if\(e\)%20return%20error\(e,%20%22unable%20to%20read%20file%22\)%0A%20%20%20%20%20%20%20%20%20%20%20var%20json%20=%20JSON.parse\(data\)%20catch%20e%20-%3E%20error\(e,%20%22file%20contains%20invalid%20json%22\)%0A%20%20%20%20%20%20%20%20%20%20%20console.log\(%22Successful%20json%22\)%0A%20%20%20%20%7D%0A%20%20%20%20@error%20\(e,%20m\)%20-%3E%20console.error\(m,%20e%20&amp;&amp;%20e.message\)%0A%0A%0A%0A%0A%0A%0A), with less magic and less overhead. It feels like a good thing to me... var fs = require("fs") fs.readFile("myfile.json", fileReadComplete) @fileReadComplete(e, data) -&gt; { if(e) return error(e, "unable to read file") var json = JSON.parse(data) catch e -&gt; error(e, "file contains invalid json") console.log("Successful json") } @error (e, m) -&gt; console.error(m, e &amp;&amp; e.message) Different strokes for different folks though obviously.
Just a heads up it's Javascript, not Java. Two different things.
Questions like this are probably best asked on StackOverflow. I'd also make the question clearer and more simple. People don't like being presented with loads of code with no idea what's wrong. Boil it down to the smallest amount of code that still gives the same problem. 
 My basic concern is that none of the coding on the site that I have linked will work if you simply copy and paste the code into dreamweaver -sublime or w.e coder you use. I understand that this is Javascript. cran: Im simply copy and pasting all the code into new HTML - SCC -JAVASCRIP documents. Im not exactly sure how to run it on a VM? lmth: i never heard of StackOverflow.My basic concern is that none of the coding on the site that I have linked will work if you simply copy and paste the code into dreamweaver -sublime or w.e coder you use. ] ellisgl: I understand that this is Javascript. 
It looks like it's only available in Safari and the new WKWebView. So it's not working in Chrome for iOS yet (until they update to the new webview).
Where does the law of demeter apply to data objects? 
Forces what you're returning is actually a boolean and not some other type that resolves as a true or false when in if(thing).
You can use esprima to generate an AST and work from that
But, if the variable is already truthy, it will always make it true, and if the variable is already falsey, it'll make it false? edit: looked it up, I get it now, it allows you to use === over ==
This seems like a fun problem, so I took a stab: function parseNumericString( str ){ var numbers = /\b(?:(one)|(two)|(three)|(four)|(five)|(six)|(seven)|(eight)|(nine)|(ten)|(eleven)|(twelve)|(?:(?:(thir)|(four)|(fif)|(six)|(seven)|(eigh)|(nine))teen)|(?:(?:(twen)|(thir)|(fou?r)|(fif)|(six)|(seven)|(eigh)|(nine))ty)|(hundred)|(thousand)|(?:(?:(mi)|(bi)|(tri)|(quadri)|(quinti)|(sexti)|(septi)|(octi)|(noni)|(deci))llion))\b/gi , total = 0 , part = 0 , match, i, l, power ; while( match = numbers.exec( str ) ){ for( i=0, l=match.length; i&lt;l; i++ ){ if( !match[i] ){ continue; } // 1-19 if( i&lt;20 ){ part += i; // 20, 30..90 }else if( i&lt;28 ){ part += 10 + 10 * ( i-19 ); // hundred }else if( i===28 ){ part *= 100; // thousand-decillion }else{ var power = Math.pow( 1000, i-28 ); // e.g. million ... thousand if( total &gt; power ){ total += part * power; // e.g. thousand ... million }else{ total += part; total *= power; } part = 0; } } } return total+part; } It ends up adding numbers if you pass them in randomly ("four one seven" --&gt; 12, "seven thousand million four billion" --&gt; 11,000,000,000 (but what am I really supposed to do with this?!?)), and I'm sure there are other issues as well, but it parses any properly spelled numbers I throw at it, so... :D Also note that these are _american_ spellings for large numbers. Most of Europe uses "iard" endings (e.g. "1 milliard UK = 1 billion US") for every-other grouping (million, billion, trillion, etc are 10^6 different instead of 10^3) [edit] Also, learn to use actual variable names. I know mine (total, part, match) aren't the best, but don't use `th, dg, tn, tw, s, x, n, str, sk`...
Use a 100% div as a part of your modal with a white background. 
Yeah, TopoJSON is extremely clever, but that's [Mike Bostock](https://github.com/mbostock) for ya. Guy is a JS/SVG guru (Protovis/D3/TopoJSON), but I think he really enjoys Geo data. Also, if you're into mapping, make sure to keep an eye out for [Jason Davies](https://github.com/jasondavies). He is a pretty close correspondant of Bostocks that does mapping as well as helping him maintain some of his libraries. Regardless, ShapeFiles are usually the raw data and that data is unfortunately not always freely available. So be sure to check the licenses.
are you actually including jquery in your local version?
I think probably you do not understand what you are doing well enough to successfully search for the answer to your question, is your problem. Which is okay, everyone starts somewhere, and it's a frustrating place it be. Your statement "isn't working for me because I need to display the body," for instance, doesn't make a lot of sense to me, because the entire visible part of the webpage is the body. You are possibly confusing &lt;head&gt; with the HTML5 tag &lt;header&gt;. My advice to you is to learn how to use your browser's development tools, and to right click (in most of them) and select "view element" to figure out what part of the page you actually want to replace and/or clear. For the most effective, most immediate results, you probably could do a lot worse than learning how to use jQuery to start, although you won't hit nearly as many bumps and wrinkles without it as there used to be.
I think the funniest part is the use of only 2 commas to attempt such a run-on sentence. 
set body to overflow: hidden to disable scrollbars. set a div on the body that is 100% height, 100% width, position: fixed, top: 0, left: 0, a big z-index, and then style it how you want and put whatever you want in it. 
Esprima doesn't understand require() does it?
Oh wow, I didnt know mbostock was behind topojson, that skyrockets the validity bigtime. I'm going to do some more digging on that - I often times don't use shape data much as I build client websites mostly, but we have had times where we wanted to highlight plots of land using a google map. Thanks for the insight
Thanks! I use actual variable names in production code, but change them when minifying to obfuscate the code. Of course that doesn't help when I have to take it apart again. 
this uses node.js though, right? I'm trying to do all this or as much as I can client-side. At least this part. Any ideas on how I can get it to work without node.js and / or client-side?
Thank you very much! I'll try to develop it some more and let you know how it goes!
Using browserify is an option for using npm modules in the browser. Just a thought.
yes, I copied and pasted the HTML - CSS - JAVASCRIPT in their own type of documents, I link them, save them, and preview and only thing that shows up is a tan rectangle with no text in it.. I have been using Dreamweaver so i thought maybe it was that program. I tried Sublime text 2 &amp; Brackets and got the same results. 
Is this a homework assignment? Where's your code? Surely you've already tried to do it....right?
Very nice! I added a pull request to remove the XSS vulnerability and split on any kind of whitespace. I also cleaned up the code a little bit. https://github.com/mateogianolio/waves-js/pull/1
Tipp: you can define inline CSS attributes for HTML tags. Google will tell you the rest
Oh god. If the brown noise came in text form... this would be it.
Wow--great feedback! Trying to toy with it now. I'm trying tie the two together right now myVid.play(); myVid.addEventListener("canplay",function() { myVid.currentTime = X;}); With X being the timecode that corresponds to the scroll value for the page, I figured I could use element.scrollTop to retrieve the position, but I'm reading that every browser does that differently. Any ideas on a better solution?
The important part is using descriptive names in development code -not production. You shouldn't be manually naming and re-naming variables to fit your environment, either.
Thank you I figured out a way to make it work with inline CSS.
Fucking christ. It is dumb to make an architectural decision like this to avoid reinventing the wheel and pulling in a single-file "library." /u/theirfReddit, here's the source from their GitHub project. https://github.com/blakeembrey/node-numbered/blob/master/index.js Copy it to your project. Done.
Here's the source from their GitHub project. https://github.com/blakeembrey/node-numbered/blob/master/index.js Copy it to your project. Done. 
from that source code: &gt; helpers[100] = 'googol'; 10^100 is called googol, because a 9-year old called it so. that's the number, google was named after. just fun facts.
it's not my first language. in german, that would be the correct punctuation.
Cool. Here's how to write it in English. &gt; A 9-year-old called the number 10^100 "googol"; that's the number Google was named after.
Of course it does. { "type": "Program", "body": [ { "type": "ExpressionStatement", "expression": { "type": "CallExpression", "callee": { "type": "Identifier", "name": "require" }, "arguments": [] } } ] } 
you didn't just change the puctuation...
Not only that but there is an astonishingly increasing number of apologists in the cult of Apple. I don't have the links right now, but who can forget the many who were defending Apple and telling everone that large screen mobiles are meaningless and pathetic and custom keyboards are crap and everything. 