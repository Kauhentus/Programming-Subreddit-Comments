So... I'm going to invent a fancier version of this right now: var fns = [fnA, fnB, fnC]; //execute fn1 after the rest. fns.push(fn1); //NEW FEATURE! I can add a function at the second position (index 1) fns.splice(1,0,fn2); //execute fn2 first fns.unshift(fn2); //start! for(var i in fns) { fns[i](); }
Great idea, my daughter would love this! However at the moment is very buggy - restarts while I'm in the middle of typing.
And annoying! Not saying the approach isn't clever but why not 'My Little Pony' or George W. phrases? 
make it simpler: https://github.com/eborden/Keep-Your-Promises/blob/master/extras/promiseWorker.js
http://www.w3schools.com/js/default.asp http://javascriptexample.net/index.php
WebGL requires textures. With DOM objects you can have dynamic text as well. WebGL may be better optimized for certain things but I think this is more versatile I think,
I think that means someone else beat you.
Pretty cool idea. Now your student should take it to the next level and remake ["The Typing of the Dead"](https://www.youtube.com/watch?v=sNfQ_B6_xy8) 
I would suggest not learning to program with JavaScript. I think Python would be a better place to start. Learning to program with JavaScript is like learning to drive with a Ferrari. I recall seeing something like this: Python: Honda Civic JavaScript: Ferrari C++: Formula One Car ...anyway, yeah. Python will get your head wrapped around fundamentals then you can try JavaScript or something else.
Briefly skimmed. Did you submit a PR to bootstrap? 
Before you write anything try to pseudo code it... Then dive right in, and use spaghetti until you learn how to make the noodles.
As the title states this is a stupid project... (not plugin...)
I am actually in the process. I developed this at work for our "utility belt". Doing it for them, I was forced to make it an additional file that can be loaded after bootstrap's dropdown since we extend bootstrap and don't modify their source. Over the next couple days I'll be trying to integrate this into the bootstrap repo. I guess we'll see how it goes.
I choose to call it stacks rater than queues because everything it executed synchrony and we havn't any function to pop the queue async, like jQuery.fn.queue: var q = $({}); q.queue('q', function(next) { console.log('now'); setTimeout(function() {next()}, 200); }); q.queue('q', function(next) { console.log('after 200ms'); }); And for the error handling I could simply write: try { item(); } catch(e) { // Error logging is always good: Just.errors || (Just.errors = []) Just.errors.push({error: new Error('Just.js coudn\'t handle the item in the stack.'), item: item}); (typeof console !== 'undefined') &amp;&amp; console.log('An error occurred check Just.errors'); }; But I think I'm to lazy 
Oh you wait... I've already installed my library from my previous comment on every website ever... Leet hax. ;)
I've had it restart on me three times in two seconds. It's either bugged or cracked.
Nice! This will make my Hannibal binge a lot easier. On a semi-related note, I'm also looking forward to [PeerCDN](https://peercdn.com/), another fascinating Javascript+BitTorrent tool.
I'd like to see a beginner's tutorial where you make 2D Portal! You'd give them the basic game engine as a black box for now, and start teaching programming by making a little guy move. Creating 2D Portal is a *lot* more exciting than drawing boxes with code, honestly. Say, is Stick Portal open-sourced somewhere?
It's basically a trollishly difficult version of the original Mario game. For the curious: http://en.wikipedia.org/wiki/Syobon_Action
Hey, speaker here, let me know if you have any questions about this talk. It was given in various forms this year, including jQuery Toronto and Portland jQuery conf, but this was the first video that came out pretty well. Thanks!
I have no idea how to play. how about some instructions?
From what I've read about angular, this can be avoided with the ng-cloak directive.
IMHO, JavaScript: The Definitive Guide is *the* best book for learning JavaScript properly. It is exactly what it says on the tin. It's a very lengthy book, but it is thorough, and most importantly, it is very approachable. I've also noticed that overall, it does a pretty good job at pointing out the sharp edges and design flaws of JavaScript and how to work around them.
This one time I wrote a 30,000 word novel with a hammer and chisel.
I do really love some instructions too. 
But they are queues, not stacks. You push and pop off stacks. You push and shift off queues. It's just a variable name: not really important.
Hello people, I purposely created a Reddit account to address those of you who took time out of your day to check out my project. A few things I'd like to bring up: This was done solo in a very limited amount of time, as I am a full time employee and student. The design (or lack of) was done the day I had to present this to my class because my main focus was the code, I am a developer. There will be bugs, no doubt. This was my first time actually diving head first into Angular. Last but not least, this was only tested with people SSHing into my laptop (for my presentation and random demos) before putting it up on Modulus. It is not perfect but I did what I could in the amount of time given. As much as I'd like to continue working on this and making it better, a new term has started and I have other obligations. I will make a public repository for this in the next couple of days if anyone is interested, my user name on Github is JacePP. Take care! 
For a second I read that as "JS Crockford 2".
Well you are wrong if you are typing two spaces after punctuation. 
&gt; Heads up, you may want to look into the difference between for..in and for loops. Again I think @Shark_Kicker just wrote `for..in` because (s)he is lazy as well..
If only we were able to learn about them like this back in the day.. 
Excellent presentation. Thank you for this!
no, but I think that would be interesting for progressive enhancement. you could generate bindings code server side without needing the client to support big javascript modules such as angular.
Fun. I typed sentences for a good 10 minutes before I tried to figure out if I was winning or not. So, uhh, does that stuff work? How do I set my name?
If it doesn't exist, I think someone should build it! Very nice idea, would be especially good for mobile.
mobile is our exact use case. we are using closure templates at the moment and have a decent binding system, but dom analysis is still required at runtime to setup bindings. i have taken a few different approaches to this problem already, i compiled the closure templates to javascript and used esprima to analyse all conditionals, from there I output a template file per conditional match, this obviously scaled to a crap load of files to analyse and create this. I consider this a dead avenue. My current approach is to create a {binding(.......)} function for the closure template system, this would analyse the arguments I pass in, output a function which would understand which model to listen too, which sub template to use for replacement (if that is the case) and drop a unique data-binding-id on a node, thus I would only have to find this one id, and I get a lot more oomph out of it. Still not 100% certain if this approach will work, but it's worth a short spike. 
If you are losing it will show a red bar in front of you, where the leader of your group is in the typing. You should also note human players in your group, with wins and losses... I've noticed that I don't actually get many other humans playing in my group, just losing bots.
There is a Chuck Norris fact displayed on screen. There is a textbox to type that fact out in, like a learning-to-type scenario. There are other people competing with you, through the server, to type out that fact faster.
There is a similar approach with [PlastronJS](https://github.com/rhysbrettbowen/PlastronJS) - you just use normal DOM and then declare your bindings using selectors. It's AO compatible as well (it's built on top of the closure library). Otherwise I did start writing a compiler that would convert handlebars to rivetsJS compatible, but that would find the bindings at run time. I am planning to write a template engine in the near future that will spit out the DOM and bindings instead so no run time parsing is needed. see http://modernjavascript.blogspot.com/2013/06/templates-unsolved-mystery.html
This was even better than the Hemingway post I think. Doyle and Austen were my favorites
Just so you know, there are now 5 other missions (using new game features).
No Sublime Text? Are you serious?
Argh! So many years....
Looks like that blog post is missing quite a few of even the most popular IDEs and editors. I get the feeling like the article was written to only generate search engine hits and not really worth anything outside of that.
https://github.com/JacePP/ChuckNorrisAthon Here's the source.
You do. You're on reddit after all.
prove that please.
Well, Chrome (maybe some other browsers) has the same problem with scripts within a page that was loaded via ajax. I posted that problem and my solution on stackoverflow here: http://stackoverflow.com/questions/13129904/how-do-i-debug-javascript-which-was-loaded-via-ajax-specifically-jquery Maybe that will work for dynamically injected scripts as well? I'd try it myself in jsfiddle, but sorta busy at the moment. If I have some time later and you haven't tested that theory yourself, I'll throw a little demo together
It would be way more fun if there was an advance by 1 button so I could debug my initial state some. Yeah I could lookup how to make a glider gun but I'd rather figure it out. I know that isn't exactly the point, but it would be easy.
A fine suggestion. Would you like to file an "enhancement" issue in Github, or shall I? Also, "undo" is on my list. The persistent data structure of the universe makes this fairly cheap.
Filed an issue. I couldn't figure out how to make it an "enhancement."
If I read books like I read reddit, I'd have 20 books open, 2 I've read half way through got bored and forgot about, 4 I'm keeping open for reference, 4 which I keep closing and opening hoping that someone noticed the witty note I wrote in the margins and 10 of which I opened months ago intending to read and haven't look at since.
Thank you!
Thank you for the excellent presentation. I learned a lot from it. Coming from a C++ OOP game programming background web application and site development is a bit of a daunting beast to challenge. I feel more prepared now that I've seen this talk. You sir, are a gentlemen and a scholar. Thank you. 
Hey thanks! :-)
React (http://facebook.github.io/react) does exactly what you want -- in fact, it never reads from the DOM unless you explicitly do it yourself. We've had a lot of success deploying it on constrained mobile devices as well. Give it a whirl and post on the Google Group if you need help!
Thanks! https://github.com/raganwald/LaHermosaVida/issues/28
Yeah, I have been looking at it. Some of the ideas are very neat.
Not a dork at all :P Truthfully, I thought I would see more comments of how people found ways to cheat it. 
Apart from the bit about writing in the margins, you just described my book reading habits. The rest sounds completely normal to me.
"* Considered Harmful" considered harmful.
Why did you choose this approach over using deepEqual? Speed? var subject = new Date(2013, 4, 30, 16, 5); console.log( chai.assert.deepEqual(subject, new Date(2013, 4, 30, 10, 5)) ); gives: Uncaught AssertionError: expected Thu, 30 May 2013 15:05:00 GMT to deeply equal Thu, 30 May 2013 09:05:00 GMT Which seems useful enough to me?
Sorry I don't mean context as scope. Let me clarify If an application is multithreaded then it can appear to be running two threads simultaneously by quickly switching back and forth between exectuting each thread. This is known as context switching (although the term was intended to be used when switching between processes at OS level). Since XHR requests are asynchronous. In that the browser does not wait for the XHR to be completed and the callback to return before it continues executing the main thread. Presumably the browser does this by spawning a new thread for each XHR request. In this case one could execute two XHR requests one after the other but they could both receive their responses at similar times. My question boils down to this. If the browser recieved two responses at a similar time does it queue the callbacks or does it execute them simultaneously. Me typing this out has made me suspect that it executes the callbacks simultaneously. EDITED
1. I was unaware of deepEqual. Thanks for the pointer. 2. I also wanted to be able to assert on just the date portion which I feel is useful. 
Ultimately I think you've done the right thing because it's just sloppy to compare the whole object but if I only had to do one or two I would probably use deepEqual :)
This is surely not the case due to the asynchronicity of XHR. Does it pause the main thread to go to the callback function of the XHR? What happens when the browser recieves the response for two XHRs simultaneously?
Sure, but I have other needs besides script management. Compiling less files, header/footer templates, building custom components, using ngmin, copy files to a temp directory for inclusion in a phonegap application....the list goes on. Not sure why/how you think it's a "clumsy" workflow.
As /u/Pilate said, JS is single threaded. That being the case, if we were to assume that two XHRs came back at the *exact* same moment then I'm sure they would be arbitrarily queued up. To answer the first half of your question, yes and no. If a function is executing when the XHR returns then it will wait for the function to finish before calling the callback. Consider the following: function someAJAXFunction(callback) { // Do some AJAX stuff and call `callback` on completion } function infiniteLoop() { while(true){} } someAJAXFunction(function() { // I will never be called! }); infiniteLoop(); Here you can see that although the callback gets queue'd up, the execution thread is never freed to allow it to be called.
There are no threads in JavaScript. The assumption that a XHR makes new thread is wrong and I think that might be what is throwing you off. If you get one request back and the callback is being run, and second response comes back as the first callback is being run, the callback for the second response will be called right after the first one is done. JavaScript doesn't call two functions at the same time.
People [gotta cut this "considered harmful" shit out](http://meyerweb.com/eric/comment/chech.html). It's a reasonably good article killed by a stupid title.
^(*queued -- great answer otherwise)
Please read up on what a [call stack](http://en.wikipedia.org/wiki/Call_stack) is and how they work. To help out, you can place an arbitrary breakpoint in chrome's dev tools and inspect the current call stack.
I just found this again and wanted to update you. So I wanted to populate the row before it was complete. So instead of a form that submitted to to a table, I created an "add" button that appended a new row. The new row has a unique random 5 char id. This allowed me to calculate each row separately and delete specific rows without them interfering. Maybe not the best way to do it but it's relatively clean, simple, and extensible. I'm pretty proud of it.
You won't find anything much more optimized that jsonlint or jsbeautifier. I suggest trying to isolate the chunks of code being edited, and validating only those subsets, rather than validating the whole thing at once. Alternatively, a depth-first-search style regex validator would be a "more" correct solution to your problem, but probably harder to implement. 
I must say I love promises, but I agree with the performance hits. Why do they all have to execute async. If something is already done when I call it let it ride like when.js v1.x did.
Asynchronous execution is a two-edged sword in this case, actually. On one hand, you can freely stack any number of transformations &amp; dependencies between promises with the guarantee you'll never get a stack overflow, since you get a brand new stack everytime your `then` callbacks execute. OTOH you get a quite noticeable performance hit in some scenarios. Brian's Fantasy-Promises, for example, doesn't introduce any asynchronous delays, and I couldn't just straight-forwardly use it with the promise abstraction for the first scenario, where you get a huge promise chain by making all promises depend on the previous ones.
D'oh! You're right. That's what happens when you're slamming out a comment at work.
Your security team should get with the times. Javascript is a first class secure language in Postgres, using PLV8, and works very well, especially with the JSON data type.
Try [FlatIron's Revalidator](https://github.com/flatiron/revalidator) - it works in both NodeJS and the browser, and supports much of the [JSON Schema Validation](http://json-schema.org/latest/json-schema-validation.html) specification. To note, I haven't yet used it in the browser, but here's a CoffeeScript sample schema I used in an incomplete project: util.mixin @schema, { additionalProperties: false properties: id: type: 'string' required: true minLength: 13 maxLength: 13 summary: type: 'string' required: true cpe: type: 'array' required: true items: type: 'string' format: 'uri' minItems: 1 uniqueItems: true cpe_ancestors: type: 'array' items: type: 'string' format: 'uri' uniqueItems: true date_created: type: 'string' required: true format: 'date-time' date_updated: type: 'string' required: true format: 'date-time' cvss: type: 'object' additionalProperties: false properties: score: type: 'number' required: true minimum: 0.0 maximum: 10.0 access_vector: type: 'string' required: true enum: ['local', 'adjacent_network', 'network'] access_complexity: type: 'string' required: true enum: ['high', 'medium', 'low'] authentication: type: 'string' required: true enum: ['multiple', 'single', 'none'] confidentiality_impact: type: 'string' required: true enum: ['none', 'partial', 'complete'] integrity_impact: type: 'string' required: true enum: ['none', 'partial', 'complete'] availability_impact: type: 'string' required: true enum: ['none', 'partial', 'complete'] date_created: type: 'string' format: 'date-time' source: type: 'string' cwe: type: 'string' pattern: /^(?:(?:NVD-CWE-[A-Z]+)|(?:CWE-[1-9][0-9]*))$/i references: type: 'array' items: type: 'object' additionalProperties: false properties: type: type: 'string' enum: [ 'patch' 'vendor_advisory' 'third_party_advisory' 'signature_source' 'mitigation_procedure' 'tool_configuration_description' 'unknown'] required: true lang: type: 'string' required: true pattern: /^[a-z]{2}(?:[a-z]{2})?$/i url: type: 'string' required: true format: 'url' source: type: 'string' title: type: 'string' uniqueItems: true } Additionally, it produces relatively helpful validation error messages.
Sorry, I missed that the question was about simply checking if the JSON *syntax* was valid, not the schema. But, if you solve the JSON syntax validation, it still could be helpful to also check that the data is structured as you would expect.
The page spazzes out when I try to go below the "Topic Clusters" section. Chrome 28.
Yup, some pretty screwed up markup. 
Unusable on iOS
Cool site! Students of the one and only mracus?
Broken on Android.
You might want to test the website for mobile platforms. The CSS makes the entire page unreadable on iOS and Android. 
Urgh. I'll never understand the way web-design is going, parallax scrolling and all that. More trouble than it's worth.
Worthless site, just a glitchy mess. 
This is one of the few times a site has worked without incident on Safari. Please develop on Chrome.
They should fire their JS/CSS guy. He's wasting time making the site worse.
Funny about all those who complain the site "spazzes out" or otherwise doesn't work for them while, for me, in Chrome, Firefox and Opera, everything works great. The categories are interesting but not surprising. As I often say, 80% of redditors are knuckledraggers with their sole source of knowledge is TV, forums and reddit.
? I see nothing wrong with the markup, what little there actually is.
Then fix your system. The site works fine.
Hit a little close to home there, did it?
If you're implying the site is mine then, no.
Yikes. What a mess. I'm not really sure what the vision for this page was
Most security teams couldn't find their asses with both hands and a flashlight.
And Windows users all I'd bet.
Like I said, knuckle draggers but I forgot to add pinheads. wtf are you trying to prove with that? (It's rhetorical. Please don't reply.) In your example, the guy wrote his code wrong but you are trying to hold that up as an example of Chrome not working right. What a bonehead.
It's just a gimmick because it's new, hopefully it will die soon as more people get sick of it. This site just broke firefox.
I did you fucking moron cause I'm 10x smarter than you and I do this for a living. What are you using IE cause Microsoft told you so while they lead you around by your nose with their finger up your ass? God, redditors like you make me puke.
Not specifically implying you "own" it. But your fervent defence of the site in this thread *certainly* implies you've at least had a hand in it at some point.
my guess is this is the reason the site is so gimmicky. The content isn't very good...
Hack Reactor is a joke. Their graduates think they have more experience than someone in the field 20 years.
I like seeing people think about the implications of new language features. However, there's a few things to think about here. &gt; Destructuring is pattern matching. Not really; there's a (binding) pattern, but you're not really matching on it. Further there's nothing in the JS implementation of destructuring that particularly enables pattern matching. The author seems a little confused on several points and this leads to them conflating the two things and believing they do (or should) overlap more than they actually do (that's not to say they can't work well together). In JS the assignment operator evaluates to "the right hand thing" (it's late here, [read the spec](http://www.ecma-international.org/ecma-262/5.1/#sec-11.13) if you want correctness). Last time I read the Harmony spec, this behavior wasn't changed for assignments with destructuring. That is, you don't get an instantiated version of the binding pattern. With this we realize that stuff like: ([a, b] = [1]).length == 2; Isn't doing anything special, it's just a more terse form of: x = [1]; a = x[0]; b = x[1]; x.length == 2; Note that the actual pattern matching part where we check the length of the array, is still basically the same. Destructing bought us an easier way to rip apart the array, not really match on it. &gt; [a, b, c] ?= x;// false Again, they're two different things that you don't need or really want to overlap. In a language like JS I don't think the sort of pattern matching the author is going for really makes sense or is desirable, at least not as part of the language. It certainly would be good as a library, and I'm sure while writing/using it you would find uses for destructuring...but that's true of most libraries. &gt; if ({parent: {child: {name: n}}} ?= obj) { This is a better example, and shows more of how pattern matching can be useful in a language like JS. However, I still think this would be better as a library or that it perhaps shows a lacking in JS's standard lib of various checks that are useful. If we were going to add to the syntax, in this case I think it would be better to add something like Coffeescripts existential operator: if ( obj.parent?.child?.name? ) { {parent: {child: {name: n}}} = obj } All the author's version bought again was a little terseness in pulling apart the obj. JS is prototypal and very dynamic - so doing this sort of structural matching in a general way is really tricky I think. I'd like to see it mostly done in libraries, though there is definitely room in the language for more facilities for it - like adding the ? operator, or maybe go-like interfaces for easier duck-typing, etc.
This site is unusable in Chrome mobile. 
Same on Firefox 22 :/
Looks like total shit on my android
Your ego? 
Doesn't work for me either (Firefox 22/ Ubuntu).
Well your literary skills seem to be non-existent. 
Nothing is going this way. This page is a usability nightmare.
Fair enough, I was probably just thrown off by the multiple script tag thing
I analyzed your web page. Check out what I found out. Not being able to see words as I'm scrolling down until I've almost missed them is *really annoying*.
Site is definitely not optimized for mobile phones.
Stopped reading at "Considered Harmful".
That's not how web design works.
Interesting that [D3](http://d3js.org/) wasn't considered but Raphael was - d3 has far more adoption here and you have complete control over the svg.
Chrome/Android here. In portrait orientation several of the stupid absolutely-positioned elements are positioned off-screen, and in landscape orientation some parts hit the "hide this content" scroll-point and move out of view before the bottom of the content even appears on-screen.
Do you also have describe.skip / it.skip ?
Never mind the 20-odd individual JS scripts. I've seen this sort of thing before. It's like a kid going crazy with a toy-box full of tricks, no real focus on core mechanics or optimization.
I have a feeling - just a feeling - you're not the only professional developer on this subreddit.
How you get that, I don't know.
neat!
I so often see people, like those here, knocking a site when the real issue is their own system and, most often, use IE.
At least yours is presentable
The performance hit can be negated somewhat by a good setImmediate shim (strangely IE is the only one to get this right) but in general is a bit of a convenience trade off that will probably get optimized long term. As for the errors this is honestly the best part, as the errors show up where they make sense to be. Debugging promises is so much easier then callbacks especially when your calling the same function multiple times and the error has to do with the input. 
That's what I got from what he said... 
To be honest, most of what I got was just *MICROSOFTTERRIBLERARHRHHANGRYANGRY* My interpretation was loosely assembled from some of the more coherent fragments.
icantthinkofone's method is simple 1) Build a website which works on icantthinkofone's computer 2) Finished!
If someone is using IE6 or IE7 and the site looks shitty then yes, there's reason to try and inform them and force them to update, perhaps showing a banner at the top to alert them to their outdated software. To a degree, and becoming moreso, IE8 too, although you'll still get a significant number of people using XP/IE8 so it's reasonable to expect that site developers go to fair lengths to make it at least usable and presentable. But if someone is using IE9 or IE10 and a site is glitchy, then there's absolutely no excuse for the site not having been tested thoroughly in those browsers.
2 days and no reply. ruptur3 has made a bogus statement. There is nothing wrong with W3Schools. Not saying they're perfect, but for the amount of info on that site and for there teaching skills they are hard to beat.
I think markdown or even a plain text file would be better than what you currently have here
I think you can hold it against them. Now matter how quickly a site has to go up, priority #1 is always usability.
I would be proud to be called a neckbeard. Just like I am proud to be a hacker (and I know what a true hacker is).
Except if the site is designed to use current, modern methods without regard to IE's failings. IE9 is not a modern browser. IE10 still has significant issues that hold back the web. Kudos to these developers who didn't let IE hold them back.
Wow. You reeeeaally don't know how the web works, do you.
From this simplified example it is indeed not that clear why we chose the &lt;use&gt;-solution. Our goal was to create a visual stacking of the surfaces, and thus a feel of "depth". If you render the grid as last, it feels just as it "overlays" the graph. By using a hard set of lines the first time and then re-use it with transparency, the grid is a bit "vaguer" of color above the surface, and still very clear where it is not. Maybe you can look at a bit more complicated real-world graph, and try for yourself to set the "stroke-opacity" of the double-grid, and "display: none" for the original. http://journalinsights.elsevier.com/journals/0038-0717/oapt If you are still not convinced, I'm glad to make a JSFiddle to illustrate the difference. 
Ah, but the key there is to use fallback methods and graceful degradation. You would develop the site to function as best as possible in IE8, 9 and 10 and then add on any more modern features that'll work nicely in Chrome, Firefox etc. The user's experience shouldn't be solely dependent on things that'll only work in "modern" browsers. And there are *very, very* few features I can think of that couldn't be implemented in a way that would provide a functionally similar experience for IE users. The unfortunate truth is that a large majority of people do still use IE, even IE8, and they're not going to be happy customers (literally) if a site doesn't deliver a decent experience for them.
True but this is not a commercial site. It was done for fun. I'd bet no one was paid to make it. If you look at who made it, it's a school.
Uh, sorry? I don't really get what you're trying to say there. JS doesn't have a type system.
I don't know what to call this module. I have been hesitating to publish this simply because I couldn't find a useful/descriptive name for it. Does anybody have an idea? Here's what it does. Lets say you have a bunch of asynchronously triggered functions that all need the same data from a remote (or anything else that that can take a while) resource. What the module does is that it fetches the data upon the first request (i.e. function that needs the data) and queues all subsequent requests until the data has been fetched. Then it executes the queued functions immediately and passes them the fetched data. All future requests will execute immediately and get the cached data. I have a program that reads audio metadata from files and I use this code to fetch album data from musicbrainz only once for all tracks that belong to the same album.
I would like to know what NLP you used to generate the topic models
Look at the [async](https://github.com/caolan/async) library. It offers solutions to this problem and more.
http://i.imgur.com/zcrI8cg.jpg
I know async.js but I don't know which function would solve what this module does.
Yeah, it could work like that. But I'm not looking for a way to do the same thing with async.js in almost as many lines of code (plus async.js). I was looking for an idea for a descriptive name from people who understand what it does. The musicbrainz case is just an example of how I'm using the module.
If you believe this pattern is common enough, I think it makes sense to fork async and submit a pull request with your method. That way, more people will have access your pattern. If you publish a one-off library with a one-off name, nobody will find and use it. Furthermore, if your pull request does get merged, then your name would be on the contributors list for a widely-used open source project, which is great for your reputation as a coder.
Oh no, Mr. Bigshot 10x Smarter Than Everyone Else, please tell us. All these wires and lights and keys are so scary!
[Yeah, fuck off, all 91.26% of you computer users!](http://en.wikipedia.org/wiki/Usage_share_of_operating_systems)
Ha, sorry. I need to stop Redditing so late; it can lead to pithy and confusing comments. I'm saying think you should expand a bit on that particular point. &gt; JS doesn't have a type system. By my understanding it does - it has types, those types have meanings, they are tracked, and even checked by the language. It will detect unmatched types (" " + 5) and perform coercion, or errors (new 5) and throw a TypeError. In fact you note a similar TypeError in your post. At any rate, regardless of what the strict definition of "type system" is and what strictly falls under it, more precision would avoid confusing people like me - so there's that.
[This is old and was done a long time ago by PHP.JS](http://phpjs.org/functions/var_dump/)
unreadable on ios
Are you seriously blaming the OS on the site's poor performance? Do you not see how ridiculous that sounds? There are hundreds of other sites out there that do much more complex parallax and backbonejs that don't perform as bad as this. [But, let's benchmark it anyway](http://tools.pingdom.com/fpt/#!/d0pIN/http://www.redditinsight.com/). There are 48 script requests. FOURTY EIGHT! That is absolutely insane! Regardless of whoever you think the site is targeted towards, there shouldn't be that many calls ever in production. In fact, I'd go as far to say that if this is being targeted towards more technical people, that's more reason they should be concatenated and minified. &gt; The internet runs on *nix. Microsoft is only shoehorned in. The internet may run on *nix, but it's viewed on Windows. Accept it. However, I get the feeling that you won't.
48 JS requests...
Or an image. Just host the damn thing on imgur. It's not like the site is that interactive.
It's a bit like memoize applied to ajax.. If I get it right.
Oh, okay. I meant a "static type system". Some academics do consider dynamically typed languages "untyped", though — where "untyped" means that everything has only one type, and values carry runtime tags that can be checked.
&gt;Are you seriously blaming the OS on the site's poor performance? Do you not see how ridiculous that sounds? I never said anything about site performance. Quit making things up. &gt;There are 48 script requests. FOURTY EIGHT! That is absolutely insane! Regardless of whoever you think the site is targeted towards, there shouldn't be that many calls ever in production. Says who? You? A fun, hobby site does that? Who cares? Now who sounds ridiculous! &gt;The internet may run on *nix, but it's viewed on Windows. Accept it. So you agree with my statement but....what? And now you've stepped into the reddit 80% group. 
the latter sorry. D:
I like how the author uses ƒ, which is a valid JavaScript variable name, believe it or not. Here's how to type it on both Mac and Windows: **Mac:** Option + f **Windows:** alt + 1 5 9
Man, you have amateur written all over you, kid. Go get a real job. Most redditors got one at McDonalds. You might qualify ,too.
:)
Interestingly, the D3 source itself contains some great examples of unicode identifier names. For example: function nextPoint(λ, φ) { λ *= d3_radians; φ = φ * d3_radians / 2 + π / 4; var dλ = λ - λ0, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(dλ), v = k * Math.sin(dλ); d3_geo_areaRingSum.add(Math.atan2(v, u)); λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ; }
You... You're good, you! I will change the id generator to use a timestamp. Thanks! Also - feels good to get the approval on my solution. I'm brand new to js. This is the first tool of any consequence I've built in js (not counting animations etc.)
It is hideous on my tablet. Flash run smoother.
That looks so much nicer! I've seen the OP's article before, but it didn't seem worth the trouble since it'd only be able to replace ~1/2 of my anonymous functions. I haven't really looked at ES6 before - from what I can tell, the arrow syntax isn't live yet but it looks like I might be able to use grunt or some other tool to 'compile' my js files? I feel a little silly getting excited about this, but jeeze, alt-tabbing over sublime text there are 33 instances of "function(d){ return " in 240 lines of code. 
Hola mundo - that's great.
It's really convenient. It is implemented [in some browsers](https://bugzilla.mozilla.org/show_bug.cgi?id=846406), but won't be widely available on the web for some time (node could pick it up as soon as ES6 is implemented in v8). There are a few ways to compile ES6 into ES5 out there. TypeScript and Traceur are two options. You can see how TypeScript compiles the lambda function [on the playground](http://www.typescriptlang.org/Playground/#src=%0Aa%20%3D%3E%20a.foo%28%29%3B%0A%0A%28b%2C%20c%29%20%3D%3E%20this.bar%28%29%3B%0A).
Same here. Not a good start 
console.info(JSON.stringify(whateverobject));
Might be a little abstract, but you might be able to extrapolate what you're looking for through this project: https://github.com/josdejong/jsoneditor/ It gives you the line number and error, though appears to only show one at a time.
Actually, I found something a bit old school that does what I need. https://github.com/douglascrockford/JSON-js has a simple recursive descent parser that works just fine. Given that "valid json" is the usual case I'm using JSON.parse and only falling back to json_parse.js to get better error info when JSON.parse fails.
Fuck, people are smart &gt;&lt;.
WE found out your site is crap, how about that for a spoiler!
that's kewl. even kewler that you knew about it. what/when/how many times have you found yourself using that?
It actually makes things a lot simpler.
Bootstrap tooltips have the same placement problem. That's why I used [Powertip](http://stevenbenner.github.io/jquery-powertip/), but a patch like this would be nicer...
Hm, yeah memoization is a good word. It doesn't necessarily have anything to do with Ajax. It can be anything asynchronous, from simple HTTP requests to database connections/queries or user input to any computation. Or waiting until some resource becomes available. Like database initialization. It's something like a asynchronous queue for functions that executes the worker only once and adds the worker's as arguments to the queued functions. Example: var ready = require('ready'); whenDBReady = ready(function (done) { database.connect(function (conn) { done(conn); }); }); whenDBReady.add(function (conn) { conn.query( select.. ); }); whenDBReady.add(function (conn) { conn.query( update... ); }); The first function will trigger the database connection and the both functions will be queued. When the database is connected, they will both be executed and receive the same 'conn' object.
You mean the permanent banner at the bottom saying "for hire: guy1, guy2, etc" doesn't give you a clue what this was really for? :D
I think an intranet messaging application ought to use something like sockets instead. Also, it has no security features. This is probably meant for prototyping.
Maybe remove the DELETE features and you could turn it into an application to collect application logs? Although there is yet again a better way to accomplish that task (UDP datagrams and a syslog server).
The coolest new feature IMO is allowing the template binding to be observable. Allows you to control flow in an entirely different way. 
I'm surprised that there are not a lot of Knockout resources out there like there is for AngularJS. The ones that I know are http://www.knockmeout.net and the Knockout's Documentation itself. 
I wrote a [Backbone library called ƒ](http://lazd.github.io/F), and I included [a short mention at the bottom of the manual](http://lazd.github.io/F/F/manual/index.html#howDoITypeF) that shows you how to type it. As the the library exposes itself under the `F` namespace, I never use `ƒ` in my code :)
Thanks for sharing. Excited to see you guys there. Feel free to ask any questions here :)
don't know but if you alias .only then mights as well go the whole way and do .skip as well :)
I have just read "How KO works and what benefits it brings" and still have no idea. What is KO and what does it do?
It's for data binding in JavaScript/HTML apps, basically. Say you have a data structure containing some information that is displayed to the user through some UI. If you want to keep the UI and the data structure synchronized (i.e. change to the data updates the UI, or user input from the UI updates the data), a data binding library can make that easier by automatically handling most of the grunt work.
Thank you. Do you have to have the entire library or can you take just the parts you use?
yeah its all fun and games until encodings.
I have to agree with Craig on this one - the way Mozilla have handled this is great - making it part of about:config - if the use of JavaScript in a browser worries you this much you will go the extra mile to find the option online/blogs/etc. For the average day to day user having effectively a kill-switch for useful internet browsing in 2013 is just another noise option getting in the way. Also with the terrible track record of security with "Java" of late - a checkbox offering to disable "*Java*Script" could be rather confusing for some.
Not in strict mode: (function(n){"use strict";var n=arguments[0];n=1;return arguments[0]})(0)===1 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode#Making_eval_and_arguments_simpler
Its not as simple as this. Id say the reason to work in JavaScript fall back in most cases is js errors. From content editing mistakes, un name spaced or non defensive programming. An example I came across recently was infinite scolling broken when twitter discontinued their v2 api. Essentially a js error preventing access to content. 
When it is kids at a school putting this together I think the learning experience and purpose of the project outweighs usability. No problems in chrome on a desktop / laptop.
...huh? You're never modifying the arguments array itself, and what it's set to is a primitive. Leaving aside all the stuff about monkeying with arguments, you're just assigning primitives. What you're doing is effectively: (function () { var zero = 0; var n = zero; n = 1; return zero; })(); Of course, that returns zero. It doesn't have anything to do with arguments or strict mode, since you're never modifying the arguments array itself and you're not colliding with any named parameters.
No, it still returns zero, even in strict mode. Run it: var foo = (function(n){"use strict";var n=arguments[0];n=1;return arguments[0]})(0) === 1; alert(foo);
I think you need the whole library, but it's not that big.
&gt; You're never modifying the arguments array itself Try running the code. It does in fact modify the arguments array. I would have thought the same as you, but it doesn't actually work that way and that's what freaked me out at first.
Does anyone have a good idea of when to use something like knockout.js and when to use something like angular or backbone?
Maybe I'm just really high right now but that concept sounds intriguing, tell me more about it
Non strict-mode returns 1 because, as niggl pointed out, arguments share it's values with the actual parameters. So, in the original subject, arguments[0] and n are the same variable and the function returns 1. I didn't change the evaluation expression at the end, which is why you might be confused as to my meaning -- I was taking the original post and adding "use strict" to change the outcome (from true to false).
&gt; I didn't change the evaluation expression at the end, which is why you might be confused as to my meaning -- I was taking the original post and adding "use strict" to change the outcome (from true to false). Ah, right, I thought you were saying it returned true, which it doesn't.
I am not a javascript expert by ~~no~~ any means, but I have used both on pet projects, knockoutjs needs less boilerplate code than backbone, but is less flexible. You get started faster in ko, you can do impressive things in no time, but it seems harder to extend.. I don't really like the template style in the html attributes of ko, I find it not super readable/maintainable. I have barely used angular, but it felt like a good compromise, and I think it's the one I would try to use if I had to choose now.
Yeah, I misunderstood what he was saying. Strict mode does change it, but I thought he was claiming his example evaluated to true. Though it's worth noting that the var in front of the n makes it a a bit sketchy since you're technically declaring a variable that collides with the parameter, which is different than the un-var-prefixed code, where you're just reassigning n and breaking the connection to the arguments array, like pointed out by niggl.
Unicode variables scare me. This doesn't do what you think it does: var З = 4; var a = 3 var а = a + З; alert(a); Between the difficulty to type those characters, and the potential for diminished maintainability, I'm rather hesitant to encourage non-ascii identifiers. 
I agree it's not perfect. I need some whitespace so the code can be laid out in a circular shape. Any suggestions on how to only strip the whitespaces around the code?
Oh right. Yeah the code in the text behaves as expected. It's only when "n" is declared in the parameter list that it gets aliased to the arguments array.
related, and mind-blowing.: http://www.youtube.com/watch?v=ktq-22iq-Po The glory of the Qlobe.
arguments[0] isn't an object, so it's not passed by reference. you're only assigning it's value to n. Now, if you were to pass an object along instead of a number and change one of it's properties... you'd get what you're expecting. (function(){ var n=arguments[0]; n.x=1; return arguments[0]; })({x:0}).x === 1 // true
 (" 123 \n" + // ^\s+ -- matches beginning of a line followed by 1 or more spaces " 4567890 \n" + // \n -- matches newline characters (they count!) " 123456789 \n" + // \s+$ -- matches one or more spaces followed by termination of line " 0123456 \n" + // gm -- global, multiline " 789 ").replace(/^\s+|\n|\s+$/gm, '') // result: "12345678901234567890123456789" So this would be a much better approximation of the "area": out.parentElement.outerHTML.replace(/^\s+|\n|\s+$/gm, '').length
hahahahaah
Yeah, I've seen too many people who disable js for no real reason, thinking it was a "security hole". Granted, js *does* enable some level of data collection (Google Analytics etc), but it's all anonymous (ish.. I guess it's still tied to your IP address), but it's not like Java or Flash which opens up all sorts of back doors in your browser. The result being that developers have to do a boatload of extra work for progressive enhancement design. Start with something basic, add on feature X if supported, add on feature Y if supported, add on feature Z if supported. The end result being that you're effectively designing 4 different websites on the off chance that someone has either disabled js or is using something retarded like IE6 still. It's super frustrating and time-wasting.
 &lt;html&gt; &lt;body&gt; &lt;script&gt;setTimeout( function() {area=(d=(out= document.body).parentElement .outerHTML).replace(RegExp( '^' + '\\s+|\\n|\\s+$', 'gm'),'').length, radius = d.split( '\n' ).reduce( function(a, b) { return Math.max( a. length || a, b.length || b ); } )/ 4, pi = ( area / (radius * radius) * 100 |0 ) / 100;out.innerHTML ="pi="+ pi; },0); &lt;/script&gt; _nderscore's circle &lt;/body&gt;&lt;/html&gt; This code doesn't do what you think it does.
great ty. normally i'm using console.log but when its about to debug an android webapp this will come in handy.
I actually love them, and this one is particulary great
Not being a jerk but I'm guessing English isn't your first language?
What could you possibly gain by asking that question?
Diameter. Not circumference. 
&gt; t's been said about the website itself, the information presented isn't very interesting or easily decipherable. I really could only und we only had two weeks. We were not concentrating on Design so much as we were on app architecture. The landing page has been updated --- @gdi2290
we updated the landing page to be more mobile friendly if you care to try again. Although some of the d3 visualizations may not be --- @gdi2290
We didn't have much time to focus on design. You may try again now that we updated the landing page, but I suggest you view our site on a desktop/laptop perhaps even a tablet --- @gdi2290
Same thing implies you took 3 months to learn how to code and 2 weeks to download Reddit, build a Web App, took the time to refactor everyone's code, and some how prepare for your website to be all over Reddit and Hacker News --- @gdi2290
you may try again, but I suggest you view our site on a desktop/laptop perhaps even a tablet --- @gdi2290
We only had 2 weeks. --- @gdi2290
We updated the landing page to fix a lot of issues everyone had --- @gdi2290
you may try again now that we updated the landing page --- @gdi2290
&gt; ver understand the way web-design is going, parallax scrolling and all that. More trouble than it's worth. Sorry I thought this was the Javascript subreddit not Web Design. You see we only had 2 weeks and focused more on app architecture and downloading Reddit. For what's it's worth we updated the landing page to fix any initial issues people would having --- @gdi2290
It's worth noticing this is our initial prototype. We haven't yet converted to AMD with RequireJS or running Grunt tasks. Keep in mind we only had 2 weeks --- @gdi2290
optimization is on our radar. please note this is our initial prototype --- @gdi2290
We updated the landing page if you care to try again. --- @gdi2290
To be honest your site has changed since I last looked at it. When I last looked it obviously wasn't working correctly in my browser since it only showed random stats (similar to the infographic in my post). I analysed 900k comments in the space of 17 hours whereas you are telling me you downloaded 2 weeks worth which equated to 240k - obviously mine was doing different things as mine pulled posts as they came in (Which wouldn't have caught any updated karma scores or edits). Secondly, this was my second project using the Dart programming language. Thirdly I didnt need to prepare any site as I knew my data was static. If its static then why bother making a site and keeping it hosted when you can use someone elses services (imgur). I wasn't trying to attack you or your site, I was merely presenting something similar I did a few weeks ago as it seemed fairly relevant and showed a different dataset. 
We only had two weeks so this was our initial prototype. We posted it here for feedback about our javascript rather than Design --- @gdi2290
This code gets beaten down in any given code review and the writer gets informed that he needs to shape up or polish up his resume. That's what this code does.
&gt; want to test the website for m Thanks for your feedback, but we were more focused on Javascript feedback rather than design which was why we posted it here in Javascript subreddit. The landing page has been updated for better Mobile support. --- @gdi2290
Markdown defeats the purpose of creating a single page app. If we had made our site with Markdown we might as well have hosted on github pages or an s3 bucket and post our website in a Markdown subreddit. --- @gdi2290
again. We only had two weeks. We were not concentrating on Design so much as we were on app architecture. The landing page has been updated --- @gdi2290
It's not like we were trying to hide the fact we're looking to get hired --- @gdi2290
Thanks for your suggestion, but we did use d3. This implies you never went past the landing page. Since then we updated the landing page to showcase links to our d3. Thanks for your feedback joe --- @gdi2290
We wouldn't want to take the time to learn Flash only to post it in a Javascript subreddit. The landing page has been updated if you care to take another look we would appreciate feedback on our Javascript --- @gdi2290
We updated the landing page for mobile support. Although, some of the d3 visualizations are not optimized for mobile phones --- @gdi2290
That's not very constructive feedback. Please look over our code on github https://github.com/gdi2290/RedditInsight --- @gdi2290
That's not very constructive feedback. Please look over our code on github https://github.com/gdi2290/RedditInsight --- @gdi2290
Many front-end frameworks treat the DOM poorly due to it's poor API. --- @gdi2290
We updated the landing page for mobile support. Although, some of the d3 visualizations are not optimized for mobile phones --- @gdi2290
We updated the landing page for mobile support. Although, some of the d3 visualizations are not optimized for mobile phones --- @gdi2290
Someone posted our website there thanks for your suggestion --- @gdi2290
Ahh okay yeah no I didn't go past the landing page. Either I'm not particularly bright or It wasn't clear how to get to other places. Probably the former.
&gt; h okay yeah no I didn't go past the landing page. Either I'm not particularly bright or It wasn't clear how to get to other places. Probably the former. No worries. Our landing page didn't have any call to action and the images were merely placeholders for our initial prototype. Feel free to look over our source code for anymore suggestions https://github.com/gdi2290/RedditInsight
&gt; 1 things. But it's not a gigantic backbone app using 20 js libs to show 6-8 different sta Thanks for your feedback and taking the take to look over our source code. Could you elaborate more provide us with suggestions. Our App isn't gigantic by any means, but we do agree we may have a few zombie libraries we forgot to remove. --- @gdi2290 
You could push even more performance out of that new directive if you used direct DOM manipulation rather than having the browser parse the `&lt;style&gt;` tag. Just a thought.
He could have probably just pointed out what was non-idiomatic english. I guess the &gt; I am not a javascript expert by no means This is because I rephrased it and forgot to remove the negation (by any means). The rest of my argument is not extremely clear either. Also, no, english is not my first language, and I like being politely corrected when I make mistakes.
Well. Good then. I was just thinking that since this forum has tons of foreigners, then it would be safe to assume, if your sentence structure or grammar was lacking, that you wouldn't be. (Neither am I. And I think your message came across just fine) 
Of course this only works if you use jQuery for everything including all dom manipulation. If you use Element.innerHTML then it won't work. A more robust way would be to actually manage your views through a view manager that is made to do this job, rather than try to tack on this functionality to a library which was not made for this purpose. Let's not forget the [Single Responsiblity Principle](http://en.wikipedia.org/wiki/Single_responsibility_principle) and tack on functionality to code that may be replaced or not hit
I had assumed that the extra whitespace inside the code was by design, to make up for the uncounted whitespace outside the body tags (since only body.outerHtml gets measured at all). Grabbing on to the `\n`is one option that _underscore brings up, another would be to fill with nonces like `/**/` or `*1`. Changing the name of a variable might help too - `pi` to `p` or `pie` might give you better results, for example.
Demo? Are you using this live anywhere?
Oops my bad. Ill try that thanks
Backbone.js uses the Event module to do the mediator pattern. I'm not sure what this does differently.
So looking at this, it's a no-sql flat database where instances live locally and are synced back to a remote database, sounds like exactly what I'm looking for. Can it input and output JSON? I'd love to connect this with knockout.js, express, bootstrap, etc. Any tips?
Yup, on the front page you can see db.put({_id: 'doc', aribtrary:'json'}); The only thing required is the _id (and _rev for updates), you can read the data back out again with http://pouchdb.com/api.html#batch_fetch The Getting Started guide hopefully shouldnt take long and give you a fairly comprehensive idea of the project as a whole - http://pouchdb.com/getting-started.html
Doing this in Java is pretty simple, but the syntax is quite a bit different than C. In some ways it's more clear. I suggest you start by developing a simple Hello World! app and modifying it to read your database file, then scanning through each line to find the record you want. An alternative to scanning through the lines upon input is to load your database into a data structure such as a hash table or tree, then using its search feature to find the element more quickly, but this is early optimization. Hello World http://introcs.cs.princeton.edu/java/11hello/ Read input from console http://www.mkyong.com/java/how-to-read-input-from-console-java/ Read CSV http://www.mkyong.com/java/how-to-read-and-parse-csv-file-in-java/
Yeah this whale is really damn cool, I love it, such a cool idea in how the 3d effect was done using slices.
Thank you very much, time to get reading!
http://www.yearofmoo.com/2013/01/full-spectrum-testing-with-angularjs-and-karma.html
I don't think I've seen a 3D model in SVG that uses the z-index as part of the kinematic chain. Fresh.
Played with it for 15 minutes while eating lunch. Hilarious. His frown is awesome.
thanks!
I believe it is a remake from this original: http://img0.liveinternet.ru/images/attach/c/5/3970/3970473_sprite198.swf In firefox, at least, the flash is much more responsive.
perfect!
If you happen to be from Boston this event could be interesting: http://www.meetup.com/AngularJS-Boston/events/128929722/
Despite the title, this isn't really a rant about Underscore, it's a very nice and approachable talk about using functional programming techniques in JavaScript, from partial application to mapping to functors to maybe, and beyond.
My suggestion was not that it would be less correct with the whitespace inside the circle, but that this extra whitespace adjusts for the 'error' of un-read whitespace before and after the opening and closing html tags. To be done correctly, the whitespace need not be removed or selectively ignored, the value just needs to be closer to 'right'. This involves having a real circle in a real square, not just the polygon * starting with the `&lt;body`, * continuing to the end of the line, * going down to the top of the last line, * moving to the right until the end of `&lt;/body&gt;` * then down to the baseline, * then all the way to the bottom right corner, * up to the bottom of the first line, * and back to the starting point all wrapped around the almost circle in the middle. It is an approximation, and sticking the extra whitespace inside it will make it either slightly better or slightly worse, but not much of a better approximation all told. Your other example at the top level comment (inexplicably receiving downvotes...) probably does a better job not just because of the slightly more careful regex and more 'square' like shape, but also because it is so much larger, so is going to suffer smaller losses. It is meant to be a clever trick, not a close approximation or an efficient way to solve it. My initial comment was meant to suggest that the trick worked *because of* rather than in spite of the extra whitespace, though I never actually measured one way or the other.
Ok, you've gotten a lot of negative feedback about the site itself. Here are some of my thoughts about the code: * The site is fairly simple and doesn't seem like it needs to be a single page app. I know you were trying to learn various concepts and technologies, but you still need to consider if you're picking the best tools for the job. * either minify the js files and combine them or switch to a module loader like RequireJS that supports optimizing to avoid so many individual requests. * Get rid of the transitions on the landing page. They are buggy and don't really do anything. They don't work well enough to be a flashy gimmick either. Save the JS intensive code for the other stuff. * Some charts (example: frequency analysis) took some time to load for me. However there was no indicator to let me know that there was something loading. * Code organization: I recommend adding another folder where all of the backend stuff goes. Right now you have all of the subfolders for the backend on the same level as "public." I'm not a node expert, but I should be able to tell where both the client and server code are just by browsing the source tree. * For the client, you have asset folders like img on the same level as your javascript source. Move all of your javascript source into its own subfolder at least to make it more clear what is what. Also I would move the various data folders in a subdirectory as well. * A couple notes on the commit history: In my opinion, commits should be fairly small and all changes in a commit should be related. If a bug fix or feature is large, you should favor several smaller commits instead of a large one. This is important for maintenance and using tools like git bisect to track down regressions. I noticed while scanning the source tree several files had their last commit listed as "awesomeness." Resist the urge to make one word or vague commit messages (even if it's late at night). * One final piece of advice: your data folders and files use different case styles. Your team should agree on what to use and stick to it 
No.
Reminds me of this gem: http://www.maninthedark.com/ The whale's a little more playful tho :D
there is a thing called mpd(backand with tonnes of frontend) that does this and I love it
So... JS libraries, gzipped, are about the size of a single small image on the page. That's too big. They provide well-tested functionality that you could, instead, code up ad-hoc when you need it. Look, here's a tab container that I implemented in 2 KB, which is much smaller than these other libraries, which provide WAY more than just tab containers. Clearly this is the only complex control my application will need. What?
I'm the author and .Net is one language I've never touch :)
The principle of YAGNI needs to be unrelentingly applied to javascript. Either you need whatever it is, or it isn't there. 
Cool project, I'll stick with angular.js for my dependency-injected large-scale JS apps though.
I don't think that it is true, and even if it is, you can modify and recompile it. Also you did not say what do you want to do. As i see it there is no real need for another media player unless there is a really good reason for it, but i can't think of any.
All 2TB of my music is on a server. Subsonic is the only 1/2 decent player that I've found but it doesn't utilize id3 tags. It also doesn't have MPD support. The interface is fucking horrible and clunky. Plus, it's written in Java. There's no API to boot. There's also no interface such as Plex for this type of system. There are some that ~sorta~ work, but most of them blow... and they can't index large collections. I want a professional archival tool that will allow me to do a lot of the same functionality that Foobar2K has... slicing by any number of fields, any number of ways. I'd like to have infinite options as to how the music get streamed/pulled out. No other player out there does that. I want a real web service that allows me to control my music, archiving, security, indexing and playing... no player does that (other than Foobar which is locked up in Win32 land). This will be a multi-platform system that can do some amazing things, if it's done correctly.
Thanks for the explanation, this is very helpful.
Ah, thanks, that makes sense.
Yeah, better perf in Flash in Opera 15 too.
It's surprising to me that this didn't get more attention. It's one of the better articles on web dev this _year_. 
Awesome article, I did not know about sub-generators!
gzip, lots of people forget that part.
That slide deck really really need the talk that goes with it. It's very easy to misunderstand the intent of several of those slides without it. 
That was the nicest ever static vs dynamic typing dispute.
This is mirroring my experience with these tools. It looks great. Then you run into 'a couple issues.' I've been replacing a Makefile with Grunt tasks. The Yeoman stack mentions Grunt in two paragraphs. Mastering Grunt takes more time than mastering Backbone, which is 1.4k LoC, when it should take less, because Backbone is by _far_ a more significant tool. &gt;but it would have been nice to mention this again for a noob like me that doesn't quite grasp the bigger picture yet. There is no "bigger picture." There is no master architect that can tell you exactly what to do. I _know_ this because I had to dig through grunt's core files in order to figure out what Ben Alman had [cowboy coded](https://github.com/cowboy), because Grunt doesn't accept arbitrary command-line arguments like your bog-standard unix tool should. Your concerns are actually that which condemn Yeoman--it doesn't even pay attention to the basics. Maybe Grunt can still be salvaged. 
&gt;I just really wish there was less "cute" stuff and more specifics, or at the very least some sort of preface listing the prerequisite knowledge and maybe some links to fill noobs like me in. Honestly? You're just gonna have to read the code at some point. You aren't going to get that easy introduction. You want to understand Grunt? [Here it is.](https://github.com/gruntjs/grunt) Grunt isn't easy on anyone, noobs or 'experts,' because it's just a tool built at the edge of the current development. But it's better than Yeoman: Yeoman is actually just fluff: I have yet to see a code-based article using Yeoman. Even _React_ has better endorsement (through KhanAcademy). Now, I'll take you on a code introduction of Backbone. I can give you a link to my basic [Backbone guide](https://koglerjs.com/verbiage/backbone), but it's still dependent on the _thorough_ reading of the Backbone code I do [here](https://koglerjs.com/verbiage/guide). The confidence you place in all of these tools is misplaced. They're really just guesses. That even applies to my Backbone work above. 
Thanks, I'm actually fairly competent with the fundamentals (and then some) of Backbone (in conjunction with RequireJS) -- to the point that the challenges I run into while using it tend to be more in the application domain rather than Backbone-specific -- but I'll give your articles a read because there's always more to learn. Yeoman, though, is brand-spanking new to me, as is package management (to some degree) and automated build/deploy workflows.
In a related note, this is exactly why Scheme requires Tail Call Optimization as part of its specification. You design language features to encourage a certain style of programming. If you then allow implementations to punish good programming style, people will avoid good style even when it doesn't matter. Years from now, this problem will be solved, but programmers will be writing for loops, muttering, "I heard somewhere that `.forEach` is relly slow."
Exactly, the tipoff was mentioning refactoring, which is fucking impossible in javascript.
Agreed. It's a long read, but something that should interest a lot of developers, especially those working with mobile (and who doesn't work with mobile to some extent today).
Why this obsession with shaving a few KB off a javascript file? It's seriously rediculous, and premature optimization at its absolute stupidest limit. 
Because a few KB here and a few KB there adds up. It increases bandwidth requirements and it increases latency.
Edit: Dear everybody, the following post was written while I was heavily sleep deprived, and is largely inaccurate. The Ember generator used to not include Handlebars compilation, but does now. I am a jerk. Thank you. ----------- I remember being all excited about Yeoman, before they launched, like it was going to blow up my productivity. I think I used it for one Ember project, and keep trying to go back to it, thinking maybe it'll be better this time, because I like the Gruntfile it gives you well enough, but it just hasn't been making a strong case for itself. The Ember generator is particularly crap, and doesn't include Handlebars compilation. Since it's pretty much a Google project, I'd imagine it works best with Angular. I hate that it pulls down like a million NPM things when you just want really basic scaffolding. After you run the webapp generator, your project folder is immediately like 50 megs. I've been using ember-rails, which will scaffold out an Ember structure, with Handlebars precompilation, into a Rails app, and combined right now, with d3 and nv-d3, it's 14 megs. 11.8 of which is cached sprockets stuff, and about a meg is d3 and nv-d3.
Yes, D3 is very powerful. For the project they data was not really complicated but some graphs were pretty "unusual" (although some have simplified during the implementation). What I know of D3, it should have been possible to make the graphs in it, I think. But instead of learning both the SVG concepts and D3/Raphael, we chose to go for directly working with SVG, and thus also minimizing any overhead by using an additional library. I wrote the post to show the plain workings of SVG, because I think it is nice, also without a library around it.
Just posted this post about writing a command line utility in Node JS
I enjoy using Yeoman, I maintain an [expressjs generator](https://github.com/petecoop/generator-express) for it. It's a great way to quickly set up and start working on a project with a pre-built directory structure and Gruntfile.
Test doesn't seem to be fair. Require.js resolves dependencies in real time, while CJS is doing preprocessing on the server. Maybe you should try comparing CJS to [Almond](https://github.com/jrburke/almond)? And as far as I know there is no simple way to load module on-demand in CJS.
You are right, but there is no overhead in loading tons of scripts. How would you handle a situation using CJS, when you need the module only when a button click occurs?
evilagentcooper CJS overhead is minimal (about 60 lines of code when not minified), with AMD you need to take whole RequireJS on board which is much bigger.
I was talking about overhead in AMD when using it without compressing the modules (see Almond). It is obvious that loading 270 small scripts into the browser will take longer than loading one big script.
This is pretty damn cool :).
There's no discussion of browser performance for any of the implementations. Or discussions of alternatives to see leaky offload the JOIN operation to the server of the tables are large or expensive to perform in JavaScript. 
This is not the same comparison at all. You let the server pre-bundle your deps with CJS. With require you let the browser determine your deps and then load them individually. We all know network requests are the bottleneck in this case. This is a case when you would have been using the require js optimizer anyway. I'd like to see a side by side comparison then, my guess is they will be roughly the same. 
come on [ES6](http://bbenvie.com/articles/2013-01-06/JavaScript-ES6-Has-Tail-Call-Optimization)
It would be better to link to the [github repository](https://github.com/thomasbelin4/phygine)
try running the requirejs system through [r.js](http://requirejs.org/docs/optimization.html) first
what happens if there is a clash in names between classes?
To see results, enter listed links. Still it's just showcase (how it works when it's installed), fair results can only be obtained on localhost (AMD resolution is not affected then by network latency).
using jquery just for $.each? Stop it. Role your own foreach function if you really have to have one. (Sorry but overuse of jquery is a pet peeve)
*There's no pre-bundle, script is bundled on each request*. What is cached is just resolved dependencies and source of each file (module), if file was not modified it's reused, that's it. RequireJS optimizer if I understand correctly prepares script for production. Here we compare speed of load in development mode. Comparing pre-generated bundles doesn't make much sense, as both AMD and CJS can be optimized and minified in many different ways, and difference between both should be negligible. 
I didn't mean the actual javascript, I meant the script tags. There's around ~45 different script files being loaded. * Total Number of Characters (just script tags): 2518 * Total Number of Characters (in the body tag): 892 You're also taking me too seriously. I wasn't critiquing the site in any way, other than the number of javascript files. If anything, I meant it in a positive way, as in "look what we can do with Javascript. Isn't it awesome? We can build entire pages dynamically!", but I can see why you didn't read it that way, as its hard to convey tone through text on the internet. Though, I am interested on how you handle people with noscript.
Right... If the modules are bundled on the CommonJS benchmark, they should be bundled to one file on AMD Benchmark too. Otherwise this is not a fair test.
Oh.. must be that time again. Another scope tutorial! Next up: HOISTING!!!!
Magic!
There's no single point of using AMD if you bundle it.
Cool project. Three questions: 1) How does this handle instance variables that aren't functions? 2) How do you create private or protected functions? 3) Apply is slow, and it's being used on every single function call. 4) WTF is ring.Object?!?
If we are not using diamond inheritance and none of the methods use this.$super it looks at the method resolution order (see http://ringjs.neoname.eu/faq.html ) and call the implementation in the first class defining the method. You are free to redefine the method in the newly created class to clearly specify the behavior and solve the conflict. If we are using diamond inheritance and both method implementations call this.$super they will both be called. The order is dependent of the method resolution order (same link as before). This case typically happen for the init() method (most of the time, all classes define one and all of them call this.$super). That behavior is the same in Python.
Considering the fact that [only IE8 doesn't support it](http://kangax.github.io/es5-compat-table/) I always just opt directly for `Array.forEach`.
And it's easily polyfilled for IE of course. But if you are super concious about performance just go with a plain classic for-i loop. [This](http://rfrn.org/~shu/2013/03/20/two-reasons-functional-style-is-slow-in-spidermonkey.html) was on just today,a nd there are many related jsperfs.
Whether or not you see a point, it's the recommended way to use it. One point that I appreciate is that you can do your development without a build step in between changes, but then still deploy an optimized version by using r.js.
1) Everything you put in the dictionary given as argument to ring.create() is not added to instances of the class. They are part of the prototype of the newly created class. If you put anything other than methods they will also be added to the prototype. So, they are not exactly instance variables, more like class attributes. To define instance variables just make this.xxx = yyy. 2) There is no way, like in most class systems for JavaScript (well, I know one where you can define private methods but not attributes). I assume most people apply Python-like convention of putting an underscore in front of private methods/attributes. Well, at least every JavaScript programmers at my job does that, including me. 3) It's not used in all method calls. Apply is only used in the constructor and when calling a method using this.$super. Anyway, if you are worried about performances you should take a look at the faq: http://ringjs.neoname.eu/faq.html . 4) It's the base class from which inherit all other classes. It's mostly useful to make ring.instance(x, ring.Object) to test if an object is an instance of a class generated using ring.
Absolutely. The standard for-i loop is almost always the way to go. Wow, I knew the `Array.forEach` wasn't terribly performant but I didn't realize just how bad it was (it took 20s to complete in Chrome!). I just [threw this up](http://jsperf.com/foreach-native-vs-simple) which isn't nearly as "complete" as other forEach implementations but I think handles the majority of use cases. It's still far more performant than `Array.forEach`. Note to self: it's probably better to just roll my own forEach if I need it.
MDN has a good [reference implementation](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach?redirect=no#Compatibility). It's weird how it is so slow, it doesn't even do that much. Still there are many function calls, and while they are faster these days they will add up. 
Also if I need to debug the code that exists in module 220.js I go to the file in my debugger instead of a MASSIVE combined version that CJS provides. There are certainly trades offs. I hope you don't have a page with 200+ modules.
I certainly understand your point and yes you are correct about requirejs and the optimizer, however I don't want all my JS combined while I am debugging locally. It is easier for me to find code in module X when it is in file modulex.js instead of one massive CJS file that is pre-combined on the server. 
http://jsperf.com/jquery-vs-lowdash-loops/4 Pick your poison?
Looks cool, I'm gonna try this out in the vim syntastic plugin tonight.
... that jsperf was the prime example of overuse of jQuery.
A linting tool for an unfinished spec? No.
What unfinished spec? There is no mention of future specs.
I'm glad it (kind of) helped! It's hard to have one guide offer a top-to-bottom learning solution. Since I started working with computers when I was 8 years old, there's always something that temporarily stands in the way of what I want to do. An error, a warning, an alert box, a loud noise, drivers, network errors, etc. The only way to fix it is to learn the solution the hard way. This is the case even today with all of the tools available. It's never going to be as easy as 1-2-3, and in my opinion, it shouldn't be. We all have to go through these pains, so we actually know what we're doing. As for your second point, I should absolutely mention how to install the webapp generator. That was an oversight on my part, thank you for catching that! Hopefully my lil' guide didn't give you too much of a headache!
The Ember generator (and all of the generators, for that matter) are constantly being worked on. Pick any one, and you'll find discussions of how they're working towards improving. It takes the involvement of the community around those frameworks to help create something useful for everyone. If you have ideas for how the Ember generator can improve, let them know! https://github.com/yeoman/generator-ember If a generator is too far off from what a developer prefers, tomorrow there could be a generator that does. Anybody can create a generator. It's not only helpful if you plan on building a solution that works for everyone; you can make a generator that just improves your own workflow. Regarding the file size, this is again based on what dependencies the generator authors deem necessary for a given application. If anyone finds that a large module with many dependencies can be replaced with a smaller one to do the same job, let them know! If a Yeoman team member catches it, we'll definitely send a PR. It's an issue we're aware of, and working towards resolving as best we can. Thanks for the feedback and for trying it out!
:)
Came here to see if you found a nice workaround for 1). But it looks like javascript is basically not made for such things. 
That was expected, as forEach checks for types of passed arguments and iterates only on own properties. Indeed, if you really need speed calculations, write your own implementation. But otherwise it's better to use native methods as they still perform thousands of operations per second even on old computers.
I believe that the ES stands for Esprima. Also you arbitrarily choose ECMAScript 6. For all you know, it could stand for ECMAScript 5, which is the current standard.
It uses Esprima which parses up to ECMAScript 5.1 and 6 only experimental.
The prototype system already allows for this functionality, I don't see the purpose of this library.
Where did you get the notion that you need to work with a bundle? You edit modules files naturally, and bundle is generated out of them, you must not edit the bundle.
- [JavaScriptIsSexy.com](http://javascriptissexy.com/how-to-learn-javascript-properly/) - [Eloquent JavaScript](http://eloquentjavascript.net/contents.html) - [/r/learnjavascript](http://www.reddit.com/r/learnjavascript)
[Basic JavaScript for the impatient programmer](http://www.2ality.com/2013/06/basic-javascript.html) by Axel Rauschmayer of [JavaScript Weekly](http://javascriptweekly.com/) fame
I assume that the instanceof operator does not function correctly for classes that inherit from multiple parent classes.
Latest update on Google Developers Live: https://developers.google.com/events/836113307/
I understand that you don't edit the bundle. Source maps are great but I have to test in IE9/10 and that doesn't support source maps. I really prefer the CJS syntax over AMD and I understand there are ways to get CJS in to the browser (you showed us one with your webmake library), but there are some shortfalls that unfortunately with my team/project it just isn't really in the cards, perhaps one day.
How did you avoid the [Diamond Problem](http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem) that comes with Multiple Inheritance?
I think you missed the point here. The author talks about large tables not fitting in memory, and how implementations would page them to disk sharded by the keyspace, and so on. Clearly, what's going on here is that the author is *explaining* how database joins work using Javascript as the mechanism to do said explanation. These aren't meant to be run in your browser, but to show you how DB indices are converted into actual lookup mechanisms in the DB, so you have a better grasp on what indexes to put on which fields to get better perf.
Would you like to tinker with visual graphics library like [Fabric.js](http://fabricjs.com/)?
Seems like it's coupled to elements, so can't use it on, say, &lt;canvas&gt;?
So this got downvoted quite a bit, anyone care to chime in as to why?
They all have different pros and cons. I would skip over Ember as it's more geared towards large applications and will have a bit more of a steep learning curve. Angular sounds like it might be ideal as it sounds like you've got a single JSON object and you could use that as the "scope" in Angular. Backbone is easier to get up and running with and should be easier to understand when you've got interaction between several components on a page. It's really up to which one you'd like to learn. The one which most interests you is probably the best one to go with as it sounds like a fairly simple product and they can all handle it. You'll only really see differences if your app gets more complicated and evolves
Why would I need yet another Linter for ES 5 (aka JavaScript)? My choice was less than "arbitrary"... There was an assumption that the author was at least attempting to do something that hadn't been done before.
Can you change the href? $('#claim-type').on('click', 'a', function() { $('input[name="action"]').val(this.href.slice(1)); }); If not, stick the value in a data- attribute.
Quite hard to know without the context of the rest of the page, but, if you are simply setting a value on a form that's passed to the server, why not just a radio button? &lt;input type="radio" name="action" value="create_claim"&gt;New&lt;/input&gt; &lt;input type="radio" name="action" value="add_to_claim"&gt;Add&lt;/input&gt; Sorry if that's not what you're after. I realise there's no JS involved., maybe that's OK though.
No, the &lt;a href="#"&gt;'s are tabs. I need to set the hidden field based on what tab I've clicked on.
looks like you're changing the hashcode, so why not use routing? Then if the input is a single element you can setup the routes to just update that input. So something like: var input = $('input[name="action"]'); var setInput = function(val) {input.val(val);}; route('new', function() {setInput('create_claim')}); route('add', function() {setInput('add_to_claim')}); you could clean that up further with a bit of functional magic
Dont $.ajax ? yeah write boilerplate that has not been tested on several devices instead. All these pedantic developpers forget the why of jQuery : it has been tested across a wide range of browsers and plateforms. There is no guarantee this snippet will work everywhere. But it is so cool to hate jQuery today.
not quite what the article is about. It's about not littering your code base with calls to $.ajax and instead only having a single path in to it that you control. This could just as easily be about XMLHTTPRequest
Yet the article is not called "Dont XMLHTTPRequest". The title doesnt help the OP to make whatever point he is trying to make.
neither - there are some routing libraries out there you can use. Most MVCs have one built in (have a look at Backbone.Router) other ones at http://jster.net/category/routing although I'm sure there are plenty more
sounds like there is a bit of misunderstanding around the title. From now on just tack on "everywhere" to the end of the title so it becomes: **Don't $.ajax everywhere**
**The problem** The [mechanism used in Ring.js to call superclass methods](https://github.com/nicolas-van/ring.js/blob/master/ring.js#L119-L121) does not work with asynchronous operations. The library code dealing with superclass methods is as follows: var tmp = this.$super; this.$super = sup; var ret = p.apply(this, arguments); this.$super = tmp; Now consider a class created with Ring.js: var Slow = ring.create({ walk: function() { console.log('Slow walk'); } }); var Fast = ring.create([Slow], { walk: function() { console.log('Fast walk'); // Works as expected this.$super(); // Simulate an asynchronous call that takes 50ms setTimeout(function() { // TypeError: $super is not a function // $super was reassigned to undefined when walk() returned this.$super(); }.bind(this), 50); } }); var fast = new Fast(); fast.walk(); The first call to `this.$super()` works as expected. However, the second call result in a TypeError as Ring.js resets the value of `this.$super()` after execution under the assumption that the methods are synchronous. This problem isn't unique to Ring.js. Resig's approach fails in the same fashion as well. **The fix** Pass the superclass method to the overriding function. I implemented a class system called [PsuedoClass](https://github.com/lazd/PseudoClass) that solves the asynchronous $super issue with this method. It stays true to JavaScript by using prototypes, supports instanceOf out of the box, and it solves the same problems multiple inheritance solves using mixins. It has no dependencies, is well tested, benchmarked, and commented extensively. To top it off, the $super approach used by PseudoClass is more performant than Resig's and Ring.js' approach. A similar approach could be taken in Ring.js to solve the asynchronous $super issue, but I personally shy away from libraries that replace too much of the languages built-in functionality to implement familiar conventions from other languages.
Assuming nothing can change; If you have lots of those types of entries you can do: $.each({ "new" : "create_claim, "add" : "add_to_claim" , "delete" : "delete_claim"}, function(key, value) { $('#claim-type a[href="#'+key+'"]').on('click', function() { $('input[name="action"]').val(value); }) });
You make an excellent point. I'm definitely complaining too much about open source software. :) I'd actually just tried scaffolding a new Ember project with Yeoman and I hit an error when I tried running the server, and was really tired, and didn't feel like fighting with it. It looked like a problem with Ruby, somehow, and I just Jackie Chan faced, deleted the folder and set up with Ember-Rails. Looking at it more awake, something's broken with Compass on my system. Regarding size, I think a lot of it is just tucked away in system gem folders when I do it with Rails. And it looks like there's a Handlebars compile task now, so that statement was really uncalled for. I'll apologize here, and amend my other post.
You could use data attributes to dry it up a bit. &lt;div id="claim-type"&gt; &lt;a href="#new" data-action="create_claim"&gt;Create&lt;/a&gt; &lt;a href="#add" data-action="add_to_claim"&gt;Create&lt;/a&gt; &lt;/div&gt; And script: $("#claim-type a").on('click', function(event) { $('input[name="action"').val($(event.currentTarget).data('action')); });
You could abstract it easily enough, not sure how much that gains you though: function mapClick(href, value) { $('#claim-type a[href="#' + href +'"]').on('click', function() $('input [name="action"]').val(value); } mapClick("new", "create_claim"); mapClick("add", "add_to_claim"); 
I'm thinking the data- attribute would help me a lot. I'm just trying to get better at coding and this is the best way how... explore options and learn what is good/bad about each.
JavaScript inheritance. function A(){} function B(){} function C(){ A.call(this); // run A constructor on this B.call(this); // run B constructor on this } C.prototype = new A; // inherit A _.extend(C.prototype, B.prototype); // fake inherit B C.prototype.constructor = C; // is instance of C var c = new C; c instanceof C; //-&gt; true c instanceof A; //-&gt; true c instanceof B; //-&gt; false (no true multiple inheritance) Ring.js does not seem to show any inheritance chain: spiderman instanceof SpiderMan //-&gt; true spiderman instanceof Spider //-&gt; false spiderman instanceof Human //-&gt; false Relying on native JS, you can choose to inherit, but not run the parent constructor if you want. Pretty flexible. Easy to learn.
ECMAScript has been around since 1997, they're working on the sixth version right now.
If you really want to start exploring, check out AngularJS. It's quite a bit more complicated than plain jQuery, but it's very cool. 
Why did you use $.ajaxSetup? From jQuery: &gt; Set default values for future Ajax requests. Its use is not recommended &gt; [...] since other callers [...] may be expecting the normal default settings Also, the Ajax delay seems completely arbitrary (and lengthy) at one second. I can see the cache being the only real benefit of this approach, but jQuery will use the browser to cache GET and HEAD requests as it is (with timestamped requests), so this is kinda rendered moot. **Edit:** Actually I think this home-spun version of a cache would be most useful in a mobile situation, where requests to the server (even cached) take longer than a standard desktop connection.
 $('#claim-type').on('click', 'a', function() { $('input[name="action"]').val({ '#new': 'create_claim', '#add': 'add_to_claim' }[this.href]); });
And now for a (hopefully helpful, positive) critique. 1. Why are you using grunt? ``npm init`` will do essentially the same thing you're using grunt for without needing to have anything other than node and npm installed. 2. Similarly you can drop grunt from your testing and just use [nodeunit](https://github.com/caolan/nodeunit) directly. 3. [commander](https://github.com/visionmedia/commander.js/) makes parsing command line arguments ridiculously easy, and lets you provide command line help automatically. It can also handle stdio work for input after invocation of your script. Of course a tutorial that explains how to do it from the ``process.argv`` array directly is also useful for a full understanding of things, but you shouldn't duplicate that effort in a more serious project. 4. For a full-featured command line utility, [you might want to include man pages](https://npmjs.org/doc/json.html#man) in your package.json so npm will install them and ``man your-utility`` will work. 5. For a simple example utility like this, the use of ``eval`` is *okay*, but ``$ calc console.log('hi')`` will work and was never intended to. You should always sanitize your inputs. Other than that, this is a nice tutorial. :)
You could also use: $(window).on('hashchange', function() {...}); It has decent support: http://caniuse.com/#feat=hashchange
yeah, that about sums it up. makes for easy prototyping before punching myself in the face...er... writing C for the Arduino directly :D
Ha, nope, and my apologies if I came across as unappreciative. That's a pretty massive article covering a *lot*, but I was just really bummed to run into issues (and feel incredibly dumb) almost immediately. But you're right: there is a certain magic and satisfaction in learning some things the hard[er] way instead of being spoon-fed it all. Not to mention I imagine you have a bunch of this stuff already installed in the machine(s) you wrote the post from, so I can see how easy it is to miss some of these smaller details that worked fine for you when testing step-by-step.
genuine curiosity about the script. Is the following code any better or worse? "this" vs "event.currentTarget" $("#claim-type a").on('click', function() { $('input[name="action"]').val($(this).data('action')); }); 
Same (or similar?) thing happened with me when I tried a test build using the stock Yeoman / webapp generator. Some issue with Compass and/or ruby. I thought to myself "meh, I'm not sure I'd be using Compass anyway", removed its references from Gruntfile.js, and tried to re-build....and it worked!
Here's what I had: &gt; Warning: /usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/site_ruby/1.9.1/rubygems/dependency.rb:296:in `to_specs': Could not find 'compass' (&gt;= 0) among 204 total gem(s) (Gem::LoadError) I haven't ironed it out yet. I don't want to lose momentum on what I'm working on right now. That path looks suspiciously awful, though, but I'm newish to Ruby and can't diagnose well. Compass is wonderful, though.
 [The well-defined algorithm used in Ring.js](http://ringjs.neoname.eu/faq.html#how-does-ringjs-makes-multiple-inheritance) is based off of [Python's C3](http://www.python.org/download/releases/2.3/mro/).
DFTT, dude
Thanks! Browsing github now.
Yes, actually, thank you!
Might be possible with a wrapper around the constructor. Ring uses an init function, so that might be able to. Kinda a hack though. 
I miss interpreted the purpose of Ring. The link says its a class system, which I assume added thing common in classes. Reading the source code was a bit hard given how terse many of the variable names are. But it still looks like all the method calls on your classes use .apply() to give the this.$super function. The example on the link shows it in the talk function, which doesn't look like a constructor to me. Maybe I'm wrong. For the record, I really like your project. You are showing very nice performance gains by embracing prototypical behavior in JS rather then fighting it, as most class libraries do. One of the hidden gems is extending errors with custom ones. Clever stuff. 
"This" just gets confusing when using it in anonymous functions for some people. Your code will work just fine.
Sorry I totally missed your response. I also had the feeling that there might be a little too much boilerplate, but I actually shifted my opinion on this after considering it for a bit. For the level of strictness achieved the added boilerplate is a cost I am willing to pay. Another point is that it keeps your functions clean from type checking code which means that you can write code with focus on what the code does rather than on the type checking and handling default arguments. As an example: //A function that calculates the logarithm of a //number in base 2 or a given base. var log = Strict.def(function(x, base) { //10 extra characters return Math.log(base) / Math.log(x); }, [Strict.Number], //Always expects one number //14 extra characters [Strict.Number, 2]); //Default argument base //17 extra characters This requires two extra lines and a total of 41 extra characters, these 41 characters are only needed when the function is defined and after that it functions as any normal function. I don't know if you ran some of the examples or read the code, but in any case the code throws appropriate exceptions when the types don't match, doing this by inlining type checking in your function adds a great deal of noise. Same example with naive inline checking: //A function that calculates the logarithm of a //number in base 2 or a given base. var log = function(x, base) { base = base || 10; if (isNumber(x) == false) { throw new TypeError("Error msg"); if (isNumber(base) == false) { throw new TypeError("Error msg"); //actual function body return Math.log(base) / Math.log(x); } This approach has three more lines and 143 extra characters, of course this code is very naive and could obviously be improved a lot, but if this is the level of type checking one is interested the advantages are pretty clear. For prototyped inheritance and "classes" this becomes even clearer if you want this amount of type safety. How ever any suggestions on how to make the boilerplate less obtrusive is highly appreciated and I am fully aware that the boilerplate could be reduced a bunch. Your idea of using $ for all member access(setting and getting) is very good, if I do more work on this I'll change it. Thanks for your input. 
hmm no it is not designed to work with canvas. The idea is just to give a simple way to add a little physics to some of your DOM elements, not to build a complete game/animated video. That said, you are totally right, I think it would be a great to improve that engine to be completely independent from DOM :)
A nice implementation. Have you used any optimization techniques with this? I've been testing a few different algorithms out in a project of my own
Looks pretty sweet for both node and browser testing, I love the advanced suite options and dependencies but not having IE &lt; 9 support is unforgivable. With other test runners and matchers this has bitten me more then once; paying clients still want them. And it sucks when they forget they did sign off on &gt;= IE9 but still come back with complaints IE7 doesn't work and you have to replace out all fancy assertions for something simpler. At least, in Mocha you'd only have to ditch the assertions and not your all the suites. I used to use Mocha with Chai but had to ditch Chai for Proclaim over this. edit: forgot to add: that one-pager homepage is ridiculous. Split that shit up man, this is not very usable.
CoffeeScript is not JavaScript.
You should have missed the "and" part.
I don't really understand what you mean by "embracing prototypical behavior in JS rather then fighting it, as most class libraries do". All class libraries in JavaScript use prototypes. Some of them create a prototype chain, some other create a single prototype per class. Ring.js just combine the syntax invented by existing js libraries (mostly John Resig's) with a new way to create prototypes to handle multiple inheritance (which is vastly inspired by the Python specification). For the exceptions, I just got really pissed off when I saw almost no JavaScript programmers create new type of exception (at least at my work). An easy way to define new ones was really a necessity.
I initially started with the idea, that when a square is removed, I would redraw only that portion of the canvas as white. But it turned out to be easier (and no hindrance on performance) to just erase the whole board and draw the squares, every tick. To erase the board I use `ctx.clearRect( 0 , 0 , canvas.width , canvas.height );` courtesy of stackoverflow
First, let me thank you for the time you took to review my work. I love the advanced suite options and dependencies but not having IE &lt; 9 support is unforgivable &gt; I understand what you feel, it was a tough decision to drop support for IE&lt;9. But Object.defineProperty is what allow me to implement feats such as lazy subject and given, to do 10.should, etc. I also considered falling back to simple prototype decoration but knowing that it will probably break a lot of code relying on for..in statement I dropped it. that one-pager homepage is ridiculous. Split that shit up man, this is not very usable. &gt; You're so right, it just grew out of control, I'll try to clean that shit in the next release. As a last word I want to say that, at the beginning of this project, the idea was to see how I could build a BDD/TDD framework using BDD/TDD, and, as a RSpec user, I wanted to have the same kind of feeling that I can have when I write RSpec tests: simplicity, readability, reusability, etc. In the end it grew as something that could benefit others and so I pushed the development further in order to provides a full and robust framework.
I was mainly wondering how what you were doing is any different than the canonical way, and I was pointing out that your `instanceof` operator is broken. Your library looks nice, and wouldn't have any immediate objection to using it. I do have some comments, though. &gt; That is not multiple inheritance, that's simply mixins. Call it "fake multiple inheritance" if you want but that's not the same. Of course my example is not multiple inheritance. JavaScript does not support multiple inheritance. This part, specifically is where the inheritance takes place: `C.prototype = new A;` All the rest is just fluff. Notice the use of `instanceof`. How is your library any more "real" than the typical approach? ###From [your link](http://butterflyprogramming.neoname.eu/ring-js-javascript-class-system-with-multiple-inheritance/)### &gt; There are a lot of **class systems** available in JavaScript, but they are all more or less the same. The smarter ones implement **interfaces** and **mixins**. I tried to use mixins for a time, thinking it should be a good compromise to implement what could easily be achieved in Python with multiple inheritance but with the single inheritance model of those libraries. I tried, really hard. But in the end I came to think that mixins are just a pad concept. There is no way to really determine what deserves to be a mixin and what should not. What could be reusable and what is not. JavaScript does not have `interfaces`. If by mixin, you mean prototypal inheritance, then yes, that is what this is. &gt; You could use a class library that provides a nice syntax like JsFace or dejavu. Thank you. I have used other libraries, such as MooTools. It is always good principle to use good tools when you need them. It is also good to get your terminology correct. Those are not `class` libraries. ##JavaScript Does Not Have Classes.## ###JavaScript Has Constructors.###
You could look over [markdown-js](https://github.com/evilstreak/markdown-js) for some pointers before starting work on your own.
I'd suggest contributing to open source projects that already do that. You can start by digging in the source code and solving issues that already exist, like this https://github.com/OscarGodson/EpicEditor/issues
That will work just fine. I tend to use event because I'll end up calling preventDefault in most handlers. 
It would be and if it would be written in CoffeScript and JavaScript. But I guess, if I would change something in a JavaScript file they would not merge it ever, because I should change the CoffeeScript not the JavaScript.
Writing your own from scratch is an awesome way to learn a bunch of stuff about js and programming in general. A sexy parser will be recursive. Recursive functions can take a bit to wrap your head around in practice, but are omg fun to write. So here's a chapter (from a great, free ebook on js) that specifically walks you through the basics of writing a markdown parser. It also has the best sample markdown/text for the parser ever: http://eloquentjavascript.net/chapter6.html#p90fad98 . Also read the rest of the book while you're at it. [edit] updated link to go straight to the relevant section
Thanks for your reply. I really like the project, it looks build from experience and love. As a mocha user I've been longing for some of the more advanced features you've implemented :) This IE &lt; 9 is a big issue though, I assume you know the [Chai assertions](http://chaijs.com) library? The are pretty big and know what they're doing but also got bit by this; They also use the myVar.should.-style and chained getters but lately there have been many Issue's in the tracker from people who want to leverage the fancy chai plugins but have to strip everything and revert to simple assertions because of their paying clients need IE8. They're now considering a generator system to generate IE-safe assert functions for all their plugins. So if you're really serious about going mainstream you might want to cover this somehow (maybe a clean fallback), there is real world demand for it.
The title says "for" js and cs, not "written in." The title clearly describes what it is.
I don't see why this is getting downvotes... Helping out with open source projects is a great way to hone your skills. 
i can copy &amp; paste like a champ... i even understand what the code is doing most of the time. my problem is trying to combine examples and write my own code in a structured manner. i end up with garbage... functions littered everywhere, dozens of global variables, and a big mess that makes it hard to understand :( i'm still trying to find a good C reference for developers coming from other languages. haven't found one, yet
we use $.ajaxSetup internally so I decided to give an easy way in to it. The code is directly ripped from our product. I was asked to space out requests by a second to spread out the load on the api server so that's exactly what I did. Cache is one good case, but there are others including the ability to combine GET requests together (say you make 2 get requests for the same thing, you can recognize there is already one in progress and just send back the promise for that request) and adding anything extra you need (perhaps you want to write a load balancer that will split requests between two domains or some such).
the point is you can DEVELOP without a build cycle. Just refresh the page and it works and then only build when you want to push it out. This means you're working on the actual files and can debug them directly in the browser without a sourcemap. 
downvote wasn't mine; but OP is explicitly asking for advice on writing a large JS project __from scratch__. This comment, while good general advice, is not helping this goal; and reads like "you shouldn't do that". I imagine the downvote was someone who thinks (as I do) that there *is* merit in doing what OP wants.
Sorry, my contrarian friend, you've picked the wrong thing to be contrarian about.
The angle doesn't appear to change. It should change based on the part of the paddle the ball hits (imagine the paddle is convex instead of flat).
[How to Learn JavaScript Properly](http://javascriptissexy.com/how-to-learn-javascript-properly/) and the current [Learn JavaScript Properly subreddit, summer stream](http://www.reddit.com/r/learnjavascript/comments/1fsxnx/learn_javascript_properly_omnibus_post_summer/).
Played a quick game and I had fun so played a second. Thanks! :)
I can't say this aspect doesn't bother me. I really hope there will be a day when we could finally use those features without bothering with IE7-8, but yeah, today it's a big issue for everybody. In the case of Spectacular the biggest issue is with the myVar.should form, but it can already be bypassed using the expect(...).to form. Most of the remaining usages of getters is in the Spectacular internals and can be easily replaced with plain functions, I was using getters mostly for the sake of keeping a clean OOP style. I'll take a look to the Chai discussions, and see how they handle that.
Really appreciate it!
I'm not sure if you are open to using libraries but if you are and like a functional programming style then [jsparse](https://github.com/doublec/jsparse) is something to take look at. While it is not fast, it does allow you to write a very elegant parser by combinating smaller parsers into larger ones using 'parser combinators', which are higher order functions that take parsers (as functions) as input and produce parsers (again functions) as output. I very much enjoyed this style of programming when I used this lib to [write a parser](https://github.com/remcoder/Pxxl.js/blob/master/js/pxxl.bdf-parser.js) for the ancient [BDF font format](http://en.wikipedia.org/wiki/Glyph_Bitmap_Distribution_Format). For a greater challenge, you could write your own parser combinator library with which you can then implement the markdown parser. 
You can always play around with lexical parsers/grammers. They're extremely powerful and have plenty of quick implementations in JS. http://zaach.github.io/jison/try/
Hi, Yes &amp; no i used the backbone router, that fetch the rendered content on the server. So basically I got a function that fetch content in ajax &amp; load dom events, that's the function icalled by the backbone router. for fun I just uploaded it to codepen http://codepen.io/anon/pen/ukiIm
When the content is there, so yes the first load is slower as like you said, it has to waterfall, but all other pages are much much faster, that's a trade off we made for now , but in futur version we could render the content with the app shell on the first load, But there was not enough time ;)
This is very cool. From what I can tell, this is Phantom but running in Gecko instead of WebKit, is that right? What else separates it from Phantom?
it has a comparison here: http://slimerjs.org/features.html although basically they're trying to be compatible with phantomjs
That is what I was looking for! Good call. We use Backbone for one of our one page apps and the router works great.
Will be great to add this into Karma E2E tests.
What do you think the biggest advantage is I'd be getting over using vanilla Backbone? 
This isn't actually a jQuery problem so much as a programming problem. Strings (such as 'p') require quotes, variables/objects don't require keywords. You could do something like var p = 'p'; $(p).show(); But it doesn't seem worthwhile.
The element name is not a keyword and it is not a variable, so jQuery needs to know what you're trying to work with. **"p"** isn't actually a &lt;p&gt; element; it is a selector that selects elements named "p". You can combine multiple selectors together to select a specific element. For example, if you have an element &lt;p class="myParagraph"&gt; and you only want to select that element, you can do this: $("p.myParagraph").doThis(); // call method doThis() on all p elements with myParagraph class You can refer to the jQuery API on selectors: http://api.jquery.com/category/selectors/ **this** refers to a JavaScript object, which is the context in which a function is called. Explaining **this** is a bit more than I'm really capable of - I have an intuitive understanding that works most of the time, but often I get tripped up due to closures and function rebinding. Instead I will refer you to StackOverflow: http://stackoverflow.com/questions/3127429/javascript-this-keyword TL;DR: **this** is a JavaScript keyword that refers to an object. **HTML Elements** are not JavaScript keywords.
View management is probably the feature that saves the most time. Giraffe views can nest inside each other and disposal is recursive, and they can move around the DOM and render without clobbering other views' events. This has been quite helpful in building a highly dynamic web app with evolving requirements.
if it's not moving then at least you know it's stable =0) just have a look at the codebase, if it looks clean enough that you feel confident of fixing any issues you come across then go ahead. As long as you write your code in a modular fashion it shouldn't be too hard to switch to a different framework further down the line if your requirements change. I think there is too much emphasis on community in JS libraries - is it the right tool and will it work for you? By working it means it makes your life easier and won't bite you in the arse.
I don't think it was about being contrarian, but about making opinionated statements that are trivially disproven by the most cursory reading of the post linked. 
(multiple) I get it, but if p is not a variable/keyword but instead a string, why is it interpreted in the code as the representation of a line of text (wich I would call a variable or a keyword?) and not a single p?
I get it, but if p is not a variable/keyword but instead a string, why is it interpreted in the code as the representation of a line of text (wich I would call a variable or a keyword?) and not a single p?
**$** refers to the global [jQuery](http://api.jquery.com/jQuery/) function, so what you are really doing is this: jQuery("p").doThis() When you give a selector to jQuery, it parses the DOM to determine what you're asking for. It then wraps the results of your request inside of a jQuery object, and returns to you an array of elements wrapped in a jQuery object. See the api for the jQuery function: http://api.jquery.com/jQuery/ &gt; In the first formulation listed above, jQuery() — which can also be written as $() — searches through the DOM for any elements that match the provided selector and creates a new jQuery object that references these elements:
Because in JavaScript a line of text *is* a string. `var str = "This is a line of text, it is a string."` In order for the jQuery selector to pick it up, it has to have something it can reference. Because HTML tag names are not implicitly variables (for good measure, the amount of reserved words in that case would be enormous) jQuery needs something to know what it's looking for and in this context, a string works just as well as anything else you could use to identify an element. The reason `this` doesn't need to be in quotes is the exact opposite. "this" is a string. `this` is a javascript variable that references your current scope context.
If you dive into jQuery's code (which I recommend, the stuff you are interested in is here: https://github.com/jquery/jquery/blob/master/src/core.js#L90). $('p') analyzes the DOM to look for all html elements matching the selector 'p' (all p tags on the page). Then it returns those objects in an array that you can operate on. If you use an object, like $(this), it will evaluate what **this** is and do what it needs to do.
 Thanks for the explanation! I think I got confused because normally a string such as "p" is parsed as p and not any string that is embedded in &lt;p&gt; tags.
`"p"` is still parsed as a string in JavaScript. It's just that you're passing that string to the jQuery function, `$()` or `jQuery()`, which returns a jQuery collection of DOM Elements from the page. `$()` and `jQuery()` are just functions and they return things, just like how encodeURIComponent() takes a string and encodes it for a URI. The jQuery function does different things depending on the type of variable that it's given. When it's given an object it expects a DOM Element but it returns a jQuery wrapped DOM Element.
good job, *almost* beat it (I died with 3 bricks). i noticed two things: - if the ball hits the side of the paddle, it 'sticks' to it and travels along the bottom. depending on where the ball is positioned vertically, it will sometimes then shoot back up, or shoot back down at approximately the angle it was traveling at when it hit the side of the paddle. - if the ball bounces off of the ceiling, it will pass through any bricks in its path on the way back down unless it touches one of the sides. it seems like the collision only checks the sides and bottom 
&gt; I want to write a JS script, that takes in markdown as input, and produces the HTML. &gt; I know that there are libraries that do the same, but it is that, I want to write one for myself, to hone my skills doing a complex project, so that it gives me a hang writing some 1500 lines of JS, which otherwise I would have never written. &gt; Please let me know your thoughts, on how to approach the problem, and pointers on how to begin. There are two different things in play for any serious project. One is programming knowledge, the other is domain knowledge. I could be wrong about this, but if you had domain knowledge and merely wanted to learn how to write 1,500 lines of JavaScript, you'd be dropping buzzwords like "LL" and "Treetop." My personal advice is on any project, you should be out to learn one or the other but not both. If you know JS really well but want to learn about parsers, compilers, and so on, that's a good project. If you know about parsing but want to learn JS, that's a good project. If you lack both areas, I don't think you'll learn either particularly well. So if you don't already know how to structure such a project, I suggest picking oen in an area where you know the domain and can concentrate on learning how to write effective JS to get the job done.
Try checking this out [this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript?redirectlocale=en-US&amp;redirectslug=JavaScript%2FA_re-introduction_to_JavaScript). It will probably do a better job of explaining custom objects better than I could. But basically yours would have worked if you set the helper functions to set / return "this.r". This is not best practice since new helper functions are created every time you instantiate a new object. Instead you can use the prototype class to make them available to all objects of that type. See Below. function func() { this.r = ''; } func.prototype.trigger = function() { this.r = '.setRefresh(2)' } func.prototype.display = function() { return this.r } var result = new func() result.trigger() console.log(result.display())
Agreed, and I also thought we'd moved away (as a community) from using closures to represent private data.
I went through the source code and it is clear that the author uses a lot of really clever tricks to make certain things work. I'm impressed with how lightweight the code is and I'm not necessarily opposed to the syntax, but the following things bother me: * *Every* function is wrapped in another function in order to make this.$super() work (this is a problem because it makes the stack traces a lot longer and results in worse performance and higher memory usage) * instanceof is broken * No support for namespacing * No support for lazy class initialization * Strays too far from the core principles of the JavaScript language without enough gains Also, I prefer mixins over multiple inheritance. For comparison, I went with the following pattern when developing [RaptorJS](http://raptorjs.org/modules-classes/developer-guide/): define.Class( 'some/namespace/Dog', 'some/namespace/Animal', // Name of the superclass function(require) { var Dog = function(breed) { // Invoke the constructor of the superclass: Dog.superclass.constructor.call(this, "dog"); this.breed = breed; } Dog.prototype = { eat: function(food) { // Invoke the "eat" method in the superclass: Dog.superclass.eat.apply(this, food); this.bark(); }, bark: function() { console.log("woof!"); } }; return Dog; }); One of my goals with RaptorJS was to stay as close to pure JavaScript as possible (better performance and lower learning curve). For example, developers still work with the prototype property in their code and you still have to use "call" or "apply" to invoke a superclass method. I think, for the most part, that makes both experienced and inexperienced JavaScript developers happier. Also, I chose to extend the AMD spec by extending the "define" function so it is a less proprietary solution (in theory). Just sharing since I went through the same struggle when trying to improve how JavaScript code is written. 
 I get it. Thank you so much, to you, and to everyone in this sub for being so supportive :)
This is awesome! By the way, does anyone know a decent headless browser library that runs on Node for functional test purposes? The best library I found was [phantomjs-node](https://github.com/sgentle/phantomjs-node), but it stopped working after I did a version upgrade.
You're allowed to put a short description in the post title.
[Here's a shameless plug for something I was working on.](https://npmjs.org/package/eidolon) It's not exactly stable and I haven't worked on it in a while but I plan to get back to it once things at my job slow down.
Are you certain it's not updating it? [Because it's working just fine for me.](http://jsfiddle.net/jKajp/)
I would suggest you dive right in and learn on your way. Yes you will stumble and fall on the way, but don't give up. Get up and try again. First break the problem into smaller parts. For example start with a parser that only supports paragraphs. That should be very easy to write. Once you get that working. Add header support to your parser next. Once you get that working add support for blockquotes. And so on. Each step will will force you to think of the problems that you need to solve. You may not end up with the "best parser", but what you would have learned on the way, about JavaScript and about Parsers, will be profound.
Ill say it. I hate the cutesy/fluent/natural-language API style of libraries like this. It doesn't really make your code any more readable, and if anything its more verbose. its personal preference, but i dont get it. 
In enterprise environments you need to provide documentation of all open sources licenses in the product so legal can insure compliance. Npm's nesting nature makes that pretty difficult, plus npm authors often store their license information in disparate places, ie package.json or the readme.md or readme.mdown or a license file in their repo ect. This project handles all that leg work for ~90%+ of modules. The resulting cvs is also stripped of duplicates, so you could use the outputs to regularly report on you OSS usage and obligations.
The owner of this account has requested this content be removed by /u/GoodbyeWorldBot Visit /r/GoodbyeWorld for more information. GoodbyeWorldBot_v1.2
That's actually pretty cool. Btw, I heard that [jslibs](http://code.google.com/p/jslibs/) may be used as Gecko-based analogue of PhantomJS in some cases. (haven't tested it though)
&gt; ES = ECMAScript... as in JavaScript.
jQuery follows CSS selector syntax where p means &lt;p&gt;.
Did I miss a meeting? I think closures are awesome to represent private data.
A parser (for any language) is based on regular gammar. The idea is to identify tokens of a specific language (in your case markdown) and then transform them into destination language (here HTML). I suggest you take a look a PEG.js (http://pegjs.majda.cz/) which is very easy to use if you are familiar with regexp and regular grammar. If you build a github repo with your project, I'll be happy to follow it :)
I'm new to javascript so please correct me if I'm wrong, but isn't this creating a 114224x2 array? Surely you would need to iterate over two dimensions to create an array like this? var ary1 = []; for (var y = 0; y &lt; 338; y++) { var ary2 = []; for (var x = 0; x &lt; 338; x++) { ary2.push(0); } ary1.push(ary2); } I have no idea about the performance issue though, but I've seen similar strange performance discrepancies before. I was drawing the mandelbrot set to an ImageData object and iterating x then y was 10x faster vs y then x, seems to be the wrong way round. Works as expected in Firefox.
I don't know why exactly it drops, but this will work fine: var ary2 = new Array(339 * 339); for (var i = 0; i &lt; (339 * 339); i++) { ary2[i] = [i, i + 2]; }
This isn't really new. And it's wrong. You should use the prototype for this. There is no reason for keeping these values secret.
Just a guess, but Chrome probably resizes the underlying hash table (I'm assuming that Chrome represents "normal" arrays as a real hash table, someone correct me if I'm wrong.) once more in the 339x339 loop. This means that Chrome needs to copy all ~115k elements to the new backing array, which will take some time, and may also trigger additional garbage collection. 
you created an array of arrays, so memory wont be continuous, and your cache coherency goes way down. if you want one continuous block of memory you have to use a single array since js doesn't support native muti-dimensional arrays (like C# for example).
i would guess it's because you're dynamically growing the array's (via push) and the difference in size means you cross one or more extra dynamic-size boundaries and this leads to incurring more resize overhead.
My take on what the advantage of ESLint over JSHint is the plugin capability. So currently a bunch of linting options can be broken out and encapsulated. Also if someone wanted to add an additional lint option, they could plug it in vs having one monolithic code base to rule them all.
Ah of course, and then use var xy = ary1[y*338 + x] to access the elements, that makes sense, thanks.
Weird, doesn't reddit usually catch URL matches and warn you about them?
*ironic voice* Yeah, this is much better. No, really. As I once told you on Twitter, you created the ugliest and the most useless JavaScript library of all time. There is no need for this in JavaScript. We have prototypes, mixins and closures and we are fu*king proud of them.
or you could just return the promise that $.ajax returns. 
I lost you at "$$". 
Who cares about the age of the effect over the effect itself? I've seen many tricks and effects from 20 years ago used on C64 and Amiga crack intros used today, it does not diminish the value. The canvas color cycling made its rounds years ago, which is an ancient effect used for simple animations, was it shit because it was old? http://www.effectgames.com/demos/canvascycle/
So update both the cs and js before you submit a pull. What's the problem?
I heard in a google talk (I think), that Classes with more than a number (that I can't recall, but would say its around 30) of properties are not represented the same way that the "small" ones are. V8 changes the type from Class to other, with poor performance. I don't recall what they've said about arrays, but I would guess it may be something like that. Where when an array has a length pass a certain number, then the internal representation is different.
How'd you capture that?
agreed, I used to do things similar to this if I needed to do some setup the first time a function was called. For example; var obj = { getCount: function() { var count = 0; this.getCount = function() { return ++count; } return count; } }; Also useful if you want to setup some defaults, saves an if statement every time the function is called. I try to stay away from things like this now though as I use an [Aspect Oriented](http://modernjavascript.blogspot.com/2013/06/aspect-oriented-programming-in.html) approach which decorates the function and replacing the function means I'll lose the decoration
It's part of the developer tools in Chrome. It's under the Timeline tab, in the Memory category. Once you are in that section, click the Record icon (in the bottom toolbar), run your routine, then click Record again to stop.
Oh yeah, found it thanks :). I use the dev tools so much but never used this tab.
I would be *really* surprised if Array data was represented with a hash table. Hash tables have very poor characteristics for ordered iteration, which is a key Array operation.
Why not use the actual squared numbers intead of 338x338? There might be some magic number where it slows down, and the chrome source code can be searched for that number. I have a feeling it's the resizing as others said.
I created a generic automaton runner, (this [one](https://github.com/jacopofar/liveJSONAutomata)), but execution speed has been difficult. I optimized a little by listing the candidate cells before the calculation (so an empty cell too distant from any non-empty cell is ignored), but still is slow. (I didn't know about requestAnimationFrame at that time, however canvas drawing is not a problem in my case) Have you tried with other automata? I love them!
So, I am still not getting why this is not working. To display, I am calling the display.trigger() from a append later on in the code, like so. t.append('&lt;div class="foobox-ad"&gt;&lt;script type="text/javascript"&gt;var ados = ados || {};ados.run = ados.run || []; ados.run.push(function() { ados_add_placement(5517, 28136, "azk61281", 6).setZone(45440)'+result.display()+'; ados_load();});&lt;/script&gt;&lt;div id="azk61281"&gt;&lt;/div&gt;&lt;/div&gt;') I am triggering it by this which is in a function. .end().find(".foobox-next").unbind(".foobox").bind("click.foobox", function (n) { return n.preventDefault(), result.trigger(), o.modal.next(), !1 Right now, with the code you provided, the blank variable r is being sent to the display, but when i trigger it, it is not updating the variable. 
Understanding this: `this` has always been the bane of many up and coming developers. In traditional languages such java or c#, this always refers to the object that the function is attached to (the instance of a class). Javascript on the other hand, `this` can refer to anything. Check the following situation: var MyObj = function() { this.id = 1; } MyObj.prototype = { myObjFun: function() { } }; function myFun() { this; } var myObj = new MyObj(); myFun(); myFun.apply(window, []); myFun.apply(myObj, []); Now open up a chrome debugger and put a breakpoint in `myFun`. I would suggest listening to "Born to Move" by CCR (http://www.youtube.com/watch?v=yUYigb16ViM#t=120) while performing this activity. In the chrome debugger myFun should be called 3 times. 2x with window object as 'this' and the last one as an object you just created!!! So jQuery performs the same thing, it sets the `this` keyword for you (crude in explanation but should suffice) $('p').click(function() { this; // refers to p html element var $this = $(this); // now a jquery p element }); Fun with javascript. myObj.myObjFun(); // This will have a scope (this) of myObj because its called on the prototype var fn = myObj.myObjFun fn(); // This will have a window scope because its javascript and the window application of this is performed when not called directly on an object. fn.bind(myObj)(); // Will again have myObj as a scope (this)
i use mixins and the like a lot too, but i've recently been pulling my hair out due to dependencies fetching their own version of backbone (for instance) with npm, and then i end up decorating an object that doesn't get used. globals by any other name man. 
yup. I agree with you. The swiftness with which people downvote comments here that __add__ to the conversation is very dissapointing, and has actually made me upset on more than one occasion.
I've heard that up to a point chrome will store it as a native type and then beyond uses a non-native type. Could it be this effect?
this doesn't answer your question directly but you should consider using the ndarray module instead, it's way faster https://npmjs.org/package/ndarray
I don't say people can not make that mistake. I say people will definitely make a mistake similar to this one one day or another. It's not the fault of the way this.$super is implemented. It's just that people are not used to closures. Another, a lot more usual, cause of error is when we use `this` inside a closure and forget to use `_.bind()` (or forget to define a variable to store this, which is another quite frequent convention). There is no way to detect that at the compilation. Even during the execution it could work too, because the `this` inside the closure could work OK with your code anyway (as example, if your closure just assign an attribute to `this`). For this extremely frequent type of error there is no magic anyone could implement. The only remedy is that people *really* understand how to use closures in JavaScript. If you masterize that, you will never fall in that trap about this.$super.
That's a good idea. I'll see if I can modify that the next time I change the documentation.
&gt; Every function is wrapped in another function in order to make this.$super() work (this is a problem because it makes the stack traces a lot longer and results in worse performance and higher memory usage) Not every functions, only functions that effectively use `this.$super`. If you're worried about performances, there is a part of the faq that explains it is fast enough: http://ringjs.neoname.eu/faq.html#is-ringjs-fast &gt; instanceof is broken Ring.js has a replacement for it: http://ringjs.neoname.eu/docs/tutorial.html#testing-the-class-of-an-object &gt; No support for namespacing That's not the job of a class system. Use RequireJS, that's its job. &gt; No support for lazy class initialization Don't understand that. You can create classes whenever you want. &gt; Strays too far from the core principles of the JavaScript language without enough gains There is... nothing I could say about that without making fun of you. Thinking there are "principles" in the JavaScript language is... No, I can't say.
Do you know of any good article showing off the "right" way to implement this?
Could you point me in a direction of an example. i have the iFrame in a div already...what css coding should go in that div to accomplish this? Thanks!
an input in HTML: &lt;input id="myInput"&gt; getting the value of the input: var myValue = document.getElementById("myInput").value; adding a value to an array: myArray.push(myValue);
or you can add in the input from javascript like so: var myInput = document.createElement('input'); attach it to another element: anotherElement.appendChild(myInput); and getting it's value is as easy as: var myValue = myInput.value;
/r/LearnJavascript
Lost all credibility with this: &lt;script src="/vendor/neon.js"&gt;&lt;/script&gt; &lt;!-- Class system --&gt; &lt;script src="/vendor/thulium/Thulium.js"&gt;&lt;/script&gt; &lt;script src="/vendor/thulium/Thulium/Util.js"&gt;&lt;/script&gt; &lt;script src="/vendor/thulium/Thulium/Parser.js"&gt;&lt;/script&gt; &lt;script src="/vendor/thulium/Thulium/Renderer.js"&gt;&lt;/script&gt; It's 2013 and people are still doing client side dependency management using script tag ordering.
&gt; Not every functions, only functions that effectively use this.$super. If you're worried about performances, there is a part of the faq that explains it is fast enough: http://ringjs.neoname.eu/faq.html#is-ringjs-fast My mistake. I did not notice that you were using a regular expression check on the code of *every* function using Function.toString() to see if it contains "$super". However, I would be concerned about the performance of doing this (especially since some functions might have a lot of code). &gt; That's not the job of a class system. Use RequireJS, that's its job. It is helpful for a class system to be aware of namespaces since it allows for less code and more readable code in certain situations, but I agree it is not necessary. &gt; There is... nothing I could say about that without making fun of you. Thinking there are "principles" in the JavaScript language is... No, I can't say. Not the most civil response, but I'll bite. JavaScript was designed around prototype-based inheritance. The more you try to hide that, the less interested I am in using your library. Also, introducing too much behind-the-scenes "magic" with few gains is detrimental since it makes it harder for developers to reason about the code they write and it will inevitably lead to strange behavior. Also, I added RaptorJS to your jsperf comparison: http://jsperf.com/multiple-class-systems/3 You will notice that RaptorJS is roughly about three times faster than Ring.js in the browsers I tested (Chrome, Firefox and Safari). Admittedly, there is a little more code to call a superclass method/constructor when using RaptorJS, but the comparison at least illustrates that there is a cost to some of the tricks used to make this.$super() work. 
Thank you for taking the time to learn about the library and for providing some constructive criticism. I really do appreciate it. I am actually currently working on a JavaScript-based precompiler that will take a string of JavaScript code and find any class definitions. It will then precompile the class definitions and return the new string of JavaScript code. So instead of having a custom language such as TypeScript, the class-based definitions that you type can be executed as JavaScript, or you can precompile your JavaScript (using JavaScript) into a minified version of your JavaScript with precompiled class definitions. So this removes many of the limitations that implementing a custom language presents while offering a much more robust and JavaScript-adapted form of classical inheritance. If you have any other comments or suggestions, I would be happy to hear those as well!
Garbage collection.
&gt; I also think your implementation would severely impact performances due to the necessity to create and modify arrays for every method call. The only lib I know that does the same thing is PTClass and it has quite bad performances: http://jsperf.com/oop-benchmark/140 . You should try to create a new revision of that jsperf and had your lib to see how it compares. You're absolutely correct. My implementation of calling `_super` is slower that yours by an *order of magnitude*: &gt; `Running suite Superclass methods [benchmarks/super.js]...` &gt; `Resig x 72,751 ops/sec ±4.90% (85 runs sampled)` &gt; `PseudoClass x 535,592 ops/sec ±1.97% (91 runs sampled)` &gt; `Ring x 5,746,330 ops/sec ±0.21% (94 runs sampled)` &gt; `Native x 10,249,909 ops/sec ±2.02% (100 runs sampled)` However, you're not respecting the prototype chain, so the following code does not work as expected: var Walker = ring.create({ walk: function() { console.log('Walking'); } }); var Person = ring.create([Walker], { talk: function() { console.log('Talking'); }, walk: function() { console.log('Person walking'); // This should call the changed method this.$super(); } }); // Change a method on Walker's prototype // Person should get this method via the prototype chain Walker.prototype.walk = function() { console.log('A change to the walking function!'); }; var person = new Person(); person.walk(); We would expect it to log: &gt; Person walking &gt; A change to the walking function! But it instead logs: &gt; Person walking &gt; Walking You should be looking up the method to call in the prototype of the parent class, not statically binding it to the method at time of declaration. This is what PseudoClass does. Doing this in Ring.js, however, would make it much slower. This could again be a documentation issue, but we're beginning to change the way the language works when we use Ring.js, and I have a strong aversion to that.
There are a lot of great resources out there that cover Karma (formerly Testacular) and the Angular Scenario Runner for E2E tests; the focus of _this_ screencast is on how to choose a strategy for your tests and demonstration of examples of low-fi and hi-fi tests in Angular using Protractor and Testem. [Protractor](https://github.com/juliemr/protractor) will eventually [replace the Angular Scenario runner](https://github.com/juliemr/protractor/issues/22#issuecomment-20695225), so I figured it would be good to start familiarizing myself with it; it turns out to be a really awesome E2E test environment with a lot more "reality" than the Scenario Runner.
You might try the position method.
Unlike C, Java, JavaScript, and most modern languages does not requires programmers to manage the memory directly. (For example, if you declared an array `arr` with variable length and done playing with it, you don't have to free it manually, unlike C where you have to `malloc` and `free` manually to manage memory.) However, since there are no tiny people in your computer automatically managing memory, something must manage the memory - allocate a part of memory when an object is declared, and after an object is used, de-allocate(free) the memory to use it again (since [you can't just download more memory to use](http://www.downloadmoreram.com/)). Garbage collector does this job, allocating new memory when an object is created, detects objects which are not used (~= not referenced by any other objects) anymore, and remove those objects &amp; free memories (garbage collecting). This makes programming easier, since programmers now don't have to think about memory management anymore and prevents bad things caused by bad memory managements, such as memory leaking (caused by not `free`ing after memory is used) and double-freeing (caused by `free`ing memory which is already `free`; can cause [security problems](http://www.symantec.com/connect/blogs/double-free-vulnerabilities-part-1) by enabling crackers to manipulate heap). (Note: since in some cases garbage collectors can't recognize unused objects, you still have to manage memories, by doing something like `unused_object = null`.) However, making programming easier comes with a cost. Since garbage collectors need to look at memory to find unused objects, it takes a lot of time to collect garbage. If a JS engine collected garbage every time a reference is changed, it would be too slow to use. Therefore, typically garbage collection is done only when it is necessary, like when the memory is full and new memory need to be allocated. The graph showing allocated memory decreasing rapidly tells that garbage collection is done there. I don't know details of V8 engine, so I don't know what is happening exactly, but I think that GCing is the 'direct' cause of lag. (And I don't know what causes a lot of garbage collections) My rough guess: I think it is somehow related to the fact that `338*338*7 = 799708` and `339*339*7 = 804447`. Probably an element in the array might consume 7 bytes. (But I'm not sure, since the size of heap is more like 80M and not 800K.)
Thank you, that's an excellent response :)
Thanks, I'll post there.
Thank you, I will try this. 
Thanks, I will take a look at this.
A couple of questions: 1 Does this need to be in a function? 2 Does this code need to come before my Array in order to effect the Array? 3 If my Array looks like this: var product_prices = new Array(); product_prices["product1"]=4899; product_prices["product2"]=3899; product_prices["product3"]=3599; product_prices["product4"]=3999; product_prices["product5"]=6499; product_prices["product6"]=1499; product_prices["product7"]=5699; product_prices["product8"]=6399; product_prices["product9"]=3699; product_prices["product10"]=3999 product_prices["product11"]=[I want the myValue to be here] How would I push the value from myValue into "product 11" for example.
Sometimes you like some libraries and sometimes you just don't. And when I see such an ugly syntax using so many underscores, dollars and C# keywords which have nothing to do in JavaScript, I just get a little bit angry. Because when someone is doing this, he probably doesn't get what's JavaScript about. He doesn't get JavaScript's object model. He just wants JavaScript to be more C#-ish, Jav-ish etc. And that's not correct at all.
TypeScript succeeded in this case because it handles all the types, privates, implements etc. before the compile time. Because there is often really no need to have properties hidden. Moreover, it's sometimes an advantage to have an access to all properties. And when you really want something to be hidden, you just put it in the closure. It's the fastest solution and no library can do it better.
&gt; That said, this can simply be a documentation issue, make sure you mention it in Ring.js' docs and you're covered. Hmm, that's true.
Due to the way multiple inheritance is implemented in Ring.js (by composing a mro) it's completely impossible to allow monkey patching of classes using that syntax anyway. That's because, whether I create a chain of prototypes or not, prototypes are never re-used between classes (or we wouldn't have a mro). I could create a prototype chain and allow monkey patching (although using a different syntax, by calling a function). But I don't like the idea of monkey patching anyway. I don't think it's a reliable way to create applications. If there is enough demand I could implement it in Ring.js but that's not my idea right now. Anyway, that's not the only thing that makes Ring.js fast. If you take a look at dejavu it has the same syntax than Ring.js and is only a little bit slower, which means probably faster than your lib (if you modified that we would know): http://jsperf.com/oop-benchmark/140 .
Yes, I know when using a syntax a la JSFace it's faster, but that test was designed to compare class systems that prodide `this.$super` (it's clearly indicated in the description and the faq give an explanation about how it compares to all class systems). If you want to compare your lib to all class systems, you should put it here: http://jsperf.com/oop-benchmark/140 .
Oh please don't use it as an example... It's JavaScript having an identity crisis over whether or not it is C.
I hope you realize just how utterly subjective all of those opinions really are. I'm not going to rebut your points because they've all been argued over excessively here on this sub, but at least your [follow-up reply](http://www.reddit.com/r/javascript/comments/1ijue1/jtypes_211_think_the_jtypes_syntax_is_ugly_not_a/cb5uk01) contained substantiative arguments minus most of the emotional hostility that your original comment had. Regardless, say what you will about JS (it's my favorite language), but if it was so perfect and easy to grok, then we wouldn't have sites like [altjs.org](http://altjs.org/). But it's not perfect and easy, it is what it is...
1 - no it doesn't, but putting it in a function means that you can run it more than once by calling that function again. 2 - you should put the code where it should run, though you need the array to be setup and declared to push to it 3 - In javascript arrays are also objects. By using a string you've actually put those numbers as properties on the object. Usually with an array you just want to use numbers, because it's these that you want to go through. So it should be: product_prices[1]=4899; product_prices[2]=3899; product_prices[3]=3599; ... or you could use "push" which essentially just adds it on to the end like so: product_prices.push(4899); product_prices.push(3899); product_prices.push(3599); in your example though just do: product_prices["product11"] = myValue but as I said it's best to use numbers. Also push is better because you want to add it to the end and you might have more that 10 items if your run more than once. I'd suggest learning a bit more about JavaScript first though before continuing to learn how to properly use arrays and objects: http://www.codecademy.com/tracks/javascript
this should really go under the css subreddit. you have to set position:absolute for your controls, otherwise you're moving it right:0 from it's current (relative) position. i.e. #leftControl, #rightControl { position: absolute; }
I find it ironic that you do not list a license for this project.
I don't say it's perfect in every aspect. There are lots of ugly parts in JS (like in any other languages). But there is a prototypal object model and a closure. That's all we need and that's how JS should be written. It's nice and easy and I don't see any reason to use libraries like this. Of course, you can develop in something like TypeScript. But when I want then to write the same project in pure JS, I want object definitions to be written properly. I don't want C# classes with absurd protection levels.
&gt; //create functions as vars instead of //run-time function definitions &gt; var hideIt = function($elem){ $elem.hide(); } I'm not sure what you're calling "run-time function definitions". All function definitions in JavaScript are technically defined "at run-time". Also there is no difference between: `var x = function (){};` and `function x() {}`, they will both result in a variable x containing a function object.
Thanks!
No problem.
Note that pluto has an orbit which is not quite a circle, it actually goes closer than Neptune for a while. You can try to do this with ellipses. 
tl;dr: test private functions by not making them private and exposing them on the object under a namespace that makes it obvious they're meant to be private (you can remove this namespace in a build step later).
You shouldn't ever be testing private methods. You only test the public interface. The implementation details of a class should be free to change at any time. As long as the interface does what it's supposed to do, your code is fully tested (assuming your test coverage is comprehensive).
The author also covered why he tests private functions: http://philipwalton.com/articles/why-i-test-private-functions-in-javascript/
I'm actually working on a socket.io based lobby with mongodb user login to facilitate host/client key/value exchanged webrtc based sessions, sounds to me this is almost exactly what you're looking for. Maybe have a look at mdn for the webrtc stuff, the mongodb + socket.io (and express / knockout.js (I don't care for jade/ejs)) is all detailed with a simple google search. But the basic idea is user data is stored in the db, shared by express, realtime is done server side with socket.io, include a singular connection to each host *and* client instance of the webrtc infrastructure. And then each host webrtc instance can have multiple (non-server based) webrtc clients connected. The lobby is set up because obviously webrtc requires a key/value exchange, and there's no easy way to trade those without this. As you know, webrtc enables realtime, minimal lag, communication between browsers, much faster than socket.io. Hope this helped, it's what I'm working on, and it's fun as hell.
i replied to another person here, take a look!
We are using resourceful and maybe a few other pieces of flatiron. I say just read the documentation first, the resourceful documentation terribly short. I've had specific issues with validation in flatiron, and i'm not sure if the behavior is intended or not because of lack of documentation. That being said it's not awesome but also not the worst library in my stack. 
Thank you very much. You are a gentleman and a scholar. I will start learning JS from the ground-up very soon, I have ordered two books, and I cannot wait to get started. :3 
Cached copy: http://webcache.googleusercontent.com/search?q=cache:http://ryanflorence.com/2013/es6-modules-and-browser-app-delivery/
thought this was working, but scratch that lol function trigger(){ return 'yes'; } function display(){ var x = trigger(); var r = ''; if(x == 'yes'){ r = '.setRefresh(2)'; } return r; }
https://github.com/dominictarr/scuttlebutt ?
https://npmjs.org/search?q=p2p https://npmjs.org/search?q=peer+data etc. 
Thanks for noticing, that was a typo, this was meant to say "parse-time definitions"
and for something that works better with large amounts of data or a long history log (but probably less appropriate for small numbers of updates) see also: https://github.com/dominictarr/level-merkle
This? http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html
http://www.jsfuck.com/
I thought the article was good (especially just the simple act of explaining yeoman's webapp directory layout) *but* it might have been better as part of a series that begins with grunt, moves to bower then introduces yeoman. I tried yeoman sometime back and had a difficult time with it. I decided to just learn the tools that it uses and now I understand yeoman.
With so many client side templating engines supporting JSON class mapping out of the box, honestly it's just a little easier to just use one of those.
Doesn't this belong in [r/shittyprogramming](http://www.reddit.com/r/shittyprogramming)?
Can you give some examples?
What framework did you use? I'm talking about the framework using the namespace "_"
Sorry, should have mentioned, that's [underscore](http://underscorejs.org/).
I have to agree. I've worked with operational transformation and peer-to-peer systems before, but I don't think this is the place for it. Distributed data synchronization is a much harder problem than adding a message queue (which seems to be what you want for your problem).
Good one! 
I do agree to that the simplest way to solve my problem is just to use Redis, though that wouldn't be any fun :) Redis is a distributed networked database in memory. Wouldn't node be the perfect platform for a "JS Redis"? 
Looks nice. This is actually an instantiation of an even more general pattern called a [Visitor](http://en.wikipedia.org/wiki/Visitor_pattern). What are you planning to do with this? Right now it's kind of hard to add behavior to the nodes (ugly instanceof if's).
I'd like multiple authentication servers, which means, I'd like all session data to be persisted to all other nodes *and* I'd like to be 100% certain that it's been persisted. They need to be peers, so any may drop, all have equal control over the data. Not really suitable for just a message queue...
I'm just using it in an app I'm writing. It's a photo manager, Portfolios have Sections, which have Photos, which all gets saved and loaded as JSON. What do you mean about "ugly instanceof if's"? That bit is just so you can instantiate the classes without new, so parent = new Parent(); parent = Parent(); do the same thing. That doesn't affect adding behavior at all, I'll still do that with prototype like normal. Parent.prototype.sayName = function () { alert(this.name); }
Thanks :) will look into it
First thing I did :)
WebRTC looks really awesome and thanks for the comment. Though in my case, I'm purely interested in server-server communication, I most likely will find a use case for replicating data out to browser and WebRTC is a great fit, however, in the corporate world we still need to support IE8 etc. etc. :(
Actually, I believe this program was posted there at one point. Though this question might be too serious.
Yes that's it thanks!
https://github.com/dominictarr/crdt, built on top of scuttlebutt, has strong eventual consistency http://hal.inria.fr/docs/00/60/93/99/PDF/RR-7687.pdf
Should be: _.defaults(this, data, { You can use stuff like jslint / jshint to validate your code directly in your editor, eg. use Sublime Text 2/3 or Nodepad ++ 
Why do you want your Child objects to be "typed"? What's wrong with just working with a raw JSON structure?
I am really curious to see the direction Node.js takes with the advent of ES6 modules.
It looks nice, the one thing I might recommend is move it to a Factory pattern. The idea is instead of doing the mapping inside the construct of your parent class, do all of it in a desperate function that stores the results into the Parent class. That way you don't have that logic mudding up the Parent class, which should then really only include functions to modify/return data. When I get back to a computer I'll edit with an example. EDIT: Here is an example of what I was talking about, it isn't greatly formatted; but it should get the idea across. It also has the benefit of forcing you to keep all of your data format in a single function (so you aren't hunting through a bunch of functions if your rename an attribute, or something). http://codepen.io/anon/pen/eCDiG
Cool, yep crdt is closer to what I'd like. I posted the following question to dominic as I still have a few more requirements, though maybe you can shed some light: "Also, I forgot to ask, with scuttlebutt, it seems like the single point of failure is the server? Like clients can go down and reconnect and that's fine, though what if the server dies? Should I use it with client and server at both ends? Finally, how do I ensure that data has been replicated (on at least one node)? Basically I'm trying to keep http://en.wikipedia.org/wiki/Fallacies_of_Distributed_Computing in mind" 
I was wondering the same thing, but I guess you could have some methods on Child's prototype that you want to make use of.
Reminds me of this: http://primaryobjects.com/CMS/Article150.aspx
Hey, there's another guy working with trees. Check out [dsjs](https://github.com/monmohan/dsjs). Perhaps there would be some room for collaboration?
There's logic on the Child objects I need. I'm also implementing .toJSON on them, because there are some properties on them that can't be persisted. Dealing with that from the Parent class gets messy very quickly. *edit: implementing toJSON, not fromJSON
Heh balls, thanks. Yeah, I usually have JSHint running in vim, I just threw this together on my netbook, which doesn't quite have everything set up on it yet.
That pen doesn't actually work, but I get the idea :-) I think I prefer dealing with a little bit of messiness in the constructor. With the factory, I have to both write the factory method, and remember to call it instead of the constructor when I want to initialize an object from JSON. I'll keep it in mind in case I run into any pain points doing it all in the constructor, though, so thanks.
Wow... this is a really good way to fuck with people in case you want to keep your code secret. I wonder if it can actually be ported into running Jquery and other plugins.... *Actually I'm thinking in case you want to use some kind of client-side authentication, this might also work up to some extent.
very nicely done, love it
All of that might matter if this was going represent an arbitrarily nested tree, but it's not. It's also orthogonal to instantiating the objects from JSON, unless I'm misunderstanding you.
If browser can understand code, it can be retrieved.
Mm I think I mistook this post for something it's not so let's just keep it at that. I'll reiterate.. the code looks fine.
Fair enough. I don't think I explained the problem very well in the first place, that's my mistake. 
gossip and crdt are p2p, not client / server. crdt is designed to solve the [cap theorem](http://en.wikipedia.org/wiki/CAP_theorem), tolerating network partitions &gt; how do I ensure that data has been replicated (on at least one node) you can check the timestamps of the data, and the last successful gossip. nodes will gossip forever, eventually becoming consistent
That's why I said up to some extent. An amateur might not know to look at the request/response. If you just read the js, it looks very hard to crack.
I feel sorry for the future-you, when he/she has to do some debugging
Meh..I've learnt everything on the run really. I've been doing many thing in js for half a year now, and just last month discovered you can **input** commands into the console.... thought it was just output. It blew my mind. If you can give me some tips I'd be grateful. 
Why? Not that I have any problem doing that. Its just that the response to the site has been pretty lukewarm and I am not sure if putting it on github would be 'worth' the effort..
I think the reaction has been lukewarm because if we want to search SO, SO has a search box. I'm more interested in seeing how you put it all together than using a SO search proxy. I certainly mean no offense and hope you take that in the spirit I offer it. I would however be interested in seeing the code and learning a bit. I'm digging into Node a lot recently and I enjoy looking at other people's work. So the reason I guess would be curiosity. And if you're somewhere on the "still learning this" spectrum, you might gain some useful feedback from some old pro that lurks around here.
I'm a bit unsure about ES6 modules on Node.js side. The definition is missing one crucial thing: a way to export function as the module root (ie. module.exports = function). That pattern is quite commonly used and things might get a bit hard without it. Hopefully they'll find some way around that or change the specification somehow. It would be just awesome to be able to use the same system both at frontend and backend side. I guess browserify is a good bet at the moment.
Assuming the array values are already represented as numbers you could do something like: var sum, sumString; for(x=0; x &lt; array.length; x++) { sum += array[x]; } sumString = sum + ""; If they're strings you'll have to use parseInt() first.
Which I might as well write as well: var sum, sumString; for(x=0; x &lt; array.length; x++) { sum += parseInt(array[x]); } sumString = sum + "";
I actually solved it by doing this: string+=(array[x]*1);
Thanks for the feedback, let me know if you have any ideas on other topics to cover :)
Racer.js, Scuttlebutt, crdt, level-merkle, etc.
Racer.js seems like another socket.io WebSockets module targeting the browser. I'm looking for server-server. Discussing scuttlebutt and crdt above. And level-merkle looks promising, it's next on the research list.
the jsperfs just give 404
This is as completely free service provided as an alternative to WebSequenceDiagrams.com. The code is entirely Javascript, HTML, and CSS and includes a download button. In the very near future there will be a PNG download method as well as the current SVG method. I threw this together in a couple of hours because I wanted something free that didn't include a watermark or require lots of money for a corporation (or individuals) to use. The coloring may change eventually (it's raw and kind of ugly), and more features will be added soon. If you have any suggestions, please feel free to let me know. A ton of credit goes to bramp. Please visit his [github project](https://github.com/bramp/js-sequence-diagrams). Features: - Text input is saved in localStorage for retrieval if the site is refreshed or the tab is closed. - File names are saved as well. - SVG download of generated image. - Confirmation upon hitting "New". Text and filename are cleared but theme is maintained. - Simple interface. - Similar text format as websequencediagrams.com
Whenever this question comes up, I suggest reading about [Call by Sharing](https://en.wikipedia.org/wiki/Call_by_sharing#Call_by_sharing), a term that describes JavaScript, Python, Ruby, and practically every other modern language.
You can get the same results using CoffeeScript as well, though you'd wan't to use thin arrow .data(d -&gt; d) .attr('title', d -&gt; d.value) .text(d -&gt; d.toFixed()) 
When I started writing that article, I was going to advocate `call-by-sharing` but as I thought about it I realized that `call-by-sharing` is semantically indistinguishable from `call-by-value`. Under the definition for `call-by-sharing` even functions in C could be considered to be call-by-sharing `heap-objects`. The confusion seems to stem from some strange need to label `references` in garbage collected languages as something completely distinct from `pointers` in traditional languages like C even though pointers are simply *unsafe* and *unmovable* references. Throwing that pretty meaningless label aside, you are left with only a few choices: `by-reference`, `by-value` and `by-name`. By-name can be discounted immediately because it doesn't match the semantics of the language one bit. So the traditional argument has always been between `by-reference` and `by-value`. Anyway, this post was written as a response to a twitter conversation that began as an argument in ##javascript on Freenode. https://twitter.com/ImBcmDth/status/358267080694431745 
It's call-by-value, but the values are references.
Exactly. :)
I've got one with movable pieces and shizz that I've been playing around with. If you'd like to peep the code at any point/borrow anything pm me and I'll point you toward it (I don't really plan to do much more with it).
I agree, it IS `call-by-value`. It is definitely not ALGOL's `call-by-name`, a fascinating concept but absent in most modern languages.
Reminds me a little bit of this gem: [WebGL Water](http://madebyevan.com/webgl-water/)
It’s a good way to reduce the indentation of your code.
This is nice for Regular Expressions Lite, but lacks the ability to do complex Regular Expressions. Once this library approaches the same functionality as RegExes then it'll be so verbose that it is nearly as difficult to read as the thing it's replacing.
Thanks for sharing. Just taking a few minutes to look at the readme.md, I don't yet understand why I'd use this. It says it will insert a debugger expression, what advantage is there to using this plugin instead of just typing debugger into the code? For conditional breakpoints, I could just wrap it in an if. 
Thanks for the feedback. I prefer the use of continue in this example, especially when iterating over object properties. I also prefer explicit type checking instead of truthy / falsy. But it's definitely just a preference thing and neither solution is more correct than the other. The code conforms to Google's Closure Linter 100%, imo it's pretty clean JavaScript.
One of the most important things any developer needs to learn is regular expressions. I feel like this is only going to hinder people rather than help them. Great job putting something like this together, I'm sure you learned a lot. 
That's exactly what the plugin does, but there are a few advantages to using the plugin: * Adding the debugger statement is done in 2 clicks or with a keyboard shortcut rather than typing it out (not a big deal really, but worth noting) * Debugger statements are marked in the gutter with a dot like a breakpoint in an IDE * Breakpoints can be enabled/disabled individually or all with one command * All breakpoints can be removed with one command It really isn't a ton better than just typing it yourself, but it does have a few advantages. Personally, I found adding and removing breakpoints to be tedious, so this gave me a way to quickly add them and disable or remove them all at once when I have finished my debugging. [edit] one other thing. When a js file is loaded, it will look through it for debugger statements and mark them all as breakpoints, so even if you are entering them by hand, you can use this plugin to disable/remove them all at once. I suppose it's more about cleaning up a debug session than it is about creating one.
So it's not for 'playing', it's just for displaying boards?
Thanks for sharing, I'll try it out. 
Thanks for the explanation. The friction I have with debugger is that lint tools reject it, so I was looking for a solution to that. I end up with second lint configuration used when running tests, which isn't so bad. 
Thanks :) It's very similar in spirit to another project of mine: http://autocompletejs.com I have an [issue](https://github.com/oakmac/chessboardjs/issues/18) to separate the website code from the project code so that other projects can easily do a similar integration. I could write a whole essay on this, but I have strong opinions on docs and examples for software components (widgets, classes, APIs, etc). In general, I think the global software community does a poor job with this (with notable exceptions) and that we perennially underestimate it's importance.
That is correct; this is just a "board" component. I think the board is complex and distinct enough that it should be separate from the notion of actively playing, navigating a game (ie: from PGN data), or a chess logic engine. My goal was to provide a flexible-enough [API](http://chessboardjs.com/docs#methods) for someone else to build those components on top of ChessBoard. [edit] A component like this already exists and makes an excellent companion to ChessBoard: https://github.com/jhlywa/chess.js
Careful, course progress may or may not be saved.
for example, here are some audio demos based on modules from NPM: http://requirebin.com/?gist=6050220 + http://requirebin.com/?gist=6049983
This would be very cool! Would this work on coffeescript? Or if not, would it still work on JS code that undergoes processing? (Like concatenating before serving)
If v8 is grabbing enough memory in one inline allocation it could be crossing a page and causing page faults. Any other language this is pretty common to see large slowdowns when you go beyond a certain amount of memory at a certain point due to cache lookup tables in the processor only being a fixed size. Try breaking up the array into two if you can. Maybe, see if you can use the new array types and try keeping the value pinned to your domain. I hear they're pretty fast. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays https://en.wikipedia.org/wiki/Page_fault 
I think if you just ask the users for their username and password with prompt, some of them will type it what you can save it for yourself...
Or turn over the keyboard or open the nearest drawer and read the username and password off the nearest sticky note - it is a school after all.
Make a call to this on document load it will be fun http://kickassapp.com/ 
That's true. I'm just not sure it's good for production code. As an online tool, it would be great. You plug in this formula and it spits out the corresponding regex - that would be useful. 
Honest question: What constitutes a syntax error in MD?
I love it
i like this from the perspective that they are more compose-able than pure regular expressions. i'd probably still write the regex myself though =) 
Might I suggest you practice doing this in JavaScript? Especially if you do it entirely async that would be a good intro to node.
If anyone is still curious, I took a closer look at the library. The article can be found here: http://www.reddit.com/r/webdev/comments/1itmw8/dom_traversal_and_manipulation_with_voyeur/ I look at the syntax and whether you'd want to replace jQuery with this for DOM traversal and manipulation.
Try using component(1). I love it for modular js. http://component.io/component/component
Apparently the difference is in the behavior of assignment. Here assigning a new value to a variable will only touch the local variable. While under call by reference, it would change the original variable's value too. mutation still acts on the original object though.
No working on iPad. It doesn't exist!
This is awesome! I have nightmares about processing PDFs. Interested to see any further developments.
My second post about using Node to make command line utilities
One suggestion: in Python it's better to [use os.path.join](http://docs.python.org/2/library/os.path.html#os.path.join) instead of hard-coding a "/".
Oh in case it isn't clear, you're supposed to type in a number into the form and it will return an nxn board of that size. Currently if you "die" you need to reload the page. 
I like it. Are you going to throw this on github?
The title is slightly misleading since you can only actually win a maximum of 3 BTC.
Great list, thanks. I was not aware of fabric.js until now. Looks like the well-rounded and backward compatible library I've been looking for.
you can just hold down both keys
Yeah! I got more tips to start using GitHub. So i'm thinking about creating one this week!
It's kewl, once you get to the level of oracle where the legacy systems are stuck with the DB at big companies then 10gen can just earn money through certificates program. But for now they need the adoption rate and wait until it gets to the point where this happen. Cisco and Oracle seems to be making bank on certifications. Yes I'm cynical. 
Now write the unit tests. ;)
Private? You keep using this word, but I don't think it means what you think it means. 
It's pretty universally used for functions closed within a module.
Super cool! There is an issue with using o with vimium (brings up a search bar) I'm not sure if there's a way to disable it from your end but it's a pretty small corner case so overall great job!
yes it has a module called fs for this
Not necessarily. someAjaxThing(function() { // This callback is an anonymous function }); Anonymous functions are merely unnamed functions.
Or: function doIt() { var theThingToDoLater = function() { // This function is "private" outside doIt(), but has a name }; }
This article contains ~2,249 words. Why should I read it?
And it's still anonymous. It's assigned to a variable, but the function itself is not named - the call stack will show it as an anonymous function, still. If you wanted a non-anonymous "private" function: function doIt() { var theThingToDoLater = function theThingToDoLater() { // private, is assigned to a variable name - but also has a function name }; } 
&gt; Too many ways to define or require a module Then use just one. I prefer define(function(require){ var $ = require('jquery'); return { init: function(){ this.$body = $('body'); } } }); &gt; Pointless asynchronous loading That's the way require.js works. If you are a web developer, it's a known fact to compile your js into one file at build time. I can't imagine anyone releasing require.js code to production that doesn't use r.js. &gt;r.js has yet more inscrutable configuration options. (50+ options for essentially a thin layer of asset management code on top of the minifiers, many options are duplicates of require.config) You don't need to duplicate the options specified in your require-config.js for your r.js config. Use the mainConfigFile option to specifiy the path to your require-config file and it will use those options as params. &gt; r.js doesn’t compile require.js into the output bundle What do you mean by output bundle? r.js simply figures out your entry app file and compiles the scripts into one file in the order they are required. If you need to do more complex builds, then use Grunt to script your deployment process. &gt; but I’m too lazy to list them all here I wish more developers would stop spreading FUD about AMD and require.js when they have not spent enough time with it to make a balanced opinion. All it takes is a nice looking blog like this one to make people trust in the author and immediately dismiss require.js before giving it a chance. 
Unit testing is for testing the public API of module. If you find that you need to be testing its private methods, you're doing it wrong.
Neither jquery/underscore really got readily available options in bare js, regex has. And of course you look at a cheat sheets. I look at cheat sheets for everything, normal C# formatting, nhibernate mappings, sql, who in their right mind could possibly rememeber so much arcana anyway. 
http://gruntjs.com/ Concatenating + JSLint + uglify + Testing + much more
Cool - It demonstrates many of the points. How about an example of using requirejs to pull in a module synchronously you've already loaded like so: var moduleValue = require('loadedModule'); 
I read the readme. Why not just watch and rsync over ssh? 
...for example. There are many pre-existing ways to skin this cat in unix land. Do you really have that much easier of a time writing code than reading about system tools? I am not trying to be snarky, I am honestly curious, I see this behavior a lot in the "younger" generation and it completely confuses me.
With this method I have full control over what files are uploaded to server. I can plug features into this process, for example I can compile SASS. LESS. CoffeeScript files before uploading. Also the project I'm using this tool on, has thousands of files in it. It's a very large project and when I run rsync on it it just takes too much CPU to calculate all changed files. And since there is no way to keep rsync open, I have to run rsync in an interval of 2 seconds to get all changes. You know what it does to your computer when your project is huge? I tried many approaches such as inotify, fswatch, rsync, they all killed the CPU on my huge file structure. Best thing I found was the combination of `find+scp` and it works really well. If you look in details you'll see that rsync also uses `scp`. Finally, this is not a replacement for rsync, it's maybe a replacement for SFTP mirroring tools but not rsync. 
Is that text for ants?
also, might want to add pixi js to the list.
...that's amazing
Appears to be missing goo.js http://www.storminthecastle.com/projects/goo.js/
I haven't really explored synchronous module loading (though it looks simple enough). I load everything asynchronously during development and package it all up with r.js (the 'require.js optimizer') into one file for production.
I've been wanting to check out browserify myself. Is it hard to debug the file it spits out?
http://stewd.io/pong/
Hi Thanks for replying. 1. Again just stick to that one method and really there aren't more than 3: (define with require as a param, define with array of dependencies as a param, no define, but require) 2. But that is the way that require.js works. The goal is to only ever include 1 script tag in your HTML so you never have to manage the order dependency of your JS. With that comes the fact that require.js needs to fetch these files on demand since they are not listed as initial includes. The benefit is you never have to manage your HTML include list and at compile time you don't need to specify the order of your includes as well...it does "just work" 3. The configuration is a common complaint, but if you are encountering unknown errors, set the logLevel to something other than 0 so it will report what's wrong at optimization time. See complete list of configs with good descriptions here: https://github.com/jrburke/r.js/blob/master/build/example.build.js 4. Yes it depends on requireJS and yes you have to specify it to include it, but this makes it extensible in the case you might want to load requireJS by CDN instead of bundling it. You can also use almond.js (smaller subset of require.js) if you don't need to load anything dynamically and are just loading a single file. 5. It's very easy to add a shim definition for any non amd package. For backbone.js you simply do the following in your require config definition: shim: { underscore: { exports: '_' }, backbone: { deps: ['jquery', 'underscore'], exports: 'Backbone' } } If you don't want to do this then you can usually find an AMD version for most popular packages. Use bower to find and install them without hunting down github. 
The most basic reason, it saves memory. If you use the prototype only 1 instance of the attack function is made as opposed to 1 for each instance. I would say there is no benefit for singletons or objects with only a few instances (mind you they still have different characteristics). I'm more fond of the module design pattern personally. `function Player(name, hitpoints) { return { name: name; hitpoints: hitpoints; attack: function attack(opponent) { opponent.hitpoints -= 10; alert(opponent.name + " has " + opponent.hitpoints + " hitpoints left"); } }` 
Both are acceptable, but the prototype method is better. The prototype method only stores one copy of the function in memory, so it will perform better if you're creating a large number of instances of that object type. It also allows you to add or modify methods and properties of all objects of that type after they have been created, without iterating over every instance. 
The benefit that you are missing is that in the prototype example, the function is only created once (on the prototype), while on the second example, *every instance* created from the `Player` constructor will have a *unique copy* of the same function. The most obvious benefit is that the js interpreter spends less time initializing function objects, since it simply delegates calls to a player object's `attack` method to the existing `Player.prototype.attack` method. This also means that you are creating fewer function objects, which means using up less memory and generating less garbage, which means potential performance gains. The other nice thing that you may not have thought of is that using the prototype allows you to bind methods and properties to all objects created by the same constructor *even after those objects have been created*. Now, there probably aren't a *ton* of scenarios in which you'd want to do this, but for example, you could easily swap out the `attack` method of all player instances at the same time simply by assigning a new function to `Player.prototype.attack`.
Stackoverflow answer for a bit more. http://stackoverflow.com/questions/7160310/javascript-prototype-explanation-needed To give you an idea of the memory improvement: http://stackoverflow.com/questions/3493252/javascript-prototype-operator-performance-saves-memory-but-is-it-faster Another reason is you want to change the behavior of many objects that all share the same prototype. But performance is a big one.
I'm experimenting with the idea of doing a Music Backend As A Service for web audio/mobile audio app developers. The idea would be to make it so developer would only have to worry about building the client side code (the fun part!) and leave the backend headaches to us. It took us months at Soundkeep to figure out how to handle all of the processing, streaming, transcoding, and waveform generation. Hopefully this will be helpful to others. You can see a demo app using it at http://synth.soundkeep.com
You shouldn't ever need to test private methods. If you find yourself needing to do so, you should reevaluate your (deficient) design. Classes should essentially be "black boxes", in that the consumers of them -- including your tests --only care that the inputs produce the expected outputs. *How* these outputs are generated is implementation, and implementation should be free to change at any time without breaking anything (including tests). If I decide that myPrivateMethod() is doing too much and needs to be split into two separate methods, guess what happens to my tests that directly referenced it? Testing anything but public interfaces is bad practice, and 100% of the time I've ever seen someone try to justify it, it was due to badly designed code.
This is interesting but it's a complex hack with no obvious benefits.
This looks really fun, now I've got to think up a project to use it with!
Brand new class that takes a simple HTML/JS game and posts it to both the Google Play and iOS App Stores in under 60 minutes using Phonegap Build. Here is a direct link to get the class for free: https://www.udemy.com/your-first-android-and-iphone-app-in-60-minutes/?couponCode=REDDIT Appreciate any feedback and insight you might have - class is intended to be for an audience that has never used Phonegap before.
this is very nice of you to give out knowlege for free. now lets argue why do i have to limit my app to ios-only devices if i can have it for pretty much every single platform in the world just by keeping it as a webapp.
Old IE (IE7 and lower) has some really gnarly bugs with NFEs (named function expressions). It will hoist the named function expression and make it available outside, as if it were a function declaration. There are also equality problems. (function() { var fn = function fn2() { console.log(fn == f2); // false }; console.log(typeof fn2); // function }()); Just using a function declaration is much safer: function doIt() { function theThingToDoLater() { // "private" } }
I think it ultimately depends on what your goals are. If your goal is accessibility and ease of development, you should totally stick to keeping it a web-app. However, my goals were to set up a cash flow business without spending a large amount of time - that would have been impossible for me to do without the app stores serving as a point of sale and application discovery.
Thank you! :)
My (yet another) approach to explain prototypes http://trickkr.com/item/68/oop-done-right also a few other highlights on Object Oriented Programming in javascript. Let me know if it helps and is it understandable.
You should mind your capitals. Prototypes are a fundamental part of JavaScript, but there is also a JavaScript framework with the unfortunate name of **Prototype**. Just an FYI, lest anyone was confused.
Prototype wasn't an unfortunate name, it was an accurate description of what they were doing -- rewriting/adding methods to the prototypes of natives JS/DOM objects, so you could more easily mix javascript/prototype specific code. 
I am porting [my game](http://qbqbqb.rezoner.net/) to every possible platform. As a programmer I suffer tremendous pain - not only that I have to waste time focusing on porting instead of gameplay - but also my idealistic morality feels embarrassed - well... money.
Thanks, added. Looks pretty minimal (comparing to full-featured libs like Kinetic, Fabric, Paper, Easel).
Thanks, added. Pixi looks good. Good parts: WebGL renderer (just like in two.js), docs, forum. Not so good: no unit tests, no IE&lt;9 support Speaking of WebGL renderer, I also added a column and listed which libs have it and which don't.
Choosing hyper generic, already established names is always a bad idea. See also *golang*. And touching native objects, also horrible. Otherwise you will have competing frameworks. Which is God's One True Array extension framework?
"Type" meaning any object whose prototype property ('\_\_proto\_\_' in some implementations) points to the prototype object you're modifying. So not really "type."
cool, thanks for building this. I was thinking of doing something similar myself. I mainly have been using [this one](http://www.cyber-reality.com/regexy.html). Just a request if possible: Shrink the space used to input your test data and move the quick reference guide under it or next to it (basically like in the link I posted above). That way you don't have to continually go hover over it while figuring out your regex. I use these tools for testing and I never have tons of data to copy/paste into the test data area. I just need enough representative data to make sure my regex works properly. [This one is good as well](http://gskinner.com/RegExr/)
I didn't build it myself, though upon speculation, it seems rather easy to do. I simply found the link for it while looking up regex for a project and figured it was rather useful.
oh, oops! sorry about that. Thought it was yours. Thanks for posting, I like testing out my regex on different online tools just in case so it's good to have another one to try out.
Well this game is really browser based - so it could run on any system without porting - and this is where my frustration comes from - I package it into an app because nobody would pay for a game accessed by browser. (also, I am 24/7 linux user, cheers :)
Here's the one my work built a while back. seem to have a couple more features so I figured I'd share it. http://gskinner.com/RegExr/ One downside is that it's not using the Javascript regEx engine which seems to behave slightly differently for look ahead/behinds.
Look at these javascript libraries.. 1. D3 -nvd3 charting lib for D3 if you don't wanna start from scratch 2. Raphael 3. Processing.js 
What effort? I assume you already have the project under version control. It's just a matter of signing in, creating a repo, adding the remote origin, and pushing it out. It takes 5 minutes. I think it's an interesting project and I'd like to see how you went about it.
Really nice post. I'm learning JS and OOP so it was helpful. I didn't understand everything, but this is the first I've heard of prototype.
Sublime Text will handle this as well by doing a real-time search as you adjust your regex.
Yeah, sorry for using the term loosely. I'm never really sure what the correct term is for a set of JS objects created by the same constructor, given that neither "type" nor "class" are technically correct.
I signed up for it, I was actually looking into phonegap, so you posted at the right time! The intro doesn't inspire much confidence. "What's up, party people" as an opening line to the class is just cringeworthy. Then "I'm fucking stoked" hurts the professionalism even more. The next issue is the quality of the bible app. The bible app was a good idea - you found a market which let you make a small sum of money with a very small investment. However, the app isn't very well designed - it has a horrible colour scheme, and doesn't match any UI interface guidelines for iOS or android. My, and possibly a lot of other people's greatest fear in using html for an app instead of going native is the issue that the app won't look good on the device, and your sample app doesn't help with this. The other issue is your app doesn't use any more complex functionality such as notifications or the camera. That is the other main fear I have with using phonegap - I won't be able to do everything I need. Finally, I checked the source code. It is terribly formatted - you have a strange mix of tabs and spaces which makes the code look wrong unless you have tab sized set to 4. A lot of it is also terribly designed. Your method of resizing content is completely unnecessary - you can easily do that in css. You have huge chunks of html embedded in your javascript. Your database related code is scattered across the app, instead of just putting it in a couple of functions. Finally, the quizContents.js file would have been better as just json. That would have saved you from having to number all the quiz questions (up to 439!), and be more editable in the future. Eg if you decide to remove a question in the future, you will have to either fix up all the remaining numbers, or add a question to replace the delete question. Also, with that many questions, even if you wrote a question a minute, it would still take 7 and a half hours to write than many questions. Unless you did very little error checking, it makes the idea this was a one day app a little questionable. I stopped viewing after that. The course definitely isn't at a state where anyone would pay for the course and not be disappointed. It would make a decent blog post, but that's about it. The thing to remember is the code quality needed for a demonstration is often higher than the quality needed for a real app, as you are using it to teach. The code and design for the bible app were adequate for a $1000 grossing game on the app stores, however they aren't nearly good enough for a $100 course. However, with a fair bit of work, you could have a useful course out of this - a quick intro to phonegap and publishing to the app store would be useful for a lot of people.
Not if you enable source mapping! You'll see all the original files in chromes "sources" tab with all the original code. 
Thank you - this is extremely useful and actionable feedback. As is evidently clear, I'm not a developer by trade - I leverage an elementary programming knowledge into building businesses and that would explain code quality issues. The purpose of this class is primarily designed around showing how anyone can build an application business with no more than an elementary knowledge of HTML versus "let me show you to how to use Phonegap to build beautiful apps". Regardless, I appreciate your reply - this is very useful and we will probably make significant changes to the material. (Btw - if you are interested in building applications as a business, you might still find the last lecture interesting. It doesn't deal with the Bible Quiz specifically - just ways to take this elementary HTML knowledge to create a sustainable app business.)
Personally I think AMD looks very ugly, I'd rather work with synchronous (commonjs/node) style requires and just have the builder watch the directory for changes and automatically recompile the bundles when necessary. Shame there's so much fragmentation with dependency managers though (look at UMD and you'll see what I mean!)
Totally. The way I conceptualize javascript is to think of it as a toy language where all the data structures are associative arrays (i.e. objects with properties and values), and everything that you would find in a normal language is mimicked using these associative arrays, so that "types" are "pseudo-types," "methods" are "pseudo-methods," and "arrays" are "pseudo-arrays." Nothing in javascript is as it seems.
+1 for regexpal
No, actually I read it and chimed in [the last time around](http://www.reddit.com/r/javascript/comments/1imyjk/how_to_unit_test_private_functions_in_javascript/), as well. The reason you ran into problems with your HTMLInspector project is because you aren't using dependency injection, plain and simple. It would be trivially easy for you to refactor your code to inject Listener and Reporter, and then your tests could mock them and isolate the logic that they needed to.
That should actually match the first two characters of the first sentence. You also have to escape the period since that's a wildcard: '\w\\\.' EDIT: Sorry, I forgot that reddit unescapes the period, looks like you probably already had it right 
Was about to link to this: I use this all the time and have it bookmarked next to jsfiddle and plunkr! Thanks! I also use the search &amp; replace part for transforming csvs to json, or remove quotes from every line or otherwise make the same change to every line of text etc. (not what it's meant for, but quicker and easier than any other tool I've used!)
Hey, I am the author of Iugo and you hit the nail on the head! Angular is really difficult to use when the scopes get out of hand and I think it's fairly bloated. Iugo is supposed to be the minimalist version :)
Wow -- I didn't realize Chrome's Dev tools allow you to save snippets now. That's going to be incredibly useful!
Both name and hitpoints are properties of the object, so they can be accessed from prototype methods using "this.name" and "this.hitpoints". If you use private variables (declared in the constructor using "var"), then they will not be accessible to prototype methods, so the method will need to be declared directly in the constructor, like OP's second example. I tend to avoid using private variables in javascript, but that is a matter of personal taste.
&gt; great for checking against live text. This one works even better in my opinion: http://gskinner.com/RegExr/
I don't have much experience with this issue, so this is just a guess. You could try initializing the scale() to something very very low (thus zooming way out) and then scale up your entire coordinate system to compensate. So instead of your orbiting body being a size of 10, make it 10,000 to counteract the lower scale. Now when you zoom in, your numbers aren't as deep into the decimals.
Could you pull the sticky column bar over the titles of the libraries? I see you have the sticky row thing pulled over the column headers already.
Also, something that might be better is avoiding scale() altogether and making some global scale variable (defaulting to 1) that is multiplied against anything dealing with your calculations. Now all you have to do it change the scale variable and everything will adjust.
I doubt you're running into underflow/overflow errors. You'd need to zoom in really, REALLY close to start getting those. What exactly do you mean by "chunky"? Do you mean that, rather than appearing to move smoothly, the orbiting body seems to jump from place to place? If you could post a jsfiddle it would be very helpful. **Edit**: [Example jsfiddle](http://jsfiddle.net/V8SFH/) -- what are you doing differently?
The minutes never progress. It just goes from 59 to 00 without changing anything. Also, it doesn't seem to use local time. 
Awesome. I've been using this snippet feature with our team for a while, and it's a real helper while developing. It's great to see a community snippet collection like this in the wild! i added a snippet for statistics on page load time via pull request: https://github.com/bgrins/devtools-snippets/pull/18
I have been using this recently [Web Tracing Framework](http://google.github.io/tracing-framework/)
Odd, considering it uses System.DateTime which is your local time, and I use it every night. Maybe it's a compatibility issue with certain OS's or web browsers. Mind if I ask which of them you're using? I use Chrome and Windows 7. Thanks for your feedback!
Can we make the assumption that your chunky lines are the same length as your distance value? Since you already have the two points (start/end), you could introduce a sort of LOD (Level of Detail) to the rendering so that when you "zoom in" the lines are redrawn using partial distances (you'd loop through the starting distance to the ending distance and run them through the (x,y) calculation again. Let's say your distance is 10. You could re-render the line in the viewport using a distance of 1 for the point of the arc in the viewport. This would require figuring out what part of the line you have in view and some other tricks. You could also clip your method to manually draw lines at a precision of 1 and set up a while loop to accept any distance and draw line segments until finished... but this would require knowing the before and after points to properly render the curve keeping the proper tangential alignment. That is, if I'm correct in the assumption that your "chunky" line is because of your distance. [Here is a fiddle](http://jsfiddle.net/FHKuf/4/) (not mine, just googled to find it) with some curves for you to play with and see if that's what you need. [Also more info](http://scaledinnovation.com/analytics/splines/aboutSplines.html)
Vaguely reminds me of microsoft htc files.
I don't seem to have the "snippets support" checkbox when I'm in the devtools -&gt; settings -&gt; experiments. However, the snippets tab is in my Sources section so I guess my version of Chrome has snippets automatically on when I enable the devtool experiments Chrome Version 28.0.1500.72 m, Windows 7
This is something I hacked together and deployed within the past few days and wanted to get ya'lls feedback on its concept, usefulness, or whether something like this already exists. Inspired in part by all the great /u/SubStack talks and his stream-handbook about nodejs streams. The cli is installable thru npm. I hope you might find it useful and thanks for your time.
Have you used bash before? Do you know about | (pipe)? git? Thanks, for explaining your thinking. It seems to me that using shell scripting and common gnu/unix tools, maybe git, would yield the same effect with about the same amount of effort and far better test coverage. Again thanks for the clear explanation.
Can someone briefly explain to a beginner what a "snippet" is, and what these snippets in particular help you do? I've used snippets with Sublime Text, are these similar? Thanks!
I've made it zoom on the mouse-scroll and went both ways in zooming so I'm not sure if that would help :)
I'm curious why this is in /r/javascript when it's clearly a unity app that runs in it's own plugin...
I'm just hearing of these now, but [this](https://developers.google.com/chrome-developer-tools/docs/authoring-development-workflow#snippets) looks like a good explanation. &gt; Sometimes you want to be able to save smaller scripts, bookmarklets and utilities so that you’ve always got them available to you while debugging in the browser. Snippets is a new DevTools feature enabling this workflow, allowing you to create, store and run JavaScript within the Sources tab.
I don't think they require defense, just understanding. Once you 'get it' they're really quite great.
I think this problem has more to do with how fast you are changing the angle. If you start with a radius of 1, let's just say 1px. Then your circumference is 2pi (px). Let's say there are 360 positions, each time it moves it moves 1 degree, or pi/180, so when you are zoomed, the object is moving ~pi/180 pixels each time. Now let's jump up to a radius of 100px: Now your circumference is 200pi (px). Again, 360 positions, so each time it moves it is going to move about ~5pi/9 pixels. Which is about 1.75 pixels each jump. Obviously as we get larger, maybe a radius of 1000px, now we're looking at 2000pi circumference, and 50pi/9 pixels. Which is about 17 pixels each jump. If you're keeping the same angle increment and changing the radius (you may be zooming, but it's essentially changing the radius) then the velocity of the object changes because it has a longer distance to go, in the same amount of time. The only way to do this would be to have some kind of framerate so that you could reduce the angle increment, but update its position more often so that its orbit would stay the same rate. Or, you could just decrease the angle increment as you zoom in, this however will change the rate of the object orbiting. Your best bet would probably be to update the position as quick as possible with the smallest increment you can deal with to help produce better results when the radius changes. 
Considering the articles and patterns that have been written to avoid using constructors altogether, by the likes of Douglas Crockford (author of Oreilly's Javascript: The Good Parts), it seems it does need some defense.
People who use bleeding-edge features of browsers need to rely on Modernizr in order to scale across the thousands of devices accessing the internet today. Instead of checking a user-agent string, which is a very poor indicator of browser capability, instead use JavaScript to directly test the presence or absence of a browser feature. A test is actually very simple. [Here's an example](https://github.com/Modernizr/Modernizr/blob/master/feature-detects/a/download.js) that tests the ```download``` attribute of anchor tags: return !window.externalHost &amp;&amp; 'download' in createElement('a'); This line of JavaScript does several things inside your web browser: 1. It creates an ```&lt;a&gt;``` tag 2. It checks for a ```download``` attribute inside a new ```&lt;a&gt;``` tag that exists outside the DOM 3. It returns a truthy value, meaning either true or false. This value is what you, the developer, rely on to determine if your webapp or website should rely on this browser feature. One more note about truthy values. Oftentimes you'll see two exclamation points (pronounced "bang") in front of a return value. It's negating a value twice, meaning that you can quickly and easily turn any value into TRUE or FALSE very quickly: (!!1 == true) // return true, meaning the two values match (!!1 == false) // return false, meaning the two values do not match (!!undefined == false) // return true, since the two values match (!!undefined == true) // return false, since !!undefined = false and true = true You can run any of these conditionals in your JavaScript console to experiment and become more familiar with feature testing. Hope this helps get you started!
It could well be unity3d with javascript which is a valid javascript runtime, just not common
Honestly, since we got `Object.create`, constructors have been near pointless. Factory functions can do everything constructors can and in a clearer, more flexible, and less error-prone way. There's no worrying about omitting new, no need to modify native `.prototype`s because constructors can't use `.apply`, no confusion over whether the result is what's returned by the function or not, and no need to use the bizarre and often troublesome semantic magic that is the `new` operator. He suggests that the flaw here is the lack of a unified API, but such an API is not necessary; we already have everything we need in the language itself. This: function Thingy(a, b) { this.instVar1 = a; this.instVar2 = b; } Thingy.prototype.addStuff = function() { return this.instVar1 + this.instVar2; }; is equivalent to this: var thingyProto = { addStuff : function() { return this.instVar1 + this.instVar2; } }; function makeThingy(a, b) { var inst = Object.create(thingyProto); inst.instVar1 = a; inst.instVar2 = b; return inst; } But the latter just uses normal JS functions and objects, along with Object.create. It naturally avoids all of the problems and pitfalls with constructors enumerated in his article while being conceptually simpler and more extensible. He also expresses the opinion that ES6 classes will magically unite all JavaScripters in the glory of sugary pseudo-classical inheritance. I find this hard to believe. They are a misleading, unnecessary solution that already has many enemies in the JS community. Just like `new`, they hide what's really going on in an attempt to make things smoother for those who believe that JS is like Java. And they fail to solve any existing problems, instead just making the language more complex. Furthermore, `Object.mixin` and `__proto__` are also coming and explicitly provide alternatives to classes, which doesn't match up with his idea that ES6 is trying to unify JS inheritance methods. As long as we have both a better solution in `Object.create` and people who continue to use constructors, ES6 classes will just cause more fragmentation in the inheritance landscape.
Worth noting I think that new ES6 built-ins (Map, Set, WeakMap, WeakSet) will throw when not called with new (unless you're subclassing and want to super).
It was developed using unity, and does require it's own plugin, but it was coded in javascript.
Additionally, engines optimize properties set in a constructor much better than using Object.create. When creating a constructor the engine can tell that you're creating one of a set of very similar objects. V8 calls this hidden classes, SpiderMonkey calls this shapes, structure in JSC. For performance, it's important that you signal as clearly as possible what you're doing. When you use Object.create the engine doesn't know what you're going to put on that object, so it is unable to optimize property access as well.
&gt;You now always need a pair of prototype and factory function (two things per “type”). Constructors generally work in the same way, by creating a function and then assigning to its .prototype, as shown in my example. &gt;Furthermore, creating a sub-factory via inheritance is impossible. Creating a subfactory that just inherits through its prototype chain is simple: var subThingyProto = Object.create(thingyProto); // Or Object.create(makeThingy()); subThingyProto.foo = ...; function makeSubThingy(...) { var inst = Object.create(subThingyProto); ... } I would argue that trying to inherit instance-specific construction as well, like `super` calls do in languages like Java, is using prototypical inheritance the wrong way, but once we get mutable `__proto__` standardized, it will be easy as well: function makeSubThingy(a, b, c, d) { var inst = makeThingy(a, b); inst.__proto__ = subThingyProto; inst.instVar3 = c; inst.instVar4 = d; return inst; } var subThingyProto = { __proto__ : thingyProto, addAllStuff : function() { return this.instVar1 + this.instVar2 + this.instVar3 + this.instVar4; } }; // This one doesn't need __proto__, just keeping consistent And even in ES5, that would be easy with [one helper function](http://j201.github.io/blog/2013/06/22/js-object-literal-inheritance/), but I wanted to stick to native stuff. &gt;`var thingyProto = {` &gt;`...` That approach doesn't work since new will only operate on functions, not plain objects, but I see your point and that it works with your library. But the fact of the matter is that JS works with prototypical delegation, not constructors nor classes in the classical sense. `Object.create` reflects this and provides a convenient and idiomatic way to have inheritance in JS. And factories are just extensions of this approach, adding behaviour through functions to `Object.create` when necessary. &gt;I believe most people who now use constructors will migrate to classes. Not until the browsers that don't support ES6 (especially IE6-10) are dead and gone. I suspect most people will prefer to avoid non-shimmable ES6 features rather than using a transpiler. Non-ES6 learning materials, established patterns and libraries, and coders who don't want the change will be further sources of fragmentation and inertia. And finally, I think it's pretty clear from what's being added in ES6 that they don't expect classes to be __the__ way of accomplishing inheritance in JS. But only time will tell.
&gt; I think it's pretty clear from what's being added in ES6 that they don't expect classes to be the way of accomplishing inheritance in JS. Given that classes are the only way to inherit from builtins and the only way to use **super**, I think you're wrong.
Good lord, thanks. I think I posted this a ways back.
My understanding is that classes are essentially sugar and that both of those can be accomplished using existing features and mutable `__proto__`. For example, class B extends A { constructor(foo, bar) { super(foo, bar); ... } } can be done using the factory approach as BProto = Object.create(AProto); function makeB(foo, bar) { var inst = makeA(foo, bar); inst.__proto__ = BProto; ... return inst; } And subclassing natives is done with `__proto__`: subArrayProto = { __proto__ : Array.prototype, evenElements : function() { return this.filter(function(el) { return el % 2 === 0; }); } }; function makeSubArray() { var inst = Array.apply(null, arguments); inst.__proto__ = subArrayProto; return inst; } var mySubArr = makeSubArray(); mySubArr[0] = 1; mySubArr[1] = 8; mySubArr[2] = 9; mySubArr[3] = 4; mySubArr.length; // 4 mySubArr.evenElements(); // 8,4 
I've never understood the argument about forgetting to use the "new" keyword when calling a constructor. Is it really that hard to remember the syntax, especially since it's how you call a constructor in a good number of other programming languages?
What does he know about your company. (to see if he has done his homework) What is the largest number of people he has managed. What is the best way to handle an interpersonal dispute. What kind of money does he expect to be paid. Does he enjoy his line of work.
Here's a doc describing the basic architecture: https://docs.google.com/a/rapt.fm/document/d/1EpiKZG7MTNgc4_ZLagiPaObfVqN9F6XHMpq7m9dzLhU/edit The system is more distributed than described in the doc (more servers used because some more well-known rappers visited us tonight). 
Sweet, thanks!
I have used dojo for one month in this one smaller company and I still get shivers when I remember the experience. I was extending dojo components like calendar and autocomplete input field. Now I work with angular and all those components I was implementing could be done in a fraction of time as angular directives. 
how do you define and handle problems with performance? you're given directions from the senior management you believe to bad for the company and the team, what do you do? you suspect a team member has a drug problem, but performance is acceptable, what do you do? you have a team member who is a star, but has an attitude damaging team morale, what do you do? an otherwise good employee fails to show for work without notice, what do you do? a team member has terrible body odor causing the rest of the team to complain to you, what do you do? what is the role of a manager? what defines good work? what is the most important contribution a manager can make? what is the worst mistake you've made as a manager? and what did you learn? your manager is pushing for the team to make a deadline, but it will require significant overtime, what do you do? you see an employee harassing another employee, at what point should you be involved? 
The steps it takes are reeaally small, the angular speed is simply quite low. Also, if I put an SVG ellipse overlay on top of it (which has a much smoother line) I can see the object 'bounce' inside the orbit, going from corner to corner
off the cuff: w3c is making it into a specification...that's all that needs to be said. use it over anything else. also, if anyone says they switched out of a specification for a simpler solution...red flags fly automagically. anyhoos, lots of good background info here for you to make up your own mind http://www.markus-lanthaler.com/research/on-using-json-ld-to-create-evolvable-restful-services.pdf
That would mean I have to scale every object manually, which is a lot more expensive.
Do you have more information on this "Chipher/Whisk" component? Searching for those names is difficult. Or are they custom tools you have developed?
i think HAL is the simpler, saner option. JSON-LD looks awkward to create and awkward to parse - it reminds me of SOAP.
Check out [JSON API](http://jsonapi.org/), it's the most hipster one
var fib = [0,1], i=0; while (i&lt;17){ fib.push((fib[i]+fib[i+1])); i++; } console.log(fib);
There is also [json-schema-hypermedia](http://json-schema.org/latest/json-schema-hypermedia.html), as the name suggests it is tied into JSON Schema. Seems more complicated then the new alternatives,
I personally love KnockoutJS and I would probably even choose it over Angular for smaller things. For bigger more complex SPAs Angular is a clear winner.
Cool. Sure better than my attempt. Thanks.
Pros: - Through the requirejs API you can build modular, reusable and very flexible code, the dependency handling is awesome. - It provides a foundation to build complex applications on top of it. That's something jQuery doesn't provide. - Has great tools to handle complexity, like promises, "topics" (a kind of centralized event system where you subscribe to a topic), data binding, aspect-oriented programming, etc. - Has a really nice build system to compact all the needed components for a page into a "layer" (that's how they call them). You can also have a common layer with components used all over the application and specific layers for different page types. - Declarative widgets, &lt;div data-dojo-type="my/component/name"&gt;&lt;/div&gt;. Saves a lot of work. Also, JS-side templates, which also saves a lot of time, lets you avoid building DOM objects programmatically (which is a major PITA). - An extensive library with a lot of components and widgets to choose from. - Also supports jQuery-ish style with the "dojo/query" module. Cons: - Steep learning curve. You'll need a little while to grasp the dojo way of doing things. - Some widgets are pretty rough around the corners (need work on your side). Specially those under "dojox", I'd avoid them as much as possible. - Documentation used to suck. It sucks now too, but it got much better (building system I'm looking at you). All-in-all, I like it because it's a batteries-included kind of framework. You have everythign you need, no need to search for different libraries, gluing them together and worring about their compatibility with one another. Once you get up to speed you can build complex applications very quickly, building little components that talk to each other. We use it at work and we're actually very happy with it. Check out this JS-heavy page, for example: http://en.escapio.com/berlin-hotels
Might I suggest dropping unity in favour of Canvas or three.js before you get too far in? It takes quite a long time to load and it'd be nice if it worked on a mobile browser. Don't want to start a browser plugin war. If you just like Unity better program how you like in your spare time. As a user though, I'm more likely to try it out if I don't have to download a slightly obscure binary plugin.
i like the idea, but i came here to say that facebook only logins are evil.
I also don't get local time. In the UK, Chrome running on OSX. Says 10:45, should have 13:28.
Actually, for your 2d style graphics SVG would be a pretty good choice.
javascript does not support tail-recursion
Only knowing JS, I'm a bit clueless right now. But thanks. I might avoid future errors as soon as I've figured out what a tail-call is.
Cipher/Whisk is a node.js module that uses redis pub/sub and an addressing convention to route messages. It is particularly useful with routing messages from a worker service all the way out to a single client via their websocket connection. The main components are open source under the MIT license. The original author may have taken Whisk down though. If this is the case I'll re-release it.
even if it did, this isn't tail recursion since the last operation is the addition.
Whenever you call a function, it puts all of its local variables on the stack. When you leave the function, all of them are cleared from the stack (unless referenced from elsewhere). A stack overflow occurs when you call a function in a function recursively repeatedly, every new call puts new variables on the stack and you run out of stack memory (which is usually pretty limited). During recursion, you might not reach the end of the first caller for a long time, so this is a common error when you start writing recursive functions. Tail recursion (or tail call optimization) can optimize certain cases (when the recursion is the last call/operation of the function), in which it can discard the stack contents a bit earlier.
http://modernjavascript.blogspot.com/2012/10/breaking-it-down-with-algorithms-ii.html gives several ways of doing it. **Answer with a loop:** If you want to do it in a for loop the trick is to do two steps per loop, that way you switch the numbers around and then switch them back so you don't need a temporary variable: var Fib = function(n) { var half = (n-1)/2; for(var i = 0, a = 0, b = 1; i &lt; half; i++,b+=(a+=b)) {} return n%2 ? a : b; } or in a more readable form: var Fib = function(n) { // declare starting variables var a = 0; var b = 1; // you're doing 2 operations per loop for(var i = 0; i &lt; n - 2; i += 2) { // make a the next one in the sequence a = a + b; // now you can make b the next one again and they're back in order b = b + a; } // now we decide which number to return based on whether it's even or odd if (n % 2) return a; return b; } *edit* You can also do it with one step per loop as both are numbers and related to each other. just do: b = a + b; a = b - a; then you've moved it forward a step.
What he really means is [Tail Recusion Elimination](http://stackoverflow.com/questions/1240539/what-is-tail-recursion-elimination), which is just a language/compiler thing which makes 'tail recursive' functions (functions which call themselves again in their last line of code, like the code Djatha posted), much cheaper in terms of memory/etc. In short, the recursive (function calling itself) implementation is just not very efficient in Javascript, compared with the loop, because calling functions is comparatively expensive, and Javascript isn't particularly-smart(not particularly dumb either) about recursion(function calling itself).
If you find a link to the original project if it exists or re-upload it, that would be great :)
Yes, but in this case the math would be the same, just on a higher level. Instead of having the internal canvas doing the scaling math I'd have to put it in JavaScript. Increasing overall complexity and probably ending up with exactly the same scenario because I doubt the rounding errors will dissapear just because I calculate the same thing on a different place :/
Thanks for the comprehensive answer.
That's true, but scaling everything may have unintended side effects. What if you wanted to draw a HUD on top of everything else? Using scale would enlarge that, too.
This guy blows my mind. Backed his Kickstarter and from the portion of vids I've seen, they're all excellent. 
/u/Djatha's solution works great as long as you wrap it with some sort of memoization.
&gt;Why would I use your second example? I never had any problems what so ever with the 'new' keyword, Omitting the `new` isn't really the main problem. Constructors can't be used properly with functions like apply that change the value of `this`, their behaviour is overcomplicated (see below), and in hiding JS's prototypical inheritance, they misrepresent how the language works and they lose a lot of flexibility. &gt;Using factory functions is more annoying because, depending on how you name them, it's may not be obvious you're getting an object. Whereas new Constructor() states clearly what it does. Well, that's a problem that exists for any non-constructor function, and it's solved by applying standard naming. I usually use `makeFoo()`, but `newFoo()` or `fooFactory()` are also options. &gt;but the second example is a bit harder to read Well that's a matter of opinion. The reason I find it easier to use is because `new` hides a lot of stuff. It creates an object, sets its prototype to the constructor's `.prototype` object, calls the constructor function with `this` bound to the object it has constructed, and then returns either that object or the return value of the constructor function, if it is an object. With a couple more lines, the factory does everything that's necessary explicitly, with no magic happening in the background. That's why I called it 'conceptually simpler': there's actually less going on in the second example, making it easier to debug and understand fully. And the extra boilerplate isn't a major impediment to reading the code, especially once you're used to the pattern. &gt;not as backward compatible [It's really easy to shim Object.create.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fcreate#Polyfill)
Much easier to read now. One other thing would be nice to be able to see your code in action. Putting it on JSFiddle would be helpful as well. One thing to note about your HTML is that you have a table inside of a td, that is not part of a table. Tables should be set up like: table &gt; tr &gt;td/th. That being said, the data you're displaying doesn't seem to be tabular and should probably be put in a div.
I've been coding dojo professionally for almost a year, and my biggest problem with the framework is that there is not a higher level abstraction beyond the widget (sure there may be stuff in dojox but many of these packages are unsanctioned and will likely disappear in 2.0). What this means is that you have to roll your own MV* farmework and do databinding yourself. Also, compared to angular, dojo doesn't seem to care much about testing.
BTW: is there a reason you didn't use a *break;* in your switch statement?
Another one!?
Yea, I would say I'm not trying to abstract away the complexity of it. I'm more just trying to add some structure to it. Kind of how express added some nice abstractions on top of the nodejs standard http libs. But that's one of the reasons I left socket.io as a peer dependency instead of a strict dependency. I didn't want to encapsulate and hobble any functionality that someone might still need from socket.io.
Eh, fair enough. I don't fully agree with you but I'm pretty sure that those parts are more a matter of opinion than anything else. I do agree that 'new' hides the prototypal nature of JavaScript, if I remember right, that was the whole reason it was implemented, to make it look more like a OOP language to apeal to Java developers. 
*shit Of course. Used both in one case. JSHint told me not to.
It keeps crashing 
Fiddling with the fibonacci sequence has sure proven to be a real gold mine. I'll spend some time playing with recursive functions.
video is broken?
The sidebar floats over the text when I zoom with chrome on my nexus 4. 
Here's the source code for the docs page, https://github.com/techpines-co/bone.io-splash I haven't optimized the site for mobile yet, but I plan to get some responsive design in there when I have a chance.
Dang, sorry to hear its giving you problems. Can you give me more info? What calls are you trying? When did it last crash for you? Is it just becoming unresponsive or does it crash soundkeep.com as well?
Soundkeep.com works, but synth.soundkeep loads, and then crashes immediately. I'm on Chrome. But otherwise, nice idea :)
Shoot. If you don't mind helping me track this down: What OS and what version of Chrome are you on? Are there any errors in your console?
I'm on Ubuntu, but I don't think that is what is causing the issue. With the console, I tried opening it but the context menu can't show up
Looks awesome, what are the advantages to using this over backbone.js?
The way that views work are drastically different. They are based on selectors not individual elements. So you don't have to do memory management, and worry about when elements enter or leave the page. The functionality is always there, because we are binding the events to the &lt;body&gt; instead of the views root element. This is similar to how angular does it, but with bone.io there is no required templating language. So you can hook up to just ordinary HTML, which is a big plus to existing applications. http://bone.io/#views The router is mostly the same as the backbone router, but it has middleware, which makes a lot of repetitive tasks much easier to do, http://bone.io/#router/middleware Finally, the IO component is probably the most different. It runs on both the browser and the server. It gives some high level functionality to "socket.io" so that you can do away with AJAX completely, and send all your data over websockets which is much more efficient. Also, the IO modules in bone.io are more or less symmetrical on the browser and server, which I did to try and promote the bi-directional communication concept. http://bone.io/#io/bone.io My thought is that MVC in the browser isn't quite as useful as people think, and that really a framework for browser-based applications should be focused on quickly and efficiently getting hot data directly to the DOM. That's why there's no Models or Collections in bone.io to get in the way of that process. Obviously, that is an opinion of mine, but a lot of people share it, so I think it's a valid way to approach the problem.
I hate to tell you but it seems you're in a bit over your head. There are a lot of javascript slideshow plugins to use so you wan't have to code your own. I'd suggest looking there. If you are at all interested in coding yourself, I'd recommend checking out [this site.](http://www.codecademy.com/) What I meant about your table being incorrect is that your code looks like this: &lt;td width="400" height="300"&gt; &lt;table width="400" height="300" border="1"&gt; &lt;td id="javascript" height=300 width=400&gt;&lt;img src="slideshow/image%201.png" name="SlideShow" width="400" height="298" id="SlideShow"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/td&gt; If you want to keep the table it should look like this: &lt;table width="400" height="300" border="1"&gt; &lt;tr&gt; &lt;td id="javascript" height=300 width=400&gt;&lt;img src="slideshow/image%201.png" name="SlideShow" width="400" height="298" id="SlideShow"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; Note that the table tag contains all table elements. So it goes Table &gt; tr(table row) &gt; td(table data). You can think of it as the row containing the data if that helps. If you give me a link to the site you're working on I can take a look at the code for you and try to help point you in the right direction. 
aren't you basically just trying to re-invent the DOM? I guess you should check out the cheerio project, which provides a dom compatible api, without needing to have XML at the bottom of it. I'm probably going to make use of it for my next server-side rendering experiments. &gt; Selectors are evil. counterpoint: no, they're not. &gt; They're meant for styling your web page, not targeting elements within your code. No, they are pretty much specifically for selecting elements. Styling them is one of the primary uses, sure, but they aren't called 'style-lectors' or whatever. JSON has JSON POINTER , xml has XPATH, etc. &gt; Think about it - plucking elements out of the DOM using selectors isn't far away from using global variables in C. Hardly, they are namespaced for one (to document). Just because document is in your scope doesn't make it evil. Nothing is stopping you from accessing the elements in the dom directly either. Is using $('selector', this) really that hard though? Backbone also provides, and recommends, the [use of this.$el](http://backbonejs.org/#View-$el), which comes pre-bound to the context. 
Why is the classical model hated so much?
Those are the same questions I had when I first started with this approach. The jQuery docs, http://api.jquery.com/on/, seem to say that it's more efficient to stop propagation as early as possible, but I can't imagine there is really that much overhead. For instance, if a user clicks somewhere on the page, unless you have a listener that stops propagation, it will just bubble to the top anyway, so it's already kind of the default behavior. Also, if you look at how the bootstrap javascript libraries work, http://twitter.github.io/bootstrap/javascript.html. At this point, I think all of them can be used without writing actual javascript, you just specify things like "data-role", "data-target", etc. and these events are just bound to the &lt;body&gt; or &lt;document&gt;. So I imagine if they are doing it for bootstrap it must be a reasonable strategy. In some respects, I've sort of codified the bootstrap technique using the Backbone syntax. Also, logically I think it makes some sense. Wait for the event to reach the top of the DOM, which should just mean that it quickly traverses the DOM tree upwards not finding any event listeners, and then at the top of the DOM, it says OK here's the event and the element that it came from, does it match any of my rules. If so fire some event listener. So far I have not run into any circumstances where this has caused performance problems, but if it did, I think the solution would be to add some kind of override mechanism to the library for those circumstances, I don't think it necessarily would mean that the entire strategy is invalid. 
I usually hunt for jquery or d3 options each time, but I do it pretty rarely
Didn't you also write the express.io node framework? Does that marry up to this in any fashion? I'd look at the source, however I'm on my phone. Also, cheers for writing the cool stuff that you guys do. Ive been working in express.io for a but and have been enjoying it thoroughly.
This looks really great! I actually may have an application for this very soon. This is random and probably not a priority for the team working on this, but is there an chance for Typescript support? Even a definition file would be awesome.
It should just work out of the box with typescript. But I haven't had a chance to play around that much with typescript yet, so maybe I'm misunderstanding what needs to be done to support it. I'm always open to other javascript dialects, so I'd be more than happy to take a pull request or whatever else is needed.
I applaud this attempt at tackling the hard problem of unifying the browser and server programming paradigms. We need more experiments in this vein.
You're correct that it will work out of the box with Typescript. What I'm referring too is Typescript's static typing. Typescript enables auto-complete and compile time static type checking when given a "typing definition" file. Basically all that requires is to sit down and write down the structure of the library like you were writing a C# interface, if that makes sense. If I do end up using this lib, I'll probably end up writing my own definition file if one doesn't pop up. I'll happily contribute that.
Yea we did write express.io as well. Sort of the problem that we ran into with express.io was that a most of the logic for our application was really being run inside the browser, and since express.io was only server side it was not solving the bulk of the problems that we were running into, which were getting Backone and socket.io to work well together. I tried not to marry bone.io to express.io initially although they could easily be put together. I view bone.io as more of a framework for the browser. The only reason there is a server side component, is that it made sense in the context of making the api for bi-directional communication symmetrical. Bone.io isn't supposed to be the end all be all framework for the server, it really just wants to be the connection point for dealing with the browser. 
Ask *why* they are a manager? [Watch this](http://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action.html) for some insights into why that's important.
Hey, my name is Manu Sporny, I'm one of the primary editors and creators of the JSON-LD specification and the Chair of the group that is standardizing it at the W3C. I wrote a brief piece on why you should use JSON-LD here: https://plus.google.com/102122664946994504971/posts/T5WkpieNrjJ That article basically states that JSON-LD is not for everyone. If your application doesn't care about sharing lots of Linked Data interoperably with the world, JSON-LD is probably not for you. Some applications, such as Gmail, do; JSON-LD is a good fit for them. JSON-LD is also being used for the Activity Streams 2.0 work (open social networking): http://tools.ietf.org/html/draft-snell-activitystreams-00 It's also being used very heavily in the Web Payments and PaySwarm work. Specifically, the Web Keys specification, Web Payments, Web Commerce, and Payment Intents specifications use JSON-LD heavily. These are all intended to become W3C standards as well. More on these specs here: https://payswarm.com/specs/ Not everyone is enamored with JSON-LD, there's a good discussion on the pros and cons here: http://berjon.com/blog/2013/06/linked-data.html That said, if HAL solved our use cases for the Web Payments work, or the Gmail use cases, or the Activity Streams use cases, we all would have used it. Simpler isn't always a good thing. In the cases listed above, simpler meant that HAL was not capable of addressing the use cases above. You should use the simplest solution that addresses your use case today and into the future. If HAL is that, use HAL. If JSON-LD is that solution, use it. JSON-LD is pretty simple to use. So simple that you don't have to change your JSON data at all in many cases, you just tack on a header and you're done. Here are some introductory videos on Linked Data and JSON-LD that will help you understand a bit more about it: What is Linked Data? http://www.youtube.com/watch?v=vioCbTo3C-4 What is JSON-LD? http://www.youtube.com/watch?v=vioCbTo3C-4
It's not hated. The classical model is fine for languages like Java and C#. JavaScript is a prototypical inheritance language first and foremost. The fact that you can coerce it to use the classical model shows the flexibility of the language. It doesn't mean you *must* conform to that model.
Stopping propagation early is recommended primarily so you don't have event handlers at a higher level running when you don't want then to. This just boils down to being careful with the code and has little to do with performance, whereas delegating is a performance win.
I heard about a welcoming party at UD for a new professor about ten years ago where somebody said, "Well, at least you're close to NY/Philly/Baltimore/DC..."
http://stackoverflow.com/questions/10713708/tracking-google-analytics-page-views-with-angular-js
I would use it with another framework like angular just to get maybe the improved socket.io/websockets functionality that bone.io offers. We did this for a project that was Backbone Marionette, but it needed push from the server, so we routed the bone.io routes straight into either a global event bus or a Backbone model. Otherwise, the DOM manipulation parts are different approaches to solving the same problem, so I think it would be confusing to use both, although, again, probably nothing actually preventing you from doing that.
Has anyone looked at reddit's js code? (Talking about reddit.com, not gifts) Just curious what you think. I feel like it looks very messy. It's on github, I'll get the link when I get home, on my phone now edit: [here's the link to Reddit's JS on github](https://github.com/reddit/reddit/tree/master/r2/r2/public/static/js) Actually, looking through again I don't think it's as messy as I thought it was. 
If theirs is messy, ours is hideous! COME HELP US PLEASE!
Man I live in Layton and this is right up my alley. But I just started a new job lol.
Anytime I need to interview a PM or a Manager I break the ice with a mischievous smile and by asking: "How can you make my life at work better?" The people who realize it's both a joke and a serious questions tend to be the type of people I will get along with best.
Mmmk
While it's always good to understand the fundamentals of a language, I'm personally excited about typescript (and going back to classical land): http://www.typescriptlang.org/ I got a nosebleed sometime during their presentation video, I personally blame it on Mr. Hejlsberg for letting to much awesome spew out of his mouth. 
Oh holy crap hi! Thanks for all the extra brainstuff!
It's too bad you're not in Toronto, I don't see nearly enough javascript heavy jobs. Most opportunities that come my way are python related.
I was totally excited up until Salt Lake City. :'(
Ever been here?
Yeah, I live less than two hours away (SE Idaho). Nice enough place, I suppose, I just don't know if I could see myself living there. What do you guys like about SLC? PS: It's not because mormons either. Maybe it's all the 7-Elevens, you guys have a LOT.
Ugh, you're in Toronto? That's grounds for disqualification! I say with absolutely no Ottawa-girl bias :) There's a trio of Canadians on payroll right now (myself included), so if you're willing to relocate (omg, the weather here is awesome! They call the Salt Lake a "great" lake, it's so tiny and cute, and they talk of "lake effect" weather patterns, it's adorable!) you should apply! I need someone else on my side for the colour war and "24.99$" price format :)
For me, and I moved here last summer when redditgifts hired me: - the weather. All of it. Seriously. I didn't realize how much I missed winter living in Seattle. Summer is hot, but there's no humidity. I can step outside and not feel like a moist toilette as soon as I step out the door. - the people. I've yet to meet anyone disagreeable here (I live downtown) and so far I've met 40+ really cool people. 4 years in Seattle, and I met less friends than I have here in 11 months. - walkability. I'm car free, and public transit, biking and waking get me everywhere. I'll be renting a car this weekend for the first time since August 26th last year this weekend, but that's only because I'm going out scuba diving on Sunday, and its a 2 hour drive away. - nature. So many great hikes within 45 mins of the city. I hear the snow is fantastic up in the mountains if you're a skier/snowboarder (I stuck to snowshoes myself) - my job. Really, I know this isn't SLC specific, but working with /u/kickme444, /u/5days, and /u/garyjense is awesome. The job posting says we're all friends at redditgifts, and its true. "Cultural" food is a bit lacking here, but I can live with that. 
The public transit in SLC is indeed nice, but this is coming from someone living in Idaho. ;-) 
I don't know what it's like in Idaho. I have a friend in Moscow, but he owns a car, so even if I asked him he wouldn't know. Public transit where I'm from (Ottawa, ON) is great, people will complain about it though. They just don't know how good they have it. Public transit where I was in Seattle was only good if you were going to Microsoft campus and taking their private shuttles, so I guess that's not good at all. In comparison, I'd take UTA over Metro Transit any day. Vehicles are cleaner, fare is cheaper, routes more concise. Oh! Another thing I love about SLC: the grid system for the roads. It makes perfect sense!
I'm a JavaScript dev in SLC and living here is the shit. There's amazing things to do here all year round: trail running, rock climbing, road/mountain biking, skiing/snowboarding, hiking, basically any fun outdoor sport. And living with the Mormons isn't too bad, especially in SLC. I would suggest living in SLC for anyone that likes the outdoors and can handle a little cold (and hot recently.)
So you're going to apply, right?
So you want someone to redo the whole site, completely own the project, but have already made up your mind on which framework must be used?
I'm learning ember right now, and I was wondering how bone.io would play with ember. I'm assuming that bone.io's views, routing, and templates, would all conflict with ember's equivalents. Bone looks really cool, and I'd like to use it with my ember app. Also, if bone works great with ember, angular, etc, it would be cool if there was a wiki section on the site that showed some simple examples.
Another question for the bmacktruck, have you ran into any problems with using socket connections on mobile devices with sketchy internet connections? I would fear that it would be difficult for the application to know when to close the dead sockets on the server. Does bone happen to manage cleaning up dead sockets? If bone does not help, the only way I could think to do it would be with some kind of heart beat check initiated from the server or clients.
Any examples available of using bone.io with angular? 
[Dojo Object Harnas](http://dojotoolkit.org/reference-guide/1.9/util/doh.html#util-doh) also check this out: http://download.dojotoolkit.org/release-1.9.1/dojo-release-1.9.1/util/doh/runner.html It takes a while to load but it runs all the test of the core components, there are simlar pages for testing themes and dijit components.
Which framework?
Can't seem to read it on mobile , the sidebar takes over the screen when I zoom in to read.
This "offer" sucks. You are basically saying you are looking for a one-man js ninja rockstar army. you know what kind of developer you will attract with that kind of shit. so i have to be REALLY good at what i'm doing and i will be the only one in the company who knows his shit about JS but before we are even talking about how to redesign the page some "guy" tells me to use jQuery. It's nothing against jQuery but seriously. Also your offer doesn't offer ANYTHING. Why would i want to work there? Salt Lake? Yeah right... 
http://nayuki.eigenstate.org/page/fast-fibonacci-algorithms
The live demo seems to be broken for me.
Oh snap. Thanks for letting me know, I merged wrong commit because of my poor internet connection. It should be fixed within 20 minutes.
I do the latter. You don't say "google com", you say "google dot com". The "dot" makes it clear that you are referring to a url. However if there is a particular service around that is well known and behind a vanity url, you might drop the "dot" when referring to the full name of the service, and are referring particularly to the service, rather than just its url. So for instance, I might say I'm using "socket io" as the library to make websocket connections; here I'm referring to the thing that has that name (which by association is also its url), but not just to the url of the library. 
cool, it does... Works good :-)
are there any examples of how its used? other than your site?
I think I may qualify, but I'm not US citizen, nor living in the US. I guess this is ground for disqualification :/
Neat. However, I think it needs a catchier title, but that's my opinion. Personally, every time I need relative time, I just copy {projects-1}'s version and see if it can be improved. Every time, it gets a little better. It's a single method... does it really need to be a node package? (Being new to node, I'm asking this honestly) For reference, here's the method I use: relativeTime = function(timestamp, min) { var now = +new Date(), difference = now - Math.floor(parseFloat(timestamp)); difference = Math.floor(difference / 1000); if (difference &lt; 60) return difference + (min ? 's' : ' second') + (difference !== 1 &amp;&amp; !min ? 's' : ''); difference = Math.floor(difference / 60); if (difference &lt; 60) return difference + (min ? 'm' : ' minute') + (difference !== 1 &amp;&amp; !min ? 's' : ''); difference = Math.floor(difference / 60); if (difference &lt; 24) return difference + (min ? 'h' : ' hour') + (difference !== 1 &amp;&amp; !min ? 's' : ''); difference = Math.floor(difference / 24); if (difference &lt; 30) return difference + (min ? 'd' : ' day') + (difference !== 1 &amp;&amp; !min ? 's' : ''); difference = Math.floor(difference / 30); if (difference &lt; 12) return difference + (min ? 'mon' : ' month') + (difference !== 1 &amp;&amp; !min ? 's' : ''); difference = Math.floor(difference / 12); return difference + (min ? 'y' : ' year') + (difference !== 1 &amp;&amp; !min ? 's' : ''); } Open to critiques, of course.
Maybe northern DE, but I'm in southern DE.
I actually "code golfed" this once for a [blog entry](http://www.benlesh.com/2012/05/javascript-fun-part-6-code-golf.html)... here's my result: for(var n=1,i=0,p=0,c=1;i&lt;10;n=p+c,p=c,c=n,i++){console.log(n);} ... apologies for the shameless plug of my blog, but any smart folks I can have come correct me on my articles would be fantastic. I've learned a lot from writing about what I do. **EDIT:** I realize I could have skipped that `var` in my for... but that just feels wrong ;). **EDIT2:** Okay.. this is too much fun... but here's one that will build it out as an array as well: for(var r=[],p=0,c=1,i=0;i&lt;10;r.push(p = c = (p + c)),i++); console.log(r); from a further reduced code golf version (thanks for getting me to think about it more!): for(var i=0,p=0,c=1;i&lt;10;console.log(p=c=p+c),i++);
I'd assume 'JS golf' is nice for practice, but a pain in collaboration. (Pretty much what you stated at the top of your blog entry)
a few comments: * You just do a box check around the element, which is inaccurate, if for example you are 50 pixels to the left of an element and also 50 pixels above an element, you are actually 70 pixels away. you should do a distance calculation, sqrt( xdiff^2 + ydiff^2 ). * instead of returning a boolean, its more helpful to return a fuzzy value indicating how close to the element the cursor is * running code on every mouse move event is generally pretty evil, it causes unnecessary wake ups when there are potentially smarter ways of achieving the same goal. 
It uses another mousemove internally to get the mouse position, so you end up using two mousemove listeners. 
More or less JS is intended to be used asynchronously, because it's main purpose is to manipulate the layout of a web page and therefore it can not afford to block navigation while(pun intended :) ) something is done in the background. This is a little fibonacci calculating example written by Glen Mailer for Node.js and modified for the client side by me: var fibonacci = function(n, callback) { var inner = function(n1, n2, i) { if (i &gt; n) { callback(null, n2); return; } var func = (i % 100) ? inner : inner_tick; func(n2, n1 + n2, i + 1); } var inner_tick = function(n1, n2, i) { /* if you are using IE10 it is way better to use setImmediate(func) instead of setTimeout(func, time) */ setTimeout(function() { inner(n1, n2, i); }, 0); } if (n == 1 || n == 2) { callback(null, 1); } else { inner(1, 1, 3); } } fibonacci(8, function(err, num){ console.log(num); }); This little snippet will create an async function that will return the fibonacci number for a given position in the sequence. I would argue this is the JS way of doing fibonacci. What you are doing is essentially spreading the calculation over several iterations of the event loop and in this way preventing the page from blocking while the calculation is done. If you want to see why this is the "right" approach for a language like JS, try calling Djatha's example with fib(100) // go drink a coffee and then read the morning newspaper and then it may be finished. If you have any questions regarding the code feel free to ask :) EDIT: Just did a JSFiddle to make things more fun - http://jsfiddle.net/daniocean/spQqX/4/
We already use django as a backend framework. For the front end, were already using jQuery, but if there's a better front end framework choice to use, tell us!
I'm not American either, I'm not 100% positive we'd sponsor a work visa, but I'm not the only visa-requiring person on reddit's payroll.
This isn't to work on reddit, it's to work on redditgifts. We're employees of reddit though.
As I replied to someone else, were already using jQuery. If you feel there's a better choice for a front end framework, make it a part of your application! Besides, every job post asks for a rock star :)
Could get around that with a compliant promise library, or some other pattern of trampolining it. And, as has been pointed out in this thread already, fib takes one argument, and returns in the same domain of values it takes, which means you can apply all sorts of functional optimizations, like memoization, and lazy evaluation pattern. With promises, the 'recursive' function looks like: //promise exposes an eventual value, via the method .then(callback) //.resolve(val) causes the promise to fire the callbacks. //the spec says that even if a promise is resolved, the callback //is still called via setImmediate (if available) //a helper function, when() returns a promise which resolves //like when(promiseA,promiseB,...) -&gt; .then(callback([A,B,...])) function fib(num){ var ret=new promise(); if (num==0) ret.resolve(0); else if (num==1) ret.resolve(1); else { when(fib(num-1),fib(num-2)).then(function(vals){ ret.resolve(vals[0]+vals[1]); }) } return ret; } edit: changed fib(n) calls to fib(num) to fix unresolved ref error 
&gt; walkability. I'm car free, and public transit, biking and **waking** get me everywhere. I know it's a typo but I'm now imagining you wake-boarding to work and bars and stuff lol
On the html/css site, sure it's boring and plain. But on the JS-side it could be a very challenging environment. You have to think about scalability for sure and optimization for speed. There's a ton of database interaction. [Check out their JS on github](https://github.com/reddit/reddit/tree/master/r2/r2/public/static/js) to get an idea Same can go for Redditgifts. I'm sure they get millions of hits. Have a large db to maintain and is constantly being hit by the font-end.
Yuck. Tried that with fib(100), I still blew out my process space. Therefore, we also need to memoize. memoizing involves wrapping the function in a check vs a hidden hash to see if we've called fib(x) yet, and returning from there if we do, otherwise we assign to the hash first, then return. There we go. fib(100).then(console.log) &gt; 354224848179262000000 
[Timeago](http://timeago.yarp.com/) can generate some nice timestamps like "about a month ago", and refreshes automatically
jQuery isn't a framework. It is a library that simplifies most devs lives. It doesn't constrain you in any sort of way, so I'd be scared to see what the current state of the js is on the site. I never understood backend engineers utter disdain for properly learning js and treating it like a real language. Fine, JS isn't the best designed language, but it also isn't a toy language. You wouldn't just write python all willy nilly without any sort of pattern, so you shouldn't be doing that in js either. It would be akin to not doing MVC/MVVM/MVP or api first. Engineers should have the desire to learn. I could be also poorly assessing the situation, but in my experience the above holds true.
I haven't been to SLC in a long time. It would be nice to see snow again, though living in Florida for so long I get cold at 60 degrees XP
Well I can't expect that you will sponsor a visa in case you find someone qualified that already can work in the US. I'm just wondering if I should even spend the time to make the PDF. To be honest the project looks challenging and this is a good thing for me, but I just don't like doing pointless exercises.
Silly autocorrect on my phone. For the longest time, it prefered "waffling" over "walking", so it was fairly common for me to text someone "on my way, waffling over now"
I don't get it... I do what it says, get out of the frame, then get back in the frame, then it just says "You switched slides, get the idea?" Nope...
haha I would just keep using waffling
Very similar to `uptodate` which I wrote this function for: http://prezjordan.github.io/uptodate/ This is different in functionality however. It just returns the string instead of manipulate the dom in anyway.
Not sure why you put "offer" in quotes. It's not an offer, it's a job listing. The "offer" comes after the interview process. 
I'm curious what you recommend for tracking mouse movement then? I actually liked how he offloaded most of the mousemove code, just by storing the event object, then calculating the position later (will be updating some personal code to do this probably). EDIT: Ah, I think you mean with the example, it is running the .isNear code on every mouse move. I agree, a better choice would be to call isNear in a loop. I would almost even say this script would be better as a fake event listener, that you could pass a callback to. (Would be fairly trivial to change to)
Yeah man. Really helpful. There are a lot of answers, so I'm not going to thank everyone individually (I'll thank with upvotes), but THANKS EVERYONE! This helped a LOT.
That blew my mind. It kind of hurts. But thanks for pointing that out.
Thanks man. I was checking out Raphael, but didn't know about the others. They seem amazing.
haha... yeah, this isn't anything you'd want to check in to a team's repository. But if you wanted it to be cleaner, this wouldn't be much different: var i, p = 0, c = 1, results = []; for(i = 0; i &lt; 10; i++) { results.push(p = c = p + c); } console.log(results); The only part that some people might gripe about would be the `p = c = p + c` ... but this sort of cascading evaluation and assignment is common in JavaScript development (it appears in nearly every major library such as jQuery, underscore, angular, etc), and any JS developer worth his salt will be able to read that easily.
I say "bone eye oh", so I leave out the dot.
Thanks :)
You guys have a long way to go, most of it's not javascript looking at the site and source. A design is needed and a whole lot of CSS work, apparently a ton of styling is being done inline. The work seems to have a lot of room for shaping, but SLC as a long term destination really seems to cut out a huge number of potentials.
Sorry I lost half the mesage when sending, the idea its that when you click a button it open you a map of the Galapagos islands on shadowbox, but you can't really read any city or beach name for example, so I want kind of a zoom in/out button or something like that.
Yeah but I don't know what I'm supposed to be doing? Is the presentation actually controlled by movements?
what would you listen for instead of mouse moves?
It is. Maybe try getting your body back in the frame from the opposite side - does move detect your body properly? Is it marked blue?
you can't, as far as I'm aware... you'd still use mousemoves, but you don't have to call your isClose function every time. Some pseudo code that is not meant to be elegant or usable: var mouseX, mouseY; document.addEventListener('mousemove', storeMouseXY); function storeMouseXY(e) { mouseX = e.pageX; mouseY = e.pageY; } function isClose(ele) { // code to check if is close... utilizes mouseX / mouseY variables. } var myTimer = setInterval(isClose, 200); something like that would poll 5 times a second -- probably plenty -- but could be adjusted accordingly.
A throttle function like the one found in the underscore library works even better. ( http://underscorejs.org/#throttle ) document.addEventListener('mousemove', _.throttle(isClose, 200)) 
&gt; but SLC as a long term destination really seems to cut out a huge number of potentials We're ok with that, and like you said, yes we have a long way to go and we need someone who's ok with that. 
A lot of great stuff in such a small number of slides. It's good to see less people scared of types and "==". I almost exclusively use "==". This will hopefully be the final kick into getting me to start naming my anonymous functions. One thing he forgot to mention is that named functions can often lead to much easier debugging. I'm kinda curious on his blockscope script. Since it adds in try {} blocks, wouldn't this be causing major performance decreases as v8 won't optimize a function with a try{}? I do like the idea of let with a block like syntax. (Reminds me a lot of "using" in c#). .bind() was probably my biggest take away, I didn't even know this existed. I'm thinking this will allow me to remove some unnecessary patterns I was using when proxing events within OO code. I'm also impressed by the simple inheritance pattern he shows (makes me hit my head it looks so obvious). I'll have to play with that as well (although I mostly use typescript so my inheritance is typically handled for me).
Aha, an other component.js user. The best thing since sliced bread.
While throttle is cleaner looking I have a sneaking suspicion that the previous method would be more performant.
Have you tried "[Moment](http://momentjs.com/)"?
Yeah true, but for webapps I wouldn't go the route of creating a global variable to store mouse positions. For games on the other hand it would probably be a good idea.
This could be made even better if you included a RAF in the listener. function storeMouseXY (e) { requestAnimationFrame(function () { mouseX = e.pageX; mouseY = e.pageY; }); }
Is there an interactive version of ESLint online?
It's Keynote, which is totally my bitch.
thank you!
You're welcome :-)
So are there good SCUBA dive spots near SLC or or are they all 2+ hours away?
You asshole; I just ran your code in my console and now i'm a never ending L^oooooopppp
I did my certification through a dive shop in town in May. Went up to [Bonneville Seabase](http://www.seabase.net/) for certification, that was maybe 45 minutes? Where I'm headed this weekend is for the annual dock clean up as a part of the dive shop's [monthly dive-a-longs](http://neptunedivers.net/trips/local-dive-a-longs/). I've also heard good things about the [Homestead Crater](http://www.homesteadresort.com/utah-resort-activities/the-crater), which is closer to an hour away. I didn't get my certification with any trip or place in mind, just thought it would be fun to do :)
&gt; It's good to see less people scared of types and "==". I almost exclusively use "==". I thought the point was to use == if you explicitly want type coercion for your particular case (ie. the specific cases he mentions, comparing loosely to undefined/null or "true" to true) but in all other cases use ===. At least, I hope that's the point, because my experience is that using == without anticipating type coercion is asking for obscure bugs.
I do this all time time in jquery event handlers $this = $(this); 
Wow this is pretty harsh. I feel like I understand less than half the stuff here... Is it all pretty cromulent? Like all true?
Great stuff!
Nope! Apparently there are quite a few similar scripts out there. This repo is an extraction from https://github.com/prezjordan/uptodate :-)
That's not the same thing. The reason to do that is so that you don't have to run the `$()` function every time you you want to access that jQuery object. Using `var self = this` isn't saving you any CPU cycles, it's just needlessly allocating extra memory.
Cool. It's great fun. Love it. I'm in Iowa no great dive spots here. You should definitely try saltwater. No comparison to fresh. Went to Palau a few years back. Swam with Mantas, turtles, whitetip sharks, and amazing coral reefs. I guess I love it so much I'm moving to Hawaii. ;)
The previous method is always doing something whether you move your mouse or not, and will be doing unnecessary calculations every time you move the mouse anyways. The throttle method will only get called on mouse move, and prevent it from being called too often. Throttle would be more efficient in terms of how many calls are made to it. Looking at the implementation, there's not too much load for it. It checks how much time has passed since the last invocation, and only runs if more time has passed than the wait period. It also has a cool feature of having a trailing call, so if you call a throttled function in the middle of a waiting period, it can automatically call the function after the waiting period ended, so if the final 'mousemove' is called during the waiting period, it will update as soon as it's allowed to.
I've just been perusing the threads about this role, and this comment along with few others makes it sound like a great place - For a former MS-folk to have dropped it to learn python, which I love, and to need help on JS, jQuery, and all other front-end work, which I also love and has become by specialty over the last few years... that sounds like a promising team to work with. There are often politics and arguments that develop on development teams, but you guys dont seem to have that problem. People who are willing to make significant changes are usually also people who make great teammates. I can tell from this comment, and others that there is no ego in play here - just come in and produce good work. That makes for a great environment. I'm not sure why there is so much negativity in these comments - from what I can tell, this is a golden opportunity for someone who loves front-end work, and who loves reddit to really take ownership of something significant. Personally, the only reason I have not applied is because I live an hour away, and I currently have a 100% work-from-home job with 100% flexible hours in a small, decentralized, and profitable tech company. Awesome though your opportunity sounds, I don't think I can give up my current work environment! 
I've got diving in Iceland planned for January (wooo drysuits!) The guys at the dice shop were making fun of me, "*usually* people go to warm places for destination dives, not to places of sub-zero temperatures!"
Neat!
Since this submission isn't showing up ANYWHERE on reddit after 4 hours, aside from in my submitted list, I headed over to stack exchange and got a really great answer: see http://stackoverflow.com/questions/17894286/unexpected-double-namespace-when-using-constructor-function-in-submodule
You may want to check this out: https://plus.google.com/u/0/100132094361759342131/posts/ZP17cFYHqda
Agreed. For the manipulation of regular JavaScript objects and building your own prototype chains, `Object.create()` is much more appropriate. Only when initializing your classes should you use the `new` operator, which makes the most sense anyway. if (!Object.create) { Object.create = (function(){ function F(){} return function(o){ if (arguments.length != 1) { throw new Error('Object.create implementation only accepts one parameter.'); } F.prototype = o; return new F() } })() }
Not yet, but they are working on it.
Fast, Simple, Powerful. Pick any two?
Can someone more familiar with these libraries elucidate? This test seems somewhat arbitrary. It looks like it's testing how many appends each framework can perform in a limited time frame. Given that that should be only one small aspect of what the frameworks do, and that this particular action is unlikely to be done rapidly in any sort of production setting, I'm not sure I see the point. 
Is this really a fair comparison, tho? Backbone serves a different purpose than Angular or Ember. The former is a basic toolkit intended to be built upon whereas the latter are more fully realized framework implementations. One very interesting side observation with the test results is just how much slower IE's JavaScript runtime is compared to the other desktop browsers. It appears as if IE performs just a bit better than mobile browsers which are running on devices that presumably have much less processing power than the desktop that IE would run on. I don't want to use this as yet another opportunity to bash IE but its lack of performance is hurting the web application market and the broader acceptance of single-page implementations. Maybe that's why, looking at our web-stats, most of our commercial users are running Chrome or Firefox?
&gt; I think it's falling victim to the "it's cool to hate on reddit ... while on reddit" mentality. I think it's a bit dismissive to think that way. The work sounds like something I'd be interested in. Utah is a bit polarizing as a destination given its cultural identity though. Especially when presented to a group likely well left of the area culturally and politically. I'd tend to think I'd have fewer deep social opportunities in SLC than just about any tech hub in north america even if Rocky Anderson was mayor at one time.
From what I've seen SLC (and Provo) are [turning into pretty big tech hubs](http://www.deseretnews.com/article/765620136/Salt-Lake-metro-becoming-tech-hub.html?pg=all). There's lots of startups here and plenty of VC money to go around. Adobe just opened up shop in Lehi, UT, Overstock.com is based in SLC, eBay has a major office here too. Unisys is a pretty big employer in the area too. SLC really isn't that over the top religious, my neighbours in the Seattle area (Redmond) were far more religious and conservative than anyone I've met here. There's a pretty lively social scene (if that's your thing), and I don't think I've met a single Mormon "in the wild" and the few I have met haven't been in your face about it either. If anything, the recently "exed" Mormons are far more annoying than the current ones. (Look, I can see you're drinking a beer, I can extrapolate you're not Mormon, and if you are, you're one hell of a Jack Mormon, you don't need to start every third sentence with "I was raised Mormon...").
Nice, works in Chrome for me on Ubuntu.
Alright, it's responsive, so mobile devices shoud be happy now, http://bone.io
Alright, I made it responsive, so mobile devices shoud be happy, http://bone.io
Well, I started up a JS blog around a month ago: http://j201.github.io/ There's not much there yet, but I'll keep posting. Funny enough, the most recent post is about a function just like your `makeObject`. 
You need to press ctrl+s to save the changes. There will be an asterisk (*) on the tab for the file when modifying, after saving the changes the asterisk will disappear. Also, reloading the page you will lose all changes you have made.
btw, the "F12 editor" is the name for IE's piece of shit editor.
I do save it and the asterisk does disappear but my changes don't take place I've tried editing simple strings and it doesn't change
Thanks for clarifying this. I'll update the blog to reflect this. Thanks again
Number support! No number support! Works in Chrome. And I couldn't download Firefox 24.
I'll have to hunt down an audio file of someone reading off numbers, that's what I did for the letters. But it shouldn't be that hard. And I think right now when you hit a number it's: "Number_1" or something like that, that'll have to get fixed. Still, should easily be doable.
1. What is the `newArray` function? Was that supposed to be `new Array`? In any case, instead of `new Array( 'a', 'b', 'c' )`, I suggest using a simple array literal: `[ 'a', 'b', 'c' ]`. 2. You have a syntax error in your JS code, the spurious `]` after the `var spot =` assignment. 3. You have a `&lt;script&gt;` tag in the JS code. This code should be JavaScript only, not HTML. (BTW, when you *do* use a `&lt;script&gt;` tag in your HTML, you never need the `type="text/javascript"`. Ditto for `type="text/css"` in a `&lt;style&gt;` tag. Keep it simple and leave these out.) 4. The most important part of all: Are you familiar with the browser developer tools? No? Start now! :-) Here are two articles to read and try out the exercises, one specifically on the Chrome developer tools and another with general tips on the developer tools in all browsers: https://developers.google.com/chrome-developer-tools/ http://www.netmagazine.com/tutorials/javascript-debugging-beginners If you load your codepen.io page with the Chrome dev tools open, you'll see an error message complaining about a `&lt;` character. This is the `&lt;script&gt;` tag at the beginning of your JS that it's complaining about. Also, I don't think codepen.io is a very friendly environment for debugging. You may notice that the `&lt;` error message doesn't point to any particular line of your code very well. For debugging, I recommend a plain HTML page instead of a codepen.io or jsfiddle.net or the like, because then the developer tools will point you more directly to your errors.
Here's an edited version of your code: http://codepen.io/anon/pen/KIwfu There were several syntax errors in there, but the important change is that setting the background image in CSS is overriding the JavaScript, even though the JavsScript happens after the CSS is loaded and interpreted.
Exactly this! This describes several of the syntax errors that I mentioned in my reply.
After some testing (as stratoscope said codepen.io isn't very friendly). I have narrowed it down to the: document.body.background not working (after I corrected the newArray and other stuff). Because I can alert the random image link. EDIT: After you fix your syntax errors use document.body.style.backgroundImage to change the background. http://codepen.io/anon/pen/dcGeq
Try changing 'document.body.background' into 'document.body.style.backgroundImage'
im sitting here like an idiot making electro beats to your soundboard, nice work!
This is great! My son is one and does the same thing. I think it would be useful if the screen showed the letters or something. 
The web audio api was surprisingly easy to use, and there's a ton of features, modules, effects, controls, etc. You could easily create any number of audio things with it, drum machines, sequencers, synths, etc. I bet quite a few people have already done just that.
Incredibly silly. The Backbone example does not really use Backbone at all. It just inserts a bunch of DOM elements into a div using jQuery. That's obviously going to be faster than a framework with real templates and data bindings.
I go to SLC once and a while. Its a nice place, I love mountain biking and snowboarding there! Also you have the best Mexican restaurant I've ever been to, Red Iguana. Mexican town here in Detroit is pretty epic, red iguana is the only place I've ever liked more!
There are a lot of reasons why websockets could be an issue: * You cannot use the existing server-side frameworks with websockets. * You cannot use your existing web-api. * Your server might not support websockets. There are probably more reasons that I haven't thought of yet.
WebSockets do. The cross-origin information is sent over the initial handshake. And if OP's goal is to make it easier to get going without having to figure out the CORS headers, Websockets will be a LOT more complicated for anyone to do. Using frames is a very common and technically sound solution.
Amazon's ELB still doesn't support Websockets as well, which is a major blocker.
Did you create it using cloud9? I looked at it back in the days, but it wasn't very good yet. How is it now?
Great idea. If I may suggest, how about throttling key input a little bit? If a key is pressed more than repeat threshold it makes a bit creepy sound. "A,AAAAAAAAAAA." 
The origin is sent with the initial WebSocket handshake, yes. However, there are no client-side restrictions like there are with AJAX. Using iframes is a kludge. Dealing with them is a huge pain in the ass compared to WebSockets. Also, if you're going to all the trouble to implement a solution like this (changing stuff) you might as well get started with WebSockets. *Because* WebSockets have no cross origin restrictions you can add some JS to *any* page and connect to *any* back-end. So the compatibility of your existing back-end is meaningless. WebSockets let you start using a new one right away without having to make any back-end changes at all.
Using existing frameworks is moot: You can add WebSockets to any page and have it connect to any origin. So if you're trying to add something to an existing page that needs to connect somewhere else (the point we're talking about here) legacy compatibility won't matter.
This library is great. I just used it to add "export as midi" buttons to this app: http://skratchdot.github.io/audio-sort/index.html
It's surprisingly just "OK" now, not quite up to sublime text or the like, but it's good enough. And the github integration is very nice. And it lets me run a node instance with a mongodb without paying for hosting or self hosting, so that's wonderful. As far as the ide itself, once you get a lot of the keyboard shortcuts down it becomes much more useful, i.e. ctrl+shift+b = js formatter / beautifier, ctrl+alt+right / left = add next match to selection set, so you can do multiple edits at once like sublime. The only thing I wish it had was a great outlining tool like aptana has, god I miss that. So the benefits outweigh the detriments. Hope that answers your question. 
Brilliant idea. I have been manually implementing this idea as a way to work on a front end for an API that is still in development, and the devs haven't gotten to the CORS part of it. A nice library like this should make that less painful in the future.
Yup it wouldn't be hard to make it ajax-library-agnostic, the library would need to be monkey-patchable and I'd want to make a nice way to do it, if theres enough interest, ill put in the next release edit: created issue for this https://github.com/jpillora/xdomain/issues/2
Yep, I've namespaced it under `$` to indeed make it clear that it is a jQuery plugin, though as i mention above, this would change if it were library agnostic
The original intention was a **cross-browser** CORS replacement and WebSockets is not in IE8 and 9, the default browser for windows XP and 7 users, so that's about 65% of all users
As I mentioned, it's not about the technical hurdle, websockets are awesome, https://github.com/jpillora/node-king will be pure websockets when its finished. Yes iframes are a kluge, though, Google does it. Extracted from running the Google API JS library: &lt;iframe name="oauth2relay564752183" id="oauth2relay564752183" src="https://accounts.google.com/o/oauth2/postmessageRelay?..."&gt; &lt;/iframe&gt;
Ouch, did not know that...
That's true, though it would be nice to only have one endpoint to worry about
This postmessageRelay from Google looks to be a proxy for EasyXDM. I see a lot of "gadgets.rpc.getOrigin", which is indicative of EasyXDM's RPC function. I implemented postMessage functionality for a major website yesterday that allows localStorage to be written across domains. My only problem is this method (at this time) is non-blocking, so the calling function returns before the iframe is done writing everything. If the parent calling function is a redirect then it *could* redirect before the iframe loads and the localStorage won't be written. All said, this is great for communication but adds a bunch of work (and thought) when dealing with callbacks. Here's my structure: --&gt; Parent Site (contains an onLogin funtion) --&gt; Main Iframe Login needs to write localStorage on parent site, calls responder page --&gt; Responder page (same domain as parent - call writeLocalStorage on parent) --&gt; parent site detects http or https protocol and config option, needs to write cookies on "other" protocol --&gt; call crossProtocolStorage() function --&gt; "http/s" responder page iframe opened onmessage event waiting for response --&gt; http/s responder page loads and fires postMessage event --&gt; Parent site detects "ready" response and sends cookie data --&gt; http/s responder page writes cookie data and sends "complete" response --&gt; Parent site detects complete response and calls the callback. --&gt; Callback fires EasyXDM response to first responder page --&gt; First responder page fires callback to login iframe --&gt; Login iframe calls onLogin function on parent site.
&gt; Hope that answers your question. elaborately. Thanks :) Think I'm gonna give it another chance then. Sounds to be worth it.
One general recommendation for plugins is to use the `jQuery` namespace instead of `$`. If you want to use `$` internally in the code, wrap it in IIFE like this JavaScript version you've probably seen many times: ;(function( $ ) { $.foo(); // etc })( jQuery ); 