&gt; M$ Really? And who is fighting to complete the most basic of functions? If yarn doesn't work in some cases, but npm works fine, just use npm. No, *let's change your entire OS instead.*
Consider a beginner who is new to JavaScript, if they want to learn React, they have to also learn ES6 along with React as "React and ES6 go together", because you can't do anything complex with ES5 or less. Brad has JavaScript (at least &lt; ES6) experience, he worked with a lot of people and helped many teams build complex design systems. He has enough JavaScript knowledge to know how the JS ecosystem works. He even wrote a book that inspired component based systems like React, but still he has a struggle to learn React, describing how complex React is to people even with some JS background. JS beginners end up learning ES6 and things that React introduces mixing up things such that one cannot differentiate ES6 from React. JSX whatever can it be, takes some learning, and every other thing too introduced by React also requires some learning (or getting used to), by which time React has a different learning curve (definitely not small). React requires more than basic JS background, you also need to know ES6, and other things that came before React to truly understand why it is actually useful. Finally, there is no such thing as React for beginners, it takes a lot of prior knowledge of other things. For example, some of my friends attended an internship at Microsoft itself where they learned React, after that when they were asked if they had any experience with JS, they said that they were only taught React and not any JS. This might be a very small example but it describes how alien React is to JS for some people. Another good read: https://daverupert.com/2018/06/the-react-is-just-javascript-myth/
[removed]
I do not get the impression that Firestone is experimental but perhaps I am not reading the right part. https://firebase.google.com/docs/firestore/manage-data/enable-offline There is also Firebase itself https://firebase.google.com/ Amazon's AppSync just came out of beta not too long ago and I haven't had a chance to dig into it to much but it appears to use GraphQL, so its an interesting solution. I'd like an excuse to get into it at some point. offline.js -- appears conceptually similar to Oracle's solution http://github.hubspot.com/offline/docs/welcome/ PouchDB/CouchDB can be great but it has it's limitations. Typically you either have 'one big db' (like per company with all users sharing data with no concerns that they can see/modify all data) or 'one db per user' (where each user's data is independent but there is no longer one big db to accumulate data for reporting, etc). Any sort of alternative structure means that pouch/couch is probably not a great fit. I'd suggest you present your intended usage on slack or irc (there are channels for pouch and couch) to get some feedback. http://hood.ie/ is a framework based on PouchDB. Last I looked it still had some missing pieces but that was well over a year ago. https://loopback.io/doc/en/lb3/Synchronization.html &lt;== now going to version 4 so this may or may not work and was more experimental so mileage may vary. I'd suggest digging into version 4 and see what it offers. Also look at PWAs (progressive web apps) with service workers and offline caching. Service workers are now getting support in iOS so PWAs appear to be the road to the future. https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/offline-for-pwa https://medium.com/@firt/pwas-are-coming-to-ios-11-3-cupertino-we-have-a-problem-2ff49fd7d6ea The advantage is you would still use your own DB most likely proxied over a web API. There are some helper libs for service workers out there as well such as https://github.com/GoogleChromeLabs/sw-precache For client side persistance (with no sync built in) there are a number of options for JavaScript db's or just use local storage in the browser/device https://github.com/localForage/localForage Kinto.js was already mentioned but it also has its limitations. If I remember, it does not like filtering of large data-sets done serverside. Somewhere in the docs the limitation is explicitly mentioned. There is also the Parse project which used to be run by Facebook then got opensource and left to the community. It is still active but I don't know a lot about its current state other than it does offline/online sync as well. http://parseplatform.org/ As far as I know (and I've done a fair bit of checking) that is about all the options or at least the more common ones. If you find anything else, let me know please. 
Everything just works is like saying "this thing is only made to work only in this environment". &gt; Sounds like a nightmare Sometimes it is, because the people creating the software just don't care about other platforms, simply saying that they don't have any person to maintain the product who uses platform X. &gt; You don't have to spend hours or even days trying to hack something into working into a half-way usable state just so you can start your actual work. Then Yarn and other tools should not call themselves cross-platform if they don't "just work" on the other platforms.
Spot on! Changing your OS just because a single tool doesn't work is like going to live on Mars just because you feel heavier on Earth. The problem here to make tools that work for "everyone", not about changing OS' because something doesn't work.
My point is to be as simple and minimal as possible, without compromising on user experience. Frameworks are mostly developer experience over user experience, where actually everyone should be working the other way around.
This user keeps spamming these links all over various subreddits. The articles seem super low quality and are full of ads. Maybe it's time to clean this up? 
The only times I run into issues on Windows is when a library is trying to run a bash script. cross-env fixes most of the problems, but not all. And in the few cases where I can't fix it, I run it using the bash shell (Windows Subsystem for Linux).
This is so cool! Which API is it using for the scores?
 const private = Symbol(); const proxy = new Proxy({ [private]: 42, foo: 'bar' }, { ownKeys(target) { return Reflect.ownKeys(target).filter(key =&gt; key !== private); } }); Reflect.ownKeys = new Proxy(Reflect.ownKeys, {apply(fn, ctx, args) { // do some check on the object to make sure its the right one.. console.log(Object.getOwnPropertySymbols(args[0])); return Reflect.apply(fn, ctx, args)} }); Object.getOwnPropertySymbols(proxy)
When I send an update in for a business, I usually have a response of change within a week. 
I mostly mean mapping updates. Stuff like new streets, changed lanes, etc. Maybe they're responsive to the updates but they don't seem to either receive or push the corrected maps nearly as often as Google Maps or OpenStreetMap
Thanks. I found localForage a couple of hours ago but didn't bother editing my original post since this thread seemed pretty dead.
About a month ago I was walking to my pharmacy and Maps wanted me to walk a block farther than I needed to - there’s a back gate and pedestrian path on the back of the parking lot cutting the walk time down by 10 minutes. I sent in an update (with photo) and again fixed in a week. In that same week, the highways near my work also received updates (ending construction and a new exit). Maybe no ones bothering to send changes in? My experience has, for the past 2 years I’ve been sending updates, is that they’re pretty responsive. 
 &gt; it doesn’t participate in the prototype chain However you can totally overload the WeakMap get prototype with something like: WeakMap.prototype.get = new Proxy(WeakMap.prototype.get, {apply(fn, ctx, args) { let ret = Reflect.apply(fn, ctx, args); if(args[0] === myObj){ console.log('got it'); console.log(ret); } return ret; }}); // assume this gets called later weakMap.get(myObject)
Did you even read the read me? 
Thanks for taking the time to write all those options. &gt; I do not get the impression that Firestone is experimental but perhaps I am not reading the right part. It's right there in the docs: &gt; For the web, offline persistence is an experimental feature that is supported only by the Chrome, Safari, and Firefox web browsers. The Firebase team also confirmed to me on Github there is no Edge support and unlikely to be in the foreseeable future. It seems it's going to be a some home grown solution that involves localForage. AppSync would involve moving to GraphQL and integrating our authentication and authorization with AWS somehow.
Got a feeling that at some point that was true but is most likely no longer true. So it's probably possible to find an outdated article that 'confirms' it.
Not sure that is universal - from my experience here in Italy Apple Maps has been competitive and often superior to Google maps, even from day one. The points of interest/search thing though is a huge gap for Apple. 
I can confirm that my paid account has access but my free account does not.
Thanks, I signed up to give it a go.
I’ve both heard of them and done it myself almost daily. But minification is just transforming some aspects of css formatting and maybe reworking some style settings. Very rarely does a minifier attempt to change the class and I’d strings, because it’s almost impossible to find out if or how that class/id will be referenced in the html and js, and even that is considered, if not bad practice, rarely worth it in the face of gzipping. None of that would be what I consider mangling. Even if you rename class names, the transformation to something less readable is a side effect of the goal of making it shorter. It is not being done for the purpose of making it hard to read. That kind of mangling, I haven’t seen anyone actually do, save products that claim they can “protect” your css.
&gt;thinking of how to turn the solution into Javascript code seems to be a big obstacle for me Honestly, this is the best place for your roadblock to be! Figuring out the solution in an abstract, non\-code way is the hard part that you can't always look up online. But once you can explain your solution conceptually, you can almost always find documentation or tutorials or someone else's Stack Overflow question where that solution is presented in Javascript. Over time, if you build enough small projects, you won't have to turn to the internet for it \- you'll just remember the last time you solved a similar problem and modify your code from the last project.
You *could* solve this with Javascript by detecting the size of the viewable window with `window.innerWidth` and `window.innerHeight`, and showing or hiding elements that way. ...But that's overkill, so I 100&amp;#37; agree with the other responses \- CSS media queries ([https://www.w3schools.com/css/css3\_mediaqueries.asp](https://www.w3schools.com/css/css3_mediaqueries.asp)) let you style the same element different ways depending on screen size, and there are definitely existing frameworks (like Bootstrap) where you could plug in predefined classes to get the setup you want.
&gt; Closures are a natural consequence of being able to do those two things. They're not an especially interesting concept on their own. You've got that backward. Being able to do those things is a consequence of having closures.
I don’t think it’s fair to call Apple Maps useless. If it were, about any service other than Google’s would be useless. But yes, Google Maps is really quite far ahead. For a very detailed, in-depth comparison, see: https://www.justinobeirne.com/google-maps-moat
Well, both lines of javascript you wrote are syntactic nonsense. So it's clearly quite not simple as that. 
What do you mean?
In what sense? They're incomplete, certainly, because the actual body of the function is irrelevant to the example. However, what is there is syntactically correct. If you want a complete version, this suffices: let curried = im =&gt; a =&gt; curried =&gt; func =&gt; "bmarkovic"; let notCurried = (im, not, a, curried, func) =&gt; "doesn't understand currying";
I would say it’s more of a mixture of group think and people just liking to feel that their knowledge is superior. Usually it’s the people who only know one language and they just think it’s the best language in the world. 
People often have the attitude that the things they are into are better than the things others are into. Programmers can choose which languages they use, learn and get advanced in. There are different ways to objectively measure how good a language is (such as performance, cross\-platform support), as well as various other factors which may be a bit harder to measure and may not be better or worse, but about complexity, meaning a complex language is less suitable to get started with if you want maximum progress. JavaScript is very useful because it's so widely used and supported. That's not to say it's the best language for every task. Historically JavaScript has been the only language it's possible to use in a website front\-end, excluding plugins like Flash and Java. JavaScript is losing this exclusivity with WebAssembly support in browsers. Can you give me the links for some of these popular Twitter threads? I've not used Twitter all that much. Though I've got used to how threads work there I found it unintuitive at first and does not promote good discussion with sufficient depth in various cases. There is a lot that you could benefit from in other languages, but mocking you or others for using / liking JavaScript is probably not a good approach in encouraging you to do that. The V8 engine is written in C\+\+, node C\+\+ addons can be written too, and these perform a lot faster than JavaScript. New possibilities are also emerging about integrating JavaScript with WebAssembly code that has been compiled from a variety of other languages.
I have written some lower level code in C\+\+, and in some ways that implementation is better than the JavaScript one. It's very satisfying to write some code that makes the most out of a computer's hardware capabilities, or at least carries out a task so quickly that I very satisfied with the performance and can not think of any further ways to speed it up. It's possible to write JavaScript code that is very C\-like, and then porting that code to a node Addon (C\+\+, but bear in mind C code is valid C\+\+) is quite easy. The difficult part is to write the bridge in C\+\+ that's the interface between C\+\+ and JavaScript (but I think it's gotten more standardised and better documented now). Some of these 'elitists' are able to write much faster code than you are able to do so if you stick to JavaScript. If all they want to do is boast about that, it's not that useful, but possibly that's not all that it's about and you could learn from some of them. The V8 JavaScript engine keeps getting faster (until recently try/catch was a big performance hit), and that V8 engine is high performance C\+\+.
It's also there are some fairly well known problems with JavaScript. When some people say their language is superior to JavaScript, they could be correct, but it raises questions about how that superiority is measured.
Its not a "pure" FP language, like Haskell and friends. JavaScript allows for mutations, side effects without control and all the inheritance from OOP. That said, its a very elegant language, you can emulate a more FP approach easily, and with a few libraries you are very close. Combine TypeScript on top and you are all set.
"👍🏽".replace("🏽", "🏻"
"👍🏽".replace("🏽", "🏻")
You'll run into it for a while yet. There's two types of software development. Most of it is gluing pre-made pieces together to solve a specific problem. This is what makes companies the most money and what motivates the shipping and product type developers. The other type of software is building the pieces to glue together. It's more difficult and less directly profitable but is held in higher esteem and is the exploratory and craftsman type developers. You need both types of development and it's good to have both in an organization and on a team but people love feeling superior to others so idiot developers come up with bullshit reasons to justify their superiority. The people shipping software to make lots of money or peoples' lives better have easy and obvious indicators of their success while the plumbers have to satisfy themselves with being the purveyors of Real Engineering. People looking to feel superior to frontend plebs, usually compare the difficulty of Real Backend Engineering versus gluing things together (generally their experience on the frontend) and come to the conclusion that frontend is dumb/inferior/for idiots/whatever. Frontend development as a discipline has a really short history. It didn't even have a name until 2006 or so. Javascript got **50 times** faster in a year in 2008. This fundamentally changed what was possible on the frontend and ushered in much more rigor in what was involved in frontend development. There's a period from 2005 (launch of Google Maps) and 2008 (the browser engine shootout) where basically most of the efforts on the frontend were getting the browsers to behave reasonably consistently. Before that, frontend was mainly about slicing comps, building templates from data assembled by the backend dev, etc. So for the period from roughly 1998 to 2008, frontend was generally closer to what you'd expect out of designers these days and that's the seed of the idea that frontend development isn't real development. As of now, frontend and backend development are both legitimate disciplines and both are roughly as difficult but in different ways. I'll note that State is what makes software hard so whichever end is doing the state integration/coordination gets their difficulty bumped up by a lot. It can happen on either end but it more commonly happens on the backend in the mobile era so it can be done in one place and the results shared with both the web and mobile frontends. Aside from state coordination, Backend development where you're gluing pieces together is very simple. The inputs are predictable, the outputs are predictable, your performance budget is usually fairly high compared to your runtime perf. Hard Backend stuff is as difficult as you want it to be but is generally done by a very small number of people. I have deep respect for the kernel, database, cryptographers, information retrieval specialists, and distributed systems experts. The difficulty is generally where you expect it to be and the answers tend to be fairly widely applicable. I'm in an explorer/craftsman type developer and it's really satisfying to work on hard backend problems. Frontend development where you're gluing pieces together isn't that hard but it's quite a bit harder than glue backend dev. Frontend development intersects a lot of disciplines: graphic design, ux, copy writing, software development, and perf tuning. You generally need some degree of all of them in order to be a reasonably good frontend dev. I think it's roughly as difficult as gluing backend when you factor in coordinating the state. The problems in frontend dev tend to be less clear cut. They involve human preferences, cross platform issues, and the relative immaturity of the frontend dev experience. Doing Real Frontend Engineering where you're building reusable abstractions with a fairly hard real-time deadline (60fps) on varying hardware in a language and environment that doesn't leave that much performance on the table while doing it on multiple software platforms and also trying to limit the amount of code you're writing. It isn't the hardest thing you can do but it's not that easy. Hard problems in Frontend Development tend to be a messy slog and tend to wind up in an ugly hack or a social compromise, neither of which is reusable. So that's my take. I've been doing web development professionally since 2001 and writing Javascript pretty much the whole time (I got my start in JS working on the Mozilla 1.0 frontend). I remain a frontend specialist in that I do both but tend to run 40-70% frontend and still have to deal with the condescending attitude from junior backend engineers when I meet them.
Probably loads. But just ignore them. I don't come across it anywhere near as much as I used to. Most people have realised that the JavaScript community has a bunch of very smart developers in it and some great things, both complex and simple are being built with it. It's often just ignorance or lack of experience that leads people to think/behave that way. All you can do it politely try to educate them and if they dont respond to that then just move on. It's frankly their loss 🙂 I came from C++, to C# and now JavaScript and I can safely say the top tier devs are just as smart as each other in each community 👍
I really don't like javascript due to its shortcomings (loose typing, undefined property acccess, heavy, etc), but it's still my most used language. It's ubiquitous at work and thus it tends to show up in my personal prototypes as well.
Haha it’s the same decades ago except it’s assembly programmers on Java programmers. The elitism of ppl who build lower lvl stuff will always be there. I’m sure sooner or later, JS devs will shit on other higher lang devs too. It’s funny if u think about it. As devs we love to create solutions and abstractions so things just work. Developers can use our solution and not worry about the hard parts... then we make fun of those developers.
It never stops amazing me when people still complain about that. While macbooks still technically have one button I guess, I've never actually seen a mac that couldn't right click.
Npm was horrible under Windows due to the systems inherent problems with nested paths and otherwise, it's gotten way better, but most of my colleagues (well, actually, all of them) have constant troubles with npm (and, yarn) under windows still. Deleting node_modules and such. Npm itself if buggy enought, which is why i switched to yarn, but i can attest to npm in general being out of whack on windows, like so many other web-dev-related tools. Of course, if the job demands it: windows.
Not at that point in time no. Was a quick reply from my phone
So we are clearly talking about different things. You asked what kind of things I share, and then complained about sharing some different settings. You are not supposed to share all of the .idea files, your workspace is a prime example you should exclude. If you can’t see the benefit of sharing some boilerplate configuration (like the other things you didn’t comment on), I don’t feel the need to convince you.
I agree, True devs make their own "framework"
Nice! [Link](https://github.com/kenshinji/yddict/blob/master/README_en.md) to English README
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kenshinji/yddict/.../**README_en.md** (master → 58d4996)](https://github.com/kenshinji/yddict/blob/58d4996a01be6edf3049d4fa8efde65505c65de6/README_en.md) ---- 
Thanks, made the update
Yeah because I just love debating with arrogant people who have no idea what they're talking about. Now how about you stop proving Dunings Kruger correct and go learn something.
For now
Sadly for every decent, supportive, intelligent human \- you'll find one sad, little (usually white boy) who thinks he's cleverer than everyone else. Ignore that guy.. he's a bell\-end!
We beefed up the JavaScript **[AI Mind](http://ai.neocities.org/AiMind.html)** for MSIE by **[re-organizing](http://cyborg.blogspot.com/2018/06/jmpj0605.html)** the **[SpreadAct](http://ai.neocities.org/SpreadAct.html)** and we got everybody excited about it on the **[AGI List](http://agi.topicbox.com/groups/agi)** and in **[comp.lang.javascript](https://groups.google.com/d/msg/comp.lang.javascript/IT_ZpzG03iQ/MXvFu0ScAwAJ)** on Usenet. 
I have created the first Fluent Design web framework based on jQuery and latest Bootstrap 4. [https://nespero.com/](https://nespero.com/)
I know for a fact geocoding is not unlimited. Just had to work around that issue last week. 
The API is OOP, which you *have* to use, that's the point. So you're always using OOP.
People don't like them because they are a wrapper around prototypes, obscuring how the object system actually works in JS. The thing is, they're not really classes, they just superficially look like classes.
Well every time someone mentions that I agree, but you can't use anything else for front end on the web.
Classes are great fun, ignore those who tell you to doing everything via function and prototype chains - they are normally trying to sell you training. Just try and use extend sparingly and remember it's still okay to use a function for simple things and you'll be just fine.
I have this convo with my brother all the time (a python developer) and its just a matter of taste in my opinion. He likes static, I like dynamic
Post the code for the function and the code where you're calling the function. 
Something fishy is happening with the result of your `Math.random()` call, so the obvious code to share is the code that includes this call as well as what you do with the result. Right now there is literally nothing to go off of here.
Same here on my Win10 machine. I simply gave up on yarn, &amp; just use npm. Fortunately there is a 3rd alternative: [https://github.com/pnpm/node\-package\-manager\-benchmark](https://github.com/pnpm/node-package-manager-benchmark) 
This is the array: `enemyAttackList = ['images/enemy_ouch.png',` `'images/enemy_kick.png'];` And the function: `randomEnemyAttack = enemyAttackList[Math.floor(Math.random() * enemyAttackList.length)];` Called math.random function: `function kickAttack(){` `if (currentPose == 'images/you_idle.png'){` `currentPose = 'images/you_kick.png';` `youIdle.src = 'images/you_kick.png';` `enemyCurrentPose == 'images/enemy_idle.png';` `enemyCurrentPose = 'images/enemy_idle.png';` `enemyIdle.src = randomEnemyAttack;` `}` `else {` `youIdle.src = 'images/you_idle.png';` `currentPose = 'images/you_idle.png';` `enemyIdle.src = 'images/enemy_idle.png';` `enemyCurrentPose = 'images/enemy_idle.png';` `}` `}` And called function that math.random is in: `kickButton.addEventListener('click', kickAttack);` Hope I've selected the right code and doing the markdown properly. I'm in my first class for programming at my university so really still a newbie.
 This is the array: `enemyAttackList = ['images/enemy_ouch.png',` `'images/enemy_kick.png'];` And the function: `randomEnemyAttack = enemyAttackList[Math.floor(Math.random() * enemyAttackList.length)];` `Called math.random function:` `function kickAttack(){` `if (currentPose == 'images/you_idle.png'){` `currentPose = 'images/you_kick.png';` `youIdle.src = 'images/you_kick.png';` `enemyCurrentPose == 'images/enemy_idle.png';` `enemyCurrentPose = 'images/enemy_idle.png';` `enemyIdle.src = randomEnemyAttack;` `}` `else {` `youIdle.src = 'images/you_idle.png';` `currentPose = 'images/you_idle.png';` `enemyIdle.src = 'images/enemy_idle.png';` `enemyCurrentPose = 'images/enemy_idle.png';` `}` `}` And called function that math.random is in: `kickButton.addEventListener('click', kickAttack);` Hope I've selected the right code and doing the markdown properly. I'm in my first class for programming at my university so really still a newbie.
Lol, it made a spoiler out of every line of code XD Try using 4 spaces as a tab in your code, and then make sure that all of the lines have at least 4 spaces of indentation, this will let markdown create a code block.
It's hard to tell from how you laid it all out, but is this part inside the function you call again? `randomEnemyAttack = enemyAttackList[Math.floor(Math.random() * enemyAttackList.length)]; ` If not, then I think that's the issue. That line runs once, sets the value of `randomEnemyAttack`, then that same value is used forever.
Argh, it won't let me make code blocks out of it :( 
Ah man, you beat me to this answer by 3 minutes :)
The space goes after the comma, not before it.
Sorry, I edited my original comment, I found the code block button now haha. No, it isn't in there. The last function makes it so I can click on a button underneath which will then change the characters image from idle to kicking. Hmm, I see now. So how would I solve this, by simply putting my math.random inside the addEventListener?
He talks about having trouble with the “this” keyword; that’s not React or ES6, that’s fundamental to how JavaScript has always worked. That’s the difference I was trying to get to, really. People who have used JS for years, but only in the browser to manipulate the DOM, and people who can develop software in JS. For the second group React isn’t hard to learn (I don’t remember any problems with it, and went straight from reading the docs into my first professional project). People usually imply JS developers must not be good at CSS and therefore you need both types of people, but it really isn’t true. A lot of front end devs with decades of HTML/CSS experience historically did server side coding as well, so they have general programming experience.
Classes are fine, yes they're prototype sugar but so what, they do make matters easier and even make you think twice before hopping into elaborate hacks since they're also limited while with prototypes anything goes. Personally i haven't written iife's for a couple of years now and i'm good with it, hasn't really had a negative impact at all.
Woah, thank you so much. I didn't realise I was actually just running it once. Do you suggest that I create a for loop for it which I then put it in? Or should I just leave out the variable and still write the math.random like how I did before?
Like I said, what you want to do is wrap the statement inside of a function. The function should return the enemy it selected from the array. Then in the `kickAttack` function, where you previously used the variable `randomEnemyAttack`, you now call this new function, forcing the code in the function to run again, and thus provide a new random enemy.
Wooh I was fast for once! Usually I get beat by others, and not by 3 minutes but by hours XD
There are definitely elitists WITHIN the JavaScript community, especially those who've made super popular libraries.
They do indeed obscure some of the details. For example: * ES6 classes are functions (that set up protoype chains). * What you actually create is `MyClass.prototype`, while it looks as if you are creating `MyClass`. However, in my experience, pretending that the illusion is real works well and tool support helps. Notably, what “real” classes are varies wildly between programming languages (Python, Java, etc.), so that in many ways, JS classes are real classes. As for using them: I’d keep inheritance hierarchies shallow and classes light (for many things, external functions work better than methods). In TypeScript, you can often work with interfaces for objects (which work structurally and often don’t have to be “implemented”) and don’t need classes then.
Hmm, so it should look something like this no? function EnemyAttack(){ randomEnemyAttack = Math.floor(Math.random() * enemyAttackList.length); return randomEnemyAttack; } And then I added it to my kickButton.addEventListener('click', kickAttack, EnemyAttack); It's not working I'm guessing it's my function then.
For what it is worth -- I get ragged on as a JavaScript developer. Mind you, I am (well, OK was...) fluent in C, 6502 assembly, 8088 assembly, Clarion, Pascal, ForTran (and yes I'm old enough I spell it that way), a dozen forms of BASIC. There are prolly a dozen other scripting and domain-specific languages tossed in there as well. I've written everything from DOS based device drivers to directly batching binaries to fix bugs. Yet, right now I make my money in C# and TypeScript and SQL. Yeah... I'm not a "real" developer. All of that said, I *will* say this -- I think people who understand low-level programming make BETTER developers, regardless of the end-language used. If you understand the difference in how different number types are handled, you can make better software decisions. If you understand bit-wise operations and bit-packing you can come up with more efficient data-storage and transmission methods. I'd say 99% of the time I don't worry about these things in JavaScript, but there have been a few times I've written some CPU/memory intensive code and bit-packing (where I could store 53 different booleans in one javascript number) reduced the memory foot-print of my application and that, in turn, make it runable on mobile devices. I could do that because of my C and assembly background.
Where did you get arrogant? Because I shared my opinion? Stop projecting
Go back to school and learn something.
It's cool that you can do this in JS but the marker is pretty limited compared to what you can use with Vuforia or other native implementations. Things would improve a lot if/when Google and Apple expose their native AR APIs to the browser.
What do you mean?
Probably because Javascript is eating the world and other developers feel threatened.
Alright, thanks a lot. So I figured the function must look like this: function EnemyAttack(){ return Math.random() * enemyAttackList.length; } But in my live preview it now just returns an undefined image.
Alright that's close, just one step is missing. When adding the function, you only took the part of the code that chose a random index, but you discarded the part of the code that used this index to select the enemy. So you need to keep that bit as well. `EnemyAttack` would return the actual enemy image selected from the array, just like how your `randomEnemyAttack` used to contain an enemy image.
Using var, let or const does actually make a huge difference! There’s a reason a reason they’ve been added to the language. Also at this point they still count as vanilla JS since most browsers support it.
butwhy.gif
curious what there even is to disagree with in my first comment. Classes are literally in the ecmascript standard and recommended for use over instantiable functions... they didn't go to all the trouble of adding them just to look at... is there a legitimate use for instantiable functions besidesyou backwards compatibility (perfect example, I can't use them at work because of the requirements of better-than-babel backwards compatibility and vanilla js only on my main project) or are you all just being butthurt about having to learn new things? 
[removed]
Google has some experimental stuff (note: I haven't tried them yet) for both [Android](https://github.com/google-ar/WebARonARCore) and [iOS](https://github.com/google-ar/WebARonARKit) if you want to play around, but you're right that it'll be nice once the APIs are included by default.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://github.com/google-ar/WebARonARKit) - Previous text "iOS" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
If you ignore internet people, you won't encounter any elitists. Real people don't act like that once they're 15 or so. Only internet people act like that.
I'm primarily using js but I'm using py for some things to do with my API testing. It is beautiful. Honestly I would love for Python to run in the browser and everywhere but it doesn't. So my job is still JavaScript/Typescript.
How do you send in updates?
python is dynamic too
Hi /u/ElThomas, For javascript help, please visit /r/LearnJavascript. Thank you!
Also because they love to talk shit about its performance or design or features and are horrified to find out its actually a damn good language. Its the lisp we've been looking for since the 60's but never found, and its been hiding in plain sight. Weak dynamic typing, async everything, first class functions, prototypical inheritance, strong sandboxing, and more make it a sweet spot among all languages for productivity and thats why its eating the world.
From our sidebar --&gt; **Specifications:** * [ES Draft / ES Next](https://tc39.github.io/ecma262/) ([repo](https://github.com/tc39/ecma262)) * [ES 2017](https://www.ecma-international.org/ecma-262/8.0/) * [ES 2016](https://www.ecma-international.org/ecma-262/7.0/) * [ES 2015](http://www.ecma-international.org/ecma-262/6.0/index.html) * [ES 5.1](http://es5.github.io/) 
The system requirements are much lower for the marker based AR. Ive used this library and it runs quite well on older devices if you optimise correctly. Not the biggest deal as people interested in AR usually have newer tech but inclusive minded development is always nice
Language issues aside, most of the elitism comes from falling prey to the Stack Fallacy, a mistaken belief that the layer above the one you specialize in is easier. This happens in all industries, but Hackernoon has a decent write up regarding software https://hackernoon.com/the-full-stack-fallacy-why-full-stack-engineers-dont-actually-exist-1b8837383144
If your'e serious its because the barrier to entry for websites is so much lower than apps as all you have to do is go to the URL. So many people arn't willing or cant be bothered to download an app but most people will go to a URL.
Yes
At the bottom of the sheet, use the “report an issue” button. Easy Peasey. 
I created a reactive template literal renderer which uses custom HTML/XHTML parser to optimize template literal processing and rendering speed! A bit similar to YallaJS, lit-html and hyperHTML but slightly different angle of approach! https://github.com/terotests/doremifa
not in my office, but it's at least presented as playful banter... I write a toy language... yours still needs to to tell it how to do every little thing 4 times before it understands... ( public static string foo STRING&lt;no, really, i said string&gt;)... whether and how serious they are is hard to tell 
I made this synthesizer sequencer with React + Tone.js. Made it a little while ago, but finally sharing it around now. [Beat Bucket](https://beatbucket.io)
I want money so I choosed React, more popular, if Vue gets more popular then I just go for it, I never marry a Framework. 
Okay, so now I called the function later on in my code like so; kickButton.addEventListener('click', kickAttack, enemyAttack); (Don't mind the lowercase e here, I changed that in the function as well, because y'know, camelCasing.) But it still just shows an undefined image. [You can see it here](https://i.imgur.com/1PuMbjs.png)
Depends. I don’t get much flack because the devs I hang out with don’t rib on devs very much,except in actual good natured ways. But if anyone does, I always like to point out that “there is no upper limit to how badly you can write a program in C++” and “if speed is as important as you are claiming, I expect to see all of your code rewritten in Assembly.”
Cool thanks for letting me know.
Even despite this, many "problems" arise from people not understanding the language. As such, they have a multitude of issues no matter what language they are using. 
Have you looked into using WASM compiled code? I did a couple of months ago, but only had a look at it, and it seemed like continuing with my JavaScript was a better option just then. I'll have another look at it though, it will be nice to compile code from a faster language into JavaScript and have it available cross\-platform.
github: https://github.com/lusaxweb/vuesax sidebar docs: https://lusaxweb.github.io/vuesax/components/sideBar.html
github: https://github.com/lusaxweb/vuesax 
that's really neat! I should start learning this soon. Have any good free tutorials or Youtube Links to get started? I've had trouble finding good ones.
I like Gatsby and I see it’s benefits for things like large documentation sites. But for a smaller personal blog, Gatsby requires way too much configuration (of course there are presets you can just clone). I still prefer Jekyll for my blog 
[`addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) only accepts a single listener function; the third argument is treated like a sorf of options object instead. I don't think you really need to have both be separately called by the event though. It seems fine to just have `kickAttack` call `enemyAttack` like before.
We've found the Fortran programmer!
I think the syntax is a real advantage in yarn. I can read it, or write it, and my coworkers will know what to expect of it.
Is there a better example somewhere? The pen doesn't work on my phone.
I think you might be able to do this in css. New challenge for you
Depending how far you are I to your JavaScript journey this might be a big leap, but I'd recommend looking at React and possibly Redux. You'll then easily be able to definitely react component that represents these cards. For highly nested stuff I'd look into higher order components. Redux is a really nice way of representing the state of your application and works well with React. But if you're a beginner it might be a bit of a jump for now and you can do without it for a simple app. 
Is it Alexandra or Jerome? 
Let and Const *are* vanilla JS, and although they don't always make a difference, it's good to show you know ES6, since that is quickly becoming the norm. And that's weird that ++ didn't work, might just be a Greasemonkey thing.
Theres also a whole other set of more "traditional" language developers who want to get in to JS. These are the developers who see where the industry is going and want to learn understand whats making JS so popular. Mainly JS is solving some difficult problems with a lot less code, using an easier to understand syntax a less feature rich language than many other solutions. Those are all good things.
What a dumbass.
This tends to help people to convert react apps to Gatsby not comparing them 
[https://codepen.io/jeromeetienne/pen/mRqqzb](https://codepen.io/jeromeetienne/pen/mRqqzb)
This is actually really neat, I'm excited to use this.
What? The person that made AR.js is Jerome.
I re\-made a silly npm package for dynamically changing comments in HTML: [commentus](https://github.com/HaykoKoryun/commentus)
JS is alright-ish if you use TS instead.
My answer after only reading the title: use ASP.NET Webforms (4.5).
Article also mentions an Alexandra with same last name as Jerome later on in article...both with Etienne 
They are both dynamic. Python's types are strong whereas JS' are weak. There really isn't anything good about weak types. Getting a type error is better than getting a garbage result. Weak types were a mistake which Brendan Eich wouldn't repeat if given the chance.
Thanks! I've heard of react before but wasn't quite sure what it was. This is really helpful.
You're pleasant. Really convincing argument there champ
Which you host on github which includes git whoch is a command line tool that adds a license to your project 
Ok yeah, monkey patching works. That's kind of cheating though. ;) Also if I'm guaranteed to have my code run first I could just save the references to the original non-monkeypatched functions.
This hit a little harder than it should 😔 
You might like Eloquent Javascript a little more, you can find free and legal copies online or purchase it as a physical book. If Eloquent Javascript is still a little heavy you can easily find free and illegal copies of Head First HTML Programming: Building Web apps with Javascript or Head First JavaScript Programming: A Brain-Friendly Guide or purchase the physical book or ebook. If the head first books seem too light or easy Jon Ducket's JavaScript and JQuery: Interactive Front-End Web Development can easily be found for illegal download or as a legal download or physical book. These are the most frequently recommended Javascript books, I've skimmed all of them and they are good books, but none of them go into ES6. 
&gt; Referencing properties on an API is not OOP. Using and depending on an OOP API is not using OOP features, is that your point? I mean, I can see it making sense, what I can't see is being aggressive about something that is clearly debatable. Let's just stop being assholes and move on, I hope you have a nice day.
webpack with css-modules can do this. But it’s a bit pointless...
It looks pretty. If I just didn't hate sidebars.. 
Some slightly unotheodox advice, but I'd also suggest is have a look at Elm. It's a compile to JavaScript language but is very different to JS itself. The reason I suggest it is because it basically has React and Redux built into the language. It's very beginner friendly because the compiler error messages are amazing. Learning Elm actually helped me to understand the concepts behind Redux better and made me much better at writing functional style JS. Where there's a million ways to do everything in JS there's generally just a couple in Elm, and the approaches you learn there translate well back to JS. Here's a video on it if you're interested; https://youtu.be/C2npla7DwVk
Reminds me of this [134 character golfed animated Yin Yang](https://www.dwitter.net/d/7836). (134 doesn't count the HTML or framework) A=r=&gt;x.fill(x.arc(960+R*C(t),540+R*S(t),t?r:1e4,0,7)) f=t?!f:0 t+=f*3 x.beginPath(A(R=180-f*3)) x.fillStyle='#'+(f?'ddd':559) t&amp;&amp;A(45)
This doesnt work as well. 
Sounds like a job for a component based frame work the foremost of which would be react. it is a bit of a steep learning curve for beginner but it is designed for exactly what you want. It is created by and powers the highly interactive pages of Facebook. If you want something quicker to learn then go with jquery. I did something similar by creating ajax function that fetches the data and loop through them to create the cards. Before inserting it into the element I want. react would allow you to make each card it’s own life with its own functions to manage itself 
Beautiful
This is kind of weird since cra and Gatsby are not really intended to solve the same problem. I think a lot of people do use cra for projects that might be better off as a static site, though, myself included. I started my first real Gatsby project at work yesterday and love it so far - great developer experience and deploying to Netlify is sooo easy.
I see it now.. down the page more it says 'experimental'. I like how they take an important point and move it down the page. 
vaporbase?
Nowhere near as bad as what you’d get for mentioning you use PHP
Haven’t used vue yet but the name vuesax is unfortunate 
Please change the color. Gave me a seizure.
possibly
What?
raspberry pi
well, at least it beats their original name *vuecox*
Sounds good. I was never looking to pick a fight. Good day.
This is the best answer.
Wow, is vuesax JavaScript reincarnation of epic sax guy ?
If I had to choose between mongo and rethinkdb I would choose rethink because of Reql. But between rethinkdb and Postres I would choose postgres because it is relational, supports transactions, JSON and has tools for everything. If your project is not a new twitter, then there should be no considerable performance problems. With Rethink there will be not that much tools and integrations than with mongo.
Ha 😂
This is slightly off topic, I know that js is very resource heavy and it is possible to optimize. Do you think you can point me in the right direction of what topics I should look into or any resources you may have on optimization?
What is up with this medium alternative website? Cool article though
Grats! :D
&gt; Getting a type error is better than getting a garbage result. Why? Wouldn’t both just highlight a problem in your code, this equally useful? And maybe best effort is better than no effort in some cases. As in, you want your code to run however well it can, even if there’s a fucked up type somewhere. Don’t stop the presses cuz I mixed up my p’s and q’s. People will still get the general idea.
&gt; Is this some sort of trolling from people who write code at a lower level? Why? The level doesn't really matter here. There are dozens of languages at the same 'level' as javascript. Javascript gets shit on because it's an awful language, full stop. That doesn't mean you shouldn't work in javascript, it's a very powerful language in terms of what you can accomplish based purely on the fact that it is the language of the web. That alone means there is always need for javascript and people that can write it (and it will be decades before this could _possibly_ change). However, what I would recommend is to not think of yourself as a '&lt;language&gt; developer', where language could be anything. Rather be a software developer, a polyglot developer. Starting in Javascript has pros and cons in this regard but as a couple examples of a major pros: Prototypical inheritance allows you to model almost any code sharing structure in existence, explore them all by building them in javascript. This will give you really good base to understand many other languages. Javascript also allows many programming paradigms; functional vs OOB vs procedural. You can (and should) explore them all which will allow you to transition to any language you're interested in (or the market conditions direct).
[relevant xkcd](https://xkcd.com/221/)
&gt; Wouldn’t both just highlight a problem in your code, this equally useful? Sort of. Thing is, the further you get away from the point in time where the faulty line was written, the more time you'll waste. You have to go back to your editor... to that file... to that line and then put the relevant pieces back into your brain to get a good idea what's supposed to be going on there. Getting a squiggly is better than a compile error which is better than a runtime error which is better than a silent error-ish result. The earlier it fails, the better. Said garbage result also needs to surface somewhere in the UI where it can be observed and hopefully also be noticed.
It`s working on Desktop version of Google Chrome. 
I looked at it, but it's still too early I heard Microsoft is pushing C#, but it's still far off
Does use of git as a VCS compel any specific license on the code/files it may then store?
Great initiative. Looking forward to it :)
Working nicely on mobile. I think I'm gonna live it! 
This is r/javascript \- if you want help with C, you might find try r/C_Programming.
I definitely will. I just wanted to post here to see if anyone has been in my situation before (esp since I want to learn C to work with web assembly)
Who gives a fuck, js is probably still one of the largest markets for devs.
If you use React or Angular (or some other JS framework on the front\-end) you can achieve this with CSS Modules without any kind of json file at all. You would do this normally to reduce file size (mainly) Also; maybe you want to eliminate render blocking at the same time because you are loading these files from the backend. In this case you can import them through the front\-end instead. Since obfuscation reduces some overhead combined with your JS code being uglified in production, you would save some more file size. This is the reason I would personally mangle CSS files myself. And its easier to achieve if you use a framework for the front\-end.
Not to be 'that guy', but settings is misspelled in the sidebar
That is a really broad topic and there are different ways to optimize. Trade-offs in one direction over another. Optimizing for speed often means using more memory. Storing temporary values for faster look up. On the other hand, optimizing for memory tends to run slower instead. Often the best optimization is a matter of finding a different way to solve the problem. I'd say at the very first, the best thing to do is look at calculating primes. The simple approach is to go through the numbers and see if it is a prime or not. The faster approach is to find every number NOT a prime. (Create an array, mark off every multiple of 2 greater than 2, every multiple of 3 greater than 3, etc. When your done, you have a list of primes.) 
I wish they made a react version. It looks super neat!
I was thinking the same!
I understand your rationale behind this idea, I do not intend to discourage new ideas, but I do see many maintenance problems in the long run, maybe you should consider: 1. legacy app/code still exists, of course no one wants to touch it, everyone, especially new hires, want to work on new features, greenfield new "app", eventually there is only one person in the team knows the legacy code. You desperately depend on that person, that person is unhappy, if he/she move on, you will have a hard time fixing anything in the legacy code. Of course, you can assume the legacy code will NEVER ever fail, but I suggest that assumption is a mistake. Software fails. No matter who wrote it, how good it was, it will encounter unexpected problem over time. 2. Different stacks create boundaries, previously it's between the industry, NOW it's within a team. People feel tired to learn all those different frameworks, so for a new hire, either he/she needs to learn all of those stacks, or he/she stays in his own "app". This makes move people around within the team harder not easier. "Don't work on navigation, unless you learn this new framework." -- Exact same problem you were trying to solve. 3. For higher management, CTO/project manager/lead, this obviously increases learning curve, maintenance effort. 4. More vendor code needs to be pulled. Even you can lazily pull the code you need, but there is always some extra code due to different frameworks operate in different ways. If you can somehow test/compare the actual bundle size for a self-contained use case or app, like "online check-out feature", I would guess the more framework you use, the larger the bundle size. Other than size, the more dependencies the more failure points. Sometimes I hear news like framework-X/library-Y has a major security bug, I think: "Thank god I didn't choose that one!" If you use every frameworks, then you very often need to deal with vendor bugs: either you create issues, or work on it if it's open source, or upgrade versions after long waits for their team to fix it etc.... Again, I feel your pain, and I can see the problem you are trying to solve. But IMO I wouldn't buy this solution, at least it needs to be improved. I'm not trying to discourage you, only trying to point out some potential issues for you to consider. 
In my opinion, the only use for sticking with the manual prototype instantiation approach is implementing fancy tricks that should probably be avoided in the first place. That's not to say I don't find it useful, but if you expect others to be reading and working with your code, classes are much better from an understandability perspective.
you misspelled module as modules.exports
Thank you that was actually a very useful example.
\&gt; MySQL databases are overrated. I know it’s been done before, but i wrote my own file based database in Nodejs for a production game that turned out to be quite efficient and manageable. It currently supports 20k registered users and 200\+ online users at any time. Just a heads up, file I/O is going to shatter your dreams if you ever need to scale. 
I’ve worked on that a lot, i can scale pretty comfortably.
As a programmer/saxophonist I was really excited...
yea, I know what cases manual prototyping is good for... couldn't say for classes... often the 'best practice" stuff isn't always the most performant
how is general performance at 10k+ concurrent users?
a couple hundred MB
Wrong sub?
Just use a closure. 
5
No, you are being an r/iamverysmart when no one asked for your fucking opinion. What an asshole
Sorry, I mean performance as in speed. What's the average TTFB for each of your api routes at &gt; 10k concurrent users?
I'm curious, what point marks 2008 javascript 50x faster than 2007 javascript?
50ms - 100ms most of the API is websocket based and most requests take about 20ms - 50ms for the server to generate and send a response
Yeah. I've implemented a number of things in our codebase that go against best practice for the sake of performance, but I always have to heavily document that code with comments so that those who stray there understand the what and why of the code I have written. It comes down to a cost-benefit analysis, and most of the time, sticking with best practice is the better choice.
How?
Without any doubt. Create your makeup, set transform origin, set up key frames on a repeating cycle and you are done. Might take some trial and error but if the goal is a rotating yin yang then it’s 100% achievable with CSS only
The documentation for [parseInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) should answer all your questions.
Mozilla has DeepSpeech, [https://github.com/mozilla/DeepSpeech#using\-the\-nodejs\-package](https://github.com/mozilla/DeepSpeech#using-the-nodejs-package), which has a Node.js client.
That is *very* nice
Vue is fantastic. I just in the past 6 months returned to my roots of web dev after a year in school with Python and Java. It was my first time using the framework, it just made sense and I felt like I was at home 
From an academic perspective, I've always wondered how people get this mixed up. I mean, haven't they ever read anything, ever, that had commas in it? I don't believe any language out there uses commas that way (I might be wrong), so it must come down to an "I don't care" attitude---which given this gentleman's spelling is probably the case.
From an academic perspective, I've always wondered how people get this mixed up. I mean, haven't they ever read anything, ever, that had commas in it? I don't believe any language out there uses commas that way (I might be wrong), so it must come down to an "I don't care" attitude---which given this gentleman's spelling is probably the case.
I'm in your exact position so I may not be too helpful but I recently picked up a book called Javascript &amp; Jquery : interactive front end development by Jon Duckett that has been SUPER helpful because it starts relatively slow and builds the theoretical foundation for a couple pages before it goes into the actual teaching (which is also really readable) it's a nice size at 620 pages so I'm assuming it goes pretty in depth (I've only read about 100 pages so far but still learning a lot). My dad is a professional web developer and he said one of his coworkers has this book as well so maybe it can help in the long run too.
So is profile
[👎](https://tenor.com/AcU7.gif) 
There are 10 types of people. Those who understand binary and those who don't
My question was more in regards to learning overall. My strategy for my current project is already set. 
Whoa! That was a good find. Thanks! 
You need to remember an async function returns a promise. That promise can be awaited. forEach doesn't return anything, it just executes the code in the loop, if that code is just something that returns a promise, an async function, yeah nothing is going to happen.
[This will help.](https://www.wired.com/geekdad/wp-content/uploads/2010/10/counting.jpg)
Not caring would bias toward doing it the correct way, wouldn't it?
"...That means that functions can be assigned to variables as you would a Number, String, or Boolean... " Or (am I right?) the return values from functions can be assigned to variables....????
Don't open source it then. That database is worth millions, possibly billions. 
You can use for/of instead of for/in. Like this Async function processItem(item) { // do stuff asynchronously Return something } Async function dothemall () { const resultArray =[] For (var item of array) { Let Result = await processItem(item) } Return resultArray } Ps. Capitalization is wrong here but it sucks to keep trying to fix my phone autocorrect You don’t have to have a result you can just do for of and await the function if your functions doesn’t return anything 
No, functional languages must allow the function itself to be assigned to a variable. Ex: const add = (a, b) =&gt; a + b
People will say dumb things. You’ll still get paychecks every few weeks for doing it. 
(Actually, it was this exact thing that led me to using JavaScript numbers as bitfields. We had a contest for who could calculate the most prime numbers the fastest. Rather than creating an array of 2^53 (9,007,199,254,740,992) elements long, I only needed an array 2^53 / 16 (281,474,976,710,656 elements long) -- a whole order of magnitude smaller. So, rather than use a whole 64 bit floating number to hold a boolean value, I was able to pack 32 booleans inside using each array element. (The real code was more complicated as I used objects and not arrays to get around the array index limits and some other weirdness but anyways, the concept held. By using a solid algorithm read in a book and bit masking learned from coding assembly I came up with a solid contender.)
As a starting point I'd take a look at [hyperscript](https://github.com/hyperhype/hyperscript).
I hate to be that contrarian guy, but I feel like this attitude is why a lot of developers have a certain distaste for Javascript. Lots of people make it out to be the perfect language, but at the end of the day, it's not that much different from others. I mean that in the sense that it does have its fair share of nice features, but it also has its share of drawbacks. While it has its good ideas, it's far from perfect.
I'm still using RethinkDB for the forseeable future. The project has been open source for ages now and there are plenty of github commits so far this year. Forget about the commercial viability and treat it as what it currently is, a community project.
enemyIdle.src = getRandomEnemy(); function getRandomEnemy() { const randomIndex = getRandomIndex(0, enemyAttackList.length); return enemyAttackList[randomIndex] } function getRandomIndex(min, max) { return math.random() * (max-min) + min; } Wrote that on my phone. Hope the idea is clear. 
Can you be more specific? Ive honestly used more C++ than Js, and I feel the wart to gold ratio is much worse in C++ than it is in js. c++ is a minefield of warts. Python has an absolutely arseton of them (than import system). Perl, lol. Java is basically a wart that can be killed. The things people complain about in JS, to me it like "dont use that then", duh. In python I say dont import file scope variables directly. In C++ I advise people to avoid boost and iostreams. in java, well, I tell people to try to use more closures and streams and make fewer classes. What is interesting to me about JS, is what you can do with it. 
To me the uuid isn’t a good example because it doesn’t need to remember any state and users most likely wouldn’t iterate it. Regular function would be more practical. I guess it can serve as an example on how to use generator function. 
Google for a pure js card library to see if it gets the job done!? You could probably customize the look and feel for most of the libraries out there. If you need something more extensible than what they provide then maybe think about trying to create your own step by step. 
Use classes. Get with the times. Classes are cleaner, easier to use, and have become the standard in the industry. 
Ew
I’m starting a conspiracy theory that different browser have different standards on purpose. So these libraries could be created to aid. And these libraries would become popular enough where the whole world would rely on them and therefore visit their website which would generate billions of revenue in ads. I knew it. 
However long you think it will take, double it. Under promise and over deliver. Ultimately be confident in your estimates. If the requirements aren't clear enough say so. 
You probably guessed that english isn't my first language and me being lazy in school i am mediocre at grammer.
https://en.wikipedia.org/wiki/Chrome_V8 the chromium projects released their JS compiler.
I would have to agree with you on your point about C++. I think it certainly has a place where high performance is absolutely necessary, though I do hope other, more modern languages, like Swift and Rust will be able to fill that role in the future. As for Javascript, I feel like you hit the nail on the head for me. To me, Javascript is packed with too many extraneous that makes understanding what is best practice difficult. I think C++ shares this problem to an extent. It has lots of strange features, like the behavior of "this", the fact that it has both a "for x of y" loop and "for x in y" loop, "function" vs. arrow functions, etc. In addition, while making prototyping faster, dynamic typing can often make it harder to reason about proper usage, and is obviously less safe than static typing. As an example, if you're using React with classes, and define a handler for something as a method of that class, you have to call "this.handler = this.handler.bind(this)", something you're unlikely to see in many other languages. Now don't get me wrong, when the language has so many features, a good many of them turn out well, but many don't, and you get what you described as a minefield of warts. Your mileage may, of course, vary, but these are just my thoughts after helping teach a friend of mine some of the basics of the language.
Not really equivalent to the DOM. You'll generally have an API that provide a means of creating windows, basic controls, and drawing other things on windows. Maybe you'll use a library or framework that gives you higher-level APIs or other tools for doing interfaces and handles the lower-level stuff behind the scenes.
`parseInt` expects a string argument that we want to convert to a number (any other type of argument are coerced to strings before parsing). The second argument (optional) is the base (radix) of the number it is in. If this argument is not specified, the there are some rules by which a radix is chosen. This behavior is not consistent across implementations, so one is always encouraged to explicitly specify this argument. (Like `"ab"` gives `NaN` if the base is not specified, but other if specified). `parseInt` *tries* to parse the given string. It picks up all the numbers from the start of the string until it finds an illegal character that doesn't exist in the base system for the radix, at which point it stops (`"123ab"` =&gt; `123` in base 10, but `9131` in base 16). Some rules for using `parseInt`: * Always specify radix * Space, tab, and new line characters are ignored * It only *tries* to parse the string, and can return error values * Always check for error values even if a base is specified So, using these rules, first `101` is converted to string form `"101"`, then using base 2, 101 in binary form is converted to 5 in decimal.
Parent comment was about that it’s not working on mobile
You can try **"Exploring JS"** series from /u/rauschma that goes very deep into JS (basics, and year wise revisions of ECMAScript). The good thing is the books are available to read for online, and only pay if you want an ebook. The books also have real-world examples for JS features and Dr. Axel also maintains a blog http://2ality.com, where he regularly posts new features added to the ECMAScript standard.
Are there any other reasons than changing requirements? Is the complexity clear when you start working? How short are you feedback loops with your customer / product person? The shorter this cycle is the earlier you can react to change. So if you check in every day or every week you can learn about what needs to change earlier, compared to a biweekly or monthly cycle. When planning your project ask for edge cases. Many product people look at the happy path only. Ask for things that could go wrong that might change the requirements.
Looks great! I've got an issue on mobile though. When I try to select a colour by typing in rgb values the window refocused and the colour picker gets closed. 
Gotcha, so I moved the return Math.random() * enemyAttackList.length; into my kickAttack function, one question remains. How do I fill up the enemyIdle.src now? That's the var connected to the image shown in my end result. I assume it needs to be filled by whatever rolls out of my math.random but how do you give a variable.src the value of math.random's outcome?
Thanks, I will fix it! 
You should make the players movement be based on their orientation and not fixed.
It's a common problem and notoriously hard. If you have to give long term estimates, consider multiplying your estimate by _at least_ 2 (if not 3 or 4). Also consider giving a probability distribution rather than a single date. And be absolutely clear that changes to the requirements will invalidate all former estimates. And the requirements _will_ change. So, as much as possible, avoid long term estimates. Prefer to prioritize rather than promise. Start by coding the bare minimum that would be usable and releasable, then evolve it over time according to the customer's priorities. 
Thank you 
But then we use 101.toString(5);
Looks pretty decent, but after getting to 21 points the game just kind of stopped for me. I could still move around and shoot but no more zombies spawned.
That is Text to Speech, not speech recognition.
wit.ai
Good job! I really like your game and considering that this is your first game it is very good, but for some reason I can't move when zombies hit me. 
I don't really understand the question. Sure both can be sort of made to behave like the other, but they are different enough to solve each of their own sets of problems. 
`toString()` can be used to convert numbers to other bases. It cannot be used to extract numbers from strings, which is the primary use case for `parseInt`.
This is a problem for all developers and the solution isn't to become better at estimating. The #NoEstimates movement is about alternative solutions that actually work. https://www.youtube.com/watch?v=D86wG5u-E14 
Looks really nice! There are some inconsistencies though. For example `tohsva` and `setHSVa`. I'd suggest you use `toHSVA` since all letters of `hsva` are abbreviations. Same goes for `setRGBA` etc. This consistency increases ease of use for other developers. Another idea is to let `toRGBA` always return an array (same with the other `to` methods). And then override the `toString` method of that array, to produce `rgba(...)` - the string you can use in your CSS. Passing `true` as the first parameter is not self explanatory, while `hsva.toRGBA().toString()` and `String(hsva.toRGBA())` are. Just a thought.
It doesn't explain the "why", but surely it's easier to run this command yourself than make a post asking the answer?
Ok
oh a backwards run game! Zombies are really fast ô.0 Powerups? What Powerups? Maybe add obsticles and parts that slow down (Zombies just run into it)
Nobody that matters. I'm an assembly language programmer, and spend most of my time in GPU shader code. Anyone programming in Javascript is still a full developer worthy of respect. If someone says otherwise, it is that person I lose respect for while I still give full credit to the Javascript developer. It is VERY DIFFICULT to program cross platform code on the web.
Thanks, I do appreciate.. Sorry for the late reply, having some kind of network problem 
It's way too hard lol
Do you want to learn C just so you can play with Web Assmebly? C is great for certain things but it's pretty low level and can be a pain to work with. There's a huge number of languages that compile to Web Assembly. If you're set on C maybe have a look at C# instead? https://github.com/appcypher/awesome-wasm-langs/blob/master/README.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [appcypher/awesome-wasm-langs/.../**README.md** (master → 8beaca0)](https://github.com/appcypher/awesome-wasm-langs/blob/8beaca06bd4ba9ba8e2b9ed4794b16933e8d9f12/README.md) ---- 
Nice stuff! PS: maybe change the default color to something with better contrast with background color
You said "if you're dumb enough" in your first sentence, while providing a factually incorrect opinion. That's pretty arrogant if you ask me. FYI: you're one of those people I was talking about in my original post, clearly having read somebody's incorrect opinion about OOP and just reiterating it. That doesn't make it correct though, I'm sorry. I hope you'll understand from all the responses you got that maybe you should read about the topic again.
https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange
Saxy?
I can't seem to implement that correctly to make it work.
Good ideas! Thanks for the suggestions, you're right, that should be changed!
Thanks for these suggestions. I will start with head first JavaScript. Seems accessible for beginneres.
His book in HTML &amp; CSS is legendary, but as far as I know his books are dated now. I read that the version of jQuery he used in this book is not the last version. Going probably to use it as a supplement though.
&gt; React is so much more than “just JavaScript”. React is an ecosystem. By this argument you could say that JavaScript is more than just JavaScript because it too is an ecosystem. 
Until they decide to become like Google.
And that's coming from MrNutty. Yes that was intentional
Very nice. One thing I will say, however, is that you chose some pretty generic css class names that will likely conflict with many people's own classes. When building a library to work with masses you should look into prefixing all your classes with something unique like 'mcp-' (material color picker) or something. Other than that very nice.
My problem is that all my code is in the global scope, an don't want to insert all of it it in the request.onload() : var colorz = request.response; console.log(colorz); //returns null this solution does not work as well 
I literally laughed out loud when I died and it said "You fucked up"
show the code trying to implement a hash change listener
&gt; Yes, I do know about AJAX, however I'm running the files directly from my PC, not on some webserver, and so can't use AJAX at the moment. It takes a few minutes to set up a webserver to server static files on localhost then you don't have to deal with this.
As I said, you should probably look into promises or even async/await to better manage your code. At the very least, you could improve what you have by encapsulating your handling code in a function in the global scope that you can call from the request handler.
Regenerate the hash with the new data and `===` to see if it matches the original.
Tried putting: window.onhashchange = updFrame; and also tried window.addEventListener("hashchange", updFrame(), false); after the function. Also tried that second one with "updFrame" in quote marks, with and without the (), and without quote marks without the (). Also tried them with: //let this snippet run before your hashchange event binding code if(!window.HashChangeEvent)(function(){ var lastURL=document.URL; window.addEventListener("hashchange",function(event){ Object.defineProperty(event,"oldURL",{enumerable:true,configurable:true,value:lastURL}); Object.defineProperty(event,"newURL",{enumerable:true,configurable:true,value:document.URL}); lastURL=document.URL; }); }()); placed before the updFrame function. And tried out: &lt;body onhashchange="updFrame();"&gt; The function itself has it's code unchanged. 
[you dont know js](https://github.com/getify/You-Dont-Know-JS)
&gt; window.addEventListener("hashchange", updFrame(), false); &gt; FYI, that should generally be window.addEventListener("hashchange", updFrame, false); 
[JavaScript Allongé, the "Six" Edition](https://leanpub.com/javascriptallongesix/read) [ Professor Frisby's Mostly Adequate Guide to Functional Programming](https://drboolean.gitbooks.io/mostly-adequate-guide-old/)
[The src attribute can only be an URL.](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) You want to [use the \`onload\` attribute](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers), to run a function and set any listeners in that one. function someFn (event) { //... } &lt;img src="someimg.png" onload="someFn" /&gt;
As I said, I tried it without the brackets too and it didn't work.
Nice library! It really makes the scroll animations easier to do.
&gt; Javascript is packed with too many extraneous that makes understanding what is best practice difficult. I feel this way about all languages. When working in python, its very grating to my ears when I hear people say how perfect the language is. Trying making a decent non-blocking service with it - damn near impossible not to hit mines. The duck typing is nice, but object != dict != module, and they all have quirks which may them just so slightly incompatible that sometimes a duck is not a duck. The default behavior of crashing when a key is not in a dictionary is the cause of mountains of boilerplate. converting around between dicts and object another mountain. What I like about js is that I can much more easily draw a line around what not to do/use. For example: "var" is outlawed - never use it. And there is less type overhead, because object == dict == module == everything else too. &gt; "this.handler = this.handler.bind(this)", I've found "bind" to be easy to outlaw regardless. IMO, arrow functions can completely replace it while being more clear about what they are doing. I see a lot of modern reaction seldom involves "function", which means "this" is already pre-bound by default. for binding data arguments in particular, apparently that should not be done at all regardless of bind or closures. https://medium.freecodecamp.org/why-arrow-functions-and-bind-in-reacts-render-are-problematic-f1c08b060e36 
I've used this library before on a SPA. https://github.com/millermedeiros/hasher
I don't think this will work in my case since I want to be able to put my returned math.random in the .src from my HTML file. The function you wrote out will only put one 'anotherimg.jpg' there right? Not the one that my return will put in there.
So you seem to be doing slightly different things than what I'm suggesting. There's probably a bit of a misunderstanding going on here. Don't worry about having misunderstood me, terminology can be difficult when you're new to programming. To clear up the confusion I'm going back to the start and walking you through, this time with code samples. I'll try to be as complete as possible, but I will also leave out irrelevant code to prevent the post from getting huge; you can tell where I left out code by `// ...`. Take special care to note the terminology I'm using, and what it means for the code samples. Try to spot the differences between my suggestion and your reaction, and think of how you misinterpreted that explanation. The very first suggestion I made, was to wrap one line of your code into a function, and call this function instead of referencing the variable that you had at the time. /* OLD CODE */ enemyAttackList = ['images/enemy_ouch.png', 'images/enemy_kick.png']; randomEnemyAttack = enemyAttackList[Math.floor(Math.random() * enemyAttackList.length)]; function kickAttack(){ if (currentPose == 'images/you_idle.png'){ // ... enemyIdle.src = randomEnemyAttack; } else { // ... } } kickButton.addEventListener('click', kickAttack); /* MY SUGGESTION 1 Wrap the statement of `randomEnemyAttack` in a function, and call this function instead */ enemyAttackList = ['images/enemy_ouch.png', 'images/enemy_kick.png']; // Wrap in a function function enemyAttack() { // Return the chosen enemy image (and not just the index!) instead of storing it in a variable return enemyAttackList[Math.floor(Math.random() * enemyAttackList.length)]; } function kickAttack(){ if (currentPose == 'images/you_idle.png'){ // ... // Call the new function, instead of just using the variable enemyIdle.src = enemyAttack(); } else { // ... } } // ... /* YOUR ATTEMPT 1 Wrapped only a small part of the statement in a function */ enemyAttackList = ['images/enemy_ouch.png', 'images/enemy_kick.png']; // You got the function wrapping right function enemyAttack() { // You returned not the chosen enemy image, but only the random number, and without the `Math.floor` return Math.random() * enemyAttackList.length; } // ... // You didn't include a visual of how you were calling the function, so I can't comment on that /* MY SUGGESTION 2 Replace the code inside `enemyAttack` with the full statement that was on `randomEnemyAttack`, without leaving out parts this time */ enemyAttackList = ['images/enemy_ouch.png', 'images/enemy_kick.png']; function enemyAttack() { // I'm suggesting the same format as my last suggestion. In this sample I'll split the line of code up into substeps to give better explanation of what is happening // Select a random number var rnd = Math.random(); // Convert the random number into a random index for enemyAttackList var rndIndex = Math.floor(rnd * enemyAttackList.length); // Use the random index to select the relevant enemy image var rndEnemy = enemyAttackList[rndIndex]; // Return the selected enemy image return rndEnemy; } // ... /* YOUR ATTEMPT 2 No word on the changes to `enemyAttack`, but you attempted to call the function now */ enemyAttackList = ['images/enemy_ouch.png', 'images/enemy_kick.png']; function enemyAttack() { // ... } function kickAttack() { // ... } // You tried having the function be called on click kickButton.addEventListener('click', kickAttack, enemyAttack); /* MY SUGGESTION 3 Don't make the code unnecessarily complicated. You were already using the `randomEnemyAttack` variable inside of `kickAttack` before, and we can just call the new `enemyAttack` function in the exact same place. */ enemyAttackList = ['images/enemy_ouch.png', 'images/enemy_kick.png']; function enemyAttack() { return enemyAttackList[Math.floor(Math.random() * enemyAttackList.length)]; } function kickAttack(){ if (currentPose == 'images/you_idle.png'){ // ... // Call the new function, instead of just using the variable enemyIdle.src = enemyAttack(); } else { // ... } } // No need to change the event listener at all kickButton.addEventListener('click', kickAttack); /* YOUR ATTEMPT 3 Moved the contents of `enemyAttack` into `kickAttack`, instead of just calling `enemyAttack`; resulting in basically a meaningless mess of code */ enemyAttackList = ['images/enemy_ouch.png', 'images/enemy_kick.png']; // Removed `enemyAttack` function function kickAttack() { if (currentPose == 'images/you_idle.png'){ // ... // I have no idea what you put here with both the variable and function now gone enemyIdle.src = ??? } else { // ... } // You added this line to this function, but I have no idea where; it also has no purpose whatsoever being anywhere inside of this function return Math.random() * enemyAttackList.length; } // ... --- And finally, I'll put the full code below as I've been suggesting it the entire time. The original changes were very simple in nature, they were just misunderstood. Only two lines of your original code had to be changed. enemyAttackList = ['images/enemy_ouch.png', 'images/enemy_kick.png']; // Every time you call this function, a new random number is chosen, and with it a new random enemy image is chosen and returned function enemyAttack() { return enemyAttackList[Math.floor(Math.random() * enemyAttackList.length)]; } function kickAttack() { if (currentPose == 'images/you_idle.png'){ currentPose = 'images/you_kick.png'; youIdle.src = 'images/you_kick.png'; enemyCurrentPose == 'images/enemy_idle.png'; enemyCurrentPose = 'images/enemy_idle.png'; // Calling enemyAttack ensures you get a new random enemy image every time enemyIdle.src = enemyAttack(); } else { youIdle.src = 'images/you_idle.png'; currentPose = 'images/you_idle.png'; enemyIdle.src = 'images/enemy_idle.png'; enemyCurrentPose = 'images/enemy_idle.png'; } } kickButton.addEventListener('click', kickAttack); If you got any further questions be sure to ask.
I wan't trying to write the function that you specifically need, it was just pseudocode, an example to get you started, doing the rest of the logic is your job. No, the onload doesn't only work for the page, as you can see in the example and the links provided, they work for each image you set them on. You can either create all your images programatically, that is, on a Javascript file, or load a bunch of images using the onload attribute on each and changing the src depending on the logic you define, like on the examples from the first comment.
&gt; I want to be able to put my returned math.random in the .src from my HTML file. Not sure what this means. You can use a templating engine to interpolate variables into your &lt;img src="url"&gt;. You can have the src point to a route that you setup on a server, which executes code and returns a url with custom params. Or you can put a function on the click handler for the button, which I suspect is what you're interested in.
Thanks for the link. Does it have any layman tutorials for it (and JS signals given it requires that) and also, how much does it slow page load time?
Ha I don’t think there is such thing as cheating when someone says “there’s no way”. You could have overloaded the array filter prototype as well. 
Yes, the latter suggestion is probably what I need. Basically everytime I click on a button it will execute my written function. Then at the end it's running a math.random, the return from that should show either 0 or 1 from the array it's choosing from. So I think the function on the click handler is already in place here. All I need now is for it to actually show the images it's choosing from. This is what my live preview looks like. The character on the right should either show an 'image/enemy\_ouch.png' image or 'image/enemy\_kick.png'. You can see the [live preview here](https://i.imgur.com/Hoo5StT.png). I'm making this for my first class of programming on my university so that's why I'm being very newb\-ish here. Sorry.
Can you post the full example (e.g. via gist) of your code? Have you verified it on a normal webserver, not file:/// protocol? (some of JS is blocked in this case).
Check out the Basic Example section. You'd need all that code on your page, minus the last line under Javascript (setHash). Then in the handleChanges function, you'd replace the console.log line with your code. You also need to download the signals and hasher js files. As far as speed and load time, it would be negligible.
This couldn't be further from the truth. Every reason or tool listed is an additive choice.
React is JavaScript is like saying racing in NASCAR is like driving. It is technically true but misleading. a person who worked with JavaScript embedded in HTML is not going to be able to get React without significant learning curve. I had a web app written in JQuery and took me about a week to write and then I decided may be it is a good idea to learn react by rewriting the same App and it took me three month to create the same exact thing. Now that I know react I can do things much faster but there is definitely a steep learning curve 
I've not got a webserver to run it on atm. Hence why it's running from file:/// protocol. I'll dump the entire HTML for that page, and the external JS file though, as code in this comment. --- HTML: &lt;!DOCTYPE html&gt; &lt;HTML&gt; &lt;head&gt; &lt;link rel="stylesheet" href="sheet01.css"&gt; &lt;!-- JQuery --&gt; &lt;script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.min.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- &lt;body onhashchange="updFrame();"&gt; --&gt; &lt;div id="mySidenav" class="sidenav"&gt; &lt;a href="javascript:void(0)" class="closebtn" onclick="closeNav()"&gt;&amp;times;&lt;/a&gt; &lt;a href="home.html" target="iframe_a" onclick="autoCloseNavUpdHash('#home')"&gt;Home&lt;/a&gt; &lt;a href="#" target="iframe_a" onclick="autoCloseNavUpdHash('#services')"&gt;Services&lt;/a&gt; &lt;a href="#" target="iframe_a" onclick="autoCloseNavUpdHash('#clients')"&gt;Clients&lt;/a&gt; &lt;a href="contact.html" target="iframe_a" onclick="autoCloseNavUpdHash('#contact')"&gt;Contact&lt;/a&gt; &lt;/div&gt; &lt;div id="main"&gt; &lt;div id="logo"&gt;&lt;a href="home.html" target="iframe_a"&gt;&lt;img src="logob.png" alt="Logo"&gt;&lt;/a&gt;&lt;/div&gt; &lt;div style="width:100%"&gt;&lt;div class="navbar"&gt; &lt;div style="cursor:pointer;" onclick="openNav()"&gt;&amp;#9776;&lt;/div&gt; &lt;div class="x"&gt;&amp;#124;&lt;/div&gt; &lt;div&gt;something&lt;/div&gt; &lt;div class="x"&gt;&amp;#124;&lt;/div&gt; &lt;div&gt;something&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; &lt;hr&gt; &lt;iframe src="" id="content" name="iframe_a" onload="iFrameScaling(this)" scrolling="no" &gt;&lt;/iframe&gt; &lt;/div&gt; &lt;!-- Javascript --&gt; &lt;script src="script01.js"&gt;&lt;/script&gt; &lt;script&gt; if ("onhashchange" in window) { console.log("The browser supports the hashchange event"); } else { alert("This website may not work as expected due to a lack of support for the hashchange event.") } //if(!window.HashChangeEvent)(function(){ // var lastURL=document.URL; // window.addEventListener("hashchange",function(event){ // Object.defineProperty(event,"oldURL",{enumerable:true,configurable:true,value:lastURL}); // Object.defineProperty(event,"newURL",{enumerable:true,configurable:true,value:document.URL}); // lastURL=document.URL; // }); //}()); $(function updFrame() { //If URL contains #something then do if ( document.location.href.indexOf('#home') &gt; -1 ) { var url = "file:///F:/HTML/Test/"; console.log("Executed function() for hash detection"); document.getElementById("content").src = url + "home.html"; } if ( document.location.href.indexOf('#contact') &gt; -1 ) { var url = "file:///F:/HTML/Test/"; console.log("Executed function() for hash detection"); document.getElementById("content").src = url + "contact.html"; } }); //window.onhashchange = updFrame; //window.addEventListener("hashchange", updFrame, false); &lt;/script&gt; &lt;script&gt; &lt;/script&gt; &lt;/body&gt; &lt;/HTML&gt; --- JS (script01.js) function openNav() { var vpWidth = window.matchMedia("(max-width: 600px)") vpWidth.addListener(openNav) if (vpWidth.matches) { // If media query matches document.getElementById("mySidenav").style.width = "100%"; // Mobile } else { document.getElementById("mySidenav").style.width = "250px"; document.getElementById("main").style.marginLeft = "250px"; } } function closeNav() { var vpWidth = window.matchMedia("(max-width: 600px)") vpWidth.addListener(closeNav) if (vpWidth.matches) { // If media query matches document.getElementById("mySidenav").style.width = "0"; // Mobile document.getElementById("main").style.marginLeft = "0"; } else { document.getElementById("mySidenav").style.width = "0"; document.getElementById("main").style.marginLeft = "0"; } } function autoCloseNavUpdHash(state) { var vpWidth = window.matchMedia("(max-width: 600px)") history.pushState(null, null, state); if (vpWidth.matches) { // If media query matches document.getElementById("mySidenav").style.width = "0"; // Mobile document.getElementById("main").style.marginLeft = "0"; } else { } } function iFrameScaling(obj) { obj.style.height = obj.contentWindow.document.body.scrollHeight + "px"; } --- The stylesheet is just that, some generic styling. The other html files which are brought up onto the iframe could contain anything at all, so attaching them seems unnecessary.
Ah, somehow I was expecting it was far larger. Is that all the commands then? 
Doesn’t work on mobile. TERRIBLE GAME /s
\&gt; Project DeepSpeech is an open source Speech\-To\-Text engine
There's constructive criticism, then there's cock-behaviour
You are an absolute legend. Thank you so much for taking your time with me. This walkthrough helped so much. I finally see how I misunderstood your suggestions and how easy it actually was to solve. Both buttons now fully work! Again, thank you very much. Do you have a [paypal.me](https://paypal.me) link? I wanna buy you a coffee or two :)
Hi /u/darkknightweb, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
``` Note that pushState() never causes a hashchange event to be fired, even if the new URL differs from the old URL only in its hash. ``` :(
Ah. Ok.
Off the top of my head, use react/redux to store form information, when a user makes a new selection from said form, the state changes and maps to a new image url, which the image tag will get from the current state. You’d also be able to set the default state (default configuration.
If you use the code like this: window.addEventListener("hashchange", function() { alert('new location: ' + window.location.hash); }, false); it works just fine for manually changing the URL. It wll however not track history.pushState() that you use to update the window URL. You would either need to manually call the function after the pushState or flip the logic on its head. Let the user change the outside URL (by removing the `target=""`) and based on the hash, let JS update the iframe src.
Yeah. I'm using the event listener with calling the function when I use pushstate too. Thanks for helping.
can you give me some context
[javascript.info](http://javascript.info/) is pretty good.
wonder how this will work with react? cool library tho.
Oh sorry :D
It's not quite that, but Martin Fowler is working on a new version of his seminal book Refactoring, and this version will be in Javascript this time.
Another library to look at is a true Vuejs for nativescript - https://nativescript-vue.org/
the key to its speed is caching. if a resource in the database is requested, the file is only read if it’s not loaded into memory. from there on, the resource is manipulated within the process and updates corresponding files at certain intervals, which are determined by the amount of resources loaded into memory. if a resource isn’t used by a certain timeout, it’s force-saved and offloaded from memory until further notice.
Really wish Addy Osmani would write a new book focused around newer design patterns and with more Node. He has been updating his last one, but it just needs to be rewritten. That thing was my bible for a couple years when it was new. https://addyosmani.com/resources/essentialjsdesignpatterns/book/
There's no need to pay me, I enjoy helping a fellow programmer out. If you have any programming questions or problems in the future don't hesitate to ask in this sub, or ask me directly if you like. If you insist on buying me a coffee then I have no choice but to gladly accept, right? Here's a [paypal.me](paypal.me/GeneralYouri) - thanks in advance for the coffee :)
If you already know React I would learn React native for the sake of saving time and energy. I'm loving it so far. 
Cool! Fowler is amazing. Any idea when that books will be available? 
I don’t think this is *completely* off. There is some truth - while you could “just use react” without JSX, it’s not friendly to someone learning. That means you’re introducing Babel in some form. Many of the folks coming from a jQuery background aren’t used to a build step for JS and that can make this feel scary. Also, searching for a solution to any problem is (just like any search) going to yield all sorts of answers, from helpful to incorrect, from simple and clear to completely convoluted. I’m just not sure how to help people that need it, and I’m not sure how to decipher between sticks-in-the-mud and those that are actually stuck on something. 
[removed]
More like Node.ts, we will see how it goes...
This is cool, but anyone wanting to be good later should not use. A minded average level should be able to make something similar really quickly. I think you can say you passed average level if you can do this by head with no docs. It seriously can be just one little few lines function. 
Time to visit the world. Reserve your native country for your old days.
Eloquent JS
[https://developer.mozilla.org/en\-US/docs/Web/JavaScript/Reference/Global\_Objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects) 
&gt;Assuming no drastic changes, this means we should "release to production" at the beginning of summer. The production team will then copy-edit the entire book and format the print edition. That will take most of the summer, and then the print edition will go out for production. We also have to arrange the website, which will be done via Pearson, and set things up so I can release material to it easily. &gt;Our target for the print edition of the book is to have it available during the fall of this year. The website should be up no later than that, and hopefully will appear somewhat earlier. https://martinfowler.com/articles/201803-refactoring-2nd-ed.html
Pretty cool! In what way can it be applied?
Well, the closest thing to a working engine in full JS is phaser. You could also use pixi.js for rendering and make your own custom engine. If you want to target mobile then JS is just not the best option and you should check out game maker studio, Godot and unity, as all of those export to html5 and mobile / desktop.
Congratulations on making a cohesive project, but honest question, why should I use this? I can achieve much of the same functionality with CSS keyframes with CSS variables.
What are you talking about?
Seriously, this sub is full of crap. What I see continuously is wrong statements like «Use node | use vue for everything | apple blabla | javascript in the browser has no api for the filesystem» and permanent shit loop like that. The level here is dangerously bad... [https://developer.mozilla.org/fr/docs/Web/API/FileReader](https://developer.mozilla.org/fr/docs/Web/API/FileReader)
I'm not sure you understood my reply. 
&gt;Time to visit the world. Reserve your native country for your old days. What part is unclear to you?
Sorry but I did, left the link for completeness, something that miss a lot around there!
Thanks! I didn't really think of real use cases... maybe something like this [https://codepen.io/annalarson/pen/GesqK](https://codepen.io/annalarson/pen/GesqK) (not my pen) and with sliding images from sides as you scroll.
In that case, I do not understand your reply!
Mass noob downvote attack, not looking to be good later.. Stay well in your shit then.
Thank you! I definitely agree with you and also CSS styling is much faster and less cpu intensive than JS, but I thought it's a good ideea to keep things in one place because if you do the CSS way you should maintain two files, a CSS and JS one. 
This is really fun to play with. Thanks for the hard work.
I left the link for anyone needing more information.
I didn’t downvote you, but I think it’s moreso due to your attitude. The author is showing work he’s proud of enough to publish publicly and you’re that guy who’s like “I hate to be an asshole but...” and then proceed to be an asshole. People are smart enough to make their own decisions whether or not to use a tool.
All of it?
IMO build steps are the most important thing to get right before even attempting to go into web dev. Any tutorial that wants to sell javascript but skips tools or doesn't at least discuss tools at the very beginning isn't worth anyones time, and it should absolutely not cater to a beginners desire to jump straight into coding (only to get burned later on). Otherwise *nothing* will ever make sense, they will see examples they can't run, written in a lingo that doesn't execute, modules they can't import, packages they can't use. It is frustrating to no end. Therefore all the frameworks recommends build tools, Angular does that, Ember, Vue, Aurelia, React, Preact, and whatnot, and all of them suffer tragically without. In most if not all of these cases it doesn't mean much more than executing a cli script. ´[framework-name]-cli projectname´. I fail to see how any of that is specific to React - compared to many others it's actually one of the very few that don't limit you if you don't use tools.
Ah yep wrong tab! ;) Shit happen..
You can already query orientation and aspect ratio in default CSS media queries? Hell you can even query things like how many colours can be displayed (though I don't know the specifics of how that behaves personally) and resolution. Maybe I'm missing something but, bar 'tv devices' (isn't that just like a normal screen though?) I can't see what you'd gain from this?
Css grid, flexbox
Did not know this, that is amazing! Will definitely buy it.
&gt;Css grid It is not layout grids. It is grid/table solutions.
Unity requires cs, for which equivalent support libraries are much less developed than js ones AND unity does support all cs features Don't get me started on Godot
In the old, now somewhat hidden, subreddit FAQ ( https://www.reddit.com/r/javascript/wiki/faq ) _some_ books ans resources are mentioned.
Care to develop wrt Godot? I'm getting curious about it
What does the library do again?
Then use phaser, but you're in for a world of pain. Or make your own engine over pixi as a renderer, which will take a LOT of time. Any of the engines mentioned is much better at making games than raw JS. I had this dilemma a while back, as a learning exercise wanted to make an MMO with pure JS (im a JS Developer, full stack but mostly back end in Node), and working with phaser was a pain, and having to do my own engine over pixi was a lot of work I didn't really care about doing. Godot seems really easy to work for me but most of my logic is in the backend anyway not in the front end.
Can't load the fiddle for some reason my end, but have seen to StackOverflow thread. The answers in there are great. &amp;nbsp; Seems you have an async function inside another function, but your want to use that async function in other places too. &amp;nbsp; Solution: just wrap that async function in a promise, then call _that_ inside your function. Now when you return it, it'll wait for the api call to come in first. Also, you can use that wrapped version in other places too. 
I consider myself very knowledgeable about the JS landscape and I have never heard of p5.js before.
The filter function just loops over the entire array of people and returns a new array that meets the requirements of the condition you write inside the filter. So each iteration the person is another name and as long as the person does not equal your friend it will be part of the new array. I hope that's clear enough for you. Just experiment a little with it, you'll figure it out.
A `.filter()` function will take in an `array` and return the subset of elements that meet the criteria. In your case... name: currentState.name.filter((person) =&gt; person !== friend) ...the `name` parameter is being set to an `array` that is the subset of `currentState.name` in which the element is not equal to `friend`. Here's a simpler example: var integers = [1,2,3,4,5,6,7,8,9,10] var evens = integers.filter((num) =&gt; num % 2 == 0) console.log(evens) // [2,4,6,8,10]
 I think you mean that realization of classes in ES6 is bad. I also do not like how it is done. They are very limited, in other languages classes provides much more. I would like classes of ES6 would be similiar to TypeScript classes.
you might want to check it on safari
you might want to check it on safari
Well, i do not need much, besides being able to handle large amounts of media on time, on upper half of mobile screen, so I do not know whether to choose pixi or phaser. Also I come from cpp world, would like to know from you whether to use phonegap, cordova, react native or other solution around all this
Alternate (and more accurate) title: Reimplementing jQuery Methods Using Native Methods That Only Exist Because of jQuery
I have updated my fiddle not sure if it will work for you. I'm pretty new to JS so in regards to promise, is [this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) what you were referring to? When I change this var oneshot = service.oneshotSearch( value, searchParams, function(err, results) { ... } ); to this var oneshot = new promise(service.oneshotSearch( value, searchParams, function(err, results) { ... } )); it returns promise is not defined. 
You could also use shadow dom to ensure your css does not taint other elements nor outside css taints your picker.
Also irritability. Am-I-right?? Haha 
I have never used brain.js but it's not clear to me what you're trying to train this NN to do. 
The input vector does depend on what kind of predictions you want to make. A date by itself does not necessarily contain a lot of useful information for that. Should it be based on the day of the week? The day of the month? Overall? What I would first try is to retain the recurring information (month and day) and drop the year (or start it at 0 or start 0 at whenever your measurements start) and normalize the day based on the number of days in that specific month: var data = \[ {input: { year: 0, month: (6 / 12), day: (9 / 30) }, output: { Bicep: 1, Back: 1 }}, {input: { year: 0, month: (6 / 12), day: (10 / 30) }, output: { Chest: 1, Shoulder: 1 }}, {input: { year: 0, month: (6 / 12), day: (11 / 30) }, output: { Rest: 1 }} \]; Then I would look at the results with other inputs that contain more information of what I want the prediction to be for (e.g. month, week, day of week).
Got the fiddle working &amp; I had a play. I have no clue what you're doing with that for loop so I left it in as you made it. I also noticed that your `oneShotSearch` had `searchParams` variable in it that was no where to be found, so I put that in too. &amp;nbsp; I've wrapped the `oneShotSearch` in a promise, since I'm assuming that's the asynchronous function. Then made a new function that consumes that promise and does your `for` loop before returning the `val2` you're interested in. Then called the function inside the `console.log` to show you `val2`. Don't forget to provide those top two variables! &amp;nbsp; const Top10SRC = ????? const searchParams = ????? const getApps = (value, searchParams) =&gt; new Promise((resolve, reject) =&gt; service.oneshotSearch(value, searchParams, (err, res) =&gt; err ? reject(err) : resolve(res))) const displayApps = (value, searchParams) =&gt; getApps(value, searchParams) .then(results =&gt; { let val, val1, val2, { rows } = results for (let i = 0; i &lt; rows.length; i++) { //testing val = rows[i] //val1 removes first index and keeps all other indexes val1 += val.slice(1) + ',' //splits values by ',' and stores into array val1 = val1.split(',') //converts val1 string values into integers val1 = val1.map(Number) //val2 keeps index 0 and removes last index val2 += val.slice(0, 1) + ',' //splits values by ',' and stores into array val2 = val2.split(",") //getting rid of last empty value } return val2 }) .catch(err =&gt; console.log('Error getting apps: ', err)) console.log(displayApps(Top10SRC, searchParams))
P5.js is not a web development framework. You won't get the tools one would be accostumed to in a web development framework. Instead, p5.js is purely for web based animations and a wide variety of math. You can build an entire physics engine in p5.js if you wanted to. Quite harder to do in angular. The point being they're completely different frameworks and the only relationship between them is JavaScript. If you want to develop web apps (front and backend) I would advice you to check out React or Vue for front-end and definitely nodeJS for backend applications. However if you want to develop games, animations or even just creative art, go for p5. PD: AngularJS is an outdated framework, in any case check out Angular 5 (or 6 can't remember where they are right now)
His post history is a prime example of /r/iamverysmart. I don't think your words can really reach him.
You have to pay.
Why? They are literally two different concerns, with two different technological pathways shouting different requirements.
You may want to normalize the input date. I would find the earliest date and subtract that from all subsequent dates. Convert the dates to days from first date. Then divide every day by the last day. You should end up with the earliest date mapping to zero and the last date mapping to 1. If I remember correctly, there is a setting in brain.js to use non-normalized data, but I have not used it. 
awesome. i got to 75 
[**SourceMaking**]([https://sourcemaking.com/design_patterns](https://sourcemaking.com/design_patterns)) is my favorite reference for design patterns. They have great explanations, visual representations, &amp; code examples for all 23 of the [**GoF**]([https://en.wikipedia.org/wiki/Design_Patterns](https://en.wikipedia.org/wiki/Design_Patterns)) patterns, and a few extras as well. The online reference material is free, and there's also a [**PDF**]([https://sourcemaking.com/design-patterns-ebook](https://sourcemaking.com/design-patterns-ebook)) version available for purchase. Also check out the [**Design Patterns YouTube Playlist**](https://www.youtube.com/playlist?list=PLF206E906175C7E07) by Derek Banas.
Client-side Javascript cannot access the directory structure on your server. You will need to use a backend language (Node, Python, PHP, etc) to provide this data. In all honesty though, it sounds like you are approaching this problem the wrong way. Why can’t you have all your project images referenced in your main HTML page, and use a JS plugin to create a gallery from the img tags?
This is cool, but I was expecting something more react related, this is just list of benefits from writing tests that can apply to anything. React, and frontend, isn't like backend, it's messier and test are way harder to write, hence why everyone abuse "snapshot" testing. Look at this, nearly 50 LOC per test case, it's atrocious to see if we missed from bahvior or not: https://github.com/apollographql/react-apollo/blob/master/test/client/Query.test.tsx From my personal experiment in react, component unit tests are overrated, integration tests are way more valuable. Sure you could TDD high level integration tests, but I don't know if writing them first brings any value.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apollographql/react-apollo/.../**Query.test.tsx** (master → 1bc2827)](https://github.com/apollographql/react-apollo/blob/1bc282706f10ae08bd13213f66a0ef0f94374d62/test/client/Query.test.tsx) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e0gdj8o.)
You're totally wrong but I'm in a relatively good mood so I'm going to be nice. Ignoring your rants, your points appear to boil down to: 1) Somehow you think using objects and writing Object Oriented Programming are the same thing. They are not. OOP is a design pattern. 2) You're conflating JS's features with the code that is written with JS. They are different things. JS offers first class OOP design pattern support with `prototype` and `class` but that doesn't make all JS OOP. You sound like someone that needs to expand his horizons outside of OOP. Go read up on the alternatives, maybe you will start to understand what is and what isn't OOP, then maybe we can have an informed conversation.
Oh, jeez, like, if you want to do some foundational work because you’re a CS grad or are already into Vue, go for the Vue thing, but React Native is the only other option. Do yourself a favor.
I think a key scenario to bear in mind is when you are porting a large piece of code to typescript, it is handy to be able to mix and match.
Thanks for the great answer! So yeah I didn't really make it clear, but it's not because I want to learn p5.js, but that what he uses on The Coding Train, and I really like his teaching style. Anyway you did answer my question, so thanks for that. I do have one follow up though: I am planning to learn NodeJS for backend, and I have a project where it'll be optimal to use a WebSocket. Would a tutorial like [this one from The Coding Train](https://www.youtube.com/watch?v=bjULmG8fqc8&amp;list=PLRqwX-V7Uu6b36TzJidYfIYwTFEq3K5qH) be a bad place to start, since he's using p5? Or doesn't it matter, because p5 is front\-end, and all the other stuff is back\-end? 
Good point, but I was wondering more for new projects. 
By that same logic, all front\-end coders should use jQuery, because all vanilla Javascript will still work but you get some advantages in DOM manipulation. But you have to learn this other "language," with all its quirks, plus load it into your application and keep your dependencies up to date.
Not everyone requires a build step for every project? Maybe you just want to write some trivial code that runs directly in the browser? Maybe your build step is incompatible with typescript for some reason or another? These are a few reasons why not everyone would want to use typescript.
Node projects can be a pain to “typescriptify” due to their dependencies, even when starting afresh.
Affiliate advertising.
da mi bricis kuro
Late here, but a big plus is it's also a solution that doesn't use JSX, template strings serve the same purpose, so you don't have to spend half your time on the boilerplate Webpack/build setup before you actually code. It's just plain JS. You could link hyperhtml in a script tag and write a whole PWA/app in one file, if you so choose, no webpack, Node, command\-line, etc. needed. I love everything a build system offers, but being opt\-in would be much better. Also, you can use Codepen, etc to learn and experiment without having to set up a boilerplate with a gazillion NPM packages, like in the olden days.
Vue.js
Why it is?
The common advice seems to be: Angular for enterprise jobs (not Facebook) React for everything else *and* maybe jobs Vue for everything else, maybe not jobs
Thanks!
I chose my words carefully for a reason. It is *possible* to set up a document as you showed. It is not at all practical to ship that. I think there is a strong benefit to letting people ship something quickly. I do think CRA does a fine job of this and effectively solved that problem. I don’t think one should be required to have a working knowledge of a build config to be productive. 
The TypeScript tools can operate on plain old JavaScript and help proactively detect a range of common issues. You can see this in action if you open a JavaScript project in Visual Studio Code, where it uses TypeScript's analysis like a kind of semantically-aware linter. Of course, without type annotations, there is only so much it can infer. You get much smarter and more comprehensive checking if you add type annotations. You can do this by writing your code in TypeScript or by adding typings to your JavaScript project. I am a big fan of the latter, because it gives you many of the type safety advantages while keeping the build step optional and keeping your code fully in alignment with web standards and compatible with everything. I routinely use the TypeScript tools with my JavaScript projects, and I think there is no downside in doing so. 
Cool. I just saved that pen for later. Thanks!
It shouldn't be considered this vs that/which one is superior. Libraries and frameworks are tools used to do a job. You as the developer should learn how to determine which tool to use.
P5 is kind of like d3. It's not really a required skill but is a nice to have but only after you've got a real grip on the core language.
It is simpler.
You can make a great app with Angular, Vue, React, JQuery, KendoUI, (TypeScript or JavaScript) or no framework at all. There is no perfect framework. Use what you are most comfortable with.
I'm reading Head First Design Patterns at the moment and it's great. The style might seem a bit silly at first (if you've never read anything from that series before) but it's actually effective. They use it in University courses. The examples are in Java.
Apples or oranges?
But you don’t have to learn anything new off the bat, that is my question you can write regular JavaScript and get a the benefit of being compiled and type checking. I could see it becoming an issue in the future if there is divergence but right now it just seems helpful with no real consequences. 
thanks
Ok that was what I was trying to express. Not everything needs to be run from compiled typescript code, but using the compile step to check for issues seems like an additional check that there is no reason to not use. 
There's a huge difference between angularJS and angular. They are 2 completely different frameworks. AngularJS is going to be at version 1.x with only the minor and patch versions increasing for new versions while angular started at 2.x and will keep increasing the major, minor and patch versions. They're about as different as Larvel vs CodeIgniter. Your best bet is to just learn Javascript and not focus on any one specific framework. Focus on the language, not the tools built on top of it. If you're more backend focused, learn node. It's javascript but on the server side. Javascript is just a language, like Swift or C# or Go. The capabilities of it are extended depending on the environment that you're running in. The browser will have certain API's available to you like the DOM or SpeechSynthesis while node will have other API's like fs (filesystem) and http. If you're coming form Java land, I might even suggest you learn Typescript, which is a strongly typed superset built on top of Javascript and it compiles to plain JS but the tooling around it is top-notch.
But even if you just write plain JavaScript and use the compile step and type checking it’s seems beneficial to compile it typescript even if to just check. 
How is this different from any existing DB system backing a caching layer such as memcached or redis? Aside from the fact that this system has next to zero real world use to its name, that is?
Genuinely curious here, how are commas used in your native language?
Which is super?
Really though? I know angularjs, angular2+, react and vue and have used all 4 on a professional level. While I do love Vue and especially Nuxt, I don't think it's simpler than a pure (no redux) React app.
Well, you could make an argument for React, but they are both simpler than Angular... 
`ts-node` is pretty useful for this. I even write my webpack configs in typescript.
From first glance, you're returning from inside your loop. This will not iterate over all of the results, it'll just return after the first iteration. I can't tell exactly what you're trying to achieve here but I think you'd benefit from using an array to keep track of the values you want in `val2`. const myArray = [] for (let i in myIterable) { // process your value myArray.push(myValue); }
Depends what you are asking. A number in JS is just a [double floating point value](https://en.m.wikipedia.org/wiki/Double-precision_floating-point_format). This representation only has the ability to exactly represent so many consecutive integer values exactly. A JS number can represent 9007199254740992 but not (9007199254740992 + 1). This is why it is considered the [MAX_SAFE_INTEGER](https://stackoverflow.com/a/307194). The maximum double value would be the 1.79e308 value.
Non-Mobile link: https://en.wikipedia.org/wiki/Double-precision_floating-point_format *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^191349
True, but I feel like vue is more opinionated and less flexible. Also, in regards to the job market, React is the way to go. Vue is a great library, don't get me wrong. But it's more for hobbiests and written by one dude (correct me if I'm wrong about this one) while React has the backing of a major stakeholder, facebook. Going back to the original question, neither Vue, React AngularJS or Angular is better than the other. It all depends on the requirements. _Most_ projects don't need any of these and plain vanilla js or even jQuery would suffice.
Sounds good to me. Cant disagree with you, all good points.
I’m reading thru the “gang of four” book *design patterns: elements of reusable software* this summer
Perfect reply thank you so much
Are they motivated? 
I'll give you my feedback as a series of refactorings: 1. A nice place to start would be breaking up your single JavaScript file into multiple files and just loading them each with a script tag. 2. Next would be using some type of module loader like require.js and getting rid of global variables. 3. Next would be replacing your module loader with a build system like webpack (which itself should support module loading). 4. Next would be replacing your DOM-manipulation code with a UI library like React, Angular, Vue, etc. My preference is React. 5. After that I'd be happy to take another look at the project. Yes, I know this is a small project and this sounds like a lot of work, but: 1. This is how JavaScript is typically done now in organizations and larger open source projects. 2. Even small projects can benefit from a build, breaking up code into smaller pieces, modules, etc. P.S. Something like `create-react-app` or a boilerplate repo of your choice can take most or all of the pain out of things like setting up builds and module loading.
I wouldn't recommend using anything beyond ES5 unless you have a build in place with a transpilation step, or you don't care about your app not working in most browsers.
"Every design pattern indicates a flaw in the tool we're using to solve that problem." - Luke Kanies
You may be right (definitely right about js locked out reading folder). I dont have a cms for the site and its not built on wordpress so was hoping to make it as easy as only needing to upload project folders to the site any time something new is to go up, let the js handle the rest in terms of formatting and such. ¬ var i = 1; while (true) { if (fileExists("images/portfolio/replica" + zeroFill(i, 4)) == true) { console.log("images/portfolio/replica" + zeroFill(i, 4)); //check for thumbnail if (fileExists("images/portfolio/replica" + zeroFill(i, 4) + "/thumbnail.jpg") == true) { $(".portfolio").append(" html code formatted one line here"); } else { //error } } else { break; } i += 1; } ¬ 
You’re overthinking this I reckon! You’re basically scraping your own site from the browser, which is totally unnecessary assuming you control the uploaded images. If your content doesn’t change that frequently, just create an unordered list of img tags pointing to your thumbnails in your HTML page, and then use a slideshow plugin to transform the list into a presentable gallery. If your content does change quite frequently and you don’t want to update your html by hand, then look into using a simple PHP or Node script to serve your page, which can much more efficiently check which images exist (since a backend script will have access to your directory structure) and generate the static HTML list of img tags for you.
That's actually what I was thinking it was, but I wasn't really sure. Thanks for clearing it up.
I haven't read it, but I've seen this book being recommended before: [Learning Javascript Design Pattern \- by Addy Osmani](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)
Slight correction, Number.MAX_SAFE_INTEGER 9007199254740991 Or, `(2^53)-1`. The value `9007199254740992` (`2^53`) could be the result of an overflow error.
To add to what the other response says, when you store values as floating point numbers ( which js uses for all numbers), you get a specific allocation of bytes for your number. Using them to increase the precision of the number limits the range you can represent, and vice versa. This is because floats store values in scientific notation -- you can make the exponent very large but you then lose the ability to accurately represent the lower order digits in your number.
A lot of the resistance to TS comes from (well-meaning) ignorance, and that'll die down as more people learn it. For hobby projects you might not want to bother with type annotations, but for professional work I think it'll eventually become a no-brainier. Certain design patterns don't translate cleanly to static typing. This often indicates a code smell that can pragmatically be refactored to get the benefits of TS's tooling, but not always. The arguments against having a build step are valid, but tons of projects use Babel, and Babel has always required more complicated configuration than TS. For node stuff you can use ts-node and it's automatic.
Very cool OP. What technologies/frameworks did you use to make this?
Sure... Because the software I am working on has a somewhat simple template engine and any embedded JavaScript code is stored in the database with the template. While the rest of the application is pure TypeScript, the templates themselves are JS because they are very short pieces of code (less than 100 lines) and not worth setting up a build system to transpile TypeScript out of a database record and into another.
You can also put TypeScript types into the JSDoc comments of a plain JS project. This enables type annotations in plain JS. (albeit with a more verbose, less convenient syntax). TypeScript can perform typechecking using the same rules as for TS files. Technically there are a few differences for type inference which can be overridden with annotations.
Modern JavaScript engines have LOTS of smarts beneath the surface and have all sorts of shortcuts in dealing with arrays. Using a dense array instead of an object kicks in LOTS of optimizations (it can calculate the offset of an array item rather than having to search for it, for instance.) But, beyond that -- it comes down to intent. You don't write code for computers. You write code for the poor sap who is going to look at it in 12 months and wonder what the heck is going on. If it is an array, that tells the person looking at the code what to expect.
&gt; From my personal experience in react, component unit tests are overrated, integration tests are way more valuable. So you are saying that it is better to test a component with it's containers rather than just the component only?
Where does that question come from, and why is it asked here every day? But seriously, just type "classes" in the search and take a look at some of the posts.
&gt; This is cool, but I was expecting something more react related, this is just list of benefits from writing tests that can apply to anything Hey, thanks for the feedback. I'm taking this process from the POV of someone with no TDD experience. My posts will progress with that in mind. The first post was to try and motivate why one should even bother with TDD in the first place. From what you've posted, I'm guessing you'd need to explore the different approaches out there with regards to the testing pyramid(which you don't seem to consider applicable), reverse pyramid, Kent C. Dodds' Testing Trophy. There's also the London VS Chicagos schools debate, which I hope to get to eventually. But for now, for the purposes of my series of posts, baby steps.
Look up prototypal inheritance vs classical inheritance. On top of inheritance, JS also isn’t a strong typed language. In OO languages, classes are like a description of a type/ data structure. In that sense, JS classes are diff in that they don’t really define a “type.” Instances of classes in JS does not have a type of the class it is created from. You can only check via instanceof. 
Have you benchmarked it compared to /dev/null? That’s generally considered to be the gold standard of performance ...
When I ran your code, it returned me with value is not defined on the part const displayApps = () =&gt; getApps(value,searchParams). My intention for the value was meant as parameter for function to take in e.g. Top10SRC
I just keep scrolling on the demo page.... it's so satisfying ....
Thanks! I'll check the prototypal inheritance vs classical inheritance. As for the type, what is the practical difference of defining a new type vs defining the behavior of an object? Theoretically, couldn't we achieve everything with the latter? 
I’ll second the idea that you should not learn p5. I teach with p5 regularly to university students, and the point of it is explicitly *not* to do web development. It’s great that you love Dan Shiffman’s teaching style. He’s great! But his orientation is toward art and intellectual experimentation. If you want to get any kind of practical web development done, you should find other resources. That’s not to say that you shouldn’t get on the Coding Train! You’ll just have to learn from other sources, too. I’m a professor, so I like books. Here are some book recommendations: If you already know some code (PHP &amp; Java), I’d start with Marijn Haverbeke’s excellent Eloquent JavaScript (http://eloquentjavascript.net), and then continue with Reginald Braithwaite’s JavaScript Allonge (https://leanpub.com/javascriptallongesix/read), and also his blog (http://raganwald.com). I also quite like functional programming and also recommend Brian Lonsdorf’s Professor Frisby’s Mostly Adequate Guide (https://mostly-adequate.gitbooks.io/mostly-adequate-guide/), but if you’re less nerdy and more practical, you can skip this one. These won’t give you any specific frameworks, but will give you an *excellent* sense of what the language can do (which is a lot!). It’s more different from other mainstream OO languages than many people think. As for frameworks, many people tend to like either React or Vue for frontend stuff. You can’t go wrong with either. If you want to learn a frontend framework. Be sure to learn the concepts behind Redux, even if you never actually use it fully. For backend, the canonical (and very widely supported) choice is Express, but I’d also be sure to familiarize yourself with its “sequel,” Koa. Koa uses more modern language features and more interesting and advanced programming concepts. Part of the problem is that there isn’t, to my knowledge, an easy-learning JS backend book or course. (But please let me know if I don’t know about it!) I myself learned the basic concepts of backend development from Michael Hartl’s truly great Ruby on Rails Tutorial (https://www.railstutorial.org/book), and don’t know anything like it in the JS space. Everything from that transferred to JS and its ecosystem pretty easily, and knowing more languages is always good. (And if you’re at all interested in learning from stuff written about other languages, everything that Sandi Metz has written is pure gold, including POODR and 99 Bottles of OOP.)
School and job interviews. 
This isn't a relevant answer. ES6 classes do, indeed, implement class-based inheritance. https://en.wikipedia.org/wiki/Class-based_programming
I would argue that &lt;15% is not most browsers. Chances are that within most target audiences, the percentage is lower still. I consider transpiling more of a must for tooling (webpack, node) rather than for browsers since browsers nowadays seem to be really in the forefront on ESnext compliance.
JS already had prototypal inheritance. My take is that the authors didn't want to introduce a new thing and just build it on existing things. And this is what enables transpilers like babel to transpile ES6 classes to prototype based inheritance and not cause any hiccup. Maybe it was made to have backwards compatibility. So objects created with classes also have a prototype, and you can add properties to the `Object`s prototype and that is reflected in all of the object instances. This is the differentiating factor between classes in other languages and JS. In JS, even if you create objects from classes, you can still add methods/properties be exploiting the global `Object`. This might be the difference you are looking for in a real class.
 const player1 = { /* some object */ } const player2 = { /* some object */ } const players = [player1, player2]
I didn't know that this was a sub. Thank you for letting me know. I'll direct future posts there. 
But this gives you a choice... Even if one is better.
Babel has a massive head start on any other transpiler claiming to be faster. I'll pick the tried and tested transpiler over some new project that will quite possibly be abandoned in six months time.
Babel compile times have never bothered me and I've worked on some pretty big projects, so saying it's 20x faster is totally meaningless.
Classes and classical inheritance has been implemented a number of ways across a variety of languages. For example: - Sometimes a class is a compile-time concept. Java, C++, and C# classes are in this category. - Sometimes a class is a runtime, memory-consuming object. Python, Ruby, Smalltalk, PHP, (and JavaScript) classes are in this category. - Sometimes inheritance is a compile-time copy from parent to child. Java, C++, and C# inheritance are in this category. - Sometimes inheritance is a runtime copy from parent to child. PHP inheritance is in this category. - Sometimes inheritance is a runtime delegation from child to parent. Python, Ruby, Smalltalk, (and JavaScript) inheritance are in this category. Despite this variety, lots of people came to view Java's classes as the gold standard for what is and isn't a class. Partly because, these days, Java is the language we most associate with OOP. And for the past couple decades, it's Java and C++ that has been most taught in schools. Sometimes we can't help but think in terms of those two languages. And also partly because, of the languages whose classes and inheritance behave similarly to JavaScript's ([such as Python](https://i.imgur.com/p9Kw815.png)), they rarely make a fuss about their implementation. Throughout Python's long documentation about classes, for example, the delegation behavior barely gets two sentences. It's treated as an implementation detail that isn't important to know. Meanwhile, the delegation behavior in JavaScript _wasn't_ treated as an implementation detail. It was treated as a core principle of the language that everyone should know and understand. There was a half-baked class concept (constructor functions), but all the internal delegation-wiring was exposed and it was the programmer's responsibility to connect everything in just the right way. And for decades, the JavaScript community believed, and reinforced among each other, that this delegation behavior was unique to JavaScript. Then comes 2015 and the ES6 class. The JavaScript community still thinks of Java's classes as the gold standard, and of course the ES6 class wasn't implemented like Java's class. ES6 class inheritance is delegation, and the JavaScript community still thinks delegation is unique to JavaScript. Plus the ES6 class (mostly) desurgars to constructor functions, something which we're already ingrained to see as not a class. Add on top of that, JavaScript's cultural identify of "prototypes, not classes," and the ES6 class clashes with that identity. And the cherry on top for me is that almost _everything_ in JavaScript is [implemented differently than in Java](https://github.com/Jeff-Mott-OR/javascript-cpp-rosetta-stone). JavaScript's functions, objects, arrays, even JavaScript's local variables are implemented differently than in Java. If JavaScript's classes are fake, then so too is everything else in the language fake.
jQuery is JavaScript. It's just a library. Each of these jQuery functions have a very similar JavaScript function that you can change it to. Though, it may be more verbose. I'm not sure why you'd want to change it to not use jQuery, but you can Google search for "you might not need jQuery" and the first link should be several comparisons of jQuery and plain JavaScript functions. That should be a great start for you. 
Neat, but the whole point of css-only animation is for optimization. The key-word being “optimization”
Yeah, that's right... I will add a css prefix, thanks for the info!
I'm stuck in a very obscure situation that doesn't present me the opportunity to use jQuery, the code has to be written purely in Javascript 
Is there any problem? I unfortunately couldn't test it on Safari yet... If yes, you could create an issue, I would be really appreciated!
Copy-paste jQuery's source code into your project. Now you're not using jQuery and your project has all the same functionality. :D
&gt; the differences between a JS 'class' and a real class? JS classes are for pretty much any practical purpose as "real" as any other classes. Doesn't matter that they're just syntactical sugar over prototypes, the usage and behaviour is virtually the same as with any other class-based system out there, with only minor differences such as no private members and static attributes still have to be appended after the class definition. 
Aren't Java and C# classes also runtime objects? And C++ must also carry some runtime informations with RTTI enabled - but beside this it's zero cost abstractions of course. 
Fair enough. I didn’t realize async/await already had native support in so many browsers. The big one still missing support is IE11. If you’re targeting business users you probably want to see if they are using that first.
Instead of $('# something') use document.getElementById(something); .html() is .innerHTML so $('#Result'+Total).html(strHTML) would become document.getElementById('Result'+Total).innerHTML=strHTML; 
Typescript is an extra build-step. If ts was natively supported in V8 and other browsers, I'd already be using it everywhere but as it stands, there is a build step and build steps can be an additional headache, source of error, and something that costs time. I tried a hello world typescript app and it already took 2 seconds just to compile this hello world example. However, I want to be able to instantly see changes and 2seconds just for typescript is already well beyond instantly. e.g., currently building a C++ App that uses V8 for javascript. On ctrl+s, the code is immediately executed, which happens instantly with js. With typescript in between, it will take considerably longer, considering the timings I got with the hello world example.
It wouldn’t be more intensive if you are using requestAnimationFrame (haven’t looked at the code cause I’m on mobile so I have no idea if you are already, sorry). 
Nodejs design patterns by Luciano Mammino and Mario Casciaro to be very good 
Web Components are the platform native way of creating UI components, from simple to complex, just by extending HTMLElement to create your own tags. The the MDN docs here: [https://developer.mozilla.org/en\-US/docs/Web/Web\_Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components) It's really straightforward to extend HTMLElement: `class MyCard extends HTMLElement {` `constructor() {` `super();` `this.attachShadow({mode: 'open'});` `this.shadowRoot.innerHTML = \`` `&lt;h1&gt;This is a Card&lt;/h1&gt;` `&lt;slot&gt;content from this element goes here&lt;/slot&gt;` `\`;` `}` `}` `customElements.define('my-card', MyCard);` Then use it in HTML: `&lt;my-card&gt;This is some content&lt;/my-card&gt;`
You first said "without JSX", now it's not practical? I mean, you are right of course, a production setup without build tools is never practical, why would anyone even think about wanting to ship a non minified, non-bablified project? But at least you can, isn't this what you wanted? I still don't see how is this relevant to React. Setting up a project without build tools isn't even an option on Angulars page (npm or cli), i'm sure it will work somehow but it would be a fight to set up. In Vue you can use a cdn, but with restrictions like not being able to do single-file-components and additional payload. Ember same as Angular (npm or cli). But there's a reason they all are more or less the same in that regard, and if a beginner wants to get serious this has to be faced. 
There's some runtime artifacts, yes, such as vtables or RTTI, but the reason I say the class itself is a compile-time concept is because you can't take the address of a class, for example.
How do you view a demo on github?
https://www.reddit.com/r/javascript/comments/8q6xjy/jquery_source_viewer/?st=JI9W09DF&amp;sh=d580b572
That's understandable. We can't always control what we are allowed/able to use. I will say, the phrasing of your question makes it appear as though you don't know much JS. I'd suggest just spending a little bit of time learning JS. The part of JS that we use to provide interactivity to websites is called the "DOM Api". Learn the basics of that and you'll have not problem changing that jQuery code to regular ol JavaScript. Good luck!
I wanna say both of those features are somewhere along in the standards pipeline
When you want to stalk your gf, but you're too lazy to do it yourself. Besides that, I don't know much about js, sorry. 
I would say design patterns are little different in JavaScript from GOF. You can check coursegalaxy.com. It has articles as well as courses on design patterns.
I would definitely consider using it for hobby projects with react
Java classes all exist as objects at runtime.
It’s for organizing the code better. It’s easier to say/read a function expect a Cat type or outputs a Dog type. In large scale projects it’s hard to keep track of objects cus it can take on any shape. This is why TypeScript is popular nowadays. But even TypeScript is compile time duck typing. So it still isn’t strict enough of a type check but mostly good enough 
That would be an interesting twist. Do you have a source with more detail?
Yup, https://github.com/tc39/proposal-class-fields.
[Official documentation](https://docs.oracle.com/javase/tutorial/java/javaOO/index.html) is the best place to look. In Java, classes essentially enforce: * Structure/Template of storing the data * Behavior or actions you can do with/on that data. In the simplest possible explanation: Objects are just Class *filled* with data. Strictly speaking Classes *can* be available at runtime. Take a look at ***static*** keyword in Java.
Elaborating on this since many new devs don't understand what floating points are, `Number.MAX_SAFE_INTEGER` is the largest number in JS where you can be guaranteed that your math will actually be correct: &gt; Number.MAX_SAFE_INTEGER - 4 9007199254740987 &gt; Number.MAX_SAFE_INTEGER - 3 9007199254740988 &gt; Number.MAX_SAFE_INTEGER - 2 9007199254740989 &gt; Number.MAX_SAFE_INTEGER - 1 9007199254740990 &gt; Number.MAX_SAFE_INTEGER 9007199254740991 &gt; Number.MAX_SAFE_INTEGER + 1 9007199254740992 &gt; Number.MAX_SAFE_INTEGER + 2 9007199254740992 &gt; Number.MAX_SAFE_INTEGER + 3 9007199254740994 &gt; Number.MAX_SAFE_INTEGER + 4 9007199254740996 This is expected and it's a trade-off between memory &amp; practicality. We could store more precise numbers but we rarely need to so it's a waste of memory. Other languages have different number types to deal with this but JS only has "Number" so a compromise was chosen.
Yeah speed-wise is faster, even for small projects. Namely because I can quickly iterate, using GraphQL-Faker to test and idea, then implement it if it works. Caching is ridiculously easy with apollo client, read there docs, it's not that long and you'll see what I mean 
&gt; Instances of classes in JS does not have a type of the class it is created from. You can only check via instanceof. Not sure what you mean
Yes I agree. I cut my teeth on the headfirst book. Couldn't put it down to be honest!
Oh wow, I *hate* the private member syntax. `#var` is just line noise.
Reminds me of https://github.com/SamKnows/transform-when
[removed]
[This](https://alexcambose.github.io/motus/) is the demo website.
Cool library!
You're essentially asking what is the difference between Prototype inheritance and classical inheritance. Prototype inheritance is what JS uses and it can fake classical inheritance, but the opposite isn't true. More reading here: https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9
No, they are just prototypes
If you work on a project with several other developers or have many dependencies (lol npm) a type system will make it trivial to detect simple incompatibilities. That implies of course that you know how to use it. We use a large Java framework at work and without type system upgrading to a newer version would be pretty much impossible. If your code base is small enough, that you have everything in your head then I'd say using type script is up to your choice.
*Classical classes*: Class is like a blueprint, every instance creates a new copy of all methods and variables. Unless method was static, then it lives on the class. *Prototypal inheritance*: Methods are not copied in each instance, but linked to parent object. Personally I think this is better, as there is less duplication of same code in memory. Before ES6 to create a class like structure you'd write code like this.. ``` function Animal() { this.x = 0; this.y = 0; // you can deifine method here like, this.speak, but it will be created for each instance } // defining function on prototype makes it accessible to all instances of Animal. // if you were to write new Animal().. new keyword does few things // create empty object {} // run Animal function with this = object // assigns this.__proto__ = Animal.prototype // return newly create object unless function Animal Returned something.. Animal.prototype.move = function(x, y) { this.x += x; this.y += y; } function Cat() { Animal.call(this); this.legs = 4; } Cat.prototype = Object.create(Animal.prototype); // instances of Cat will have their __proto__ refer to this object, whose __proto__ will point to Animal.protoype Cat.prototype.constructor = Cat; // this will make instanceof work Cat.prototype.jump = function(){}; let cat = new Cat(); cat.x; //0 cat.y; //0 cat.legs; //4 cat.move; //function cat.jump; //fucntion cat instanceof Cat; //true ``` this course helped me a TON https://classroom.udacity.com/courses/ud015 
&gt; Class is like a blueprint, every instance creates a new copy of all methods No it doesn't. The methods belong to the class, not the instance.
Obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/837t82/who_are_some_of_your_favorite_speakers_educators/dvh0br6/)^3 from Eric Elliott. &gt; it can fake classical inheritance, but the opposite isn't true. [Yes it is](https://www.reddit.com/r/javascript/comments/4j7r9w/5_javascript_bad_parts_that_are_fixed_in_es6/d351fl5/).
He means that a `Foo` instance has type `object`, not type `Foo`.
Hi Reddit, author here! Worked really hard on this open source book about building apps with GraphQL, Node and React. I appreciate every kind of feedback. Cheers! Julian
Okay this time I've resisted the urge to refactor it massively, and have just left it mostly how you've written it instead. I've also kept it in the same style you've written it, so not used arrow functions etc. All I have changed is that I've wrapped the async call into a promise so you can reuse it. &amp;nbsp; &lt;html&gt; &lt;body&gt; &lt;script&gt; var http = new splunkjs.ProxyHttp("/proxy"); // Create a Service instance and log in var service = new splunkjs.Service(http, { username: "admin", password: "changeme", scheme: "https", host: "localhost", port: "8089", version: "7.1.0" }); var Top10SRC = "search * INBOUND TCP | stats count by SRC"; var SearchAll = "search * | stats count by date_month"; // Set the search parameters--specify a time range var searchParams = { earliest_time: "2011-06-19T12:00:00.000-07:00", }; var val = ""; var val1 = ""; var val2 = ""; function getApps(value) { return new Promise((resolve, reject), function() { service.oneshotSearch(value, searchParams, function(err, results) { return err ? reject(err) : resolve(results) }) }) } function displayApps(value) { // Display the results var rows = results.rows; for (var i = 0; i &lt; rows.length; i++) { //testing val = rows[i]; //val1 removes first index and keeps all other indexes val1 += val.slice(1) + ','; //splits values by ',' and stores into array val1 = val1.split(','); //converts val1 string values into integers val1 = val1.map(Number); //val2 keeps index 0 and removes last index val2 += val.slice(0, 1) + ','; //splits values by ',' and stores into array val2 = val2.split(","); } fooDone(val1, val2); } function fooDone(val1, val2) { console.log(val1); } getApps(Top10SRC) .then(function(result) { displayApps(result) }) .catch(function(error) { console.log('Erro getting apps: ', error) }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
How is it? As soon as you change a prototype, all its instances would be affected unless you shadowed it. You can't affect all the instances of a class in classical inheritance by changing the class unless you reinstantiate.
&gt; Classical classes: ... creates a new copy of all methods and variables. &gt; Prototypal inheritance: Methods are not copied in each instance, but linked to parent object. &gt; Personally I think this is better, as there is less duplication of same code in memory. I'm not aware of any language, classical or not, that will duplicate/copy methods into each instance. Not even Java/C#/C++ work that way. Instead, each method is defined once in a data structure often called a [virtual method table](https://en.wikipedia.org/wiki/Virtual_method_table), and every instance gets a link/pointer to the same shared vtable.
&gt; You can't affect all the instances of a class in classical inheritance Depends on the language. In Python [you can](https://i.imgur.com/p9Kw815.png). As for languages like C++, it just takes some boilerplate (about 8 lines worth), which is what I linked to in my last comment.
It's sometimes more interesting using [Class#forName](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#forName-java.lang.String-) which allows for initilization using a string with the name of the class: Class c = Class.forName("java.util.Date"); But in any case, you can mostly do things **with** it, but you can't do much **to** it. So, well, it's interesting but to a certain point. You _may_ do more interesting things by combining this, your own ClassLoader and reflection, but then again, I can't guarantee it will be a "fun" ride.
I see no `data`, `data1`, `data2` in your code, so it's hard to say exactly what you mean or are thinking of. In any case, have you tried looking in the library's documentation? They even have [examples about drawing multiple charts](https://developers.google.com/chart/interactive/docs/basic_multiple_charts).
The better page of the documentation to refer is [this one](https://docs.oracle.com/javase/tutorial/reflect/class/index.html). It clearly states that... &gt; For every type of object, the Java virtual machine instantiates an immutable instance of java.lang.Class ...
I appreciate the help you have given. I think I am able to get the results of val1 and val2 outside the function for now. Unfortunately when I paste your code and ran it, it returned Uncaught reference error resolve is not defined. Now I am trying to run the code and generate different charts based on the given parameters e.g. displayApps(examplequery); displayApps(examplequery2);. What I get is two identical charts this is what I have for the chart code: ^(function fooDone(val1, val2){) ^(// Load google charts) ^(google.charts.load('current', {) ^('callback': drawChart,) ^('packages': \['corechart'\]) ^(});) ^(// Draw the chart and set the chart values) ^(}) ^(function drawChart() {) ^(var label = val2;) ^(var count = val1;) ^(var data = new google.visualization.DataTable();) ^(data.addColumn('string', 'label');) ^(data.addColumn('number', 'count');) ^(for (var i = 0; i \&lt; label.length; i\+\+) {) ^(data.addRow(\[label\[i\], count\[i\]\]);) ^(}) ^(// Optional; add a title and set the width and height of the chart) ^(var options = {) ^('title': 'SRC',) ^('width': 500,) ^('height': 300,) ^('backgroundColor': {) ^(fill: '#06D6A0') ^(}) ^(};) ^(// Display the chart inside the \&lt;div\&gt; element with id="piechart") ^(var container = document.getElementById('draw\-charts').appendChild(document.createElement('div'));) ^(var chart = new google.visualization.PieChart(container);) ^(chart.draw(data, options);) ^(}) ^(displayApps(Top10SRC);) ^(displayApps(SearchAll);)
I have already read this documentation. Just that what they are doing to create multiple charts is to have a separate function e.g. function sarahchart, function anthonychart to create different charts. What I am trying to achieve is to do that without having additional functions for each of my charts. As of now this is the [result](https://i.imgur.com/CVlSJ3U.png) that I have. I did a displayApps(Top10SRC) and displayApps(SearchAll); both the results got appended together in two charts instead of them being inside different charts.
The simplest way I see it, it's because the underlaying mechanism that makes objects doesn't need a notion of a "class" to work, and it was never built to be aware of what a "class" is. It understands what a prototype is and that's what it will use. Now it also tolerates that other syntax, but it's really just a courtesy for people who want to use it. One other thing I'm not entirely sure though, and I will appreciate you guys correcting me here, but there's also the question of how object instances are linked to the class that built them. In Java, AFAIU, there is a sort of ID that determines that, and this link is set and solid for the whole object lifetime. In JS, the object is associated with the origin class by the fact it has the attributes that match that class definition (duck typing).
Thanks - was on my phone so was hard to double check all the details exactly. 
What I tried to explain is that you mentioned some sort of problem but then showed some code where that problem can't really be seen. And so, it is hard to see what the actual problem your having is. &gt; both the results got appended together in two charts instead of them being inside different charts. So... you want the data in two separate charts or do you want the data in one chart?
Trick question ... those numbers are the same in JavaScript 
The amount of misinformation in this thread is very disappointing. It illustrates why adding the `class` keyword is regarded by a few people as a bad idea: a lot of JavaScript programmers no longer know their language. OP puts quotes around "class" in his question and is absolutely correct in doing so. JS does not have classes in any conceivable way unless you choose to change the definition of the word "class". There's been a disturbing amount of definition-changing in this thread. A class is a static, compile-time artifact. Full stop. If you want to do anything at all to create or modify a class during runtime, you have no choice but to resort to metaprogramming voodoo. Adding things to a class is okay - it's pretty clunky, and it executes much slower than if it was done in the class definition - but creating a new class at runtime is beyond most programmers in these languages. It involves messing with class loaders in Java and `System.Reflection.Emit` in C#, neither of which are anything approaching either fast (execution *or* development-wise) or straightforward. This is because classes are - again - static, compile-time artifacts and to mess with them at runtime you have to basically trick the type checker. A JavaScript "class" is a `Function` object with a lot of trickery in the background to make it look more like a real class. This includes such things as a `new` keyword that silently performs operations to let a function return something even if it doesn't say to return anything (emulating a constructor) and a `prototype` property and an `instanceof` operator that are coded to paper over the fact that a parent's `Function` object isn't actually in the prototype chain of the child `Function` object (emulating a typed, class-based inheritance scheme). In the end, you just have a JavaScript object (not class) that can delegate to (not inherit from) a "parent". Because it's just a JavaScript object, you can modify this "class" to your heart's content. The `class` keyword really works wonderfully and I don't begrudge anyone using it. Other than some edge cases - and unfortunately, this includes static properties, which don't work precisely because a parent "class" is not in the prototype chain of a child "class" - it performs in a way very similar to actual class-based languages but with more flexibility. It doesn't have a pure prototype level of flexibility or simplicity, but the vast majority of the time that simply doesn't matter. It doesn't practically matter all that much, but I really do wish more JavaScript programmers knew what was going on in the code they write.
people have a cli\-tool shaped hole in their hearts, esp if they've done ember or angular in the past. Most of the config is generated for you, and there is nothing to figure out. You literally just \`ember new project\-name\` (or \`ng new project\-name\`), and you have a dev server, reloading, fingerprinting, routing, stare\-management, dependency injection, unit integration and acceptance testing \-\- all out of the box, 'for free', without thinking about it. The amount of effort it takes to even get close to all of that is a massive pain.
Yeah, and many have said similar in the issue tracking. However, last I checked, the proposal authors still hold that this is the only way forward. I really hope that that isn't the case, but sadly we haven't seen any progress towards a different outcome.
uh, sorry for being vague. What I want is for there to be two different graphs with their individual data in them. But what I am getting now is 2 graphs with their data joined together. In the image, the ideal graph is suppose to have 163.158.90.10 and 163.158.92.21 in one graph and 2 other values in the next graph. For some reason, the graph only takes the last input (displayApps(SearchAll)) and loops it twice. Instead of having data from Top10SRC and SearchAll.
OP asked what’s the diff between js classes and “real” classes. I guess he put real in quotes cus he doesn’t exactly know what’s supposed to be a real class to begin with. Comparing those “real” class and JS has diff in inheritance and how it’s used, despite both trying to model the same design pattern. I think it’s a bit disingenuous to just hand wave it with yes JS is classbase inheritance.
It’s necessary to work at that level when doing interop with C. This is what makes JNI so “fun” to use.
Sounds like you're putting all your data into the same `google.visualization.DataTable`. You should use two different `google.visualization.DataTable`s instead.
It’s common knowledge.
Take a look at http://youmightnotneedjquery.com It shows common hairdryer functions/patterns and how to do them with vanilla JS. For example the $ function can be replaced with `document.querySelectorAll` and then manually loop through results. In your case since you're selecting IDs, `document.getElementById('Input')` will work best. 
I consider JavaScript classes not so much about question of whether or not they are "real" but how does the language make use of the fact that it has classes. For JavaScript the answer is that the language does not use classes for a many things. It behaves almost as if the concept of classes would be non-existing! For example, a language could define Matrix -class and allow one to implement multiplication operator such that you can write expressions like Mt = T*R*S where each variable represents a 3D Matrix for Game Engine. This would be easy implement at compile -time and very useful for programmers. Also checking correct types of function parameters and return values, creating variants and mixins, extending classes, creating generics, interfaces, type classes would be possible. But in JavaScript classes are mostly used just for the bare minimum of what would be possible. 
This is the correct answer. There’s no such thing as a “real” class implementation. There have been many throughout history, each with idiosyncrasies. This stuff is all made up, it’s not like we’re observing things in nature. Programming concepts are generally in a fuzzy spectrum.
What is the situation? Anywhere you put your code you can put the whole jquery library. 
&gt; Electron + Preact *giggle*
I'm going to be brushing up on ES6 and ES7 very soon, then updating this will be task number 1. Thanks for the feedback! 
&gt; Since Javascript is a functional programming language where everything is just a function This is very wrong 
Thanks for the feedback! I've always done all of my work in one script file, so how much would you split them up? For example, I imagine a function per script would be very excessive. Presumably, group them by functions with similar tasks? I'm not familiar with much beyond HTML, CSS vanilla ES5 JS and some jQuery at the moment. I do hope to learn about modules, frameworks etc soon though. Thanks again!
I have used both quite a bit. The typing aspect of Typescript is nice, but the number of bugs it helped me avoid always felt way lower than theoretically advertised, and by itself, insufficient to justify the big extra layer of abstraction.
&gt;Zero Config would imply there is a certain way to use parcel, but when I look on their website it does not tell me anything about what I can and cannot do. ... If it doesn't then what's the advantage of having parcel?" if you want to play around with a working app, all the react projects in here use parcel: [https://github.com/NullVoxPopuli/react\-vs\-ember/](https://github.com/NullVoxPopuli/react-vs-ember/) [https://github.com/NullVoxPopuli/react\-parcel\-playground](https://github.com/NullVoxPopuli/react-parcel-playground) parcel isn't "exactly" 0\-config. It utilizes common things, such as babel, and provides some defaults. Like, if you want to add stage\-0 things to your app, make a babelrc and add that! want to use typescript, add a tsconfig.json. :\-) &gt;Say for example i want to make a website that interacts with the server via the native 'fs' module. Why would you do that???
it's almost like he wanted to say the exact inverse of the truth
I think there is a built\-in browser recognizer; [https://developer.mozilla.org/en\-US/docs/Web/API/Web\_Speech\_API/Using\_the\_Web\_Speech\_API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API) . Looks like it has some caveats, but it's a thing.
Hmmm, `__proto__` is deprecated, and should be replaced with calls to `Object.getPrototypeOf()`. Also, classes can be created without constructors at all with `Object.create()` rather than `new`.
Here, you are rendering the charts after the `val2` &amp; `val2` have been correctly calculated, but your issue is stemming from the fact that your variables are all over the place. &amp;nbsp; You have `val2` &amp; `val2` in the global scope, on the window object, which is a _bad_ place for them to be. Hence in one of my refactors, I cleaned that up for you. &amp;nbsp; Your `drawCharts` function is using the `val2` &amp; `val2` from the global scope, and them getting set correctly at the right times is where all your issues are stemming from. &amp;nbsp; Instead, declare `val2` &amp; `val2` in a function somewhere, then _pass_ them into the charting function once they're ready. That way they aren't polluting the global namespace, and are being used where they're needed.
[Wikipedia references](https://en.wikipedia.org/wiki/Prototype-based_programming#Concatenation) [Kevo](http://hopl.info/showlanguage.prx?exp=1691) as a prototype language that copies rather than delegates. ...not that I have ever used it nor have heard of it before seeing it used there. 
&gt; open source book Is the book open source, or are the examples in the book open source?
I've seen a lot of posts about these questions lately and every single one has been answered by You Don't Know JS Series. I'm still currently going through it but this is answered in detail in the book. Give it a read, it's a lot.. but useful and insightful.
looks like the book is https://github.com/GraphQLCollege/fullstack-graphql
&gt; You should think carefully before using Sucrase in production. Sucrase is mostly beneficial in development, and in many cases, Babel or tsc will be more suitable for production builds.
Hi! Both are open source, the book and the examples. The book is hosted on github at [https://github.com/GraphQLCollege/fullstack\-graphql](https://github.com/GraphQLCollege/fullstack-graphql). The examples are hosted on glitch at [https://glitch.com/@JulianMayorga](https://glitch.com/@JulianMayorga).
When using `super()`, they inherit all transferable attributes of the parent class, not just the protos being referenced. 
Looks great! You can set \`min=0\` on the input for the demo so you can't set minus inputs 
If you want the most simple, basic answer it’s that they’re constructor functions used to create objects. Consider that this: function MyClass (a, b, c) { const someMethod = () =&gt; null return { someMethod, a, b, c } } Is fundamentally the same as this: class MyClass { constructor (a, b, c) { this.a = a this.b = b this.c = c } someMethod () { return null } } And the “syntactic sugar” bit should become a lot more clear.
Yes, I was thinking the same and also limit the maxiumum inputs to 10. What do you think would be a good way of implmenting this? Checking the value of the prop and setting it manually in the render function?
No problem. I think you have the right idea. I’d split them up by similar function. It’s somewhat subjective but one thing you can ask yourself is “where would someone new to this project expect to find this code.” Also with “view” components (things that render to the dom) you typically have one component per module.
It refers to how classes in Java and C++ are basically templates for objects that are created from them. JavaScript, meanwhile, handles inheritance by literally delegating objects. So when folks see "class", they generally think of the Java/C++ style, when in reality "class" is performing the same kind of delegation that JavaScript has always done for inheritence.
Note to self, r/javascript does not like humor
CDN
`{}` equals nothing. 
 class Foo {} const f = new Foo() f.constructor === Foo // true
function Toto(){} =&gt; new Toto(); class Toto {} =&gt; new Toto(); Sugar because JS is a prototype oriented language, then as others already tolds, class has been introduced to make it "more clear" (imo it's designed for Java'ers coming to JS and lost because prototype language is completely different).
You can set "min" and "max" attributes to the input element: [http://jsfiddle.net/5taezocj/](http://jsfiddle.net/5taezocj/)
Anytime I recommend an electron based app at work, the engineering folks seem to snicker. What am I missing, other than it just seeming to be a memory hog?
Oh I was talking about checking it internally for the component itself so that passing in values of props doesn't cause issues with the component. What you mentioned I understand, thanks, its a good suggestion, will make the changes.
Nothing. It's basically saying you want to put together a website but host it in a Web browser. Just make a website.
First, is there a specific reason you're adding onclick events through js? Why not just put them in the HTML? Second, if you want to do a request several times, just call the function or request several times. So long as data doesn't need to persist between calls, you can just call several requests. Otherwise, I would recommend using a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) chain.
Especially with installable PWAs coming to both Chrome and Edge, electron would only really be needed if you need access to parts of the system that a normal Web browser doesn't already have. 
Hey! That's my modal's z-index!
Same thing happens when I pitch ReactNative :\-D These are all just tools \- finding a valid usecase for any tools is up to us. For me, I'd rather not build C/C\+\+ based desktop apps again.
And if you do, spinning up a api nowadays is fairly cheap.
the reason im adding onclick its because when i click a button "follow" i want it to change to "unfollow", so when i click the follow or the unfollow (0 or 1 in the database) when i do that again it doesnt work the value doesnt change back ... what im trying to say is ... it only works the first time i do it . btw im doing a social media website
Congrats on the app, guys! 
Your definition might exclude Python classes and who knows about other dynamic languages. It sounds like you thinking of classes specifically as they exist in Java and C#.
[removed]
How about no app? Is a browser that big of a problem?
You should go to /r/LearnJavascript and ask your question there. But before you do that, please learn how to ask your questions effectively. Saying... &gt; but it doesn't work well... ...and throwing up a bunch of code doesn't really help anyone understand what your problem is. Do read the last question in the FAQ ( https://www.reddit.com/r/javascript/wiki/faq ). It is short and direct, and it will help you get more and better answers.
Or use [Hadouken](http://hadouken.io) as a simple Electron wrapped to target desktops that don't have Windows 10.
Refer to my answer to [Let's talk about ES6 classes...](https://www.reddit.com/r/javascript/comments/8a7xao/lets_talk_about_es6_classes_or_rather_lets_not/). You can also find the library mentioned (CrxOop) at npm (crx-oop) as well. The gist of it is encapsulation, polymorphism and abstraction. A simple question to get you started on the right track to understanding is, can I cast this JS object from its class to a base class? If the answer is yes, seek next to find out why, and if no, seek next to find out why. If you need further elaboration, I am happy to help, but please refer to my answer above first. 
This looks like a great resource. Thanks for putting in the work and sharing it! Skimming through it so far, I really appreciate that you took a pragmatic approach, and used `Postgres` &amp; `knex` directly, instead of abstracting them away with something overcomplicated like `prisma`. 
You'll learn that non\-informative, condescending comments aren't the way we help each other here.
If it's only one or two libraries \- [https://unpkg.com/](https://unpkg.com/) For more, the amount of HTTP requests would start to outweigh the CDN benefits, so it starts to make sense to use a bundler.
i'm a javascript noob and after reading your answer, i just have one question... how long did it take you to learn in such detail about so many languages? i'm still struggling with the differences of syntax between java, python and javascript... will i be able to get to this level of grokking code?
Thanks! We'll be happy to unswer some questions about challanges we had while developing the app 😋
I couldn't get it to work in React, granted I'm not super amazing with react or anything either.
whats the joke?
Electron whose "Hello world" app weighs a whopping 140mb now combined with "hey, I shaved off a few KB" preact.
Well, what are you building? Ask yourself if it could just be a website instead. Ask yourself if high performance is important. There are things that electron is great for and things that it is not. Depends on the goals of the project.
Whether adding it via javascript or html, it should work the same way. For instance, [check out this plnkr](http://plnkr.co/edit/AFmNlSjG1WHGIf97TJSt?p=preview). Now the onclick is in the html and doesn't have to be added via javascript. Now you can do your request and swap the text according to the response. Speaking of which, I recommend you either check out Promises or [this page on XMLHTTPRequest response](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response) so you can toggle the Follow/Unfollow in accordance with the response. 
Yes, but for the most part you don't need to know it starting off. You can know it's different, but if you start working with the parts that matter as to why it's important you can start to learn it then. Experience will teach you far more than you'll learn in a class or training. This is generally why Junior developer positions exist and I hate it when "junior" means "someone to throw the menial tasks at". Junior development is a time to grow and learn. It's going to be slower and more bug prone than a senior. This is expected since they should be learning part time.
&gt; A class is a static, compile-time artifact. Full stop. Classes neither need to be static nor compile-time artifacts. Where did you get that idea? https://en.wikipedia.org/wiki/Class_(computer_programming)
PWS's are just very basic functionalities, nothing more. That Google has managed to pull off that we give it a name is pretty silly. Google already tried Chrome apps and it failed catastrophically. Meanwhile, most of the daily apps you run are probably electron. The most prominent that i can make out on mine are: VS-code, Atom, Spotify, Slack, Discord, Hyper, Github. Electron has full file system access as well as full access to node and thereby native add-ons. 
You are, of course, absolutely correct. You would not believe how many other things that I wanted to write that I cut out just for the sake of space. I wanted to explain *why* optimizations had to be missing and *how* the prototype chain in JS "classes" is not what it seems. It's really something you could write a book about. To be more complete...whether the language is static or dynamic, whether or not it's easy to modify them at runtime, classes are different from objects. That's the very nature of a class-based system, all the way back to Smalltalk. You have classes, and you create objects as instances of those classes. In JavaScript, "classes" *are* objects. There can be copies and prototypes, but there are no instances. This is a really fundamental difference that often gets lost in JavaScript's quite successful attempt to appear class-oriented, but the difference is still there and has big ramifications.
The world needs more people like you, who write well thought out and meaningful responses without attitude arrogance. I salute you sir 👍🏻
The fun part is that ECMAScript already had a proposal for adding types, packages, "classical" classes, and the idea of public/private variables. It was called ActionScript 3 (ECMAScript 4): package { import flash.display.Sprite; import flash.display.Shape; import flash.display.Loader; import flash.net.URLRequest; import flash.events.Event; public class LibaryLoader extends Sprite { public function LibaryLoader() { var ldr:Loader = new Loader(); var urlReq:URLRequest = new URLRequest("Library.swf"); ldr.load(urlReq); ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, loaded); } private function loaded(event:Event):void { var library:Object = event.target.content; var circle:Shape = new library.circleClass(); addChild(circle); } } }
Java script
Create the XMLHttpRequest in a function and call that function several times.
Touché :-)
&gt; Pick up “You Don’t Know JS” by kyle Simpson (free online) if you want to get a true understanding of what’s going on. For the specific topic of classes, I personally don't recommend YDKJS. As unpopular as it may be to be critical of YDKJS, I think Kyle's opinions and writings about "class" is based on bad information and bias. Bad information because Kyle used Java as the gold standard for what is or isn't a class or inheritance. Java's implementation is certainly very different from JavaScript's, but then in Python or Ruby, for example, classes and inheritance are strikingly similar to JavaScript. In Python and Ruby, classes are themselves memory consuming runtime objects (a building, not a blueprint), and inheritance happens at runtime by delegating to a chain of objects -- just like in JavaScript. Kyle thought JavaScript's class implementation was unlike any other language's class implementation, but he was mistaken. And biased because he seems to [deliberately write bad code](https://www.reddit.com/r/javascript/comments/4zl2id/if_behavior_delegation_is_so_awesome_why_did/d6wx7su/) when using classes and deliberately write good code when using not-classes, even though it's equally easy to write good or bad code with or without classes. (These are just two of many mistakes.)
Thanks for the reply! I wasn’t suggesting something to build, I was asking about using existing apps (ie Notion). No rudeness or anything, but they’d get an immediate “oh another electron app” and I didn’t ask why. I appreciate the clarification! 
&gt;Anytime I recommend an electron based app at work, the engineering folks seem to snicker. What am I missing, other than it just seeming to be a memory hog? Nothing. Just people being silly. An electron app is better then no app, which often is the alternative. Maybe don't install an electron calculator, but most electron apps I use have no native alternative. And frankly, some of the native tools are so huge (like sqlserver management studio), and I use 2&amp;#37; of the feature set, that it's simply wastefull in other ways.
This! When I’m making an app that needs access to the file system, network sockets, a native only module, or any of node’s native APIs, that’s when I reach for RN or Electron. Those tools are better at those tasks right now than an installed PWA. When that changes, there will be less need for Electron.
Hi, There are some Javascript libraries that you can use to draw diagrams, e.g: \- JointJS \- Rappid \- MxGraph \- GoJS \- jsUML2 library \- Nomnoml \- Mermaid.js \- Diagram.js \- State.js Good luck!
10+ years. It'll get easier as time goes on.
omg im so dumb , i had a variable in the wrong place bro thanks for the help and thank you for the toggle function it is going to help a lot again ... sry for any trouble i caused you 
Trust me: you're not so dumb. Coding is hard. I once tried to figure out a problem for two days, and then I talked to someone else, and he looked at the code and showed me the problem. Sometimes you just don't see the issue. And, I'm in this sub, because I like helping people out. Trust me, it was no trouble at all. I'm glad I could help!
10+ years. It gets easier over time. Just keep learning and stay curious.
Thank you for your guidance!
Depends on your needs, really. If its critical JS to run your page you're likely better off bundling it with Webpack since Webpack will also minify it for you, while also standardizing the way you access the code. If its not critical for page render then a CDN will offload the bandwidth and save you some cash.
After reading your comment above, I'm pretty sure your problem is you need an initial state on the client side. Try getting it working without the xml request first. Set up a state for the elements that you can track and toggle. Once you can actually setup the state properly you should send the xml. Also in your xml request is not returning anything or setting any value anywhere after it's done. You basically just set the asd variable and didn't do anything with the return value from the request so the function is pretty useless right now. Anyway I hope that helps, best of luck with your social media site.
thanks i intend to learn :)
Classes are a template for creating objects. They encapsulate data with code to work on that data. That is it. There is no sense in which JS classes are not real classes.
Forgive me for the naive question, but is this now the preferred way to store non-sensitive information (like a saved color scheme or select menu option) as opposed to cookies? It certainly seems easier to work with, but I’m not a developer by trade so I might not follow trends as closely as other people on this subreddit.
Stupid CEF binaries
Well, with websockets you gotta do 2 implementations. A client side and a server side implementation. Those won't really change between frameworks as most will simply use JavaScript' ws library. How and why you use them will change depending on your business logic and tools at hand. As with everything in programming, the important part is to understand how it works rather than the details of each implementation.
Because it's not "real programming".
&gt; I want to eat a slice of pie today. &gt; let me try out this perfectly normal looking pie. &gt; why is the oven in my pie?
Thank you. Still have some confusion, but I did only start learning JavaScript this week, so I think it'll clear up more, once I delve more into it.
thanks for sharing. keep up the good work.
Hi, first of all THANK YOU for replying, but I realize that the input doesn't have to be normalized at all as confirmed by a reply from the creator of brain.js from another subreddit. Hope this will help you too by knowing this :D 
Hi, first of all THANK YOU for replying, but I realize that the input doesn't have to be normalized at all as confirmed by a reply from the creator of brain.js from another subreddit. Hope this will help you too by knowing this :D 
Thanks for this, I'm new to both and this was super informative! Brought here because Brad Frost posted a link on his blog: http://bradfrost.com/blog/link/vue-js-or-react-which-you-would-chose-and-why/
Too many lazy companies just stick their web interface in an Electron wrapper and call it a "desktop app".
PWA has way more than basic functionality. I think you'd be surprised at what you can do in a browser if you need to. I'd argue that a lot of the apps you use could function exactly the same as a PWA as any native or electron app. As you say tho, you don't get file system access so you'd have to write those off but otherwise you're pretty golden for nearly anything else.
VSCode is installed (as would be Atom and Hyper) but I use those others and many more as desktop "PWA"s (via Chrome's add-to-desktop). If you use Windows or Linux they are pretty much indistinguishable from installed apps and startup faster than Electron instances. On Mac OS I guess Chrome hasn't figured out how to integrate with the dock like it does with the Win/Linux taskbar or to run it in a plain window. If I needed to use a Mac more often I'd probably set them up with [Applicationize](https://applicationize.me/).
If you are building a static website, why not simply type all your content in an html file and call it a day?
`Object.create` doesn't quite reproduce the behavior of `new`, but `Reflect.construct` does.
Yeah but I'd recommend you to have a look at libraries such as localforage. It will let you use a simple api, similar to localstorage/sessionstorage, but its asynchronous and will utilize indexdDB or WebSQL when possible, with localstorage as fall-back. https://github.com/localForage/localForage/blob/master/README.md
Dry is why
Given the examples /u/thingmabobby gave a database seems overkill no?
Well I can think of less complex ways to solve dry.
Looks good! This is a minor nitpick, but you can make the API fields easier to scan visually by using white space to denote "not required" or "no default" https://i.imgur.com/jXVOsIP.png
That makes sense! Maybe I'll add the tick but not remove and leave it blank as it may cause some bit of ambiguity. 
You'd still have to set the properties of the created object by hand as opposed to making use of a function that automates that process. But you definitely can create a class using Object.create() in the sense that you can set the prototype of many objects to be the same and they would share some properties.
`//xmlhttp.responseType` `= "application/jason";` I think you meant "json" :p Bom ler português por aqui de vez em quando.
Created my first podcast about being a JavaScript developer. **The Developer Experience** Available on [iTunes](https://itunes.apple.com/us/podcast/2-thai-duong-nguyen/id1391981025?i=1000413190566&amp;mt=2) | [SoundCloud](https://soundcloud.com/developer-experience/2-thai-duong-nguyen)
It's a memory hog. Look at the speed of Atom and compare it to Emacs.
[https://addyosmani.com/resources/essentialjsdesignpatterns/book/](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)
A few things. Generally poor performance and resource usage compared to native apps. The resource usage isn’t a *huge* deal on most modern systems unless you’re running an absolute ton of stuff, but if you do something like open a large file in Sublime and then compare it to Atom or VSCode you’ll see the difference. Battery usage is also a bit of an issue; Chrome is a total battery hog on laptops and electron apps suffer with the same problem in my experience. The biggest point for me though is that it’s usually a subpar experience to use. Is it better than no app at all? Yes. Are Electron apps usually better than something like Java + Swing? Usually. But unless the developer takes very very good care to adapt the experience per-platform (Microsoft have, IMO, done a very good job with VS Code), it suffers from the same problem pretty much every write-once-run-everywhere software does, which is that things don’t fit in with the system or work the same way. Conventions usually aren’t followed and it creates a bad time in a way you can’t always put your finger on. With the sole exception of when the application simply wouldn’t exist on a platform otherwise, write-once-run-everywhere only benefits us developers. The user suffers. 
no offence, but it's rude to call people like that. I guess you have little to no idea of businesses. I am not surprised because you sound like a developer so it's quite obvious you have less business skills. like the previous guy said businesses are there to make money not stay up to date with latest technologies. latest technologies may have enormous amount of benefits, it could be free, but there are other factors to be considered too. most of the businesses evaluate the pros and cons of using a technology prior to introduce it to the company or for a project. When a project is started, every company conducts a feasibility study to assess the viability of the project. It uses various criteria like technical, economic, legal, operational, social, schedule feasibilities likewise. it assesses the cost, viability, availability like so many factors before using the technology. also the project lead researches about various technologies to find the best approach for the project, then he compiles it as a research report to hand over to the project manager who then refers to it to pick technologies, techniques for the project. If a technology doesn't have any significant amount of advantage there is no point of moving to there. also if employees are not familiar with the new technology company can't just force them to accept it. this is what finds in operational feasibility. many employees may resist to new technologies, they may complain about project manager to top managers, they may leave the company if they are pressured to accept it, or at least it may reduce their efficiency and increase the stress. Do you like a company forces you to accept something against your will? nobody likes it. If someone is experienced and familiar with something let them to use it as long as they can deliver it within the allocated time frame. A Project manager doesn't care whether it's angular, or pure javascript or whatever it's, he/she only cares does it work? does it satisfy use requirements? how long it takes to complete it? How is it easy to maintain the application once it's released to the client. If something can satisfy them all, that's all a project manager cares. If it's a startup, then I understand jquery has no significant advantage, it's better they use the latest technology. but if it's already a large company they may or may not have a reason to update. updating the existing technologies cost time, money. they may have to change employees, train them, give them enough experience, conduct meetings, conduct seminars, deal with resistance from employees, stick with timeframe while doing all those things, change the infrastructure of the company it's not that cheap for a large company. So please do us a favour and learn project management basics. 
Yeah if you're just saving some color settings then absolutely. But nowadays it's sort of common to save the whole state of the application (React, Vue...) using centralized state management (Redux, Vuex...). So I thought it would be good to share some info on how to make life easier :)
ahahahah, obrigado pela gralha. Mas como deixei do usar, então caguei xD.
you need to wait until the dom is ready.
Make sure to include your `main.js` in your `main.html` using a script tag. https://www.w3schools.com/tags/att_script_src.asp Also, if `main.html` is your "front page", then it should probably be named `index.html` as most web servers will pick up the file and serve it as the root page.
If you plan to do web development, then no. JQuery isn't used much , at least in angular. I use ng-bootstrap along with bootstrap in angular applications. 
Ooh, what does that mean? How do I confirm a dom is ready?
Make sure that your script get's included AFTER the canvas element or listen to the DOMContentLoaded event if you already know about event handling.
`document.addEventListener("DOMContentLoaded", loadCanvas);` 
Hi /u/Adjilino, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/SulfurCannon, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/zardoss21, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'.
Hi /u/zeph_s, For javascript help, please visit /r/LearnJavascript. Thank you!
It was useless, however. He was lounging upon the stairs and in the direction of the back hung a very coarse one and two curving wings, like the bark from a kettle. The instant that we both rushed upon him eight-and-forty hours, and he lay upon the seat and stood with her glove buttons. Suddenly, with a very stout, florid-faced, elderly gentleman with fiery red hair.
As others have pointed out, the more programming languages you know, the faster you tend to pick up new ones. The reason for this is because at some level, most languages share certain concepts with other languages, there are very few languages with unique concepts. If you come across a concept in a language where you're already familiar with the concept from a different language, you only need to learn the implications of a different implementation of that concept. Let's start with the single most universal concept, that being problem solving. If you understand how to break down a problem into easily addressable parts, then that will apply to almost every programming language in existence, and it's this skill that really separates the coders from the programmers. Some languages resist breaking down problems in certain ways, but in general, most languages are general purpose enough to avoid this. Next in line for universal concepts would be variables. If Javascript is the first programming language you've ever worked with, then variables were probably a new concept, so you had to learn about how to use them, how to assign to them. In Javascript, you had to learn about the scope of variables, how to declare them, and the effect this had on the scope. Now let's say you decide to learn PHP. Other than some differences in scope and syntax, most of what you know from Javascript variables will apply to PHP. Now, if you decided to add C instead of PHP to your knowledge base, you're going to have a higher learning curve. First, because C is a typed language. This means that you don't just declare a variable, you have to declare what type it is. If you've got the string "1" and the number 2, you can't just say "1" \+ 2 and assign it to a variable, you have to convert strings to numbers (either integer or float) and add them, and then store the result to a variable that has been declared to store integers or floats. Second, because C doesn't have built in managed collections, you'll have to relearn anything having to do with lists/arrays/objects. Finally, it doesn't actually have a string type, you use an array of characters, and since C doesn't have managed arrays, you have to declare the maximum size of the array (maximum string length) at compile time or manage your own memory by allocating it, using it, and deallocating it. That last bit means learning about pointers, one of the things that can go wrong in spectacular ways in C. There are other near\-universal concepts like functions and flow control, and less universal concepts like objects, interfaces, parallelism, etc. Given the right background to give you all the necessary concepts, learning the basics of a new language can come down to learning the syntax and implications/interactions of how the concepts are implemented.
Yeah, AS3 looks pretty nice. I'm not familiar with the history, but I had wondered whether JavaScript had been on the same standards track as AS3, which Brendan Eich's [2008 ES Harmony email](https://mail.mozilla.org/pipermail/es-discuss/2008-August/006837.html) seemed to imply. It's very unfortunate. JavaScript could really benefit from adopting static typing and 'comprehensive' classes. I hope that, with the rise of statically typed superset languages like TypeScript and Flow, these features will eventually make it into standard JavaScript, just like a lot of features of jQuery did. I'm not sure why the proposals were opposed a decade ago, and I hope they wouldn't be today. The trouble is, I'm not aware of any effort to do so just yet.
Lol, of anyone asked me the difference between a class and a pure object in JavaScript I'd asking him back why "watman" It's honestly a dickish question to ask :/
I wouldn't call you back
Oh..... oh. Thank you. I'll give that a shot and get back to you.
To give some more context, it is a JS event that is fired when "the initial HTML document has been completely loaded and parsed." https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded So in your case, if you were originally including your `main.js` file in the `&lt;head&gt;`, the JS would get executed before it knew about a DOM element with an id of `canvas`, hence why you were seeing an error.
Gotcha. You can certainly create arbitrary prototype chains that way, but I think it is misleading to call that a class on its own. I'd reserve the word "class" for specifically an object created by a constructor function, and `Object.create` can't fully replicate that. `Object.create` existed in ES5 too, but no-one would have said the language had classes.
My state has been growing, and since I'm slow to adopt cool shit because I'm an idiot thank fuck you spoke of localforage. (Because even if I'm not on a full redux store... I _am using a subject_ I'm not an animal xD)
Oh... so should I just take it out of the head element and put it down below the canvas element? What should that look like?
\`currentState.name\` is a an array. The \`removeNameHandler\` function is attached to each "Remove" button on the friends list. Initially \`currentState.name\` has 3 names in it and the \`NameList\` function returns a list with those three names. When you click on "Remove", the \`noName\` function (which is the removeNameHandler function passed down as a prop) takes the name of the friend associated with the clicked button and compares it against the list of friends from \`currentState.name\`. When the name from the list and the name that the function was called with are the same, it does *not* add the name to the new name array. Basically, each Remove button has a name attached to it and when you click the button, the filter() method creates a new friend list without that specific name.
I must say the only difference between VSC and Sublime is when I first open the Terminal, otherwise I'd never know it was done with Electron. And I have always had issues open huge files in Sublime - it may have something to do with the plugins I am using, but the plugins are part of the Sublime ecosystem so that's no excuse. Slack, OTOH, is quite the memory hog.
Certainly hope so, that guy is a dickhead (lol. I had to.)
No mention of the Refelection API...
Very interesting reading. One difficulty I had working with GraphQL and especially Apollo is about the organization of the schema and its impact for mutations updates (apollo caching system). Working with id for almost each type helps a lot and force the dev to think more in graphs.
Yeah I don’t figure either why people don’t know how to write the world JavaScript properly. 
The idea behind Babel is to make your ES6\+ run on older browsers. Sucrase does *not* do this, since it focuses on a different use\-case. Specifically, Sucrase exists to turn some popular but non\-standard features into plain\-old Javascript (JSX, Flow, and Typescript). If you *know* your code will only run in a modern environment, like when you're writing code for the server or Electron, this sort of thing makes a lot of sense. Babel can do this too, of course, but it sounds like Sucrase is faster at it. Since our code needs to run in random web browsers, we actually do care about Babel's ability to make new code run on old platforms. If we were working on a different project, maybe Sucrase would be interesting to us. We are always trying to make our unit tests run faster, so eliminating the \~10 seconds Babel takes to transform our massive codebase would be a good win for us.
Spent a couple hours and 30 log statements trying to track down an issue I was having. Eventually realized that when I was passing a value into a function, it was actually passing a reference. So everything I did with that “value” was actually updating and changing things in a completely different part of my program. Tried solving it with a genius *var newVar = passedValue;* and then realized I essentially just made a reference to a reference. I hate JavaScript. 
HTML has to load first then you can use getElement call to make changes using JS
I made a keyboard shortcuts library https://github.com/soska/keyboardist with a react wrapper https://github.com/soska/react-keyboardist. Useful?
A common approach is to put your script tag at the very bottom of the `&lt;body&gt;`, right before it is closed. &lt;html&gt; &lt;head&gt; ... &lt;/head&gt; &lt;body&gt; &lt;canvas id="canvas"&gt;&lt;/canvas&gt; &lt;script&gt; // The script here has access to the `#cavas` element &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; There are several reasons for this as [described in this Stack Overflow post](https://stackoverflow.com/q/436411/864233), but for you this would also let you run your code without having to wrap it in your `ready` function. It is just another approach. The SO post linked above advocates for using `async` or `defer` attributes, but personally I always just stick my scripts at the end and wrap any DOM operations within a "ready" function, mostly out of habit. 
Looks interesting! And i love the name. I sing the notes every time I read it
But its the same with other languages like c#. Just use clone.
I’m coming from Java where that is not the case 
Well you asked for a reason, that is a reason
It would be pointless to learn if it was the same. Dont hate.
Most objects in Java are references as well.
You can pass a reference to an object, of course. Otherwise you couldn’t do anything with OOP. However the difference is Java will never have you pass a reference to a value, it will pass the value itself. If you’re interested: https://javapapers.com/core-java/java-pass-by-value-and-pass-by-reference/
baked a raspberry pi. lol
Things that are considered "values" and references in JS and Java are the same. Strings are passed by value, as are all primitives. Objects (including functions) are passed by reference (or rather, the value of the reference.) I'm trying to think of something that would be different between the two but I can't.
Imagine you have a variable and a function/method. var a = 5; function foo(thing) { } foo(a); —— In Java, you are running foo with the value 5. In JS, you are running foo with the reference a. 
Recursive Ajax calls to an api; callback executes the network call. Lol 
A number is immutable so it doesn't matter: var a = 5; function foo(thing) { thing = 3; } foo(a); console.log(a); // still 5
lol, [no you aren't](https://flems.io/#0=N4IgZglgNgpgziAXAbVAOwIYFsZJAOgAsAXLKEAGhAGMB7NYmBvEAXwvW10QICsEqdBk2J4wAVzTViEegAIwACjQBKOcAA6aOXO0BeXXIDUcgIxadQuLVj4otAOaLgaViq2stWgG4YATnIYcgbmaFpKGO5hUvTWtvZOwBhuWpQgcDCw0rJoCDymAAyIBWwcIJg4ePjUcAI09IzMPGwAuqxAA).
Some totally insane workarounds for callbacks before I understood closures.
Biggest mistake, mostly but not entirely JS\- Back around '12 or '13, I was working on an e\-commerce service. We wanted to operate on multiple platforms, so we broke the frontend code into files for each that connected with a core file, plus specific configs for each client, all of which shared a namespace. This was before Webpack/Gulp were big things, so we had to load each file individually; Mistake #1, I suppose. Eventually, we decided that we needed a new feature for one client, so I added a function in their platform file that referenced a lookup table, which I put in the core so other platform files could refer to it. This worked fine in our dev environment, so I put it up on our production CDN and we got on with the day. A day or two later, one of our biggest clients cancelled because our service was breaking their site. It turns out that CDNs propagate changes at uneven schedules, so the platform file got updated first, couldn't find the lookup table it referenced, and broke, which broke the rest of the client site. TLDR: I lost one of our biggest clients, and almost my job, because I didn't know how quickly CDNs update their files. Stupidest thing: Same job, I was working on fitting our product into a carousel, and was using a library that required we set our own CSS sizing on everything, IIRC. So, rather than either fix our sizing across all our clients or fix sizing for a client, which would be broken as soon as something changed size, I had some code to calculate what size the carousel needed to be, and then [create a CSS style](https://stackoverflow.com/questions/1720320/how-to-dynamically-create-css-class-in-javascript-and-apply) for that carousel.
Mixed camelCase and snake_case in variable names.
&gt; lazy companies It's weird to call companies "lazy". They just go with the solution which brings them most **apparent** value for least cost.
I totally did the same thing when I was first learning the joys of JS. I hate JavaScript too. 
Used `that = this;`, to prevent problems with this, only to later realize that I hadn’t intialized the function correctly, thus my that was still pointed to window, causing pollution. I didn’t yet fully understand closures or how this operates. Also, calling an alert function with zalgo text strings, which straigh up would crash the whole browser.
Coming from Java as well so I feel you. I have constant WTFs the first week because Javascript handles things so radically different. Some are worse but many are better than Java. We just have to know how it rolls. 
And that's beside truly egregious little fuck-ups in basic functionality. I've talked about this before, but there's a fairly popular app I used for a while before I eventually quit because this thing could not copy text using keyboard shortcuts. You had to select the text, right click and select "Copy" from the menu to copy text from the app. Just freaking ridiculous considering that Ctrl/Command+C is almost a reflex at this point for millions of desktop users. I can't count the number of times I searched for nonsense because of this app. 
I too dabble in php
But... that's using es6 in the browser using babel, webpack is just to bundle it.
Lazy is the wrong word, but that cost/value calculation you speak of is often too heavily weighted towards the near term rather than the long term. 
&gt; most of the daily desktop apps you run are probably electron. ROTFLMAO
Yes you can assume that this code is just start point
I think if your app is small enough that including electron would be a waste of space why not consider a PWA instead. Otherwise I think the big reason for Electron is it gives people with a background in frontend development an easy way to build a cross platform application because it's made with the tools they already know. I think electron is neat, but I totally understand if people build electron apps that are poorly optimized because they're not taking memory use into consideration. For instance I think VS Code uses some native code, but it's mostly stuff like ripgrep.
I really appreciate the succinct reply. Thank you!
No Advent of Code. Bad list.
Maybe this will help you a bit: https://wanago.io/2018/03/12/defining-the-undefined-a-try-catch-trick/ Cheers! :)
I have a very valid reason that requires my app to be a desktop app, the client can't be hosted. Electron is a *great* option to get a cross platform solution quickly, it's up to the developer to make the UX appropriate for a desktop environment but that's no fault of the framework
Gotten text into the clipboard.
Is it wise to judge the value of a platform by the size of its Hello World implementation? I wonder.
Why is this bad?
@fvitas .... brake -&gt; break
Lack of control and readability by using callbacks and recurring network requests in a loop are generally a bad idea. Network requests take time, a single call is usually preferred to multiple, but of course this has exceptions. A better solution would be to use promises and asynchronously wait If you absolutely have to loop network requests. When I did this a few years ago, I was crawling sites and sending massive amounts of data off to a remote micro service in batches. 
Oh!! that way. I thought u did this before promises. Which is the only way I can think of back then. Yeah promises are to go
Ah gotcha! I guess not a huge mess-up, but it was a funny solution when code review came around. 
Mixing them can be useful imo. Ie. under_score vars for things that get sent as server vars, or perhaps globals, and camelCase for local scope only. Just as long as it's a useful separation of thought. Similar to how UpperCamel is for classes, lowerCamel is for objects. I do a similar thing with pure SQL, I only capitalize JOINs usually, and/or other things that I want to stand out. Just little forums of automatic documentation/context reminders.
&gt; If JavaScript's classes are fake, then so too is everything else in the language fake. I think you're attacking a straw man here. The argument is not that javascript classes are "fake". The argument is that ES6 classes do not add any functionality that wasn't in the language prior to their introduction. Everything that ES6 classes offer was offered by `Object.create` which was introduced in ES5. When we say that ES6 classes are "syntactic sugar", we mean exactly that. That is to say: they're a different and subjectively "nicer" way of instantiating objects. The contrast here with arrays, functions, and everything else in the language is that ES6 didn't introduce an alternate syntax for creating arrays, functions, or anything else which introduced no functionality but provided different syntax.
I'll provide a debugging hint - why don't you check what the value of `i` is right before each call to `newArr.push`.
Why TestCafe over Cypress? Considering both right now for next project
Hint number two: i + size in one of the two places you wrote it, isn’t doing what you think it’s doing.
Sometimes, when I exchange my SSD for a larger one and move yet some other github projects to the HD, I think: yes, yes, a thousand times yes.
There seems to be a problem with your for\-loop iterator. &gt; for (let i = 0; i \&lt; arr.length; i \+ size) Should be: &gt; for (let i = 0; i \&lt; arr.length; i \+= size) It should start working.
It's an interesting concept, but callbag is such a terrible name
Thank you. 
&gt; I think you're attacking a straw man here. The argument is not that javascript classes are "fake". ....I think that's _exactly_ what the argument was. ES6 classes are called fake on a regular basis, including in OP's question, where he repeatedly referred to them as "not real" classes. &gt; The contrast here with arrays, functions, and everything else in the language is that ES6 didn't introduce an alternate syntax for creating arrays, functions, or anything else which introduced no functionality but provided different syntax. Almost _everything_ in ES6 was alternate sugary syntax, including, for example, arrow functions -- an alternate syntax for creating functions -- which doesn't do anything we couldn't already do in ES5.
I just stopped reading at this point
How many of those are Hello World projects?
Thanks for writing and open sourcing this!Can I contribute? I’m going to read through this, and I’d love to send pull requests if I feel like I could add value to the text. Do let me know if you are open to that. 
Coming from C#/.Net background, I find it weird to use Web stack to build desktop app. Won't it be faster and cheaper to build it with WinForms or WPF if on Windows client or QT for *nix?
No thanks
The entire post is just a bunch of things he installed?
Writing for electron gives you the benefit of Mac and Linhx compatibility, plus easy porting to a Cordova-based mobile app for iOS and Android. 
&gt;You had to select the text, right click and select "Copy" cmd.exe?
No need for an “or” when going with Electron (also, you forgot Cocoa for the macOS version). One codebase can do it all.
425 degrees F for 15 minutes. :D 
The demo on the annyang! website is pretty convincing, worked fine in Chrome &amp; Firefox. I have a ton of things I want to do with it now. :D 
/r/NukeRedditHistory/
Also interested. Just started with cypress and really like it. The parallel test thing is an advantage I suppose. Really though, when your CI is running your tests is it really that big a deal?
/r/lolangular
That's not electron's fault though because default electron behavior is exactly opposite - CTRL-C works correctly and there's no context menu on right click. So the developer had to override this default behavior.
Uncle Bob's Clean Code. Uses Java, but he covers it all. Amazing coverage on whether from class suze, keeping your code dry, and unit tests. 
[Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship-ebook/dp/B001GSTOAM) \-\- Good luck!
thanks!
thanks!
Step 1: Learn Vue or React
Do your inner arrays always have exactly 1 object?
Also, [Refactoring JavaScript](https://www.amazon.com/Refactoring-JavaScript-Turning-Code-Into/dp/1491964928/) for JS specifically.
Not the most efficient way, and I’m on mobile so the best your getting is pseudo code... (Loop through) ARR1 and compare each key:value to each key:value in ARR1. If it’s not found in ARR2, push it into ARR3. This can be done easily with a double for loop or two nested forEach()’s Then do the same thing with ARR2 &amp; ARRe. loop through ARR2 and compare it to key:values in ARR3; if it’s not found, push it into ARR3. Then ARR3 is your differences array.
He has an array of arrays.
awesome book, thanks a million!
Isn't that someone that's better done server side?
I've had the pleasure of not using Windows for years, but cmd has the dubious excuse of being old as fuck. Powershell exists. And (like in many terminal environments) simply selecting text in cmd copies it to the clipboard, so...?
What you are doing is a subset of the json diffing task. There are a couple libraries that do that, for example: https://www.npmjs.com/package/rfc6902 . I think that is a bit more complicated than what you need, but it is a very useful concept, if you're able to make sense of it I'm sure you'll find it very useful. If you don't want to do that, the first thing you need is a way to identify object that are equal. There is some discussion here: http://www.mattzeunert.com/2016/01/28/javascript-deep-equal.html (I just googled and chose one of the first results that looked right, you may want to search yourself.) If you always have arrays, for each item in the 1st array, if it doesn't exist in the 2nd array, it was removed. And for each item in the 2nd array, if it doesn't exist in the 1st array it was added. If you want to detect modifications, or you want to handle any input, I'd recommend just going with a json diffing library like I linked above. I've written code to do that before in another language but it was tedious and I think it was about 200 lines.
I hear this all the time. I am so grateful I never learned Java. 
[This comment of mine](http://reddit.com/r/webdev/comments/8p91eu/a_good_article_to_help_you_build_your_first/e09sj7t) explains my point, I think. Plus yes, this actually is a bug with Electron that I think affects only macOS? 
My objects will always have name and age keys. What you see is complete. All json are formatted the same, they all have the same keys which are name and age. There are no arrays in the objects.
It says it's an open source book, but why can I buy it for 40 dollars ?
I actually like this. It's a lot simpler than it looks, and definitely elegant.
 let a = [ [{ name: "Adam", age: 20} ], [{ name: "Matthew", age: 22 }], [ {name: "John", age: 21 }] ] let b = [ [{ name: "Adam", age: 20 }], [{ name: "John", age: 21 }] ] let atemp = a.map((e) =&gt; JSON.stringify(e)) let btemp = b.map((e) =&gt; JSON.stringify(e)) let diff = atemp.filter((e) =&gt; btemp.includes(e) === false).map((e) =&gt; JSON.parse(e)); Above code will produce an array containing diff object. Hopefully you can use it to build on top of it.
once I debugged a function for over an hour wondering why it wasn't working only to realize there was a return statement right after the first couple lines
I'll try this out later tonight. Just 1 question, because you use stringify, what if the inner arrays are not in order, does it do a deep comparison even if the inner arrays are not in order?
Here's how I would do the comparison in javascript: http://jsfiddle.net/cuk78bvo/7/
Trying to get this set up in an ionic app. Running into some weird issues importing it as a module in Angular. Have you had any issues doing this? import { DaySpan } from ‘dayspan’; Can’t resolve all parameters for DaySpan: (?, ?). Any insight would be appreciated. 
Also I wonder if you would need to request permission from European users before sending out their password hash
Don't do magic numbers, please. Use enum-like strings 
Each object in the array is converted to string and resulting string values are compared. So " \[{ name: "Adam", age: 20} \] " and " \[{ age: 20, name: "Adam"} \] " are not evaluated as equal.
Awesome! I'll give it a try tonight.
One could also use constants for each of the numbers, right? [They're even defined that way in the type definitions](https://github.com/callbag/callbag/blob/master/types.d.ts#L1)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [callbag/callbag/.../**types.d.ts#L1** (master → 27a3d79)](https://github.com/callbag/callbag/blob/27a3d79c32934cef8c6fef5472021abe565d6e6e/types.d.ts#L1) ---- 
Hi /u/markpsp, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/aymenokay, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/cw3k, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/lchudzij, For javascript help, please visit /r/LearnJavascript. Thank you!
Numbers are chosen for performance, yeah? Plus, TS enumerations allow you to refer to them by name, and the numeric value is inlined at compile-time. Or uglify can do it for you. So you've got options.
But Adam, Matthew, John compared to John, Matthew, Adam is evaluate as equal even if the object order is not the same right?
Seconded. This is unusable due to the magic numbers. I wouldn't want to have to explain it to every new dev i onboard. Always avoid magic numbers, try to always avoid flags, and avoid counters whenever possible &lt;&lt; mantra for less "wtf"s abd easier to maintain code.
You could also refer to TS enumerations with a string, which would make more sense in this case. Readability is far more important than any imagined performance gain here 
Cheers, I like writing little bookmarklets and such like this. You could really use a delay function :) const delay = t =&gt; new Promise(res =&gt; setTimeout(res, t * 1000)); Also, in your `nextPage()`, you could use `Array.prototype.find` and not have to use the `[0]`.
Make each word a link to a definition, add onclick handlers.
Haha! Yeah, it was a drill of some sort, yes ;) 
Is it imagined? Or real? It's easy to declare consts with the appropriate numerical values. There are lots of options with good readability. Often when making a generic spec, it's best not to assume you know the performance requirements of the code where it will be used. And clearly performance was a design goal for this spec.
This will *probably* work, but technically \`stringify\`ing an object does not guarantee that the name\-value pairs will be in any particular order. An object is an unordered collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array ([RFC src](http://www.rfc-editor.org/rfc/rfc7159.txt)). For example object `{ name: "Adam", age: 20 }` may stringify as `"{"name":"Adam","age":20}"` or `"{"age":20,"name":"Adam"}"`.
Note that this was initiated by [André Staltz](https://staltz.com/), contributuor to RxJS, author of Xstream and Cycle.js. He's worked with Observables quite a bit.
I don't even understand how doing it like this makes anything better
You have to look into your browser's console. I've updated it to display in the fiddle as well: [http://jsfiddle.net/cuk78bvo/12/](http://jsfiddle.net/cuk78bvo/12/)
I know its not a book, but it may help to read through [the airbnb style guide](https://github.com/airbnb/javascript)
Well, Spotify is not using Electron but CEF...
Thanks! 
All you have to do is to add \`defer\` attribute to \`script\` element. You can read more about it in Moz Dev site :)
&gt;I find myself with a feeling that this is the time I need to work hard to improve my code quality, I am looking for ways to improve that Just a thought but maybe a book is not what you need. Maybe you need to change your approach to development. Have you tried TDD?
Most of my time is spent either in the browser or VS-code. Whatsapp, Slack, Discord and Spottify are constantly there, too.
Same thing, though, cef also wraps the chromium engine with native bindings.
Yeah, i tried this for a while on my Android, but kind of gave up on it. Google got so much flack for integrating websites in their task-switcher for instance that they had to roll back, same with chrome-apps. Pinning is also something that i don't believe many people do. To me the browser is fine as it works, i don't really see the need to mix the boundaries. 
It's available for free here, also: http://refactoringjs.com/files/refactoring-javascript.pdf
That one’s on you. The value-reference distinction is software dev 101. JavaScript may have some design flaws, but this isn’t one of them. 
thanks, i corrected it
The thing is that this is a _spec for a protocol_. Those numbers are _signals_; they can, of course, be given names, but they **need to be values**. In a protocol, we need to specify what the value is, not just the name. The idea is that you develop your library following that protocol, and I develop my library following the same protocol and so the libraries are compatible and can work well together. And for that to be the case, those _codes_ need to be _common values_. So, you can give them names, and I can give them other different names, but the important part is that the value is the same. And yes, these could be _strings_, like `"start"`, `"data"`, `"end"` instead of `0`, `1`, `2`, but what do you gain and what do you lose? Apparently, on first look, you might thing you gain more clear immediate visual information. You see `"start"` and you now it means start. Sure, but the truth is that you _shouldn't really see `start`_. You should see whatever name you give it in your implementation, like `SIGNAL_START` or `SIGNAL.START` or [whatever](https://github.com/aaronshaf/callbag-gamepads/blob/a5b60cb4a6fe434486a6152a27d53b4f1f249d09/index.js). On the other hand, using particular strings: - ties you to a particular language (English) - opens opportunity for case errors (`START` vs `start`) and potentially others (spaces, invisible characters, encoding problems) Don't get me wrong, though. I totally understand your point. But such a point would be better pointed at e.g. the author's [callbag-basics](https://github.com/staltz/callbag-basics) implementation, where he does indeed use `0`, `1` and `2` all throughout the code instead of defining some constants. But in the protocol specification, no, there is a clear benefit in using simpler values in those signal definitions.
Dose any of the solutions support ALL major browsers? I don't think so, selenium is one of my favorite projects.
TestCafe seems to support [them all](https://devexpress.github.io/testcafe/documentation/using-testcafe/common-concepts/browsers/browser-support.html)
That's a real game changer! First one to actually compete!
I think the main reason why your average Electron app has all those issues is because Electron makes cross-platform desktop software development accessible to a lot of people that aren't necessarily experts in the field while at the same time desktop software development hasn't become any "easier" just because you can use JS/CSS/HTML instead of C/C++/.NET et al. Same was true, when SPA's became popular: The "runtime" (browsers) was kind of calling for web dev expertise, where in reality it was (and still is) more about software architecture. 
Both tools are great, and both have pros and cons. Depending on your application with Cypress you may encounter with some bugs which you can't bypass. Two biggest problems for me with Cypress: - https://github.com/cypress-io/cypress/issues/1321 - https://github.com/cypress-io/cypress/issues/1697 I felt same as corneliutusnea: - https://github.com/cypress-io/cypress/issues/1321#issuecomment-371990051 TestCafe in other hand felt awesome from first line of code and everything worked well. It has great features that works out of the box. - just don't iterate over localStorage over keys, there is better way (bug bypassed) https://github.com/DevExpress/testcafe-hammerhead/issues/1504 - second is not bug, but limitation, I coudn't get all children items and use it later in test so I use const getAllItems = ClientFunction(() =&gt; { return Array.prototype .slice.call(document.querySelectorAll('...')) .map(node =&gt; node.textContent) }) await getAllItems() There was even question for what is future of TestCafe and I think future is bright right now :) https://github.com/DevExpress/testcafe/issues/2244 
The Pragmatic Programmer. Excellent book for clean coding concepts and more.
It's sort of ugly markup, but you could write a component that turns your text into lots of `&lt;span&gt;`s of words with the respective EventListeners attached to them... But hopefully someone else has a more elegant solution?
Checking the breach corpus makes a lot more sense than the silly password complexity rules people try to force.
And they're clearly using TypeScript syntax -- so why not use actual TypeScript `enum`s? (which give you traditional enum type-safety and ultimately compile to strings)
If this PWA is intended to run in the 'native' fullscreen mode, then you can use the touch event - which will highlight the selected word, and usually shows the menu dialog (e.g. 'share', 'copy', 'paste'). Try it on a web page - press and hold a word and you'll get a menu with options. By preventing this default behaviour, you can instead query your word definition API or data source to display a UI element with the definition of the word using `window.getSelection().toString()` (which returns the selected text).
I love this solution! Smart. Thanks
All good but the call stack diagram is such a low resolution image with such a tiny text that it's impossible to learn anything from it.
I found most examples unfortunately unclear since it breaks my natural parsing. 
That's the problem with this tricks and oneliners. They make code less readably. I hate to see these things in production code by someone who thought he was being clever.
The pragmatic programmer, (best ever)
yes, TestCafe support them all checkout their [browser support documentation](http://devexpress.github.io/testcafe/documentation/using-testcafe/common-concepts/browsers/browser-support.html) 
You know what you get if you use too many "sweet one liners"? Diabetes. Don't do this to yourself. Your code editor is not shell terminal, it has lines. Use as many of them as you need.
After looking at the examples you've given I seriously question your knowledge of basic programming. In first example, you're not doing a sequence of operations, you're passing the value of variable root as a second argument to .reduce(). Same thing for .map(), you're passing page as thisArg. Third example is also not a sequence of operations, you're just initializing two variables. And it won't work because x is not defined. Last example is the only one that showcases a sequence of operations, but you're using a single = instead of == or === for comparison, so a will **always** be 1.
Yes I agree. If this gets squeezed in everywhere I'd get annoyed. For trivial one-liner callbacks I find this completely ok, YMMV.
The best way, by far, to improve your code quality is to be in a situation where other people are regularly giving feedback on your code. A job with code reviews is the best example of this, but contributing to popular open source projects works as well, especially those that are actually well maintained by people that know what they're doing
Thanks for pointing out the `(answer = 'yes')` mistake. To help you understand the reduce example: ``` [{key: 'USA', value: […]}, {key: 'Germany', value: […]}] .reduce((root, item) =&gt; root[item.key] = item.value, root); // -&gt; {USA: […], Germany: […]} ```
After reading that, [clean-code-javascript](https://github.com/ryanmcdermott/clean-code-javascript) helps to bring those concepts to the JS world.
The name is cool and it makes spaces for other awesome names.. like this redux\-like implementation for callbags: [https://github.com/jamesb3ll/reduxbag](https://github.com/jamesb3ll/reduxbag)
It's so unreadable a trick, it's specifically forbidden in my styleguide of choice (airbnb)
You may want to click `Watch` to stay up to date with my readings and watchings. It includes pretty much everything that i see interesting or very important. For most of them i can say "MUST WATCH" or "MUST READ", but some of them are really absolutely to read/watch. This list exists thanks to [LikeOnGithub extension](https://chrome.google.com/webstore/detail/like-on-github/fbkngleiiccokoifohhjhlagkejlphkj), ofr which you just click CTRl+SHIFT+L and it adds the link as commit. Currently the list includes around how much are the commit and as of today this number is 330.
"js trick" No. Write readable code and leave the tricks to pre-processors and minifiers.
I'm 100% with you. I found the comma operator quite convenient for higher order functions when chaining multiple trivial lines. Not world-shakingly, but convenient.
Study: closures, promises: fetch, then, catch. Study those ~~demoniac~~ in browser api: RTCPeerConnection, WebSocket, AudioContext, Worker, FileReader (..) Masterize **Objects** and **HtmlCollection** with forEach, keys, entries. Speed up! The future is coming fast! [https://datatracker.ietf.org/doc/active/](https://datatracker.ietf.org/doc/active/) 
Ok, then, run this code and tell me what you get: [{ key: 'USA', value: 1 }, { key: 'Germany', value: 2 }].reduce((root, item) =&gt; root[item.key] = item.value, root); Take a look here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
Gotcha, thanks!
is this satire?
the link is broken
The reduce example is very misleading. The two versions are not the same at all. In the first version, you're omitting the second argument which is the default value for accumulator a.k.a seed while in the second version you're passing variable root as default value. Also this is actually a really bad usage of reduce, not saying it's wrong, it works but the idea of reduce is not to maintain state for every iteration so that reducer function is completely independent and doesn't have any dependency on the context of execution. The best practice is to always return a brand-new object for every accumulation and always provide the seed/init/default value. Otherwise if you're modifying object directly you'll be much better of with `for...of` loop - it makes the intention clear that you're modifying an object explicitly
1000+ thanks
That's \*you\*
They don't get smaller with more features.
Code complete.
No. You can add whatever you want or one if their many presets.
 Code Complete: A Practical Handbook of Software Construction, Second Edition https://www.amazon.com/dp/0735619670/ref=cm_sw_r_cp_apa_i_.R6hBb5S3A3QX
That depends on what kind of site this is and whether there is a policy that users *must* follow, rather than *ought* to follow. 
No, this should always be done on the server. Period. Otherwise it is an absolute security hole.
&gt;Have you tried TDD? This. It's teaching me A FUCKING LOT about things I thought I knew. It also forces you to keep your code concise and on point, and teaches that you really need to keep loose coupling, single use functions, and the like. TDD can be quite an eye opener.
I have not had that issue. I haven't played much with the newer Angular but from my research it has to do with their being circular references within the "barrel" as angular calls them. I don't know if that's a circular problem within your code, or if it's from my project setup. My build code allows two files to reference each other and it builds fine - but maybe different or older configurations don't allow that.
ooh, thanks. I'll clean it up some more and post it there :)
&gt; but what do you gain and what do you lose? Readability, maintainability. And a lot of other things. 
Ah, you're right. It would be a good idea to make the delay configurable for slower connections. Find is a good idea. = In the next version I might go forward and back to check for any posts that have flowed into the previous page after the others are deleted. A little wonky but the page won't unload so it'll be less for the user to worry about. 
Why not both? 
I really wouldn't trust a website that sends my password over the web to who knows what server... 
You misunderstand... That's the official subreddit for the Nuke Reddit History browser extension.
I must admit that I had to fix _a lot_ of errors and typos in that tiny little post that I wouldn't think should have made it past proof reading stage. I apologize for that. You might have had still the example with the error in it, where no initial value was passed. So this: ``` .reduce((root, item) =&gt; { root[item.key] = item.content; return root; }, initialValue); // initialValue = {} ``` would turn into: ``` .reduce((root, item) =&gt; (root[item.key] = item.content, root), {}); ```
`.reduce((root, item) =&gt; ({...root, [item.key]: item.value}), root);`
What is TDD?
You're still missing the larger point which is ***don't do this***
This was part of the recent Humble Web Bundle in case anyone picked that up and forgot it was in there.
Haha you assume the use of Preact was to reduce the size of the app? I don't care about the size of the app. I'm more concerned about a dev experience that I enjoy \- so that I can develop applications that others will find useful. When was the last time you looked at an app that you really wanted to use and said "Oh damn, that's too big \- I can't use that"
What? The guy provided a use-case when it's actually makes .reduce EASY to read
Test Driven Development. Basically, define your tests first and then write code until they pass. 
In what way is preact's dev experience better than React's?
Thanks, I’ll look into it!
I'm not here to defend React. It's a personal preference - I'm allowed freedom of choice. But if you really wanted to know try googling it. In the end you may or may not agree with what you find.
Chill, you're getting a wee bit defensive. I'm a React developer myself and just found the combination of Electron and "more light-weight" amusing.
I think he is talking about Test Driven Development.
Haha will do! And you're entitled to be amused. Tell me though, as a React developer do you build Desktop apps? If so, how?
I said most. The reduce example out of the original 3 was the one which I found nice. Unfortunately others pointed issues with the original version which was more compact. Then again, I would've used ```=&gt; ({ ...root, item })``` -style for the current example myself. Either way, knowing comma syntax is important just to recognise and reason it in minified code, where it's common.
Thanks for the feedback! No clue why someone downvoted you.. people these days. You worded it much better than me, but that's exactly what I was aiming for.
can recommend "Javascript Patterns" http://shop.oreilly.com/product/9780596806767.do and a strich eslint profile ( I enabled every rule available at the time, then disabled/reduced to warn with comments in the eslintrc config as to why i choose to disable each
It depends. Exclamation mark. It shows absolute practicality to drop a few pieces of client-side code in to help cover 100% of a real use case. The only hole in this case is the funding for additional, unnecessary work on the server. 
ELI5: What problem is this solving?
I'm not quite sure what you mean, since it is done server\-side \- you're just using the client to send the password hash. If your comment is related to the other couple of comments who say it's a security hole because it's sending your password, it's definitely not \- the API is extremely simple and only uses the first few characters of a SHA1 hash of a passcode which means neither the server nor client is revealing any meaningful information (see [https://haveibeenpwned.com/API/v2#SearchingPwnedPasswordsByRange](https://haveibeenpwned.com/API/v2#SearchingPwnedPasswordsByRange)). This is the same service used by 1Password and many others to notify their customers of breached passwords.
Its not a book, but. Airbnb has a great linter: https://github.com/airbnb/javascript/blob/master/linters/.eslintrc Its based on these standards: https://github.com/airbnb/javascript
Gretchen, stop trying to make fetch happen! It's not going to happen!
Luckily that’s not what it does, and if you had clicked the link instead of rushing to show us how smart you are you would have seen this &gt; no passwords are ever stored or shared over the network. PassProtect uses k-Anonymity which means that the only thing that is sent over the network are the first 5 characters of the password hash.
Oh, yes I did misunderstand :D A Reddit api would probably be easier. List all comments, delete by given criteria. Done in a second. 
Hi /u/DRNTRGL, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
Taking all arguments passed to the function and putting them in an array called xVar
[removed]
Nah.. it's always web apps for me.
Is it just a still image or is it supposed to move or do something?
Following Uncle Bob's advice is a sure fire way to write code that becomes increasingly hard to debug over time. If he was a nutritionist he would be still suggesting a low fat high carb diet with frequent meals(to boost the metabolism!). He sells old dogmatic ideas that I think do more damage then good. 
I was going to complain how this style guide defenitely sucks but it's actually pretty cool. Except for the whitespace part, of course.
The `...` is called the _rest operator_ and, in this case, is used to define rest parameters. function f(x, ...y) { ··· } f('a', 'b', 'c'); // x = 'a'; y = ['b', 'c'] f(); // x = undefined; y = [] More info: http://exploringjs.com/es6/ch_parameter-handling.html#sec_rest-parameters
What's an example of this being played out over time? From what I've experienced, implementing unit tests and keeping single responsibility in mind has helped me a great amount. 
Could you provide some examples?
If it's in the function definition, it's [rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), as someone said above, which turns an arbitrary number of parameters into an array. If it's in the function call, it's the ES6 [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), which is used to convert arrays (also objects, stings, and other iterables) into a list of parameters.
Heyo, I'm the author of PassProtect. The answer is "yes". I still think there's value in PassProtect, however, as it helps inform users that the passwords they are using are insecure, and tells them why. A lot of developers now-a-days are building single-page apps where there may be no backend, so there are a few different use cases where I think it can still be useful. Great point though.
"Sweet" Not...
I've started a YouTube channel and have a site I'm working on where I'll be covering various topics related to JavaScript programming fundamentals. Check it out and let me know what you think. 
I'm not a lawyer, but I do not believe so. The library never sends the user's password over the network -- it only sends the first 5 bytes of the user's password hash (k-Anonymity). This strategy allows it to check to see if a password is in a remote database without sending it over the network, and re-assembles it in the browser only.
These kinds of articles make me wish there's a requirement of peer review before this kind of thing gets put out. I mean nothing in that article was a good idea. At all. SMH
Here is an updated Demo with latests version having a better support for Arrays and conditionals for different template types https://codepen.io/tero_koodia/full/eKWvYJ/
I’m astounded at the number of folks here who seem to have never dealt with protocols before. Do exit status 0, or http/404 mean nothing to you? A protocol SHOULD use status codes INSTEAD of constant strings. 
Buttons inside forms cause a page refresh. Move your submit button outside of the second form element, so you have something like this: &lt;form class='welcomeFormPlayer'&gt; &lt;label&gt;What is the name of Player 2?&lt;/label&gt; &lt;input name='namePlayer1' type="text" id="name-player-2"&gt; &lt;/form&gt; &lt;button id="button-submit" type='submit'&gt;Submit&lt;/button&gt;
&gt; ES6 classes are called fake on a regular basis Fair enough that it may be the argument put forward most often, but it's certainly the strongest version of the argument. &gt; arrow functions -- an alternate syntax for creating functions -- which doesn't do anything we couldn't already do in ES5. Arrow functions introduce a new behavior with regard to context. Arrow functions do not create a new context (`this`). They cannot be bound to a context using `Function.prototype.bind` nor can their context be modified using `Function.prototype.call` or `Function.prototype.apply`, these things introduce a behavior which did not exist in ES5. Do you have any other examples?
 I'm really not smart then because I did click and read the link, except I didn't get this part, since my focus got caught by the fact that all is done client side by including a script that links to a CDN. Even if it does not send the password in clear text, I still think it should be done server side through HTTPS. 
Hello, the (football) world cup 2018 with 32 national teams kicks off this Thursday in Russia. Let's enjoy the beautiful game with javascript and friends :-). For easy (re)use I've put together worldcup.json - free open JSON HTTP API (micro) web services that incl. the match schedule, national teams, groups, stadiums and more. Know any other (open) world cup JSON services or javascript apps or widgets? Let us know. 
What’s wrong with low fat / high carb diet?
Thanks for sharing. Looks great. As an alternative (free) world cup data service you might try -&gt; https://github.com/openfootball/world-cup.json Two days to kick off!
I'll explain. The password is hashed, then the first 5 bytes of that hash are [sent to the relevant server.](https://www.troyhunt.com/ive-just-launched-pwned-passwords-version-2/) From this, 475 results are returned which match that starting 5 bytes. There are 20 bytes in a SHA1, so 5 isn't near enough to be reasonably identifying. The returned hashes are compared to the full generated hash, and if they match then the message is shown "DON'T USE THIS PASSWORD" 
^this
Testcafe supports running tests concurrently. http://devexpress.github.io/testcafe/documentation/using-testcafe/command-line-interface.html#-c-n---concurrency-n I just found out about it and it's awesome!
Everyone I know of has moved to eslint years ago.
Exactly what I’m trying talking to figure out
I think it is a little overbearing, I always end up switching bits of it off.
Hi, the survey is not tighten to JSHint.
I use ESlint and Prettier.
Clean code is a really nice book!
Do their warnings/alerts motivate you to refactor your code? Please, fill the survey and tell us more about your refactoring practices :)
\`class\` =\&gt; \`className\` is not the only attribute that needs to be changed to a non\-reserved word in JSX. The \`for\` attribute of the \`\&lt;label\&gt;\` tag needs to be \`htmlFor\`. There are others as well, e.g. many dashed SVG attributes need to be in camelCase.
That's entirely the point. When developing with a large team, no one actually cares, so just choose something that can be automated. Then you can talk about designs and algorithms and data structures, instead of drive-by nitting "2 spaces not 4"
It is, thats how i learned
Well carbs spike insulin, and lots of small carb meals means you always have high insulin levels making it impossible to burn fat. So if you restrict calories and always keep your insulin levels high by eating lots of small meals your body starts burning muscle for food, resulting in the fat but skinny body type. Best thing to do is go long periods without eating, this will allow your body to burn fat and become more sensitive to insulin which allows you to burn calories as energy opposed to storing as fat. Here there’s lots of info out there: https://youtu.be/APZCfmgzoS0 
Yes. Very legit. I've learned HTML, CSS, Javascript &amp; React from this site. Still a Pro member. I recommend it!
Really like the idea... But you guys really really need to make that site responsive. It's a mess on mobile. I really wanted to check it out but I simply can't on my mobile phone. 
Started to code there too. It's great for beginners.
Not my site but the author wanted to push something ASAP Its in the ROADMAP
Exactly, in conjunction with rest and spread this can be really powerful. I do this a lot in Jest testing when dealing with module mocks or other situations where I need to either do a full pass through to a mock method or partials. Expanding on u/rauschma example: ``` function f(x, ...y) { // pass the rest of the arguments to another function someOtherFunction(...y); }
Actually, a more battle-tested advice is: Don't do enum-like strings either, use named constants. Like magic numbers, enum strings also have some cons, e.g. they can't be bit-fiddled for efficient conditionals, and can make mistakes impossible to fix, _especially_ in protocols (i.e. a reason why the "referer" header is misspelled to this day) Also, don't use `0` for anything that doesn't mean "no value". That's the reason why we're stuck with the `typeof null === 'object'` bug today. And pro-tip, use powers of two so you can leverage bitwise operators.
Neat, I don't follow the sport much but I love free data.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Good bot
Like styleguidist, but with less config?
Yeah, that's a fairly common myth that is purely theoretical. Focused and controlled studies have been unable to support the claim. [Controlled studies show little to no difference in fat loss comparing high and low carb diets.](https://www.ncbi.nlm.nih.gov/pubmed/19246357) These theories are used to push customer products like books, diet plans, premade foods, etc. Weight is majority control by caloric level and is shown in things like the twinkie diet. Macronutrients contribute to maintaining a healthy body not weight. The reason why limiting carbs in a caloric deficit is common is that protein and fat levels are important to maintain body function, muscle growth, hormone levels and more. 
What’s wrong with Fetch? https://medium.com/@shahata/why-i-wont-be-using-fetch-api-in-my-apps-6900e6c6fe78 Ohhhh... I’ll stick with axios.
The problem I have with it is that it's incredibly shallow. You follow along with their code in the browser, but they don't really give you much else. They don't teach you how to write the code on your own machine, how to run it, or really where to go after your done. Just look around any of the learnXlanguage subreddits and see how many questions are posted like "Just finished codecademy, what do I do now?" or "Just finished codecademy, but I still don't understand what I'm supposed to do." It's just a monkey-see-monkey-do kind of thing, and I don't think that's very beneficial. 
Along the same vein, if someone doesn't want to apply TDD in the normal sense, you can first work an requirements and manual tests to really hone in scope and understanding of the system at design time. Doing that can help decide where you may want to take the time to make a part of your code easily extendable for later vs where it may not be worth being in a refactor phase. I've noticed my code cleaner and more dry by doing that since it gives some structural design clues. 
I was actually quoting *Mean Girls* lol
Also I apologize the code is formatted so terribly? Idek what happend.
Reading this now.
Hmm. I see. Do you have any recommendations as to where to go from there then? Or an alternative method. 
I feel like Uncle Bob’s guidelines helped quite a bit. When I’m following them correctly, my code is covered by unit tests and reads like well written prose. I can reason about it and refactor with confidence. Can you explain your claim about how in the world this would be more difficult to debug? In my opinion it’s far easier. Following a dogma is fine if the dogma happens to be correct. 
I think his advice is great to get started on better habits and thinking through testability and readability of code, but yeah becoming a devotee of his work can make one become the dogmatic asshole on the team (source: I was this dogmatic asshole) A great explanation of growing as a programmer is given by Fun Fun Function - [The growth stages of a programmer](https://www.youtube.com/watch?v=2qYll837a_0) - I believe that it's easy to drink Uncle Bob's flavor-aid and get stuck at stage 2 A great response to Uncle Bob's brand was written by Leon Gersing, titled [The Last Thing We Need](http://leongersing.tumblr.com/post/77931655536/the-last-thing-we-need)
The focus should be on eating whole food. There is no problem with a high carb low fat diet consisting of whole grains, sweet potatoes and fruits. The same goes for fat. I you get your diet fat from avocados and nuts, your also getting a ton of good stuff. On the other hand, if you get your fat from oils, you're just eating calories that have 0 nutritional value (beside the energy content).
What I'm after is a pretty single-page spreadsheet (or webpage) I can fill in with the results and teams as they happen. Anybody know of one?
It would be helpful to define what you mean by continuous refactoring. Fixing lint errors is not refactoring, but the survey seems to imply that it is. Also, under build tooling, you have 3 Java build automation tools, none of which are used by JS devs. Make would be more relevant, but even that is not that popular. I picked "other" and wrote webpack, but not sure that's the type of response you're looking for, or if you meant to list things like Jenkins/CircleCI instead. 
Oh I know :D
Would it be possible to get a list of players who played in a particular match? And the formations each team employed. Tracking of golden boot stats would be awesome as well.
Looks like you're calling draw() before the images are loaded?
It makes me very happy to see the attitude towards sweet one-liners shift where it should've been all along.
Not sure I understand - you can use the single-page text file that's the source for the worldcup.json datasets, see &lt;https://github.com/openfootball/world-cup/blob/master/2018--russia/cup.txt&gt;. Works online and offline and works with any text editor, it's just text (but structured data using the football.txt format so you can import the text file into any SQL database / tables). Enjoy the beautiful game.
For the world-cup.json datasets @ football.db (openfootball) I've only planed to add the goals (and scoring players) for every match and still undecided the 23 team roster / line-up / squads. For alternative football data sources, see Awesome Football (Data) &lt;https://datahub.io/awesome/football&gt; or Joe Kampschmidt's Football Data Guide &lt;https://www.jokecamp.com/blog/guide-to-football-and-soccer-data-and-apis&gt;. 
Thank you much &lt;3 (For anyone who was wondering I added this check right after the draw function initializer bg.onload = function() { alert("BG.png has loaded"); draw(); }
A sloppy hack might be to extend the function constructor.
Hi lhorie! Thanks for partecipating to the survey! 1. Webpack is a valid choice. 2. Static analysis warnings can be used to point you to some pieces of code needing to be refactored. As stated in the terminology section, "Refactoring: is the process of restructuring existing computer code without changing its external behavior (e.g., rename methods, extract class, etc.)." and continuous refactoring is "the practice of performing refactoring at every change (if needed)".
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Hiring Manager here. I hire on being able to actually do things, not how or where you learned them.
Sounds great! Thank you!
"Code complete" is the best book for a coder.
Alternating between Codecademy and FreeCodeCamp has been beneficial for me. 
https://www.freecodecamp.org/ is much better. I wish this resource was around when I started out. It's all project based and goes over everything you need. There's a healthy community of people here too who help each other out.
The book is good, but I find the videos on https://cleancoders.com/ go more in depth. Also, nevermind the title, but the book "Agile Principles, Patterns, and Practices in C#" is basically the "Clean Code" book but more in-depth.
Generalize Reactive and Iterative tools into one concept, so they share one ecosystem of operators, while being as compact and modular as possible.
Thank you for an actual tldr 
Static JSON file ?
JSONPlaceholder is a popular mock json option [https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/) you could users, posts, comments, etc
What he is talking about is similar to intermittent fasting. Think of it this way. Carbs are your body’s fastest source of energy (that’s why runners carb up). Your body will burn fat (which is stored carbs) when your body doesn’t have any more carbs to burn. Hence, if you reduce your calories and carb intake and then do a physical activity like working out, your body will be forced to break down the fat and some protein (which should be offset with you taking protein). 
Seconded.
They just made a huge upgrade as well with a bunch of new course material, and better organized as well.
A protocol is just an agreement about what messages mean what. Those messages can be strings, numbers, binary data, or whatever you like, as long as everybody agrees. In the HTTP protocol, you *do* have tons of strings. The request type is a string ("GET" vs "POST"), the headers are all strings, and even number\-like things ultimately get converted to strings before being transmitted. The "404" status code is literally sent across the wire as the characters "404", not some binary number type. If you were using the C language or something, then maybe numbers would make more sense, but this is not C. In Javascript, everyone expects string\-based protocols. Using numbers just makes your stuff look gross.
I need a book about the good parts of JavaScript. Any recommendations?
https://codereview.stackexchange.com
I'd break this into two questions: 1. Is code academy a legitimate website to learn/practice? Sure. Its a great place to start coding. The user doesnt need to worry about files or any environment concerns. Tey can just open the browser and learn basic principles. 1. Will employers hire with this education? While, im not a hiring manager.... I do have input in the interview process for candidates that show promise. If a candidate were to announce that they had completed a course on CodeAcademy, Udemy, PluralSight or any other site... It wouldn't really persuade me that they were any more or less of a candidate. What would? Personal projects, work history, and ability to answer questions during the interview.
AWESOME!!! Big football and data fan(; Tell me, how fast is the results are getting updated? Ill be happy to build real quick some web app to visualize the results! 
You app to visualize the results is more than welcome. Please, note that the world-cup.json datasets @ football.db (openfootball) if all works out will get updated once a day. Sorry if that disappoints you. It's not a real-time live score service. See the comments in another thread here about alternative football data sources / services. 
Yes that’s particle js
Just plug in their cdn and copy their code, then you can alter the settings in terms of colors size etc
thanks man Ill check it out (:
I like snake_case for names of tables
Good read
In the end, it's energy in vs energy out. Intermittent fasting is a hack that reduces the eating window which shrinks the opportunity to eat. Intermittent fasting can therefore mean less calorie input. If you want to lose weight, you must eat less that what you're burning. Getting those calories from a varied source of whole food will ensure that you maintain all the micronutrients you need to stay in shape. Intermittent fasting is not sustainable (for most people) and can be an entry point for a weight lost / weight gain cycle.
Hey man, looks cool! I'm a long time user of WordPress so definitely interested in the project. Just a heads up, the first link I clicked seemed to break the site (the read more button on post 14 of the demo) and even going back didn't seem to render anything except for the background. You might be getting hugged or I just found an unfortunate bug. I'll keep an eye out for further developments!
We already have an observables standard - why not just use that? There are already excellent and low-weight implementations like `zen-observable`.
Agreed. Here's another solution. It uses lodash's isEqual method which performs deep equality check. const _ = require('lodash') let a = [ [ { name: "Adam", age: 20 }], [ { name: "Matthew", age: 22 }], [ {name: "John", age: 21 }]] let b = [ [ { name: "Adam", age: 20 }], [ { name: "John", age: 21 }]] const isInArray = (obj, arr) =&gt; { return arr.every((el) =&gt; _.isEqual(el, obj) === false) } const diff = a.reduce((acc, curr) =&gt; { if (isInArray(curr, b)) { return acc.concat(curr) } return acc; }, []) console.log('diff', diff) You can always summarize it down to const _ = require('lodash') let a = [ [ { name: "Adam", age: 20 }], [ { name: "Matthew", age: 22 }], [ {name: "John", age: 21 }]] let b = [ [ { name: "Adam", age: 20 }], [ { name: "John", age: 21 }]] const isInArray = (obj, arr) =&gt; arr.every((el) =&gt; _.isEqual(el, obj) === false) const diff = a.reduce((acc, curr) =&gt; (isInArray(curr, b) ? acc.concat(curr) : acc), []) console.log('diff', diff)
True, but the size of their executables does not grow linearly with the number of features added. 'Hello World' may demonstrate the baseline, but you're completely ignoring what the platform offers to apps built on top of it when you throw out that number.
It's a good way to learn the very basics. Which is enough to write a very simple project. Keep building more ambitious things and you'll not only learn JavaScript - you'll have a portfolio of projects to show employers.
Hello thanks for pointing this out. Someting wrong with the theme build. I have changed the theme now. Will fix the other theme and push it again. If you will be interested I will be glad to add you as a collaborator in github. Cheers, Abhi
Thanks for the kind words! I accept all kinds of contributions with an open heart. Please do contribute if you feel like it. :D
That is still not 100% reliable as bg could finish downloading before avatar.
&gt;Special cases aren’t special enough to break the rules. In that sense, I don't think they're ever ok. You start off thinking it's trivial, but the person coming after you can't distinguish the trivial from the non-trivial and will build upon that one-liner.
Came here to say this.
Demo link not working for me 🤨😕
In some projects we have used Raml mocker https://www.npmjs.com/package/raml-mocker 
thanks all
Or puppeteer even?
Try something like var imagesLoaded = 0; function imageLoaded(){ imagesLoaded++; if(imagesLoaded == numOfImages){ draw(); } } bg.onload = imageLoaded; avatar.onload = imageLoaded;
Two recommendations: Doug Crockford's book The Good Parts is considered the authoritative piece on writing good JavaScript. Also, I would look into Google's style guide for JavaScript - or any other language for that matter. https://google.github.io/styleguide/jsguide.html
Correct. Although, a bit of a non sequitur as this doesn’t involve rethinking everything you know about styling websites or CSS. 
At the risk of picky, I agree that I wouldn't call fixing most lint errors as refactoring. "Restructuring" the code implies changing the actual structure of the code, e.g. moving code into functions, making logical assertions more understandable, etc... Fixing lint errors would generally leave the structure of the code intact but would change the formatting. Something like Prettier or Elm Format are good examples of this. They literally parse the code and reformat to a set of rules, but they don't change the actual structure of the code. A cyclomatic complexity report (which it looks like JSHint does report on) could be useful for pointing at areas that need refactoring but honestly I've never seen anyone really use it.
I can work with that... sort of...
Are you using Safari ?
I conduct technical interviews for web engineers at my job (at Uber). Honestly, if code academy is all you have in your resume and you go through the standard hiring funnel, there's a very high chance that you won't even get past recruiter pre-screening and that I won't hear about you. You _might_ stand a better chance if you attend a networking event and manage to convince a recruiter (by acing pre-screening questions) there that you are worth spending 30 mins with. In the hiring flow, I'm responsible for determining whether you meet certain criteria for technical expertise, but there are people before me who are responsible for determining whether you are worth spending time with me at all, so you need to have something (github activity, personal projects, internships, anything) to show those folks that you're more than just some random schmuck. As for whether X is a good place to learn Y: that's not really the most effective attitude towards what's presumably going to become the way you earn your income. Learn what you can from code academy and expand to other sources of work experience. Pro-bono work, freelance, personal website all count.
Consider uploading this to data.world
Do you know if one can load a static JSON file from a page hosed on bitbucket? 
The Nature of Code - Daniel Schiffman 
I know Passport is the 800 lbs. gorilla in the space, but it's frustrating that it can't do basic things like protect a GraphQL endpoint. I wound up abandoning Passport for Authom for that very reason.
I just suggested the `delay` because it's a pattern in your code -- there's 3 different places you could replace the long form with the `delay` function: setTimeout(() =&gt; el.querySelector(".RestrictedFlatlistButton__toggleOption").click(), 400); }) Becomes: await delay(.4); el.querySelector(".RestrictedFlatlistButton__toggleOption").click(); And: await new Promise(res =&gt; setTimeout(() =&gt; res(), 400)); Can be: await delay(.4); etc. IMO, much more elegant and expressive.
Because complexity rules are dumb. Six dictionary words are more secure than Password1!.
You are right, but after realizing what the other person posted is, I am lost for motivation to make it presentable :D
This looks interesting. I could just set up a database on github and use https://my-json-server.typicode.com/ (from the link above) to submit a get request to my github repository? Does anyone have an example of a simple vanilla search with autocomplete using JSON?
&gt; After learning that it couldn't protect a GraphQL endpoint Do you have any recommendations on resources where I could read more about this? 
I've heard good things about https://eloquentjavascript.net/, and the price is right :D
Is that still maintained? Looks like it hasn't been updated since 2014
Promises are pretty useful for this sort of thing, like if you had some arbitrary number of images and want to wait til they're all loaded... // Image loader helper that returns a promise function loadImage (url) { return new Promise((resolve, reject) =&gt; { const img = new Image() img.onload = resolve img.onerror = reject img.src = url }) } const urls = ['bg.png', 'avatar.png'] Promise.all(urls.map(loadImage)).then(([bg, avatar]) =&gt; { // All images have loaded ctx.drawImage(bg,0,0) ctx.drawImage(avatar,30,30) }) 
What errors are you getting? From my first reading it does not appear you are calling the start function anywhere so none of the compare functions are running. Also print in is Java not javascript so not sure of that is causing issues, I haven't tested this as I'm not at my computer but understand the need for speed on this.
I am not getting an answer, it prints, “Rock, Paper, or Scissors? Rock” and then no answer
Our teacher only taught us println
yep this is awesome!! big games coming up: Portugal v Spain on Friday at 11am then Germany v Mexico on Sunday at 8am 