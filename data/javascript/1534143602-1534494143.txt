It depends on your data. If you have billions of results it's not a good idea to get all in one time. Keep a pagination in your api but save the results in a state.
break;
Do not override an object's prototype.
Dos and don'ts of js should not include "use Typescript", someone beginning with js has plenty to learn without burdening themselves with the additional cognitive load.
[removed]
Do: * Write bad code when you're starting out. Don't worry that much about dos and don'ts too early on. That being said... * Check objects for undefined properties before trying to access them, otherwise this will bite you a lot. * Understand the concept of `this`, and use the context binding functions `bind, call` and `apply`. They are essential learning for any serious js Dev. Don't: * Use eval. Try to use IIFE (immediately invoked function expressions) instead for running arbitrary code. * Pollute the global namespace: it's easy to do in js because of the global/window object, but this holds true for many languages. Use an object namespace instead, or modularise your code somehow. * Use `setTimeout` for periodic checks. Js has a good built in event system that alleviates the need for polling. * Abuse object prototypes. Prototypes should be used when it makes sense to add a function to every instance of a particular prototype.
NOOOOOOOOOOOOO 😂😂😭😭
Don't worry about it. Honestly, based on the fact that you are posting on Reddit about this, you are probably in the top 25% of javascript developers. I recently heard a developer with over 4 years experience at work mention that they just learned that they could use developer tools to view javascript errors. You don't need someone to "guide you" at work. Reputable developers who post tutorials and videos are going to have better technical skills than most people that you would encounter at work. Where you could receive guidance at work would be related to business processes that are specific to your employer or domain.
Please ban this idiot
You are describing myself and every developer I've ever worked with. Go ahead and keep learning everything you can but understand that you probably aren't as far behind as you think you are and are probably ahead of the game. Seriously, I cannot stress enough that the average developer is not likely to look at info about development unrelated to the task at hand let alone post about it. 
These are awesome 
Although generally you don’t want to mutate the original object. Having functions that both mutate and return value can often times be confusing.
Just practice. That's really all you need to do to sharpen yourself - build an app if you want, or just do some programming puzzles. You don't need any guides. Studying is great but it helps more with knowledge than skill. Books and tutorials are how you learn new things, but practically applying that knowledge is how you get good (and stay good). If you find yourself frequently forgetting basic things like syntax, rote memorization *might* help you, but in my experience it's easier and more effective to gain familiarity through usage.
@[I2olanD](https://www.reddit.com/user/I2olanD) wow. Pretty impressive. The realtime aspect of it is mind-blowing!
This! A lot of my problems with code gets solved when I'm away from the computer. My wife usually catches me having a "light bulb" moment and asks me if I found a solution to some nagging issue. Also I've found just talking about the code to someone interested (even if they work on a different technology) helps. 
&gt; Use setTimeout for periodic checks. Js has a good built in event system that alleviates the need for polling. Can you please elaborate on this? 
JS always tries very hard to make your code work in *some* way. Since parsing only makes sense with strings, `JSON.parse` will turn the input into a string first. An object's default `toString` method returns `"[object Object]"` and since the `[` at position 0 is valid JSON, it will complain about the `o` at position 1. You could make it parse whatever you want. const obj = { toString() { return "[1,2,3]"; } }; JSON.parse(obj);
GSLint, you seem to have forgotten to close some parentheses. Here, let me close them for you: ] --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)|[Mistake?](https://github.com/the-saif-ahmad/parentheses-closer-bot/issues/new)
GSLint, you seem to have forgotten to close some parentheses. Here, let me close them for you: ] --- ^[GitHub](https://GitHub.com/the-saif-ahmad/parentheses-closer-bot)|[Mistake?](https://github.com/the-saif-ahmad/parentheses-closer-bot/issues/new)
Why are you not using enzyme for this?
I'm finishing a bootcamp in the next few weeks and I'm the same as you, nervous as hell as I need to find a job quickly. Fortunately the one I'm at seems to support finding a job as well as the training. If you have any questions about it let me know! Good Luck!
I know (after checking MDN) what `bind`, `call`, and `apply` do, and how `this` works, but I can't think of a single useful application of any of them in a modern codebase beyond `this` in a React component class.
Amazing... 
Partial application. Bind is the same as returning a new function with some of the arguments already passed in but, confusingly, also pulls double-duty as a way of setting the context of `this`. In the context of React, the most common use case for binding/partial application would be when you want an onClick handler to be called with a specific ID that's known during a map/loop over a data set. For example: { data.map(d =&gt; (&lt;button onClick={this.handleClick(d.id)} /&gt;) } Two ways of doing this (such that the handleClick method isn't immediately called). 1. `onClick={this.handleClick.bind(null, d.id)}` 2. `partiallyAppliedHandler (id) { return () =&gt; this.handleClick(id) }` ``onClick={this.partiallyAppliedHandler(d.id)}` In both cases when you first call the method (i.e., when you pass the ID) you're calling a function that _returns_ another function. That returned function is then called when the onClick handler is invoked (with the ID parameter already hooked up).
Reactstrap https://reactstrap.github.io/
If you're using TypeScript, or are willing to use [this](https://github.com/tc39/proposal-class-fields) stage 3 proposal, you can instead write it as: class X extends Component { example = (id) =&gt; { // etc } render() { return this.props.arr.map(() =&gt; &lt;div onClick={a =&gt; { this.example(a.id); }} /&gt;); } } Although generally I think doing any sort of binding here is against best practices as it creates a new function on each render, or something like that (solution being creating a component and passing the ID and a callback as props).
Because the bootcamps aren't, by design, set up to teach you the material. It's set up to give you the basic knowledge to pass an introductory technical interview and land a job as a junior developer. The speed and selective-topics that they teach are not representative of the skills that you need in the real world. People are haters because the program sells a false promise that this program will open all sorts of doors to gainful employment. It might - your success is 100% your responsibility. The bootcamps and the content are there to get you through the interview - what happens before, during and after that is 100% on you.
Very well said - and 100% accurate. Had I known then what I know now, I would have invested more time in self-study and build up my development chops before attempting this sprint learning. re: teaching yourself to ***learn how to learn*** is absolutely essential. These aren't esoteric, conceptual topics - if you're not comfortable being hands-on with things you don't understand, and a willingness to learn by breaking, then this isn't the program (or the career field) for you.
**DO** try everything (within reason) that people list as don'ts. It's important to understand *why* you shouldn't do something. The massive caveat here is play around in your own code, not code someone's paying you to write. **DON'T** accept best practices without exploring *why* they're best practices. You need to make mistakes in order to tune your awareness of less-obvious pitfalls. For example, you may never use `eval` because someone, at some point, told you not to. But without knowing _why_ arbitrary string-as-code execution is bad you may not notice that passing a javascript expression as a string to `setTimeout` is the same mechanism, and just as bad for all of the same reasons (despite not being as commonly derided as `eval`)
You don't HAVE to use jQuery with boostrap - https://www.sitepoint.com/use-bootstrap-components-without-jquery/
Completely respect your opinion - but, I fundamentally disagree with the false hope that's sold. This isn't a bullet-proof answer to a job as a Web Developer - and the statistics that they share (high percentage of career placements) are always murky when pressed for details. I advocate that people do their homework, be honest with their ability to be productive while being frustrated for an extended period of time (a skill I do not have - and actually fooled myself into believing) and remain skeptical when the program tells them things that sound too good to be true. I put them down because I've lived through one - so my criticism and critiques are rooted in first-hand experience.
Thanks for the in-depth answer! I love learning about error messages and what causes them, even after I've found a fix for the error.
Yeah Bootstrap only uses jQuery for the JavaScript side of things. If all you want is visual style and layout then you can just use the Bootstrap CSS
Don't focus on design patterns. Focus on writing code that works. Most of the time you don't have to worry about design patterns until you need to fix a specific problem. Over the years you'll learn to apply solutions that just happen to also have a name, and those are design patterns. I call it "common sense". You just need to know that there are common problems with common solutions, and you need to know that these exist. You don't need to know all about them because you–like anyone else–will Google the problem and copy/paste the most popular and vetted-by-you snippet of code on StackOverflow.
Just because you can circumvent their existence in modern js, doesn't mean you shouldn't take the time to understand what `this` and its related binding methods represent. In fact since you mention "modern js" in the context of `this`, then how about [this proposal for function bind syntax](https://github.com/tc39/proposal-bind-operator/blob/master/README.md) ?? If you didn't know what this and bind did, you'd have no clue why you'd even need syntax.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tc39/proposal-bind-operator/.../**README.md** (master → 826fbf3)](https://github.com/tc39/proposal-bind-operator/blob/826fbf307aa1f5c6c249852e6c91b1e459b51461/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e43vqdg.)
Just because you can circumvent their existence in modern js, doesn't mean you shouldn't take the time to understand what `this` and its related binding methods represent. In fact since you mention "modern js" in the context of `this`, then how about [this proposal for function bind syntax](https://github.com/tc39/proposal-bind-operator/blob/master/README.md) ?? If you didn't know what this and bind did, you'd have no clue why you'd even need syntax.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tc39/proposal-bind-operator/.../**README.md** (master → 826fbf3)](https://github.com/tc39/proposal-bind-operator/blob/826fbf307aa1f5c6c249852e6c91b1e459b51461/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e43vr9a.)
Use ant design. 
If you want to do more of an end-to-end test, I'd highly recommend \[cypress\]([https://www.cypress.io/](https://www.cypress.io/)) or \[nightmare\]([http://www.nightmarejs.org/](http://www.nightmarejs.org/)).
[http://keycode.info/](http://keycode.info/)
Agreed learn Typescript is what I suggest to new people entering into the JavaScript ecosystem. It’ll make them better faster. 
You are confused because original Bootstrap indeed uses jQuery. What you need to know is that all framework-related packages like React-Bootstrap or Bootstrap-Vue uses: \- CSS files from original Bootstrap \- JS is completely rewritten to use VUE/React So you don't have jQuery in such packages.
Don’t rely on `thing` evaluating to a falsey value **if and only if** it’s `undefined` or `null`: ```js if (thing) { // ... } ``` `thing` might be `0`, or `[]` or `""` and they all evaluate to falsey values. Instead, do write explicit conditionals: ```js if (thing !== undefined) { // ... } ``` 
DO: use TypeScript DONT: have global mutable state
This is just a design pattern, and you shouldn't use these kinds of patterns indiscriminately. There are times something like this makes sense and times it doesn't.
No sense of humour jeez
Especially relevant for built-in objects like `Array`, `String`, etc.
Don't worry about things like creating a new function on render unless you have tested and found that to be your bottleneck. JS engines are really good at creating stuff like that, and your form that will probably rerender a few hundred times is not a good place to spend your time reducing render speed. Readability above all else until the requirements dictate otherwise is a good rule of thumb to follow.
Do `"use strict";`
They're both quite different but in any way, forget about immutablejs. It turns your code into a mess and is easy to abuse. immer on the other hand is a small, clever tool that you can use to remove reducers once and for all from your state management or where ever you do have reducers.
Don't mutate your data. Watch out for these methods: https://doesitmutate.xyz/
I've used it with no problems so far. There's also [reactstrap](https://reactstrap.github.io/).
Never use `with` syntax. Shouldn’t be a problem with you use strict mode.
I have used bootstrap adaptations for react,but in the last project I decided to use Google's material UI library, the Grid component, and it works in a neat and simple way. TBH that whole library is incredible.
I disagree. I'm not circumventing their existence, it's merely that the patterns that I use disqualify them as in any way useful, including knowledge thereof. It doesn't take much effort to learn on MDN if you have to want to, though I strongly contest that it's something a beginner should be concerned with. I'd be more concerned about code patterns that lead to needing them.
You don't need that if you're using TypeScript or [this](https://github.com/tc39/proposal-class-fields) stage 3 proposal.
Fair shout!
I missed the part about this not being a react app. My bad. You can import it, sure. But I would mock whatever methods you’re referencing in it with jest. Otherwise you’re creating brittle tests. 
Trilogy. The content closely mirrors the udemy Web Bootcamp class by Colt Steele, and that's only $10. Colt does an excellent job explaining the concepts and making sense of more complex topics. Also, I like that the videos provide code-along opportunities. Contrast this with the Bootcamps that provide the written code so you can read through it, but you lose the logic and sequencing necessary for procedural thinking.
Nice! Thanks for this :D
No, but when I have done it, I litterly just look to see if something like if(model.userslist.length &gt; 0){return model.userslist;}else{fetch}
https://www.zdnet.com/article/in-the-new-browser-war-microsoft-edge-is-losing-internet-explorer/
Why not?
I'd actually recommend playing around with Vue for the first time on [Codesandbox.io](https://codesandbox.io/s/vue) (because everything is already set up for you), and then when you want to actually make something, just use the official docs. Vue CLI 3.0 was just released and it's insanely intuitive, all set-up is automated.
So basically data providers... about time!
Because it secretly stands for evil(). You wouldn't use an evil() function, would you? https://stackoverflow.com/questions/86513/why-is-using-the-javascript-eval-function-a-bad-idea
Good luck to you, as well. Hope that your search is short, and leads to a dream job. Sounds like you're well-positioned for success. \--Sherman
I think it is only a security risk if you eval user input.
Yeah, I like to do it risky. Feels more erotic to not use a linter.
This is just an advertisement for the Zepel.io software package. I find it interesting that OP's account posted normal content up until 4 months ago, stopped posting, and as of 1 month ago only posts advertisements for Zepel.io. 🤔
Hey /u/Charles_Stover I thought our learnings was something that would make sense for the developers over here. My intention wasn't to promote our software. I'm sorry it came out that way and wouldn't mind sharing our learnings as a text post.
Time to go back to basics. Screw all the new crap coming out. Get you an exercise book on data structure and algorithms and do the exercises. Or sign up for code wars and do those exercises. There is nothing wrong with strengthening your foundation. 
I don't mind tech companies sharing knowledge. It just looked suspiciously automated.
Yeah, you can use bootstrap but why would you want it? There are literally hundreds of fresh design systems with ready to use, optimized and powerful react components. It really doesn't take a lot of time to get to know some of them. I.e [check out this list] (https://hackernoon.com/23-best-react-ui-component-libraries-and-frameworks-250a81b2ac42&amp;ved=2ahUKEwiK153ylurcAhWCZpoKHUhEAwgQjjgwCnoECAMQAQ&amp;usg=AOvVaw1dNe5OTHE3DIfyYEKv2MO4&amp;cshid=1534168506201) Also, if you simply plan to use some prebuild classes to speed up your developement, I would recommend to dig into functional css frameworks like tachyons or tailwindcss. Works like charm with react and keeps your styling lean. And on top of that, there is whole beautiful ecosystem of css-in-js... (i.e styled-system &amp; rebass) Tl;dr - you can, but imo there are some many more intetesting alternatives
Oopsie! 🙈 I love automation, /u/Charles_Stover, but not on communities. No sir. That just wouldn't be right and would spoil the whole purpose of a community. So you can bet your last buck that I'm not a bot. :D 
I agree with this completely. Don’t get it mistaken , it’s only you and the job hunt when the bootcamp is over. They won’t help beyond your allotted time. The difference in bootcamps, are the support they give you throughout the courses, the location, and languages they teach. I didnt finish college, so the money I would have spent there went into the bootcamp, that I took later in life. Going back to learning after 28 is way easier then at 18-24ish.
https://knowyourmeme.com/memes/oopsie-woopsie
Omg lol
Is "Damn it" meant to be in your webpack.config.js? https://i.imgur.com/JTETSwH.png 
ReactStrap makes it pretty easy. Some of the documentation is a bit brief, but for the most part you can cross-reference it with the regular Bootstrap 4 documentation and find what you need. Its jQuery nature is all bundled in so you don't have to think about it.
Oh the joy of not supporting IE11...
&gt; [...] and even dynamic loading is also possible! What are you referring to here? Dynamic imports ([`import()`, stage 3 proposal](https://github.com/tc39/proposal-dynamic-import))? That’s not a thing, yet.
(Sorry if this is long-winded; I mostly lurk.) I recently built a board game that recursively explores possible moves. If such a program were to copy-by-value the current game state every time it tried a move, the memory usage of the code would be enormous. I needed my game state to be some kind of persistent data structure. In this way I found myself choosing between Immutable.js and Immer, and I decided on Immer because it's much less imposing. But also, Immer is much more *versatile*, as I discovered afterward. Here's what I mean. Immutable.js is all about handing you *its* variants of the standard collection types, and insisting that you use them everywhere. That means anywhere you construct an immutable collection, you must construct the appropriate *Immutable.js* collection, rather than the classical version. If you then try to integrate that code with *other* code that doesn't use these collections, it's up to you to make sure these differences in type are reconciled. Oops, pulled an Array out of parsed JSON? You'll have to wrap it in `List.of()`. Wait, it was an Array of Objects containing Arrays? Have fun with all that. And if you someday have to to migrate away from Immutable.js, you'll need to carefully replace all these constructors and conversions wherever they may be. At some point you might say to yourself, "This isn't what I signed up for," and you'd be right. [The Immer.js API](https://hackernoon.com/introducing-immer-immutability-the-easy-way-9d73d8f71cb3), on the other hand, offers more or less the same functionality in a much more flexible way. It's just a single function! If I have a classical Object, and I want to *produce* a version of it where a change has been made, I write a function that mutates that object, and pass the object and the function to Immer.js's `produce` function, and that's all. If I had to rip out my Immer.js dependency tomorrow, all I'd have to do is reimplement that `produce` function. And I can use that function pretty much however I want. For example, if my game was checkers, and there's a move where one player can hop over four of the other player's pieces, then I want to show the player each hop in an animation. That's four consecutive, uh, hoperations, to perform on my game state. The rule that *governs* hopping is passed a `produce` method, and calls `produce` once for each hop. But it's not Immer's `produce` method— it's mine! Mine calls Immer's internally, but it also pushes the output onto an Array, which afterward gets passed to my view, which interprets it as a kind of animation description. Immer's API design encourages this kind of application.
It's a reserved word for JavaScript.
Perfect is the enemy of good. Build something suboptimally without all of the complexity and then, after it’s working and you see a need, make it better.
The spread operator for function parameters uses apply to apply an array of parameters to a function. f(...a) = f.apply(this, a) Call is useful when prototypes don't exist on an object. Object.prototype.hasOwnProperty.call(Object.assign(Object.create(null), { x: 1 }), 'x') Bind is good any time you want to bind this. This happens even outside of React, but comes up most times when a function is invoked within a different context: Array.prototype.map is a common one for me. Event listeners are common as well, which is likely where you saw them in React. Happens even outside React. Understanding these is a huge step up in your JS game, as obscure as they seem. They are the backbones of complex JS interactions. I'm proud of you for learning them. I hope they come into play for you at some point. 
Can I ask why your considering either one? Just trying to understand your needs. In many cases you can do what immer or immutablejs can with a simple proxy. No need to add an entire library for something vanilla js can do fairly easily.
The sneaky self-promotion and clickbait title isn't appreciated. 
Because your employers will be just as diverse about accepting or hating bootcamps as developers are. Some doors will be closed to you before you ever arrive. And people who paid more money and spent more time to go to college feel entitled to better odds. They are right to feel as though they have better odds. They do. Whether their education is better or their decision wiser is up for debate.
Ah, that's similar to a library I've come to really like called [react-copy-write](https://github.com/aweary/react-copy-write) which also uses Immer under the hood.
Ah, fair shout, I have used call for hasOwnProperty before and forgot all about it! Though at the time how it really worked glazed over me, now it makes sense! Could you give me an example of when you'd want to map with bind?
This is indeed interesting point!
`this.dataArray.map(this.mapDataToSomeFormat)`. I have some object instance that has an array of data. I want to map it, such as to a view, or anything at all. The function I'm using to map it depends on the instance, so requires a this context. I will need to bind the function (mapDataToSomeFormat) in order to use the this context. e.g. `return this.view === 1 ? data.name : data.id;`
Don't bother with immutable, it polutes your entire application.
Nice :D I didn't catch that one. Thanks ;)
&gt; If such a program were to copy-by-value the current game state every time it tried a move, the memory usage of the code would be enormous. Can you explain that?
The explanation is you need to learn to use Stack Overflow. NO WAIT DON'T DOWNVOTE ME, I'm being serious, not trolling. As a modern programmer Stack Overflow should be an essential part of your toolkit. If you'd done an even basic search on that site (or just on Google; Stack Overflow dominates the results) you would have found the answer without waiting for GSLint to repeat it here for you. Learn Stack Overflow, love Stack Overflow, and you will be a better programmer for it.
I learned that [Bluebird does this](https://github.com/petkaantonov/bluebird/blob/3746b7eca90dd8b11af73db5d30cf46d7dd90f9b/src/promisify.js#L193) and I've been phasing it out of my code ever since.
The explanation is you need to learn to use Stack Overflow. NO WAIT DON'T DOWNVOTE ME, I'm being serious, not trolling. As a modern programmer Stack Overflow should be an essential part of your toolkit. If you'd checked that site (or just on Google; Stack Overflow dominates the results) you would have found [https://stackoverflow.com/questions/40878388/unexpected-token-o-in-json-at-position-1-issue-with-parsejson](this answer) (with the answer to your questin in the second comment) without waiting for GSLint to repeat it here for you. Learn Stack Overflow, love Stack Overflow, and you will be a better programmer for it.
wasn't the intention mate. Just wanted to share this cool trick and also the resource where you can find more like these. Will try not make my posts come across like a clickbait :)
Thank you. That helps a lot! It’s good to know that other people feel that way as well and it’s common. 
That’s what doing actually. Been doing through HankerRank and Eloquent JavaScript etc. But there are so many new things out there I feel overwhelmed. 
That one's nice for sure. Just needed something that resembles a context more closely and can be used in the same way. 
How do you think I understood the fix for the problem? The assumption that I don't know about Stack Overflow is pretty stupid, tbh. I just didn't pore over every single post about the issue. For what it's worth, when I googled it (and even now) 5 of the top 6 links for me don't mention the reason for the error message at all. They just explain the fix.
As a matter of personal taste, I'll take a simple macro (jsx) over a full blown dsl + vm (glimmer) any day of the week. That is, of course, a matter of personal taste, and different reasons for different seasons.
That’s great advice! I never thought about it like that. Focus on my own goals/work and learn to fix the problems that I encounter. Thank you ! This helps! 
 But metarial UI is a bit slow, and semantic is extremely huge, add one button and your production file size will be 500KB, and another issue these libraries are really hard to extends by custom styles... Bootstrap is light and easy to customize... 
And the answer was in the comments (to the question I linked, which was like result #1 or #2 in Google, I forget which). Part of learning Stack Overflow is learning to read things like the comments (they can be more informative than the answers).
IMO, ImmutableJS plays relatively badly with anything that isn't immutableJS. To interact with a 3rd party library, you will probably find yourself doing a lot of converting back and forth, which is likely to kill any advantage in terms of performance. Case specific optimizations are also much easier with normal javascript objects. For example, sometimes cloning a value once (either deep clone or something in between) and doing many mutations on it might actually be faster than doing many immutable operations with ImmutableJS. Just in terms of the code maintainability benefits of immutable data-structures, I think immerjs gives you everything that you'd get from immutablejs, but better integrated into the overall JS ecosystem. I think that it's better to use ImmutableJS like data structures in specific places when and if you need it. Clojurescript is a language built around the concept, if you want efficient immutable data structures everywhere by default. Everything there plays into this, so the ecosystem won't fight it like javascript will. One other important aspect is that if you choose to go with Typescript or Flow, immutablejs is more convoluted to write types for. Though [this](http://vault.buildbunker.com/stories/2018/1/15/immutablejs-records-with-typescript-classes-part-1) is an interesting article on how to do it.
https://caniuse.com/#search=type%3D%22module%22 Not supported by IE11 or any of the "off brand" mobile browsers used elsewhere in the world (Opera Mini, UC and Samsung).
Take a look at puppeteer for e2e testing. It integrates nicely with jest
Is it? Here is where I learned about dynamic import https://developers.google.com/web/updates/2017/11/dynamic-import#dynamic. Notice the note at the beginning of the post. I wonder, what is the difference!
Both refer to the same technique. I said "not a thing, yet" because browser have yet to adapt it. So far, it’s only available in Google Chrome.
I'll try to! Imagine a chess board in its initial state. We can represent the pieces with objects like this: `{ type: "knight", square:37 }` When a piece moves or is captured, we change its square. When a pawn gets promoted, we change its type. Pretty much everything else about the game is unchanging. I know I'm ignoring some details, but hey, who cares? Someone else, that's who. Anyway, each player has sixteen of these, so we're looking at a game state made of thirty-two of these objects. Let's say I want to try moving my bishop. And let's say there's twenty squares where the bishop can go. If I want to imagine making each move, and then decide how much I like each one, I'll need to create a *version* of the current game's state where the bishop has moved. The naive approach to doing this is to run the current game state through `JSON.parse(JSON.stringify(foo))`. (Don't look straight at it.) You end up with a state object that's structurally identical to the current state, but is entirely distinct, so you can mess with it to your heart's content. But it comes at a cost: we now have two entire states in memory, whereas before we only had one. And even if we assume we've got the world's best garbage collector, freeing up memory as soon as we stop needing it, we'll still have an entire game state in memory per level of recursion. In other words, if I want to imagine ten moves ahead, I'll need to use ten times as much memory. That's like storing 320 chess pieces instead of 32. We can do better than that. How many pieces actually change when we move one the bishop? Just that bishop. So we can reuse the other pieces— we only need a new bishop, and a new top-level object that *references* the old pieces and the new bishop. Our savings per level of recursion are something like 31/32, or 96%. Our memory footprint grows slower, and the GC has a lighter workload. 
I agree but its a lot bigger :/
To add onto that, you really shouldn't ever modify the protoypes of intrinsic objects. If you want to see why not, look up MooTools and flatten. The way MooTools worked forced the spec to rename flatten to flat (much to my own irritation ;-))
Immer! 100%, always. I despise immutable, and it’s a HEAVY commitment because you’re not using plain JavaScript objects so if you decide to change your decision... good luck with that refactor. 
Immer _is_ based on Proxies (and has a fallback implementation as well for older environments).
&gt; Bootstrap is light and easy to customize... We're talking about Reacstrap though and it's neither of those things IMO
Immutable also would reuse the other pieces, thats one of its points. When you create an immutable.js structure from the entire chessboard then ask him to mutate a piece, it wont clone the whole board, all of teh other pieces are still only references. But yeah I also sont like it because you end up worrying on converting between plain js objects to immutable structures. (immer has heavier magic behind it, uses proxies I think, and hey proxies arent good too...) 
/r/Woooosh 
Look into the JavaScript Fetch API
Will do, thanks!
I had this same "problem" for like a year. I'd always refactor and rewrite code and optimise build chains and learn new frameworks and all of that jazz instead of just building my actual idea. The way I got over it was to force myself to discard every best practice I'd ever learned, uninstall every dependency and just write code from scratch, ignoring testing and so on. This was a very extreme approach, but it worked for me. It was something I learned at my first job - when deadlines were tight, our boss would tell us to just "code without regard for consequence like you're a cowboy and the project is the wild west" - we referred to it as "cowboy coding". I coded a very rudimentary dynamic server-rendered website. It was a maintenance mess, there were loads of bugs, but it was a functional, interactive MVP. I just refactored and wrote tests from that point on, and now the code has 91% coverage, only a few bugs, and is still a maintenance mess, just like all my other projects. lol. Maybe a solution this extreme won't work for you, but I figured I'd just add this comment as an example that sometimes un-disciplining yourself can be a viable option.
Heavy in more ways than that, even. It's 56kb minified https://unpkg.com/immutable@3.8.2/dist/
Antd has really nice demos but I found it really hard to work with. Customizing styles was a total bitch and I ended up writing up my own components with less effort. 
I'm not sure why you don't use the spread operator? First I think is easier to use an object rather than an array. For example: ``` const state = { ... 37: { type: "knight", square:37 }, 38: { type: "knight", square:38 }, ... }; // For each move ahead you just do const thinkAhead = (state) =&gt; { // make your changes stateCopy = { ...state, 65: { type: "knight", square:65 }, 69: { ...state[69], type: 'something else' }, }; } ``` Note that you didn't copy all the objects, you just never mutate any object, just shallow copy if you dont mutate the children. 
It's modular, you don't have to fetch the whole css blob in order to use it. They even have a small babel plug to make it easier so you only have to import the components you need and it'll shake the rest of and only include the fitting styles.
Yes, I already use the Babel plugin import, but I think is bigger than bootstrap, btw have a beautiful UI.
As long as the keys you use for your state object are unchanging UIDs for your pieces, I believe you're right, for simple states this is an acceptable solution. But when states are structures with deep nesting, the spread operator can be cumbersome. Compare these two pieces of code: const first = { x:0, a:{ x:0, b:{ x:0, c:{ x:0, d:true } } }; let next; // Spread operator. I like spread, but... next = { ...first, a:{ ...first.a, b:{ ...first.a.b, c:{ ...first.a.b.c, d:false } } } }; // Immer. It kind of translates mutations to deep spreads: next = produce(first, (state) =&gt; state.a.b.c.d = false);
I recently came across a framework that you might find useful https://github.com/nestjs/nest
You can use something like react native to create iOS/Android apps (though you would need to learn react) or you could use electron to create desktop apps.
Deep nesting is a code smell IMO. How come you need so much nesting?
No. I follow the famous [Kent Beck's quote](http://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast): &gt; Make It Work, (then) Make It Right, (then) Make It Fast My very first step is to get something that _gets the job done_ in the shortest possible time. No matter how ugly or inefficient it is (of course common sense is required... as long as it's not so inefficient as to be unusable, and there are no gaping security holes, etc). More often than not I then discover that some of my assumptions were wrong, or it's not as cool or as useful as I thought, etc. Then I can just simply throw it away, and I don't care as I didn't invest too much on it. If not, I will throw it away anyway but only after I have built a replacement. And so on It really works for me.
Reactrap is just react wrapper for bootstrap4, and still is light see button class https://github.com/reactstrap/reactstrap/blob/master/src/Button.js And compare to semantic-ui button.
This is cool stuff and I can't wait to use it, but it's not ready for production use. It's only available in Chrome right now.
I mean, in my particular case: const gameState = { // depth 0 global: {}, players: [], cards: [], spaces: [ // depth 1 {}, {}, {}, { // depth 2 owner: null, isOccupied: false, isHead: false } ], } I'm not getting a bad code smell from this, personally. And so: let nextGameState; // Spread operator (note: also requires arrays to be objects) nextGameState = { ...gameState, players:{ ...gameState.players, [3]:{ ...gameState.players[3], actionPoints: gameState.players[3].actionPoints - 1 } }, spaces:{ ...gameState.spaces, [10]:{ ...gameState.spaces[10], owner: 3, isOccupied: true } } }; // Immer nextGameState = produce(gameState, (state) =&gt; { state.players[3].actionPoints--; state.spaces[10].owner = 3; state.spaces[10].occupied = true; });
You gonna be downvoted into oblivion, but you are right. Answer is there, easy googlable. You're just saying harsh truth that is perhaps too harsh for some people too admit.
check out nativescript
What I tell my students: Follow [Dr. Valerie Frizzle](http://magicschoolbus.wikia.com/wiki/Ms._Frizzle)'s protocol: "Get messy. Take Chances. Make Mistakes." Code messy in odd-numbered versions. Clean up on the evens. Otherwise you'll constantly be stuck in analysis paralysis, like you are now.
Wes Bos ES6 course is legit
I haven't used it in production, but there's not much of a drawback that I know of. The primary implementation does require Proxies, which are part of ES6. I believe it has a fallback implementation that works in an ES5 environment. There's some performance overhead in either case, with the ES5 version being slower. But, the rough numbers I remember reading about weren't overly significant. And, assuming you're using this with Redux, reducers are rarely the perf bottleneck anyway - updating the UI is much more expensive. Earlier this year I threw together a small lib called [`redux-starter-kit`](https://github.com/markerikson/redux-starter-kit), which has some helpful utilities for simplifying store creating and reducer usage. I included Immer as part of that. Once I'm doing working on React-Redux v6, I hope to get back to that and push it forward so that we can make it an official Redux-branded library and begin recommending that people use it.
&gt;You should index by player id, not player index. How come? I often write expressions like `state.players.filter(playerIsNotOut).map(player =&gt; player.head)`; if these were Objects, I would have to call `Object.values(state.players)` a whole lot more. It's true that Immer's output aren't classical Objects or Arrays anymore; specifically, you cannot mutate them anymore outside a `produce` call. Immer also can tell when there are no mutations to the draft in the user-written method, whereupon it spits out the input, so the input === the output. And I believe the main difference between Immer's output and the types provided by Immutable is that, *apart* from their immutability, Immer's collections and classical collections *are* interchangeable. Though I'm not sure what steps are taken to convert an Immer-immutable Array to a mutable one, for instance.
Kinda this. Immutability is nice until library-specific stuff starts getting in the way. It's really great in some circumstances but as much as possible if your app is small and you can get away by writing effective tests instead, that'll pretty much be enough. Working with raw objects and arrays in js is really like wrestling with hydra but once you really get a grip of their default native functionalities, your need for immutability in js really gets thinned out. Not sayig youll never need it, just that getting dirty with js native functionalities will already get a lot of task done.
The difference is that Immer doesn’t protect you against making mistakes and mutating data you shouldn’t. Immutable.js forces you to never mutate the underlying data in an unsafe way because it wraps the data 
To reiterate, you cannot mutate an Immer collection. You can only use produce() to make a new Immer collection from previous collections. It’s true that it fails silently, though.
&gt; Immer Looks interesting, I will take a look.
The output (the return value of `produce()` )_is_ plain objects and arrays. As far as your code is concerned, the `draft` value is too, it's just been shrink-wrapped in a Proxy.
&gt; How come? I often write expressions like Is pretty much the default way to do redux. Works so much better than arrays. If you use spread operator is a pain with arrays. With objects works just fine. Let's say that you have an action, update playerId = 'sdasda' money to 2. You need to loop the whole player list to find it, and replace the item in array with a new object. A bit painful. If you need to filter, you can get them to an array pretty easily with Object.values
Inside of a `produce` callback, it's totally safe to "mutate" data - Immer uses Proxies to track what changes you're trying to make, and correctly applies those updates immutably to create the result value. Per the docs, it also automatically freezes the return value in development, which helps catch accidental mutations elsewhere.
The distinction here is between the concept of "managing data immutably", and "using the `Immutable.js` library". I think the parent is referring to Immutable.js specifically, since that's what the OP's original question was.
It's all about balance. For me, the goal is the product. The product working is more important to me than having the most optimized version of the code possible, because as soon as you have the product then you will realize something is wrong so you have to go back to change something. In my mind, there is no point in optimizing code until the product is stable. A stable product can mean stable revenue, stable user base, whatever; how you want to qualify it is up to you. 
Hmm, my bad for not reading all the comments on every Stack Overflow post about an issue that I fixed after the first one. I guess I was too busy pulling an all-nighter for my final project. Also, just saying next time you can give advice (or not make assumptions) in a much less condescending way.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Oops! My mistake. Being right on the Internet is harder than it looks!
As previous posters have mentioned, you can use just the bootstrap styles, although there are several libraries ([React Boostrap](https://react-bootstrap.github.io/) and [Reactstrap](https://reactstrap.github.io/)) that have ported the javascript components to React. But honestly, I think a large part of the reason you're seeing a lot of tutorials that use Bootstrap is that it's easy - both for the person developing the tutorial and the person consuming the tutorial. The person writing the tutorial doesn't have to spend time developing styles, and the person consuming the tutorial gets a set of CSS styles they're likely already familiar with, so they can focus on the real content of the tutorial. Personally, I avoid using bootstrap for the most part, unless I have a design that already closely resembles Bootstrap, you spend more time overriding it than it's really worth.
No, definitely no. Job rules rather go in the opposite direction. This feeling is meant for personal-your-point-of-perfection-projects. What I'm saying is we move by trends, now FP is well established, however, depending on the project has some performance issues and we go for impure well controlled code, like normally we were used to develop. What I'm saying is, no matter if you think other are wrong, just enjoy your time wisely, if you feel right go ahead. You make you own path, enjoy it. 
check if they are an empty string. 
Thank you. Don't know why I didn't think of this.
Try adding jQuery
A userscript that generates links for packages in dependency files like package.json, composer.json, Gemfile on GitHub: [https://github.com/kubk/github-package-links](https://github.com/kubk/github-package-links) Inspired by GitLab.
If you write code, line you write posts, you should stop
Great fucking bot. Pops up everywhere.
The best editor keeps getting better!
The JSX tag completion is quite nice.
The cleaner typescript error reporting is great too.
&gt; And I feel like this is different than premature optimization as it **might** help me to move faster in the future... You *are* prematurely optimizing. That's is fine if that's what you wanna to do. But don't fool yourself, friend.
Trying to learn and code using functional programming, hence the interest on both libraries 
Thank you for your answer, didn't know that `parseInt()` was the issue.
Sometimes long-winded explanations is more preferable when explaining things to a newbie. Thank you so much.
Hi /u/cHrOmOsOzE, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I'm trying to learn functional programming and came across ImmutableJS on youtube conference videos and blog post. Then, came across Immer by accident and liked it, but was too worried that it wasn't as good as Immutable.
[This needed to be answered in meme form](https://i.imgflip.com/2ftc50.jpg)
Hi /u/Ar0n1c, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Do pilot / sample projects, then copy these code into your real projects. This is why having your own repository for you to reuse code. Use the readme of repositories to document what you did. Eventually these will just click. Brain can only remember a handful of stuff and can only recall stuff after a handful of repetitions.
Just curious, are you folks using Visual Studio on Windows or MacOS? How is the development experience on Windows these days for React/JS oriented stacks?
ty
I’m starting mine now and have a few months to go! Good luck! I wish you the best! I’m sure you’ll be just fine despite the negativity in the thread lol
Great advice. I’m just starting out, feeling very good about the bootcamp that I selected, their curriculum, job placement and preparation. I think there is this misconception as I’m reading replies, that bootcamp grads have this sense of entitlement to everything that senior engineers have dedicated and invested their time and money into. That’s not that case for everyone and certainly not me. Their are some humble folks that want to learn, do well and be compensated fairly for it. Nothing wrong with that.
If your trying to learn then definitely check out the libraries, but after take a look at how proxies work, and consider how you might make the library yourself
Or this could be interpreted another way. It might be that optimizations and tooling is what you enjoy the most and perhaps it's what you're the most productive at. And it's a field of programming that is very valuable, too.
After almost 2 years, I feel like i've finally finished my test generator side-project: [snaptest.io](https://snaptest.io)
Thought I'd share a bit on my strategy/philosophy for side-projects. Let me know what you think.
I'm still new to JS just 2 months experience, but I will try. Thanks
I used to use lodash-FP/ramda for immutable updates, but now use Qim ( https://github.com/jdeal/qim ) as it has nice expressive syntax for both selecting from and updating large nested state objects. Like other commenters I ran into issues with immutablejs as it uses its own data types rather than basic arrays/objects. I haven't used immer, but I think a functional approach suits the problem better than using the proxied mutation methods.
While there's nothing wrong with using bootstrap's CSS files along with react and it might be a quick way for you to start (if bootstrap is something you're already familiar with), I believe that the era of bootstrap might be over and it's time for UI-kit libraries centered around the component paradigm. [Blueprint](https://blueprintjs.com/), [Ant Design](https://ant.design/) (being the only library I know of that has components specifically for [mobile *web*](https://mobile.ant.design/)) and the recently overhauled (MaterialUI](https://material-ui.com/) are the UI tools that will help you prototype your application much faster than bootstrap will. For *learning*, though, always choose what you're most familiar with.
Good luck getting a job being self taught. Bootcamps generally offer large real world projects, which is a *massive* differentiating factor when it comes to applying for jobs, even against CS grads with no experience. Not to mention resume coaching, interview coaching, accountability to be working 70+ hours a week, etc. This is bad advice imo. 
My only issue with Qim is that static typing (to any significant extent) is currently (probably) not possible. But that's really more of an issue with type systems than with Qim, since it's a really elegant solution. :) Still, not worth the trade-off for me. Though I definitely *can* see how it could be for some. 
&gt;If you then try to integrate that code with other code that doesn't use these collections, it's up to you to make sure these differences in type are reconciled. Oops, pulled an Array out of parsed JSON? You'll have to wrap it in List.of(). Wait, it was an Array of Objects containing Arrays? Have fun with all that. From the problems, as well as the Immer solution, that you're describing, it sounds to me like maybe you're just not familiar with [`fromJS`](https://facebook.github.io/immutable-js/docs/#/fromJS) &gt; And if you someday have to to migrate away from Immutable.js, you'll need to carefully replace all these constructors and conversions wherever they may be. At some point you might say to yourself, "This isn't what I signed up for," and you'd be right. I would somewhat agree with with this, with the asterisk that it's probably the sort of thing that's indicative of more general architectural problems. Using react+redux+immutable as an example, these sorts of issues (which you would potentially have to deal with in many other situations, such as a third party changed its API schema) can be really well isolated by consistently using selectors. This way you can isolate just one area of your code that would need to be aware of these kinds of changes, and provide a consistent API for all of the consumers (i.e. the rest of your code). If you're handling data ad-hoc in all different places throughout your code, really almost any kind of changes are going to be painful. I don't see that so much as an immutable problem, but I think I know exactly what you're talking about, and I've been there. With immutable, even. But with a better architected app, these, and a lot of other problems, pretty much just go away.
Hi! It's great that you're publishing your work. But since there're plenty of similar libraries already, notably [EventEmitter3](https://github.com/primus/eventemitter3), which is "lightweight" as well, I guess I'd like the README to mention how it compares to other existing solutions.
Oops, just realized that you're not that lib author.
Not familiar with them - if they track your time, that's a nice bonus. Not sure if my bootcamp was a "trash diplomamill" (BTW, stealing that because it's awesome!) but I will tell you that studying and participation are the student's responsibility, alone. In one of my earlier posts (or responses, I can't remember), I think I rattled off a list of things that people should screen/evaluate any bootcamp before signing up. Did not know that time tracking was a thing, but it's something that every program should strive to track. p.s. What I'm saying is completely true. 
In all honesty, you use shopify or some other eCommerce product. This isn't the type of programming project you want to do for a friend. 
I used react on windows(no wsl) and reasonml with wsl both are great
Its finally here?!
I found wsl to be really painful as it doesn't handle line endings well if you try to open files outside the wsl console.
I use it on Linux and it's actually really great. I was pretty hardcore into intellij for a few years, but after I switched, it's hard to go back.
I know it’s been a while but I wanted to apologize for the downvotes you got here. You raised some good points which the other guy managed to evade in every single response, while repeating the same shit over and over again. And *he* got upvoted. I’m frustrated on your behalf. I wholly agree - use `const` to denote things that are constant, use `var` or `let` to denote things that are variable. Sounds pretty obvious to me.
So couple of issues: you don't want to make a request to the clay institute website on every request; it'll slow down or even crash your site, and it's just rude to spam/DDoS them. Also, solving P vs NP is not the end of the world. Proving that P=NP would indeed be bad news for crypto, but proving P!=NP means crypto is safe. 
Try changing `function myFunction{...}` to `function myFunction() {...}` Even without parameters, your functions need parentheses. I think that's the problem, haven't looked through the rest of your file though. 
 &gt; So couple of issues: you don't want to make a request to the clay institute website on every request; it'll slow down or even crash your site, and it's just rude to spam/DDoS them. There's definitely a more elegant way of doing this.. if anyone knows a public API willing to serve this data more efficiently, plz pull request me... I just thought it would be a funny &gt; Also, solving P vs NP is not the end of the world. Proving that P=NP would indeed be bad news for crypto, but proving P!=NP means crypto is safe. Indeed, I seem to be missing functionality
Fixed: https://jsfiddle.net/Lnmaqv79/3/
Two issues here. First, you need to wait until the DOM is ready to add event listeners. Your code as written may run before `img#demo` exists! This is what the [`DOMContentLoaded` event](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded) is for. The second issue is... I'm not sure what `myFunction` is, but it is not valid JavaScript syntax.
It’s important to note they Visual Studio and VS Code are two different products 
These guys and typescript team still doing great work.
Yep, it should be fine.
Be patient and read carefully. Recently I answered a question about design patterns, and this is what I said: ------------------- A problem has a single solution. Said solution is what I call the reduced solution. A reduced solution is one that contains no redundancies, nor says more than needs to be said. A solution is very likely to be not reduced if it encourages redundancy such as you have to copy from the solution to extend it. In my book, you are under engineering if you are generalizing one or more steps too little. This is a solution that contains redundancy. This is a non reduced solution. In my book, you are over engineering if you are generalizing one or more steps too many. This is a solution saying more than needs to be said. This is a non reduced solution. A problem can have many solutions, but only one would be reduced. Seek the reduced solution to your problem, and the 'pattern' emerges by itself. ------------------- Now going back to your question. Given a tool/framework 'A', a framework often for some pattern, and assuming that 'A' contains no redundancy, and this does not invalidate what comes next, then, 'A', is the reduced solution to one problem and the set of all equivalent problems. When people say tool/framework 'A' has such and such advantages, it usually means that 'A' can solve such and such problems, which could be from the aforementioned set, or from a set of problems such as 'A' is an over engineered solution to said problems. When people say tool/framework 'A' has such and such disadvantages, usually it either means that 'A' is a conflicting solution to such problems, or that 'A' is an under engineered solution to such problems. When you feel that you are writing more code than you should have to for your problem when using 'A', that is because 'A' is an over engineered solution to your problem. This means you are solving for more than your problem. When you find that you have to implement many things when writing code while using 'A', this means 'A' is an under engineered solution to your problem. (This is not a bad thing per the problem of solving the problem, hence why library is good, framework is bad) When you find yourself fighting with 'A' to solve your problem, it means that 'A' is a reduced solution to a problem that contradicts your problem. In simple terms, if you solved exactly for your problem, you would not be talking about advantages and disadvantages to your solution, nor feeling that you are wasting time on other than your own problem. Your solution would be the exact solution to your problem, like 2 is to 1 + 1. Learn to keep it simple. Do not over engineer, and do not under engineer. Writing a reduced solution is no easy task, and the true mark of a craft man in any field I think, including language. In other words, do not confuse keep it simple, with be lazy.
I've taken both of his Udemy courses and they were both fantastic. The outline and resources mentioned in the article are good learning resources. I don't really believe that someone could go from 0 to hireable in 5 months, but I do think following the track in the article or taking his courses would be a good way to learn some things about web development.
:O It works! Thank you so much holy shit. I've been trying to get this going for way over 3 hours now lmao. I did try pull up the console but it was just handing errors I don't understand on lines that didn't exist.. (like error on line 250 something on index.js, where there is no such index in my directory?) Hope you enjoy the small gift I sent ;p
How are his courses different from the resources mentioned in his article? How much are the courses? 
Yeah any dev familiar with WebStorm and working in multiple files at once would disagree. "If you use your memory while coding you're doing it wrong."
I switched from Atom to VS Code about two months ago. Never looked back, not even once. 
Funny, I switched from IntelliJ/WebStorm to VS Code. Haven’t looked back. 
Do you work in one file at a time or how do you deal when say 6 files have interconnecting code?
Generally instead of polling, it is better to register a callback function that will run when a thing happens. If your actual goal is to wait some amount of time, it is fine to use though.
I think the string returned can be parsed by `Date` so you'd do something like, var startTime = document.getElementById("startTime0").value; var endTime = document.getElementById("endTime0").value; var startTimeDate = new Date(startTime); var endTimeDate = new Date(endTime); var totalTime = endTime.getTime() - startTime.getTime(); 
Thanks, I will try it tonight.
Still using Sublime day to day, since it does most of what I need, though it seems the cool kids are using VSCode these past few years. Never woulda thought that MS would make anything that was so loved by JS devs.
You can add an event listener to the input JS // sample.js var input1 = document.getElementById('date-1'); var input2 = document.getElementById('date-2'); var result = document.getElementById('result'); var date1; var date2; var msPerDay = 24 * 60 * 60 * 1000; input1.addEventListener('change', function(e){ date1 = new Date(e.target.value); date2 &amp;&amp; calculateDelta(date1, date2); }) input2.addEventListener('change', function(e){ date2 = new Date(e.target.value); date1 &amp;&amp; calculateDelta(date1, date2); }) function calculateDelta(d1, d2) { var daysLeft = (d1.getTime() - d2.getTime()) / msPerDay; result.innerHTML = daysLeft + ' days'; } HTML &lt;!-- index.html --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;label for="date-1"&gt;Date 1&lt;/label&gt; &lt;input type="datetime-local" id="date-1"/&gt; &lt;label for="date-2"&gt;Date 2&lt;/label&gt; &lt;input type="datetime-local" id="date-2"/&gt; &lt;p id="result"&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; For more information about date parsing, you can check out the [Date object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates#Date_object) or you can use a library like [momentjs](https://momentjs.com/)
I'd probably start refactoring if my code was so much spaghetti that one concern is spread out over 6 files.
You think VS Code users work in one file at a time? I'm almost never doing that.
Why would you want to ignore it? Atom is so incredibly slow in comparison, I can't bare to use it anymore.
Thanks! Do you know how they merge / manage the many package files they have?
I think if you just started, pure js, with spread operator is good enough. Don't use for the sake of it
I hope you're not supporting the `const` argument, as that's not protecting against mutating objects. Valid reason to throw him out of the building. 
I work in the driver/kernel space, and also love it for work in C/C++
Make the library himself? Why is that? Do you also do this with React? Redux? Jquery? Ramda? Lodash? Leaflet?... Don't reinvent the wheel if there already is a good one. Better support some projects by contributing. I agree that's a good thing to know how a lib works. And if it doesn't match what you need, build your own. But there is nothing wrong with using a library. 
Exactly the same here. And I loved Atom (except for how much of a donkey it is when starting up). There's even an Atom shortcuts extension!
Long time user of WebStorm, switched to VSCode and wouldn't look back. It is more streamlined, minimalist, and you choose what features you want. It loads quickly and can run on most computers. Best switch I made and it's free!
I had to switch to PHPStorm and I dearly miss my VSCode. 
bookmarks extension
Are you talking about the same editor? Is the easiest thing to run multiple files
&gt; It has also removed (or deprecated) syntax that many JavaScript developers grew up with! Wait, what? Semicolons are deprecated? Correct me if I’m wrong, but moving forward from ES5, virtually nothing has changed with regards to semicolons and Automatic Semicolon Insertion, right? I don’t see any practical reason to make up more complicated rules for semicolon-usage in JavaScript. Use them or don’t. No need for such a complex do and don’t list.
Alright guys, I'm making the switch.
Most browser developer tools have some kind of responsive design mode (e.g. in Firefox, press &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;M&lt;/kbd&gt;) allowing you to test touch events with your mouse.
Yes, of course. But those are just emulation, and it can be nice to use a real touchscreen for this.
It’s preferable. The emulated touch devices tend to be quite slow, too. It’s not the smoothest experience.
Are you referring to the fact that you can't open a given file in a separate window? Because otherwise I am curious as to what magic feature WebStorm might have for "multiple files"
Been waiting for this feature for ages!
I follow this rule when I find myself stuck in this kind of situation: 1. Make it 2. Make it work 3. Make it work right
(sigh) nope.
Then you're spending personal memory to keep in mind what's going on in one bit of code while looking at another, right?
"More streamlined" sounds amazing -- what does it mean?
Hi, yes of course you can very easy uninstall yarn from ubuntu, by command: `sudo apt-get purge yarn` Anyway, I have npm and yarn and I never had any issues, I install packages by npm, and use yarn to run scripts/tests.
And if you want to look at 6 files at once (meaning you just look at different parts of the screen to see interrelated code, not spending time switching tabs, and not temporarily memorizing bits of code) you have to struggle quite a bit, right? 
The process of simplifying something by removing unnecessary steps (features in this case) or taking a different approach to have a more effective tool. 🙂
Wow, you can't? Yeah, I'm talking about being able to open a file in the left half of the current editor pane, or the bottom half. Recursively. (And you can change widths and heights and have one file in multiple panes etc). So you could have e.g. your window have a first split left/middle/right and each of those split top/bottom. Looking at 6 files at once without having to spend time switching tabs or spending personal memory memorizing bits of code for comparison.
Certainly not more effective if you have interrelated code across multiple files. Not sure how you avoid temporarily memorizing bits of code when using VSCode
&gt;Also when I'm installing global packages all bets are off. Sometimes yarn will do the installing, and when I want to upgrade I do it with npm and things just get all over the place. I don't get it, you're the one calling Yarn/Npm aren't you? Using two package managers to manage the same package is bad practice and you shouldn't blame these tools for your inconsistency.
Fair comment for your use case. Could you explain what you mean by interrelated code across multiple files? What is it you are actually doing? My point about WebStorm is that after using it for about 3-4 years it was fully featured but I rarely used most of the features. So using a more streamlined took for me suits. 
Sure, if you don't look at multiple files that's fair. I'll paste what I wrote in another comment: &gt; Say you have one component firing an action creator, which in turn uses a couple of global selectors to get data and fires an action which in turn affects two subreducers, which in turn affects two components. Now say you want to have a view of all of that at once to make sure nothing mismatched is going on. &gt; In VSCode you'd have to spend time and memory navigating between windows/tabs. In WebStorm you could see all the code at once. 
That makes complete sense (he searches for his WebStorm installation to try this out). I'm interested in this. Can't seem to find this as a feature... Could you point me in the right direction?
I don’t know what you mean, I want to know what’s going on in the code I’m working on regardless of the editor. VS Code has a bunch of features to peak at relevant code, and intellisense is great.
Yeah it's kind of odd they don't have it featured on their sales pitch page. If you right click a tab you can choose "Split right", ~"Split to bottom". If you go to settings &gt; keymap, I think you find them if you search for "Split". May be under an "Editor tabs"/"Editor panes"/"Window" category. They also have "open in opposite pane"~ and some similar features.
Since I just pasted it somewhere else I'll just do it here as well: &gt; Say you have one component firing an action creator, which in turn uses a couple of global selectors to get data and fires an action which in turn affects two subreducers, which in turn affects two components. Now say you want to have a view of all of that at once to make sure nothing mismatched is going on. &gt; In VSCode you'd have to spend time and memory navigating between windows/tabs. In WebStorm you could see all the code at once. 
I don't like it too. It is like webpack. Trying to make it work with typescript is not fun.
Can you explain how webstorm solves this for you? In vscode you can split workspace to see multiple files. Only thing better I could wish for is that I could eject tab to another monitor...
you can build almost anything without major experience IMHO. (just don't start trying to build a new, 'better' Facebook please ;) ) - write down what the thing you want to build should do - research what tools/libraries would be a good fit for your project - start writing it Will it be perfect? (probably) NO. Will it work and will it be possible to constantly improve it? (probably) YES.
You can do that in vscode...
Not at all. You can drag files to arrange wherever you want, horizontally or vertically. There’s keyboard shortcuts to split as well. 
This will expose access via your account to the private repo if the package.json becomes public for any reason (ie when publishing to npm) While I do understand you intention, I can not recommend this beyond using it for an experiment. Stick with SSH and key based authentication which can be configured in a safe manner for all CI and development environments. 
VSCode supports splits just fine. Multiple windows support is lacking at the moment, you can do it but it's not as smooth as it could be.
Dude, tabs, and split windows are super easy with vscode. Download it and give it a go. Or read the documentation
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
&gt;ake a creative work (which includes code), the work is under exclusive copyright by default. Unless you Ohh i will add it now :)
Should be there now 
Literally every editor has this. Not just webstorm. Sublime, atom, emacs, vim, vscode, they all do it.
I respect your opinion but believe me, VSCode will be much better for you. I was using Sublime Text too but I noticed that many developers left it to other editors, it had no real updates(Seriously, little to nothing has ever fucking changed from 2 to 3 version) and its website don't seem to care about it either, they release a new version every 7 months and they barely update it with anything noticable and useful (like VSC does) with outdated buggy extensions with little to nothing built-in features(I mean seriously, auto-completion nor linting exist, heck its syntax hightlighting was very weak too) but I kept using it thinking that it is the best editor...until I read about material theme's creator note which he said that Sublime Text is obsolete and extensions shouldn't be used to build the editor but to expand it and he was very right. If Sublime Text has nothing built-in and on top of that it's not free nor well-supported and you have to install like 11 or 12 extension to make it at least a basic editor, then why the heck I wouldn't just run a notepad ++ and then extend it with 10 extensions? Notepad is free and has better syntax hightlighting so why I wouldn't just use it instead of Sublime Text? That moment I just realised that extensions should be used to extend the editor's features and not build it. Once I moved to VSCode, I never looked back, it's really amazing and deserves the best editor.
How do you do that?
When you have opened up a file, right-click on the tab and there are options for `Split [Up|Down|Left|Right]`. Right-clicking on files themselves allows to `open to side` but not up and down.
boi https://gfycat.com/LoathsomeCriminalIguana
&gt; boi https://gfycat.com/LoathsomeCriminalIguana (my stupid mithril.js playground) 
&gt; boi https://gfycat.com/LoathsomeCriminalIguana (my stupid mithril.js playground) 
&gt; boi https://gfycat.com/LoathsomeCriminalIguana (my stupid mithril.js playground) 
&gt; boi https://gfycat.com/LoathsomeCriminalIguana (my stupid mithril.js playground) 
&gt; boi https://gfycat.com/LoathsomeCriminalIguana (my stupid mithril.js playground) 
&gt; boi https://gfycat.com/LoathsomeCriminalIguana (my stupid mithril.js playground) drag and drop so hard
&gt; boi https://gfycat.com/LoathsomeCriminalIguana (my stupid mithril.js playground) 
!!!
Open 3 or more tabs and drag/click? What is happening differently for you? 
Those breadcrumbs look cool. Hopefully I'll use them beyond today
I'm beginning to think you've never used VSCode
Did Alex hultman really drop the just parts of his library? I'm gonna warn you right now that I'd stay as far away from that man as possible. He's irrational, vindictive, and holds grudges. And somehow I feel like he isn't going to like someone adding functionality back to his library that he removed. He's changed aspects of uws in the past to spite people (he changed the API to break a test that showed how unsafe it was at the time with unchecked memory access), and I'm willing to be he might do it again. 
It is actually a bot 
I have. Didn't have the ability to split until updating today.
It’s been in there for a while.
thanks
I don't know how to make the columns expand on focus/click.
Of you have three tabs open side by side, you just click and drag the divider that separates two tabs. To expand you'll need to first drag and shrink the width of the tab.
Nope sorry. Might be worth trying to contact the code team on Twitter or git.
Single axis splitting has been asking for years. 2 way grid splitting came out a couple months ago.
Wow have not noticed :)
Could you share a source for all this? I tried searching online and wasn't able to find any information on it.
That was the grid layout, having two windows has been around for ages
Just make sure you are following the license to a T. Clearly state that the code that he wrote is under the zlib license, state that he owns the copyright, state any changes you made to his code in plain english, make sure you include the zlib license in your codebase somewhere and explain what it applies to so you can comply with that license. It's a great lib, and i'm sure a lot of people are gonna appreciate it, I just don't want to see him target you like he's done to me before.
GitHub uses very little JS, if I understand correctly. Much of the site works with JS disabled. What they do have could very well be done in vanilla JS.
&gt; GitHub uses very little JS That seems to be a common misconception. Just because Github is not a SPA people think it uses little js. Just have a look at the source code, there is a lot of Javascript there. Also look at the components. On a repo page try to type `t` and you will see an autocomplete file search. The branch dropdown menu is another example. The dropdown menu component itself is not trivial. They have a code editor... There is a lot that you do not see.
I've also personally interacted with him in comments on a github issue or two at the beginning of last year. The guy is a world class asshole. Yes, he may be smart, but that doesn't matter if he's a piece of shit to everyone. *literally everyone*
Yeah. The best Atom feature was when you have clear the cache because it hangs when you start it up. Lovely. Anyway, the integrated debugger, git tools, and pre-require/pre-parse/syntax checking for valid JS are just top notch. I'd be surprised if anyone can catch up now. As a former C++ Dev, where the classic desktop Visual Studio application was tops, it seems VS Code is getting closer to that level of maturity every month. 
&gt; Just because Github is not a SPA people think it uses little js. While Github as a whole is not one giant SPA, it is built of smaller SPAs. A repository view, for example, is a SPA and there is no page refresh as you navigate through that repository and its different pages. However I do believe most of the content is rendered server-side and simply placed in the DOM when its pulled down over the wire. This would explain a lightweight client that is supported by, I would assume, some non-spaghetti framework for managing everything nicely on the backend.
I will cite myself from the article as a reply: &gt; Note that this option requires you to commit the token but as long as it’s for a private repository and you created a special system user for this it does not have to be the end of the world. You should never use your own user for it! And I never wrote anything like that.
&gt; However I do believe most of the content is rendered server-side Rendering on the server side does not make a frontend javascript app lighter. Rendering html is only one of job os such app, 'hydrating', 'decorating' or whatever you want to call that which brings dead html into life of interactivity is the main event driven part of the app.
Sure. Could you give us an open source real world app for this to study and learn?
What’s up with that attitude?
I worked with no framework code for a long time creating some relatively complex applications as well (company policy). You don't need a framework if your architecture doesn't demand it. Most of the things GitHub has are what I'd consider "widgets", relatively self-contained without necessarily needing to share much data. Look at the data being requested - it's custom fitted for the individual components and have very little to do with the rest of the application.
This isn't polymer-specific but rather a point about the web component polyfills. specifically shadycss would handle this (polyfill used by not only polymer but anything which uses the web component APIs). I haven't experienced it myself but that sounds like something which shouldn't happen seeing as shadycss scopes styles by class when shadow dom isn't available.. 
&gt; Use the ← (Windows, Linux Left) and → (Windows, Linux Right) What?
I actually like GitHub’s diciplined old school way of doing things: * Not getting caught in upgrade treadmill. They sticked to Rails 2 for the longest time. * I like their pjax library. It basically forces the entire app to works without JS. pjax simply enhances the experience. Sauce: I knew a few folks at GitHub when I used to be in Portland.
That stack overflow mentality
I didn't say he should make the library himself. I said he should think about how he *would*. It's worth taking a second to understand the underlying technology. jQuery is a great example of this. People still use jQuery to select elements on a page. If the took a second to *think* about what jQuery is doing they'd realize they can just use document.getElementById or document.querySelector instead of importing a whole library. And don't act like jQuery, immer, immutablejs, etc. are in the same league (complexity-wise) as something like react. A beginner who can easily grasp the core concepts behind simple libs (like jQuery, lodash and immer). **No need to re-invent the wheel, but you should know what a wheel IS if you're going to use it.**
&gt; How did you manage not getting into growing messy code with vanilla Javascript, in the absent of frameworks that were invented for this purpose, for example React's one way flow. The same way people created applications before React existed. Either a homebrewed event delegation or getter-setter model for data structures. Look into how e.g. Vue does reactivity. It's not a particularly new concept. &gt;Are you saying that Github application business logic is not complex enough to require a framework, or are you saying that Github architects decided to avoid frameworks no matter what? I'm saying a little bit of both. I'm guessing there was an evaluation of whether or not a framework was needed, and upon inspecting their architecture, the majority of players involved voted no. New York Times made those decisions because they could, not because they were absolutely mandated, and they've gotten a lot of good things out of it, but if you're telling me that Apollo + React is absolutely necessary for a newspaper, you're deceiving yourself.
&gt; React's one way flow React doesn't own unidirectional data flow. It's a design principle that you should be able to implement without a framework _before_ relying on a framework to help with optimization and edge cases.
You're not wrong, you're just an asshole.
https://github.com/Maelfyn/Firmament-Wars
Just use good principles of code management. Self-contained, unit testing. You don't need frameworks to write good code, and to be honest, I don't think a framework will stop you from writing bad code. They hire solid developers and probably have a good code review process as well.
You don’t need a framework to avoid spaghetti code. You kinda create your own structure of how to organize modules/components and whatever.
Hi /u/d20arabia, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/TTT334, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
``` Do Not Learn Frameworks. Learn the Architecture. ``` Angular, Vue, React, Ember, etc,... they bring more complexity they they solve in many cases. They all mostly abstract away state and or load components. You can make crappier but functional versions of the same stuff with a Handlebars, jQuery, and restrained usage of a global object. Its just a set of standard patterns. 
Hi /u/EinharFrey, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
In this file `stats` is a global var?? https://github.com/Maelfyn/Firmament-Wars/blob/master/js/actions.js#L37 https://github.com/Maelfyn/Firmament-Wars/blob/master/js/core.js#L7 you are worried about code size? Why the variable is just `g`? I think 1352 lines in one file is too much https://github.com/Maelfyn/Firmament-Wars/blob/master/js/core.js#L1352 You could at least upgrade that to es6 haha Can I just clone, npm install and play it? Your steam looks great. I'm building a RTS in js as well http://bitplanets.com/ sharing code between client and server side. Typescript, react, redux, rxjs. 
I wonder if it still makes sense to talk about "_single_ page applications" if we have multiple of these and all of these make up a big application (GitHub in this case).
closed as too broad by humangingercat, elr0nd_hubbard, m3wm3wm3wm Aug 14 at 16:55
&gt; Do Not Learn Frameworks. Learn the Architecture. Show me real world open source projects following this. I'm not here for words. Words are cheap, until it gets to the real world. Let me give you a tangible example: The creator of Mithril.js works for Uber and leads the development of Fusionjs, the React-based project. Why couldn't he push Uber to choose Mithril.js? He's seems to be a good architect. There is a long way between nice slogans on paper and real world apps in production.
I've learned all the frameworks, picked up the architecture as a result, and have no problem finding jobs. 
Custom components and code splitting and bundling. Pretty much like React (which isn't a framework but a library)
LOL
There are no global variables. Everything gets wrapped in an IIFE in the final product. See as an example: https://github.com/Maelfyn/Firmament-Wars/blob/master/js/firmament-wars.min.js
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Maelfyn/Firmament-Wars/.../**firmament-wars.min.js** (master → cbd1e40)](https://github.com/Maelfyn/Firmament-Wars/blob/cbd1e403e4cab70eacc806e946b66e9282abe43b/js/firmament-wars.min.js) ---- 
You don't need a framework if you know what you're doing
Both npm and yarn will install to different directories. Pick one and stick to it. For global packages, pick whichever is your favorite. I find yarn is faster, which is important to me. **It does not matter what the application says to use.** If they tell you to `npm i -g something`, you are absolutely still able to use yarn. For non-global projects, pick one and stick to it. There is no difference between using yarn and npm outside of the generated lock file. If it is not your project, you should use the one the author uses, because when you commit your changes, your yarn.lock or package-lock.json file may be different. You do not want both a yarn.lock and package-lock.json file in your repository, because you risk them being out of sync. If someone updates a package with yarn, someone else will not get that change if they use npm (and vice versa), because each tool is using its respective lock file and ignoring the other. Yarn and npm are interchangeable. As long as you use the same one each time, there is no difference between them. They have different install directories, which is why they can't be used _together_. Yarn will install a package, npm can't find it. npm will install a package, yarn can't find it. Always use the same one for each project, to make sure that all packages can be found by one tool. Having half your packages installed with yarn will stop `npm start` from working; having half your packages installed with npm will stop `yarn start` from working. Just pick your favorite and always use only it for that project, or always use whatever the first person to instantiate the project used. Always use the same one for global, **and it does not matter what the author says to use**. It does not matter that they say to install with yarn or npm. _It does not matter_ for global installs. Use your favorite, and never use anything else.
No, but each project will either have a `package-lock.json` or `yarn.lock` file which will tell you which of the two tools you should be using. If there is neither, it's free game.
this not specifically a project thing but a programmer thing. If you learn a framework you'll be stuck with it. back in the 1.0 Angular days I saw a lot of people 'learn Angular' and were subsequently unable (without extensive training) to use anything else. Learning Architecture (MVC, MVVM...) and programming concepts (factories, dependency injection, task runners...) is much more useful than "learning framework X" because those make you capable to jump between frameworks and programming languages with minimal training required. and in regards to the original question: you don't need to use a framework if you're comfortable with vanilla JS. If I'm just doing some basic AJAX and simple DOM insertions/manipulation I'll just use vanilla (and maybe jquery). I'll only bring in a framework when I foresee the on-site interactions becoming fairly complex.
This is not a Java subreddit.
How do you do that??
&gt; it just require discipline and good communication/documentation. Exactly. Unfortunately it is a lot easier said than done to achieve that. If your programmers don't want to adhere to an internal style guide or your programmers are sloppy and not very detail oriented it can be extremely difficult. I have the misfortune of working with quite a few of both of those types at my company.
I worked on a project without framework. The only library was jQuery to handle simple UI stuff but the core of the app was in simple JS. I can state few things from what I have learned and have worked: - you need good developers that have _vision_ in order to create an app without framework - spaghetti code trap is sneaky but the leaders who what their doing, they make everything reusable - libraries/framework solve common problems, in fact who worked before me on that app, ended up creating terrible UI stuff. We ended up using react to mitigate the event handlers fatigue but business logic is still there and loose from the UI library - the same principle works for the other way around. Make your business logic/company framework loose from the library/framework. This requires a good developer that have _vision_ 
GitHub pages seem to consist of components that are fairly self contained (aren't really talking to each other) but there's quite a bit of dynamic content... It's borderline but I doubt they'd be gaining a lot from using something like React or Vue. You'd probably be able to quite comfortably get by with vanilla JS. When there are "components" that interact with separate parts of the page, then using a decent framework is awesome for managing complexity and keeping things modular is the prefered way to go. I'd never attempt something like Facebook or Twitter without a framework. also if there are dynamic graphs and/or UI elements I prefer a framework There is no rule on what is "complex enough" it depends on the person and his/her experience with JS. P.S. when learning frameworks you should effectively be learning architecture by proxy. Just when learning try to spend a little time thinking about the environment you're programming in and what patterns you're using. I'd never mock anyone for using a framework, just encourage them to expand outside the framework too (broadening the horizon, so to speak)
Why do you think you need a framework to avoid spaghetti code?
Is that a serious assertion? You sound young naive and religious. Your mind is shut to learning anything. Any website that is not an SPA, and what ever website/company that created framework. Frameworks are not silver bullets. Yes learning lots of frameworks will help your prospects for finding a job. Yes learning a framework will net you a higher income, but I promise you down the road you are gonna realize what Im saying is true and its gonna hit you like a ton of bricks. https://cdn-images-1.medium.com/max/1600/1*46QgY1otVaAT6S87hguZNg.png of 23.6k developers polled, 40% share my opinion/experience. My first experience with mithriljs was a project that was 4 months behind. I ripped it out and with a partner we rewrote the app over a weekend using a bit of jquery hitting a C# server attached to a mongodb, so I wouldnt call it the greatest But back to the author. Why didnt he go with another framework? He WROTE his own, and on top of that ABANDONED it for another in a different situation, because the USE called for it. Business case and usage dictates everything we do as professionals. Our job is to get a product out not muse over theatricals. Sometimes a framework is a quick and solid fix, sometimes its like trying to use a wood nail where you need a rivet. - Notice YT said screw it and wrote there own : https://github.com/youtube/spfjs - Netflix dropped React in the UI : https://twitter.com/NetflixUIE/status/923374215041912833 My professional advice is to study how each framework works, and learn vanillajs ways of implementing what they do that you feel you couldnt in a job interview. Like writing a router http://krasimirtsonev.com/blog/article/A-modern-JavaScript-router-in-100-lines-history-api-pushState-hash-url
 \`mapDispatchToProps\` doesn't need to be function. It can be an object: [https://gist.github.com/heygrady/c6c17fc7cbdd978f93a746056f618552#three-versions-of-mapdispatchtoprops](https://gist.github.com/heygrady/c6c17fc7cbdd978f93a746056f618552#three-versions-of-mapdispatchtoprops) 
Aye, more often than is convenient frameworks can \*contribute\* to spaghetti code when the framework you're using needs to be shoehorned to do something off-label.
&gt; GitHub pages seem to consist of components that are fairly self contained (aren't really talking to each other) but there's quite a bit of dynamic content... It's borderline but I doubt they'd be gaining a lot from using something like React or Vue. How do you find Reddit different to Github in this sense? Reddit also does not have any, if not many, components talking to each other. Why did they decide to jump from jQuery to React?
Its like these kids think the internet didnt exist before Angular/Ember was invented. LOL
Yep, and I specifically recommend using that "object shorthand". To me, there's really no good reason to write an actual `mapDispatch` function (to the point that I'd consider reworking our "Usage with React" docs to emphasize that approach, and only show writing `mapDispatch` functions as a fallback).
Why are you pushing back on the idea of using JS without a framework? Like how do you think JS frameworks are written? With vanilla JS. Not every project/component/page/whatever needs a framework.
Been splitting tabs since january when i first used vscode. Just admit you're wrong.
eternal vigilance
My guess is op is thinking that Frameworks are opiniated and have documented structures and best practices.
I'm at a loss for words. You don't need a framework to write good, well structured JavaScript. 
For me, reading Addy Osmani's JS Design Patterns gave me insight how base patterns can be scaled for larger apps, and how they were implemented in some old frameworks pre-Angular/React/Vue. But as someone else said, it boils down to home-spun events/pub-sub type systems and patterns to encapsulate and decouple code. https://addyosmani.com/resources/essentialjsdesignpatterns/book/ (there's an older version in pdf out the which is what I read).
Interesting concept. Not sure how well the dirty comments mesh with landscape pics, but different strokes. From a web developer standpoint, it sort of drives me crazy that the text updates before the image changes. 
No! It works with MAGIC! 
What is a computer?
The best way I have found to get folks to adhere to style guides is build-breaking linting. If the linter finds errors, the build breaks, and the code can’t merge. 
* Make a folder * npm init --yes * npm i webpack @webpack-cli/init --save-dev * node\_modules/.bin/webpack-cli init webpack-scaffold-pwa Saved you a click and saved you from bad grammar.
You're right, and this is interesting. In the chess example, if I move the bishop to capture some other piece— how about a knight, knights are cool— then the latest state of the game differs from the previous state of the game by both of those pieces. The changes modeled by the persistent data structure are always the minimum changes necessary. But certain games (or, more generally, certain systems) benefit from this less than others. This is sort of like how some optimizations for sparse arrays won't help with dense arrays. A hypothetical chess variant that randomly rearranges all pieces on the board between moves will have very little overlap from one state to the next! And all board games fall somewhere along the spectrum. It's also worth noting that if you animate the state-to-state changes, then breaking down a move into steps and modeling those steps as intermediate states may help animate the view, and would benefit from memory overlap more than the combined state-to-state change, because by definition the operations on the state would be performed separately and in sequence. Finally, I should clarify that the memory usage of persistent data structures is mostly relevant to us because it makes it easier to write pure functions and use immutable data structures. In specific circumstances its memory use will approximate a deep copy, but often we do see gains.
If you need to use the second parameter, ownProps.
What do you mean here? 
And I would still recommend against using that, because you'll be re-creating your function references whenever those change. Instead, I'd suggest writing class methods that reference both the action creator and the value from props: handleSomeClick = () =&gt; { this.props.doTheThing(this.props.someValue); } If you _really_ want to re-create your function references every time the props change you can, but I don't see a benefit to doing so.
Does anybody know how to get HTML code folding to fold the end tag like it does with JSX now?
Thanks for that, Mr. Bot!
[https://mailtrap.io/](https://mailtrap.io/)
I completely agree, though I’d say if the pattern is already widespread in a codebase it’s probably fine to focus efforts elsewhere until it’s been noted as a bottleneck.
It was a legitimate question, if you were wondering.
In this case my answer was legitimate, too. :) Did you try googling? 
I feel like this highlights that: **spaghetti code is an artifact of developers, not Javascript.** Frameworks are abstractions or decisions. You can still make those decisions yourself with an "internal framework". Yes, the code looks different -- maybe a bit more verbose, but the decision is still the same. Personally, I'm relieved to hear of examples where people chose the simpler battle-tested path without diving into a new framework half-way through. Being in a half-baked state is actually worse, so why not just avoid the hype. It's impressive and it speaks to the mindfulness of the devs at Github. If they can pull it off gracefully then kudos to them. 
&gt; Show me real world open source projects following this. I'm not here for words. Vue doesn't use a framework. hmm
I absolutely love this. I wish I could send these to my wife as greeting cards.
I'm certain Github uses a framework, just its an in-house framework. A framework is just a collection of solutions strung together in a specific pattern. There is nothing special about them.
Hi /u/goudarziha, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Why would they reinvent what's already out there? I mean, Javascript framework are born with such high fucking rate that it's almost impossible that your internal framework is not already written and published by someone else.
Thanks! I am actually selling them as postcards on [store.nsflcards.com](https://store.nsflcards.com). Should have been a link on the site to it :)
NSFL? Yikes! [Eye Bleach!](https://i.imgur.com/3qFzMDk.jpg) I am a robit. 
I'm sure your team thinks you're a pleasure to work with.
It's not like NYT HAD to use a react or any other framework. They just decided to. Just like GitHub decided to go framework-less. The audience being tech savvy or not really has nothing to do with it, it just needs to work well.
There is a lot of stuff the frameworks do that you really don't need. You can data bind with getters/setters. You can get away without a framework pretty easy depending on what trade offs you are willing to make
I think there in lies the schism. Learning what will get you a job is different than learning what will make you a good programmer.
&gt; Ultimately I feel people create their own custom framework to serve their needs if they don't use a pre-existing framework. We used to call this “software architecture”, and it was how *everything* big enough to need serious design work was built if you wanted to preserve your sanity. After a while, people started noticing that many projects were using similar architectural styles. Being software developers, naturally we started trying to extract, generalise and reuse those common elements. Thus standardised frameworks were born. Today, like most tools in software development, standardised frameworks serve a useful purpose in the right situation but can also be harmful if you choose the wrong tool for the job. They are still only means to an end, and they are never a substitute for understanding general programming principles, nor an excuse to avoid making decisions that will give good results for your specific needs. &gt; A lot of the ideas presented by React aren't novel This is true, but I have a lot of respect for the React developers all the same. The big ideas behind it might predate React itself by decades, but it was probably the first time anyone had transported them to be used in building UIs on the web *and* then successfully elevated the result to become a widely used library. It’s the results that matter in software development, and the React developers produced and generously shared a good tool.
Negative. The stats object just holds a lot of stats-related information inside of it. It also has a bunch of methods that I use for end-game stat view related operations. It's an RTS, so it has a stat screen at the end of the game. I put all of the game data into an array called stats.data. So player two has all of his data inside of stats.data[2]. It's definitely not the type of thing you really need a library for. You just have an array of objects that keep track of every player's stats.
I asked because you said that you dont have global vars (but only for libraries). So where this variable comes from?
Go back to Stack Overflow, douche bag.
Nah, they disabled OpenID and I won't connect my Google account. Don't be lazy, dude. This is a programming sub. 
I learned how to be a good programmer in college. No frameworks, no JS, and its super easy to pickup new concepts, patterns, and frameworks. This is why I have a strong opinion on coding bootcamps. 
You could think of it as a global variable in that sense. I can reference stats from any method. Technically it is not global because everything is wrapped in an IIFE.
We do that, and we've had people attempt to commit code that disables the build linting because they think it is annoying.
Yes, you could actually try the human version and [Claim](https://indorse.io/claims/new) your JS skills! I'm sure you'd find the protocol we're using quite interesting. If interested, let me know, I could share more information about the Anonymous Indorsement Protocol behind this skills validation process!
Sorry, you're right. I mis understood due to bad reading. I do agree with the statement you're making.
Pretty sure college didn't teach you to be a good programmer. 
I'm very intrigued, but it doesn't seem to be working for me. I've installed it in Chrome, loaded up my app, and I see the "De-Bux" tab in the DevTools, but there's no meaningful content inside. Any other steps that are needed to hook this up properly?
You will need React Devtools installed as well. Once you have both, you can go to a React made page and it should render.
I do, and it isn't. At least in that app. I tried opening up our other app, which is a Backbone app with a bunch of React roots mixed in. This time De-Bux did briefly show a tree diagram and some "Detailed Info" for one of the many component trees, but it seems to have locked up and the process is pegging my CPU. I'm also seeing the process freeze with a pegged CPU in the first app's DevTools.
That is global from the point of view of the architecture of the project.
Maybe so, but you would not be able to access stats from the console. Not that this matters. From a performance standpoint, it is not in global scope, which makes a big difference.
Not really that impressive. GitHub does not have a lot of interactivity and does \*\*a lot\*\* of SSR. They have no complex interactive pages either - except perhaps the projects (kanban) page, which in my experience has been very buggy. Nothing to discuss here really. Would be interesting to learn their front-end JavasScript SLOC.
Says who?
[removed]
Because sometimes its faster. If you say, want to whip out a POC to prove that your idea is valid, you may not want to be boggled down with this or that framework and their opinions and inherent learning curve. But your POC ends up being pretty well written and things are now moving fast. Do you refactor or do you continue adding and improving features? Chances are, your customers care more about tehe features than the refactoring so you spend your time and effort adding features and not refactoring, and you will probably continue doing this until it's too late to even consider refactoring everything just to adopt a framework. Why fix what's not broken? 
Being the only developer in a company makes you insanely valuable to them. I hope they compensate you very well for this :P Your passion and interest puts you ahead of most of the developers I work with. I forget stuff super fast if I just read it too. I have to actually put it into practice/write the code so the idea makes sense and sticks. I'd interview for jobs at a few places. It's a way to bench mark yourself against the rest of the market. Find out if there are any skills you need to practice and maybe even find a new even better job or take an offer and use it to leverage a nice raise. Good luck.
Why is it that companies are willing to pay more for people who actually work at their company rather than paying people in other countries to do it for a lot cheaper? Engineers seems to have a stereotype of not having good social skills. Is it not that much of a problem for most people though? 
That's really cheap. I guess it would be $20 for both courses? 
Well, yeah, you can. Assuming you make $80,000 a year after somehow getting accepted as a plain Javascript developer, to stretch the savings across 4 years is dumb. If you don't want to work constantly until you're 65, you should try your hand at stocks or some type of entrepreneurship, living like that isn't the way to go. Yeah, it'd be pretty problematic for companies that are looking for more than 1 year of experience. You could try freelancing, it's much more relaxed, but you don't have benefits or anything similar.
Yup, though admittedly no "0 to full stack" course goes into CSS enough, you might want to consider afterwards taking https://www.udemy.com/advanced-css-and-sass/ or you could just use whatever resources he mentioned for CSS from the article. Andrei's other course is advanced back end stuff, there's probably other things you would want to learn first before starting the other course and there's no need to buy them both at the same time. The most important thing for learning web development is to start making your own pages as soon as you have an idea how, there's no end to learning programming or web development and things change every few months, the biggest thing that employers look for is someone who can quickly adapt to new technologies. 
&gt; But if you only have work history of 1 year, could that be problematic because perhaps companies are looking for someone who can work for more than 1 year? Absolutely.
It looks like your problem is not a technical one.
No! Let's find the latest coolshit.js library of the week from the medium.com blog of an edgy freshly graduated dev and make the page take another second and half a megabyte to load!
Is kind of the core principles of best practices in programming. https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil
WTF is wrong with this generation?
only new developers need a framework. experienced developers don't need a framework to make quality codes. 
Thank you, I am just returning to node after dumping it a couple years ago. There are some helpful pieces in there. Something I haven't entirely grokked yet with promises is what the best way would be to use data in more than once place throughout the pipeline. Say I have a file, want to do some operations on it, then delete it. How would I go about doing this? I found myself writing this abomination earlier today: .then(({ filepath, downloadPath }) =&gt; { return fileExists(filepath) .then(exists =&gt; { if (exists) { return ctx.replyWithDocument({ source: filepath }) } }) .then(() =&gt; deleteFile(filepath)) .then(() =&gt; deleteFile(downloadPath)) }) To flatten this promisified pyramid of doom, is my best option to just pass the glorified state object through the whole pipeline? That doesn't seem too great to me, either, but might just be the way to go. I'd appreciate some input on this!
&gt; it was probably the first time anyone had transported them to be used in building UIs on the web and then successfully elevated the result to become a widely used library. ? Not endorsing any of these, but - jquery? backbone? 
Well thanks for the hint. The intention of the post is about PWA and the tool named `webpack-scaffold-pwa` 
Hi /u/Pathfinder313, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Is this an inexperienced team? It seems strange to me that people would be so against linting. 
Why not use vanilla js for this? jQuery is particularly evil *because* it supports this notion that we should constantly be using selector functions that return some decorated object. Recreating that wheel instead of using native ES5/6 features for exactly these things is bound to perform poorly. 
After almost exclusively using Sublime, I decided to install VS Code today. I still love sublime and many things about it but VS Code is really, really cool.
[https://i.imgur.com/In5BFFO.png](https://i.imgur.com/In5BFFO.png)
Ah I didn't know that was the place to ask, thanks for letting me know \~Kind regards
I found someone who shares my idea: So, this guy's name is Matt Tran \[This guy = a YouTuber called Engineered Truth\] and he apparently quit being a MechE for a gas distribution company and started a YouTube channel, which now makes \~$4,000 USD per month (on average) from ads, YT Red, etc. (based on screenshots of his YT analytics in one of his videos). He claims to work &lt; 20 hours per week to maintain his channel, and spends a lot of time doing other things such as attending coding bootcamps and traveling for fun. His worldview is essentially that working a regular 40-hour work week is sacrificing too much of your life, and there are ways in today's economies to make a comfortable salary (in his case, via YouTube) while spending more time on things you enjoy. The specific example he gives is: if you're an engineer working 40 hours/week making $80,000, you're only left with \~5 hours per day after work to yourself. Your only career option is to work in higher positions for more pay... and then what? For Matt, this didn't make much sense and he saw this path as sacrificing too much of his time. This was his rationale for leaving the engineering industry to start his new career as a YT content creator, or as he calls it, "being a digital nomad". I did not watch many of his other videos but from what I can tell, he is not necessarily shitting on engineering specifically, but rather he is shitting on the traditional "4-year college -&gt; degree -&gt; normal job -&gt; retirement" path because he was disillusioned by his own experience. I can definitely see the appeal of this and how it can resonate with a lot of people who might feel similar about their own situation. He has most likely worked consistently to make his channel successful, because no content creator builds a 230,000-sub audience overnight. [https://www.reddit.com/r/engineering/comments/6nkmg0/what\_are\_your\_opinions\_of\_engineered\_truth/](https://www.reddit.com/r/engineering/comments/6nkmg0/what_are_your_opinions_of_engineered_truth/)
Good question, OP. Ignore the condescending comments. No offense to anyone who's at GitHub intended, but I don't think we can say with certainty that GitHub doesn't ship "spaghetti code" on the front end. There's no shame in "spaghetti code," by the way.
&gt; Ultimately I feel people create their own custom framework to serve their needs I've worked in a large codebase that used jquery + a lot of glue to buidl UIs. We standardized how we dealt with data flows, API requests, asynchronous actions, and let the view layer use vanillaJS or jQuery still. Did it have a name? no. Was it a framework? Maybe. It was an architecture for sure. I would imagine Github has some level of consistent architecture on their frontend. But not necessarily enough to call it a "framework" with many release-able parts.
I suppose my ultimate point is that you can do other things to make an income but these things still require time. To me, it is a whimsical dream to believe that you can spend only 5 months learning a skill and then hardly spend any time working and expect to live a comfortable lifestyle. Plus, while software engineers make good many, youre still not going to be able to live support yourself comfortably for a few years on that alone. There are retirement savings to think about too.
&gt; GPU accelerated Come on...
This thread reminds me of the same conversations we were having in the early Java days in the late 90s. I’m sure the mainframe gray-beards back then thought the same about us. There’s something comforting that nothing really new ever happens in programming other than scale. Most of those being really earnest about their opinions here are going to have a good laugh in 10-20 years. 
GitHub went online in Februar 2008, back then most people just used Prototype, YUI or - like GitHub - jQuery (which was only 2 years old back then). For example: The very first version of backbone and angular came out late 2010. Their stuff probably worked for them, so they didn't reimplemented their stuff again. Even newer projects like Visual Studio Code and Atom don't use (as far as I know) any UI Framework (which isn't inhouse) , but Vivaldi and Brave use react for their UI.
&gt; Well, yeah, you can. I doubt it. You'd have to live a very frugal lifestyle to sustain off of 60k~ after taxes
lol I 100% agree.
Depends on the area. Currently, my family of 3 is living off of 50k a year in Tennessee. He'd have to stretch it across multiple years, which is worse, but it's possible.
Yeah but there's a huge difference between 50k a year and 15k a year, regardless of how big your family is. You'd basically be struggling to even pay rent on 15k a year. 
The article is bullshit by a guy who is trying to cash in by selling people BS about how easy it is to get a job as a developer. A new account last week was spamming the same article. 
Holy crap, thank you for the gold! You are awesome!
This is like the 10th "Node Best Practices" article I've seen in the past few months that are basically full of things that have nothing really to do with node, often even nothing to do with javascript. Like: - Operational errors? Really should be "code defensively". - Express in the "web layer"? Probably best to discuss as a middleware layer, service contracts, and wow probably a lot of other things that this misses. - "Handle errors centrally, not within an Express middleware" ya, ok, so this kinda sounds good but it's meaningless. If the error is in the middleware then the middleware should handle it. Is it an "operational error" (ugh) like something the system should handle? Authentication error? Did your network go down? Is the data not valid? This isn't a best practice, and obscures the real need for best practices in specific kinds of errors and failures. - "Document API errors" mmm, ok, right on... "... using Swagger". Really, best practices shouldn't promote a specific product. You can document your API's contract and failure modes on a napkin if that's meaningful enough to your consumers. This was a better way to address this kind of statement: "Use a mature logger to increase error visibility". - "Shut the process gracefully when a stranger comes to town" Sure, but why isn't this a part of the many error handling sections? - "Discover errors and downtime using APM products" ... ok, so at some point this is just repeating itself - handle errors, handle errors, handle errors. Just have one page on error handling practices, and go deep into it - good handling, monitoring, logging. I mean, really how many of these points are about error handling... the next point is "Catch unhandled promise rejections"... c'mon. Put that on your error handling page too. - "Fail fast" ... sure, yep. "validate arguments" ...sure, yep, or you know, handle errors... " using a dedicated library" ... Ok, how many topics are we cramming into this one? - "Detect code issues with a linter" ... merge all "use a linter" into one, please, because at this point the article is just trying to increase the number of best practices in the headline. - "Carefully choose your CI platform" Or, y'know, choose the platform that your DevOps team knows how to support, because as a developer reading this you probably won't have all that much control over the CI platform. - "Constantly inspect for vulnerable dependencies" ... maybe. A best practice would be to strictly set your dependency versions and only upgrade when you've validated the new version. - " Running all the tests, including tests that perform dozens of DB queries, any time a developer makes a small change " ... is a not the right testing practice. Separate unit tests from integration tests. Integration tests (such as ones that contact a non-mocked database) should be run less frequently - this should also be a part of your CI system. - "Check your test coverage" YES ALWAYS "it helps to identify wrong test patterns"... eh, maybe? It helps in a lot of ways, but I can write you a terrible test pattern that'll generate 100% test coverage... then what? - "Inspect for outdated packages" ... racking up numbers again. Maybe start a 'dependency best practices" entry and leave it at "Assess all dependencies for security concerns, and bring up to date as necessary". - "Use docker-compose for e2e testing" ... or not. - "Refactor regularly" ...once you have code coverage, and once it's necessary to satisfy a new test. Don't refactor for the sake of refactoring, that's a great way to introduce new bugs. - "Monitoring!" ...is already mentioned! - "Increase transparency using smart logging" ... jfc, how many of these are duplicates just to reach 75? ... I can't believe I even made it this far. 
I wouldn’t call jquery or backbone “component based architecture”
Again, not endorsing either framework (I do like BB, hate jQ) but - just because those didn't have jsx doesn't mean they didn't have aspects of component based architecture. jQuery's plugins (and *ugh* their jQuery UI extensions) weren't far off, nor were Backbone's views. 
Backbone views were definitely closer, but neither of them provide any real encapsulation, which is an important part of component architecture IMO. Backbone + AMD modules got pretty close. 
So we are aware of the lag on larger applications. It's the next thing we are looking to fix. If you can test it on smaller applications it should run smoother. It's very much in a MVP state. Let us know about any other issues you come across. 
Communication and productivity are always much better face-to-face. Communication with management to comprehend business needs is important. And after having worked on a project for a while, promotion to team leads and management will need to occur. Intra-team communication with Agile methods like standups will make sure that code is being developed in a timely manner and with no problems arising between two team members. This isn't possible if the team members never even see each other. This becomes an even greater problem as work has to happen between departments, such as with designers or QA teams. And while the work may be ten times as cheap, it is not equal in quality. This may be due to different education standards, the laziness that accompanies remote work, or the communication difficulties above.
Sure, javascript in 2010 wasn't great for encapsulation, not until revealing module became more widely used (arguably jQuery encouraged that a lot with their practices around plugins but eh). But encapsulation (while lovely) is not a required feature of component architecture's value - which is separation of responsibilities and reusability. React isn't great for it's encapsulation, it's great because I can create highly reusable views. That is nothing new (which is really my point above)... but certainly React does it really well.
My app isn't _that_ big :( I'll try to pull open a sample app just to see what it looks like.
&gt; Most of GitHub is server-rendered (I know, crazy, right? Who would do that???!!?!??!!!) I hope that's sarcasm. I would render content on the server on any day. I think javascript should only be used to hydrate the content. You know what's fucked up? That we invert the pyramid of web to render the content on the client side, and _then_ we invert the inverted pyramid to SSR fucking javascript back on the server. Who would do that????????
Anyone who doesn’t use an official framework inevitably creates their own within the app itself
Or even why do you think a framework avoids spaghetti code. React is not at all forcing.
You are going to be donwvoted to Oblivion because js coders have no clue about architecting software. Not using a framework with a good team means you will have a custom framework that is perfect for the project, instead of almost perfect like a generic framework. ...then if new devs doesn't read the docs for either, custom or generic, you get spaghetti code.
Don't lump us all in with this one. Me and the vast majority of my peers work our butts off everyday learning as much as we can along the way.
And so I did (get down voted to oblivion). 
To get a Unix environment on windows. I prefer Unix to windows
You'll need more than 5 months of study, your first job wont pay enough, and you shouldn't be out of the workforce for more than a year. Mainly though this would only work if you're actually passionate about software development, in which case you'd probably want to continue programming in some capacity anyway.
I'm not sure if it's your formatting on here or what, but you might need some semi-colons there?
👆
https://stripe.com/jobs
Yes, I am. 
The only thing we aren’t really agreeing on is that encapsulation isn’t really important for creating highly reusable views. I actually do think that one of the best parts of component based architecture is encapsulation. It’s not one of the best things about React, it’s one of the best patterns of the general architecture and applies to all of the modern component libraries, none of which recommend that you directly manipulate the DOM, arguably the worst side effect of all.
For nav 
Yeah I was hoping that there was an equivalent of `engines` in package.json to specify yarn vs npm. &gt; { "engines" : { "node" : "&gt;=0.12" } } 
How do you mean?
I tried it earlier today before updating. It could not be done. Just admit it wasn't always there.
Does pjax count?
I currently use WebStorm for my projects, but from what I've been seeing this new VSCode is very good. There is still missing an extension that is as good as Webstorm solving `git conflicts`.
I've probably loaded more bytes of holier-than-thou and other shitty reddit comments like this one today than i have of the latest coolshit.js libraries today. 
It points to a sign up page, that’s all.
No, I didn't. I thought it would've been nice to get a response here which could've sparked conversation, but I guess I should've just Googled it.
The fact that GitHub does minimal client-side code is obvious when you use it. The tabs on pull request pages get out of sync easily and often require full page reloads.
&gt; require full page reloads. That's how web and its browsers were supposed to work. We broke it by pushing client side too far. Servers were supposed to serve the content and client were supposed to be served with the content. We fucked it up by making the clients doing partial server jobs. The idea was to make things faster because of network. Now we shifted the load from the network to the cpu. Just imagine a world were there is only server side rendering. Not ideal, but a lot simpler.
I write websites for myself using Apache Wicket, that is a Java component based architecture that predates react.
You are not returning anything from your function. Good luck on that site. It’s a great resource for learning. Make sure you look at other peoples’ answers after you submit your own, you will pick up many tricks and patterns that way. 
Hi /u/anthonygeranioyt, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
You need to return a value. You could achieve this with this function : function multiply(a, b) { return a * b } Or with the ES6 syntax : const multiply = (a, b) =&gt; a * b ; Example : const result = multiply(3, 4); // result = 12
Not if you follow the rube goldberg pattern correctly. 
&gt; A role of framework is to enforce a particular style of organization and practices within a code base. I think this undersells what a framework like react does for you. It's not just about organizing your code, it's a higher level of abstraction. It does a lot of low level things and then hides it behind an api so that you don't have to think about it. In react the dom is driven by your state data. If you update your data it will update the dom automatically. Without something like react you're forced to think explicitly about dom manipulation.
I don't consider react a full blown framework. It's more of a library. And [the website](https://reactjs.org) seems to agree with my stance. Its tag like is "a JavaScript library for building user interfaces". I consider tools like [Grommet](http://grommet.io/) to be framework (it use react). Or something more traditional like ember.js is another good example of framework.
Noerde and drakt0r are correct, the function needs a 'return' statement so something comes back from the function, unless you're using ES6 syntax. Without the 'return', the function will return 'undefined'. The console.log simply prints to the terminal. 
While this may be true, performance-wise it wasn't considered a good option without the virtual dom, which was one the biggest innovations introduced by react. Before then it was always possible to batch all state updates and re-render, but you would be re-rendering the whole page because you would be writing to the root of the dom on each change. With virtual dom, it will scan a copy of the dom to identify which nodes have changed and then only apply the changes there. It could be argued that you can just use a virtual dom library instead of a framework. But this sort of walks the line of what a framework is, because you could use something like mithril.js which is considered a framework but really not much more than a virtual dom itself.
It’s debatable whether React is a framework. I’d say it’s a library. It serves one purpose and you have to choose how you want to implement state management, server side rendering, communicating with your API, etc.
lol
https://www.reddit.com/r/javascript/comments/31ah12/do_not_learn_frameworks_learn_the_architecture/
I wasn’t saying that React predates component architecture, just that I don’t consider jquery or even backbone to have solved all the problems 
I would argue that the qualitative difference introduced by React was allowing declarative rendering of a UI from its underlying data. Then you only needed to describe the absolute state of the UI for any given data, instead of (as we previously did) considering all possible transitions between data states and having to render the new UI relative to whatever was already there. This fundamentally reduced the complexity of programming UIs, as long as you weren’t interested in rendering that depended on the transition specifically. (Of course, if you *were* interested in that, this sort of architecture would be in your way, which is why working with animations or non-standard interactions can be quite painful when using rendering libraries with this sort of architecture.) The other major development in React, as far as web rendering libraries went, was popularising the idea of rendering the whole UI to a virtual DOM and then comparing that with the real DOM and only applying the differences. In browsers, DOM updates were typically the bottleneck in UI code, and so this optimisation was necessary to make the declarative rendering fast enough to use in practice. Neither of these ideas is particularly original in itself, but I know of no widely distributed library that implemented them in the context of browser-based UIs before React. jQuery was much more direct in its DOM manipulations, while earlier batteries-included frameworks typically offered some form of template rendering and some form of simple two-way data binding but in a very limited form compared to the flexibility of React’s approach.
I do enjoy it with I find a nice framework that does exactly what I need, but building your own feels so much better
why would someone using github not have js enabled though?
It's better than a college degree~ In all seriousness, I learned so much from this site. Find some friends, create a clan, compete to stay ahead of each other in points. 
Modular organization. Look up the "ducks" pattern, then realize we've had something of that nature in virtually every other realm of programming for at least 20 years (and wonder why it took until 2016 for us webdevs to "discover" it).
Agreed on all counts now. You can still break these recommended patterns but at least these best practices coupled with the frameworks get us highly resizable components on in a way that really makes sense 
[removed]
[removed]
How do you like CodeWars compared to other challenge code websites like CoderByte? 
Thank you. As I said above to noerde, I'm confused about returns. So with ES6 a return is not necessary?
It doesn't but if you want to pass a value back when you run a function you must return that value
Use on windows at home, and on mac at work. Works great on both.
I think the only other site I used was Hacker Rank to which I may have made the mistake of signing up for something like that too early. I got a ton of spam mail from them and it was a little bit of a turn-off. Don't really have much other context and wouldn't be able to offer much of a comparison 
I mean fuck I *like* react, but people hailing it as if it's the second coming... c'mon.
When it’s a one line arrow function, it automatically returns 
&gt; React was hardly the first web technology to do that; the concept originated in technologies like ASP &amp; PHP in the late 90s. ASP and PHP are running on the back end, so clearly they are solving a different problem to React running on the front end. If we’re talking about declarative rendering of UIs in general, obviously that far predates any of these web-related technologies. Several of us have mentioned in other comments that the big ideas behind React existed much earlier. &gt; DOM comparisons to drive view updates isn't as good as observing changes to your model graph and rerendering based on those changes. Again, those are two different problems. The DOM comparisons are part of (one possible mechanism for) rerendering the UI after something changes in the underlying data.
Don't worry, it _was_ sarcasm. Yes, the web development community has, overall, turned bat-shit insane.
&gt; After a while, people started noticing that many projects were using similar architectural styles. Being software developers, naturally we started trying to extract, generalise and reuse those common elements. Thus standardised frameworks were born. That's a very rosy-glassed view of how things worked out. In reality there were clever people who designed some framework for their internal use, and then decided to publish it and talk about it, and soon other people started to use their framework because they thought it would make things easy for them. In the JS world, practically every two years there's a new framework craze.
The function by nature returns something, if you don't explicitly write return, it will implicitly return undefined. If you need the response somewhere else in the code - return it. 
You should try using it. I’ve come to prefer react mostly because I prefer typescript and I feel that typescript in .vue files is icky and .tsx files feel much more natural. But seriously, vue is great. It is awesome for small or large projects, it has a really good community. It is light weight and super fast. It has its niche in the js frameworks for sure. Try it, you might like it. 
I wouldn't look at arrow functions yet. You should ignore them until you completely understand the answer to your original post. The best way to understand what is wrong with your original post is through an analogy. Basically your original function is like a pizza shop receiving flour and tomato sauce (a and b), combining them into a pizza (c) but then doing nothing with it. The pizza just stays in the oven and is never delivered back to you. The console.log statement just shows there's a pizza in the shop. It's like a receipt confirming, "yes, we made one pizza" but nothing more The "return" statement is what exposes the data to the outside world, outside the function. Otherwise your function is just a black box doing something selfishly for itself and not sharing it. I think you are confused by what console.log does. This statement is just meant as a debugging tool. Take is a the error lights on the dashboard of your car. It's just info for the developer, doesn't do anything at all useful for the computer.
\&gt; I'm gonna warn you right now that I'd stay as far away from that man as possible. Or he's going to what? Say mean things to me? Who cares what some bitter troll with an attitude problem thinks.
Hi /u/adriansky, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Returning something from a function is a little like responding in a conversation. If someone’s chatting with you and asks “how’d you do on the test yesterday?” You’d want to return a response to them—something like “I thought I did well.” console.log, while it _looks_ like something is returned, really only outputs to the console. It would be like your friend asking you the question and you writing your answer on a piece of paper, then setting it somewhere your friend may not look. Functions are really about input/output. The input is calling the function (like your friend asking), and any parameters you pass in (like specifics of your friend’s question). The output is returning a value (like speaking back with an answer) console.log is basically just a side-effect, which is why it’s handy for debugging.
Not OP, but thank you for the detailed response. The analogy was great 
The arrow function syntax implicitly returns the value on the right hand side, even though it doesn't explicitly say `return`.
Some languages don't do this. It is a common feature of imperative languages ("do this, do that") because in such languages, functions primarily serve as flow control. The very word "return" refers to the "return address" in the call stack, where execution flow resumes. Usually you return a value with this, but not always. Most languages infer an empty "return" if you don't write one, as in this challenge. If you look at functional languages, this isn't always needed because the functions take on a more mathematical purpose. This is well illustrated by Haskell syntax. fact :: Int -&gt; Int fact 0 = 1 fact n = n * fact ( n - 1 ) 
It's what you get when you cook with copy pasta.
Here's an alternative, maybe even easier way to look at things. Try to take a step back and think how the 'multiply' function that you wrote will be used. Imagine you're trying to compute the area of a rectangle and display it. You'd write: // Area of rectangle var length = 10; var width = 5; var area = multiply(10, 5) console.log('area of the rectangle is: ' + area) If you omit the `return` statement like in your first code sample, then nothing tells the computer to 'return' 10*5. Why not return something completely different, like the width itself? Computer cannot read your mind and imagine you'd like the return value to be 'c' Does this make sense?
Thanks!
Which is great for react apps. This advice to just use create-react-app does nothing for anyone trying to understand how webpack works at all - even for react apps, so what's your point?
Don't know about GitHub, but usually "working without framework" means having your own framework included in the source code. Or spaghetti.
Why would we want to help people cheat? This community is largely about sharing knowledge and peer review, looking at what happens in that subreddit I don't think they're the type of people I would spend time helping http://reddit.com/r/edgenuity/comments/8z6yta/plagiarism/ 
There are languages like Julia that returns the last statement by default, but in JS you have to explicitly return a value from a function. 
Maybe I worded my reply wrong. reassigning variables wasn't really ever the problem. Just returning it. I edited my comment
See a function as a command or question. You can ask. GetUserData() in this instance you expect a answer so return user. But you could do UpdateUserData() . In this case a a answer isn't required as you tell the program to do something. But you could use a return for example to Tell you if the update was succes fill or not.
Think about the problem in a mathematical sense. Given two numbers `a` and `b` and the operation *multiplication*, which value for `c` satisfies the equation? In other words: What is the **result** of multiplying `a` with `b`. ``` c = a * b ``` A function in a programming language like JavaScript is like a mathematical operation. You provide it with some sort of input (e.g. values `a` and `b`) and it produces a certain output. Now in programming languages, *producing an output* is often done with a `return` statement. As the other comments explain, `return a * b` would produce a return value for the `multiply` function. In JavaScript, simply writing an expression (e.g. `a * b`) does not produce a return value. Instead, as others also pointed out already, `undefined` will be returned whenever there is no explicit `return` statement. There is a notable exception to this rule in JavaScript. It has been pointed out already as well: ``` const multiply = (a, b) =&gt; a * b; ``` This is a special arrow function that does what functions don’t: It implictly returns its expression. In this case, it returns the result of `a * b`. However, I said special arrow function because in the following, you will need to write `return` again: ``` const multiply = (a, b) =&gt; { return a * b; }; ```
To me a framework is something that defines structure and on a more hand wavy concept is used to define the project. For example you create a React website. You don’t create a momentJS website. Thus moment is a library. Obviously React still does leave a lot of unanswered questions and a ReactRedux app would have a stronger framework. But note Redux requires React. The fact that a library like that requires React implies React is framework material.
Redux doesn't require react though.
I would really recommend learning a bit about architecture and software design. It's not that difficult. You might find some of Nicholas Zakas old talks con the subject interesting ( e.g. this one: https://www.youtube.com/watch?v=vXjVFPosQHw ). Note that while they are indeed old and we now have some more tools / constructs available, this is a talk about **ideas** and **approaches**, so that is all still valid. You may then want to read some more on software design and architecture. There are good books out there, generally not JS related.
Actually if you like you can look into vscode(https://github.com/Microsoft/vscode/blob/master/README.md) source code which is even more complex than GitHub.com. I believe they didn't use any framework but using many design patterns used also I see people using jquery too Note: it's TypeScript not a JavaScript.
The guy called my place of employment and tried to get me fired in 2016, there's a reason I remember his name. He also has a habit of using copyright to try to take down the work of others, and has maliciously made the lives of his users hell by changing his library to explicitly break someone's usage. If you don't care, then why even reply? I'm just putting it out there that this guy caused me a ton of grief in my life a few years ago, and if I can I want to give someone else a heads up. He can say mean things all he wants, but when he threatened my job, changed code in a public project just to spite me and make more work for me, and went out of his way to try and take down my work, it went a bit further.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Microsoft/vscode/.../**README.md** (master → fe747f8)](https://github.com/Microsoft/vscode/blob/fe747f81c0e649c9ed131b5fa2c43c0d6e925cd3/README.md) ---- 
Objects copy by reference instead of by value. You'll need to instantiate a new instance of the object or class (if you go in that direction), Another option is to perform a deep copy of the object. (Google / Stack overflow will be helpful here) When you assign an object or even a primitive to a variable, you're allocating a space in memory to place it. When you assign the same object to another variable by its variable name, you're actually storing a reference to its place in memory. This is similar to how pointers work, except that JS is handling all the heaviness for you.
async/await makes that kind of thing way cleaner. const {filepath, downloadPath} = await foo() if (await fileExists(filePath)) { return ctx.replyWithDocument({source: filepath}) } await deleteFile(filepath) await deleteFile(downloadPath)
Edabit is quite decent too.
We don't, but I'd love to use it. Have you ever used Selenium in the past? That's what we're using and boy, I'm glad it exists but it can be frustrating and so slow at times!
We don’t use it yet at my company but I would like us to. IMO it’s the best integration testing framework out there right now as long as you can live with the limitations. 
I started using Cypress after I heard about it at a conference. I'm really curious if they're going to keep the promise of 99$/month. If not I might have to create a similar dashboard for internal use. I had some problems with it when I used TypeScript for the tests, and the upgrade didn't go to well. But I reverted to vanilla JS and now it runs fine after the upgrade.
tried for a day to get puppeteer to work, wrote two entire end to end tests in cypress in the same amount of time the following day. got kudos from the CEO when i showed him the videos on github. love it
the first a*b : there is no assignment or return. As for the passing answer, a * b does nothing the return a * b is fine.
`//a function that takes in an boolean alive param and returns an object with an alive key/value` `const Cell = (alive) =&gt; ({alive})` `//a random value of 0 or 1 this is because 0 is false and 1 is true so we can use this as a coin flip for the example to set the life of our cell` `const setLife = () =&gt; Math.round(Math.random())` `//a fast way to create an array of cell objects` [`//Array.from`](//Array.from) `will create a new array from an array like object` `//in this case its an array we create with a lenght of the num param` `//from here we use a Map function to return a new array of Cells each using setLife as a param` `//to coin flip if the cell is alive` `const cellArray = (num) =&gt; Array.from(Array(num), cell =&gt; new Cell(setLife()))` `console.log(cellArray(10))`
TestCafe is a great alternative if there are concerns around Cypress being Chrome only. I've been using it for functional tests and smoke tests got a while now and the ability to inspect/mock api requests gives you great flexibility of what you'd like to test in an integrated environment. The last time I checked, the Cypress team is quite adamant about not using page objects, so that might be a hard sell for some. I also like not having to download a whole 100mb electron app in my CI pipeline, but I'm sure that can be improved/optimized over time.
Some people are really over complicating this. - A function is like a question. The return value is the answer given back. Every function returns something. If you don’t specify, it returns “undefined”. - A console log is like a sticky note the developer leaves for himself. JavaScript politely stops what it’s doing, reads it out loud to you, then goes back to what it was doing. Hope that helps. FWIW this is a common “gotcha” when starting out. Keep at it!
ES6 fat arrow functions return by default (at least for single line functions, I’ll have to check for block functions). 
TestCafe is a great alternative if there are concerns around Cypress being Chrome only. I've been using it for functional tests and smoke tests for a while now and the ability to inspect/mock api requests gives you great flexibility of what you'd like to test in an integrated environment. The last time I checked, the Cypress team is quite adamant about not using page objects, so that might be a hard sell for some. I also like not having to download a whole 100mb electron app in my CI pipeline, but I'm sure that will be improved/optimized over time. If your CI maturity isn't quite there yet, this might increase the build time as well. Both TestCafe and Cypress are awesome, it'll end up coming down to team preference and environment limitations. I'll definitely continue to play with Cypress as well, as the test builder is really well thought out from a developer's perspective.
oh damn i was coding UI tests in selenium at my last job, can't say it was horrible but it wasn't enjoyable by any means. 
I've used Cypress for my side projects. I don't think it's mature enough for the day to day work, for a few reasons, lack of support for browser tabs and iframes. I'm working in an old monolith app and I need those things. 
I really like testcafe, the API is clean and browser support is great. 
"Framework War"?? What a load of bollocks The only "war" was over comma-first, later replaced by semicolons 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/OrZ95ih.gifv** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20e48a471) 
1. Yes. Normal. Backbone, AngularJS, jQuery, internal, maybe others. 2. There weren't really arguments - at least with the people I talked most with. Most people didn't care or had enough investment in any one framework (or enough in multiple frameworks) to really have an opinion at that time. I remember AngularJS being the new hotness (v1, pre-Angular 2) so we applied it to a new project. It was fine. There was a little resistance in having to learn something new, and a few random opinions about approaches used by the framework, but it did its job. 3. jQuery and Backbone for some legacy stuff. React for newer stuff. For both old and new, we have an underlying internal library we depend heavily on. Another group on my team is using Vue (I have worked with Vue project in the past but not so much now). 3a. I never really saw the framework war as a war. I saw it more like an App store. It starts off small with a limited number of options. But before long there are so many apps, its hard to know what you really want, especially when each of those apps basically solve the same problem albeit in slightly different ways. Sometimes its hard to know what you really want until you invest some time into them and see how well they solve your problem. I think some people that live to love one framework/library may not have invested enough time into the others to really understand what they were about (not to make this a generalization - many people do know). I was not fond of Angular 2 _at all_ starting out, but once I got into it more, I started to understand it better and it made more sense to me. I could appreciate it then. Now I'm using React. It is what it is, and not without its own flaws, but I like it. In fact one of my favorite frameworks was an internal framework that will never see the light of day. We're not using that one anymore. Tear. Of the discussions we've had about frameworks, the largest seems to be around "Will this be relevant in a few years down the road?" In other words, if we build a project in React, for example, are we dooming ourselves to having to support that framework when it might no longer exist some time in the future? The fact that React is so prevalent is one of the reasons it becomes appealing, because if so many others are using it, it makes it that much harder to be abandoned.
I use Cypress at work and just presented at our engineering townhall about it, how we’re using it, and how we’re dealing with it’s limitations. I have previously used Selenium in conjunction with JS, Ruby, and Python test frameworks. I think from a maturity (of the frameworks and libraries available) and familiarity (my own) standpoint, I would stick with a Ruby stack using Selenium (if I were making all the decisions and the only one maintaining the tests). At work, my team writes mostly in JS and we were looking for robust end-to-end test capabilities with minimal set up which led us to Cypress and Nightwatch. We ultimately went with Cypress. The biggest selling points for us were the XHR listening and UI. The XHR listening allows for us to do some pretty awesome things in the tests, including better waiting behaviors and making assertions about those requests. The UI allows for a much better experience in creating and debugging the tests. One limitation that took awhile to get around was test parallelization. As of a couple days ago, they add test parallelization in their 3.1.0 release but it requires using their record / dashboard feature which we do not use for business reasons. Our solution was to use parallelization through Docker and Jenkins. It took a little more work but is a fairly robust solution. One limitation you can’t easily get around is visiting more than one domain in a test is not allowed. This is a pretty minor limitation. There is mention in this thread about lack of page object support. In JS it’s incredibly straightforward to create your own page objects with modules. Similarly, helper functions and shared examples are pretty straightforward to implement. Cypress, just like any other test framework, has it’s pros and cons, but if you can live with them, it can be a pretty awesome tool. Happy testing!
It is also really bad practice nowadays.
if you have another team looking to move away from Selenium, they should give TestCafe a go! It's a more lightweight solution that already has parallelism and cross browser support. It supports JavaScript and TypeScript as well. It can apparently connect to browsers on SauceLabs as well if needed, but I haven't looked into that. As mentioned in my other post, I'll continue to keep an eye on Cypress, but I think TestCafe is worth using if you don't want to use Selenium and are also not comfortable working with the current limitations for Cypress.
Objects are references, like pointers to memory. If each value in your array points to the same location in memory, changing one will change all. You need a new reference/pointer for each one. `array[0] = Object.assign({}, cell);` The `{}` creates a new object (new reference/pointer). The `Object.assign()` method assigns to its first parameter (a new and empty object) the key-value pairs of the other parameters (the cell object, in this case). So now Object.assign is returning a new object reference that has the same key-value pairs as your original cell. Do this for each item in the array, and you can change each independently, as they will each be a different object reference.
you should return the result `function multiply(a, b) { return a * b }` 
We use it, and I love it. I wrote an article about my experience with it and Cypress sent me a shirt and stickers! Now I’m a die hard fan
TestCafe has been on my todo list for awhile. I have a side project I might try it with. Thanks!
We use it for our end to end tests, replaced sele ium with it.
We've just started using it and are in the process of replacing all e2e tests. Seems to be pretty solid so far.
1. Yes. Good. IE6 was gone, and web development has been rainbows and sunshine ever since. Frameworks did not make life hard. You did not have to use them if you did not want to. To answer your last question, I did not use any. 2. I didn't discuss which framework was best, because I had a mentality that no framework was good. I worked freelance solo at the time (which is why frameworks were not important) so did not have to work on a team with differing opinions. 3. React. Love it. JavaScript will power everything. React probably won't be dominant forever, but I believe something very close to React will become the ubiquitous with web development.
Beware that `Object.assign` only does a shallow copy, not the deep copy that may be required if there are nested objects. 
I love cypress. Use it for some projects at work. A big limitation I've found is working with XHR in angular apps. Works great in almost every other capability. I really feel the API could be easier to use, especially the accessibility of fixtures. Maintainers subscribe to testing dynamcis like a religion, which has its drawbacks when reporting issues.
&gt; Were you doing JS development between 2010 and 2015? What was the experience like? (Enjoyable? Good? Frustrating?) What framework(s) and libraries were you using (if any)? Yes. I must say I enjoyed it quite a lot. I used jQuery for everything. Basically apps were composed of many components, and each component was written as a jQuery plugin (sort of), with templates [cloned](https://api.jquery.com/clone/) from HTML file, and then stuffed with the variables. &gt; What was your relationship like with other developers? Any arguments about which framework was best/better/better for which purpose? Bonus points if there was a Reddit thread you can point me to. jQuery was all we had, no arguments. We had conventions that everyone followed, and life was good because we knew we had the best tools (the only tools). &gt; What framework(s) and libraries are you using (if any) for development now? How do you feel about it? Where do you think JS is going for the future (optional)? React + MobX. My only criticism the total lack of a standard scoped CSS solution like Vue's single file component. [This looks promising](https://github.com/digitalie/one-loader), though.
you don't need to create a [value object](https://martinfowler.com/bliki/ValueObject.html) for this, you can just use a factory function to create a new instance of the cell. var createCell = function(isAlive) { var alive = isAlive === true; return { alive: alive }; }; for (var j = 0; j &lt; cols; j++) { for (var z = 0; z &lt; rows; z++) { arr[j][z] = createCell(); } }
&gt;ASP and PHP are running on the back end, so clearly they are solving a different problem to React running on the front end. Dude. JSX is *not "front-end" either. You're not running JSX at runtime on the client - you have to compile JSX. You want early client-side DOM manipulation from declarative rendering based on data in the front end? XSLT. JSX isn't a novel approach, react isn't the first framework to have templated rendering of any sort. &gt;Again, those are two different problems. Those are not two different problems at all; the SINGLE problem both is trying to solve is "update the UI with current data". 
could you link the article?
JSX "encapsulating" DOM manipulation is a build-time trick. If you choose to not use JSX (and I realize that's harder and harder these days because they are insisting on more and more and heavier and heavier build-time tasks) you most definitely are modifying the DOM, albeit through an abstraction layer.
&gt; I've worked in a large codebase that used jquery + a lot of glue to buidl UIs. We standardized how we dealt with data flows, API requests, asynchronous actions, and let the view layer use vanillaJS or jQuery still. I feel like at least half the thread doesn't realize this ^^^ was the majority of web development &amp; architecture for a long time, and that literally any one of the companies we worked for and created a framework like this for could very well have turned that into the next React, but since React had big money behind it, and the OSS landscape in JS became considerably stronger in recent years, they could afford to productize it. Literally there's a hundred React-like frameworks out there that are just as good, if not better, that are sitting in some closed source shop that won't (or can't) open it up, but sure, yah, React is some new and original and pioneering framework none of us have ever seen before. *eyeroll* Again, disclaimer, *I see the value in React*, but the arguments here that it's never been done before ever, or that it's some reference masterwork of programming principles, is missing a lotttt of history.
&gt;Good organizations and good coding practices are not dependent on frameworks. A role of framework is to enforce a particular style of organization and practices within a code base. You can have good organizations and good coding practices without framework forcing you; it just require discipline and good communication/documentation. ... I have no comment here, this was just worth repeating.
&gt; performance-wise it wasn't considered a good option without the virtual dom Please go build an event-driven, one-way databinding app. If you do it right its' behavior will be more explicit, and will outperform React. &gt;you would be re-rendering the whole page because you would be writing to the root of the dom on each change. This is absolutely not true. &gt;With virtual dom, it will scan a copy of the dom to identify which nodes have changed and then only apply the changes there. Which takes quite a bit more time than an observer that updates *just* the view element that the model was rendered into. 
&gt; But you'll be working with lower level abstractions. ...not if you build other abstractions that better suit your needs. I'm not advocating for that, necessarily, but when you adopt a library you're adopting all their abstractions - for better or worse. No real reason you can't make your own, tailored to your needs - except for the time it takes to do so. For a large application with a long lifetime... adopting framework-du-jour that you don't control inhouse isn't always the best choice.
For me the frustration was much less about frameworks than about command line tools and syntax.
Hi, why was this post removed??
&gt;There's no shame in "spaghetti code," by the way. There is when you have to fix a simple bug but have to tell your boss that this should-be-easy bug requires you to refactor a significant portion of your probably also not tested codebase. There's definitely shame in spaghetti code. So much shame.
I would love to check it out, or even collaborate on it with you. 
What's the invite like?
Hope this is helpful. I did a screen recording of the behavior I am having issues with. In the recording I am using FireFox but also have this issue in Safari and other browsers. Does not seem to happen in Chrome however. Any guidance with this would be great. Thank you for your time. [Screen Recording on YouTube](https://youtu.be/qxKrOZD7BkI)
Because /r/javascript is not for beginners.
That's two different topics entirely.
From your experience, do TestCafe tests run faster? I heard you can run them in parallel, which Cypress can't.
Those are some serious allegations you're dropping here. What job? What country? What language was the alleged phone call in? When did the API of uws change? Looking at the API history it never changed since its inception so what exactly are you pointing at here? In what regard was your life caused grief? Nobody was phoned. The API never changed. What are you talking about. Please explain. /Alex
Unless I am misunderstanding this, expiring cookies early simple because they are using HTTP instead of HTTPS will not solve the problem that the cookies are being sent in a non secure manner. The way I see it HTTP is the problem, not the cookies sent over HTTP. 
Hi /u/desoga, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/desoga, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Keep hearing about Cypress, what does it offer over, say...nightwatch.js? 
I just downloaded TestCafe (since people seem to enjoy using it) and tried a simple test case which didn't work: * go to https://www.google.com * Enter a search term: "google" * Click the "Google Search" button It just sits there forever indicating "Worker has been utilized". I tried another test case and that just hung too. It doesn't seem to work on Mac/OS-X at all (two out of two test cases didn't work properly).
I don't get to use Cypress at work :( but I still love it. FYI Vue CLI includes Cypress tests
What part of setting it up was hard? Like, CI?
You’re setting `e.key = ""` and then `e.keyCode = e.key.charCodeAt(167)`. Since `e.key === ""`, `e.key.charCodeAt(167) === NaN`. Shouldn’t you just be setting `e.keyCode = 167`?
[https://discord.gg/VmpTsBe](https://discord.gg/VmpTsBe)
Try to decompile the app and see how the communication works, if you cant get past this step there is no need to go on.
\&gt; date2 &amp;&amp; calculateDelta(date1, date2); \&gt; date1 &amp;&amp; calculateDelta(date1, date2); Any reason why you put date2 and date1 in the front of it?
I hope they open source the pjax JS they're using now
Haha, wow. I take it back. That is insane, I wouldn't want to deal with that nonsense either.
A chainable &amp; composable alternative React component API: https://github.com/jsiwhitehead/refluent (My first oss library!)
That seems reasonable, but the example had the (function?) call `charCodeAt(&lt;val&gt;)` so I kept it the same for my first runs. I have tried setting `e.keyCode = 167` directly but that did not work. Additionally, `e.key = 167` with `e.keyCode = 167` did not work either. Further `e.keyCode = e.key.charCodeAt(167)` with `e.key = 167` did not work and [js.do](https://js.do) returns a an error affiliated with the `e.keyCode` line.
Yeah, gonna try this again on a computer with a decent graphics card. Looks cool right off the bat though.
We use it for testing product for one of the biggest banking client in apac region.its great and easy.
never even got to CI. i was able to write a few tests based on the tutorial but once i added puppeteer-jest everything broke - don't really remember the exact errors 
Thank you. I was just trying to find out why in code you see returns and then you don't. I do know that console.log is to print to the screen. I was also trying to understand what CodeWars specifically wanted from me. So I should retake the entire JS track on Codecademy? Gosh, I'll never move beyond that site! 
I'll take a look at Edabit, thanks.
we are currently migrating from selenium webdriver with java to [cypress.io](https://cypress.io) where I work. I was able to do the same tests that costed me several days of work in selenium in just one day using cypress. Loving it.
If you already took it, then I'd recommend the third module in codeschool (costs a few bucks, but worth it). The console should print returned values for you to see, for your convenience. Console.log also prints values, so it can seem like they do the same thing, but hopefully with all these answers it's clear how they aren't!
I was trying to be funny :(
Way to be a funny cunt :)
:D
I was just trying to explain the basic concept of scope and defining a variable inside a function, not really trying to get more complicated at OP's beginner level.
Interesting. I just use plain jest assertions. Configuring jest is annoying and I try to avoid adding more configuration if I can avoid it.
You are awesome, where you at cryptic hash???
I was wondering what was going on! Thanks for the edit! 
[https://lodash.com/docs/4.17.5#differenceBy](https://lodash.com/docs/4.17.5#differenceBy). You just have to pass your own iteratee function.
Yes, Cypress is my go-to and I used it for E2E tests [in my book teaching Angular](http://theangulartutorial.org/). Protractor doesn't even come close.
Cypress.io is awesome. Our developers hated our previous test software but love Cypress.
Cypress can output it’s test results in many formats. Including JMeter and Mocha. There are quite some standard solutions that can generate nice reports based on that.
They are working on that. They already made the first step in Cypress 3 by adding more isolation to the tests.
I use Cypress and love it.
Yep, good point. Did you check the Motivation chapter? There I mention some other benefits apart from learning how to solve problems.
Do you mean position like x,y coordinates or a particular part of the SVG? If the answer is latter, just use regular `scrollIntoView`. [Example](https://upload.wikimedia.org/wikipedia/commons/e/ec/Arctic_big.svg): `document.querySelector("#polyline235").scrollIntoView()` 
It's a shorthand, used for quick-and-easy "input validation". You can see each input event handler is using this to check the value of *the other* input. JavaScript will coerce values to boolean when they're used in conditionals like this. You can see that date1 and date2 aren't initialized with values in this script, and undefined is one of the values JavaScript coerces to false. If, after coercing, the left-hand side is false, the right-hand won't be evaluated, meaning the function won't be executed. Otherwise, the right-hand will be evaluated, meaning the function will execute.
I'm not a fan of messing with native browser scrolling, but this indeed feels pretty smooth. After a quick look in devtools, I'm impressed: - native browser scrolling is preserved, - instead, the nodes are positioned using `translate3d` with an ease-out curve to give it that smooth feel, - it's optimized for performance using culling, meaning it only positions nodes that are currently in view. I don't know any libraries that can do this, and it looks like the [author's](https://www.aristidebenoist.com/) custom code. I don't think he uses any frameworks, but he seems to be very comfortable with WebGL. Amazing work, but sorry I couldn't be of more help.
I haven't compared them, but Cypress feels faster to me. TestCafe runs fast enough for our purposes right now.
Hey thanks for taking some time to look into that! so you're saying when we scroll the elements are actually using the translate3D to move the elements and create the illusion that the page is being scrolled? Looking on the dev tools it seems to be like that I noticed that when I try to change the values in the translate3D the browser doesn't do anything, do you know why? 
that's interesting! I haven't had the same issues as you have and we've run it on Mac/Windows and also in our Bamboo agents. TestCafe has been working really well for us. Perhaps you could share your example?
Yes, and I must say, I appreciate that you put in the effort to write an article. Sorry that I did not really comment on the article itself but merely on the act of competitive programming.
Is this an ad?
I'd start with the official docs: https://github.com/gulpjs/gulp/blob/v3.9.1/docs/API.md Beyond that you're mostly just going to be learning about node streaming IO, individual gulp plugins, and gulp's internals. There's tons of guides on working with streams in node; individual gulp plugins should all have their own documentation and best-practices, and if you want to understand gulp's internals, you can look at the source [here](https://github.com/gulpjs/gulp/blob/master/index.js) (CLI source is [here](https://github.com/gulpjs/gulp-cli/blob/master/index.js)). 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [gulpjs/gulp-cli/.../**index.js** (master → e9af812)](https://github.com/gulpjs/gulp-cli/blob/e9af812a4376c2890e00f50644d3a6529c6e3739/index.js) * [gulpjs/gulp/.../**index.js** (master → 2cecf1e)](https://github.com/gulpjs/gulp/blob/2cecf1ed4826cb6bc5314df338b0533565a34154/index.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e49bukp.)
I try to figure out what structure that data should be in to make my life easier when I'm displaying it. In other words: use the data structures that fit your algorithms. For example if I was to receive multiple pages each with multiple entries, but I'm just displaying a single list with no concept of pages, I'd probably flatten the pages into a single array since that will be simpler for my UI to consume.
Have you considered to encode the user uploaded video file (ffmpeg) to ensure an uniform file base so that you don't have to guess the used codec?
Can you elaborate on this, please? I'd love to find old conference schedules for framework talks, but that's difficult. Just a story or two would help. :) 
It's my preference, but the company wants to avoid a large bill for transcoding. Might have to go that way, I was just hoping for an alternative to transcoding all of our existing and future content uploads.
This is quite an interesting question for me because from 2007 until two years ago I helped maintain one of the longest running JavaScript frontend frameworks. 1. Back in 2007 I was looking for a structured way to build client side JavaScript applications that talk to a "Thin Server" (we now call it an API) using the design patterns (like MVC) and best practises (like tests) I had learned about in university. The options were 1. Google Web Toolkit - A Java to JavaScript UI compiler. I didn't like the idea of "hiding" the fact that you are using JavaScript. Turned out that not many did in the long run either. 2. Flash - We all know where that ended up - Although I do give it credit for promoting ECMAScript as a multi-purpose language and some things like declarative UIs made it into other frameworks like Angular or Vue 3. Dojo - Which was way ahead of its time and had extensible widgets, a module bundler etc. but still had a fairly monolithic approach at the time. 4. jQuery - Which was awesome but more of a tool library than a framework. Funny enough, back then there was a "JavaScript library war" going on (Mootools, Prototype, Scriptaculous etc.) so when John Resig announced the first version of jQuery there were several "Oh great, another Web 2.0 library" comments (see [http://web.archive.org/web/20090214090118/http://digg.com/programming/jQuery\_-\_New\_Wave\_Javascript](http://web.archive.org/web/20090214090118/http://digg.com/programming/jQuery_-_New_Wave_Javascript)) - My personal favourite is `Wow, an awesome Web 2.0 Javascript library that can added to many blogs, spammed on Digg, made into a book by O'Reilly, and never get used again!` Today jQuery is still used by more than 80% of all websites. We don't even think about it anymore, even less that there ever was a "war" over it. 5. JavaScriptMVC (started in 2005/2006) - Unfortunately not well known but I can confidently say that it (not Backbone) was the first real client side MVC framework. At the time heavily inspired by Rails it had its own Model, Controller and View (the original EJS) engine, module bundler, documentation generator and testing framework. Basically everything we now all agree is part of building good JavaScript applications - but back then even the idea of building "client side" applications was still somewhat controversial. There even was a discussion around using the ideas from JavaScriptMVC to create an "Enterprise jQuery" back in 2009 ([https://groups.google.com/forum/#!topic/jquery-dev/HsTcpuAmFtY](https://groups.google.com/forum/#!topic/jquery-dev/HsTcpuAmFtY)). It didn't work out but I sometimes wonder how things would've been different if it had gone the other way. I made my very first open source contribution to JavaScriptMVC in 2007 and was using it for pretty much all my projects in the following years. From the beginning of 2012 until last year I was part of the company that maintains it and helped splitting the monolithic framework up into its individual parts, CanJS, StealJS, FuncUnit and DocumentJS - which recently got re-bundled (but less monolithic) under the umbrella of DoneJS. Unfortunately, none of those projects ever got any major adoption although they were - especially at the beginning - definitely ahead of their time. I definitely learned a lot about running open source projects and the business side of open source during that time but I'll leave that for another longer post ;) Last year I left to focus my own open source efforts on [https://feathersjs.com](https://feathersjs.com/) and a totally separate (one of the lessons) product business. 2. The community was smaller, much more technology focussed and there definitely was less hype. Technology focus isn't a bad thing but it did mean that many of the early tools weren't very user friendly. When something more usable came around people tried "winning" with technical arguments (it's slower, it doesn't do this or that) but it turned out that developers were looking for having their immediate pain points solved, not the ones they *will* (unavoidably) run into in the future. I think the idea of a "framework war" only came about when the big five started sponsoring or promoting their "own" open source frameworks. All of a sudden scrappy free-time OS developers or small dev shops had to "compete" with full-time evangelists. 3. As many of the more senior developers I know, I currently ended up at React and React Native. I could say that it provides the right amount of abstraction of your UI while still leaving you enough flexibility but the truth is: It doesn't matter. No project ever failed because they picked the wrong JavaScript framework. It can't fix a broken team. It can't tell you what to build. One of the best teams I ever worked with was when I did frontend consulting for a very large company four years ago. They built their own tooling on top of Backbone and it wasn't always how I would've done it but everybody knew their stuff and was pushing in the same direction. Then the framework wars started and the entire department went from getting things done to arguing about switching to React or Angular. In the end, pretty much everybody quit. Everybody lost. 3a I know it might still not seem that way but after more than a decade in the field, frontend development to me is a solved problem. I can now do all the things that were important to me when I first started looking for them in 2007. Things are already consolidating more and more into a few frameworks and tools. Tooling will get more robust and best practises that were bleeding edge even just a few years ago are now already being taught to brand new developers. Just like jQuery in 2006 the things we were "waring" over in 2015 will just become part of how things work. Personally I came full circle back to the 2006 "Thin Server" where it all started with. I wrote my university thesis about abstracting RPCs and APIs in 2010, a good part of which has now turned into FeathersJS. Even when the web-browser DOM is just another legacy technology (UI paradigms have the habit of changing quickly), servers and any kind of application will still need to be able to talk to each other. To me it feels similar to the idea of single page applications in 2006. There is still a lot that I think has to happen there and JavaScript is a great developer-friendly interface for it.
1. Yes, It was awesome. I ended up abandoning jQuery for Angular 1 and once I finally became comfortable with Angular 1 I felt unstoppable. My heart shattered when they deviated so greatly for Angular 2. 2. When Angular 2 came out, we had an internal discussion about whether to migrate all the Angular 1 apps to Angular 2 or the new hotness React. React &amp; Redux ended up winning and that's what we ended up implementing. 3. Honestly, this javascript framework bullshit drove me so nuts and left me so exhausted that I left my position as a Senior Software Engineer and joined Redis Labs where I now work as a Solutions Architect. If I wanted to code up something fast in my own time, I'd still go back to Angular 1. Or maybe go peek at Vue lol.
I have actually spent nontrivial amounts of my career implementing or working with tooltips and flyouts. This library is missing a few things that I always find necessary: * There’s no way to connect it to something other than a component. There are many cases where you need to connect a tooltip to an arbitrary rectangle (for example, what if the logical thing cannot be represented by a single component?). * There’s no way to adjust the chosen position. For example, I have frequently needed to show multiple tooltips in an area but have them not overlap. Adjusting position is necessary. * There is no way to automatically ensure the tooltip says contained within some region. For example, tooltips that touch the edge of the viewing area have never been accepted by my UI designers. I always need to ensure there is some amount of padding between the tooltip and the edge of the viewport. This isn’t meant to judge what you have. It’s more suggestions for future work from someone who has lived in this space more than many should ever have to and who has had to implement these things multiple times.
I just started using it with a new project, and I’m liking it so far. It’s easy to set up and writing tests has been straightforward.
1. As I beginner I have no intention of learning aboue vue, the more about jira addons. 2. As a mid developer I don't want to learn about basics and learning about jira addon's may not be interesting. 3. If I would want to learn about making Jira addons I would probably not choose such mixed course. Are you sure this course may maintain high quality? 
You should share your article! I'm interested to read it 
As Cypress is the first (and so far the only) testing framework I've used with JS I can't answer your question but I'll be interested to hear from someone more expert.
You may want to try [code mentor](https://www.codementor.io). I’ve had luck with it. 
&gt; Please go build an event-driven, one-way databinding app. But this wouldn't be unidirectional flow. Let's assume you have a component tree where an event on child component needs to update that component's state, and then an ancestor of that component needs to update its state dependent on the child's state. Yes, you can string up event listeners to handle this case, but it will not be be unidirectional flow. In unidirectional flow, that child component would update some state and then the updated state would be propagated through the component tree from the root, and then that's when the ancestors of that component can be updated. That's why it's called unidirectional flow, all state changes propagate down from the root to the children, but never from child to parent or across sibling nodes. Again this would be possible without a virtual dom, but it may suffer performance-wise.
It's unlikely, the complete works of shakespeare are about 5mb
Qt presumably lets you write view logic in a modified ES5 variant of JS. I'm not sure if you'd need to write some C++ at some point though. On Linux/Gnome you can write GTK+ apps with JS interestingly enough, using the SpiderMonkey engine (gjs). If you're running Ubuntu 18 it's actually really easy to create GUI apps with plain JS - don't even need to install node. I'm not sure if you can build cross-platform GTK+ apps this way, but you might check it out.
&gt; ... which led us to Cypress and Nightwatch. We ultimately went with Cypress. Can I ask why? I'm using Nightwatch currently, and literally just learned of Cypress yesterday.
We’re in the process of switching from selenium to cypress. Soooooo much nicer. And the best part is avoiding all the flakey tests
Free advice: no one will do this for free, and especially not “on completion.” Decide on an hourly rate up front, and be ready to pay approximately half at the start of the project.
What exactly are you trying to set?
Rotation angle of a shape, I'm storing the value in the dB and each shape could have a different angle, the setting is in shapeDefaults 
If each shape could have a different angle then you wouldn’t want to set it in shapeDefaults but instead in each shape.rotation.angle in your model. 
Oh Yeah, the issue I'm having is getting the value from the model to the shape.rotation.angle element. Like the text, color, id etc
It's a worthwhile endeavor to learn how to package up and publish a project to NPM. It's noble to contribute your work to the world with an Open Source license. That said, this is an NPM package that adds nothing to the ecosystem and just pollutes the global namespace. I'm sure this code i useful to you, but this package is effectively just a confusing wrapper for the existing `Array.prototype.filter` method. The example in your README could be rewritten without your package as: const arr = [4, 0.3, 5, -3.1, 0, 5, 10, -1] const result = { less: arr.filter(v =&gt; v &lt; 0), equal: arr.filter(v =&gt; v == 0), more: arr.filter(v =&gt; v &gt; 0), evenPosition: arr.filter((v, i) =&gt; !(i % 2)), }; Thanks for sharing this, but this is not a package I would ever consider using or recommending to anyone.
Your model would have to contain an object of rotation with a property called angle in it. `rotation: {` `angle: 0` `}` Here is an example. [https://dojo.telerik.com/aJURolum](https://dojo.telerik.com/aJURolum)
I'm guessing you'll have to transcode anyway, since the video file may need to be fragmented based on what codec it uses. [Transcoding assets for Media Source Extensions](https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API/Transcoding_assets_for_MSE#Getting_started)
Yeah, I have the object and can pass/ manipulate the value in the UI. With the example you posted above. How do I set the value of angle "0" based on the property's value? I'm using data source btw. 
Btw I really appreciate your responses, was pulling my hair out for hours on this. 
sure, linked in the comment
https://medium.com/@grant.glidewell/testing-with-cypress-io-10ca7e4984e0
It's super useful for testing event based functionality and runs so smoothly. I really like the artifacts though never use them. The down fall is that is slows down your test suite alot if you have too much and thus slows the development process down 
Definitely give it a shot. The XHR listening is a great tool. Especially for waiting behaviors and assertions. Also the UI is super cool for test development and debugging. Honestly the pros and cons of Nightwatch and Cypress are the exact opposite of each other so if Nightwatch is working for you, you’re probably better off sticking with it. 
Sorry perks of ESL, While it's being painted. If I have a shape with properties {id=0,text="sometext",color="red",angle="15"} How can i set the rotation angle to 15 in shape.rotation.angle without hardcoding its value?
Doesn't look like you can do that. In the kendoChart I know you can do it using series.myvariable but I just tried it in the diagram as shapes.angle and it broke. [https://demos.telerik.com/kendo-ui/bar-charts/index](https://demos.telerik.com/kendo-ui/bar-charts/index) [https://dojo.telerik.com/aJURolum](https://dojo.telerik.com/aJURolum) I would suggest if you don't want to mess with the backend code or can't to push set it from angle to rotation.angle in the schema of your dataSource. It's a hack but probably quickest and easiest without the template functionality.
I'm using Puppeteer too, if only for the fact that I can use the same test framework that I'm using for unit/integration tests (Jest), and for easy visual regression (screenshot) tests with [jest-image-snapshot](https://github.com/americanexpress/jest-image-snapshot).
Wait, is it case sensitive, like the x and y coordinates? I currently have the property name as "Angle" instead of "angle". Anyway thank you very much, appreciate your time. 
react native
Reative. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'react native'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
Lucky you didn't migrate to angular 2. Did that for one of my projects, huge mistake. React is way better and the migration/rewrite is not any longer. They should have just chosen a new name for ng2 as to not fool anyone.
It might be silly but you can always make an HTML/JS front end and open it in the users browser. Not as slick but very functional. 
I have, the tests take so long it makes in insane in the membrane.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators The operator you wish for is exactly the same in JavaScript as it is in Java ;) With the caveat that it, along with all the other bitwise operators in JS, coerce their operands to 32bit integers. Despite numbers in JS being 64 bit floats. ;( So yeah, your problem *would* already be solved if only you were working with much smaller numbers. Hope this helps if you ever need to bitshift such smaller numbers in the future, at least. :/
Could you give some sort of examples of the behavior you're looking for? 8 &gt;&gt; 2 === 2 -8 &gt;&gt; 2 === -2 bigInt(8).shiftRight(2).valueOf() === 2
There's an implementation for logical right shift using BigInteger.js in this issue here: https://github.com/peterolson/BigInteger.js/issues/137
How about Nativescript? https://www.nativescript.org 
"Male" and "female" aren't genders; they're sexes. 
Make sure you have nautilus set to launch text files instead of displaying them: https://askubuntu.com/questions/138908/how-to-execute-a-script-just-by-double-clicking-like-exe-files-in-windows
gender NOUN 1Either of the two sexes (male and female), especially when considered with reference to social and cultural differences rather than biological ones. The term is also used more broadly to denote a range of identities that do not correspond to established ideas of male and female.
Male and female are sexes. The associated genders are man and woman. 
&gt; coerce their operands to 32bit integers. Despite numbers in JS being 64 bit floats. ;( Well.. it can only reliably represent integers up to 2^53.
Cool! A slight u.i tweak I'd implement is have your Enter key fire off your Next Question event. Other than that, cool stuff.
&gt;Cypress doesn't allow you to manipulate iframes. We've been able to.
I would love to hear how
My impression from the people who demo'd it on our team, speed and reliability.
Didn't know about native script, looks cool, I'll use it if I need to make mobile app. I am currently looking for a desktop solution.
What is the history behind the seemingly arbitrary 53rd power?
Yes, but if you try using bitwise operators on integers that large, you'll regret it (unless you *want* them truncated, in which case bitwise operators are the most convenient way to do it).
See IEEE double precision floating point spec... 52 bits are for the significand, 11 for exponent, 1 for sign = 64 bits total.
It's the maximum safe integer that can be stored in an 64-bit float. So for the range 0 - 2^53 there won't be any precision loss, but at 2^53 + 1 the format starts losing precision (try pasting `2**53 === 2**53 + 1` in your browser console).
Guess I'm dumb but isn't a right shift the same as dividing by 2?
Afair NW.js is the most popular alternative to electron. It's quite lightweight
Also the [BigInt](https://github.com/tc39/proposal-bigint) proposal is at stage 3, so we should (eventually) get arbitrary-sized integers as well as 64-bit integer typed arrays as a language feature. Unfortunately `&gt;&gt;&gt;` specifically won't be added for bigints (see [here](https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md)).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tc39/proposal-bigint/.../**ADVANCED.md** (master → 87c6a51)](https://github.com/tc39/proposal-bigint/blob/87c6a51d36d45b8e7487725962d8f8b0432988b5/ADVANCED.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e49xmo9.)
borderRadius
Wow, I had no idea this was happening, let alone that it was shipped in Chrome. Thanks for pointing this out!
Ah, dur, seeing MAX\_SAFE\_INTEGER my brain forget ints are floats, and was hoping it was another one of javascript's fascinating idiosyncracies.
Yes. I want to scroll it to a particular position like x,y coordinates.
Right, this makes sense now. Also, TIL about the ** operator, so thanks!
You could use [filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) with [some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some). const arr1 = [ /* ... */ ]; const arr2 = [ /* ... */ ]; const resultArray = arr1.filter(obj1 =&gt; !arr2.some(obj2 =&gt; obj1.name === obj2.name) ); `some` returns true if the provided callback returns true for any element in `arr2`, so just negate it on the filter to remove objects in `arr1` that already exist in `arr2`.
I've evaluated Cypress recently and compared it to selenium. The main advantage for me was how fast it was to write tests with automatic test re-running and the visual debugging experience. The tests were much faster to write and iterate. And if something got broken it was a lot easier to see what it was and why it happened. The negatives were lack of visual regression testing, cross browser support, poor iframe support. Still, for me the advantages outweigh the cons. 
Remove the quotes from the prop name
No, it's a bitwise operator so it works on 32-bit intergers. The key to understanding it is 'converting' the number to binary first. So take number nine or 00000000000000000000000000001001 9 &gt;&gt; 2 excess bits to the right are discarded, and we're left with 00000000000000000000000000000010 which gives us 2. Shifting 9 *left* by 2 9 &lt;&lt; 2 00000000000000000000000000100100 console.log(parseInt(100100, 2)); // 35 yields 36 
Should be titled “javascript is still relevant” /r/savedyouaclick
There's really nothing saying one way databinding cannot be used in undirectional flow patterns. 
I’m not a js expert, and I haven’t kept up with the newest ECMAScript standards for awhile, so take this as you see fit: I’m familiar with specifying a radix via parseInt() and parseFloat(), but I never knew that toString() could take arguments without overloading/overriding the method. After a quick google search, apparently toString() can take a radix arg IF it’s called on a native Number object. So my first thoughts are: - Have you checked that “byte” is a Number object (by the variable name I’m guessing it is not). - If the “byte” var is a Number, do you have the toString method overridden anywhere? Outside of that, what js/ecmascript standard are you using?
You only use quotes on the name in json, not in an actual JavaScript object. 
Essentially yes, but you need to round down if the number is not an integer.
I still don't get it. 9 divided by 2 twice is 2. 9 left shifted twice is 9*2*2 = 36. So if you wrote a left shift function it would be (n, m) =&gt; n*2**m and if you wrote a right shift function it would be... ah I see my confusion, I needed Math.floor to get it to work in Javascript... rightshift = (n,m) =&gt; Math.floor(n/(2**m))
Whole article about css property... holly cow, there is even a video about it 🤦🏻‍♂️ 
You don't need a virtual DOM for this, you just need an observable model with a change handler that calls render on the specific view that the model is bound to. You don't need any of the DOM diffing from react, or any other framework, to update specific elements in the DOM without starting at root. Go look at a backbone example, it's right there.
You may want to watch this video: https://youtu.be/5XQOK0v_YRE It can probably help you speed up the tests. 
Great job. I guess I'll also write something about it so maybe they'll send me a t-shirt aswell haha
See my edit. I think you are confused what unidirectional flow means. 
[removed]
If you can write only jquey, you habe to learn ES6/ES7/ES8 choose one of those. You need strong understanding of async programming paired with API operations. It‘s gonna take a long time if you have no prior experience as a JavaScript Developer.
I found good post on this topic which is [http://www.visionfortech.com/2018/08/let-vs-var-in-javascript.html](http://www.visionfortech.com/2018/08/let-vs-var-in-javascript.html) So i thought let me share that post with all of you it is well written and well explained by its author.
Next up: how to add two integers using MUTHAFUCKING REACT.
Your code should work just fine. [https://repl.it/repls/DecisiveTidyProfiles](https://repl.it/repls/DecisiveTidyProfiles) The problem must be somewhere else. Can you show more of the code?
Hi, thanks for the suggestions. 1. I didn't get your arbitrary rectangle thing. Cant you pass more than one children inside a fragment? 2. I will look into it. 3. [https://github.com/mohsinulhaq/react-popper-tooltip/blob/master/src/TooltipTrigger.js#L17](https://github.com/mohsinulhaq/react-popper-tooltip/blob/master/src/TooltipTrigger.js#L17) Zero padding is because of this setting. It can be overridden. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [mohsinulhaq/react-popper-tooltip/.../**TooltipTrigger.js#L17** (master → 63e7f1d)](https://github.com/mohsinulhaq/react-popper-tooltip/blob/63e7f1d8c1198ebb00ebf0576af74f98e84fc7ce/src/TooltipTrigger.js#L17) ---- 
Yup, you have a point. However, using cleaner functions to produce a desired output is always a gain (yeah, *clean* is also always a question of taste). The package doesn't depend on any other package and extending your array functions with it could be desirable by some people. It's true that namespace pollution is a problem in the npm ecosystem. But it's not the fault of the package maintainers. Prefixing dependencies with a maintainer (for example: oleblaesing/split-by-property) would solve this problem on the correct side.
This doesn't make a difference for what they're showing here
I'd recommend node before angular. With angular you're likely to take shortcuts due to your history with jquery (speaking from experience) and node would force you to learn javascript properly. Note that jquery is not a good reprecentation of what serverside javascript is though, you're essentially learning a new language here. It's kind of different but from what I'm hearing you should probably just get started. I'd recommend you to look into ES6 and beyond, as the developer experience is a lot more pleasant to a developer than legacy javascript. Node in itself does not support it fully though, so you'll need either a boilerplate project or learn how to set up transpiling with babel, which is kind of a hassle. Just keep at it and you'll do fine. 
And the plot thickens...
Are they on the same scope? what does just `console.log(test)` show?
Ah, now i get it! The tooltip placement around the bounding box is handled by the underlying Popper.js library. I will see if this aspect is configurable, otherwise I would need to implement it myself.
skip angular stack. It is way after it's peak. Even the new angular 2-7 isn't nearly as popular as angular.js was. Learn react.js or vue instead.
Yep. Likely an async problem. Either `test` or `property1` is being set asynchronously, but the return is happening synchronously. 
That's impressive. Thanks for sharing and doing a write up !
It's things like this why I can't buy the "Java is to JavaScript as car is to carpet" trope. Surely it's more like "Java is to JavaScript as cat is to catfish"...meh.
I don't really have any use for this atm, and I would definitely make this on my own rather than add a dependency for this. But if I did have a use and I didn't mind the external dependency, I would find it **much** more interesting with an interface that would let me operate this way: let numberClassifier = multiFilter({ negative: v =&gt; v &lt; 0, zero: v =&gt; v == 0, positive: v =&gt; v &gt; 0, evenPositioned: (_,i) =&gt; !(i%2); }); numberClassifier([4, 0.3, 5, -3.1, 0, 5, 10, -1]); That is, curried with the array coming last. Something like... const multiFilter = (m) =&gt; { let ks = Object.keys(m); let r = ks.reduce((r,k) =&gt; { r[k] = []; return r; }, {}); return arr =&gt; arr.reduce( (r,v,i) =&gt; { ks.forEach(k =&gt; { if (m[k](v,i)) r[k].push(v); }); return r; }, r); }; 
Try /r/learnjava or maybe /r/java ? ( Java and JavaScript are different things. If you're indeed asking about JavaScript then /r/learnjavascript )
Java is not JavaScript. First lesson is to drill that one home! I’d check relevant Java subs on Reddit for more info. 
Well first you gotta figure out if you want to learn Java or Javascript, which are two different languages. Javascript is mainly used in web development, Java is used... everywhere. Beyond that, I'd check out udemy. They've got fairly good courses available on both. I can't give specific reccomendations, It's been a while since I've taken a udemy course. 
To go even further, 2**53 === 2**53 + 1 2**54 === 2**54 + 2 2**55 === 2**55 + 4 2**56 === 2**56 + 8 All evaluate to true (but comparing to the next integer does not). You lose a power of two significance, which makes sense since you lose one bit per power of two in your exponent. The same will hold for fractions going in the other direction.
It means `Uncaught SyntaxError: Invalid or unexpected token`. 
Thnx .
Debate != wars
I am pretty new at this so I didn't know much about the difference. Thanks for letting me know.
TFW you provide a dictionary definition and people still argue with you. Please OP update your app to shave a few years off people like this based on sheer stubbornness and stupidity. 
;) also, instead of `portfolio === null`, you should do _.isEmpty(portfolio) from lodash.
Thnx
np
That's interesting, I will take a look at it. :)
r/learnjava
&gt;shave a few years off Don't worry, morbid obesity, general loneliness, impotent rage and sore throats from constant REEEEE-ing take care of that. 
I had this problem too a long time ago with cypress, but after some research in the cypress github I did it without major problems. Here is a fast example: ``` cy .get('iframe') .should($iframe =&gt; { const body = $iframe.contents().find('body'); expect(body.find('input')).to.exist; }).then(function($iframe) { const body = $iframe.contents().find('body'); cy.wrap(body.find('input')).type('123'); }); ``` 
You should learn ecmascript (es5, es6, es2017) properly. Then you learn nodejs APIs. 
You mean the spread syntax - [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread\_syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)
It's an object that spreads love. 
are you putting the JS code in Head? If you do that, the script will be executed before the elements are rendered.
I cannot wait till someone ports v8 engine to webassembly.
wonderful video! The only thing I think he may be missing is a bit of the business perspective. He touched on it when he talked about blazor and the ability to port C/C++ code to wasm and I think its the key reason companies might move development in this direction. The hope being that we can save a lot of technical debt by moving straight from things like .Net MVC straight to WASM.
hmm, I may have tried that already, but I'll give it another go for good measure. Right now It's in my main .js file 
 A few constructive comments * Have the enter key go to the next question when displaying a text box * I would just make it so clicking the multiple choice answers goes straight to the next question too, and replace the next button with a back button. I don't see the need to click twice per question * I gave all "bad" answers and at the end it said I had -2 minutes left * Some sort of popup notice or similar when I click next without choosing an answer * The hamburger button and the sidebar it reveals should be on the same side. * I would expect the MyDeathClock on the top left to be a link to the home page * There's plenty of room in here for nice transitions etc if you wanted to go down that route
&gt; The only thing I think he may be missing is a bit of the business perspective Yeah, that's a fair point. With WebAssembly being a relatively immature runtime it is out of reach for most businesses. As wasm matures, and the frameworks built on top of it mature (especially Blazor), the real business benefit will become clearer. 
You do have babel set up for your local web page, right?
Awesome read. Thanks for sharing :)
i think that given the title and where we are with wasm's adoption, it's not worth 40 minutes of my time.
what does your js console say? any errors?
Lol
Man thank you for taking the time to inspect my website I will trie to make all this changes 
Unless OP is testing in &lt;IE11, it's not an issue.
Most boot camps are scams or cash grabs trying to profit off of a trend. Not all of them, but make sure you do your due diligence and research before you give them a dime.
Think calmly about this for a moment. So you have something that works, and something that doesn't. You show the thing that _is_ working and want people to **guess** what might be wrong in the other thing without being able to see it or without any description of the problem, any error messages that may be showing, any hint other than "it's not working". Does this sound like a good, efficient way to ask for help? Or do you think it _might_ allow people to help you better if you showed the thing that is _not working_, included any error messages you got and possibly describe what is happening? Because without those, frankly, all people can do is try to blindly **guess**, don't you think?
not that I'm seeing, besides some "undefined variables" warnings here is my exact js file var pxlCount = 0; $(window).on('scroll', function () { pxlCount = $(document).scrollTop()/170; $('p.pxlCount &gt; span').text(pxlCount); $(".strip-welcome-par").css({"-webkit-filter": "blur("+pxlCount+"px)","-moz-filter": "blur("+pxlCount+"px)","filter": "blur("+pxlCount+"px)" }); }); $('.arrow').click(function () { $('html, body').animate({ scrollTop: $(document).height()-$(window).height()*0.68}, 1400, "easeOutQuint" ); }); let confetti_colors = [ '#E68F17', '#FAB005', '#FA5252', '#E64980', '#BE4BDB', '#0B7285', '#15AABF', '#EE1233', '#40C057' ]; let confettis_conf = [ // 1 { angle: 270, spread: 45, startVelocity: 20, elementCount: 10, decay: 0.7, colors: confetti_colors }, // 2 { angle: 270, spread: 90, startVelocity: 30, elementCount: 30, decay: 0.73, colors: confetti_colors }, // 3 { angle: 90, spread: 180, startVelocity: 40, elementCount: 50, decay: 0.75, colors: confetti_colors }, // 4 { angle: 90, spread: 270, startVelocity: 50, elementCount: 80, decay: 0.77, colors: confetti_colors }, // 5 { angle: 90, spread: 360, startVelocity: 60, elementCount: 150, decay: 0.82, colors: confetti_colors } ]; let buttons = Array.from(document.querySelectorAll('[data-fun]')); buttons.forEach(button =&gt; { button.addEventListener('click', e =&gt; { e.preventDefault(); window.confetti(button, confettis_conf[button.getAttribute('data-fun')]); }); });
Shifts on floats are utterly useless.
I'm glad someone else said this. Link the codepen and we might be able to help.
So exactly the same security concerns as in any other API setup (but where rate limiting should be more focused on depth/complexity).
There is little point switching to wa if you already have a js codebase and dont have very strange perf needs. The wa toolchain is young and rigid, so adoption won't be quick. Also, js is well suited to the task of scripting dom interactions with dynamic styling because it is a dynamic scripting language- this is by design. Wa does not provide tools to replace js- wa targeting languages need static types, cant natively support high level features, and dont even get garbage collection. Wa instead compliments js. We may see some cool interop between the two, but the only people I've seen who seriously think wa will replace js so far are .NET fanatics who see wa as a way to address the pitfalls of serverside rendering without using js (hatred of js is a bit more common in that particular community in my experience?)
I'm also unsure, it's just taken verbatim from the original codepen
Your codePen has an additional library included, you must include it in the web page as well. You can find it by going to Settings -&gt; Javascript
If you are looking for a good "bootcamp" I'd suggest checking out lambdaschool. It's a lot more comprehensive than other bootcamp (in fact I'd call it a computer science academy) and they don't charge you up front!
Then that's probably where the issue is. It's the same as pulling 1 file out of a repository and expecting it to work even if it relies on other files. The entire script seems to rely on this confetti library. Domsdey answer below (https://www.reddit.com/r/javascript/comments/97r1ea/js_working_perfectly_in_codepen_but_not_on_web/e4aclow/) should help.
I'm not saying it is or isn't a scam, but empty github accounts doesn't mean fake profile. Sometimes new developers set them up and don't use them. I didn't use mine for over 3 years after I set it up. It could be that the code they built at the bootcamp wasn't pushed to git.
also Hack reactor is pretty good
I did Hack Reactor Remote two years ago and it went very well for me. I learned a ton and I am on to my second job now. They were recently purchased by Galvanize but are still using the same curriculum, so I assume the quality remains good.
That is a weakness in the bootcamp then. Students should be getting some projects on GitHub as soon as they've learned the basics.
I truly dislike Codepen. Setup a virtual box and be your own server so you can code properly.
I don't know, but you would want them to be public anyway. After the bootcamp, you are going to have to convince people you to hire you without any years of experience. Your best tool for this is a decent GitHub presence. Even if the stuff you have out there is pretty amateur, showing it off is better than just saying "I have no professional experience but I swear I can code."
As a senior software engineer that evaluates candidates on a regular basis (100s of interviews total over my career). A github is rarely something that I will ever hire anyone over. Unless they have a well known open source project and many stars all the other work is pretty much irrelevant if Im being completely honest.
I've been there about a year and a half ago. Most people who came were around 30. It was very unprofessional how they did things, I doubt anyone took much from the camp which was 3000euros for 3months not including food or place to stay. The teacher was so monotonous he put everyone to sleep. They didn't really help at all, like I could learn the same thing by taking a free online course, and that was the general consensus. They say you'll be able get a job at the end but that's complete horse shit. It's way better to read an ebook and take like two online courses. I learned way more from it and That's how I got my job.
I’ve done interviews as well and generally skimmed candidates’ GitHub along with reading their resume. No idea how common that is. Maybe I’m the weird one. 
Ive interacted with General Assembly and FlatIron School enough to say they are decent. I don't know if they are worth the money. You end up paying more for the company relationships to get your 1st job afterwords than any of the learning. I dont see how the learning is better than most really cheap online stuff.
There's an option in the settings to show your private repo activity. It won't show details, but will show that X commits to private repository per date.
As an example of unprofessionalism, I remember doing a group project there, and I was busy dating a beautiful girl there at the same time so i didn't contribute much to it. So my group members ganged up to me and wanted to kick me out from this project. I laugh at it now because with my skills now I could cook up the same project by myself in 2hrs. Anyways the bitchy girl manager came to join and gang up on me, and I said something like the group should thank me for working on the project but the managers attitude was like you can walk away because you guys are working for me. Which is funny because last I remember I was the one who paid? Anyways no one got a job from what they learned from that boot camp, maybe from what they learned after by themselves. Greatest waste of time and money if I hadn't met the most beautiful girl I've dated there. 
Thats fair. I guess everyone has different approaches. I will say this to your statement, I wont discredit someone without github projects but if they do have projects that are "shit" I do see them I might judge them haha
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/learnjavascript] [Coding Bootcamp Prague is a SCAM](https://www.reddit.com/r/learnjavascript/comments/97rw57/coding_bootcamp_prague_is_a_scam/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Interesting did not know that. Good to know. I guess the user would still need to opt in though.
For me it reads like "we were using an obviously wrong pattern for the cause, then we started using OOP properly". What am I missing?
I suppose it is true that I am unlikely to be _impressed_ by someone’s GitHub. I can definitely tell if they meet a certain base level of competence and attention to detail. So if your GitHub falls short, it would definitely hurt you. Assuming you demonstrate basic competence though, then I am going to be more likely to call you for a phone interview and (somewhat) less worried about getting you to prove yourself. 
Github is not the only git service out there. They could also have deleted the repo's which is not uncommon, especially if it's code from their early days as developers. I know I removed a lot of old repo's once I knew I had completely surpassed the knowledge level of it. Using version management is an enhancement for a good developer, not a prerequisite. A good coder could find they never need to use git, svn or similar. I definitely wouldn't recommend this of course, but we all have different ideas on how we want to do things.
So your bad review is basically you were a shitty teammate to work with, and your team and teacher weren't pushovers about it?
You're right that things are wanted asap. Skipping best practices is often only done if there is a huge urgency or it's a deploy-to-live critical bugfix. WA won't be the death of JS, not yet at least. Some day, we may see it take over the majority of the web. When building heavy data-bound UI's, being able to iterate over that data much more quickly when processing is going to be a huge benefit. I can't wait for the day when we see a front-end framework akin to React, with a high adoption rate and a big thumbs up from the industry, that has WA at it's core. Right now though, as others said, WA tooling isn't mature enough and that entire ecosystem has a long way to go.
**SOLVED**
I was a shitty teammate for not working on the group project. But that doesn't mean they should literally gather in a circle and gang up on me, including the instructor. If thats the kind of place you wanna go after paying 3000 euros be my guest. But that was not what I signed up for. Also literally everyone who went there was not happy with what they got from the camp. The teacher was too fast paced, even after all that we could barely make a barely functioning website with php which people don't really use anymore. I think they're still heavily php focused whereas the majority of market demand is currently on react and angular.
I hope you guys go there and wish you listened to me. There's a good reason it's the cheapest boot camp besides the one from india
Not to mention there's no passing or failing. You pay them and they teach you and that's all there is to it. And they are bad at it. That's it.
Also, private git repositories are only allowed for paid account, I think for a newb it’s more likely that they are using the free tier
Can't speak for Hack Reactor but I've hired a developer out of Galvanize and will do so again.
Code it without the library.
Thanks a million sir!!!
[react-native-windows(https://github.com/Microsoft/react-native-windows) [react-native-macos](https://github.com/ptmt/react-native-macos) [proton-native (both windows and mac](https://github.com/kusti8/proton-native)
Adding a question mark just makes it fall under [Betteridge's law of headlines](https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines)!
I've never seen or heard about a programming course that would not be better served by being online or a book. The point of these courses is that they force the students to really sit down, ignore all distractions and learn. You can’t learn programming by rote, and nobody can teach understanding. I've taught some people for-loops from multiple angles for hours, and afterwards they couldn’t create one on their own to save their life. With others, you mention the concept once and they write their first game with it in minutes. Neither of these people really need an instructor, they need someone to force them to sit down and do it.
Paid accounts or students, no? At least I think that's how it was when i was in college. 
Php powers like 80% of the Internet. So learning it is very useful. If backend is what you want to work with. React is a front end language. If you write front end code you still need a backend. Saying that engines are useless because steering wheels are more popular now doesn't really make sense. And if you squander an opportunity despite paying for it that doesn't sound like their fault. Oh well 
Ah yeah, that sounds right, I forgot about that
You want it to log without the quotes? I don't think that's possible. But those quotes are just there to make sure the name is legal. You can access that object without the quotes. f.testProp1 works just fine.
I'm not sure where you got the idea that not many people use PHP any more. PHP is everywhere and is used more than most things. The vast majority of the web runs on it. Other things may be more trendy at the moment but PHP is not going anywhere for a very long time. 
Flatiron is good. They’re very selective with who they let in, so they’re mostly getting people with some programming background and a lot of motivation, which helps with outcomes. GA will take anyone with a pulse and a checkbook, and it shows. 
you sound like an asshole, man.
Brilliant thank you. Hadn’t even considered canvas
I love that you're an autodidact but you have to understand that there are plenty of people that simply learn better in a classroom environment (I'm one of them). Being able to ask questions and receive feedback is awesome. Office hours with my CS professors was sheerly invaluable.
Most cars also run on gasoline instead of electricity, just because there's a lot doesn't mean it's better. Just Google most demanding developer skills. Also react plus node js for backend is the way to go. Look up MERN and MEAN developers
Exactly. I use GitHub profiles to find red flags.
Honestly if you're a skilled developer you have no reason to teacher rather than do the hard work and apply your skills on the field.
lol 
You're right about forcing ppl to learn. But the problem is that they lie that they can transform a complete noob into a hirable professional developer. Going off your point, everyone has a different learning curve even at different programming topics. Therefore it doesn't make sense to sit everyone down and go in the same fast pace which everyone barely learned from in prague boot camp from what I've seen in my experience. It's just cash grab and a trap, there are for sure better ways to spend than Prague bootcamp
Your properties does not innately have quotes on them. The quotes are added by the console.log method. You are essentially asking: const echo = x =&gt; { console.log('"' + x + '"'); }; echo(123); // "123" How do I make it not have quotes around the 123? The simplest answer is to not use a function that puts quotes around it. If you don't want your object to have quotes around the properties, don't use a function that puts quotes around the properties. There are no functions that don't put quotes around the properties _built into_ JavaScript. JSON.stringify will add the quotes. You are able to make your own function if you want by looping through `Object.entries(YOUR_OBJECT)` and manually outputting each key-value pair. const objectLog = o =&gt; '{\n\t' + Object.entries(o).map(([ k, v ]) =&gt; k + ': "' + v + '"').join(',\n\t') + '\n}'; objectLog({ hello: 'world' });
I’ve taught a lot of students in basic programming. All I can do is speed up their process, because I can point to mistakes they’ve spent hours on searching for in seconds, but they still have to understand on their own. I think a better setup is a quiet room full of people learning programming with a book or a web site combined with someone who is on standby to answer questions when they arise, instead of a course where someone stands in the front and explains basic concepts like in school.
Any idea how much lambdaschool costs?
Czech Republic is a poor country. I was foolish to expect professionalism from a business run there. It's great for 3day weekend trip but more than that.. The titty bars were alright.
FWIW, the quotes can be a reminder that the keys used in objects are strings. Though I'm also curious where you're seeing properties logged like this. I checked chrome, ff, safari, edge, node and even codepen's console implementation and they each don't seem to quote the keys in the output from a `log()`.
It won't kill JavaScript, but it will largely replace it, eventually. And that is a gloriously bright future. I'm old school. I've been around since before the Web began. I made my first online purchase from a Gopher site. I remember the promise of technologies like [LiveConnect](https://en.wikipedia.org/wiki/NPAPI#LiveConnect), which allowed us to create Java objects and call methods from inside JavaScript. That promise -- the Web as a true application development platform -- was faded, almost extinguished, for a long, long time The language of the Web has been limited to JavaScript forever. The promise of WASM is not just speed; it is that, for the first time, it is now not only possible but *easy* to program for the Web in whatever language you want. We're only at the beginning of what's possible, but the libraries are already being written in several different languages. And then consider that HTML5 has turned the browser into a fully competent virtual computer -- it has subsystems for graphics (WebGL), sound (Web Audio), networking (Web Sockets), peripherals (WebUSB, Web Bluetooth), databases (IndexedDB), persistent file storage (LocalStorage), task scheduling (Service Workers), threads (WebWorkers), etc. So we now have a fully capable computer; we were just stuck using a dinky little scripting language called JavaScript, which Ruby developers have been trying to turn into Ruby for the past few years. Now, with WASM, we don't have to put up with it anymore; our choice, and our freedom, has expanded enormously. May the best language win (and that is definitely not JavaScript).
Are you learning for yourself or some do you have certain jobs in mind? I would advise you too look at job offerings in your area and compare what people are using. My experience was that there were more listings with react for example. I learned vue and I love it, however I will need to look at react to buff up my resume. However it doesn't matter which you chose as a first framework as long as you go all the way with it and learn all the new concepts. Most of them are applicable to all other frameworks and once you know one framework very well, you will figure out the rest way faster. 
My bootcamp had instructors that used to work at Big N companies, and some who still worked at them teaching night classes. I had a really great experience and I'm really happy with my career since then. It really depends where you go.
 function addCoin (portfolio, coin) { if (!portfolio) { return [coin]; } return portfolio .filter(element =&gt; element.coinName !== coin.coinName) .concat(coin); } { let portfolio = JSON.parse(localStorage.getItem('myPortfolio')); portfolio = addCoin(portfolio, { coinName: "Golden Dollar", value: 100 }); console.log(portfolio); portfolio = addCoin(portfolio, { coinName: "2 Dollar", value: 2 }); console.log(portfolio); portfolio = addCoin(portfolio, { coinName: "1 Dollar", value: 2 }); console.log(portfolio); portfolio = addCoin(portfolio, { coinName: "Golden Dollar", value: 1000 }); console.log(portfolio); localStorage.setItem('myPortfolio', JSON.stringify(portfolio)); console.log(localStorage.getItem('myPortfolio')); }
&gt; my theory is Vue is picking up quick and "what if" it surpasses it and becomes the next big hit Only if Vue made something that React couldn't, I guess. They both do the same thing in a very similar way, so if there's a framework to surpass React, it'll probably other than Vue.
Mostly for myself, I did job research - and they usually write in brackets (angular/react/vue) 
Someone is definitely confused. I don't understand why you think you need to re-render an entire page just to update a child. You're clinging to "unidirectional flow" but that doesn't mean "re-render the entire page", and one-way databinding (which is what I'm talking about in this thread) absolutely does not need a re-render of the entire tree. Yes, you certainly can have order-dependent events that become an issue. No, you do not *have to* have those issues, and while yes, batching DOM updates often improves performance in some circumstances, there's a ton of circumstances where it's extra and unnecessary overhead. You don't always need your UI to re-render in every frame, nor do you always have multiple updates likely in your UI for every frame. Facebook is a giant firehose of constant UI changes, so they built a library to meet those kinds of updates. The *vast majority* of software being written does not have those same needs, and when you *do* have those needs, you usually end up making your own libraries and frameworks to tune specifically for that... which... is... exactly where react came from.
Nothing up front, but 17% of your income for two years after graduation, only if you’re making &lt; 50k a year and working at a job taking advantage of what you learned at Lambda.
"In a gold rush you make the easy money selling shovels"
That’s actually not bad for someone that’s cash strapped. Sure in the long run you end paying more than a conventional boot camp but still, not bad. 
Yeah it’s been pretty cool so far, but it has its drawbacks too. If you want anymore info, hit me up :)
Webassembly has a very limited scope. First of all, it has only numeric types. That means text needs to be defined numerically as unicode values. It's biggest limitation is that it runs in its own scope separate from the DOM. In fact, it has no access to the DOM and doesn't know anything about the browser at all. When I hear people claiming that Webassembly will replace JavaScript, I realize they don't know how it works. You have to use JavaScript to load a Webassembly module. You have to use JavaScript to do anything practical with Webassembly because JavaScript is the only way to talk to the browser's DOM. Webassembly was created to address performance bottlenecks that JavaScript has when performing complex processing tasks, such as processing of images, video, audio, financial calculations, games, etc. Webassembly can accomplish these tasks very efficiently. Webassembly was not designed as a replacement for JavaScript, so it is incapable to talking directly to the DOM. Webassembly will be used like Java Applets, Flash and Silverlight in the past for processing video, etc. It won't replace JavaScript but will be used for those particular situations when maximum processor speed is need. You're not going to see Facebook, twitter, etc. built with Webassembly. You might see Youtube use Webassembly for handling the video part. But that would be video processing. The video payer will be created by JavaScript and rendered to the DOM as it always has been. Remember, Webassembly is an interface for performing intense calculations that take full advantage of the device's processor. It is not a platform for creating and rendering web pages. That's the realm of JavaScript. Webassembly was designed to work with JavaSrcript as a utility for crunching numbers as fast as possible. In the past people though JavaApplets, Flash or Silverlight would replace JavaScript. Google even propose Dart as a replacement for JavaScript. That didn't happen. And one last time, Webassembly is not a replacement for JavaScript. It's a utility number cruncher for JavaScript.
Hey same here, did Hack Reactor Remote in New Orleans and had a wonderful experience. There are probably a few things I'd change about the curriculum, but overall it was the best decision I've ever made.
awesome work, does it show notification badges?
Angular Reactive forms are good and also have custom validators too.
GraphQL is a powerful tool, but with great power come great security risks. One of the biggest advantages of GraphQL is that you are able get data across multiple resources within a single request. This allows the potential attacker to make complex queries that quickly result in resource exhaustion. In this brief article we will go through some tips to minimize these risks and secure your GraphQL schema against potential attackers.
I normally look for issues, so if the extension button could show numbers of unread notification (issues+PR) just like the gmail extension shows unread messages count, it would be great.
I remember a company hired me as a consultant to figure out why their software was a mess. The team they'd outsourced their coding to was entirely people who had done these three month bootcamps. They used to use this as a selling point. It was incredibly embarrassing. They knew NOTHING about proper software development. They felt they knew more than me, even though I have a master's in computer science and over twenty years experience.
I'll see what I can get from the API, but that'd be a nice addition. Good idea thanks!
That might be a reflection on your teaching skills too, usually if someone can't understand something you have to present it to them in a way that is relatable and understandable to then. I work as a music tutor and a math tutor. You certainly can't teach understanding but its not that people lack it, its that they understand things differently.
edit: Not to say you are a bad teacher, just that you are a good teacher to a particular demographic.
I've learned it by watching a lot of YouTube videos e.g. by Academind or Traversy Media. Additionally, reading blog posts on medium or official documentations of libraries or the Mozilla web docs can help a lot. But the most important thing of all: Just code - even if it's bad code, you'll learn the most by just doing it and trying to solve a problem
That’s nonsensical, the V8 engine is what WASM runs on. The source code is written in C++ and wasm runs on it using typed array buffers for memory to act like a virtual machine. 
In a galaxy near you very soon. Stay posted.
Lol either this is amazing copypasta or you're a gigantic tool.
Why would you want .NET MVC in WASM, that’s a server application 99% of the code would make no sense running in the browser. 
But as you said, VDOM can just be a library. It doesn't require a framework.
What is great about it is that yours and the schools are aligned. They only see cash if you get a job in the sector afterwards :)
I was using it until last week, where I've migrated to cypress. My tests are fairly simple: an E2E on a form of multiple pages. I had a lot of random issues with some elements using selenium, and the need for waits and sleeps made the tests really slow. Cypress is a thousand times faster both at running the tests and developing them.
Totally agree with you. I wrote this article to help JS developers to understand that groovy has similar syntax.
I think I will update the article with equivalent of JSON in groovy. It is on similar lines. 
If a candidate adds their GitHub to their resume, this is 100% the first thing I look at. I don't hold the absence of GH contributions against someone, but their presence is definitely a positive sign, and getting a window into the kind of code they write is invaluable. sbmitchell is in the minority. r/https://twitter.com/seldo/status/1005120664850743296
Note: Experience much better on desktop / laptop, with private browsing / incognito turned off!
Never heard of the pyramid of doom?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [denysdovhan/wtfjs/.../**README.md** (master → 6f4ec33)](https://github.com/denysdovhan/wtfjs/blob/6f4ec3325fe0af58bfa1b74323a7219dcc2fe696/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e4b29zr.)
If simpler, `if (el) { el.value = result; }` I do like when things are explicit by stating `null`, but `getElementById()` will either return the element (an object, truthy) or null (falsey). No other falsey possibility, such as `[]` or `0`.
Nah I've been doing node professionally a few years. Just because there is a point to something doesn't mean it's a good point, or that it's the best point to make. More specifically, sometimes developer speed is more important than performance. 
Now I want to start teaching coding. 
PHP and React do completely different tasks. You are right that you did not learn anything there.
You assigned a value to the 1st item, and then to the 3rd item. In JS, any variable that was not assigned a value is `undefined`. What value would you rather have? 
Note that `x[1]` does not have a value. It doesn't exist in the array. The "[1,undefined,3]" is just a representation showing that there is nothing there (nothing being different than `x[1] = undefined`). In fact I think most browsers will represent this with "empty" rather than "undefined". You can test this using `in`: x = [1] x[2] = 3 console.log('1' in x) // false x[1] = undefined console.log('1' in x) // true - now has a value, even though its a value of undefined
Array indexes start at 0. When you do `x = [1]`, it's actually the same as `x = []; x[0] = 1`. When you do `x[2] = 3`, you resize the array so it can fit 3 values (indexes 0 to 2). But because you don't set any value for `x[1]`, it is initialized as undefined.
Private repos aren't free. They likely aren't paying to hide evidence that they have programming experience. No repos makes them look worse as devs.
The one I went to in addition to the excellent instructors also had career coaches who spent aroj d 5-10 hours per week with each student even after graduating helping land interviews and work on career readiness. It definitely helped with my search
Private repos are free for students, or anyone with an edu email.
The way you phrased your first reply, it sounded like you were saying that of college programming courses as well.
By this reasoning all education would be a scam.
Any feedback on my promise helper would be cool: https://github.com/axelf4/promise-trap.
I mean if we're making it concise, why not `el &amp;&amp; el.value = result`? :)
We'd need to see more of your code to understand why it returns undefined. I think I should mention that even though you use const on your variable, the values within the object can still be changed whenever without error. If you want the key value pairs within the object to be immutable, look into using Object.freeze(). If you use this, it'll at the very least notify you of where it's setting the value in your code. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze Also, you'll need to use this on each level of the object of you have nested objects. 
That setup may work better for people who learn exactly like you, but some people (myself included) tend to learn better from a good lecture. The quality of the teacher is also important. A good teacher has the ability to break complex topics down in a manner that is easily consumable by the students. They can also read the expressions of the class and know when the students aren't quite getting it and come at it from a different angle. This is something a book or video can't do. Of course, you still need actual exercises where the knowledge is used to help cement it. 
`[]` is not a falsey value. `[].length` is however.
That setup may work better for people who learn exactly like you, but some people (myself included) tend to learn better from a good lecture. The quality of the teacher is also important. A good teacher has the ability to break complex topics down in a manner that is easily consumable by the students. They can also read the expressions of the class and know when the students aren't quite getting it and come at it from a different angle. This is something a book or video can't do. Of course, you still need actual exercises where the knowledge is used to help cement it. 
 let portfolio = JSON.parse(localStorage.getItem('myPortfolio')); if (_.isEmpty(portfolio)) { portfolio = [newCoin]; } else { portfolio = portfolio.filter(coin =&gt; coin.coinName !== newCoin.coinName); portfolio = [...portfolio, newCoin]; } localStorage.setItem('myPortfolio', JSON.stringify(portfolio)); Might be nitpicking, but this will save you code and look cleaner
(document.getElementById('foo') || {}).text = result
Neither, you should learn Angular.
Great course, I really enjoyed it, definitely recommend it to anyone starting out or even pretty experienced with JS. 
 ¿Por qué no los dos? 
I went to it last year as well. Was the teacher a blond guy? We made the same complaints about his monotonous tone, but nothing got done about it. Also made complaints about the guy who taught some php classes, because he called a student stupid for not grasping a concept (he actually said 'and I thought they said there were no stupid questions'). I complained that we were only spending a day weeks apart on JavaScript. The founder told me that nobody learns JavaScript anymore, frontend isn't real programming, and to learn a JavaScript framework instead. They got a 17 year old to come in to give tutoring later on in the course. He was volunteering in Prague as part of his college application so I guess they weren't paying him. I asked him to talk through a problem I was having, and he gave me completely wrong tips. Every day they made us do a standup to discuss what we thought of the previous days class. I think they must have read that this is what companies do, because they really thought it was an amazing concept. It hardly ever mattered what we said, the days classes would go on unmodified. The accommodation offered is run by the parents of the bootcamp founders, who are brother and sister, and are not programmers by the way. They tried to keep my deposit by saying that I had people staying over when the other guys from the bootcamp went back to their respective countries, only I had proof I wasn't even in the Czech Republic at the time. They have a team of programmers in another room building a real estate app, and I suspect that is their real goal, with the bootcamp being income to fund it. They have one of the programmers from that come and give a few lessons in jQuery and CSS, but nothing you couldn't easily learn yourself. There's a night at the end of the program to present the final projects, and they ask you at the end of it to write course reviews. You can imagine that people aren't writing unbiased reviews if they're being watched doing it, and the founders have the review website open there and then. I think we were about 15 people to start off with, and 4 dropped out. They don't do any formal technical interview to assess candidates (like Ironhack did with me), but they'll happily take the 3000 euro off you. Lastly, there is little to no engagement with the local tech scene in Prague. I went to meetups, and nobody ever knew it existed. Their Facebook posts get 1 or 2 likes per post, and those are usually from the founders - https://www.facebook.com/groups/codingbootcamppraha/ I strongly advise anyone thinking about it to continue saving their money and look elsewhere.
\&gt; Using version management is an enhancement for a good developer, not a prerequisite. This is the first time in my life I've seen anyone argue that any non-trivial developer need not understand version control.
Googling "[Should I learn react or vue](https://www.google.com/search?q=should+i+learn+react+or+vue)" yields over 7,500,000 results. This article never mentions vue outside of the title, and never arrives at a conclusion.
You're looking for the wrong answer.
Yeah I got it working already :)
The 'undefined' only pops up when the console *prints* the array; the actual stored data is an object {0: 1, 2: 3, length: 3, __proto__:Array(0)}. This is largely the same as how Lua implements arrays, except that JS also keeps track of a 'length' property. 
What if they went into a job that doesn’t host its code on GitHub? I think the personal project mania is exhausting. 
I'm actually doing this myself right now. I went with react/pwa for the MVP build. I chose react because the amount of tutorials and packages dwarfs angular/Vue, or at least did when I was starting. It also has the added benefit that if PWAs dont take off or I just need to build mobile apps I can just reuse a lot of my code in react native.
The part where everybody starts somewhere. You may not be the target audience but that doesn't mean the message isn't valuable to others
&gt; The founder told me that nobody learns JavaScript anymore, frontend isn't real programming, and to learn a JavaScript framework instead. What the actual fuck is this entire trainwreck of a statement. Sounds like one of my old CEOs. Actual idiot beyond words.
Generally I would agree with your point, but not in this case. If you are starting, you are better off starting somewhere else than a medium article explaining basics with a tone of invention of something new. 
I only know Vue, and I am falling in love with it's simplicity, so that's what I'm choosing to learn at the moment. I can't really compare to react since I haven't used it, but I would have to imagine react is much better to learn if your goal is to find a job. I'ts got first mover advantage and Isn't it a product of facebook and aren't they continuing to develop it? Facebook has basically a bottemless pit of resources and community. Vue is like 20 guys, and a much smaller, albeit passionate growing community of developers that contribute. I would have to imagine those resources will make it "win" for lack of a better term, in the long run. From a technical standpoint, speed, etc. I have no idea which is better although I've heard they are pretty comprable, despite Vue being David and React being Goliath 
What do you think is ES6 and the general direction of the JavaScript ecosystem?
I had a GA graduate tell me he was 3 months without a job and asked me for advice. I told him to brush up on data structures and algorithms and he replied with, "I'm not trying to get into Google". How is it possible to write a program without data structures to store data in, and without any logic stored in an algorithm? ¯\\\\\\\_(ツ)\_/¯
But a DOM query with no matches doesn’t return an empty NodeList, it returns null 
That's actually not correct, the '1' index is not initialized, what you actually get is a sparsely populated array, this can be demonstrated by running Object.keys on 'x' this results in ['0','2'], as you can see the object does not contain the key '1', but when accessing a property that is not yet defined on an object returns undefined.
Posturing JavaScript as innately weird is just a gimmick paid instructors/lecturers use. People love to show you how true + true == 2 and claim the language is super weird and confusing and you should follow their blog or buy their course. But if you have a basic understanding of how the language works, everything "weird" makes perfect sense. 
Don't really know why you're getting downvoted. `getElementById` returns `null` if there's no match, so for OP's case, you're right. But it should be noted that `getElementsByClassName` does return an empty `HTMLCollection` if there are no matches found.
https://altbryson-check-please.firebaseapp.com Js is a bit of a mess but I just went with Cordova firebase and es5.
Yeah, my bad. I oversimplified the statement and did it bad.
I'm working on a minimalistic MV framework based on backbone. But thought for modern browsers. With no dependencies. * Instead of collections with underscore methods, you use arrays that now have almost all the underscore api. * Views use only native dom methods, instead of jquery. * Models use getters/setters to trigger custom events when a property is changed.[https://github.com/8tentaculos/rasti](https://github.com/8tentaculos/rasti)
Your master may be more or less relevant, but 20 years of experience make you a senior developer. The bootcamps are really cool to take someone with experience in another field into a junior developer who could join a company, but will need to be baby-sitted for the next 2 o 3 years. Starting a project with only junior developers is the recipe for disaster. 
You should probably watch the course then, because that is the purpose of this course, to build the understanding (although he goes further than what I would consider the basics). I watched this course and it explained everything clearer and better than any other javascript course did, although he may not be the most 'exciting' instructor.
My preference would be vuejs with the nuxt framework, it also has a PWA mode. Nuxt and vuex have been super pleasurable to work with in my cases. If you go with react, unless you really need it, i'd recommend ditching redux in favor of something simpler like mobx. PWAs are still kind of shitty on iOS IMO. If you need to build an actual app, I'd suggest trying out React Native. It's not perfect, but unless you're a swift/objective-c veteran you'll generally hit the ground running faster with React Native. Keep in mind sometimes React native will take you 90% of the way faster but then you have 10% of the way to go, which is handling native issues that might arise which can be tricky or confusing. 
Bootcamps are extremely overpriced, if you compare it with the alternative of spending less than 200€ in several courses in Udemy and CodeSchool. On the other hand, I've seen several demo-days in code schools and the projects they manage to put together are quite impressive. Another problem of bootcamps is that everyone who pays gets the certificate. The fact that someone attended a bootcamp is no warranty that that person actually learned anything. 
I see, I thought the link did not work. Indeed, you'll have to sing up to pass the Quizzbots or human validation protocol. The validated skills will directly appear on your Indorse profile!
I actually did not know that, thanks! I’m used to the newer methods, querySelector and querySelectorAll
I just started studying a few weeks ago. I started with HTML, CSS and JavaScript. I suggest the book by Jon Duckett " JavaScript &amp; JQuery" on amazon. There are free options which I am also using. The Odin Project teaches you the Full Stack of front end and back end development . Through Odin Project you with find a bunch of resources such as codecademy. On youtube WhatsDev is very good at making JavaScript videos. Good luck.
The relevant team has been informed. Thanks [Cunhinka](https://www.reddit.com/user/Cunhinka)!
I agree with you. The problem is these bootcamps almost brainwash their students into thinking they're elite, when in reality they are absolute beginners.
That's insane I didn't know that, ridiculous that they don't allow the other browsers to use their own rendering engine... So Apple is playing worse than IE style, "terrible browser that many people use", and Apple being even worse to FORCE the user to use their shitty browser... This adds one more item to my list of reasons I'll never have an iPhone lol, thanks for sharing that I still want to learn that :P one day Apple will allow that
Why don't you use a server to do the scraping? 
Figured it out there was a JavaScript error happening elsewhere within our program that was causing this odd behavior. Thank you for your time.
React may have the edge since there's so many jobs for it. However, I have a personal preference for Vue - I just find it so much nicer to use and learning it was a breeze. Although tbh - I wouldn't worry too much. For a lot of jobs all they care about about is that you have experience with SOME frontend framework. The important concepts are common between them. I just started a new job recently and I've been using React. I had no experience with React beforehand but had done quite a bit of stuff with Vue at my old job - that was enough to get hired.
Try a bit of both, and see wich one you like more. I'm getting into react, after i i'll try vue,
For anyone interested in getting up and going creating a Chrome extension with TypeScript (and React), I created [this seed project](https://github.com/martellaj/chrome-extension-react-typescript-boilerplate) a while back that will serve as some quick boilerplate.
Affiliate advertising.
Quasar-framework.org with postgraphile
Senior role interview probably vary a lot more than a typical mid-level interview, since from my experience there's a different meaning to 'Senior' everywhere. Some places it's more of a managerial role, others its more of a technical knowledge role. Nevertheless last time I interview it was for a place that also uses primarily React and Node. Here's a general gist of what I was asked for a mid-level Front-end interview with some Node added since I would be expected to write some of that as well: - A lot of basic to intermediate js questions. Things like context/`this` in Javascript. Prototype knowledge, inheritance model, asynchronous behavior (callbacks, promises, async/await, a little bit of generators but only because I mentioned it), the event loop/callback queue - React specific questions revolved around patterns like Higher order Components, Render Props/Function as child, why use React in the first place? Comparison to past popular frameworks as well as current ones (since I was coming from a place that used Vue), JSX vs templates, asking about past projects, etc. - Node questions revolved around more of the event loop, general http questions, a little graphQL (i had never used it but heard of it), some specific framework knowledge around express/koa (they don't use express). I was interviewing for more of a Front-end focused role, but expected some Node stuff anyway. Not as much around Node was asked, but a lot around general JS stuff. So the interview also consisted of a lot of knowledge around CSS, general layout best practices (semantic html), performance in the browser, etc.
I meant round down the result of dividing by two if it is not an integer. This discards the LSB.
Thanks for this!
Thanks. I too learnt C and C++ watching YouTube videos. Wanted to know how other people learn programming. 
Really? Those types of questions are all it takes to get a senior level role?
Sorry I added that it was a mid level row. There were also some architectural questions, but my senior developer told me he was asked most of this as well, but a lot more on architecture and managing.
Building on others' suggestions I would try this... This line once: var placeHolder = {value:""}; Then repeat as necessary: (document.getElementById("element") || placeHolder).value = whatever; This will either fill your input if it finds it correctly or the placeholder object when it doesn't find it, therefore stopping any errors. In theory anyway, on phone so can't confirm.
Similar boat. I'm anchoring on some react on a CDN (via Netlify) and Lambdas for the backend. I AM looking into Flutter for native apps. The native apps are 7-10 screens that then embed a portion of the website for certain pieces. Also looking into a pubsub framework like AWS IOT or ably.io to have real-time channels for communication. 
I would not recommend this. Just write a function to abstract away the null check. For instance function setValueIfPresent(element, value) { if (element != null) { element.value = value; } } setValueIfPresent(document.getElementById('123'), 'value'); setValueIfPresent(document.getElementById('456'), 'value2');
Great... glad you feel that way. Fancy sharing WHY you wouldn't recommend it instead of just announcing it? What benefits does your way have that trumps the original suggested way? Any performance gain? Better debugging?
I don’t know the ratio of scams/cash grabs to legitimate camps, but there are definitely more than a few good ones out there. However, people need to do their due diligence. Ask current and former students you can find on your own, not just ones introduced to you by the bootcamp employees. If it feels easy to get in, it’s not a great sign of how well much they’re going to challenge and teach you. 
In HTML: &lt;script type="module" src="./main.js"&gt;&lt;/script&gt; `main.js`: import {my_var} from './modules.js'; `modules.js`: export const my_var = "value";
Yeah there's definitely credible ones if you do research. A good indicator is whether or not they're willing to offer assistance with job searching afterwards
Yeah that’s not all bootcamps. The more well respected ones keep reiterating that it’s just a way of speeding up your initial learning and giving you the confidence that you can handle it from there. While bootcampers who are arrogant is definitely problematic, it’s more problematic that they are getting jobs where they can’t be shown the right way. I would be mad at the people who are hiring them for the positions you described, not for them taking the job. 
I have been in the field for 4+ years and formal data structures and algorithms almost never come up in the sense that they are usually covered in interviews. Obviously they are great concepts to learn (especially since they are often asked about in interviews) but I think they are heavily overrated as a way to judge someone’s programming skills. 
So, my thoughts; vie is heavily endorsed by laravel, so if pho dev: vue React seems to be gaining the Python crowd Maybe I’m wrong and should shut up My drunk point is, what backend do you like, are you looking for dev jobs, etc
I took a bootcamp a few months ago and went solo on a group project. A day before the presentation all the TA's were worried and grilling me about whether or not I had a project since I made my repo private and they couldn't creep on it. A bunch of other students were talking shit to me to acting like they're the best coders on earth thinking that I was going to bomb the assignment. Walked in presentation day and blew everyone away with my project, no one dared talk shit to me in that class again. 
Most places that I’ve interviewed at don’t ask many framework specific questions. Mostly pure JS coding questions (event emitters, recursion, etc...). Before I interview, I’ll typically practice on one of the many coding sites such as CodeWars or CodeSignal for a few weeks. Focusing on minimizing complexity, pure functions, etc... That’ll be for the technical portion. For a senior title you’ll usually meet with someone from product to get a better understanding of how you’d work with a product manager. You’ll probably end up meeting with some managers/directors of engineering, etc...
Thanks! Been looking for something like this! 
Please review my lib. Is it worth anything? Thanks!
I've gone angular/ionic. Can't say I have any complaints, however some might think angular learning curve is too steep. But once you get it, it's very quick to knock out components and modules.
I maintain the code of a team of unicorns who use whatever whim strikes them. :| 
Safari has committed to supporting pwas. Not sure when.
In most programming languages, arrays are contiguous, indexed sequences of values. In JavaScript, they are dictionaries from indices to values. That explains the hole at index 1.
How I mentioned before I think is weird, it's okey having a bunch of devs doing experiments with some new tools, but in my current job we can't live in the edge and lose money.
Wish I had this back when I first tried using my React knowledge to make a Chrome extension but couldn't figure it out. Thanks for sharing.
Can anyone tell me if it would be possible to use a custom chrome extension to block things loading on particular pages? For example at work we use Jira and it's really slow because of dumb plugins. 
&gt; You're clinging to "unidirectional flow" This was the entire context of this thread. The initial post claimed that you could use unidirectional flow as a general model without react, and I responded that the performance would suffer without a virtual dom. I never said that you need the virtual dom to build a UI. My only claim is that you need it to do unidirectional flow performantly. If you would spend some time to understand what unidirectional flow means then I'm sure it would clear up this misunderstanding.
They are both really really good compared to the stuff that came before them. I tend to gravitate towards Vue because I just don't think the philosophy facebook takes towards developing open source tools and designing api's suits my personal sensibilities that much. I still use react heavily in my day job and don't see any reason why I propose switching to Vue.
What do you need help with?
Real men code for ie3
How does pay work?
Complex functions, app development, react, API's especially, and utilization of libraries beyond my scope. Someone who can review my code and truly discipline me to script good looking code that's efficient + help explaining their thought process on making fast algorithms would be a plus. I intend to pick the brain a lot and also intend on studying viciously until I'm at the skill-level I'm looking for. Kind of a mentor role overall. But, my biggest struggle is creating powerful applications with API's. 
 I want someone who will assist me in the upcoming roadblocks I'll face and mitigate their impact on my growth by explaining the issue at hand because I've wasted a significant amount of time on things that were more simple than originally presumed. 
your saying sounds like you are the author.
Or they're like me where all my projects are private.
Has anyone in this thread read the article at all? Of course not. But they all blurt out things that have nothing to do with it anyway.
Are you looking to build full-stack apps when you say “APIs” or just frontend? Are you looking at React in particular?
Full stack development and no not in particular. 
Interviewed for a Mid/Sr JS Dev role recently (React/Node) 3 hours of whiteboarding, back-to-back interviews w devs on diff parts of the stack, talking thru how I would approach building imaginary apps &amp; features. Writing the code for diff features on the whiteboard. Most of what we talked about was vanilla JS. Also no google 🤷🤷🤷🤷🤷🤷🤷🤷 Sr-level Interviews can be stressful. Don't panic, best thing u can do is relax Remember: You've been doing this shit all day for a long time. You're a much better developer today than you were 3 years ago AND u only gonna continue to improve- They'd be lucky to have u 🙏
I mean Ionic 4 is just web components (which means you can use it with whatever you want). I have just been very unhappy with the quality of ionic components. I use the &lt;ion-toggle&gt; and if you change your ng-model state it does not update. Also the whole build chain is unflexible and very outdated. Ionic serve breaks every second day for no reason and has to be restarted which takes a very long time. The other bad part of ionic (3) for me is angular (or to be more exact zone.js). Hooking into every promise resolve, setTimeout etc. is just a very bad idea. And it also can't work which can be shown with very simple examples. I also use web workers a lot and they break zone.js in seconds by principle (there is no fix). Also the speed is bad compared to react.
Prettier has just enough completely absurd formatting opinions (why in the world would you *collapse* a multiline object/array into a single line if someone wrote it that way?) that it consistently produces less readable code. `eslint --fix` does just as a better job and is more flexible anyway. I don't see why anyone would use prettier.
So, the problem here is that anyone willing to accept $50 an hour for their time probably isn't of the experience level to help you in the way you're looking for. The best teacher I ever had makes $200+ an hour contracting. So you're almost certainly going to get a bunch of offers from underqualified folks who don't even have jobs themselves.
you don’t have to be “the best” to tutor someone. you just have to be able to teach them something.
This. You'll pretty much need to as soon as you hit a page you want to scrape that has no CORS allow headers anyway. 
Generally speaking nobody wants to waste time coming up with a full rule set. Unless you save one that you build up over many years it's just not gonna work, and even then there are so many rules that you might want that you would never know of. That being said I don't like prettier one bit, it produces some truly unreadable code.
He's not just looking for something. He's asking for a lot. 
Great to know. Thanks! I'm having a lot of fun building out apps, so the more I can learn, the better.
you wouldn't want the entire application in wasm. you would want view model data and much of what is transformed in controllers in wasm. the logic for the API and its related controllers would remain in server side code. Blazor allows you to take the mvc/razor templates and that view model and push it to the client. There is plenty of transformation of data that does not need to be performed server side and rendering the templates also does not need to be performed server side.
If you're ever looking to learn Vue, I'm your guy.
Brainfuck obviously. Who wants another cookie cutter solution when you are being hired to be creative?
Bro, I just wanted someone better than me who was maybe further along in his education and found quite a few takers. 
I don't know why you're getting down voted. Any legit javascript consultant are providing their services for much more and for companies that will actually pay them. All I can see happening here is OP throwing a bunch of requests at a "teacher" then not paying them because OP didn't feel like he got his money's worth.
I think that phrase is only meant to convey that Java and JavaScript are not the same thing? I can't really tell what else you're reading into it. (Downvoting your comment just for being cryptic seems a little rude though.)
You could possibly do this already with an adblocker extension (like uBlock Origin) if the plugins have their own js files that are loaded.
Thanks for responding. People like to say that they are not at all similar, and it's just a coincidence that they both contain the term "java", like car and carpet. To me this comparison doesn't fly for the reason I gave already. I don't believe I was being cryptic. Java and JavaScript are both programming languages and even have some methods in common. So cat and catfish seems like a much more suitable comparison. Frankly I have no idea why anyone would downvote me, let alone multiple people. 
I actually made a chrome extension for my university recently and a lot of students liked it. I’m pretty sure a lot of people here can make something similar for their universities. Here’s an article I wrote about how I made the chrome extension (along with a brief description of the basic components that make chrome extensions): https://realdevtalk.com/2018/08/05/launching-terp-data
Time is money, yes. Life is not a charity and rent is not cheap. ☹️
Make it. 😉
I have collated set of questions for the same. I have been interviewing and at the same time appeared for interviews on JS for past couple of years. I have created app on this **(there aren't any ads)**. Some portions are missing like inheritance, ES6 etc, planning to make changes soon. [https://play.google.com/store/apps/details?id=gamesmint.com.jsone](https://play.google.com/store/apps/details?id=gamesmint.com.jsone) . All feedbacks are welcomed :)
depends, like /u/xkero said, if the plugin is loaded in as it's own file you can. You would only need a manifest and a background script using [chrome.webRequest](https://developer.chrome.com/extensions/webRequest#examples) if it's embedded in the page, you could try to interfere with the script. can't say 100%, Id have too look at jira pluggins
If i had more points to give, i'd give them.
Im just a Junior web developer with a couple of projects but I would like to know about this too, upvoting
[removed]
Hey dude, looks like I'm the first one here, so I've just gotta say this: I'm on my mobile, but I pulled up the repo, read over your code, and decided in under 3 minutes that I would hire you on the spot if I was ever your interviewer. Readme is simple, but complete. Variable names are clear answer make sense. Good demonstration of understanding ES6 features. I'm going to file this away under my "I wish I was this good" folder. Thanks for sharing and for the inspiration. Clear and simple is extremely difficult.
Eh, what OP is asking for doesn't require much expertise at all. But the solution is like all contacting, payment before delivery. If contractor is willing to work otherwise it should be a red flag but really why do we care if either OP or contractor gets scammed. 
He misspelled “developer” near the bottom. Literally unhireable. 
When being asked simple questiongive experienced answers. Talking about testing, ease of refactoring, and scalablity go far with me when I am interviewing. For me senior devs are hires that don't need fundementals train. Know and express deeper understanding of solutions. If you can teach your interviewer something, it will make you stand out as an applicant. For example if someone asks you to implement something simple in angular be able to explain how every part works not just sitting there and saying framework magic. Read and understand official documentation and know when exceptions are acceptable. Mostly be right and sound intelligent but pleasant doing it. Sorry for the long post I have been conducting interviews recently and the level of unpreparedness has been frustrating 
Thanks dude. Nice to read this :)
Build something in your time off that does show off the quality of your code. 
[removed]
This is going to be unpopular but I'm personally not in favor of sharing personal repos. I've never done it and it hasn't hampered me. Additionally, its rare for me to interview anyone + review their repo and it come out positively for them. It's always "whelp this this bad security, I'll ask about it in the interview" or "wow this code is super messy" or "why is tutorial hello world level stuff in here?" Etc. If you're passionate - I'll know in the interview. If it's just a job but you're skilled - I'm still going to give a thumbs up Senior level interviews are 100% formulaic regardless of company: 1) skim resume pick a single line that interests me. Talk about it. I care about what you say / was the solution well reasoned 2) Ask a tough programming question - if you solve it, cool. I'm more interested in how you solved it (you should solve 90% of it though) 3) Questions for me closer, doesn't really matter what you ask (no questions are fine too). If the interview was positive I'm really just trying to sell the company to you / why you should like it here Formula to solve problem: Good questions to clarify problem (irrelevant questions -1, no questions, basically a guaranteed fail) Make a game plan (you can skip this but it gives me a chance to help and say "but what about X" before code gets slung - saves you time and only makes you look better) Solve aloud (can't read your mind, but don't ramble that's not going to be well received) Review code (run through the complete flow, there's always a bug and I saw it, fix it and all is good) Test code (you made sample data when asking questions right? Test it. Talk about edge cases you found after questioning - it's fine to miss edge cases just show you know them) Minor details people always trip on but don't matter at all! Code style: only clean if you have time otherwise don't bother (assuming the code can be read... but if it's unreadable its probably because you didn't make a plan and you already failed) APIs: don't know the exact name ask our make it up and say "it's close to this and it returns that" And BOOM you just passed 100% of senior interviews. Decide how many new Ferraris you will need and start shopping for some new exotic animal leather pants As a side note: I only give enthusiastic approvals and straight failures (never a 3/5 soft pass). And I don't want to dampen your spirit but I do fail more than I pass... But if you're running a panel of interviews you can totally fail one and still be confident on getting an offer. I'm a harder interviewer than most imo
As I commented on the YouTube video you will probably author another framework in the process. The video is not talking about routing, forms, http interception, state management, bindings, layouting, sanitizer, dependency injection, etc. 
React, Angular and Vue all have enough jobs. Doesn't matter what you pick. Also you can pick more than one, obviously.
I’m having a battle myself trying to choose between networking and Webdev. Is there something pushing you away from IT to webdev? 
Take a look at proxies: http://exploringjs.com/es6/ch_proxies.html
Senior devs not only understand how the tech stack works and can improvise on it but also are able to coach coworkers, manage stakeholders etc.
You're not alone.
While it shouldn't really break it all, there's a superfluous `}` at the end of the line with the `if ( ... amazonPrice ...)`.
There's only one thing I hate more than prettier wrapping my concise and short lines into multi-line indentation madness, and it's the fact that it doesn't let me configure it to not do so.
Client side scraping would avoid problems with IP blocking. That is, if I can get it setup right
You could scrape whatsmyip.com
in ES6 you could use Class Inheritance. `class app { /*your global vars and methods*/ }` `class car extends app {/*use app methods here*/}` if you have to support none ES6 Browsers take a look at babeljs (compiles ES6 Syntax as ES5 code)
This used to be done in PHP many many years ago and then deemed bad
Great! Thank you!
&gt; I've never seen or heard about a programming course that would not be better served by being online or a book. &gt; I’ve taught a lot of students in basic programming. All I can do is speed up their process, ¯\\_(ツ)_/¯
&gt; The team they'd outsourced their coding to was entirely made up of people who had done these three month bootcamps. This post is about a specific scammy bootcamps and you're here generalising about all bootcamps. Obviously in 3 months you can hardly become a good software engineer. But it's enough to know how to code and to get a foot in the industry, which is the entire purpose.
I’d say just save the money and take a few courses on something like Udemy and hit up a local meetup. 
Is it just me or it there no "good, bad and meh"?
If this component uses \`state\` to store chart data then you should use \`setState\` to trigger update. Otherwise passing new data to props should work.
Didn't be harsh. 
Some things; \- Emphasise the things you want to do in the future on your resume. Don't make it a show where you put in everything you have ever done. I want to know what your current interests are (most of the people did a bit of C# somewhere, but I leave it our of my resume because I don't want to do that professionally). \- Not having a public Github account makes me weary. Github is where most of the open source repos are, so I feel it's a bit weird to be a web developer nowadays and don't have a Git account. An empty account is better than none \- If I'm hiring a javascript developer, I assume they have skills in HTML / CSS. I don't feel the need to have that mentioned in a resumé \- Skill graphs are overrated. They tell me nothing. If you say you are a 3 star Angular developer, that assumes that you know how much there is to learn until you are a 5 start one. If you know that, that makes you higher on that ranking etc. etc. I don't know you so I don't know if I can trust your skill chart. Our proces is a follows: 1. Small chat, getting to know each other (I will tickle a bit with some programming stuff, to see if this is where the interviewee's passion lies) 2. If there is a click, we do a small 'pair-programming' session (I've done it numerous times, so there is not really a 'pair' but I'll be there to answer questions) 1. There are constrains in the application that I will mention from business logic, so you will have to infer what that means (ie, hypothetically, the app should be able to move to a different view and when we come back, I want everything to be as is --&gt; Put that stuff in the redux store so we can return it in place later, etc.) 2. I'll tell the interviewee very explicitly I'm not there to test his syntax skills, but his way of thinking. I don't want him to spend 20minutes of valuable time putting everything into subcomponents. Just telling me that he wants to do that is enough. Same thing with over optimisation. There is an hour and a half to do it in, it is better to have a slow-ish version that works, then have a fast version that doesn't. 3. Meeting with the rest of the team and my superiors. This will be a 'hire unless' moment. Everyone can way in with their concerns. If there is something that makes this a no go, we won't hire.
Yup. I think soft skills become at least as much important as tech skills, when you are a senior
&gt; For example if someone asks you to implement something simple in angular From senior dev i would expect: “Do we really need angular for that? Why?” 
You can't know how to code in three months. You could argue you know how to be a terrible programmer.