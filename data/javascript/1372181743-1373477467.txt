Okay... the two are programmatically equivalent. They have exactly the same output... a DOM Element. &gt; when there's clearly negligible performance difference (or any other negative impact on code quality) So **considering $('#foo')[0] is [92% SLOWER](http://jsperf.com/jquery-id-selector-vs-vanilla) than document.getElementById('foo')**... and considering that any JS developer worth a damn knows what document.getElementById() does... you're wrong. Sorry, my contrarian friend, you've picked the wrong thing to be contrarian about.
CJS + Browserify (automated with Grunt). [I wrote a long article about this](http://aeflash.com/2013-03/javascript-module-systems.html) a while back. I'm thinging about updating it to talk about Component, Bower, and Ender, though.
It's ok, the other day I wondered why arr.concat(["a"]) wasn't updating `arr`....
I first read it that way too.
Has jQuery dependency and doesn't support IE. Looks neat, but I'll pass.
Not familiar with Angular, unfortunately. It's in my (long) list of stuff to learn though!
I read this article, then took some advice you gave me while developing it. I would write an article about my experiences but 1) I'm lazy, 2) I'm a piss poor writer, 3) you already did it :P
true, and git nowadays is years advanced over that first release he made. It wasn't really a comment on how the developer of js git doesn't know what he's doing, i'm sure he does, but more of a general, wow, linus did this in a couple of days kind of thing.
Also known as actionscript.
The use case you describe in your first paragraph is something that is already supported by Keys.js. You can save your bindings as a string or an object, and call Combo.fromString or Combo.fromObject, and then add your bindings like normal. The bulk serialization of bindings is a convenience (one that I've used in more that one instance), not a requirement. You can make the argument that the feature is bloat, but really what you are arguing is that it is bloat *for you*. There are plenty of others who would find the feature useful. Most of your last message seems to reflect a lack of understanding about the relationship of classes to objects, and how serialization/deserialization plays a role in the difference. It's in that relationship which my decision to provide convenience methods like 'deserialize' or 'fromObject' were written. If they are bloat, then they are necessary bloat in my opinion.
AMD/RequireJS all the way
scoped evals with Function constructors are totally ok. That's what underscore uses for its template engine. So eval is not evil at all.
A client im currently working for has been praising us for weeks about how nice the development site is looking and in a recent correspondence they sent a snapshot to illustrate a point, it looked like IE6 circa 2001. We dont support anything less than IE8, but it was refreshing that they didnt care. I wonder if they know what the internet looks like these days? Surely one of them has a smartphone or tablet. It is an automotive manufacturer in the rural parts of the deep south, so maybe not?!
i like this, but i am not sure if Chromium 25 is supposed to be an old/outdated browser just because I use the default repositories in ubuntu. // edit i read your source is probably makes sense to only reward up to date browsers, but the terms you used "modern browser"/"old browser" confused me.
The post already had one use case: lazy loading. Another way to do it would be to append a &lt;script&gt; tag, but the browser should block while the file is being downloaded.
You should judge it on it's own. And it is open source so the community can pick it up should it be dropped. Look at Definitively Typed to see how involved the Typescript Community is. Also it's compilation out put is regular readable javascript. There's nothing MS specific about the code it generates nor any of the constructs in the language. In fact if you look at the discussion you would see they are keeping it as close to javascript concepts as possible. Like the ongoing topic of not changing 'this' to be different from the way it behaves in standard javascript. http://typescript.codeplex.com/discussions/429350 They are trying to keep things inline with ES6 and differing where things aren't finalized yet. http://typescript.codeplex.com/discussions/446695 Here's a good article to read for someone elses experience. http://tedpatrick.com/2013/06/25/7-months-with-typescript/
Can you explain what you mean by "assign to an undefined parent"?
Except the people outside MS who are already patching and altering TypeScript, including features which the team have said they wouldn't include (namely because they heavily alter the output so it doesn't look like regular JS).
I actually did some experimentation with using Unicode for identifiers. Namely for short and predictable stuff, like the lambda symbol for holding anonymous functions, and things like that. The problems are that: * you need a good editor that can support this * you need a good font which supports those characters * you need a good font which supports those characters and makes them legible * you need a good font which supports those characters and makes them legible, and still makes your regular ASCII code look good * nobody else gets it * typing them sucks The last one is especially moot, considering I was using this with Vim, and so most of the Unicode entries were just a single key combination. Like alt+g for gamma, alt+l for lambda, and alt+p for Pi.
Script tags blocking page download? Append it to `&lt;body&gt;` or, if you're targeting modern browsers, `&lt;script async&gt;`
I've double checked. Apparently dynamically inserted &lt;script&gt; tags are async by default. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script
Thank you! That's a good question. I've been looking to find a resource that standardizes what modern browsers are and I haven't come across anything yet. Abie.js has options to define what the minimum browser versions of each browser deserve the reward, but then there is the issue of when and how to cut off future older browsers (if that makes sense). Right now it's up to the developer/web master to define and maintain this. I'm open to suggestions. The first thing that comes to mind is to open source and standardize the definition of modern browsers then load them to the plugin through a cdn. Thoughts?
I will look at making an android version. Never done development for android though.. Might take a little. 
I did notice that.. Unfortunately it is because of how I apply the forces to the particles. Maybe I will change it.. But I get side tracked pretty quickly.. 
&gt; it i read your source is probably makes sense to only reward up to date browsers, but the terms you used "modern browser"/"old browser" confus Thanks, yeah I've been looking for a resource that defines a standardization of modern browsers. I totally agree, Chromium 25 isn't an old/outdated browser (on top of that it's default is to update itself!). If you are familiar with a resource that has standardized modern browsers I will be sure to make an update so those can be set as default values. Right now, the browser versions can be defined by the developer/web host. If you have any recommendations or thoughts I'm definitely open to hear them. Thanks again for commenting!
I've been using component for a few weeks now and there are some things that I dislike: * No equivalent to `npm link`. There's an issue and pull request for `component link` but tj doesn't want to add it because he feels it doesn't belong in the core, but should be as a separate util. I find that this really hinders local development, because the only way you can get a local component into another local project is to commit it to git, push it to github (or your own package server but who's going to bother?) and install it via component in the project (as you would for regular packages). Every little change needs to be committed and pushed. You can manually use a symbolic link (not on windows), but this is very hacky, and you also need to manually link in all the dependencies which is a huge limitation. I see no reason why this shouldn't be included, and many people have asked for this, but tj's project vision seems to be "if I don't think I'll need it then it's not going in". His response to this issue was that you need to test your package thoroughly before you push, so you don't have to commit lots of small fixes and changes all the time. * If github is down, you're fucked if you need to install components that are hosted on there (&gt;99% of all components). * Still no versioning * You have to manually list every single file you want to include in the build process. There's no wildcard or anything. You must write every individual file path in component.json. Tj's reason for this is to encourage small, reusable components. This is good. But not every program I write using component is going to be published as a component. This listing of individual files is necessary for *building*, when it should really only be necessary for the *publishing*. * Development seems to be really slow on all fronts. For example, there's no link to the github project or even simple install instructions on the official component website. How many people have checked out the component website and just left because there was no information? This is really limiting the number of new people using component. * Require path resolution seems to be pretty strict. You can only require packages that are explicitly listed in the dependencies of *that package*, not the project - which makes sense. But there is no such thing as peer dependencies yet, but there is an issue for it and hopefully it will get added soon. The strangest thing is that all of tj's component packages are also all published in npm. He explained this somewhere but still... doesn't seem like the best endorsement for your own software. On the other hand... I have considered switching to browserify but I still decided to stick with component. I know I listed many disadvantages to it here, but there are also many things that I like, which is why I am sticking with it.
This looks really good, I wrote a small class based off http://davidbau.com/encode/seedrandom.js just to help me generate random ints in some personal projects, but this is much more comprehensive. I will have to consider swapping.
Awesome, doesn't look like meatballs though.
eval() is badly designed and you should never use it, just like with() statements. Instead, just use the function constructor. It lets you do all the same stuff, but it is simpler, safer and faster.
Right. The async attribute is for when you want to put it in the &lt;head&gt; but not have it block the page.
Related: [Node-webkit](https://github.com/rogerwang/node-webkit) Has a larger following and seems to be under much more active development than Brackets-Shell https://github.com/rogerwang/node-webkit/graphs/code-frequency https://github.com/adobe/brackets-shell/graphs/code-frequency
How so? Microsoft is not an open source company and has long been known to change their technology on a whim (see .NET 1.5 -&gt; 2.0). Microsoft develops technology that benefits Microsoft and sells them to you while Google develops technology that's good for the web and gives them to you for free. Microsoft's tech is almost always proprietary or licensed while Google's is almost always open source and they use open source themselves. Microsoft has been a vowed enemy of Linux and open source and threatened to destroy them. Google has embraced both and contribute to both for free. Microsoft was under US Federal oversight for over 10 years (lifted just two years ago) and fined billions of dollars in the EU for anti-competitive, illegal activities. 
I would not base anything you do on pure guess work and predictions of the future. Google uses open source because they started their original research in university using Linux and open source. 80% of the web does not use Microsoft products so not using MS products is the norm and not unusual at all. Google now and in the past was nothing like Microsoft when they started out.
[Browserify](https://github.com/substack/node-browserify)! It is a bastion of sanity in a world gone mad. Not only is it the simplest module system out there, but if you use it you can use all the stuff on npm in your project. It also plays nice with node, which is great if you are using that for your backend. Also as a protip, if you want to do rapid development you should try out [beefy](http://didact.us/beefy/) so you can get interactive code reloading and editing. 
http://audiocogs.org/codecs/flac/ https://github.com/audiocogs/aurora.js
Is there a linux version?
I'm about a quarter of the way into it and I have to say yes. I feel like it's in the same league as *Javascript: The Good Parts*. And I'm not saying that just because Jeremy Ashkenas says it in the foreword. And I don't think *he's* saying it just because Underscore is featured in the book.
His swaying made me kind of seasick. 
Also http://awesomium.com/ and http://phantomjs.org/ 
If you find `get` and `set` annoying, you will love `Backbone.property` littered throughout your declarations. Edit: Instead of just being snarky, here's some valid criticism. `set` does more than just... set... your attributes. it also provides a useful mechanism for silencing events and passing along additional metadata in the second argument. Lack of getters/setters was not the only reason.
&gt; has long been known to change their technology on a whim (see .NET 1.5 -&gt; 2.0). I think that's not really valid. .NET beta cycles have always been pretty long, like 1 full year. Also, there was no .NET 1.5. It went 1.0, 1.1, 2.0, 3.0, 3.5, 4.0, and now 4.5. And older versions of the product and tools were supported via a 5+5 policy: version N is supported 5 years beyond its release, or 2 years beyond the release of the N+1 version, [whichever is LONGER](http://support.microsoft.com/gp/lifepolicy). This is for on standard support; Microsoft offers 5 more years for "extended support" which you have to pay extra for. &gt; Microsoft is not an open source company ?relevance? 
Dude. Its nothing to do with a lack of understanding. I get it, its convenient and nice to have there. That doesn't mean it belongs there. Its also nothing to do with me, separation of responsibilities is a basic CS principle. Just because people are using it and enjoying it, is not evidence that its not bloat. Useful and a good idea CAN be mutually exclusive concepts. 
On the need to convert JSON to a JavaScript object (e.g. a JSON response from a XMLHTTP call), unless you need to support IE lower than version 7, there is no real reason to use eval() - use JSON.parse() instead. http://caniuse.com/json Note for IE8 you need to have your page in standards mode (e.g. HTML5 doctype) - why that's a requirement I have no idea (strange?) - but that's the rules.
 $container2.scroll(function(e){ $('#container1').scrollLeft($container2.scrollLeft()); });
You act like there are no benefits to static typing...
Have used and am a fan.
Derp, I knew there was a better way than manipulating the margin. Too dumb to know I already using the damn function!
So I have developed this script that allows you to target js at different responsive states, its been featured by smashing magazine on their twitter feed
Node Webkit is awesome . It even supports WebGL
First of all, I don't want to repeat the whole "feature detection vs. browser sniffing" discussion; it's mostly over anyway. Just one question: Why not just use Feature Enhancement for those people who have a modern browser and graceful degradation for those who haven't? That way, you don't waste both your and your user's time... If you absolutely positively must, you could add hints (here would be a cool feature if your browser could support xy - find out more), but don't bug the user with them, let him disable these if he wants to.
Check out a project I'm working on http://sonify.co.uk - It uses &lt;canvas&gt; and Web Audio API to research into Sonification (Graph data to audio) in aid of assisting the visually impaired!
Its an interesting idea but you honestly can't get the features or performance that you can get with a native client.
Knockout is simpler because it is just a data binding library. Angular is a framework that does much more.
I may be wrong about the version number but that hardly means I don't know what I'm talking about. The fact that you aren't aware of the issues surrounding that fiasco shows you are under 12 years old. "Misguided hatred of MS" is not misguided at all and, again, shows you are totally unaware of Microsoft's history which, again, also shows you must be under 12 years of age.
Supported by Intel and the best way to create HTML5 desktop apps.
It really depends on the type of product you are building.
"yes we signed off on not supporting anything below IE8 but still we want it to work perfectly on IE6" Every. Damn. Time.
https://github.com/appjs/appjs/graphs/code-frequency It appears so. That's quite unfortunate, I wonder what happened
.NET fucked everyone in the ass back then, including us. Obviously you weren't in the business when all that happened or you wouldn't be saying what you have. We switched to FreeBSD and Linux and are grateful for that. VS is great if you are coding on Windows. We don't need 10K of objects/API calls/etc. on *nix. &gt;Windows it the most popular operating system. It's time to move on from your irrational (and perhaps naive) hate and learn to embrace the best tools for the job. Windows is only popular on the desktop and a minor player everywhere else including the web. The best tools everywhere else is *nix/BSD. 
I think enforcing browser updates on the general public is a really good idea and an overall benefit. Unfortunately I work for a marketing company and anything that might drive the user away is considered worse than a pitchfork enema.
Have you considered using matchMedia instead of a debounced resize for browsers that support it? It seems like you could cut out a lot of code (and processing overhead) if you leveraged this feature in modern browsers. Having written a slightly more extensive version of this utility for work I've tested the concept with a matchMedia only version and have had complete success down to IE8 (using https://github.com/scottjehl/Respond)
[Infinite Jukebox](http://labs.echonest.com/Uploader/index.html?trid=TRWYIXL11C8A419FDE) uses a backend to detect beats but the web audio API to play the slices. Not sure if that counts, but it's an impressive project.
I already agreed to `component link`, I'm just not happy with how overly complex that implementation is. If npm's central repo is down (or bogged down, like it often is), you're also fucked. Trust me if you're building things properly, the modules will be small, and this will not be too annoying. Documentation is low because it's still a relatively "alpha" project, which is why versioning beyond pinned deps is not yet implemented.
unfortunatly this kind of runtime , if not backed by a business , cannot be successfull , it is too much of work , webkit code is huge , TideSDK is struggling too because there are not enough people funding the project. Bracket-shell and nodewebkit , respectively backbed by Adobe and Intel , which are big corps,with people working on it fulltime , are the only html5 desktop runtimes that can be successfull. 
Pretty much. Although it sounds like it builds an installer, which is nice, and you can build an installer for Mac OS X. So it's a bit more portable than HTAs.
Thanks for the reply. Sorry for the misunderstanding about component link, I thought that you did not want it. Re the central repo being down: github seems to have issues quite frequently, and I encountered a situation where I could not reach github. In that case, I had the repos I needed as local copies in other folders, but because of the way component works, I could not install them in another project because it needed to go through github first.
This is normal in most programming languages. Braces just create a scope, and can be placed anywhere within code. You just don't see it used often because there's little need for it. 
&gt; Trust me if you're building things properly, the modules will be small, and this will not be annoying. I've not used the project, but after reading the [FAQ](https://github.com/component/component/wiki/F.A.Q), I don't think I can agree with that ideology; it reminds me of the ["No True Scotsman"](http://en.wikipedia.org/wiki/No_true_Scotsman) fallacy: "No true component will have a lot files". It's your project so you can of course impose whatever limitations you wish, and I agree that the concept of components generally dictates decoupled, small bits of code, but sometimes those idealistic paradigms don't always fit into the real world model.
Fascinating to watch, good work! Just a thought, would it be possible to add additional wheels as a potential mutation? Because they seem to tumble around a lot on the rough terrain, most just seem to get stuck upside down, having an additional wheel on the top would likely have them go on for much longer.
Some cool tips, I'm especially happy to learn about `matchdep` -- seems like something that should maybe be built into Grunt itself. One thing that has annoyed me about Grunt is that it requires a lot of manual configuration (which is an anti-pattern in my book; _'convention over configuration'_), but this seems like a nice way to have Grunt act a little more intelligently.
Great tool for new and experiences js devs.
Except in javascript, they do not create a scope. :)
Yeah, I was actually going to edit and explain that JS doesn't use block scope. You caught me.
Love it! So much fun to be had with random
I watched this for well over an hour! This is worse than lava-lamps. 
All I can do is speak to my use-cases we have an application which uses over 200 of the public components, and 240 private components, and after building several applications that are not structured this way I honestly cannot imagine building another which is not modularized in a similar fashion.
It's a tradeoff I guess for now, I agree they have had some hiccups lately, but typically they're pretty short-lived, where as when we've had issues with npm it can span several days.
Yeah, I can't fault you much; make it work for you and your uses, and you've not wasted anything. If anyone else wants to use it, great! Otherwise, fork it or whatever. At least you've offered it to the community at-large to support all of those options. I just know that in my job, there's _the right way_ and then there's _the way we end up doing it_ (which usually is far from idealistic, mostly due to resource constraints, but also sometimes as a by-product of working on a legacy project that is a decade old where there's no such thing as a 'simple refactor').
Starts article with "All parameters are passed by value", then points out in next sentence that they're passed by reference for non-PODs. C++ passes all arguments by value by that definition. The real explanation is that non-POD objects in js are references, just try: a = [1]; b = a; b[0] = 2; console.log(a); or a = { foo: 1 }; b = a; b.foo = 2; console.log(a.foo); When you pass an argument you're doing the effective equivalent of making a pointer copy, not an object copy. It's actually more accurate to say "everything except PODs are passed by reference" in js. 
After having my hand at a few failed attempts at using box2djs for my own recreational purposes, this is quite impressive. On a side note does anyone know a of a good box2djs tutorial?
I'm guessing that the second argument to `doSomethingWithArray` is a completion callback. Are you using `setTimeout` to avoid recursion because it may invoke the callback in the same turn? From what you've shown here, `someArray` isn't being captured in any closure. 
Yep, I have seen that (first place I went) but wondering if someone has found/used something else as well. What other IDE can you use besides Eclipse? I always seem to see it mentioned.
If you use the command line (cordova-cli), then you can use whatever editor makes you most productive. I use Brackets myself.
I updated the sample code. Slight (though very important) change to the setTimeout .
It's not an either/or approach, unlike something like Adobe AIR. Things based on CEF will usually let you integrate C++ code into your app as needed. Ideally, you'll keep your UI on the web side to maximize cross-platform portability, but if you really must do some platform-specific UI stuff, you can do that on the native side too. 
I simply love watching this; good job! I'm taking a course on machine learning, will look forward on implementing this kind of stuff :D
+1! Thanks for doing all the research for me. I'll let Browserify build the boilerplate, spend more time coding
I wanted to learn node.js, so I wrote an RSS reader. It still needs a lot of improvement, but I thought I'd link to what is there so far in case anyone wants to take a look or help work on it. The code is at https://github.com/fschwiet/letscodejavascript.
This kicks ass. I can't quit messing-with/watching it.
There are none. :( It is only for wizards.
These are the ones I used when I was messing around with box2djs: - http://creativejs.com/2011/09/box2d-javascript-tutorial-series-by-seth-ladd/ - http://jonnystromberg.com/box2d-javascript-tutorial - http://gotoandlearn.com/play.php?id=176 - http://www.box2d.org/manual.html - http://buildnewgames.com/box2dweb/ Hope that helps.
You can change parameters, an [example](http://block-map.maori.geek.nz/?scale=3000&amp;lat=41.28&amp;lon-174.7&amp;blocksize=13). A description of how I made it [here](http://hashbang.co.nz/blog/2013/6/25/block_map_visualisation).
This was really bothering me; why was this working? Then I checked the ECMA script spec: http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1 *whew* looks weird -- works as intended...
I heard it was only $640k.
I don't know why you're being downvoted... this is a great point. 
Here's what I don't get: If the top *n* cars are cloned to the next generation, how does the frontrunner fail to show up in succeeding generations? It seems to me that the frontrunner should get [population * (% distance ahead)] clones, which should mutate at the going rate, for this to be "more realistic" as it were. Right now it looks like each forerunner is given one child, which is mutated. I would think that high-rollers would have "more" children. But perhaps I'm misunderstanding how it's working.
Man, promises are fucking wonderful. Too bad Node decided to go with callbacks.
Indeed, promises are awesome. condition mixes promises and events in a really lightweight way, though.
This is amazing
This looks great!
Yeah, one of the problems is that there are strict limits set on things like size and number of wheels. The cars that make it farther than the others tend to be the ones that get the right bounce at certain parts of the track, and aren't necessarily better than any other car.
keeping an unmutated clone of the top car to "mate" with might be a bit less infuriating to watch than this: http://imgur.com/S90hnvU this is on the map seed "fuck that!" at about gen 350 also saving the gnome set would be great to share!
This has nothing to do with automatic semicolon insertion. It stems from the fact that the production for a *statement* includes *block* (&amp;sect;12.1), which means that anywhere a statement is allowed, so is a block. This is in fact what gives rise to the rule that you can omit the braces for an if/while/for loop with a single statement, because the grammar says that if/while/for is followed by exactly one statement -- which can be either a single actual statement or a block containing multiple statements. In the example given, the semicolon ends the `if` statement, and the block that follows is just a regular follow-on statement. if(false) ; { document.body.textContent = 'false is true?'; } This is not particular to JavaScript in any way, it's very common. For example, C and C++ work the same way, and they don't have any automatic semicolon insertion. This prints "Hello world": #include &lt;stdio.h&gt; int main(void) { if(0) ; { puts("Hello world"); } return 0; } 
dafuq?
Guess what? The creator is a [yoyo pro](http://www.youtube.com/watch?v=Y5DeyIScwzg). Why not?
&gt; The real explanation is that non-POD objects in js are references, No, the real explanation is that objects in JS are **reference types** which is an important distinction to make - by definition their value is a refrence, it's the only way you can ever touch or deal with them. When you pass them as arguments their value is copied just as it is for primitive types. It's important to note that excepting this, there JS has no semantics for expressing or manipulating a "reference". &gt; C++ passes all arguments by value by that definition. No, it doesn't C and C++ **do** have semantics for expressing and manipulating "references". Consider the difference between passing a struct and a pointer to a struct. The former is pass by value, the latter pass by reference. The important thing to note is we're distinguishing two possible things. In JS the only value an object ever has is a "reference" - there's nothing to distinguish. Furthermore, consider something like this: void doubleit (int&amp; a) { a *= 2; } //... int bar = 2; doubleit(bar); // bar is now 4! It's correct that in some ways passing an object in JS like passing a pointer to a struct in C in practical terms, but don't let that confuse you in terms of the semantics of the language. &gt; It's actually more accurate to say "everything except PODs are passed by reference" It's actually not. It's accurate to say everything is passed by value - that's how it's described in the spec, and that's the best description of what is happening. 
Evolutionary fitness isn't absolute. It's always with respect to the environment. You're evolving the best car for the track.
The acid test for whether something is pass by reference: a = [1]; function f(x) { x[0] = 2; } f(a); console.log(a[0]); If you see "2", it's pass-by-reference. If you tell somebody that you're passing by value but that value is the reference to the object because the only thing the language supports are references to non-POD types, you'll get a funny look. You're trying to tell me about an implementation, I'm talking about the semantics of the language (which is all a user of a language should have to worry about). edit: to be fair, there is the weird corner-case of whole-structure copying, which C/C++ do for you when using references or assigning to de-referenced pointers, but js gets horribly wrong (the parameter silently refers to a new object which is no longer the passed-in object, which is error-prone to say the least). I guess that's your **reference type** distinction. 
post results..
That's kinda cool. I've worked with the genetic algorithm in c++ and CUDA, doing very similar things. It's fairly easy to do actually, especially if it's just doing clones. The hard part is tweaking it, adding mating, making more productive mutations.
I did consider it however early browser support was a problem, the aim of this script is to be completely standalone so I don't want it to require polyfills however I could include mediaMatch and use resize as a fallback. Thats something to consider for v2 which is going to add many more features
Awesome service! We also feel the pain of content management for apps, started to build a internal service to fix this, but contentful looks very promising. We're building a data connection service called 'jelly' http://jellystack.com/ and love to integrate contentful into it!
Holy crap they do backflips!! This is amazing 
The JS is written completely anti-trend. Global variables, new operator, etc. The code is so 'harmful' I feel like I need to go and wash
Thanks! Jelly looks really cool, signed up with my email address.
it's non deterministic so the front runner last time might not do as well this time
these guys are getting 175m on "Enter any string". ~~http://pastebin.com/ax1RQ9Wp~~http://pastebin.com/DnAz4ENj --&gt; just enter all that to your js console… 
I would suggest Angular Js. Has many great features such as templates, custom html tags called directives, controllers, and services or factories that represent models. It has its quirks but I find it great to work with. I find it the 'bootstrap' for the JS world. To learn more head to the docs (they are a little lack luster in some areas) or head to egghead.io for some video tutorials. 
Why not wrap both elements in a container element, and scroll that? Then it doesn't require JavaScript.
I would recommend Angular.
I use [Requirejs](http://requirejs.org/) for modules, it also allows you to optimize it after via Grunt/r.js :)
Fuck trends, stick with proven best practices. I agree on the globals but a new operator is perfectly fine javascript.
AMD is ok but commonjs will work if you use proper build tools (there is a grunt plugin for every pattern).
I feel that the reasoning for calling new/this 'harmful' is somewhat insulting to us developers
I agree with TeamHelloWorld. The learning curve on ember is, IMHO, has a higher learning curve than Angular. This isn't to say that Ember is inherently better because of this, it's just the result of the design choices the creators have taken. In regards to Angular, I've noticed that a lot of what you do doesn't progress far beyond a 6 or 7 in terms of difficulty. There is a very consistent pattern to development. It's the odd time that you wish to make a new filter, directive or dive into Angular's back end when it's complexities become apparent. 
Agreed! With out jasmine, karma, grunt and their end to end scenario framework, I would be lost. 
[Left work at ~6pm, arrived at ~8:30am. So about 14.5 hours reaching 1627 generations.](http://i.imgur.com/v8ziPAv.png) It would have run for longer - but I dragged the tab out and it stopped the javascript :( [Currently running another simulation (about 4.5 hours in so far, at 92 generations, with 100% mutation rate) which is showing promising results](http://s.gpmd.net/c5889b.png)
my guess, no work happens
[Here you are](http://www.reddit.com/r/javascript/comments/1h3zl0/html5_genetic_cars_make_sure_you_reseedcreate_a/car8gne)
It's just bombing out for me. Nothing show's up and when I hit an arrow key I get this (Chrome 27.0.1453.116): Exception while delivering result of invoking 'changeSnakeDirection' Error at h (http://snakes.meteor.com/39330d3817640348147e130224b50df82ea3f04b.js:10:17989) at null._callback (http://snakes.meteor.com/39330d3817640348147e130224b50df82ea3f04b.js:1:17556) at _.extend._maybeInvokeCallback (http://snakes.meteor.com/39330d3817640348147e130224b50df82ea3f04b.js:4:15674) at _.extend.receiveResult (http://snakes.meteor.com/39330d3817640348147e130224b50df82ea3f04b.js:4:15978) at _.extend._livedata_result (http://snakes.meteor.com/39330d3817640348147e130224b50df82ea3f04b.js:4:25678) at r (http://snakes.meteor.com/39330d3817640348147e130224b50df82ea3f04b.js:4:14025) at http://snakes.meteor.com/39330d3817640348147e130224b50df82ea3f04b.js:3:8697 at Array.forEach (native) at Function.x.each.x.forEach (http://snakes.meteor.com/39330d3817640348147e130224b50df82ea3f04b.js:1:611) at e.socket.onmessage (http://snakes.meteor.com/39330d3817640348147e130224b50df82ea3f04b.js:3:8655) 
this is not a very good algorithm imo, the cars are supposed to get better with each generation but always, there's only one car which does slightly better than others. this is pretty crap
Personally I swear by Backbone &amp; have successfully developed a few production applications with it, though I'd recommend using something like [Marionette](https://github.com/marionettejs/backbone.marionette) or Facebook's [React](http://facebook.github.io/react/) to more efficiently manage any complicated views.
I too really like angular, however something to really be aware of is WHAT you are trying to do in your app. If you are looking for a game, or something with tons of visual manipulation, be careful with Angular. If you have just a normal CRUD app, then go for it! For instance, I'm currently writing an 'RSS aggregator' for my job, and it's going well, however I've had a few UI based hiccups. Let's say you have 30 feeds, feed 1 scrolls through to feed 2 which goes to feed 3 etc (fine, no biggie) however, let's say I scroll to feed 21 then close the window, on re-open it needs to auto scroll to feed 21, and only load in feeds 21 +-1 so if they scroll in either direction they don't have to wait for a load. I am saying all of this because after the model finishes updating the UI, no event is fired saying as much, making the addition of listeners to newly added items very difficult. Also No support for IE6. Should you need that, check out Knockout JS, it supports that I've no experience with Ember, but I've heard good things. I have very limited experience with backbone, and from what I've seen I like angular JS more So ALLLLLLLLLL that being said, I would still pick up angular js in a heartbeat to use for future projects (assuming it makes sense)
Never tried it but, it might be worth reading this: http://eviltrout.com/2013/06/15/ember-vs-angular.html
[This](http://www.youtube.com/watch?v=i9MHigUZKEM) the one?
More information is needed. What MVC to use should be based on the project and the situation. This is not a case of any one framework being better than another
I left a window going overnight as well. The unicorn/shark shape seems to be adaptive - I think the spike is used for tipping over when stuck on a peak. [Here's gen 1201, mutation at 4%.](http://i.imgur.com/lntFYt1.png)
How are you passing it in? through a js tag in the document? Too long to pass it through the URL.
http://stackoverflow.com/questions/383402/is-javascript-s-new-keyword-considered-harmful
Haha, nice! The second one looks very good, slick bike-like design!
That's pretty cool!
yeah it makes perfect sense once you think about, just had me scratching my head at first.
I like Angular because it you can grow into it. You can start small by just using a simple controller and data binding. As you learn and your needs grow, you can start using more directives and filters. Then you can make your app more modular, build custom directives and custom filters. Two-way data binding is a gotta-have capability in an MVC framework. I got hooked on this with Knockout.js and love it equally in Angular. The other reason I'm moving my projects to Angular is the big developer community around it (it will probably overtake Backbone in the next year to be the most use MVC framework). This makes it easy to get help. 
fantastic stuff! brilliant little app, really interesting bit of code and excellent execution.
I recommend Knockout because it is MVVM (it has an extra V).
Are these errors in the demo intentional? &gt; Expecting an element title, got nothing. Invalid sequence in interleave. Expecting element info, got para. Element chapter failed to validate content. Did not expect element title there. If so, you might want to add a comment about it because it appears buggy. If not, then I guess you could say it's buggy.
I am glad that you like it. Meteor uses publish and subscribe functions to get data from a server. These functions use websockets under the hood if your browser supports them. Otherwise pulling is invoked.
This isn't going to work with a JavaScript solution in the browser - you could scrape the content, but you would not be able to send emails, and it would only run when the page is loaded by a user, not as an alert feature. You'd need to work on the SharePoint server, and have the back-end read the feed, perform the searches, and send the emails. You'll get more help on /r/sharepoint. 
Loving it. Became a quick shouting match with the devs at work while we played. :)
Great, thank you for the advice
Bit laggy at times (sometimes making it unplayable), but otherwise good.
Didn't they recently revamp all of their tutorials and helps to be easier to understand? 
There's a lot of discussion here already, and I don't necessarily want to add fuel to the fire, but I personally prefer Backbone.js over Angular, though when I'm working with highly structured SDE teams, Angular is generally more readily accepted. Angular tends to tie you into a much more rigid "do-it-my-way" pattern that Google is known for while Backbone.js requires you to write a lot more but gives a bit more flexibility (in fact, there is no "Controller" object to extend in Backbone at all). Just my 2 cents.
Marionnette's pretty essential for doing anything non-trivial.
I made myself *just* long enough to spread across the entire screen vertically, and am camping right by the apple, waiting for someone to join. This'll be fun.
I love the amount of effort put into this concept. This is brilliant, and the first time I have seen someone use a popup as animation since I saw an animated man jumping and pushing the window he was inside of. The script is out of date now, and doesn't work in most modern browsers. IE6.
Yep, that's exactly what happened. I left three more running overnight on my workstation before I left, let's see how they're doing tomorrow.
For an easier to compare pair of graphs, here's the commit activity of both projects. While both are active, there seems to be a bit more activity in the past few months in brackets-shell. * https://github.com/rogerwang/node-webkit/graphs/commit-activity * https://github.com/adobe/brackets-shell/graphs/commit-activity Here's another interesting pair of graphs. They're not too useful, though, because Brackets doesn't use Github Issue as their primary bug tracker. * https://github.com/rogerwang/node-webkit/pulse * https://github.com/adobe/brackets-shell/pulse
I just roll my own. I don't need data binding.
Another knock against Ember is that EmberData, a component many would need for anything beyond a small and simple app, is still considered "Alpha". If Ember were to be of interest for you for whatever reason, I'd at least wait until EmberData was stabilized.
I ran it twice to a point where the cars could no longer beat it, but otherwise it is pretty cool!
I think you would need to use javascript in some capacity to be able to achieve this. I think something along these lines would be like this. &lt;script&gt; // get params from teh query string var object = {alt_name: "Giggitty", test: "brand", old: "Superman", new: "Batman"} &lt;/script&gt; &lt;html&gt; &lt;body&gt; &lt;div&gt; &lt;p&gt; &lt;script&gt;if(object[new] == 'batman') { document.write(object[new]); } else { document.write('Batman'); }; &lt;/script&gt; and some other text &lt;/p&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;
unless you use the same world as other. Everyone should join world "JavaScript"
I'm really, really big on [Thorax](http://thoraxjs.org/). It's a Backbone App framework that uses route-based module loading and I've sworn by it for large and small projects.
I definitely have been. I've run a few myself (and a couple of those version numbers are me).
You can also shrink the computer's window.
Somewhat recently. It is worlds better now. Tom Dale has a video on the Ember guides home page (http://emberjs.com/guides/) that's very helpful to get oriented, where he builds a blog frontend in about half an hour. It's similar to, but less thorough than the PeepCode Ember video, which is also very good (https://peepcode.com/products/emberjs). The Ember team gave them a bunch of input while they were producing it.
The thing with Ember is that if you go the Ember Way, it's almost no work, in the same way that if you make a Rails app that doesn't need to do anything complicated, you've basically made it by the time you run all the generators. The [Ember Tools](https://github.com/rpflorence/ember-tools) project is basically that generation for Ember. But yeah, if you deviate for whatever reason, it can be pretty terrible.
Maybe you should spend more time developing and less time complaining.
If you want you can try to download the source and run it localy (it will take you at most one minute). Quick instruction 1. install Meteor: curl https://install.meteor.com | /bin/sh 2. download source of the game: git clone https://github.com/druminski/snakesArena.git 3. run it: meteor If that works then mayby you are too far from the server.
I would recommend CanJS (http://canjs.com). It's fast, has everything you need to build a good app, and flexible. I've used it for a few web apps now (including a phonegap app for android/iOS) and have think it is pretty stellar in comparison to all the other "all in one" frameworks, like Angular.
Application is on a server located on the eastern U.S. So people from the other end of the world can have problems with playing without big latency.
A really good explanation of beginners. I still prefer raw JS, but this is pretty awesome. Thanks!
You managed to make the title even more confusing than the linked post's title. :\ (I mean, the value NaN certainly exists in all JS implementations...)
 &lt;input type='text ng-model='name /&gt; You might want to fix the quotation marks in the above (there are 3 occurrences that I can see). I don't actually know any Angular but based on the line by line breakdown, the quotes in the code blocks are wrong!
wow, I feel silly... I didn't even notice the "Join to a room" button in the top right corner. Both the online and local versions work beautifully now that I've figured that out :D (you might want to make the fact that you must press that button a bit clearer for the oblivious like me. otherwise the game is great!)
Yes! Thanks for that. 
If so, I'm guessing it would be something that would run against PhantomJS/etc. and would need to crawl your site pages against your pages and their markup. At the moment, the best way of doing this (and it's manual and rather unrelated to Grunt/automation) is to use the profiler in Google Chrome. Wrote a short Coderwall pro-tip about it here: https://coderwall.com/p/vnddjw I don't think it's possible (at the moment) - but if you could start/stop a CSS profiler and grab the results using JavaScript (assuming Chrome/Webkit can expose the data) you would be well on the way to automating this better.
Nice overview - well done.
[Sammy.js](http://www.sammyjs.org) will allow you to create custom routes for your URLs and will also manage your browser's history for navigating between these routes. edit: Just saw that Angular-js can too. Check this out http://glennstovall.com/blog/2013/06/27/angularjs-an-overview/ near the bottom of the page it talks about it. 
If you want a framework and you don't want to find every component yourself (ie- routing / templating / databinding / async testing) ember is a good choice. If you don't like the defaults it's worth looking at something else because you will spend more time fighting it than building your app. That said, avoid the troll below saying "don't use it until ember-data is complete" because the MVC library itself is great stand alone. If /When ember-data is polished it will just be a huge +1 because no other library (except BreezeJS even offers something close to what ember-data is trying to accomplish)
&gt; &lt;span&gt;Price:&lt;/span&gt; 300 &gt; &gt;Price: 300 &gt; &gt; &lt;span&gt;Price:&lt;/span&gt; 300 &gt; &gt;PRICE: $300.00 Not sure what I missed, here. &gt;Whenever you type into the input box, this h2 tag updates automatically. Why is that h2 tag updating? Or at least, why do they claim it will? &gt;When you reload the page, you will notice that the input now starts with the field filled in with ‘Default Name’. Is there an output example page anywhere, or was this just a poor turn of phrase? 
What did (s)he say?
Bitching about how Angular won't last. Started being a dick about the article. I don't remember the details, just general douchebaggery.
that is the posts title i thought...not my intent. i just found that question rather interesting
I believe running Google PageSpeed will do it for you, but it only does so if you have a lot of unused CSS. I also found this [FireFox plugin](https://addons.mozilla.org/en-US/firefox/addon/css-usage/). I've never used it before but supposedly you can browse to multiple pages and it keeps a list of what's used and what's not.
In case anyone is still following this thread... [I finally managed to evolve one that happened to make it all the way to the end](http://www.youtube.com/watch?v=YFFaIjtvo5E). 
Wow that missing `name` placeholder changes everything. Thank you.
Is angular worth learning?. Few months ago backbone was in the same place. What do i gain by using it? 
Yup. It's been a love/hate.
None is better or worse; AngularJS is a framework, Backbone is a library to build your own framework. AngularJS is from Google. That's why I prefer AngularJS. Edit: But srly, AngularJS is better.
The sad way would be something like `document.body.innerHTML = document.body.innerHTML.replace("Superman", "Batman");` It's going to be slow, force a reflow of the whole page, and generally be pretty overkill. The nicer way would be to loop through every node in the document, recursively, look for text content and do your string substitution in those text nodes only. It seems like a lot more work, but it's likely to end up being much faster. 
 if (params.test == 'brand') { element.innerHTML = element.innerHTML.replace(params.old, params.new); } That's how you would do it on a single element. If you plan on doing it on a large chunk of elements, you might want to do all of your work in a [document fragment](http://mdn.beonex.com/en/DOM/document.createDocumentFragment.html) then replace the necessary nodes.
To be really nit-picky, HTML should have double quotes. JavaScript doesn't care unless you're wanting to include escape characters, then you also want double quotes. So generally: HTML double, JS single. Also array joins are way faster than string concatenation.
I did the same thing. I was transfixed!
So many typos in this article.. 
It is indeed, my friend.
It's a good thing all web apps are the same then ;).
The last is no longer true (generally). You can look up benchmarks online.
The blogger needs to realise that Jekyll's markdown implementation likes to do interpolation of {{ and }}.
i pick my tools based on the website usually, thats why i fail constantly
Oh, sure. I haven't done much JS in years, I even forgot about that. EDIT: still couldn't get it to reload arbitrary cars. Could you? I tried with the pastebin above (changing the surrounding quotations from " to ', otherwise it obviously doesn't load it). The cars would remain the same. I tried putting it in different places like in cw_resetPopulation(). I made sure it was loading the variable with console.log and alerts, but still it went on to ignore my cars. Any ideas? See here for instance: http://pastebin.com/fmL4pe1q In the console the cars would show as those in the loaded string but not in the simulation. I guess it's Javascript lovely scope rules.
Is it open source? And can we have a look?
I'm thinking that the best way may be to write it myself.
&gt; JavaScript doesn't care unless you're wanting to include escape characters, then you also want double quotes. Are you sure? var a = "hello \n world"; var b = 'hello \n world'; ...are completely identical as far as I know.
Well, the Ember way is a methodology and prescribed architectural structure (i.e. old school MVC), rather than something prescriptive about what your app does.
Heya, So, it's paaaartially open-source. [There's a 7-month old version here](https://github.com/MeoMix/SongBuzz) which was fully OS. Currently it's being distributed without an OS license, but when you install a Google Chrome extension a copy of its source is DL'ed to your PC. The code isn't minified yet so you can read it relatively easy as such. I'm not sure what the future holds.. either it'll become fully open-source if it doesn't go anywhere, or stay where it is if it has potential. I could PM you a copy of the source specifically if you were interested in seeing it. I'm not guarding it too heavily, not that naive, I'm just not trying to say the code is free, either. :)
Coercion is tricky. When you use an operator, any Object too complex to be evaluated through the operator gets coerced into the highest common denominator primitive, e.g. if you add a number to a string, the number will be coerced to a string. In that case, it seems that the coercion in node.js uses the toString() method if present in both cases rather than the valueOf() method.
I can confirm they are in Chrome's developer tools console.
You can read this article : http://www.yearofmoo.com/2012/11/angularjs-and-seo.html It will give all the answers that you need.
I think its because ember is so tied to the rails community aka convention over config.
Thanks very much, that's a good post.
I have a shell script that I use for this kind of thing. https://gist.github.com/letsgetrandy/5560480 When I'm curious about a classname, I just check it from the command line: `cssgrep "class-name"` and I can see where it's used. I suppose it wouldn't be too hard to add something that scans css files and compiles a list of classes to check for. The trouble is that selectors can usually be more generic, like `div + a:hover`, which is nearly impossible to scan for in source. Anything more comprehensive (eg, crawling the live site) would be prohibitively slow, and prone to false positives.
let us know if you publish something. It sounds like a useful tool to me. 
Yeah, that seems the likely cause.
Those topped 187m or so at around 120 evolutions. After that the mutations went crazy and started producing &lt;150m's :(
Will do.
I love Angular. I maintain three little apps on the side at work. One is a mix of DOM plus jQuery code, the other all jQuery and the last is pure Angular. I rarely touch them, but when I do, the Angular app is the easiest by far to get in, make a change and get out.
Me too. Watched for hours resetting at generation 25 each time. Pretty sure my wife was going to leave me I'd it didn't stop routing for one car or another. Some people in this thread say they left it on all day and gotten to hundreds if generations. I am ver jealous. 
that is cool. thanks :)
This is the nature of the reality of javascript world currently. Yes, Backbone was the 'thing' a few months ago and now its AngularJS and who knows that in a few months something else becomes the new thing, and it doesn't look like things are going to settle down anytime soon in the JS world. The only benefits you get is that it helps incremental learning. The concepts you learned from Backbone were then utilized in AngularJS, so it was easier for you to learn AngularJS. I had such an easier time to learn AngularJS but my coworkers who never learned Backbone hated doing that. 
Time. It can save you a ton of development time. I can bang out a rich web app in no time, and it's a treat to work with, once you get over that initial learning curve (takes about a week). It also saves on aggravation. Once you learn to keep your hands off the DOM and let Angular do it for you, you not only stop using jQuery (for everything but libraries/utilities), but also can't really believe the way you'd trained yourself to do things. Angular code looks much more like native code than what web code has looked like for the past 5 years.
&gt; angular Js in 60ish minutes This [O'Reilly: AngularJS](http://shop.oreilly.com/product/0636920028055.do) book is also great
 ctx.save(); ctx.beginPath(); ctx.translate(canvas.width/2, canvas.height/2); ctx.rotate(i * a); ctx.translate(-s/2,-s/2); ctx.rect(0, 0, s, s); ctx.fillStyle="#E30B5D"; // raspberry ctx.fill(); ctx.stroke(); ctx.restore(); These should be chainable. fillStyle should be passed as a parameter to a function rather than stored as state.
Magic. Unless you explain it to me.
What kind of web apps are you using it for? I've been trying to get into Angular, but I can't figure out what it's good for.
1. Understand the logic in this effect.js script 2. Build your own jQuery plugin to place this smoke anywhere ( with custom images, rotation speed, opacity ) 3. Sell plugin on CodeCanyon 4. PROFIT 
Pretty much anything. I built [this](http://deckbuilder.aws.af.cm) with it in hardly any time at all when I was first starting out. I had maybe 3 months experience at that point, so it's pretty rough, but even back then everything was pretty effortless. I've built probably 10 (maybe more) different web sites/apps with it and I'm yet to find anything that wasn't a good fit. Definitely the best tool in my webdev belt.
[Here's the relevant bits extracted to a codepen](http://codepen.io/anon/pen/Gburj). 
Scrolling/rotating images: http://s3.amazonaws.com/clouds-reverse-engineered/index.html If you checkout Rhomboid's codepen example above and highlight cut/undo the following html (to remove/add that element to the DOM): &lt;div class="main-bg"&gt;&lt;/div&gt; It might be a little more revealing to how it works.
So it's a particle effect.
[for the extremely lazy](http://codepen.io/anon/pen/nivcD)
But *don't* copy/paste &amp; sell. This can become expensive.
At least. Or it wouldn't be much simpler then plain canvas api.
I actually had a browser tab still up with his response: &gt;tizkgvgqkvydeckh &gt;why are u trying to make angular happen? it will die in less than month. trust me, im a html developer and i have a lot of experience with these fad technologies and they all go under because they arent agile like css and html additionally i think ppl are sc ared away fromt hings like this and most things that require extra learning because of the asinine examples wannabes like yourself give. PersonService [...] .push(person) does not give any real world context or applications that would make someone want to use angularjs. it is like a hello world tutorial, except even more useless. i think if it is ur goal to get people to adopt things like this there needs to be examples with subjects that potential users can relate to. give an example of how you could implement angular js into reddit. how would u use angular controllers to server reddit threads or comment information etc. building a 'collection' of people is completely useless and has no point outside of this example. i understand that it is an overview but it is an overview devoid of any substance and does not demonstrate what angular is capable of and only exists to piss off and confuse unsuspecting developers
Considering it is round II, round I was the demo?
Its really not as hard as it first looks, if you look closely you see that its some static particles and then three different animations on each side, one that moves particles in a circle, one horizontal and one vertical. then just mash up some believable smoke particles in photoshop and youre done.
I'm at generation 1200+, but it looks like the track just abruptly ends at around 270. Is that normal? Any car that makes it past that point just falls, the only reason there are still some new records being that they have more speed and manage to fly a bit further. 1: 335.67 d:331.36 h:-4013.24/10.52m (gen 1106) I wonder if the cars will usually evolve towards the same similar shape, because to get very far you need to be able to pass a wide range of different obstacles, and probably very similar traits are useful on all tracks when you get far enough?
The main reason for using SVG is that you get mouse interactions for free. Plus styling with CSS is nice. This project was just a spike to see if I could do it.
Cool! Thanks!
I would also like to know if anyone has any has any experience with this?
Although I think the question author asked a legitimate question in this case, I do wonder why are people hell-bent on analyzing the output of `{} + {}` and `{} + []` when they already know JavaScript doesn't do anything useful for these operations. I'd hope they would be asking questions like "How can I use [toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) or [valueOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) to accomplish ____?" instead. 
I don't know that.
Mouse interactions in 3D is pretty easy. I can attach all kinds of properties to each 3D object as well. I'd encourage you to give it a try as WebGL is the bee's knees IMHO. PM me if you need some code samples.
i've actually come around to dislike data-binding, but for different reasons than you state. Check out Facebook React (extremely underrated). Responsive views with no databinding, no mutable viewmodel.
Reminds me of this: http://www.clicktorelease.com/code/css3dclouds/
What happens when you re-read the title of the post?
I think it's not the generation that's the problem, but the way they're tested. Each map seems to have a single point that no car can get past no matter how long they evolve for, and the problem is that once you hit that point, it doesn't have any way to test if new cars are better or not, because they all just get stuck there and none of them make any improvements. I think it should test each car on several different worlds so that they have a range of obstacles to test against and there's some indication of how adaptable each car is.
I can't tell you what's the best, because different projects have different needs. But the inline editors I tried out for a recent project were: * [CKEditor](http://ckeditor.com/) * [Aloha Editor](http://www.aloha-editor.org/) * [SnapEditor](http://www.snapeditor.com/) I also looked at these but they didn't make my shortlist: * [Etch](http://etchjs.com/) * [Hallo](http://hallojs.org/) * [Mercury](http://jejacks0n.github.io/mercury/) * [Raptor](https://www.raptor-editor.com/) For various reasons I used CKEditor, but this is a fairly specialized project and I wouldn't generalize from my experience. Some of the things I would consider for each editor would be: * Does it do what you need? * Flexibility of API * Code size * Quality of source code * Licensing and cost if commercial * Availability of unobfuscated source code * Dependencies on other libraries and code * Aloha, Hallo, and Raptor require jQuery UI * Etch requires Backbone.js * Hallo and Raptor require CoffeeScript * Quality of generated/modified HTML * Documentation * Community It's easy enough to take any of these editors and try out their examples and do a test integration, and that's what I'd recommend after reviewing the other factors such as licensing.
It dies require one "natural" reset. The generation variable is not used until initializer ion of the next generation. And then elite cars will overwrite a few cars. Merging it into the rest code should circumvent this, but you'd still need to wait for the next generation to spawn. 
Definitely going to learn WebGL, probably next project. The end result of this project won't be too 3D incentive. 
Look at the page source code, locate all the &lt;script&gt; elements. In one of them, most likely an external .js file, you will find a function declaration for the reboot() function. Look at what it does. It probably attempts to load a special URL somehow, either by setting window.location or using XMLHttpRequest. You can probably also see the function by loading the page, opening Firebug console and typing "reboot" (no quotes). That will resolve the variable and return the function.
One thing that looks weird is the lack of modern JavaScript-iness. The style seems much more like typical OO-style. Not saying that's a good or bad thing, just stood out for some reason, maybe because of the ton of JS libs coming out daily that try to do a lot of fluid interfaces and callback stuff.
I agree. It still **looks** like Microsoft code. I haven't played with it but at a glance it seems like it would feel like C# in a way.
I'm glad to see other players in the full 3d library realm along with three.js (that are not based on three.js)
Looks good , and the performances are ok , even on my old macbook.
Actually it reminded me a lot of three.js, one of the most popular JavaScript 3D libraries. It doesn't have to have a chainable API ala D3 or jQuery to to modern.
At first I thought "aw shucks, why didn't the base it off three.js," but you're right, it's a good thing to have a corporate-backed alternative for the potential integration and support it could bring to the table. Furthermore, if all Windows 8 tablets and phones are running awesome WebGL enabled applications, maybe Apple will finally enable it on their mobile devices.
This comment hurt my eyes.
It looks like a copy of three.js.
I felt the article failed to contrast against the other options, and also neglected one I felt is key to compare against, Mascara.
AngularJS. Edit 2: You updated the original post that implies to me you're only receiving data from the server and then must update the UI. Seriously, check out Angular, AngularUI, and AngularStrap. Edit: To clarify, your first paragraph discusses bringing JSON data to the DOM and your concern then was about doing some really bad jQuery manipulations of the DOM. I don't know anything about Flask or Jinja, but I recommended AngularJS because I believe it solves your concerns raised in your first paragraph. I don't know the implications of using Angular to address the concerns of the rest of your post; I just took a quick glance at Jinja at the Flask website and can tell you that this would still work fine with Angular. The idea would be for Flask to generate your base HTML for Angular to then use its powerful directives to handle the data the rest of the way. Another great thing about Angular is, say you generate a page where a certain part of it needs to only interact with the JSON endpoints you mentioned; you dont need to bootstrap an Angular app to the whole page. You could just use Flask to determine which DOM node would need to be the ng-app, then have Angular bootstrapped onto one DOM node, and from there, you needn't worry about Jinja and Angular colliding with each other's syntax; the Angular app, as suggested, would merely interact with your JSON resource to update the section of the DOM it was bootstrapped by. That's why I suggested Angular; I still believe it will address your concerns about manipulating the DOM in a clean way, while still allowing you to use Jinja and Flask.
Great way to understand the differences between Ember and Angular. That was actually pretty healthy from both parts and funny to watch.
I answered a similar question just the other night. Although, his / her question was which was the best between two frameworks. Here is a link to that thread. http://www.reddit.com/r/javascript/comments/1h63un/which_mvc_do_you_recommend?sort=confidence
Typescript is another 'me-too' attempt by Microsoft to compete with Dart. It will fail and drag anyone who uses Typescript down with it.
Nope, just 2 image rotating, 2 scrolling vertically, and 2 scrolling horizontally. The images might be considered a particle effect if they respawned, but they don't.
Fucking nice!
Nothing displayed for me... it'd be nice to have a warning if WebGL is needed but not available.
Which button slings web?
This.
Obviously you are using IE and not a modern browser. Any other browser can display it.
Google generator-microlib and Chris wren advanced grunt tooling Some really nice dry build processes. 
+1 for angular, but be aware that the template tags used by jinja (flask's default template engine) will also conflict with AngularJS (you can change the default tag style). If you're just serving JSON from the server, it's less of an issue...but then if you only want to render the json into a template you might not need a full blown framework 
Me, too.
I'd like to think of Safari on iOS as a modern browser ;)
Nope, Chrome on Linux. Anyway my point still stands. It'd be nice to have a warning if WebGL is needed but not available. It's a one liner and you don't want people to think your demo just plain don't work because they're not using the right browser.
[WebGL works fine on Chrome and Linux](http://www.khronos.org/webgl/wiki_1_15/index.php/Getting_a_WebGL_Implementation) for me. &gt;WebGL is available in the stable releases of Chrome and Chromium for desktop platforms. Chromium is included in many software repositories for Linux based systems.
Displayed fine for me in Chrome on Linux Mint.
That's true, but it makes a lie of your statement that all modern browsers support WebGL. A lot of people (like me) use their phones and tablets for surfing.
It doesn't work for me. Gotta run firefox. Chrome doesn't like my [retarded graphics card](http://www.nvidia.com/object/optimus_technology.html). Well, nothing "likes" it, just most shit I can convince to use it. Did i mention that fuck you nvidia?
Can I be your apprentice?
If you have actual questions about performance, there are probably some demos that can give you an answer. What do you expect to be the impediment to running Minecraft in JavaScript?
Gotta say it. Ember looks like the winner here. I wish SproutCore had this and a video tutorial a while ago, though.
As I said, I'm running nVidia, too, so...whatever.
[generator-microlib (not grunt)](https://github.com/asbjornenge/generator-microlib) and [Chris wren advanced grunt tooling](http://chrisawren.com/posts/Advanced-Grunt-tooling)
how do i shot web?
It would be better with textures. Or maybe it's just me. **EDIT:** Yes, it's just me. Any tips for better WebGL? (Chrome, Linux, Intel graphics)
Still better than Superman 64
Dear god, it's beautiful
:3 Thanks for the kind words!
Whoa, that was fast. They don't have pause buttons in the audience.
I think you could just use a headless browser like [PhantomJS](http://phantomjs.org/) and make it log in to your device's web interface and click the button or call the function. From the device's perspective it will appear as if you did it manually.
Is the actual talk up anywhere? The slides are nice, but it's hard to get all you can out of it without some audio.
Oh look another intro to Angular. Enough already.
Listen to this man. This is a two minute job with PhantomJS.
I like having separate files for each of my AngularJS controllers, directives, services, etc, so I use a grunt task to build an HTML template that includes them all in script tags in development mode, and concats/ngmin/uglifies them into a single file for production. I've got a few other tasks in there but basically I've got a really nice workflow for developing my angular application. 
Seriously though. I'm surprised that in 2013 people are still manually cobbling together a clumsy workflow that involves multiple javascript files and server concatenation without even glancing at how require handles this for them in a much more productive and elegant way (and without even involving a server until you're ready for production deployment)
I automatically dismiss all sites using bootstrap.
None of that really matters....if the demo cannot run it would be nice if there were a notice as to why...that is the point. Regardless of browser/os/hardware/etc, if it can't run...let the user know.
grunt-smushit is cool for optimizing images.
Thank you for letting me be extra lazy...
[Browsers (including Chrome) blacklist some graphics cards.](https://www.khronos.org/webgl/wiki/BlacklistsAndWhitelists#Chrome)
Oops, forgot to add: here's some of my notes on this project: http://barnabas.tumblr.com/post/54158997797/firebase-is-awesome
Well...my only complaint so far is that I've been waiting an hour and a half for an "O" to join. :) But that's the trouble with multiplayer when others don't know about it yet.
You should write some AI for this game since I have enough trouble wanting to play this level of Tic-Tac-Toe let alone convincing someone else to suffer through it with me :P I suppose this was mostly an exercise in programming something multiplayer, though? Is that what Firebase is for, or are there other uses?
Right, you need to send the link to an opponent. I should make that more clear or easy to do. Thanks!
Indeed. While testing I had to open two separate browsers, and I mean two completely different browsers, like Chrome and Firefox, and point them to the same game URL. Or I guess you could do it with incognito mode. Firebase is great as a real-time shared data store, which makes it ideal for games. I think you could ignore the real-time bit (although personally I think it's very cool) and just treat it like a database. The Firebase site has lots of examples of their clients who use it for all sorts of non-game related data.
I just had my boyfriend follow the link and played with him a little. One problem I see is that it seems weird for players to return to "conquered" grids. It was fun overall, though.
Fantastic, thanks!
Firebase is amazing. Paired with angular its insane. Its going to change the way the web works. I assume you're using angular fire?
This is one of the coolest things ever 
He said, &gt;WebGL doesn't work on "modern browsers" which is a blatant falsehood.
Consider what they probably meant ("Just having a modern browser doesn't always mean that WebGL works") and it's true. You can argue that they didn't actually *say* that, but the literal interpretation of what they said is **clearly** false (since there are definitely many modern browsers that run WebGL), so you could be charitable and assume that they minced their words.
My girlfriend and I just played on iPhones. She had safari opened and I had chrome opened. In both browsers the last column in each grid was shifted down in portrait and landscape modes. Here is a screenshot. http://i.imgur.com/ls4kIPa.jpg Otherwise we had a blast and thought the game was really cool. 
They're looking at edge cases, not reality. 
[It is reality.](http://webglstats.com/) (e.g. 30% of FF users don't have WebGL, but 95% of Chrome users do.)
Correct, at least for joining and playing the game. Starting the game is just a regular old Firebase call though. AngularFire makes it very easy to use. I think if you were writing a game with SVG or a canvas scene graph library, you might have to forgo AngularFire for game updates and just use it for updating stats and stuff.
Oh crap, thanks!
Again, you are looking at edge cases. If a Firefox user keeps his browser up to date, he can run WebGL. End of story. If a FF user can't run WebGL due to some issues of his system, that's not the browser's fault and what you are showing is only a distraction and misleading.
This site doesn't use bootstrap -.-
This is pretty much the same workflow I use in [LinemanJS](http://www.linemanjs.com) except instead of emitting multiple `script` elements in dev we just emit one concatenated/unminified bundle. Lately I've also been using [grunt-concat-sourcemap](https://github.com/kozy4324/grunt-concat-sourcemap) for my singular bundle which allows you to avoid the performance scaling issues with injecting multiple script elements, while still giving you the opportunity to debug in separate files in Chrome Dev Tools. If you're interested in more of the dev lifecycle that Lineman provides, this is our [default set of tasks](https://github.com/testdouble/lineman/blob/master/config/application.coffee#L11), and here's a [commit](https://github.com/davemo/frontend-workflows-with-grunt-and-angularjs/commit/83b21aee5ffc83c82f7eff740e164c5d685e0709) that highlights how to swap out the Lineman `concat` target with `concat_sourcemap` to get this working :) **Edit: here's a [screenshot](http://cl.ly/image/3s2n1T2O3l09) that shows how Chrome Dev Tools displays separate mapped files via `app.js.map`, but only loads one singular file in the page `app.js`
I think Pirate class in the example is missing the parent class ... Wait, I'll pullrequest' you what I'm talking about :)
I've found our [pages grunt task](https://github.com/testdouble/lineman/blob/master/tasks/pages.coffee) from [LinemanJS](http://www.linemanjs.com) incredibly useful; it lets you generate `.html` files from [underscore](http://documentcloud.github.io/underscore/#template) `.us` or [handlebars](http://handlebarsjs.com/) `.hb` template files and output them in a directory you [can configure](https://github.com/testdouble/lineman/blob/master/config/application.coffee#L126).
By the way, nice lib... great idea to extend _ with it ... I made a similar project some months ago, but it was more orientated to extend default backbone models &amp; views with class-like behaviour: https://github.com/johnHackworth/SeedJs
Oops! Yep, you got it right! Thanks! =]
Classes that use self etc will break as soon as they are minified.
How do you mean?
Yes I know, it's something I got in my todo list. AngularJS has the same problem as noted here: http://docs.angularjs.org/tutorial/step_05#anoteonminification The solution they use is to manually specify the argument names in an array. Using the same approach in this project will go against the purpose of writing more compact code. One solution that I have in mind is to write a grunt task that fills the mentioned arrays prior to minification, but I haven't tried yet. 
For example a function like this: function(self){} After minification would turn in something like this: function(s){} Underclass looks for an argument called 'self' to pass the 'this' value, but it can't find it, so magic doesn't happen :_
What makes it non-deterministic? Any idea?
How do you add elements inside the text in the demo? I thought you could maybe select a piece of text and then either right-click to wrap it in element, or a palette would appear.
The physics thing probably uses Math.random() somewhere
Looks like it'll still be there in about:config, and that addons can still tweak it.
There is emscripten that takes C++ code and converts it to JavaScript, but its not a simple text box conversion like you are looking for. 
this
Disabling JS across the whole browser seems like a relic of times past. Surely even the most tinfoil hat wearing folks have at least one site that they trust, and so an approach like NoScript makes much more sense than a blunt weapon. 
[List of languages that compile to JS](https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS). 
Function to sum numbers was confusing - no info about input, I assumed input will be array, turned out it wasn't. "JSON string with a, 'good', 'do' property" was unclear too. Was that supposed to simulate conversations with clients?
Yes, this is super confusing. Half the article is useless due to this typo.
Fantastic. Disabling JavaScript is like disabling CSS at this point. It's integral to the web experience. 
why remove choice? (for most users who don't know about config)
Everyone makes mistakes, and [this](http://i.imgur.com/c6OOjp7.png) is what Hipmunk (as one example) looks like when JavaScript is disabled. See also [Checkboxes that kill your product](http://limi.net/checkboxes-that-kill/), a great overview of these changes from a former Mozilla designer.
See also [Checkboxes that kill your product](http://limi.net/checkboxes-that-kill/), a wonderful overview of these changes from a former Mozilla designer.
Maybe it has changed in the last hour? I had assumed they were going to pass an arbitrary number of arguments, but got an array in the first argument instead. I just looked at the src to figure out what they were asking.
The wording and logic will absolutely need to be refined. I just put these together quickly to prove out the concept. Thanks for the feedback and keep it coming I will make improvements as I can.
The author makes a flawed argument. For example, not having images load automatically breaks Google. That is a flaw with Google, not the browser. 
This is a little annoying to have to do the about:config thing. It would be cool if I could make a bookmark with something like: about:config?q=javascript.enabled:false 
Wow thats a pretty big Fail on the developer of Hipmunk. I don't agree with people who disable javascript, but it should at least fallback to saying "This site requires Javascript be enabled."
Hellooooo, XSRF!
&gt; If a Firefox user keeps his browser up to date, he can run WebGL Now you're lying. If their graphics card is strange, then they cannot run WebGL no matter how updated Firefox is. It's not the browsers fault, but it's still reality.
And, again, you're deflecting from what I said. You CAN run WebGL with a modern browser. If you don't have the right hardware, that's not the browser's fault, but the browser is not the problem. This whole thing is getting stupid. I'm stopping now.
So use NoScript like I said, which defaults to not allowing JavaScript. Disabling it in the browser preferences disables JS for every site without any capability of allowing the user to whitelist trusted sites. It was a truly useless feature, even for the tinfoil hat wearing people. 
I don't understand what's so hard about giving someone a small task that your company actually needs implemented, and having them implement it, proving that they can provide value to the company.
It's just a question folks. One that drew actual responses. This post literally promoted discussion and its down voted as though it was an ascii swastika.
NoScript is an easy and free alternative to acting like a pissy 15-year-old.
Why did you "sensor" the word "crappy"?
sorry, didn't realize that octopress wasn't showing the `{` and `}` characters. its fixed now.
Good! There is no need for an end-user to ever be able to disable javascript, it is an integral component to most if not all web apps and many websites today.
I imagine the reason was more people would disable JavaScript unintentionally then intentionally.
Check your privileges, Javascript 
One argument.. see the "The Question of Preferences" section of [this essay](http://www106.pair.com/rhp/free-software-ui.html).
if you have that attitude, i'm more than happy to not have you as a visitor. if you want what I have, you will have javascript enabled. 
it's too bad you're still on reddit, it uses javascript. and you wouldn't know how good it was without turning javascript on. 
This was the original vision for the hypertext web of the 90s, and I still feel it has some merit, however since the web got co-opted into being a general-purpose application delivery platform, this vision has faded into obscurity.
and then flame "firefox suks! i cant use this website! omg going back to internet explorer!!" all over message boards. 
Yeah, for the five people using Lynx.
There are some poorly designed/spammy/ad-ridden sites that I always turn off JavaScript before visiting. JavaScript can be used for bad just as easily as it can be used for good.
for the same reason they don't use JS in today's day and age.
I believe that's the plan.
Solving problems that don't exist,thinking that you know better than your customers, and taking away choices is at best arrogance.
Great idea! Although interacting through the console could get tedious after a while... especially if the user is required to write functions with any kind of complexity in later levels.
Pretty sure websites aren't allowed to access those URIs (or I've just been spoiled by NoScript?).
You might prefer gopher.
Maybe this is just because of the way I write Javascript, but I expected a call to Jasper() to return a function that would *be* the next test, rather than constantly calling the same top-level Jasper function.
If you're not a more educated user, you have no idea what javascript is. 
They are removing the preference checkbox, not the ability to do so. You can still do so in about:config.
What a poorly designed application. I disable dial-turning on untrusted devices by default, where's the graceful degradation?
They wouldn't have the insight to turn it off. Your point is moot. 
Websites can autoplay music and do all sorts of other annoying crap without the need for javascript. Most don't. There comes a point where you just have to call out bad practices and choose your sites better. 
You don't always have that choice.
All the more reason to make something like NoScript standard so that you can empower users to make their own decisions as to what is safe. Burying basic decisions in the about:config or forcing the use of a largely unknown addon is a bad idea for safety.
Why not use NoScript, AdBlockPlus, or a combination of both? It'd be easier than manually changing your settings each time.
Based on [this blog post](http://limi.net/checkboxes-that-kill/), I think that checkbox's days are numbered.
People don't have the instinct to go "My page isn't working properly! Oh, I need to whitelist this script to run". They just assume your site is broken and leave. Would browsers require some sort of tutorial before use if noscript was built in? What you're proposing is not practical. Javascript is not the enemy, the people who abuse it are. The internet itself is dangerous, the solution isn't playing the role of overprotective parent. Disabling javascript is a niche. It's a relic of a concept that only the most diehard of people cling to. It's an advance feature that can cause confusion and break a lot of websites. I see no problem moving it to a place where people can't accidentally turn it on. I feel like the impact of this change will be almost non-existent and it's not worth making a fuss over.
Guess it's because I don't go to those sites often enough to justify installing extra software for them (it only takes a few seconds to disable/enable javascript). But I guess I could see me using them in the future.
Finally, someone talking sense. People are fretting all over this issue as if it this change will kill them. People who want to disable Javascript can simply install NoScript and get over it. Those who aren't tech savy to get NoScript are also not save enough to know JS!
Finally.
There'll be a addon like webdeveloper that you can use to toggle it for testing etc.
&gt; If the fault is perceived by your users to be with your product, then the fault IS with your product. Doesn't matter what the real reason is. Well from an accessibility point of view, I'm a bit dismayed Google nerfs the page. I thought that sort of stuff was illegal in the US? 
You can still disable it via about:config or by using NoScript
Adblock, Noscript, ghostery. Take your pick. 
Addons generally aren't really "software" in so much as they are packs that add to an existing browser software. In most cases they'll just take up a tiny bit of space and maybe some extra memory if you go addon crazy. If you don't go to websites that go adcrazy enough to justify installing an adblocker, you probably wouldn't even have to maintain the adblocker. Just subscribe to easylist and then leave it. 
Yes, you do. If a site sucks, leave straight away. This is the same argument as for sites with pop-ups or 10-page articles. If their terrible practices stop them getting visitors, they will eventually reconsider.
instantly thought of this and agree with what was said. Settings should not allow you to break the product!
First of all there are many of the most commonly visited websites that can be used without JavaScript enabled: Google, Bing, CNN, Fox News, and so forth. Secondly, if I were the uneducated user and searches told me the only way to be safe was to download additional software I would be suspicious.
I just don't understand reddit sometimes. The message of the down arrow that reads "does not contribute to discussion" seems mandatory these days. Webdev should know better anyway, you would think.
Does it actually remove the input element, or is it just a visibility issue? I'd assume most screen readers would cope with the second case fine.
I completely agree. I think I was starting with the console since it is so completely available now. That, and the fact that some people might want to include the library in their public website as an easter egg to be found. As this project grows I hope that the tasks available also grow. The tasks that I have started with have been intentionally small to implement an answer for to keep it accomplishable in the console.
I really like your idea. Maybe it could be added as an optional route of execution. I'll keep it in mind.
this is a bit of a travesty. Both frameworks have there strenght and weakness. However AngularJS is better suited for devs coming from FLEX like me or WPF and Silverlight. My second framework of choice would be CanJS , which very good, too bad it is not as popular as Angular and Ember.
What if you don't want that product? The user should be able to choose which products run on his or her machine. For example, some sites think that bombarding you with popups is part of their product. You would get hit by this inconvenience before you even have a chance to navigate away, if there is no setting to try and prevent that.
The built-in popup blocker will still be there. 
I would checkout the following post that I commented on. I added a pretty hefty list of learning resources. It sounds like you have previous programming skills so you may just want to go straight to the vids, download, and play at 2x speed, and slow down on the parts that are new. •http://www.reddit.com/r/javascript/comments/1eenmj/intermediate_javascript_course/ • Assuming you have previous programming knowledge, I would pickup a copy of Crockford's 'The good parts' book. It's thin and assumes you know what a function does, etc. Also heres a preview of some of the book: http://www.youtube.com/watch?v=hQVTIJBZook • Checkout how most people structure their JS code https://github.com/airbnb/javascript &gt; Should I skip over the DOM?: If you're never going to touch the DOM then I would skip it for now. It's the most frustrating part of web development by far. Technically it's an API on the browser that JavaScript can access, not part of the language but they go hand and hand.
You mean porn.
Pretty sure most people use [links](http://en.wikipedia.org/wiki/Links_%28web_browser%29) over lynx nowadays.
Yep, that is as far as I got as well. I left it running over the weekend on my work computer to see whether something would happen eventually, but I guess there was a power outage :-\
That's one specific example and not really the point. The point being that settings exist to allow you to configure the way you experience the web, and that ultimately the user should have the final say, not the owner of the web site you want to visit.
Users are not logical agents.
Users should still be able to customize the product to disable JavaScript (and they can with extensions) but making this option part of the main settings UI when it can have disastrous effects and most people will never need to change it -- that just doesn't make sense.
JavaScript: The Good Parts is a pretty good book; if you're familiar with C or something like that you should pick us JS quickly because the syntax is the same just a bit more verbose, and the loose typing will get you offguard. However, it's a really small book, so you probably need to read it a couple of times before you understand 'advanced' JS. Another way to expand your JS knowledge is reading the code of .js libs like jQuery, three.js, babylon.js, angular.js, etc etc. Node.js is a JS library but you're not likely to understand what the hell is going on if you've never done server side scripting before. 
I like how instead of making it clearer what the option does and how it could disrupt your browser, most people agree with the complete, unconditional dumbification of the browser. At least we will still have about:config ... until someone decides a user could come across some misguided tutorial on the web and decides to remove access to it as well.
http://www.reddit.com/r/coffeescript
For jquery 1.7 and up use [.on()](http://api.jquery.com/on/), see [this stackoverflow thread](http://stackoverflow.com/questions/6658752/jquery-click-event-doesnt-work-on-dynamically-generated-elements) for examples.
What I wish I knew before reading about any new framework: MVC, design patterns and ECMAScript 6
how about automagically generating getter/setter methods for properties if they are not defined?
I mostly agree with that. I just don't agree with the blanket idea that "Settings should not allow you to break the product", because that's an unreasonable restriction when 'the product' can mean any one of a million web sites out there. Some settings are very useful for some users and will break some sites. eg. Font size overrides.
For the small population of people that want to break *useful* products (pop-ups being a false example because Firefox still had pop-up blockers for non-useful things like that) for whatever reason, you can download add-ons. It is not the responsibility of the browser to allow you to break Google.
But JavaScript and images are an integral part of the web experience now. That's like saying "removing CSS breaks Google -- that's Google's fault."
If you would like to attach the event to '.button_class', then yes. The second parameter is the selector to listen to in the event delegation. Read more here: http://api.jquery.com/on/
It **is** a flaw with their product: a lack of appropriate contextualization and indications within the preferences menu. The solution seems to have been to fix the problem by nuking the option entirely. No "hey, let me restore to factory default for a few seconds to check if it resolves your problems, and then we'll work from there", no "hey, you probably shouldn't be flicking this option on and off" dialog box, no "hey, this option appears under this new category of options which represents those that many websites expect you to have enabled and will not enable correctly if you disable them", just the complete annihilation of an option that can and is useful even for normal web browsing, specially if you go through the effort of clicking on Advanced and toggling on and off the specific options.
I guess I just don't think much of the traditional process in general. Programming is difficult, expansive work, and trying to really assess suitability without seeing that in action over a decent stretch of time seems like it would be damn near impossible. And given that these days you can plug a person into a work position without even bringing them to your office, it just strikes me as pointless. A quiz-formatted skills assessment is liable to pass a bunch of kids who spent a few days on Codecademy, who don't know anything about managing complexity, and aren't ready for real work at all, you know? "Refactoring? Unit tests? What's that?" This level of assessment seems only really suitable for the lowest of entry level programming positions, or as a barrier to application. I definitely wouldn't want to use it for the interview itself. A portfolio or GitHub profile link strikes me as a better metric. If a candidate is accomplished, that proves a lot that this sort of quiz assessment wouldn't give you any clue about. Better, still, would just be to keep parts of your codebase open source. i.e. Develop focused libraries for internal use that you also share with the world. Twitter does this, for example. As does the Ember development team (In Ember's case, their whole project is open source, but they're breaking it up into components that you can use independent of Ember, like Backburner for their run loop, Handlebars for templating, RSVP for working with promises). Then you can just hire people who resolve your issues and send you good pull requests.
I like this idea. What about making private methods for those that start with an underscore?
**HTML** &lt;div id="populateMe"&gt;&lt;/div&gt; In this example, your AJAX would add elements to #populateMe. **JavaScript** $('#populateMe').on('click', 'li', function (e) { console.log(this); // Should dump the clicked element to the console } The click event bubbles up to parent elements. That's why we register the click event on the container, but then have a sub-selector of sorts to check if the clicked element meets that selector. See also: * http://stackoverflow.com/a/8191071/362536 * http://api.jquery.com/on/
But those features still exist--they're just not exposed in the main UI because they're not use scenarios for 99% of users. Nothing is changing about the capability of the browser--just what checkboxes exist in the "official" settings panel.
Unfortunately, users like web browsers that work for the websites they go to--regardless of their standards compliance. And Firefox needs users in order to be funded.
If you've been in modern web development for any amount of time, you'd know most of those noscript tags almost always contain a TURN YOUR DAMN JAVASCRIPT ON message. 
Well, you can go halfway there with: `about:config?filter=javascript.enabled`
The way to fix those websites is a single site block in NoScript. Disabling the whole browser over a few websites is silly.
Are you using any other libraries? If you don't have any real compelling reason not to, maybe just bite the bullet and use jQuery? It'll likely come in handy in other places.
Right, that's basically what I said. Addons address the issue better.
Not w3m?
Try this: //This is my rudimentary library for HTML select elements. This is basic, please //feel free to expand as you wish. This code contains no error messaging. I am not //going to write error messaing, but I strongly suggest you write some error messaging //if you use this code. // //This code is not licensed. I wrote this for a reddit thread. No need to claim anybody as //the author and reproduction is unlimited. // //Example usage: //Select(document.getElementById("mySelectList"), "unique"); // //x = a reference to the select element in the dom (required) //y = a list of computational options (required) //z = a value, only required by certain options // //y values: //"values" - Returns an array of option values without any further processing //"alpha" - Returns the list of option values in alphabetical order in an array //"reverse" - Returns the list of option values in reverse alphabetical order in an array //"numbers" - Returns an array of only the number values //"greater" - Returns an array of number values greater than numeric value "z" //"lesser" - Returns an array of number values lesser than numeric value "z" //"strings" - Returns an array of non-numbers in an array //"value" - Tests to see if one of the option values exactly matches value "z". Returns boolean true or false. //"count" - Returns a number counting the total number of options values. //"unique" - Returns an array of only unique values. //"unique_count" - Returns a number counting the unique values. var Select = function (x, y, z) { var a = x.getElementsByTagName("option"), b = a.length, c = 0, d = [], e = [], f = 0, g = 0; for (c = 0; c &lt; b; c += 1) { d.push(a[c].value); } switch (y) { case "values": return d; case "alpha": return d.sort(); case "reverse": return d.sort().reverse(); case "numbers": for (c = 0; c &lt; b; c += 1) { if (isNaN(d[c]) === false) { e.push(d[c]); } } return e; case "greater": if (isNaN(z) === false) { f = Number(z); for (c = 0; c &lt; b; c += 1) { if (isNaN(d[c]) === false) { g = Number(d[c]); if (g &gt; f) { e.push(d[c]); } } } } return e; case "lesser": if (isNaN(z) === false) { f = Number(z); for (c = 0; c &lt; b; c += 1) { if (isNaN(d[c]) === false) { g = Number(d[c]); if (g &lt; f) { e.push(d[c]); } } } } return e; case "strings": for (c = 0; c &lt; b; c += 1) { if (isNaN(d[c]) === true) { e.push(d[c]); } } return e; case "value": if (z === undefined) { return false; } for (c = 0; c &lt; b; c += 1) { if (d[c] === z) { return true; } } return false; case "count": return b; case "unique": for (c = b - 1; c &gt; -1; c -= 1) { for (f = c - 1; f &gt; -1; f -= 1) { if (d[f] === d[c]) { break; } } if (f === -1) { e.push(d[c]); } } return e.reverse(); case "unique_count": for (c = b - 1; c &gt; -1; c -= 1) { for (f = c - 1; f &gt; -1; f -= 1) { if (d[f] === d[c]) { break; } } if (f === -1) { e.push(d[c]); } } return e.length; } };
As I said elsewhere, I'm not arguing to keep the setting, I'm arguing with the idea that "Settings should not allow you to break the product".
I wrote [a port of chosen for yui3](http://tkh44.github.io/chosenyui3/). If you have any questions feel free to ask. It actually fixes some bugs and has better RTL support than the original.
If you have prior programming experience the hardest thing you will learn in JavaScript is not using OOP. Yes, JavaScript does provide support for poly-instantiation, constructors, and the like; but I recommend you avoid OOP while learning the language. JS does not have classes and does not have block scope, so OOP will not work like it looks in other languages. Something to keep in mind is that JavaScript supports lambdas and closure natively. An alternative approach is to focus on the relationships of things in various multidimensional scopes, that does mean nesting functions, opposed to static references.
That's wonderful! Thank you for your contribution.
This is a dumb thing to say.
Let me get back to you on that, just got a call from Admiral Ackbar on the other line.
&gt; http://google.com I've seen Google working on every browser. Even stuff like Lynx can use Google, unless they've decided to drop support, which seems unlikely.
Google without images in Firefox: http://i.imgur.com/3aLJmS2.png
Thanks for this. I built a tool that will run a battery of tests against Sauce Labs a couple months back. https://github.com/theablefew/grunt-qettlhup I think I'm going to dig through this grunt lib and see if I can incorporate it into my system so that Qettlhup has a little more control. I also built [Yamok](https://github.com/theablefew/yamok) which helps build the necessary JSON file. We use SauceLabs a lot and test on lots of browsers, and it's just too much work to manually run against everything. Hope this may help you. Feel free to ask me any questions or let me know if you have any ideas to make it better! 
Unless it's your job.
No... but I won't judge you if that's where your mind goes. :)
Mousetrap: http://craig.is/killing/mice
Whose job is it to visit terrible sites?
If you're a work for a news company, and you want to keep up to date with the stories your competitors are covering, no matter how awful their sites are, full of ads and other annoying Javascript-enabled "features", you gotta go to those pages.
Simple fix , get rid of that crap and use Chrome.
Try to use your imagination. Jeez...
The only way to do this is periodically checking the object for changes until Object.observe is available (there is an experimental shim here https://github.com/jdarling/Object.observe) (you could also look at Object.defineProperty - I'm sure there is an mvc thing out there that uses it somewhere)
Native methods are faster than jQuery wrappers? Shocker.
I converted it to text and have pasted the result below, once in plaintext, and once in code mark-up. It looks like most of the code is for generating the warning window that comes up when you click the button. The rest of the code appears to stop loading the page until you make a decision, and take you back to index.asp if you click cancel. I see reboot.asp mentioned, but from what I can tell, that isn't actually a "web-page" per se. I'm guessing, after I authenticate onto the router, a may be able to overload a command to launch reboot.asp with some of the information listed in this function to force a reboot. Then again, I could be completely wrong. "function reboot(){\n\tif(confirm(\"Rebooting the router takes about 30 seconds. Are you sure you want to reboot the router now?\")){\n \t\t if(window.frames[\"statusframe\"] &amp;&amp; window.frames[\"statusframe\"].stopFlag == 0){\n \t\t window.frames[\"statusframe\"].stopFlag = 1;\n \t\t //alert(window.frames[\"statusframe\"].stopFlag);\n \t\t }\n\t\tshowLoading(60);\n\t\tsetTimeout(\"location.href = '/index.asp';\", 60000);\n\t\t$(\"hidden_frame\").src = \"Reboot.asp\";\n\t}\n}" [17:07:34.457] function reboot(){ if(confirm("Rebooting the router takes about 30 seconds. Are you sure you want to reboot the router now?")){ if(window.frames["statusframe"] &amp;&amp; window.frames["statusframe"].stopFlag == 0){ window.frames["statusframe"].stopFlag = 1; //alert(window.frames["statusframe"].stopFlag); } showLoading(60); setTimeout("location.href = '/index.asp';", 60000); $("hidden_frame").src = "Reboot.asp"; } }
Yes but NoScript isn't part of the product and forcing someone to go to about:config is rediculous. I'm not turning it off but I'm sure there are people with a need to do so. Like let's say when a exploitable bug is found in js engine. The good thing it's not like it's Chrome that's doing it just Mozilla so whatever.
The capabilities of a browser shouldn't be determined by the vagaries of various web sites. It should be the other way around. Not every feature a developer might want should mean browsers support it. Does nobody remember ActiveX?
That kind of thinking is how we got non standard tags in the browser wars and faced a big battle to improve matters. Correctness is not determined by the number of confused end users.
People who use Internet Explorer intentionally (rather than those forced to do so at work, etc) aren't ever going into their browser's settings to configure them.
To be honest, I don't really want to have to deal with about:config hacks. If they take it away as an option, it will just give website makers an excuse to use unnecessarily high amounts of JavaScript because "turning it off isn't even an option anymore". If grandmas are turning JavaScript off accidentally, then more in-your-face documentation is needed for the Settings dialog, and perhaps some sort of status symbol near the address bar. However, I think that most websites already do an annoying enough job of warning you if you have JavaScript disabled, making the current situation not that bad. Not to mention that if you do manage to accidentally turn off JavaScript, most websites give you instructions on how to turn it back on for your particular browser. It'll also be an unexpected change for me and many others who update their browser only to discover that JavaScript has been re-enabled without any warning, and upon looking for a way to turn it back off becoming clueless. Grandmas could have a perfectly valid reason to disable JavaScript if they have a slow computer. Besides the practical aspect of it, they could also be concerned about running nonfree JavaScript on their computers; I'm sure RMS, [a recently recognized pioneer of the Internet](http://www.internethalloffame.org/inductees/richard-stallman), would be against this change for that reason. Yes, they could use LibreJS, but ultimately it's easier for Grandma to change a setting in your browser than to install an addon.
Sure, but at least you're being compensated for putting up with shitty sites.
It's okay to select a market.
With Millions of users Firefox has to make certain decisions not everyone will agree with. They're focusing on keeping the internet open, usable and safe. I agree with them them that the benefits of JavaScript outway the risks. How many of the most popular sites would break without JavaScript? JavaScript is powering the way forward for the power of the web, why would Firefox allow users to break this? A quick search online with the simplest of queries will turn up the addons needed to disable JavaScript, if a user wanted that.
A few resources that should help: * A quick start for programmers (disclaimer: I’m the author): http://www.2ality.com/2013/06/basic-javascript.html * Tips for keeping up to date with web development: http://uptodate.frontendrescue.org/ * Free books on web development: http://jsbooks.revolunet.com/ * Forum for beginners: http://jsmentors.com * Last, but not least: http://www.reddit.com/r/LearnJavascript
Let the market decide.
My personal opinion is that writing large programs based upon context and relationships produces code that is vastly easier to read and maintain without minimal additional costs to memory and faster execution speeds. More important though is that programs written based upon relationships appear to scale far more efficiently that OOP when there is not immediate access to the file system for subdividing applications into multiple library files.
Duh
It's not the responsibility of the browser to decide what the user has broken. Google isn't broken - it's state is quite independent of the browser or it's settings. Just do what the fuck you're told to do - how hard is that?
Having your web site viewed is a privilege - it means someone thinks it's worth bothering with even though there are billions of others out there.
No shit why would anyone use anything else?
Doesn't contribute to the discussion they want to have - fuck em.
Whats the benefit of using grunt over just writing a simple node script to perform these tasks? It seems to me grunt is a pretty thin wrapper around a lot of node tools that already exist and do the same thing with roughly the same amount of code. Is it the "packageability" aspect of being able to publish your package with the grunt dependency out to npm for others to hack on your project easier? Is grunt basically the JS world's answer to the concept of a "solution" or "workspace" file you see in IDEs that allow developers to share and manage their development artifacts with all referenced dependencies intact, so that another dev can just download it, mess with the code, and hit "build"?
//毎フレーム初期化 0_O
That's rather cool thanks :-)
Nice. Could be me, but i just can't understand the one which is asking to create a function returning a function returning the arg. I think i did everything from applies to callbacks, and even if the 42 is well being served at the end, jasper is sill nagging me. I didn't look into the reduce source cause i was too lazy, but that seems weird to me. e: i don't know why i got a -1 on my comment. If this is not relevant, feel free to explain what i did wrong rather than clicking the arrow and leave :)
I don't think you're seeing the bigger picture. If their site is awful, *and* all regular users leave instantly, then they would not be a competitor and thus no reason to visit.
Except that what the website owner offers is one specific experience. If you want it different you go somewhere else, just like you don't go to KFC demanding they give you steamed chicken and potato salad. 
Don't know where the negativity comes from; haters gonna hate I guess. So, you should provide a function that takes an argument - let's call it 'a' - and returns a function that will return the argument passed to the outer function - 'a'. This is an example of a closure. One upgrade I need to work on is better instructions. Providing what is being tested might help people find the correct solution. But it was meant to be a little challenging and somewhat encouraging of looking into the source.
I agree with you that finding the "right" people isn't easy and should not be trivialized. I am not attempting to automate this in any way. What Jasper is attempting to do is provide a tool to use however it is useful to you or your situation. I am hoping to change up our process a little to make it closer to real experience than what it is right now. You might be in a much better situation than I have been in the past and currently with regard to interviewing.
looks good - why couple it to jQuery though? not much there that is hard to do x-browser. You can easily add an jQuery wrapper in a separate file - increases the audience for the plugin
I would say that if you get through all of the asks that Jasper has you at least have a decent understanding of the language; enough to be dangerous in a manner of speaking I guess.
If the user can break your product, through their settings, then you have a pretty crap product, don't you? Taking away user choice is not a cure for design incompetence.
This would not be an issue if technology basics were a part of standard education. The idea that we can all stand around debating how to best address ignorance without education is laughable. 
Mobile safari
That's a pretty sub-optimal way to do things, though. Why pass the localization preferences and data separately to the browser and have it localize, when you could just localize on the server?
I think, in that niche role of a hoop to jump through to prove basic competence before application, this sort of thing is great. I remember being excited when I heard about that reddit easter egg one and then being disappointed that it was so easy, but appreciating the idea of it, rather than just some obvious "Careers" link.
Omfg, yeah i think it needs some better instructions or i didn't read clearly the "Write a function that takes &lt;b&gt;an argument&lt;/b&gt;". I thought alongside the last example passing arguments var to the inner function and whatever i did, it didnt accept it. Maybe reading instructions into the console doesn't feel very natural when you spend most of your time reading code and loggings. e: ok the last ones were meaningful :)
My feelings, looking at what does and does not work with valueOf tricks, is that it is more trouble than it is worth. It seems like the only real thing you get from it is being able to write O1 &lt; O2 and have this be resolved by converting the objects to strings or numbers for the comparison. Objects of two disjoint class trees, which should not be comparable, and for which I would expect comparison to fail with an informative error message, will compare "correctly" with this "trick," for instance. Furthermore, programming errors of a mysterious nature may arise if you use an object with valueOf in a place where it is converted without knowing. I can imagine the obscure error messages which may result where arbitrary numbers show up where you expect meaningful values to be. The mechanism by which these expressions are made to mean something is obscure, unsafe, and peculiar and I won't be using it in any of my code. 
Looks pretty nice, but did I miss something or why I cannot find any API or examples how to use it?
`valueOf` is a method, not an operator.
I think you're not too far off, though I'm no expert in Grunt. From my experiences with it, it plays out like a build framework that exposes a common API for invoking various tools (plugins). If one were to tackle the same thing with shell scripts (and/or vanilla NodeJS scripts), it wouldn't be that much work really, but you'd still have to handle all the glue code yourself: actually generating the inputs for and then invoking the binaries used, parsing the results and generating meaningful output and success/failure codes, etc. While not the most challenging task, you'd most likely eventually arrive at some pseudo-framework so as to cut down on code duplication and to make it easier for others to extend and embed the tool. I think Grunt is the publication of one such system.
no longer looks like shit! here's how to [correctly put gists in a tumblr](https://gist.github.com/calvinmetcalf/5910196)
Fair points. Maybe overriding valueOf isn't a bad idea.
"Do what the fuck you're told to do" is really bad reasoning when that "do" is inherently harmful and is in no-way useful in the present day. Why not just have an option to wipe the HDD? C'mon, do what you're told to do!
this is a nice implementation of packing: http://packery.metafizzy.co
I think the reason the .valueOf function is so 'radically underused' is because of the behavior of the == and === operators. Now if you want to compare two values you need to know if they are both objects that implement .valueOf or if they're primitive. Which kind of defeats the purpose of using .valueOf to begin with. 
Exactly.
Yep, cool ideas! Working on this, thanks for the feedback! =]
Who said anything about regular users leaving?
Huh? Are you even [following the conversation?](http://www.reddit.com/r/javascript/comments/1hdup8/mozilla_remove_the_option_to_disable_javascript/catmbmv)
Now try doing it with lazy evaluation using something like http://danieltao.com/lazy.js/
Thank you for your insightful and polite reply.
Yes. Are you?
Huh, very interesting! It's so cool that there are multiple libraries out there with a similar API yet completely different approaches. I used to think lodash would be best in production, but this looks even better. I use Underscore for posts and things because it's more widely known in my opinion. It seems to have a bigger force behind it too. Looks great though, thanks!
Yes, but by the Firefox developer's argument, that should be removed too. Switching on pop-up blocking breaks plenty of sites, including lots of download sites.
Yeah I've used packery a lot. But I really want something that will calculate the sizes for me!
This was nice, however I feel ( at least on the Sr level) this is to simplistic. I would want to see some recursion, maybe 'optimize this function', 'fix this function' etc. Also, the wording is weird. "Add a 'jasper' method to the prototype of the object passed to the function your write." That could have been worded much better like, "write a function Whose argument is a function and give it a prototype of 'jasper' "
I completely agree that this does not, and will never, take the place of peer evaluation and human interaction when determining the skill level of someone. This is merely a little tool that can be used as discussion points. I am not attempting to write an algorithm analyzer or code merit system; probably because I am grossly under-qualified to do such a thing. I was focusing on short challenges that could be quickly answered pretty simply and easily tested for correctness. I have heard the request for a recursive challenge before, and think it is a good topic to test on. The problem resides in how to test for recursion vs. simple iteration? (That really is a question, if you know of a good way please enlighten me because I would like to know.) That being said I am also trying to not dive too deep into code analysis by using something like Esprima to parse out what is submitted and evaluate the AST.
I had honestly not heard of Play, but i'm intrigued. I'm going to try to learn some Scala, thanks for the tips.
Shamelessly posting a link to your own blog is not cool.
Yes you too. You forgot to include 'rain is wet' in your analysis.
Hacker News is your friend.
No, no, not an OS. Why not have Firefox have a setting that said "Click this button to wipe your HDD". The connection is both options are 1) inherently harmful for 99% of cases and 2) shouldn't be made a default setting because of 1. Same with an OS and wiping the HDD -- you often have to use a command line and tell a programming language to recursively delete files. There is no graphical button designed by someone anywhere that says "Wipe the HDD now."
No there are actually OSes with GUIs. In fact they don't require anything as complicated as going to an about box or other arcane bullshit and wiping a hard drive a permanent change. The consequences of turning off javascript aren't even in the same ballpark in fact it's a ridiculous comparison all the way around. 
 &gt; var e = new Node(5) &gt; var f = new Node(5) &gt; &gt; e == f /// returns false Man that's pretty surprising. I would have assumed the == between two Objects would result in something like `ValueOf(e) == ValueOf(f)` so it should return true (whereas `===` would be the operator that returns false because they are not the same object). This line in the ECMA standard explains why, but I really think it's a shortcoming. &gt;1.If Type(x) is the same as Type(y), then &gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;f. Return true if x and y refer to the same object. Otherwise, return false.
I agree 100% that it will not take the place of peer evaluation, however I could see this as an initial screen. If you were to minimize / obfuscate the code, then after all is said and done, have an email or phone or some contact info for a job, that could be nice (Of course keep in mind someone could easily view the code and just take the contact info, but if they know how to do that, then that might serve as 'good enough' to warrant the contact). Do you log all of the users attempts? That would be nice too, so a reviewer could see if the person fucked up on logic or syntax. Recursive, nice easy one is to write a binary search algo, or the Fibonacci sequence to the Nth degree. Those are as simple of a recursive I can think of. Now, both of those can be brute forced obviously, but, there is no real way to get around that. Well... i guess you could analyze the function and confirm that at least one return statement calls the originating function, but that seems like waaaayyy over kill
&gt;It gives you some control over comparison of your custom object types within your application. So it does what operator overloading does, but is much, much worse at it, and much, much more limited. It's almost like we'd be better off using a good language, too bad that isn't an option in the browser.
Since IE has the worst javascript performance and compatibility, why would anyone in their right mind do that?
You said "modern browsers" mobile is also that animal. 
If you want some to fit your specific needs, you might want to just do the math ;)
Congratulations! You found a browser that doesn't run WebGL. Insignificant as it was, you found it. There. Now do you feel better?
Testing. I run most my automated tests in phanthomjs. Being able to ditch ie hacks such as selenium which gives more false positives than anything would be great.
You made an inaccurate statement and got called on it. That's a thing that happens. No need to get hostile. 
Also mobile safari and mobile WebKit in general are not insignificant. Lynx browser is insignificant, and does support webGL. But hey, no one is bringing it up.
I don't know about compatibility, but IE10 at least has very good performance.
I don't think I've ever understood this complaint. I find this style of programming much *easier* to write and to reason over than the imperative style. What makes it difficult? Instead of writing a one-off algorithm to do a bunch of translations over a set of data, you just... specify the translations you want, and they happen.
Very cool!
FP is a challenge the same way imperative programming is a challenge. It's not like functional programming is inherently harder, you're just not used to it. Once you've used it for a bit the way you model problems changes, and as a result functional solutions come into your thoughts more readily.
[IE10 has less than half the performance of Chrome or Firefox.](http://www.tomshardware.com/reviews/chrome-27-firefox-21-opera-next,3534-12.html) Tom's Hardware: &gt;Firefox 22 pulls off an upset, replacing the long-time performance champion Google Chrome as the new speed king! Google doesn't lose by very much though. In fact, if we moved the decimal point and rounded, this would show up as a tie. Meanwhile, moving on to the next win-eligible browser, IE10 is far behind in third place, with less than half the performance score of Firefox 22 or Chrome 27.
This was a neat idea. I did them all very quickly, except for the summing one. My original attempt was: Jasper(function() { return arguments.reduce(function(a, b) { return a + b; }); }); I guess I had always assumed `arguments` was an array, but as it turns out, it's actually just an array-like object (TIL!). So, thanks for prompting me to learn something. :-)
You'd still have to use selenium for testing IE &lt; 10.
Then it probably isn't a good one.
Look at csscss on github
This isn't entirely new... WSH has been around forever. It's my understanding that you can expose your application to it, and let folks code something up in JavaScript (or VB for that matter).
Ideas are a dime a dozen. The effort and investment in the idea is what makes it worth something. You can directly protect your code through licensing, but don't worry too much about it getting stolen. It's likely that a programmer could build their own version of your product if they wanted to, closed source or open source. Invest your energy in refining and marketing your product instead of worrying about source availability.
Have an upvote for the useful answer.
Well I know this is my problem, I have no idea what the maths would/should be! So was hoping someone would point me toward something. Once I have a bit of an example in usually quite good at hacking it to my own needs :)
 I'm afraid I have to agree with the other replies. I think it is no harder than imperative programming, if not easier in come cases, it just requires a different thought process. In regards to speed, as long as you are not taking it to extremes or using it in your animation loop I don't see a problem. The code I work with day to day (which is on a *massive* scale) is highly inefficient in places. The only visible bottlenecks usually involve the DOM and can almost always be optimised. I think most arguments against its use can be made irrelevant by doing things slightly differently to the ways you are used to. It's not better or worse in my opinion, just different. It can be more suited for different situations, piping data through a series of complex manipulations for example.
Once the code is in the front-end, it's gonna be more or less readable. Even if you are going to minimize or even obfuscate it, any experienced frontend developer will be able to read it. Copyright and licenses will protect you from others directly ripping off your code, but it will not protect your idea. In this frontend-related world, your only chance is to just be a lot better than anyone else at realising your idea. If your product is really good, everyone's copy will look like a cheap rip-off.
thx
And your link is Firefox from four versions ago. Yes, big whoop.
It is a different animal from desktop. And tablets are another story too. But it's still the "modern browsers" animal. They have local storage, canvas and svg ect ect. Your statement was only mildly inaccurate, it's not a big deal. But in response to being called on it, you are hostile and insulting. You could have just said "we define modern browsers differently" and made a case for that; or you could have said "my bad I meant modern desktop browsers". But instead it's come to this. And here I thought most other developers were so reasonable.
Well really it's just that I don't feel can help without more information. Making boxes fit and scale air tight is not very hard, the challenge is in understand the nuance of when to scale and when to shift. If you make an attempt, post it on SO and link me here so I can provide better help.
Ok. Removing - jQuery("dl#narrow-by-list&gt; dd").hide(); and replacing with - jQuery("dl#narrow-by-list&gt; dd:not(:first)").hide(); seemed to work. To open others by default can i just?? jQuery("dl#narrow-by-list&gt; dd:not(:second)").hide(); jQuery("dl#narrow-by-list&gt; dd:not(:fifth)").hide(); or change it up and? jQuery("dl#narrow-by-list&gt; dd:not(:fifth)").show(); 
Hope that didn't sound disingenuous - I really appreciate any help at all! The concept is: * I have an amount of boxes: *x* * I have a bin, which can have a variable width and height: *w*, *h* (these will be determined on page load - doesn't have to update on page resize etc * I want my bin to be filled with *x* boxes, but I don't want to have them as just *x* same size boxes with the height *h* and the width *w*/*x*. [This is a mockup of what I want to achieve autonomously, where as I have just placed them myself with CSS](http://i.imgur.com/hUCtmDO.png). [This codepen is kind of a start, but I am assuming it should run through each box determine the sizes then evaluate whether they'll fit in and cover the whole size.](http://codepen.io/Francext/pen/AJogD) My thinking is that it should take the area of the bin, then start cutting areas out of it for each box until it's all filled - my problem is is that i'm not really sure where to begin on the maths side of things. My JS is fine, but maths is lacking!
jQuery is the herpes of web development.
Yea, it is an interesting problem. If you forced an overflow, hopefully a user would catch that unless you explicitly had in your directions 'don't use a try catch' I'll think about it and get back to you. I still think maybe the 'easiest' way that would get most of things you need would be to do a string comparison. Now my regex sucks, but you could do something like this: var funcName = someFunc.toString().split("\n")[0].split(" ")[1].split("(")[0]; var regEx = new RegExp( funcName, "g" ); if( someFunc.toString().match( regEx ).length &gt;= 2 ){ //do something. } now, obviously this can be optimized a whole fucking bunch, but this is the general idea grab func name, see if it occurs at least 2x. just my 2 cents.
Thanks for the suggestion. Definitely a candidate for inclusion.
I agree with you, but I was just trying to write the same thing with plain JavaScript. I was treating Underscore as a dependency to FP and didn't feel it was right to apply it everywhere. This post is kind of aimed at people that might not be using Underscore but want to compare FP to a more familiar format. I was just trying to write something that gave an identical output without sharing the code. I think the chained API is quite nice, but not showing the point of FP. They each have their place in my opinion and now I'm starting to see where FP fits better than any other technique in my day to day work. Creating anonymous functions for this is completely wrong and it should never be done. I hate that in normal JavaScript, let alone the functional side of it. You should be able to reuse your functions as part of other flows or the whole idea becomes almost pointless. Not to mention inefficient. That's like copying and pasting the prototype of a function to perform OOP inheritance, you just don't do it. Functional programmers are not smarter, there is no such thing as a functional programmer. It is just a tool to add to your box of utilities that can be used where appropriate. And as long as you do it right, it is a lot easier to test than any code I have ever seen in massive class based systems. Every module can be pulled out and tested in isolation.
The reason I say it is "harder" is that it puts a constraint on your program. Your program must be "referentially transparent". You can use purely functional data-structures but it is a constraint if you must. It can make your program slower when you can't modify your data destructively. You must abide by these constraints and trying to code it in a way that is not slower often requires some thinking. Have you programmed in Lisp? There are some operations that modify data in-place. You just use them because it seems the easiest way to solve a problem. If you program in a purely functional language it may seem it is easy but someone else has made those choices for you in the background.
This is almost always how I build my JS modules. You can take this a step farther and easily add support for CommonJS/AMD module loaders, so that anyone who wants to use your lib with require, etc., can easily do so. EDIT: I just noticed that you are passing the namespaced object to the outer function, as a and b, but you aren't using them, and instead are still directly referencing the globals. You don't need the outer function if you do that. Instead, I do something like this: https://gist.github.com/bitwalker/5920670
Ok. So how are different box types, (wide box, small box ect) declaring themselves? Can you register them on a grid? If so making said grid fluid should be doable. 
&gt; Creating anonymous functions for this is completely wrong and it should never be done 100% agree. But lets face it, they are created for this kind of stuff all the time. Is the functional equivalent of spaghetti code in imperative programming. You can do it wrong in any paradigm. &gt; Functional programmers are not smarter, there is no such thing as a functional programmer. Believe me, they exists (you are becoming one...there is no way back), and they are smarter than me. I love a little functional taste in my code, but it is harder than imperative. And if you can not see that, it is because you are getting smarter, without noticing it. 
In a JavaScript Jabber episode they discussed building NodeJS with Gecko and Chakra as an alternative to V8, but I'm not sure if anything ever came of that.
I prefer a more functional approach that sorts out some of the dependency stuff in my own code. https://gist.github.com/anonymous/5921305
First World Problem: I want to see the message to upgrade my browser, but im already using the latest version of a standards complient browser
another Angular spam.
Silly webdevs forgetting about progressive enhancement.
You can transfer ownership in the repo settings. 
If it's not present in the other browsers, it might as well not be there, as it's effectively unusable without branching code.
Can't this functionality be replicated with a combination of async.js and $.getScript?
I've been using https://github.com/benbarnett/jQuery-Animate-Enhanced this one for a while now. Seems to be mature enough to be used in production.
Ask one of the people who have made pull requests if they want to take it over, or at least give them push/npm publish access. The other option is just abandoning it. If someone finds it useful, they will just fork it and go from there (if you have a permissive license like BSD or MIT).
Too bad the biggest customers and corporations are still using IE, which makes this kinda useless in real websites. IMO it's much more important to build applications that are usable with any kind of browser rather than play around with the most cutting edge features.
If you had to use pure JS, what pattern would you use to address these issues?
Do you have &lt;script&gt;&lt;/script&gt; tags surrounding your code?
Personally I don't think progressive enhancement is the way to go. Rather I would go for graceful degradation. What I mean is that you should develop your website using your full arsenal of tools. Once you have made your website then you can then focus on making it work at a functional level for users missing certain features. This approach gives you the benefit of reduced development time and allows you to focus your time you spend on the largest percentage of users viewing your site.
So there is a dig at grunt on the website, so I'll bite, what advantage does this have over grunt and it's 1,000 plug ins? I'm afraid of this turning into one of those git vs hg debates where mercurial boosters talk about how much faster it is and don't realize that people don't use git for its speed, they use it because it's where the repositories are. 
It depends on what you're building and who your audience is. My employer is building an app using websockets and WebRTC, and 82% of our visitors are FF or Chrome. IE may never support the features we need, and we have no need to support it. Unfortunately you're right - most websites can't exclude these users. But some can. And it's better to offer these folks a path to upgrading. :)
Packery? I'm not impressed. https://dl.dropboxusercontent.com/u/19969663/packery.png (I'm good at breaking things)
Just what we need, another pretentious your-browser-is-inferior script to tell large chunks of your audience that you are better than they are. Clearly you know the ways of the internets and can pick a better browser than they can. If you require newer browser features for functionality of your web application, then detect for the presence of those features and alert the user accordingly. By singling out IE, you're creating a bigger headache for yourself and pissing off your audience. This is primarily a problem of messaging, and the difference between a helpful suggestion and elitist web developer nonsense is small. &gt; We're sorry, but your browser doesn't support the modern web. Bullshit.
That would be a cruel joke, seriously? :)
I don't understand his point about web apps and wikipedia. I'm making a webapp. It's basically a pretty interface for a database. All one page, loads templates and data from the server via a REST API. By design there's no way to do any sort of progressive enhancement. I made it this way because it feels much more responsive than my old primarily server-side synchronous sites. Works fine on my phone, tablet, all the major browsers. Doesn't work well on IE8 so I just install chrome for the users (I manage their PCs as well, corporate site). &gt;For example, is Wikipedia an app? What about when I edit an article? What about when I search for an article? Is there confusion about this? Why would these things be web apps, they're just standard sites. I thought a web app is pretty much anything that mostly lives in the client rather than being served synchronous sever-side pages. 
It's mostly an old habit at this point. It guarantees that within the scope of the function, undefined is actually undefined, and not something else because of some goofy code somewhere that accidentally assigned a value to undefined.
I take functional approaches to solving problems all the time, but only when it's the right choice. The code bed to be easy to follow and read, and the examples shown were neither. A more fluent approach would be a lot better. range(1, 11).filter(isEven).sum(); 
How do you feature detect CSS? Even IE10 has plenty of CSS problems that result in ugly and broken websites. I and many others are in a position where we can afford to drop our small group of IE users in favor of a better experience for everyone else. This isn't about elitism, it's about pragmatism, and the IE's shrinking market share is evidence that other browsers are better serving the user's needs. IE singled itself out; no other browser with significant share is as difficult to support. I agree that the messaging was poorly thought out. I updated it to say "We're sorry, but your browser doesn't support this website's features." Your calling this pretentious and elitist makes me think you don't understand what developers go through with IE. This isn't about Mac vs PC or other such snobbery, it's about standards compliance and IE hamstringing the web as a modern app development platform.
Started a project out with phonegap android api and went to phonegap build as well. It took a solid day getting the android sdk + phonegap up and working as the instructions were simply not right and when we started on ios looked for alternatives. Phonegap build used weinre for "debug" mode, but the thing crashed constantly so we went ahead and loaded up a local copy of it. The verdict is still out on phonegap build, but we did just get a free app approved on google play and apple store using it.
Yeah, pretty similar to my experience. I haven't really used weinre yet, but your comments don't give me a lot of hope for it. Glad to know I'm not the only one with these issues!
You're viewing javascript as a "client-side language" where you interact with the DOM using jQuery. That's usually step one :) Node.js changes everything. It's running on the server. So without knowing your expertise level, I'll just say this: You usually use javascript on the client to change the DOM. MAYBE you do something like $.post(formData); to post a form back to the server. The "server" is probably running something like PHP. But it COULD Be running node.js. Node.js lets you run javascript as your server language in the place of PHP, Python, ASP, coldfusion, Java etc. Require.js is a modular script loader, usually used in the browser but can be used in Node.js server-side apps as well. It allows you to control your dependencies when loading your scripts, but I'll let someone else chime in on that since I'm usually not as great at explaining things as I think I am in my head :) (but you can start here: http://requirejs.org/docs/start.html)
This is a great start! I would really like to hear a couple more people's cracks at it, especially about Require.js. I've never done server side anything. I barely grasp what it is. Maybe I should start there?
Weinre is actually pretty slick, albeit could be a lot slicker if their dom editor was a little more functional. It basically gives you a remote chrome style console for your phonegap apps. It also works on any html page. You just need to inject a script. In phonegap fashion all of their links on weinre are broken and it was a little hard to find it, however it turns out it's a simple npm install. Took 1 min to set up. http://people.apache.org/~pmuellr/weinre/docs/latest/Installing.html
This site doesn't render in Opera Mobile (the one that uses Blink). That makes me skeptical of any opinions offered thereon.
It's a great idea, I just haven't had a lot of use for it yet. Being at core a web app, it's so much easier to test on the desktop before pushing to a dev device. Solves most of the straightforward issues right away. Albeit, that's been dependent on my current projects. I'm sure once I get more in depth with some of their API calls that will become more of a necessity.
http://cdn.head-fi.org/2/20/314x314px-LL-20b746c1_clap.gif Beautiful. Lets expand on the Require.js module bit. So far I have had basic projects but well structured so that the header(as in logo, headline and nav, etc) in the page is its own separate file on the server. Same for a couple body parts and a footer file. So the whole page is being populated by the code I have made to call in the code in the other files. Would Require.js be different method or just more refined with more features/control? Thank you **very** much for your time. 
"Javascript and Jquery" --- jQuery is javascript, rather a library coded using javascript. jQuery is not a language, it's confusing when you place them on the same semantic level in a sentence. Node.js is a server-side environment that uses javascript. Require.js is a way to bundle all your different scripts together and manage dependencies between them. It's an alternative to having 20 script tags in your index.html or whatever. My advice is this. Don't use jQuery until you can code the functionality you're using from it, without it. Don't use require, until you can code something equivalent, and more importantly, understand WHY you'd use it. Once you're at this point, I'd start looking at node and try coding a simple http server with it. 
I recommend James Shore videos for getting started with node.js: http://www.letscodejavascript.com/
Wikipedia is not a "standard site" (whatever that means – probably the only common ground you could find is plain old static HTML with no server side code), it's a web app. What you built is not a web app, it's an SPA. 
Maybe I have the terms mixed up then. By standard site I'm thinking back 10-15 years to sites that are almost all server-side. Standard PHP + MySQL CRUD kind of thing. I associate "web app" with mostly javascript/java applet/flash/silverlight interfaces that serve up minimal synchronous page changes. Skimming [the wikipedia article](http://en.wikipedia.org/wiki/Web_application), I don't think I'm that far off. &gt; The term may also mean a computer software application that is coded in a browser-supported programming language (such as JavaScript, combined with a browser-rendered markup language like HTML) and reliant on a common web browser to render the application executable I've never associated sites that are mostly front-ends for databases, like Wikipedia, as web apps. 
idk to me it's just indicative of placing too much importance on libraries and poor understanding on the language. 
I really hate to be negative, but honestly, you could have gathered that by reading a single blog post or wiki page. You need to be able to search the web and find resources to educate yourself if you want to have a shot at keeping up with the ever-changing landscape of the web. Asking questions like "what is technology X?" instead of doing 10 minutes of reading will not get you where you want to be as a JavaScript programmer.
Normally I would totally agree. Most of the research I pulled up immediately used large words and lost me. I'm just starting out and trying to accelerate quickly. Sure, I can keep up for a little but I can't get very far with something like this: http://requirejs.org/docs/jquery.html Don't take your expertise for granted! Additionally, here I can ask follow up questions to the community or directly to somebody that has chimed in. I have a couple side PMs going. 
The only argument for FP over that I could give is that you are basically writing: From the range X, give me all even numbers and then calculate their sum. Whereas I think the functional version can sometimes read better. Give me the sum of all even numbers within this range. The order just seems a little more human, but that might just be my opinion. There's absolutely nothing wrong with the chained approach. How could that be implemented so that sum could be applied to anything. Or range, or any of the other smaller components within it. I really like the power and reusability that FP appears to provide.
sorry but SPA are special cases of web apps , but they are web apps noneless. any website is a webapp if it is serverside driven. Web developpers develop web applications = web apps. SPA is just a fancyword so you can sell your shit at a higher price. But SPAs are web apps.
So node.js is just another server-side programming language? I think there's a lot to be said about how it interacts with client-side javascript that other server-side languages don't, right?
I've been a `make` user since I started developing in the '90s so my brain is wired into typing make commands at the CLI and I needed something to quickly generate some `make` boilerplate. If I have to introduce a new type of target, I just modify the makefile by invoking the program with its options, instead of just searching around for a plugin and then understanding how it works. Wmake is just a quick wrapper around this, nothing more.. If you really need to build a much more complex workflow then you __should__ use grunt of course. But I've found that for the majority of projects I am working on, a makefile is sufficient. 
superstitious coding at its worst.
After you read all of this you should forget about the RequireJS modules (AMD) and use node.js style require() (CommonJS) for you web projects as well! Use [browserify](http://browserify.org/) to bundle your synchronous requires for web use. If you need an automated build tool for this setup [grunt](http://gruntjs.com) and grunt-browserify and never look back. There are browserify plugins that let's you use any type of mude you find on the internet and automatically enable them for browserification (be they AMD, CommonJS, UMD or globals). Thank me later, AMD is a dead end. You'd waste so much time wrapping and shimming libraries.
I'm currently learning NodeJS, but why would you ever want to run RequireJS with Node as Node already uses a somewhat 1:1 similar built in module system.
&gt; I think there's a lot to be said about how it interacts with client-side javascript Well hm yeah but that's not really the big thing with Node. The big thing is basically that it scales so damn good, that's why Yahoo, Microsoft, Myspace and others back it up. It is event-driven compared to the process-driven way PHP works, for example. 
Others will just write the address into the browser :-D 
I was actually pleasantly surprised to find the other day that requirejs can auto convert AMD, still on the fence about whether it's a dead end or not but it's growing on me
If you're loading data from a cross-domain location and making an app out of it, you'll need to fetch the content server-side regardless of whether you're using pure jQuery or AngularJS, because of the browser's cross-domain security limitations. In the end, whether you use just jQuery or Angular is just personal preference, depending on how complex you think the app will become in the future. Another possible solution is to just format the data server-side to HTML and not use JavaScript at all, which could save you a bit of development time. EDIT: After re-reading, I also recommend you just use an iframe. If this is being incorporated into a CMS, you want to minimize the dependencies that the CMS will have, for the reasons Prabhukathik mentioned.
Yea, that's a neat trick. It can do that for globals and UMD as well (there's a whole bunch of de-ifiers) The only major downside of browserify is it bundles everything so debugging is harder, but only on old browsers that don't support sourcemaps (most of them, except Chrome and next FireFox). 
From what I could gather, [_CORS_](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing) should help with the security limitations. I have complete access to the "server-side" that provides the javascript and the data. I do have, however, only limited access to the HTML/website that the user will "surf to". I.e. the user will go to http://www.somecoolsite.com/awesomecontent, and I will maintain and control somecoolsite.mycompany.com. Ideally, I'd like to limit my interaction with the somecoolsite.com maintainers to a simple "here, take this snippet and put it on the awesomecontent page", i.e. something like: &lt;script src="//somecoolsite.mycompany.com/script.js"&gt;&lt;/script&gt; &lt;div id="#awesomecontent" data-content="awesomecontent"&gt;&lt;/div&gt; and my script would find and fill `div#awesomecontent`. But I'd like to avoid to have something in there that I would need to ever change, like angular templates for example.
Ah, I see, I had it backwards. Yeah, in that case, you're definitely right, CORS would definitely work. If you want to minimize interacting with the CMS, then Angular might be a bit much, so just keep the solution as simple as possible in this case.
Why isn't this on /r/javascript... ?
Gmail is a web app. Facebook is a web app. Wikipedia, at its core, is just a 1990s-era website with a search box emphasis. 
The problem with Require is that if you don't have some Node instance running somewhere to combine the files (be it on your machine, dev deploy, QA deploy, staging, final, whatever) you don't get the benefit of reduced HTTP calls which is especially important on mobile. Getting Node running anywhere but your machine is usually problematic in Windows Server based environments as it is an extra hassle for IT admin / dev admin to configure and maintain. Basically, they don't want to do it. The drawback of running it on your machine is everybody who would use it has to set it up and configure it on theirs as well. When there's a large team that is a time waster. Edit: I realise there is Require.NET for VS developers and have tried it. Configuring was awkward and unsuccessful. I'll try again because it shouldn't be hard...
Yeah that's a good caveat to point out. I do feel however by implementing proper file naming, caching strategies and static content servers you can avoid the requirement to build bundled versions.
Thank you, I think I will ask some of the guys that made pull request
You can still use their CSS in your iframe. And doing it in an iframe removes any potential conflicts with their code, even if you do know how to get around those conflicts. It also removes having to deal with the questions you posed here. And they can change their CMS without impacting your code. Trust me, you do not want to be on the hook for having to test and possibly change your code every time they upgrade their CMS. Use an iframe. Embrace that isolation, and draw a clear line of responsibility between your code and theirs.
A couple quick tips: - use JSONP as your transport mechanism. Easier to implement, higher browser compatibility. - you can embed your HTML in your script in the form of pre-compiled Handlebars templates. With that said, if you are creating this as a widget I would first consider lighter weight frameworks than Angular, say Backbone for example. It makes no sense to use a framework designed for building an entire web app around it when you just want to fetch and render some data. Backbone can help you with the model and view abstractions, which is all you need here. (and this demonstrates even Backbone is too much) 
What would you say is the cost of using Angular over something lighter?
This guy needs to know about cordova-cli!
By the "may also mean" language you quoted, the article is saying that client side single page apps are a specific subset of web applications. If you're splitting hairs, your SPA is *also* still a plain old HTML web page, but that wouldn't be a good characterization of it in this context. Your original post suggested you felt that only SPAs were web apps; that's not that the case. A classic web app is essentially, as you say, a database frontend written in web forms posting to a web server. An SPA is indeed a subset of this, but is in no way the only kind of web app, as you implied – it's a quite new, quite specialized niche item. Wikipedia itself fits the normal meaning much, much better. 
You mean *load* their CSS in my iframe? That's a dependency I don't want to have. What if their CSS is generated, or split up across multiple files, or has cachebusting params in it? No, I'd need to roll my own (identically-looking) CSS with the iframe solution. I don't think the CMS/code will be updated very often, so I don't think that's an issue. Currently I'm swaying towards jQuery+Handlebars.js+JSON(P)+history.js
This sounds like some nightmare of a requirement dreamed up by business guys who think developers are magicians. Anytime an IFRAME is the best solution, you know something is effed up. Have you considered scraping the data on the remote site? You'll have to get creative in how you scrape to allow for changes on their end. 
Tried that
I know. Not my idea, and I whole-heartedly agree with you about the iframe solution. (The reasons for this mess are more of bureaucratic nature than technical/businessy, though.) But you have it backwards: I'm the one responsible for the remote site, so scraping wouldn't help.
What about a simple (function () { var blah = my.long.name.blah // ... use `blah` here })() ? Or, if you want to "import" plenty of stuff from a given object, just abbreviate the container object instead inside the IIFE: `var M = my.random.module; /* ... use M.blah, M.foobar, ... */`. (modulo code style preferences)
I just made this game and I'd like to know if it can get some reddit love. The next point on my todo list could be user submission of missions (imgur style) but only if some people think they would want to create missions. Opinions welcome ! *Note that for now it works only on Chrome and Firefox*
**2.9**
As it's open-source I'm very open to discussions regarding those sources, of course. 
One thought is that maybe you're already using RequireJS on the client side and want to use on the backend for consistency.
Yeah but iOS doesn't cache properly, meaning *x* HTTP calls every page load for the script files...
On the sidebar from that link, I just clicked on the Start link and it seems to be a very easy and nice guide to follow!
Really Apple? *sigh*
It seems to shut down chrome or safari on iOS6? I would remove this feature. :)
If you try to drag a planet too fast it drop it. This is typically a bug where you're hit testing the mouse against the planet every frame. Dragging fast causes the mouse to come off the planet all in one frame. You can fix it by 'capturing' the mouse until the mouse is released.
I never tested it on iOS, sorry. Somebody should send me an iPad so that I can do it :)
No, the reason here is that I test the distance between two positions of the planet to make sure you can't go over other objects just by going fast. If the distance between two mousemove event is greater than the radius of the planet, the move is prevented. This simplifies collision detection : I only have to test for collision on the destination position without having to detect that the path between two mousemove events doesn't go over an object. I might implement a path collision detection in the future but for now I was more inclined to document it as a feature : you can't move a planet very fast. 
If you are responsible for the remote site, why dont you set up a service to serve that data out in json/xml then you can ingest it in whatever flavor you desire... viola... integration. Never forget this... Its easier to get forgiveness than permission. You are the expert here, do it your way. And I say this as a project manager. I encourage my guys to do it the best way they think... of course, I trust my guys explicitly. 
I've been developing in JS for years, and it took me a while to understand the need for require.js. Maybe you're getting a bit ahead of yourself? Require.js is all about the AMD pattern which is useful for keeping code modular, but maybe at this point you should focus on writing code that works. I don't want to sound condescending or anything, but I know if I try to get to far ahead, I just drown myself and end up becoming frustrated.
When i click on the canvas on mission-01.json i get the following error `uncaught exception: An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images.` im using firefox 22.0
The editing, discussion, login, and history diff engine features are typical of web apps. MediaWiki is a classic database backed web application written in PHP. 
There is many pros and cons. But one of the main pros is you can write front end and back end stuff using the same language, javascript.
It sounds like you're talking more about loading in templates. Require.js *can* do that but it's built to be a way of handling dependencies and asynchronously loading in scripts. Here's an example from a project I was working on a while back: I was creating a web application for keeping track of geological events (earthquakes, volcanoes, that kind of thing). We had a bunch of data to deal with and, since I didn't really get Backbone at the time, I decided to make my own Model module (Model in the sense of [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) which you should definitely look at if you haven't already). This gave me a consistent way to pull stuff from our database. Right off the bat, we needed a way to add/edit/remove users from the system so I created a User model which extended from my Model class to handle all of the specifics pertaining to users. This same pattern was followed for a number of different models to represent all of the data we were dealing with. We also had different levels of access for our users so I created a model for each of those so I wouldn't have to think about it (note: this was actually a bad design because I should have just made my system more generic but I digress). Cool, so my database stuff is all setup. Now I want to make the UI for editing users. Okay... So first I want to show our "Admin" level users... Wait a minute. Did I include the Model script and Client script? I feel like I had to do some weird trick with the admins and make them extend from another subclass of Client. Did I include that script as well? Oh wait, never mind. My Admin model definition already "requires" all the other modules that it needs. So as long as I load my Admin model then I know the rest will fall in to place. This is a trivial example but the idea is there. You can separate your scripts so that they do one thing *really* well then just load in the functionality you need, as you need it. Then you get in to issues of load time and caching and minification and blah, blah, blah. There are ways of minifying all of this stuff for your production server but during dev time it's not a big deal. RequireJS [has a way of doing all of that for you](http://requirejs.org/docs/optimization.html) and it'll give you an excuse to fiddle about with Node.js a little bit. **TL;DR** * RequireJS removes the need to load dependent scripts. * If you load one module, you automatically load all of it's dependencies. * In more complex systems, it will work out dependency issues for you as long as you don't have a circular dependency. * I can talk about JavaScript all day long.
Yes, they are a subset, in that they run on the web stack. No, it is not correct to say that SPA &lt;=&gt; web app and therefore a database backed classic server side web app with zero JavaScript code is not a web app, which is the assertion I was responding to. Further SPA is not just a buzzword – it is a totally different class of web application, with significant downsides, along with some very focused advantages (primarily partial refresh latency), compared to a classic document-oriented web application. To say that it's just another web app branded differently for inflating dev costs is to demonstrate that you likely don't know what an SPA actually is. SPAs are niche products, and should be avoided if possible; most applications are better suited to progressively enhanced non-SPA web apps. 
i like the game and the concept it's nice. The level design is pretty good so far too. One thing I absolutely cannot stand though it the resetting of the levels when you fail (rocket goes off screen, rocket goes into planet) This is a usability issue that is causing me to stop playing after only a few mins on each level because I've set up some planets to work perfectly, then the chain reaction fails at the last part, and I have to start from scratch again. Do Not Like. Also, as u/brandf said before, dragging a planet too fast causes it to turn red and make me loose it, and most times leave it in the path of the rocket causing the game to reset.
/u/brandf
Pretty cool game and looks nice too (not some stretched 8 bit images you see in a lot of quick HTML 5 games). 
javascript will often get run by a web browser like chrome. consider reading http://www.w3schools.com/js/ 
The most common is running it in a browser. [Codecademy](http://www.codecademy.com/) has some nice tutorials to help get you started.
True, but the part that's viewed 99.9% of the time is the site itself. Most sites have a content management system driving the editing, with features like you mentioned. This article is more referring to the end-user front end code.
A great way to get started is http://jsbin.com/ - it lets you run and save code right in the browser.
Maybe give planets a velocity and have them be only swayed by the mouse? That would look and feel far better if done right.
I agree, the mouse events kind of suck and make the game almost unusable. And, why can't people make their single-page apps/games unselectable?? Make every element in the DOM unselectable, please. Any time I drag my mouse on a game like this and it selects all sorts of DOM shit, I cringe. 
This is a lot less impressive than the title made it sound. Edit: I didn't mean to say it was unimpressive, but the title got me excited, because I thought it could somehow tell how I was holding my computer -- which sounded approximately impossible.
Nice article! I would love to see more! I started building a game from your architecture and implemented movement and collision. But what is the best way to implement collision in this kind of architecture? If for example something simple like this: return a.x &lt; b.x + b.width &amp;&amp; a.x + a.width &gt; b.x &amp;&amp; a.y &lt; b.y + b.height &amp;&amp; a.y + a.height &gt; b.y; Where should I place my collision detection? Make a new class under engine? Should I loop over the collection or create some new containers to hold the bullets etc? I'm new to this kind of game structure so if anyone could give me pointers that'll be great!! Thx
I'm sorry for the usability problem you mention. It's a very alpha version, on which I spent only a few evenings. In the meantime you might be interested in the R key.
This is very very strange. All files are served from the same origin right now. Are you testing the game online or are you testing the github code ?
&gt; Perhaps add a bonus based on the amount of rotational change of the bullet? I'm working on some missions were some things you need will only be activated after some delay after the bullet have leaved the gun. &gt; Also, I'm not sure if this is intended or not, but you can move planets while the rocket is in motion, and "lead" it to the endpoint, which seems a bit cheaty to me. Yes, this is intended. I will make it clearer. But the point is that you can't go very far with this tactic and it's much easier to move the planet while in pause if you reach levels 9 or 10.
That is hopefully where people will end up getting to with this task.
Cordova is PhoneGap (more or less). See http://phonegap.com/2012/03/19/phonegap-cordova-and-what%E2%80%99s-in-a-name/ I used the PhoneGap name because it is more recognized than that of Cordova. All of part one of the article is talking about trying to install the cordova-cli.
I didn't want you to post it publicly... But regarding the "trivial" levels, I had mostly people telling me that they were too hard, so maybe I made them a little too easy after that, balancing isn't easy. Congrats on being better than most.
There are now known problems on two platforms : - iOS6 - Safari/Mac (and maybe even sometimes Chrome/Mac) I can't test on those platforms. If some JavaScript coder can identify the problem I'd been grateful.
[Here's](http://i.imgur.com/HT8Ak0X.jpg) the solution for the final level. (You suggested an email, but I imagine this is fine.) The first part, just moving the ship to the other cannon, wasn't that hard. This seemed to be the tricky bit. How'd I get past the first 6? Mostly just experimented until I found something that worked. On a few of them I simply paused, moved the planets extremely close to the ship to get it to go where I wanted, and used a method of quickly pausing/unpausing to get the ship to go where I wanted. Other than that (and a degree in Physics), it really didn't seem too bad. Good show! Suggestions: Minor animations on the planets would do something to improve the atmosphere, as would creating some space dust or minor comets floating through the background. Being able to increase/decrease the amount of force the cannons give you could be fun. The biggest thing, however, is that you should really preserve the position of the planets on a fail, rather than restarting the whole level from scratch. It was frustrating to come close to a solution only to have to try and find the proper configuration again when a minor change would have resulting in a victory. EDIT: Put a MIT license on this baby.
Personally, I love being able to work in the same language all day long (context switches are never very fun, especially when it's a different language). On top of that, depending on what you're trying to accomplish, Node.js [can be very performant](http://stackoverflow.com/questions/5622335/what-are-the-advantages-of-using-node-js-vs-php). One problem though is, at the time of this writing, Node.js is at v0.10.12, meaning it isn't technically stable. I've been developing a rather complex system in it over the last few months and I haven't encountered any issues specifically with Node.js though.
Minor note: functions aren't inherently asynchronous like how they might be in Haskell. It's just that Node.js lends itself very well to asynchronous functions.
It's pretty cool as an experiment but not something I would use. If I want strict typing then I just use `===` in my comparisons (as I frequently do). Seems like too much boilerplate to do anything non-trivial. I have to wonder though; what's up with the `$` vs. `_` when getting and setting? Why not just assume it's a get when one variable is given and a set when two are given?
If it's about cordova, call it cordova :) Simples!
Oh! My apologies. Deleted. edit: please make more. That was fun. :)
&gt; console.log('Hello World'); You can use multiply online editors if you don't want to run directly in the console or through a html page, eg. http://jsbin.com/ Hello World demo: http://jsbin.com/acasis/1/edit?javascript,console
I'd like to replace the &lt;td&gt;blank&lt;/td&gt; element. Or just how to replace any of the &lt;td&gt;&lt;/td&gt; elements. 
I would take a look at the DOM API. There are a series of properties and methods that you can use to find and modify specific elements in a document. I'm not sure what else is on the page and what you're actually trying to replace, but the following might at least give you a starting point. var all_tables = document.getElementsByTagName("TABLE"); var first_table = all_tables[0]; var all_trs = first_table.getElementsByTagName("TR"); for( var x=0; x&lt;all_trs.length; x++ ) { var first_td = all_trs.childNodes[0]; first_td.innerHTML = "Boom!"; } This will find the first &lt;TABLE&gt; in the document and change the first cell within all the rows to "Boom!" -- note that this would change the &lt;TH&gt; elements is as well -- not sure if you want to do that (or really what you're trying to do) but you can of course fine-tine scripts to do what you need. I find a good reference for this is the mozilla developer network -- this links to the DOM reference which is really what you're after -- but it has reference for most everything else you can do : https://developer.mozilla.org/en-US/docs/DOM/DOM_Reference ... to the point where if I'm googling a property or something I'll include "mdn" in the query so I don't get w3schools :D One thing you can do to for some quick debugging is to open up the developer console. In firefox this is "CTRL-SHIFT-K" -- from there you'll get a console where you can write javascript -- this has an auto-complete function so if you start typing "docu" you'll see 'document' completed -- you may get a good idea of what methods and properties are available to you.
Right click anywhere on any webpage in Chrome. Select the bottom option, 'Inspect Element'. This brings up the Developer Tools. Select 'Console'. Type 'console.log('Hello World!');' into the console and you're there.
ugh. okay it's not working at all. But thanks for the resource I'll try to see if I can get something to work.
The real beauty of web development is you don't need any IDE or compiler -- you don't even need a web server (although, if you're doing ajax stuff you may find it easier with one) ... just create a new html document with the following contents : &lt;html&gt; &lt;head&gt; &lt;script type="text/javascript"&gt; // your script here &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; 
Angular is not designed to be adopted in the form of widgets. You could do it anyways but you would be loading tons of unnecessary code and dealing with a lot of abstractions you don't need. 
http://imgur.com/ZXnF6GR,NxEOkRE
jQuery and RequireJS are javascript libraries used for DOM manipulation and lazy loading of dependencies, respectively. Node.js is more than just a "server technology" as some have answered. **Node.js is a JavaScript execution environment based on Google's V8 engine.** The three things are basically unrelated. But could be used together in dozens if not hundreds of different ways. So there's no real good answer to this question. But one example of how you could use them together would be as follows: #Just One Example - Create a Node.js webserver - Host HTML from it. - Host JQuery and Require.js from it. - Use require.js to load additonal .js code from the webserver. - Use JQuery to make AJAX calls back to your Node.js server and get information. - Use JQuery to display the data you've retrieved in the DOM.
Thanks for the edit, I was wondering because I hadn't tried to make the title especially impressive, I thought it was honest.
&gt; I'm assuming this is physically accurate (F~=1/r2 ) Yes. &gt; that leads to extreme acceleration near the mass That's what's fun ! Part of my inspiration for the game was the [gravitational slingshot effect](http://en.wikipedia.org/wiki/Gravity_assist) used for the Cassini probe. &gt; I like how scores are still there after reload. Was that with localstorage? Yes, I use localStorage. It's in storage.js (see github). &gt; You may want to post this to /r/gamedev as well. Thanks for suggestion. I think I'll do it.
I think I'll display a popup with an additional option to let the planets at their current positions.
A file editor that runs inside the plunker file editor? This is so meta my brain hurts. :-) No seriously, this is truly great stuff. The angular documentation would be great if it didn't linked to plunker, but used a minimal embedded editor like kahn academys javascript classes does. A minimal javascript IDE widget with preview is something that could be very useful inside internal wiki's like confluence. 
Wow there are some great projects out there I didn't know of.
my usual browser is the latest version of chrome. 
doesnt work in latest firefox nightly? http://i2.minus.com/iAQ9jIiTi7GjD.jpg
Interesting. Are you seeing any messages in the console? 
serverside: node.js, clientside: any browser, either included via developer tools (press F12 or open Opera Dragonfly) or directly inside the HTML page (see tswaters' comment); jsbin or similar services can automate this process for you.
Awesome - an even more complete list of all the open-source JS projects I will never, ever have the time to stay up to date on.
Why would you prefer the docs not linking to Plunker? Would you prefer that they not linked to jsFiddle as well? I agree that an embedded solution would be nifty, but I think that more complete services like Plunker and jsFiddle are useful for users to be able to save and share their code for learning and troubleshooting purposes. The fact that code suggested in the docs can be easily launched in Plunker and jsFiddle is something that helps users in this way. At least, this is my point of view, but I curious why you see otherwise.
That is a very verbose log. I don't see anything in there that relates directly to the demo failing. There may be a limitation of running iframes off of a filesystem: url in firefox that I'm simply not aware of. It is good to know that there is a limitation as I may think again about investing lots of time in further developing it.
i think you should just mark it as "chrome experiment" since it only works in chrome-s and latest opera (v.15) (for me it also doesn't work in safari and nightly webkit). so you can just leave the browsers to catch up to the new technologies, and work on some other new interesting things.)
So much NIH!!! ARRRRGH
I don't know where you get the data but it's extremely incomplete. At least everything that is on npm and bower should show up! Do you even know what they are? Why aren't chai, mocha and jasmine not there? Why is grunt not there? Where is jshint? Where is yeoman? WTF?
NIH?
This may be terrifically pedantic, but this isn't currying. It's closer to [partial application](http://en.wikipedia.org/wiki/Partial_application).
You can get all the 'td' elements that are direct children of elements with class 'left-bottom-border' and that contain 'blank' with this: var els = Array.filter(document.querySelectorAll(".left-bottom-border &gt; td"), function(e) e.innerHTML == "blank") Then you can do whatever you want with these, like e.g. deleting them: Array.forEach(els, function(e) e.parentElement.removeChild(e)) Note: This uses features only found in latest versions of Firefox so you may have to adapt it if you use another browser.
It appears to provide live updates to the view based on changes in the model... i'm not sure if angular does that or not.
Forget about AMD modules, not worth the trouble. Use browserify and consume ALL module formats while requiring with CommonJS style.
Maybe the author of this library thought why not come up with something that is not over-engineered overkill, just a guess. While I can see that reinventing the wheel seems like a waste of time, not inventing at all shouldn't be the consequence.
From the site: @JavascriptOO Developed by @joemaddalone. Sadly, designed by him as well :(
Data binding is one of angular's strengths.
The tagline is the best thing ever. Does the author of the site really think that all these libs are something I should be looking into? 14 different AJAX libs. Really? Edit: Ok, so as to not be just all sour puss, the site has some nice stuff actually now that I take the time to get over the stupid headline. Demo section, and the stats might be extended to show other interesting numbers. I'm still not convinced these sites are useful. While this site has some actual features, it's a common theme on these things that the choice of library/framework can be reduced so much, that it can fit in a 15 word summary, a few numbers, as if the choice was as simple and trivial as pulling a specific brand of ketchup off the shelf in the supermarket. Informed choice isn't this easy.
:(
As the author of the site (dumb headline included) thanks for the critique and the kudos and general comments. The headline is not meant to tell you what is interesting, this is just something I do each morning; scrounge around github, find something I find interesting, read up on it, write an example, and add it to the site. Researching 14 AJAX libraries has made me a better developer and it reminds me that JavaScript is expanding in every possible direction and in a seriously hippie kinda way it makes me feel really good before I start work at my regular job. If you have ideas on how the site could be more useful I absolutely welcome them. Not sure where all the recent traffic started up from, but I do see that a lot of people are looking at it on the surface and just seeing a list... I'll have to find a way to expose the real guts of the site, which are the examples and CDN links and bower install commands and... well all the other stuff... @joemaddalone (edited for mispell-er-izations)
wow - that one is gonna take some experimenting to come up with a simplified example... his "simple" examples are way over my head. Thanks now I have something to do this weekend. By the way - to all - just wanted to point out that I don't know who "ger_phpmagazin", the OP, is and I am not really a reddit-er, but Reddit just became so much more useful for me... will be reditt-ing more from now on.
The answer was really easy actually. Just click "File" and "open" the .html or .js file. On chrome, since there's no file menu, click ctrl+o to open a file.
Primus sucks.
Nice, finally an actual project with JavaScript!
Thanks! :)
Hey Martin, Just wondering if you were aware that the ui-router team already have something like this in the works? It's in their development build so not yet in production. https://github.com/angular-ui/ui-router/wiki/Quick-Reference#ui-sref 
Why the Paul Irish look of sadness? Are you not a fan of AngularJS?
Very cool. Thanks for sharing not just a demo but the source.
My pleasure!
Im surprised he left out the "GreenSock JS" animation library. Everything else (that I've looked at) pales in comparison...
thanks! :D
Nice work, thanks for sharing.
Hey, those cards aren't in the right places! :-D
Nice, the sort of game you can instantly work out how to play.
That was great! Thanks for sharing.
Bacon.js certainly deserves to be on here. Nothing else is anything like it. I don't know what I would do without Bacon. https://github.com/raimohanska/bacon.js
yeah, i was hoping for it to select from a random set of the actual card placements :(
No problem boss, it's my day job. What's your interest in Javascript? What are you trying to build?
Right on dude. IMHO, some of the jqcripples will come out of it ok, and some will be hobbled for the rest of their short, painful careers by their overreliance on this crutch.
Why so sad?
I think you are right, your solution is a bit more superior. Although they do attach a `href` attribute with the correct URI. On Monday I will most likely use yours in one of my projects since the ui-router version isn't ready yet. BTW, you don't need the `restrict: 'A'` as that's the default for directives :).
awesome stuff man
Very cool. On my iPod it works great except its in a long column that's hard to navigate. 
Awesome! I'm trying to learn AngluarJS too, so this project looks great and simple to dissect.
Thank you for your valuable feedback.
it should be "low score"
bower.json* :) - Looks like it was scaffolded by Yeoman.
The urge to [cheat](http://i.imgur.com/I7MFVOT.png) is too tempting...
I used a Yeoman generator to start it up, but I haven't upgraded Yeoman or the generator in a little bit :x Good catch though, thanks!
I'll try and add that in!
Yeah, you're right high score seems odd, I think I may change it to best score
My best is 12!
No project in mind right now, I'm just trying to learn a scripting language since I don't know any. 
Someone on the go like on a plane?....eh ok that's a stretch, I got nothing
[Physical keyboard](http://www.apple.com/keyboard/), yes. Mouse, no.
I've done real quick fixes with diet coda, but yeah, I agree with you.
iknowsomeofthosewords.jpg
I agree completely. Your links or buttons should convey the action "click/touch" implicitly with styling/layout and your text or icon should indicate resultant behavior.
I wasn't a big fan of JS until I used it on a large project. It's grown on me, but I still love me some strong types.
not sure what im looking at?
I'll change that. I'll also be adding href.
I program on an iPad, but I'm ssh'd into a server where I have my regular environment running in a tmux session. I would prefer a laptop for this, but the iPad (with Logitech keyboard cover) is all I've got. 
Best viewed in Chrome. Sorry, the shadowBlur is pretty expensive everywhere else (and also kinda is in chrome). Turning it down helps, turning it off all together by commenting out lines 22 and 23 are the only option if you are suffering bad lag. edit* I removed the shadowBlur on the exploding particles, after more testing it appears it lags most systems. uncomment out the lines to see the original effect. 
Wow thanks! This has been really helpful
In the same vein of trying to reduce image size, [here is a ruby](https://github.com/DrummerHead/best-gists/blob/master/crushimg.rb) script to automate compression of pngs and jpegs using jpegtran and pngcrush Useful for squeezing your project size and improving download times
I also experimented with creating temporary canvas elements to 'cache' each particle with a shadowBlur and it did help, but not much. And the overall effect was still pretty weak in FF. 
JS is beasting so hard right now
Not buying this one bit. I don't want a fucking server build step in between me and the code being loaded into my browser until I have to move to production. I don't fucking care that browserfy has sourcemaps; I don't want or need all of this additional tooling just so I don't have to write the standard requirejs headers. Jesus fucking christ.
Welcome to the wild world of javascripts!
Gah! Yet another library to have to look into ... Although I do actually like the sound of a 'lightweight-Marionette'. Has anyone got any opinions on Marionette vs. Thorax?
thanks, now I realize anon tinker.io probably wasn't a good Idea because people are changing and saving and the links output is changing :/ http://tinker.io/65c87/9 was my final revision before I stopped tinkering. 
Well the thing is that we've all had to start from the same place; going from zero knowledge at all; to having enough expertise for a lot of us to use these additional skillsets in our daily professional lives. You might not get really far reading documentation on requirejs either; i'd recommend just using a scaffolding generated by Yeoman (http://yeoman.io/) to see how the "big boys" do it; and then customize based on that. Then it's just a matter of "writing some fucking code" and just get going. You'll fuck up, and get lost; search the web for help; get little nudges here and there to get your half assed little app barely working, and within a few weeks of iterations get to a point where you can see how all of these techs fit together on both the client and server (node, npm, bower, grunt, requirejs, handlebars, backbone, etc etc)
What's you stack brah?
This has nothing to do with netbeans. Is your html file in the same directory as a "js" folder that contains "messingwithjava.js"?
I think he's not digging this idea: *The most important thing in ui-router are states, so we should be linking based on them, not based on URLs.* One of the "killer features" of the web are bookmarkable URLs, this seems to break that.
Lets get to work in Tetra Master. Chop chop!!
A few reasons why this is a bad idea: * Mobile devices aren't the only devices out there supporting touch events. * This script is not generically compatible with future devices. (https://github.com/bulkan/clouch.js/blob/master/clouch.js#L1831) * As others have said, you have no reason to tell your users to click/touch anything. * This code is massive. A complete waste of resources. 
Seems to work well in Opera 15 (not a big surprise there...)
How does this compare to http://tinypng.org/ ?
Great tool, but it is important to note the use cases. This is lossy compression for the RGB portion of the image. If you are using PNG for lossless compression or for something that is not a photo (such as a screenshot), then you are better off using PNG. PNG uses deflate, which is really great for taking huge chunks of repeating values (blocks of the same color) and shrinking them down. If you are using PNG solely for the alpha capability and you have photo content in your image (such as in this demo), then Shrinkimage is the tool for you. You get the benefits of JPEG compression, with your alpha channel.
Errors: "as as", "attars" instead of "attrs", and $scope.people.push[$scope.name]; shoud use braces instead of brackets
My guess is that they're all interpreting `{"a": "b"}` as a block rather than an expression that evaluates to an object. If that's true then each browser's parser gives different errors depending upon what they expect you were trying to do. Firefox might think you were trying to do something like this: { // begin block "a": // a label `"a"`, which is not a valid label (I think labels follow the same rules as identifiers.) "b" // expression `"b"` } // end block Chrome might think you were trying to do something like this: { // begin block "a": // the expression `"a"` followed by the token `:`, which isn't valid as the next token "b" // the expression `"b"` } // end block IE probably thinks the same thing as Chrome but expresses the error not by saying that `:` was not ok to be the next token but because `:` wasn't expected in this case and that you probably forgot to indicate with `;` the end of what was a valid statement up until `:` was reached. Also, the thing that looks like an object literal in each of the two functions you gave that are valid might actually be interpreted like this: { // begin block a: // label `a` "b" // expression `"b"` } // end block and... { // begin block a: // label `a` b // expression `b` where `b` is a valid identifier } // end block I would have to dig around in the ECMA-262 spec, but now I suspect that object literals are not valid expressions-as-statements within a block because they aren't distinguishable from the two valid interpretations above. EDIT: Just to confirm suspicion: (function () { x = {a: return "s"} })(); .. gives a SyntaxError with the message "Unexpected token return" (in Chrome Canary), which feels intuitive. Yet .. (function () { {a: return "s"} })(); .. returns `"s"`, which is a bit less obvious as to why it's syntactically correct - especially since object literal syntax is encountered way more often than labels are. 
I'm fairly good at typing on the ipad now (doing so right now) and aside from having to correct the odd mistake, it's fairly good for quickly typing up quick documents, project overviews etc. But coding on it? Hell no, that'd drive me insane. Might be useful for very quick changes on-the-move though.
Why are you so angry? Stop reading if you are under 20. Do you like writing shims every time you pull something from bower or npm? Do you like forking libraries because they have broken UMD headers? What exactly do you gain from wrapping everything in functions? Do you like living in the past? If you're even serious about web technology you will need a build step, or are you really releasing tens of un-minified, un-optimized different JavaScript files? Grow up. edit: forgot to add: do you even JSHint?
I think that this is inconsistent behavior I can't see the difference between : {a:"b"} to {"a":"b"} by the way if you turn it to expression the error disappear function test(){({"a":"b"})}
It looks like this will shrink images in memory on the browser, but you still need to store the full-size image on the server and transfer it to the client. I'd say this is solving a pretty narrow case. What I'd really like is alpha channels in jpegs.
Awesome work. Thanks for sharing!
It seems that chrome (27.0.1453.116) can only output sound on 4 concurrent tabs - All while producing quite an interesting result.
yes
what do you mean?
ReferenceError: requestAnimationFrame is not defined @ http://thepublicshare.com/neuralCar/SQUARIFIC.neuralCar.js:146 Use [a polyfill](https://gist.github.com/paulirish/1579671).
I did but It seems I accidently removed it again, I'll add it asap.
I guess that means you'd want lossless compression of the alpha channel. That shouldn't be much of a problem, really, since most of the time the alpha channel will be areas of full transparency and areas of full opacity, with anti-aliasing between the two giving intermediate alpha values.
I did try jpeg compression for the alpha channel as well but there was exactly no gain in filesize reduction compared to using png for that. In fact jpeg seemed to be bigger overall...
The idea was born from having to develop a lot of promotional websites with huge (alpha) packshots in various sizes on the same page. One of these sites had 4.5 mb alpha PNGs before and was shrunk down to 1.2 mb using shrinkimage. So it might seem narrower than it really is ;)
Oh, and no, it will only transfer the "shrunk" version (json, base64 encoded, alpha and rgb in one) to the client which will reassemble both. You need some server side script (e.g. Provided in my github repo for php, fairly easy to achieve) to separate and convert the original image...
Your HTML should look something like this: &lt;html&gt; &lt;head&gt; &lt;!-- Your head stuff here --&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Your body stuff here --&gt; &lt;script src="js/jquery.js"&gt;&lt;/script&gt; &lt;script src="js/script.js"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; The filenames will vary but you need to make sure you're including all the right scripts. 
Go fuck yourself and your fucking server dependencies. No need to fork a fucking lib if you use the shim config for require anyway (do some fucking research)
Can you speed up the simulation?
No, but adding more cars makes them progress faster and you can also shorten the time they can drive but then the good car doesn't perse win so keeping it above 5 seconds is a good idea.
It's nice that you're interested and even better that you're actually working on something. But Neural Networks aren't all that interesting without any form of learning. Generally you'll get more interesting behaviour if you force the NN to 'encode' data by having an asymmetric network. Perhaps you could allow for the user to set the amount of hidden nodes individually per layer. By the by, I'm curious, what's going on here?: if (accel &lt; 0.7) { accel = 1; } else if (accel &lt; 0.75) { accel = 0 } else { accel = -1; }
I could make that the player can "teach" the network but that would be much work and I'm bored of this project so I wanna start doing something else (if anyone has cool projects, even if they require much learning, pm me). After reading a lot I saw adding more layers generally isn't that good so I thought it wasn't too important to choose them per layer. I could make it happen but as long as I don't add other stuff like traffic lights and stuff I don't think it'll make much of a difference. The cars can choose to go forward, stay still or go backwards. The network returns a value between 0 and 1, I wanted it to more often go forward than backward and staying still had to be very rare. So that's why 0 to 0.7 are forward 0.7 to 0.75 are standing still and 0.75 to 1 are going backward. ***edit*** Btw the cars do more or less learn, after a while they should start driving better.
I got the highest number, did I win?
Ah, in that case I'm going to look much more closely at this code. It might be useful for the on-demand [weather forecasting thingy](https://www.sarweather.com/forecast/result/20130707-031650-c4b7f30c592f/static/composite/0) we're making at work. There is rather a lot of RGBA images there.
Yea, what prize do you want?
Ancient Psychic Tandem War Elephant Edit: very cool project also!
http://images2.wikia.nocookie.net/__cb20120707083109/adventuretimewithfinnandjake/images/b/b5/Ancient_Psychic_Tandem_War_Elephant.png 
dude, your simulation is the shit! not.
how are these cars evolving? GA's?
Sad you don't like it. Care to explain why this rather unnecessary aggressive reaction?
May the programming lords smile down upon you. Good luck.
Yet another compile to JS language. ClojureScript, CoffeeScript, Typescript and now this? I wouldn't mind one of them catching on (especially if firebug supports debugging in the source language) but it seems like people really like writing these compilers so we'll probably see a few more before all is said and done.
I randomly change all weights of all nodes in the neural network, I have no idea what a GA is.
genetic algorithms. Instead of randomizing all the "chromosomes" like you're doing right now, you mix chromosomes from the fittest parents in the previous generation. 
Haters gonna hate. 
Agreed but minor correction: Clojure**Script**.
&gt; I could make that the player can "teach" the network That wouldn't be necessary, you could let the environment teach the network like how you select a brain for mutation by using the speed. One idea might be too look ahead `n` timesteps and use collisions with objects and terrain as the learning material. &gt; After reading a lot I saw adding more layers generally isn't that good so I thought it wasn't too important to choose them per layer. That's if the layers end up acting as direct mappings, where one layer simply transfers the output of the layer above to its own output. Whereas the behaviour you'd generally want is specialization, where each layer finds more and more complex features and each node in the layer is tuned towards detecting a given feature of 'its complexity'. I can't find the specific ones I'm looking for but perhaps the images on these pages can illustrate the concept well enough: http://www.sciencedirect.com/science/article/pii/S0893608012002572 http://www.codeproject.com/Articles/571462/Multiple-convolution-neural-networks-approach-for &gt; I could make it happen but as long as I don't add other stuff like traffic lights and stuff I don't think it'll make much of a difference. Or nitro , mines, and tar. :-) &gt; The network returns a value between 0 and 1, I wanted it to more often go forward than backward and staying still had to be very rare. So that's why 0 to 0.7 are forward 0.7 to 0.75 are standing still and 0.75 to 1 are going backward. That's understandable. Another way to achieve it is to reward speed and punish standing still. Making it harder to turn when going backwards or setting a lower top speed for going backwards would, most likely, in a similar fashion make that a less common behaviour. Yet another thing would be to have the field of vision extend farther in the forward direction. &gt; Btw the cars do more or less learn, after a while they should start driving better. Well, sort of. They quite easily get stuck in a local minima where they'll simply go around in tight circles. I do certainly like the way you promoted a crash-free environment by setting a very low top speed 'inside' other cars.
Yet another asshole. What is the problem with authoring new languages? What negative impact does this have? New languages bring new ideas to the table. Whether the ideas proposed in a language are good or bad, it still has value, allow us to explore and weigh those ideas. Dismissing this language because a number of other languages already exist is simply ridiculous. Instead why don't you skim the docs, find something you like or dislike, and discuss it with us. Also, when someone spends countless hours developing a compiler, and the only thing you can say is "Yet another compile to JS language. ClojureScript, CoffeeScript, Typescript and now this?" your an asshole. Go read the docs.
An interesting language, I'll give it a try. I like some of the concepts it employes. Thanks for sharing!
Sweet tech but we're running out of sensible module names, this cyberspace trumpet hyperglue levelup browserify is getting a bit surreal.
I like your ideas. I guesse I'll finish this project first then. I'll also add the 'advanced' network option for you :p The cars are rewarded if they have a high speed and are punished for standing still and even more for driving backwards but I wanted to give the network some more freedom instead of splitting it 45/10/45. The cars can actually only see forward starting at half the car with a length of 1.5 times the car. The local minima should only be for a few generations, after that it should start doing better, at least if you let the simulation run for a long enough time (about 10 seconds should be good, less raises the chance for a local minima.
Saving the "compressed" image in Chrome leads to only 7kb in size reduction; not to the promised &gt;60% packing.
Totally normal as the script reassembles the final result as a png (client side) that is assigned as base64 encoded image source. Shrinkimage only reduces the transfered filesize which it was developed for :)
I just didn't understand it right away and it made my laptop overheat without noticeable improvement in the cars driving. Don't feel bad by mean responses from anonymous disgruntled people over the Internet. Keep on trying and make it better. I believe in you.
I think this is a fork of `component.io` which has the advantage of using github style names for packages `user/packagename` so you have less problems with naming conflicts etc
Ah, now I get it.
Express is awesome.
I made a currying one that worked on argument order rather than an options object for underscore included in: https://github.com/rhysbrettbowen/Underscore.Extras ported over from a library I wrote for Closure so docs are here https://github.com/rhysbrettbowen/functional-closure#funccurryfunction-opt_minlength-opt_args
Yea, but it wouldn't be much different from the current implementation and using the 2 best probably wouldn't make it that much faster afaik.
Hah, in the beginning they all drove backwards. And they they got smarter and started driving forwards :P Or was I just not looking properly
I also wrote about using mixins for Backbone in [Backbone at Dataminr](http://modernjavascript.blogspot.com/2013/04/backbone-at-dataminr.html) and use "[functional mixins](http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/)" (which is really [Aspect Oriented programming](http://modernjavascript.blogspot.com/2013/06/aspect-oriented-programming-in.html)) with [Backbone.Advice](https://github.com/rhysbrettbowen/Backbone.Advice). 
That is absolutely possible. :)
you can use these now if you don't care about older browsers. still entertaining and I learned some new stuff, thanks for making.
Here's a link to the original: [JavaScript Trivia Crossword](http://www.reddit.com/r/javascript/comments/17y30y/i_made_a_crossword_to_test_your_javascript/)
Thanks, glad you liked it. I hope most people live in a world where they can ignore earlier versions of IE, or users that willfully don't update their non-IE browsers.
&gt; I like your ideas. Glad I could be of some use at least. &gt; I'll also add the 'advanced' network option for you :p Hey! Don't knock it until you try it. :-P &gt; The cars are rewarded if they have a high speed and are punished for standing still and even more for driving backwards but I wanted to give the network some more freedom instead of splitting it 45/10/45. True, sorry about that. Technically, speed is the magnitude of velocity, i.e. it lacks direction, so I guess I were confused by that; or I were simply not parsing things correctly &gt; The cars can actually only see forward starting at half the car with a length of 1.5 times the car. Suddenly I'm missing every detail it seems. Thanks for the correction. &gt; The local minima should only be for a few generations, after that it should start doing better, That depends on how 'steep' the minima is in relation to your `ratio` value. You can think of the current solution as a ball stuck in a pit with the `ratio` being the force that pushes it out of it. &gt; at least if you let the simulation run for a long enough time (about 10 seconds should be good, less raises the chance for a local minima. I had it set to a minute the last time but they were still stuck in their ways when I came back some time later. All in all it is a minor problem, as you can simply reset the simulation. By the by, some random trivia: This: `return value + value * Math.random() * rate - value * Math.random() * rate;` is the same as this: `return value + value * rate * (Math.random() - Math.random());` or if you prefer: `return value * ( 1 + rate * (Math.random() - Math.random()));` Well, it's the same if you don't count the rounding errors that may occur for the last two decimals.
Great article. I need to consider a different approach for events in my next project.
Yea, I just thought of a mistake because of you, weights can't change sign atm so I'm gonna have to change that ;) The local minima really shouldn't be a problem because the network can go from one point to a complete other, anyway I haven't yet experienced the problem, if you do, well bad luck press f5 :p Technically speed doesn't have a direction but I'm not the kind of person to follow those oppressive mechanical rules! I'm almost finished with a few changes and i'll make sure to let you know moments after I put it online so you can give even more feedback :D I'll write out the details later of how I made it and stuff so you won't miss out on anything, there also is a way to show what the cars 'see' but I disabled it for the online version, I'll put that in it too so that you can see what the cars see.
cheat sheet: http://caniuse.com/
&gt; if you don't care about older browsers. Even if you care about older browsers, you can still use new features as long as you degrade gracefully.
&gt; Yea, I just thought of a mistake because of you, weights can't change sign atm so I'm gonna have to change that ;) Wait, how could I miss that. In addition it also has a super slight chance of ending up with a value of 0, if I'm thinking about it the right way. It would explain some of their preferences. &gt; if you do, well bad luck press f5 :p "It's a feature!" :-) &gt; I'm almost finished with a few changes and i'll make sure to let you know moments after I put it online so you can give even more feedback :D Well, I can try at the very least! I may be late in replying though as I have to prepare some foodstuff for tomorrow and there's also that detail about sleep. &gt; I'll write out the details later of how I made it and stuff so you won't miss out on anything, there also is a way to show what the cars 'see' but I disabled it for the online version, I'll put that in it too so that you can see what the cars see. Cool, it shall be interesting to read and curious to see what they base their learning on.
Thanks! :) Our focus with this is on the Web Audio API which is browser only, currently. There's some talk about Node/NPM but we chose Component because it's targeted at browser development. A lot of the way that these modules are developed isn't suited for Node anyway (i.e. relying on the existence of an AudioContext). Plus, as mentioned above, the `user/packagename` naming convention definitely helps us out because audio module names will conflict quickly. This kind of feedback is hugely helpful though, we'd love to hear your thoughts. Check out our mailing list, there's even a topic on Node support :) https://groups.google.com/forum/#!topic/web-audio-components/YhlpVS8IP7M
That's the beauty of GA's - you start with a completely random gene set and over some generations the optimal characteristics naturally come out. 
No, it *is* currying. I know what threw you for a loop - the ability to pass multiple arguments at once. That is really just sugar on top of traditional currying designed to make up for the deficiencies of JavaScript's syntax. See the comments by /u/hughfdjackson, in this thread: http://www.reddit.com/r/programming/comments/1hq21s/why_curry_functions_in_javascript/cawvz5r His library was actually the inspiration for trying something like this. Basically, it boils down to syntax vs semantics. In JS, we can't apply a curried function like you can in haskell `fn x y z` so you would have to do something like `fn(x)(y)(z)` which is awkward and verbose. By using variadic sugar, we can regain some of the elegance of currying by simply writing `fn(x, y, z)`. But we **are** still currying. The important distinction is that we continue to return a curried function until all the arguments have been bound. Partial application doesn't have the property of iteratively returning functions with lower arity until all the parameters are bound - you would need to continue to partially-apply the resulting function yourself. As /u/tailcalled said in that thread: &gt; Currying is curried partial application. 
Yes!
do you have a public repo somewhere?
We're actually using flask... I think we have the backend stuff sorted out really well, but it will help if you can at least find your way around the backend some. I'm working on the mockups and I can do the jquery/html/css stuff rather well, it's just the backbone and application stuff that kinda make my head spin. What's your email?
sorry edited my original post but it looks like you saw it lol (wanted to see abit of code before committing to anything). yeah i think i can still find my way around python/flask. if you can start a public repo that would be great, i am willing to contribute on the backbone/angular end.
I did it in pure JS for educational reasons. This is part of a JS class I'm doing this summer at OSCON. more coming soon. 
Discussion on sharing algorithms with node/npm with WAC: https://groups.google.com/forum/#!topic/web-audio-components/YhlpVS8IP7M While there are front-end modules in npm, there isn't really much in the way of UI compatability modules -- if it was purely a JS algorithm making white-noise for example (Math.random() gogogo), then that wouldn't be an issue, but this also takes care of hooking it into the AudioContext available only in browsers. And being in component, other UI-specific components (like the rack/softsynth interface in the examples) can be used, or a specific UI for an audio component can be built and rely on what's currently in the component(1) registry. Awesome point of discussion, and deciding which registry to piggyback on (and even possibly roll our own) took a lot of brainpower. I think sharing algorithms on npm/component(1) and consuming them in a browser context with a WAC wrapper around (like mentioned in the discussion thread) is a good compromise so that algorithm can be shared in both environments, and no overhead is needed when working in the browser 
Well, great work!
Here you go. The script URL is http://yourjavascript.com/722191433/crawler-click.js http://jsfiddle.net/AP3Yx/2/ All I did was change 'mouseover' to 'mousedown' in crawler.js, and added a onmouseup event to stop the movement. It's around line 232 if you want to take a look.
Here is the first thing that I made already :D http://thepublicshare.com/neuralCar/mapEditor/editor.html *edit* To come: 1) "advanced" networks 2) different maps/your own map *edit2* It should work now, let me know if something doesn't work :D
Is this similar to what you want to do - [Shiva](https://hacks.mozilla.org/2013/03/shiva-more-than-a-restful-api-to-your-music-collection/)?
Yea but there isn't really a difference of how I do it now.
You make it sound like the burden is on him to read your docs or even pay attention to you. Regardless of the number of hours you spent it's not like people can't completely ignore your project and still get useful work done.
You forgot the funky bass line... http://www.youtube.com/watch?v=r-jckUWLBdk
Wouldn't it be great if other browsers started implementing JPEG XR so these hacks wouldn't be necessary? :-D
Yes, it seems possible. You just might have issues if you try to use a self-signed certificate. See this StackOverflow answer: [node.js, socket.io with SSL](http://stackoverflow.com/a/6601067/808532) &gt;Use a secure URL for your initial connection, i.e. instead of "http://" use "https://". If the WebSocket transport is chosen, then Socket.IO should automatically use "wss://" (SSL) for the WebSocket connection too. 
Wouldn't the receiving end (the socket.io server) have use SSL in that case?
Yes. You can connect via SSL on any port (80 or 443) but both sides must be speaking the same protocol. Edit: Why the down?
The idea behind it is pretty sweet. I wanted to know what is the support for it and here is what the FAQ gave me : &gt;**Which browsers does Voyeur support?** &gt;Voyeur supports all major browsers. ...i wish it was more specific =/ Anyways cool library i'll try to keep an eye on it ! Edit : https://twitter.com/dunxrion/status/354276456022556672 So only IE10 for now
The more people that know a language, the more useful things you will see coming from it, and the more powerful it becomes thanks to libraries and frameworks and knowledge of how to leverage a technology that everyone knows and do useful things with it. JavaScript is ubiquitous. You will get more attention and more people will find your work useful if it is written in Javascript, compared to using a more obscure language. It's fine to experiment but it doesn't make much sense to invest too much in obscure languages. 
That's really only there to prove the point that JavaScript, under the hood handles events asynchronously in a quick and easy code example for the reader.
But dude it lets you manipulate DOM unlike before where you manipulated DOM
No worries, just remember to scaffold your grunt task workflow with yeoman, so you'll be able jslint and uglify your asynchronous modules while you live reload in the browser. Front end development is starting to get really fucking strange.
I'll just still rather keep using JQuery
Many npm modules are being written which target primarily the browser - a great example is the [voxel.js](http://voxeljs.com/) ecosystem using WebGL. Publishing on npm makes it simple to take advantage of a huge and vibrant package ecosystem. There's a new service called [requirebin](http://requirebin.com/?gist=5940808) which lets you make sketches in the browser using modules from npm. So while Node.js support for the WebAudio api would be very cool eventually, there are still many advantages to using npm as the underlying package manager.
A simulated car is not a car. Most people would agree with that. Then why would some argue that a simulated brain is a brain, which can feel pain? 
&gt; traverse and manipulate the DOM the way it should have been. &gt; `Voyeur.div.header.h1.em.a.href = "http://google.com"` Umm, I don't think so.
Going up against jQuery is very ambitious. Can you possibly list the advantages your library has over jQuery?
IE10 is available for Windows 7. Was auto-updated on my work laptop months ago. 
Socket.IO doesn't always use websocket connections. Most of its transports are actually done over HTTP. Because of this, the Node.js server will need to use HTTPS as well. Until you have done this, you won't be able to ensure a secure connection. Socket.IO should automatically use a secure mode for websockets if the client connects via HTTPS.
I'm being told the demo doesn't work. Works fine for me. I'll look into it. If you are having issues (sorry), it is because I limit the generation to ~2 seconds before it starts stopping. http://codepen.io/rlemon/full/wJBds seems to perform a bit better. increase generationlimit on line 12 if you are on a slower computer. edit: fixed, now it is based on number of segments in the generation.
It's not bloated to shit with hundreds of lines of code that you probably won't use?
I think it's pretty neat. Definitely a cleaner and more elegant approach.
The issue with this is that traversing is highly DOM dependent. If you change a tag or add a wrapper, you have to rewrite all of your code.
I don't get all the hate this library has gotten so far. This is actually very cool. It is literally the simplest and most logical way to manipulate DOM that I can imagine. I like it. It might be a little less powerful than jQuery's selectors API, but it is certainly much easier to use, and just as importantly, *read*. I don't even completely see it as necessarily supplanting jQuery, but rather supplementing it. Good stuff author, keep up the good work and ignore the haters.
Available, yes...but that does not mean everyone upgrades...in fact a large chunk do not.
I think the problem is that JS and CSS shouldn't rely too much on the document structure. Would you honestly do that in CSS? div header h1 em a { color: red; }
This sounds interesting. Could it be used as a JQuery replacement? JQuery is about 100 k, right? 100 k by itself is not too much but then you need other stuff too.
This sounds interesting. Can it be used as a JQuery replacement? JQuery I think is about 100 k, right? 100 k by itself is not too much but then you need other stuff too. There's plenty of stuff there that your application will not use. Hoorah for the small frameworks 
A lot of the times yes. Maybe not something as vague as div header h1 em a { color: red; } but I will often not add any classes to a 'group' (if it's specific enough and doesn't have many children) and select them by their tag names so that my HTML is far less cluttered with classes. &amp;nbsp; &lt;div class='myDiv'&gt; &lt;ul&gt; &lt;li&gt;Some &lt;i&gt;content&lt;/i&gt;&lt;/li&gt; &lt;li&gt;Some &lt;i&gt;content&lt;/i&gt;&lt;/li&gt; &lt;li&gt;Some &lt;i&gt;content&lt;/i&gt;&lt;/li&gt; .... &lt;/ul&gt; &lt;/div&gt; &amp;nbsp; Is 100x better than &amp;nbsp; &lt;div class='myDiv'&gt; &lt;ul class='myUl'&gt; &lt;li class='myli'&gt;Some &lt;i class='specialI'&gt;content&lt;/i&gt;&lt;/li&gt; &lt;li class='myli'&gt;Some &lt;i class='specialI'&gt;content&lt;/i&gt;&lt;/li&gt; &lt;li class='myli'&gt;Some &lt;i class='specialI'&gt;content&lt;/i&gt;&lt;/li&gt; .... &lt;/ul&gt; &lt;/div&gt;
"use strict" sounds like perfect advice. Are there any reasons why not to use it always? 
And I will keep using `document.querySelectorAll`
Cool in concept, but fragile in practice. This tightly couples your HTML to your JS. let's say you wanted to remove the &lt;em&gt; from the &lt;h1&gt;, you'd also have to refactor a bunch of code. It'd be interesting to try adding class names and IDs into the mix. 
I can't imagine how this is faster than jQuery+Sizzle, which leverages internals to do selection. Are there any tests/results we can take a look at?
Nature's Sizzle
Finite State Machines are awesome for dealing with multiple states. My favorite example is the &lt;video&gt; element. There are several states, and it doesn't quite fit into event emitters, promises, or callbacks. Moreover, when you find a new possible state, it's easy to add, remove, or modify the ordering of states. 
So why would you want to do: Voyeur.find("#myDiv").ul.li Instead of: Voyeur.find("#myDiv ul li")? or... $("#myDiv ul li")
I don't think so. TBH I have not been using it for long, but so far so good :)
Because it doesn't work in recent browsers... Because it couples html and javascript tightly... Because it doesn't solve any new problem... Because if someone actually uses this they will have to completely rewrite half way through their project because they developed their app in chrome and now have to port it to IE9
Ideally I'd like to store a reference to Voyeur on the object itself (not sure if Voyeur can do this). so then I could: myDiv.ul.li ... after having cached it once: var myDiv = doc.getEl('.myDiv');
So you want to mix querySelectorAll and voyeur together? Why not just use the former? It is supported in all browsers this lib is supported in This lib doesn't even use a prototype so a reference to voyeur object is pretty much useless. jQuery.fn, in the prototype chain for jQuery objects, is just one thing that makes it so useful. It's what makes jQuery extensible. The author is afraid of the "new" keyword, probably because he doesn't understand it. Creating a class that wraps the selected nodes will give this project a glimmer of usefulness, but it's already surpassed by others. I would suggest writing this as plugins for the major libraries (jQuery, underscore, zepto). I would never use it, but maybe somebody would? Then when they have to rewrite to support IE9 it won't be so hard
Considering what jQuery can do, it's pretty lean and mean nowadays... That's a pretty outdated argument. 
Life would much nicer if "use strict" was always the default :(
If you want to use some deprecated JavaScript methods then strict mode prevents that. The one that comes to mind is arguments.callee, which is forbidden in strict mode but works outside of it.
Stop writing software. We got jQuery!
It all depends on your definition, also pretty offtopic :)
GAH! I just started using `document.querySelector`. Was wondering how to select multiple elements. Thanks!
Yes, I would really appreciate that as well!
You swear to much.
I don't think his complaint was directed at the project more so at everyone going off and trying to create a better mouse trap and being less focused on actually catching mice. More ideas are still better than less but it is hard to keep up.
Then don't. Someone else will.
any ideas to improve the wrapper are welcome
There's more to "use strict". For example, "this" will not be mapped to the global context if unset.
Dude, seriously, grow up.
I don't see learning anything about this to be a priority so best of luck with the next guy.
I didn't say it should be a priority. I wouldn't have even said anything if you people didn't come in here slumming.
I think that's less sensible module names being hard to find, and more substack having a strong appreciation for the surreal.
I have a list of problems it causes to existing code but I don't have it with me. Not that I don't agree it should be on by default.
Thanks for sponsoring global warming! :) The blue one looks very efficient with good ground clearance.
1. [Ext callParent][1] 1. [arguments.callee][2] 1. [Function.caller][3] [1]: http://docs.sencha.com/extjs/4.0.7/#!/api/Ext.Base-method-callParent [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments/callee [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller
You're worse thank Kanye. 
or a more robust one: https://code.google.com/p/closure-library/source/browse/closure/goog/async/nexttick.js?spec=svn08ded94054ce9a0e350d0648b6db3d1753f985e7&amp;r=08ded94054ce9a0e350d0648b6db3d1753f985e7
Hipster! 
Beyond what's been said here, it's probably slow as hell having to traverse the DOM for every element. getElementById (or #id) is very fast. 
It's probably more work than its worth to modify that script to do what you want. There are others, like [this](http://fredhq.com/projects/roundabout/#enable-drag-drop) and [this](http://www.jacksasylum.eu/ContentFlow/).
*users*
https://code.google.com/p/closure-library/source/browse/closure/goog/async/nexttick.js?spec=svn08ded94054ce9a0e350d0648b6db3d1753f985e7&amp;r=08ded94054ce9a0e350d0648b6db3d1753f985e7
I'm not saying it can't be done. I'm saying its more work than its worth. If you modify the script in the requested way, you'll also be introducing a lot of bugs, because the functionality is almost entirely different.
Thanks
More importantly: Stick Portal! But it doesn't seem to work for me...
I thought this looked very familiar, [this article was posted here already.](http://www.reddit.com/r/javascript/comments/1hkvxx/progressive_enhancement_is_still_important/) 
It's similar to d3.js in some ways.
Thanks for the straightforward response, one more question thought. If my filename is example.js then it should look like &lt;script src="example/jquery.js"&gt;&lt;/script&gt; &lt;script src="example/script.js"&gt;&lt;/script&gt; right? This is the hardest part about html by far.....
I would say yes. Since there are so many competing frameworks and no declared winners, it's a fun time to see the different ideas, and Angular takes a unique and promising approach. Angular is also very productive once you learn the basics. It's fun to extend the HTML language with directives and you can whip up something very quickly with it. Like all frameworks, certain things are more difficult, and it's informative to discover its pain points. I'd also recommend learning Ember, Backbone, and anything else you have time for!
This blog post adds nothing to the [original detailed post by John Resig](http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/), and it copies an entire section from that post without noting that it's a direct quote. If you'd like some real information about strict mode, see John's post.
So this is an article I wrote on how you can manage responsive design breakpoints in javascripts, I think it has some interesting points and is aimed at people starting to use responsive in JS and are wanting to learn about how it can be handled nicely
Not quite. You might want to brush up on how file paths work. In your example you're essentially saying your structure is like this: |_| example ---&gt; jquery.js ---&gt; script.js So your scripts are in some folder called `example`. If your structure looks something like this: |_| js ---&gt; jquery.js ---&gt; example.js Then your script tags would look like this: &lt;script src="js/jquery.js"&gt;&lt;/script&gt; &lt;script src="js/example.js"&gt;&lt;/script&gt;
I don't think I've ever seen such a well-documented paper with such thorough citations on the internet. Having said that, I would prefer to see browsers adopt as a standard the Node.js naming convention over the name invented by Microsoft. It's more descriptive of the functionality and less deceptive.
How about the computer science section of Khan Academy? It's got a really nice editor where the code is evaluated in real time as you type (created by John Reisig)
I notice a clear speed-up here, generation of 20cars taking less time than generating 8cars before the changes. [event.offsetX/Y is an IE property that isn't implemented in Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=122665#c3), so I can't test the editor here. There's the [event.layerX/Y](https://developer.mozilla.org/en-US/docs/Web/API/event.layerX) that can be used instead. The air is so damn hot and stuffy here right now, so I'm gonna go with an easier code review style. Hope you don't mind. :-) &gt; **L523** &gt; &gt; for (var a = 0; a &lt;= settings.networkStructure[0]; a++) { &gt; net.layers[1][a] = randomNode(78); &gt; } The value 78 is the amount of visible pixels? Should it be based on the size of the cars or is the 'blockiness' scaled in relation to the car size? &gt; **L550** &gt; &gt; this.mutateBrain = function (brain, rate) { &gt; net = brain; &gt; this.net = brain; &gt; for (var a in net.layers[1]) { &gt; net.layers[1][a].bias = this.mutateValue(net.layers[1][a].bias, rate); &gt; for (var b in net.layers[1][a].weights) { &gt; net.layers[1][a].weights[b] = this.mutateValue(net.layers[1][a].weights[b], rate); &gt; } &gt; } &gt; }; This only mutates the nodes in the first hidden layer, doesn't it? Other than that it looks great, nice work. :-) **Edit**: Now if only there were an easy solution to weeding out spinners.
https://github.com/NobleJS/setImmediate
Also related to this article: http://0fps.wordpress.com/2013/07/09/texture-atlases-wrapping-and-mip-mapping/
That's pretty cool! Upvoted. Too young to have any kids, but surely entertaining!
&gt;have had a hard time keeping his attention because my beginner examples are quite unimaginative. Or he doesn't care and doesn't want to learn js.
The front page is littered with sites (mainly Conde Nast publication websites) featuring a konami code easter egg. Well this site features the script to do it. It appears to be easily customizable so you can create your own website cheat code.
Works fine for me. What's your problem?
Very true. I edited the post and gave John more explicit credit. Thank you.
Not 100%, while this div[eat-at-joes] is valid CSS, this &lt;div eat-at-joes="expensive"&gt;Joe's!&lt;/div&gt; is not valid HTML, though this is easily fixed by prefixing it with 'data-'
I agree. &gt; While I’ll concede the naming is completely wrong If your first thought is that the name is wrong, change it.
76 visible pixels, the angle and the speed of the car. I'll change those things and let you know when i changed them.
It's always an amazing experience when people start linting their code. So many stages every developer goes through. Denial is just fear. Use it, it's an amazing reality check. For those of you who don't use a build step: you lack vision and your code is untrustworthy.
Have you looked at http://www.codecademy.com/tracks/javascript yet? It’s free!
Yep codecademy it is. Remember there is no shortcut when learning programming. If you don't understand a concept, don't skip it. Chances are many of the future concepts depend on you getting that initial subject.
codeacademy. no doubt. quackit is a goody too
eloquent javascript is another great option. I think it is slightly better than Codecademy's course and it is what I used after completing Codecademy. Check it out: http://eloquentjavascript.net/contents.html Also remember that all these courses are great, but none of it will really stick until you start building things on your own. Building small sites as you progress is a great way to make the concepts really sink in. Good luck and have fun learning!
You can also follow this guideline: http://javascriptissexy.com/how-to-learn-javascript-properly/ Definitive Guide looks very good for beginners.
To OP: But don't keep on staring to this one topic/problem you don't get until your eyes bleed out or you give up programming. On these sites, there is no teacher that can give you alternative ideas, explanations, examples, analogies, whatnot when you need it. If you're get stuck, try out another resource, for example, ask a question here, or to a budd, or a programmer you know, or have a look at another similar site to codecademy.
FYI, those are queues (FIFO), not stacks (FILO). Also, you might want to wrap the item() call in a try/catch to make sure one blown callback doesn't prevent executing the later calls. Of course, then you'd have to worry about error handling, and that's not the fun part of coding. ;) Have you considered arbitrary priorities besides before, normal, and after? A priority queue of callbacks might be an easier data structure to solve this async execution problem. Very cool project. :)
**TLDR; If you're get stuck, try out another resource**
Keep running your code through [JSHint](http://www.jshint.com/) it will throw at you errors and bad practices issues
This is very cool, but it seems like it would be much better to do with webgl.
Pretty cool! Not enough players :(
A bunch of people have gone through that a few times on a sub I mod, /r/LearnJavaScript.
You should x-post this to /r/learnjavascript! (I mod there, this is good content!)
Works and is effective but I hate Chuck Norris jokes. What is this, 2001? Typically I include TWO spaces after punctuation. I had to keep going back and changing it to one. 
The Chuck Norris jokes thing is used because it's an api he calls out to: http://www.icndb.com/api/. It's simple and dynamic.
I played it for 10 rounds/wins, then it stalled and indefinitely said the next round will start in 1 second. If you could enter a username and there was a persistent leaderboard, there'd be more incentive to play.
It's kind of buggy, sometimes it loses sync and randomly restarts on different phrases. It seems that users aren't always racing on the same phrases too. Pretty fun though!