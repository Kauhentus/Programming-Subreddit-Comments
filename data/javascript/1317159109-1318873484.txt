If it were just that, there would only be speed differences in the init section. The reason the reads and writes are slower is because an extra context (virtual object) has to be created, stored and accessed every time. Whereas the prototype method only needs to access the special "this" object which is faster.
Your if block is ten independent clauses. "guess != 1" or 2 or 3 or 4 or 5 ... Basically, that comes down to "guess != 1" or true or true or ... You need to use "if (guess &lt; 1 || guess &gt; 10)" 
Thanks! This doesn't prevent you from writing letters though, but I can solve that.
Well, no letter is going to fall between 1 and 10, so yes... it would. Edit: Er, I see what you mean. Yeah. Use "typeof(guess) != "number" || guess &lt; 1 || guess &gt; 10"
My first guess would be that a feature is being supported in IE9, and you script does something that only IE9 allows. That's all I got.
typeof guess is always string.
Couple things: 1. Don't ever use anything other than strict equality (=== and !==), unless you have a damn good reason and can articulate it. Otherwise you're asking for trouble. I hope your course gives this sage advice... 2. Prompt will return a string. You should do one of two things - convert guess to a number first, or check to see if the string is formatted properly (contains a number). 1. To convert the string to a number, use the standard builtin parseInt (eg. guess = parseInt(prompt())). Then use the if statement Signe provided. You will also have to handle when parseInt returns NaN, which it will when the user enters something that can't be parsed as a number. 2. The standard tool for checking if strings match certain formats are regular expressions. In fact, I think regular expressions are the most handy tool in a programmer's toolbox. In this case, you could use `if(!guess.match(/^\d+$/))`. This regex tests the string to see if it's one or more number characters with no other characters before or after them. 
There is no closure comparison. Closure only occurs when a scope boundary is crossed and the point of reference is addressable and assignable from within the scope boundary. This code addresses nothing of the sort as everything in the test is using closure. This test does not do what it claims: * there are no classes in JavaScript * it creates functions every loop iteration to access closures instead of putting the functions outside the loop to be accessed as closures themselves. That demonstrates that excessive invocation and unnecessary lookups are slow. It does not demonstrate closure is slow, which is what it claims. Furthermore, everything in the test is using closure, so there is hardly a comparison in that regard. The major difference is the use of constructors, not closure, and whether lookups occur inside/outside a loop iteration.
Right, because it's from prompt() ... wasn't thinking about that.
Found on [stackoverflow](http://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric): function isNumber(n) { return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n); } so it should work with: (!isNumber(guess) || (guess &lt; 1 || guess &gt; 10)) check also radhruin's answer.
"very easy" is a very stretch statement. A thousand is very high amount of object, you are either talking about utilities classes like jQuery object or you are talking about an application that processes lot's of data and uses a lot structures. If you are easily obtaining a thousand object on a simple web application, you probably have an optimization problem that has nothing to do with closures. 
Almost certainly the same as the prototype vers, as that is what you are doing. The question is, what are you gaining by doing this? Can you invoke new Person(...) outside of that function? If I create two different Person objects, do they actually have different state? Answers: yes, and no. Yes because Person = function... creates the Person property in the calling context (probably window), and no because there is only one name that all instances of Person wrap. In firebug: (function(){ var _name; Person = function(name){ _name = name; }; Person.prototype.get_name = function() { return _name; }; Person.prototype.set_name = function(name) { _name = name; }; })(); undefined &gt; var asdf = new Person("asdf") undefined &gt; asdf.get_name() "asdf" &gt; var fdsa = new Person("") undefined &gt; asdf.get_name() "" &gt; fdsa.get_name() "" Whoops.
choppy. I'd done a version of this with ccv.js/face.js with a webcam and after a while it starts to fry your processor. EDIT: sorry I didn't mean to sound like a dick. I just got bummed after experimenting with this stuff after realizing that a purely web-based augmented reality app is still a little off just due to how inefficient canvas bitmap processing is. One of your commenters mentioned the experimental opera implementation of DEVICE might be promising...
I'm not talking about a simple webpage that you enhance with some javascript. If that's the case do whatever is the most maintainable. In fact, as a rule of thumb, it's a good idea to pick the maintainable form. Be aware, that this over head is per function call, which includes getting or setting a property. So let's say you have a flicker stream that you want to show. You start by getting a list of the user's photos, lets assume you already know which gallery to pull from. Flickr by default will return 100 items, each with about 11 properties. Plus, two calls to get the comment (because it's a nested object) and another 4 properties for page type information. So far you have 1,104 properties assuming none of these photos have comments, or 1,304 if they all have comments. If you want to show the user all of these photos so they can pick the one they like, you'll have to run at least one loop, and you'll need to check almost all of these properties (because you have to construct the url to get the photo.) So our simple app has already made more than a thousand calls. If you need the extra data/geo location/exif then those are more calls with more properties you need to access. You would obliviously want to do some optimizations/cache/limiting and most likely you would just work with the raw JSON object and not put it into a closure. But an inexperienced developer could easily try to put these into a closure because it's the "right thing". Javascript games is another place that closures can quickly cause performance issues. Or how about an event on mousemove? That will easily start to have performance issues when using closures, especially if you are using something that a jQuery selector to find elements or change elements. Am I saying to never use closures? Not at all. I'm just saying the performance cost can sneak up on you if you're not careful.
"Because the other ones are preferred" is not a real answer, and neither is "stop questioning style guides." $().ready(handler) The reason that form is not recommended is most likely because $(), in this case, isn't doing anything besides returning a new jQuery object since the selector argument was left empty.
&gt; Then maybe you should have been more specific. He doesn't need to be. If you know the language well, you know perfectly well what he meant.
True, which is why I said it was a mixture. ;) I am curious, however, as to the speed difference between this and the other two models . . .
Respectfully, you're missing the point. With one method, there is a direct access of the object's member. With the other method, the prototype chain has to be walked. That walking is not free. Regardless of whether they have the same meaning to a programmer, and regardless of whether you want to flog your soon to be wrong point about classes in Javascript, what's being observed here is the difference in speed that's created by the language's radically different underlying implementation. &gt; It does not demonstrate closure is slow, which is what it claims. What it actually claims is that the closure method requires more work on the browser's part than direct membership access, and before you argue that, please go read the ECMA 262 standard, which agrees. &gt; The major difference is the use of constructors This is not correct. The major difference is that one method requires ascending the prototype chain and the other does not.
&gt; I don't understand why people feel like they need private variables. Using a underscore gets the point across. 1) Oftentimes it does not. 2) I don't want to leave the possibility of error, of intentional interference, etc. 3) Leaving in the potential for problems because you don't expect anyone to hit it? 
See [we're all consenting adults](http://mail.python.org/pipermail/tutor/2003-October/025932.html) 1. With the exception of beginners, a underscore is a well known notation to mark something as private. It's used in more languages than just javascript. 2. There is always a possibility for error. No matter how hard you try, someone will find a way to screw it up. private visibility is no guarantee, in languages like c#, you can use them anyway with reflection. Marking something as private is useful, but not guaranteed. 3. I don't see how it leaves a potential problem. You know you shouldn't use it, so don't. If you really need to for whatever reason, then you can. You'll just know that it might have unintended side effects or break with future versions. I don't know that one way is right or wrong. It's probably more of a philosophical difference in the way we see programming languages. I prefer weak typing, I'm going to guess that you like strong typing.
I once saw an IE memory leak caused by a unrelated browser plugin we used for automated testing. Wouldn't hurt to double check that you have clean install of IE9.
Start by isolating anywhere you replace anything in the Dom. You should be able to see where the leak is occur. Not sure if ie9 supports the collectgarbage call but it might help in testing by calling before and after a block of Dom manipulation. I assume you've checked the usual culprits for creating circular references between js and Dom objects. Could it be that ie9 garbage collects far less frequently than 8? Does your page just keep eating memory until it craps out or do you see memory use increase, drop but never return to it's baseline? Not sure what else to suggest. 
just came here to say how slow it was.
I've been recently comparing asynchronous loaders, namely require.js, lab.js and yepnope.js You (almost) can't go wrong with any of them, but if you use Modernizr.js, it "comes with" yepnope.js To each, their own. I recommend checking out yepnope.js also though.
I didn't miss the point. Any difference is larger the more times you multiply it. This kind of speed testing is bulshit because it doesn't say anything about the real speed difference. All we know is one faster than the other is a loop after thousands of iterations. What about the value of syntax and readability?
~MWAAAAAAAA!~ Thank you! xxxx
Yes it is. Questioning style guides is what got us into this silly brace war, for example. Although JavaScript is slightly safe from that one because there are syntactical differences due to semicolon insertion. TIMTOWTDI doesn't meant you should be embracing diversity in code. Code is not a way to express your creativity. It's a way to describe the solution to a problem and if nobody but you and the compiler understand it, it's worthless to the rest of humanity (including your future self). If the only difference were performance, it wouldn't matter because you should never prefer manual optimisation (for its own sake) over readability. There may be objective reasons to prefer one style over another, but in practice for the vast majority of them it boils down to what is considered idiomatic for the given language, library, framework or application.
Wow... thanks. I wonder what the best way of doing particles in Firefox would be... basing them on objects sounds like a disaster unless they're all pre-made before the animation... at which point there's a huge overhead in objects/particles that aren't being used.
Exactly 140 characters, pretty awesome.
No, I am not missing the point. The only thing this test demonstrates is that invocation of functions during loop iterations is costly. You can do the exact same thing by moving the function entirely outside the loop and then making calls to it during the loop iterations. This is exactly what I said in my last post and you appear to be responding to something else. &gt; What it actually claims is that the closure method requires more work on the browser's part than direct membership access That is not demonstrated by this test, because the test is biased. Move the function outside the loop so that the sub-functions are not created during each loop iteration so that there is a standard comparison. Creating functions is costly, so costly, that is all that is observed, which proves nothing about closure and speed thereof. &gt;&gt;The major difference is the use of constructors &gt;This is not correct. Then look at the code again. Notice that some code instances use "new" and others do not. Therefore that is a difference.
If there is that big of a gap after several iterations then that means there would be at least a small gap after a single iteration. Which you are correct might be negligible if you were only doing it a few times. If you are more comfortable with closures than prototype then it probably would be to your benefit to use them. IMO closures actually make code less readable and skew the syntax in strange ways. Coming from a C++/Java background closures seem very strange and difficult to understand. Also coming from that background you are pretty familiar with instantiating an object with the new operator, making closure instantiation alien. I think closures are a bad idea, but it's just my opinion, and the fact that they can be considerably slower to instantiate just adds more to that sentiment. 
Is that a new license type? "DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE" I haven't seen that before.
Please OP, as a new programmer do yourself a favor and don't listen to any of what is in the post above. 1. This doesn't matter at this point in his learning and is likely to just confuse a new JS user. A new programmer (one that doesn't even understand boolean expressions well) must not be hammered with this kind of language-specific minutia . 2. You must convert it to a number by using the provided tools. The regex is a pointless complication at this stage in the OPs learning and doesn't even result in him getting what he wants (a number). 1. Try not to suggest parseInt(string, radix) to new users. It requires explaining how the the *radix* argument is **required** if you don't want to get tons of crazy bugs (like why the input "011" is considered &lt; 10). Use parseFloat() since it is less bug-prone. 2. UGH. This regex doesn't work for negative numbers or numbers with decimal points in them or numbers with a space before or after them or.... 
&gt; Closure only occurs when a scope boundary is crossed and the point of reference is addressable and assignable from within the scope boundary. Yes, which is exactly what the closure-based `get_name` and `set_name` do: they access and assign to `name`, the formal parameter to `person()` which is defined outside of their scopes. &gt; This code addresses nothing of the sort as everything in the test is using closure. Are you talking about the setup functions? If so, that isn't relevant since, as you say, they all close over `person()` and `Person` so that won't affect the relative test results. What *is* different is that the closure-based `person()`: 1. Creates new functions for each *instance* of person. 2. Accesses and sets names through those functions, which close over `name`. The prototype-based one does neither. &gt; * there are no classes in JavaScript Of course there aren't. How is that relevant? "Class" has been used informally in JavaScript to mean a type for years. I believe even the spec does it. &gt; it creates functions every loop iteration to access closures instead of putting the functions outside the loop to be accessed as closures themselves. Are you talking about in the body of `person()`? If so, that's kind of the point. Crockford's pattern specifies doing exactly that. &gt; It does not demonstrate closure is slow, which is what it claims. No, that's not what it claims. What it claims is that using the closure-based pattern for creating types is slow compared to the prototype-based way. The text of the test doesn't spell it out, but it's clear from the tests themselves that it's testing Crockford-style versus prototype-style.
This is the right answer but I would simplify it somewhat for the OP to just: var guess = prompt("Guess a number"); var guess_num = parseFloat(guess); if ( isNaN(guess_num) || guess_num &gt; 10 || guess_num &lt; 1 ) { alert("Write a number between 1 and 10!"); } If you want to go one step further and ensure that what was entered had no decimal component, you would use something like: if ( isNaN(guess_num) || guess_num != Math.floor(guess_num) || guess_num &gt; 10 || guess_num &lt; 1 ) { ..but I think this may be needlessly complicating things.
http://en.wikipedia.org/wiki/WTFPL
Which browser and document modes can you replicate it in (check w/F12)? Browser: * IE 7 * IE 8 * IE 9 * IE Compat. View Document: * Quirks * IE 7 standards * IE 8 standards * IE 9 standards You might try playing with these values, I think the Document (and possibly the Browser) [modes](http://www.nczonline.net/blog/2010/01/19/internet-explorer-8-document-and-browser-modes/) alter the JScript and rendering engines at runtime; e.g. basically you can force IE (using the F12 dev tools or via [meta tags](http://stackoverflow.com/questions/1014666/force-ie8-into-ie7-compatiblity-mode)) to use the same internals that IE 7 or 8 use. Do you get the same problems there?
Good idea, I'd recommend the IE "no addons" mode for testing.
Completely thought this was a joke. Wow.
I don't consider the difference between == and === minutia, especially when the former is rarely used, wildly unpredictable, and difficult to explain compared to the latter. Things that are === are a subset of ==, I say go with the easier concept first.
&gt; Normally I would ask my teacher about this sort of stuff but we don't have any lessons until next monday which is the day that this assignment is due. Google some js tutorials! (in addition to whatever else you're doing)
&gt; No, I am not missing the point. Repeating this won't make it true. &gt; you appear to be responding to something else. That would be the conclusion one might take if one were missing the point. Doesn't it bother you that three different people said the same thing to you, all telling you that you were missing the point, and your reaction is "you guys don't seem to be talking about the same thing I am?" C'mon. &gt; Notice that some code instances use "new" and others do not. Therefore that is a difference. This is akin to claiming that the purpose of the test is to show whitespace differences, then when told you're missing the point, insisting that someone need only look, and the whitespace differences are there. I guess you didn't notice that one of the people you're arguing with about the purpose of the test is the author of the test. C'est la vie. Some people just don't get it.
&gt; See we're all consenting adults To be frank, I find that usenet post silly. &gt; With the exception of beginners, a underscore is a well known notation to mark 1) Well-knownness doesn't matter. 2) It's not as universal as you imagine. 3) No amount of insisting "but everyone knows" validates to a legitimate engineer the unnecessary leaving of a hole in place. 4) Please stop arguing with opinions now. This is about preference. It is not appropriate for you to tell other people what their preferences should be. 5) It's the amateur who leaves potential problems in place in their code because they imagine a usenet post validates it; it's the professional who writes code that simply can't go wrong. &gt; There is always a possibility for error. This is no excuse for leaving such possibilities in place when they serve no purpose, create no benefit, and can easily be removed. &gt; I don't see how it leaves a potential problem. Of course not. Nevermind that you've been arguing extensively for why the problem isn't a problem to people you imagine all know the thing you expect; in the balance you can't even see what it is. Le cough. With experience, you'll find that people aren't as smart or uniform as you think they are, and that your expectations notwithstanding, leaving problems in place is just a stupid thing to do. &gt; It's probably more of a philosophical difference That's not what philosophy is. And no, it's just a question of experience: when you've seen coworkers do stupid things often enough, you start learning that the best way to work is just to eliminate the potential for error. What I find most compelling is that for all your talk about how the obvious problem that could happen won't happen because you imagine everyone will interpret an underscore to mean something, you seem to be unaware of any reason that doing it this vulnerable way is in any way an upside. So you're trying to explain away the problems, while completely missing that there is no benefit to doing it the vulnerable way. What this says to the experienced programmer is that you just haven't thought it over, and are bitterly arguing against any way that isn't the way you currently do it, because you don't want to change, or to admit that there's a downside to your current mechanism with no justifying upside. This is the black flag that screams "I learned to program on Reddit and have never built anything large with other people, and therefore have no idea how dangerous the thing I'm advocating actually is." Take it from someone who has, according to the Reddit demographic poll, a strong likelihood of doing this for money longer than you've been alive, since you want to talk about how beginners do things. Nobody *but* beginners tries to explain away problem points. People with experience just close them. &gt; I prefer weak typing, I'm going to guess that you like strong typing. You have guessed incorrectly (repeatedly.)
Be sure to inact the appropriate TIL/YSK/MIND BLOWN response :)
While I give credit for a clever implementation, I really wish he would have written his code the "long" way and then just run it through an [actual compiler](http://closure-compiler.appspot.com/home) to reduce it (which actually was able to trim 25 bytes from the original version). It's hardly legible as-is, and thus hard to critique the actual implementation -- for all we know it's completely bloated, and according to the Closure compiler, it actually does have some bloat. I'd also like to see [Fabrice Bellard](http://en.wikipedia.org/wiki/Fabrice_Bellard)'s take on this, that freak could probably do it in 50 chars lol.
&gt; This is akin to claiming that the purpose of the test is to show whitespace differences, then when told you're missing the point, insisting that someone need only look, and the whitespace differences are there. Please do not use analogies if you cannot avoid repeating something nearly identical to what I said. This only serves to demonstrate that you do not understand analogies. &gt; Doesn't it bother you that three different people said the same thing to you Peer pressure has no bearing on faster programming execution. This is a logic fallacy. &gt; I guess you didn't notice that one of the people you're arguing with about the purpose of the test is the author of the test. Why would that be relevant?
&gt; Please do not use analogies if you cannot avoid repeating something nearly identical to what I said. You ... really don't understand what's being said to you, do you? &gt; This only serves to demonstrate that you do not understand analogies. There's this sort of weird comprehension gap here. Several people are saying to you that you don't understand something. We're pointing out the specific technical difference, and you're just plugging your ears and saying "nuh-uh." Then, when we try to reduce to absurdity, you just say "you don't understand analogies." Probably it's worth noting that those aren't analogies at all. Before you try, they're also not similes or metaphors. So when you're angrily barking that people don't understand analogy, let me point out that one, you obviously don't, and two, the one that's being missed here is being missed by you. When someone points out that your argument applies equally well to something which by definition makes no difference - formatting - and your response is "that's too similar to what I said," then people around you facepalm. Yes. That's the entire point, is to make something similar which is also obviously wrong, to help you understand your logical error. It's become clear that you aren't even considering what's being said to you. You're just quoting what people say and insisting there's an error inside which apparently you don't have time to point out. Whatever you have to tell yourself. Then, you're holding up something that is not a fallacy, and saying that it is, in order to get out of observing that you tried to talk about what the purpose of the tests were, and in fact the author of the tests says you're wrong. Ho, hum. "Peer pressure logic fallacy." That would be a made up fallacy, of course, where you don't know what a fallacy is, so you think any random damn thing you imagine to be wrong can just be called a fallacy and walked away from. The problem with stupid people is they aren't smart enough to understand their errors even when they're pointed out and explained in depth. Have fun, champ. I'm sure you'll get in another reply so that you can feel correct. Be sure to downvote for disagreement, to complete the angry clueless redditor who doesn't care about the rules cycle. 
Tables &amp;#3232;\_&amp;#3232; 
Hmm... IBM sucks at programming JavaScript and HTML.
Careful with that closure compiler there. As it is known to occasionally do, it's actually breaking this code. The initial size of the code is 140 bytes, not 162. That later number includes the default closure comments. The reduced size is 137, but that's done by removing "||+a", which means a.toString() will never get called, and adding a ";" after the function definition. -4, +1, some functionality lost. Nothing else is changed, beyond gratuitous variable name shuffling. 
Good point, I figured I should have actually tested it, but advocating that specific compiler was not my intention. The main point that I wanted to make is that I think it would have made for a better demonstration for him to have shown the code in an unobfuscated state; as a developer I'm always more interested in _how_ it works. I wonder if any of the various options for the CC make it compatible with the script?
+1.000.000 I've been writing stupidly tiny stuffs for some time ( in x86, 68000 and DHTML ) and I never gained a single byte using Google Closure compiler and co. Never.
Did you check the [annotated version of the code](https://gist.github.com/1230481/95f6facb74f51d089bea87eba0f470cf3bbed83a#file_annotated.js) ? I think it explains pretty well how things work I would love to see someone, anyone, write a shorter version in JavaScript! FYI the shortest Sudoku Solver was written in 95 bytes in the K programming language. The shortest implementations in Perl, Ruby and Python are respectively 120, 122 and 178 bytes. I think 140 bytes is not that bad for JavaScript especially since this implementation does not leak or use a single variable in the global scope.
That markup is pretty painful.
I'm using w3schools and the PDFs our teacher has uploaded for us. They are great and contain a lot of good information, but they are not to much help when you run into this kind of problems. I've already gotten all the help I need anyway.
Thanks alot, and thanks to all you other awesome redditers who want to help :)
I have to agree with that. In particular, that last line of craziness could have been split on a few lines, if only to help figuring out the order of operations in it. Beyond that, I suspect that he's not showing unobfuscated code simply because there wasn't any during development. There may be some flag somewhere in CC that won't remove things that look a lot like dead code. In Closure's defense, this really isn't the kind of javascript it's meant to run on. As an aside, [uglify.js](http://marijnhaverbeke.nl/uglifyjs) is [on par](http://blog.foxxtrot.net/2010/12/a-comparison-of-javascript-compressors.html) with CC (except with [closure-annotated](http://code.google.com/closure/compiler/docs/js-for-compiler.html) source, presumably), and has the good sense of leaving this code untouched.
Great, you wouldn't want to learn anything extra!
 I'd probably do something like: Test={} Test.Example = function( args ) { this.x = 5; this.y = 5; for(var arg in args) { this[arg] = (this[arg] !== undefined) ? args[arg] : undefined; } } var t = new Test.Example({ x : 10, y : 15, rawr : "asdfasdf" }); console.log(t.x); //10 console.log(t.y); //15 console.log(t.rawr); //undefined Edit: Just to add, that way you don't need a list of 'accepted' args, and simply args that you have will be able to be extended as you extend them.
Maybe I'm mistaken, but that doesn't seem like the same thing. But rather, one of the few standard ways to define objects in js. With this implementation, wouldn't I need to edit the source code each time I want to include it in a project? The example I gave seems to have already defined these variables elsewhere and handles them appropriately. Note how it accepts the 'mapOption' dictionary with keys that I hadn't defined anywhere. Please correct me if I'm wrong. Thanks!
**Quick summary of the new** * removeAttr() -- now removed multiple (space delimited) attributes. * Registers self as a CommonJS / RequireJS async module. * Named queue support for animate; allows finer grained control. * Optimizations for heavy user of the .data() function. * HTML5 support (better innerHTML() and cloneNode() support. 
Hm... We may be on different pages, with this, but I'll just explain how I am interpreting it, and if it's wrong just let me know. Notice the {} inside of the parenthesis of the object. You can get rid of the "var t = " and leave it as "Test.Example({});". You could even do the same thing as the mapOptions, and defined it as a variable outside, and just pass that variable into the function with the same effect. I create a new object out of it, to demonstrate that it does actually set the properties as expected outside of the function. In order for your example to achieve this, it does in some way need to know what are accepted properties. Which will be set inside the function, or possibly in a list of conditions before sending to the server. It really should be the former though. This would have the same effect as above, but obviously not create a new object: Test={} Test.Example = function( args ) { this.x = 5; this.y = 5; for(var arg in args) { this[arg] = (this[arg] !== undefined) ? args[arg] : undefined; } console.log(this.x); console.log(this.y); console.log(this.rawr); } Test.Example({ x : 10, y: 15, rawr : "asdfasdf" }); I feel like I kind of rambled there, if I'm still off track, let me know. Edit: I want to add that, yes, you didn't define the keys in 'mapOptions' anywhere. Inside of the function: google.maps.Map(*element*, mapOptions); Google has already defined them. For example if you put in an argument like: [ "asdofjdsajfajdsaspjo" : "t030-ff3jgg" ] It wouldn't work, or really do anything, because it is not an accepted argument as defined by google.
 &gt;Edit: I want to add that, yes, you didn't define the keys in 'mapOptions' anywhere. Inside of the function: google.maps.Map(element, mapOptions); Google has already defined them. For example if you put in an argument like: [ "asdofjdsajfajdsaspjo" : "t030-ff3jgg" ] It wouldn't work, or really do anything, because it is not an accepted argument as defined by google. But the thing is that it does work. For instance I can do this: var mark = new google.maps.Marker({position:event.latLng, map: map, dfdfdfsad: "dfsdfs", sdfs: "fdff", draggable: true }); Maybe I'm focusing on the wrong thing here haha. I just figured being able to do something like that would make life a whole lot easier.
Well, you can put in those into what I gave you to, and you can just change inside the for loop into: this[arg] = args[arg]; Rather than that ternary expression. It's just that, it doesn't do you much good to store EVERYTHING entered in because if you don't have some idea of what you will be using then it's pointless to hold variables like "asdfasfas". Because, at some point you need to determine what the variable "asdfasfas" will help you achieve. Does that make sense? Edit: It makes it easier to maintain if you have the acceptable properties defined inside of where they are used. It'd be possible to define them outside of there, but that creates another level of complexity in maintenance which from the sounds of it is exactly what you don't want (for reusable code)
Good lord. It's not like the author is telling you to go install it on your website with a ton of other third party libraries. 
Kinda useless though, in my opinion. That's almost like the [MIT license](http://en.wikipedia.org/wiki/Mit_license).
I recommend reading the original [blog post](http://blog.jquery.com/) rather than this article. It seems like jQuery has re-bundled all of its event handling into the new on/off methods. That seems like a pretty important change to me.
I hope this fixes some of the odd cloning issues I had in ie6 (would crash browser). 1.6.2 worked fine, but 1.6.3 and 1.6.4 seemed to have some issues with clone.
Perhaps this wasn't there when you wrote this, but this is the only new feature I care about! &gt;Updated: Support For New Event APIs: .on() and .off() Pretty awesome!
I'm not sure if I agree with the name choice, but I very much like the new event APIs.
The ability to reuse code is not nearly as important as the ability to replace code.
Has anyone seen documentation for the new .on() .off() calls? All I've seen are $('div').on(events, selector, data, callback); and that's the same one posted here.
While I don't think I ever actually finished it (I never seem to finish programming books), I found The Good Parts to be very easy to get into. Granted, I had some experience with JS before reading it, but that was mostly just jQuery so I felt like I didn't really know JS at all. It was really easy to read and kept everything at levels I could understand, so I'd definitely suggest giving it a shot.
Jeremy Keith's DOM Scripting always comes highly recommended. 
I've heard a lot of praise about "Eloquent Javascript" (but I haven't read it myself yet). I think it's worth taking a look at. :)
wow this looks like a great book, up an running and no messing around!
I will check it out, but form what I read it is more of a how to program book. for a novice.
http://www.goodreads.com/list/user_vote/752756 The Definitive Guide and The Good Parts are not mutually exclusive and don't contradict. The Definitive Guide is really the definitive guide, it covers all parts of JavaScript and the last 6th version is definitely must read for every js dev. In The Good Parts Douglas Crockford pointed out some "good" and "bad" parts of language, it's good to change your mind about language if you already "know" it, use it, and don't like it. 
The Good Parts is little bit dated and doesn't include ES5 features covered in The Def. Guide, 6th. Crockford's suggestions is also noted in the last Def. Guide. So I don't recommend reading only The Good Parts.
Be careful to differentiate between a memory leak and memory-hungry caching behavior. It might not be a leak; it might be a browser with an aggressive speed focus. Does it grow unbounded and indefinitely, or does it grow fast then stop? Having access to the code in question would help a lot. For example, you might have undefined behavior that's been there the whole time which you didn't know about (this is especially easy with old approaches to closure handling, or around setTimeout.)
http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf Generally speaking, a fundamental knowledge of the actual language cannot be beaten.
Thank you very much. This is what I ended up doing a few hours after posting and realizing (being new to this and a bit hungover) that I'd made the completely moronic mistake of forgetting the () on the end of the javascript function is entirely used for the purpose I was trying to recreate via PHP. I'll take my lashings now.
I'm reading through the HTML version of Eloquent Javascript. It's nice to have the examples in a ready-to-run format right in the browser. That in itself makes it a worthy addition to whatever other paper / electronic books you may be reading.
This is beautiful. I ended up using a different solution, but I can definitely see a use for this in the future so I saved it.
http://www.codecademy.com/#!/exercise/0
I love O'Reilly's Head First series. Lots of illustrations.
I don't think I like the new .on/.off it seems like it would add ambiguity, and be much harder to search for delegates vs regular events. It does at least seem to move us away from using .live at all though which is good. .live was awesome when it came out, but there is really never a reason to use it any more.
testValidateLoginFormWithEmptyUserName &amp;#3232;\_&amp;#3232; 
These are some Beautiful Web Based Timeline Using Javascript and CSS
I've used Simile's timeline before, but configuration for it is in a million places. I made it into a jQuery plug-in so everything can be configured via an options array, but I still have some work left to do on it since many elements in the timeline are image-based (like the event bubbles). 
I have also used Simile Timeline and I found it horrible to use. Configuration is a pain, it has a lot of bugs, is not actively maintained and the documentation is outdated. I have implemented Simile Timeline here: http://www.innl.nl/ Where can I find your jQuery plugin? 
May be you can find here http://plugins.jquery.com/
Behavior hasn't changed, it's just two new methods that combine the overlapping behaviours that bind(), live(), and delegate() offer. (These functions will still be usable.) See http://blog.jquery.com/2011/09/28/jquery-1-7-beta-1-released/#oldnew for the old and new way to bind events.
I bought this book in 2002 or something. Never went through it. It is garbage now? I finally have the time to go through it or has JavaScript not changed much since then?
I was more taken with part 4's [put-selector](http://www.sitepen.com/blog/2011/09/29/put-selector-css-selector-based-dom-element-creation-and-manipulation/) - pretty much [Zen Coding](http://code.google.com/p/zen-coding/) for JavaScript. Very nice.
I posted that a while back: http://www.reddit.com/r/javascript/comments/j5dg2/putselector/
I'll DM you when I'm done with it. I just started it a couple of weeks ago and I'm making it more generic whereas right now it's tailored to my project. 
Pro Javascript Design Patterns. The best book for anyone with an OOP background. http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X/ref=sr_1_2?ie=UTF8&amp;qid=1317353348&amp;sr=8-2
This shit is lame, learn to use prototypes. Code like this is more confusing than useful.
Newbie question: For someone just starting out with Javascript does this look promising? Or are there already well-established UT frameworks for JS that would be a better place to start? I'm a seasoned Java developer, so I'm already familiar with general UT/mocking concepts.
Sooooo, is events a string like bind? Is it as object? Array?
You don't happen to have any of the bugs documented, do you? I'm about to add it to a project and then saw the config stuff. If there is anything better out there, I'm all ears. 
I think it depends a lot on what you do and how you want to test. QUnit is fairly established amongst the jQuery peeps for instance. There are [plenty of other alternatives](https://github.com/bebraw/jswiki/wiki/Testing-frameworks) to pick from, though. Google's framework looks promising to me. It probably isn't a bad choice considering it has some serious muscle behind it. :)
This may not exactly answer your question, but I've found that it's usually best to just ignore any arguments you don't understand. As for this: var mapOptions = { zoom:4, center:startPos, mapTypeId: google.maps.MapTypeId.ROADMAP } It's just plain old JavaScript Object Notation, aka JSON, which doesn't require the keys to be wrapped in quotes: var somePoint = { x:1, y:2 }; is exactly the same as this: var somePoint = { 'x':1, 'y':2 }; Values are a different story. If they're not wrapped in quotes, JavaScript will try and parse them as variable names. So in the example you provided, **startPos** and **google.maps.MapTypeId.ROADMAP** need to be defined elsewhere, but "zoom", "center", and "mapTypeId" do not. HTH.
 "a string\n\n\nsomething else".replace("\n\n\n", ""); =&gt; "a stringsomething else"
Thanks, that's what I had too, guess something else is wrong in my code then.
Wait, does this replace every occurrence or just the first? EDIT: yay I got it working "a string\n\n\nsomething else".replace(/\n\n\n/g, "");
Is this spam?
Do you have any idea what you're talking about? It looks like you have no clue as to what Javascript is, you even seem to confuse it with Java.
You just copy-pasted your question from /r/java... JVM? Compiler? I think you should first start by learning the absolute essentials of a programming language, and only then start dreaming of making games with it.
&gt; Do you have any idea what you're talking about? No, he doesn't. Absolutely not. EDIT: He even explains to us what an IDE is: *Integrated develop**e**ment envi**or**ment*
javascript != java
This is based on the Web Inspector's `monitorEvents` method.
Maybe you could tell us a bit about what kind of games you want to do, and where do you want them to work? Do you want to make games such as Minecraft (Java), or games like solitaire on a website (Javascript)? If you tell this to us, we can help you in choosing which language you should use. 
This is cool, but not even close to cross browser. Seems to me, the power in replacing the web inspector's Monitor Events would be to use it in browsers lacking an inspector. What is the purpose/intent of this script?
Your comment looks like something a bot would post, it's pretty much just repeating the title of the post. I have no idea why such an inane comment would be upvoted.
Well I don't know this..Only Reddit know this...But whatever..I like the post and found it unique..and for my remembrance i bookmarked it as well as comment it same as in title..Nothing personal..:) Have a great day..
I wrote this for monitoring events in IE9's console. * Firebug has `Log Event` option * Web Inspector has `monitorEvents` IE 9's Developer Tools and Opera's Dragonfly lack this feature. This helps in debugging and understanding the flow of event. And it shouldn't be hard to make it cross-browser compatible. The initial version of the script used to log events in both 'capture' &amp; 'bubbling' phases, which none of the modern browser consoles provide.
Yes. Closures control scope. JavaScript lacks a "block level" scope (as found in python) but it has a "function level" scope. A closure is not an alias for JQuery's ready() function, as the parent commenter seems to suggest; closures are a feature of any language that considers functions a return type. (Besides JavaScript, Scheme and Erlang both allow functions as return types.) One common complaint about JavaScript (see: Crockford) is that it seems to require you to use globally-scoped variables. Closures make up for this seeming flaw by allowing a programmer to control where a variable exists. Often in JavaScript circles, this is referred to as the "module pattern". (http://ajaxian.com/archives/a-javascript-module-pattern) Here's an example of how to use a closure to control scope. var x = 1; (function() { var x = 10; })(); alert(x); // should display "1" Actually, neither of the examples you gave are examples of closures. A closure always comes in the form of an anonymous function calling itself, as in my example above. 
It definitely is a novice book. Very nicely done, though.
Ah! Yes, I see it now. Very good work!
If you working through the DOM: x = x.replace(/\n{3}/g, ""); This is because the DOM interpretation converts all occurrences of \r\n to \n and all remaining occurrences of \r to \n. For outside DOM interpretation, such as command line: The JavaScript standards say that a line break is designated as "\r\n", but you cannot merely replace on that because it does not account for the possibility of pollution of your source. You will have to test which character, \r or \n, is of higher priority in your string sample.
This is very helpful, yes. The project I'm on is a rather large beast, and this is one limb I didn't want hack myself.
Step 1. Learn the difference between Java and Javascript.
I like how it works *both* ways. You can put everything in the global namespace, put everything except some things that conflict with something else in the global namespace, or keep everything in the `Functional` namespace.
There are more of these [here](https://github.com/bebraw/jswiki/wiki/Functional-programming). I might be missing some, though.
Scenario: You might want to start AJAX calls before the document is finished loading, but you wouldn't want to try to modify the DOM until after the document is ready. So you'd do something like (and this is *pseudo-code*): $.ajax('http://my/data', 'GET', function (data) { // once DOM is ready $(function(){ $(data).appendTo('#place') }); }); &lt;/script&gt;&lt;/head&gt;
awesome collection of jQuery visual effect tutorials for web developers.
Underscore.js seems to get a lot of love on reddit: http://documentcloud.github.com/underscore/ I think I will be using Underscore soon to simplify some map/reduce style code.
Errr? You don't know much about coding do you? Or are you just trying to be a jerk? Tutorials explain the different things variables, if-statements, functions and such. But when you run into a problem with running a long script they offer no help debugging it.
Here's a great place to start: [http://www.codecademy.com/](http://www.codecademy.com/)
Are you actually implying that your number guessing game is some kind of long running script? I was not talking about your specific coding problem, I was responding to your "reasoning". Tutorials contain the information you'd need to learn how to write a proper if statement. Your assertion that you are running into some kind of special problem that wouldn't be helped by you reading more tutorials, or that you shouldn't find more sources other than your currently, apparently lacking sources just because you fixed your current problem, is ridiculous. But yeah, I know nothing about programming and I'm just being a jerk when I suggest that you find more tutorials and then make fun of you for saying you don't need any more help, when your greatest problem so far has been how to make a proper if statement.
You can also use parseInt(guess, 10) if you're expecting a base 10 integer number. Why do you put the || at the beginning of the next line?
I started using underscore.js a few weeks back, and have added it to every project I've touched since. At 4kb minified it's a no-brainer, since it has so many useful functions (including map, reduce, filter, chain, each, any etc). 
thanks 
thanks for explaining this
Too long, did not read. Don't give a fuck. Your to no help, Already gotten help. Your wasting both your time. I'm new to this and I'm learning new stuff everyday. Now fuck off.
Your grammar is pretty shitty, too.
Man, I hate when my UI gets stuck at red lights.
This library has been around for ages (which is great!). If you like it, I'd suggest looking at his other articles / libraries as well.
Haha yes english isn't my native language, YOU GOT ME! Your truly pathetic fucking troll.
You're a scholar and a gentleman.
a lib for functional, sorry, but i call BS, the functions have been available a long time through things like underscore. javascript is a functional language but everything is mutable. write a compiler which checks for immutability then "Functional" will make sense. 
crap. slow ass crap.
I would like to make your point a little more visible: javascript !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!===================== java Almost the only thing in common is that both have the letter j a v in the name
Arg, I thought this was using node.js code in the browser (to avoid the setup hassles of node.js for newbies, etc) Yes, node.js is here and has been for over two years. 
You may not have known this, but Functional *preceded* Underscore. IIRC, jashkenas lists Functional as one of his inspirations for Underscore. There are still some good reasons to look at Functional... It does many things that Underscore doesn’t. I’d classify Functional as an attempt to bring JS closer to the functional style of Haskell, while Underscore feels like it brings JS closer to Ruby.
One of the nice things about underscore, if the browser has native support, it will use the native method instead.
This is intended behaviour, and is to prevent scams like those on facebook where you're told to copy arbitrary javascript and execute it in your browser window -- usually resulting in hacked and stolen data. 
&gt; javascript: is not actually ignored - they're run, but in an "empty" context that doesn't have any of the usual DOM methods you would expect, so most common uses (e.g. javascript:alert(1)) just throw (and thus are effectively ignored). javascript:1+1 works fine, though. I read through the bug and, unless I missed it, there is no way to disable this behavior and make it go back to how it was in Firefox 5. A few people suggested that but I didn't see anyone saying that such a config option was added.
ah. Thanks.
thanks - although that's too bad, I thought it was convenient to do quick test on an existing page.
Realistically speaking, nothing of value was lost. Firebug's console is much nicer to use.
You could always open the console and type in whatever javascript you like. Or start up a node session.
What does this do to bookmarklets that interact with the page?
I know it was three days ago, but I just thought you might like an answer. Your code is actually equivalent to the closure method, calling the constructor results in the same exact object as the function in the original post would.
Those still work. Instapaper, Amazon Wishlist and a couple of custom bookmarklets have all worked in FF7 without any changes.
There's this flawed belief that decreasing usability somehow fixes stupid.
False. They are working to make sure those till work. In the comments, someone actually talked about a change braking bookmarklets as a regression.
When I want to manually interact with the DOM with one someone else's computer, having javascript: is invaluable. I hope they do go the route of IE9 and Chrome (by removing javascript: on paste only)
There's this flawed belief that tucking away expert features (that are very unsafe for normal users) is somehow stupid.
It's not tucked away. It's removed. To restore it, you have to install a third party addon which adds a lot more bloat than just using the address bar. Bookmarklets are unsafe. Unchecked extensions are unsafe. User selected SSL certs are unsafe for normal users. Perhaps we should remove them as well?
It's a joke...
There are a few sites like it, but I quite like http://www.jsconsole.com/
CTRL-SHIFT-K brings up the new Web Console that performs basically the same task.... also shows you all the HTTP requests. Pretty cool if you don't already have Firebug.
&gt; It's not tucked away. It's removed. To restore it, you have to install a third party addon which adds a lot more bloat than just using the address bar. Or you can just, you know, open the Web Console and type away in a real environment with autocompletion and everything.
&gt; When I want to manually interact with the DOM with one someone else's computer, having javascript: is invaluable. There's nothing you can do with it that you can do with the build-in Web Console, let alone the (also built-in) Scratchpad. And the Console has autocompletion, a memory and a searchbox.
Ah, I was just trying to work out why my bookmarklets were broken in Firefox. You now can't define variables / functions etc and configure them to run in future based on click events, for example. Thanks for asking this. I can now put it out of mind and continue to wonder why any sane person would use Firefox over Chrome.
Have you ever debugged IE6? No console, no nothing.
We're not talking about IE6 here. And modern IEs all have built-in developer tools. If you don't know your tools, you're the problem, not the tool.
Underscore is a great library, and does utilize functional programming, but it's not really good for learning how to use functional concepts nor is it really focused on it. It's a tool for manipulating sets of data which utilizes functional programming to do so. While describing Underscore and related libraries as Functional is technically accurate I don't think it captures the spirit of the description, or at the very least doesn't help teach/prescribe using functional programming to solve problems. It facilitates transformation of data sets. I note this because having extensively searched for libraries and literature specifically outlining how to think functionally/employ functional techniques in javasctipt, I've found actionasble information to be quite thin in the past. Efficacy of using a "functional programming library" like Underscore is quite influenced by the developer's ability to understand implement functional programming concepts. Without that then you're looking at a useful tool for handling dsta but at well below what it really enables. There's no responsibility on the part of any given library to teach people so I'm not trying to place blame or something like that. But it's just been striking to me how Underscore and similar are continually described in this context like it's a central feature, when the developer community at large is largely at a point where education is the limiting factor, and not library feature set or architecture.
According to the readme, it does not seem to handle pluralizations rules at all (rules, because different languages have very different "pluralization" behaviors, some of which hardly look like pluralization to an english speaker. For instance Polish has one form for singular, one form for counts of 2 to 4, one form for 5 to 21 units, and the latter two are repeated for 22-24,25-31; 32-34,35-41;...). I also think it should mandate named insertion always, positional is completely broken for i18n as there are languages which *will* swap around the components compared to english, sometimes even as you iterate over your integrals. Unless you use .Net/NewPython string interpolation e.g. `"foo {0} {1}"` (which can be optimized as `"foo {} {}`" if the insertion is in-order) instead of `"foo %s %s"`. Named is still much, much easier for localizers to use as they know roughly what they have their hands on without the requirement of extensive comments. keythamus, have you read http://www.codeproject.com/KB/locale/Deliver_SW_GlobalAudience.aspx yet?
Thanks! I actually made a test on that website, it has a /17 instead of /2. The way I presented was slower than the prototype method but (generally) faster than the closure method which was presented. So when I do end up doing this I believe I'll use my method; it provides actual privacy while adding a bit of speed to the other closure method.
built-in developer tools are part of IE8+. Still not as good as firebug, but better than nothing. Too bad we still have to support IE6 and IE7. If I had a choice, I would support no IE version at all, so much for "my tools".
Plus, there is Firebug, which is one of the best extensions ever.
That's factually wrong, and hence misleading, in response to a factual question in a factual thread. Downvoting seems entirely appropriate, TBH.
i care not about the age of the library, you misunderstand the gist of my argument.
Well, you actually made two arguments. One about Underscore being available for a long time, the other about JS not being purely functional and having the benefit of being provably so. I was speaking to the first of those points. Perhaps you’d care to elaborate on your point. It might be helpful if you could share something you’d like to accomplish that is painful to do with Javascript in its current form, and that libraries like Functional and Underscore don’t really help.
with noscript installed setting noscript.allowURLBarJS to true in about:config fixes it for me. (i think that was the change i did)
Bookmarklets seem to work though. You may try creating a bookmarklet something like this. javascript:(function(){eval(prompt('javascript:'))})(); As others have pointed out, using the JS console is probably better, but this might be useful. You can also get a bit crazier with this. javascript:(function(){eval((&lt;foo&gt;&lt;![CDATA[%s]]&gt;&lt;/foo&gt;).toString())})(); Edit the bookmark and enter "js" for the keyword. Now, in theory, in the URL bar you can directly type "js &lt;some code&gt;". I have tested this only in Firefox.
Be warned it is also a cause of a lot of memory issues people experience as well.
Or save it as a bookmark...
&gt; I hope they do go the route of IE9 and Chrome (by removing javascript: on paste only) They did, you can still use it through bookmarks
&gt; Thanks for asking this. You're welcome. &gt;why any sane person would use Firefox over Chrome two reasons: * this does not seem to be true anymore, but it used to be difficult to clean everything (cache, cookies etc...) from chrome. * google is good, google is really good, but I do feel like I'm turning into a googlellitt. I like the idea of a browser (sort of) independant from companies, OSes, etc... (yeah I know FF used to be heavily sponsored by google) edit: ok three reasons: firebug!
So, instead of one tool that works everywhere for the last decade, they are making everyone use a new tool that is different for each browser. I just don't like giving developers fewer tools, especially one this standard. 
Yes, so writing a standard test in all browsers now means kicking it off in a harder, non-standard way. 
Since nobody else seems to have answered it: they replaced that functionality with [this](http://blog.mozilla.com/devtools/2011/08/15/introducing-scratchpad/).
Probably because it's shitty code.
autocompletion is cool. But, not everything work. I opened a new tab, and typed" document.write("hello") and I get a security error. 
node session? &gt; and type in whatever javascript you like. no: http://www.reddit.com/r/javascript/comments/kx6id/why_does_javascript_no_longer_work_in_the_newer/c2o1eu3 
Thank you for your thoughtful contribution.
I get a security error on a simple document.write("hello").
[google return this](https://bugzilla.mozilla.org/show_bug.cgi?id=663406)
 var nextStr = text.replace(/(\r?\n){3}, "&lt;/p&gt;&lt;p&gt;"); 
You're welcome. Seriously, no one should do this anymore. Use good event-related code.
Is Firebug really superior in terms of usefulness over chrome's developer tools? I do a lot of javascript UI programming for web apps, and I don't know if it's just because I'm not used to it, but I find Chrome's system to be far nicer to use. But I probably haven't given Firefox a fair go, simply because I find it ugly. Is there any critical functionality that you can get in one but not in the other?
This is pretty awesome. I'd like to see smoothing but otherwise great!
Cool little toy. Not sure exactly how I'd use something like that (I don't do realtime canvas stuff yet) but interesting.
This is great, thanks.
Firebug is the only reason I open Firefox, however I must say Chrome's debugger is pretty solid and takes care of most of my needs. Personal web browsing is still Opera while Chrome is quickly becoming my development browser (formally Firefox).
What are the common things people use underscore to simplify?
I really liked Object-Oriented JavaScript by Stoyan Stefanov. In fact i still keep it near my computer. It takes a lot of time breaking down prototyping, inheritance and spends just enough time on the DOM. I think Stefanov is less opinionated and cranky then Crockford but a strong programmer and it is a well structured book. 
I did not know about [chrome's developer tools](http://code.google.com/chrome/devtools/) shift - ctrl - i Superficial comparison: it looks very similar to firebug, a bit better eye candy, but functionalities seem to be the same. 
Took me a while to realise it was changing the background.
[Slides from Dmitry Baranovskiy's presentation on 2.0 from JSConf EU](http://raphaeljs.com/jsconfeu/) He mentioned you may have to shift+click to get passed some slides cause he made it for himself during the presentation
I actually just used this twice last week after two separate designers gave me flat backgrounds with noise and the resulting background files were going to be very, very large.
Thanks everyone for the great suggestions. Just one more question. is there any book out there that uses chrome as the debugger and not firebug?
you are still missing what I say. I care not about these libraries, anything that they do I can fold into a loop faster since the stack will be smaller, although I have used underscore in the past and working with closure now i use goog.array (this is a separate conversation to underscore however since the compiler will fold my code into an optimal stack) a lot. The title is framed "a library for functional programming for javascript". what does this mean? that functions you expect to exist in other languages like map, reduce and flatten are there. so what. it enforces nothing and even more scarily it can make finding a bug even more difficult due to exotic nature of javascript mutability. The title is a misnomer on two levels for me 1) javascript is a functional language anyway, so functional javascript is per se and a library makes squat all difference. 2) if you mean like haskel or erlang, then still no since the violent mutability of javascript does not fit into that model. 
“Functional programming" is not the phrase you’re looking for. *Pure Functional Programming* describes what you’re after, and neither `Functional` nor `Underscore` will get you there. &gt; javascript is a functional language anyway, so functional javascript is per se and a library makes squat all difference. Now I’m seriously confused. If you say Javascript isa functional language, and you wake up one morning wanting to do some partial application, you either roll your own or use a library. If you wake up one morning and feel like writing some small point-free functions, you either roll your own or use a library. And so on. And so forth. Such things make squat all difference to the distinction between a pure functional language and a multi-paradigm language with functions as first-class entities. But they make a non-trivial difference to people who wish to program “in a functional style.” I do understand your position. I even agree with it. I just think it’s possible to appreciate what libraries like this offer and simultaneously appreciate that there is a vast gulf between programming in a functional style and pure functional programming.
I love Raph. I've been contemplating a minimal canvas fallback for some of its functions so on Android browsers it can still be somewhat functional.
I haven't used Node, but I love the idea of running JS on the server. If Node is the wrong way to do that, show me what the right way is.
I don't even use Node.js, nor do I ever intend to, but this article is an ad-hominem, self-deprecatory shit-spew. The author defending his viewpoint with gems such as "Yes, I know there's a closed form solution. Shouldn't you be in front of a mirror somewhere, figuring out how to introduce yourself to her?" show what an insecure, self-righteous bullying creep must've written this article. He goes on to describe the [Node.js developer's reasonable defense of his development model](https://plus.google.com/115094562986465477143/posts/Di6RwCNKCrf) as "butthurt" and "pansy." Meanwhile, OP's development experience is co-founding [a shopping website so boring that I mistook it for a domain name placeholder ad](http://milo.com). Don't get me wrong. I'm all for critiquing software, and I don't ever intend on using Node.js myself, but this article is obviously much more interested in attention-seeking, dramatic bullying than the advancement of any software design process. I don't think the software development community needs assholes like this guy.
Worth pointing out that there's a much more lively discussion on this over in /r/programming http://www.reddit.com/r/programming/comments/ky6uc/nodejs_is_cancer/
Nice work, whoever compiled the list.
Yeah, thx OP for pointing that out... ಠ_ಠ
look at some of the examples source and it might as well be klingon.
Trolling / link bait = good times.
&gt;I don't think the software development community needs assholes like this guy. Even if it did matter what you think, there'd still be no such thing as a software development community. He's just a dude voicing his opinion on an area of personal expertise; that makes him a member of the software dev community about as much as Glenn Greenwald's blogs against war make him a member of the international defense policy community. &gt;this article is an ad-hominem, self-deprecatory shit-spew *Abusive ad hominem (also called personal abuse or personal attacks) usually involves insulting or belittling one's opponent in order to attack his claim or invalidate his argument, but can also involve pointing out factual but apparent character flaws or actions that are irrelevant to the opponent's argument.* &gt;OP's development experience is co-founding a shopping website so boring that I mistook it for a domain name placeholder ad. Wait, whose comments were ad-hominem? Personally, I found the blogger's comments about The Unix Way to be helpful and put node.js and its utility in a broader context.
Meeee too. There arent a lot of frameworks out there for html5 based drawing for android. 
we are arguing a semantic point now, you understand where i come from and I you. we both agree with each other really, just phrasing differs and I still think the tile of the post is sensationalist and misses the point a bit. If you are using closures you are doing functional programming as well :)
I had the same problem with but with my bookmarklet http://code.google.com/p/clipr/ for some reason doesn't work in Safari 5.1 but all well in Firefox 7 for Mac.
This article makes a few good points, but every language has it's own tradeoffs. The solution for node.js is to offload cpu intensive work to its own processes/threads. You can do this using webworkers api implementations you can find in the list of modules for node.js or you can use it with a queuing solution and worker processes. Personally I'd use node.js for what it's good at, high concurrency i/o server (webserver, etc) and pass the high cpu work off to a consumer pool written in a language better at that task (lc, c++, java, etc)
jQuery can help with this problem. [Hope this helps](http://jsfiddle.net/uePuw/)
The source code make my eyes bleed. I'm actually amazed it works so well. A while ago I examined the sources of both Raphaël and jQuery SVG (which has much better structure and commenting) and this really made me realize the importance of good documentation and pleasing presentation.
Stuff something in the select's onchange which checks the select's value and assigns either a style or a classname to the other tag to get the effect you want. Here's a trivial example. &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt; &lt;select id="foo" onchange="document.getElementById('barLabel').style.display=(document.getElementById('foo').selectedIndex==1)?'block':'none';"&gt; &lt;option&gt;hide&lt;/option&gt; &lt;option&gt;show&lt;/option&gt; &lt;/select&gt; &lt;label style="display:none;" for="bar" id="barLabel"&gt;Hidden option: &lt;input type="checkbox" id="bar"&gt;&lt;/input&gt;&lt;/label&gt; &lt;/body&gt;&lt;/head&gt; Dictated but not read. - The Management
Rhino on Google App Engine.
NodeJS is great... ...for running my command line javascript utility programs. I will never, ever write another bat file in this lifetime.
This is a poorly written article with no real substance. Sure, node.js has it's problems, but I don't think the author actually understands the purpose of async and it's advantages. Compared to other technologies out there, it's the best we got. Until you can provide an alternative, bickering about little details is meaningless.
I don't see enough compelling deficiencies in CoffeeScript to warrant a fork, and this breaks syntax too far away from JavaScript. Also, I consider CoffeeScripts lack of explicit variable declarations to be genius.
At first I thought this was going to be some dumb div with a bunch of data-* attributes. But now that I look through it, I kinda like this. OP, are there any sites that you know if that are using this live right now? I'd love to see an implementation that isn't just a demo.
&gt; Performance over readability. &gt; Perl over Ruby. NOOOOOOOOOOOOOOOOOOOOOOOOO!
The author's name is [satyr](https://github.com/satyr). I'm sure that's just a coincidence.
From the side-by-side comparison table: x = not x (CoffeeScript) not = x (Coco) What's with this? Seems like a confusing special case, or is there a general pattern? Can I have arbitrary one arity function on the left side of the equation, like x = 5 negative = x # now x = -5
TIL OkCupid wrote their own open-source JS library.
 sub OOOO{my $OOO=shift;my $OO;foreach(1..$OOO){$OO.="\x4f"}return "\x4e" . $OO . "\x21";} my $OO=&amp;OOOO(25);print "$OO"; 
I haven't had a chance to have a long, hard look at it but Pebbles comes from the guys at http://www.memrise.com/ so I am assuming they're using it there.
The most significant difference at my company is iOS compatibility. If they use Flash they end up having to re-write and maintain an entirely separate iOS solution. If an HTML5 solution is deployed a single codebase can be used for both desktop and iOS compatibility (as well as a number of other mobile platforms and tablets). Additionally, there can be significant increases in responsiveness even for desktop users by using HTML5 even where Flash is otherwise an option. There can oftentimes also be bandwidth savings on the server side. Your point about DRM is valid and Flash is currently a top choice for DRM audio and video. However user interfaces, non-DRM audio and video, and animation simply don't need to be Flash anymore. It's not a matter of "arguments against Flash" it's more a matter of, "Why use Flash to begin with?" Short of protecting DRM content, it's becoming increasingly needless to use Flash for projects. http://engineering.slideshare.net/2011/09/slideshare-ditches-flash-for-html5/ Is a good article on the matter.
Do you want the options to be predetermined by being written into the javascript code or do you want them to be created dynamically through a separate source (like a database or config file) using ajax? In general, it's pretty simple to do with javascript, especially with jQuery.
My exact reaction.
passing around strings, I don't think so.
I lol'd
That method only allows for one state.
&gt;.. and is not done in the closure format &gt;return this what the actual fuck
&gt;R.js binds itself to window.R, or global.R on the server side. fucking why
further note, sick of JS libraries auto binding to a character in global namespace. &gt;jQuery -&gt; window.$ &gt;MooTools -&gt; window.$, window.Element, window.Class, and so on. &gt;Underscore.js -&gt; window._
lol.
I agree - coco seems a little crazy to me. satyr is a pretty big contributor to coffeescript though, so I'm sure his experimentation with coco is at least beneficial for his aid in solving problems in coffeescript.
They missed one key thing in the side-by-side comparison: the documentation. CoffeeScript has a brilliant front page - dives straight in, gives you clear examples of how to get started, and gives you an on-page panel where you can try out the language. And it has had this (pretty well) from day one. Coco has a very short readme, and a bunch of documentation that is almost all "this is how we differ from CoffeeScript". Had to dig quite a bit to even find an example of the JavaScript that is output. Seriously, guys, a major feature of CoffeeScript is that it has great doco and an easy learning curve. If you want to compete, you need to compete with that aspect, as well as on features.
&gt; Pebbles, by the folks from Memrise We've heavily modified and extended Pebbles at Memrise (Spencer Davis gets the credit here), but the idea and first implementation was all down to Joseph Perla!
Thanks for the clarification. The confusion came because yesterday I was looking at the memrise Repo and then when I went back to take a look today, I ended up back at Joseph's repo and decided that it was probably something people here would find interesting.
&gt; Additionally, there can be significant increases in responsiveness even for desktop users by using HTML5 even where Flash is otherwise an option. This is both true and false. For things like an image slider, and other stuff for which Flash is total overkill, you are correct. For many things, however, Flash utterly destroys HTML5/Javascript in terms of CPU usage and framerates... it's far more efficient. Slideshare is a great example of a company that can and should ditch Flash. Flash is made for rich media and rich interactivity - things that Slideshare does not truly fall under (at least not anymore, as the "bar" for what's considered rich media has been significantly raised)... Flash is becoming unnecessary for certain uses because of the advent of jQuery and improved Javascript engine speeds far more than "HTML5"... I won't argue that it's still used in places it doesn't belong. I will argue that it won't be replaced by HTML5 any time soon. iOS compatibility is great and all, but it's also the biggest thing that makes me laugh when I hear about why HTML5 is great. Any of the more "interesting" HTML5 stuff out there is completely and utterly unusable on my iPad - it's too slow.
Any chance to get the video?
Have you found any limitations with this implementation? 
Here it is: http://blip.tv/jsconf/jsconf2011-david-flanagan-5449688
what? By 'is not done in the closure format' I meant real privacy. Do you have a problem with returning 'this'?
That look really cool, I have to try it
It seems to work with Chrome, Firefox, and Opera. EDIT : You can view these slides on slideshare too. http://www.slideshare.net/LeaVerou/polyfilling-the-gaps
About the request caching, I think the article is missing the real power of it. If you have a response available in cache, display it as soon as possible and when you get the response from the server update the result. This is really great if most of the page you visit are navigation pages or are pages that the data doesn't change often. You don't always need to wait for a response of the server to display something.
Doesn't work for me in those browsers.
The HTML presentation is available here: http://leaverou.me/polyfilling-the-gaps/#cover
I read the dude's article. While I don't deny his demonstrations, I don't think tearing down a technology because it doesn't fit his use case is reasonable. If the guy has such a problem with technology not fitting his problems, he should help work on the solutions rather than write long eloquent bitchings.
problem solved ;)
This is excellent! I've been trying to find a way to capture the command key combos for OSX users and this works great so far.
Well he's basically upset that the Node project is trying to use an architecture other than the classic client/server CGI approach for web applications...
They're donating PhoneGap's code to Apache Software Foundation. 
For those unaware, this project was a response to this Node.js rant: http://teddziuba.com/2011/10/node-js-is-cancer.html
LOL, well played.
I don't think so. Pretty sure he's trolling. Clearly it's working.
ok but his rant was about what happens when a process is CPU bound, not fibonacci specifically
Wow I'm really glad it's getting such praise already!
I've read his article and I have no idea what you're trying to demonstrate here. What's the goal of this?
Thanks for the feedback and jquery reference. Definitely looks like something which could make my life easier when I go back and improve the code. I think their pink/blue color scheme is important for the event. I originally had the letter colors blue and a pink mouseover effect. My friend's group suggested random colors so I just created 6 different css classes which were randomly assigned to each '+'. My initial thought on each '+' was to have it be an object with various properties (I believe that's the right term). That way I could change certain aspects of each one, add/remove, etc. Maybe that is something I can add in later on. It would probably make changes pretty easy. I will definitely look into asking StackOverflow. I am still pretty new to JS so I am sure they could offer a lot of suggestions.
Yeah it amounted to "hey, your library doesn't handle the case of while(1){} therefore IT IS CANCER"
Why didn't you call it jQwerty??
Since the implementation of this does memoization and since it is doing thousands of requests with the same parameter, this is really just benchmarking Node's ability to do a hash lookup (for the memoization). This is certainly not interesting unless you are just interested in the low-level performance of Node. For comparison, I implemented a trivial Java servlet that does the same thing (calculates a Fibonacci number and caches the calculation ). Running it in Tomcat, it consistently runs in 1/3 the time of the Node version and scales just as well. import java.io.IOException; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet("/Fibo") public class Fibo extends HttpServlet { private static final long serialVersionUID = 1L; private static Map&lt;Integer,Long&gt; memo = new ConcurrentHashMap&lt;Integer,Long&gt;(); public static long fib(int n) { if (n &lt;= 1) return n; if (memo.containsKey(n)) return memo.get(n); Long fibo = fib(n-1) + fib(n-2); memo.put(n,fibo); return fibo; } protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { Integer count = Integer.parseInt(request.getParameter("count")); if (count != null) response.getWriter().print(fib(count)); } } 
A+
This guy misses the point entirely. Dziuba was complaining about how Node.js claims that every single operation is nonblocking, which is outright false. Sure, this can be solved by using multiple threads, and any sensible person would do this. It has absolutely nothing to do with Fibonacci or any CPU-intensive operation specifically.
lol! Rhino is the *worst* way to run JS on the server that I have yet to come across, although I'm sure there is even worse examples out there that I have yet to come across.
You completely missed the point. The point was that for something like calculating fibonacci sequences, node is just not suitable in general. Node makes sense for applications that are _mostly_ io bound and there are specific usecases where this can greatly help scale. Not _every_ problem though. 
Predetermined. It's a simple form made complicated by my noob-ness.
I'm still learning PHP so I can't really tell you if it's better to use it over JS or not but I can tell you that it's easy to do in JS especially if you use JQuery. Just make a drop down that trigger a function OnChange and pass in some value from the dropdown to determine which options show up. You can make the function insert the options into a div (though it may be prudent to empty the div before it appends the new code into the div). This is especially easy with JQuery. Another way to do this is have all the options on the screen in separate divs with different class values and make the JScript make different parts visible/invisible by changing the display type to or from hidden (or none). Or you can just add/remove classes that are tied to CSS like say if you have in your CSS file a class called .hidden and make the JScript/JQuery add/remove that class from different divs depending on what option you chose. You're going to need the OnChange event trigger, though.
No. I was responding to " the idea is that Node needs to make better use of the CPU power on a computer, since it rarely ever hits 50% CPU." I pointed out that the implementation used memoization, making the CPU usage almost irrelevant since what was being measured was the cost of method invocation and hash lookup. Additionally, I pointed out that for CPU bound work, Node actually *is* quite slow compared with a good runtime like the JVM.
hey node.js guys! \*please\* don't become as immature and melodramatic as the Ruby guys, we have enough of that shit already.
Use servercyde to connect to an amazon simpleDB then you cand keep it all in JavaScript and you wont need to change your hosting.
Thanks, I'll definitely look it up. See if it will work for my friend's project.
 cd coffee-script &amp;&amp; git log --grep=coco
You're probably concerned about performance. 99% of all my performance concerns on google app engine are related to reading from the datastore and writing to the response stream. Processing is about 1% of the time. Yes, Rhino is ridiculously slower than Nodejs, but the scalability of Google's app engine and the robust libraries of Java make this a viable choice for many applications. your 'lol' indicates that your probably a young dumbass, but i'll give you the benefit of the doubt anyways.
But that was sarcastic :S
Does Node.js really claim that every single operation is nonblocking? I don't remember seeing that in the documentation, but it's been a while.
Ted probably just got pissed off by a random "Hey, node.js solves ALL your scaling problems! It's soooo awesome and so much better than The Old Way" noob programmer or something.
Didn't want it to be confused with jQuery - because it has no dependencies on jQuery and it isn't a plugin for jQuery
&gt; Why do you put the || at the beginning of the next line? I do this because this is how I READ conditional statements out loud and subsequently this is how I process conditional logic (programming related or not) internally. Going about my life outside of programming, I don't think like this: IF my_dog_is_bugging_me AND it_is_near_feeding_time THEN ... Instead, in the real-world, I think like this: IF my_dog_is_bugging_me AND it_is_near_feeding_time THEN ... So I nest my logic in roughly the same manner. I feel it helps increase the readability of the code and aides comprehension of the logic it contains.
May I suggest *jazzerty* ?
Definitely.
Nothing happens for me in Chrome in the demo; my favicon in the browser stays the same. I don't get what I'm supposed to be seeing.
it actually changes the favicon in the tab, just enter a couple characters and click the button and you can see that the characters are now part of the favicon. Seems to work fine in my FF and Chrome.
I fully expect this to get downvoted to oblivion on /r/javascript.
a really subtle, um, something. not sure how it is useful except as an example of tab manipulation.
I'd love for google to implement this on gmail. I suppose I could write a userscript that does it... meh, too much work. :D
No, the problem is that some people assume that Node can be used for any application, but just like any project, you need to choose the best tool. Node works great for some applications, but not for others. If you are building something that needs to do any sort of heavy computation, don't use Node. Other kinds of applications are better suited for Node (like real-time games, which is what I am experimenting with Node for). Any language has its faults and strengths, so find the one that puts the strengths in favor of whatever you are building and use that.
That helped, but I'm trying to hide a div tag within a table. Maybe I shouldn't be doing that in the first place... Here's what I'm working with: http://jsfiddle.net/uePuw/4/ Should I be going about this a different way?
lol it doesn't even calculate fib properly :D
Ah, now I see it, I was not sure what was going on. It said "type in a label" and I'm sitting here thinking, "I don't know what your different favicons are labeled!" Why not include a screenshot to give a better idea of what it does?
I will love to see benchmarks on this nasty large chunk of code :D
Oy. Too many layers of trolling. My stack maxes out around a depth of 3.
*Perl over Ruby* D:
haha the feeling was too strong to actually read the comments and avoid posting the same :D but upboat for you good sir!
Gmail already has this. It's in the Lab.
Argh! The incantation has been uttered, this thread is now warded against downvotes. You win this time! 
Ha! Node.js posted some stupid stuff on github! Also, that one time, Node.js told me a joke about a rabbit, a priest and an imam, and it really wasn't funny. Wait, that doesn't make any sense. Node.js doesn't really do any of those things, it's just a pile of code. Me and this blogger are apparently gravely confused. Yes, yes, I understand the temptation to anthropomorphize a framework for fun and trollbaiting, as well as generalizing a few reactions into "The Node.js Community said this!" It would probably be more intellectually honest to look at the reaction (or lack thereof) of the people that are actually building Node.js or popular libraries for it. But that wouldn't be nearly as fun. Ted is a Master Troll, combining some basic facts with a large serving of inflammatory rhetoric, and making it difficult for enthusiasts to simply concede that, yes, Node.js isn't meant for CPU-heavy stuff, and that if that's really what you're building, you probably want something else. So enjoy the ride, but please don't get confused about how "Node.js", or "the community" is reacting to this drama. 
really cool.. 
if you write bigish apps check out the bolin book on closure and by default closure.
Currently going through it, so I will edit as I discover, but first it unescapes a string and evals it. That string evals as the following function: function RrRrRrRr(teaabb) { var tttmmm="";l=teaabb.length;www=hhhhffff=Math.round(l/2); if(l&lt;2*www) hhhhffff=hhhhffff-1; for(i=0;i&lt;hhhhffff;i++) tttmmm = tttmmm + teaabb.charAt(i)+ teaabb.charAt(i+hhhhffff); if(l&lt;2*www) tttmmm = tttmmm + teaabb.charAt(l-1); document.write(tttmmm); }; So, it makes the function `RrRrRrRr`, which seems to unescape it's argument and then write it to the document. Then it calls RrRrRrRr several times with different escaped strings. The first escaped string turns into this: [PasteBin](http://pastebin.com/c6TMpr1X), which seems to be browser detection and event listeners. If I had to guess, this code makes sure that the window is annoying (so to speak) and I believe that in lesser browsers this will keep the focus on this window/make it difficult to close. Also there is a little tidbit in the bottom the prevents the js from running if it detects that it is being run locally: if (document.URL.substring(0,4) == 'file'){ window.location = 'about:blank'; isOff=true } It calls RrRrRrRr a second time and inserts the following in the DOM: &lt;style media='print'&gt;body {display:none}&lt;/style&gt;&lt;link rel=stylesheet type='text/css' href='mt_null.css'&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt; &lt;title&gt;Facebook - Video: Mira a esta famosa desnuda en el yate&lt;/title&gt; The third call makes the following script, which simple picks a random website, phrase, description, and image from the arrays. [PasteBin](http://pastebin.com/qkskqiA2) The 4th call makes some css: [PasteBin](http://pastebin.com/UFCsXPdh). The 5th call makes two functions. One sets any attribute on document load, the other adds a click event listener to the document and manipulates an iFrame. [PasteBin](http://pastebin.com/exBHpxP2) The 6th call adds more html to the DOM: [PasteBin](http://pastebin.com/fS91SQyU). The next 4 add more html: [PasteBin](http://pastebin.com/fyjCY4Wh). The next (11th) call adds more Javascript. This Javascript adds functions that create a popup that fills the screen, and when the popup is closed, redirects the page to http:// descargagratis(dot)com(dot)es/redirige_jaa(dot)php. [PasteBin](http://pastebin.com/wKzf3uYV) The final call adds this html to the DOM: [PasteBin](http://pastebin.com/VC2Z8Yyw). Then this script is appended to the DOM: [PasteBin](http://pastebin.com/sfNZ8Xqp) (http://widgets.amung.us/a_pro.js) (This seems to be the official whos.amung.us js API, so no problems here).
Kudos for the quick answer. No cookies/session hijacking present? so far seems to be spamming ?
Alright, done with it. Basically it seems to have a bunch of iFrames that point to facebook like urls and it spams the user, as you said, but there is no cookies/session hacking as far as I see.
Based off of the code and your screenshot, it forces/tricks users into clicking within an iFrame which shows a facebook like page / plugin.
You have a compiler in that head. Thank you.
Np :D
Man, what did node.js to piss everyone off this week? Did it get way too overexposed at some point and this is the backlash?
Circle circle dot dovascript. 
http://www.reddit.com/r/blackhat/comments/l1cuh/facebook_security101_xscf_proof_of_concept/
&gt; Flash is becoming unnecessary for certain uses because of the advent of jQuery and improved Javascript engine speeds far more than "HTML5" Agreed. I'm using the term "HTML5" colloqually to refer to a combination of technologies sometimes *including* HTML5 but also JavaScript/CSS techniques that were either to slow before the recent JavaScript engines or too complex before the recent JavaScript frameworks (such as jQuery, Moo Tools, etc...) &gt;I won't argue that it's still used in places it doesn't belong. I will argue that it won't be replaced by HTML5 any time soon. Yeah I don't mean to imply that in 100% of instances where Flash is used it will be replaced in the near future. I just mean to imply in a great majority of the instances where Flash is used today it is completely needless. _That is not to say there aren't *any* instances where Flash is still necessary_. But in the extremely near future, and as we speak its days are ending for rich interactive interfaces, multimedia where DRM is not a needed, most animations, etc... &gt;but it's also the biggest thing that makes me laugh when I hear about why HTML5 is great. Any of the more "interesting" HTML5 stuff out there is completely and utterly unusable on my iPad - it's too slow. What can be a pitfall with HTML5 is there are so many ways to skin the cat. The vast majority of instances where Flash is used today for animation, interfaces, etc... it is completely unnecessary and can run in "HTML5" with great framerates on an iPad. However if, for example, you do not invoke hardware acceleration the most basic animations would just be too slow on an iPad. If you do take advantage of css3 3d transforms to invoke hardware acceleration the interaction typically runs smooth as butter. **tl;dr**: When people say Flash is dying they don't literally mean 100% of **all** instances, just such a large percentage that it will not enjoy *much* relevance any longer. Tablet content needs to be optimized or it will be slow.
we agree on a lot, but there's a key thing that's missing from the discussion: like it or not, getting HTML5 stuff to work the same across multiple browsers is still exceedingly challenging if not impossible. If you're willing to neglect IE&lt;9 and "gracefully degrade", then fine... but I've worked for a number of web firms who work with medium to large businesses -- and they're not willing to sacrifice that. Flash, especially now with the release of 11, continues to be the best way to make complicated things work the same across all browsers. Don't get me wrong, I realize this opens up a whole can of worms about past performance on OSX, etc etc... but that is mostly laid to rest with Flash 11. Furthermore, since Flash's IDE is lightyears beyond that of any HTML IDE out there, it's still going to be the most cost effective way to accomplish a lot of things -- even moreso now that you can publish AIR content as native apps on iOS and Android. Flash isn't going away anywhere near as much as people seem to be pontificating.. I just think its use will be more focused based on purpose... In the meantime, all of the zealots who are just parroting Steve Jobs about how they want Flash "dead" are in for a rude awakening when they find their CPUs chugging and browsers crashing from poorly made HTML5 banner ads...
&gt; like it or not, getting HTML5 stuff to work the same across multiple browsers is still exceedingly challenging if not impossible. If you're willing to neglect IE&lt;9 and "gracefully degrade", then fine... but I've worked for a number of web firms who work with medium to large businesses -- and they're not willing to sacrifice that. I work for a web firm now and develop web apps and sites for Fortune 500 companies. I'm aware of the challenges however I used to hear that same false choice presented at a lot of meetings. In the case of Flash developers I think it was intentional job security FUD, but some people I think are genuinely unaware of how far pollyfills and shims have come. You don't sacrifice IE9&lt; and you don't "gracefully degrade" You use what I like to call "fallforwards". They come in the form of various JavaScript libraries which enable you to enjoy the same functionality from a single unified code base for IE6+, iPad, Firefox, etc... Take for example a rich, interactive diagram. If you use [RachaelJS](http://raphaeljs.com/analytics.html) your single code base will work with older browsers by taking advantage of long forgotten about VML for IE6-IE8 but using HTML5 SVG for all other platforms. The framework abstracts these issues away from you. Say you want to take advantage of newer CSS3 techniques. If you use [css3pie](http://css3pie.com/) it will add in CSS3 support to IE6+ for a number of CSS3 properties. Again by using an encapsulated chunk of JavaScript to automagically translate your CSS3 properties to their respective VML for old versions of IE. So it is just an unfortunate myth that you can't use HTML5 or CSS3 and still support IE6+ and a doubly unfortunate myth that you would have to resort to "degrading" content. &gt; Furthermore, since Flash's IDE is lightyears beyond that of any HTML IDE out there, it's still going to be the most cost effective way to accomplish a lot of things I will agree with you there. One of the few things Flash has going for it anymore is a great authoring tool. That's the point of the original article. That being said, with the advances in JavaScript frameworks it's debatable that Flash is most cost effective. It takes such little code nowadays after tossing in jQuery or RachaelJS I can often covert a mockup into a working site on par with and in some cases faster than Flash developers can with GUI Flash authoring tools. &gt; Flash isn't going away anywhere near as much as people seem to be pontificating.. I just think its use will be more focused based on purpose I think we agree on this point I just think that focused based purpose is going to be laser focused to the point of being a not often used niche solution for edge cases or specialty markets that require DRM for multimedia.
even those solutions have their drawbacks... I love things like RaphaelJS and jQuery, etc... I advocate their use whenever possible. However, for anything beyond "relatively simple", these tools aren't enough. css3pie, for example, uses computational hacks that become exceedingly CPU intensive on IE6 when used "heavily"... they also don't really render the same at all. Now I'm not one of those "it must look pixel-alike in all browsers" people.. but often IE6's CSS3-hacked means of doing something like a dropshadow looks unacceptably crappy. For an interactive chart - sure, RaphaelJS may be ok, even with IE6's godawfully slow / horrible javascript engine... and in that case, use it for sure! Those solutions can only take you so far, however... Flash is going to outperform Javascript/massiveIEhackDuctTape much of the time... Right now, Flash also outperforms HTML5 a great deal of the time. Meanwhile: you don't need to run a browser that supports WebGL to benefit from Flash's Molehill 3d API acceleration, etc... I love both sets of technology, and both have their pitfalls and advantages... but I don't always consider the hesitance to use those libraries a result of laziness or FUD or a lack of awareness. Sometimes it's because there are legitimate reasons that they cannot and will not ever be sufficient in terms of performance and/or render quality.
I definitely agree the solutions have their drawbacks and are not perfect. However they work well as fallforwards for legacy systems. &gt; IE6's CSS3-hacked means of doing something like a dropshadow looks unacceptably crappy Actually the dropshadow for non-text elements looks fine. I am pretty obsessive about pixel perfect consistency and often find little to no difference. The IE6 text shadow workaround is terrible looking but css3pie doesn't implement that at all. &gt; Those solutions can only take you so far, however... Flash is going to outperform Javascript/massiveIEhackDuctTape much of the time I'm certain Flash would outperform pollyfills for legacy systems most of the time. That's what's great about these JavaScript libraries taking advantage of native HTML5/CSS3 features where available. For non-legacy systems Flash can often not even keep up with the native features. You also need to pick your devil in these circumstances. 1) Write something once, that requires no plugins, outperforms Flash in IE9+ and all other browsers, has inherent iOS compatibility, but has less than Flash performance for IE8 and below some of the time 2) Write something once, but in Flash so it will require a plugin and have no iOS compatibility 3) Write and maintain two different implementations (HTML5 for iOS and Flash for other) Given what a big push iOS, specifically iPad compatibility is becoming solution 1 is increasingly seen as the best option. &gt; Right now, Flash also outperforms HTML5 a great deal of the time. Meanwhile: you don't need to run a browser that supports WebGL to benefit from Flash's Molehill 3d API acceleration Flash outperforms HTML5 in some gaming applications and select intensive animations. However for rich user interfaces and interactions Flash is often slower. You take a look at sites like Pandora dropping Flash for their UI and reservering it only for audio DRM. Same with Grooveshark. They both cited increases in performance by dropping Flash in favor of HTML5. &gt; *The redesign embraces that simplicity, making the site cleaner, easier to read and navigate, and much faster. That last bit is thanks to the decision to swap Flash for HTML5, which really does shed precious seconds, as promised.* http://www.engadget.com/2011/07/16/pandora-radios-html5-redesign-hands-on/ I should also mention 3d transforms are not WebGL. Firefox 4+, IE9+, Chrome 1+, and Safari 3+ all hardware accelerate a number of CSS and HTML5 elements and animations by default. And really on the desktop side, even IE8&lt; w/ pollyfills you're typically working with a level of CPU power that most every UI, animation, and non-DRM multimedia on the web today would perform just fine without Flash. The 3d transforms are a CSS3 (non-WebGL) technique to trick the iPad into hardware accelerating in circumstances where it wouldn't do so by default. This can oftentimes be as simple as adding: -webkit-transform: translate3d(0, 0, 0); To whatever element you want the iPad to hardware accelerate (again, mostly a non-issue for desktops). I just mention it because that one line missing from an animation or interaction could cause the framerate to be unusably slow on iPads which could lead to the false impression that the iPad simply can't handle HTML5 animations or interactions.
Holy fucktarts, that's sweet!
What? "Instead of wasting server resources and bandwidth [...]"? Doesn't this waste _more_ bandwidth by having you deliver the files unzipped to the user?
Kind of. Gmail labs link to static favicons - Notificons are generated client-side, are dynamically configurable and are supported to the same extent as the gmail ones.
Thanks for the suggestion. I will when I get some time :)
I guess it's aimed for JS webapps. For instance, generating images and data, or whatnot, on the client side, then delivering them all in one single "download" to the user.
Huh? Don't most browsers and servers support gzip with http now?
They only support server to browser, not browser to server. akx was saying that this would be useful on the client side to shorten upload time to a server. Also this might be useful with a Node.JS project.
I've been digging coffeescript and backbone, thx for sharing.
http://images.memegenerator.net/instances/400x/10431742.jpg
Here is my implementation of an equivalent library. http://gildas-lormeau.github.com/zip.js/ I rewrote inflate and deflate algorithm from Java implementation of zlib (instead of implementation from 1999 used in jszip). It uses workers, blobs and FileSystem API in order to scale without memory issues and support large files. I use it in some chrome extensions to implement import/export of user data. It's still a work in progress. Note: with this library, you can extract a file of a zip file delivered from an HTTP server without downloading all the zip file content.
&gt; Also this might be useful with a Node.JS project. Do you know that writing zip file is a CPU intensive work ?
You'd not want to block that node.js event loop now.
A solution in search of a problem. This class fills a much-needed gap. 
That looks great.
this is a big thank you for making a good enough argument that I actually looked at it (never heard about it before, relatively new to JS). it is so much more inlined with how I expect to work and it has been a pleasure everyday for the last 3 weeks since I started working with it full time. the bolin book was indispensable, well recommended again. 
What am I looking at here? A proposal for something that might become standard?
Yup that'd be useful with some server-&gt;mobile sites when you really want server-&gt;pc-&gt;mobile. Yes, I could use the mobile version of the site, but when you don't have a data plan, this is the cheapest alternative. I'm looking at you getjar. The hoops I had to jump through to get your files was a little rediculous.
Yes.
and this bothers you?
Presonally. I don't like that proposal. It's a little cryptic. I like the way prototype handles it: var a = new Element('a', { 'class': 'foo', href: '/foo.html' }).update("Next page"); To append directly we could do something like this ele.append(Element.create('a', { 'class': 'foo', href: '/foo.html' }).update("Next page"), Element.create('a', { 'class': 'foo', href: '/last.html' }).update("Last page")); Just my 2¢ 
I laughed.
What advantage do you feel BackboneJS gives you?
JSZip is cancer!
JSZip jumped over a shark... or something
coffeescript w/ backbone is so full of win! 
comment over on HN by the author: "The important difference I see in the approach used by backbone is it gets us away from having the server be in control of navigation and UI events. After the initial page load, I'm exchanging simple data as json with the server. It wasn't HTTP I was arguing with, it is having a server side framework managing the UI navigation. "
It feels strange using an Array as a linear representation of an element... not sure why.
It gives me a place for everything, with everything in it's place. It's just enough structure, takes care of a lot of boilerplate by providing restful json persistence, and I dig the event observing in views. It also was super easy to introduce to an existing jquery codebase. I didn't have to throw everything away and start over, could just refactor into it. Have not yet heard anyone jump into it and be sad.
I believe all the main library functions are non blocking. Nobody would claim that all code is non-blocking.
Remember that ZIP is the container format of OpenDocument and OOXML. So webapps could now offer Office-like interfaces in HTML5 and offer office file downloads clientside, and potentially offline (with html5 offline modes). You could combine it with something like [PilferPage](http://holloway.co.nz/pilferpage/) or [Docvert](http://docvert.org) to generate and process these documents.
Good points in this post, however Coffeescript is not an alternative to JavaScript, it just sits on top of it... Kind of like putting lipstick on a pig. I still think the most flexible solution would be for web browsers to include a bytecode VM so we could have compilers for many languages producing compatible code. Kind of the .NET CLR but without all the MS luggage. JavaScript could then be one among many supported languages and everyone would be happy. 
Hey /r/javascript, I've just finished this and wanted to get some feedback. I don't get to work with other developers much so any input is valuable. What do you think? It is interesting? Trivial? Please let me know. Source: https://github.com/lakmeer/exo-parallax
This is quite cool. I've done parallax with z-indexed layers before but just as a tech proof of concept. I've not worked with Paul Irish's animation code before, I'm not a canvas guy really (though I want to learn), so I really can't comment on the logic of the code in that regard, but otherwise it looks well structured and commented, so I think success is your wingman.
Awesome, thanks for your comment, I appreciate you looking into it :)
Tell me this isn't a serious proposal. The DOM methods are already overcomplicated; shouldn't we be moving the standard to something *simple* and *cohesive*? Or are we web developers basically screwed into always having an unpleasant DOM API?
This is nicely done :-) Good job
More like "Mind melded the whale". Remember what happened after ST:TVH? Yeah that's right TNG happened. NodeJS isn't the endgame, it's the plaftorm that will lead to it.
Your suggestion doesn't lead to a nested "element literal" you can shove around without extraneous tokens. Alternative would look like `{name:"div",content:"lalal" or [{name:..},{..}],attr:{...},events:{}}` which is pretty much equivalent to spelling out the function calls with correct positional arguments. Such use will get tiring to read pretty quick when nested. Proposal: ["form",{method:"POST",action:"#"},{"submit":function(){}}, ["input",{type:"text",name:"a"}], ["textarea",{name:"b"},"type here"] ] Which is, frankly, marginally better than typing out the HTML itself. They should fix E4X instead. 
Nice! ... but document.write()? For shame. :P
Did node kill Jobs?
then we'll need middleware to talk to the middleware, outerware to talk to the middleware, innerware to talk to the whoozitware. Browsers still support "legacy animated GIFs" with framerates under 50ms. You've really got nothing to worry about.
i also get the feeling that he is making things more complex than they need be with the framework agnostic approach. if your code is framework agnostic it will actively encourage people to load in other frameworks than what you are using, effectively fragmenting your code base even more, making it more of a maintenance pain. 
Well done, really like the water effect. So this is what happens when you sit a frontend developer next to an epic web comic artist~ I need to find myself a web comic artist.
We already have an "Element Literal". It's called HTML. Why would you want to complicate things further? What we need to simplify right now is dom manipulation.
future-proofing... lol.
it seems to me that the framework agnostic approach would be of a benefit to a larger organization (e.g. amazon, facebook) that might not get the close attention to specific site features over time that a smaller org (like a startup) might have. if you are a single developer working on a site, with intimate knowledge of the scripts it is running, you can manage it fine on your own. if you have tons of developers working on code and you need it all to be pretty independent, however, decoupling can save you the headache of reviewing every piece of code for large architecture changes. but, you would need to demand consistency, which would be a headache of its own. 
Thanks :)
Why is this odd? Makes complete sense, and is there in the spec too.
I have not really worked small projects in my life apart from the odd thing done at home. In large teams working on large codebases divergent styles, patterns and frameworks can only lead to a maintenance nightmare. People pulling in stuff from everywhere will lead to a bloated codebase in time I feel. 
I agree, that is why I suggest e4x should be fixed. Oh, sorry I forgot people can't read more than 140 chars.
I built the same demo in canvas a year or two ago ([here](http://www.humblesoftware.com/demos/trig)). This is a D3 remake so it uses SVG. Also, it is my first foray into D3.
Canvas one seems somewhat faster. What was the motivation to use D3/SVG?
I just pushed an update to bring the two demos more in sync (and should speed up D3 a bit). Canvas is indeed faster, though I'm sure neither are implemented optimally. My motivation was to start learning D3.
If you want to share snippets of code, a suggestion would be to use services like https://gist.github.com/ .
You might also want to end your onclick with return false; so it won't attempt to send the form anywhere. I would also do something like create an empty div and write your contents straight to that. The way it looks now is that you're just writing it to the end of the document and that could have unexpected results. Other comments. You don't var your comment or grade# variables. Your document open, write, and close are all on the same lines. (Hard to see in your paste.) This means that only the open is executed. The rest are commented out. (No document write.) My biggest suggestion to you is to format your code better. Start each new statement on a new line. Also, get some IDE that does syntax highlighting. The commented out lines showed up immediately once I copied it over.
I changed the gap total but Im not quite sure what you mean about the greet function. What could I have omitted?? 
or better, a pastebin-type service, like the one from piratebay guys for example: http://pastebay.com/
Actually using === is better.
Somehow it feels like you're cheating to use sin() to draw the curve again for each frame... ...I know, I know, it's correct...
&gt; Your rich UI is initialized by JavaScript &gt; You rely on JavaScript to render some of your HTML &gt; You optimize your site so that scripts run at the end of the page If you have a "pure JavaScript UI", first of all, I hate you, but also, putting your scripts at the end of the page isn't an optimization. Also, is anyone else getting sick of seeing "pure JavaScript" frameworks like this instead of well designed progressive-enhancement-based frameworks like JQuery Mobile?
…or better yet, for JavaScript at least, something runnable like http://jsfiddle.net/
FYI, it's in the works now. :D
Wow, you're right! I completely missed your reference to fixing E4X! Sorry about that.
No, that wasn't his point at all. It was that 'while(1){}' blocks all requests, until it eventually times out, while node.js gives the impression it is non-blocking.
Thanks everyone for all your help!!
I sincerely hope that "*headline from the front page of r/javascript* in *my preferred web technology or JS library*" isn't going to become the "no, *this* is" or "[FIXED]" of r/javascript. [The original](http://www.reddit.com/r/javascript/comments/l3hyo/the_first_thing_that_should_be_shown_in_any/) (at least, for this iteration of the meme) is still the first link on r/javascript, for heaven's sake.
Wouldn't have even known this was a reaction thread without you pointing it. Not sure if that makes it better or worse for me.
Indeed. Give me REST+progressive enhancement or give me death. If your UI and app doesn't degrade down to HTML and REST you aren't building a *web* app at all - you're building a javascript app that runs in a browser and is delivered via HTTP, but that's not the same thing at all.
 var nextStr = text.replace(/(\r?\n|\r){3}, "&lt;/p&gt;&lt;p&gt;"); "\r" is needed for mac's. Who do we have to shoot for these 3 line-end notations?
while the application of sin and cos (and their waves) is completely lost on me now, it seems like this kind of demonstration would've helped me understand when I was actually using this in high school and college. Granted, it would've been in the form of an 8mm film reel, not web based!
Holy shit - something clicked. could be that I learned it decades ago and forgot, but your first paragraph sunk in and it's like a light bulb went off in my brain. *we're not worthy, we're not worthy*
lol I actually started imagining the sound of an earth quake looking at that
I... ... finally understood the reason why the cosine function looks different than the sine. Thank you! 
could I make it a if else if statement instead of a switch?? my professor wants us to have a comment based on the calculated GPA. For example, If they had an A average, id want it to say way to go! When i tried to change it, it said this but disregarded all the other code. 
Don't help this person complete their assignments! Their "code so far" is just this code provided by a fellow redditor [here](http://www.reddit.com/r/javascript/comments/l3lv9/need_help_with_a_javascript/c2phyeb?context=2).
where it says "Your GPA is.... iI divided the gpa_total/3 and it gives me the correct answer but how do I get the calculation to connect with the comments??
gah okay okay i guess its just trial and error thanks for your help anyway :)
I'm fine if you make that choice for yourself, but please refrain from judging other developers when they make another choice. Progressive enhancement can only get you so far and some people like to build stuff that goes beyond it. It's unfortunate that you leave some users behind, but that's a choice we have to make for ourselves.
First: 82 slides? Seriously? Second: no, people will not be swapping frameworks. People did not start with DCE, then swap "frameworks" to CORBA, then move the app to J2EE, then move the same app to Spring. Apps are not going to be portable across frameworks, and any effort to imagine "what it might be like" if we constructed our apps to be framework-agnostic, is a waste of good engineering time. There is ZERO PAYOFF for making apps portable across frameworks. Pick a framework you like, embrace it, use it, write the app. The end. 
&gt; you can extract a file of a zip file delivered from an HTTP server without downloading all the zip file content. cool feature. It would be good to get some real-world benchmarks of that. What are the real-wold tradeoffs between, on the one hand, keeping a static zip on the server and decompressing in the browser, and on the other hand, using dynamic gzip on the server and browser. Disk space is mostly free, the thing I think we care about is latency. If I'm downloading a large document or xml file, what are the implications. I would think it would *mostly* be better to let the platform do the gzipping. But this may not apply in some lighter weight JS engines. I don't know any that don't do gzip, but I'm sure there are some. 
In the case where an app wants to extract *just-one-file* out of an archive, I guess what you do is use the HTTP Range header to request just the right slice of bytes out of the zip file from the server. But to know which slice you need, you will need to get the zip directory. How do you do that? The problem is the zip directory is of unknown size. In a normal filesystem-based zip library, you might seek to the end of the zip, then seek back N bytes, look for the central directory signature. If found, you can read the directory. If not found, you need to seek back "a little more", and look again. Until you find the signature. I'd guess this approach would be pretty slow with a remote zip file, considering each "seek" would entail a new HTTP GET. Or is that not a concern, in practice?
That and SOH CAH TOA SOH CAH TOA SOH CAH TOA SOH CAH TOA ... Hint for downmodders: Sine = Opposite / Hypotnuse ...
You're right, this feature is available only if the HTTP server accepts to serve the zip file with HTTP Range header. Actually, reading the directory is done in 3 HTTP requests. 1 - The first request is a "HEAD" HTTP request : it allows to know the file size and look if the server sends "Accept-Ranges" header 2 - The second request asks for the last 22 bytes of the file. At the 16th offset there is the offset of start of central directory (4 bytes). 3 - The third request asks for the entire directory content
I think the latency leading to the gzip process is negligible compared to the one leading to the unzip process on the the client with JavaScript. For example I tried to unzip a zip file stored in a zip file. It took approximately 45 seconds to unzip the 110 MB of data. With 7zip, it took 3 seconds. The library builds the uncompressed Blob with BlobBuilder API. I guess it can be faster with a Uint8Array but it will still be quite slow compared to a native implementation (i.e. gzip).
re #2 - Ah, I see. I think it is possible to have random stuff appended to the end of a zip, in which case the assumption about 22 and 16 bytes would not hold. But mostly (regular zip files) that works simply. 
regarding the 110mb, that's a pretty large chunk of data. here's another js unzip, I haven't tested it on 100mb files. The smaller files work pretty well. http://cheeso.members.winisp.net/Unzip-Example.htm source code: http://cheeso.members.winisp.net/srcview.aspx?dir=js-unzip 
"The First Rule of Program Optimization: Don't do it. The Second Rule of Program Optimization (for experts only!): Don't do it yet." — Michael A. Jackson
Not that I want to be 'that guy', but those graphs are of -sin(t) and -cos(t): the entire diagram needs to be flipped in x and y. Other than that, nice.
I agree that it's really fast with small files but then the latency (on server or client side) is not a problem, neither the disk space (on server side). Thus, I think that browsers that don't support gzip don't have a good JS engine too (e.g. old SetTopBox browsers). So, I think this kind of library is mostly useful in HTML5 "offline applications" or browser extensions because they can potentially handle a lot of data (for example mails with attached files) : it's a simple way to implement import/export or optimize the disk space use since it's not free for this type of applications (i.e. alllowed space on filesystem may be restricted by the browser). PS : Your library is really fine. If I knew it existed, I think I didn't have written mine from scratch :p
It's not the original actually. I posted a canvas version (just canvas and JS, no framework / library) about 18 months ago. And that was in response to a GIF that was posted before that. Honestly though, I think having the same thing implemented in multiple ways is an incredible tool for learning in the case JavaScript. That side-by-side kinda thing is sort of a Rosetta stone for the different technologies.
Yes, it's not standard. Actually I wrote the HTTP reader in order to verify that buffered reading worked with another source than a File but I don't use it.
Oh definitely. I'd just rather see a genuine side-by-side comparison posted as a single story on reddit than half a dozen substantially identical implementations in various languages cropping up as different headlines over the course of a week or more.
Mmmm, I agree with that.
You can't see the code for the Meetup.com API around 15 minutes or so. I was pretty interested in the topic, but being unable to see the code hinders learning, at least for me.
While a slew of the points are spot on, I really despise programming blogs like this. They're arrogant, and serve only to hurt the sense of community that developers rely on. No one is infallible. No one starts writing code worthy of framing. The only things that make us better are practice (slowly) and learning from others (quickly). This blog doesn't show better ways to write the horrible code examples; instead, it just mocks poor programmers. That's not useful, it's just destructive, and makes this useless for anything other than some asshole schadenfreude. 
"Orientated"? that's new!
Any newbies please disregard this presentation (or really, everyone just disregard it). It's full of vague/misleading definitions and code that is just plain broken. For example, she does something like this *multiple* times: var foo = new Object(); foo = { some : "value", fizz : "buzz" } The call to new Object() is completely pointless because she just completely **overwrites** the new object in the next line...just assign the object literal to foo when you create it: var foo = { some : "value", fizz : "buzz" } Another piece of broken code, she does something like: var name = { first: "Bilbo" last: "Baggins" fullName: getFullName( this.first, this.last ) } This **will not work** because "this" is based on the *function you are currently lexically "inside" of when you dereference it*....not the "current object". In this case, "this" would refer to the global scope and **not** the "name" object. If this object literal was inside a function, it would be bound to whatever the context of the function was when it was called. These are just a couple of the things that are wrong in the presentation, hopefully you get the idea.
It's very slow on IE9.
Not to mention, you don't need a collection of bad JavaScript in one spot, it's all over the fucking internet already. Although, to play devil's advocate, most of the time you submit code like this, it's either code *you* wrote that you wrote that you think is hilariously bad, or you're at a job where the last jackass before you wrote awful JavaScript and you're all like, "omg double yew tee eff m8" Can definitely see your point, though.
Please don't use this on your site, it's horribly annoying.
*Flash*back to the year 2000
Is really sad that there is people making this kind of presentations based on a flawed understanding of the language... :(
As someone who's still learning a lot of javascript, that's definitely how I feel. I know well enough not to do a majority of the things on there.. but there were a couple where I would have liked to see the "best practice" way of approaching the issue. I certainly don't feel like I could ask the people involved with that blog for a solution
Are you from the past?
I'm sure it means something that the first thing I noticed was the gratuitous cat in his blog sub-head. Probably, in fact, means I'm an asshole. But after that I noticed that it didn't actually explain very well. The JS examples are only subtly different, and he doesn't really call out why the difference is meaningful. The star-and-arrow definitions were unhelpfully cryptic (no definition of either operator!), and there's no formal definition of currying to contrast with the one given for partial application. Oh well.
Windows users are pretty much SOL using this, it seems like only a pure native linux environment will compile and build with no problems whatsoever.
Apprently I've assumed much from the reader; the blame would be mine of course, because this post was writen in mind for the presentation I am about to do for my coworkers in regards to functional programming in javascript. Thanks for the input. I'll update the post to include the formal definition of currying. edit: The listed definitions are mathematical definitions of function http://en.wikipedia.org/wiki/Function_%28mathematics%29
If you're explaining the difference between two things (esp two very easy-to-confuse things like currying and papplication), I think you need to assume that the reader doesn't have a crisp definition of either or both of the things. If they did have such crisp definitions internalized Mostly I've found when educating people on the difference between two close-by things, I need to explicitly contrast with *only* the elements under comparison different. So maybe use 3 parameters for each "base" function to demonstrate that currying composes via function invocation, for example. I admit that when I see currying I expect to see a transformation of f(1,2,3) to fcurried(1)(2)(3) somewhere, since it's the conversion to single-parameter functional form that's key to currying.
Yeah, definitely. A function with three parameters, I think might have "clicked" easier for users; although I wanted to keep it on the same example with it's formal definition. Might repolishit for that (or write a complementary post) for that approach. Thanks, would upvote again :)
So would a worker thread for example take advantage of this?
You have a local variable with the same name as the function argument. Rename one of them.
How do you expect it to know which source you are referring to if you have 2 variables named source, in the first version?
 function disp(source) { var sourcegif = source + ".gif"; var source = new Image(); source.src = sourcegif; source.onload = function() {ctx.drawImage(source, 100, 360);} } does this address that problem?
hmm.. i see that that is a problem, but if i change one, then it defeats what i'm trying to do. The other side reads: disp(actualsource); and I want that to load the actualsource.gif file. 
I was wondering the same thing. It's not clear from the article. I wonder if something like this would give a real world advantage to Node.js?
Does the code work?
I tried but it didn't work. function disp(source) { var img = new Image(); img.src = 'actualsource' + '.gif'; img.onload = function() { ctx.drawImage(img, 100, 360); } } that works, but when i replace img.src = 'actualsource' + '.gif'; with img.src = source + '.gif'; it doesn't work.
What are you passing as the argument and what outputs if you put `console.log(source);` as the first line of the function? (Look at the Javascript console in whatever debugging tool you're using).
I almost wonder how many times in how many threads people will tell him how to fix this before he starts listening.
sorry man, its only posted twice. because i posted it in one, then realized maybe it wasn't the best place to post it. As for being corrected several times and still not getting it, I'm sorry for that as well. I've tried several of the corrections but i still can't get it to work, but i could easily be doing something wrong. What should I do about the double post thing? Should I delete one or link to one or what? And if I delete one, which one should I delete? Thanks for helping, sorry about posting incorrectly and asking you to help fix my mistakes.
Have you defined the `ss_transitionType` and `ss_transitionSpeed` variables?
yes I have, they're in another setup.js file.
Have you tried messing around with all of the fit_* options? http://buildinternet.com/project/supersized/docs.html#fit_always
Be sure not to miss the [project's github wiki](https://github.com/RiverTrail/RiverTrail/wiki); I have to say that the [web-based interactive shell](http://rivertrail.github.com/RiverTrail/interactive/) is a nice touch. Though I admit that I have mixed feelings about Intel seemingly going rogue by not working with web standards committees (at least I didn't find any mention of them), but on the other hand, it's hard to fault the leading chip manufacturer for attempting to innovate within your industry.
I know you're using a plugin that probably has an option for this, but if you were not, I would say that you can automatically fit images with CSS too, using something like `height: auto;`
That's a lot of fun : ) Well executed.
so much fun, so well done. The use of arpeggio voices works so well! I love it.
Thank you very much, you have taught me what the heck curry is and also a neat implementation in javascript. 
Best web app of 2011! haha
 [...] 'private say':function(i_can_call_this_as_i_want){ [...] } [...] kenta.say(); Maybe I missed something, but what's the point of defining "private" methods that are in fact public ?
Excellent, thanks! Bookmarked for my post-reddit reading :D
Hmm, I didn't understand that a "private" method is a public method that has access to a private object. It's quite misleading :p.
Wow that is awful. I mean, who single-quotes one string and double-quotes the next?
Yea, I also do recommend to check out the wiki. It's a lot clearer w/o the marketing bs. &gt;I have mixed feelings about Intel seemingly going rogue by not working with web standards committees Naaaaah. No need to worry, really. It's just a proof of concept at this point. It's completely experimental. It's just there to get the ball rolling. I.e. to gather some feedback (Brandon Eich likes it for example), to identify issues, and to figure out how much performance you can actually get in the real world. If it turns out well enough it will show up in ES6 (or maybe ES7).
I think it is a sort of an experiment for the intel. First of all, they want to see if it really has potential. I'm sure if it'll make noise, intel will produce more extensions for more browsers and will participate at standardization process.
That is not a private method, that is a method that uses privates, If you need to define private method you can do it appending the method to the private object like this: i_can_call_this_as_i_want.this_is_a_private_method = function(){}; If you do it in your initialize function, then all your methods that use the "private decorator" have access to that function.
This was why I learned Perl in '97. jQuery now masks all that crap for me so I can focus on the app (that kind of thing still exists, but in other areas of JS). Urghhh. The nightmares when IE4 dropped...
lol. I'm not there anymore, but I'm pretty sure it's my own "error" :)
As far as I know, jQuery does not support IE4 or Netscape 4. What that code is doing was standardized by the DOM.
&gt; What that code is doing was standardized by the DOM. Well, the reason the code is bad is not that it relies on a nonstandard DOM &gt;.&gt;
Just pass the function as the parameter, instead of the name of the function as string: function hello() { console.log('hello'); } function world() { console.log('world'); } setInterval(hello, 10000); setInterval(world, 20000); Alternatively, you can pass in an evaluable string: setInterval('hello()', 10000); setInterval('world()', 20000); 
Not using semi-colons... they were ahead of their time. :)
If you're coming from a PHP background, PHP functions are *not* like JavaScript functions. PHP functions are not variables, so you reference them by name as a string containing the name. JavaScript functions _are_ variables, so you reference them by name as a variable reference. You should therefore write `window.setInterval(world, 20000)`, and *not* `window.setInterval('world', 20000)`. As a rule of thumb, _never_ pass a string to `setInterval` or `setTimeout`.
Ahead? *\*cough\** I thought the current style was to **always** use semi-colons?
That's awesome. +1 for NodeJS
As someone who's just getting into Javascript, I can't tell which one of you is being sarcastic.
Please use semicolons.
I use colons - sorta..
Please use CoffeeScript
only after I get my lip ring and my fixie
For JS, use semicolons, as it avoids certain corner case bugs. But these days it's much more sexy to use languages which don't need them (Ruby, Python, Haskell, etc).
Coffeescript doesn't look anything like Javascript and as someone "who's just getting into Javascript", suggesting that is a terrible idea. He needs to learn Javascript properly.
Coffeescript compiles down to Javascript. &gt; He needs to learn Javascript properly. Sure, read the Good Parts by Crockford. By all means. Then realise that Javascript is a fucking awesome language with shitty syntax. 
Then read it again and realize it's an awesome language with syntax that, when used correctly, has the immeasurable power.
Developers are getting on with javascript fine and have been doing for years. I can't say I'm exactly wowed by Coffeescript to be honest. It just looks like a bunch of shortcuts rather than a structured language that has been thought about for more than half an hour. No, I'll stick with Javascript.
I'm just fucking with you man :)
The power of grayskull?
It's early! My "being fucked with" senses are still winding up!
I'm not sure where you got the idea I thought jQuery supported IE4 from. I'm saying IE4 is why I learned Perl, and jQuery is why I now program in Javascript again without fear. jQuery means you can can write one piece of code to mask browser differences - eg, the [difference in class selectors](http://www.impressivewebs.com/demo-files/get-attribute.html) When IE4 broke, all my web sites with Javascript broke and I had to "fix" them all to work with IE4 for free (try explaining to the customer that the default web browser that everyone was using is broken). I didn't want to be in that position again, so I moved all my calculations server side.
I use them due to peer pressure.
i remove the semicolons when i want to mess with my ruby friends, then apply them back when i want shit to work as it should. always wear a condo... err, semicolons.
You mean like...sexually?
This is true, and another best practice is not to use setInterval at all, especially at smaller timeouts. The reason is that if your callback takes too long to execute, the callbacks can queue up. I'd recommend this approach: (function worldInterval() { window.setTimeout(function () { world(); worldInterval(); }, 20000); })(); Unfortunately, that looks a little uglier.
Posted as a comment, but it's waiting for approval. This works great, until you want to tell if something is a (plain) object. You’ll discover that *everything* in JavaScript inherits from Object, so *everything* is one — and that’s often not what you need to know.
My code is _very_ sexy..
*roll*
There was no DOM back then. The only way to objectively improve this code would be to eliminate the eval.
Incorrect on many counts: 1. Early on there was no *standardized* DOM, but there was a DOM ("DOM" just means "document object model", it's a way of referring to elements on the page through scripting objects), it just differed between browsers. In fact, when the standard came out they called the standard DOM "DOM Level 1" and the legacy DOM, "DOM Level 0". 2. According to Wikipedia, [the standard came out in 1998](http://en.wikipedia.org/wiki/Document_Object_Model), so if this book came out in 1999 the standard *had* already been published. Of course even though some browsers supported some of the standard, you still needed to talk to IE through "document.all". 3. The code could be improved both by getting rid of the `eval` and referring to objects directly, *and* by not testing for the specific name of the browser through "appName". Code should always check for capabilities, i.e. "if document.all then assume IE" and decide what to do based on that.
I use the pattern: function next() { doWork(); setTimeout(next, 20000); } next(); or function next() { setTimeout(function () { doWork(); next(); }, 20000); } next(); depending on the need.
Yeah, this is a nicer way to put it than the self-executing function in my example.
Definitely having mixed feelings about this. More structured javascript is awesome, I just don't like some of the syntax decisions they made. 
The short hand functions are a little odd, I have to admit. On the whole I quite like it. Trying to checkout the build tools now and compile a `Hello, World!`.
[Best comment](http://twitter.com/jordansissel/status/123310669218054144) I found so far. Dart doesn't appeal to me at all - it's just trying to force different style of programming (a problem which I don't have with CoffeeScript).
I can write structured JavaScript just fine, thanks.
Was there a download link for the VM? I didn't see it.
Seems that from the page, even Google isn't eating this dogfood yet. If you can't get your own company behind it, why would anybody else want to invest time, money or energy into it?
There is just too much momentum behind Javascript for Dart to catch on. It's only a matter of time before Javascript is just as fast as Java or Dart. It's much harder to optimize Javascript but there are a lot more people working on it. e.g. Intel launched a multi processing library for Javascript that can speed up processing up to 8x. 
If it was this easy to replace Javascript why not just build Java or .net into the browser? Only Google will build Dart into Chrome. Maybe they can arm twist Mozilla into adopting it. But there is no way Microsoft or Apple will add it. In the best case Dart will be faster than native Javascript for half your users (Chrome and Firefox) and slower for the other half (IE and Safari). 
Did anyone else read that in a really slow retarded voice in their head?
Well most web developers spent most of their time processing sql, html, json, and xml. So far none of the example code shows any features that would make this any easier.
Source code is: https://code.google.com/p/dart/wiki/GettingTheSource?tm=4 
For lazy folks:: jordansissel tweeted "Dart, putting the Java back in Javascript"
I really, really think this comment is WAY off base. It's *allowing* you to go fairly deep into object oriented territory by way of primitives which are actually objects, and interfaces with factory methods etc. Dart does not however *force* these upon you. To me, coming from a C-based, then C++ background, this looks a lot like a streamlined C++ for web development. I've done enough Java to know the language fairly well, but nothing here is screaming out "Java" to me at all.
&gt; To me, coming from a C-based, then C++ background, this looks a lot like a streamlined C++ for web development. I think that's the whole point of Dart. It's aimed at people who come from a background similar to yours. But for me it looks like an overkill to have all that stuff just for user-side code - I never, ever thought "gee, I wish I had all these classes, inheritance and factories here". (and I'm not one of those jQuery-for-life developers ;-) ) 
While I agree about the momentum, the TC39 committee on Javascript has been anything but fast on ratifying new features and such for Javascript. I like writing Javascript now, but no one can deny there are certain things missing that make it feel like it's just not where it needs to be if we're going to commit as hard as we are to web development. Dart is the response to this. If you read [this post](http://infrequently.org/2011/09/google-the-future-of-javascript/) by Alex Russell, you'll get a sense of what the guys at Google think Javascript should be. I agree with them 100%. If we're going to go balls deep into the web, we need Javascript to have more useful features, or we need a new language that will provide them.
Sounds like CoffeeScript for GWT. Since I think each of those alone is a bad idea putting them together leaves me with a feeling of angry death and isolation. I think I would rather my developers know how to write in a given language instead of pussy foot around it with a language to text code compiler. After all its not like JavaScript is that hard to learn.
&gt; It's allowing you to go fairly deep into object oriented territory by way of primitives which are actually objects, and interfaces with factory methods etc. All of these things, javascript already allows.
It *allows* them, but you have to write them yourself or find a library that's already done it.
Java JVM replacement? Also, isn't interfaces ready to be replaced by traits/mixins?
It is probably primarily aimed at improving library dependencies and large-scale development. For me personally, the Javascript language has never been an obstacle, but been very flexible . The worst aspects of web-developement has been (by far) layout with CSS and the DOM API. CSS for instance is too weak for designing graphical UIs, so I have to resort to Flash for that. The DOM API is too verbose and I've had to define my own simplified API to make it bearable. Dart doesn't change any of those inherent faults.
You think the voice you read it in was funny? Wait until you hear what I misread the text as!
For *pretty low* values of "have": &gt; primitives which are actually objects That's how javascript works. Primitives are automatically promoted to objects when used as such. That's how you can call methods on numbers or write `true.toString()`. &gt; and interfaces with factory methods Add a function to anything you want, bam got yourself a factory. Hell, javascript *constructor* are factories: if you don't like your `this`, you can just return something instead.
Huh? Can you explain? function FooFactory() { } FooFactory.prototype.create = function create() { return new Foo(); }; var factory = new FooFactory(); var foo = factory.create(); Just add whatever complexity you need on top of that. Of course, it's probably more JavaScript style to have a "factory function": function fooFactory() { return function create() { return new Foo(); }; } var factory = fooFactory(); var foo = factory();
I don't think Dart will seriously be adopted without browser support, mostly for **debugging**.
When I think "structured JavaScript", I immediately think of something that, syntactically, looks a bit like AS3. That's not what Dart is. I have no idea what the hell Dart is trying to be.
I wish it was only in a book that I saw code like this... _/me looks dejectedly at his IDE and cries._
Is this a logging lib or an error-handling lib, or both? How is this better than simple `console.log()` calls? Can it also handle the different console commands such as groups, profiling, sprintf() functionality, etc.? I would check myself, but both of the links on the linked page -- "API documentation" and "Examples" -- are 404's.
Another problem is that much of the highlighted code was valid/good at the time. A prime example would be: document.write("&lt;scr" + "ipt&gt;...."); I guess the author of that piece is probably &lt;25 yrs old or something, because in the "old days", IE would barf if you tried to simply doc.write a script tag. Of course it's easy to come along 10-15 yrs later and point fingers about how "bad", "ugly" or "wrong" it is, but the OP should do his research first so that he doesn't come across as a noob.
I would KILL and MAIM baby kittens if I could have Javascript with AS3 syntax. AS3's syntax is one thing Adobe did right.
I guess the developers at Google were having trouble writing structured JavaScript. Maybe you should shoot them off an email?
"(Links will only work if you clone the repo.)" Maybe you need to 'clone the repo' ;)
Now **that's silly**, and nah, I couldn't be bothered. If the author really wanted his code to get used, he'd make it easy to get to the docs. Just looks like a lame attempt to game the system by making the project artificially more popular than it should be.
You are correct.
My sincere condolences. No, really. *Ninja Edit*: And I hope the upvote helps!
The product isn't even remotely feature-complete. Therefore this judgement seems a bit premature.
You'd have to learn about html, the dom, and javascript.
can you coffeescripts please drop the 'beautiful' designation for your code? It's just as ugly as any programming language. Nothing about it makes it more beautiful than any other language. Calling it 'beautiful' makes you seem like a douchebag. 
Check out JQuery-UI calendar. That should be fine for your project. Just a side note, if it is a truly a pain to change the server side variable names, you may have bigger fish to fry.
You... You... You... you mean there's not a jquery plugin for it? Oh no!
I know I have bigger fish to fry, but the back-end code is tied to a DOS-based (yes, you read that right) online reservation system that if you breathe on it wrong, it blows up and dies. It's worked fine for years, and the folks who pay the bills aren't wanting to upgrade anytime soon (can't say that I blame them, as new software isn't cheap). I'm just trying to put a modern face on an old back-end, and am scared as hell about screwing up something if I mess too much with the search functionality. Yes, I know I have bigger fish to fry, but it was pulling teeth enough to get them to allow me to spend time on this redesign in the first place. &lt;/my-employer's-a-pain rant&gt; I'm assuming this is the [jQuery UI calendar](http://jqueryui.com/demos/datepicker/#date-range) you refer to? I see they have date-range functionality, just need to figure out how to get a difference in nights variable from that. And then I'm guessing I can use [Alt-field functionality](http://jqueryui.com/demos/datepicker/#alt-field) to get the data into the fields I want (make them hidden fields?)? Mostly just thinking out loud here :-)
Haha, very understandable. Unfortunate you have to jump through hoops to make it work correctly! Obviously we don't all have unlimited money to throw at 'perfect' solutions. Heres a couple quick things I found that may be able to help you: http://stackoverflow.com/questions/5142693/jquery-ui-datepicker-difference-in-days http://stackoverflow.com/questions/1263482/jquery-ui-datepicker-using-2-date-fields-trying-to-get-date-difference 
He's probably referring to the fact that inheritance doesn't work the way you'd expect if you come from, for example, a Java background. This [guide on emulating classical inheritance](http://www.crockford.com/javascript/inheritance.html) involves writing 4 sugar methods.
It really sounds like you should be studying harder, because the proper understanding of "this" is the least of your troubles with this assignment. In the odd chance you're just stymied by the "this" concept in javascript, I'll give you a little primer. "this" is a reference to the scope in which a particular piece of code is running. "this" could be a reference to a function, an HTML element, an object, the window, and probably some other things I'm forgetting. In the case of an event, such as your mouseover, "this" (without being bound otherwise), will be bound to the HTML element that was moused over. That means the "this" reference will be populated with all the methods and properties of that HTML element, say for instance, the .style collection. The style collection has a backgroundColor property that might be useful to you. Unfortunately, if you can't suss out where to go from there, you might actually want to take the F and accept it as a lesson in how to better apply yourself in your studies.
Google: "scope in javascript" First result: http://www.digital-web.com/articles/scope_in_javascript/
&gt;You can use the same Dart code in most modern web browsers (Chrome, Safari 5+, Firefox 4+) and on servers. Look for more browser support shortly. http://www.dartlang.org/
'this' simply refers to the object the function is executing in. I learn best by examples: http://jsfiddle.net/W2Fur/ 
I [posted a guide on the topic](http://www.reddit.com/r/javascript/comments/j2j8b/the_this_keyword_is_extremely_simple_and_doesnt/)
Ironically I was just reading this really good article about the elusive 'this' binding in javascript by A List Apart http://www.alistapart.com/articles/getoutbindingsituations I get the feeling they make it a little more complicated than they should though, because pulling a function out of an object and expecting it to maintain 'this' as a reference to the object is behavior I'd likely not expect.
I'll admit that JavaScript is feeling a bit past its expiration date, since it has to stay *completely* backwards compatible or apparently the web breaks. That said, this just feels like a Java wannabe with some compact extra syntax. Why not just build Scala into the browser at that point? We need something to replace JavaScript, but I don't think this is going to be it. Or maybe it'll catch on like Go did...
&lt;div id=thisDiv&gt; Hey-O! &lt;/div&gt; &lt;script&gt; document.getElementById('thisDiv').onclick=function(){ this.innerHTML='yo yo yo!'; this.style.border='10px solid red'; } &lt;/script&gt; What do you mean you don't use anonymous functions yet? 
someone make one so i can check it out
Honestly, I only really started to grasp the 'this' keyword after about a couple of weeks of banging my head against a wall. The biggest gotcha is that when you try to access 'this' inside a callback on an object, the 'this' you try to access won't be the object itself. Using bind is how you get around this. onclick = this.onClickCallback.bind(this); 
This.
['This' Dissected](http://kasia.drzyzga.pl/2011/05/this-dissected/) by Kasia Drzyzga. Read it and indulge it.
I wish I could upvote twice. For the comment and the username.
Yes it will run on most browsers but how fast? Cross compiling to javascript will probably result in a loss of performance compared to native javascript.
This is one of those things like pay-as-you-go mobile phones, that only spies/drug dealers/hackers will use to communicate. I can see Jason Bourne using it in the Bourne films.
Nice!
What's wrong with IRC? Set up a private channel and connect via SSL.
Javascript, Dart, and AS3 are all ECMAScript compliant, hence their syntax looks similar. 
What they have there is nothing more then a classic &lt;a&gt; with an href and some css :hover classes.
not to over complicate things but i would use raphael.js. create a xml file with cords for dots, and info for the boxes. then intreat using jQuery each() and find() .
Really? Versus a webpage where you say "Join XYZ chat as ABV"? I can't possibly see why this might be more convenient.
Really. You can do the same with IRC, there are plenty of web clients and some of them support secure connections.
Hah, okay, I laughed. But my guess is Dart is not a language for one liner applications, and the long term goal of google is to have the language supported natively.
Yea...thats basically what i thought when i saw that... 'ALL this crap for hello world? Seriously?!' I mean come on....32k minified for hello world?!
Judging by the Google Closure library, they know how to write structured javascript just fine. This project is just some Googlers pipe dream.
Funny, I use the same argument against CoffeeScript.
[In image form](http://www.quickmeme.com/meme/35645b/)
This is what you get when Javascript is your backend target.
Incorrect title. It should be "I don't always write Hello World in Dart, but when I do, the DART to JavaScript interpreter takes 17,259 lines". Basically, as it stands today, you can't run dart code in the browser without that file, have you seen the [coffeescript browser interpreter](http://jashkenas.github.com/coffee-script/extras/coffee-script.js)? Having a big js file to process custom code is just par for the course. So while it is amusing, it's incorrect to say that hello world takes 17,259. If you wanted to, you could have just compiled it from Dart to JavaScript server side and just uploaded the javascript output.
And your compiler does absolutely 0 optimization on the libraries it includes. 
Maybe I misunderstood your statement, but the difference is that coffeescript compiles to human readable, predictable javascript.
My recommendation is to keep up with the socket.io project. They seem like the most up to date with whats what in websockets.
Yes, and I'm sure dart can as well. But there are two ways of running coffeescript in a browser, compiling it to javascript and ONLY uploading hte resulting .js file. Or you can actually have coffeescript code in the html, but you need a runner to execute it in the browser. The coffeescript interpreter is such a runner, and the dart file posted above is very similar. The extra 17,259 lines aren't hello world, but the actual runner file needed to execute the dart code on the server. If you just wanted pure javascript you can compile dart server side an upload only the js file (similar to coffeescript).
 x = (x &lt; 10 ? '0' : '') + x;
Pretty much. They said they haven't included the VM for it in Chrome but that they plan to.
Hard to extend this to work for a padding of more than 2 digits. Another possibility: var num = 12; var digits = 4; Array(digits + 1 - String(num).length).join("0") + num; // 0012 
No, the constructor will return while the async call is active. You would have to pass a callback to your aspect constructor to execute once the ajax call has finished. Something like this might work: asp = new Aspect(msg, function() { if(asp.visible()) { ... } }); Though it looks to me that the code after new Aspect could be part of the constructor. If that's the case, a slight refactoring of putting that code in the success callback would make things work like you want.
I thought CoffeeScript was pointless, but now they've managed to make something equally pointless. Maybe all those Java-lovers out there are gonna fall head-over-heels for something like this, but I won't. My primary goal in any application is quick, efficient, and concise code. Should be clear now that Dart is not the way to achieve this. Java guys will love it, though. I know how much they love writing slow and inefficient applications. Exactly why JavaScript should do everything in it's power to NOT turn into Java. Worst possible scenario.
Hmm, thanks!
It's a developer's responsibility to keep up and not mindlessly reuse code, though. There are plenty of things we used to do in the "old days" that would be totally unacceptable now. Although I agree that this and using a type in a script tag are relatively harmless, we try to take a forward-reaching approach than past-reaching.
Can anybody explain to me why it's such a cardinal sin to use global variables? I'm aware of things like namespacing to reduce collisions, but if you namespace every variable ever you will probably also have collisions (although in your own code and not everyone else's.) Even so, that requires creating global objects. Even new constructors, and new objects from those constructors... kinda hard to avoid. What would be the best use case when I have some really simple utility that I just need to run once?
I don't know about 'simple' or 'example', but [see here](http://www.reddit.com/r/chrome/comments/ju8w2/i_made_a_chrome_extension_that_turns_every/) for a Chrome extension that uses websockets. You're probably having issues with the myriad implementations out there, seeing as the spec has been revised many times.
The point is that the OP was trashing the code examples from the book, but really, where's the value in that? It was valid for it's time. It would be as ridiculous as me criticizing old textbooks for naming Pluto as a planet. Stupid bad wrong textbooks!!!
I don't understand the downvotes, but whatever.... Anyone who says 32k for a hello world app isn't excessive has no idea what they are talking about....downvote away people....
What book? Where does it say it came from a textbook?
Sorry, I got this post [confused with another post along the same lines](http://www.reddit.com/r/javascript/comments/l63ky/opened_a_book_at_my_workplace_javascript_for_web/). Still, the code I mentioned above is probably still required for IE6. There's also the fact that seasoned [wise] engineers don't go changing code just because they don't like it. The pitfalls of refactoring perfectly-working code are outlined at length all over the net, so I won't go into that, but I still believe it's very pretentious to point at code that was most likely written a long time ago and play the "I would never write crap like that" card.
JavaScript is a very different beast than any other programming language, in that the platform changes with each evolution of a browser; you may never update your JRE, but your users are updating their clients. If you designed your code for IE6 and you have not refactored your JavaScript since, your code is dangerously out-of-date, period.
I'm not sure that 'this' will be the Aspect object, in the success callback.
It make more sense to have the 'interpreter' code site in a different file All of those "native_*_get" functions and everything else required to run should be separate, so it only has to be included once (and can be cached) rather than being part of every compiled app.
It is! I think because of 'context: this' ..
I agree with you completely. Hopefully this is just because it's an early developer preview. 
out-of-date != not working _If it ain't broke, don't "fix" it._ Do you work in a corporate world? If so you should understand the pain that comes with trying to convince the 'business side' to refactor a large set of code for no other reason that "it's old" or "it's bad"; unless you have some valid business-cases to justify your request, it'll never get approved, and for good reason: refactoring code just because you don't like it will net you a grand total of 0 increased revenue, whereas a single typo, missed use-case or edge-case, or plain oversight will cause your superfluous refactor to actually _cost_ you money. Do you know which kinds of businesses support these types of changes? The ones that are out-of-business.
Ah, you're right.
Came to say just that. Socket.io works like magic in most cases.
I will check them out in the morning. I'm hoping for a ~10 line implementation since I just need to support the newest Chrome as this stage of the project. I have a multi-host node.js backend that relay messages to each other as JSON over sockets btw. What I want now is to use Chromes JavaScript console to display real time messages from the backend instead of using a terminal as I'm doing right now.
Thanks. Yeah, the large number of implementations for different versions of the protocol (in blogs without date stamps! %#$@%#), often with a focus on fallback with Flash and AJAX-polling and behind a Comet-like abstraction layer or something absolutely overkill for what I want. A "Hello world" example.
I share your frustration with the lack of dates/times on blogs (or anywhere on the web). Nothing is more irritating than reading some "news", but without a single indication if it's from this decade or the last. You might try and reach out to the dev that wrote that extension, he's a redditor after all!
I thought this was the D.A.R.T register system that used aluminum paper. These were popular register systems in the 70s and 80s that used an Apple ][ system in the back to run. The O'Hare, Showbiz, and Chuck E Cheese restaurants were the last to use them up to the 90s.
Take a look sometime at what comes out of a hello world C program when you statically compile it - a 500k binary, which is analogous to what's happening here. 
would love to know why someone felt it necessary to downvote me
from [140byt.es](https://gist.github.com/1180489) function(a,b){return([1e15]+a).slice(-b)}
The difference with this is that even the server can't read your messages. They're encrypted client-side. The IRC sysadmins, on the other hand, can still read your chats even if you use SSL.
Downvoted for talking out of your ass. The syntax looks like Java, sure. So it leads to 'wordier' code perhaps. But slow and inefficient? I'd say no. And as YuleTideCamel said above, this isn't the code that would be deployed in production.
Hello World programs do not reflect the user case for Dart, and 32kb isn't that big any more. I have a website with 1.2mb of JS (uncompressed), and I'd imagine the JS on Google Docs, Hotmail, Facebook and other big sites make my example look like a one-liner.
Problem is that analogy doesn't work...javascript is not a statically linked language...the runtime is all already there at the client. So I will say once more, for a javascript 'hello world' app, 32k is monstrous.
CoffeeScript is a choice, therefor it's not pointless. I personally prefer plain old Javascript, but if someone prefers CoffeeScript, that's cool too. Dart will be included in Chrome natively. At that time, the simple HelloWorld example will be 17 lines, with comments. Dart isn't the only tool for the job. It's pretty awesome given a choice of what technologies work best for a suited task. 
Or you could just write JavaScript.
Less ambiguously: var padding = String(1e15); return (padding + String(number)).slice(-length); It basically builds a string with lots of zeros (`'1000000000000000'`), appends your number (`'4'`), and grabs the last characters from that string. Will only work with integers &lt;= `1e20` or so.
You could, but the point of languages like Dart and CoffeeScript is to explore how we can improve browser based programming. Do I honestly think one of those languages will be widely adopted by the entire industry? No I don't, we will always be writing javascript. But it's still important to try and innovate and in some cases CoffeeScript is more readable. It's a lot easier to teach a newcomer to write good coffeescript code than it is to teach them how write efficient javascript. (triple equals, self invoking functions to protect scope, etc).
I'd rewrite the code. Make a "factory" (async function) which gets an aspect from a (possibly global) "repository" (database representation). function Aspect(command, fun, div) { this.command = command; this.aspect_fun = fun; this.aspect_div = div; } Aspect.prototype.render = function() { var $div = $("&lt;div/&gt;") .attr("id", this.aspect_div) .appendTo("body"); $div.load("output.php?oid="+encodeURI(this.aspect_fun), function() { }); }; function getAspect(command, callback) { $.ajax({ type: "GET", url: "get_aspect_json.php", data: { command: this.command }, context: this, async: false, dataType: "json", timeout: 25000, success: function(response) { var aspect = new Aspect(command, response.aspect_fun, response.aspect_div); if(typeof callback === "function") { callback(null, aspect); } }, error: function(request, status, err) { if(typeof callback === "function") { callback(err); } } }); } function runScript(){ $('#command_input').keyup(function(event){ var msg = $('#command_input').attr('value'); if(event.keyCode === 13){ if(isValidAspect(msg)){ getAspect(msg, function(err, aspect) { if(err) { // TODO Handle error appropriately console.error(err); return; } if(aspect.visible()){ aspect.remove(); }else{ aspect.render(); } }); } } }); } (Sorry for the mixed style; it was mixed in the source and I didn't know what to do.)
Who the fuck would even think about running a coffee script interpreter in the browser? 
I don't find coffeescript that readable TBH. And yes, I've used it, ended up getting frustrated with it, and stopped using it. I like making sure my code is exactly the way I want, not the way some compiler thinks it should be.
CoffeeScript is cool until some of the top JS libraries use it and don't allow patches unless they're written in CoffeeScript.
How do you mean mixed style?
Yes, and perhaps you have the JavaScript skills to do that. A lot of people don't and CoffeeScript does produce fairly decent javascript (doesn't pollute the global namespace, correct equality operators etc). 
The coffeescript website does, but overall yes you shouldn't run the interpreter in the browser, but it is possible. Dart from my understanding is pretty much the same in that you should compile it server side, but they also provide a way to run it in the browser.
I think this is the right way to go about it. Using a blocking AJAX request is definitely a no-no. I think this script is more along the lines of "proper" JavaScript style: var Aspect; (function ($) { "use strict"; function getAspect(command, callback) { var aspect; aspect = new Aspect(command); $.ajax({ type: "GET", url: "get_aspect_json.php", data: { command: command }, dataType: "json", timeout: 25000, success: function (response) { aspect.aspect_div = response.aspect_div; aspect.aspect_fun = response.aspect_fun; callback(aspect); }, error: function (request, status, err) { } }); } Aspect = function (command) { this.command = command; } Aspect.get = getAspect; Aspect.prototype.render = function() { var aspect_div = this.aspect_div; var aspect_fun = this.aspect_fun; var $aspectDiv = $('&lt;div id="'+aspect_div+'"&gt;&lt;/div&gt;'); $('body').append($aspectDiv); $aspectDiv.load("output.php?oid="+aspect_fun, function () { }); }; })(jQuery); jQuery(document).ready(function ($) { "use strict"; function finishLoading(asp) { if (asp.visible()) { // ??? asp.remove(); } else { asp.render(); } } function initialize() { var $commandInput = $('#command_input'); $commandInput.keyup(function (event) { var msg = $commandInput.val(); var asp; if (event.keyCode === 13) { if (isValidAspect(msg)) { Aspect.get(msg, finishLoading); } } }); } initialize(); }); The main takeaways here are: # Using global scope wisely. This script adds 1 global variable, Aspect, as opposed to the original which has 6 global variables. More on that in the next section. In addition, by using closures to hide your implementation, the various pieces of the script cannot "see" each other, which helps you focus on good interfaces. # Using the var keyword. You might not have realized it, but every time you were using a new variable, it was a global variable accessible anywhere in the script. The var keyword gives your variables scope for the current function, so I personally like to put them at the top of the function. # Selector caching, no need to check the DOM for `$('#command_input')` unnecessarily. # `$elem.attr('value');` can be `$elem.val();` There is a distinction between $elem.attr() and $elem.prop() since jQuery 1.6 that you should be aware of. (Only matters for certain form elements.) # `"use strict";` can help you reduce bugs in your code. I think if you combine the parent's advice with my own, you will be well on your way to good JavaScript practices. You can see that the parent has done a few things slightly differently. I didn't look at their code too much before I did my own, because I figured two different perspectives might be helpful.
There's a mix between using `'` and `"`, using `function()` and `function ()`, and using `foo{` and `foo {`.
I recommend against using `"use strict";`, because behaviour of the JS runtime may differ between browsers. I neglected to comment on the `var` problem and just fixed it. Similarly with selector caching (kinda). Typo with your example: at the end you have `Aspect.get` where it should read `Aspect.getAspect`. I don't think there's anything wrong with assuming a global `$`. Using both `jQuery` and `$` may be confusing for readers unfamiliar with jQuery or JavaScript.
&gt; I recommend against using "use strict";, because behaviour of the JS runtime may differ between browsers. If they implement the pragma wrong it's the browser's fault. Even IE10 has it right. I think it's safe to use in production. I haven't experienced or heard of any issues with it, and it's great for development. &gt;Typo with your example: at the end you have Aspect.get where it should read Aspect.getAspect. Thanks. &gt;I don't think there's anything wrong with assuming a global $. Using both jQuery and $ may be confusing for readers unfamiliar with jQuery or JavaScript. It's not safe to assume the global $ will always be there. Many environments (like WordPress admin) run in no conflict mode. People should know what that code does if they use jQuery, otherwise it's time for them to learn. :)
&gt;&gt; I recommend against using "use strict";, because behaviour of the JS runtime may differ between browsers. &gt; If they implement the pragma wrong it's the browser's fault. Even IE10 has it right. I think it's safe to use in production. I haven't experienced or heard of any issues with it, and it's great for development. I'm mostly talking about environments where `"use strict;"` is *not* supported. I can't say I have experienced problems myself; I was just speculating. &gt;&gt; I don't think there's anything wrong with assuming a global $. Using both jQuery and $ may be confusing for readers unfamiliar with jQuery or JavaScript. &gt; It's not safe to assume the global $ will always be there. Many environments (like WordPress admin) run in no conflict mode. People should know what that code does if they use jQuery, otherwise it's time for them to learn. :) The original code used `$`, so I see no reason to rewrite it in a "safe" way with both `jQuery` and `$` sprinkled everywhere [hyperbole]. 
This shouldn't be done by JavaScript. The PHP code which outputs this form should generate this UID. This way you can ensure that it is indeed unique.
That's kind of what i was thinking. I did xpost to PHP as well. How would I have the reference number displayed within the form in a read only text box if I put it in the form handler?
GWT stuff runs pretty well. E.g. that Quake2/WebGL thing... that was done with GWT.
Google is your friend. Break down your problem into all steps that you don't know and give google a run for it. &lt;input type="text" value="DEFAULT VALUE, COULD BE ANYTHING" readonly="1" /&gt;
`&lt;input value="foobar" readonly="readonly"/&gt;` (type=text is default)
Indeed, google is my friend, but I have been googling this for several hours to no avail. I have tried basically what you have there, with the value being the javascript to generate the number. But when I try and assign the variable in the PHP(mail) doc, the line it is on is blank.
Nope, that won't work. Use PHP to fill in the value. echo '&lt;input type="text" value="'.$randomString.'" readonly="1" /&gt;'; .. or JavaScript: document.getElementById("myHappyId").value = randomString; If you don't know how to create a random string in JavaScript, try googling "how to generate a random string in javascript". That is practically what it says in your reddit title and google has an answer to that.
So, theoretically, I could use &lt;?php function genRandomString() { $length = 5; $characters = ’0123456789abcdefghijklmnopqrstuvwxyz’; $string = ”; for ($p = 0; $p &lt; $length; $p++) { $randomString .= $characters[mt_rand(0, strlen($characters))]; } return $randomString; } ?&gt; and echo '&lt;input type="text" value="'.$randomString.'" readonly="1" /&gt;'; in my form? How would the form mailer know what "randomString" is without assigning a name or id to it?
So, theoretically, I could use &lt;?php function genRandomString() { $length = 5; $characters = ’0123456789abcdefghijklmnopqrstuvwxyz’; $string = ”; for ($p = 0; $p &lt; $length; $p++) { $randomString .= $characters[mt_rand(0, strlen($characters))]; } return $randomString; } ?&gt; and echo '&lt;input type="text" value="'.$randomString.'" readonly="1" /&gt;'; in my form? How would the form mailer know what "randomString" is without assigning a name or id to it?
Assign a name to it :)
I copy/pasted exactly that, assigning the name "refnum" and when the page is displayed it displays echo['.$randomString.']'; where [] represents that textbox in the form when I remove echo '' '.$randomString.' shows up in the text box rather than the random string.
Hey, I downvoted your answer because i consider it not being a good solution for the current problem. I believe a solution without binding `this` would be easier, shorter and more intuitive. I've previously made the mistake myself to just rely on binding a context (i.e. `this` or some other object) instead of actually acquiring a profund understanding of my own code. Still, there are situations where binding is helpful and/or necessary.
Well, I feel like a fool, because i figured out that I was neglecting the &lt;?php ?&gt; around the echo...... but the textbox is showing up empty in the form. I appreciate the help, but am I missing something?
Well, I feel like a fool, because i figured out that I was neglecting the &lt;?php ?&gt; around the echo...... but the textbox is showing up empty in the form. I appreciate the help, but am I missing something? EDIT:: This is what the form &lt;td&gt; looks like &lt;td&gt;&lt;div align="left"&gt; &lt;?php echo '&lt;input type="text" value="'.$randomString.'" readonly="1" /&gt;'; ?&gt; &lt;/div&gt;&lt;/td&gt; 
Hmm this is kinda strange, I can start a local server and everything works fine. But I can't connect to any remote websocket servers. (Chrome Canary). Btw I tried it locally with [SocketStream 0.2.3](https://github.com/socketstream/socketstream).
Right, whatever they make is still limited to what can compile down to JavaScript in a non-insane way. All web development now is limited by what JavaScript can do natively. As far as I can tell this is just an attempt at breaking the plateau in software development speed that JavaScript has caused in medium to large applications. If they can convert people to this transitional language that can get people onto chrome and then maybe eliminate JavaScript after many iterations. Then they can continue to refine this language to improve the speed of development for everyone: small to large. EDIT: Removed some of my unnecessary trolliness.
Holy hell, I made it work. Sort of. I haven't gotten it into the textarea, but I've got a random string displaying. However, this [this](http://i.imgur.com/D0hYM.png) happens every third one or so. I'm using: $length = 5; $characters = ’0123456789abcdefghijklmnopqrstuvwxyz’; $string = ”; for ($p = 0; $p &lt; $length; $p++) { $randomString .= $characters[mt_rand(0, strlen($characters))]; } return $randomString; } ?&gt; as the function and calling it like this: &lt;?php echo genRandomString(); ?&gt; Do you have any idea why that would be happening?
&gt; When you don't use the --optimize flag FTFY
Had a similar problem a while ago. [Datejs](http://www.datejs.com/) will solve your problems. Examples: Date.parse('2011-08-05'); Date.parse('08052011'); Date.parse('08-05-2011'); Date.parse('aug 5 2011'); Date.parse('5 aug 2011'); Date.parse('5th aug 2011'); Date.parse('5 2011 aug'); Date.parse('2011-07-30').next().friday(); They all evaluate to the same native Date object. Then you can extract the different parts (day, month, year) from your Date object with the methods `getDay()`, `getMonth()` and `getFullYear()`. Big warning about months: jan=0, feb=1, ..., aug=7, ..., dec=11.
Hey. You shouldn't put the generated number in the input. You should generate it when you receive the $_POST: that way, you're sure that no one can tamper it. Just my 2 cents! 
That's a pretty elegant implementation of Tetris! I really like the way tetrominoes are defined and rotated. I once made one made Tetris using old-school DOM, before the Canvas-era: http://www.blaisekal.com/play/Tetris/
Pretty badass! Though it is a rather choppy experience without hardware accelerated graphics. (Chrome on 3 y.o. Macbook Pro 2.2Ghz Snow Leopard)
underrated comment. Generating it in PHP and sending it to the client to send back to you is no more secure than generating it in javascript (although it is more likely to work the same in all browsers). Both of which are bad if you plan on referencing this id for anything important... like whether it's been paid, what payments are against it, etc....
Thanks. I should point out that its certainly not an original idea - I have seen this in a number of older windows c++ implementations. I like your version - the subtle graphics polish is nice.
That looks interesting (and very useful), and thanks for the warning about months. I have a feeling that would have caused copious amounts of swearing.
Cool stuff! (and very nice/readable [code](http://lights.elliegoulding.com/js/Lights.js) [there](http://lights.elliegoulding.com/js/Config.js)!)
Amazing!
Who's the artist (song)?
Ellie Goulding - Lights That's actually her website, just take 'lights' off of the URL.
Thanks.
cheers man
That was actually my point. You compile Dart into real JS, which adds all these libraries. So how would writing in Dart be faster than writing in real JS? It wouldn't.
&gt; fire up in Chrome Works in Firefox but not Chrome for me
What's frustrating is some developers decide that instead of adding features, and making their libraries more awesome they'll instead re-write the damn thing in CS. When rails announced CS supported in 3.1, we decided at my work to start using CS. Instead of wasting a bunch of time re-writing a mobile app I was working on in CS, I slowly transitioned it over while doing refactoring or patching. I also don't like their classes. Any developer that decides to use CS classes pretty much forces any developers to have to write their apps in CS.
Do tell me how I can setup a callback for a socket (using socket.io) which allows me to access the object which the socket belongs to, without nesting. Please. In future, if you disagree with a point a redditor has made, you should respond with your opinion. That's Reddiquette 101 - Please don't: Downvote opinions just because you disagree with them. The down arrow is for comments that add nothing to the discussion.
awesome!
I had the exact opposite experience :)
I think I got everything I wanted working. It ain't pretty, [but it works](http://pastebin.com/grDr8WqP). Any input for a JS newb like me would be greatly appreciated. I'm probably going to move all the repetitive code into a separate function that will be called onselect, but things are at least working (live site's not up and running yet, will link to it down the road when it is). Thanks for your help!
I actually do this in a loading script that chains like 6 JSONP loads that fire one after another every 5 seconds just to make sure it never gets backed up.
Why do you want it readonly for the use to see? Why not a hidden field? &lt;input type="hidden" value="&lt;?php echo randomNumber(); ?&gt;" /&gt; 
Have an upvote, sir. This is the most beautiful thing I have seen on reddit today.
http://i.imgur.com/BWeJY.jpg
You could always use a generic leftPad function.. function leftPad(toPad, minChars, padChar) { var charsToAdd = minChars - new String(toPad).length; var pads = []; for (var i = 0; i &lt; charsToAdd; i++) { pads.push(padChar); } return pads.join('') + toPad; } leftPad(8, 4, 0) //returns '0008' leftPad(12345, 3, 0) //returns '12345'
TIL that I have epilepsy.
You can make the terrain move faster when you hold down the mouse button. Also you can burst the bubbles if you double click them quick enough. Anyone else find any hidden features?
Speechless. Guess I need to take a look at Three.js.
you can steer with the mouse and the bubbles only require a single click to burst in chrome.
I'm not sure what you mean by "this", but those JSONP calls would still have to trigger each other, if you want to make sure they come back in the right order and don't clog the line ("backing up" sounds wrong, since it's asynchronous). If you have only those 6 calls, though, clogging the line is pretty much irrelevant, so I don't really know why you are doing that 5 seconds thing at all.
It turns your snappy webpage into a snail while loading... similar to booting op a Java applet (remember those?) or a Flash object. This doesn't matter if your page does a lot (like Google Docs, Hotmail, Facebook), but for simple webpages, it just leaves a very bad impression.
I'd generate it in PHP and store it somewhere, be it in the session, or in a dedicated table in the DB. When it comes back from the web page, see if the values match.
If you're using XP, you need to run Chrome with the --ignore-gpu-blacklist for it to work.
Like `sprintf`? Oh, wait, Javascript has no `sprintf`. Bummer. I'd convert to string, check if the length is less than 4, and if so, pad by prepending "000" and taking the last 4 characters from that; if not, just return the string. function myfunc(n) { // got a better name? var s = n.toString(); return s.length &lt; 4 ? ("000"+s).substr(-4) : s; } BTW if you plan on generalizing this and don't know beforehand how many zeros you'll need, I'd start with a reasonably large string of zeros, and concatenate with itself, doubling the number of zeros in each loop, until you have enough of them. Like: var pad = "0000"; while(pad.length &lt; L) pad += pad; You'll reach a length of 32 in 3 steps (4-&gt;8-&gt;16-&gt;32) instead of in 28 (4-&gt;5-&gt;6-&gt;...-&gt;32). And some extra length for the string doesn't hurt. Of course, you can always hardcode a string of 32 zeros... :)
Are these for real? Because a lot of functions I recognize from other languages, though sometimes under a different name ("some" =&gt; "any", "every =&gt; "all"). And "filter" is already part of most browsers' Javascript.
"this" is very volatile: call a function, and its value will already be different in it. So only trust its value to be what you expect, in the code in the actual function itself. (By default, "this" represents the object for which the function is used as a method call.) In a "onmouseover" event, or any other event, `this` will be the DOM object for which the event is triggered, i.e; the html element to which the "on..." attribute is attached. So I think, for your current assignment, it's best to put the code directly in the "on..." attribute, and not in a separate function -- though you can put the selection of a color in a separate function, of course.
I want to schedule the 6 JSONP calls approximately every six seconds. I just do a setTimeout at the end of each queue to make sure they never get doubled up etc. setInterval will continue to schedule over and over again regardless if something or one of its previous schedulings is blocking... its unlikely that 6 JSONP calls would ever take more than 5 seconds but you never know. and JSONP doesn't exactly have good error handling...
&gt; It turns your snappy webpage into a snail while loading... similar to booting op a Java applet (remember those?) or a Flash object. Startup time for 32k of JS on a webpage would be almost nothing. Your talking milliseconds, maybe half to a full second on a slow server. Meanwhile the startup time for Java applets is often 10s of seconds, to even a whole minute! They are in a totally different league. But again, those types of websites don't reflect what Dart is really for. I just don't think it's designed to tiny snippets of JS at all. But even then, there are straight forward ways to make JS-heavy pages still appear instant. You can move the scripts to the bottom of the page, so rendering takes priority. You can use a module system to allow the visible bits of JS startup straight away, and the non-visible bits startup later (and on a JS heavy page, this is often most of the code). I've also seen plenty of JS that can just be removed, and simply replaced with CSS. There are other website specific strategies to help hide the loading time further, namely styling your website in a way so that it looks ok if components take a second to load (i.e. fading them in). Plus caching will help!
Great, one more thing I want to learn now. Awesome work! The animation is super smooth on my 2011 Macbook Pro w/ Chrome 14.
This is a JS implementation of a similar vis from Fathom (http://fathom.info/fortune500/) which is implemented in Java. Here for any questions regarding the implementation.
In the first example, you replaced the onload method of window with your init function. In other words, window.onload became the init function. On the second example, you replaced the onload method of window with the result of init(). Because init does not return anything, onload does nothing. Are you sure there isn't an error happening when you do "if(target.addEventListener)"?
&gt; window.onload = init(); Sets window.onload to the output of init(). Since you're not returning anything, it's likely *undefined*. Think of this as something like *max = Math.max(a, b)*; you're not setting max to the function call, you're setting it to the returned value. &gt; window.onload = init; Sets window.onload to the function *init*, which then gets executed on load.
pro tip - forget this shit and learn jquery
That is decidedly not a *pro* tip. Willful ignorance in service of expedience, sure. However anyone who considers themselves a "professional" javascript developer should have intimate familiarity with the engine underlying their libraries. And even if you are of the mind, "hey, I just use it to get my job done, I don't care what's going on underneath.", you should be aware that abstractions are leaky. What are you going to do when the jquery pixie dust stops working and you have no idea how to fix it? http://www.joelonsoftware.com/articles/LeakyAbstractions.html
There wouldn't be an error. If the addEventListener method doesn't exist, it will return undefined, which tests as false.
Very nice answer. To expand on that a little bit for the OP, javascript is unlike whatever training you've had in programming so far. See, you can pass around references (basically like an entry in a table of contents, if you're looking for a metaphor) to functions. When you see something like var a = functionA without the parentheses, you are assigning a reference to "functionA" to the variable "a". So if functionA looks like this: functionA(message){ alert(message); } Calling "a" with a message then would have the same result as calling "functionA" with the same message. So. a("This is my message") Would be functionally the same as functionA("This is my message") Of course, this is a gross oversimplification of how javascript really works, but understanding this will go a long way towards helping you master javascript.
This might be easier for people to read: http://pastebin.com/B4JQgsmN setTimeout runs the startTime function 500 miliseconds after the call to setTimeout is run. The &lt;body onload="startTime()"&gt; says that when the &lt;body&gt; element is loaded, the code specified, which is a call to startTime, will be run. The &lt;div id="txt"&gt;&lt;/div&gt; part is the element that the document.getElementById('txt') is referencing. By setting the innerHTML property on the div element to the specified string, it's placed "in" that element and displayed to the user. * More info on setTimeout: https://developer.mozilla.org/en/window.setTimeout * More info on getElementById: https://developer.mozilla.org/en/DOM/document.getElementById * More info on innerHTML: https://developer.mozilla.org/en/DOM/element.innerHTML * More info on a div: https://developer.mozilla.org/En/HTML/Element/Div * More info on onload: https://developer.mozilla.org/en/XUL/Attribute/onload
Because I'm avoiding my own work... First, take the time to format your submission so that people not avoiding work will want to help you. Second, the onload is necessary to start the function when the page loads. Then, it does some very basic stuff with a date object. It gets the hours, minutes, seconds. Then it passes the minutes and seconds to a function that zero pads the number if it is less than ten, otherwise the time display would look wonky. The function then gets a reference to the div [ document.getElementById('txt') ] with the id of "txt", and updates its contents (.innerHTML) with the hour + ":" + minutes + ":" + seconds. Then, at the close of the function, it calls "setTimeout" which allow you to delay execution of a function for a specific period of time, in this case, a half second. The div is there to hold the time, basically.
explain it to me like im 5:P
If that's the case, you need to step back a bit. :) I recommend reading this: http://eloquentjavascript.net/
I was wondering more about "target", actually. If the code runs before the page is build (as in the second example), then image1 won't exist, getElementById will return "null" and you'd end trying to call the method addEventListener of "null", which doesn't exist. On the other hand, if the element exists when the code runs, then it should, theoretically, still work, even if onload = undefined (due the lack of return value on the init() function). [You know, those things you forget after long exposure to jQuery... ;)]
OK. I am starting to understand more now. Im having difficulty understand what onload does. As far as I know...its something to check a users browser? and the div. The innerHTML puts the h:m:s into the &lt;div&gt;?
Yea. Thank you:)
Yea Ima have to go back to basics again...I still don't understand what onload does and why there is a div there. Where is the txt being printed from. The div? I understand the rest. 
Good catch. In that scenario, it *ought* to error, but might not because with such a small page, I bet the dom is ready before it gets to that point in the code.
onload is a property of the body element. When it's assigned to reference a function (like it is in your case), the browser knows to execute the function when the "body element is loaded from a webserver" event happens. What you're seeing is a hackish way to do things. Another way to set the onload property of the body element to the startTime function using only javascript and DOM functions would be this: var bodyElement = document.getElementsByTagName('body'); bodyElement.onload = startTime; Yep, the innerHTML is a property of the div element that allows you to access the contents of the div tag. For example: document.getElementById("foobar").innerHTML = "the part in here"; Would do this: &lt;div id="foobar"&gt;the part in here&lt;/div&gt;
Programming language verbosity makes baby Jesus cry. 
Programming language verbosity makes baby Jesus cry. 
I see. Thank you. one more thing. This code is in HTML right? With a mix of java... I was looking at the website u gave http://eloquentjavascript.net/ and it wrote to print print("abc"); This looks a bit familiar as I did some C++ and java a while back, but only basic stuff:). This confuses me because... Here, it is coded document.write("abc"); is this JS in html?
When I tried the demo page I got some JS errors. Anyone else have a similar experience?
Simply remove the console.logs from the example. I will do it later today.
Coming from an experience that only consists of Ruby on Rails, I've been having a lot of fun incorporating Backbone.js into the mix or just using it by itself. This makes even more sense to me than what I've been previously doing.
What are we looking at here? 
The code we've been talking about is HTML -- with javascript programs inside the HTML elements and attributes. Java and Javascript are different languages. The syntax, as well as what the languages are generally used for, differs greatly. Don't let the similarity of the names fool you. :) print is just a function that the authors of the book created. Something very close to it that's provided by most browsers that support javascript would be alert("foobar"); "print is not a standard JavaScript function, browsers do not provide it for you, but it is made available by this book, so you can use it on these pages" As far as document.write goes, I would stay away from it for now. To use it properly, you need to be aware of the timing issues involved (i.e. open and close). It also encourages tight coupling between script and markup syntax (which is usually a bad thing). A nice way to use Javascript in general is to lightly manipulate the tree of HTML (DOM) elements. Using document.write can easily break that design. The patterns encouraged by use of things like document.createElement tend to end up much cleaner as your programs get larger (since it encourages you to mix html and javascript as little as possible). var bodyElement = document.getElementsByTagName('body'); var newDiv = document.createElement("div"); newDiv.innerHTML = "hello"; bodyElement.insertBefore(newDiv, null);
Thanks! I am looking for any and all suggestions to improve the boilerplate.
Change the title. If the tab is pinned[1], it will be highlighted. [1] Firefox: right click on a tab -&gt; pin as app tab
Thanks for the advice:) upvote for all ur comments sir:o
Avoid w3schools like the plague. It's often completely wrong, see [w3fools.com](http://w3fools.com/) for examples.
IE 9 also has some extensions to make site mode easier, perhaps other browsers support something similar. You can display a badge over the icon indicating there are new messages, for example. You can also make the window blink by calling `window.external.msSiteModeActivate()`. See this blog for more details: http://msdn.microsoft.com/en-us/library/gg131029%28v=vs.85%29.aspx
I've been using the mix of Backbone and RequireJS on my projects with much success. RequireJS lets you easily create individual modules and backbone lets them communicate with each other w/o tightly coupling them together
Any open source code?
What browser were you using?
He would have been using Internet explorer which doesn't support console.logs
[favicon.ico generators](https://github.com/makeable/Notificon) and a new title.
Fortune 500 numbers in a clickable form. Clicking a company will, in theory, show you how that company has moved on the list over time. Except the dataset isn't very good. ADP for instance, (#272 in 2007 and #288 in 2008) has not changed its name, but it's disconnected in this dataset.
I think you're overlooking that Image.onload won't be called until the image is loaded ... that is, later. Your anonymous function being passed to ParseImages returns imgInfo immediately, but at this point it's empty, so you get no result. Might just have your onload handler stuff the data in your paths structure directly...
Pretty much what he said. Also you may want to simplify your code. Had a hell of a time trying to follow it. Don't give up though, you'll get it.
What they said... again. Your "callback" is unneeded. The important one is this bit of code. tempImg.onload = function () { ... } Here, you're assigning a callback function to tempImg.onload. When you add this, the next line of code AFTER that function declaration is immediately executed. That means, before imgInfo is filled in, it is returned (empty) to your data variable var data = callback( this.paths[this.keys[x]][this.colors[y]] ); Once the image actually loads, that onload callback is run and imgInfo is filled in, but by that point it is too late. On a side note, you're using **this** in your ParseImages function, but you're never instantiating a new ParseImages instance using the **new** keyword, so **this** actually refers to the window object when calling it, and this.path/keys/colors and res are actually being assigned to variables within the global namespace.
Here is something i whipped up. Not sure if it solves your problem, but maybe it can help. let me know if you have any questions. http://pastie.org/2692695
Aside from the errant ',' in your code (after img2.jpg) - but I'm assuming that's a moot issue. HAve you tried placing some consoles and checking their output to see what's being passed around? Can you throw a demo on jsfiddle.net?
http://www.readwriteweb.com/hack/2011/01/w3schools-responds-to-w3fools.php So it's constantly evolving, but it is a good "beginner" reference.
Thanks, much of the verbosity came from dealing with accessing values from the various objects, and constructing a new one with the desired format. 
Ah, I was thinking that the callback wouldn't return until the onload function had been called. I also don't quite understand what you mean by your last line.
whoa...i just learned a lot from there site...i coded there tutorials and it worked fine. and I am a beginner too anyhoo. 
Sixty smackers? Hoo boy.
Ah, so you do all the handling of data within the onload function? So as the for loop keeps on running, there will be a queue stacking up to handle each image?
Asynchronous script loading avoids the penalty of loading unnecessary code. This is certainly necessary with big enough codebases, but I'd avoid doing it until I absolutely had to. Bundling, minification, gzip and caching go a *long* way toward mitigating the download penalty, and avoiding unnecessary optimizations like this keeps things simple, which has other kinds of benefits.
I suppose I could, the whole thing is ~300 lines at the moment, but I'll put up an example of this part if that would help you.
You still compile the same way. This is not for optimizing, it's for modularizing your code. It also allows you to develop without compiling by using dynamic dependency analysis. I would argue that this is simpler, what benefits do you propose?
One day, we'll have an alternative to Javascript as the only available scripting language. Having *ONE* language available just seems so... 1990's. I can only hope it's some language-agnostic intermediate...
Pretty much what Pyro979 posted. Have the onload handler (a function you provide which is *called back* by the user agent when the image eventually finishes loading) stuff the metrics into your paths/keys/colors/res structures.
I respect the amount of work that went into this, but it's not very engaging. It hangs out in an awkward chasm between lean-back content and true interactivity. If something bills itself as interactive, I expect to be able to explore the world freely, to discover things, to play games, etc.. If something is highly directed, I expect to lean back and passively consume it. This is basically lean-back content that pans a little bit if you move your cursor. In terms of providing a compelling user experience, it completely misses the mark. They used a lot of talent building the wrong thing. An impressive tech demo, sure, but not much more.
Neat stuff.
unless the developer tools are open.
Isn't "Example Demo" redundant?
[HTML5 notifications][1]. [1]: http://onepixelahead.com/2010/05/31/html5-notification-example/
As the first commenter points out, most of this article isn't about closures at all. It's only at the end, when he's talking about the "brain-bender", that actual closures are involved. There's already enough confusion about closures among beginners, and mixing them up with simple local functions and lambdas certainly doesn't help.
Functions aren't magic in JavaScript. They run top to bottom. Function bodies act like normal values in assignments, so assigning one to image.onload in no way halts or pauses execution. All you did with your callback() function was split your code into two.
hm, I would argue that forcing the programmer to explicitly define wrap every file just adds unnecessary indentation and clutter. Clutter that could have been avoided with dynamic dependency analysis and explicit require() calls. Also, with such analysis, you should never have to maintain lists of your files and their order. disclaimer: i built a [commonjs dependency analyser](https://github.com/clux/modul8) 
much simpler to understand example: http://jsfiddle.net/g105b/ewLHV/
The reddiquette is intended for more fundamental and profound opinions such as political and moral ones. Not opinions whether a comment is relevant/suitable or not. &gt;Do tell me how I can setup a callback for a socket (using socket.io) which allows me to access the object which the socket belongs to, without nesting. Please. This is way beyond the context of this thread, but as I stated previously: &gt;Still, there are situations where binding is helpful and/or necessary. Now, stop being so hostile and easily offended and get on with your life.
This example is also adding to the confusion, since the function "nonClosureMethod" **does** create a closure (otherwise buttonText wouldn't even be available when the event is triggered). Here's pretty much the same example explained: http://reallifejs.com/the-meat/getting-closure/never-forget/
&gt; Now if you where looking for an actual class in JavaScript, I am afraid you are out of luck. Take a look at the Google Dart project. It will let you generate JavaScript that supports classes VERY similar to the way this article talks about.
Essentially. Plus in the same onload function I check what's done so far and if all images were processed i call a function which can then continue doing whatever is needed.
Look at those globals.
r/coffeescript
And no prototype checking? No wonder the skillPoints start at 0. ;)
Notifications have been dropped from the HTML5 spec.
Fixed it: if(skillPoints &gt; 500 &amp;&amp; isDouchebag === false ) hire();
I was really hoping for an article that summed up the state of the distribution channel for HTML5 apps. It's more of a diary... which would be good raw material for an article I suppose.
 if ( skillPoints &gt; 500 ) hire(); But, even the best applicant would only have 8 skillPoints. 
So, assuming "skills" is a 1-100 scale, you would need a minimum of +- 56% in each skill. "We only hire the 56th percentile" doesn't sound as cool.
That doesn't matter if they're implemented on the target platforms.
bazinga!
OMG they are using a `for..in` loop to iterate over an array. Never do that! The order of enumeration is not guaranteed, and it will break if any other code augments Array.prototype.
&gt; Now if you where looking for an actual class in JavaScript, I am afraid you are out of luck. It does not exist yet (see here, looks like classes will be in ES6 If classes consist of simply a keyword class, then yes, classes are in ES6. But it's just sugar, the semantics are nothing new.
That was an entertaining read. Thanks!
i'll switch to a different library
hire is undefined.....
Why don't I know these things!!!
 var i; for (i=0;i&lt;500;++i){ applicant.attributes[i] = "Javascript"; }
Here is the updated version. It is still not working. I am not understanding why your code should work, but mine shouldn't thanks for the help! function ParseImages () { this.paths = [{type:'p', color:'b', path:'pieces/pawn.svg'}, {type:'p',color:'w', path:'pieces/wpawn.svg'}] this.res = {}; var len = this.paths.length; for (var x = 0; x&lt;paths.length - 1; x++) { var tempImg = new Image(); tempImg.src = paths[x].path; tempImg.onload = function(){ res[paths[x].type] = {}; var imgInfo = { width: this.width, height: this.height, path: this.src }; res[paths[x].type][paths[x].color] = imgInfo; var keys = Object.keys(res[paths[x].type]); } } return this.res; } 
Cross posted there as well. It's really more about JavaScript than CoffeeScript though, so I thought it was appropriate here.
That's what I thought on first reading, but if you look closely, for each skill they're actually adding `applicant.skills[ skillName ]` to the total. Presumably each applicant has a hash table of "skill name"=&gt;"points in that skill" values (arbitrary scale, anyone?), but as you can't inspect the applicant object supplied to the code it's easy to misunderstand.
It's just a global function defined outside the scope of the applyForJob() function. Like the applicant object that's passed in to it.
You would not get hired. `applicants.attributes` is a hash table mapping skill names to points totals for that skill. Yours is an integer array of strings, all of which are set to "Javascript". As such `applicants.attributes[skillName]` would never match anything in your attributes array (as `skillName` is never an integer), and the function would return from the first `if` statement.
Am I the only person who really doesn't like job listings like this? * You don't know what you're going to be working on * You don't know who you're applying to work for * You don't know where you're applying to work * You don't know potential compensation * You don't know the skill level required for the position Basically, all you *do* know is that someone, somewhere is hiring someone, somewhere to do something, somehow that at least partially needs javascript knowledge. Why would you reply to this listing?
No, nothing open sorry
But wouldn't that only add them if they matched one of the skillName strings, of which we have only 8?
Well... yes. They're iterating over the applicant's skills hash, but only counting the skills they're interested in towards the skillsPoints total. They don't give a toss if you have 10,000 points in "dog-walking" or 30 in "picking your nose" - only how many points you have in Javascript, CSS3, HTML5, "Mobile Web", OS X, Python, Node.js, iOS and/or Linux.
I started writing my resume as a plain text file using markdown syntax. Unfortunately, job recruiters still require a DOC file.
Fuck all that, I'll just call the hire() function directly.
applicant.attributes['javascript'] = 9001
whatever...
They missed a great opportunity to do skillPoints &gt; 9000... pass!
Nearly, but they're looking for "Javascript", not "javascript". Javascript is case-sensitive for object keys. Good *lord* there are a lot of terrible (or just slapdash) javascript programmers on this comments page. :-/
What globals? Everything is in the function applyForJob and is defined with a var. Doesn't that make it local to the function? The function itself is globally defined but that's not too bad in simple cases.
It's worse than that. `for...in` over an array returns the array *indices*, not the elements in the array. So `requiredSkills.concat( extraSkills )` could be replaced with `[0,0,0,0,0,0,0,0]` and the loop would have the exact same outcome.
Even so, wouldn't we want to pass the applicant object to the hire function? How does it know who to hire?
True. Unless it's something really nasty like the applicant is also defined as a global variable, and the hire() function just knows where to get it from.
And you know that they think this is clever/hip. Which isn’t a turnoff for me personally, but if you’re going to go for hip, I’d toss in a Node.js, Coffeescript, or [obscure JQuery plugin][1] reference. [1]: https://github.com/raganwald/JQuery-Combinators/ As it is, the code looks an awful lot like a “If a colleague sent you a pull request with this code in the commit, what questions would you ask?” interview question.
&gt;attributeName in attributes no var === global 
I missed those two. Good catch! Thanks.
I'll still take this listing over "REQUIRES 20 YEARS OF EXPERIENCE IN CSHARP!" HR-style puff pieces.
that is not good.
I think /r/javascript just qualified for the job.
Fucking idiots that screw up StackOverflow :/
Import HTML into Word.
I'm not suggesting that, even though I don't like how jquery does things (and I'm clearly in the minority there). What I am saying is that it is important to have a solid understanding of the platform you are abstracting, if only so that you can help yourself when you find a crack in the seams. 
No, I set the font to New Courier and just paste the file as is and save it as DOCX because hurray proprietary software!
you can't just shout odd words out like that
are you sure it's not working? it will return the object pretty much right away, but the object won't be populated until it's loaded.
 c=function(a,b){console.log(!!(+a^+b))}; c(true,true); //false c(true,false); //true c(false,true); //true c(false,false); //false
Maybe the function was defined within a with clause. In which case, no one would ever apply. 
I suppose your problem is that you draw *only* paths and want to drag a *full shape*. The solution could be to put a full transparent shape the the same set just to enable mouse dragging. Then the set contains a transparent shape and a few paths creating its border - shape lets you drag, paths let you manage the colors. 
Or that some recruiter wants to get more resumes. :(
Montalban!
&gt; I figured I could make each side a path itself and then put them in a set. That seems like the way to go. I recommend using "translate" to set the x, y of a set (an easy way to do this is to do the following: mySet.translate(mySetCurrentX - mySetFutureX, mySetCurrentY - mySetFutureY); ). I'm not sure about how this will work with rotate though. Good Luck!
1) Site recommends putting jQuery in &lt;head&gt;. 2) Website broke my back button. 3) Navigation is annoying.
&gt;Site recommends putting jQuery in &lt;head&gt;. What's wrong with that?
Thanks for pointing that out. Can you specify which browser that is? Also, while putting it at the end of &lt;body&gt; can be beneficial for page load times, you have to be aware whether the site will handle a FOUC gracefully, and it also means you can't do anything jQuery-related before all the content is loaded (like jQuery.live). Depending on the site, this might not be what you want. So, putting it in the &lt;head&gt; is the fool-proof way, but I agree that the article could get a bit into those pros and cons.
One of the answers suggests the following to also perform bitwise xor comparison on normal variables like this: if (!a ^ !b) .. This does look a little cleaner than the other *solutions*, but it's still an anti-pattern I guess..
why not: if(a!=b)
&lt;script&gt; blocks all other downloads, even if the resource is on another domain. Putting it after the content allows any other resources to be downloaded in parallel. As OP mentioned in his reply, putting JS below the content can be a pain to work with. However it is considered the best practice, and I believe an article detailing the 'right way' to do something should use this method.
Chrome 14.0.835.202 &amp; Firefox 6.0 ( both Mac versions ). Seems to occur when I go to this page: http://reallifejs.com/the-meat/ I'm guessing it has something to do with the jQuery address plugin you are using. FOUC is annoying, I agree. But I think in most cases it can be worked around, and I will take FOUC any day over longer perceived page loads.
Yeah, well I never realized there was a difference. I've been using "closure" for all almost all functions that use a scope from somewhere else in my head. Although I don't think much about the actual definitions for them when I'm coding. Thanks to everybody who pointed that out.
Would you care to explain your design choice? I see you want to make things private at the cost of creating a set of new functions for every instance. Have you measured the performance hit of this? Are there situations when this is non-negligible?
Just wanted to show that you can indeed use the xor operator with booleans if you want and that you can also turn that result into a boolean again if you like. The more entertaining answer is that I didn't actually look at the results and that I couldn't be arsed to think about what a boolean xor actually does. :&gt;
That's not true. The truth is all skillPoints are added to the non declared global variable skill**s**Points. Hence skillPoints will remain being 0 :(
Oh my: [JSHint report](http://www.jshint.com/reports/38005).
Thanks. I could not reproduce on windows, but I removed a redirect from http://reallifejs.com/ to http://reallifejs.com/the-meat/ which probably solves the problem.
I prefer [the way used by the HTML5 Boilerplate project](http://html5boilerplate.com/docs/The-markup/#the-javascript): &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.js"&gt;&lt;/script&gt; &lt;script&gt;window.jQuery || document.write('&lt;script src="js/libs/jquery-1.6.4.min.js"&gt;\x3C/script&gt;')&lt;/script&gt; All at the bottom of the html, before your own scripts and the &lt;/body&gt; tag. And no, the // isn't a typo. In my opinion, a flash of unstyled content just isn't as bad as a user thinking the page isn't loading.
Sounds like a good article to write. I'll put something together at the end summarizing my experiences with the stores. 
It stands to debate whether it's not better to serve the https version in any case (like Google suggests), in order to fully take advantage of the cache benefit. Many people would have to do it that way, though, and I suppose most don't.
Well I suppose you could create the functions outside of the main initialisation and drop them into the prototype. The only things that need to be kept private are the arrays that store the actual events, so I suppose there is no reason not to move the methods outside. I have not measured the performance of it, no. I have measured actual event emitting and registering though. I saw a post on here a while back saying that closures are ridiculously slow compared to prototypical methods. Might be a good thing to look into. Thanks for pointing it out, helped me question myself ^^
Just thought that over, and realised I was wrong. Moving the methods into `EventEmitter.prototype` would mean the events storage would have to be public. I suppose it isn't a bad thing, if someone wants to do some dirty hackie things then they can.
Well, I have just run some tests. Different class, same idea. This is using a little script class I wrote. Here are the [test scripts](https://gist.github.com/10bd35333fbd477b2a41). And here are the [tests on jsPerf](http://jsperf.com/closures-vs-prototypes-2). Closures are around 95% slower. Wow.
I do this exact same thing. If you care about the flash of unstyled content, put a small piece of JavaScript in your header that adds a class to your page. Hide elements using CSS until the JavaScript loads. .js .fancy-thing { display: none; }
I say this as someone who has written an HTML5 game. I had no fucking idea where to send it to make money off it. I'd love to see a writeup of what you've learned. (Diaries tend to distort the importance of events, with each day seeming equally important at the time.)
Ha, that's an even better catch! I guess we could hope it was intentional to see if a candidate corrected it... But, somehow I doubt it. As an aside, you do realize Marina Sirtis is almost 57-years old, right? As a point of reference, she is exactly one month *older* than Kate Mulgrew. (Captain Janeway)
Yeah there's no really good workaround for that AFAIK. I usually just prefix my private variable names with _ (underscore).
Yep, I have seen it used before. I am personally not a fan of it, but with that much of a performance increase it is worth it.
Hmm, really interesting. I never would have guessed the differences would be that extreme.
Is it just a bug on my side or does that game alter regular scrolling behaviour? I find it very annoying when I try to read the text. I enjoyed the article, especially the local fallback part.
What you are talking about is no longer applicable on modern browsers. [See for yourself.][1] [1]: http://stevesouders.com/cuzillion/?ex=3&amp;title=IE8+Parallel+Script+Loading
try compass/sass. does this and so much more
[sass](http://sass-lang.com/) is good. [less](http://lesscss.org/) is good, too.
Stop messing with my goddamn scrolling. I don't want your stupid cute effects whenever I move about on the page. That caused me to reach for the Noscript button after about 5 seconds, at which point I was greeted by this hideously condescending message about not disabling scripting. Have you ever thought that if you didn't do so much annoying bullshit you wouldn't have people reaching to disable scripting on your site? 
Sass and less are ok, but they need to be installed or included in the code if I don't want/can install SASS or LESS then CSSplus is the best solution. You can develop in the cloud and get the file after compile it!
Point taken — the scrolling was a bad idea. It's removed now.
SASS has an online "Try it" here : http://sass-lang.com/try.html And Less has online compiler like : http://leafo.net/lessphp/#demo http://www.dopefly.com/less-converter/less-converter.html And I'm pretty sure you will find thousand of them available, if you search a little bit on Google.
You're right, it did. Doesn't any more, though.
no it is not.
Old version still in cache?
That's better. Great article btw, also made for some interesting discussion in this thread.
No it's not just "good too", it's freaking awesome. Mixins and nesting are sooo useful.
They only need to be installed on you development environment. Also, nothing prevents you to use interpreted CSS files and standard css files in the same project.
Do you *really* need active highlighting (as in, are other people entering code *on* the page and you need to actively highlight it while they type) or do you just want to display prewritten js code with syntax highlighting? I ask, because the lightest weight js syntax highlighter is the one which doesn't require an active syntax highlighting. Use server side tech for things which are possible on the server side. Or better yet, capture the output *once* and make it static.
At the moment I'm just looking for something to display code for my CMS. [This](http://softwaremaniacs.org/media/soft/highlight/test.html) looks pretty slick.
As in, you're writing a CMS and want to display highlighted JavaScript code on pages? In this case, you should be doing the generation on the server side. If you're using PHP, here are a few. If you're using another language on the server side, try googling "code highlight library &lt;*languagename*&gt;" for a bunch of options. http://code.google.com/p/hyperlight/ http://qbnz.com/highlighter/ http://css-tricks.com/5147-highlight-code-with-php/ This (assuming I'm correct about your intent) is something which you should definitely be doing on the server side, not on the client side. For best performance it should be done *once* during the content save process, and served from the cached save.
Thanks!
yep, my bad.
Thanks :)
I don't agree with the parents argument that you should do it on the Server side. If you can do it in the client in a cross-platform stable way, then do it in the client. Cpu cycles in the users browsers are essentially free, cpu cycles on your server however can cost $$$. In fact, another reason to do it in the client is because you can minimize the actual transfer amount which leads to better responsiveness of a web server. If you don't have to transfer a bunch of styles/color/extra markup/whitespace and can generate it all in the fly on the client for the cost of a tiny, one time, cachable JS module, I'd use the JS module.
Also, thanks.
Script tags still do block rendering. Sure the browser can go ahead and start downloading scripts lower in the page sooner but it still has to block the page from being rendered until that script is downloaded, parsed and executed. The main reason for this is that the script may use a document.write.
[const doesn't work in IE](https://developer.mozilla.org/en/JavaScript/Reference/Statements/const#section_5) 
Thanks for pointing that out.
Isn't that kind of against progressive enhancement? You're shafting the one in every fifty users that browses your site with javascript disabled. And frankly, unless this guy is already serving his minified and gzipped js and css and crushed pngs from a separate domain name you're just over optimizing.
I can tell you that it doesn't simply fly off to the right on my Android device, it bounces around very erratically. This might not have anything to do with your problem, but you should definitely remove user-scalable=no from your viewport meta tag. It's very annoying not to be able to zoom out.
&gt; Cpu cycles in the users browsers are essentially free, cpu cycles on your server however can cost $$$. This is why I said do it once at the time of the content save and cache the output. edit: additionally, I bet you a dollar to a donut that sending a syntax parsing library down to a client is a WHOLE lot more data than sending the CSS/markup down. It's not like the library will be able to generate markup or styles out of thin air; they would have to be sent down with the library as well. Beyond this, preparsing and caching is faster for the clients, which is where you *need* speed increases. The less work the client has to do, the faster your content will be for the client. Even incremental expenses add up.
Optimization is a serious thing when dealing with large network delays. 40% smaller file == 40% faster site. A serious webmaster should do every one of things listed above that is within reason given their resources. 
Ehh, I think optimization is important to a degree but you're gripping at bytes with the trade off between styling server side and styling client side with js. What's 1kb on a 500kb document that takes 1s to load? 2ms? It just doesn't matter that much if you're not at the scale of facebook (and hell, it doesn't matter much to facebook either since they just compensate by buying tons of hardware). And to do it at the expense of your users without javascript just doesn't make sense.
I would recommend reading the [Mozilla tutorials](https://developer.mozilla.org/en-US/learn/javascript) for JavaScript, and then just reading the tutorials on the jQuery site. You should try to learn as much core JavaScript as you can though, so you can better understand how jQuery works.
Right. Choosing between `head` and `body` scripts really depends on the website's needs. If it's a web application which needs JS, it'd probably be best to have the scripts in the `head`. For some added enhancements here and there, `body` is the way to go. As with any optimization, profile and see which works best. =]
Looks like the popup plugin you're using is causing it. Try $('#selector_to_popup') .bPopup({follow:[false,false], position:[20,20]});
I'd reccomend [jQuery for Absolute Beginners](http://blog.themeforest.net/screencasts/jquery-for-absolute-beginners-video-series/)
It get's even more awesome when you start messing with project like dotless and realize it's really easy to map you're own function with custom code on the server. On a project at work, I implemented something to automatically care of sprite image in stylesheet. You just need to specify the path of the image and the code takes care of entering the coordinate of the image in the sprite for you.
[jQuery Fundamentals](http://jqfundamentals.com/)
CPU work on the server is a complete non-issue. This is why you *cache* the output on the server when done once. It should also be cached client-side (eg. in the body of your blog post) so subsequent requests from the same client won't even happen. For our purposes CPU cycles on the server are also essentially free unless we're constantly parsing tons of unique code, like perhaps GitHub might do (and yeah, they do it server-side). You're going to be transferring the stylesheet (or a an equivalent chunk of data to carry token=&gt;color mappings) no matter what you do. You've got to define your colors and fonts somewhere, and it's hard to get something more compact than minified CSS. The only hard gain I see comes from the fact that you can store the string "color" to a variable rather than repeating it in CSS. But again, you're gzipping your CSS, right? This is basically all (dictionary-based) compression does anyways. How tiny is this javascript? I don't see much out there that's full-featured and less than 50KB or so minified. You need to be serving out a lot of code per client before that breaks even with the added markup in the code. Each HTML markup is about 25 bytes uncompressed, assuming it goes like &lt;span class="ab"&gt;...&lt;/span&gt; (this is how pygments does it, two bytes per class name). I count 2048 tokens you need to process before the overhead breaks 50KB and you begin to get any gains at all on this front, assuming a 50KB minified library. (SHJS with all languages is over 200KB, but I'm trying to be conservative by not including every language under the sun. Correct me if there's something better size-optimized than SHJS.) And that was all before compression. The syntax markup will compress quite well, the javascript not so much. It also doesn't degrade well. And this is just a personal issue, but I find it unethical to offload this kind of work to the client because it could be done just as easily on the server. I've mostly been estimating, I'm interested in figuring out some real numbers if you don't mind sharing your library and some idea of the datasets you're using.
He's shafting users because they have to look at code without highlighting enabled? This is pretty much the definition of progressive enhancement. People with JavaScript get cool extras like code highlighting.
The first thing I did was to put all browser specific properties like -moz-this, -webkit-that, -ms-vomit, etc in mixins. My overall line count was down by at least 50%.. feels good.
Man everyone gets so pissy, it's just your opinion man. I never argued against caching on the server or any of these arguments, I just believe presentation belongs in the browser and not on the server. It's just proper software design to seperate your view and controller whenever possible. Web is horrible for this, but when we get options to put something like inline code syntax highlighting in the View, where it should be, a sane software architect would put it there, so that he can update the view without updating all the god damn data. But as you said, it's 99% personal decision, I doubt anyone here is getting anywhere near the point that this decision matters at all. 
What? How do you develop where the view is done via javascript in browser? Every web framework I've ever work in *does* separate model view and controller (for all the reasons that make MVC great) but everything is done server side...
I think code highlighting is kind of an expected feature when you're displaying code, and since doing it server side has a negligible overhead why would you skimp out?
How do you do the View in the Browser, by decoupling your data and your presentation. After you have a presentation agnostic back-end you can add as many front-ends as you want to that data set. Once you make presentation-decisions in your web-service, every client is mandated by them. You could write a helper in your view on the server to read the data, and then format and cache/etc and that is valid decision. I just choose to keep as much view handling being done in CSS and Javascript. 
&gt; update the view without updating all the god damn data. Code will always be tokenized the same way, unless you mean change the code without having to reparse it. This is the first you've mentioned of software design, the focus was performance. But good point, dividing it like that is absolutely cleaner from a design perspective. &gt; I doubt anyone here is getting anywhere near the point that this decision matters at all. I was under the impression you thought it made a meaningful difference, in which case we should figure out the real costs involved rather than guessing. I'm really not trying to be pissy or judgmental, I've got OCD about technical details.
I'll also point you to [Eloquent JavaScript](http://eloquentjavascript.net/contents.html). Quite good stuff.
I'm not sure of the exact issue in your case, but just want to let you know that I've used jQuery UI (modals) with the Layout and DataTables plugins with great results and they work just fine on the iPhone and iPad.
Check out the videos on append.to I just started on them last week and I'm already up to speed on a lot of it.
What I am currently using is Eazel.js, because Fabric does not support rotation around arbitrary registration points.
Thanks - will give this a try!
&gt;The API is loosely based on Flash's display list (from the site) As a former Flash developer, this is pretty awesome. (edit: maybe I was a tad too enthusiastic when I first wrote this)
Learning it from scratch right now. *shudders at the math, the maaaaaath*
I'm working through Yehuda Katz's 'jQuery in Action' and it's quite nice. Thouh the resources pointed out by others here are for free and cover the same material. (then on the other side I know people who know people who found the pdf for free with a little help of Google...)
EaselJS with TweenJS have made my job very easy. Nice clean apis.
Code mirror is the lightest web ide. 
Hey, have you found any performance comparisons against any other libraries than Raphael? Having looked at the Raphael source, I can tell you it's a complete mess.
Depends what you do exactly, but you might find Paper.js quite awesome...
Why do the // thing then? Does it mean http or https? Is it only for src attributes?
It's a relative URL, so it's not just for src attributes — you can use it whenever using a relative URL makes sense. And just like any other relative URL, it will take whatever is missing in the beginning from the URL of the page you're currently on, so if that's https, it will be https. As to why to do it: It makes your code more portable. You can just drop it in that way, and don't have to worry about the protocol the page actually uses. But, as I mentioned, if everyone were using exclusively https for the jQuery URL, like Google suggests, there would be an additional caching benefit (except maybe for old browsers that decide not to cache SSL resources).
I have integrated both Code Mirror and another editor, Ace, into my own site. My opinion is that Ace is far superior. In fairness, CM is pretty good, and the basic editor starts up in much less time. The current CM demo also runs significantly better then it did for me, on my site, about 6 months ago. The first reason I prefer Ace is because the editor feels much more consistent, whilst CM often feels non-instant (a very small pause). For example the CM demo flickers white as you page up or down, whilst Ace doesn't. When integrating CM I found lots of inconsistencies when trying to interact with CM during the page load (for setting/getting the text). With no code changes, it would sometimes work, and sometimes fail. I ended up building a CM wrapper so I could interact with it at all times, and would abstract away this issue. In contrast, Ace took me an hour or two to integrate (including removing CM), and has always 'just worked'. Ace also feels much more modern, is more feature complete (far more keyboard shortcuts built in, and it can now parse and display JS errors), and it's code base is _much_ nicer to work with. The last one is especially true if you ever want to add a language onto the editor. Ace's code base is much nicer to work with, requires doing much less work, and is much better written. It's one of the rare times when I have opened up someone else's project and actually been impressed with the code. Overall, Ace easily pawns CM.
Entirely disagree. Doing it client-side will make syntax highlighting feel non-instant. Page loads, then all of it changes as the highlighting takes place. If there is lots of code on the page, then it might even freeze. Doing it server side avoids this issue. It is also straight forward to have the content pre-parsed and cached when it is stored on the server. For most websites, the CPU cost will be trivial.
It's a protocol-independent URI, which means it will use the protocol being used for the page it's on. So if it's on http://example.com, it will use http:, and if it's on https://example.com, it will use https:. (caveat: with files on your own computer, if you're not using a webserver, it will take file://, and that obviously won't work) It's valid and works in all major browsers, as well as any others I know.
Have you tried performance testing with very large source files?
&gt; As in, you're writing a CMS and want to display highlighted JavaScript code on pages? In this case, you should be doing the generation on the server side. I **strongly** disagree with that. By doing it server side, you make it hard if not impossible for many designers and front end devs to easily adjust the output to their specific needs. If the CMS in question is intended to be released to the public, then you don't want to force people to make modifications to the back end in order to change the presentation. &gt; This (assuming I'm correct about your intent) is something which you should definitely be doing on the server side, not on the client side. For best performance it should be done once during the content save process, and served from the cached save. This further exacerbates the problems with your proposed solution. Now, changes to code presentation may break old content, and migration to another CMS will likely involve significantly more effort. The only reason to do it server-side is if the CMS in question is custom and is intended for a site that is specifically intended to show large amounts of code. And even then, the decision is by no means obvious. There's a reason that even major code-focused sites like jQuery.com and the Mozilla Developer Network do this client-side, and it's not that they haven't figured out how to do it server-side yet.
I really like using Three.js, but it can be pretty heavyweight depending on what you're using it for.
Nothing specific. But when using both an hour ago, with a large JS file (jQuery), Ace was instant whilst CM was not (fast, but not instant). CM also flickers white as your scroll, and again doesn't do this. When I used CM on my own site, 6 months ago, CM would take literally as long as a minute to highlight a project with just 3,500 lines ([this one](http://www.playmycode.com/build/edit/101)). I don't find Ace to be instant in my example, but it's far more responsive then when I was using CM.
I haven't compared. And I wasn't aware the source was that bad (When reading it, I just thought I was too dumb to understand it). The only other SVG/VML library I've found was Dojo, and that just had too little documentation. Are there any other SVG libraries you can recommend?
I am working on an assignment using Sprite.js, so I will say that.
Math.teach(me);
[http://www.reddit.com/r/learnmath](http://www.reddit.com/r/learnmath)
This website does not fit in with my screen width of 1024. Google Chrome on Windows 7. Maybe you can apply: http://css-tricks.com/video-screencasts/10-fixed-width-fluid-width-elastic-width/
Besides Raphael I've also tried [jQuery SVG](http://keith-wood.name/svg.html). Better structured and modular code, but less extensive and intuitive documentation. I can't speak for their relative performance unfortunately. If your purpose is primarily interactive apps (like games) I believe your best shot would be either Canvas or just use/wrap the native SVG javascript API which is pretty good (in modern browsers).
I ended up writing my own to do exactly what I want. But I've since discovered this list of [canvas wrappers](https://github.com/bebraw/jswiki/wiki/Canvas-wrappers).
&gt; By doing it server side, you make it hard if not impossible for many designers and front end devs to easily adjust the output to their specific needs. Which is why every major CMS uses a templating system, and most of them provide internally a caching mechanism.... The ones that don't (like Wordpress) all have caching plug ins or add ons. Designers don't edit the backend, they edit the view. While I didn't go into greater depth (didn't think it was necessary to be so utterly specific) I didn't say replace the content, I said generate the output and cache it... so if you modify the view template you just regenerate the cache. This is a solved problem. It's got a highly flexible and efficient solution, which is templating and caching, because not only do styles change, but layouts do as well. The solution is the same everywhere you see it, which is rather indicative of a strong and good design pattern. Of course, you can feel free to reinvent wheels. Regenerating content every time which only changes when it's edited is silly and wasteful in my book. I could be wrong about that, but I don't believe I am.
Been subscribed for over a month, but thanks :) It's just not something I've done much of in two decades :D
I like this rotating around arbitrary display object idea. Doing that by hand with vanilla canvas calls has been a mindfuck.
Does anyone know of any of these that also work with flashcanvas?
Which languages do have a boolean xor operator?
Can't tell if sarcastic...
Y'know, I had it narrowed down to Easel or JquerySQL. Now you come along with cake.js
Awesome! Scene sounds similar to displayObject in Flash and Easel.
Ugh, seriously. When I'm doing trig and matrix math my brain feels like a car without any oil.
If you are interested in making a video game, maybe you should look into [Spaceport][1]. Flash on iOS, Android, and HTML5, basically. (The HTML5 part isn't yet released, but expect it by the end of the month.) [1]: http://spaceport.io/
A templating system isn't a solution, since you're still stuck with whatever code the highlighter in question spits out. Line numbers, spans with non-semantic classes - you're stuck with tons of html that is only there for visual purposes. Any significant changes to that HTML will require either backend editing or JS. And if it's the latter, you could just as well have gone with JS altogether. Then, there are the performance issues. Of course you cache. But if you don't save the code in its processed form and your pages change regularly (e.g. you allow comments), then you'll either still need to go through the highlighting routine quite often or cache the processed post separately. Yes, these things can be solved. But that will take a fair bit of work and remove flexibility from your system. By contrast, doing it with JS requires all of 5 minutes, as you simply drop in one of the many available highlighters. You talk about reinventing the wheel. There are front end solutions out there that are already used by tens of thousands of sites, that work for just about everyone who might visit your site, that only require semantic HTML, that degrade gracefully, and that take 5 minutes to either implement or replace. You are right: this is a solved problem. And unless you're GitHub, Google Code or another site of that kind, the solution is JS. As the name implies, syntax highlighting deals with the visual side of things. As such, doing it on the back end is only rarely a good idea.
People still pay for books? :P
Your responses make me believe you lack of experience in this field. I may be incorrect, but your recommendations really show a lack of deeper thinking about the issues here. &gt; A templating system isn't a solution, since you're still stuck with whatever code the highlighter in question spits out. That's a ridiculous statement. By the same token, a JS library is't a solution because you're stuck with whatever code the library spits out. You can cache *parts* of content too. For example, comments which are typically stored individually anyway, can have their *rendered* version cached. No need to reprocess every single comment every single page display. &gt; Any significant changes to that HTML will require either backend editing or JS. And if it's the latter, you could just as well have gone with JS altogether. Or, you could, you know *edit the view*, which is a simple task that millions of designers do every day. &gt; As the name implies, syntax highlighting deals with the visual side of things. As such, doing it on the back end is only rarely a good idea. No, just no. This is the whole reason that view logic is separate from control logic in MVC. The View section can use templating, parsing, whatever logic you prefer to implement. You're speaking as if I'm saying that the code which comes out is all the product of code. What if the product is the result of passing the content through your JS library and caching it once, instead of sending the library to the client, along with support code? The *same* code running in both places, but the library doesn't have to be sent to the client, and you're not limited by client capabilities. I spoke of reinventing the wheel because you already have wheels available on a thousand vehicles. Surely, you can indeed invent your own wheels, but I doubt you're going to make a *better* one. At best, your new wheel will merely not be *worse* than the existing ones. Unless, of course, you have a breakthrough, which I doubt, in this context. Stop. Just stop. Your solution requires rewriting an entire JS library, sending it to every visitor your site has on each visit, and additional processing for every page load. That's horrible. *Horrible*. &gt; By contrast, doing it with JS requires all of 5 minutes, as you simply drop in one of the many available highlighters. Ah. So here it is. You do not wish to take a *little* time to *write* flexible, appropriate code has the trade off of increasing the load for every visitor of your site. That's a terrible trade off. You are building sites apparently on the expectation that they will not get enough traffic for this to matter. I develop based on the belief that a site will get more traffic than I ever expect it to. That's why I minimize data transfer loads, *and* minimize processing. Go forth, beat your keyboard into a plowshare, and pray that scrubbing it with a thousand miles of field earth may scour away this nonsense.
Yea I have to say cake js looks awesome.
It's called templating [example](http://api.jquery.com/category/plugins/templates/)
Interesting you should say that, because .docx is actually an [open format](http://en.wikipedia.org/wiki/Office_Open_XML). Rename your .docx file to .zip, and take a look.
&gt; Your responses make me believe you lack of experience in this field. I may be incorrect, but your recommendations really show a lack of deeper thinking about the issues here. Approaching 15 years of experience, actually. And from your posts so far, I'm guessing that I have quite a bit more experience dealing with the common problems clients tend to run into. &gt; That's a ridiculous statement. By the same token, a JS library is't a solution because you're stuck with whatever code the library spits out. You can change JS libraries in a matter of minutes, based on design requirements. That's my whole damn point. &gt; You can cache parts of content too. For example, comments which are typically stored individually anyway, can have their rendered version cached. No need to reprocess every single comment every single page display. Yes, you *can* cache parts of content. But it requires building the CMS in a specific way, which costs more time to develop. And if you release that CMS to the public, your extra work has the net effect of causing extra work for many of the people who use your CMS, too. Unless your site has serious performance requirements, simply caching entire pages is usually the simplest and faster option. &gt; Or, you could, you know edit the view, which is a simple task that millions of designers do every day. The MVC is a useful model when developing, but it's not the gospel of the FSM. In the case of web dev, the important question often isn't whether it's "the view", but whether Bob the blogger or Dick the designer will have to touch PHP, and if so, whether their mistakes will cause important things to break. &gt; No, just no. This is the whole reason that view logic is separate from control logic in MVC. The View section can use templating, parsing, whatever logic you prefer to implement. You're speaking as if I'm saying that the code which comes out is all the product of code. What if the product is the result of passing the content through your JS library and caching it once, instead of sending the library to the client, along with support code? The same code running in both places, but the library doesn't have to be sent to the client, and you're not limited by client capabilities. Want to know the shitty part about "whatever logic you prefer to implement"? *You have to implement it.* And then you have to maintain it. And make sure it keeps working with everything else. And make it customizable. If you're at all familiar with real world development, you know that adding things to a program that aren't strictly essential is *a very bad thing*, especially on a first version. &gt; I spoke of reinventing the wheel because you already have wheels available on a thousand vehicles. Surely, you can indeed invent your own wheels, but I doubt you're going to make a better one. At best, your new wheel will merely not be worse than the existing ones. Unless, of course, you have a breakthrough, which I doubt, in this context. &gt; Stop. Just stop. Your solution requires rewriting an entire JS library, sending it to every visitor your site has on each visit, and additional processing for every page load. That's horrible. Horrible. My solution requires adding a &lt;50 kB script to your site, with several possible choices, all of which have been under development for years, and all of which are used by *many* major sites, including Stack Overflow, the Mozilla Developer network, and jQuery.com. Plus, it will take about as much time as brushing your teeth to implement, security implications are minimal, maintenance is minimal, and flexibility is virtually unlimited. Horrible indeed. &gt; Ah. So here it is. You do not wish to take a little time to write flexible, appropriate code has the trade off of increasing the load for every visitor of your site. That's a terrible trade off. &gt; You are building sites apparently on the expectation that they will not get enough traffic for this to matter. I develop based on the belief that a site will get more traffic than I ever expect it to. That's why I minimize data transfer loads, and minimize processing. &gt; Go forth, beat your keyboard into a plowshare, and pray that scrubbing it with a thousand miles of field earth may scour away this nonsense. I build sites based on the idea that launching early, offering flexibility and optimizing continuously is the way to go. You know, the whole "ship early, ship often" thing. It's pretty popular these days - you might want to look into it. But hey, in the mean time, enjoy that site you'll launch just as soon as you've added that one final feature. Wait - those two final features. Come to think of it, you also might want to add...
I'm 32 years in on software development, fifteen for web development. The first website I built was for the first public release of NCSA-httpd. I've taught courses and seminars on web development since that time. The real difference here is obvious in your message. OP is *writing a CMS*. He is not building a single web site. It is *much* more important in his case to be as efficient as possible, because other people will be developing code on *top* of his. I write code for large scale systems. It sounds more to me like you do individual mom and pop web sites for small clients not expecting much traffic. Ever. In that case, I can understand your preference for expedience over efficiency. I've worked on teams building backend frameworks for sites with well over five million hits a day. At that scale, 50k of libraries per visitor means a quarter of a *gig* of extra data each day. I would stack that against your experiences if you like, but I'd say it's that I'm obviously working in a development world which is scaled far beyond yours, because the problems I am discussing here you don't even perceive as problems yet. The systems I work on tend to not have a lick of code written until the functionality and system engineering is written, reviewed, PoC'd, discussed, altered, and published. There *is* no "oh, one more feature" or it rolls back to planning. Enjoy your small pond, if it's what you like.
With "true" multidimensional arrays, the dimension sizes are enforced (and typically fixed). With a JS multidimensional array, as you have laid out, if you change the size of e.g. `b[0]`, the sizes of the other arrays do *not* change. The result is a jagged array. This SO question is more in-depth, though it talks about C# and not JavaScript: [Why we have both jagged array and multidimentional array](http://stackoverflow.com/q/4648914/39992)
&gt; With "true" multidimensional arrays, the dimension sizes are enforced (and typically fixed). Actually it has more to do with how the array elements are stored... a true multidimensional array can be cast directly to a single-dimensional array, i.e. you could say int[][] multiFoo = new int[10][10]; int[] singleFoo = (int[]) multiFoo; And this would always be true: multiFoo[1][2] == singleFoo[1*10+2]; This works because the array is stored like this: (col0,row0)(col1,row0)(col2,row0)...(col9,row0)(col0,row1)(col1,row1).... However, most languages (including C) don't implement multidimensional arrays like this, instead they allocate an array of *pointers* to arrays, so this: multiFoo[1][2] Really means "Fetch the array reference stored at position 1 in multiFoo, and then grab the element at position 2 in that reference." The upshot of all of this is pretty esoteric, TBH, and is only really important to remember when working with C or C++ or are trying to work directly with image bitmap data or something. 99.9% of the time it doesn't really matter.
Read [JavaScript: The Good Parts](http://shop.oreilly.com/product/9780596517748.do) to get a good grasp of JavaScript first. Otherwise the heavy use of nested functions and closures in jQuery will have you running into some weird bugs sooner or later.
In a true multidimensional array you specify the number of elements in each dimension and they remain the same. So you basically allot space for that many elements. For example, a 2-D array NxM will have M columns for each N rows and is called a matrix. This is not true in javascript. The above example is an Array of Arrays. It can easily be modified to b = [ [1], [2,3,4], [5,6], [7,8] ] OR b = [ [x], [y], [5,6], [7,8] ];
C/C++ multidimensional arrays are true multidimensional arrays. The declaration int multiFoo[6][4]; declares a block of 24 contiguous ints, with multiFoo having type int [6][4], decaying (in C++ via int (&amp;)[6][4]) to int (*)[4], such that e.g. multiFoo[0] is an expression of type int [4] (in C++, int (&amp;)[4]), decaying to int * and having the same value (as a pointer) as multiFoo. Because the array inner dimensions are expressed through the type system, they have to be determined at compile time; this is fine for e.g. statistical data processing or physics simulations, but is less useful for runtime sized arrays.
Is there any way to get hold of this concatenated file from JavaScript-code (IE6/7) ?
1. `window.onerror`, `try-catch` insertion, or both? 2. What are the performance penalties? 3. What about minified code? Do/can you "fix" stack traces? 4. You're serving your JS over HTTPS, right? 
&gt; a true multidimensional array can be cast directly to a single-dimensional array Meh. A matrix is not an array, the ability to cast a matrix into an array is a language-and-implementation-dependent-hack, it's got nothing to do with "true multidimentionality". For instance, you *can not* just cast numpy arrays between dimensions, you have to reshape them (creating a new array in the process, and that new array must have the same number of elements as the old one so you can reshape a 1,12 array into a 4,3 array but not a 1,11 array into a 4,3 one)
BTW my shitty CMS is located at: http://github.com/ambiversive/asg/ And intends to one day power [improvise.it](http://improvise.it). Which you can read about [here](http://reddit.com/r/improviseit).
1. Both 2. We try our best to make performance penalties minimal, try it out and see (Early access will be opening soon) 3. No not currently. Could be coming. 4. Yes both HTTPS and HTTP
Using `try-catch` had noticeable performance effects on part of my code, so I (sadly) cannot track errors there. (`try-catch` in a tight postMessage loop is slow, at least on Chrome 12.) Maybe with techniques used by your service this can be mitigated. I must say I am looking forward to this. =]
Oh, we're in a dickwaving contest now, are we? I started web development some 14 years ago, as a teen. Naturally, at that age my primary interest was porn. As it turned out, there was quite a bit of interest in porn on the web those days. And as I soon discovered, porn webmasters needed traffic trading/circle jerk and TGP scripts. Guess what I ended up making? It might not have been the most formal of environments to code in, nor is it likely to good on my resumé, but if you're a male in a western country over the age of 25 you've probably been on a site featuring code that I wrote. And yes, many of those sites saw hundreds of thousands of hits per day - they were porn sites in ~2000, after all. The defining characteristic of most of the sites I helped build was this: limited resources during the startup phase, often followed by *extremely* rapid growth and continuous adaptation. One example of that is a site I ran myself, one of the first thumb TGPs. The day it was launched, it got 250 hits. A few days later, it hit 2500/day. The week after that, 25,000/day. If I recall correctly, it topped out at around 100k/day somewhere in the next few months - at which point I sold it, since the bandwidth was costing me twice what the site brought in in advertising. Perhaps to you, that makes me a small fry. Fair enough. But those conditions are far more indicative of the growth and performance issues a homerun website with limited resources will face than any of the big projects you've described. Now, you say that the *"systems [you] work on tend to not have a lick of code written until the functionality and system engineering is written, reviewed, PoC'd, discussed, altered, and published."* That's great. But do you honestly think it's a good idea to start recommending the practices you picked up in *environments like that* to some guy who comes to reddit asking for a good syntax highlighter? And if you think that's a good idea, do you understand that he's likely either a lone developer or part of a small team, in an environment where every feature is a major risk? Here's how small-scale development works: you start with the basics, and only the basics. You optimize the fuck out of those, and after release you start adding features slowly, on a case by case basis, largely based on user feedback. By working that way, you avoid turning your product into a piece of bug-riddled bloatware with tons of features that virtually nobody who actually uses it needs. If his CMS beats the odds and becomes popular, he can start adding features like this at that time. Step back for a moment, and consider what you did: *you suggested to a small time developer that he start adding non-essential features to software that has yet to ship.* You said you teach web dev courses. Would you really tell a developer who is working towards launching something without an existing user base that adding more features to his product before launch is a good idea? Be honest here. My guess: no, you wouldn't. Because you know as well as I do that that would be exceedingly bad advice. &gt; I've worked on teams building backend frameworks for sites with well over five million hits a day. At that scale, 50k of libraries per visitor means a quarter of a gig of extra data each day. 250 gigs, actually (ignoring client-side caching for a moment). And in the year 2011, 250 gigs on a CDN just doesn't matter all that much when you're seeing 5 million hits a day. It will set you back some $1500 per month, which shouldn't make a particularly big dent at that scale. Besides, at that point you shouldn't be using an out-of-the-box CMS anymore, anyway - and especially not a newly developed one. And finally... &gt; OP is writing a CMS. He is not building a single web site. It is much more important in his case to be as efficient as possible, because other people will be developing code on top of his. Take a quick look at just about every popular CMS on the market today. You'll notice fairly quickly that this type of stuff is almost never included in the core. That's not a coincidence. To be successful, OP doesn't need to be "as efficient as possible". Not right now, anyway. What he needs is to offer a streamlined, usable experience, without major bugs or holes, as soon as is feasible. By the time he starts seeing major traffic, he will have received tons of user feedback about which elements are actually causing real-world issues. So, to reiterate my point: your suggestion would create a number of issues, most of which can be addressed, but at the cost of a significant amount of dev time and an increase in the number of potential bugs. And there are mainstream, popular, well-tested solutions out there that largely achieve the same thing while avoiding most of the issues. For now, he's much better off spending is time on things that have a direct impact and bring direct, measurable results than on things that may or may not prove to be a bit of a problem one day. And let's not forget: a majority of the largest programming sites in the world use JS for this. Including Stack Overflow, the current #1 as far as I know. So it's not exactly as if this method doesn't scale.
Wow, so sorry you wasted all your time on a huge reply I'm not even going to bother to read. Have a good life, kid.
Here's the TL;DR: You're telling a lone developer to spend hours of dev time on a non-essential feature to achieve a level of functionality that can be gotten with a 5-minute JS solution. You argue that this is necessary because the JS solution, which is also used by the largest programming site in the world, doesn't scale well enough. And you base this all on your experience working in large teams with significant resources, which you believe translates perfectly to the dev work of a lone developer working on his own site. In other words: you couldn't be more wrong, and you gave him some of the worst advice possible.
No, it's all in memory. You can do some (very painful) debugging with Microsoft Script Debugger on IE6/7. It's better than nothing, allows for breakpointing but it has a bit of a learning curve.
How does one do "try-catch insertion" in JavaScript? Never heard of javascript code that directly manipulates other javascript code in such a manner. Can you provide a nutshell example?
[citation needed]
Not to rain on the parade here, but wasn't there another similar service offered? The name escapes me.
I built something like this (on my own time) for my current company (was using window.onerror). I was using an image beacon to ping my personal site to log the errors. One of our main sites lit up like a freaking Christmas tree! The error reporting code was only in production for 1/2 a day, but was pretty interesting to look at. I was using some JavaScript to filter the results by browser/platform/count so you could focus on replicating/fixing the big issues. I thought it was pretty cool and allowed us to be proactive in fixing problems. Being in Enterprise-land, I got kudos from management, but when it came time to build it properly and internally, it went nowhere (typical behavior). One of these days I'll get it up on github. Looking forward to checking out this release.
Not Javascript, not even close.
I can't speak to it's validity or usefulness, but fk, the code is horrid! [Example:](https://github.com/dtrebbien/BigDecimal.js/blob/master/src/BigDecimal.js) if (mag&gt;cmant.length) {/* xxxx0000 form */ len=needsign+mag; rec=new Array(len); if (needsign!=0) rec[0]='-'; //--java.lang.System.arraycopy((java.lang.Object)cmant,0,(java.lang.Object)rec,needsign,cmant.length); this.arraycopy(cmant,0,rec,needsign,cmant.length); {var $21=mag-cmant.length;i=needsign+cmant.length;i:for(;$21&gt;0;$21--,i++){ // never 0 rec[i]='0'; } }/*i*/ return rec; } Like this, wtf is up here?!? this.arraycopy(cmant,0,rec,needsign,cmant.length); { Unless I'm missing something, they're opening a set of braces that is completely useless... but he does this a lot. Perhaps it's generated code? Another [example](https://github.com/dtrebbien/BigDecimal.js/blob/master/src/MathContext.js): function toString() { //--java.lang.String formstr=null; var formstr=null; //--int r=0; var r=0; //--java.lang.String roundword=null; var roundword=null; {/*select*/ if (this.form==this.SCIENTIFIC) formstr="SCIENTIFIC"; else if (this.form==this.ENGINEERING) formstr="ENGINEERING"; else{ formstr="PLAIN";/* form=PLAIN */ } } {var $1=this.ROUNDS.length;r=0;r:for(;$1&gt;0;$1--,r++){ if (this.roundingMode==this.ROUNDS[r]) { roundword=this.ROUNDWORDS[r]; break r; } } }/*r*/ return "digits="+this.digits+" "+"form="+formstr+" "+"lostDigits="+(this.lostDigits?"1":"0")+" "+"roundingMode="+roundword; } This part just makes my head hurt :( } } {var $1=this.ROUNDS.length;r=0;r:for(;$1&amp;gt;0;$1--,r++){
Supposedly, the code is a one-to-one translation of the MathContext and BigDecimal Java classes that IBM implemented for the ICU4J project. I haven't had time to compare the two, though.
everything
&gt; I think /r/javascript is over-qualified for the job and should replace whomever wrote the job posting. FTFY
Currently we're doing try-catch insertion for most eventhandlers attached to the dom and setTimeout, this might be extended to xhr requests and setInterval as well. Basically you just wrap the function in another function with a try-catch around it and the catch part logs the error. This also lets us take a "picture" of the dom node that was clicked, for example a button.
I would rather have this than the 5k+ words that essentially say _nothing_: &gt; Looking for an energetic self-starter who is motivated and inspired to learn among some of the top talent within a Fortune-9000 environment implementing SAAS within a budding technological mismash of cosmopolitan industry best-practices and standards, developing mission critical platform applications that solve our core competency at an enterprise-class, scalable evented-IO system. We are looking to synerguze our suite of tools into our core offering by thinking outside the box. We seek induhviduals who are profit-driven, user-centric and are a strategic fit for our organization who can also work in a results-driven environment seeking to push the envelope by honing in on our bottom line to better see the big picture and go the extra mile to fastrack the knowledge economy for our relevant stakeholders in a partnership that might someday, ultimately, drive business value to our clients.
Harkens of the Adobe style logos these days...
I love you.
Yes, https://www.proxino.com.
Ah... ok. I was wondering about cases like: &lt;script&gt; var j = 'd'; j = j + 'c'; &lt;/script&gt; I just didn't see a way to do try/catch insertion around that. Thanks!