I wrote a bunch about cookie cutter scaling - https://paulhammant.com/2011/11/29/cookie-cutter-scaling/ (and others). Later Micro-Frontends started getting written about but **no side calls** wasn’t emphasized.
The webview is a component that is able to render the HTML, CSS, JavaScript... The chrome, and all other android browsers use the webview to show you the content as well. So what Cordova does, it generates a native Android app, that has a webview component, and that webview component renders your HTML app.
Ok. So do you still have to host it then?
Thanks for the write-up. It just looks like a lot of people aren't exactly clear on microfrontend architecture (eg GraphQL is not a simple drop-in solution here). https://micro-frontends.org/ is a good place to start if anyone wants to read up more on the topic.
It surprised me more. It turns out the Javascript compiler is really, really good at optimizing idiomatic Javascript. My webassembly code looped many times and was only called once so the overhead of calling was minimized. See my main post edit for details.
The JS/HTML/CSS bundle is included in the app install (APK or IPA). So it's hosted locally on the user's phone.
The C code for this equivalent test is here: Compile it with gcc and don't forget optimization -o3 gcc -O3 perftest.c #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;time.h&gt; #include &lt;sys/time.h&gt; #include &lt;math.h&gt; const long count = 100000000; double memory[count]; double timedifference_msec(struct timeval t0, struct timeval t1) { return (t1.tv_sec - t0.tv_sec) * 1000.0f + (t1.tv_usec - t0.tv_usec) / 1000.0f; } struct Vector { double x; double y; double z; }; struct Vector v(double x, double y, double z) { struct Vector nv; nv.x = x; nv.y = y; nv.z = z; return nv; } struct Vector add(struct Vector* v1, struct Vector* v2) { return v( v1-&gt;x + v2-&gt;x, v1-&gt;y + v2-&gt;y, v1-&gt;z + v2-&gt;z); } void normalize(struct Vector* v) { double invLength = 1.0f / sqrt(v-&gt;x * v-&gt;x + v-&gt;y * v-&gt;y + v-&gt;z * v-&gt;z); v-&gt;x *= invLength; v-&gt;y *= invLength; v-&gt;z *= invLength; } struct Vector cross(struct Vector* v1, struct Vector* v2) { double ax = v1-&gt;x, ay = v1-&gt;y, az = v1-&gt;z; double bx = v2-&gt;x, by = v2-&gt;y, bz = v2-&gt;z; return v( ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx ); } double fn() { struct Vector v1 = v(1, 2, 3); struct Vector v2 = v(4, 5, 6); v1 = add(&amp;v1, &amp;v2); normalize(&amp;v1); v1 = cross(&amp;v1, &amp;v2); return v1.x - v1.y + v1.z; } int main() { struct timeval t0; struct timeval t1; double elapsed; gettimeofday(&amp;t0, 0); double result = 0; int count = 100000000; for (int i = 0; i &lt; count; i++) { result = result + fn(); memory[i] = memory[i] + result; if (fabs(result) &gt; 100000000) result = 0; } gettimeofday(&amp;t1, 0); elapsed = timedifference_msec(t0, t1); struct Vector v1 = v(1, 2, 3); // printf() displays the string inside quotation printf("result: %f, elapsed: %f, Ops/sec: %fM\n", result, elapsed, (count / elapsed) / 1000.0); return 0; }
Thanks!
The WebAssembly code is here: (module (memory 12300) (func $vectorFunction (result f64) (local $v1x f64) (local $v1y f64) (local $v1z f64) (local $v2x f64) (local $v2y f64) (local $v2z f64) (local $inverseLength f64) (local $ax f64) (local $ay f64) (local $az f64) (local $bx f64) (local $by f64) (local $bz f64) (local $result f64) (set_local $v1x (f64.const 1)) (set_local $v1y (f64.const 2)) (set_local $v1z (f64.const 3)) (set_local $v2x (f64.const 4)) (set_local $v2y (f64.const 5)) (set_local $v2z (f64.const 6)) ;; vector addition (set_local $v1x (f64.add (get_local $v1x) (get_local $v2x))) (set_local $v1y (f64.add (get_local $v1y) (get_local $v2y))) (set_local $v1z (f64.add (get_local $v1z) (get_local $v2z))) ;; normalize (set_local $inverseLength (f64.div (f64.const 1) (f64.sqrt (f64.add (f64.add (f64.mul (get_local $v1x) (get_local $v1x)) (f64.mul (get_local $v1y) (get_local $v1y)) ) (f64.mul (get_local $v1z) (get_local $v1z)) ) ) ) ) (set_local $v1x (f64.mul (get_local $inverseLength) (get_local $v1x))) (set_local $v1y (f64.mul (get_local $inverseLength) (get_local $v1y))) (set_local $v1z (f64.mul (get_local $inverseLength) (get_local $v1z))) ;; cross product (set_local $ax (get_local $v1x)) (set_local $ay (get_local $v1y)) (set_local $az (get_local $v1z)) (set_local $bx (get_local $v2x)) (set_local $by (get_local $v2y)) (set_local $bz (get_local $v2z)) (set_local $v1x (f64.sub (f64.mul (get_local $ay) (get_local $bz)) (f64.mul (get_local $az) (get_local $by)) )) (set_local $v1y (f64.sub (f64.mul (get_local $az) (get_local $bx)) (f64.mul (get_local $ax) (get_local $bz)) )) (set_local $v1z (f64.sub (f64.mul (get_local $ax) (get_local $by)) (f64.mul (get_local $ay) (get_local $bx)) )) (return (f64.add (f64.sub (get_local $v1x) (get_local $v1y)) (get_local $v1z))) ) (func $add (result f64) (local $total f64) (local $count i32) (local $i i32) (set_local $count (i32.const 100000000)) (set_local $total (f64.const 0)) (set_local $i (i32.const 0)) (loop (if (i32.lt_u (get_local $i) (get_local $count)) (then (set_local $total (f64.add (get_local $total) (call $vectorFunction))) (set_local $i (i32.add (i32.const 1) (get_local $i))) ;; now read and write memory (f64.store (i32.mul (i32.const 8) (get_local $i)) (f64.add (f64.load (i32.mul (i32.const 8) (get_local $i)) ) (get_local $total) ) ) (if (f64.gt (f64.abs (get_local $total)) (f64.const 100000000)) (then (set_local $total (f64.const 0))) ) (br 1) ) ) ) (return (get_local $total)) ) (export "add" (func $add)) )
[Piexifs](https://github.com/hMatoba/piexifjs) should be able to do the trick. Note that you have to get the information to be inserted into the exif data from somewhere yourself.
I see. Thanks.
FWIW, I use Vue.js with Cordova and it works pretty well.
My results show that yes in many cases and most browsers Javascript can be faster. An exception is Safari (which has horribly slow Javascript performance but excellent WebAssembly performance). See my edited original post. I only called into WebAssembly once so I minimized any overhead.
That was 2016 or 2017. Javascript performance is quite different now. See my original, edited post. The old super fast webgl matrix code is now blown away by idiomatic immutable javascript classes.
I edited my original post.
I edited my original post.
I edited my original post.
Great write up!
The HTML File containing equivalent tests code (to the C and WASM) here: &lt;html&gt; &lt;head&gt; &lt;title&gt;Vector Math Performance Test&lt;/title&gt; &lt;script&gt; function arrayVector() { let v1 = [1, 2, 3]; let v2 = [4, 5, 6]; // add v1[0] += v2[0]; v1[1] += v2[1]; v1[2] += v2[2]; // normalize let invLength = 1 / Math.sqrt(v1[0] * v1[0] + v1[1] * v1[1] + v1[2] * v1[2]); v1[0] *= invLength; v1[1] *= invLength; v1[2] *= invLength; // cross let ax = v1[0], ay = v1[1], az = v1[2]; let bx = v2[0], by = v2[1], bz = v2[2]; v1[0] = ay * bz - az * by; v1[1] = az * bx - ax * bz; v1[2] = ax * by - ay * bx; return v1[0] - v1[1] + v1[2]; } function inlineVector() { let v1x = 1, v1y = 2, v1z = 3; let v2x = 4, v2y = 5, v2z = 6; // add v1x += v2x; v1y += v2y; v1z += v2z; // normalize let invLength = 1 / Math.sqrt(v1x * v1x + v1y * v1y + v1z * v1z); v1x *= invLength; v1y *= invLength; v1z *= invLength; // cross let ax = v1x, ay = v1y, az = v1z; let bx = v2x, by = v2y, bz = v2z; v1x = ay * bz - az * by; v1y = az * bx - ax * bz; v1z = ax * by - ay * bx; return v1x - v1y + v1z; } class Vector { constructor(x, y, z) { this.x = x; this.y = y; this.z = z; } add(v) { return new Vector(this.x + v.x, this.y + v.y, this.z + v.z); } length2() { return this.x * this.x + this.y * this.y + this.z * this.z; } length() { return Math.sqrt(this.length2()) } normalize() { let invLength = 1 / this.length() return new Vector(this.x * invLength, this.y * invLength, this.z * invLength); } cross(v) { let ax = this.x, ay = this.y, az = this.z; let bx = v.x, by = v.y, bz = v.z; return new Vector( ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx ) } } function objectVector() { let v1 = new Vector(1, 2, 3); let v2 = new Vector(4, 5, 6); v1 = v1.add(v2); v1 = v1.normalize(); v1 = v1.cross(v2); return v1.x - v1.y + v1.z; } function runTest(fn, count = 100000000) { let start = Date.now(); let result = 0; for (let i = 0; i &lt; count; i++) { result = result + fn(); if (Math.abs(result) &gt; 100000000) result = 0; } let finish = Date.now(); let time = finish - start; console.log(`${fn.name}, Time: ${(time / 1000).toFixed(2)}, Result: ${result}, Ops/sec: ${((count / time) / 1000).toFixed(2)}M`) } runTest(arrayVector); runTest(inlineVector); runTest(objectVector); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button onclick="runTest(arrayVector)"&gt;runTest(arrayVector)&lt;/button&gt; &lt;button onclick="runTest(inlineVector)"&gt;runTest(inlineVector)&lt;/button&gt; &lt;button onclick="runTest(objectVector)"&gt;runTest(objectVector)&lt;/button&gt; &lt;/body&gt; &lt;/html&gt;
Ok cool. It’s been awhile how does Cordova compare to say Vue native or nativescript?
Take the browser and just change the title....that’s about it.
I ran it in different browsers and in Node (12.3.1). It outputs `Loop A` and `Loop B` alternately on all of them.
It is hard to achieve a **real** micro frontends solution. Team independency and code independence are the most important things, I guess this is why people confused about the solution so much.
How much do you think is worthy of being called "high traffic"?
Are you sure? Autofocus is not listed under the 'constraints' at: https://w3c.github.io/mediacapture-main/getusermedia.html or https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia or https://blog.addpipe.com/getusermedia-video-constraints/ Rather: https://w3c.github.io/mediacapture-image/index.html#FocusMode is currently a *draft* standard (source: https://stackoverflow.com/questions/38699809/html5-camera-is-blurry-getusermedia-autofocus-not-working )
You're right, when I copy-pasted it into Node's REPL, newline after the first IIFE triggered the code execution, ignoring the second one. 🤦‍♂️
It is hard to answer this question if you don't know what each request does. If it is static file serving server like a CDN, maybe a million requests per second is high traffic. If you are creating an application that executes SQL on some databased maybe thousands of requests per second is high traffic. It really depends on your task.
As the article mentions, isNaN(“abc”) is true.
Some of what the article discusses is IEEE 754. But the different behavior of global.isNaN versus the upcoming Number.isNaN is all JavaScript. There is no reason a language needs two isNaN functions.
I haven't played with vue native nor nativescript, so I can't really say. My experience has been positive, though, since it lets you build your web app and then port it to mobile really easily. I'm a web developer first, so when the boss says "we need it to be an app", I can just throw in Cordova and it usually works. With nativescript, you have to be starting at the app-level rather than the web level. At least, that's my understanding.
Good point.
Agreed
Thanks for the heads up, i'll look it into it. Would you mind telling me how you crashed it? :)
Yes, I'd say they are still very relevant.
What a horrible idea.
For an large scale development team, it is a life saver trust me.
I think that Redux is still relevant when building large, complex UIs or “enterprise” apps where you want every user interaction to be tested. I’ve never used MobX but I don’t know of any reason why it would be different for that library. I think in the past, many React developers were too quick to add state management libraries when they didn’t really have the complexity or business need for it. I think those developers are now rolling back on their state management libraries in favour of the Context API and/or components managing their own state with hooks or as classes. But I don’t think that means Redux is dead. I think it’s now more likely to be used in projects that actually need it, and not just installed at the same time as React out of habit.
Man, your answer was so clear that i was able to understand it very well, ty so much!
Nice job. I might use it some day :)
I hope you do!
yes, hooks did not solve the problems with state
Define large scale?
Mobx isn't perfect, but still better than most other state management there
https://github.com/reduxjs/react-redux/issues/1177#issue-406051556 https://github.com/facebook/react/issues/14110#issuecomment-448074060
You might also try https://stateb.us, which is lesser-known, but also handles state management to the server.
btw i think react is imploding at the moment.
it has worked for something like 20 versions of chrome, at least.. so.. yeah, i guess?
More than 200 developers working on the same website.
Junior dev here. This seems to be a man just having fun with async and workers. There must be some indexing, memory reducing, library changing he can do. Absolute worst practice I have ever seen. Use multiple threading just to handle search.
Nice try. I like the simplistic approach of your replace function (even if it is not production ready). You keep a good coding style, with indentations, supportive inline documentation. I also like that you wrote tests! The Readme is informative and well written. If I would change something would be the use of Grunt as build system. I see you want to support browsers environments. Take the time to learn a modern module bundler such as Webpack (this might seem a little advance in first), Rollup or Parcel. That way you can build both CommonJS module and UMD using a single config file. Browserify is quite outdated (even if its still used by some people and old codebases). That way you won't have to write in global window object like you do \`window.rstl = require('./index')\` (bad practice in general).
Oh come on now! It can't be that bad, see look, here's a library that does the same thing: [https://github.com/bvaughn/js-worker-search](https://github.com/bvaughn/js-worker-search) The guy that made that library works at facebook on the React team now... And yea I was definitely having fun and exploring. Nothing wrong with that... I'm pretty sure there was no other solution to this problem though other than finding a better library or writing my own (which I was definitely not prepared to do) And there's no guarantee that a better library exists... so... I think the end result was pretty good... They got a fast search, I learned a lot. I'll spend some time looking for a better library. If I find one I'll mention it in the article. Thanks for taking the time read / comment!
Care to explain?
I'm also confused. Micro Frontends shouldn't be hard, it's just instantiating more than one app in the same running Dom. Kubernetes works fine already. Caching is a solved problem already. I'm not seeing what this engineering is for.
This may sound like an obvious question, but have you considered other caching technologies such as "edge side includes" (ESI) as an alternative to your layout gateway? I have used this in the past to solve a similar problem you are describing (caching header, footer with a dynamic middle), but I had access to a supported CDN, although if your in k8s I'm sure adding a varnish layer wouldn't be an issue.
Mobx is huge and most of it api is not needed anymore with react context and hooks.
Kindly give examples as to how those 200 developers are structured, and what parts exactly are they working on? Because this is a horrible idea that will bite you in the ass, this isn't a problem you solve with architecture, but with organisation.
Basically redux dev tool and easy way to test redux is the reason why I use it.
Awesome. I guess, that's what good engineer does. Good work 👍
It feels like, also after playing around with your (very informative!) demo, that some other established cache solution like Varnish would also do a lot of what you want. You can put it in Storefront, or behind individual services, and also each micro-frontend can have its own caching layer that teams can configure as they want without relying on other teams. If your solution works as well then that's great of course, but I feel like established solutions will \_also\_ do this for you, which gives you the standard benefits of using pre-made solutions (production tested, you don't have to build it yourself, new developers may know it already, etc). 6 months of requirement analysis and months of coding seems like a big investment compared to trying to use existing libraries. What problems did you run into with traditional caching layers and orchestration frameworks?
MobX requires less boilerplate than Redux which makes it good in small projects. I will never again use React without state management as it becomes a big mess. It completely links the Model and the View, and these patterns are great for GUI.
Alright, fair enough. Was a great read and very informative about the workers. My first thought will be something like this: https://github.com/LokiJS-Forge/LokiDB/tree/master/packages/full-text-search
Mobx, context, and hooks combined are amazing.
Cool lib. Looks like there's an overlap with the request batching that Facebook's data loader does https://github.com/graphql/dataloader
A good summary, but not sure why you say 'Cordova (formerly PhoneGap)'; PhoneGap is a fork/distribution of Cordova. Both still exist, but there would be no PhoneGap without Cordova. Regarding the original post, the Ionic framework used to rely on Angular (this is no longer the case) which might be where your confusion comes from. I've developed dozens of PhoneGap apps and never used Angular once. If you are taking a job that uses Cordova the skill you want and will help you the most is JavaScript/HTML/CSS, but there isn't one particular library you must use!
While many are actively contributing to react, and it's fantastic in standardizing code across whole frontend teams, and it's jsx style is intuitive. It has failed to do proper state management and proper routing. We are learning vdom diffing isn't as cheap as we assumed. redux, mobx, hooks, context etc all are answers to what's missing. there are few frameworks currently in development that are taking everything good from react. it's after all 4 years old. which was great for FE industry, some stability. But it's time to get a proper more intuitive, faster, light weight FE js framework that has batteries included (routing, state for example). The attempts by react team and others to address those issues are only further convoluting an already meh duct tape approaches.
As for the PhoneGap comment: https://en.m.wikipedia.org/wiki/Apache_Cordova I believe that PhoneGap came first.
But then there should be no fraction-creating "/", or it's double-"per". The fraction already is the "p" in "rps".
I don't know where I picked up on that idea from then. Thanks for clarifying! I've honestly always struggled to understand the difference between the two and for some reason had the idea stuck in my head that PhoneGap was a fork of Cordova with improvements...
The best way to handle this would be to put a check in the render of the component that is rendered on \`/\`, check if it has a hash and if it does then do a redirect. You can look up the re-direct from a json file.
It's a good read, but i want to call out a couple of terms that you used. Where did you get the information that tasks get prioritized in the task queue? Also setTimeout is put in a different stack? I am sure you know how JS is executed, but you might want to review that info and technicalities.
My problem with react context is that you only have access to its data in render method rather than in whole class.
I looked at your demo, and now I'm even more confused. All the content of the page is already there, it loaded with the HTML. No AJAX requests, no websocket traffic. You need all of that overhead to display what's already loaded?
I thought not including state management and routing was to let developer have the freedom to choose what they prefer. Angular is "batteries included" and many dislike it for this reason.
Don't we already have React for that? Everything is a module, everything is separated.
To be fair to the author, it really depends on what these 5K rps do. If it's just serving cached/static data, then yeah, even a small-ish instance will handle it just fine. If it involves complex data manipulation, sql queries, you might need a lot more.
For large application I still prefer Redux as the DevTools provide an incredible debugging experience and allow you to easily keep track of what's happening in the state of your application.
I would suggest, if your not sure on what an array is, you’re about a year away of solid learning before you get to hash tables. Hash tables are data structures used to improve sorting times (big O notation). But like I said, if you’re unsure of what an array is, you are only confusing yourself but trying difficult (sometimes abstract concepts). Stick to the basics, get used to arrays and objects, and mapping through each waaaay before big O and hash tables. Good luck dude 👍🏻
I don't think JS specifies the internal structure of objects. It might be a hash table, it might not. Hash tables don't rely on *only* the hash value. They use a hash function to determine which "bucket" a key/value paid should be stored in, but there can still be multiple pairs in one bucket. If that happens, they will compare the keys themselves.
The conclusion that certain tasks get prioritized is just from experience. Looking at those performance profiles in my article its pretty clear that Keypress events seem to always have priority over the browser painting. Whenever a keypress event is in the queue, the browser seems to always prioritize the key press event in the main thread before painting visual updates. I could be wrong about this, I don't remember seeing any official documentation about this, but it seems to be the case. I also know that certain events placed in the JavaScript queue are not render blocking, meaning that the browser can choose to paint before running it, unlike Keypress events. This I have heard from online content about JavaScript. setTimeout is one of the events that are considered non render-blocking. All events in the event queue like key press events or setTimeout timers will start a new execution stack when their callbacks are run. Thats how the JavaScript event loop works. Any executing code is executed in the stack context. As soon as all of the functions in that stack complete and the stack empties out, the event loop can check the event queue. If there is an event there with a callback, it will stick that callback into the now empty stack and start a new execution. This is what I mean by a "new execution stack." Am I getting any of this wrong?
Nicely done but I dont see it lasting long once they find out your using free keys over and over. Surely the point of the 60 pm limit is to encourage you to buy a subscription.
&gt; MobX requires less boilerplate than Redux which makes it good in small projects This is not true, we are using mobx for a large application at my company, how is mobx not suitable for large projects?
Batteries included isn't something you would want in a framework, ever, unless you're fine with it becoming a niche. Things develop and progress naturally, our requirements aren't fixed in stone. Routing with the old hash tables was inferior to the higher order component approach, and modern hooks-based routing makes hocs/mixins look really, really bad. So if anything, going out of its way to let things progress has all but helped React to always stay on top.
I didn't say that mobx is not suitable for large apps. I think it is.
you want to use templates and api data and micro caching on the backend. i’ve handled up to 40k/sec dynamic requests with almost no caching and php and 12 years ago. i doubt that should be a problem these days to handle 5k/sec...
Don’t worry about the degree unless you’re applying for data science or machine learning positions. I’m a college dropout (unfortunately) and a Lambda School grad (boot camp) living a dream. The only advice I would give you is - go balls deep. Go hard. Drop most of your extracurricular social activities. Drinking, chilling, wasting time playing video games, etc. Consider your new endeavor a life and death situation. Like you’re in a war zone. If you can clamp down like that for a year, the benefits you’ll reap are enormous. I’m still in awe of being a bum who went from 30k not too long ago, to choosing between two offers upwards of 65k. Soon enough I’ll close in on the 90 - 110k range. I believe none of this would’ve been possible w/o that initial psychotic mindset.
They are fine. Redux has hooks now and Mobx is working great. If you're searching for something that's easier, there are so many options now, but they're still all flux and most of them are compatible with Reduxes subscribe/unsub api, so they're exchangeable. This is the one we use at work: [https://github.com/react-spring/zustand](https://github.com/react-spring/zustand)
I don’t think hash tables have much to do with sorting?
So as Reashu said, javascript is a spec, it generally does not specify how to actually implement things. That being said, more often than not, when people talk about javascript implementations, they're referring to the v8 engine implementations. The short story is that the people over at google are fucking wizards that do all sort of amazing optimizations. A longer answer is here: https://v8.dev/blog/fast-properties
Sorry, but the reasons people use mobx for (easy, "mutable" state that "just updates") is very much orthogonal to React context and hook.
Have you tried `Class.contextType`? [https://reactjs.org/docs/context.html#classcontexttype](https://reactjs.org/docs/context.html#classcontexttype)
Thank you for your feedback :) What do you suggest to use instead of grunt (gulp?) How can I make the replace function be production ready ? I will make the switch to webpack. :) Thanks again.
&gt; Lock files are super useful if you build an application like a web server. However, if you publish a library or CLI to npm, lock files are never published. Meaning your users and you might use different versions of dependencies if you use lock files. Hm? I thought that's what a lock file is for: listing the exact dependencies even with their build/patch number
That post is so good. Thank you so much
Javascript has got some weird baggage because of its history. Objects are a general purpose thing that can be used as "objects" (as in object oriented, with methods, inheritance, etc), they can be used as what you are calling hash table, and I believe behind the scenes Arrays are also hash tables using number keys and supercharged to work efficiently in that way. Check out how Objects and Arrays are kinda the same thing const arr = [1, 2, 3]; console.log(Object.keys(arr)); //=&gt; [ '0', '1', '2' ] console.log(Object.values(arr)); //=&gt; [ 1, 2, 3 ] const obj = { a: 1, b: 2, c: 3 }; console.log(Object.keys(obj)); //=&gt; [ 'a', 'b', 'c' ] console.log(Object.values(obj)); //=&gt; [ 1, 2, 3 ] But these days, for data structures, use objects like 'structs' and Map as associated arrays. And of course use objects for OO too. As far as hashing of the object keys, I'm not sure whats going on, I couldn't find it in the spec, but I do know that object keys can only be strings and symbols, anything else is coerced into a string. I'm not sure if any 'hashing' is taking place.
Hash based routing is much better than hooks or HOCs and especially that react-router garbage
I think my confusion stems from earlier in my learning process, 1-2 people started talking about JS objects being hash table or something like that. It sticked so today i learned about hash table it was half makes sense half doesn’t
If you configure your module bundle (webpack, rollup, parcel) correctly you will be okay. Search the web for tutorials on how to use those. Those are the replacers to Grunt. The bundlers (webpack, etc) will export a production ready code themselves, no need for more effort. ;) (I starred your repo, as I liked very much your codebase.)
They are going nowhere, so yes,still worth learning. They are clearly overused for small apps imo. But both improve the performance of your app by implementing stuff like memoization and controlling when your components should render. So if you want any of these things and are not willing to write it yourself, then you'd have to use a state management library
You can basically take every permutation of tools, and then add “are good” and “are bad” to them like this, and people will strongly agree with both statements. This is our life.
It's a view library dude.
I think it's a good idea to keep framework specific questions in r/reactjs, r/vuejs, r/angular etc. They are all very active subreddits.
I also started working as a dev after completing a bootcamp! My experience is that you never stop studying after it.. I recommend checking out sites like Pluralsight (weekly free courses) and freeCodeCamp and starting working on some of their materials to get up to speed! They have lots of good stuff that will help learn and build a good portfolio. Also totally agree on going to meetups being really helpful. :) Good luck!
I wouldn't bother about Redux/MobX from the very beginning of an application's lifecycle. I would start small: [useState and useReducer](https://www.robinwieruch.de/react-usereducer-vs-usestate/). Whereas useState is used for primitives and simple state transitions. Once the state becomes an object/array, or state transitions become complex, or you are forced to call the updater functions from multiple useState functions one after another, migrate the conditionally coupled useState hooks over to one useReducer hook. Once the application grows in size, I would consider to add React's Context API to avoid prop drilling. [useState, useReducer and useContext](https://www.robinwieruch.de/react-state-usereducer-usestate-usecontext/) are a great fit for these mid sized projects. Only if the application grows in size and complexity and I see no way around it I would introduce an external state management library like Redux. For instance, I had applications from clients which were almost forced to use Redux Saga because of their complex control flow weaved into the state management logic. Eventually they settled on using [RXjs to map their complex control flow with React's state management](https://www.robinwieruch.de/react-rxjs-state-management-tutorial/). Best case for "there is no solution which fits all use cases". If I have a GraphQL backend, I would go with Apollo Client but not necessarily with [Apollo Link State](https://www.robinwieruch.de/react-apollo-link-state-tutorial/). That's just a personal preferences, because I think React's own state management can be used separately and is super powerful on its own. If the application grows in size and complexity again, I would consider to add Redux next to Apollo Client. [Redux for local data state management and Apollo Client for remote data state management](https://www.robinwieruch.de/react-redux-apollo-client-state-management-tutorial/). However, I would want to postpone introducing this tech stack as long as possible.
Initially, the reason you'd want to reach for a state management tool is to avoid "props drilling". I hear lots of people saying "When your application becomes complex" but in my experience that "when" happens pretty early in the project life cycle, so state management is usually something I start considering pretty early on, maybe when we reach about 6-7 components or the tree is 2/3 levels deep. There are lots of people who believe that hooks and the context API have made redux irrelevant - but that's simply not true and I think those people have missed some of what Redux does. More accurately: Context/hooks allows you to \*\*defer\*\* the decision to use redux until a later stage in your application's development. One of the biggest problems with using context / hooks (specifically the \`useReducer\` hook) is that if you only have one context, all subscribed components will re-render on change even if nothing relevant changed. To get around this you end up needing multiple contexts and that can get pretty unweildy pretty quickly. With redux, it's smart about when it re-renders because you define (using \`connect\`) what stuff is relevant to the component. You can change the state to your hearts content and your component will only re-render when something relevant changes. Couple this with some awesome devtools, utility functions and opinionated/idiomatic approach and you have some extremely compelling reasons to continue using redux.
I just started a new job where they use Mobx over Redux. Mobx does state management using mutations which goes against the flux pattern. You end up with far less boilerplate. I still like redux but now that I'm using Mobx I'd definitely say it's worth also knowing Mobx.
Also, start talking to recruiters now. Once you find one you connect with they can help you get a job. I know recruiters have a bad rap, but they make getting a job a lot more straightforward.
Hey, I PM'd you just now
Please continue to have fun writing more articles. These articles are much more unique than the average daily "introduction to _______" posts.
So there, you have choice, imagine React got stuck on hoc's b/c "batteries included". On a personal note, hooks and routes are pretty neatm, things like [transitions](https://codesandbox.io/embed/wouter-animated-transitions-w-reactspring-bfruo) are really easy to make.
It makes very little sense for you to be building this way. Even with 200 developers this seems like an abhorrent design choice. Multiple Gateways, where is the value this gives your organization? I think you could have solved this with better organizational and architecture changes rather than continuing down this path that will not scale, I look forward to your post mortem.
Your response doesn’t seem to be indicative of why caching isn’t possible.
`componentWillMount()` is deprecated though so I'd recommend proceeding with caution.
just curious..what would you consider a large project vs a small one? Total noob but is there some benchmark or threshold that is generally abided by that constitutes this?
Weather data is getting more locked down i have seen. The NOAA is an excellent place for free historical weather data. Google even hosts it on BigQuery for free. https://www.google.com/amp/s/cloudblog.withgoogle.com/products/gcp/global-historical-daily-weather-data-now-available-in-bigquery/amp/
200 developers? Are you trying to conquer a small nation?
Take a couple of good react developers, over 1-3 months of full time dev work to make a core product. Then expect this product to grow for more than months at a time. There is no "quantitative" value for this measurement, but things like the man effort to achieve the solution over the maintenance and expansion period come into play significantly.
Excuse my ignorance as i am new to microframeworks but why is the multiple api gateways? Isnt the point of a gateway to point the request to the right microservice endpoint? If that's true would you need one for the app and not one for each microservice?
I would vote for learning Redux, the API is simple and elegant and under the hood it’s moving to context and hooks. Best of both worlds imo.
Nice
I haven't learned React yet but can anybody tell me about Redux if it's only for mobile or for what it is used mostly because it's a library of React and is worth to learn it beside React?
Sounds like you are writing code to solve corporate organization failures. "Header team doesn't know footer team" sounds like you work for a shitty company. I'll bet family day picnics are fun at your work.
I’ll probably get downvoted to hell for this but with the hooks and context API I don’t believe Redux is necessary. Not to mention that exposing all of state to every component that uses Redux is really just bad practice, especially now that prop drilling isn’t the only way to avoid that. That being said, apparently they are rewriting redux and there’s a chance that the new version will be a more useful implementation but currently it seems to be an unnecessary abstraction when the tools are now in place to natively solve the problems that Redux solved. I learned Redux a few years ago, but the app I currently work on is utilizing hooks and context api for all state management and it is a very large and complex app. Thus far, I haven’t encountered a problem that Redux solves better than what they’ve built into React.
Rust for example [officially recommends this](https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html). They handle cargos (packages) very similarly to npm. &gt; If you’re building a non-end product, such as a rust library that other rust packages will depend on, put Cargo.lock in your .gitignore. If you’re building an end product, which are executable like command-line tool or an application, or a system library with crate-type of staticlib or cdylib, check Cargo.lock into git. The reason is explained [here](https://doc.rust-lang.org/cargo/faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries). I think it's safe to apply this to javascript too. Same story. &gt; ... In other words, libraries specify semver requirements for their dependencies but cannot see the full picture. Only end products like binaries have a full picture to decide what versions of dependencies should be used.
"Why im still using sticks to create fire in 2019"
Yes. Also checkout [easy-peasy](https://github.com/ctrlplusb/easy-peasy) which is a friendly wrapper for Redux (and friends like Thunk) with a hooks-based API. I've found it a great introduction to Redux concepts and principles. [Here's the video](https://www.youtube.com/watch?v=5gUHfe-ETuo) that turned me onto easy-peasy and also touches upon your question.
Highcharts.
Charts.js I think? I forget if it has pie charts, but I've used it in the past for charting.
the most powerful I know is https://www.highcharts.com/demo
Having read the article, the gist of their point is: "it's easier and simpler". I don't agree with the article, I don't agree with their points, and I think the author has some catching up to do. This might have been true in 2012. Not in 2019.
You should at least try out one framework, I'm sure you won't touch jQuery again :P
Redux isn't for mobile. It's a way of managing data (or application state) inside of your application. If you are developing a sufficiently large React app, then there will come a point where managing all the data in your app becomes confusing and messy. This is what Redux and other state management tools solve. It creates a single source of truth and a standard flow for updating that source of truth. Redux is not a library of React. It is an independent project that was developed to be used with React, but can be used with any JS project in any framework.
oh, I thought Redux was a library created from React, but I haven't seen Redux mentioned in many posts expect frameworks React, Vue, Angular.
D3 if you wanna get real into it
 //Lyngstad @SPIEL apps //Comment lines are placed OVER the code it describes var A = "TIP CALCULATOR &lt;br&gt; " document.write(A + "&lt;br&gt;") var percent = 0.20 document.write("Percentage used: " + percent + "% &lt;br&gt;") var spent = 120 document.write("What you spend &lt;i&gt;without&lt;/i&gt; tipping: $" + spent + "&lt;br&gt;&lt;br&gt;") console.log(A) //declares what getCost is and runs this function var getCost = function(price){ //says that the tip is equal to the price the user inputs multiplied by a the percentage chosen var tip = price * percent; //the cost is the tip added to the price. var cost = tip + price; //display the original cost + the tip in order to display the TOTAL cost. console.log("$" + cost) document.write("&lt;b&gt;The total cost with the tip&lt;/b&gt; $" + cost) //If the getCost(price) is zero the tip is zero. If over zero it displays what you should tip. if (tip &gt;= price){ console.log("there is no money spent") document.write("&lt;br&gt;&lt;b&gt;there is no money spent&lt;/b&gt;") } else{ console.log("&lt;b&gt;You should tip&lt;/b&gt; $" + tip) document.write("&lt;br&gt;" + "&lt;b&gt;You should tip&lt;/b&gt; $" + tip) } } //Run the function. Spent decides with what ammount. getCost(spent) Takes a percentage of a number pretty much. But I am having a hard time making it possible for users to input their own numbers and percent.
It can be used in both Angular and Vue, but it's not popular because they come with their own solutions. React is not a batteries included framework, it's just a view library with an ecosystem built around it.
As many others have said, I expect that Redux will still remain relevant. How we interact with it may change a bit. For example, the new react-redux alpha includes a hooks API which you can use instead of the traditional connect HOC. And as always, Redux like all tools is not a silver bullet. Not all apps need Redux. Not all state is global. However knowing when and how to properly use it can make your life much easier.
Hi /u/VeltixOfficial, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
[removed]
If the answer is not "because I have to support legacy code" then the author is an idiot. [goes and scans article] Confirmed - the author is an idiot.
Reactn seems to also do a lot of what Redux does with less boilerplate. But I agree if you are making enterprise level software it's very useful.
Instead of saying if it grows in complexity I'd say, if the likelihood is high it will be complex in the future to go ahead and start with it as it'll save time in the long run. Most larger projects are going to take months to create if not longer.
Hi /u/georgegkas, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; Having read the article, the gist of their point is: "it's easier and simpler". You left out a critical part: "easier and simpler *than vanilla JavaScript*". This isn't about jQuery vs. React/Vue.js/SPA. You don't need an overengineered app with some fancy architecture for 400 lines of essentially simple Python code (or whatever), and you don't need an SPA framework for essentially simple frontend requirements. Most websites (even quite a few webapps) are not fundamentally complex. Of course, jQuery vs. SPA is kind of related, which I why I included a brief section on it at the end, but it wasn't the main point. I already did this discussion [on HN](https://news.ycombinator.com/item?id=20021289) btw; control+f Carpetsmoker (my username there) for some more in-depth discussions about that specifically, if you're interested.
Thank you :)
Use redux _only_ when you need to share state in your app. I’ve made the mistake of putting _everything_ in redux, and it’s just the worst. It is incredibly powerful, but you need to know when to use it. Start with component state, then migrate individual state pieces to redux when they need to be shared with some other part of the application.
"Because I don't know how to write better ES6" thats about it do you still use tabels for layouts as well?
Yes, but HN is full of the kind of bitter old devs who resent any of the "fancy" new stuff, you are playing to the audience ~~karma whoring~~ by posting that stuff there
layouts? pffffffft stuff for script kids HTML3.2 for the win, if you can't keep me interested using &lt;p&gt; &lt;a&gt; and the occasional &lt;img&gt; your stuff is not worth reading /s
I didn't post it here, or on HN. And there are plenty of people on HN who disagree. Excellent constructive debate by the way 👍 Guess I'm just a "bitter old dev" by expecting some amount of reasonable debate instead of insults and handwaving 🤷
Here this might help you get some useful data when making these kinds of important choices: [https://www.npmtrends.com/mobx-vs-react-redux](https://www.npmtrends.com/mobx-vs-react-redux) If you are new to React, my opinion is master React (don't forget testing) then lightly study Redux (enough to pass interview questions). As someone who has been working with React for years, I would focus more on what React can do natively, but be aware of what state management packages are popular and be able to speak to common interview questions.
Usually it's overengineering but it may have its usecase if some parts of applications are used more often and you'd want to do separate scaling on them
Fair enough, didn't realise you didn't post it. Still, you decided to go against current practice because you think you know better. You don't. I am sure someone will try to explain to you why, but I am not going to be that person, sorry. I just don't like the implicit arrogance behind your "I know better than the experts". You are basically the FE equivalent of an antivaxxer!
how does your latency/CPU/memory looks like for requests with and without warden? how much are your gaining with this. &amp;#x200B; I agree your point about schema but not able to understand other pain points, correct me if I'm wrong, looks like you are handing off your requests to a API layer generate data which shouldn't block any requests so , and I do not see any memory DB here, how did you try caching the data? were you able to try anything like Redis? it could save lot of memory for your app, and reduce file read/writes from node.js
Consider Leaflet for your mapping needs.
\&gt; next week I have the opportunity to attend a two-day workshop on advanced state management with Redux and MobX Is it by Frontend Masters, by any chance? :-) I would say that if you already have an intermediate-to-expert level of understanding of redux, you likely do not need a workshop on redux (unless it includes sections on some specific middlewares you want to learn). Redux’s api is extremely simple; and so is MobX’s. As for whether they are worth learning, I am sure they are, even if you don’t use them in your React projects. Redux is a powerful and agnostic enough concept to be used outside of React — it has been adopted by Angular as ngrx; and if I remember correctly, it has been adopted by the Polymer team as well. MobX gave rise to MobX state tree and to Immer; and Immer then cross-pollinated the redux ecosystem back and was used in redux-starter-kit. Those are basic approaches to state management that are always worth knowing.
If you’re app is going to be anything other than trivial I recommend using Redux and Thunk for managing server side data. I also recommend carefully using react-router to manage view navigation. Keep component state - like button disabled, or checkbox checked in the component. Also organize your state and actions and reducers and tests etc all in the component sub folder. Yes - it can seem like a lot of boiler plate - once you’re used to it that extra typing blends in to your workflow. The main benefit I see is in debugging and testing. The decoupling benefits become hugely advantageous as the app gets larger.
If you’re app is going to be anything other than trivial I recommend using Redux and Thunk for managing server side data. I also recommend carefully using react-router to manage view navigation. Keep component state - like button disabled, or checkbox checked in the component. Also organize your state and actions and reducers and tests etc all in the component sub folder. Yes - it can seem like a lot of boiler plate - once you’re used to it that extra typing blends in to your workflow. The main benefit I see is in debugging and testing. The decoupling benefits become hugely advantageous as the app gets larger.
This looks like a thing from a YouTuber called Traversy Media. I really enjoy his tutorials, and if you got it from him, I recommend watching his other web development tutorials. https://youtube.com/techguyweb
te he escrito un email. :D
The best approach here might be to use a library that supports cancelable promises. That way on form submit you can cancel the others, let the form submit happen, and then re-queue the others once the form gets a response.
I agree too, hence I asked the other guy. 300k RPM with SQL is definitely huge traffic
"My combination of 68k emulator and forth interpretor are amazing, it isolates the host from any malicious actions from the user, while simultaneously making this area of code super hostile to other members of the team. Job security 101." Ya know... I'd watch this Ted talk...
Hi /u/Mr_Developer01, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/slinks_ps, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/alcester, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TriLamSr, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SonOfSpades, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/El_GoW, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/chovy, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nomasqueso, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sh6dc, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Please don't use postinstall scripts for this kind of purpose. They trigger useless deoptimizations of the package when installing them on the disk (Yarn cannot know whether they mutate the disk or not so it needs to put them inside their project-local folder, instead of sharing them between projects if possible).
What is its replacement?
Redux's API is neither simple nor elegant and is hands down the worst part about using it lol
What? Are we even talking about the same thing? Redux was the easiest thing I’ve ever had to adopt. Saga sure are complicated but that’s next level usage.
I'm not 100%, but the general consensus on the internet seems to be using the component's constructor or \`componentDidMount()\` instead. &amp;#x200B; Rationale: [https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html) &amp;#x200B; SO: [https://stackoverflow.com/questions/49206280/componentwillmount-is-deprecated-and-will-be-removed-in-the-next-major-version-0](https://stackoverflow.com/questions/49206280/componentwillmount-is-deprecated-and-will-be-removed-in-the-next-major-version-0) &amp;#x200B; Since this mentions using the constructor for things that don't produce side effects, and \`componentDidMount()\` for things that do, then \`componentDidMount()\` may be the replacement in this use-case, but then I imagine that would finish rendering the component prior to the redirection, which may not be acceptable.
I'm a simple man. If I still use jQuery, it's because my boss won't allow me to rewrite the app.
This seems like an overengineered clusterfuck band-aiding problems that could be solved more conventional ways.
Cronjobs
I'm a Redux maintainer. What do you mean by "rewriting Redux"? The only think I can think of that's even close to that is [the new React-Redux v7 implementation we released](https://github.com/reduxjs/react-redux/releases/tag/v7.0.1). That rebuilt the internals, but the public API (`connect()`, etc) is still the same. The Redux core definitely isn't changing.
A small project would something like 1person for less than 2month. While a larger project something like 3+ persons for &gt;3month
&gt;const customObjects = \[{}, {}, {}\] customObject.forEach(customObject =&gt; { if (customObject.checkForThing()) { maybeDoSomething(customObject) } }) I'd use a filter instead of the \`if\` inside the forEach, otherwise +1
I manage a lot of small and big projects alike. Getting rid of Redux was the second greatest decision I made (first being rewriting everything with TypeScript).
You just need to learn about databases in general. There are generally two flavors SQL and NOSQL. Start with SQL as it is extremely common and useful skill set to have. Install a database server like PostgreSQL locally, and then learn the SQL language and database concepts. Then check out a NOSQL solution (a lot of the documentation is written for people coming from SQL style databases) like Mongo. You don't need to be an expert in these specific technologies, you are looking to understand things like how to join to tables, and how key value storage works.
By my understanding you're looking into building a web app where a user can input information and this information can be retrieved later to view. If that is the case (if not you can correct me) then you'll need HTML/CSS for the user interface and Javascript for the functionality and accessing the database where the information is stored. The database itself can be relational (MySQL) or not (MongoDB) My advice would be to start with a strictly front-end approach to start off (HTML CSS JS) with MySQL that resides somewhere (could be local only) and is accessed through JS. Once you have that working then you can start on the 2nd iteration, such as including a login section and later on potentially going into a back-end/RESTful API to access that DB and start reading about best practices. And of course afterwards you can increase the complexity/security and start implementing best practices too, it's all up to you
I must be mistaken. I heard rumors about rewriting it but maybe it was just in reference to adding hooks.
The real question is, is React still worth learning for new projects? The answer is not a "yes" without thinking. &amp;#x200B; Nowadays, there are tooling that have been built with modern problems in mind, specially virtualdom bottleneck. &amp;#x200B; So maybe, give other things a shot :) Like [svelte.dev](https://svelte.dev) :)
Don't want to assume out of the blue, but if you're train of though is that somehow React context and hooks address the problems Redux was ment to solve when no. Not in the slightest. Context or Hooks do not address the state issue. They help to deal with prop drilling. That's about it. Some people might be under illusion that it does, because it was quite common to use something like Redux simply to solve the prop drilling problem. However, that's not what Redux was ment for.
I've been noticing tons of articles on this and none on build configuration with Web Worker as modules, which was the thing I struggled with the most initially :)
I would second fellow redditor here. Last week we had to refactor from Context to Redux. Not fun.
Indeed good point! If you and your team know that the application **will** grow in size/complexity, you may want to plan it ahead instead of having on large refactor eventually. Thanks for adding it! :)
Yes, good point! :)
Hi /u/Davejco, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
great advice and exactly what i have been reading...so to recap: 1)Learn html/css first(this is how the site will look) 2)Then javascript(functionality and retrieving data back and forth from the database) 3)mysql for building the database I just need to be able to have people sign up for events, keep track of who volunteered, and i need this to be accessible by the web and mobile
Small P.O.C. of [React Spring](https://www.react-spring.io/): [http://springs.davejco.com/](http://springs.davejco.com/)
Any courses you guys recommend?
Poking around that persons other repos suggests that this might be a JavaScript application designed to run on the Firefox OS. The readme that they have for the fork of ["Firetext"](https://github.com/asdf23/Firetext) has some details, but I can't even get the simulator to run on my machine.
What size project are we talking? If you have lots of entities it's hell to maintain.
Talking about a crypto wallet in this case, its just a matter of sticking to a common pattern and principles, &amp;#x200B; Since I mentioned redux-saga it has transformed how I build applications, generators are the future of execution flow, couple that with the advancements being made towards WASM, and we're going to be in an amazing place in about 5-7 years.
Yes they are worth learning and necessary if you're going to be working in a professional environment. I agree with the general theme here of "they're necessary for complex apps but not for small/simple apps." However, I would add onto that by suggesting that when in doubt, use a state management tool. &amp;nbsp; Let's say we're setting out to build an app and we don't know whether it's going to end up being a simple toy/utility or if it's going to grow into a complex application. We can either choose to forgo a proper state management solution until it becomes absolutely necessary, or we can start off right away with one. This leaves us with 4 possible outcomes depending on our decision: 1. We start off with a state management tool and the app ends up being simple. 2. We start off with a state management tool and the app becomes complex. 3. We forgo a state management tool and the app ends up being simple. 4. We forgo a state management tool and app ends up being complex. &amp;nbsp; So what will the consequences be of each of these outcomes? 1. You wasted some effort on the overhead of the state management tool. However since in this scenario we know the app as a whole was simple and small, you will have only wasted a little effort. 2. There is no downside here, you made the right choice and saved yourself a LOT of effort! 3. There is no downside here, you made the right choice and saved yourself a small amount of effort! 4. You built a complex app without a proper state management solution, and when the time comes that the app starts going off the rails and becoming a mess, you're going to have to stop the project and perform a major refactoring of the entire code base to fix this. You've got a big problem on your hands! &amp;nbsp; So looking at those outcomes, choosing not to use a state management tool gives you the possibility of saving a small amount of effort vs the risk of creating a major problem. Choosing to use a state management tool gives you the possibility of saving a lot of time and avoiding a major problem vs the risk of wasting a small amount of effort. &amp;nbsp; From a purely risk vs reward analysis, it seems clear that leaning in favor of a proper state management solution is the way to go. The only time I would recommend skipping a proper state management tool is when you are 99%+ certain of what you are building and that it will never require anything more than extremely simple state management.
First hour and a half is just MPJ rambling aimlessly and chatting "about stuff". He then spends almost an additional hour setting up maybe a dozen lines or so just to send an event to Pusher and going out on various tangents. And only on the final half an hour or so he does something related to the title, and then again the quality of the result he arrives at is _very debatable_ and feels anything but finished. It makes me wonder how he got so popular, really.
Your conclusion about key events is wrong and you don't know how setTimeout works. I hope u get criticism in a right way. Firstly, Nothing in the queue gets prioritized, thats for sure. You might be confusing it with how the JS engines prioritize the function execution. With that in mind, whatever comes to the queue get executed one by one. Secondly, setTimout is not part of JS. It's a global function given by the browser or Node. Because browsers run native code, they can run tasks in a separate thread. The same is with Node. That's the reason why setTimeout does not block the JS thread. Regarding browser repaint, please watch this vedeo, it will give you a better answer than whatever i say about event loop. https://youtu.be/cCOL7MC4Pl0
Any particular issues you ran into switching to Redux? When you get a chance, please check out our new Redux Starter Kit package. It includes utilities to simplify several common Redux use cases, including store setup, defining reducers, immutable update logic, and even creating entire "slices" of state at once: https://redux-starter-kit.js.org
Kotlin is an exceptionally easy language to learn and there are tons of resources out there. The official documentation is thorough enough that you don’t need a huge gaggle or shitty half baked blog posts full of half truths and misinformation like you have in the JS world. It sounds like the author didn’t know any other languages but JS and lacked the CS background, so rather than learn stuff and force himself to get better, he bailed and went for the easier option because it was something he already knew. I’ve seen it a hundred times, where JS developers know JS and think they know how to think like a programmer, but they only know how to think in JS. Kotlin is a fundamentally different, much more flexible and function/object oriented, paradigm and reading through the lines, that seems to have been the impedance here. The fact that even his most trivial example included an any means he didn’t really get to the point where he grokked TS either. Wherever OP is working needs better seniors to do better teaching. Even the guy who left should have established some of these fundamentals before the Kotlin transition started taking place. And Kotlin has a huge download because it has an enormous standard library and you don’t need to install 4500 3rd party packages to get anything done. Just so much bad information here caused entirely by a junior lacking good leadership.
I'd give it simple, but it's so simple, you need a ton of boilerplate for everything, which seems like maybe a counterpoint to elegant. This is kind of how I feel about React in general, though. By the time you have any kind of complexity, there's so much nesting and boilerplate, it makes me wish I had a more complex API with more powerful primitives.
What are you using instead of Redux?
Don't know who downvoted you, I'm completely with you on this analysis.
Simplicity and minimalism are different things. Redux's API is minimal, which is often conflated for simple, but frequently actually works counter to simplicity. A simple API allows you to write minimal code, hides complexity, and infers your intentions based on how it's used. Redux does none of those things, because you have to write so much boilerplate that demonstrates the fully complexity of your application while telling it exactly what to do.
While you make several good points, it's also possible that regardless, a JVM language wasn't the best choice for this project, and for Lambda. Especially considering that OP will be the one supporting it.
Under the leadership of a JVM veteran, it's a fine choice, especially since there's Graal now which should get you cold boot times comparable to anything else. If OP's the only one supporting it, writing it in a language that he doesn't know very well is obviously not a good choice, but the whole post came across as blaming Kotlin for inadequacies elsewhere.
I think you're conflating "simple" and "easy". I would argue that reduxs API is in fact simple, which may come at the cost of ease. Check our Rich Hickey's talk Simple Made Easy for a much more elequent explanation of the subject.
What you're describing as simple is closer to what I'd describe as elegant. I think of assembly language as simple, but it has the problem that doing anything complex with it is a ton of code to write. When I think of elegance, I think about stuff like Python's collections, and some of the stuff you can do these days in JS with destructuring and spread operators, map and reduce and stuff. They let me express a complex operation with very little code.
I agree with just about everything that you said, but there is one major reason why I think that this guy made the right choice &gt; Except nobody on the team knows Kotlin... the whole team knows at least JavaScript Having lead a team that inherited a project where no one on the team knew the language, having a bit of experience, yeah I could pick up proficiency in a couple weeks, but it was a real struggle to get the more junior devs to a point where they were not making basic mistakes. And ultimately, we wasted a month or so just onboarding. I'm not saying we should have rewrote the app, but there should have at least been 1 dev that knew the language for every one that didn't so that the peer review system could work properly. I'd fight it if it were thrown on me again.
I don't disagree with you at all, and the problem OP has seems primarily to be leadership at his company. I'm in a similar situation: I'm a big proponent of Kotlin over Node and I've been trying to convince my boss (CTO) to allow us to start making the transition. Due to business pressures, progress has been slow, but I wrote a single service that doesn't do much but cross references Google's geolocation API with a MySQL database in Kotlin, and I've been using that to gradually teach my team Kotlin, one person at a time. A junior just opened a PR against it and has been hilariously enthusiastic about how much he enjoyed Kotlin/Spring because of how little code he had to write. So now there's two of us on the team that know Kotlin/Spring well enough to maintain the one microservice. Next time our team has a microservice to write, we'll likely write it in Kotlin together and loop in a third developer, and so on and so on, until six months or a year from now, the entire team will be plenty proficient... and then we can start transitioning our old code off of Node and to Kotlin, and training the rest of the department, because the business reasons for switching to Spring/Kotlin on the backend largely speak for themselves.
I couldn't imagine building a new react app without Redux unless it's just a static webpage. Context and Hooks are great but Redux and it's various middleware make it so much easier to separate the entity / actions / business logic from the presentation. That way changing the layout of your page doesn't impact how you store data.
write great up
Our new [Redux Starter Kit package](https://redux-starter-kit.js.org/) should help with that :)
how can i implement this using firebase
Why would you dismiss worker threads for search as bad practice without understanding the problem being solved? I agree that conventionally in most cases it would be unnecessary, but to claim it is *bad practice* is telling of a green developer who's yet to be exposed to real world problems like legacy code bases and obscure browser restrictions. Maybe you don't junior devs to write code that blocks the UI? Worker threads would make sense.
&gt;One of the biggest problems with using context / hooks (specifically the \`useReducer\` hook) is that if you only have one context, all subscribed components will re-render on change even if nothing relevant changed. To get around this you end up needing multiple contexts and that can get pretty unweildy pretty quickly. With redux, it's smart about when it re-renders because you define (using \`connect\`) what stuff is relevant to the component. You can change the state to your hearts content and your component will only re-render when something relevant changes. This is the reason I still add redux to even smaller react apps very early on in the development process. I like to keep my application state separate from my components, and I have had to refactor many prop drilled component trees bc one small onChange in a text input would cause my entire page to re-render. I find that taking the extra time to write out the redux boilerplate really allows me to debug large applications MUCH more easily than attempting to shoehorn something into react. I would rather spend my time up front writing boilerplate than right before launch chasing down a ton of optimization issues/bugs caused by poorly thought out and implemented design patterns.
Because there’s not many people streaming anything related to coding.
I'm under NDA so I'm going to be fairly generic about this. I think you can get away with not using an enterprise state management library if you use an event-driven system with a strict interface/contract between components. So we have something we call internally "container components" who are responsible for (1) rendering other components (including other containers), and (2) communicating with other containers. We use local state for as much as we can (everything else). Because why wouldn't you? Especially now that you can do it with either ES6 classes or React Hooks. We use a lightweight local PubSub event system with regex support to broadcast events that containers need to react to, then standardize event names and write generic methods like "show()" that can be encapsulated and work with these events. The advantage of the event system is that we can hook into our own events at will from components very far away in the hierarchy -- this admits some flexibility by allowing otherwise unrelated components to not be jammed together in your hierarchy, run logging, filter events by regular expressions (now I can do things like "log all /show(.*)/ events"). Cleanup unused listeners as I need to minimize memory footprint. We can write tests against expected events as well as expected state. Can anyone see scalability problems with these that are eliminated by use of enterprise state management software? It was my idea, I like it, but I'd like someone to shoot it down for cause sooner rather than later.
I'm aware of the talk, and I stand by what I said. Redux's API is not simple in that it encourages a bunch of cross-dependent, complex data structures and actions. It's not simple in that it itself requires a lot of complexity (the dreaded boilerplate) to even interact with. Redux itself might be simple, but code being simple and the API it presents being simple are two entirely separate things. As another commenter said, assembler is simple, but its API is not.
Yeah. That sounds like a really good approach! Keep the projects small and new to make the investment easier.
Unsure what kind of feeds you're using, but you should be able to use the &lt;canvas&gt; element and [drawImage()](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage).
He should change title to **"I had no idea what I'm doing. I didn't bother to learn new language and new tools. I didn't wanted to understand new language and tools. So I wrote code like I'm writing JavaScript and it didn't work!".** &amp;#x200B; I actually have something quite opposite right now. I'm teaching Typescript to a guy who only wrote in Java. Mostly because he wanted to learn front side of the web. And it's always better for back-end developer to know some front-end stuff. Full stack developers are hard to find and really useful. &amp;#x200B; Basically problem was exactly like described. Guy could write in minutes something in Java but struggled a lot even with Typescript (not even native JS). Mostly because simply he was making assumptions based on his experience in Java. Something must behave like in Java because it makes sense to him. &amp;#x200B; It's actually a mindset of junior programmers and some people that only used 1 language during their career. And it's not that uncommon. Basically all the time I just repeat the guy "don't make assumptions - check with documentation - it's a different language".
But that's probably a good thing if you're trying to make sure you have a workable number.
sounds nice, but when you have things to get done, and have to write 100 lines of boiler plate to just get started and more every component it gets old real fast.
Personally I dont care if what url looks like, I'm more focused developer experience.
Then why add react hooks? It's not just a view library.
[removed]
You should add a `.filter`
Oh, perhaps the wording wasn't the best. "Not fun" part is referring to the fact that we had to stay late and rewrite code we just written a new while in keeping with creeping deadline. We are working with redux for the most part, and I can say that experience is good. I would argue that Redux generally leads to better architecture. The only major issue we had with Redux was using it in tandem with React Router v4 (hoping to update to v5 soon as the problem seems to be addressed there). And some object models can get complicated when you need to define relations between different objects. However, it seems to be due to the problem being complicated rather than Redux complicating it more than it needs to be. Thanks for the reference though. I'll check it out. :)
... Backbone.js ?
Can you describe the use-case of this method?
Or a bad thing if you’d rather be alerted to type errors in your program instead of having them just hide and manifest as math problems.
Okay so I accidentally *reinvented* a framework, okay? This actually counts as progress in the javascript ecosystem. /s Thanks. I'll take a look at this and see how it stacks up against what we're doing.
He's not popular for being insightful. He's popular waving his hands around, screaming and making [this look](https://cdn-images-1.medium.com/max/1600/1*0XbL2Q7dZ8CYP25EK_SVOA.jpeg) where you wonder if his eyes will fall out of his sockets. Granted this particular video isn't his best. I think because he forgot to short a couple of lines before turning the camera on.
I think you misunderstood, I'm saying that key events get prioritized over the browser paint, not other events in the queue. The queue gets executed FIFO, meaning it goes in order, but I'm not talking about that. Based on the very video you posted which I know very well and have it linked in my article as well, the JavaScript event loop can decide whether to prioritize browser updates or taking a task out of the event queue, it does so based on its own internal algorithms that try to determine the most efficient way to prioritize tasks vs visual updates. Also, like I said, I think the conclusion that Key events always blocking rendering is pretty indisputable looking at my performance profiles... Regarding setTimeout, I mean the setTimeout callback. Maybe that could have been more clear. But setTimeout just places a callback in the event queue after its timer runs out. Yes you are right the timer itself is a separate thread provided by the browser, but the setTimeout callback once it has been placed in the queue is just like any other event in the event queue. Except the browser can choose to delay it's execution and run its visual updates first. Here's a clip from the video of Jake discussing this: [https://youtu.be/cCOL7MC4Pl0?t=714](https://youtu.be/cCOL7MC4Pl0?t=714)
Good stuff! Tiny functions are the best, anytime I walk into a codebase that is just a bunch of smaller functions. It's like, ah, sigh of relief. Great Video!
Is this better than ‘qs’ is a qualifiable way?
I've worked on a similar architecture. We were building a Rails app and using the [react-rails](https://github.com/reactjs/react-rails) gem to inject React components into Rails views (which are basically templated HTML). This made the front and back ends of the app really tightly coupled, and decisions had been made that meant Redux couldn't be added without a major rewrite. But it did have a fairly simple pub/sub system if we needed to do stuff that impacted more than one component "branch". I've always kinda thought that flux architecture is the Pokemon-style evolution of pub/sub. There's a definite conceptual overlap between publishers and subscribers, and dispatchers and actions. What pub/sub is missing is the single source of truth for the state of your app (the store), and an immutable state (guaranteed by the reducer). If you don't need those features, then cool, go do pub/sub. Maybe your back end is the single source of truth. Maybe your app state isn't ever so complex that modelling across the component tree becomes a problem. But I have a hunch (and it is only a hunch) that your messages are going to be harder to track and your state is going to be less predictable and harder to debug as your app scales. You can test it, sure. But if you generalise it to the point that your state is immutable and predictable, then you've pretty much just implemented your own version of the flux architecture. You might as well have installed Redux. Hooking into the published messages when you want events to trigger side effects (like logging) is a problem that redux-thunk, redux-sagas and redux-observable would all more or less solve. And the Redux dev tools are awesome, and you wouldn't need to do things like "log all /show(.*)/ events," you would just filter the action log. So it seems like a lot of work for not a lot of win, but as I said at the start, I've worked on a thing with pretty much exactly this architecture, and it was fine.
Isn't it better to use core technologies rather than framework of the day? Css, JavaScript and html will remain. vueboostrap or whatever could disappear tomorrow and you will receive no updates for your project you built with it. Yes you probably built it quicker than the core technologies alone, but it is riskier.
I could be totally wrong but there seem to be commonalities ("prior art") both among frontend frameworks, and backend and desktop architecture. Lessons learned, I guess, whether through re-invention of the wheel, or gleaning insight from that which came before. I think that regex + pubsub might end up being a maintainability nightmare in the future though. Any reason for that support rather than the Redux pattern of constant strings for dispatches?
It has more dependencies! Including another new package of his.
Alright I'm with you. To clarify further just for the sake of discussion, which APIs specifically are complex? Is it the redux API itself or react-redux? It sounds lik what you're saying is because redux is simple, to do inherently complex things (async control flow, deriving computed data, passing state around a deeply nested component tree etc) you have to handle this elsewhere in potentially complex ways. I'm totally on board with that. I don't however necessarily believe that a state management tool that hides this complexity by default would necessarily result in easier to write and maintain software. That's a separate discussion though. I appreciate the elaboration on your points.
Interesting, thanks for the thoughts. We are using an AppSync API with a main User model as the SSoT that is fetched at the beginning of the application and stored in a globally accessible object. We query and mutate against AppSync when we need to conditonally render or update the SSoT. Pretty much the only thing we don't have is the ability to update the model in the window storing the SSoT in response to AppSync mutations, but that could be added.
&gt;I think that regex + pubsub might end up being a maintainability nightmare in the future though. Any reason for that support rather than the Redux pattern of constant strings for dispatches? I want to generate event strings programmatically at instantiation by using introspection on the component, which I think would remove this concern. Regex lets me add middleware (not guaranteed to run in-order) to classes of actions globally. Say I want to send a log to S3 whenever a class of actions is done, now I just listen on that capture group, inject my middleware once in the application, and be done with it.
Personally I used pub/sub back in the day with backbone and marionette. The community largely moved away from the pattern. It's not a bad pattern but as things get more complex interactions can get really difficult to follow. IMO redux is basically the same pattern just more centralized and a little easier to follow.
Thanks. I'll take a look. I got started in frameworks with Ember, so I'm used to a pretty nice set of scaffolding CLI tools and blueprints by default. Having to do all this stuff manually and bikeshedding has been really unpleasant.
Maybe these help to get one started: * [Node Server API with MongoDB](https://www.robinwieruch.de/mongodb-express-node-rest-api/) * [Node Server API with PostgreSQL](https://www.robinwieruch.de/postgresql-express-node-rest-api/)
Hey I got my boss to purchase *Road to GraphQL* for training devs on GraphQL and React! Love your blog, thanks for the post. To anyone not aware, this poster publishes educational books under the "Road To" title including Road to React and Road to GraphQL.
The confirmSearchTerm seemed like an odd way to handle quick successive requests . A more common pattern would be to use a debounce function which additionally let's you fine tune the time before execution and model it more closely to actual user input.
There is some prioritization micro task queue (promises) over macro tasks (set Timeout )
Corporate structure issues often have nuanced and/or intractable political causes. It's also quite often that upper management will shift responsibility to the technical team to deal with the issue. Either out of ignorance or intentionally deflecting blame. You can say "quit and get another job" and you wouldn't be wrong; but, if you've got a very competitive salary or other benefits, it sometimes make sense to stick around and find creative solutions.
Hmm just for the sake of comprehensiveness: // With nanoption import { Option } from 'nanoption' function getJwtToken(executionContext) { const jwtToken = Option.of(executionContext) .map(context =&gt; context.switchToHttp()) // context can have no http mod (e.g. WebSocket) .map(httpMod =&gt; httpMod.getRequest()) // context can have no http request .map(request =&gt; request.headers) // request can have no headers .map(headers =&gt; headers.authorizarion) // headers can have no auth header .map(jwtAuth =&gt; jwtAuth.split(' ')[1]) // auth header can contain only one part .getOrElse('') return jwtToken } // Without nanoption function getJwtToken(executionContext) { try { return executionContext.switchToHttp().getRequest().headers.authorizarion.split(' ')[1]; } catch (e) { return ''; } }
Yes this is true as well
Download the repo as a zip. Unzip. Open `src/index.svg` in a web browser. Game seems broken.
Use Firefox. Not Chrome.
Check out mobx-react-lite for a much more streamlined set of react-specific functionality. Fully embracing hooks and trimming the fat of its antecedent
It doesn't matter that it is a Firefox OS webapp. That only matters if it makes Firefox OS specific calls, which I doubt. The `build.sh` just packages the app for the Firefox OS marketplace (no longer online).
If you're working in a browser, there's already a native solution: [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)
this will catch errors inside any of those methods, or an error that isn't a null property access. While it might serve the same purpose, it isn't the same logic.
Honestly, in my opinion, no. Unless you're aplying for a job that requires redux/mobx or have to work on a codebase that uses redux/mobx.
This is probably a bit farther down the line, but make sure to use an API or more specifically, an ORM to keep your data layer separated from your app to avoid things like SQL injection.
VS Code with React theme.
Okay then I might as well plug the lightweight PubSub system we're using: [Amplify Hub](https://aws-amplify.github.io/docs/js/hub). Their documentation even has examples on integrating with Redux or your own Single Source of Truth (store), I just haven't found it necessary for what we're doing.
Best practice is to check `typeof value === “number” &amp;&amp; !isNaN(value)`
The problem is not solved. UI is not blocking but the delay between typing and results persists. Imagine users have found what they want and stopped typing, just to see a delayed result refreshed and click into the wrong item. Any dev will need to stick to the best practice if possible. The solution presented is adding more cores to the client’s computer. Not even trying to denounce the input, indexing the strings beforehand, trying to add animation when the search is going. Will this be an acceptable solution where computational power is limited? Like a search menu in scientific software or a game? Brutal force is always the worst solution that works. I can give him credits on sharing his solution, inspiration. But I had to point out it’s just bad practice.
Please feel free to ask any further questions or clarifications.
Then why are you worried about routing? My company is building a complex SPA that doesn't use routing for precisely this reason. Our customers should never hit the back button, so we don't include routing.
RSK is just a set of functions, so it won't do any kind of code generation the way you're describing. But, it _will_ definitely simplify the Redux code you're writing.
I'm assuming you have an HTML doc set up. You'll need to put a couple of **inputs** in that HTML document, one for each number you want to allow the user to give themselves. You'll need to get the **values** from each **input field** using something like `document.querySelector()` and pass them into a **function()** as variables. For instance: function(aPrice, aTip) { const price = aPrice; const tip = aTip; // Do stuff here }
Of course. Though I thought, if he expects some other kind of error, he would have a try...catch anyway. There's no great solution for this right now. ECMA has been trying for like... 3-4 years to figure out the semantics of the Elvis operator, but they're not doing it. And until they do TypeScript doesn't want to implement it either as it has to know what semantics it'll have and match them. Until then our solution are kind of verbose, or kind of "rough" like mine. With Elvis, this will become: // Without nanoption function getJwtToken(executionContext) { return executionContext?.switchToHttp()?.getRequest()?.headers?.authorizarion?.split(' ')?[1] || ''; }
Thank you! After 3 hours of digging around for more clues, installing VM's, yadee yada yada, I got it running using Firefox 29.0.1 using [Firefox OS 1.3 Simulator](https://ftp.mozilla.org/pub/labs/fxos-simulator/)
This is one of the most embarrassing articles I have read online. The gap between the author's perception of his own ability and reality is the size of grand canyon. The fact that this guy would put out something as bad as this and then, at the end, suggest you sign up for his newsletter so you can "improve your career" genuinely makes me wish this was satire.
I recommend for a better work flow to learn web development in reverse. Understand how storing information works with SQL dbs, then understand basic web apis, and when you’ve got a functioning api begin building a UI and learning the different frameworks available out there for showing your site. I recommend learning sql dbs with Postgres for your dB. Very simple setup and usage that’s straight forward with a very short learning curve. After that I’d begin learning NodeJS. Start looking at some web frameworks such as express, sail, or meteor for your api. When u get a basic api running locally with crud functionality that interacts with your dB, begin focusing on your front end. I find if I focus on how my site looks before I begin building that I waste too much time there and eventually the project passes by without being completed or functional. When you start working with your front web development, look into UI frameworks such as Angular, Jquery, or React. Btw, this work process is called full stack development and is a highly sought skill set to have in the Software development industry right now.
https://imgur.com/a/5dMf8Fq
I'm assuming you have an HTML doc set up. For one simple way, you'll need to put a couple of **inputs** in that HTML document, one for each number you want to allow the user to give themselves. You'll need to get the **values** from each **input field** using something like `document.querySelector('#id-of-input')` and pass them into a `function(userPrice)` as variables, and finally call that function when a button is clicked. For instance, your inputs might look something like this... &lt;input type="text" id="userPrice"&gt; &lt;button id="userCalculate"&gt; ...and the JS may look something like this... let userPrice = document.querySelector('#userPrice').value; function(userPrice) { const price = aPrice; console.log(price); // Do stuff here }
Will consider working in reverse! Thanks.
Google "Crontab"
Yes, agree with OP. Opt out of libs when you have it built in. ``` function toQuery(url) { return Array.from(params.entries()) .reduce((res, [key, val]) =&gt; (res[key] = val) &amp;&amp; res, {}) } ```
Oh hey it works great in my Firefox browser! haha. Darn...I wish I hadn't spent 3 hours getting the Firefox OS simulator running.
I think everyone on the committee pretty much agrees on the *semantics* of `?.`, what has been the stumbling block has been the token. Most people want `?.` for optional property access, but there has been disagreement about optional element access `?.[` and optional call `?.(`. Optional chaining is on the agenda for the next TC39 meeting, so hopefully there will be some forward progress.
No unit tests, coverage failed, PR rejected 🙅🏼‍♂️
Sure, I was not aware of this. Thanks a lot
Thanks a lot for your guidance, but I don't want to cancel any of them. Those are also important.
We'll take care of that, just [trust us, it will pass.](https://github.com/auchenberg/volkswagen)
Hi /u/johnfischer2019, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You're not really explaining anything. &gt;!Imagine users have found what they want and stopped typing, just to see a delayed result refreshed and click into the wrong item.!&lt; This is only a description of a bad search implementation. Further, you're assuming that making code generic is a requirement. If it is not, you're wasting time and money. If you know all of your customers will be working on browsers on decent desktops, there's no point in optimizing for other platforms. I agree, in some circumstances, it makes no sense. It's not bad practice to do this is the requirements are so, but rather when assumptions are made about solutions since they "seem" wrong. That's what I'm arguing.
In the same way that the map method conditionally maps your `Option` if it's `Some`, the filter method allows you to also add your own condition. For example: Option.of(5).filter(n =&gt; n % 2 === 0); // None I suggest checking out Rust's [Option monad](https://doc.rust-lang.org/std/option/enum.Option.html) which has these and a ton more options. Additionally there are plenty of libraries within the JS/TS ecosystem that already cover this idea; my personal favourite at the moment is [purify](https://github.com/gigobyte/purify).
I would assume the basic is PHP and SQL.
Cool, I’m glad you got it working.
CORRECTION... I'm wrong. Apparently setTimeout callbacks are not FIFO with Keypress events. I just tested this and Keypress events DO take priority over setTimeout callbacks, even if the setTimeout timer finished first. You would expect that when the setTimeout callback finishes, it puts its callback in the queue and if a keypress event happens after, that the timeout callback would run first. Not the case. The keypress event gets fired first... Most likely explanation is that there is more than 1 event queue and timer callbacks and keypress events use different queues. Just like there is a separate microtask queue with a different priority, I think timers and user events are on different queues as well. I have no proof of this, just a theory. Will inquire about this on stackoverflow, see what I can find. Just goes to show how little so many of us know about the inner workings of the JavaScript engine and how informative it can be to mess around and explore this stuff.
+1, I also manage a number of small-to-medium React and React-Native projects. Typescript was my best decision, followed by killing Redux. I still see beauty in Redux, I still remember my jaw dropping the first time I saw time-travel debugging, but no way in hell I'm ever gonna do all that boilerplate again unless I have a truly massive project to maintain.
I was in a similar situation, I switched to mobx and it "Just Works", with the exception of a few little catches that got me a few times. it cut the size of our codebase ~25% and made everything easier to follow.
So this is basicly Java Optional :D Well done, but I think that better idea would be adding babel plugin [https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining](https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining) &amp;#x200B; Also there are other options to resolve this issue, here are multiple ways of handling this: [https://medium.com/inside-rimeto/optional-chaining-in-typescript-622c3121f99b](https://medium.com/inside-rimeto/optional-chaining-in-typescript-622c3121f99b)
If library is helpful, someone will fork it and continue development. That's how open source works.
mobx reminds me of Ember, which I like, but then I end up thinking, why not just use Ember?
You don't need a large library to do some simple API calls or fancy zooming either. If you re-read your entire comment here, you'll realize you're actually arguing against your article.
His older videos were really good and put together well (e.g iteratators, generators and async generators). But he hasn’t followed that format now for a good long while. The scriptless stuff isn’t as informative I find.
&gt; iteratators Keep that.
I have no idea how my phone typed that... 😆
I'm having a difficult time trying to figure out where a person would actually want to use this. Browser has a native solution (previously pointed out, `URLSearchParams`), and Node also has a built in solution (`querystring`). 26k payload to add this to a front end package (90% of which is Lodash), or a whole grip of additional deps for the back end? https://bundlephobia.com/result?p=to-query@1.4.0
How would it be possible for a timer to fire but the key event happen first? How would you trigger that in the first place? One a timer fires it is going to be running asap right? Or are you like starting 2 times with one programmatically firing a key event?
&gt; what would you consider a large project vs a small one? One possible definition is that a small project is something that a single developer can keep in their head at once. Once you get beyond that point, either due to running for longer or due to having more people involved, different practices become helpful. I’d call that a medium-sized project. A large project, for me, is characterised by having parts that even a whole team don’t fully understand between them, perhaps because it’s run for so long that everyone who had significant experience with a certain part of the code has moved on or because there are multiple teams involved. Again, when you jump to that level, different practices become helpful.
If we keep iteratatating, we might get somewhere
because you can use react with mobx. React is better at rendering the DOM than Ember. Mobx is better at state management than Ember. Both valid reasons to not just use Ember.
I've replicated the scenario here [https://codesandbox.io/s/r6vzp1qyq](https://codesandbox.io/s/r6vzp1qyq) Keypresses in that input run an expensive 400ms operation that does nothing, its just there to occupy the main thread so that subsequent events are placed into the queue instead of just being run immediately. You can test it by hitting 2 keys relatively quickly into the input. What happens is that your 2nd keypress should be about 100 - 200 ms after the first. But the first keypress launches a setTimeout with 0 delay as the first thing it does. Which means we should assume the setTimeout callback should be in the queue before the keypress. The event queue should look like: \[ timeoutCallback, keypressCallback \] Yet, if you look at the timestamps I set up, you will see that the 2nd keypress handler runs first, before any of the timeout callbacks. It runs about 400 ms after the first one, because that is when the expensive operation completes and the main thread frees up to run a queued task. So somewhere our assumptions are breaking down. My guess, again, is that the two events are not actually being placed in the same queue. I created a stack overflow question if you're interested in following it: [https://stackoverflow.com/questions/56333349/settimeout-callbacks-and-keypress-events-dont-follow-fifo-in-event-queue](https://stackoverflow.com/questions/56333349/settimeout-callbacks-and-keypress-events-dont-follow-fifo-in-event-queue)
Running your code in Firefox I get \`0152\` and \`147312\` for with two fast presses, implying that the first timer runs at 147 and the second keypress runs at 152, after the timer. In Chrome however I get 0582 and 11321150 so both keyboard handlers do in fact run before the timer. &amp;#x200B; If I had to guess, this is an implementation detail of how they do their queuing and queue processiong, where Chrome happens to run create task queue entries for all keyboard events before checking. Since you have a busy loop, you're really depending on the inner details of a browser as far as when events are processed. If you are busy looping, as far as the page content in concerned, the two events essentially arrived at the same time, so it's likely compliant to do either one first. &amp;#x200B; Also I'd recommend explicitly timing loops if you want a consistent 400, like this: [https://codesandbox.io/s/wonderful-wilbur-t4gzj](https://codesandbox.io/s/wonderful-wilbur-t4gzj)
Cool, learning something new! thanks!
In what way is mobx better at state management than Ember?
Some of his videos are like, "let's learn this new thing together." Those can be entertaining. But yes, not that educational.
Its hard to imagine the delayed result being an issue if the delay is always capped at 350ms. Debouncing the input is an option, but I prefer the UI that updates the results as you type. It feels more responsive. The question about whether this is an acceptable solution for limited computing power is a good one, but I mentioned that in the article, that I wasn't advocating for the worker array solution unless the developer had an answer for that.
I really enjoy him. But he is not for everyone. He’s like the anti Traversy Media. I can’t get through his videos because I lose interest. Whereas I can follow the crazy train from MPJ for quite a while. I really think it’s a taste thing. Good thing is there are a ton of educators on YouTube so they can cover all sorts of styles/tastes
That’s extremely helpful, thanks!
I think it depends on what you are doing. If you are making webapps, React/Vue/Angular for sure. But using them doesn't make sense if you only want to sprinkle some js on a simple website. Of course you can use vanilla js, but you will still find jQuery usefull when trying to maintaining old browser compatibility.
Hi /u/not_zacurry, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I don’t really need it. I am just using the pythagorean theorem to get the distance between two coordinates.
Just the native state and context.
The old weekly FFF show on YouTube was fun and informative. I guess he got bored with that and wanted to try different formats including guests. With the new stuff I don't feel like there is enough tech/learning content so I've been watching less and less.
Hi /u/chiborevo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/luldum, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
You would use the threejs ratcaster API to cast a ray from the point clicked, onto the model part itself. Then you can capture the result and perform your actions.
I actually did learn Kotlin and spent a lot of time researching the ecosystem. It just isn’t the right fit for this usecase and team. And before you break yourself, I’ve shipped production code in at least 3 different backend projects and ecosystems ;)
I agree, Kotlin itself was pretty easy to learn and it’s a lovely language. But the ecosystem for using it on AWS Lamba just doesn’t seem to be there yet. Everything you find is about Android and/or assuming you’re moving from Java to Kotlin. I don’t have time or energy to keep mentally translating between Java and Kotlin to understa tutorials while also translating business logic from Ruby to Kotlin, And what makes you think I only know JS and lack CS fundamentals?
IMO you know your use case better than anyone. Do your research and I'm sure you can make a good decision. I haven't used Amplify Hub but it looks pretty good.
Right, I have to admit that it’s a valid solution for this particular use case. I never intend to say it’s “wrong” in any way. Design is never black and white. I think the take away here is to appreciate what’s being shared to us as a collective knowledge. And respect each other’s opinion.
Don’t let me or the others sway your mindset. Really like your openness towards other perspectives.
const arr2 = arr.map(obj =&gt; \{ ...obj, gains: obj.gains.map(g =&gt; g + 5) \})
Thank you! I know it's asking a lot, but this can be done without using map...correct?
That's interesting, thanks for the links.
Maybe check Babylonjs too
You can also use hierarchical loops, one to loop between the objects, one to loop through the values.
Don't waste your time clicking the link. It reads like some sort of machine generated click-bait article
Looks cool, I'm all for more animation libraries in React.
Thanks!
a symlink?
Sorry, one more question. How would I conditionally update the gain values array based on channel? So if it's channel 1, then add 3 to every value, but if it's channel 2, subtract 2 from every value.
Thx for the answer, much apreciated!
``` const arr2 = arr.map(({ gains, channel, ...rest }) =&gt; ({ ...rest, channel, gains: gains.map(gain =&gt; gain + channel) })); ``` Switch out the number 5 for channel, which you destructure off the object. Make sure to include it again (it won't exist inside of `rest` if you detructure).
for example when using computeds. With ember you have to manually define depenedencies by passing string as first argument. This is handled automatically by mobx as it tracks all the observables accessed in the computed function.
Hi /u/thememarch, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Sorry, when you say 'make sure to include it again' what exactly does it refer to here?
Ember has an equivalent decorator syntax, with `@tracked`, instead of `@observable`, and they use the same @computed syntax with decorators.
Yep, it based on Scala Options. &amp;#x200B; Of course, optional chaining resolve many issues, but not at all. But optional chaining has no so well TS support (methods like \`isEmpty\`) and doesn't supports some environments (e.g. in Node.js I don't want use babel).
thanks, i hope this little library can help others with animation
Interesting, thanks, I will think about this piece of API.
The library has been designed to be used mainly as part of a backend workflow when a request coming and you need to figure it has all the things you need. &amp;#x200B; Although you can use it on the client side, it doesn't have to sense since you are interested in re-validate again on the backend side. &amp;#x200B; About the size, Under the hood, the library uses \`querystring\`. The size is mainly for \`lodash\` dependency, but since the library is a backend side and \`lodash\` is a very popular library, simply it doesn't matter: If you already have \`lodash\` as a dependency, the cost of this library is near to free.
ok, so it is better because it has cleaner and less confusing api?
In this case, the `channel` field will not be included in the `rest`, so you need to add it to the returning object manually.
Great overview, but maybe a bit anachronistic? I would expect an article like this in 2014, but it leaves out a lot of the more modern features ECMAScript offers for object creation and delegation.
Closure is a concept I see lots of beginners struggle with. You can massively speed up dev time once you grasp how it works in JS.
To contribute to this discussion there is a free edition of the book [Learning JavaScript Design Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/) that covers the above mention patters, as well as, modern ones like MV* patterns and many more.
Mutability/Immutability of Objects and Arrays. Learn about what changing an existing object means compared to making a copy of an existing one.
How *this* works. It's actually quite complicated.
Bind and the this keyword
A few weeks ago I spent some time learning about closure and I understand the concept. How exactly does it speed up dev time though? Do you use it often? If yes, could you describe some use cases I obviously fail to see?
In case you don't have issues to operate on the same array, i.e. mutate it, I propose a more verbose solution, but with a lot better performance (since we do not use the expensive `map()` method and the rest operator). ```js /** * Given an `array` array, like the one you have in your example, * update the `gains` array values with the corresponding `value`. * @param {array} array - The array you want to operate in. * @param {number} value - The value you want to update each element in `gains` array. */ function update(array, value) { for (let i = 0; i &lt; array.length; i += 1) { for (let j = 0; j &lt; array[i].gains.length; j += 1) { array[i].gains[j] += value // Works for both positive and negative values. } } } ``` This function keeps the [Separation of Concerns (SoC) principle](https://en.wikipedia.org/wiki/Separation_of_concerns). For that reason we do not check manually about the update value (using a condition), but this function is only responsible to update the array. You can add an if condition to set the `value` value before calling the array like so: ```js let value = channel === 1 ? 5 : // add 5 channel === 2 ? -2 // subtract 2 // etc // and now call update() update(arr, value) ``` See working examples here: [https://repl.it/repls/DescriptiveLightgreyAmoebas](https://repl.it/repls/DescriptiveLightgreyAmoebas)
I think he meant that your dev time is normal if you understand closures :) You know right away when to use arrow function and when not to, so you avoid frequent and pointless code refactoring on account of not understanding closures :)
The better you understand it the more efficient your architecture becomes and less time you spend debugging issues that involve global and local variables not being available to functions etc.
Indeed. I have been doing js for 5+ years and still sometimes have head scratching moments with *this*.
Behaviour of this is a subset of closure, why not start at the root of the concept?
Behaviour of this is a subset of closure, why not start at the root of the concept?
depends on the browser. chrome uses v8. https://github.com/v8/v8
coercion in general \`false == 'false' // false\` \`false == '' // true\` \`false === '' // false\` \`var x = false || 'foo' // x is 'foo'\` \`var y = true || 'foo' // y is true\` \`var z = y &amp;&amp; x // z is 'foo'\`
Thanking you
Using const and let
The async programming model and especially how the event loop works. The latter might be transparent to you 99.9% of the times, but then you’ll run into issues where your code behaves unexpectedly and you just need to execute it in the next tick (iteration of the event loop) instead.
the syncing procedure should be done automatically? When you edit and save a file, are you expecting the changes to apply to cloned files also?
Months are zero based
I see very few people know how to use the prototype keyword
Promises. They are quite tricky to understand for a beginner, but very convenient as one masters.
 document.querySelector()
Bracket notation and why/when to use it.
Most of these have nothing to do with coercion. You should look up coercion.
Well, what kind of application would you like to build? There are no tutorials that answer that question. If you have an answer then you can just start and you'll know when and what to learn and search.
Unless they use WebStorm, which is the IDE's of Gordon Ramsay when you use `var`
Yes ... I ended up using gulp. \`var gulp = require('gulp') var watch = require('gulp-watch') var source = './\*\*', destination = '../folder-dev/\*\*' gulp.task('watch-folder', function () { gulp.src(source + '/\*\*/\*', { base: source }) .pipe(watch(source, { base: source })) .pipe(gulp.dest(destination)) })\`
r/murderedbywords
I’m looking to get into web development. After learning the basics I’m not sure how to use it in web development. I’m making a website as a project to apply for jobs. It has two sections, one will be a fully functioning shop and the other will showcase all my projects such as games etc. Also I’ll be learning MERN stack from next month. I need some help on how to approach them from a web development perspective. I’m also thinking of PHP. So if I can land a job with HTML, CSS, JS and PHP, I’ll focus on them until I’ll master them. Might skip MERN for time being and come back later.
VSCode masterrace but WebStorm is right here. (Modern) JS shouldn't use var when not explicitly needed.
What did you find useful while learning and applying it? As in, what helped you learn it well?
let me end all your struggles: the only time you use == instead of === in JS is when you do `yourVar == null` because this checks for null and undefined.
Create a free account at [FreeCodeCamp](https://www.freecodecamp.org/) and do all the exercises. They will help you acquire all the basic and some advance knowledge about the various aspects of web dev. The platform contains a series of interactive exercises with guidance.
yeah including you because first of all, that's not a keyword. Also trying to understand this bullshit isn't going to get you ANYWHERE in JS. Source: I've written everything you can imagine in the past +10 years in JS and never needed that horsecrap.
How powerful a fucking REPL is and how much you can speed up your learning and coding if you're using one.
i agree only the first two have something to do with coercion, the latter were rather some other things js noobs may be confused about.
It's more complicated than that. *this* behaves differently in arrow functions, for instance, which is definitely unexpected, unless you already know it.
I would really love to see some examples of this as it's not clear to me yet the benefits other than creating a nested function which has "private" variables. I'm not quite at Closures yet in "Secrets of the Javascript Ninja".
Let me be a devils advocate: If you ever have a bug caused by coercion, your code sucked in the first place and it's not coercion that caused it. So use == or ===, it doesn't make a difference.
IIFEs are a concept not really well known in other programming languages, yet they've been quite common in js, especially when working with closures. however, as of `const` and `let` they mostly lost their right to exist :D
Learning what linting is has saved me so much time and energy with hammering in simple syntax rules like that. Another thing I'd say is to learn DOM manipulation first. I got stuck for a month or two on using JS to solve algorithmic problems in online courses like free code camp, but after I had a solid grasp on JS I still had no freaking idea how to actually *use* it. Starting with the basics of selecting an element and adding a listener would have been a huge boon to my progress.
Javascript is fast
It's not an IDE that errors anything, it's linters. And VSCode comes with ESLint which give a warning for var usage, so idk what you're talking about.
I'd argue arrow functions have nothing to do with closures. Scope and closure are not synonymous.
It's the opposite. Closure are a subset of things dealing with this/scope.
People sometimes have a lot of problem dealing with callbacks and doing thing asynchronously
This https://addyosmani.com/resources/essentialjsdesignpatterns/book/ has been my goto for a long time.
Named function objects can both be referenced by the contents of the function and have property values attached, allowing for the generation of function instances that have unique data associated with them, like a closure might, but without an actual closure.
Thank you so much for the upvote and GitHub stars! Today is like a dream come true for me. Github means so much to me over the past years of maintaining and developing multiple open source projects. I don't think I have ever got this many stars in GitHub. It seriously meant so much to me... 🤧 it's like a Xmas gift or even better 😚... So thank you guys so much ❤️Today is a beautiful day for me ⭐️and hope you find the project useful to you too.
Formatting dates. You don't need a bulky third party library. toLocaleDateString() will do the job in 99% of cases. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString
I personally read [These](https://github.com/getify/You-Dont-Know-JS) books (You don't know js series). The one about closures is amazingly well put. The others are also really interesting
How modules work. It’s straightforward enough, but there’s a lot of stylistic variation you’ll see when reading other people’s code.
What’s a good lint rule set for beginners? I’ve been writing JS for 6 years. I recently started with the AirBnB set and it’s draining my will to live.
Defend this statement. I don’t agree at all. Closures exist in many languages and behave more or less the same way in all the languages that support them. The behavior of ‘this’ in JS is, AFAIK, completely unique and can seem like magic when coming from any other language. ‘’’js const myArray = [1,2,3] const mapMyArray = myArray.map ‘’’ The fact that calling ‘myArray.map’ behaves differently from ‘mapMyArray’ is useful in some situations (not this one, it just breaks) and completely core to the language, but it is mostly just weird and dumb. This is the entire reason arrow functions were added. I’ve used dynamic this binding plenty, ‘Array.prototype.slice.call(myNodeList)’ is a fairly common use case, but if I could, I would have it removed for all the times it causes confusion and makes the language harder to learn.
Your data structures shouldn't usually be capable of being `T | null | undefined`, so I'd argue there's really no place for double equals in a modern codebase.
Lol no GitHub md
I have been using AirBnb for a couple of years now and I love it. It's strict and rules make sense.
Tagged template literals. Prototype chain.
Closures are one of the most frequently misunderstood or barely ever undstood concept by beginner Javascript programmers. I personally believe that you will have a lot of "Oh, I see!" moments after you fully understand it. You will be capable of understanding certain things that previously didn't make sense to you because I assure you 100% that you've been using closures without even knowing it! Please read [this article](https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8), it gives you good understanding of what a normal function is and how it's execution takes place, then explains to you what a closure is. It's big but it will without doubt be an efficient use of time.
How to use dev tools to inspect their code, see available properties, set breakpoints, etc.
JavaScript variables are passed by value, but objects are passed by reference. This means if you do obj1 = obj2, there is a high possibility that if your change the value of any variable inside obj1, it may change inside obj2 as well and vice versa. The correct way to fix this is Object.assign(obj1,obj2).
The short answer: it doesn't.
I never understood why we don’t call closures “scope”? What’s the difference between closures and scope in, say, C++ or Java?
Pretty useful if you understand stand OOP. Looks like u don’t
It absolutely should. Undefined before getting any data, null when no data or when explicitly set to empty.
I think part of the problem I've had with Promises is the language used. The word "promise" makes sense here as something that *promises to* return something useful at a later time, but the idea of "resolving" or "rejecting" promises always struck me as weird. I think async/await has a more natural syntax.
After doing JS for 20 years, I kinda agree. The whole language isn't nice. I'd love to have something like Go or Java as an alternative. WebAssembly will probably make it happen when it matures.
Scoping.
Gotta shake that attitude, if adjusting how you code makes you really upset, you are setting yourself to have a bad time in this industry. I use airbnb core, but with a few rules adjusted to my liking. It took a while to get used to, and some of my teammates complained, but you know what, now our PRs all look consistent. I don’t care how much people complain, it’s worth it
I'm curious, would you say there is a situation when it's actually needed to use `var`?
Mutations
Reduce. A many to one relationship is way more verbose to manage without it.
It's not complicated. People simply don't take the time to learn. Which is a shame, because it takes about an hour to learn. Here are the rules in the words of Kyle Simpson: &gt;Determining the this binding for an executing function requires finding the direct call-site of that function. Once examined, four rules can be applied to the call-site, in *this* order of precedence: &gt; &gt;1. Called with new? Use the newly constructed object. &gt; &gt;2. Called with call or apply (or bind)? Use the specified object. &gt; &gt;3. Called with a context object owning the call? Use that context object. &gt; &gt;4. Default: undefined in strict mode, global object otherwise. &gt; &gt;Instead of the four standard binding rules, ES6 arrow-functions use lexical scoping for this binding, which means they adopt the this binding (whatever it is) from its enclosing function call. They are essentially a syntactic replacement of self = this in pre-ES6 coding. That's not complicated. Take the hour or so to read the [two chapters on this from the You Don't Know JS series](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes), and you'll be good.
Where do you adjust the rules? (Non coder here just want to pass this along)
Yeah, I've heard a lot about those books. I'll give them a read soon.
Easier to just use class syntactic sugar.
1. The importance of using the Chrome DevTools. 2. Why Linters make your life easier. 3. Proper error handling (mostly writing code that doesn't fire errors). 4. Being unable to fully understand or explain the 2 pillars of Javascript: Functional programming &amp; Object Oriented Programming. 5. How important it is to refer to the bloody documentation before hopping on stackoverflow. 6. That not all tutorials, all books and all individuals relay accurate and most up-to-date information. 7. bind(), call() and apply() 8. High-order array functions like map() and specially reduce(). (It's very rare to see beginners use reduce() at all). 9. The this keyword and I don't really know why but some beginners tend to find it difficult why you call super() inside the constructor of a child class. 10. The Shadow DOM, it's not something you'd expect someone to know but it's ideal to learn about it after learning about the DOM and DOM manipulation. 11. Promises, the for/of loop, async/await , callbacks etc. etc. or writing asynchronous code, and handling/catching errors properly. 12. Destructuring and Spreading. 13. **Garbage Collection.** 14. Closures. 15. That stackoverflow is the solution to all your problems. ~~16. THAT ITS ANNOYING TO USE MAP WHERE YOU CAN USE A BLOODY PLAIN JAVASCRIPT OBJECT.~~ &amp;#x200B; I think that's a pretty constructive list of the common and more difficult things that beginners don't really know or can't understand. Some of them don't have to do anything with JS but hey!
You can create a `.eslintrc` file in your project. [https://eslint.org/docs/user-guide/configuring#configuring-rules](https://eslint.org/docs/user-guide/configuring#configuring-rules)
The event loop thing, how async works, web workers, types, == vs ===
Kyle Simpson would disagree. Coercion can be useful and is a valuable part of JavaScript to understand.
more importantly, understanding the different contexts of this: &amp;#x200B; this in the global space =&gt; window this in a function =&gt; function context this in a method of an object =&gt; the object this with call/apply/bind =&gt; whatever you want it to be
`undefined` representing not having attempted to retrieve data yet and `null` representing no data is a bit vague and implicit; unless there was a comment outlining this, do you think it would be obvious when reading the code that this was your intent? Personally I'd opt for `null` to represent no or empty data and a second variable or property to represent how you have or have not attempted to retrieve said data, probably written as an enum for maximum clarity. // This really needs commenting to make clear what each falsy value represents let data: Data | null | undefined = undefined; // This is much clearer IMO enum DataFetchState { Success, Failure, InProgress, None, } let state: DataFetchState = DataFetchState.None; let data: Data | null = null;
One person's opinions on the JavaScript language don't do much to rebut my opinion regarding one's data structures, and how they serialise into JavaScript or indeed any other language silly enough to have `null` or `undefined` types, let alone two of them.
I didn't mean "no data yet" as in "no data from database". I meant not initialized variable/property. It should be undefined since it's not yet, well, defined. The other cases should be null. That's what I use, my company uses and I've seen it used often.
If you are a React developer, you are leveraging closures on every single component render even if you're not realizing it.
I bet he uses frames :D
Promises, ES6, Vanilla JavaScript, Dom manipulation without jQuery, closures, monads, design patterns, event cycle, prototypes. I'd bet most developers with less than 3 years of experience would struggle with questions on those. I'd also say that I think the biggest one is that they can't think through a problem logically considering edge cases. Many senior developers can't even do that.
However important to note that async/await is just syntactic sugar around Promises. The syntax is nice but sometimes not as flexible. And an async function is just a function that returns a promise, even if you never await anything inside it.
One thing I've noticed when debugging from Chrome is that I can't access certain variables outside of a block unless I declared them with \`\`\`var\`\`\` (I'm guessing it has something to do with hoisting?). I still always use \`\`\`const/let\`\`\`, but there are times I will switch to \`\`\`var\`\`\` temporarily for that reason.
*Arrays* are zero-based.
They're great for writing one-off scripts with a lot of async stuff using async/await :)
Yeah people think javascript is slow like python or ruby but actually if you are careful it can be almost as fast as C on modern engines
True if you don’t need old browser support or the trouble of setting up a transpiler. Still useful to understand.
"Sprinkle some JS on a website" doesn't exist anymore :D I tell you, even the simplest websites still have form validations and shit where any reactive framework comes in handy. You don't want the overhead? Use Svelte. Though. For legacy === jQuery is the clear winner. It has been with us for 10 years and the cancer has been spreading for a while. So I'm sure we'll be fighting with jQuery plebs for a long foreseeable future, just have a look at stackoverflow. 90% of the answers use jQuery....
First one: A typical arrow function that returns the argument applied. For all values of x you will get that value you applied. &amp;#x200B; Second one: A conditional statement saying x is less than or equal (reading from right to left), so for all values of x you will get true because of the equality comparison. Except for undefined. Third One: Returns a conditional statement, you could say it's the combination of the first and the second. So again, for all values except undefined you will get true. &amp;#x200B; Fourth One: An IIFE that returns the NOT of the argument, since the argument is undefined. NOT undefined is true. You will only ever get true. &amp;#x200B; Fifth One: I don't really know if this is trick, but I think that's not a function, most likely will throw an error. &amp;#x200B; Sorry I couldn't post any code, not really on a computer right now! Tell me if I'm correct!
Whether my code could run in IE 8 without being transpiled by babel.
1, 2, 3, 4 correct. For 5 go give them a try in Node or browser's console.
Great thread. Thank you reddit. My contribution: You can group console logs by using console.group. You can even style them! Check out other methods here: http://developer.mozilla.org/en/docs/Web/API/console
Hi /u/DEVIKA_DEVI, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DEVIKA_DEVI, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DEVIKA_DEVI, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DEVIKA_DEVI, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It would be nice to have a link to [2018 suveys results](https://ashleynolan.co.uk/blog/frontend-tooling-survey-2018-results) in the post. Nice to see Elm in the list, my heart skipped a beat! :)
Hi /u/DEVIKA_DEVI, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jjssjj71, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
True that. They should have chosen more semantically closer terminologies.
I imagine it can be more convinent sometimes to have a function-scoped variable. But even then we're probably talking about quickly hacking things together. Out of the blue I cannot give you a production example of "a var variable would be better here"
&gt; Being unable to fully understand or explain the 2 pillars of Javascript: Functional programming &amp; Object Oriented Programming. one more thing that probably fits into #4 of your list: the prototype chain
Sure, some basic rules make it seem easy, but what rule is this? button.addEventListener('click', owner.func) #3? No, but most beginners would think so, and not without reason. When it comes to callbacks the waters are murky, and that's where 99% of issues with `this` come from.
That's in the definition of const and let...
Hi /u/wazzalk, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Just posted my answers, thanks! However, it felt a bit weird having vue.js + lodash.js as alternatives but not like axios. That has to be one of the biggest , most used XHR libs out there, right?
Hi /u/jidkut, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/praveenscience, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/eldridgecrowbarn, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cip6791, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/IanAbsentia, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Nice try Nobbie!!
Scope is where values are defined. Closures are functions which reference one or more scopes. They're related but not the same thing
Hi /u/RimmyDims, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Lets say you are making a function that stores properties of pencils, like function pencils, and properties color, shape, lvl of ink, those properties only exist inside of your function. That is good because you avoid conflict with other parts of your code, but if you need to call those properties or change them? You could do it easily by nesting a function inside your function pen that do whatever you want with those properties, those properties are inside that child function scope but out of the rest of the code scope. You can even call that nested function as argument in another function, it create many possibilities and once you get the hang of it you spend less time coding and have a cleaner code, less prone to bugs, also since those properties (or variables, methods,..) are inside of the function scope you avoid memory leaks.
Equality in JavaScript is very convoluted, e.g. an array containing a single element of value "0" is considered == false, but an array containing a single element of value "1" is considered == true: [https://dorey.github.io/JavaScript-Equality-Table/unified/](https://dorey.github.io/JavaScript-Equality-Table/unified/) So it's really best to try to use === and !== where possible, only using == and != where absolutely necessary. Things are more predictable that way.
If you declare those variables using let or const first outside of the block, and then assign values to them within your block, they will be accessible in the outer scope without becoming globally assigned like with var.
The guy that doesn't even know what a keyword is is trying to put me in my place. Cute.
Got it! For the fifth one when you pass a function expression that contains a function expression, you get undefined. Because you can't pass in a value for x.
When you can't use a compiler like Babel and you have to support older browsers that don't know what \`let\` and \`const\` mean.
that's pretty much everywhere
Normally I would agree with you, but lately that doesn't seem to be the case. I've been doing a lot of interviews lately and probably the one thing people have consistently showed a keen understanding of is promises. Where people have slipped up the most? `this`. While I get `this` is tricky (it's already been brought up a few times in this thread) I've also always considered promises to have a bit of a learning curve, especially compared to the more classic callback approach. But I guess learning material nowadays, and I guess apis in general, use them so much that people need to learn them a lot sooner than before...? Not sure, but I thought that was a little interesting takeaway from these interviews.
My point is months aren't special, they're just arrays underneath which is the real takeaway. In other languages, they'd be an enum, but I'm not immediately aware if js has those by default.
Old videos were great! The ones explaining core concepts.
Why the thumbs down? I asked a question. This is why I hate asking questions of other devs sometimes... the lack of patience and unneeded hubris.
Thanks for the feedback – I've added a link :)
&gt; this behaves differently in arrow functions Arrow functions are just another name for anonymous functions which in other languages also don't bind a "this" construct. I suppose I knew that from familiarity with other languages, but it's not a foreign concept.
That's definitely true – might be worth considering having a question for utility libraries like this next time to catch usage of those tools. Thanks!
That's why I don't use this.
knowing Promises is essential if you want to succeed, but once you're familiar with them you should move on to async/await
For Node you will need to add Localisation for it to work properly, so that might be a reason, especially if you don't have control over the environment. Also the options for dateString are fairly limited to some of the libraries out there. For example relative date/time.
It’s frustrating programming something for 10 years and still sucking at it isn’t it?
Please use real code blocks when you're going to post a long snippet otherwise it gets cut off in vertical displays (indent your code block with four spaces)
Kyle Simpson is an arrogant idiot. Coercing everything is not good practice.
If "outside of the block" is the same as "at the top-level of the function's block", then let, const, and var are equivalent. That's the behavior I assumed Aswole was trying to achieve, by switching const/let to var without moving the variable definition.
Writing code without JQuery
&gt; slow like python python's not particularly slow either.
Hey at least I got my keywords all right
Excellent man. It's one thing to say something, it's another to back it up with real data. A++, you have my respect! Thank you.
protip: edit the config to only warn (or even disable) some stuff while writing (whitespace stuff mostly), and fix all of them at once before deployment. saved me a ton of nerves
Thanks for the comment. But this is full of code. Not sure why this was removed. May I know the exact reason? Happy to follow the guidelines and rules. Thanks.
I guess that could be confusing, but that's not the call site. How long does it take to learn that? I have yet to see someone still be confused about `this` after taking the time to learn the actual rules and then apply those rules to analyzing code in their daily work. In almost every case of confusion, the person does not know the rules at all. Fair point that beginners could be confused because they don't know all the rules yet. But if something takes an hour to learn, I don't think "beginner" is much of an excuse. Just spend the hour.
This is true, but that's something even beginners (hopefully) should know. The date thing is weird because months start at zero, but days, hours, seconds, and milliseconds start at 1. \`new Date(2019, 1, 1, 1, 1, 1)\` gives you Fri Feb 01 2019 01:01:01
sort() without function expression will sort by string, even if you have an array of numbers
what is the return result then?
I really hate js some days.
Closure is part of the function scope property
I didn't say it was a reserved word you autistic douche, I said it was a keyword and it fits that definition. Go suck and enjoy being wrong and a bad programmer in the same day.
What type of blog? A physics based blog will have different categories than a barbershop harmony based blog.
I'm not positive it's an array underneath, but either way, months are special (or days are special). First day of the month is 1, first month of the year is 0. It's not consistent.
That'd be great. For tools like axios, bluebird, dayjs, momentjs, time-fns and so on. I'm sure the shift is going towards dayjs &amp; axios, but it would be nice to have some actual data backing that statement up :P
It feels like someone designed months as if they were an enum and gave up on the rest of the Date API.
Webstorm has some built-in linting even without ESLint.
If you think that covers all the cases, it does not. Try to guess what this prints without running the code: this.a = 1; (function() { this.a = 2; console.log(this.a); })(); console.log(this.a);
Which linter?
Re 1), personally I think Firefox devtools are better.
Don't start out using libraries or frameworks. If that's where you want to go, go for it. But try to really understand the fundamentals first.
I would guess 2 for the inner log, and 1 for the outer log. Am I mistaken?
This is one of the most common misunderstandings I see in beginner questions posted here and /r/webdev.
Yes, you are mistaken.
What’s the answer, and what’s the context of this that I missed? I’d like to add it to the list above.
Um, that's what they are for. They are block scoped variables.
Don't agree, months are special, because `getDate()`, which returns day of month, is **1**-based: &gt; const d = new Date(); &gt; `${d.toISOString()} =? ${d.getDate()}. ${d.getMonth()}.` &lt; "2019-05-28T13:26:44.771Z =? 28. 4." This mistake is extremely common and while I understand why JS guy(s) thought it would be a good thing to do, they created a nasty landmine. One, IMO naturally, expects not an index of a month, but a number of a month.
Jimmies rusttled (or whatever little kids like you say), mission accomplished. Trolling works better when you work with established facts: i.e. it is established that you're a little kid that doesn't even know what a keyword is and thinks using prototype is good and you need to learn this. Just calling me a bad programmer or saying I don't understand OOP just out of thin air is only going to work on little kids like you.
It's part of IDE core.
How to debug and step through your code to find bugs, instead of just adding a log of logging.
I don't think it has a name. It's just part of the IDE. They call it Inspections.
How 'this' works. And the beginners shouldn't feel bad about it, as that shit is mighty strange when first exposes to it.
It is a keyword. And if you think it’s not useful you don’t know how to do OOP in JavaScript. So I’ve proven you to bad programmer. Also wrong. I’ve defeated you on every level. I have the higher ground.
See the above comment.
I think the difference here is, a day doesn't represent an underlying structure. Both the day of the week and month of the year can be represented as enums and are both zero-based which supports this mentality.
Python can be very slow.
When you learn OOP in JS, you will indefinitely come across the prototype chain, don't you?
So **_can_** js.
yet another query string parser...
Well, personal opinions. I haven't used the Firefox dev tools, plus Chrome is just used more often and has sick performance and memory profilers!
Thanks, can be useful!
I don't know, if you're a beginner that just started learning JS in the last couple of years, virtually every resource (at least in my experience) hammers down let and const pretty much right away, or at least very early on.
Yes, but once they learn all the rules of the language, they're no longer a beginner ;)
JavaScript is significantly faster than python.
Yet if you pay attention to the beginner questions asked here and other places, a lot of them use var instead of const or let. That is mostly because a lot of schools/universities/whatever aren't that good at keeping up
I've had so much struggle when I first learned JavaScript because it was used everywhere but without mentioning exactly what that pattern is and how it's used.
&gt; and you just need to execute it in the next tick (iteration of the event loop) instead. I consider myself pretty well versed in javascript however I cannot imagine what you mean with this. How would "execute *it* in the next tick" look in code?
Thanks for clarifying! You're right, and I think my reply was unclear -- you can declare a variable using let at the top of a function and reassign it within a block, if you want to completely avoid using var.
Javascript is also multi-threaded if you use web-workers (which even works in IE11). If you ever done desktop software application development, the main thread is basically your UI thread. It's narrowing down your architecture pattern (MVC, MVVM, MVP, etc) where beginners usually get lost. The popular frameworks don't really push their usage much. I fear many people don't bother learning the core DOM/JS/Browser interactions. It's not *bad* because most frameworks heavily push async operations (promises), but the less you do on your UI thread, the better.
&gt; Both the day of the week and month of the year can be represented as enums and are both zero-based which supports this mentality. Technically, a day of a month can be also represented as an enum :F. And yes, I agree that when you read the docs (or think hard about it), it clicks. My point is, when a beginner first encounters a Date instance, there is a high chance he wants to just print the date, so get a number of a day of a month and a month number (not index), and so he will innevitably do this mistake. I know I did, several times actually, and saw this error made by many beginners online and even few times at work. I view it as an unintuitive (=bad) API design. Maybe if it would have been called like `getMonthIndex` or `getIndexOfMonth` instead of `getMonth`, things would be more clear and easier to learn.
Which comment? I don't see anything other than the automated comment that you send out. Is it just because community has requested without a reason to remove the post? Coz I couldn't see any violation that I have done. 😇
Fair point, that's absolutely true come to think of it.
Do you know anywhere that has good explanations for why some of the rules exist in the airbnb style guide? The team I'm on is going to start using a style guide soon as we have expanded the team, and looking through the airbnb styleguide, about half of the rules I don't really understand what they are for.
When writing rules in Google Tag Manager... Something I wish I could avoid completely but sadly cannot.
That doesn't have much with the point I'm trying to make which is specifically that it's not *complicated,* which is what parent comment claims. I agree that it's something beginners don't know.
`setImmediate` sometimes, you run into a max callstack issue for function calls if you don't ensure that the next call comes on the next tick. This is especially important for recursive functions or looping functions that might call itself again.
I agree. I've also made the same mistakes. If js had used some kind of interface/enum, it would be more clear, or was consistent with the other "Date" constructs such as day of the month being one-based. Unfortunately, it's way too late now.
Shouldnt that be handled via logical exit conditions? Only cases I can think of is where there arent any exit conditions like gameloops or listeners
This is arbitrary if you dont work with ethereum, but if you want to make ethereum dapps, you should know that javascript timestamps are millisecond-based, and ethereum timestamps are second-based. You do not know the pain i went through to discover i needed to multiply my ethereum block timestamp by 1000 to get the right value in javascript
true, but i think it's worth mentioning that OOP in JS is vastly different from OOP languages such as e.g. java. understanding the concept of the prototype chain is imo more important than learning the syntactic sugar keyword `class` and what it does (i agree a lot with kyle simpsons opinion on this, it's very misleading for people coming from different programming languages)
Depends on how the code is structured. Sometimes a recursive function will call itself too many times and crash, unless you move the next call to the next tick. Logical exit conditions don't matter when you need the function to be called more times than is allowed by the max call limit in a single tick.
firefox devtools got really fast too and they also have a memory profiler. however, recently i had a lot of issues with the firefox devtools (code continuing to run while being paused at a breakpoint, leading to variable hovers showing different values every time you hover them, breakpoints vanishing) and it's missing some features the chrome devtools have (event breakpoints, dom manipulation breakpoints etc.)
Hoisting. This was the thing that puzzled me most coming from C and Java.
My experience is that memory leaks are the most important things to look at when trying to increase performance. JavaScript is really nasty in this regard.
if i'd guess: the IIFE is invoked from the current scope, so basically it's similar to assign it to a property on `this` and then call the property, e.g. `this.b = function() { ... }; this.b()`. the function is only defined in the context of `this`, so i guess that's why it takes that context. to find out the answer without spoiling it to others, just run the code :D
No doubt about it, JS isn’t easy, however, the above list is still accurate and the nuance of the question has to do with IIFE’s, not a different type of ‘this’ binding.
The event-loop, it works differently from every other language because of this. Very fundamental to have a good understanding of this.
okay a user interface library then.
well, in that case the function call-site is no longer `owner`, but rather `button`. the `owner` object doesn't have anything to do with this function call anymore. for those cases i'd rather do something like that: `button.addEventListener('click', (e) =&gt; owner.func(e))` which (probably) has the desired behaviour. or, if you don't want to use arrow functions, it get's a bit messy: `button.addEventListener('click', owner.func.bind(owner))`
Use https://prettier.io/ and forget about linting
I'd say that it is quite slow more often than js is Good performance cases in python are when lots of intense computation is offloaded to C, for example numpy. This isn't true in js
Coercion leads to an unpredictability and that means that the uncertainity is high therefore there's a risk for code to be erroneous. A risk that should usually be avoided by the language itself. In simpler situations it might be okay-ish but in large codebases, with other things that contend to the unpredictable nature of Javascript, it does get messy and difficult and this holds specially true for data structures!
Object creation and what the “new” keyword actually does.
clone masterrace reporting in
Does this refer to the ability to get quick answers? Possibly by use of the browser's console to do quick tests?
Check out the video below. I didn’t really understand the event loop until this. The presenter does a really good job explaining and visualizing it. https://youtu.be/8aGhZQkoFbQ
\&gt; except that its value is *immutable* &amp;#x200B; What is immutable is the reference, not the value.
lodash
It's not just JS! I actually just found this out for myself last week while using C#.
I agree in some cases, but I still think it’s important to know. Many codebases use checks like if(!someVar) { ... } Which coerces someVar into a Boolean. While I rarely use ==, I don’t think core concepts of JavaScript should be avoided or overlooked.
&gt;of "Oh, I see!" moments I understand closure but had very few of these so far
Wouldn’t it be better to say that a const cannot be reassigned as opposed to being immutable?As you point out, you can mutate the contents of an array or object. Given: `const foo = [1, 2, 3];` You cannot reassign foo but you can mutate foo all you want.
Someone give this man gold!
Prettier does not replace a linter.
Prettier does not replace linting.
```document.querySelector('body')```
I was in the same boat as you. [Wes Bos' Javascript 30](https://javascript30.com/) helped me get over that hump.
`setTimeout(doSomething, 0);`
Why `this` refers to the constructor in a static context
Well, 2 really awesome use cases of closures I could name off the top of my head are: 1. When you create function factories, where the outer function can be used to create functions that have similar concerns. 2. The module pattern, that can be used to create private functions in javascript (where you return a set of functions whose logic is encapsulated).
&gt; * For beginner content, please post to /r/LearnJavascript instead of here.
I'm noticing this isn't the case as much anymore. In fact, if anything, this might have already transitioned over into "Writing code without React" - at least as far as DOM manipulations go. Those who know jQuery mostly seem to be in the boat of "I used it a few years ago, but am rusty now" while those without any of those "years ago" seem instead to know how to do things in React but not with the built-in APIs.
Psst... I think it would be helpful if you replied to the comment where you're seeing this ;) (^ then delete this guy)
Because closure and scope isn't the same in javascript either. A closure can have access to three scopes. It's own scope, an outer functions scope, and global scope.
Good call. I like that better
Fair enough.
In my experience working on a codebase with 10,000+ LOC, we never use closures. Every method is generally treated as atomic, where every call just accepts arguments are predictably returns results. Closures are cool but in my opinion can be confusing enough that they will cause some less JS focused developers a lot of issues debugging.
nothing wrong with jquery
Everybody is talking about the longer complaining if you don’t. Can someone explain why the linter cares?
Everything is an object, even functions
Yes, please don't associate const with immutability. They are not remotely related.
In case for prototyping you can use something like [https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/) or similar resource.
I think requiring the use of `async` was the only time I've ever used an IIFE in the past couple of years. Was never a fan of the pattern, and with [top level await](https://github.com/tc39/proposal-top-level-await) I may never use it again :)
f(1,2) returns undefined `function f(x + y) {` `return` `x + y;` `}`
`document.body`
* You can do most things without a \*\*\*\* framework. * Objects do not have Array prototypes on them. People coming from PHP I've noticed have this issue. * Cohesion in general. People coming from strictly typed languages having a tendency to want to mutate types of things. Then blame the language. You cant do that in other languages and the code work, I dont understand why they think they can do it now. * JS has debuggers. * Callbacks, promises, and await/async, and when it is the best use cases to use each. * That arrow functions and function keyword are not interchangeable, they have different interactions with \`this\`
Not in the latest version of node LTS apparently. I just tried and I got jan instead of feb: &gt; new Date(2019, 1, 1, 1, 1, 1); 2019-01-31T19:31:01.000Z
I think it's fair to be angry, but unreasonable to blame JS. [Useful thread](https://twitter.com/kragen/status/867638572664446976)
Did you get January 31?
That’s a good distinction. In fact, I nearly always use const even when I *intend* to mutate an object-like structure. Just keeps things a little more sane IMO. I’d rather have native immutability in JS though.
This is something I’ve barely looked into. How would you go about looking for memory leaks? And what are the typical culprits?
I still use vars. Don't @ me bros.
how old are you
I'd been using 2 without knowing about closures for a time, actually; I had an 'Oh, I see' moment after investigating when because closures love vaguely familiar
Yeah, I used to recommend Airbnb's style guide, but it's gotten _way_ too over-opinionated in the last couple years (especially on the React side). I'd suggest using `eslint-config-react-app` as a baseline, as it only warns about things that are actually likely to cause issues.
Measure memory usage, do all the things in your web app, measure again. If they don’t match, you’re either caching or have a leak. Typical issues is that functions bind their context (preventing releasing the memory), which are then attached to the DOM as event handlers and never removed. Another issue are references that are forgotten in some object that’s supposed to stick around. Even small referenced objects could hold references to much larger ones.
Oh yeah and that too in UTC timezone, not my local one! Turns out [this weird behavior is built into nodejs](https://github.com/nodejs/node/issues/19480). Almost every other lang I've worked on gives local time by default, looks like I've got a lot to learn!
[removed]
 &gt;Out of the blue I cannot give you a production example of "a var variable would be better here" I couldn't even give you a textbook example...
This is becoming more common. I feel like most new JS devs I talk to default to `let`. More specifically, what beginners don't know is the *difference* between scoping within a function block or enclosing block.
Object factories are cool, and even class factories!
I think pretty much every language has things like this.
Great attempt, but you have two options, allow the HTML to submit and have PHP to validate and return with the errors. Or have JS break the submit process, run the validation which needs improvement, and then ajax push the form. I hope you have a PHP sanitation process before the data hits the DB. Parsleyjs can help with the frontend validation.
As others have said, prettier should not be used to wholesale replace a linter, because it only handles formatting, not code quality, such as recommending `let` and `const`. However I think it's great to replace all the formatting rules in your linter so that it can focus only on code quality while prettier handles the formatting with zero config. Having to fix formatting yourself to adhere to strict linter rules sucks. We run prettier on commit.
I wrote an article on const too! It's real short, wanna read it? Here it is: Const shmonst.
I tend to agree with you there. Predictability is important for testing functions, and closures add complexity. But as far as function dependencies go, closures provide a better way to inject dependencies than simply storing dependencies in some outer scope that other parts of your code can have access to and possibly mutate. At least you know that the only functions that have access to that dependency are the ones that were returned from that closure. But it’s not something I would want to do very often.
Value vs Reference
Were just defining functions on the function itself instead of its prototype for 10 years? That's like avoiding using Promises because you can do things with callbacks.
Hi /u/z7z7z7, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
The idea of references. This comes up in so many places: - Mutability (and all the associated CS concepts that go with it: pure functions, race conditions etc.) - Triple equals equality on objects (which compares their references) - a lot of React uses memoization for performance gains and comparison of references (functions, props.children, other objects) is the first place memoization usually fails - Garbage collection (and related memory leaks from things not being GCd) and things that build on this like WeakMaps and [WeakRefs / FinalizationGroups](https://github.com/tc39/proposal-weakrefs/blob/master/README.md) (the latter currently just being a proposal). - Passing by value / reference to functions - The reason that there is both let and const. I’m sure I’m missing some places!
Yes, I feel like a pure functional programming approach helps minimize the need. It seems like it was good for making your own getter and setter functions but those are built into JS now...
try this: new Date(2019, 1, 1, 1, 1, 1).toString();
You can also take a function as an argument (or from a reference in an outer scope), and `apply` it inside the current function’s scope, which is how classes are “extended.”
If I’m not mistaken, this act of exiting a recursive loop temporarily to resolve the call stack, and then resuming immediately, is referred to as a “thunk.”
Yes, I also believe hidden classes are why the class can perform much better than object literals. It likely provides a mean to quickly recognize the optimized code path. On some browsers arrays are almost as fast.
&gt;this in a function =&gt; function context That approach is wrong. And what's more that is the root of most misconceptions. Given a function, say `function f() { console.log(this); }`, _you don't know_ the value of `this`, because the value of `this` is always determined at the _call point_. The same applies when you say "this in a method of an object". That means nothing. Given the following object: let o = { f: function() { console.log(this); } }; Again, what's the value of `this` there? _You don't know_, because I didn't tell you _how_ I am calling it. So, the general approach you are using to define those rules is wrong in itself.
Local server time wouldn't be that useful
Yes, this sucks, I can't even check the object's properties in the console, it immediately crashes.
Kind of, but not really. Primitives aren't objects but do get autoboxed when you try to use them as one. `undefined` and `null` are also explicitly not objects nor get boxed.
`setImmediate` is less standard, but supposed faster than `setTimeout` set to zero. It’s basically a native implementation of `setTimeout( ... , 0)`.
I agree with you totally. These days, my team usually will be working with React and we stick with pure functional programming as much as possible. However in the past I have had times where a closure would work, but in that case I actually would opt to use the `new` keyword and made instances of a `Thing` that all have internal scope, but could be observed and interacted with. It's really just a question of preference and using the right tool for the job.
Accounting for manipulating primitive vs class data types.
RxJS, big time saver. You will never need to waste your time to deal with callback hell promises, async await D:
Where JavaScript ends, and libraries or frameworks begin
This is poorly written. If obj2 is an object or an array, changes in obj1 will change obj2 since obj1 is just a reference to obj2. Any primitive value such as numbers, strings, and booleans are not passed by reference. Object.assign does not assign the obj2 to obj1, but assigns all properties of obj2 to obj1. This is very different than obj1 = obj2 since obj1 must be an existing object and will have references to any object in obj2 as well as copies of primitives, AND whatever was in the original object that hadn’t been assigned from object 2.
JavaScript has more than most. I get why due to it's history but man is it frustrating some days.
Is a global not just an outer function scope? Like the window object in a browser is just the most outer one so all child functions have access to its properties.
related: doing math with floats
This is exactly what I do. I find it infuriating when I have an extra compile step in development just to fix some white space errors.
How to produce clean and organized code in JavaScript is the hardest part. Beginner's code is usually a mess
What is the advantage to using a function instead of declaring the pencil as an object with it's own properties and methods?
JavaScript treats functions as data. A function is a datatype, just like any other object. This means you can pass it around from place to place just as you would pass a string or a number. What closure gives you is a stable environment to do this. When you create a function, it gains a closure scope that contains all the variables that the function could see when it was defined. These variables are still available no matter when and how you run your function in the future. Some example use cases are: Event handlers. Create them now, and have your code execute them later in another context. They still work. ES6 modules. All those variables you declare in your module live in the function closure. Import them later, they still work. There are many others. It's core to the language.
Gotcha, thank you. 😊
I remember really realising I had “got” closures when I realised the similarity between closures and classes, and that you can basically model the latter with the former (albeit less efficiently)
Yeah that’s one of the huge advantages of JavaScript. The visual feedback loop is so much faster with JavaScript than with a lot of other languages, simply because it works in the browser. And building UI with it is a breeze in comparison to other things.
Have a style guide/best practices outlined for the JS code you write. JS will let you get away with a lot of weird things without causing an error, but may not function in the manner you expected. &amp;#x200B; I personally do a lot of console.log() lines to ensure functions are doing what they should during development. This isnt a profound realization, you should always be testing your code as you go. you know, unless you want to code in challenge mode. &amp;#x200B; This is not my content, but check out this post for some examples of "weirdness" [https://blog.mgechev.com/2013/02/22/javascript-the-weird-parts/](https://blog.mgechev.com/2013/02/22/javascript-the-weird-parts/)
Yeah especially waiting for promises to resolve and parallel stuff with async/await. For example i see this in a lot of my code reviews with new js programmers: // does some parallel async stuff arrayOfItems.forEach(async item =&gt; { await doSomethingAsync(item) }) doSomethingWhenDone() This won't wait for the promise to actually resolve outside of the `forEach` and call `doSomethingWhenDone()`. If your program exist it will not wait for your async work to be done. either do: const pendingPromises = [] arrayOfItems.forEach(item =&gt; { pendingPromises.push(doSomethingAsync(item)) }) await Promise.all(pendingPromises) doSomethingWhenDone() Or if you like mapping over promises. await Promise.all( arrayOfItems.map(async item =&gt; { await doSomethingAsync(item) }) ) doSomethingWhenDone() examples https://repl.it/repls/WeeklyColorfulGraduate
Using var still seems like common practice on Stack Overflow and in a lot of documentation / tutorials as well.
I'm far more likely to see folks reengineering problems that can easily be solved with jQuery than i am folks who use it too much
You used the word "tracks" yourself, in describing what mobx does for computed values, and not needing a `@computed` decorator sounds cleaner to me. Is there something confusing about that, or are you talking about something else?
The official repo explains all the rules. At my company we ended up making our own config that extends the airbnb one, and I’m generally fine with people ignoring certain very opinionated rules in their projects if they want. No regrets. Our projects are much more consistent, and nobody has really complained
That's the point of a linter: to enforce guidelines. It doesn't matter so much when you're working on a solo project, but when you've got a dozen people working in the same code base all styling their code differently, it gets messy real fast.
that: const catObject = { type: 'cat', attributes: { hasFur: true } } const copy = Object.assign({}, catObject) // Or const copy = { ...catObject } will not create a copy of the nested object `attributtes`, it's still a reference to the original object. So changing the attributes object will change it for all copies. example https://repl.it/repls/FloralwhiteGruesomeSystemcall
It's not array based. The months come back zero based so you can have an array of month names and get the correct label. See also Date.prototype.getDay() for day of the week labels.
How do you reference a function object by the contents of that function?
getDay() is zero based for same reason getMonth() is. So you can have an array of labels and use the result to get the correct index.
How much bang for your buck you get from just knowing your operators, like conditional evaluation of expressions when you use boolean operators, and what those operators actually evaluate to (i.e. their operands, not true/false). With that, destructuring, spread, and array functions like map and reduce, you can be very expressive with very little code. It's double edged, though. Another thing beginners don't know is how important it is to comment very expressive code.
 false == 'false' // false false == '' // true false === '' // false var x = false || 'foo' // x is 'foo' var y = true || 'foo' // y is true var z = y &amp;&amp; x // z is 'foo'
A lot of devs coming from other languages assume `const` means constant value, whereas it's actually simply constant reference (i.e. can't reassign that variable). You can't do ``` const a = 1 a = 2 // error! ``` but this is fine ``` const obj = {} obj.newProp = 1 ``` Check out [Object.freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) if you want to prevent the value (objects, specifically) from being changed.
That’s probably the better option, both for transparency and for memory safety. But I’m definitely on board the functional programming train nowadays, especially with React.
This allows you to use the month as an index: &gt; ['jan', 'feb', 'mar', 'apr', 'may', 'etc'][new Date().getMonth()] "may" It probably sounded like a good idea at the time. Anyhow, that's why it is that way. This behavior isn't unique to JS either.
Does this affect anyone really? Lol
TIL!
Fair enough. Both of those features are things I'm not terribly skilled at evaluating — a personal shortcoming, certainly — but for what it's worth I just checked Firefox and it has panels for both. I have to be honest I find the Chrome dev tools kind of bewildering to look at, at least at first glance. It does seem to be better about error reporting though — the one time I do use it is if I’m not getting clear messages in FF, sometimes Chrome will help.
That Java is not the same as Javascript
It is still immutable regardless. It works the same way in java as well. You may have a different definition of immutability but in this case an object reference is stored not a variable. You can change the object because that object has functions to change itself but you cannot change the initial value assigned to const which is the reference. Not understanding this will make you a worse programmer.
just when use setTimeout and pass something like ( ) =&gt; {this.dosomething()} in some objects' method. or Array.forEach((entry) =&gt;{ this.something()}).
can you give me an example of how running &amp;#x200B; &amp;#x200B; let o = { f: function() { console.log(this); } }; o.f(); &amp;#x200B; &amp;#x200B; prints out anything except the Object o? &amp;#x200B; Also, to your first point, yes you can change the context at the call point with call/apply/bind, however, am I wrong to say that this applies to the closure created by the function in non call/apply/bind cases?
It really doesnt though. It has one line for what the rules does without why it's needed, what its there to prevent. It seems like overkill for smaller teams where people mostly work on their own code, but still want it to match.
NaN is a number.
Great response! Just wanted to add that one can `JSON.parse(JSON.stringify(catObject))` to deep clone simple objects. Note that this method has its downsides: it will ignore all values that dont exist in JSON (functions etc.). Most of the time I would suggest lodash though.
[https://i.imgur.com/yv8LHg5.png](https://i.imgur.com/yv8LHg5.png) Looks like there is a "Why" statement for many rules/examples. The ones that lack a "Why" seem to mostly just be "because consistency". I gradually learned what each rule does, by reading their docs and googling the rule if I still didn't understand it. Might not be ideal, but honestly I learned a ton by doing this. I'm conflicted. I've worked alone, on small teams, and large teams. I now lead a medium sized team and oversee the projects of other teams. I've used airbnb to varying degrees, also standardjs. Now I don't like working without it. It took some getting used to, to feel like the linter wasn't getting in the way, but now I would never go back, even in personal projects. At some point you have to compromise. Not everybody is going to love every single rule, especially if you use Airbnb out of the box. People on your team may only work on their own projects, but what happens when someone quits? Now somebody else has to take over that project, and the closer it is to a common linting config, the easier that process is going to be.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/yv8LHg5.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ep62fo2)
this
I didn't say I would call it doing `o.f();`. And that's the whole point. You may have defined the function as "a method in some object", but I am not obliged to call it in that way. _One_ such possibility is exemplified below in /u/senocular's comment, where the method is used as event handler. And you don't need call/apply/bind. For this second case, I could do... let f = o.f; f(); For the first case, I could just do the opposite. // function h() { console.log(this); } let o.g = h; o.g(); The thing is that the general approach of your _rules_ is based on where `this` appears (_this in_ here, _this in_ there...). And the correct general approach can't be based on that and should be based on how you call the function on each occasion.
Ah, out of the 6 months in the year, my favourite has to be "etc", such lovely weather during that time of year!
Better than Smarch
Also all those nifty higher order functions like map, sort, and filter
* Linting (eslint) * esdoc blocks * Anonymous Functions * ES6 &amp; ES7
&gt; generators are the future of execution flow Considering how often I see warnings about asyncToGenerator, I'm going to go ahead and say generators are the now of execution flow. https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator
Its not IIFE specific. Same applies to a named function declaration called normally. this.a = 1; function foo () { this.a = 2; console.log(this.a); } foo(); console.log(this.a);
Lousy Smarch weather.
Within a year or two the javascript language will be been replaced by languages targeting wasm. Browser tooling like source maps will make this as comfortable as working with javascript in the browser is today. The language server protocol will make editors and debuggers workable outside the browser. The need for wasm to go through a javascript language/engine/runtime to interact with the dom and the rest of the browser is just a boostrapping stepping stone and will be discarded. Somebody will demo a browser that has no explicit implementation language, but runs anything compiled to wasm directly, without any javascript language or engine or runtime. Then javascript will overnight become a historical footnote.
Nice transform thanks.
I 100% agree with you. I'm all on board with using a style guide, I just think we'll chose one with better explanation of the reasons behind the rules. AirrBnB seems to be the strictest out of the popular styleguides, yet the documentation has the least explanation as to why some of the rules are there. The 1 sentence above each rules doesn't do a good job of explaining most.
Not exactly. Scope doesn't really come into play for context (value of `this`) except for arrow functions where `this` is specifically taken from the scope. Here, you have a function that is called as a normal function and not from an object as an object method. Even though its an IIFE, it operates just as it would as if you named it and called if from a single variable name. Given that it's not called from an object, the function will use the default binding which sets `this` as the global object (or `undefined` in strict mode). In this example, we have to assume we're not in strict mode since it would error if we were. So we're running the code in global which makes `this.a = 1` set a global variable. Then when called, the function's context is also global, so it sets the same global property, `a`, to 2. Then all logs that follow log that same `a`. But you could have just as well called this same function in some other function where `this` in that scope was different and this function would still have a global context.
It's a nice mini-template engine. I built [something similar](https://github.com/sidvishnoi/birk) a while ago. One thing I really focused on was: helpful error messages. For example, if you write `{% iff conf %}`, would be nicer if it can something like "unknown tag 'iff' at line n". When it comes to multiline partials, error would tell the issue was in partial, instead of template that is using it, etc. About that "extremely fast" claim, would be nicer if you can provide some benchmarks. I really liked how you've integrated many features with the `for` tag.
Note: `setImmediate` is not a standardized feature of JS and only exists in Node.js, IE10, IE11, and pre-Chromium Edge.
something like this? ```js onSubmit = (propFunc) =&gt; (e) =&gt; { e.preventDefault(); propFunc(); this.props.updateSearchString(''); }; ```
Less standard? How about [not standard at all](https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate)?
Much better to use the locale API. const month = date.toLocaleString('en-us', { month: 'short' });
Yes, exactly. I agree with both your points. I find async await makes a lot more sense in given contexts, where others it may not or you need additional functionality. I switch between the two depending on the given context.
&gt; it's very misleading for people coming from different programming languages Depends on which different language we're talking about. JavaScript's classes work surprisingly similar to Python's or Ruby's classes. [JavaScript and Python classes side-by-side](https://i.imgur.com/p9Kw815.png)
Yes, I was just providing a method for doing so. However, you could also accomplish it through other means. Hopefully that doesn't confuse anyone that read it.
Yeah, just an IE/Edge thing for now (I assume Edge won’t implement it once they roll out Chromium-based Edge). I’m honestly surprised that other browsers haven’t implemented it since it has always been a popular proposal on the front-end dev side of things, but I’m sure there are some very good reasons I don’t know about.
This. I’ve turned only one or two rules off in legacy projects but other than that I think it’s near perfect.
Arrow functions aren't the same as anonymous functions. For example, `function () {}` is anonymous, but it's not an arrow function. One thing I don't know though is if functions assigned to a variable are counted as anonymous. Like `const f = function () {}` or `const f = () =&gt; {}`
You use a function to *create* such an object if you want an object (ES6 Classes are just syntactic sugar over functions), but the other way around doesn't work if you ever want more than one single pencil in your program.
&gt; I don't know though is if functions assigned to a variable are counted as anonymous I think I've read they're still anonymous and a pain in the ass to find in stacktraces which is why even in that method, people recommend naming your function (at least, it's recommended in the AirBnB linter)
This actually makes sense in a way. Hours, minutes, seconds don’t start at 01:01:01. They start at 00:00:00. Think of it this way: your example gives you the second millisecond of the second minute of the second hour of the first day of the second month. Days are actually the odd ones. Not the months. But it would make even less sense to refer to days as 0 index I think.
Don't try to be clever. Write code that is easy to read and understand.
And how have you gotten on getting started? What is tripping you up, where have you got to? Or would you like someone to do it for you?
srsly when was this written??? `var` everywhere, using factory functions, prototype methods, i literally haven't used any of this crap in years and don't miss it at all
Also, this is a pet peeve of mine: when I see a function that returns a promise being called w/async+await around it (as inside your map function). You've just wrapped one promise in another, and all it's done is added overhead which does take some performance hit. In your example, it could just be written as \`await Promise.all(arrayOfItems.map(doSomethingAsync));\` (That's about as many operations as I would put on one line though :)
okay so far I've kinda figured out how to work my solution out a different way. I'm working on a drawer style navbar and I figured out something simpler.
https://eloquentjavascript.net/ – helped me a lot.
Honestly just pick something you want to build and start building it. Too many people get hung up on generic tutorials that don't teach you any practical knowledge. Since you are a beginner with JS but an experienced designer, I'd might recommend checking out Vue.js, not React, only because it's a lot more approachable for a beginner. The official documentation is fantastic and they link to other tutorials. Pick something reasonable. The two examples you provided are almost completely unattainable for a beginner, many professional engineers would scratch their heads over how to approach those. It may sound silly but you can get everything you need from google. For instance, if I want to learn how to set up a Mapbox map in a Vue.js app, I'll google "Vue.js mapbox tutorial"
Scheduling in general is a pretty advanced topic, if you take different execution environments into account (e. g. Node.js has a `process.nextTick()`, which is actually "more immediate" than `setImmediate()`). The presence of microtasks, idle callbacks and animation frames doesn't make life easier for a beginner as well.
This should be an equivalent // [].slice.call(...) converts a node list into an array var headers = [].slice.call(document.querySelector('.headers')); var products = [].slice.call(document.querySelector('.products')); var rooms = [].slice.call(document.querySelector('.rooms')); headers[0].addEventListener('click', function(event) { event.stopPropagation(); // Note `.slideToggle()` is not a JS method and you will // need to recreate its functionality. I found this S/O // thread regarding this. // https://stackoverflow.com/questions/29949331/convert-jquery-slidetoggle-code-to-javascript // // rooms.slideToggle(); products.forEach(function(product) { product.style.display = 'none'; }); }, false); headers[headers.length - 1].addEventListener('click', function(event) { event.stopPropagation(); // Note `.slideToggle()` is not a JS method and you will // need to recreate its functionality. I found this S/O // thread regarding this. // https://stackoverflow.com/questions/29949331/convert-jquery-slidetoggle-code-to-javascript // // products.slideToggle(); rooms.forEach(function(room) { room.style.display = 'none'; }); }, false); document.body.addEventListener('click', function(event) { rooms.forEach(function(room) { room.style.display = 'none'; }); products.forEach(function(product) { product.style.display = 'none'; }); }, false); Here's another S/O thread regarding `$(document).ready();` https://stackoverflow.com/questions/9899372/pure-javascript-equivalent-of-jquerys-ready-how-to-call-a-function-when-t Note this isn't perfect. For example `$('.headers:first')` is slightly different than `document.querySelector('.headers')[0]`. Edit: - This is a copy of your jQuery into JS, there's some refactoring that could be done with this snippet. - I opted not use ES6 in the example
References. Like when passing a reference to an object to some function and you cannot understand why the original object changed.
That 0.1+0.2 !== 0.3.
I like the object method chaining for filters. I don't like that the docs use `var`, and use `let` incorrectly when `const` would be preferred (pretty sure every single time you use `let` in your repo, you could be using `const`). I don't like the project doesn't have a linter set up. Look into ESLint + Airbnb core / standardjs. Also we generally don't throw all of the dist assets in the root directory, you should have your src in `/src` or `/lib`, and your dist assets in `/dist`
Thanks, I has opened issue about unknown tag and change "extremely fast" to just "fast"
Could I roughly boil that article down to: closures a) have access to outside variables, but restrict inside variables and b) provide a new \`this\` context?
You can achieve the "center of the screen regardless of how low you are scrolled" with CSS alone, by making it position fixed. Then just use JavaScript to toggle it hidden/shown, with a transition effect if you like. &amp;#x200B; `position: fixed;` `top: 50%:` `left: 50%;` `transform: translate3d(-50%, -50%, 0);` off the top of my head, \^ that CSS should get you close to where you need to be.
Peace be upon you and God's mercy and blessings, thank God, thank God, I found the solution Finally, see my brothers to the solution: [https://codepen.io/emozlove/pen/YbvRMd](https://codepen.io/emozlove/pen/YbvRMd), Thank you for help and you can close this Problem \^ \_ \^
I suppose that would be nice, but I think you underestimate the inertia. Though seeing as how quickly new frameworks get adopted, I might be overestimating it.
Settimeout doesn’t guarantee your function will be called exactly at the timeout time. This is a minimum time after which your function will be invoked
section 1 gives basic definition and examples; section 2 provides extension to accounts allowing deposits and withdrawals, solvable offline in users browser.
 let headers = document.querySelectorAll('.headers') headers[0] .addEventListener('click', (e) =&gt; { e.preventDefault() document .querySelectorAll('.rooms') .forEach(room =&gt; room .innerText = atob('aSJtIGEgbGF6eSBjaGVhdGVy')) document .querySelectorAll('.products') .forEach(product =&gt; product .innerText = atob('RG8geW91ciBvd24gd29yay4')) }) headers[headers.length - 1] .addEventListener('click', (e) =&gt; { e.preventDefault() document. querySelectorAll('.rooms') .forEach(room =&gt; room .innerText = atob('RG8geW91ciBvd24gd29yay4')) document .querySelectorAll('.products') .forEach(product =&gt; product .innerText = atob('aSJtIGEgbGF6eSBjaGVhdGVy')) }) document .querySelector('body') .addEventListener('click', (e) =&gt; { e.preventDefault() let rooms = document.querySelectorAll('.rooms') rooms .forEach(room =&gt; room.remove()) let products = document.querySelectorAll('.products') products .forEach(product =&gt; product.remove()) })
[MomentJS](https://momentjs.com/) has made me so happy over the years.
&gt;var headers = \[\].slice.call(document.querySelector('.headers')); You want `querySelectorAll` -- `querySelector` returns a single element, not a nodeList. Also, you don't need to convert to an array to access a node by index in a nodeList -- `document.querySelectorAll('.headers')\[0\]` will work.
thatsthejoke.jpg
Hi /u/mrjerry26, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thanks for feedback, will refactor
You will need to convert it when using `forEarch` method which I am.
Woah. This article is awesome! I thought I understood what closures were but totally misunderstood the meaning. Thanks!
[Primitive wrapper objects](https://javascriptrefined.io/the-wrapper-object-400311b29151)
So many JavaScript beginners don't know how to create WYSIWYG rich text editor from scratch. This is a great guide &gt;&gt;&gt; https://www.superguideblog.com/2019/03/building-javascript-wysiwyg-text-editor-from-scratch.html
so, you never pass an anonymous function to array.map, filter, etc ?
But not on `'.headers'`, so it's unnecessary there. Anyway that's a nit, the `querySelectorAll` is the important difference.
Hi /u/HungaryZ, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Snicker_Likins, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Use MDN as your primary documentation for anything JS, CSS or HTML. And while you’re there spend some time clicking around and you’ll learn a ton of useful stuff you didn’t know was possible with native browser APIs.
Hi /u/MathewDesigner, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AL1ENB0Y, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rms_returns, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Sig_Luna, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/moun3_im, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/asafaviv, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That they should use Typescript instead
You're right. It should be const obj2 = Object.assign({}, obj1)
Just because "it works the same way in java" it doesn't mean it's automatically right... :-)
out of curiosity, if you ask that question, what are you looking for? Considering that in modern code, this is used far less in a confusing place than it used to be -- i haven't used it outside of classes where it generally makes sense, or interacting with libraries that have a generally ridiculous dependency on it (ie, the callback that the library uses has to access 'this' to get results.. which is, frankly, about one of the dumbest things i've ever seen)
Using var within a browser console is a good way to test as you don't need to refresh to redeclare a binding. I bet that's 90% of why it lingers in tutorials.
But it isn't. const a = somefunction(); // later on, as the project evolves let a; // oh look, I have to change it now.... if (aTest) { a = somefunction(); } else { a = anotherfunction(); } Also const a = []; // all good a.push(123); a.push(456); // it's a variation of the above, but now I get an error a = a.concat([123, 456]);
Thanks so much. It’s good to hear my theory wan’t completely off the mark.
Isn’t it the same thing as “self” in python?
Nice! But why is it called constant by _reference_? In other languages like C++ you can’t reassign the constant variable nor can you change the property of the object it is assigned to whether it is constant reference or constant value? struct Ob { int i = 0;}; const Ob foo; foo.i = 1; //error foo= Ob(); //error Ob bar; const Ob &amp;zoo = bar; zoo.i = 1; //error
Right and I already stated the code can be refactored and I only made a copy of the jQuery code. Yup and I updated the snippet with that. Thanks.
 const arr = [1, 2, 3, 4]; const query = `SELECT * FROM comments WHERE id IN(${arr.map(item =&gt; `$${item}`).join(', ').trimEnd()})`;
Kind of. Similar idea, different behavior.
Oh yes this is spot on
Thank fuck...! I can rest easy now
I ask questions, have people do a small coding challenge, and also have them review a PR. With the questions, I don't dig too deep into it, but ask things like where you might see problems in the use of `this` and things like how arrow functions are different from other functions where I expect the handling of `this` to be mentioned. If something comes up in that conversation that seems off, I might prod a little more which might lead down a path showing they might misunderstand it more. The coding challenge is something done from scratch, so use of `this` is up to them (its small enough that I don't think I've ever seen it used) but the PR is littered with poor uses of `this`. Even when people catch these, it's not uncommon that its for the wrong reasons. The PR isn't terribly unlike some of the code we have in our codebase, particularly the older, more legacy code. There are a lot of classes (constructor functions, no `class`) and uses of promises without `await` and other callbacks that can cause problems when you're not handling `this` correctly. It's important people can deal with this code just as well as the newer stuff.
Look into abstract &amp; specialized functions. I use closures all the time. When I started with js, I almost never used them.
Prototypal inheritance vs. classical inheritance
I completely understand closures now and have done a couple of advanced JS courses on the subject. I haven't worked on big scale projects but have done a couple of smaller ones. Not sure how closures would speed up the development time, I can't seem to pass beyond using closures to keep data private in method, or turn code into some sort of module or use it with setTimeOut to properly use the increment variable. Care to elaborate? I have been really struggling to put this thing in practice.
uh, we don't get to vote? just see how mystery people voted? :(
When we talk about atomic functions that produce always the same kind of output with the given output, are we not talking about the functional programming paradigm?
JavaScript for the front end is pretty worthless if you don't understand how html and css work and function together.
I’m trying to avoid monkeying with each rule I don’t like. I’d end up back where I started.
So you think I should carry on learning html before I move onto JS?
Put the valid codes in a select element. When it's selected, move it to a readonly text box. Make sure there's a way to remove an accidentally entered code. Otherwise you have to figure out when someone is done typing a valid code and send it to a validation server via some AJAX call and use the response to notify the user.
If you declare a var in a for() loop without intializing it to a value, once the value gets set it gets retained for subsequent iterations through the loop: for (var i = 0; i &lt; 3; i++) { var foo; if (someCondition()) foo = i; if (foo != null) { // This will be true if someCondition returned true in this loop // OR if it returned true in an earlier loop } }
you should definitely have a solid grasp on the DOM, how pages are rendered, and general semantics of HTML before moving on. it will make JS much easier to learn
It is right because an array isn't a raw data type and if you want the same object every time you can provide facilities to do so but avocating against efficient memory management is just plain silly.
This is an oversimplification, but it basically makes it possible for browsers to implement support for standards faster now that there's less risk for conflict in standards and the standards also benefit in being developed faster thanks to the united effort. Benefits everyone in the long run.
Promises are a lot easier to grasp if beginners remember that they are are just monoids in the category of endofunctors.
One question for OP: is this an app you're making as a way to learn, or is it an app you're making that needs to be used in the near future? If the former, then the advice I've seen here is accurate. If it's the latter and you need an actual, working database-centric sooner than later, I'd recommend checking out Firebase. It will let you have a powerful database with real-time updating baked in and secure authentication very, very quickly. The biggest issue is that it will cost more and probably be less flexible than a solution you roll yourself, but if you need an app that has basic functionality and you're starting with no knowledge of databases or authentication, it will get you on your feet much faster.
Don't spend a ton of time learning HTML. Once you understand the syntax (tags, attributes, nesting, etc.) the structure of a page (doctype, head, body), and common tags (`div`, `input`, `script`, etc.), you probably know enough to move on (you will continue learning about HTML as you learn CSS and JS). Once you know HTML, you could jump straight into either CSS or JS or both. I'd probably recommend CSS first because building unstyled apps/websites isn't really an option, but building simple sites without JS is. With CSS, I'd also recommend not spending a crazy amount of time before moving on (you will continue learning). Learn about selectors and common properties (`width`, `height`, `margin`, `padding`, `border`) and [flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/). Maybe learn the basics of [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) and [animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations) too. From there, you could jump into JS and start adding interactivity to your static site. The JS syntax is a bit more complicated than HTML or CSS, so it will likely take longer to completely grasp (though it will be more familiar than HTML/CSS if you've worked with any C-style language in the past). The advice most people would give here is: learn the syntax and the [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction) before jumping into frameworks like React/Vue/Angular. At this point you could also start playing with server-side JS using [Node](https://nodejs.org/en/about/). The best advice I can give is: pick a simple project idea and work on it. You will learn most of the basics as you need them. Don't expect it to be original or ground-breaking; you're building it for yourself.
Try reading the `eslint` page for each rule. Most of them discuss the reason why the rule might be used.
Definitely. But don't master it... just understand the fundamentals. Learn the rest when you're developing web-pages and incorporating JavaScript.
That's what I would expect, and also what I get running the code in Node.
Thanks a ton for your reply, I implemented what you suggested and was led in the right direction. So now the image is centering, but now I have it so that I can only close it when I click the X at the top right of the image and not when I click outside the image, which is what I want. I'll figure it out somehow. The post was apparently removed from the JavaScript group, so I'm fortunate you replied quickly or else I would still be stuck.
Garbage Collection?
Using abstraction libraries should be carefully considered, not thrown around like a favorite set of tools. The number of times I've seen Ramda in a code base that used to be readable... Bonus: Understanding the cost of simplicity over artifact size. I've had developers spend multiple days pulling out lodash and inlining 1/8th of it into the codebase to "reduce node_modules size". The size of node_modules is fine, please get back to work on things that matter (I promise a single unsanitized input is always worse than making an AWS machine with a 10gbps network card download 10mb - trust me, it will be FINE). No one seems to care about that SQL query that's shipping 50mb over the network, but 50mb of node_modules and suddenly everyone loses their minds! &lt;/grumpy-ops-rant&gt;
They could always use npm-lazy if they want to cache it for multiple machines.
My main js code at work is used in an old Rhino engine so I normally have to use var at work.
To get the image to close when you click away from it, you'll have to add an event listener to the document to ensure that the click was not on the image itself. In other words, clicking anywhere on the page besides the image will close the image. I'm rusty on jQuery but in ES6 JS it would look something like this: &amp;#x200B; const image = document.querySelector('.my-image'); const body = document.querySelector('body'); body.addEventListener('click', (event) =&gt; { const imageCurrentlyVisible = window.getComputedStyle(image).display !== none; if (imageCurrentlyVisible &amp;&amp; event.target !== image) { image.style.display = 'none'; } }) &amp;#x200B; Basically, if the image is visible, and you click anywhere on the body that's not the image, it will close. Be aware that this body event listener may conflict with other listeners. An alternative way of doing it is to cover the page with a "shadow" behind the image, and close the image when the user clicks on the shadow. Hope this helps
&gt; npm-lazy Haven't heard of this, but yarn already caches properly - the install time is very short, but for some reason the size of the directory comes up continually. No one seems to bat an eye at my Packer build which apt-get's about 3gb of applications - probably because they aren't aware. Anyways, my point is some Node developers tend to think of dependencies as a bad thing that should only ever be used in extreme need - getting the work done is always more important than bundle size. I can reduce bundle size easily - what I can't do is guess why you wrote your own file-system abstraction or Promise system, 6 months after you've quit and found a new job.
I mean first I’d start with the reason you don’t like it. Is it because it’s unfamiliar? If so, fix that. Or Is it because it’s actually not a super essential rule? The main rules I tend to disable are things like the strict arrow function rules (they are very very opinionated and are not essential for using arrow functions at all), comma dangle (airbnb requires dangling commas for better git diffing but most people I know hate this rule, it’s not essential), don’t require file extensions for import, etc. It takes some expertise to fairly judge what is essential and what is too much opinion. If you lack this expertise, there’s an easy fix for that, start learnin! :) Another thought: I generally start a discussion when we are looking at changing our linting rules so anyone can voice their opinions. I will push back any feedback like “that looks weird”, “I’ve never heard of that so I don’t want it”, because those are not valid arguments for making an informed decision. Everyone is entitled to an opinion, but nobody is entitled to force others to be affected by this opinion, they have to back it up with a convincing argument.
My favorite way to run code asynchronously as tightly as possible (absent node's nextTick stuff) is to use `Promise.resolve().then(...)`. That will schedule a microtask, which may end up running after other scheduled microtask, but still long before anything else. It's so fast it can often be "too fast", particularly if you're hoping the browser will redraw anything before calling your code again, the way a `setTimeout(... ,0)` would. There are other approaches, like mildly abusing the `postMessage` API, but nothing as straightforward as an immediate promise.
Or implement a linter.
I think HTML and CSS are an excellent place for any beginner to start. They’re simple enough to learn and are necessary for any website. The concepts are easy to grasp and give you a good jumping off point for JS since you can work with the HTML and CSS you just learned. Good luck!
For myself, I definitely would recommend getting a basic understanding of CSS/HTML but I would spend a lot more time learning JavaScript inside and out, especially iterative loops vs recursion, higher order functions, closures, the prototype chain, and all of the native methods up to at least ES6. Doing so will set you up to understand any JavaScript/typescript framework or library you encounter, and will help you develop quickly from a technician who memorizes syntax to an engineer who understands the underpinnings and can creatively tackle complex problems in vanilla JS, react, angular, vue, express, node, nest etc.
These threads give me anxiety cause even if it's something I know about, just seeing the highly upvoted comments makes me question whether or not I actually understand it. Then again this is titled begginers.
React form validation hook: [https://react-hook-form.com/](https://react-hook-form.com/)
Even Object.assign can be tricky when you have nested objects! See [https://repl.it/repls/FloralwhiteGruesomeSystemcall](https://repl.it/repls/FloralwhiteGruesomeSystemcall)
In a lot of languages the terminology is split into promises/futures which would make more sense to you.
My code works with only fixed length of product codes but its bad solution. There must be solution for simplify version. My textbox allows only type these codes what are in whitelist, you can't type anything else. But my code problem is I can't use product codes like: AAAB001, BBBBBBBX000001, CCA000001 (product code last numbers are count of how many products are manufactured).. becuase their beginning is different length and ending (001, 000001, ..) of product code is different length.. My code let's only type product code 9 digit length and ending 7 digit length.. So all product codes are same length, but I dont want that. I want allow different lengths of product codes and you can't type anything else in textbox.
Async/await are just syntactic sugar around promises, and there are times when the former is more appropriate.
The following will break, telling myFunc is not defined. `myFunc();` `const myFunc = function(){ ... };` The following one won't trigger error. `myFunc();` `function myFunc() { ...}` The first one is called "function expression", the second one is called "function declaration". Understanding the difference teach a lot about how js is interpretedby the runtime.
What happened to pen?
The nightmare scenario: someone writes a compiler for JS to compile it to WASM. It starts as a joke, but then someone figures out the garbage collection and whatnot, and it becomes the new standard.
 typeof null === 'object'
* When to use the Object Oriented model and when to use the Functional Model. (Short summary: If you have a thing that's going to persist, but need to change state, and don't know what actions are going to be done on it until runtime, lean towards object-oriented. If you need to do the same action multiple times to different things, lean towards functional.) * Currying. Not that they don't know \*how\* to curry, but how currying makes things SO much easier once you really get the hang of it -- dependency injection, differentiating between prod and dev databases without having to write a whole bunch of if(isProd){} statements, creating higher order React components, allowing you to use parameters in React's render method... * Pointers. Yeah, JS doesn't \*use\* pointers the way that C, C++, or Rust might use pointers, but under the hood, that's what you're doing when you "pass by reference" vs. "passing by value". Learning a bit of rudimentary C helped me avoid a lot of hard-to-debug "Oh, I'm not copying this, I'm changing it!" bugs.
I definitely didn't word that well. To illustrate: const functionToDebug = params =&gt; { const myDog = 'Fido'; var yourDog = 'Fido'; const someClosure = () =&gt; { debugger //While debugging from browser, console.log(myDog) throws an error and will say myDog is not defined whereas console.log(yourDog) will work just fine and log 'Fido' }; };
(Copied from another reply) I definitely didn't word that well. To illustrate: const functionToDebug = params =&gt; { const myDog = 'Fido'; var yourDog = 'Fido'; const someClosure = () =&gt; { debugger //While debugging from browser, console.log(myDog) throws an error and will say myDog is not defined whereas console.log(yourDog) will work just fine and log 'Fido' }; };
You correctly interpreted my poorly worded comment.
Lol my Spanish is admittedly rusty but does this have anything to do with JS or is it just really poorly targeted spam.
Add in a console.log(a); at the very end and you'll see what's going on. &amp;#x200B; console.log(a) will print out 2 meanwhile console.log(this.a) will be printing out 1. &amp;#x200B; Also notice what happens if you were to explicitly declare a reference to the context. &amp;#x200B; let app = this; &amp;#x200B; and then within the function write: &amp;#x200B; app.a = 2; console.log(app.a); &amp;#x200B; and then outside of the function type: &amp;#x200B; console.log(this.a); &amp;#x200B; Now both values print out with the value 2.
I think I was very lucky to be learning JS \*before\* Promises were standard in the language, but when they were still available via libraries like Q and Bluebird. It helped me recognize the relationships between Promises and callbacks a lot sooner.
I mean I haven't done this specifically, but after messing around with the doc you linked for a moment it looks like Google's mechanism for exporting documents is a pretty simple GET request with the document id, and some other info. I imagine if you research or play around with this mechanism you should be able to find or develop a solution to the problem. Export to TXT URI: https://docs.google.com/document/export?format=txt&amp;id=1li_cDJPWQGhq_b7nIG8OkQPKi_LePVRQI4rG1T5pDuA&amp;token=AC4w5VjuzdcveqykOfuhEwNcwV8I-r7d_g%3A1559093726838&amp;includes_info_params=true
How to google
Booleans have four states. You need to use `===` unless you have a really damn good reason.
I'm not sure how to do it with a google doc. I know a google sheet when published creates a public json url. [https://spreadsheets.google.com/feeds/list/sheet\_id/sheet\_number\_2\_is\_what\_mine\_is/public/full?alt=json](https://spreadsheets.google.com/feeds/list/1li_cDJPWQGhq_b7nIG8OkQPKi_LePVRQI4rG1T5pDuA/2/public/full?alt=json) &amp;#x200B; The above returns a json version of the spreadsheet.
I disagree about `T | null | void`, it's useful in react, though I don't use ts/flow outside of react so eh.
I'd gold you if I had some. I see way too much `.filter.map` bullshit even in mid-level devs work.
the cave became sentient after figuring out how to scrape gdocs
Closure can be used as a form of run-time memory. That was a huge eye-opener for me.
const texasSeasons = \['summer', 'summerer', 'summerest', 'ohlordy'\]
I created some code to show how, and explain it: https://jsfiddle.net/zw2y3o1f/1/
&gt;https://docs.google.com/document/export?format=txt&amp;id=1li\_cDJPWQGhq\_b7nIG8OkQPKi\_LePVRQI4rG1T5pDuA &amp;#x200B; Thank you I will definitely look at this solution tomorrow.
I cannot open the link.
But even Object.freeze won't freeze deeply - i.e, const obj1 = { obj2: { foo: "bar" } } Object.freeze(obj1); obj1.obj2 = {foo: 'baz'} // noop console.log(JSON.stringify(obj1)) // -&gt; {"obj2":{"foo":"bar"}} obj1.obj2.foo = 'baz' // legal. console.log(JSON.stringify(obj1)) // -&gt; {"obj2":{"foo":"baz"}} This is why the [Immutable.js](https://immutable-js.github.io/immutable-js/) library is a thing.
\&gt;Why would I *not* write all of my functions this way? If there's something ***entirely*** throwaway, maybe. Or for some limited uses in test functions. &amp;#x200B; I didn't argue why you shouldn't write all functions this way, only that in practice this doesn't always happen. How about functions which do not return a value but instead assign a value to an already existing variable instantiated within the same module. I hope that was clear, I'll admit what you're arguing is probably better practice. &amp;#x200B; \&gt;Can't tell you the last time I used a for loop. Do you have an example of the function you're describing, because this sounds like you're proving the shit out of my point. &amp;#x200B; What's wrong with for loops? What would you use as an alternative? For example, maybe something like this, maybe even return the results array at the end if you want: `async function asyncCallOverArray(arr) {` `for (let i = 0; i &lt; arr.length; i++) {` `let result = await someFunc();` `results.push(result);` `}` `}` &amp;#x200B; What do you see wrong with that? I'm not arguing to be some expert on this question, only that this code works and is readable. If you seriously disagree you're going to have to have to say more than referring to users of async/await as "bad programmers." &amp;#x200B; \&gt;awaiting that result that you were going to throw away anyway is maybe a *slight* improvement over the alternative. &amp;#x200B; When you put it that way I can agree with you. I guess I'm not really arguing that async/await is an improvement, rather that it works as an alternative for somebody who may prefer it. &amp;#x200B; \&gt;I would consider this an *extreme* edge case, and hardly a compelling argument for the existence of async/await. &amp;#x200B; I agree, you're probably right. If we are talking about whether we have compelling arguments for the existence of async/await, then I guess not. The most compelling argument boils down to a question of personal preference. &amp;#x200B; \&gt;I don't think there are really a lot of real-world use cases for this, but I'm sure someone who likes cute gimmicks and isn't a bad programmer has probably found one or two. &amp;#x200B; I don't see people using async/await in this manner anyway, so its a moot point.
Assuming you're interested in learning how to code simple websites first, it's not overwhelming or difficult to learn bits of JavaScript for the front end only here and there when you want or need it, especially if you use jQuery to simplify some of the syntax.
You can create a date from pretty much any formatted date string without defining the format. Just like D = new Date(dateString). Very handy when comparing timestamps because then you can just call the getTime method on your date var and compare the time in milliseconds.
Variables declared with "var" are scoped to their encapsulating function (or global if not encapsulated). You should be using the "let" keyword for most, if not all, declarations.
Are we just going to ignore the fact that \_languages\_ aren't inherently slow? Implementations are.
I just wrote a function with setImmediate today. It’s a function you call to subscribe to an event emitter. The function returns a key that you can save for later. But I also have some cached values that I want to call the subscription callback with immediately. How do I first return the key, let the subscriber finish setting everything up and only then call the callback? Answer: use setImmediate to call the callback on the next tick, i.e. when the subscriber is finished.
We just switched to DayJS because it does everything MomentJS does but at about the quarter the size
Been waiting for Angualr 8. I heard it's pretty similar to Angular.
I use date-fns these days over moment. You can import only the function you need and the dates are immutable unlike moment. A lot lighter than moment as well.
Once you go down that road, you will suffer in eternal pain.
Great news everybody!
How useful `try`, `catch` are, and how to use them
Angular 9.0.0 is in!
HTML mainly for the way they piece together in the DOM, then either JS for manipulating the DOM... and CSS for the styles (the look of it) of your HTML.
Promises and loops. If you run a map in a promise it will run concurrently, so make sure you have the bandwidth.
Don’t listen to this person! Asynchronous/await is a promise and if you start throwing async/await without knowing how promises work, you’re going to have blowups.
I think so too, except that they are a *hog*
How is “this” complicated? It’s wrapped in its local context. Am I missing something?
Good list, but I don’t use bind, call or apply very often. Am I missing something?
Can you explain further?
concurrency
do some wild stuff `[...document.querySelector('.kix-appview-editor-container').querySelectorAll('span')].filter(function(e){` `return !!e.textContent` `}).map(function(e){` `return e.textContent;` `})` `.filter(function(v,i,s){` `return s.indexOf(v) === i;` `})`
[https://javascript.info/arrow-functions](https://javascript.info/arrow-functions)
Is it fair to assume that someFunc() should take the array element and/or the index as arguments? So something like this? async function asyncCallOverArray(arr) { const results = [] for (let i = 0; i &lt; arr.length; i++) { let result = await someFunc(arr[i], i); results.push(result); } return results } &gt; I guess I'm not really arguing that async/await is an improvement, rather that it works as an alternative for somebody who may prefer it. And my argument is that such a preference is a sign of a bad programmer. Some of those programmers will learn to be better programmers, and some of them won't. Probably most of them won't. But async/await encourages those who can learn not to, which is problematic. In your example, why does the function have to care, or even know, about arrays? You've got a perfectly good `.map()` method on your array that knows all about applying a function over every element in the array. async function asyncCallFunc(val, idx) { return await someFunc(val, idx) } arr.map(asyncCallFunc) This is *slightly* different from the original in that you now have an array of promises rather than a promise of an array. No problem, the Promise object has the `.all()` method for just such an occasion. async function asyncCallFunc(val, idx) { return await someFunc(val, idx) } Promise.all(arr.map(asyncCallFunc)) Now you've got the same result, a promise of an array. But all `asyncCallFunc()` is really doing is obscuring the call to `someFunc()`. There's no reason to do that, so let's get rid of it. Promise.all(arr.map(someFunc)) This is shorter, more readable, and highly declarative. Win-win-win. I would say that this is not only better, but *vastly* better. If you want to *then* do whatever with the array: Promise.all(arr.map(someFunc)) .then( arr =&gt; arr.map(someOtherFunc) ) Or make it more concise with a `map` function: const map = fun =&gt; mappable =&gt; fun(mappable) Promise.all(arr.map(someFunc)) .then(map(someOtherFunc))
this refers to the value in enclosing context when used inside a fat arrow function. https://stackoverflow.com/questions/31095710/methods-in-es6-objects-using-arrow-functions
Try it yourself. Add this to your console in Firefox or Chrome let foo = { baz: 'Baz', bar: () =&gt; console.log(this.baz) }; foo.bar(); // undefined Then try this: let foo2 = { baz: 'Baz', bar: function () { console.log(this.baz) } }; foo2.bar(); // 'Baz' The arrow function method's `this` context actually came from the `window` object since the lexical scope here is `window`, rather than the object being created. The simplest explanation I've seen for lexical scope is this: &gt; function scope of outer function === lexical scope of inner function. [source](http://astronautweb.co/javascript-lexical-scope/) In this case, the "outer function" is the global `window` context, thus `this` refers to `window` here, and that would be true no matter how many levels deep you nest that arrow function in an object tree.
The way setTimeout works. Eg: print 1 to 5 but wait for 5secs between each print.
If you're using this in a closure I feel for most cases you're doing it wrong
I’ve been waiting for it to happen for nearly twenty years. It’s a huge deal for anyone who works on the web.
"The benefits of reading to your son" Reading your child anything about JavaScript a young age will most likely cause long term damage.
They just released Angular 14.. and now 15
Wait, what happened to versions 3-7?
Well at least they filtered before they mapped, but yes that grinds my gears. Especially since it's so easy to rewrite: `if (filterFunc(item)) accumulator.push(mapFunc(item)); return accumulator;`
It doesn't really. Maybe because everything is private and you don't have to use this everywhere or program as defensively? In my experience, if you're someone building off or extending a library, it will slow you down. It sucks to extend a library or framework that uses closures because you don't have access to internals. Also closures are slower and more resource intensive (execution wise) if there's many instances. Great for singletons though.
"this" is only confusing in js because outside of constructing objects with "new" it really means "context" or whatever the caller decided it should be. The language provides no guarantee that it'll be anything in particular and it can be changed at call time.
Also in other languages you can usually bypass scope via reflection if you really need to. Js closures though, good luck as far as u know
It can just be: await Promise.all(arrayOfItems.map(doSomethingAsync)) doSomethingWhenDone()
What the questions?🤔
How about Promise.each() ? await Promise.each(arrayOfItems, async function(item) { return doSomethingAsync(item) })
[This channel](https://www.youtube.com/user/TechGuyWeb/playlists) has some good content on javascript based on projects, but you could try this from [Free code camp](https://www.youtube.com/watch?v=PkZNo7MFNFg)
Generator functions and the yield keyword
So, are you saying if there is no function, then the lexical scoping is the window itself ??
that's a link. click it
Need upgrade subscription:(
Doesn't freeze mean performance loss?
`Promise.each` is not vanilla js, but bluebird it looks like. So if you're not using bluebird you can't use `Promise.each`
Opaque
`getElementsBy..` returns a **live** collection let divs = document.getElementsByTagName("div"); document.body.innerHTML = ""; console.log(divs); -&gt; HTMLCollection [] document.body.innerHTML = "&lt;div&gt;&lt;/div&gt;"; console.log(divs) -&gt; HTMLCollection [div] No need to query again. As such one might be inclined to remove classes like this, which won't work (as you are actively modifying the size of the array while you loop through it): let divs = document.body.getElementsByClassName("myclass"); for(let i=0; i&lt;divs.length; i++) { divs[i].classList.remove("myclass"); } You have to convert it to a non live collection: let divs = new Array(...document.body.getElementsByClassName("myclass")); for(let i=0; i&lt;divs.length; i++) { divs[i].classList.remove("myclass"); }
That they should never use == unless they have a very specific reason for it. === is what you want.
I just delete the specific cookies for the site.
Octal questions? Bad explanation of hoisting? Pass.
OK, I'll play along. You've decided that you just *have* to use async/await, but you want to keep your functions pure, so you resolve a value into a promise and pass it into your function so that you can await it. const prom = Promise.resolve(55) const reallyDumbFun = async (p) =&gt; { const val = await p const result = /* do whatever with val */ return result } Congratulations, you've just made your function aware of promise-wrapped values *and* required the consumer of your function to pass in a promise for no reason! You're such a very clever programmer. You didn't need to give a lecture on what a bad programmer you are. You could have just said "I'm a bad programmer." I guarantee that I would have believed you. This is the function you *actually* want, which does not rely upon the good behavior of the consumer to remain pure: const notDumbFun = val =&gt; /* do whatever with val */ prom.then(notDumbFun)
First question: Why is Math.max() smaller than Math.min() get the f. out of here...
i like to use the for...of loop in this type of situation. seems like the cleanest syntax of all the options. for (const item of arrayOfItems) { await doSomethingAsync(item); } doSomethingWhenDone();
Maybe /r/LearnJavascript ?
What's your problem with that besides it's a really silly question to ask?
If your 'name' property on the prototype is default one, you can define it in argument of the constructor as ```constructor(name = 'Alex') ``` Or inside the constructor itself like ```this.name = 'Alex' ``` Or you can create getter in the body of class: ```get name() { return this.name; }``` Or even get defaultName, whichever suits you best
Create a method let's say setName(newName) { this.name = newName }
Elaborate please on why is it bad, I genuinely want to know
[removed]
The whole article is indeed _pretty bad_. About half of the questions or more are stupid trick questions that _shouldn't be asked_ in an interview. And then, many of the explanations given are at best _dubious_, if not directly _wrong_. It is not a good article.
It doesn't in any way tell you how good someone is at creating stuff in Javascript.
That's almost exactly what I said
I couldn't answer most of these and I have been using Javascript for 10+ years.
My primary role at various companies for the past 8-ish years has been JavaScript (I've moved around and done other things but JavaScript related development was almost always my primary environment). Out of all of these questions I have only been asked or asked others about two of these: 1. Regarding var vs let vs const, hoisting and scope. 2. What is prototype inheritance The other questions are mostly just "gotcha" stuff or not very useful, IMO. Personally, when I interview someone, I usually ask one or two fairly straight forward "code this for me" type of things and then the rest of the interview is about their previous projects, how they handled various things, how they've architect things, etc. I'm not sure most of the questions are actually useful. However, I get some places may still ask them. So I'm not saying this piece isn't useful.
Out of interest, what are cases where promises are more appropriate (besides .race and .all which you totally can use in conjunction with await)
Yes of course sorry, by language I mean the most popular implementations
Exactly and as far as Google Chrome goes I hope you also know about this magic: if you hit a breakpoint in your code the REPL gets the context you're currently in, meaning you can play around with all variables the current scope has access to. I find myself a lot coding helper functions within the REPL and then just copying it to my editor (that does some needed formatting in the end).
consider the following scenario: function Foo() { this.a = 5; this.logA = function() { console.log(this.a); } } function Bar() { this.a = 20; this.logA = () =&gt; { console.log(this.a); } } var foo = new Foo(); var bar = new Bar(); If you did foo.logA() or bar.logA() you can anticipate the outcome. However when things start getting funky is right around here. var logAFromFoo = foo.logA.bind(bar); // binding another this-aware scope. logAFromFoo(); // 20 var logAFromBar = bar.logA.bind(foo); logAFromBar(); // 20 because it is using a fat arrow function. It maintains closure and the reason lies with how es6 is parsed into regular old JavaScript. Setting functions into variables that maintain the original reference to where it was created. So, old people tell you to not use fat arrow functions, but I say fuck em. Learn how to use the tools in a language and write it however the fuck You want to write it.
And it’s articles like this that add fuel for the myriad of insecure posts on r/cscareerquestions. A nonsense article indeed.
&gt;Is it fair to assume that someFunc() should take the array element and/or the index as arguments? So something like this? Yes I suppose so. &gt;And my argument is that such a preference is a sign of a bad programmer. (READ NEXT QUOTE/PARAGRAPH: I retract some of what I say here) Not sure you can actually prove that, nor can I understand why you're interested in proving that statement anyway. Are you worried that async/await is moving the asynchronous features of the language in the wrong direction? Or that async/await results in less elegant code? Or that async/await lower the learning curve? I noticed that many members of this subreddit seem to like async/await. Maybe even a majority. Are you really going to say that all these people are potentially "bad programmers"? This is either a lousy thing to say, or is simply a lazy argument. &gt;Probably most of them won't. But async/await encourages those who can learn not to, which is problematic. Sorry I spoke to soon. I'll mention two possible exceptions to your argument: 1. I have noticed some people say that they had to properly understand callbacks before they could "move on" to async/await. That is, some people saw async/await as more difficult to learn. 2. Some people coming from a C# or Python background may find async/await to be more familiar from their prior experience in C#/Python. Why not make the language more approachable to programmers coming from a different background? &gt;In your example, why does the function have to care, or even know, about arrays? You've got a perfectly good .map() method on your array that knows all about applying a function over every element in the array. &gt;If you want to then do whatever with the array: &gt;Or make it more concise with a map function: Great advice, I like the idea. Although you have to keep in mind we are working with other people. Not everybody is going to spend the time to really understand the many ways you can solve the same problem using various features of the language. I would argue that a simple for loop containing an await would be far more readable for most people needing to read your code. Everybody is familiar with a for loop, but not all people are going to be familiar with arrow functions or so-called higher order functions for Arrays. I don't think it is fair to say that they are "bad programmers" because of this. I do agree that your more compact code is far more elegant and simpler. So I'm sorry if I'm just grabbing at "straws" at this point. ********* Thank you for the well thought-out replies. Despite the praise async/await received in this thread, I have to admit that you have properly proved your position. Glad to see someone going against the crowd and consensus of this thread.
You know... my bad. You did say knowing promises is essential before moving forward with async/await. Sorry.
I believe this would wait for each promise to resolve before moving onto the next loop. The `Promise.all()` solution allows each async call to happen async concurrently; only moving on once all promises resolve (regardless of the order in which they resolve).
##r/node --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/bor133/ignore_list/)
Could you please clarify the last paragraph, in which you recommend not mixing types and interfaces in a codebase? These have different use and provide different possibilities, you even mention that in the article.
Despite all the negativity in the comments, it's actually a decent list once you get past the first one which is way too obscure
I agree that's rubbish, but the rest are not so bad
Time to start revising then ;-)
I generally agree in terms of code style, but many beginners wonder why \`this\` keeps changing and that's usually a result of a closure. The most typical solution of course is an arrow function but that syntax is an ES6 luxury.
it's ok
Yeah, yeah. I use deep copy in those cases. Or do it manually if it's not too much. Specially tricky when using redux.
I guess I am just not good enough.
That is still a non-issue for you? Having scrap metal for litter in our skies and not being able to have a choice about it. As it is what if we simply want to see the blue sky without having our views blocked by an inordinate amount of drones.
&gt; The Promise.all() solution allows each async call to happen async concurrently Not a problem to do it with `for..of`: ``` for (const item of arrayOfItems) { await doSomethingAsync(item); } doSomethingWhenDone(); ```
I was learning react on NetNinja YouTube channel, he has a really great playlist on react + redux and I think there is also a dedicated playlist where he builds a project using react firebase, maybe you could give it a shot
In that case `doSomethingWhenDone()` could execute before the promises inside the loop have resolved.
Aren't you supposed to use immutable data types in Redux to avoid this trickiness?
See: https://stackoverflow.com/a/11488129/1053199
Hi /u/patelpankaj, this post was removed because your title included a URL. Please use the `submit a new link` option with a descriptive title. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
[removed]
These are terrible interview questions. They're at the same time too easy and too obscure. Nice trivia though. The problem is that they are all questions that have a fixed answer. Not knowing one of them is going to grind the interview to a halt and make the interviewee feel like they're stupid. "Hey bro you don't know how to use OCTAL NUMBERS IN JAVASCRIPT?!" Also they tell you nothing of the interviewees capability to actually write a good concise codebase. This really grinds my gears: `function expressions enforce a more predictable, structured codebase`. Expressions also force you to read your codebase down-&gt;up and the whole point of hoisting is to turn this around. Some things are really confusing too. You have function declarations and expressions, but the expression is a declarative way to do things. I always get these mixed up. Asking for the difference between OOP and FP I get, but imperative and declarative give me a break. You should just ask the person what kind of control flow they like and why. Most of the time in JS you're going to be mixing these paradigms for great effect. Both have their benefits and drawbacks, **perhaps it would be nice to know how the interviewee thinks about these things?** Instead of getting to know whether they knew how to google "Most common javascript interview questions" the night before. I've been asked most of these questions and since then I have already forgot most of the answers. No I did not remember that assigning to a variable without a keyword is the same as assigning it to window. What's the point of knowing that? Don't you use a linter? It makes me want to ask the interviewers some questions. Involving sanity and inter-personal communication skills. Here's me answering the last question: "What's prototype-based inheritance?" "It's what JS uses for inheritance." "How does it work?" "I can't remember. I've never used it directly. Why don't you just ask me what I think about inheritance?" "..." "Well I don't like it. If you go deeper than one level you have to go for a wild goose chase to find the method you're looking for and you're most likely going deeper because of the Diamond Problem." "..." "You know cause that's why you can only inherit from one class at a time. I think \`favour composition over inheritance\` is a good maxim." "..." "I also like decorators. BTW have you seen the pipeline operator proposal? I think it would be a great addition!" "We'll be in touch."
At first, the engine goes over the code, find everything that is declared, in your case it finds: `function foo() {` `console.log('hey');` `}` And it just places it top of the code. In runtime your code looks: `function foo() {` `console.log('hey');` `}` `foo();`
[removed]
Cross posting here from r/typescript as I think the problems/solutions described in the post also apply to projects using Babel. The article focuses on making **Go to definition** work without surprises.
*laughs in React TypeScript*
[removed]
Hi /u/bemliks, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I don’t think the author says you should never mix types and interfaces, but rather use them consistently (rather than randomly).
[removed]
The scope is whatever scope the arrow function was created in. So in the above example it was created in the window scope so it is the window.
That seems like reason enough to me?
Yes but I thought there's more to that. Fuck me for asking, right?
You're mixing a string with a number, either needs to be a string or just a number.
Try: var c = "5e";
you have c = 5e 5e isn't any type itself and javascript is confused about what you want to do it should be: c=5 //number or c="5e" //string
note that the scenario is different if you declare a variable and define a function for it, e.g. ``` foo(); var foo = function() { console.log('hey'); } ``` you'll get an _Uncaught TypeError: foo is not a function_ since the code actually has to be executed
Thank you, I should have thought a bit more about the answer. Your example gets an error since foo is declared, but the value is undefined, right?
or `c = 0x5e` if it's a hex number.
Or do you mean c=5\*e?
ok. can you explain another example ``` function countInvocation() { console.log('hey'); data.count++; } var data = { count: 0 }; countInvocation(); ``` Shouldn't this return a ReferenceError since data is undefined when function is declared?
It worked. Thank you
It declares function, not function body at first. When you run your function at the bottom, then it will look first time inside that function and does everything again, first go over function body, declare things on top what is needed, etc - and by that time you have already data.
AFAIK types are for when you want to use interfaces like variables i.e. when you want to compose Interface D and express that it basically is just a composition of interfaces A, B and C. There could be other uses for it (haven't read the article) but thats what I remember about them
so it'll execute everything outside the function body before it moves on to parsing the function body, and the executes it?
The article is not bad, but I think you should add best practices and when to use what...
Yup, because the declaration gets hoisted, but the definition is not
Someone who is more familiar with how javascript engine works can answer more detail about this and can correct me if I'm wrong. But in my experience and what I have learned, it goes like levels (scopes), it parses one level at a time.
Or you have a lot of practical knowledge that's actually useful instead of random theoretical things that only really serve to make you look smart but are actually only useful in very specific cases. You should probably be able to answer the common questions though.
To be honest I am not a huge fan of these kind of language specific questions being used in interviews ( If I had to ask as company policy I would give the candidate a heads up so they could do some revision). These sort of questions do nothing to prove the potential candidate is really any good at writing code. When I interview people I go more for general problem solving and writing pseudo code on whiteboards. I want to see how they approach problems and step through them. I am not bothered about optimisation and arcane knowledge I am interested in their ability to problem solve, ask questions and communicate with me and the team. That combined with their experience and examples of code they have written in the past seem a much better measure.
Is isn't it created in an object ??
A memory hog?
...unless the function was created with `bind()` or an arrow function. And then you have changes of behavior based on strict mode... There's another part of this thread where someone argues that `this` isn't confusing, but I'm not sure there's anything else as complicated as it is in JS. So relatively speaking, it's up there.
No it's created along with the object. Or rather, you are creating an object here and make one of the properties an arrow function that you create (which both happens in the window scope in this case).
I realized that i wrote pencil and pen as the same thing so i changed to not get confusing
Hi /u/iluShah123, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
your function isn't evaluated until it is executed, which is on the last line of the code snippet you posted.
or `c = 5e0` if it's exponentiation.
Looks very interesting, will try this today
but it surely must be parsed prior to being executed.. wouldn't that throw an error?
Check out Kyle Simpson's explanation: https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch1.md
It will parse the function body immediately, so if there are any syntax errors, they will be caught before the code is even run. But accessing a variable that may or may not exist (or may or may not have a valid value) is not a syntax error. You don't know if that's a real error until the function is called and the code inside that function is executed. That only happens you you make the call which, in this case, happens after `data` is properly defined and allows that code to work properly.
I'm not an expert on hoisting either, but my understanding is that both var data and your function get hoisted to a higher scope and executed first, but the assignments do not. &amp;#x200B; so, your actual script winds up looking like this: data = { count: 0 }; countInvocation(); and the hoisted scope probably looks like this: var data; function countInvocation() { console.log('hey'); data.count++; }
Yep. Take a look here: [https://www.reddit.com/r/javascript/comments/btxz72/what\_are\_some\_javascript\_things\_beginners\_dont/ep4u9ip?utm\_source=share&amp;utm\_medium=web2x](https://www.reddit.com/r/javascript/comments/btxz72/what_are_some_javascript_things_beginners_dont/ep4u9ip?utm_source=share&amp;utm_medium=web2x)
Wes Bos has a ton of quality free and paid content. The Javascript30 and ES6ForEveryone are great. He also offers beginner and advanced react courses. All top quality stuff. Highly recommend. https://wesbos.com/courses/
it's semver now, the number no longer matters in identifying the framework. it only indicates that breaking changes happen. they're also on a six month release cycle, so a year from now it'll be 10.0.0.
As others have pointed out, I would look into understanding types ;) Have fun learning!
There is no way to recreate the effect of `People.prototype.name = 'Alex';` using `class` syntax. If you want a prototyped property like that, you have to do it the same way, setting it directly on the `prototype` after the class is defined. Right now with `class`you can only define methods on the prototype (including getter/setters). [Class fields](https://github.com/tc39/proposal-class-fields) are a proposal about to be standardized soon (and they work now in Chrome) but they get assigned to the instance, not the prototype. class People { name = 'Alex'; // assigned to instance sayHello() { // assigned to prototype // ... } } With version 2 [decorators](https://github.com/tc39/proposal-decorators) you could change this, but that proposal was rev'ed earlier this year and I think they took that capability out somehow making them more complicated and less capable at the same time ;P
Helpful tidbits about how interface and type differ at the edges, but I was hoping more for best practices about when to choose which. I generally use interface because I like the semantic meaning, but I have no idea if that is common or if I'm the weirdo.
I use breakpoint debugging to fix a lot of issues at work, however the browser often crashes when I use this feature
Its a little confusing because the `{...}` in the object literal _looks_ like a scope, but its not. Its only there to dictate when to start and stop adding properties to an implied `new Object` instance. let foo2 = { // does not create a scope, scope is stiil ^ baz: 'Baz', bar: () =&gt; console.log(this.baz) // references current scope, which is outside scope };
Check out Tyler Mcginnis’ free 4-day react boot camp on YouTube. If you like it he also offers a course on his website. Completely project based. Highly recommend.
Definitely looks like a bug in Chrome. But... No, there is no loop, but _clearly_ you're producing a new security violation every time you do that `document.body.style.background = ...`, which fires the handler which produces a new violation, etc. The problem seems to be that Chrome just kind of forgets the violation was already triggered for that rule and fires a new one every time it tries to apply it. Anyway... is it worth opening a bug? Well, it's probably a very uncommon case, but yeah, it's probably a good idea to file an issue just in case.
Might want to report this to the chromium team, not here since nobody can do anything about it.
This is like case study for terrible interview practices. Please, no one listen to this terrible, awful advice. Ask open ended questions about real work scenarios and their experience, not “gotcha” questions that do nothing but inflate your own ego.
You want to use interfaces whenever possible if you're creating library code as people may need to merge your interface types. You want to use type aliases in application code as it's much more flexible than interfaces (can use computed properties, unions, conditionals, etc.)
I used types for small switch statements. type switchOptions = “one” | “two” | “three”; This let’s me narrow the choices that can be passed as a function argument. someFunc(options: switchOptions){...switch statement...}
I actually found the repo for the TS Handbook which is being rewritten. It has a segment regarding just this: https://microsoft.github.io/TypeScript-New-Handbook/everything/#interface-vs-alias
This is exactly what I use them for as well
&gt; You should probably be able to answer the common questions though. Exactly my point, but I get downvoted and you get upvoted... never change, Reddit!
sweet 👍
Hi /u/b14cksh4d0w369, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bemliks, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hackfall, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MGaafar, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TheCodingBus, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/emoz41, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/boki345, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ConsciousAntelope, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dnesteryuk, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bale11cr7, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Merk_Integral, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/proteeti13, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/raathigeshan, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Joshwd3558, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/badboyzpwns, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ny_gramps, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
The two are just different concepts.. It is better to see \`type\` as what it is: a type alias. You're just specifying an alias to another type, and it just so happens that \`{ foo: string }\` is a type like \`number\` is. Interfaces are.. interfaces, they are made to be implemented and represent object structures.
http://youmightnotneedjquery.com/
Sometimes it's not about the validity of your point but more about the way you get it across.
To clarify, do you mean data would be stored on the client? If so, take a look at the localStorage API if your set is less than megabytes. If size, sharing, or persistence considerations so require, utilizing the file system directly might just be your best option. JSON is nice OOB solution for human readability especially for debugging, but take a look at much more efficient encodings if you need the performance.
But doesn't that make the name 'Alex' created for every new object created. I'd like to have the name in the prototype as a fallback mechanism instead.