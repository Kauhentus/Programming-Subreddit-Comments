&gt; An entirely different problem than what? I tried to explain in the blog but I was probably not clear enough. I see Backbone's primary focus as being the Model-to-View binding (and vice versa). It does not deal with many scenarios we ran into, e.g. multiple Views binding to the same Model, View swapping, as I pointed to earlier. Furthermore, it does not offer any solution for standalone functional classes that don't have anything to do with the DOM. Keyhandlers? Worker classes? All left to individual implementations. Having a base Class is sensible and helpful. &gt; And you're comfortable with MVC. So it becomes part of your solution from the beginning; really, in the article it's the only reason you reject Backbone. The common problems being solved with the major frameworks are indeed common, and I am constantly informed by and admire the technical depth of their solutions. In fact we do make wide use of 3rd party libraries when we feel they fulfill our need. However, that does not mean nobody should consider MVC in "this day and age" with "state of the art solutions". That statement itself is an a priori rejection of the Controller as a valuable organizational concept. It is probably not that valuable to the majority of web development. But our needs are not that common. We required complex interactions between multiple organizational levels, and attempting to do so in strictly Backbone results in things that look like and smell like Controllers in all but name. ---- On a sidenote, I actually like a good part of Backbone, and recently added .mixin() to Class, such that you can Class.mixin( Backbone.Events ) to gain event functionality to all instances of Class: something much more difficult to do with purely Backbone.
The universe implodes into the machine that's running the script. Seriously. Don't try it.
&gt;It does not deal with many scenarios we ran into, e.g. multiple Views binding to the same Model You do _not_ understand Backbone if this was a problem for you. Here's the [source](http://koglerjs.com/example/backbone/ex.js) for an [example](http://koglerjs.com/example/backbone/) that attempts to demonstrate this exact principle. &gt;That statement itself is an a priori rejection of the Controller as a valuable organizational concept. You say a priori, I say a posteriori. Dissolution of the controller into event bindings separates concerns smoothly. Controllers create--or rather, they _are_--coupling between View and Model. For every interaction between View and Model in your overall app space, you need to create a new controller, da? That means that as the number of Views and Models goes up, the possible number of Controllers needed to connect them all grows exponentially. On the other hand, if each Object simply keeps track of what it needs to broadcast, all it has to do is trigger the appropriate "change" or "selection" events. Responsibility is placed on the Object: 1) Know what to trigger, and 2) Know what to listen for on other Objects. In your Behance app, the Filter View on top would trigger a Backbone.History navigation. The Router would receive the new URL--an _event_, not a function call--and direct the Model/Collection layer appropriately. I favor a dumb Collection and a dumb View list: the Collection doesn't need to know its filters, nor does the View list; it's just displaying the Display Collection. Otoh a smart Collection containing all of the models might be more readily capable of taking the URL and turning it into sensible filters. It really depends on if you're passing those URL parameters to the API as is--which is the more sensible thing if you can manage it--or if you're holding most/all of the models browser-side and want to filter them down for display, which is nebulously more efficient in regard to API calls but means you've got to be capable about duplicating logic from the API. 
Sorry I'm such a naysayer in this thread, but pretty much everyone's speculations are wrong. jQuery doesn't implement `Object.create()`, it doesn't extend any native objects or native object prototypes - and almost certainly never will - and it doesn't force any specific version of JavaScript to be used. There's no need to guess about this. The jQuery source code is readily available. If you want to know if it implements `Object.create()` or not, search for the code for "create": http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.js
&gt; Why should I care about details like that? http://jsperf.com/hasownproperty-tax While reusable code is undoubtedly a good thing, it's very possible to make code that's too robust. For example, if every helper function does full checking and handling/error-throwing for every parameter type, your actual logic will quickly disappear in a sea of cruft. `hasOwnProperty` checks aren't quite so dangerous, but I think the decision regarding them rests on the same principle.
Last year I created something similar that allows you to watch/observe Arrays: https://github.com/mennovanslooten/Observable-Arrays // For example, take any array: var a = ['zero', 'one', 'two', 'trhee']; // Add a generic observer function to that array: _.observe(a, function() { alert('something happened'); }); // The observer will be called when the array is changed a[3] = 'three'; // alerts 'something happened'
That wasn't a dig at you either, as I was also too lazy (or busy, or busy being lazy) to check it myself until that point. Which is actually what I should have done in the first place. Thanks for being civil &amp; patient :)
why would you want to load preprocessed CSS into the client browser and execute it?
Psh. Some people just *prefer* slower DOM loads. Maybe *you* should learn to be more tolerant... you insensitive clod.
In its defense: &gt; But that's not all, the LESS code will actually be embedded onto your optimized version of your app. So, apparently it will only warm your knees while in development. **Edit:** If you really wanna roast some kebabs on your laptop, just [boot up a NetBSD kernel in your browser](http://blog.netbsd.org/tnf/entry/kernel_drivers_compiled_to_javascript) and figure out how to run a fork bomb on it... no big deal. Your kebabs should be ready in about an hour. Don't forget the sriracha!
&gt;http://jsperf.com/hasownproperty-tax You aren't reading that right. The results indicate that there isn't much of a difference. Typically, you do something in your loops. Typically, you don't spend 100% of the time inside one loop. Lets say you spend 40% of the time in one loop. Lets also assume that 90% of that time is spent in the loop's body (it's a very simple loop). 0.4*0.1 = 0.04 -&gt; 4% is loop overhead If we cut the loop overhead in half (in Firefox it's just a third), we make the whole thing 2% faster. Well, I don't even see why you would have a performance critical for-in loop in first place. Why would you stick thousands of things into one object? Why wouldn't you use an array instead if you have to iterate over it all the time?
Well, the results don't really indicate anything other than that the loop overhead increases with `hasOwnProperty` checks. I do agree that even in the slower case it's very unlikely the loop overhead will be a significant portion of the script's runtime. My point is only that they have a tangible and negative effect on both readability and performance, which makes just always throwing them in there a less than optimal solution. Which is not to say you're wrong in doing it, just that I want to keep looking for a better solution.
Well, as I said, this is how it's supposed to work in JavaScript. If you want to iterate over the properties from this very object, you have to use a `hasOwnProperty` guard. Just like you have to use `break` if you don't want to fall-through form one `case` to the next. This is how the language was designed.
Basically redraw re-renders a graph using the bar height values foo2 and bar2, which are calculated using input from foo and bar in dostuff(). The scale height of the chart has to vary with baz, and is passed along after some other stuff happens, not related to the graph but related to baz in dootherstuff() So every time I'm redrawing the graph, it has to get foo2, bar2 and baz from somewhere so that it knows how tall each bar ought to be in relation to the scale height. I didn't think it was necessary to bloat my initial post with that information, so I left it out. Also, I wasn't referring to the already established draw() function. I just posted it in place of the code that draws the graph, though the rest of this comment might have made that clear.
http://www.codecademy.com/#!/exercises/0 Maybe?
js fiddle thigny?
http://jsfiddle.net/EHnDR/2/
Just replying so I don't forget this. What an awesome site...
Is it too early to shim this? http://wiki.ecmascript.org/doku.php?id=harmony:observe
You need to consider traffic to *your own site*, not global samplings like these. For my company's website, All versions of IE combined make up 50% of our traffic.
Fun fact: the word 'canvas' derives from the Latin word 'cannabis', meaning 'hemp'. Hemp can be used to make canvas fabric. It's an English word, so the only correct plural form is 'canvases'. (Incidentally, using English conventions for words adopted from foreign languages is always acceptable. People trying to be fancy usually screw it up anyway. For example, the correct Latin plural of 'Prius' is actually 'Priora'. 'Octopus' isn't even Latin; it's Greek and the plural is 'octopodes'.)
Thanks for the advice. I'm not sure checking whether an object is in the pool would solve the potential issue as I described it. This is because the object could already be recycled and in use by another part of the program when the check is made. I think you are on to something about relinquishing ownership of a pooled object to the caller. This will be the safest way to move forward. But it is rather limiting. To adhere to this rule a pooled object could never be a public member of an object. I can see some use cases for pooling in my game code, but I don't feel I can use it as extensively as I had hoped.
My understanding is that Object Pooling can be beneficial by reducing the amount of garbage created per tick of a game loop. This should reduce the garbage collection pauses who can have a negative effect on frame rate consistency. Here is where I got the idea from: https://www.scirra.com/blog/76/how-to-write-low-garbage-real-time-javascript
No, checking if it's in the pool doesn't 'solve' the problem, but it does help to catch it very often especcialy if pool is FILO order, and you can go my extreme route of having objects never allocated from pool (so memory will increase massively) to catch every misuse that occurs in a debug build.
Have you run some testing to verify this idea?
The actual time for javascript to execute in a program is usually pretty low. You are much more likely that your time will be spent: 1. Manipulating the DOM. 2. Performing IO. 3. Rendering Graphics. You probably will waste time and effort for little to no gain. But, if it's fun and you learn something from it then it's not a complete waste. Make sure to profile performance before and after any changes like this.
Ah, I think I understand that better now. So, using your extreme example in debug mode I would not actually be using pooling but would be able to catch where a misuses are occurring.
Very nice. What practices did you employ to avoid the issue I described in my post?
I have run no tests to verify the idea. I am not sure how I would even approach it as I would not be measuring execution speed but rather garbage collection pauses.
&gt;The larger problem is how do you get the same models to pick appropriate views to bind to them when they change? Here's where we're getting into the Backbone philosophy I prefer. Backbone separates the Data from the DOM. What this means in practice is that a URL maps to a set of models/collections via the Router. The Models should never be picking Views. Ever. &gt;It is the logical coupling of View and Model, Why couple them? &gt;The Backbone View is dedicated to manipulating a portion of the DOM, but if the entire thing needs to be replaced, then it is not within the purview (pun?) of the View or the Model to select which View to render. I've arrived at coding a Router as the high Model event emitter and an AppV as a parent View to all subviews. Mutually exclusive Subviews 'compete' within their parent View via events; they indicate precedence via a combination of listening to Router and Model/Collection events. This is currently straining at the limits of Backbone because we need something like a View Collection. But I do not see the need for a Controller when teaching Objects self-responsibility makes coding so modular. &gt;In the end, we may just have to disagree on the importance of the Controller. Certainly. \*tips hat\*
Thanks for your reply. I think I have enough reasons not to pursue object pooling for the time being.
I don't see anything in the latest Opera
I know it is canvases I was making a joke.
&gt;Make sense. You forgot to write "It doesn't" before it other dynamic languages like smalltalk would complain because they are strongly typed despite being dynamic
I just write javascript: {} + 0 in my address bar
I had the same problem on Chrome 19 and Canary 25.
What exactly do you mean by download? If you mean simply to display to the user, such as a tiled approach, doesn't require JS. It's simple image splicing, you just cut it up and then use html &amp; css to stich it back together. Now, if you wanted to do a progressive download (1 chunk at a time), then you could use JS to preload the images as you want, or defer that until you actually need them: var img = new Image(), img.src = './top.jpg'; Or... var domImg = document.createElement('img'), domImg.src = './top.jpg'; Either of those will download the image to the browser cache, so when you're ready to use it on the page it's ready to go. You could use `setInterval()` to space out the downloads. But yeah, what kind of image is 6mb? That's a giant image.
I recently wrote a HTML5/Javascript speedtest and looked into this. It's definitely possible to download multiple files simultaneously. But it's not possible to download one file in 6 segments. The reason for this is that Javascript's XMLHttpRequest object (what will be doing the downloading) does not support starting a download from an arbitrary point in the file. You can also use a new Image() to download images, but again, you can't tell it where to start. There may be a JS library out there that uses a Flash widget to get around this limitation, but I haven't heard of it. 
I don't know how helpful it will be, but I implemented something similar in my game engine. The source is in coffeescript, but the general principle should be readable regardless. https://github.com/mdlawson/rogue/blob/master/src/entity.coffee#L66 Hope it helps! Its worth mentioning that this pooling is to reduce the construction overhead of making new objects, not to reduce GC activity.
Without commenting on how smart/necessary it actually is, technically you could encode your image chunks in base64 and assign it to an img element's src.
I didn't think the standard HTML FILE element supported multiple file selection (definitely not with HTML4... not certain about HTML5). Multiple file selection requires the use of flash/java/silverlight.
&gt; But it's not possible to download one file in 6 segments. &gt; The reason for this is that Javascript's XMLHttpRequest object (what will be doing the downloading) does not support starting a download from an arbitrary point in the file. You can easily download from an arbitrary point thanks to the HTTP [Range header](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35) which can be added into an XHR.
This seems like the most sensical approach. (only applies to images, obviously)
Nice, I didn't discover this. There's the answer, then.
Actually [RFC 1867](http://www.faqs.org/rfcs/rfc1867.html) already provided for multiple files per form field, but before the advent of HTML5 only Opera supported this [for a while](http://en.wikipedia.org/wiki/File_select#Cannot_select_multiple_files).
Actually, I think the answer from iopq is a better way to solve this issue.
&gt;* ClassB gets a vector object from the pool and sends it to ClassA. &gt;* ClassB returns the vector sent to ClassA back to the pool. &gt;* ClassC requests a vector from ClassB. &gt;* ClassB gets a vector object from the pool (the same object sent to ClassA) and sends it to ClassC. Why is ClassA still referencing an object that was sent back to the pool? Referencing an object sent back to the pool is equivalent to accessing an object which has been garbage collected. When an object is sent back to the pool, an 'active' flag in the object should be set false, and any method calls to inactive objects should throw an exception. 'ClassB returns the vector sent to ClassA back to the pool' ... 'ClassA and ClassC now reference the same object' should never happen. 
Cool - will you be sharing the source code anywhere to show the example? I've played a little bit with the WebRTC stuff but would like to see the implementation with websockets you have
The property you're looking for is `files`. The more important part of the help I'm going to give you is "how did you figure that out?" I made a tiny HTML stub with a multiple file input and a button on it. It also had a script with a single function, which got the file input by id, then assigned a nonsense value to a throwaway variable, so that I had something to put a breakpoint on. So then all I had to do was select a bunch of files, then push the button that triggered the breakpoint. Then I looked at the thing that was gotten by ID in firebug, and scrolled down through the properties until I saw one that had a bunch of files in it. Here's my little stub. The breakpoint goes on line 6; then you just add a watch to `finp` and go reading. Make things like these, and you'll save lots of time in the future. &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt;&lt;script type="text/javascript"&gt; function bump() { var finp = document.getElementById('hook'); var break = 'point'; } &lt;/script&gt;&lt;/head&gt; &lt;body&gt;&lt;form&gt; &lt;input type="file" multiple="multiple" id="hook"/&gt; &lt;input type="button" onclick="bump();"/&gt; &lt;/form&gt;&lt;/body&gt; &lt;/html&gt; 
Unlike plain mark-and-sweep, generational collectors don't scan unreachable memory. It moves reachable memory to an old generation and resets a stack allocation pointer. Therefore short-lived garbage costs nothing to reclaim. Additionally, outside of heap exhaustion, allocation is merely an increment to a stack pointer.
Me too, Chrome 22
Can you, please, upload demo video of the experiment on YouTube or similar hosting? Or maybe provide some screenshots...
I'd love one!
Goddamnit that looks great! Would love to test it out (if uni lets me, of course...)
Sent
This seems really cool If you have one left, please send it over :)
Thank you :)
Sure thing! Sent one your way
I had another extra that I'd posted elsewhere, but I'm not sure if anyone used it. Sent it to you anyway
Sorry, just ran out. However, a friend has a few too. I'll see if he hasn't given them away yet.
Thanks!
Very nice. I'm reading through the guide right now. Funny enough, I was in the process of creating a game engine with a very similar API (Backbone-like). I might either drop my project altogether or just inspire from this one.
No, I specifically meant multiple files per input field. See the second paragraph in section 3.3 of the RFC, and the example in section 6. But of course, this only works if the server can actually handle multipart/mixed uploads.
 Thanks for giving out the invites! If anybody has an extra I'd really love one! 
Built by a co-worker of mine
Nice engine! Thanks for this information.
I would love one if you still have any available!
I submitted my email to the site, but if you've still got any I am interested.
Would love one if you still have any. Thanks!
My concern is that pooling is too easy to do incorrectly. If you are the sole developer on a project then some of the risks are reduced. But the use-after-free issue will happen eventually on a project with multiple developers or if one comes back to old code. The only way I can see of mitigating the risks would be to employ some very strict rules on the use of pooled objects and clear documentation for other developers. But, even so, the risks are still there. So I am still unsure whether the risks are worth it. For now, to move forward, I have decided not to use pooling until I experience infrequent long GC pauses. If they occur I can go through and employ pooling on a case by case basis.
Thanks to you guys I got a few issues to implement and already know how to do it :) - Implement new usage and not modifying Object.prototype - Implement solution for older browser (AmberJS idea) - Implement more performant solution for newest browsers (Object.observe)
May I test it too?
Yep, and if he doesn't have control over it, then he will also have to make sure it supports CORS.
4YQ2EMWJAD LY92OMMJZX 3EU5IKAPE9 3 more :)
the &lt;input type=file&gt; method allows for &lt;input type=file multiple=multiple&gt;. it will load filename, filename, filename in the input string and treat them like an array of files. the trick here is to name the file input with an array. &lt;input type=file name=file[] multiple&gt; you can then actually create new inputs on your page with the same name, they will just be treated as more fields in the array $_FILE on the post. The problem with HTML4 is that there is no transport for uploading, you cant Ajax/xhr them to the server, hence the iframe hook method.
Mark and sweep collectors don't scan unreachable memory, only live objects same as generational. A generational collector still has to mark the live objects. Moving memory isn't free either. Anyway the real issue is whether application level pooling is more efficient than a generational GC. I've seen situations in Java where object pooling actually slowed things down but I haven't seen any real data for JavaScript and I have heard a lot of ancedotal evidence that pooling helps in certain situations. As usual doing real research on as close to real world scenarios and limiting performance enhancing complexity to things profilers identify as real problems is the only way to go. 
Hey guys just released this project and a corresponding blog post explaining what it does http://merrickchristensen.com/articles/introducing-stylemanager.html. Would love any feedback or comments on how you maintain your stylesheets in thick client development.
I see, wow.
there is an easier way to do what you are doing. &lt;input type=file name=filetoupload onchange=bump();&gt; when you choose file, click open/ok in the dialog and you return to your script it fires the onchange event. same results. If you click the open again, it replaces whats in the input. So you need to create an object to store all your files in, so that when its time to send them, you can call your object and run through each file and xhr or iframe it. Things just get more complicated dont they.
What's with the black and red colors? Looks like a lava lamp that someone forgot to turn the light on for
http://stackoverflow.com/questions/572897/how-does-javascript-prototype-work
Java script is a prototype based OOP language, as opposed to class based OOP, they're two different schools of though. &gt; var UploadItem = {...} This will create another 4 methods every time you create a new Upload Item, wasting resources. In addition, if you want to modify one of the methods, you'll have to modify it on each object individually. If you use &gt; var MyObject = new FileItem() The object will not have it's own set of the 4 methods, it will use the ones in the prototype, saving resources and making much easier the alter the methods at a later time. . &gt; From that link i understand that the compiler will look for a method in proto and then prototype so you are hooking a new method in. It looks to see if the object itself has the method or member you're looking for and only if it does it does it check the prototype. I highly recommend you get some experience with a classical OOP language (c++, c#, java) before you tackle javascript, it will save you a lot of headaches.
ive been coding for years, javascript has never been one of my strongest languages, its one of those just get by with it languages. But now im delving into the front end all jscript and ajax, so ive come leaps and bounds. im not going to go relearning new languages i have no need for, im proficient with PHP and SQL, this change in the web from flat sites to applications is the next step for me, and most of that is browser loaded javascript. EDIT: i will read more about this, and can already see some improvements on other psuedo var classes ive built that do work very well, but could possibly be hogging resources.
&gt; MyObject() = new FileItem() &gt; ive been coding for years, Excuse me if I sound rude, but I really don't believe you.
i dont need to show you my work, i know where im at, and thats being stupid for not learning more javascript in years gone past
Considering it gets mentioned in r/javascript at least once a day, is *anyone* on r/javascript not familiar with it?
Every time you create an UploadItem, each of the methods gets recreated which costs both execution time and memory. With FileItem, the prototype is only created once and gets reused. To create a new FileItem, only the constructor function needs to be executed because it automatically inherits the prototype (chain).
For Bob's sake, skip the () from the variables. foo() calls a method named foo with no argument foo = new Foo(); invokes a function as contructor. The first part is only an assignment and maybe variable declaration. The new operator admitedly is a little funky in JavaScript, but the result is best thought of as being of the logical type Foo, but it's not a function, it's an object with prototype chain. It's not only the memory. Run this [example in your browser](http://jsperf.com/proto-or-not). I took the 3D Vector from three.js to create 10000 random vectors and also changed it into a non-prototyped version that does the same. On my computer the version with prototype is about 12 times faster.
Favorite part: [Why Java, why is this so awkward?](https://github.com/iammerrick/StyleManager/blob/master/src/plugin-wrapper.js#L65)
if i run for a project, i see an error count. how do i drill through to see the errors it's supposedly identifying?
The errors are in the project files - look below the analysis box and you'll see a list of all your files with stats (line #s, error count, complexity). Click on any of the files to jump into its source code, annotated with the errors and warnings.
http://eloquentjavascript.net/
Yeah. I figure those permissions might be necessary to run canary-jitsu on your own projects, but it would be nice to be able to see a demo on some public project first. Still, given that all this was done at a hackathon, I'd understand if they haven't gotten around to making finer-grained permissions yet :)
Nail on the head ;)
I'm aware that this is probably not that great of code, but i did just start a couple months ago.
WTF? All my comments are syntax errors apparently. :\
I don't know of all the use cases that you had in mind, but if I were setting a value (also, "add" should be "set" imo :)), I'd want to add a function instead of value so it could fetch a value, so when I later get that value, if it's expired, it'd automatically fetch an update using what I defined in the setter. Now that I think of it, this is more for synchronous use-cases, and the above would require async, callbacks, etc., so maybe that's a different use case :) just some thoughts!
Complex? This, IMO, looks a LOT better. var sport1 = [ [sportItem1, sportItem2], [sportItem3, sportItem4], ]; Not so tough, is it? Also, consider [shortening your document.getElementById()s](http://thezillion.wordpress.com/2012/07/24/shortening-document-getelementbyid/)
Please try http://www.stackoverflow.com This isn't a Q&amp;A site.
JS has made it so far without macros. Please, no, don't come near me! :(
&gt;do you have any idea why [...] Do you think I said that your code looks like ass just to be mean? Like most programmers, I won't read code which isn't even properly formatted. &gt;why ,when "why, when" You should take this stuff more seriously.
This looks pretty cool. Seems like a good framework to make a game out of.
If I understand you right, you prefer this: var football = new Array() football[0] = new Array() football[0][0] = "Tony Romo" football[0][1] = "Jason Witten" football[0][2] = "Miles Austin" football[1] = new Array() football[1][0] = "Drew Brees" football[1][1] = "Darren Sproles" football[1][2] = "Jimmy Graham" football[2] = new Array() football[2][0] = "Tom Brady" football[2][1] = "Wes Welker" football[2][2] = "Vince Wilfork" over this: var football = [ [ "Tony Romo", "Jason Witten", "Miles Austin" ], [ "Drew Brees", "Darren Sproles", "Jimmy Graham" ], [ "Tom Brady", "Wes Welker", "Vince Wilfork" ] ]; I'm pretty sure that most experienced programmers will tell you the array literal is *much* better, unless you have a very specific reason to use the elaborate manual array setup. It would be interesting to know what you prefer about the manual setup, so we could discuss the pros and cons of the various approaches. With that in mind, are you writing this array setup code by hand, or is it generated by code running on your server? If it's generated by server code, what language (and framework, etc.) do you use? It's cool that you're new at this, so don't worry if you get one idea in your head about a particular coding technique and then later on get a completely different idea and wonder what you were thinking the first time around. I've done that many times! Better to keep looking at new ideas than to get stuck in one style out of habit.
How do you cache something in JavaScript? Do you store it to a variable?
That's so simple an idea, I never would have thought it.
I think you would be better off taking advice in this order: 1) How to share your code in a way that's easy for others to read and update (e.g. jsfiddle as others suggested). 2) How to improve your coding practices in general so your code is simpler and easier to follow. 3) How to fix your specific bug. Once your code improves, it will become *much* easier to find and fix every bug you run into. I think this is why no one has addressed the specific bug yet. I find it much more satisfying to help someone become a better programmer than to track down a bug in code that's more complicated than it needs to be. So don't be discouraged by the comments about coding style and practices - they are the most useful advice you could get right now. 
Do you leave really mean comments? ;) I'd love a link to the file you're looking at - we're building test cases where the analyzer fails.
I'm not so sure about that... It seems that this post has already developed the kind of freewheeling discussion that would be extremely *unwelcomed* by the Stack Overflow mods: A JavaScript newbie has a specific bug in their code, but the real issue is that the newbie, while being talented and eager to learn, does not yet know how to write the best code. So there are more fundamental problems in the code than the immediate bug. What are some ways to make the code more readable and debuggable, both to make it easier for the newbie to find bugs and to make it more fun for other developers to help? "Closed because it may incite discussion." :-(
I got excited for a new tool. Then disapointed when it was more pretty than functional... plus it's Monday... sorry for sounding angry. I used my open source Node.js URL shortener: &gt; http://gitcanary.com/KishCom/shorten-node/blob/master/shorten.js It's throwing weird errors, saying there should be semi-colons on lines that have them, or finding "bad for in variables" for variables that don't exist anywhere in my code ("addedStyle" is nowhere in shorten.js). \*Edit* - Here's [a screencap](http://i.imgur.com/j4ctE.jpg)
With great power comes great responsibility
I don't think we could emulate Coffeescript's block indentation, because a) sweet.js relies on braces to group tokens, and b) whitespace isn't considered a token in Javascript, so it is skipped right over. I think most other features can be emulated though. Not sure about emulation time -- that's going to be an implementation-dependent thing, anyhow, and sweet.js is still at the prototype stage so its implementation hasn't settled yet.
Thanks for the link! Checking into it now.
Hahaha so glad you liked it! 
"hey, you! it's loaded. you better use your head now."
OT, but wow, that jsperf site is...designed for tablets or something?
As I said earlier I am just starting out in JavaScript and am open to better ways to do things. How do I set up my arrays like you are showing here? I tried googling a few things but not sure what to search for to get it that way. I'm all for improving code if I know how to improve it.
That's a very good point, thank you for mentioning it despite my initial disagreement. Stack Overflow may not be the right place for this kind of discussion, but one of the other subreddits you mentioned is certainly more suitable than this one.
interesting on the vector stuff. i am starting to see the construct of it all now. There was a small function that opened my eyes. Array.prototype.remove() was something i found yesterday, it shows that you can change the prototype on a system function. Just seeing this function was an AHAH moment for me.
thanks for that, ill have a look through it. The more i use javascript, the more i wonder why i never bothered to have a better look before. I have always done backend programming with PHP and SQL. But now that the web is application based, ive had to go full circle and start learning javascript properly.
I like that idea! I've been reading up on the promise pattern, which might suit this async case. Then there's a slight issue on how to store the callback function in the local storage.
It's called 'literal notation' for defining arrays. There's a literal notation for objects too. Also, you can create variables like this: var foo, baz; instead of: var foo; var baz; So, what I recommend you to do, regarding cleanliness of code: * Clean up variables. * Shorten document.getElementById * Cache the DOM. Finally, when you've done all that, run the code. If you're using chrome, right click, inspect element. Click on the console tab. It will tell you of errors in your code. Correct those one by one. You should get it working from the help of the console. If you still don't, put the code on a site like [JSFiddle](http://jsfiddle.net/), and post it back here. We'll be happy to help :) Also, some of the critique here is quite harsh, but don't be offended or scared too much, it's just that us veterans can't stand poor code :)
Just so people know, you CAN chain in normal, vanilla JS too! JQuery isn't magic x-skeww.
He didn't fix the formatting of his post and he also ignored everyone's advice. I also wasn't harsh. I really mean it. I will not read code which looks like that. It's like getting a hand-written single page essay with cat barf on it. I won't read that. Write it anew.
My shite solution below. I'll try to write something shorter later, because this really isn't the correct way to do it! `/^a? *b? *c? *d? *e? *f? *g? *h? *i? *j? *k? *l? *m? *n? *o? *p? *q? *r? *s? *t? *u? *v? *w? *x? *y? *z?$/` 106 characters.
http://en.wikipedia.org/wiki/Cyclomatic_complexity
[Ha!](http://www.youtube.com/watch?v=UgS8oOm0mlM)
Wait... Is it Gordon Shumway... Gordon .... Flash Gordon... Not Flash, but another Gordon... my head hurts!... ? Srsly? http://www.theeestory.com/files/lol-owl-srsly-47667.jpg
I'm really curios to see if there's another way of doing this.
Too bad you can't use matches in character classes.
I wouldn't think there can be. Regular expressions don't have any notion of which letters come earlier except in character class ranges, and I can't think of any way to leverage those. And if regex doesn't know what order the letters should be in, there's no way you're going to avoid typing each letter at least once.
My line of thought exactly, that's why I'm so eager to be proven wrong. It would be a whole new thing that I don't know about.
The closest I got was an expression which disallowed any repeated letters.... /^(?:([a-z])\s*(?!.*\1))+$/i
Yep, I tried it :(
It started with Flash, then there was [Gordon](https://github.com/tobeytailor/gordon)...being a pun on "Flash Gordon". Now this which is sort of successor to Gordon is Shumway, being a pun on "Gordon Shumway" ALF's alias. 
aaand... you are who?
Absolutely! I use grunt watch, too. This is just a backup, ensuring that nothing can get checked in if it fails linting.
Unknown Paste ID
Link fixed.
My shortest solution 70 characters specific for the test cases in the challenge as it doesnt allow spaces in any other places. /^a? *b? *c?d?e? *f?g? *h?i?j?k?l?m?n?o? *p?q?r?s?t?u?v? *w?x? *y?z?$/ superscripts the a for some reason...
I do the same, especially on the internet.
Wow, only downvotes but no comments as to why.
You can shorten that even further: `/ /`
If you just want to match 15 of them, then just use: //
You're spectacularly wrong. Javascript is an extremely powerful and expressive programming language that just happens to run most commonly in the environment of a DOM-based Web browser. Producing a modern web app is becoming more and more similar to producing a desktop app, but with the *added* difficulties that almost everything needs to be asynchronous and extremely resilient to failure, and that you're writing one codebase that will run, in the same version, on dozens of different systems.
This post would be downvoted and closed as either a duplicate or simply "not a question" on SO these days, too.
I can guarantee you that the people who get featured on that site are either very good programmers or talentless hacks who use nothing but tacked-together jQuery plugins and wind up with bloated, poorly performing code. There's very little middle ground. Pick which one you want to be.
Not one of the downvoters, but this seems like a very complicated way to get the same thing [Zombie.js](http://zombie.labnotes.org/) provides. And Zombie.js doesn't have any dependencies outside of the Node.js ecosystem, so it's easier to use, and actually possible to use on [Travis CI](https://travis-ci.org/), unlike ``jasmine-phantom-node``.
Vincent will be at the Gaslight office at lunch for tomorrow's CinciJS meetup: http://blog.cincijs.com/post/35277169723/november-game-programming-with-impact-js
This is what we use, its great! We also have our CI server run this every time someone checks code in.
Wait, I thought we just assumed everything was the same gender as us. Now I'm all confused.
Ok, I will rather not hide the button. Thank you!
Then you can't use blur, by clicking the submit button you are losing focus of the text box.
My best, at 24 characters: /^a? *b?[cde ]*[f-z ]*$/ EDIT: Bonus, 29 characters of ruby to generate a more correct version: "/^#{(?a..?z).to_a*"? *"}?$/"
It says right there on the page: &gt;Why did we do this? &gt; &gt;“any application that can be written in JavaScript, will eventually be written in JavaScript.” &gt; &gt;It’s the law. Obey the law.
Chaining is possible because jQuery methods return the instance of the jQuery object from which the method was called. You can do the same, however you'll have to be working with a special custom object instead of just numbers. For example, num(9) needs to return that special object with a value of 9, rather than the number 9. This is because the special object would have the methods plus() and divided() available to it whereas a number won't. For the variable "x" to finally resolve to a simple number, you'd probably need to do something like this: var x = num(9).plus(5).divided(3).numberize(); EDIT: You got me in the mood to [roll my own example](http://jsfiddle.net/pendensproditor/BPH3Y/).
I figured out an example while you posted yours.. var number = function (n) { return { value: n, add: function(a){ this.value += a; return this; }, divide: function(a){ this.value = this.value / a; return this; } } } Could you (/anyone) explain where yours is better (i'm interested in performance mostly i suppose, and i guess it will be re-used a fair bit). I haven't 100% got my head around when to use which structures. It definitely makes sense to me just to append .number on to the end of the chain rather than have the numberize method (prototype?). Any reason not to do that?
Just return a reference to "this" and the end of the function call -- that's the important part. See carbonetc's example.
Prototypes are slightly more efficient than just creating a new object like you're doing with number. Instead of creating a new function for each instance of the number "class", it will share the function definitions between calls. The numberize() method is the same thing as just calling .value at the end, except it uses a function to return it. Edit: I watched a V8 optimization talk and it suggested that this may not necessarily be as big of a boost in performance as before. Basically, unless you're editing the object's "footprint", V8 will share the memory for it. https://www.youtube.com/watch?feature=player_embedded&amp;v=ZhshEZIV2F4
 &lt;!doctype html&gt; &lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"/&gt;&lt;script type="text/javascript"&gt; function num(Initial) { var Self = this; var curValue = Initial; this.plus = function(X) { curValue += X; return Self; } this.minus = function(X) { curValue -= X; return Self; } this.divide = function(X) { curValue /= X; return Self; } this.multiply = function(X) { curValue *= X; return Self; } this.toString = function() { return curValue.toString(); } } function demo() { var result = new num(6).plus(4).multiply(5).divide(2).toString(); document.getElementById('output').innerHTML = result; } &lt;/script&gt;&lt;/head&gt;&lt;body onload="demo();"&gt; &lt;div id="output"&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 
This passes the tests, but it doesn't conform to the description. Still, nice one.
Hahaha. Likelihood of getting caught asking questions about an interview in web dev on reddit - 1/50. Likelihood of getting caught asking questions about an interview in taxidermy on reddit - 1/50000. Edit: I spell like an idiot when I code all day, and most other times.
What is the rational behind this tool? My code completely fails the analysis of this tool, but its faster to execute and easier to read than any competing applications. Is this tool suggesting that depth of structure is absolutely a bad thing? In all other parts of life well organized structures are easier to understanding and manage than a million tiny pieces.
with reference to your reflection. the function you proposed is significantly more efficient than the regex.
So, how does jQuery return/work with an array of DOM elements?
That'd be cool, thanks.
i don't understand how 'this' (as returned) is a list of elements and not a bunch of methods (with the elementlist being a property) ??
Hah! I actually emailed you for feedback when I first made mine. Mine is more about injection and stateful views of objects though, being able to make a fluent interface is just a side effect.
`return this` at the end of the method. `this` is a reference to the object. By passing on the object reference to the next method, it knows about everything `this` knows about. Check out [10 things I learned from the jQuery source](http://paulirish.com/2010/10-things-i-learned-from-the-jquery-source/). It's well worth 56 minutes of your time. I promise :)
Or even live lint with [SublimeLinter](https://github.com/SublimeLinter/SublimeLinter).
I've worked with Backbone.js and have nothing but good things to say about it. I also worked with SproutCore before that. I like Backbone.js more. I'd say it's a lot more straight forward, it provides just enough structure without tying you down. If you're building your components from scratch, Backbone.js is a good candidate. You say your project is gonna be massive, I would definitely recommend you try them all and weigh out your options before choosing, good luck!
exactly what your edit says. each regex has it's own performance, this particular one is aweful, a lot of other ones are amazing. 
Found the answer, if you are interested: http://jsfiddle.net/MgLa6/1/
Eventually, man will do anything he can, just because he can.
You could have a look at [this library](http://leaverou.github.com/chainvas/). I can't vouch for it as I've never used it myself, but it looks neat.
Well, you'll be certainly much better off if you use *some* existing MV\* framework. Having some architectural structure will always be a big plus. &gt;My worry is that we will get into development and a month or two down the line realize this was a bad decision. Since it's the first time you're doing this kind of thing, there will be some drastic refactoring and additional delays. You'll do many leaps of faith. Some things will work out just fine while others won't. This is perfectly normal and you shouldn't be surprised when it happens. Also, whenever your time estimate exceeds one week, it will be generally pretty wrong since all details are missing. Needless to say that it's even worse if it's a month or even a year. You simply won't have the necessary information to make an educated guess. 
Exact same here. No info shown and same error in the console EDIT: Link would be helpful I suppose: http://gitcanary.com/SlashmanX/xForum
Front end development in any language is going to be about a clear understanding of the APIs. In this case the API is the DOM. If you are strong with writing in JavaScript on the back-end or are new to JavaScript entirely your learning will be **MUCH** faster if you learn to separate DOM access from the core of your application code. Until you are comfortable with such learning I recommend avoiding use of a popular framework, because for many developers frameworks serve as an incompetence crutch. The very basic foundation of the DOM API is pretty simple and does not significantly differ by browser. There are several instances where IE &lt; 9 differ from other browsers but these differences are well documented and should not impede your learning. Start with learning the these methods: * document.getElementById("unique-id") * document.getElementsByTagName("tag-name") The first returns an object and the second returns a node list, which is similar to an array except that it is mutable outside the your application instance.
It's really going to depend on what you want to do. It's a crazy time for JavaScript right now. Everyone and their moms are coming out with frameworks. Some of them are very niche things, and some are very general in their scope. There are also a lot of new browser capabilities, like audio manipulation and real time communication via cameras and mics that are just opening up right now. What you'll want to focus on will vary greatly depending on your intent. JS used to be just about simple document manipulation, but these days, the sky's pretty much the limit. That said, if you want to just complement your Django skills and add a little dynamic behavior to your front end, you're probably best off learning to do dirty JQuery hacks. When you have some more experience and a sense for what kind of hitches you're running into, you can refine and adjust your approach, and get more object-oriented. As a for instance, you can try coding a table with sortable columns, to get a feel for DOM (Document Object Model) node manipulation and some of the quirks of JS type coercion and stuff.
Great work! I've been playing around with different frameworks to make a dependency map. So far yours is the easiest to dive into. I'll give you more feedback as I test it out. 
_see also: [fluent interface design pattern](http://en.wikipedia.org/wiki/Fluent_interface)_
Use if statements? 
I recommend you get some experience with node.js. Although you are specifically asking about front-end, writing some code in node.js doing things you are already familiar with from the back-end would be of use. Being able to use express.js with node.js would help too. A more direct approach would be to get an understanding of jQuery, and how to use it, and then an understanding of how it works. I also recommend Douglas Crockford's JavaScript The Good Parts.
There's about a bajillion ways to do this. And without any kind of information on how your site works, where the data comes from, how it's rendered, etc, I don't see h ow it's possible to really answer this question for you in a useful manner. I'm new here to /r/javascript, though, so maybe there's some assumptions around here I don't know about.
Check out the switch statement [here](http://www.w3schools.com/js/js_switch.asp).
What's with the hate guys? This seems legit. After all, I personally don't want to keep a tab open all the time just to run my Jasmine tests.
Or maybe: //Build the menu container var weeklyMenu = { 'sunday':['sunday item 1','sunday item 2'], 'monday':['monday item 1,'monday item 2'] }; //And access it like this: console.log(weeklyMenu.sunday); Of course it needs more logic.
Your solution may have been downvoted because it had some bad coding practices in it, along with the needless profanity in your comment. I didn't downvote it, but I did take a quick look at the code when you posted it. These problems jumped out at me: * Unnecessary use of `eval()` to reference a property of an object. * Old-fashioned event listener setup using 'on' attributes and saving the old listener manually. * One-line functions hundreds of characters long. OTOH, you did give a very nice example of a way to set up the team data in a JSON-style object literal. This is an important point both for the simplicity of setting up the data, and also because it gets you ready to be able to have the server generate JSON data that your JavaScript code consumes. You also shared a valuable insight - that this question smells a lot like a homework project. I somehow overlooked that, but it seems obvious after you pointed it out in your deleted comment. The OP seems to have flown the coop, but OP, if you come back, please level with us: is this a homework project?
Do iterators and other computational tasks really need meaningful variable names? If were to change *i* to *iterator* I would think that would make code slower to read and more convoluted which can become very confusing in multidimensional loops. It also sounds as though you are primarily focused upon bugs that report syntax errors or errors to the console. These are the very least of my concerns. I report these errors to GA for logging and follow up later, but with tools like JSLint available there is very little excuse for such errors in the first place. My concerns are centered in algorithmic logic the returns unexpected results different from plan while not reporting any errors. Many tiny pieces would only contribute to such problems. With an organized structure I can follow the structure find the violating fragment.
Thanks, I appreciate the feedback :) And you are right, eval wasn't necessary and I should fix my oldschool events :D And about the profanities, it was late... that's a poor excuse I know. :p
Very nice, small and simple is often overlooked when it comes to graphs. However, for those times when you do need more complexity, I suggest giving [Cytoscape.js](http://cytoscape.github.com/cytoscape.js/) a look.
There is no site to speak of yet--I'm trying to figure out what's possible so I can make a plan of action. The content, I imagine, would just be basic html styled with css. If there are a bajillion ways to do this, ideas would be appreciated.
Ooh, this looks promising! Thanks!! Is there a way to make date ranges (so the Xmas special would be available for a full week) or would each date need to be put in individually? 
If it's going to be BIG then backbone isn't really your best bet. You'll hit a wall, find a backbone plugin after hitting your head trying to get around it, use that and then repeat the process again. Best to start out with a fuller featured framework even if it's a steeper learning curve. Playing around with a todo app will never give you an idea of what you'll need to do with a larger application. I'm a bit biased but Closure Tools is great for large applications (it was built by Google for exactly that reason - you know Google? they did Gmail and all sorts of large applications built by really smart people) . This should help get you started with things you're familiar with: http://rhysbrettbowen.github.com/closure_from_jquery/#/ If you absolutely must stick to jquery then use ember, get over the initial learning curve and your life will be much easier down the track, it's probably the most complete framework out there, but I still think you should be looking at Closure Tools or Dojo.
the way its currently written is to have each date individually added. If you wanted to check ranges you'd have to do some date manipulation.. and I just don't enjoy that kind of stuff. I'd rather have separate entries.
Simple, Date objects support comparison operators such as less than and greater than. So, if you create an array of promotion objects, and include a Date instance for both the start and end dates, then loop through the array performing a comparison for today's date vs the start and end dates, you can easily find active promotions. Start writing the code yourself, and you'll start finding out what you can and cannot do. If you just keep asking others for examples instead of seeking out the resources to answer your own questions, you'll find you can't code when locked in a dark room by yourself (which happens to be the natural environment of the code monkey). Stick your nose in a resource such as MDN. [Date](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date) and start blazing your own trail.
When I say I'm fine with "i", I mean in the context of something like a "for loop." If you're telling me that all of those short vars are iterator counters inside an iterative loop, then I'm going to say the overall structure of the code is poorly laid out. For example, how do you test any of this code? Do you have hundreds of tests for this one large function just trying to get full coverage? Trying to be constructive, here is how I would refactor this small piece of one of the comparison operations in your above code: if( x[a + 1] !== "(" &amp;&amp; x[a + 1] !== "[" &amp;&amp; x[a + 1] !== "," &amp;&amp; x[a + 1] !== ";" &amp;&amp; x[a + 1] !== "." &amp;&amp; x[a + 1] !== "?" &amp;&amp; x[a + 1] !== "*") instead, I would do something like: var character = x[a + 1]; var exclusions = ["(", "[", ",", ";", ".", "?", "*"] if ( indexOf(character) === -1) This is much more obvious what you're trying to do, and also easier to modify the exclusions you are going to check for. 
Yes, I have very many unit tests. Attempting to beautify a language requires an understanding of many various patterns interacting in many different ways. Some of the test patterns are in the github repo.
FYI Windows: Copy all the files in snippets to %userprofile%\AppData\Roaming\Sublime Text 2\Packages\JavaScript Linux: Copy all files in snippets to ~/.config/sublime-text-2/Packages/JavaScript
Congrats! [I, too, have written a buildnewgames article](http://buildnewgames.com/gamephysics/); I hope you had a good experience with them (I did). Will be sure to read this later.
Your holiday months are "off by one"...
lol good catch.
noob
Hey there. I think you are looking for the confirm message rather than asking the user for input. I made an example using your code at jsfiddle -&gt; http://jsfiddle.net/P7kP2/
Take a look at my update. Its quite a bit more complex than the first example so much of it may not make sense. Try reading my comments and see if it makes more sense. http://jsfiddle.net/6P6vx/1/ Feel free to ask me more questions here if you would like.
I've only scanned through it lightly but this example here: &gt; The JavaScript VM will not catch on to the fact that you really meant to assign counter and just made a typo, it will just create a new variable named countr. Is caught by something you took up earlier: [strict mode](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode#Converting_mistakes_into_errors).
This is awesome
nothing bizarre about this at all, actually. I realize I'm a little late replying here, but here's the biggest 2 reasons this could be useful: 1) viewing Flash content on mobile that you actually *want* to view... I dunno, old homestar runner episodes or something? 2) more importantly: Flash as an authoring tool drastically surpasses anything that exists for HTML5. Animation, etc is much easier with Flash's toolset than just about anything out there. For that reason, it's still a preferred tool for certain tasks. I'm not suggesting that I want to see Shumway render the insanity that is [jimcarrey.com](http://www.jimcarrey.com/), but there are certainly useful things that can come of this project.
I've implemented something similar in the past. It worked quite nicely but I did find it hurt performance quite a lot. For most people that won't matter, but if you're doing some fancy WebGL game it might be too expensive.
Nice! They are indeed a pleasure to deal with.
I think the only technical issue with this project is that it won't work with PhantomJS 1.7 currently (a bug in the phantomJS npm module is causing a failure **not the jasmine-phantom-node npm module itself) but it does appear a pull request is in the works to resolve this issue https://github.com/sgentle/phantomjs-node/pull/51
I believe you want to look up "Gantt Chart" There are a number of JS solutions. The solution I'm familiar with is : http://www.bryntum.com/products/gantt/ which is very complex. There should be some free ones floating about.
I'd be aware that if you do this on the front end you could run into issues with people having the wrong date set etc. You could set it up pretty easily on server side, or find a date/time API to call from the front end so you know you are using the correct date. If you want to do this in JS (whether server side or on the front end), start with [the Date object](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date) and check out some Date utility libraries like [moment.js](http://momentjs.com/). For the full moon special, you could find some API that gives upcoming full moons or use a [formula](http://en.wikipedia.org/wiki/Full_moon#Formula) to determine it.
Thanks again. I copied the css directly into a .css file. I copied the js in a .js file. It seemed as if I need to download jQuery-1.8.2.js so I did that. In my html file I referenced the copied .css file, the downloaded .js file, and the copied .js file in the &lt;head&gt;. I then put the the &lt;div&gt; in. When I run the .html file the add a site message comes up with the box, but after I enter in website and click add site nothing happens. Are there any declarations that need to be made in the .js file because it works perfectly on jsFiddle? edit: I wasn't referencing my files correctly
why do people always give the jquery solution. this is probably easier to do without it. Jquery just adds bloat where its not wanted.
if you want no jquery iframe = document.createElement("iframe"); iframe.id = 'id'; iframe.name = 'id'; frame.style.display = 'block'; frame.style.left = '0px'; if you want to add to it iframe.innerHTML = ''; 
Using greater than/less than may save a bunch of time. Good to know. As for your other point, I find I learn best by doing. I got a bunch of info on html and css way back when but none of it sank in until I made a few pages myself, and now I can write those pretty decently alone in a dark room. This project is actually for a fairly complicated schedule that has a ton of variables. I figured a restaurant menu would be an analogous model that'd be much easier to visualize and ask questions about. I don't have much experience with javascript and hopefully by the end of this I'll have a better understanding of how to make it do what I want. I'm asking here because here I can illustrate my question with an example--something you can't do in a search engine or reference guide.
Can you prove any of this? Got any facts or figures to back up your claim?
Replace "XXXXXX" with payingAttentionDuringClass
This is improperly formatted, and provides no context about intent for what the code should do. No one can help you if you can't even ask a question properly. That aside, you JS throwaway accounts with your do-my-job/homework-for-me questions are turning what should be an awesome resource at an exciting time for JavaScript developers into a pile of shit.
Yep, like Douglas Crockford. Perhaps algorithmic work is less sexy to work on no matter how well appreciated the end result may or may not be.
If you go for Backbone, you should definitely look into Marionette. This provides you with more 'framework', as Backbone itself is a bit too open-ended for my liking. See https://github.com/marionettejs/backbone.marionette. Also interesting: * How SoundCloud used Backbone+Marionette http://backstage.soundcloud.com/2012/06/building-the-next-soundcloud/ * Smashing's comparison of different JS MV* frameworks: http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/
Yes what alwaysclicks is basically asking for is the option to predefine certain keywords for environments. JSLint has a few predefined sets (Browser, Development, Node, Windows, Rhino) if you want to borrow them from his project.
Your suggestions works for me as well. `.end()` is really more useful in cases whether the stack goes more than one deep and it saves making extra temporary variables: $(allCells) .select(willDie) .tap(reducePopulationCount) .select(olderThan(2)) .tap(turnGray) .end() .tap(animateDeaths) // ... Thanks for the excellent observation.
Even then, I really think you should be using a temporary variable to be *explicit*. Just my two cents.
I think that's a valid coding style, and of course jQuery Combinators supports both ways of writing code. This reminds me of the debate about anonymous functions and point-free coding. Some people like anonymous functions, some people like using them judiciously but not overusing them, and some people believe that if you can name something, you should. For the sake of interesting discussion, here is a middle ground (that may satisfy neither). Instead of: var $toDie = $(allCells) .select(willDie); $toDie .tap(reducePopulationCount); var $gerries = $toDie .select(olderThan(2)); $gerries .tap(turnGray); $toDie .tap(animateDeaths); We could write: $(allCells) .select(willDie) .tap(reducePopulationCount) .tap(function ($toDie) { $toDie .select(olderThan(2)) .tap(turnGray) }) .tap(animateDeaths); Inserting an anonymous function "inline" does allow us to name selections and create a small scope while still keeping the overall "flow" of functions.
Go get 'em! Try implementing what you asked [here](http://www.reddit.com/r/javascript/comments/136nkh/how_do_i_make_certain_text_only_appear_on_certain/c71bm03) with the knowledge you just gained. If you post it back as a github gist and link to it, I'll be glad to give feedback.
Now that I can get behind. I don't mind the temporary variables at all, it's the breaking of the flow using hidden magic that worries me.
if you're using java why not use the CLosure Compiler for minification?
What range of pay are you going to offer this position? I basically do everything you mentioned here except I'm not a minion.. I'm "the" guy where I work. BTW I'm not interested in switching jobs. I'm just curious.
Well maybe I'm just a greenhorn in Javascript but I personally wouldn't consider this job requirement to be "minion" status. To me, a minion is someone who preps your email marketing or manages the admin sections of websites that "the guy" would have made for them. Now, if we're talking a $60k pay for this position, that's probably fair. But to me, minions are $30-45k and I would say those types of people would not be able to understand half of the things you have listed above.
i like your humorous approach, but there a things like the use of "expert" that throws me off. Here is what i would've written. VSTI, is looking for a Intermediate webdev who is passionate and willing to learn and write great javascript applications. * You will be working with Java as a backend and Javascript / HTML (CSS included) on the front, so it is important that you have experience and insight in these particular languages. * Graphical knowledge (web design) and experience with UX is a plus * you must be familiar with version control and controlling the stack. * insight in web-development trends is also highly appreciated. * It is also important that you can keep control in stressful situations (yes, these will occur). * in return you will be given a competitive salary and an amazing workplace (hopefully for many years to come).
Can you give an example of using `then()` and `and(0`?
Perhaps my attempt at using "minion" humorously has fallen flat. This is a serious dev position. No scut work, 100% coding. And as stated I'm not looking for an expert, just someone with good basics who wants to become an expert. It's a great position to seriously grow ones skills. As for the numbers you mention, I think the higher one you mention would be a perfectly reasonable place to begin for someone whom already possesses the necessary security clearance. But, as I said before, I don't make those decisions so everything I'm saying is purely hypothetical.
I guess that's fair then. The only thing I don't know out of your requirements is NodeJS (I haven't made the leap to console commands.. I come from a design background and I'm interested in diving more into web programming). I also don't have a github account but I know what it is. I just don't have a use for it because i don't work alongside other coders. Given this, someone of my skill-set would probably be pleased with a $70k offer. I like kakaokoen's suggestions below as well.
I think hooking into window.onerror and reporting the error to your backend is a great idea. The backend redis server in this article is cool in concept. But in my opinion, if you're seeing so many JS errors in your app that the redis server aggregator were to be useful, then you're doing it wrong. Your app should have *zero* JS errors. If one is reported, it should be fixed immediately. So, I think simple text logging of your errors here would be sufficient. That said, I can see the redis server being useful for a QA environment, or a beta launch.
I did this once on a project, it's amazing what kinds of errors you get... for example AntiVirus/security software mangling AJAX responses. By the way, [Airbrake](http://airbrake.io) already supports this, including email notifications and error aggregation (same as for server exceptions).
No, it doesn't hoist the assignments, only the declaration. It turns this: function foo() { ... var bar = 42; ... } ...into this: function foo() { var bar; ... bar = 42; ... } Hoisting has nothing to do with why the `alert()` in the example reports "goodbye". 
I would disagree with it reading more semantically. As I read it, `.select()` filters the original set to a subset and `.end()` removes that filter and resets to the original set. In contrast, I see `.and()` as "union the next filter's subset with the existing subset", which is different thing. I do like your `.then()` idea, though.
your ajax call in js will have a success/error callback, make another call then?
I agree that `and()` could be ambiguous in that context.
`.end()` is already part of jQuery: http://api.jquery.com/end/ So this is normal jQuery code: $(....) .filter('.cell.alive +.lr0.cell') .removeClass('lr0') .addClass('lr1') .end() .filter('.cell.lr1:not(:first)') .removeClass('lr1') .addClass('lr2') .end() jQuery Combinators adds `.select(...)`, and it semantically works with `.end()` just as if you used `.filter`, but you can do much more sophisticated things, like chaining two filters.
jQuery Combinators looks great. Have you approached jQuery core about possibly including it in core. Not sure about `ergo` and `when` but `tap`, `into` and `select` seem like prime candidates for inclusion (very lightweight too).
Thank you for putting that together, you just saved me from writing an angry and probably not nearly as coherent rant about this submission. 
You're absolutely right, though it would still be useful if you're throwing custom errors based on validation or business logic
I haven't considered this yet, thank you for your very kind words :-)
Worked on a platform that did 22 Billion HTTP requests a month, we setup a couple nginx boxes at errors.mycorp.com to serve back a 1x1 pixel. Then for errors we had something like i = new Img() i = "http://errors.mycorp.com/" + Version + "/" + error.toString(); Generally we'd get about 30-60 an error and then DOS traffic at 150-160MBps when a part of the CDN failed or a queue backed up. Note: the error.toString() is just there for brevity, the real method was a compilation of error.property values. Also, with the exception of some flavors of MSIE and embedded browsers, you can send a fairly LARGE URL of data. Take on a simple script to aggregate nginx access logs and you can eliminate most errors. Also as user/itsnotlupus pointed out, when you're dealing with most of the web browsing population in the civilized/networked world, be prepared for "(2 == 2) == False" style errors that make no goddamn sense whatsoever. Update: Checked the public stats, its 22 Billion HTTP requests a month now, not 6 Billion.
Why're you using document.write? What's the purpose? You should [never use document.write](http://stackoverflow.com/questions/802854/why-is-document-write-considered-a-bad-practice). Here are some [other methods](http://www.w3schools.com/dom/dom_document.asp) instead.
&gt; [Okay, the numbers should be 1, 2, 6, 7, 8, 9, 10 how do i stop reddit automagically treating these as a numeric list?] You can escape the period after your number to turn off the generation of the list but you lose some of the nice properties (the subtle layout) of an ordered list: 1\. One 3\. Three 1000000000\. Brazillion Not sure if there is a better way... EDIT: Oh basically it would look like: 1\. One 3\. Three 1000000000\. Brazillion 
Take a look at the example [here](https://developer.mozilla.org/en-US/docs/DOM/document.createElement) and [here](http://www.dustindiaz.com/add-and-remove-html-elements-dynamically-with-javascript/). You can optimize your code, and instead of using loads of document.writes use just a small snippet of code.
Add a class using document.write and put CSS in the stylesheet?
I take it you aren't using any javascript libraries (jQuery, etc). Do you have to do this using native javascript?
Here's a version that uses no iteration: function evens( a ) { if( a.length == 0 ) return []; if( a.length == 1 ) return a[0] % 2 ? [] : a.slice(); return evens( a.slice(0,1) ).concat( evens( a.slice(1) ) ); } var array = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; console.log( evens( array ) ); // outputs [0, 2, 4, 6, 8, 10] (edit: I read the blog comments after writing this and see that a couple of people posted similar recursive solutions)
Well, this is horrible. But just to prove it's possible: &amp;nbsp;&amp;nbsp;1.&amp;nbsp;&amp;nbsp;One &amp;nbsp;&amp;nbsp;3.&amp;nbsp;&amp;nbsp;Three &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and such. 10\.&amp;nbsp;&amp;nbsp;Brazillion Also: 1. One 3. Three and such. 10. Brazillion
Before she goes learning anything perhaps look into learning to use the built in chrome developer tools. they are a much more powerful toolset imo
I'd suggest the Firebug Wiki: https://getfirebug.com/wiki/index.php/Main_Page They even have a short intro video showing off the features. As previously suggested, Chrome Developer Tools are a good choice, too. I think she should have a look at both of them. One rather useful feature that Chrome Developer Tools is still missing is the ability to select DOM Node references inside a nodelist in the console and have them show up in the HTML tab. You'll have to get to the single node to do so.
Thanks for the reply but I've actually solved the problem =D I created an object at the document level, and put the three values into it. The biggest issue I had was that the redraw() function actually needed all 3 values set, but neither of the functions that called redraw() HAD all 3. The object gave all the variables persistence and solved the variable arguments in rather a nice way.
A bit off topic, but might be relevant. With FF updating so many times, firebug never seems to catch up. I have it installed but it is deactivated. Do you people just refuse to let FF update to the latest release to keep firebug working?
I agree with a lot of these, but &gt;Always declaring variables at the top of their scope This is almost always a good idea. You dont want developers coming after you having to hunt and peck their way through your code.
As suggested chrome dev tools is the way to go, there's loads of good advice in the google.io talks: 2010 http://www.youtube.com/watch?v=TH7sJbyXHuk 2011 http://www.youtube.com/watch?v=N8SS-rUEZPg 2012 http://www.youtube.com/watch?v=3pxf3Ju2row There's also The Breakpoint a youtube series about dev tools: http://www.youtube.com/watch?v=ktwJ-EDiZoU 
IMHO, scope trumps local-usage; in almost every language, this is how things are done. In your preferred style, if you happen to be looking at the *single line* that defines the variable, then you'll know what scope it is in - otherwise you have to hunt and peck, as I stated originally. If you're anywhere *else* in the function body, you'll have absolutely no idea. By putting this all at the top of the function, you have a scannable list that's easy to grok. It also keeps you from accidentally overwriting a variable into a new scope where it shouldn't be.
Or don't make your functions that long in the first place - [Long Functions are one of the classic Code Smells](http://www.ibooksonline.com/135/f_0114.html#sec.LongFunction)
Actually I think the opposite happens. When the declarations are all on top, is when you have to be constantly going up and down in the code. Declare them as you need them.
Javascript has only function scope. So I know exactly the scope of the variable, no matter where defined. 
The point is the iteration is internal to the engine (which can't be modified) and not in userland code (which _can_ be modified); `reduce`, `sort`, etc. all accept a callback that allows you to perform an arbitrary operation for each item in the array. Calling `concat` is internal to the implementation and we don't get to specify what happens.
Are you using a high level language that compiles to Js or is this in the wrong place?
Why so serious?
You're overthinking it. We all know it's not practical, we all know it's not efficient and it's certainly not usable in the real world. Also this challenge is directed towards experienced JS developers (that are already aware of the difference between good and bad habits). However, this challenge helps you improve your lateral thinking and allows you to discover new uses and approaches to solve the same problem, that's what I intended to challenge people with.
I, and he, meant to put them at the top of the function you're declaring them in, not the top of the file.
Your code looks like Java. This subreddit is for JavaScript. The two are unrelated.
&gt; public class ColorPanel extends JPanel Poor bastard is using [Java Swing](http://download.oracle.com/javase/6/docs/api/javax/swing/JPanel.html). Wrong place.
I agree, and for the most part adhere, but what do you do with long `initialize()` methods? It seems redundant to just shove chunks of it into another method just to be called once, and only once, at init.
Wouldn't that be a use for a prototype?
Coffeescript pretty much sells itself after a few days of real world usage.
So the spirit of the game permits the browser's code firing a callback or block for each element, but not the user's code?
Personally I still think strict equality everywhere is a best practice, unless you're explicitly depending on type coercion (such as == null to check for null or undefined). It is both a good guideline to keep noobs from shooting themselves in the foot and good for veterans to avoid stupid mistakes.
If `console.log(count)` was giving unexpected results I think I would do a Ctrl-F for `count` and see where it was being assigned to and find it in about 10 seconds among 100 lines of code.
&gt; a.toString().replace(/,?\d+[13579]/g, '').split(','); Oh dear god why
JSLint gets really angry if you don't put your vars at the top of the scope, and I haven't found any way of disabling that. :-/
Yeah, but still it's an error that's easily mitigated. Not to mention multiple files, etc. Now let's assume that was intended behavior and that the programmer wanted to log the global first, then the local after some operation. This can be hard bug to find for people not familiar with variable hoisting.
And it's not like loose equality gives better performance.
What about libraries that instantiate themselves like this? (function() { // shit loads of code })(); Putting all of your vars at the top of a construct like this is a real nuisance. And yet, I've seen people do it. The amount of scrolling they have to do is painful to watch.
&gt; Yeah, but still it's an error that's easily mitigated. No it isn't. The error is just as bad whether you hoist the variable or not. It's only a matter of how quickly you can track it down. _If_ your first thought is "maybe there's a local variable shadowing the global I'm trying to access", then you'll save maybe 5 or 10 seconds. But I know that's not my first thought for every surprising behavior I encounter. &gt; Not to mention multiple files, etc. I'm going to go ahead and insist that a single function declared over multiple files is a bad idea.
You should always declare your variables at the top because *that's where they will be declared whether you like it or not* (see the other explanations about hoisting). Putting them anywhere else will just make you think that they are being declared at that point. Issues caused by this are rare enough that you may live to never see one, but if you do you'll pull your hair out trying to figure out what is going on. It's the only relevant point here... if not for hoisting I'd say put them where you want. The other arguments either way are pretty subjective.
Meh... I certainly wouldn't knock someone in a code review for a loose typeof check. 
I don't know what the hell I'd use this for, but nice write up. I want to be this guy when I grow up.
&gt;you see variables declared at the top and have to hunt for where they are being used Why would you do that? Your editor should tell you if one of them is unused.
This is especially useful, right after a release. I've done this on one of my sites, and there have been several occasions where I fix an error, whilst someone is posting a report about it. When that happens it's awesome, because you can give the impression you fixed it within a minute or two of the post, making you look really fast!
In the case of V8, creating objects as consistently as possible -- i.e. all in one place, such as in a constructor -- will improve the chances that the objects work out to the same hidden class. If it works out right, this comes with massive performance benefits. Regardless, the focus should always be on clarity first. You can worry about performance later if it's needed.
Hope I didn't sound too snarky. I'm still learning JavaScript and not too long ago had no idea what I was doing. I don't want to discourage you from seeking help here!
RobertMeta's comments on that page are spot on. 
yeah.. dont think i came to reddit first.. 
I've not had any problems with Firebug saying up to date. Just make sure you've installed from AMO https://addons.mozilla.org/firefox/addon/firebug/
Build a test, and profile it.
[mdn](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/with) mentions them. Here's what they have to say: &gt; Using `with` is not recommended, and is forbidden in ECMAScript 5 strict mode. The recommended alternative is to assign the object whose properties you want to access to a temporary variable.
This. I've earnestly been trying to find someone who could finally sway me to the side of CoffeeScript because with all the rabble, it feels like I must be missing out on something. But everyone always talks about the "beauty" of it but I, like yourself, find JS syntax to be much nicer and more readable. Sure, JS is more verbose and the little gotcha's can be a pain in the ass but when you're reading JavaScript you **know** you're reading JavaScript. Provided the person who was writing it kept their code formatted well, you can just scan through the code and see where variables are set, functions are defined, and all that other jazz. And while the gotcha's can be a pain, I think they add a little bit of character ;)
I think this question boils down to whether a property takes more memory than a function and whether property access is faster than calling a function. The answer to both is that the object is much better. Functions have a lot of internal state they need to keep track of depending on implementation - its lexical environment, its source code, its compiled bytecode, some caches, other internal metadata. Properties also carry some metadata but the list is far less substantial. In terms of CPU usage, a property access will be much faster than calling a function optimizations aside. Even with optimizations such as inlining I would suspect property access will still be a clear winner.
I largely agree with this but I've got a bone to pick with inline object literals. In most cases object literals are faster to create than creating an instance of a class and I would argue that this: var customer = { id: customerID, name: customerName } Gets the same message across but in less time than this: var Customer = function(id, name) { this.id = id; this.name = name; } ... var customer = new Customer(customerID, customerName);
No you don't. If you see a call to `alert()`, `var alert` is not defined at the top of the scope, and `var alert = function (){ //stuff }` is defined in this scope, but not currently in your screen, how do you know that, without reading/searching the entire object to see if maybe this function has its own implementation of `alert()`?
Classic mistake. Instead of result = true (which is setting result to true), you need result == true (which compares result to true).
Good work identifying the issue. The fix I would suggest, however, is probably just if(result) { }, the === true part is superfluous.
I would write sane code.
Good work you have done
But they do create scope. That's literally all that they do. Compare: for (var i=0;i&lt;3;i++) { setTimeout(function(){ alert(i) }, 1) } // 3,3,3 for (var i=0;i&lt;3;i++) (function(i){ setTimeout(function(){ alert(i) }, 1 ) })(i) // 0,1,2 (order may vary) for (var i=0;i&lt;3;i++) with({i:i}) { setTimeout(function(){ alert(i) }, 1) } // 0,1,2 (order may vary) They're horrible for performance because engines aren't optimized for them, due to their bad rep. Self fulfilling prophecy. All the poison thrown at with statements has to do with "If I pass an arbitrary object as the scope, I won't know what's in the scope." Which is true. If that's a problem, stop using arbitrary objects as scopes. Compare (function() { var a = 1, b = 2 , c = 3; // stuff happens here })(); with with({a:1,b:2,c:3}) { // stuff happens here }); The first snippet is blatant function abuse for the sole purpose of creating a scope. The syntax is dubious, to say nothing of the usefulness of defining a function to run it once immediately and never again. The second snippet uses a statement meant to create a scope, to create a scope. This is probably why it is so universally reviled by the enlightened. To address your last point, you are correct that `var` statements don't stick to `with` scopes, just like plain assignments don't stick to function scopes. If javascript developers can wrap their heads around the concept that function(x) { y = x * 4; } will leak `y` into the parent scope, it doesn't seem like a huge stretch to also learn an equivalent rule with `with` scopes. 
This is also an option.
Alternatively, don't use Yoda Conditions because they're both weird to read and pointless if you're comparing variables to variables; and use a [linter](http://www.jslint.com/) to catch these rookie mistakes.
Above and beyond new syntactic constructs like the Elvis operator/maybe monad (`?.`), for me the brevity of function definitions is a win over plain JS when you're really into writing functional JavaScript. When I'm doing things like writing functions that return a function that returns a function, CoffeeScript is much nicer. I rarely use the optional parentheses for function calls. Grody to penultimate. The one case where they are a win for me is writing method/function decorators. Writing `memoize (n) -&gt; ...` is a huge win over `memoize(function (n) { return ... })`, especially when you need to chain a few decorators as in `precondition((n) -&gt; n &gt;= 0) memoize (n) -&gt; ...`. I guess for me, cleaner/simpler functional syntax encourages functional programming. I don't find skipping parentheses a win elsewhere in the code. Your Mileage Obviously *Has* Varied, and I respect that.
I saw Steven Wittens talk about this at the Full Frontal conference last week - the visualisations he was doing with it were beautiful - really want to play with it
&gt; I demonstrated that there isn't such a thing. No, you demonstrated that var statements ignore with-based scopes (which is admittedly weird.) 
How often in real use does strict equality actually affect your code? I personally have never run across the need to use ===, and so simply don't. I prefer == as it is what javascript uses to determine truthyness in if and ternary statements for example. There are few unintuitive results of == once you learn that it uses type coercion, and I find those that are somewhat quirky, should never really show up in code.
Would you consider [this code](http://jsfiddle.net/eYfV5/2/) to be completely insane? Its not my style, but its a fairly common pattern and a good demonstration of why declaring variables at the top really helps with clarity. And yes, I did write all of that just to make this useless point to a stranger on the internet :(
&gt;[`with` statements are] horrible for performance because engines aren't optimized for them, due to their bad rep. No, it's because `with` statements are very weird. Variables inside a `with` block can be either from the object you passed or from one of the various outer scopes. This can be different each time. That's a huge problem if you want to generate fast native code. Unsurprisingly, `with` statements are highly problematic for humans for the very same reason. You can't tell right away what's going on and the thing which happens may not always be the same thing. It's evaluated at run time. Each time anew. `with` negatively affects performance and it also negatively affects the quality of your code. That's about as bad as it gets, really.
Passing an object literal to `with` isn't a scope, it's just a weird construct. This is similar: (function(a, b, c) { // stuff happens here }(1, 2, 3)); The difference is that this actually does create a scope.
throw your code up on Pastebin or JSFiddle and paste a link, it's too hard to read in a Reddit comment
Great n all but I feel like an example of the right way to do it for most of these is needed..
I'm curious as to what you think a scope is. Even [MDN](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/with), this cesspool of anti-`with` statement propaganda, describes it thusly: &gt; Adds the given object to the scope chain used when evaluating the statement. I can't think of a sane definition of "scope" where something can be part of the scope chain without being a scope. 
[This code](http://jsfiddle.net/eYfV5/2/) is an example of ambiguity that can be caused by not declaring your variables up top. Obviously methods themselves shouldn't be very long, but when you use a function to declare a whole module, its gonna end up being long. I typically use a variant of this revealing module pattern that makes scope much less ambiguous, as well as declares local variables at the top. Not only can declaring variables later cause ambiguity, but as many mentioned, hoisting will define them up top anyways. Might as well make that clear, as I can guarantee you there are a lot of "developers" out there who have never heard of hoisting.
https://developer.mozilla.org/en-US/docs/Gecko_DOM_Reference/Introduction Seems to be a decent starting point. If you are familiar with separating logic from UI, the basics of javascript should be easy to pick up. The DOM is simply the UI API for javascript and should be separated as you would in any software. This is a common mistake for rookie programmers who dive into javascript and combine all their logic into their jQuery use. Once you feel comfortable with this speration and figure out the basics of how to interact with the DOM, I would hop into jQuery. jQuery is simply a library to make interacting with the DOM API easier, and also more reliable as you must consider that every browser vendor has to implement their own version of the DOM. While modern browsers tend to typically share standard implementations, old browsers and non-standard features can often change based on the browser.
It comes up fairly frequently. Most times I compare to a string or a number, I (personally, at least) mean that I want the thing to ACTUALLY be a string or a number, not some object that happens to toString()/valueOf() to the same thing. One example of many. == and if/ternary have absolutely no relationship whatsoever. The If and Ternary use the ToBoolean abstract operation to convert the result of their expressions to true/false. If will never do any type coersions (eg. it will never invoke your toString/valueOf functions). Double equals uses the abstract equality algorithm and is many steps of worthless things that you don't want to think about and can be avoided just by always using ===. You should only use loose equality if you are depending on a specific behavior of the abstract equality algorithm (such as == null as mentioned above).
There's the self-fulfilling prophecy again: It's slow because it's rarely used, It's rarely used because it's slow. &gt; Just write it as IIFE yourself. I really don't see why you think that's a problem. Yup. IIFE has become just one of the warts people deal with when writing javascript. We may wish for a saner scoping mechanism, but that's the accepted One True Way now. Between the propaganda of "it's too slow", and "it's too powerful and you'd use it wrong", javascript has effectively lost what could have been a great alternative to the hackish IIFE and more. 
Small note. As a best practice, don't ever use "==" an an equality test. Use "===". Type coercion is a dangerous thing: http://www.youtube.com/watch?feature=player_detailpage&amp;v=hQVTIJBZook#t=899s
It is, global variables should be minimized whenever possible. I'd go as far as saying any more than 2 or 3 per app is too much. But it's not just globals it's also the case for nested scopes. Assume I have a function that's immediately invoked to protect my scope, I can still run into a problem with something declared at the outer function scope and another variable with the same name in the inner scope.
haha really? Why? I've never seen anything like it, but as a personal convention, I find it quite helpful. The only downsides are performance (I think?) and changing a method from private to public requires a bit of refactoring, but that is easy and uncommon. I have been meaning to get feedback on this "pattern"
&gt;It assigns an arbitrary object as a scope Objects aren't a scope. Inside a `with` block, the properties of the passed object are temporarily added to the current scope and things which already existed get temporarily overwritten.
The cool thing is, there is a choice. I prefer curly braces too but I also prefer static typing. Now I can do that by compiling C# to JS. In a way I'd rather we had some bytecode instead, with browsers having a JS to bytecode compiler. But I will settle for compiling to JS. Adding that extra step to my build pipeline has been worth it for me in the past.
One advantage of having a constructor function is that you can encapsulate the representation better, vs. say, having to search through a whole mess of source code if you want to convert everyone to have firstName and lastName instead of just name.
Conventional wisdom for [when to optimize](http://en.wikipedia.org/wiki/Program_optimization#When_to_optimize) is: _premature optimization is the root of all evil_. There could very well be other areas of your application that are actually the problem. Be wary of chasing red herrings and wasting valuable time if you're not positive that you're addressing a real problem. If you already knew that though, and you've already found that this is a problem....or maybe you're just bored and feel like hacking....then my main piece of advice would be to benchmark both, using something like [jsperf.com](http://jsperf.com) if possible so that you can capture a range of browsers easily. Here's a great [example](http://jsperf.com/prototype-vs-closures/2) (discussed [here](http://www.reddit.com/r/javascript/comments/kssvc/closurebased_classes_up_to_20000_times_slower/)) to get you started. Even though that one gave me some setup error, the tests all seemed to run fine. If you can't use jsperf.com for some reason, then just insert some basic timers using the `Date` object. You should probably also consider the classic space space-time tradeoff, in other words what is the fastest may take the most memory, or the one that has the faster initial load may result in worse access times from the app. Also, is your app a "webapp" (accessible to mobile) or is it more like an intranet app? For mobile clients, you have to be extra careful due to the environment that it runs in, and [John Resig](/u/jeresig) did a nice [3-part series](http://ejohn.org/blog/revised-javascript-dictionary-search/) (that's the 3rd part, but has links to the other 2 in the first sentence) that deal with extreme optimizations and some of the _gotchas!_ that arise. The problem with simply asking us _'which is best'_ is that it really just depends on your actual usage. Well, that, and sometimes we're not always right. Realistic benchmarks are always right, though. Lastly, I love `console.profile("foo")` / `console.profileEnd("foo")`.
Using sublime text 2, it doesn't do that
I don't think it'll buy you anything but I also don't think it necessarily hurts. The convention is to use the _. But it's not going to break your code any to do it that way.
I just vomited in my mouth a little.
The problem I was trying to solve, which probably isn't very widespread, is reading other people's code and trying to figure out where a method comes from. If you have a module that's like 1000+ lines, and has hundreds of usages of one method, its hard to hunt down that method's definition sometimes. Did they create it with a function expression in this module? Did they create it as a function declaration in this module? Did they create it somewhere else globally? Obviously in well written, separated, and formatted code this isn't as much of a problem at all, but even in my own code I find this method makes it easier to know exactly what a function is everywhere it's being used. Also, my co-worker was using the pattern you linked to and forgetting to write var and accidentally creating globals sometimes. 
I understand type coercion and I don't ever find a case where I should be comparing values in any "confusing" case. Really, most type coercion makes sense when you actually take time to learn what it's doing. I think trying to compare 0 to "" is evident of a problem elsewhere in your logic than what equality operator you use.
I agree, but it will never stop people from asking why a manhole cover is round and not square. Finding creative people sometimes means presenting creative problems, useless or not.
We all benefit from use strict http://stackoverflow.com/questions/1335851/what-does-use-strict-do-in-javascript-and-what-is-the-reasoning-behind-it
Aside from potential performance implications, why run a function for content that doesnt change? Object literals make for awesome constant storage containers.
Oh I know. I'm still learning of course, and as of today I'm halfway through [this book](http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752), so I'm now enforcing strict mode in all new code, and we're moving over to a modular pattern that will (theoretically) avoid namespaces and any global variables (besides the define and require functions which seem to come with require.js). Strict mode will definitely help by getting rid of the dreaded implied globals. I was hoping to get feedback on the pattern above so I can know if i'm making a mistake by using it. I'm still not sure if I want to or not, but I haven't heard any resounding reasons why its bad. I do agree its silly to re-solve problems, so I guess I'll re-examine this and see if there is a problem to be solved or not. Now that implied globals are gone, perhaps this construct of mine is entirely unnecessary. Thanks!
I've written a project in CoffeeScript before. Never again. But I do see the value, I just don't think the benefits are worth the cost.
I wouldn't hold my breath on that fix coming any time soon. Apparently pull requests have been waiting around for months to get integrated. I started working on fixing it myself. I'll let you know if I get around to it.
great, a site is one year old I never hear of. one year news aggregation... is that good?
ARGH!
Errors that make no sense, Oh yeah. I had one where the test server file worked fine, I copied the file directly to the live server, and bam! "Expected end of statement(at 149)" It was a bloody string literal assignment! WTF!? The text encoding was the same... everything! 
Well I was going to say there's always [jQuery.sub()](http://api.jquery.com/jQuery.sub/), but it looks like that's been moved to a plugin itself. I have to admit that I didn't have time to time properly read everything until now, and now that I better understand it I think it's pretty cool.
Until recently, the answer would definitely have been "anything populated via javascript doesn't get crawled". Google allegedly changed how googlebot works within the last year, though, so you might now be lucky.
That's too bad there isn't a RSS feed.
Like [the one linked at the bottom of the page](http://www.echojs.com/rss), you mean?
There are a few, 2 for jslint and 2 for jshint, only 1 that works without node, though and so far I'm not really liking it. Also, because I declare variables where I need them, it's very easy to see what's being used and what not. 
It might look good, but it's not the most usable design. Think about mobiles and people with old browsers.
I guess I'll just have to get down and dirty and write something non-trivial in it. I've already got a sweet set of server-side dev tools for building my projects so I suppose adding in the compilation step for CoffeeScript won't be too much of a hassle. On a semi-related note, if you haven't started using Node.JS as part of your build process, I would highly suggest it. I got in to Node about two weeks ago and it's made everything so much nicer.
And I've been saying to co-workers that this should just be built into Javascript. Thank you.
I'm kinda using it embedded in ruby. The performance bottleneck parts of the process are in C, which is much easier to do by extending ruby than js. CoffeeScript compilation (as it's in the embedded V8) is the slowest part of the build process by an order or two of a magnitude. However, thanks to that I was motivated to do smarter build-caching, whereas the brute-force speed of handling from the point of js and on was more than fast enough as is. However, before implementing the bottlenecks in C, it would take seconds, not milliseconds to build everything.
 if (person.info.name.first) { person.info.name.first = 'Jonathan'; } // Cannot read property 'name' of undefined if (steelToe(person).walk('info.name.first')) { person.info.name.first = 'Jonathan'; } // No error.
It doesn't work within HTML Object Selection - try document.getElementsByTagName('div') in the console tab... I believe this is for performance reasons, but I haven't yet had a look into it.
It's not that the interpreter moves them to the top *for* you, it's that it will silently force them to the top and people who read your code can easily be misled to thinking its being declared where it's not.
"CoffeeScript is just JavaScript" so your issues with private props/methods are no different than they are in vanilla JS. To write quality CoffeeScript requires a very good understanding of how JS works. Understanding its functional programming abilities requires a subset of knowledge that most JS devs don't encounter. It's not laziness, it's efficiency.
Not sure if you missed the point of the post you're responding to, but why is "no error" the correct behavior here? If `person` is supposed to be of a type that has an `info` member, shouldn't you be throwing an error if it's not?
Well surely there's some structure to the data the api returns? As in, maybe the `father` property is optional, but if it's there then it has a certain structure, so all you need to write is: if (person.father) { person.father.name.first = 'John'; } If that's not the case, then I'd say it's just a bad API, which may necessitate something like SteelToe that wouldn't be necessary if you got to work with APIs you designed yourself. As Cosmologicon said, that's what I was hoping for when I asked for an example - something the author (you?) had to work with in a real project that inspired this code. The important part not being the variable names, but the context, so that I can understand why such an ugly if-statement would be necessary.
oh really? var fart = function (spec) { var that = {}, // private str = "pff" + spec; //private function soundIt() { alert(str); } // public that.init = function () { soundIt(); }; return that.init(); }; fart("tweep");
this contradicts what you replied to me. "coffeescript is just javascript" right? every bit of coffee has to compile to js, so if its available in coffee, its available in js (if not a bit contrived). I would love to see an example of a coffee class with private props/methods. change my mind :) [link related](https://github.com/jashkenas/coffee-script/issues/2142)
No problem. The concept is much older than linked Issue 2142. [Issue 651](https://github.com/jashkenas/coffee-script/issues/651#issuecomment-376395) [Issue 222](https://github.com/jashkenas/coffee-script/issues/222#issuecomment-146867) [A more verbose explanation on StackOverflow](http://stackoverflow.com/questions/4685626/private-members-in-coffeescript) It's not a contradiction. Any convention you are using now to have private props/methods in JS also works in Coffee. [There is a _ton_ of discussion on this already existing](https://www.google.com/search?q=coffeescript+private+class+variables). Having dealt with all kinds of JS inheritance and class structure, it is a godsend to be able to read someone else's Coffee code and not have to discover which pattern they are using in a particular project. Private, public, class, and instance vars &amp; methods are instantly obvious from the syntax. Transforming data is more clear due to the comprehensions and expression-centric style. The project I'm on right now has ~8K LOC Coffee compiling to ~14K LOC JS. The word &amp; character count are double in JS. No linting necessary. I'm not sure what else in JS I could do to comparably increase productivity.
Many APIs have optional fields in their JSON/XML/whatever specs, and sometimes those optional fields themselves have multilevel nested data structures. You can argue the merits of such an approach until you're blue in the face but it's not going to change the APIs. While I don't think this thing needs an entire library with unit tests and a fancy name, I do see the convenience it provides, as long as its used properly and not as a lazy way to squelch error messages.
This is a pretty cool library, but this feature is one of the reasons why I love Coffeescript. You can do the same thing with the `?` operator: object.info?.features?.hairColor While I'm talking about Coffeescript, I have to mention the `=&gt;` function definition and `@` alias: fn = (arg) =&gt; @doSomething(arg) Compiles to: var _this = this; var fn = function(arg) { _this.doSomething(arg); }; TL;DR: Coffeescript is awesome and you should try it.
I'm really glad you found the approach at least interesting, if not helpful. As pointed out above, when using `"use strict";` the issue of implied globals is solved so this pattern doesn't help as much with that. I still find this pattern somewhat helpful, in the sense that the module/object definition is somewhat similar to other languages where the method security is written before the method definition. I agree `pri` and `pub` are more descriptive, and I don't consider them too much to type. The minification issue is a great point, and one I hadn't considered. I still don't know if this type of pattern is how I want to proceed with JS development, but I'll definitely keep in mind the build process as a solution to that though. At that point, I worry the added complexity may outweigh the benefit of what I consider increased readability and clarity, although if you're already using a somewhat customized build process, it wouldn't be much complexity. Thanks for checking it out and providing the great feedback, I truly appreciate it!
Yes. 
it's just shorthand to the if. coffeescript compiles into JS while Stealtoe is a library.
That would almost be serving two different sites on mobile. Mobiles also have more vertical real estate than horizontal real estate.
Well if it's just the `First` property that might be missing then you could just write: $('#firstName').text(r.Owner.ContactInfo.Name.First || '[None given.]'); But I'm sure you meant that `Name` or something could be missing. In that case, I refer you to what I said above: isn't it most likely that, even if it's in the middle, only one or two of the properties are optional? In this example I would have to imagine that all `ContactInfo` objects have a name, so if it's just the `Owner` that's optional then you could write: $('#firstName').text(r.Owner ? r.Owner.ContactInfo.Name.First : '[None given.]'); Not the most beautiful code, but not enough to warrant a hive of callbacks. If every single property were optional then I would probably change my mind, but I've never had to type `if (a.b &amp;&amp; a.b.c &amp;&amp; a.b.c.d &amp;&amp; a.b.c.d.e)`. Hence asking for a real-world example. (ps: maybe some contacts don't have a name. But you can solve that with a much simpler coding convention, the dummy object. If 99% of `ContactInfo` objects have a name, I'd say the tiny waste of space sending empty strings as names for the rest is worth it for the way it lets you skip if-statements.)
No offense, but this question seems like you're fishing for someone to code this in javascript for you. But to answer your question: Yes; There's a way to take a simple specification along with a programming language and translate that into working software (amazing, I know.) 
Adding another layer of complexity to your code to save a few ampersands - is it really worth it? Null checking is so easy in JS.
I looked at it and it seems cool. Not something I feel I have a need for right now, but I think its really awesome when people make things, even if its not necessary, and even if there's a better implementation out there. Its also awesome when people share things they do or think of, and I think reddit is a great venue for that. For instance, I'm building a wordpress plugin framework right now. I know there are better ones out there (haven't checked) and mine will maybe never see the light of day. **TLDR: Don't let the bastards get you down, you're awesome, and SteelToe is awesome.**
Working on touch devices would be nice too.
None. Do what you want with it. 
I'm writing a library right now that does something similar to this (the jsgui library). I read some of the criticism of your work in this thread and I think some of it is misplaced. In different use cases, different amounts of library code are appropriate. If this were just about saving a few characters there would indeed not be much purpose of it. If the code is only used a small number of times, and efforts are put into optimizing the download size, then I doubt it would be appropriate to use. However, in a larger library, systems like this can reduce the overall complexity of the code. In a project that is thousands of lines long, with lots of checking for variables and subvariables, a large simplification of the main codebase can be achieved. Another thing worth taking into further consideration is the slowdown that code like this will cause and whether or not that slowdown would impede the achievement of goals beyond the utility it provides. Without having looked into this code much, in theory or in practise, I can't really be the judge of this, but it looks like there are cases where this code (or code like this) would be helpful, and cases where it would not. The way I have dealt with the same problem is through a class called Data_Object. data_object.set('layout.size', [400, 260]);
Nice idea. Now I really, really want one of these for Python.
If you want to store 1000 sets of values a object is normally better. In this case a object is probably for the best as if the data (or just a small piece of it) were to change, you`d have to go through 1000 functions to find it and change it. 
https://gist.github.com/2012250
I think the "unlicense" at (unlicense.org) does what you want, but MIT if you want to retain copyright.
yep, iPhone here, nothing happens. at least pop an alert saying "mobile devices are not supported".
I'm not really familiar with strict mode. I was under the impression it would not allow you to access the global object - does that mean it acts as if the var statements have been put there? I'm also thinking about using a build process that would translate some things from how I would prefer to express them to how they operate (best) in JavaScript. I'm more thinking along the lines of a few extra features that are a superset to JavaScript rather than a totally different language such as CoffeeScript. I would like to be able to write: var f = function; var render = f(object) {...};
I think This library can be' useful. When you mention try... Catch you are referring to a single test, but imagine you need more then one of such test: that meas multiple try... Catch blocks. It's the kind of things that could make the code unreadable. For what concern recursion I guess one could obtain the same w/o using it.
For example you are using an API some other created. Now he roll out the n+1 version and suddenly your code is no more working because of a marginal change in the data structure. If you are able to test on the data structure tree easily you can avoid your program fails on not mandatory data.
Thanks for awesome suggestions :) I will fix it tonight.
I agree that a global root object is usually not the best approach. In the last few weeks, I've began using a more modular approach, where dependencies are loaded as parameters of the wrapping function, and you can pretty much avoid globals all together, which is much nicer. I like your example, although it might be worth pointing out that it will break under ECMA Script 5 specs. See the errors [when use strict is added](http://jsfiddle.net/NapN9/2/)? Of course, that is pretty [easily mitigated without changing the pattern much](http://jsfiddle.net/NapN9/3/).
How is utf8_encode needed.. Thought that non-unicode-strings don't exist, unless it's in a byte array..
- The toolbox design has changed now. - Fixed preview of circle tool - Implemented different size documents. I work on paragraph editing now.
Thanks, document sizes feature is deployed now. I will consider the other suggestions soon as soon.
I've seen so many implied globals from missed commas and accidental semicolons and so many variables that were used but not longer are that I declare variables when I use them. If you're declaring variables that will be used module wide then yes, put them at the top. If you need an i for a loop it's silly to put at the top. i will be in that scope forever, even if all loops are removed from the function because nobody will ever remove an i. If you're only using a variable once, put it near the actual use. Then if that code is removed the variable will be too.
Seems like a reasonable exception to the rule.
The problem with this rule is that more than half the variables you declare will end up in exception territory. If the rule was "declare all variables that will be used in many places within a scope at the top" I would be in favor, but as it's usually stated it's a terrible rule.
A good start! Grid with options with defaults for 960 (12/16/24) and more would be lovely. Also, I'm on 1024*768, and changing the grid width to 960 means I have to scroll left and right. An option to hide the sidebar would be great.
You don't seem to make sure if img is already loaded (which will usually be done asynchronous, so use that onload event). That means you'll only get what is already loaded.
`vars:true`
You're really not converting the image to base64, you're drawing and then re-compressing the bitmap image to JPEG represented in base64. Different browsers might have different quality settings, write different metadata, etc.
I think the way the article is written is lacking substance. All that needed to be said is strings which are not empty/false/null in the context of an if-statement return true. Simples.
I know, it's so bizarre, and it's not as if the behaviour is different from other languages. *facepalm*.
If I have a function which uses a boolean test, I should pass that test a Boolean as input, not a String. function f( i ) { if( inputIsWellFormed( i ) ) { performSomeTaskWithInput( i ); return "I did something"; } else { return; } } Where inputIsWellFormed() is a function which examines the input to see if it is malformed, and outputs a Boolean as is the expected input of function f. This is exactly how JS does it: isFinite(); Instead of passing a function a bunch of objects which may or may not be numbers, and posting a blog about all the weird things you can make JS do by passing ambiguous input data, one can just follow the example the language provides and avoid lots of 'wat' moments.
Yes I thought this could be a problem too, but it turns out the dataURL really is correct and does contain the entire image. It's just cross browser consistency at this point that baffles me.
so. much. sarcasm. hahaa, good watch though, opened my eyes to the future.
I never thought about it from the perspective of a low level developer. Can non-JS apps still be written for the Marketplace?
Those idiots are probably cooking up webDirectX.
Fort sympathique, ma fois. 
That is beautiful - thank you for sharing; it reignites my desire to understand the math involved to make such a beast :-)
In what way? The plugin hasn't been tested yet on non-major browsers but it seems to work fine in Opera 12.10. We will try to provide support for everything IE7+ eventually. Edit: I should also note the plugin is completely open source and on Github, so any outstanding issues can be fixed if needed by any developer.
It is a reflex from the 90s, and it may just be a habit now, but certainly windows 8 reinforces my past experiences of M$ being out for money more than integrity.
Great work! I love seeing creative canvas projects. You hear all these people talk about how good they are with javascript and jquery, basically utilizing existing libraries and plugins to make things work. It's always nice to see some fellow devs create something fresh out of the box that trumps it all.
Exactly - it's not suitable for this type of software.. It's a great helper library, allow you to access the DOM via selector patterns, easily create event bindings, etc... But when you really need to create something of your own nature, that has a chain of callbacks, business logic, whatever have you.. You really need to understand proper software design, and understand how javascript differs with how it manages scope and its closure. Nice work :)
Really cool, great job!
Loved the rant. I've been devving for Windows 8 these past two weeks, thanks to the CodeProject/Intel Ultrabook giveaway, and I love it. The APIs have improved so much over Win32/COM/MFC. On the last point, you can actually run your apps in a Win8 simulator, so it doesn't take over the fullscreen. The main annoyance (excluding WebGL) is knowing that using WinRT directly will lock me out of supporting older platforms. But you can always get around that with CLI helper programs, so it's no SO bad compared anyway to the nightmares you have to deal with for say support C++ on Android.
Woah, had no idea.. I've only contracted development for titanium -- never my own projects, so I've never seen past the development phases.. Aside from that, I'm right on board with you on the enthusiasm. I recommend everyone I've talked to about mobile development to take a look at it. 
Woot!
Awesome talk. Loved how it was both a rant and a call to action. I'm also glad to know other web devs don't like Microsoft's approach to HTML5/JS Windows 8 apps.
Not exactly, but there is a way around this that works exactly as you describe. The algorithm that is used behind this orders everything from left to right, top to bottom. Because of that it is hard to achieve normal drag and drop as you would imagine, instead it detects where is the closest place that it could logically fit into with relation to the other elements. Its a little tricky to explain but imagine if when you picked up the element that every other element reshifted itself as if your currently dragged item wasn't in the list. The computer calculates this fake grid in the background and will detect what spot in that grid your currently dragged item is closest to, then opens up a blank square in where that position would be. As for the work around, Shapeshift supports multiple drop containers within the same document. Therefore if you have 5 single column drop containers, then dragging an item between each other would only shift that "column" up and down. Also, if you only have a grid of elements that are the same width/height, it will pretty much give you this functionality. The reason that I went with a more strict way of left right top bottom is because of user generated content. It is simpler to store a single position attribute in the database than it is to do what column and what row, etc. The projects that I personally will use this for will let users submit items to the grid, but not have the ability to change position. An admin can then go in and rearrange them to their desires.
Very cool! May I ask why you did not use [processing.js](http://processingjs.org/) for your port?
Is there any way of freezing the DOM? Several times in the past I hover over an item, which creates some DOM elements for the hover that I want to investigate... But I can't move the mouse down to investigate them in the DOM tree, because on the mouse-out they bloody disappear! ~sniffles~
also http://phonegap,com
I'm guessing is abomb999 is 30ish. That's the way all the cool kids used to write Microsoft back in the day. Brings back geeky memories.
No, there's no way to freeze the DOM, but you can use events to investigate.
sauce labs scout is your friend
I decided to push an easier challenge after the last two impossible challenges. This one is possible :-D
That was just some fun I was having, it's actually all done in CSS so it isn't part of the plugin. All dragged elements will get the ".ss-moving" class attached to them and will be styled accordingly.
Thanks for the info I'll have to do some more research on the changes.
Tell Reddit about the tool he said; make sure you use a proper username he said. ;). If anyone has any questions do let me know - I'd be happy to help as one of the creators.
Bingo!
It's on mac too no?
That's exactly what I got, nice one.
Is there something like this to learn Regex? With challenges that are possible at the beginning?
That's a very good idea. I'll update you when I've written it :-D Until then, http://www.regular-expressions.info/ is a very good resource for learning regex. Good luck!
Wow, this is awesome!
Most orgs at MSFT have no real love for Javascript or HTML and don't tend to hire people for proficiency in that area. Application and service developers can without too much difficulty get something to work in IE, and so that's who writes their front end code and libraries. Those that do have love for JS and HTML tend to be isolated in Bing and IE. Cross-org collaboration is hindered by the anti-trust ruling against Microsoft, and doesn't stack rank well either, so it doesn't tend to happen much. Sources: used to work for MSFT in an obscure part of the company as a very lonely web dev, friend who used to work on IE team.
Btw... this is the letter they so vaguely mention: http://news.ycombinator.com/item?id=4808208
I vastly prefer [AngularJS](http://angularjs.org) to Backbone. It does everything Backbone does, plus everything Knockout does, plus a bunch of other things, reusable controls, etc... and it's all about Dependency Injection, so it's much more testable. The only gripe I've read from people about Angular is that they "don't like the custom HTML"... which, in fact, isn't custom html at all, they're tags used as placeholders for valid HTML, and per the HTML spec, they're ignored.
This is great news. I've not used nvd3 (I prefer to make my own charts), but I'm glad to see it back out in the wild.
http://d3js.org/ is s much better...
This is what i came up with, its a bit longer than yours but goes about it in the same way. "/(\.)(?=\s)|\s+/g" =&gt; "$1 "
IIRC, that only turns off one of the two var warnings. Unfortunately, I'm not in a position to check this assertion at the moment, but I recall that JSLint wants all the vars at the top and *also* wants them combined into a single statement, and that `vars:true` only helped with part of that.
Just pasted this into jslint.com: /*global doSomething*/ (function () { var asdf = true; if (asdf) { doSomething(); var bar = 'foo'; } }()); With /*jslint sloppy: true, vars: true, white: true */ There were no complaints
Hmm, that's unfortunate. Normalized database structures and proper planning by your company would have prevented that.
It certainly would have. And just before I came onboard they moved from an open source setup to a hosted e-commerce solution so I'm somewhat restricted unfortunately.
I've played with Ember, but I never ended up committing to it once I found Angular. Ember felt like Backbone with Handlebars and two-way binding bolted on. It certainly seemed a lot harder to test. I also feel like Angular has a lot less boilerplate. One big difference between Angular and Ember/Backbone/Knockout/DIY is with Angular there is the "Angular way" of doing things. Different areas of your code are meant for different types of code. Controllers are meant for manipulating scope, Services are meant for injectable code to do anything else, and Directives are what tie your scope to your DOM. You're not supposed to do DOM manipulation in your controller, you can, but you shouldn't. So there is a lot of expected structure to the app. It doesn't break things to deviate from the structure, but it *does* make it harder to test. And testability is Angular's strongest benefit. Another benefit to this structure is it helps other developers, familiar with Angular, to know where to look for certain bits of code. It provides a little organization in JavaScript, which is normally wild west coding full of ad hoc namespacing and disparate cowboy code. I didn't feel like Backbone/Ember/Knockout really solved that issued well, or even attempted to.
I cant seem to post a comment on stackoverflow :) Why are you trying to load the provider on its own? Its not meant to be loaded outside of the iframe. Its only support to be used by the consumer for xdm communication.
Since we're the only ones in here, for now, I will try to answer your question: - HTML and JavaScript are a good start, but you're missing CSS to be a complete front-end engineer. - Knowing one JS library is not enough, in the same time you should know when it is the right moment and context to use a library, and when to rely on plain vanilla JavaScript to accomplish your tasks. - Know as much as possible about JavaScript internals, but you should touch checkpoints like: data structures, functions as first class citizens, maybe learn a little about functional programming, working with objects instead of pure classes, prototypal inheritance, (closures maybe?), AJAX. - Read more books on JavaScript, starting with The Good Parts. You can also find a good list of books at http://stackoverflow.com/questions/74884/good-javascript-books . - know the browsers, their quirks and the debugging tools available - talking about CSS, learn how to use the CSS preprocessors - learn how to use the command line and other tools available, like Brew as package manager, Git for code versioning, GruntJS/Yeoman as task-based command line build tools, how to install Node packages. Hint: OS X and never look back. - learn how to test your code, TDD is a very good start, by describing first what your code should do and take care of the how code works later on in an incremental refactoring fashion (write your tests first, write the code, refactor your code, then write another set of tests). - don't forget about the DOM, learn how to use it without using a JavaScript library. Learn how to use the existing APIs available in the modern browsers, like geolocation, web workers, storage, graphics, file access, etc. - always look for the best documentation on JS topics, like Reddit or MDN if you're having problems. I'm pretty sure I forgot about some other things, but I'm guessing this is a good start for your future career as a front-end engineer. Remember, practice every single day, write your code and keep learning, it should be fine in the end. Good luck!
lux_romana gave you a good explanation, assuming what you want is front-end development. You said UX, so just in case you actually meant UI design and/or engineering as well, there's a couple of suggestions I would add. My background is computer science and I'm comfortable with the UI part of web dev (HTML, Jquery, CSS), but as I started transitioning a few years back into the new niche of user interface design, usability and human-machine interface engineering, I had to push coding into a corner where I only go when I'm required to build a website or web app by myself. Nowadays, most of my focus is in UI design conventions, UX and even product design, and I'm using Adobe Creative suite a lot more than I use code editors :) Which I welcome, because I always wanted something more creative than just coding, so I've been involved with design for a while. Just trying to show you that coding is a great start in order to train your brain to think logically, but once you master it, you'll use that logic for problem solving like "where should x button go" or "what would be the most intuitive icon to use in pane z". What I love about this field is that the questions are so trivial at first, and the answers so often filled with all sorts of different information like logical assumptions, branding requirements, usage predictions and quasi-academic considerations about development itself.
http://www.w3schools.com/js/js_cookies.asp
Cookies have a 4KB limit, LocalStorage has a varying limit among browsers, 2.5MB-10MB. He hasn't stated exactly what he's going to use the space for, so your solution could be what he needs.
The storage for IE7 is way less than that (it doesn't support localStorage), depends on what zone the page runs in and can be as low as 64K. For added fun it is locked to the directory as well, so (for instance) storage under /pages isn't accessible from /articles
If you're not looking for web browser storage, you can definitely create / read / update / delete files using Node.js http://nodejs.org/ EDIT: You might want to check out node-persistence. It has capability to use a JSON file as a "database" (which in essence is a key/value sort of thing) https://github.com/creationix/node-persistence Re-EDIT: The project above might be 'dead'. Though, it wouldn't be difficult to roll your own. 
\#default#userData gives a smidge more space than cookies for IE&lt;8. It's basically a XML element that you set attribute names and values on.
I think the [7] was a Wikipedia citation not the IE version
I'm one of the people who gets turned away by the use of HTML to establish relationships in javascript. I've spent time training myself to touch the DOM as little as possible and separate my code, content and presentation so this honestly seems a bit backwards. It just looks like Angular (among other newer MV* libraries) calls for some behaviors I would naturally avoid like embedding templates directly in HTML (only to immediately interpret them and replace the HTML that was just rendered, hoping nothing goes wrong to prevent the template from behind rendered), putting code in HTML attributes (which must also be interpreted to manipulate the HTML), requiring an HTML baseline to build an application from scratch, absolving yourself of control over how/when the DOM is manipulated by your code, assuming clients know how to handle non-standard tags and attributes, etc.
My favorite version of IE is Internet Explorer Citation Needed.
Search in page for "ng-". That's Angular's prefix. Sure it's not a direct comparison because it doesn't say "Angular" in the page, but it is comparing. The adjacent ref to data- might refer to Knockout (but others could use that too). 
I agree, it feels weird to use more declarative templating than just HTML, and separating JS from HTML "completely" is indeed commonly thought to be *"best practice"*. The truth is, "best practice" is dictated by a number of circumstantial factors involving each project on a case by case basis. In the case of separating JS from HTML, it's fuzzier than you might think: These days, anything you can do with HTML, you can do 100% programmatically with JavaScript. HTML is a declarative way to manipulate the DOM. JavaScript can be/is a programmatic way to manipulate the DOM. "best practice" here (and everywhere, really) isn't some sort of by-the-book religious thing... it's on a project by project, case by case basis. If you must have one immutable rule, IMO it should be **Best practice is whatever is easiest to maintain**. All of that said, declarative MVVM, MVW templating like you have in Knockout in Angular are simply more expressive means of doing what HTML does for you. Think about it another way: **You don't complain about having a few loops or model/object references or if/thens in your server-side templates.... be it HAML, or Razor, or PHP, or Handlebars.** These frameworks are moving all of that forward. Gone are the days of rendering every piece of HTML on the server. More and more servers are just data sources (RESTful apis, web services, hypermedia hosts, etc), and the HTML rendering work has been offset to the client. People have been mixing HTML and programming elements to great effect for more than a decade. Angular and Knockout aren't doing anything new or alien... they're just doing it in a different place than what you're used to. Furthermore, in both cases, it can be done 100% unobtrusively.... it just usually isn't because there isn't much point. TL;DR: I used to feel the same way, but I've changed since I've realized times are changing.
I've never seen the words "favorite version of internet explorer", used in that sequence, anywhere. Ever.
http://w3fools.com
Some also support SessionStorage and GlobalStorage as well. I assume you can figure out the use of each one. They are pretty much LocalStorage with different levels of persistence and permissions.
You posted to the javascript subreddit about user experience. Maybe it's just me but I think you should be posting to a more general space. Despite some of the suggestions you're getting here, user experience is far more of a generalist field than a single person has made it out to be thus far. Everyone so far is describing the work of a front-end developer. A UX architect/designer/guru/gangster does far more high level work. Think in terms of addressing affect before effect. 
There are two kinds of file APIs in HTML5: File API and FileSystem. FileSystem is a sandboxed space where your app can read and write files, and is limited in scope the same way localStorage is. http://caniuse.com/#feat=filesystem File API and FileBlob are ways to interact with the files the user specifies. This can be through the Drag and Drop APIs or through input type=file elements. http://caniuse.com/#feat=fileapi But if it's just simple strings, LocalStorage is your best bet. It's by far the easiest of the new APIs, and most well supported. http://caniuse.com/#feat=namevalue-storage
CSS preprocessors is a thing that really helped take me to the next level for UX programming. For people interested in learning I suggest digging through twitter bootstrap LESS source.
HTML5 LocalStorage is your best bet. Here is a JS implementation that stores a SQLite DB in LocalStorage: (https://github.com/kripken/sql.js) There is also a new W3 standard called WebSQL (link: http://www.w3.org/TR/webdatabase/) which is basically a local SQL database. It's been officially discontinued but I believe WebKit browsers (Chrome/Safari) still implements the standard. (Here is a tutorial on it: http://html5doctor.com/introducing-web-sql-databases/) Drew
I post stuff on /r/software_design that you might find interesting!
Yeah, what I really meant is Front-End architect, the thing is that at my current company UX is being considered the same as front end development.
Sweet!
This guy is annoying together with his smirk. 170kloc of js(!) for an ebook reader? And this is supposed to be an example of why *-&gt;JS transpilers are not needed? There's a reason why Google's, Microsoft's web based products are either transpiled to Javascript (GWT, Script#) or written in a "stricter" subset of Javascript (closure compiler's type annotations, typescript) - they are inherently MORE complex, require collaboration among many developers, etc. His nagging about the toast notification example is hilarious. Sure, the APIs are most likely a direct copy of what's available from C#/C++ and they may not fit his idealistic view - no surprise there. DOM itself is an ugly clusterfuck and people abstract it with jQuery etc. If you don't like the APIs, just write a wrapper (which he admitted he does) - but bragging about it like that? Laughing because it uses XML? What the fuck dude, grow up. The rant about WinJS controls injecting inline HTML is stupid as well. As far as I know you are supposed to use the designer tools and create styles and templates for your controls, not dealing with the raw generated output. It's like complaining because a jQuery date picker injected some HTML into my web page... I expected an informative presentation, because I am myself interested in how JS apps are done for W8, but this was rather disappointing.
If you are in a server-side environment which supports CommonJs, you can simply store JSON with the "fs" module: var fs = require('fs'); fs.write('/tmp/test', JSON.stringify({"foo": "bar"})); that's how it would look like in RingoJS &lt;http://ringojs.org/api/master/fs/#write&gt; edit: mention "fs" module
Cool, well it mostly depends on what server-side technology (or SST) your using. For most high-level projects jQuery is the most used framework not just because it's cool, but most junior level devs "get" jQuery making hiring and onboarding easy. Modernizer.js and Backbone.js are also becoming apart of larger builds these days. I've been a mobile/web architect for almost a year now, what you'll really need to focus on is building "frameworks" or plugins for your other devs to use. Being an architect isn't just about coding too, it's about writing documentation for your devs, keeping that up to date. A good book if your wanting help to get you going for writing documentation is this book: http://www.microsoft.com/learning/en/us/book.aspx?ID=6074&amp;locale=en-us There are also "soft skills" to work on, talking with executives, clients, etc... These are things that are hard to teach short of just doing it. Hope these notes help, and welcome to the architect world! :)
I'm not much of a designer in terms of how things look but I have become the "front-end architect" in terms of how things work and feel. Personally, I would suggest reading [Don't Make Me Think](http://www.amazon.com/Dont-Make-Me-Think-Usability/dp/0321344758/ref=cm_lmf_tit_1) to get a good idea of how users interact with software in general. These are my quick and dirty general guidelines: * People view pages in a clockwise motion. Using reddit as an example, it would be post-title/information -&gt; sidebar (pay attention to how you quickly glance at the upvotes vs. downvotes) -&gt; main content. Then it's turtles all the way down from there. * Instant gratification. When a user interacts with a page in any way, they should not be left waiting. If they are, there should be a clear signal (such as a "spinner") showing that some work is being done but it will take a second. * 200ms. That's the average amount of time it takes someone to get that feeling that they aren't directly influencing something. If it ever takes more than 200ms, refer to the second point. Obviously there's a lot more but that's just some stuff off the top of my head. I may add more as I get more free time.
You should set the image's source to the image, hide it initially, then show it after your form is validated. &lt;img id="tick" src="tick.png" style="display: none;"&gt; and in your `checkValidation` function, once it validates, show the image. document.getElementById('tick').style.display = 'block'; And if the form is invalid, `.display = 'none'` --- On an unrelated note, *please please please* don't stick in `alt=""` just to make the validator happy. Put actual content in there, like "This form is filled out correctly", or leave it out and ignore the validator warnings knowing that you're skipping an accessibility feature.
Just because I can: You are closing your elements with '/&gt;' which is for XHTML and XML but I don't even have to look to know you are not serving your pages as XHTML or XML. In HTML, things like &lt;br/&gt; and &lt;img ... /&gt; are forbidden. This makes browsers look at your markup as "tag soup" and will try to correct this error the best they can (though they do a very good job of it ). Quit doing that.
Thank you, I'll be checking this out. I've used backbone for one project and I have to say the way it makes you organise code it fantastic. I do however find there are a lot of ways to do the same thing. I'm hoping these videos can bring together some really good, solid ways of using the framework
Wrong. Look at the spec, or at least the examples, and you will not find using the /&gt; closing tag anywhere. http://developers.whatwg.org/embedded-content-1.html#the-img-element In any case, the fact that, as you say, they will be replaced by the browser indicates the browser is correcting it as I said it would. (Actually it internally works around the 'error'.) For further info: http://tiffanybbrown.com/2011/03/23/html5-does-not-allow-self-closing-tags/ Or this accepted answer: http://stackoverflow.com/questions/3558119/are-self-closing-tags-valid-in-html5
&gt; 6\. Then, if the element is one of the void elements, or if the element is a foreign element, **then there may be a single U+002F SOLIDUS character (/).** **This character has no effect on void elements**, but on foreign elements it marks the start tag as self-closing. http://dev.w3.org/html5/spec-author-view/syntax.html#syntax-start-tag ...so... syntax sugar. Not forbidden.
'src cannot be empty' error because src="".
I need to buy you a drink
So far, this is the best backbone tutorial for beginners and intermediates that I have dived into. It covers all bases. If you're a beginner to programming in general, you really need to follow all of Jeffrey Way's tutorials. He has a knack for thoroughly going over all important details, while simplifying abstract ideas down to the core.
Thank you, strikeforce heavyweight GP winner, for this awesome link
The only thing to bear in mind is that obviously if you include the "right" answer in the page-code (even in a `data-*` tag), it will be trivially easy to discover what it is for both users and bots/web spiders alike. This may be unimportant or a crippling flaw, depending entirely on what you're using this code for.
I figured it would be something simple like that, but being quite unfamiliar with JS syntax, it would have been a good long while before I came up with that. Thank you, and enjoy your upvote
No problem, Good luck with your project!
Design team is handling the graphics and stuff under the name of UI team. The UX team is taking care of implementing the design proposals and other business stories for the client-side. I think it's just a naming issue, really, at the end of the day it is pure front-end development what we're doing, javascript programming, css hacking and html purifying. I love JavaScript and I want to try in the future to extend the way JS is being used inside the company, as NodeJS is getting more and more attention, for example.
Frames use the attribute "src", not "href"; but may be this is a Chrome-extension-thing where "href" is the proper one.
Beautiful work!
&gt;de-expand "collapse" The kind of UI widget you're looking for is called "accordion". &gt;className=="commentshown" Don't ever do that. Classes don't work that way. A node can have many classes. &gt;Can someone explain to me how I can make this page do this simple task of hiding all others, when one is opened? From this element which triggered the event, go up to the container which wraps them all. Collapse them all. Then, expand the one which was clicked on.
This is a little simplistic, but it should get the job done. The change I made is, when a post is shown, it gets remembered in `shownpost`; and when a new post is clicked, it hides that remembered post. This works because it keeps only one box open at a time. If there's anything else opening/hiding posts, then this won't cover all your needs and we need something a little beefier. &lt;script type="text/javascript"&gt; var shownpost; function togglecomments (postid) { var whichpost = document.getElementById(postid); if (whichpost != shownpost) { shownpost.className = 'commenthidden'; shownpost = undefined; } if (whichpost.className=="commentshown") { whichpost.className="commenthidden"; } else { whichpost.className="commentshown"; shownpost = whichpost; } } &lt;/script&gt;
exactly like it sounds like you would, just before setting one to visible go through and set all the others to invisible. maybe use a function to do that and keep your code clean.
Having to memorize exceptions should upset your inner programmer. Whether or not it's easy is a moot point.
Check my edit please. I'm still new to all of this as a whole, so I need a bit more info than just this. Check my reply to andytuba
check my edit and my reply to andytuba
You sir are amazing and wonderful! I'm excited to learn all of these different languages. I know I'm in the petty learning stage of Java and VB, but being able to help people as you simply did me is exciting to me. Thanks so much!
Glad to help. Why are you learning VB? Also, don't forget -- JavaScript != Java.
Ha, the Visual Basic class is required in the curriculum, and I understand Java is not JavaScript (learned that very quickly!)
Yep! I figured as much about VB, it's the worst class I've ever had to take, as in it's boring. VB seems like programming for my grandma. I think Java is really great though, and I think it's great introduction to the programming world. I'm always open to ideas and suggestions. My major is computer science with a computer systems emphasis, and a graphic design minor. I'm really thinking I'd love to design webpages.
Yeah, Java's not a bad language for both learning and production code. There's a lot of companies still using it for embedded devices, servers, etc.; and now there's Android app development, too. It might behoove you to write a little Android app once you're finished your Java class, so you can appreciate the peculiarities of coding and designing for the mobile/hand-held space. Then try building a small responsive webpage; using Bootstrap isn't necessarily cheating. Since it seems that collegiate webdev classes seem a little lacking, it'd be good for you to get some independent study on: * For tutorial websites, there's codeacademy and tutsplus amongst others. * For books, just search in /r/javascript+webdev for "good books"; people typically ask that question about once a week and everyone says "[Eloquent JavaScript](https://github.com/marijnh/Eloquent-JavaScript)", "[JavaScript: the Good Parts](http://www.amazon.com/exec/obidos/ASIN/0596517742/wrrrldwideweb)", and a few others which I can't be arsed to look up right now. * For quick reference, search [mdn](https://developer.mozilla.org/en-US/). w3schools is a little sketchy on the details/accuracy sometimes. * For "how the hell do I solve this programming problem", search stackoverflow. * For sharing code snippets, make a jsfiddle. * When in doubt? Google first, motherfucka. 
Had the entire page duplicated at the bottom, sort of as if it was supposed to be a continuous page, but with pager links too.
"You can read and understand the source in an afternoon." if you're a js guru like the OP, this is true. i know many people, including myself, who took much, much longer than an afternoon to understand backbone. granted, backbone is definitely one of the easier front MVC frameworks to understand. I found Ember to have perhaps the steepest learning curve and Angular somewhere inbetween.
Base64 is just taking six bits at a time and applying them to a character table. It's not a compressor; it's an encoder. Base64 streams must be identical.
good job Floyd!
Have to ignore my ignorance, where is it you add this? I tried but it kills the script.
Or maybe [css3 transition](http://www.w3schools.com/css3/css3_transitions.asp) ?
I don't understand on how to add external references to the realm's global. I'm trying to add window to the realm so that the ecmascript 6 has access to it.
Thank you so much, I think I understand it now.
Wow.. Really excellent work. I've been looking for something like this for ages. The closest thing i could find was Narcissus, and that doesn't quite fit the bill. What a great contribution! Thank you for doing this.
In the comparator. `return base.toLowerCase().indexOf(s1.toLowerCase()) === 0`
Can't wait for Object.observe to be adopted by frameworks like AngularJS. Should improve performance quite a bit. Also, native HTML/JS templating would be nice.
in what sense? doesn't seem that bad
Wow, seems like JavaScript is becoming more like compiled languages. Didn't ever expect to see an import command. Forgive my noobishness, but what practical use would that have?
Setting up modules and importing functions/objects from them sidesteps the mess of dumping everything in global namespace or dealing with yucky Java-style namespacing to call functions from other modules.
&gt;But if you’re a Javascript Ninja or Backbone Rockstar, you’ll probably do it all in one statement Further reinforcing my opinion that ninjas and rockstars make horrible programmers.
What a nice surprise reading #Object.observe#Use it today thanks for mentioning Watch.JS do you think it would be better if it was a polyfill or shim for Object.observe?
It depends on your standards. Personally, I think anything with that banding effect looks amateur. If I'm alone in that opinion, then you're right, it's impractical. But I suspect something like a web design firm would want to make every effort to make their website appear as perfect as possible.
Seeing as it's a VM and not a transpiler, I'm betting performance would drop so far as to become unusable, especially in something with a slow engine in the first place, like IE8.
Yeah Narcissus is a meta-circular interpreter which means it uses as much of the existing JS environment as possible and puts a thin wrapper around it. This is desirable for some purposes, but not for the goal of portability between different engines. Also since it's higher level many things useful for debugging still live under the hood of the host engine. The benefit of something Continuum is that the entire runtime is implemented in js and is therefore observable. Only a handful of things are left up to the host engine to do and they're super basic things like like math/logic operators. Currently garbage collection is also left up to the host engine but I would like to change that at some point.
I have to complain in here, too, about the lack of any mention of the "fat arrow" syntax, one of the more significant additions (in my opinion) and the one I most want to use in my code today. You get a smaller function declaration syntax so using anonymous functions inside of ``.map``, ``.reduce``, etc is less of a pain (and one-liners are then possible). On top of the syntactic niceties, these functions have no ``prototype`` and ``this`` is automatically hard-wired to whatever ``this`` is when they're constructed, so the JS engines can better optimize their execution (no prototype and this lookup) and you can pass around references to these functions and they will still alter the expected parent object, which will make their use in functional-style libraries nicer because you don't need to do ``someFunc(someObject.someMethod.bind(someObject))``. In fact, you don't even need to keep a reference to the parent object, so it can be reduced to simply ``someFunc(someMethod)``. The syntax: No args, single statement: () =&gt; statement; No args, multi-statement: () =&gt; { statement1; statement2; statementN; } Single arg, single statement: arg =&gt; statement; Single arg, multi-statement: arg =&gt; { statement1; statement2; statementN; } Multi-arg, single statement: (arg1, arg2, argN) =&gt; statement; Multi-arg, multi-statement: (arg1, arg2, argN) =&gt; { statement1; statement2; statementN; }
Now that could really be useful. Good luck with it though - I imagine this is the sort of thing that's a lot harder to do very well than it is to just make it work.
I don't think you're factoring in user-expectations, though - Jakob's first law of web usability is "users spend most of their time on *other people's* websites". Ie, although graphic designers or web designers might balk at subtly banded gradients, if *most* subtle gradients end up looking banded when you look closely enough, users won't be bothered by it because it'll be "normal". It's the same way that nobody cared about binary transparency in GIFs until after alpha-blended PNGs became widespread. And like alpha-blended PNGs, I suspect that if it *does* begin to bother users, browser-makers will trivially implement error-diffusion into their gradient algorithms in the browsers, rather than it becoming standard practice to replace every single back-ground CSS style with heavyweight, memory-hogging, javascript-dependant, manually calculated canvas gradient-fills like this.
Dear world. Stop trying to fix javascript. Fix the tools that we use to write javascript. or replace the entire mess. either is good for me. Note: (Existing language here) is not a fix. that includes dart.
The tool I use to write JS is my brain. I don't think it can be fixed. 
Its bad in the sense that if you have to use JavaScript to render a gradient, you are putting way too much effort into it, and you are unnecessarily taxing the layout engine to do such a trivial task. Banding is typically not all that noticeable with CSS gradients, and when it is, it's really not worth throwing extraneous code at to resolve. It is an interesting solution, but not really all that necessary.
if you want to do dynamic rendering of gradients (due to resizing, or custom size solutions that can't be solved with images) then it makes sense. there is always room for more quality on the front end.
Yeah...practicality is usually not my main motivation! Maybe it should be... 
While I share your opinion on JS (stop trying to fix it!) I don't think adding new native features to a language is trying to fix it.
Curious as to why you got down voted... That seems pretty slick... [For the curious Here is some more info]( http://css.dzone.com/articles/javascript-fat-city)
Dart can DIAF. Proprietary google nonsense developed behind closed doors.
But syntactic sugar makes a real world difference. And is nice. And saves you key-strokes. And makes your code's intent clearer. Or at least it CAN do all those things.
that's pretty cool, i doubt it will be useful in websites any time soon considering IE is still on the market.
There is a Math object thanks to trying to copy java -.-, Math contains a sqrt function witch returns a number, numbers don't have a length property
I actually think they've done a great job of upgrading the language, considering its unfortunate retention of old parsers. Changes are not destructive but additive, and almost always in a way that can be written to run without error even when they're not supported. I used to take it for granted, but it really shows some clever design that I can write code that uses new features when it can, and falls back to a polyfill when it can't, all without the rest of my program ever knowing.
&gt; Requests can be made at /r/CHART_BOT How about "fuck off; you're kludging up comments threads and adding no value to the discussion whatsoever"? Edit: God*dammit*.
 delete Math; What was that about a `Math` object?
Statistics generated from Shaper_pmp's last 972 comments and 28 submissions (Reddit limit): * Your active hours (in UTC): Chart [#1](http://i.imgur.com/hT6sE.png), [#2](http://i.imgur.com/fLE7s.png). * Your subreddits ([chart](http://i.imgur.com/onyD2.png)): |Subreddit|Submissions (karma)|Comments (karma)| |:-|:-|:-| /r/AskReddit|0|153 (3189)| /r/programming|2 (10)|80 (777)| /r/webdev|2 (49)|74 (340)| /r/philosophy|0|57 (207)| /r/web_design|1 (2)|51 (161)| /r/Android|3 (49)|46 (2677)| /r/TheoryOfReddit|1 (16)|38 (151)| /r/TwoXChromosomes|2 (15)|36 (619)| /r/unitedkingdom|0|38 (259)| /r/self|1 (185)|28 (383)| Requests can be made at /r/CHART_BOT
I think Oshu is right. A class is not a concept or term known in JavaScript. People always try to simulate it, but objects is the correct term here.
To be honest, I'm a fan of one liners. I like compact code and I like saving the bytes. I'm not sure it will hurt readability as it becomes more common place... much like: Var b = (true)? 1:2; may seem complicated but really isn't bad once one is acclimated. My real concern is backwards compatibility.
I dont think that classical inheritance sucks. It has a reason that Java and similar languages became so popular when software engineers tried to find a solution for the software crisis. People try to replicate this pattern, because they are familiar with it and it allows a basic way of information hiding.
Javascript is one of the most popular languages being used today. Sure, there are problems with it, however inheritance is not one of them. Providing syntax sugars IMO is a waste of time, but to each their own. I suppose this is why pre compilers have become so popular. 
I think some of these dicta are matters of taste. Take setters. If you use them, there seems to be good reasons to prefer the fluent style (returning `this`) and good reasons to return the thing you set. Being consistent is a great idea, and if you do go for the fluent style, you should probably embrace it whole-hog and make many other side-effectful methods return `this` as well. I think there's plenty of room to discuss whether you should always wrap properties in getters and setters. Since we don't have to worry about separate compilation units, refactoring a property to a method can always be done later, especially if you embrace test suites. So, one pattern to consider is use direct property access, but write setters that return `this`, along with returning `this` rom side-effectful methods. This, when you want to write something fluent, you use `obj.setFoo(bork)`, and when you want to work with the value being set, you write `obj.foo = bork`. Am I missing something?
Alright, fair point. They can get out of hand pretty quickly.
Edit: Probably only because I tried it in the browser. module SomeModule class Foo attr_accessor :name end end class Some &lt; SomeModule::Foo end adam = Some.new adam.name = 'Adam Beynon' puts adam.name Breaks it. :(
&gt;Proprietary Get a dictionary. Dart is completely open.
I agree when it comes to Node.js, but wouldn't writing basically the same functions twice increase the work load dramatically and slow down the application having to distinguish the two?
* The `Number` prototype might have been extended to have a `length` property. * The `sqrt` function might have been overwritten with a function which returns something else (e.g a `String`). * The `sqrt` function might have been deleted or this "Math" thing might lack it in general. * The `Math` object might have been deleted or the environment might not provide it in first place. For proper tooling these things must be known. There can't be any ambiguities.
That would be amortized on initialization. Figure out if the new, faster anon functions can be used and load those instead of the old style, similar to jQuery's 1.9/2.0 divide.
Personally, I freely mix the module pattern, object prototypes, and classical inheritance. It all depends on what is the best abstraction to describe the data and functions that need to be implemented. You're right that the syntax is a bit kludgy. The good news is that those working on ECMAScript.next have come up with a solution: class Employee extends Person { constructor(name, title) { super.constructor(name); this.title = title; } describe() { return super.describe() + " (" + this.title + ")"; } } Tada! Easy inheritance. Now, should you apply classical inheritance to every problem under the sun? Of course not.
Apparently "my personal favorite" is now the same as "the best"?
Alright, well, start reading [HackerNews](http://news.ycombinator.com). Keep up to date with the latest browsers like [Chrome Canary](https://tools.google.com/dlpage/chromesxs), [Firefox Aurora](http://www.mozilla.org/en-US/firefox/aurora/), [Opera Next](http://www.opera.com/browser/next/), [WebKit Nightly](http://nightly.webkit.org) and [Internet Explorer 10](http://ie.microsoft.com/testdrive/). Check out [TodoMVC](http://addyosmani.github.com/todomvc/) for a round-up of a bunch of JS frameworks. I highly recommend [Require.js](http://requirejs.org). Make sure you're familiar with Safari on iOS6 and a few of the Android 4.2 web browsers. Basically, live and breathe everything related to web browsers. 
Your code got me interested, and I've been playing around with gradients for a few days. Thought you'd like to know what I found. The main idea I explored was using probability to create shades between available colors. Where `shade` is the color the current pixel should be, applying this formula: shade = shade + (Math.random() &gt; shade % 1 ? 0 : 1) | 0; Yields a result that I cannot visually distinguish from the Floyd-Steinburg algorithm. My second approach was to choose every pixel as a random point in a normal distribution about its true value, like this: shade = Math.round(clamp((1 + randNormal() / 5 * .2) * shade, 0, 255)); Where `clamp` is what it sounds like and `randNormal` produces a normal distribution. So, essentially, introducing some noise. While the result is a little grainy, the color change is so smooth that it made me notice very slight bands in both the Floyd-Steinberg algorithm and my earlier one. Of course, all of this may be considered "poor form" because it's not deterministic. But I think the number of pixels is consistently large enough to make that irrelevant (and I bet it would look even better on a high-DPI display). [Here's the code and a few renders](https://gist.github.com/4137601). The banding in the floyd-steinberg and probabilistic rounding becomes more visible with a different color scheme; the normal distribution can also start to look banded sometimes, which can be solved by increasing the width of the normal distribution.
I also continue to find surpises every time I use the dev tools, small features here and there that are just added as part of the new browser versions. I still end up using Firebug/IE dev tools unfortunately, but Chrome remains vastly superior it would seem.
I think that having a global selector in render() is considered to be bad practice. I strive to have my views only deal with this.el, and force the calling code to worry about inserting the view's el into the DOM. The upside is that the view is more reusable, able to be inserted multiple times in multiple places. I'm also curious about whether others insert into the DOM before calling render. I used to always render before inserting, but now I do the opposite. The reason is that many libraries - jqgrid and twitter bootstrap included - mandate that the node they are applied to is in the DOM. I disliked the inconsistency of sometimes doing render-&gt;insert and other times doing insert-&gt;render, so I standardized on insert-&gt;render. But it's more verbose, and the render call needs to be crafted in such a way that it doesn't cause unnecessary DOM manipulation...
I used angular briefly a few months ago. I remembered thinking that once it's easier to do ui transitions or other jquery-like events, angular would take the cake. Seems to be heading in that direction. 
The issue is that you're sending form-multipart data; if you specify Content-type, it thinks the *whole payload* is a single file's data, and that is one file of the type you've specified. That's why it works perfectly if you leave this header off - it's the wrong header.
I was not out to win my friend. Only to provide information.
It looks like it's just a way to store a lot of numbers. They're storing into the variable s, a very long string of characters. But it's not the characters they're retrieving from the string, but numbers using the javascript charCodeAt() function.
The input string is 3,510 bytes and the output is 5,816 bytes. It's compression.
Thank you for this good argumentation about how to define getters and setters later on. That seems very useful to me, I'll think about that.
FWIW, this is the decompressed string right before eval: http://pastebin.com/aTxf2Gvt And this is the pretty printed script: http://pastebin.com/51V0tRms
Maybe an exception would usually be a better way to handle a failed set, but that doesn't mean we should ditch return values altogether. What if you want to return a relevant id, like `setTimeout`? Or maybe the previous value, if your application happens to be shuffling between values a lot? Or just the value it was set to, which is what the language itself settled on and which allows lines like `this.selectionStart = this.selectionEnd = 0;`. Or something more application-specific that you happen to know is usually requested next. There are far more uses for return values than I'll ever be able to list - and that's why it makes me nervous to ditch them.
There's a whole lot of processing that goes on after that. Look at the last line - it calls `eval`. What it's doing is decoding `s` into a script, then executing that script.
&gt; on the flip side, exceeding expectations is good too Certainly, but don't be mislead into thinking things like this are a cost free choice. Ideas like post-processing every page with JavaScript or replacing every background-gradient with a canvas element look nice, but quickly make the rendering-time and memory-footprint of your page explode... and while it's easy for less experienced designers to appreciate a smoother gradient, it's typically a lot trickier for designers to learn to appreciate subtle user-experience benefits like low memory usage or getting a more responsive feel by saving a few tens of milliseconds on the page-rendering time...
That's not true, every character in `s` is an ASCII character. Besides, you can't save more than 12.5% transposing ASCII into continuous bytes. The method you linked can certainly save more though, and is actually much closer to the one used here.
edit: Got it! 1. The big string at the front is a base85 encoding of a big string of bits. The 85 characters used for each digit are `String.fromCharCode(n + 35)`, with the exception of 92. 92 maps to `\`, which would break the string, so it's replaced by `~`. The script reads from the resulting bits one at a time, reading left-to-right in 5-byte blocks but reading right-to-left within each block. 2. The first part of the data is interpreted as a binary tree as follows: a 1 indicates a parent node (which must have two children), and a 0 indicates a leaf. 0s must be followed by 8 bits indicating the value of the leaf. 3. The second part is interpreted as a second binary tree using the same rules as above. 4. Most of the rest of the data is instructions for navigating binary trees, which are used as follows: 0 = left, 1 = right, and when the parser reaches a leaf, it stops reading bits and returns the leaf's value. 5. The third part is read as instructions for navigating the second binary tree. The leaf values are interpreted in two ways: if the first bit is a 0, the next 7 bits are the character code of the ASCII character which is appended to the decoded string. If it's a 1, the next 7 bits are the length of a substring which is copied from earlier in the decoded string and then appended to the end. The start of that substring is determined using a byte looked up in the first binary tree and a byte read straight from the current cursor position. 6. The decoded string forms the main script, which is then `eval`'d. So, basically, it's a huffman encoding of the script, combined with a process to let bytes indicate both characters and earlier substrings of the program, which itself is optimized with a second huffman encoding. (At least I assume they're huffman encodings - it would be pretty pointless to go to all this trouble then settle on a suboptimal binary tree.) [Here's the parsing code cleaned up and re-written a bit](https://gist.github.com/4139440).
You might also like http://js1k.com/2010-xmas/demo/856 He explains [how here](http://www.romancortes.com/blog/how-i-did-the-1kb-christmas-tree/).
 function isAdvancedJavascriptCourseConfusing() { areInstructionsGood(); return true; } function areInstructionsGood() { return false; }
Is this compressed or is it obfuscated? http://stackoverflow.com/questions/194397/how-can-i-obfuscate-javascript
I'm pretty sure that's the standard of speaking english and expecting other people to also speak english.
I got about as far as you, though i didn't rename anything, just added comments. Might as well post it too: http://pastebin.com/HZqgfDEe this was fun! is there a subreddit dedicated to deobfuscating things?
So, someone reimplemented an incompatible version of DEFLATE? http://www.ietf.org/rfc/rfc1951.txt
If it's being advertised in English without mentioning that it isn't in English, it's kind of a waste of time for many people on here.
Wait what? I'm still confused. You want what?
I'd use a CSS animation. Won't work in all browsers, but more lightweight and doesn't require JS. [Something like this!](http://jsfiddle.net/dXuab/) It would require absolute positioning and fixed width/height on the bubble, though... 
Yeah, I was kind of hesitant to ask because of that. But I could swear I read somewhere that English code is preferred to the alternative even in non-english-speaking countries, just because the language is so widespread in the tech world, and also because control words etc are in English anyway.
A little from column A, a little from column B it would seem..
Okay so the here is my page. What I want to do is put in a link that will do more or less what homoiconic said. The purpose is to link it to a more demented form of my website for my final in my intro web design class.
How would I go about doing this?
Actually it's really easy, just copy the code and you'll see there is an "eval" at the end. Execute the string up to eval and you get this.
and would think links then be typed out as &lt;a href="http://google.com" id="link"&gt;text&lt;/a&gt;?
You don't need to include a 32kB library for such a trivial task. 
You can use the google api version and there's a pretty darn good chance it's already in the user's cache.
I am already great at Javascript, I might use this to learn spanish though
I might be way off here (pretty new at OO) but why is using 'new' better than using Object.create()?
It looks pretty cool but how can I use it on a [project I'm working on](http://github.com/ether/etherpad-lite)
Hey guys, I've just put a bit of time in polishing and documenting my .grunt files. Figured I would open source them for greater good. Cheers! M
+ 1. For example in the beginning of the events one he starts over from scratch and abstracts it down to basics and rebuilds it up. I re typed that 4 times before everything stuck. Brilliant!
yeoman, bowser?
Thanks! I love seeing how other people are using Grunt. Grunt is legit.
It is. Many important programmers feel this way as well. Also: http://www.catb.org/~esr/faqs/hacker-howto.html#skills4
Would that actually save anything? Sounds like the decompression works on substrings, so "if (" and "?" would be equal as far as the compressor is concerned. 
Word. One nitpick (cause that's how I roll): You say "it's a wrapper around wget" but this clearly uses mikeal/request. This is of course way better than wrapping wget, but you might as well make that more clear eh? :)
Yeoman and bower are bigger tools that look to do slightly more than what nodefetch does. In the case of Yeoman, it will scaffold your project, run your tests, minify your code and help you with a build process, and so on. For certain projects, I do use Yeoman, and it's awesome. Same story with bowser. Now and then though, I just need an easy way to quickly download the jQuery source for a small thing I'm working on. That's why I made nodefetch, for places where tools like Jam, Yeoman, bower and so on are just overkill. 
Okay, but why? Can't these topics be included in /r/JavaScript?
Saving with a specific filename isn't supported in every browser, but you may have the best luck with this [library](https://github.com/eligrey/FileSaver.js).
Thanks, I'll take a look at it :) The filename part was optional anyway, but it'd be nice to be able to do it.
No problem.
nice. just spent way too much time trying to get on and then orbiting around the "moon".
You are right. Too bad I used everything else (live, click, ...) but submit() :-) Thanks!
I was referring to the decoding code, not the script that is then eval'd. But yes, it would still save a few bytes. Single characters are stored as a single byte and accessed as a few bits, probably around 5. Substrings are stored as two bytes, and accessed as two sequences of a few bits plus another byte. So they really aren't worthwhile until your substring is something like 5 characters long.
I needed, but haven't found any solution for JavaScript OOP encapsulation, so I created and shared this library; I'd be glad to receive any suggestion or critique (the author)
Can you not do something like Math.prototype.toRadians = function(){...}; , which is better?
How did Resig's [Class](http://ejohn.org/blog/simple-javascript-inheritance/) or Luecke's [Uberclass](https://github.com/daffl/uberclass) fail to meet your needs? (Of course, I don't even understand the concept of totally private methods in software -- denoting things as "do not touch if you don't know what you're doing" is fine, but if the developer really wants to dig into the guts of your object, why try and stop him? Your attempt to prevent it just means an ugly hack that's more likely to mess up will be used, instead.)
I like your webgl tree :) Edit: Canvas tree!
Aaah, yes the Math object is static. I didn't know that you could extend an static object like that in JS. Also, wonderful demos, man.
By the way, jQuery UI's Widget Factory implements something conceptually similar (encapsulating privates). (But if you use that, you have to go the jQuery UI way, of course; oolib.js is more general purpuse.)
I never understood what's wrong with using closures as a means of encapsulating/protecting/hiding members.
Regarding your question about the usefulness of private methods/fields: It's a more general topic of computer programming. Until several years ago JavaScript has been used to write only little code snippets; for these, we really did not need encapsulation. But today big and complex programs are written in JavaScript (even on the server-side). For these we need methods to handle complexity. Encapsulation is such a method. Thats why programming languages that were originally designed to handle high complexity, like Java, C#, etc. all have such mechanisms. Another thing: compex JavaScript programs are often written by a group of programmers. In these cases it is quite useful to separate the public interface of a class from the implementation details. Also, when someone writes a library, it may be useful to hide the implementation details of the library's classes.
 function log() { console.log.apply(console, arguments); }
Regarding this being an 'ugly hack': Well, in JavaScript, a constructor function may return any object (not necesserily *this*). This feature is quite commonly used in JavaScript, and is usually not considered a 'hack'. oolib.js is based exactly on this standard JavaScript feature.
Submitted to r/frisson :)
I didn't call your library an ugly hack, I called what people have to do to get at private methods an ugly hack. I simply don't understand the point of *enforced* private methods and values. Denoting elements as not part of the public API, sure, but if someone wants to take one of your private methods and ``bind`` it in their own object, why stop them?
It's totally bunk that you need inheritance-style object-oriented programming to write large-scale applications with a team. How would the Linux kernel, written in C (*not* C++), be as successful as it is? How are there over [18,000 Node.is libraries on NPM](http://npmjs.org) handling all manner of server-side application needs and not be dependent on your library? Or any Class OO library? Not one is in the top-ten most depended-upon. There are deficiencies in JavaScript, sure. Automatic type coercion is a sickness that was quite contagious when JavaScript was born, for one. But after all of these years, composition has beaten inheritance, and JavaScript is justified in its prototypal inheritance that is minimalist and discourages towering inheritance trees.
I'm pretty confident this is impossible to do with normal JavaScript. [This answer](http://stackoverflow.com/a/9679094) supports my suspicions. 
And like I was saying, enforcement of private variables and methods is a disease of the mind. The point of applications is that they do something useful, and if your inability to use a private method stops you from accomplishing your goal, you have to throw the library away. Simply putting up a *"HERE BE DRAGONS"* warning about methods and variables *intended* to be private should be enough. Inexperienced devs will leave it alone and experienced ones will blame their own code before your's if something goes wrong.
java and .NET (and other languages) all have the concept of private/protected fields/methods. Are these languages mis-designed? Or are developers using these languages, and not declaring all methods/fields public suffering from "disease of the mind"?
I didn't say it's impossible to write complex software without encapsulation support, of course. I say it's easier to manage the software development process, if such features are available, in general. That's why most modern languages support these features.
Here is a reason: I write a class/library, and someone writes some code that depends on a private member of my class. I update my library (eg. a bugfix). In this case the code that depends on my class's private members may fail. This costs time / money / customer satisfaction. So it may be a valid decision to *enforce* privateness. I don't say that *you* have to use this feature; if you want, you can declare everything public even in java/C#. oolib.js only provides the possibility to have such a feature in JS - for people, who think that it's useful.
very nice stuff
The module pattern does encapsulation at the module level. OO private/protected construct does encapsulation at the class/object level.
Well, I accept that this is *your* opinion. But you have to accept, that there are many-many programmers who don't think so. When using programming languages that support the private/protected constructs, most of the programmers use these; and there are tons of successful software built with these constructs.
Sounds like we're on the same page. I agree 100% that the benefit of dithering isn't worth making the page feel less responsive.
~~Hey, I'm a developer and never made a stupid mistake like that.~~ Carry on.
I love to use the Canvas for visual coding, thats why I have created two projects: Simplecanvas: You can create and share graphics, the cool thing is that adds some nice functionality (render to bigger resolution or to animated GIF) and simple versions of most of the rendering functions. http://tamats.com/apps/simplecanvas/ Mathnimatics: one line math formula to create visuals, because it is made in JS (and not GLSL as ShaderToy) it is easier (but the performance is worse) http://tamats.com/apps/mathnimatics/
But only *unenforced* private variables and methods let the programmer choose which way they want to use your code.
And there is tons of successful scientific and financing software built on top of *Fortran*. You can't simply use success as your criteria for "a good idea", or everybody should go skydiving from the stratosphere like Felix Baumgartner.
At least with CommonJS it's not as enforced as you think. Simply ``eval`` the module in your current scope instead of through the ``require`` scope and you have access to its innards. Again, there's a big "HERE BE DRAGONS" warning in your code (*why* are they running ``eval(require.resolve('someModule'))`` instead of simply ``var someModule = require('someModule')``?) but if you absolutely have to, you can. Fortunately in the Node.js world, almost every library is MIT licensed, so generally you can just do the right thing and fork the library instead. Most of my arguments come from experience with closed-source C and C++ libraries, where you can't change the code (but fortunately C and C++ are low-level enough that you can directly access offsets in the object data structures, but again "HERE BE DRAGONS", it's not something you want to do). It's really only Java and C# that can actually enforce private variables and methods, and there's a reason why I stay far away from those languages in my work.
As I said, most of the time I don't need to, and most of the time, closures are used for holding onto temporary variables needed by continuation functions (after AJAX calls and so on), but if I, as an engineer, determine that I need access to internal state held by a closure, then yes, I will crack the closure (replace the method that creates the closure with another method that encloses the closure, and use the enclosed private variables as needed, but this also produces a code smell and I *will try to avoid it* when possible, but I like that I can do it if I really need to). You think I'm being dogmatic when I'm really simply being practical. I completely agree with you that hiding internal state and implementation from regular users is fine, but for developers who know what they're doing, I don't want to bind their hands if they have a need to do something crazy to fix an unexpected error in production, or whatever reason they have for this quick hack, which I expect they will also take out once they find a better way to do things. My only dogma is that all dogma's can fail at certain times, so I prefer to use constructs that *can* be overridden to do things they shouldn't do normally if that really is the only solution available. For instance, I hate dependency injection, and trigger-based programming, but I'm glad that Javascript lets any variable, even built-in variables, be overwritten, and lets variables be replaced implicitly by getter and setter functions, *just in case* I need it.
I got drunk. Anyways, a cool little project, might be useful for some situations.
Stackoverflow needs this feature so bad. Always have to indent my copy paste code inside my editor. Unless they have that feature and I don't know about it. My weekend project was making a prototype for a new side project I am starting.
The main drawback is that is breaks accessibility, since you can no longer tab out of the textarea. I would probably tie another modifier key to tab, but then again, ctrl and alt are already taken...
That was actually part of the reason I tackled this. Every time I post on StackOverflow, I end up copying four space characters, and using that as indents. It's not *that* bad of a workaround, since the Markdown spec specifies that four spaces constitutes a tab (and triggers the code block)...
I thought somebody officially explained why they chose not use it but I can't seem to find it. My guess would be that it would be for the accessibility issues that you mentioned in another comment.
Looks awesome and works great, only problem is, how do I tab out of the control? (Accessibility no-no) unless there is a key stroke to get out?
Thanks! The accessibility break is a big drawback, and probably the main reason why it's not already standard. I was thinking a modifier key in conjunction with the tab button, but all of the modifiers are already taken (except the meta key, but I think even Windows and the latest Linux versions use that)...
It would be neat if it kept track of the indentation level on return and inserted the same number of tabs for you on the next line.
This is really cool. I wish every code-inputable textarea had this enabled by default. Why not use an obscure modifier anyway to appease the accessibility crowd? Or add in a "modifier" param?
I also like Angular's way of doing things, but Backbone is hard to beat for certain use cases. I built a small app that needed instant startup time and good rendering performance in Angular, and it is simply too slow for my needs in this particular case. I'm excited to see it get performance improvements with coming JavaScript improvements like Object.watch but for now, Backbone is my goto.
If things were fixable in vanilla js, someone would have done it by noe
Played with my 14 month son. No regrets.
The main reason for choosing to capture the "tab" event is so that even users unfamiliar with the enhanced textbox will know what to expect, and how it would behave. Having the option to change the captured key would be an interesting feature. I'll add it to the project.
jsfiddle needs to have this functionality asap!
I stared at my laptop monitor for hours and hours. Want to switch?
The good thing is that if right at the bottom of the area you put something like "Press x + y keys together to exit the text editor" it would probably work... basically what I'm saying is that you can make it anything you want, even if it's not totally intuitive.
It's TypeScript! TypeScript! Client wants me to use TypeScript! Everybody's looking forward to ES6 or something
Hey guys, I finally got around to releasing part 2 of my post on demystifying the JavaScript landscape for developers. I am really hoping to create a resource that server developers can hear words like "Mustache" or "Require.js" and know what they solve at a high level instead of being completely in the dark. :-)
We've beat this horse a million times already. Some of us love it, some of us hate it.
Python doesn't behave the way you think it does. Rebinding names in enclosing scopes is not allowed
Easy solution, use plnkr: http://plnkr.co/edit/
I thought it was called CoffeeScript. :p
Double-checked. You're right. &gt;&gt;&gt; def testFunc(): ... foo = ['bar'] ... def testFunc2(): ... foo[0] = 'baz' ... testFunc2() ... print foo ... &gt;&gt;&gt; testFunc() ['baz'] &gt;&gt;&gt; def testFunc2(): ... foo = 'bar' ... def testFunc3(): ... foo = 'baz' ... testFunc3() ... print foo ... &gt;&gt;&gt; testFunc2() bar Python's variable model is more like Perl's than Javascripts, apparently, where base values are "pass-by-value" while arrays and dictionaries are pass-by-reference, whereas Javascript "auto-boxes" everything. So, it's the combination of Python's syntax and Javascript's variable model that causes Coffeescripts insanity. Got it.
Touched myself and played LoL
Hahaha thats hilarious and kind of amazing. The whole time I was doing that I was thinking, "This is a terrible example." hahah So awesome.
cleaner isn't always better. If you've got multiple files and they're long then having Car.prototype.method allows an better visual clue as to which class you're interacting with in a window, also you'll overwrite whatever the prototype already has (if you put on a function that would be fine, but what if you replace that later with something that returns the constructor function with some prototype methods on it). Using extends might be a better method if you really want to use that syntax.
You want [document.querySelectorAll()](https://developer.mozilla.org/en-US/docs/DOM/Document.querySelectorAll). function touchScroll(selector) { if (isTouchDevice()) { var list = document.querySelectorAll(selector); for (var i = 0; i &lt; list.length; i++) { list[i].addEventListener('touchstart', function (event) { ...}, false); //more event listeners go here... } } }
Nice. Your fork is what brought me back to this thread. Welcome to Github! Feel free to submit a pull request if you'd like to merge your branch into the main 'master'.
A Mac texteditor, Text Wrangler, uses Command+] indent and Command+[ for outdent. If you use that (with Control?) you could preserve Tab functionality. Just a thought.
I like the idea, but there seems to be a split-second delay before it adds indentation, which makes it unusable IMO.
Well, i was talking about a compiler.. so yes, faster to compile.
`document.body.addEventListener('touchstart', function(e) {...}, false);` Inside that handler you have to check where that event came from. `e.target` is the node which received that event which bubbled up all the way to the body node. jQuery's event delegation basically works the same way. You can, for example, check if that event-target node has a specific class or data attribute. If so, do your thing. If not, do nothing.
http://www.reddit.com/r/microgrowery/comments/13po6u/couple_of_questions/ Turns out my initial idea was shit haha. Working on improving it now though. What did you prototype?
crtl + z would be application specific. in addition some browsers I think already implement that. hint hint: use chrome...best browser out now a days
Okay, done. Thanks for pointing this problem out.
Awesome! One other little thing I noticed: it works as expected when you hit return at the ends of lines or on blank lines, but when you hit return at the beginning or in the middle of a line with text, indentation isn't maintained.
Yeah, I confused it with some other in browser javascript editor site.
Thx, I didn't knew about plunkr. Love the way it closes tags automagicaly as I type the tag opening in html.
Cool project. I was glued to the computer all weekend too.. haha. built a new website i've been meaning to work on, [an online ballot for political issues](http://www.ballitt.com).
Selecting from the beginning of a line, then moving down one line, and tabbing, tabs 3 lines, expected: 2. This could be intended, however. 
Sorry if it's really sloppy, I'm going for function over form for now until I know I have time to make it pretty, as that is moreso the point of the assignment. &lt;html&gt; &lt;head&gt; &lt;meta http-equiv="content-type" content = "text/xml; charset=utf-8"/&gt; &lt;title&gt;Home Page&lt;/title&gt; &lt;script type = "text/javascript"&gt; var total = 0; alert("The total is " + total); if(select.options.selectedIndex == 4) { total += 1; } if(select.options.selectedIndex == 3) { total += 1; } if(select.options.selectedIndex == 2) { total += 1; } if(select.options.selectedIndex == 5) { total += 1; } if(select.options.selectedIndex == 1) { total += 1; } &lt;/script&gt; &lt;link rel = "Stylesheet" type = "text/css" href = "main.css"/&gt; &lt;body&gt; &lt;h1&gt; &lt;div class = "header"&gt; 2. Describe the User &lt;div id="total"&gt;&lt;/div&gt; &lt;/h1&gt; &lt;/div&gt; &lt;div class = "menu"&gt; &lt;h1&gt; &lt;/h1&gt; &lt;/div&gt; &lt;img src = "next.png"&gt; &lt;div class = "menu"&gt; &lt;h1&gt;&lt;a href = "../homepage.html"&gt;1. Home&lt;/h1&gt;&lt;a/&gt; &lt;h1&gt;&lt;a href = "2-3.html"&gt;2. Next&lt;/h1&gt;&lt;a/&gt; &lt;h1&gt;&lt;a href = "2-1.html"&gt;3. Back&lt;/h1&gt;&lt;a/&gt; &lt;/div&gt; &lt;div class = "text"&gt; &lt;h3&gt; Using the drop menu's below, match image of the user on the left with the image of the application on the right that you would associate that person with &lt;li&gt;&lt;img src = "man.jpg" height = 360px; width = 540px; &lt;/li&gt; &lt;li&gt;&lt;img src = "granny.jpg" height = 360px; width = 540px; &lt;/li&gt; &lt;li&gt;&lt;img src = "kid.jpg" height = 360px; width = 540px; &lt;/li&gt; &lt;li&gt;&lt;img src = "scientist.jpg" height = 360px; width = 540px; &lt;/li&gt; &lt;li&gt;&lt;img src = "dog.jpg" height = 360px; width = 540px; &lt;/li&gt; &lt;/ol&gt; &lt;/h3&gt; &lt;/div&gt; &lt;div class = "secondImages"&gt; &lt;h3&gt; &lt;ul&gt; &lt;li&gt;&lt;img src = "kidsite.jpg" height = 360px; width = 540px;/&gt; &lt;form action = " "&gt; &lt;label = "Who does this application belong to?"&lt;/label&gt; &lt;select id = "Kid"&gt; &lt;option value = ""&gt; &lt;/option&gt; &lt;option value = "Scientist"&gt;Scientist&lt;/option&gt; &lt;option value = "Man"&gt;man&lt;/option&gt; &lt;option value = "Dog"&gt;Dog&lt;/option&gt; &lt;option value = "Kid"&gt;Kid&lt;/option&gt; &lt;option value = "Granny"&gt;Granny&lt;/option&gt; &lt;/select&gt; &lt;/form&gt; &lt;/li&gt; &lt;li&gt;&lt;img src = "dogtoy.png" height = 360px; width = 540px;/&gt; &lt;form action = ""&gt; &lt;label = "Who does this application belong to?"&lt;/label&gt; &lt;select id = "Dog"&gt; &lt;option value = ""&gt; &lt;/option&gt; &lt;option value = "Scientist"&gt;Scientist&lt;/option&gt; &lt;option value = "Man"&gt;man&lt;/option&gt; &lt;option value = "Dog"&gt;Dog&lt;/option&gt; &lt;option value = "Kid"&gt;Kid&lt;/option&gt; &lt;option value = "Granny"&gt;Granny&lt;/option&gt; &lt;/select&gt; &lt;/form&gt; &lt;/li&gt; &lt;li&gt;&lt;img src = "business.png" height = 360px; width = 540px; &lt;form action = " "&gt; &lt;label = "Who does this application belong to?"&lt;/label&gt; &lt;select id = "Man"&gt; &lt;option value = ""&gt; &lt;/option&gt; &lt;option value = "Scientist"&gt;Scientist&lt;/option&gt; &lt;option value = "Man"&gt;man&lt;/option&gt; &lt;option value = "Dog"&gt;Dog&lt;/option&gt; &lt;option value = "Kid"&gt;Kid&lt;/option&gt; &lt;option value = "Granny"&gt;Granny&lt;/option&gt; &lt;/select&gt; &lt;/form&gt; &lt;/li&gt; &lt;li&gt;&lt;img src = "cooking.jpg" height = 360px; width = 540px;/&gt; &lt;form action = " "&gt; &lt;option value = ""&gt; &lt;/option&gt; &lt;label = "Who does this application belong to?"&lt;/label&gt; &lt;select id = "Granny"&gt; &lt;option value = ""&gt; &lt;/option&gt; &lt;option value = "Scientist"&gt;Scientist&lt;/option&gt; &lt;option value = "Man"&gt;man&lt;/option&gt; &lt;option value = "Dog"&gt;Dog&lt;/option&gt; &lt;option value = "Kid"&gt;Kid&lt;/option&gt; &lt;option value = "Granny"&gt;Granny&lt;/option&gt; &lt;/select&gt; &lt;/form&gt; &lt;/li&gt; &lt;li&gt;&lt;img src = "chemical.gif" height = 360px; width = 540px;/&gt; &lt;form action = " "&gt; &lt;label = "Who does this application belong to?"&lt;/label&gt; &lt;select id = "Scientist"&gt; &lt;option value = ""&gt; &lt;/option&gt; &lt;option value = "Scientist"&gt;Scientist&lt;/option&gt; &lt;option value = "Man"&gt;man&lt;/option&gt; &lt;option value = "Dog"&gt;Dog&lt;/option&gt; &lt;option value = "Kid"&gt;Kid&lt;/option&gt; &lt;option value = "Granny"&gt;Granny&lt;/option&gt; &lt;/select&gt; &lt;/form&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/h3&gt; &lt;/div&gt; &lt;/body&gt; &lt;head&gt; &lt;/html&gt;
Nice! I don't *quite* know why the undo/redo behaviour gets borked. It seems as though the tabbing doesn't "count" as a keystroke, so it doesn't get saved to the undo history...
Neat! It's like reddit, for political issues. Don't let /r/politics near it.
Hi rlee0001, [one of the proposed enhancements](https://github.com/julianlam/tabIndent.js/issues/2) would be allowing changes to the tab character (so the next logical steps would be set of four, two, or eight spaces). I made the conscious decision not to indent the entire line if there was no selected text, since it's possible that a user may want to insert a tab character in the middle of a line. Lastly, I believe multi-line selection in/outdenting works... it's actually what I spent most of the weekend tackling on and off, haha.
Nice... I noticed it was "off", but didn't know why. I still don't know why, and it seems like the captured keystroke doesn't count as an event in the "undo history". Most likely because I call `stopPropagation();` in my keydown event. Hrm...
Good stuff. I've solved similar performance problems by splitting my problem into multiple canvases - one that animates and one that doesn't.
Could use the `Esc` key to exit tabIndent mode, reverting the `tab` key back to default behaviour. Clicking on or tabbing to the textarea would enable tabIndent again. BTW, awesome work!
A good option is to use a touch plugin such as http://eightmedia.github.com/hammer.js/ which allows you to easily deal with that side of things with ease.
In your example you use the name "SomeThirdPartyLibrary()" which seems to imply that the way CoffeeScript disallows shadowing variables in enclosed scopes will allow third party code to crap all over your variables or something; I just want to make clear that's not true. It's strictly an issue in code which shares an enclosing lexical scope. FTR you can shadow if you want to by using function arguments; the idea is shadowing is bad and therefore should be hard to do. If you like shadowing then obviously it's irksome but part of the idea of CS is being opinionated about what makes code good.
He's probably basing that statement on Rails moreso than Ruby itself. Rails makes the pieces fit together in specific ways and can feel blocky as a result. But if you drink the Kool Aid you'll generally have a good time. And it's not that hard to change the pieces.
It's hard to see how that wouldn't apply to frameworks in general.
&gt;Some of us love it It's a fundamental flaw. I doubt anyone likes that.
&gt;Coffeescript is not a language It is a programming language. &gt;A better characterization of CS is a set of preprocessor macros (think of C preprocessor). That doesn't change anything. &gt;In JS it's very easy to forget to add var before a variable There is JSLint for that. A squiggly line will appear, I fix the issue, and the squiggly line will be gone. Magic. &gt;Parenthesis during function calls - can be skipped (almost) Adds more corner cases. This is bad. &gt;Braces and commas for dictionaries - can be skipped Adds more corner cases. This is bad. &gt;Since CS infers a lot of things from indentation And again, this adds more corner cases. --- Personally, I don't like CS at all. It shares most of JavaScript's issues and it even adds a whole pile of new syntax related pitfalls. It reduces the typing work a bit. That's pretty much all it does. However, I don't think that the number of keystrokes was ever a big deal for JavaScript. At the end of the day I never cared about that half minute I could have saved by omitting a few special characters. (I use abbreviations for guarded for-in, simple functions, IIFEs, and other constructs I frequently use. There is also basic auto-complete and soft parens/braces/quotes.) If you bother with a new language, it should provide better tooling and it should also help with writing bigger applications. Furthermore, it should give you block scope, lexical `this`, and things like that. It should be a significant step up, not just a small tweak.
The problem is the blurriness- basically there is a centre-point with a circular gradient surrounding it, fading to 0 opacity. So "store in an appropriate data structure" would have to include calculating circles, how they intersect each other, anti-aliasing... it's messy.
Good catch for the getImageData trick! although... &gt; all benefitted by splitting the map into multiple canvases and reading them in turn. Doesn't seem to be the case with Safari... optimizing for multiple JS engines sucks :(
Another trick, probably obvious: if your priority is smooth animation you can reduce the resolution to get a better framerate, ie render on small canvases then scale them up with CSS.
That's what I do now, haha. http://bootswatch.com/ has a bunch of nice themes that tweak the look and feel of Bootstrap, so it's not too monotonous.
To elaborate on the divide between Angular and Dart, I don't think Angular needs to be brought to Dart. Angular-like declarative super-HTML is available through Dart's [web component library](http://www.dartlang.org/articles/dart-web-components/), and you can expect Google will build in its other useful bits that aren't already there.
You're right about it never getting saved - it's because you're manually modifying the textarea's value, which doesn't trigger any events. The way to get around it is to never set `.value`, but instead simulate typing with fake events. Here's the function I use for every text modification: function type(el, str) { var e = document.createEvent('TextEvent'); e.initTextEvent('textInput', true, true, null, str); el.dispatchEvent(e); } Then you can call `type(textarea, 'hello');` and it will insert `hello` before the cursor, just as if you'd typed it. I did run into a very odd bug though - if you set the textarea's value to a string of tabs longer than the textarea's width (or paste it in), the cursor disappears off to the right, like it does with spaces. But if you put those tabs there via faked `textInput` events, they wrap like other characters. And of course I don't know which is the correct behavior, because I can't just type in the tabs…
From blog *"Finally, as I've said, in an "anything you can do I can do better" vein I've coded a Backbone implementation of both the Knockout Email tutorial and the Angular Phone tutorial. "* &gt;Another thing to consider is that the AngularJS phonecat demo is &lt;100 LOC. Yours is &gt;1000 LOC. 
Wow, that was everything I needed to solve it, heh. How convenient. I'm assuming `initTextEvent` is better supported cross-browser? I ran into trouble with `initKeyEvent` on Chrome, since that method doesn't exist (uses `initKeyboardEvent` or something). The `/tests` don't work with Chrome for that reason :( *Edit*: Yikes - looks like `initTextEvent` isn't even a method in Firefox... looks like I'll have to rely on `initKeyEvent`.
Nice! How about [elastic tabs](http://nickgravgaard.com/elastictabstops/)?
If you want to switch why not chose a Coffescript done right: [LiveScript](http://livescript.net/)
Checkout [LiveScript](http://livescript.net/). It's Coffescript done right. 
That's why some implementations of Markdown (e.g. GFM) feature "fenced" code blocks. ~~~languageGoesHere someCode() moreCode() ~~~
yours is cool too. I want to add the feature to have a small UI to changes the values easily.
It is, however, a set width.
&gt; it's still too difficult to learn I know more than a few mere mortals who seem to have a good grasp of it. :P &gt; Two things: I'm not swapping views out, I'm swapping templates. I maintain a wall between javascript and css. So you want to swap the HTML itself? Wrap it in a directive, configure the directive with a service that contains a URL to the HTML template, or the HTML template as a string. I'm not convinced this is a useful thing to do in most cases, but you can easily accomplish it nonetheless. Not sure what CSS has to do with this. &gt; And second, there's an independent abstraction in view state, and you miss the point about that. Views have their own logic, their own animation, their own motion that is independent of data. This is what my winks are all about in that example, the thing I want satisfied. Model-Views are some implosion of contradiction. You have exactly the same flexibility in Angular. `$scope` is a "ViewModel" (a la MVVM). You can expose "Models" or "APIs" or whatever on here, and add any arbitrary amount of abstraction between your viewmodel and model here as you wish. Similarly, any viewmodel on `$scope` not consumed in your controller is view-only state. &gt; but I hope angular dies It probably will (in its current state) when all of it's good features are natively implemented in browsers ;P In general, you seem to have the impression that you cannot add layers of abstraction in an AngularJS app. This is certainly not the case. The beauty of AngularJS is that where it makes sense, you can strip off a bunch of the indirection and boilerplate for the common cases with data binding.
Three years ago, the answer was no. I'm not sure what the answer is nowadays.
Not when I scale the font my browser is using.
erm, woops. I'm kind of teaching myself how to do this as I go along, guess that's something I'll need to fix, though. Thanks for pointing that out
I didn't say *anything* about *worse*, neither did I mean to give the impression of *outdated*, I merely meant - they're different tools for different jobs. If you can't read the home page of both projects and grok that on your own, there's really no evidence I can give to sway you - it's relatively self-apparent.
"Knockout sucks because i don't know how to properly implement it". If you're doing it right, there should be eventing; clear separation of DOM and data; and modularity. I'm not suggesting doing it like the tutorials either, those are just to get you started. 
&gt;Knockout is great if you just want to write cleaner, but still effectively "oldschool" (e.g. click-button, thing-happens) That depends. Heavily. One can for example, create a databinding that allows jQuery UI, kendo, or bootstrap to manage all that within the context of a widget. Secondly most of your actual events are going to be through subscriptions, not Dom events, which is good because it clearly separates data-based events from dom events. Again the above statement simply sounds like you've never achieved any advanced knowledge of how to really use knockout outside of the prescribed design patterns in the tutorials. I greatly appreciate the article, I really do. I appreciate your thoughts. But if you are going to 'declare a winner', I think you need to know your contenders more - and that might even be too much to ask of one human being. After all there are a zillion frameworks out there, and this article didn't even mention all of them. How could It?
Thank god. I try avoid XML as much as possible 
I don't buy it. If you look at computing history, whether it be hardware, desktop software, server software, web frameworks, etc... There has almost never been "just one winner" Sure MS Windows and jQuery have taken enough marketshare to seem ubiquitous, but that diminishes over time as compelling competition crops up. I've worked extensively with Backbone, Spine, Knockout, and Angular, and SproutCore (which is the basis of ember). To say any of these are complete enough solutions to be the only winner is to really miss the point. Browser apps are going to be more and more common, but with that they will be more and more diverse. Some will be content driven, some will be CRUD apps, some media-focused, games, or "realtime"/multi-user apps. None of the available frameworks are the best for all of those situations, nor should they be, it would be a crappy lib that tries to meet all those needs at once. My advice if you want to keep up with the future, take the time to build something, even just a small toy if a handful of different libraries (and w/o libraries as well) See what types of problems they solve, where they could improve, and where best to use what tool, and you will be ready for anything the front-end world has to throw at you
Nah, I'll make custom stuff. I suppose I'll start contributing to Bootstrap in a big way pretty soon.
Thank you. This is the most informed "playthrough" of all the JS frameworks out there. Backbone is #1 on my list to try out, and nice to see it confirmed by an obvious expert. --Robert
The blogger wrote an opinionated post..thus are getting opinionated rebuttals. In other words... The blogger asked for it.
Local storage in cookies is the easiest. Like rjromero said, to have a global high-score system, a database is the best option, regardless of security or traffic considerations. Flat file handling in javascript is not possible because it lacks access to your server's file system.
Excellent discussion starter. Thank you for the effort. Agree or not, there's a lot to digest here. 
Okay, thank you for your help. I'll see what we'll be able to do.
Fair enough. Does anyone have any ideas for future challenges? I've kind of ran out…
It's 14pt monospace in a 240px wide box. It's 32 characters per line in every single browser on every single computer I've tested it on.
That's a fair bit trickier, I might take a crack at that one on the weekend. I'll probably submit what I have so far to the main branch, and enter your bug in the list there.
Efficiency is not the name of the game.
How does one apply this editor to JS?
Just because libraries like Backbone give lip service to Zepto and ender doesn't mean they don't function exactly like jQuery. jQuery won. Plain and simple. There is no competition to jQuery. Your live-and-let-live fantasy doesn't change the nature of the game. Firefox and Chrome both implement the same standard. One winner. 
I like its goals and will look over it further, esp. since it follows the nice Backbone standard and provides annotated source. As far as the form plugin, I'm finding myself diverting more to changing the View object--I think Backbone needs a View Collection more than it needs a Form. 
All the documentation you seek is [here](http://docs.cksource.com/Main_Page).
RegEx to validate RegEx expressions This will be challenging and yet something that will make sense to do in RegEx
Python passes everything by reference. There are no special cases. Even integers are passed as 'pointers' to int objects
But I'm validating the regex typed in using regex… we can't validate a regex to validate regex using regex using regex, that's just too far! Seriously though, this is a good idea; thanks.
So your first assumption is correct, the username and scores will be submitted to the database via the HTML page given. However, if you want the data from the game instead of a user submission, it all depends on how the game is setup. Whatever variable is hosting the game result score would be sent to the Ajax request instead of the $(element).val() for score. I.E. (It would be something like var score = finalScoreOfUserWinning). Now if you want to grab data already in the database, you will have to setup a different query in the MYSQL. I have a INSERT query, but you will need a SELECT query to gather what is already in there. When you do that, they are already in an array when the MYSQL query is made and returns a result. So if you could tell me how the game gathers the new resulted score from a game, as well as how you want the scores? (Maybe have a user play, they get a score, it auto adds it to the database, updates their total score and presents it to them?)
I'm not sure that I fully understand the question (plus Stack Overflow, see the sidebar, is probably a better place for this question), but I'll give it a go. You don't have JavaScript installed on your computer, as such; the browser comes with JavaScript as part of the browser. Even then, the browser doesn't really come with a "version" of JavaScript; while it may support some feature from the latest JS version, it won't necessarily support all of them. It might even fail to support some features of older JS versions while supporting newer features; for example, `element.querySelector` (a relatively recently added feature) is supported by IE8, but `element.addEventListener` (added years ago) support was only added in IE9. Basically, while there are official JavaScript "versions", the browsers don't tend to rigidly stick to them, and so you cannot say exactly which version of JavaScript the browser is using. I'm not sure I see the point in what you're attempting to do, anyway. Maybe I'm misunderstanding you. Hope this helps, though.
New documentation is here: http://docs.ckeditor.com/
&gt; Concatenated source files don't share the same scope Not in normal circumstances; they're wrapped by the CS compiler and/or developer sanity.
Even if you [convert everything to UTC with toUTCstring](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toUTCString) you're still relying on the client having the correct time set. It may make much more sense to simply have your page's template set the "Store Open"/"Store Closed" value rather than try to determine it dynamically with Javascript using information you can't quite trust. If you expect the user to have the page open across an open -&gt; closed or closed -&gt; open transition and you *really* care that they see it change on the page, your template could generate a simple ``setTimeout`` based on the date on the server and the number of milliseconds until the transition occurs to change it on the client side, but that's probably overkill.
regex does not always out perform standard code. there are plenty of cases where the regex performs slower than standard code. edit: to further back up my point that regex is often extremely slow I implemented a VanillaJS solution to [Challenge 11](http://callumacrae.github.com/regex-tuesday/challenge11.html) and then did a JSPerf test of the VanillaJS version against the Regex version. Enjoy: http://jsperf.com/compare-regex-to-js
He was joking.
He probably shares my opinion then right?
Have a look at https://gist.github.com/1084980 - it's been done before, but maybe someone finds a better way.
Why?
Can you elaborate on node.js in the browser? If that happens I agree, we're going to see some amazing and far reaching shifts. WebRTC is exciting enough, and node in the browser would just make my day. I can't seem to Google this question, all I get is browser/server code sharing and a poorly titled "run node in the browser but not really" project.
but that is my point. it is important to understand when regex is going to be horribly inefficient. manixrock seems to be under the impression that regex will always be more performant, which as I have proven is completely inaccurate. I am fairly confident that whatever final solution for this challenge is established in regex, I can create a comparably performant implementation in VanillaJS. This is based on my knowledge of how regex works. That isn't to say that the challenges aren't awesome, they are. I just wish they were more real world applicable, or helped people understand that regex is not always the lightning fast tool people think it is.
Looking over your code, I noticed you're splitting the values on every line break. I was actually thinking of refactoring my code to do that, but I decided against it mostly because it would've been harder to join the strings back together while maintaining the highlight (which you wouldn't have to deal with for newlines I suppose)^1. Given that a user might also hit enter with text selected, the behaviour right now would (I think) just erase whatever is highlighted. Instead of splitting, I used `findStartIndices()` to get an array of line starts... that *might* be easier in the long run? ---- ^1 Secondly, I also didn't feel like refactoring on a weekend.
Got it. So I have an image that changes images depending on the user's input using the onChange handler. Would this be a good case to preload all images that it could potentially change to? I'm applying jQuery's .css('background-image', 'url(blah.png)') on the DOM object.
Oh, that's cool. Maybe in version 2 :)
actually I take it back. Regex can't/shouldn't do balanced tag parsing. http://www.codinghorror.com/blog/2008/06/regular-expressions-now-you-have-two-problems.html
Sorry, times change, competition carries on. Exhibit 1: Internet Explorer. In 2003 you would have said IE won! Look at those numbers. Now in 2012 you are siting FF and Chrome as counterexamples. see: http://en.wikipedia.org/wiki/Internet_Explorer#Market_adoption_and_usage_share Things change constantly. Winners are temporal at best. "The king is dead. Long live the king"
This may be exactly what I need. Soon I'm going to be adding a feature to my website to let people submit blog entries and I want them to be able to do basic text formatting (like bold and italics), and them save the text as HTML. This is pretty much perfect for that right? Are there other similar packages that I should consider using instead or is CKEditor pretty much the best one?
depends on what your feature requirements are. If you need super simple, wysihtml5 or redactor might do the trick. They're relatively lightweight (in size and features).
Typing *anything* with text selected would replace the selected text, would it not? I was thinking it worked as intended there. However, in that regard, hitting *tab* with text selected ought to indent those lines like a fancy code editor. I didn't notice findStartIndices(), I just had an algorithm in my head and dumped it out once I found the entry point. Refactoring sucks, but bad code is haunting. I think this project requires additional weekend alcohol...
Thank you, that worked: Now I have another question - same topic. How to use the "live" thing without jQuery? $(".tttw").live('touchstart', function() { if (Last) Last.removeClass('ttth'); $(this).addClass("ttth"); Last=$(this); }); I've tried the same thing you mentioned before but here it failed: var listadd = document.querySelectorAll(classname); for (var i = 0; i &lt; listadd.length; i++) { listadd[i].addEventListener('touchstart', function () { //some code to add/remove classes Any idea or hint where I can find it?
using .live() means you want any future elements you generate to respond to the same event listeners. The only way I can think of to do that would be to either 1. always set the event listeners as soon as you generate a new element, or 2. set the event listener on the page body/document root and listen for the event object's source element, then act accordingly based on a classname or whatever.
Great article, but seems pretty bias towards Backbone... Would have liked to see a more detailed comparison between Backbone &amp;amp; Spine since they're supposed to be very similar. Instead it pretty much just said "Spine use CoffeeScript. Me no like CoffeeScript. Spine bad."
Thanks for that, but my curiosity is limited to deliberately causing a memory leak within JavaScript. How a browser behaves is for the moment out of my scope of interest simply because there are too many versions to test.
Yeah - I just read that too and for what I am doing it should somehow work without .live() as I'm not dynamically creating content. Just some more or less static pages - once loaded everything stays the way it is. So - what would I do to add a class or remove on when someone clicks a certain class? Why won't the addEventListener thing work - any idea?
Where is the documentation for ckbuilder? I can't even find anything that explains what it is.
What? You don't keep your body in your head? You must pay for clothing. Sucker.
I didn't test this yet, but think you only want to run preventDefault if in fact you are trying to intercept and prevent the default behavior. I'm not seeing how to wedge that in easily though. It may mean breaking the code out into a detection part and an action part. if (iNeedToDoSomething==true) { e.preventDefault(); //actually do the stuff, etc...
does it support a browse callback instead of a URL. are there any changes to plugin loading. how much faster is it. why should i upgrade. 
You sound...young. One winner. Interesting. Do you realize javascript "lost" to Flash nine or so years ago? Many people even diabled js in the browser. It was even commonplace for workplaces and endusers to disable js entirely. That was the norm. I hope this highlights the absurdity of your absolutism.
&gt; I'm assuming initTextEvent is better supported cross-browser? Unfortunately not. According to [this](http://help.dottoro.com/ljuecqgv.php) it's unsupported by FF, Opera, and IE&lt;9. So it might not be possible to fix undo/redo in a cross-browser way, yet.
So you need some form of persistent storage on the server. So you could write something in perl to connect to mysql as you stated. Could use a document storage like Mongo. Or hell, could just write stuff to a textfile if you want. I'd suggest looking into using something like mysql or postgresql, since that's more or less the way to go for making web apps. 
you would do that in your server side code for sure. You won't be able to centralize and persist any data without the use of server-side processing. You need something like node.js with express, or php, or perl, or .net. 
bitwastaken mentioned that he did a project similar to this before, and [ran into the same problem](http://www.reddit.com/r/javascript/comments/13tfpf/burned_through_a_quick_weekend_project/c77eq1r?context=1). His solution of using `dispatchEvent()` works in Chrome, although getting full cross-browser compatibility is a little harder. Currently [looking into it here](https://github.com/julianlam/tabIndent.js/issues/7).
Wow, that sounds like a lot of work! Let us know when you have a working prototype, I'd love to check it out.
Yeah I'm glad he mentioned that.
Sure. It was working great, but the code is now in a state of flux whilst I'm currently re-doing a lot of restructuring, moving a lot of the code out into extensions. That's mostly to help make the internals a bit cleaner, and more extensible. A lot of real world usage also just didn't work in the original, like a returning object was fully rendered, making stuff like ... a = document ... suddenly fill the entire terminal with the entire 'document' object, with all it's 100s of properties. I have an awesome vision of having an 'edit' command, which silently builds a two column layout, with it's pipe sending content to the second column whenever it saves. You could then just do: edit file.json | json | describe ... and you now have a JSON editor, which shows the file as a JS object on the side, every time you save. Or ... edit index.html | html edit Readme.md | markdown | html edit script.js | run ... in all cases you have it's pipe, which is used when it saves, automatically sending that somewhere else. All those blocks would make it easy to build quick and dirty IDEs as you need them. Although currently it only supports JS and CoffeeScript, so the examples above are just what I'd like to see in the future. Since all the languages I'll be supporting compile to JS, everything will be compatible with everything else, and you can build complex scripts using the JS knowledge you already have.
I think what you may be missing here is that JS does not have any direct access to the server. JS can make a request to the server that would pass the form data (usually via HTTP POST). The server would then process the request (via PERL, PHP, ASP.NET, etc) and store the data in whatever format you choose. You'll also need to make a server side method to run your query and return the results to JS. You may want to look into some tutorials on doing server side scripting with PERL.
This solution matches all of the given examples, but I had to cheat and make a special case for the one where the match is not at the beginning of a line. /^((?=(\S.{1,31} ))\2)*(?=(?=(\S.{1,31}( |$)))\3(.+))(.{13})?(\S+)\b.*(?=\5$)(.{13})?\7/i
Man this looks great. Very polished and responsive. I'd love to see a shapes panel and a bezier tool. Also, it would be great to add keyframes. I noticed the keyframe tab but couldn't figure out how to add extra points to the animation. Oh, and a screenr tutorial. :) Great job though. I'd love to see this completely fleshed out.
Pretty neat! But why not add the a beziercurve in the 'animation'-property instead of hardcoding it in the keyframes? That way you'll have a cleaner and smaller stylesheet. cubic-bezier(0.345, 0.005, 0.670, 0.975); instead of linear
Can you point me to a tutorial on how to write a Perl server side script to store the data? I mean, I know how to pass args to a Perl program, would the JS program just call the Perl script to store/update/delete a record? How would the JS script call an external program like a Perl script? Perl would actually be better for me since I know that, and it's set up on our server already. 
I haven't done a whole lot of PERL scripting myself, but I know you'll need to setup your web server to run CGI. [Here](http://httpd.apache.org/docs/2.2/howto/cgi.html) is a tutorial on setting up CGI within Apache. [This](http://stackoverflow.com/questions/3696442/do-you-know-any-good-perl-server-scripting-tutorials) post from SO seems to have some pretty beginner tutorials on how to handle request with PERL, but you'll need to have the web server setup first.
I agree on the symmetric image point. Rotation is the newest feature, so the design (which is some months old now) did not take that into account. I will have to put on my design hat to figure out a good replacement image. I do indeed plan on supporting multiple keyframes, it is one of my top priorities.
Thoughts on adding waypoints? For instance, if I want to draw an "L" shape. Also, have you considered incorporating http://daneden.me/animate/ somehow? Edit: I see a lot of people have suggestions. It seems people really like this idea, but it's just not feature rich enough. Keep at it.
No, you are confused what each technology are. JavaScript is a "browser technology". It runs in the browser. (Let's not get into the Node.js stuff here) Perl/ASP.NET/PHP is a server side technology. It renders HTML. So of course you can never use JS (running in the browser) to access something on the server directly. You have to send the request (logically) and ask to do something. This is where php/asp.net comes into play.
Interesting, this performance test shows it running only twice as fast. My testing, with 13860 records, showed yours taking 16.9 ms and mine taking 2.9 ms, better than 5 times faster. My feeling is that jsperf.com itself introduces a great deal of overhead. I just used window.performance.now() to get a before after timestamp and subtracted the difference. I would be interested in knowing the actual performance gain for your playlist shuffle.
A few more observations after playing with it more: * Holding shift to display the rotation handles has poor discoverability. I didn't find them until I looked at the HTML. * If you edit rotation in the keyframes tab it isn't propagated to the dragging controls. This means that if you drag one of the handles it resets the rotation angle to whatever you set with the handles. * It would be nice if I had an option to center the image on the path line (appending `translate(-50%,-50%)` to the transform works nicely). * A checkbox to force `X` and `Y` to use the same easing function, `R` as well but that is less important. * Any chance of having the tween path line update live during drags even if the CSS doesn't? * Rotational controls with a cursor are *hard*.
Truthfully, the first thing this supposed developer would do is hang out in the DBA's office and see if it would be possible to rework the query to return in under a second. If there's truly no way to speed it up, this is the wrong interface paradigm to use, and old school paging might be better.
You don't say... I guess I could have the query return a smaller number of results all at once instead of a large query 1 by 1. Edit: I'm the DBA. Edit 2: Can you explain how events act like they're queued?
Using assets from Baldur's Gate II :D This is a proof of concept, I will roll out a new demo with animations and travel if there's interest. Only tested on Chrome for now!
They act like they are queued because they are.
You can either throttle or debounce the function using underscore.js. http://underscorejs.org/#throttle http://underscorejs.org/#debounce
I figured. ;) Seriously though, paging on the DB side can be a tricky affair. If you're doing a select all with a bunch of joins with no indexing or statistics, and then slicing out a chunk of that to return, it's going to take a long time no matter how many records you return. There are several things which could cause queuing that I know of: 1) A single ajax object 2) A connection limit set by your browser 3) A connection limit set by your server 4) A connection limit set by your DB But again, this is by design and is not the main problem. If you can't make the query return faster, multiple slow simultaneous queries are just going to make it all seem worse.
I'm using Sijax for Flask http://packages.python.org/Flask-Sijax/ which is short Simple Ajax. I only have one statement inside the query which is just a Sijax call. I guess this is causing queueing. Any workarounds?
Hey, underscore.js is neat, thanks for pointing that one out.
Neat! Just FYI, the bottom is cut off on my 1366x768 screen.
Do you use an asynchronous XHR? Edit: if this is the case, I guess you should execute `accepting_more = true;` in the callback function instead.
thank you for reminding me of dink smallwood
FF16 here. It just says Loading Map Loader forever.
JavaScript is already here through, there are some things weird about but that does not keep it from working great. And even those will change with time. Trying to make the THE WHOLE WEB switch over to another scripting language will ONLY partially work, resulting in all browsers having to have one more interpreter in them instead of just JavaScript, if they want to be able to work the websites that switched over to whatever other scripting language some corp. or another is trying to force on the web. Division like this is bad for the web, and ruins ubiquity. 
wow, just wow. A whole load of opinions offloaded in this article and of course the obligatory "my example is better than yours" code. First off, there will not be an embedded framework in the browser. What we're going to be given are parts that make building a framework easier (like Object.observe). The fact is that each framework is different and are better at different things. Backbone isn't a "better" framework. Backbone is the most popular because it's easy to start with and understand but when people begin to get more comfortable with the concepts behind building larger applications I believe they will start moving on to more fully featured application frameworks. As for extending HTML - this is something that will happen and should, whether it is being done the proper way is the issue. HTML is great as a markup for displaying information. What we are doing though is building applications that are more about interaction than content. HTML was not built for this, so we need to figure out how to improve it. I also believe Backbone doesn't do a lot of things right. a synchronous event system will lead to issues as data becomes tangled and more relationships are added. It's easier to understand and start with, but the truth is that events and javascript should be asynchronous - it was designed that way - and we need to be able to use the language the way it wants to be used. Also the views are very light, I'd prefer a way to build up views like lego rather than have to put in a template every time and re-render the entire thing. I want to describe the view and then just plug it in to the data with binding (see http://modernjavascript.blogspot.com/2012/06/v-in-mvc.html). I believe that we'll eventually move to treating the view as just another model and we'll be writing two layers - the binding between the models (I mean data models and view models) and how to update that data (syncs for data models and something like angulars directives for the view models). Lastly about abstractions. They're good. You want to tell a program what to do, not how to do it.
This error, or is it a different one? &gt; [22:17:11.853] NS_ERROR_NOT_AVAILABLE: Component is not available @ [http://lumakey.net/labs/battleground/demo1/core.packed.js](http://lumakey.net/labs/battleground/demo1/core.packed.js):66 &gt; &gt; 0,0);this.view.fadeIn();this.fireEvent("onLoaderLoad")}.bind(this);a.load()},_loadBg:function(){this.view.notifyDetail("background");this.sizeX=this.data.sizeX;this.sizeY=this.data.sizeY;this.searchMapX=this.data.searchMapX;this.searchMapY=this.data.searchMapY;this.tileSizeX=this.sizeX/this.data.nbTileX;this.tileSizeY=this.sizeY/this.data.nbTileY;this.nbTileX=this.data.nbTileX;this.nbTileY=this.data.nbTileY;for(var a=this.memoryman.getLoader(),b=0;b&lt;this.nbTileX;++b)for(var c=0;c&lt;this.nbTileY;++c)a.addToList("resource/map/"+ Also, you have this image that is gone: http://lumakey.net/labs/battleground/demo1/resource/map/AR0503/load.jpg
&gt;IE Well there's your problem.
This looks great. The name battleground engine seems to be overloaded. I googled 'battleground engine' and 'battleground engine JavaScript' and came across a different battleground engine, also for RPGs. :)
Prevent another request until the first responds. You have the general idea (accepting_more = Boolean). However; you'll need to set it to `true` from within the AJAX callback: $.get('/url/', function(){ accepting_more = true; }); If you set async to `false`, it will wait for the response before continuing to the next function. I'd advise against this, though, as any JS waiting in the callstack will be forced to wait 10-20 seconds to run.
can you help walk me through this? http://nathancampos.me/post/23831039066/how-to-setup-and-use-nativecontrols-in-phonegap
My above post is no longer relevant.
My above post is no longer relevent. Can you help me do this? http://nathancampos.me/post/23831039066/how-to-setup-and-use-nativecontrols-in-phonegap
Try it on iPhone/iPad ;-)
I'm surprised that we're still seeing the loops and class arguments for coffeescript. Is it really that difficult to import something like jquery and use var extendedObject = $.extend({newProp:newVal}, baseObject); $.each(myCollection, function(x){action(x)}); ?
Yeah. It is more or less a piece of jQuery. I haven't actually looked at the jQuery source to see if everything is handled the same way. This is if you want to have a simple API for doing event delegation in modern browsers without having to depend on a framework. If you are already using jQuery though then I would probably stick to that.
Still nice. I will consider using it, when need event delegation and no demand _one_of_big_fat_libraries_.
Thanks for the feedback. &gt; Holding shift to display the rotation handles has poor discoverability. I didn't find them until I looked at the HTML. Completely agreed. It's in the README, which isn't directly linked up (aside from clicking the logo and viewing the Github repo). I will to implement some sort of in-app help feature. &gt; If you edit rotation in the keyframes tab it isn't propagated to the dragging controls. This means that if you drag one of the handles it resets the rotation angle to whatever you set with the handles. Ah, good catch! I will fix that, thanks. &gt; It would be nice if I had an option to center the image on the path line (appending translate(-50%,-50%) to the transform works nicely). I see what you mean. It might be a little tricky because the HTML that's being animated has an arbitrary size, but I will work on this. &gt; A checkbox to force X and Y to use the same easing function, R as well but that is less important. Not totally sure what problem this is solving. Is the current UI unintuitive for achieving this effect? &gt; Any chance of having the tween path line update live during drags even if the CSS doesn't? This is actually how the app used to work. It tended to bog down the browser severely because updating keyframes is expensive. Doing it many times a second overwhelms the browser, so I chose an approach that would feel less clunky. &gt; Rotational controls with a cursor are hard. It is a little weird, yeah. Any suggestions on a more usable approach? I'm going to make a Github issue with your comments as a TODO for myself. Thanks again!
All my upvotes for Dink Smallwood.
Seems to work fine on FF17 on x86_64 Linux
The answer is: /[^\n]/ Which makes it a pretty bad challenge. os at least a bad presentation of the challenge. http://callumacrae.github.com/regex-tuesday/challenge13.html?find=%2F%5B%5E%5Cn%5D%2F
This is my very first attempt to build a (somewhat) complete game, and I will instantly fall in love with both harsh criticism and pull requests, if any. Thank you.
it's beautiful
Ok, it loads fine now. :-) I've only noticed a handful of problems. 1. The character moves really fast but I'm guessing this is as should be due to testing purposes? 2. Have you taken a look at the [Fullscreen API](https://developer.mozilla.org/en-US/docs/DOM/Using_fullscreen_mode) and the [related selector in CSS](https://developer.mozilla.org/en-US/docs/CSS/:fullscreen)? 3. [When going into/out of fullscreen mode the 'obstruction layer' is unaffected by the fade](http://i.imgur.com/OPATj.png). Have you looked into [CSS transitions](https://developer.mozilla.org/en-US/docs/CSS/Using_CSS_transitions) as an alternative solution? 4. I get [the same problem as Sinistralis](http://i.imgur.com/4h834.jpg) when the camera scrolls and there's a bunch of empty space. Instead of moving the camera it will simply 'jump' the whole canvas area in the direction the character is walking when it gets close to the border. Changing viewSize like so fixes the problem: config.main.viewSize={w:1280,h:1024} With 1280x1024 being my screen resolution, if that wasn't apparent. 5. This might be my hardware but [when the game is unfocused the FPS goes up by a great deal](http://i.imgur.com/CiwBL.jpg) even tough the only apparent difference is that the character is no longer animated. 6. Whatever this.movement + '-resize' results in, it doesn't work with cursor here. Anyhow, I'm liking it. Hope we get to see more in the future. :-) Edit: Also, just want to note that it doesn't scale well for smaller screens, i.e. phones.
It doesn't only work in Chrome Developer Tools, but in virtually every developer tools out there: Firebug, IE Developer Tools (IE8+), Opera Dragonfly, Safari Developer Tools...
im having fun and learning more git commands too! it would be kinda cool to have a combo thing in there too, like commit -&gt; amend -&gt; change message -&gt; commit again. also +1 on the evangelion handle ;)
Like the game. How, however, do I turn off the music?!
working on muting now!
DOM methods are painful. Generally, css styles are added like this: el.style.borderColor = '#fff'; Other attributes can usually be added by directly accessing the appropriate property of the element. To edit the class of an element: el.className = 'class1 class2';
I set up a JSfiddle to play with this: http://jsfiddle.net/thegaw/WFN4H/ Looks like the API does not support JSONP. I think it's a pretty trivial thing to support in an api. They just need to look for the callback query string and and wrap the json response in the callback. For now callumacrae is correct, you can't access the API directly with JS, but you could hit a server-side script of your own with an AJAX request. That script would just need to make the request. It's pretty easy to do, you could use a quick and dirty PHP script to just cURL the url.
Very well done!
Uh, no?
lol, its not even 2013, you have a whole year :P
Still. Then comes the issue of IE.
This is pretty fun. Got a lot better when I realized I didn't have to keep clicking my mouse and instead could just hold it down. 
I like your clever use of the canvas element. The game is made up of two canvases: one for the game play and one for the background. Makes it much easier to implement subtle parallax effects.
I've been waiting for ES6 since I found out JS didn't have classes in the traditional sense.
Can you give an estimated breakdown of your time, e.g. how much time was spent adding new features, how much time was spent on polishing the existing game, etc.?
you've never played a helicopter/floaty survival tunnel zoom game before? there's a million clones of these things.
Hey there, I saw Paul Irish retweet your article earlier and actually put a link up in my own blog. Quite useful, thanks!
Also - if you have one and then get another one towards the end of it wearing off - it doesn't reset the timer - made me die!
You don't have to wait - ES6 classes are just syntactic sugar, not classes in the traditional sense.
there are a lot more routing libraries out there, and many of them are actually part of an MVC. What I find people ask me the most is how to deal with routing and use it rather than what library to use. I wrote a blog post on routing and state: http://modernjavascript.blogspot.com/2012/06/routing-and-state.html which generally goes with the idea that a router and state are inexplicably linked. I've been asked for more code and examples and to expand on the idea so hopefully I'll get around to that soon by writing a more heavyweight state component that include routing as a way to serialize and inject state.
Nicely done, I liked it.
this is too cooool. i'm totally reverse engineering it because i have no idea how the diddly to make games like this...
Freakin' adorable.
Didn't chrome apps already exist? I remember reading about them over a year ago.
Yeah that JS is similar to what I had going. I guess I'll have to get some PHP going. Thanks!
Thanks haha. 
It's perfectly possible for someone to create an ES6 to ES5 compiler, and I suspect there'll be one sometime in the future.
I agree, IE 10 is better, but I'm talking about the large amount of users that use old versions of IE.
If you don't mind, what do you use JS to do? As a front end guy, I don't see much possibilities with getting a classical language (for now), but some of the others things do appeal me.
Seems to have taken a lot of influence from Python.
Is there a working implementation of the DataChannel API, or perhaps a placeholder? [The faq](http://www.webrtc.org/faq-recent-topics) says not yet, and I couldn't find anything else after a quick search. Edit: found the answer - https://hacks.mozilla.org/2012/11/progress-update-on-webrtc-for-firefox-on-desktop/
This looks fun. Its like mine craft but you get to create the blocks yourself. This should allow you to make much more detailed and fancy looking structures in game. I also like that the author is releasing it open source. It seems he is just charging enough money to recoup his time and effort. If enough people pay for his effort and support the idea then the game and its source code will be made available for free. This means that the game will only get better over time. With most games you pay money for your copy and if you like it a lot you hope the game is modable or that an expansion pack or sequel is released quickly. However, this game will be made open source, which means that you can expect that it will be constantly improved upon as soon as it is released and that the improvements will be from the game community. I can't wait to see how this progresses and how this development model might impact the game industry!
I suspect that IE will still be a problem until they start automatically updating it. We've only just been able to get rid of IE7 support in many cases recently, for instance.
&gt; And one click is a security issue. What user is going to trust blind information being sent, or stored in the application, such as a credit card. I suspect that the browser developers will realise this and deal with it appropriately. Probably you'll end up with the browser going "This page wants an email, which email do you want to give it?" with a button to deny completely - similar to how Facebook Connect or Mozilla Persona already work from a UI perspective. Same deal for credit cards, except possibly with an additional step to make sure the user hasn't left their computer logged in in a public place. Basically, the same thing that LastPass users are already doing.
You should ask a more specific question. This makes it sound like you want us to do your assignment for you. :) Which part are you having a problem with?
I am really only having problems getting the submit button to give me the desired outcome.
This is freaking awesome.
Instead of getting an alert box like I am supposed to nothing happens.
Post your code on jsfiddle.net. It's hard to tell what's wrong without seeing some code.
and _this_ is why ES6 will be a no-show. It doesn't solve any problems people haven't already found solutions for. 
Once generators and yield hit V8 (and Node) we will see some crazy stuff coming out. Also, ES6 has a multiline string syntax that is PERFECT for HTML generation.
The double running is the main issue with this. Not only because it could yield double results, leading to bugs, but also because of the cost. It would also mess up if I used any try/catch handlers. There is a reason why throwing exceptions for flow control is frowned upon, and logic systems which do something kinda similar (backtracking), and optimize for this, are typically slow as a result (or at least, much slower than non-logic programming languages). I actually prototyped a very similar idea for a template system in PHP, that would allow you to name it's parameters at the top of the template, rather then when you call the view. It would throw the exception after it found out what variables the template took, and then ran a second time to inject them. The terrible performance, and potentially quirky results, is what made me ditch it. If it instead parsed the code, and then moved everything after the yield into a second function, then this could work well. Otherwise I don't see it being useful for any serious code.
Yeah, if I'm stuck debugging IE7-, I usually try and fire up an old copy of Visual Studio 2008 Web Express somethingsomething and it has breakpoints too - surprisingly effective, really. Much better than MSD.
I definitely share some of the same concerns which is why I was wondering how much overhead would actually incur. This will actually still throw an error if one occurs, or if you threw one yourself. It checks of the exception is for itself, and if not, throws the error again. The double running I only see as a problem if you put code in the wrong place. The function does run again, but the second time it loads, it already knows the value of the first function. I would really only use it if I had like 2-3 things I needed but needed to be in order, and then after I had that data, do something with it. The last section below the yield in the block will only get run once. I suppose it's kind of like an easier to read promise chain
Thank you! I'm wanting to try and write more about this sort of stuff. My day job is basically "Fixing dumb things people do in JS", so I'm trying to think of debugging things I can share.
Thanks! :) Paul retweeting it gave it crazy legs.
Looks really great, and kudos for wanting to do it open source if you reach your goal. This is not to side-track the idea or your post, but is there others who, like me, don't necessarily get these "games"? I mean, I like the idea of being able to build anything, I just wish there was more of a purpose with it. Like build anything to ... kill orcs, and become a warlord of Thorinthia. Or you know, something like that.
Thanks! I totally agree about the tooling. I've taken a small step in that direction - you can put down a constant stream of blocks with a particular key combination. It's not the best solution, but it has been saving my clicking finger a lot of work until I get a better tool in place. :)
It comes down to if people place side effects before or after the yield. If it's after, they are fine, but before, and they are not. The main issue is with updating external data structures, before the yield. Then they can get messed up, for good.
nice:) you should show where the remaining ships are, when defeated. 
Thanks, I agree. Next patch maybe :)
That bit of awesomeness comes from the folks at ajax.org in their [ACE editor](http://ace.ajax.org/).
That's a novel way to instrument code without having to modify the actual source....I like!
The `sleep()` method is somewhat unintuitive, at least if you've used such a function in other languages. Typically, _sleep_ will halt program execution at that point and literally do nothing until the sleep is over -- but that's not the case here. Rather, it's a timed callback that will allow execution to continue past the _sleep_. Also, with `setTimeout()` there's no guarantee that it will happen at exactly `t` time... you're only requesting to regain control flow after `t` time elapses, and so if you 'sleep' for 1s, then it might return you there in 1s, or 2s, or 3s... 
I disagree that having to learn and program in a completely new language -- that is really nothing like JS -- is an acceptable solution for JS.
Looks like people can take more than 5 shots - a guy (James) I was playing with took 10, and then probably 20 his next turn. I was quickly defeated. Also I was able to take shots on my own side. 
yeah, me too.
same
I won on my first try. Then again, I'm a Battleship pro. Well done on a cool variation of this game.
Same, tried two rounds and gave up.
A guy J was destroying my whole fleet in one move
Pretty cool. The only issue I had was that there didn't seem to be a way to unselect a target. I only tried clicking the target again, so maybe it was something else.
Looks like we are in the same class. I'm having trouble with this one too. :(
Quite possible on both reasons. Two games against 'J' defeated first move both times! Sorry I disobeyed and waited 15mins
Very cool! Profit!
I'm playing against a 'J' nearly every time and have never seen more than one round... pretty sad. EDIT: I've removed my little exploit demos. I've played against some non-scripted players and had some fun. Thanks!
I think you may be limiting your uptake by having only two funding options. Kickstarter supporters love their bonus schwag. Put some t-shirts, mouse pads, or something in there. Or offer to add something into the game (custom blocks?) for people who contribute more. At a $20 maximum donation level, you'll need 2,500 supporters to reach your goal, which seems like a fairly large number to aim for.
rough around the edges, but looking good. I did a simmilar project for learning Node and Socket.io but made a Chess game: https://www.snakebyte.net/nodechess/ (open 2 tabs and play yourself if nobody else is around to see how it works) It only supports 2 players, then anyone else who joins becomes a spectator. All players/spectators can see the chess pieces being dragged around in real time. I hope to add support for each player being able to see the other players mouse-cursor in real time (like some node tutorials/examples have demonstrated) So that you can taunt the other player, watch them contemplate moves, or even help new players by giving them advice and suggestions by running your mouse cursor over the board. Could be a great way to teach people how to play. Move validation occurs on the client (for responsiveness) and on the server (for security/cheat protection). Gota love being able to re-use javascript on the client and server so easily. Edit: and the code is up on github if you would like to check it out: https://github.com/AlexanderHerlan/nodechess The webpage is in the root of the repo, and the server is started with 'server/server.js'
Thanks, added some server side validations. I was too inpatient to post it online already...
No problem. Your fix should make this much more fun to play! Edit: Just tried out your fix, it seems to work. I guess you're slicing the array of targets down to 5 shots? My whole-map attack now repeatedly hits only the first 5 fields. :D
Great work! Its pretty cool, had a couple good matches.
I had to do a very quick and dirty fix, yes, trimming the array up to the first 5 entries. Maybe I made an off by 1 mistake and now it allows a hack of up to 6 shots, I have to check that later. The game is definitely exploitable, there is no arguing that, I just didn't have a lot of free time to focus on validations, rather than functionality...
How would I post it to jsfiddle.net for others to see?
are you sure?
you are right, I just saw my mistake, thanks
hi, you are 100% correct. &gt; Move validation occurs on the client (for responsiveness) and on the server (for security/cheat protection). Gota love being able to re-use javascript on the client and server so easily. That's a great point and it is very easy to do with nodejs. Just move the shared (between client and server) code in a separate .js file, which you can then require() on the server and &lt;script src on the client ;)
weird, in that case your browser is not allowing you to keep the connection open. It might be a plugin or a setting.
Sure. nodejs is the server, which receives requests from the clients and returns responses. It also serves static content such as images and .html files, by utilizing a nodejs module called 'node-static'. For simplicity, you can think of nodejs as a JavaScript version of IIS or Apache for example ;) socket.io is a module for nodejs. It allows you to keep a synchronous connection between the client (browser) and the server. That time you can push back data to any client, at any time, instead of having the client request data from the server on some interval. I hope this makes it a little more clear :)
You can run it fullscreen by [adding it to your homescreen](http://lifehacker.com/5809338/add-web-site-bookmarks-to-your-iphones-homescreen).
unfortunately no, that's not implemented yet :D
Maybe there was nobody to play with? Or if you see let's say 6 players online, they might be playing total of 3 games and there was nobody else looking for a match at the moment.
Accidently opened the game in two windows, Spent 5 minutes playing myself
lol
Well done. Fun to play and nice use of parrallax, which is something I want to look into :) 
Might get a bit more traffic/activity from /r/Webgames too, their latest hit there is also a github contender.
Thank you, I will try this when I'm allowed to submit a new post :)
&gt;isn't that frowned upon No, you're free to post wherever you think it may apply. You'll get developer flair over there too.
Thanks a lot- just got it up there now!
Thanks, I'll look into all points and fix them! Comments: Never noticed that moving platforms disables ducking, but you're absolutely right. I think the flashing could be related to the gas counter, which is changing continously. Gonna try moving it to the end of the row. More troublesome is that you didn't find the old man. Did you get a text saying that he was located (and then game over)? 
All I got was a text notice that I found him and the game was over? I didn't see any old man, maybe I ran into him before I noticed him? I thought the score thing would've been a nice touch, a homage to the old games, a shame it was pulled. finished my edits. Good luck, it was a good game.
i let it sit and load, and same as above, i get info down right saying im being destroyed, but all i see is a picture of a battleship.
Here is a graph of what the project has raised: G| | |40K | | |30K | |20K | | |10K | ooo |0 -------------------------------------- 11/29 12/4 12/9 12/14 12/19 12/24 12/29 [Click to see full graph](http://canhekick.it/projects/1000859548/widgiverse-everybody-gets-one) [FAQ](http://canhekick.it/reddit-faq) 
Thank you very much. The music is absolutely fantastic. The great thing is that there is so much more of it - I just used two of the trakcs. The rest is here: http://opengameart.org/content/game-game Good luck with competing in the next game-off. I'm currently looking through the games the others have entered. So much good stuff, and all open source. Just love it.
great game. but why is the javascript minified if you are distributing your source code :? Edit: Got it, ImpactJS
Yeah, it's required when using impactjs. It's also served gzipped in order to minimize server load. Thanks for your comment :)
This sounds like a homework problem, so I'm not going to actually do it, just give you a hint. The definition you've provided seems to imply a base-10 counting of the numbers, but the numbers are defined as numbers and not strings, so most likely you're expected to determine the "length" algebraically, rather than relying on Javascript's ability to convert the number into a base-10 string representation and count the characters that way. Just remember this, a number ``ABCD`` is equal to ``A*1000 + B*100 + C*10 + D``, and your algorithm will probably involve the division and modulus operators, and ``Math.floor``. Good luck!
I'd argue only because of a mistake on the ECMAScript authors' part. When ``for in`` was introduced, and defined to iterate over all *enumerable* properties, they should've realized that ``length`` shouldn't be an enumerable property, especially since (at that time) Javascript REPLs didn't really exist.
What kumuiorava says + you should define charsLength local, not global.
https://github.com/loktar00/game-off-2012 source if anyone's interested. It got *pretty* messy in the last day or so of coding :? not to mention the fact I did it locally and realized I better start making some pushes. Heavily inspired by Starjeweled (starcraft 2 official mod), and Tetris Attack (movement doesn't require a match allowing you to setup combos). I plan on revising it and changing a few things for the battle portion and releasing it as a more proper game.. if I can find an artist that would be awesome as well.
charsLength is local (note the comma), but the loop variable isn't.
 var a=[4,8,15,16,23,42] alert(a.join("").length) The numbers in the array are coerced into strings by the array.join, which returns a string.
Hmm I'm not sure if I'm following. However, it's not a homework problem. I just have an array of length 700000+ elements, and even longer when determining the total amount of characters in this array. I'm implementing sha1 on my own and I need the length for the initial append of the hash algorithm. However, due to browser restrictions I'm looking to only send 512 bits of my array at a time (16-word). So I do not have the initial length value as I'm trying to avoid iterating over 700000 elements and storing them in a string, only to be used again in sha1. Nor can I determine the length without first iterating as I need the total amount of characters. And therein lies my problem. This little paradox.
Making the database respond faster is not the right way to fix the front-end event code. It does not address the real problem.
That simply doesn't seem to make sense... How are you not able to find the length of this string before sending the entire thing? If you're in control of where it is being sent from could you not get the number "client side" and send that in your data transfer as like a header block?
Definitely should work. I think my brain shut down for not seeing that as well but makes total sense.
This one avoids all that ugly string conversion: for (var i=0, sizes=[]; i&lt;256; i++) { sizes[i] = (i+'').length; } for (var i=0, len=0; i&lt;bArray.length; i++) { len += sizes[bArray[i]]; }
hah awesome :). No I actually got the idea from a mod in starcraft called Star Jeweled.
Pretty nice. How long did it take to make? Did you have prior experience developing (on canvas or otherwise) games?
&gt;I plan on revising it and changing a few things for the battle portion and releasing it as a more proper game.. if I can find an artist that would be awesome as well. Please do. This game is great fun!
How did you find Impact? Tried any other JS game libraries for comparison?
awesome game, it was hard to figure out what was going on at first, i thought clicking on the left was how to put in units. Really fun though, you should sell the concept to nintendo or someone to make a ds game.
Ah damn I didn't realize.. You mean on the tile matching correct? If so that sucks. There is a tutorial button fyi in the beginning that kind of explains whats going on. Thanks for checking it out :).
Yeah mostly small stuff, my blog has some of it, almost all is canvas related http://www.somethinghitme.com I've been making small crappy games since I was a little kid :P **edit** Took like 1.5-2 weeks of work, I didn't get to dedicate as much time during the month as I would of liked.
Really fun game! Addicting :)
Ah my bad, didn't see the comma.
If you don't want any string coercion: function(array){ var total = 0, i, n, digits = function(x){ return Math.ceil(Math.log(x+1)/Math.log(10))||1; }; for (i = 0, n = array.length; i &lt; n; ++i) total += digits(array[i]); return total; } (This isn't enough if the numbers can be negative.)
Given the number 100 I would only want the length 3, in a larger scope I would want length 7 if I were presented with {1, 100, 100}. 
I'm generally very happy with Impact. It's very well made and easy to use, and it comes with a clever world editor. ImpactJS really excels in sprite manipulation, collision handling etc. It's very good choice if you want to create a platformer or an arcade style game (like Pacman). The nature of it being closed does mean that there are fewer plugins and less chatter, which means you'll have a smaller community to bounce ideas off of. It's not necessarily a bad thing, but it's something to consider. I am also programming in LimeJS, which does seem to have picked up quite a big of mindshare lately. It may just be me, but I find it easier to use that framework to create stuff that aren't geared towards 2D and arcade. My next project is a vertically scrolling physics based shoot 'em up (like the classic rambo for C64) and this time I'm going with Lime. 
Then you have a different problem than you described. You only want to send 512 bits of data at a time, but of course all HTTP communication is in text, so you want to send 64 *characters* of the array at a time. So, what you want in JS-based pseudocode is basically: var stringBuffer = ""; for(var i = 0; i &lt; array.length; i++) { stringBuffer += array[i].toString(); if(stringBuffer.length &gt;= 64 || i == array.length - 1) { send64charsToServer(stringBuffer); stringBuffer = stringBuffer.substr(64); } } (I call this pseudocode because as written ``send64charsToServer`` will need to be a blocking call to guarantee that the chunks are processed on the server in-order and that the trimming of the buffer string doesn't affect what is sent. In reality you'll probably need to use recursive callbacks to do this, but that masks the actual algorithm involved.)
http://www.javascriptkit.com/javatutors/determinevar2.shtml
From a strict performance point of view, for (var n = array.length; n--;) { // do stuff }
Your comment piqued my curiosity so I benchmarked the solutions in this thread on a few different browsers: http://jsperf.com/summing-array-values Though it's benchmarking CPU time and not memory, the answer seems to be browser-dependent: implicit type coercion for V8, and concatenation for everything else.
We should just agree to disagree before we go into it too much, because I _have_ checked it out, and it's a new language as far as I'm concerned, due to many factors. It's not Javascript.
This is by far the fastest on FF17. It is about twice as fast as the next best thing I could come up with var acc = arr.length; for (var i = arr.length; i--;) { if (arr[i]&gt;9) { acc++; if (arr[i]&gt;99) acc++; } }
Microsoft's Windows OS division has basically declared "Fuck C#, node.js is the way to go".
It is right now because it enjoys a monopoly on universal platform access and likely will for the foreseeable future.
Clarification: the presented format isn't JSON. Rather it's Node's inspection formatting, because JSON is way too spaced out. But it can be printed as JSON.
I think I agree with you. I have already said goodbye to PHP (after losing my nerves many times) and decided to go with Python for server-related programming, and JS would fulfill this, like you said. And do much more in the process as well. I have started learning C#, but, at the risk of sounding like a snob, I feel like I know it rather well already (for a hobby-programmer level). I recently decided to create a test app that I always write in whatever new programming language I am studying, and I had no problems - read the docs, VisualStudio is cool too, and I had it up &amp; running in 30 minutes. The conclusion is to probably learn both C# and JavaScript. Don't really like C++, though it is definitely quite useful. 
C# Itself is pretty easy... most of the time comes from learning .NET so that you can then learn how to access the OS, database, etc. Another big chunk is then how to hook it up properly to an ASP page... but the language itself is still pretty much C++. I personally LOVE C# because of the straight forward simplicity it has. No reason to over-complicate a programming language!
CSS is coming ever closer to stealing much of its newer cool functionality! Which I think is really cool. I think that ALL programming languages capable of being the server-side backend to a website will be just as cross platform as javascript, no? Edit: Glad to see so many people are closed-minded about what they read. Did no one consider I was talking about more frontend features like animations and fading?
While JavaScript need not be "the" future, it will certainly be part of it - and it is currently in development; ES5 is already deployed almost on every modern system, ES6 is just around the corner. New APIs pop up every two months, allowing more direct access to Graphics, Audio, and System.
It's really just about what you're trying to create. For example if you want to make games, then C# is actually a good option because you can use Unity3D and write games for almost any platform around. My take on Windows 8 is that Microsoft is trying to lure a different population of developers to their platform, not to get rid of C#. As for JavaScript, well if you want to do something interactive on the web, it's pretty much something you have to deal with whether you like it or not... I actually like to sweeten mine by compiling C# to JS.
Over the last 15 years javascript has unexpectedly turned out to be the one of the most important languages out there. It's an integral part of the web platform, and I'd imagine it will remain relevant so long as the web is around.
should we be discussing languages that run both browser-side and server-side? Is python that language maybe? Have you guys seen dart? Google-developed client and server side: http://www.dartlang.org/ http://en.wikipedia.org/wiki/Dart_(programming_language) Dart has optional typing and a good set of dev tools I guess. It compiles into JS to run on the browser. 
Only missing UI bit is the ability to "click, drag, release" to select flip boxes.
The output is correct. The var keyword anticipates a list of variables and indents as a result. This behavior is required by JSLint. Here is an example: var farm = { cow: 'moo', sheep: 'baa', dog: 'bark' }, barn = "building"; 
AFAIK the technologies you listed don't amount to jack shit. Something powers just its start menu with js? Wow... Chrome OS? Wow... QML? WTF? You can write anything in JS? What can you write in JS that you can't write in any other language?
Javascript is widely used these days. But it is not the future. I use it a lot, I have written my own plugins and libraries by extending jQuery and using javascript, but it cannot be the future. The language itself is not powerful enough, as well as it is not object oriented nor clean enough. I wish there was a better solution out there, but there is not. The future however will have to hold something different unless javascript changes drastically imo. EDIT: Javascript is much easier to learn in contrast to C#, especially if you understand HTML.
Winning what? Is it a contest :) I agree it is missing features! And it'll be a long time before we can use the features of ES6 in production thanks to slow to update browsers... I mean IE :) 
No, it's the present. It will also stay here for the foreseeable future. That's just how the web works. You can't take things away, because doing so would break it.
I think adoption times for new JS features will very much shorten. The important factor is that all mainstream browser now have auto-update feature. This will speed up adoption time SIGNIFICANTLY.
How does changing the opacity from 0 to 1 or 1 to 0 produce a slide effect? 0 opacity = invisible and 1 = completly visible surely? whats the difference with what i've already done, wheres the transistion effect? ** edit: sorry spoke too soon didn't understand the ease-in out functionality. Trying to get the code to work now, thanks for the tip
Js is the shit baby! seriously now, if you plan on doing anything serious on the browser then JS is the way to go.
Don't know about the future, but at least on demo&amp;gamedev-scene the javascript has been getting new life... ( like http://www.melonjs.org/ and others ) 
This is voted as my reply of the year. Thank you!
I disagree, you need OOP when you do larger projects, and websites are not getting less complex. Functional sure, but javascript is still fairly linear which is a problem.
Not sure how a condescending comment that requires no though and calls javascript a backend language is the 'reply of the year'.
JavaScript is the same and works in more than one browser. Check out node.js for server side. 