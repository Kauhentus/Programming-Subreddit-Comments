It's really no mystery once you realize that `!!` is simply two `!` operators in a row. The easy way to remember it is the old saying, "Two negatives make a positive." A couple of the other comments here explain it in more detail. Also, it's worth noting that `!!` is not unique to JavaScript. It works in C and C++ as well, and should work in any language where the `!` operator converts other types to boolean before applying the "not" operation. Edit: I had mistakenly added Java and Go to this list, which as Neebat points out is incorrect because of their strict typing. That's what I get for posting in a hurry without testing before sitting down to watch a movie! :-)
Yes, this pattern is common in other languages, too.
Best and fastest way imo. There's no built-in function for it like parseInt()
This is one of those things that makes me realize *I don't know Javascript.*
Thanks for the break down. "Boolean(input)" has the virtue that it explicitly declares the writer's intention (convert to boolean), which to my mind is rarely a bad idea. It also looks much more similar to a cast or a function call, another way of hinting at what is intended. The '!!' is odd enough to be confusing to someone who's not seen it before, and certainly couldn't be considered self-explanatory (witness this thread). I haven't seen it in other languages, and at first glance it looks like a no-op. It's shorter certainly, but I don't see any other advantage to it.
if you need to "get used to it" then you don't know the meaning of readable and semantically meaningful. also how's the conversion "not important" huh? that's the whole point of this trick.
I never said "semantically meaningful". That's only you. As for "readable", that's a matter of taste, and I'd argue that how readable things are can change depending on how experienced you are. For instance, to a non-programmer, "Let count be 5" might be more readable, but for me, "count = 5" is more readable, since the symbols let me concentrate on what's important (namely, the variable name and the numeric literal being assigned). I truly do believe actual program logic is more important. Type conversion is something of a formality, and not something you should draw that much attention to.
Maybe once every 500 milliseconds
It's possible to define the "boolean" operators in a way which makes them useful for values that aren't purely boolean. This gives the language a bit more power to write short expressions without having more operators. 1 &amp;&amp; 2 = 2. 0 &amp;&amp; 2 = 0. 2 || 0 = 2. 0 || 2 = 2. JavaScript and Perl have this in common. Java of course, does not, since only booleans can act as booleans in Java. I don't know what other languages use it. The double !! for conversion to boolean is common in every language I've used that allows non-booleans to act as boolean, including C, C++, Perl, and JavaScript. edit: fixed careless example.
[Efficiency](http://www.reddit.com/r/javascript/comments/xofzj/optimizing_long_lists_of_yesno_values_with/c5ofs97).
They don't do that at all. In every JS engine, there is both an int32 and double type — just both are exposed as the single Number type to JS code. There is often no conversion done, as the majority of numbers in JS use the int32 concrete type, and there almost always is no conversion back done — the only exception to this is unsigned right-shift, where a zero-bit shift can result in a value out of range for a signed int32: some engines convert such a value back to a double. Equally, the bitwise operators help the static analysis of the code, as their results are guaranteed to be an int32 (again, ignoring unsigned right-shift for now), which means that you can eliminate type-checks in following code.
In your case, I would use the data-attribute for the thumbnail and large src Attributes, so you could go completely without replace. Granted, it makes the HTML code larger, but you have more flexibility that way.
There are two ways to deal with this: Graceful Degradation and Feature Enhancement. The question is the starting point: with Graceful Degradation, you start with all the features and either disable those who are not supported or emulate them on the server, while Feature Enhancement starts with only the features that are supported everywhere and then adds CSS and JS features to enhance the user experience.
You could always have a gun reloading feature, that'll make the shots count
Hmm, that might be something :D
&gt; That’s around 5 to 6 characters per value, so 2560 to 3072 characters for 512 numbers (which is 5 to 6 KB). I got my first computer in 1981 ([Sinclair/Timex ZX81](http://en.wikipedia.org/wiki/ZX81)) and it had 16 Kb of memory. Back then I would have spent a fair bit of time worrying about optimising a 5 or 6 Kb memory allocation. It's funny to think that 30+ years later my computer has 16 Gb of memory but I'm still worrying (or at least, reading articles about other people worrying) about allocating a *massive* 5 - 6 Kb of memory!
It is ubiquitous in JavaScript, Ruby and Perl. And no programming languages are self-explanatory; for example, "continue" (in, say, C or JS) is completely unintuitive just by the keyword, and I'd never guess what it means had I not learned its meaning. As is the fact that `char` datatype contains numbers from -128 to 127. As is especially the fact that `$/ = 0777; $a=&lt;&gt;;` loads everything from standard input into the variable `$a` (and this is the easiest and most normal way to write it in Perl). I would never guess what `static method` means had I not learned it. `Class.prototype.fn = fn`? Completely opaque unless you know about prototypal inheritance. To any mathematician, `x = x + 1` looks like someone made a serious mistake, if he didn't already know how variables in programming are usually not the same thing as variables in mathematics. `**` as operator? Objective C's `[x autorelease]`? The reason why people compare the result of `indexOf` with -1, of all things? `array[start..-1]`? `LEFT JOIN`? And what the hell does `void (*signal (int sig, void (*func)(int)))(int);` mean? Be honest - unless you already know what these things are (because you learned them), it is pretty certain that you wouldn't find them self-explanatory. Now, most of those are particulars and peculiarities of respective languages' syntax. Here, you just have the very basic operator `!`, common to almost every currently popular language (Python has to be a unique snowflake), and a very simple semantics of which values are truthy and which are is falsy, which is again common to not all, but many common languages. Given the knowledge of those two things, the meaning of `!!` is very easy to work out, and once you do, it is an easy idiom to master; definitely much easier than, say, C/C++ function pointers (which I still have to stop and think about what goes where).
You've made a spirited defense, but I can't say that I'm convinced. You've listed a series of what look to me like some of the worst features of other languages as justification. I agree! All of your examples are confusing and arguably badly designed. Most of them are from C which is peculiarly opaque, and the oddity of whose syntax is perhaps only rivaled by Perl. Shall we have some APL examples too? But the observation that these features of these languages are confusing doesn't imply that confusing syntax in general is a good trade off. Quite the contrary -- lets try to avoid confusing syntax. And to be fair chars, statics, increments, pointers and left joins are all required by the respective language specifications. If I were to redesign those languages I'd try to avoid creating those features. At least !! is an optional feature, which I can easily avoid as a mere mortal programmer who doesn't find it transparent. Its use is not required by a bad language spec., and I don't even have to be the language designer to avoid it. The root of the confusion here, it seems to me, is the existence of truthy values and their use as operands to boolean operators. Has not every maintainer at some point scratched his head and wondered which unexpected string or number input values cause the boolean to evaluate in a different direction than expected? I suppose we can praise !! as removing ambiguity by creating an unambiguously boolean output out of ambiguously unspecified inputs, but wouldn't it be better if all conversions to boolean were explicit and the use of truthy values raised a type error? Well that's a bigger crusade for me jump on. Still, I think the point stands that there's something deeply confusing going on when we deal with truthiness, and it doesn't hurt anyone to have a nice clear marker of that fact in the code.
This isn't really related to javascript.
I'm a bit worried apple is not going to release another version :(
I'm curious, why do you say this besides for the purpose of trolling? What has brought you to this opinion?
Underscore is the worst part of backbone :( I wish they namespaced their code
Amazing! I may try something similar for a game project I'm working on.
yeah, there are some really good ideas in this code. I've also been working on entity based engine. Looking at https://github.com/powerc9000/head-on.js/blob/master/head-on.js#L97 it's cool to see you just wrapped a whole inheritance system right in to that method with like 2 key lines of code. I think that code can be cleaned up a bit but i really love the idea.
True, but I think it's extremely rare that somebody would hold on to an availability flag, yet remove all references to the object whose availability the flag was checking. Still, there's nothing wrong with adding `!!`, I'm just saying the behavior will be the same in either case.
*must not reply...* the stupid...it burns.. **dammit** I promised myself I wouldn't reply
TROLOLOLOL
I might be missing something, but why would someone implement this without using fixed positioning on the sticky sidebar? (not doing so causes the side-bar to need animation which inevitably lags behind the scrolling...) 
Nevermind. I see in the comments that &gt; IE6 doesn’t support fixed positioning. and &gt; it works on older iOS and Android 
Don't fix the features D:
I'd be perfectly happy if Apple Update stopped annoying me on my Windows box, but I'm a bit biased now that I'm running Windows as VM on an iMac. Is it seriously useful to test on Safari in Windows? I feel like it's such a niche market that it's better to just acquire a Mac. I guess it's a lot cheaper if you're working on a budget.
I work on a Mac. Actually, the tests were run on that Mac, just on a bootcamp install. I could have tested it in OSX easily, but I couldn't test IE on a Mac, and I wanted to keep the platform consistent for the same of accurate comparison.
Can you provide a source? Everything I've read says every Number is stored as a float64, but I haven't found anything particularly reputable.
I'd be curious to see how Mac and PC versions of the same browsers fare against one another.
how about cross platform tests for each browser..? :)
Can't give you access to the URL unfortunately, it's an IBM internal helpdesk queue. However, I've found that reloading the frame this list shows in has the desired effect. The name of the frame is "listframe". It also seems that window.onload isn't having the desired effect and kicking off the script, is there an easy alternative to get the script running? Once it's going it should keep running anyway, so I don't really mind how this works.
I don't know C++ and my C is very rusty - I skimmed through V8's source anyway but couldn't find anything definitive. I think it will suffice to say that, even if javascript does in fact use ints sometimes, its bitwise operators aren't as blazing-fast as other languages, and thus it's a good idea to do some performance testing before "optimizing" in that way.
that's bullshit, it doesn't matter how widespread it's still confusing, pointless and retarded. more people doing it just means there's more retarded people, things don't become better out of adoption if they were bad from the start. if you want a boolean create one, end of story.
Great! Although, it doesn't work with re-sizing the browser. That can be for v2.0!
[Here](http://www.youtube.com/watch?v=UJPdhx5zTaw) is a talk from Google IO about how V8 optimizes JS. It talks about Number around 15:45. TL;DR: Google's V8 uses Int31 (notice the 31-bit), when that overflows, it get converted into a Double. 
This stuff changes so fast now, with the frequent browser releases. Here's some quick tests I just ran on my machine: SunSpider Safari 6: 179.3ms Chrome 21: 190.3ms Chrome 22 (Dev): 185.7ms Firefox Nightly 17a1: 213.3ms Opera 22: 225.9ms Kraken Safari 6: 3061.3ms Chrome 21: 2588.5ms Chrome 22 Dev): 2571.4ms Firefox Nightly 17a1: 3992.9ms Opera 22: 7656.6ms
I cheated: http://i.imgur.com/gvCvg.png 1. Open the console and type in $("#btnGo").trigger('click') 1. Hover your mouse over one of the squares 1. Hit return on the keyboard then click as fast as you can. If it's the wrong one, start over til you get it.
0.266 - do you play star craft? Lol. Nice flavor.
This is a lot harder with a touchpad. :/
0.4 sec :D
Look for "SMI" in V8 — though if your C++ isn't that great it's probably not that easy to understand how it works. Googling for "v8 SMI" seems to yield some interesting things. [Here](http://jsperf.com/bitwise-around-max-int/2) is some JSPerf tests showing perf behaviour around max-signed ints. In all browsers, dealing with doubles is slower than with ints (as you'd expect; you have the overhead of conversion if nothing else). Note that results may well differ between architectures. The big difference between JS and other languages, both in general and in this case, is the overhead of type-checks, I presume. There's certainly nothing fundamental otherwise.
no prob!
He's been a user for one year, and has -130 comment karma. I seriously doubt that there *is* a purpose besides trolling.
oh wow that makes total sense. I've updated my if statements. Thanks!!
You should make on of the tiles turn blue randomly to trick the user
The only pitfall I see with this method is that it won't replace &amp;gt;1 instance -- but per the question, it seems that's not required. So, cheers for a sane approach; I was going to suggest the ugly `src.split('thumb').join('large')` approach.
It's just JS script, so it works just like your original script that you spit out with RegisterStartupScript. StringBuilder cstext1 = new StringBuilder(); string script = @" &lt;script type='text/javascript'&gt; var oldHandler = window.onerror; window.onerror = function (msg, url, num) { var rex = new RegExp('/layouts/sp.ui.rte.js'); if(url.match(rex)) { return true; } if(oldHandler) { return oldHandler(msg, url, num); } else { alert(msg); } return false; } &lt;/script&gt; "; cs.RegisterStartupScript(this.GetType(), "Alert", script); 
1. Indent your code properly! That's difficult to read. 2. You're assuming that there is no sentence greater than 995 characters (and that they're all properly punctuated). If there is *no* period within the first 995 characters, your code will make ``i`` negative, and what happens when it hits ``INT_MIN`` may actually vary from implementation to implementation. Does it go to ``-Infinity``? ``NaN``? ``+Infinity``? ``INT_MAX``? Some of these cases may cause it to kick out of the while loop. In your final ``else`` where you decrement ``i``, ``console.log(i)`` to see how your loop is actually running. Does it ever go negative? Beyond that, there's probably a better way to do your word-wrapping algorithm, using a few variables to track state: a positively-incrementing ``i`` bound between 0 and the text length (so, a ``for`` loop, instead), a ``lastLineBreak`` variable (initially -1) a ``nextPeriod`` variable (which is set only when a period is encountered), and a ``nextLineBreak`` variable (which is set on any period, comma, space, or other punctuation). Then if ``nextPeriod &gt; lastLineBreak`` you ``slice(lastLineBreak+1, nextPeriod)`` and set ``lastLineBreak = nextPeriod``, otherwise you ``slice(lastLineBreak+1, nextLineBreak)`` and set ``lastLineBreak = nextLineBreak`` in case there was no period within that whole 995 character span. Finally after the ``for`` loop you ``slice(lastLineBreak+1, textHunk.length)`` the final portion of the string.
links text-based web browser. I'd use it all the time but dang JavaScript controlled logins and session based garbage high tech always get me.
Javascript has local variables too, but it has function scope instead of block scope. The difference is, that in languages with block scope, if you did something like function forTest(){ for(var i = 0; i &lt; 10; i++){ var test = "test" } } the variable "test" would be available inside the for loop block only. In Javascript, it would instead create a new variable in the scope of the enclosing function, if there is one, or in the global scope if there isn't. So basically the above code behaves like this in JS. function forTest(){ var i, test; for(i = 0; i &lt; 10; i++){ test = "test" } } I've made some changes to your code that you can see [here](http://jsfiddle.net/fe4Wy/). There are still some other things that can be improved, but this is a start. Also, be careful with naming variables 'i', because it's often used as a counter in loops (like in the examples above) and then over-shadows the outer 'i' variable.
That's a neat, concise hack though and it supports /g behaviour.
What should it do if there is no period in the first 995 characters?
There will be an extra space at the beginning of your output. Ex: I enter "John", and fullName becomes " John". Then "Smith" and fullName becomes " John Smith". Edit: although I see the console.log accounts for that space... but fullName shouldn't really contain a space should it?
I can move fine on the map, but the horizontal world doesn't move. Works in Firefox, but not Chrome. I noticed I sometimes get hung up on wooden blocks and the ? block at the top of the pyramid in the first zone is not 'hittable'.
Thanks for noting those issues. 1- Even after refreshing you still can't move? Try clearing out your cache if nothing else works. 2-About the other issues: There are still a lot of things that need to be implemented, and the getting hung up problem is still something we're working on 
Cut off at the 995 character limit
Right now the source isn't, since we're working on a multiplayer spin-off, but the graphics are
If you're talking about how WebSockets are implemented in actual browsers, they do open up a new connection when you do something like: var ws = new WebSocket("ws://www.example.com"", "myProtocol"); You can see this in action if you go to any site that uses WebSockets (like [this websocket echo server](http://www.websocket.org/echo.html)) and open up something like Chrome Inspector while on the page. Go to Network -&gt; WebSockets, and you can see the WebSocket handshake connection information there.
I wouldn't place too much value on "official" HTML5 standards, many of them are still in works in progress, particularly WebSockets. Many web browsers themselves often blatantly ignore parts of the standards since they're ridiculous (see things like [initMouseWheelEvent](http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-MouseWheelEvent) with 14 different parameters). I can test to see if your particular use case works on existing WebSocket servers, like the [Node.js implementaton](https://github.com/Worlize/WebSocket-Node). I'm pretty sure it would still work, but I'm just curious, though, what exactly are you planning on doing with this? 
Why are you making http requests with WebSockets?
There's a Webserver (Mongrel2) which handles both HTTP and WS. We're just doubting, currently, if it is OK or not to accept WS after HTTP, since this significantly simplifies a small part of the design.
I like flying a lot a lot
To clarify: I'm working on the M2 implementation.
I think where you were getting confused is the difference between comparison and logical operators. "==" is a comparison, "&amp;&amp;" is a logical. A comparison will typically return a boolean value, while a logical will do something based on the values.
I just stayed crouched the whole time, so I didn't have to accidently miss the smaller blobs. made it much easier. 
More so that in all other languages I have experience in, as soon as &amp;&amp; is between 2 or more values, it becomes a bool. $a = (true &amp;&amp; "test"); In php the above $a would be true, not "test".
Yeah, that was something I took from the D3.js style. Personally, I'd write a check with `typeof`, but I guess `~~` is kind of pretty if you're into that kind of thing. It looks like `~~` coerces to a Number, else zero. The `~` operator basically does: -(n + 1) So: -(-(n+1)+1) --&gt; -(-n) --&gt; n Here's some more info on other seldom-used JS operators I found in searching for a good answer to your question, if you're interested: http://timmywillison.com/pres/operators/#tilde
Smarter
Oh I see, I had thought you implemented that yourself. I've used D3 some and they do have some conventions that I haven't really seen before. My best guess is that `~~` is a safer version of `Math.floor()`, in that even if the input is `undefined`, `NaN`, etc. it'll still return a number. So, not only do you avoid a method call altogether, you also can prevent a pre- or post-test (&amp; resulting logic). In code... (Math.floor(x) || 0); // always a number vs: ~~x; // always a number While I'm typically against code that is clever solely for the sake of being clever, this is actually an elegant solution and a possible performance boost.
I'm not quite sure. There error mentions something about D.data being null, which is located in the FusionCharts.HC.JS. Which is odd, because it will even pop up even if I'm not necessarily updating the Fusion chart, but just the Jquery widget. Edit: I'm not quite sure because I'm currently at home, and won't have access to the code until tomorrow.
I'm familiar with namespaces in a language like C# but not so much in Javascript. How does JS handle namespaces?
You could make the source be MIT, BSD or something similar so you could get help on some issues, but close the source code of the spinoff.
Here's a nice set of [SO answers](http://stackoverflow.com/questions/881515/javascript-namespace-declaration) followed by a lengthy but of course excellent [MDN article](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope)
Couldn't you just write a program that automates the left-right key presses really fast to give you max speed then manually jump?
Awesome, thanks. So it sounds like there would still be conversions when using bitwise operators on fractions or particularly large numbers, right? I really wonder what that optimization he glossed over is (the one that made the conversions "not as bad as it sounds").
You can use the HTML button element for the button. You can also assign an id attribute to the button so that you can then easily access it from the script. With the script, you would use the id attribute to [gain a reference](https://developer.mozilla.org/en-US/docs/DOM/document.getElementById) to the button, and assign an [onclick](https://developer.mozilla.org/en-US/docs/DOM/element.onclick) event to that button. In the click event you would [prompt](https://developer.mozilla.org/en-US/docs/DOM/window.prompt) the user for their name, and then [alert](https://developer.mozilla.org/en-US/docs/DOM/window.alert) the message. After that, you would use a [for loop](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for) to loop through those numbers, and you could use [innerHTML](https://developer.mozilla.org/en-US/docs/DOM/element.innerHTML) to output the result in to a div on the page. But really - your teacher should also be providing you with such resources that you need to complete such a task.
Perfectly fine. Any editor really, but like anything, basic Microsoft editors (notepad/wordpad/paint/etc) are only for the masochists.
Urg when I started I used notepad as I was told it would help me become a better coder..... More like will drive you to become a recluse on a desert island and forsake all technology.
If you ignore the fences and don't mind getting only two stars you an get 1.4 s if not less.
Can you show us a video of it happening? I'd love to see it.
Sounds like your trying to run the script on your desktop. Build a simple html file and link it to your js file Now open it up in a browser and your code should work.
&gt; confusing, pointless and retarded. No, it's part of the language. It takes 10 seconds to look up what a double bang operator is, and once you know, it is much easier to recognise. Why is 'Number = 1' used instead of 'Number equals 1'? Or 'x -= 5' instead of 'x = x-5' ? Because it makes it much easier to read, and makes complete sense when you take a few minutes to understand it. If you're still confused, perhaps you're not cut out for programming - this isn't rocket science by any stretch of the imagination.
Some of the 3d perspective on there is pretty neat!
Awesome thank you
I programmed a java robot to press left and right, did it in 0.7s with 3 stars.
Now they just need to complete the rest of Track and Field. I won't be able to slip a pencil between my fingers to use on the left and right arrows, though.
Could have cheated in any number of ways, but that doesn't seem very sportsmanlike.
 window.location = $('.bylink:eq(1)')[0].href Maybe.
[w00t! I solved it :-)](http://stackoverflow.com/a/11850486/561731)
Library author here, some points: * Frustrated by IndexedDB's API made me want something similar to MongoDB's APIs * Works only in Chrome, breaks down in FF * Feel free to hack, bug report, bug fix, fork, submit pull request, review code etc. Thanks, Sri
thanks alot, but i needed something that doesn't reload the page for next comment. only scrolls down, something similar to the way a keyboard shorctut ( jump to next parent ) in RES
Down? The parent of your comment is my comment *above*.
You are in an interesting situation; it sounds like you've learned JavaScript but know nothing of HTML! I scold codecadamy for doing this to you. Go learn a little HTML; pick up a book from your local library or read an online beginners tutorial. At the very least, you should probably learn about these tags: html, head, body, script. That would at least get you to the point you want to be, which is running JavaScript in its own (HTML) file. Also remember that for any webpage, you can right-click it and view the source code. Most webpages nowadays are very complicated but as you learn HTML you should start to recognize the elements there, and might be able to learn things (about HTML) from viewing the source and comparing it to the output page itself.
Thank you so muchh! Exactly what I needed to know!
Ya, I think I'm going to take your advice. Set the js down for a day and see what I can learn in html. Thanks!
"double bang" is NOT an operator, it's TWO bang operators in sequence. you know what's the problem here? you guys think you know a lot and don't even bother to REASON the things you're doing. I'm not confused I know exactly what you're doing and why this is a silly hack, do you? the WHOLE point of this is to return a Boolean instead of an Object, [stratoscope makes a very good point about why you would want to do it](http://www.reddit.com/r/javascript/comments/xoo17/ask_why_the_double_before_this_conditional/c5ocy98) but the thing is, it doesn't need to be done this way and your ONLY argument is "other people do it like this" duh retarded.
Why the double underscore for IDs? Also, why do you have to declare your collections in the initialization phase? I'd much rather just call a method on the DB object.
Just holding down the left and right keys makes him run pretty fast (got about 7.5 seconds). Can't jump, though.
Ok thanks, I will try that.
divs for figures? that's quite crazy :D you should consider using canvas or SVG - they are much better (and faster) for graphics in browser. I would recommend looking at that example: http://hacks.mozilla.org/2012/03/developing-a-simple-html5-space-shooter/
Thanks for the suggestion, i've been talking with the co-creator of this clone, and we've agreed that we wouldn't be doing that at least for the moment. But we'll look into it in the future
This is a cool project, but not something I'd personally be interested in using. I feel like JSON is lightweight enough that adding the extra layer of compilation isn't worth it. Still, I'm sure some will find this useful. :)
My question would be why? It looks very similar to yaml's syntax, with less dashes and a little bit of magic in object lists. Automatic html escaping saves one character (&gt;) over yaml and might break if you use non-standard tags. Basically, I am wondering what you think this offers over YAML? Tables to objects is pretty cool, but I would rather implement a custom literal constructor in YAML than use a whole new format. 
Thnx for the link. But for this project I intentionally avoided canvas and html5. The SVG's sound interesting
Oh my god, where is the sun?!!?!? just kidding
The magic for detecting object lists seems ambiguous. Consider the following. contrived: name: Jeff email: qua@asdf.com name: James email: blerg@qwerty.org association: enemy email: stupid@does.co association: mine How would parse this? Your approach doesn't seem to work for lists of objects with varying fields, which is fairly common. Regarding HTML, you have sacrificing the ability to control folding (trimming whitespace) on literal blocks. It's going to be more or less impossible to improve on yaml literals (| and &gt;). I would stick with YAML: at the price of a slight loss in expressiveness, you gain regularity, extensibility, cross-language support, data typing and an active community. But hey, writing languages is fun, have a good time working on this. 
Worked it out in the end. Here's the code that worked for me. var timerVar = setInterval (function() {refresher(); }, 10000); function refresher() { unsafeWindow.JS_RefreshWindow('refresh'); } 
Thanks for the feedback. If there could be only one format, then it would be this, since it supports everything, including arbitrarily deep nested arrays etc. array: : name: a email: a@b.com : name: b email: b@c.com : name: c email: c@d.com The other two are only worth supporting if their added complexity is worth their benefit. The table format is significantly more concise for a very common scenario, so I'm comfortable with it. The more compact format which doesn't require the extra colons is sugar, but for an extremely common case. Where the child objects have mostly the same parameters. I would typically format them this way: array: name: a email: a@b.com name: b email: b@c.com name: c email: c@d.com This saves a few characters and a full indent level, but it does cause some extra complexity. Is it worth it? Not sure, that's why I'm soliciting feedback from fellow redditors.
In case anyone is thinking about doing this in production, don't. About 8% of the male population is red-green colorblind. We won't have a clue. In terms of the percentage of users affected, this is probably the worst possible accessibility decision.
If you want to do the latter, I would make those newlines the object delimiters instead of inferring from the object properties. Much less ambiguous.
You need to get a better grasp of what your dates are representing. your examples of "2006-12-09" and "2006-12-09T12:30" are missing a timezone and as such are presuming some interpretation. Transmitting data to a machine in a different timezone, or even just switching to/from daylight savings can lead to hilarity. On the other hand "2006-12-09T00:00:00.000Z" isn't a date - it's an instant in time - ie midnight on that date in UTC. At that moment it was a different time in other timezones, and quite possibly the previous day.
* Not sure, I was thinking of auto-sync with MongoDB and I didn't want the ID's to clash. But then custom ID's do work and there's no requirement for them to be numeric. Maybe I should switch to the "_id". (: * Hmm.. I think its cleaner to declare collections in the beginning. On IndexedDB, creating new object stores means upping the version, which is async and then on success creating / deleting collections (i.e. object stores in IDB terminology) which is also async. This whole async process would mean the db instance object, which the user already uses, needs to be modified as well, which would just result in messy code. Declaring collections first conforms to MongoDB libraries in Node.js (notable MongoJS) and I personally feel its a cleaner approach. Of course API methods can be implemented for creating / deleting object stores and I need not use them.
what makes sense is to CAST A BOOLEAN in whatever way your language does it, that's what makes sense and if you pay attention you'll see that all the alternatives do that as a workaround or as a side-effect of a different operation. the `+=` IS a different operator, which acts as a shortcut but not as a side effect, it does what's meant to do and nothing else. the `%` doesn't make "sense" it's just the way it's defined but again it's an operator with a specific purpose and you use it when you want to do what it's meant to be doing. the "double bang" shit is a double negation which is NOT what you're actually trying to do that is, to cast a boolean from a truthy/falsy value. I don't really care what you use or how you call it but you're not going to argue that a workaround method makes "more sense" than actually doing what you're supposed to.
yeah I noticed that also. It must be a jsfiddle thing b/c it doesn't do that in the browser.
Just out of curiousity, how would you go about tightening it?
Cool project name. Reminds me a bit of [CSON](https://github.com/bevry/cson)
They are all just converted into Dates using the built in constructor: new Date("iso formatted date string here"); The person who declares dates needs to understand what they are representing. The parser doesn't care, if it looks like an ISO 8601 date then it makes a Javascript date object.
I am on IE9, no error found here!!
Thanks for taking the time to review the code. Line 27: Yes, i've moved the assignment above it. I won't add parentheses in that case though, because once you get used to coffeescript that really does start looking like a function call. Line 60-61: I really wish that Math.min(null, 12) returned 12, but it doesn't, it returns 0. I only need the min method for usage in those 2 locations so I will keep it to 2 args. Line 215: Good find. That code was refactored from an earlier situation where the resulting match was actually retained and used. I have converted those all to use /regex/.test string I should note, that almost always, my primary concern is readability and maintainability of code, but in this particular example, I have used some formats that I am intending to allow for better library compression. I am not expert at coding for small compile size though, and I haven't rigged the minimizers for full compression yet either. Library should fully compress down to less than 4k though. 
No problem. I probably would have had more to say but I'm not very fluent with CS (to wit, I actually read the compiled output in most cases and then found their source line in CS). With regards to final compressed size, Coffeescript does a rather poor job of generating easy to minify JS. Most of the syntactic sugar introduced does not translate well :-/
Yes, the sugar is about developer productivity, not compressed size. I think google closure will compile it all pretty well if I configure it correctly, right now the compressed file still contains all the full function names. Once you get used to the null coalescing operator it's hard to go back to plain JavaScript. I still code both regularly though. 
Got 42, enough for 3 stars. Phew!
https://gist.github.com/3292847 45 points with a little robotic help :D.
Okay, that makes sense. The class typing is a nice touch, but I don't know exactly how it fits into javascript. And that brings us to at least a few different ways of defining an object. I kind of get the impression that you're working on a really clever solution looking for a problem. And I know that's a lot of fun, so I won't discourage you.
Uglify does a better job on compiled CS than GCC/advanced_optimizations. It honestly won't make a significant difference here because the file is small, though.
Why would you try to avoid canvas? Canvas performs much faster than any DOM based rendering, and its support is already at 80% (the rest are old office desktops that aren't used to play HTML5 games anyway). Also, canvas offers a great variety of features that simply can not be done in DOM.
Managed to [score 36](http://imgur.com/XBWNV.jpg). From the free throw line you can just mash the spacebar to get an easy 10 points (12 if you score the first shot). Once you start to move back it's a matter of timing your shots with the color of the ball.
what's the use of the variable 'step'? It's simply 'tt += Convert.ToInt16(55)', or do I get this wrong?!?
This makes a lot more sense to me, too. This way, you don't need to define the top/left for the sub-menu with javascript, you can do it with CSS by adding position: relative to .main-menu &gt; li . Also, as a note on semantics, it's good to use '$' for jQuery object variables - I.e. $mainMenu = $('ul.main-menu');
Hmmmm so what colors *should* I use? I think I am going to switch to blue --&gt; red instead of green --&gt; red
I figured out a good timing pattern: initial position: no hold time (shoot n release) 2nd position: half a second hold time 3rd: 1 second hold time. i missed all but 1 doing that
Well that's what's interesting, I'm fairly sure I tried to second option and didn't have any luck. I'll try again though, maybe i fucked up some syntax somewhere. The timerID thing makes sense, I got that from a bit of code where they give you a way to cancel it too. Would window.setTimeout work in this instance? Wouldn't that only work once?
God damn this is addicting!
4 stars? **Bah**. [5 stars is my minimum](http://i.imgur.com/HIofi.png)!
If you're interested, you could check out this webcast from the Google Maps team, it's (partly) about browser performance in DOM versus Canvas, and it's quite convincing ;-) http://www.youtube.com/watch?v=7pCh62wr6m0&amp;feature=plcp
Well, that only works on success. Even if you add it to failures as well, you still have to deal with the fact that it doesn't recursively execute until the server returns. This may end up taking longer than the timeout delay, which means you have a race condition on your hands all of a sudden. So it doesn't seem like a very good idea.
dammit all of that twitter drama was funny.
What does it say in the console?
Is that python?
Oo, what macro?
You're overcomplicating it. &lt;script type="text/javascript"&gt; var sigArray = [ "./pictures/ct.jpg", "./pictures/damiensig.gif", "./pictures/Talos.jpg", "./pictures/Cooler.jpg?"]; var counter = 0; function mySignature() { document.imgSignature.src = sigArray[counter]; counter++; if (counter &gt;= sigArray.length) counter = 0; } &lt;/script&gt; &lt;body&gt; &lt;div&gt;&lt;img src="./pictures/Cooler.jpg" name="imgSignature" onclick="mySignature()" alt="Signature" /&gt;&lt;/div&gt; &lt;/body&gt;
Also this: https://gist.github.com/3297084
the Image() not being capitalized was indeed my problem. Thank you very much, you are my saviour =] &lt;3
26s fucking hard, not as easy as the hurdles, now you have to go thru the flags.
Chrome's built-in inspection and debugging tool is fantastic. I use that over Firebug.
High-five for mod operator. OP, I'd highly recommend using sigArray.length instead of 3 on the basis of maintainability: never hard-code numbers when you can use properties/functions instead, to avoid breaking stuff later when the source data changes. Even for little projects like this, do it to build up the habit.
* [dynaTrace AJAX Edition](http://www.compuware.com/application-performance-management/ajax-performance-testing.html) - Best tool on IE to debug and find performance problems, works on Firefox too. * [Google SpeedTracer](http://code.google.com/p/speedtracer/) - rendering and script performance debugging
33 got me 2 medals, and 36 got me 3. You're almost there!
[A more up to date link for when this is no longer the doodle of the day](http://www.google.com/doodles/slalom-canoe-2012)
Every step you have to add a little bit more in order to compensate for the exponential increase in distance. It isn't pretty since really these distance increases happen in chunks, but it still seems to work. It could be simplified as tt = 55*step + 1.2*step^2
Opera Dragonfly. Just right-click Inspect Element. It works on all platforms and started the remote debugging bandwagon back in 2008.
Yea, but going to add an evil bird in the nearest future &gt;:D
Another direction for BrowserDB is to treat IndexedDB as just one of the engines available in addition to WebSQL and localStorage. But this is for later, first we need to get the IndexedDB engine implemented properly.
__id is now _id =)
I would advise against that strategy, as WebSQL is dead in the water and localStorage is so limited (low storage space, synchronous access only) that it's not worth bothering with if you've already got an IndexedDB backend working. One thing that would be useful is if you could support some backend that would work in node.js, then you could write code to target your API that would run just as well server side and client side.
&gt; Well, that only works on success. The `complete` function is called on both success or error conditions and only after the callbacks are done executing. &gt; This may end up taking longer than the timeout delay, which means you have a race condition on your hands all of a sudden. What? There are **no** race conditions. The next ajax request will execute 30 seconds after the last one has completed and the data has been handled in the success or error callbacks.
Nice demo. You produce such nice work. You are a programming machine!
Thanks, realized it late
He means child and wants to XHR continue next thread, pull the new comments from the incoming DOM and inject them into the existing DOM at the right place, perhaps hiding the old comments and overriding the parent link with an event handler to unhide or just having a massive horizontal scroll pane where you would probably want to keep the link there and use some marker for clarity. That is trivial but a little time consuming (you'll have to dig around reddit page initialisation scripts to hook events to the new elements). It can get slightly complex if there are multiple continue thread links. In that case I would guess he would want something that gets all continue thread links, gets the y offset of the window scroll pane, then finds the nearest link to that that has a higher y offset and expand it. I wouldn't bother with any of that unless he decides to be more specific about exactly what he wants. There's a reason for the max depth + continue thread feature.
Fair point about WebSQL and localStorage. This is anyway not the priority. Support for server side backend? I'm not sure we need another NoSQL option. Compatibility of code running on server and browser should perhaps be a job of another library? Ideally I'd write code to manipulate data on the browser (w/ BrowserDB) and there is a server side extension that automatically syncs it up in the background.
What is the difference between mobify.js and jQuery Mobile, Dojo Mobile, MooTools Mobile, Titanium Mobile, The-M-Project, xui.js, EmbedJS, DHTMLX Touch, Mobilize.js, ChocolateChip Mobile, and finally, [this](http://www.distractable.net/coding/iphone-android-web-application-frameworks/)?
"It's new, standards compliant, available on github, open source, easy to install, update and configure! Fork it now! Works with PHP, JS, Wordpress and iTunes!" "But what does it do?" "It's new! And easy to use!"
jsbin is really cool for prototyping little snippets and has a nice auto-run feature that gives you immediate feedback. Also you can easily share bins with people
In addition, google just released the JS leak finder to spot parts of JS that are prone to memory leaks in the garbage collection: https://code.google.com/p/leak-finder-for-javascript/
So many things "change the way I think" these days. How do you know how I think?
&gt; This entry was posted by Rebecca Murphey A sign of quality, I always enjoy her articles. &gt; submitted 19 hours ago by rmurphey Oh....hi! I had no idea you were a redditor. I'm tagging your name now!
Not really supported on any client too well though.
http://pastebin.com/ and a million similar services :o)
Hmmm, I need something that can run the entire code base, which is divided into many files. The issue I am having is regarding a strange bug in chrome when using bit blitting techniques with the canvas tag. Do you know of something that meets that requirement?
I wanted this API yesterday. There's a lot of potential here, imagine things like creating an instant phone campaign application, like what happened with the SOPA e-mail campaigns. 
Get to the point, less buzz words. Gotcha :). One thing to note is that you can also use it *with* responsive instead of using mobile templates - so for example, detecting the iPad and swapping out elements to be more touch friendly, or using it to control what resources are being loaded (prevent scripts from running on unnecessary devices, pick the right images for the screen size before they get loaded, etc).
The big thing that sets Mobify.js from most of those frameworks is that it doesn't require you to rethink your desktop site from scratch, and it also allows you to keep one domain for the entire site - no more m., mobile., tablet. subdomain madness. You inject a tag into your site, which does some neat tricks to stop the page and all of it's resources from loading, and then your adaptations kick in (which can either be complete re-dos of certain pages by selecting content from your original site and place them in new mobile templates, *or* it can just be modifications to the dom before the page is loaded). It's important to note that we're working *with* responsive design, not discouraging it - we use responsive on cloud.mobify.com and on mobifyjs.com! But we understand that responsive design isn't the only solution to all of the problems out there, which is why Mobify.js is meant to be very flexible in order to help a wide range of website. We're doing whatever we can to make the mobile web a better place :) Here is a great slidedeck from Brad Frost on the issue of adaptive design, and how responsive fits into the bigger picture: http://bradfrostweb.com/blog/mobile/beyond-media-queries-anatomy-of-an-adaptive-web-design/ We also have a bunch of UI modules we've been developing that you can use stand-alone. So far we have a mobile friendly carousel and accordion, you can check them out here: http://www.mobify.com/mobifyjs/modules/carousel-examples/ http://www.mobify.com/mobifyjs/modules/accordion-examples/ 
The github link goes to github.com/you Nice demo though!
I found some information here. http://stackoverflow.com/questions/478799/upload-file-directly-to-s3-with-progress-bar It doesn't look like there are many pure JS solutions, unfortunately.
I prefer when you retain the mouse's offset while dragging the element. http://jsfiddle.net/TMRmZ/6/ (also, I moved the declaration of updatePosition one block out so that it's not being redeclared every mousemove)
I figured a code snippet that'll work in the address field may be easier than getting it implemented in RES.
Does it have to be cross browser compatible? If not, you could use the FileAPI that FF (and I think Chrome) support.. they won't work on all browsers/versions but if you're not looking for that.. 
There may be an existing solution already, but I'm working on something similar as part of a personal project. My project is much more complicated than this, so bare with me, but the general flow would be something like this: 1. **Upload image:** You can use the browser default, but uploadify, swfupload, that jquery one, etc are good options, as well. I'm using uploadify for my project, as it's fairly easy to style, config and allows multi-file selection with a flash fall-back. 2. **Back-end Script:** I'm using PHP, because that is what I'm best at, but basically any language works (Ruby, Perl, JS (through node.js, and the like), ASP, etc... This script will need to do a couple things: validate the file, save the file to a temporary directory, create a new record in the database, perform the crop (step 3) and upload to S3 (step 4). 3. **Preview image:** Display the uploaded image, and present the cropping tools. I'm using [jCrop](http://deepliquid.com/projects/Jcrop/demos.php) for my project. When the user applies the crop, I send the co-ordinates to my back-end script which performs the actual crop on the image. I would suggest using a library or framework to handle the grunt work - I'm using zebra_image right now, but am interested in trying [Image Workshop](https://github.com/Sybio/ImageWorkshop). 4. **Upload image to S3:** When the user indicates they are done cropping the image ("Save" button or whatever), notify the back-end script which will perform the actual upload to S3. I'm using [amazon-s3-php-class](https://github.com/tpyo/amazon-s3-php-class/) to handle the details. I'd recommend that you update the image's database record to include the new S3 URL, as well. 5. **optional: Remove local temp image:** Once the image has been uploaded to S3, you can probably go ahead and remove the temporary fie locally. 
Note: The "flaw" doesn't happen in an xml serialised page when the code is wrapped in a CDATA section.
I really like the doNotWant() function. It should be a part of the EMCA 5 standard.
I have been planning to add this feature to a web app of mine for a while, and this is the way I planned to do it. Good to know I was on the right track.
I think the description confuses the render tree with DOM tree, which made me re-read it several times. This is 'just' a HTML parsing problem. The first occurrence of the sequence &lt;/script inside a &lt;script&gt; element ends the element. The HTML parser is not even supposed to try to parse javascript, it does not and should not know about JS syntax. But, yeah, inserting arbitrary strings into &lt;script&gt; elements is a problem.
&gt; XSS
thanks a lot MicronXD! I hadn't gotten to it yet (still getting the css menu just right), but you are right, the movement was choppy. Thanks so much for editing my fiddle and making the movement so smooth. much appreciated!
&gt; It currently displays as 1000.0k which is not correct. Why do you feel it's not correct? It's absolutely correct. What are you expecting? 999.99k? 999,999 - 999,990 represents a rounding error of 9, whereas 1,000,000 - 999,999 represents a rounding error of 1, which means it's the correctly rounded figure, a closer approximation of the true value. 
Sorry to be nitpicky, but can you show me what part of the Ecmascript spec causes this? Or what section of V8 or SpiderMonkey have this flaw? If you find yourself scratching your head, think about what sits between your server and the JavaScript in this case. If you still don't have it see if the same problem persists if you extract the JavaScript into a separate file and include it with a src="" attribute.
assuming the PDF interface for js is similar to the one for HTML what you should do is to attach a callback to the `change` or `click` event of the checkbox and inside it get a reference to the text field, usually with `document.getElementById` and then update its `value` attribute.
This is basic, ground-level XSS. As basic as it gets. It's not a 'security flaw' in javascript so much as it is the expected behavior of embedding javascript in an HTML page. And if you are trusting user input without filtering, you are doing it wrong. Also, the title is misleading. 
Try something like: $('tr').filter(function (index) { var cells = $(this).children('td'); cells.each(function () { if (this.innerHTML.indexOf('foo') &gt;= 0) { return true; } }); return false; }); This is untested, so use at your own risk. :P 
Dammit, jQuery team. Stop being so fast, efficient and regular with these releases!
I haven't had time to test this yet, but reading the log it looks like they just depreciated/changed the function .data() ? Damn it! I've just written a few sweet functions that rely on it! :(
Only for events retrieved through `data('events')`, rest of the functionality is untouched.
Great improvements all around. But I don't really see myself using the new modular build your own jQuery feature. It seems that it would be better to take advantage of the commonly used and well cached CDNs available then to try a save a couple kb on the core library. Just promise me that the nice new modularity feature wont be used as an excuse to introduce a huge amount of bloat (e.g. jqui).
I'm really looking forward to version 2.0 when they drop support for IE 6/7/8. The smaller and more efficient code base resulting from that would be perfect for mobile websites.
With this (1.8) plus the latest jQuery IU (1.8.22, I think) my dialog box buttons have lost their text. Anyone else seeing this?
Submitted my first bug report. :)
Showing my age perhaps, but this was a common pattern 'back in the day': document.write('&lt;scr' + 'ipt src="foo.js"&gt;&lt;/scr' + 'ipt&gt;'); You kids and your fancy loaders and whatnot!
Thank you all
I'm gonna miss .data('events') $('#test').data('events').click[0].handler is now $._data($('#test')[0]).events.click[0].handler
28 first try, can anybody make a script to play it?
I know. I realized afterward that that's all I really needed. It bugs me that I would have to set up a new fake account though. Oh well.
Well, this is just incredible.
I've thought about this, but you don't solve the problem of distributing the bandwidth load -- just the CPU load. As the author describes, it's an HTTP-style interface built on top of websockets between the "Browserver server" and "Browserver browser". The "Browserver server" is basically acting like a reverse proxy and forwarding appropriate requests down to the appropriate browser, and then forwarding the responses back up to the originator. So there is a single chokepoint in the whole architecture unlike with "regular" Node.js apps that can be a pure HTTP server or client to any other HTTP server or client, and communicate directly. This issue won't really be solved until browsers start supporting the [PeerConnection API](http://www.webrtc.org/reference/api-description) where the "Browserver server" would only be involved in the handshaking to establish the communication between the browser and the remote client. Then the bandwidth load on the "Browserver server" wouldn't be equal to *N* connections times *M* bytes of data per connection, but would instead be *N* connections times some small constant bytes of data per handshake, and therefore simpler to scale.
holy shit
[WebRTC](http://en.wikipedia.org/wiki/WebRTC) looks both exciting and terrifying. As a gray-hat hacker, this looks like a giant exploit target, that will take a long time to mature security-wise. This will make it possible to have multi-player javascript games. It will also make it possible to have browser-based botnets.
I agree, but things like WebSockets and AJAX *already* mean that you can end up using who-knows how much bandwidth on any particular website, so that's not a problem here (that we don't already have, at least). And since PeerConnection still requires a central host to do the handshaking between the peers, that means anything nefarious will still have a single keystone that can be killed and taken down. Also, anything nefarious (like a DDOS botnet exploiting your bandwidth) will only run while the web page is open, which is "better" than getting pwned by a virus and running that kind of code "raw". But that will still probably be an issue because all someone has to do is scrape some free porn off the internet, put it up on their domain, and run the botnet in the background while people are "recreating."
Since curCSS was an alias for css doing a simple find-and-replace of css for curCSS resolves any issues.
I tried that. I still had issues.
That's exactly it though, the 'string' is created by the person who created the site. You can't XSS your own site. If the string is sourced from user input then it doesn't exist while the HTML is being parsed, and there is no problem. The article says that the problem arises when you add user controlled strings directly into the page, but that's simply because he isn't escaping the user input. You don't need to sanitise it. Infact you don't even need to escape it if you're using CDATA sections as you should be, or if you use an external JS file.
Tempted to create a node.js browser and just call it "turtles"...
My apologies. I replaced the curCSS with css in 1.8.21 not 22 so when I switched it over to 22 it worked fine. Thanks!
How much do you actually know? What are you using js for? Are you building your personal website with fancy effects created by js, or are you trying to create html5 game, etc ? What kind of scripts have you been looked at?
You got the link syntax backwards. \[Description\]\(url\) There's formatting help on the lower right corner of the reply box if you're ever unsure.
There's [codeacademy.com](http://www.codeacademy.com)
This is where I'm at in the tutorial http://www.webmonkey.com/2010/02/JavaScript_Tutorial_-_Lesson_4
This is very awesome, but why do you assume that I have OS X ? 
 Loved this dorkish code tromp through english lit... Some code and comments I plan on reusing: while(tally++ &lt; enormity) and the Bard's comment: //By divination set adjoining members pure genius! 
I wonder why it needs java, ruby, and apparently python for the installer as well... It does look pretty neat though and the site is shiny, so that's cool.
I'd also recommend setting up your editor or IDE with JSLint or JSHint to run after ever save. That will keep you from making a ton of simple mistakes, like omitting semi-colons.
nearest? so what would you round these to: 400 1400 1600 
OK, here is what I got so far: http://jsbin.com/amudot/13/edit take a look, run some numbers, if it's not what you need, we can tweak the rules
Fair enough.
I got it from the bugfix the UI team just posted, so they're pushing it into 1.8.23.
Not really. You might want to subscribe to /r/CarlHProgramming and look into his [totally free courses](http://www.computerscienceforeveryone.com/). Major props to that redditor.
Coooool!
You say you have some upcoming larger-scale projects, I recommend looking into using a JavaScript framework. I like jQuery &amp; Backbone.js.
That looks a great site. Would it get confusing learning C along side JavaScript? 
I would recommend Sublime Text 2 it's free to use (You have to "pay" for it but it has an unlimited trial.) best editor out there in my opinion.
This website has a pretty short collection of tips for exactly the problem you're having: http://callbackhell.com/ In short: * Used named functions when you find yourself indenting too much. * Keep code shallow with lots of tiny functions. * Split up your source code into modules that all each do exactly one thing. Use a module system to stitch everything back together again.
&gt; node.js &gt; ... &gt; It's not an effective file server. Except that lots of sites are using node to serve files already. There are lots of modules on npm for this already like ecstatic, express.static, and st to name several of many more. Plus it's really easy to stream a file from disk without buffering the whole thing in memory, since you can just: res.setHeader('content-type', 'text/plain'); fs.createReadStream('file.txt').pipe(res);
it might not be to everyones taste, but the closure compiler when used properly is an incredible tool. statical analysis and type information is a great boon. this guys framework is not using it properly, but hey, i have no problem with the dependency on python and java which closure comes with due to the benefits.
He can also go to [this page](http://www.jshint.com/platforms/) and choose [the plugin he needs](http://sourceforge.net/projects/jslintnpp/).
Javascript is a [C-like language](http://en.wikipedia.org/wiki/List_of_C-based_programming_languages). Many of the concepts will carry over with minor syntax changes / differences.
agreed, this is not a Javascript inconsistency however Javascript on its own is pretty messy and the differences in browser implementations make the original problem exponentially harder.
I used the term "darkside" in the sense that something is hidden or obscured. I don't mean to imply this is a problem with JavaScript but instead I wanted to show that browser implementations can differ in quite profound ways. I was just playing around when I tried case `c` and then `d` which I thought produced a very odd side-effect in Safari and Chrome. Even then, I didn't think of publishing these results until I stumbled upon the two very strange cases `e` and `g`. Both show behavior in several browsers that is very difficult to explain. The `eval` should never even execute, yet it is modifying the behavior of the function it resides in. To answer your final question: In browsers that support strict mode, attempting to access `function.arguments` throws an error and, as the portion of spec you quoted specifies, changing `arguments` doesn't change the value of variable that is already bound to that argument.
Part 2 shows an unambiguous bug in Opera/Safari, at least. I'm not sure the side-effects of `eval` are defensible per spec, either.
So this is ... what, a native implementation of $.extend on objects, so you can assign multiple properties to an object at once?
Yes. So that those properties are thereby added to the prototype chain allowing all children to have those properties.
we had good results implementing the factory pattern via jquery ui to modularize the code and used knockout for databinding. no matter technique you pick...what you need to modularize the code. the widget system or the.module pattern are.good approaches jquerys deferred system helps a lot with callabacks and async behavior
 Checkout: https://www.filepicker.io/demos/ 
Yes, you're missing a lot - it's a top down shooter, with lightning effect, it's raining, and your charter has a flashlight on the gun they have.
:≡
Just wondering here, but this has been bugging me for a good couple of weeks: what happened to #javascript? For some reason, and I've tried to connect with more than one irc client, I cannot connect to the #javascript channel because I apparently need an invite. Is this just some problem I'm having, or has the channel gone 'private' (I'm unfamiliar with most irc lingo)?
You don't need a module for that.. Just properly structure your code so that you have proper closure and define those callbacks as reusable functions
To cut down on channel spam, ##javascript now requires that you are registered with [NickServ](http://freenode.net/faq.shtml#userregistration) first. From what I hear on freenode, several language-based channels have the same requirement.
I'd like to submit my proposal: (\\/) (°,,°) (\\/)
His claim that "does nothing because = won't over-write or shadow a inherited read-only property" is not true in my experience. Here is a [fiddle](http://jsfiddle.net/DxSFJ/) showing his example. I recently encountered this exact situation and find if I want a read-only property like this, I need to define it at the "leaf" object in the prototype chain, otherwise child objects will shadow it.
You're library looks simple and useful, two things I really like in a library, but: Please don't modify the Function object with a library you plan to publish for general consumption, unless you are implementing an Ecmascript spec library for backwards compatibility (a real polyfill). Adding new methods to built-ins that aren't expected to be there is just as rude as writing those functions in the global scope, and possibly more subtly damaging. If your methods overwrite mine, I have no clear way to figure that out. Later on if one of these method names conflict with an addition to the standard library yours will override the default behavior and potentially break programs when introduced to the codebase.
After thinking about this more, I think I understand the security risk. The idea isn't to get the site to run your JavaScript on your machine, but rather on someone else's machine. For example, let's say I could do this trick on my facebook profile, and the code would run anytime someone looked at my profile. That would give me a hook to view their cookies or do something else malicious.
Is your slideshow html setup in the same way as the mooflow examples? If it is, all you need to do is initialize the class on page load window.addEvent('domready', function(){ var mf = new MooFlow($('MooFlow'), { //$('MooFlow') is shortcut for document.getElementById so your carousel must have an id of MooFlow startIndex: 5, useSlider: true, useAutoPlay: true, useCaption: true, useResize: true, useMouseWheel: true, useKeyInput: true }); });
Switch the order a little bit and it becomes much easier: 1. User uploads the image to S3 via form post (http://docs.amazonwebservices.com/AmazonS3/latest/dev/UsingHTTPPOST.html) 2. Use javascript to grab the image and display it as required using CSS and/or canvas 3. Use an ajax request to store the cropping details. This way you are only using javascript and the user can always change their cropping preferences.
Yea, I haven't had time to integrate all of Closure's goodness. I'd like to provide a "sasquatch lint" command to provide js warning/error reporting. Do you have suggestions on what I could be using the type info for?
Ok, I can see how the dependencies were brought in over time and I do agree that the closure compiler is really useful. Yeah I have all three installed on a dev box, but my servers are only little 512 linodes so I like to keep them as minimal as possible to keep them snappy. That's why for my use case I can't really justify installing three languages on small servers just to run a javascript framework. Thanks for your reply though, I will be checking out the code later in the week and having a mess around anyway. 
I waited for it to animate again and say "I just met you"
This caused my galaxy nexus to lock up and restart... 
I'm posting the updated solution here. This will, in a smart way, build your columns with the lowest possible height and maintaining each category's collection. Give it a run with JSFiddle here, play around with the data set to see how it will choose the best column groupings. Try changing the max columns and size of the item sets to visualize how it's working. It can probably be cleaned up a bit, but here it is: ----- http://jsfiddle.net/uuDsP/ var categories_object = [ {name: "cat 1", items: ["item 1", "item 2", "item 3"]}, {name: "cat 2", items: ["item 1", "item 2"]}, {name: "cat 3", items: ["item 1", "item 2", "item 3", "item 4", "item 5", "item 6"]}, {name: "cat 4", items: ["item 1"] }, {name: "cat 5", items: ["item 1", "item 2", "item 3"] } ] var MAX_COLS= 3; var smallestCategoryColuns = function(categories){ var columns = []; // global depth var depth = 0; // initialize for (var i=0; i&lt;MAX_COLS; i++){ columns[i] = []; } // discover largest depth for (var i=0; i&lt;categories.length; i++){ var catDepth = categories[i].items.length; if (depth &lt; catDepth){ depth = catDepth; } } // order descending size for (var i=0; i&lt;categories.length-1; i++){ for (j=i+1; j&lt;categories.length; j++){ if (categories[i].items.length &lt; categories[j].items.length){ var temp = categories[j]; categories[j] = categories[i]; categories[i] = temp; } } } // construct columns for (var i=0; i&lt;categories.length; i++){ var lowest = 0; var insertDifference = null; // scan for lowest best insertion for (var j=0; j&lt;columns.length-1; j++){ var currentColDiff = depth - getColumnSize(columns[j]) - categories[i].items.length; var nextColDiff = depth - getColumnSize(columns[j+1]) - categories[i].items.length; if ((currentColDiff &gt;= 0 &amp;&amp; currentColDiff &gt; insertDifference || insertDifference == null) || (nextColDiff &gt;= 0 &amp;&amp; nextColDiff &gt; insertDifference || insertDifference == null)){ if (currentColDiff &gt;= 0 &amp;&amp; currentColDiff &gt;= nextColDiff){ lowest = j; insertDifference = currentColDiff; } else { lowest = j+1; insertDifference = nextColDiff; } } } // increase global depth, scan for lowest-new-depth insert if (insertDifference == null){ for (var j=0; j&lt;columns.length-1; j++){ var currentColDiff = depth - getColumnSize(columns[j]) - categories[i].items.length; var nextColDiff = depth - getColumnSize(columns[j+1]) - categories[i].items.length; lowest = currentColDiff &lt;= nextColDiff ? j : j+1; } depth = depth + categories[i].items.length; } columns[lowest].push(categories[i]); } return columns; }
I'm not 100% sure what you're asking for but here's an attempt var items = { "cat 1":["item 1","item 2", "item 3"], "cat 2":["item 1"], "cat 3":["item 1","item 2", "item 3","item 4"], "cat 4":["item 1"] }; var numCols = 2; var cols = []; var i = numCols+1; while (i--) cols[i-1] = []; var cats = Object.keys(items); var totalItems = cats.map(function(catName) { var list = items[catName]; return list.length; }).reduce(function(a,b) { return a+b; }) + cats.length; var colSize = Math.ceil(totalItems/numCols); var count = 0; cats.forEach(function(catName) { var list = items[catName]; cols[Math.floor(count/colSize)].push({type:"title",name:catName}) count++; list.forEach(function(item) { cols[Math.floor(count/colSize)].push({type:"item",name:item}) count++; }); }) console.log(JSON.stringify(cols,null," ")); and here's the output [ [ { "type": "title", "name": "cat 1" }, { "type": "item", "name": "item 1" }, { "type": "item", "name": "item 2" }, { "type": "item", "name": "item 3" }, { "type": "title", "name": "cat 2" } ], [ { "type": "item", "name": "item 1" }, { "type": "title", "name": "cat 3" }, { "type": "item", "name": "item 1" }, { "type": "item", "name": "item 2" }, { "type": "item", "name": "item 3" } ], [ { "type": "item", "name": "item 4" }, { "type": "title", "name": "cat 4" }, { "type": "item", "name": "item 1" } ] ]
Not exactly what I was looking for, but sure useful. For what I had in mind the output for you test var would be something like: cat 1 cat 2 cat 3 item 1 item 1 item 1 item 2 item 2 item 2 item 3 cat 4 item 3 item 1 item 4 The result must be 3 columns with about the same height.
~~I'm still confused why cat 2 has cat 4 within it's set though?~~ Oh - the columns can contain multiple categories.. That is why cat 2 is in the same column as cat 4? I was thinking that represented category 2 containing items 1, 2 and cat 4 EDIT
Correct! I'm thinking about looking for large categories first, put them into columns, and than use the smaller categories to fill them.
Nice find, I made a dirty linear solution which I need to clean up a ~~little~~ large bit. var rowItems = Math.ceil(totalJobs/3); var cols = { 1: [], 2: [], 3: [], } var tmpColCount = 0; var curCol = 1; // First create a list with category id's and the items lengt, to get the categories with the most items first. var categoryCount = []; each(categories, function(k,v) { categoryCount.push({'key' : k, 'value': v.items.length}); }); categoryCount.sort(function(a,b){ return b.value-a.value }); // console.log(rowItems); // Now that we know which categories have the most items, we will split them into different columns. var itemsInCol1 = 0, itemsInCol2 = 0, itemsInCol3 = 0, col1 = [], col2 = [], col3 = []; each(categoryCount, function(k,v) { // Is there room in col1 ? if ((v.value + itemsInCol1) &lt;= rowItems) { // add the category in col1 col1.push(categories[v.key]); itemsInCol1 = itemsInCol1 + v.value; } else if ((v.value + itemsInCol2) &lt;= rowItems) { // add the category in col2 col2.push(categories[v.key]); itemsInCol2 = itemsInCol2 + v.value; } else if ((v.value + itemsInCol3) &lt;= rowItems) { // add the category in col3 col3.push(categories[v.key]); itemsInCol3 = itemsInCol3 + v.value; } else { // Look for the smallest column and put it there! switch(Math.min(itemsInCol1, itemsInCol2, itemsInCol3)) { case (itemsInCol1): col1.push(categories[v.key]); itemsInCol1 = itemsInCol1 + v.value; break; case (itemsInCol2): col2.push(categories[v.key]); itemsInCol2 = itemsInCol2 + v.value; break; case (itemsInCol3): col3.push(categories[v.key]); itemsInCol3 = itemsInCol3 + v.value; break; } } }); 
I can see how that would work. Yeah well it will definitely work with 3 columns, and if you don't give a shit about anything more or less, do it up.
Wait, doesn't this still require a proxy socket?
Javascript is similiar to C regarding the syntax, but not regarding the concepts! Javascripts lacks all the low-level stuff and you shouldn't learn C by now. Just learn Javascript until you know exactly what you do and until you can solve a lot of problems with it. THEN move on to C and dig deeper into the low-level stuff. 
I sat down and read all of this book in a bookstore, went home and bought the ebook.
Javascript is also an interpreted language so you can do things that would not compile in C: (function(){alert("hi there!")})()
Just make sure to learn the underlying concepts about why that little script you wrote/copied works and not just the top level data structures.
If you use TextMate you can have it run JSLint against your code every time you save :D
A decent editor/IDE should be highlighting basic syntax errors for you. As others have suggested, a linter is also a good idea as well to check for style errors, poor habits, etc.
Well if you were doing something like: var counter == 0; Your editor/IDE should be catching that; if not you need to switch to one with better syntax checking. If you already defined counter, and were resetting it's value to 0 with something like this: counter == 0; That's technically not a syntax error, but a logic error. A linter will catch that (though perhaps only after yelling at you for using == instead of ===).
Perrrrrrrrrrrrrfect!! Activate the proxies! 1000 karma to this good man!
I'd suggest Sublime Text 2, it's wonderful.
Temporarily whilst we wait for webrtc support to improve. I'm also planning to turn the proxy socket into a third party web service on the cloud so you don't have to host it yourself
Yeah, I think I will. Everyone seems to say its a great starting point so I'll check it out tonight. Do you make notes as you go or not bother?
Like Visual Studio check's VB? Oh, gosh, you can't be serious.
You could try this one - it's an online JS book: [Eloquent Javascript](http://eloquentjavascript.net/contents.html) Also heard great things about the Definitive Guide one you have listed (4th edition). I'm sure any edition will work though.
[Maintainable JavaScript](http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680) is definitely worth reading. It's not about the technical aspects of JavaScript so much as it is about what tools and techniques to use to keep your js organized and well maintained over a group of devs.
Try NetBeans. Personally I really like it for ease of coding, as well as information pointers as you code.
http://www.reddit.com/r/javascript/comments/opwer/why_does_0_but_object_object/c3j3jnk
I do make notes but it's just copy pasted stuff from the site that I use for reference. If you'd like I can share them.
If you're looking to keep a thorough reference around, I usually go for one "big book" and a good cookbook. The rhino has a good reputation for depth on the subject, so that might work well with the crane. For learning a new language, though, I'd pick the cookbook myself. I learn best by tweaking examples, though, so your mileage may vary.
True, but have you tried out Safari's debugging tool? Which is why I labeled it as Chrome's not Webkit since both Safari and Chrome are built on Webkit but Chrome's developer tools are a lot better.
Came here to recc. JavaScript: The Good Parts. Was not left disappointed. 
Right now it only grabs imgur pics from the RSS but it would be easy enough to add iminus ones aswell (seem to be the most popular hosts), and I could maybe a text box that takes in whichever subreddit you want to view.
Learning design patterns is always a good idea, but it's hard to take what you learn in a book about them to apply the knowledge directly to projects. It might actually be best to just choose a framework to work with and then look up tutorials on the internet. You can gleen a LOT of good info from that. Of the choices you show, I'd say go with the Definitive Guide.
&gt; JavaScript is loosely based on Java, which is an object-oriented programming language that became popular for use on the Web by way of embedded applets. It has a similar syntax and programming methodology to Java I hope this description doesn't reflect the content of the book, as it's patently false.
How could it be "truncated"? I was under the impression that none of the bits in a double correspond to a similar int, as it stores the value as a fraction, exponent, and sign (and thus, at least a little computation is necessary to figure out the closest int).
You forgot the over abundance of word separators. Since hyphens can't be used in js we would likely get underscores. ._web_kit_Max_()
Weird; in one of the first chapters of the book (I like to read cover-to-cover), Zakas explains the history of Javascript, and how it has nothing to do with Java at all. I don't know why the Amazon description says that.
Cool. We had the same problem. Our solution was to build a templating engine that updates existing DOM instead or generating a string and recreating the [sub]DOM every render. https://github.com/idottv/Mold
People need to stop evangelizing Crockford and his book. I read it cover-to-cover and found Stefanov's patterns book to be much more practical and less preachy.
I second this.
High Performance Javascript was pretty great, but * It's not at all about building interfaces, but about optimisation and about the way the browsers execute JS * It's somewhat out of date, with browsers developing as fast as they do, so drink in the concepts but not the specifics, rather test it yourself since some of the particulars are no longer true.
Thanks for the advice.. I'll look into it :)
`namespaced` is `undefined` when the assignment to the property is being resolved. If you want to pass the reference into the closure, you need to split up the definition of `namespaced` and the assignment of the `sayString` property: var namespaced = { foo: function () { return 'foo'; }, bar: function () { return 'bar' + this.foo(); } }; namespaced.sayString = (function (self) { var privé = 'private'; return function (str) { return str + " " + privé + " " + self.foo(); }; }(namespaced)); console.log( namespaced.sayString("test") );
I am not qualified to give you a proper answer, since I never dealt with hardware or compiler. I will try to answer to the best of my knowledge. A general purpose CPU supports thousands of instructions. Casting float to integer is a pretty basic operation, and since FPU normally deals with "float" while CPU normally deals with "integer", you can be pretty certain that one of those over a thousand instructions does exactly this. I did some digging, [here](http://cs.smith.edu/~thiebaut/ArtOfAssembly/CH14/CH14-4.html#HEADING4-43) is the exact CPU instruction that is relatively cross-platform. [Here](http://www.songho.ca/misc/sse/sse.html) is a purportedly more efficient way of implementing it using x86 processors with SSE. 
From what I can tell, this is more for annotating the favicon as opposed to changing it altogether. It looks like these could be useful with each-other, though. Hmmm...
Oh man, you're totally right: I just had to keep the same syntax I was always using. Why did I think 'this' didn't resolve inside nested functions? Probably got mixed up with function scope after a marathon coding session. Thanks a lot!
jslint or jshint, there are plugins available of jslint in several IDE's
The most useful usage IMO is that it allows you to block instance creation of your type, which is useful if you are a JS library writer. For example, with this feature, it is relatively easy to have the following return the same result: $('body'); new $('body'); and still have both return true when you do instanceof Obviously you can wrap your object, and have the constructor return the thin wrapper, but that just makes implementation more complicated. 
Well, I've given this codeacademy a crack. So far so good! Pretty much exactly what I'm after. Thanks for all the pointers guys and gals
Proposed replacement for the addLink function (including the remove function): var addLink = function(iconUrl){ var links = head.getElementsByTagName('link'), l = links.length, newlink = document.createElement('link'); newlink.type = 'image/x-icon'; newlink.rel = 'icon'; newlink.href = iconUrl; for (; --l &gt;= 0; /\bicon\b/i.test(links[l].rel) &amp;&amp; head.removeChild(links[l])); head.appendChild(newlink); }
I would recommend doing JS-assessment https://github.com/rmurphey/js-assessment when you got the basics of Javascript. It's a test-driven approach to learn some best practices and common patterns in Javascript. And it's actually fun to write the code so that the tests pass green. I learned a lot from this.
Since it seems you are using jQuery, I would make use of deferred objects. You can use `.pipe()` to chain the calls: http://api.jquery.com/deferred.pipe/.
You don't need anymore books. After 10 years of developing with it professionally, you should be picking at the pieces you don't know with research and not reading any books such as these.
I'd prefer something that just put the args into a list and pooped them off of the list as each call was completed, assuming you really do need these calls done in sequence.
You're welcome.
Why in the world do you want to call so many AJAX calls sequentially? We've had a hard rule at multiple places that I've worked stating no AJAX on page load, and only 1 AJAX call per user action. Batch those into one call!
That's basically how asynchronous queues/deferreds work, so you have the right idea. :) 
Rick Waldron is awesome. Here's [his talk from NodeConf](http://www.youtube.com/watch?v=jf-cEB3U2UQ) where you can actually see his robots in action.
that's cool ! 
Forgot function before quickStats(x). Works now thanks to sachleen on StackOverflow =] 
*Why in the world do you want to call so many AJAX calls sequentially?* To test a restful API 'in browser'. *only 1 AJAX call per user action* Not necessary as you may want to post a message then loading back some status data. For instance in [www.servicestack.net/RedisStackOverflow/](http://www.servicestack.net/RedisStackOverflow/) 1 click does 3 ajax calls. 
I like this one. http://arshaw.com/fullcalendar/
No. You can call it the "Chrome fork of the WebKit Web Inspector" though. There are many forks of WebKit: * the WebKit nightlies (main branch) * the Safari fork * the Chromium forks * the Android forks * the iOS forks Just because you fork someone's work doesn't mean you can claim credit for their work. You can claim credit for the things you've added or patched or changed, but the Web Inspector was present before the Chromium team originally forked it.
I spent a week or so at work once reverse engineering it and creating it again in jquery. I learned a lot of things about javascript that I only thought I knew before starting, the same with layouts and CSS. One of my greatest learning experiences web wise.
They both look like they do the same thing. I'd go for the first on the basis that it took me seconds to see how it worked, whereas the second is unnecessarily complicated.
I posted here on /r/javascript my [``queue-flow``](https://github.com/dfellis/queue-flow) library, a week or two ago, and it's very similar to this, for similar reasons: 1. ``async`` is nice, but the API doesn't look like natural Javascript. 2. Mixing sync and async code in the same processing path is unnatural with the ``async`` library. Before I go off on my own library, let me first state that your mechanism for handling objects is cool, and not something my library has any native way of doing. Taking a look at your examples, var batch = require('batchflow'); var files = [... list of files ...]; batch(files).sequential() .each(function(i, item, done) { fs.readFile(item, function(err, data) { //do something with data done(someResult); }); }).end(function(results) { //analyze results }); Would be in queue-flow: var q = require('queue-flow'); var files = [ ... filenames here ... ]; q(files) .map(function(file, callback) { fs.readFile(file, 'utf8', function(err, data) { // Do something with data callback(fileResult); }); }) .toArray(function(results) { // Do something with results array }); But would be more functionally composed (and fewer indents) if you wrote it as: var q = require('queue-flow'); q([... files here ...]) .map(function(file) { return [file, 'utf8']; }) .exec(fs.readFile) .map(function(data) { /* Do something with file data */ }) .toArray(function(results) { // Do something with results array }); This has the advantage that the different steps along the path can execute in "parallel" (JS is single-threaded, so actually just that processing of one step can start before the previous step(s) have completed) and the more discrete steps you have, the lower the latency of results streaming out of the end of the flow, which is useful for *actual* streams like pushing data to the client from the server -- it can start *before* the data has been fully processed, so the latency seen by the client is not ``processing time + download time`` but simple become approximately the time of whichever of the two is longer (minor fragment of processing time added to the download time for the processing of the first item if the processing time is faster). ``queue-flow`` also supports overloadable constructor functions, and actually just this morning I finished work on my first constructor function, [``sloppy-queue-flow``](https://github.com/dfellis/sloppy-queue-flow) which supports totally parallel operations, but assumes they're all [commutative](http://en.wikipedia.org/wiki/Commutative_property) and the order doesn't matter. If you can make that assumption, the parallel form would therefore be: var q = require('queue-flow'); var sloppy = require('sloppy-queue-flow'); q([... files here ...], sloppy) .map(function(file) { return [file, 'utf8']; }) .exec(fs.readFile) .map(function(data) { /* Do something with file data */ }) .toArray(function(results) { // Do something with results array, which isn't guaranteed to be in the original order of the files array }); Similar constructor functions could be written (read: I plan to when I have time) for parallelism that still guarantees queue order, and for the Node Cluster API and WebWorkers, to get *real* parallelism with minimal conceptual overhead of the library user. The "named queue" concept also makes code organization simpler, and allows wild things like [recursive data processing without the *possibility* of stack overflow](https://github.com/dfellis/queue-flow/blob/master/examples/graph.js) Each step in the queue chain is actually on a separate stack call through the Javascript Event Loop, including the ``chain`` call that pushes the result back to the top of the queue, so such a loop could continue indefinitely without crashing the interpreter. Furthermore, because the scope therefore is not constantly increasing with new closures, and because the ``queue-flow`` queues are roughly static in size in such a recursive processing mechanism, it should use less memory than a classic Javascript recursion-with-closures style. Your ``BatchFlow`` has given me some ideas on object handling, I hope ``queue-flow`` can do the same for your's. :)
Since I wrote a [very similar library](https://github.com/dfellis/queue-flow) to BatchFlow not too long ago, I think I can answer that. There's a pair of flaws in the ``async`` library that makes code written in it harder to maintain for anything becoming complicated: 1. ``async`` handles async methods *only*. Any time you need to use a sync function you have to wrap it in a pointless ``function(val, callback) { callback(syncFunc(val)); }`` anonymous function. 2. ``async`` is not composable. The API of most of the ``async`` methods consists of an array of data or functions, an iterator function if the array was of data, and a callback function that a new array or final result is sent to. If you need to first process something in parallel, then perform a set of series step of sync and async code, and then one more set of parallel processing, you have to nest each ``async`` method calls in the callback function of the previous method, so the "pyramid of doom" is only slowed down, not eliminated. Being able to use sync or async functions in an *identical* fashion, and being able to compose the method calls however I wanted without more and more whitespace, and doing this without extending the Javascript language (like Fibers does) so it works in the browser, too, was *my* reason for writing ``queue-flow``. Then being able to create an "express-lite" that handles errors, static files, and sessions in less than 200 lines of [heavily commented code](https://github.com/dfellis/queue-flow/blob/master/examples/express.js) is all gravy. (Or simply a result of making async in JS *pleasant* to use?)
Please please please make a better Google Calendar. In particular: Rather than having separate calendars, allow events to have tags, where each event can have more than one tag. Build-in something better than [Tungle](http://tungle.com/). Tungle was a great idea, but horribly executed. I'd say 60% of the meetings I tried to set up through Tungle ended up getting screwed up through Tungle's poor usability. Seriously, if you can build something that does what Google Calendar and Tungle do, while addressing their weaknesses, you'll have a billion dollar business. Oh, and I've got a bunch of entrepreneurial and fundraising experience, if you'd like any help please pm me.
No need for a framework, just build your own with plain html, css, js. Mine here: http://my-stuff-online.appspot.com/calendar ** webkit only
Dear god, man! That's some of the most fubared code I've seen in a while... function ajaxSeq(stack) { var nextOne = stack.pop(); if (nextOne) { $.ajax(nextOne).andThen(function(){ ajaxSeq(stack) }); } } or function ajaxSeq(stack) { var nextOne = stack.pop(); if (nextOne) { nextOne.complete = (function(orig){ return function(orig){ if (orig) orig(); ajaxSeq(stack); }; })(nextOne.complete); $.ajax(nextOne); } } 
It's poor practice to do event binding in a controller. If you have to deal with custom events and DOM manipulation, you should look at writing a custom directive. This is really important in keeping your application cleanly organized. You might want to check out one of the fine tutorials on directives: http://johnlindquist.com/2012/04/16/angularjs_directive_tutorial.html
+1 for momentjs - it really isn't worth manually messing around with js dates.
Thanks, but I edited the OP and I'm not making a typical calendar. My data just happens to be presented in a sort of calendar-ish way.
But I want to use a framework, that's the whole point.
I've been using http://www.datejs.com/ before. Do you think momentjs is better?
Nice! I should point some of the people I work with to there so they stop thinking I'm a magician. Or maybe I shouldn't...
[Sure looks like python to me](http://www.khanacademy.org/science/computer-science?k)
that's the 'old' one
I truly feel like [requestAnimationFrame](http://paulirish.com/2011/requestanimationframe-for-smart-animating/) is the great hidden secret of canvas animations...
I see now looking through the video on the front page. Vars for days. 
Very cool, performs well and it can definitely create some cool patterns! How long did it take you if you don't mind me asking?
Not too long, it started off really simple, but I kept adding controls and more options... these things seem to spiral out of control on me like that. 
Your headline makes it sound like they had much of a choice among all the languages available in the browser.
Don't know but you should consider using 'live' to bind current and future events rather than binding on the fly. http://api.jquery.com/live/ 
I have been using .on as much as I can, but I'm more wondering how jquery handles events tied to an element after it's destroyed. I can't find anything in their docs or online.
Very nice, but would be nicer if it re-drawed when you finished tweaking a control (when you release the button after dragging a control slider thing). It took me a minute to find the "re-draw" action. But maybe that's just me :) It'd also be neat if it just randomly morphed shapes (i.e., the settings randomly changed in a live animation).
While also "learning by doing" javascript, I made something similar: [grafan](https://github.com/skinp/grafan). The data are queried by ajax instead of manually entered and it's mostly made for showing time series data, but I guess your graphing logic should be similar... I would suggest you read on canvas if you haven't already, they're quite powerful for this kind of stuff. 
In other words you chose to write a snide remark without even bothering to check the links. Why? Does it make you feel better about yourself? Besides, this is about teaching a language. You don't necessarily need all the bells and whistles then and could just as well point someone to the proper interpreters/compilers for more advanced lessons.
Nice I love canvas experiments, reminds me of when I first saw this: http://webtypographyforthelonely.com/cluster
Well, I suppose because it's usefulness is very minor compared to ``apply``. ``apply``'s first argument is what the ``this`` object should refer to, which is useful, and the second argument is an array object containing the values for the arguments of the function. This means ``apply`` can be used to coerce a function into behaving as an object's method without altering it's prototype, and it can be used to dynamically generate the set of arguments, perhaps passed in by another function. ``call`` has the same first parameter for coercing ``this``, but then after that each extra argument becomes the set of arguments for the function you're calling, so if you don't need to change the value of ``this``, it's identical to calling the function normally, which is faster. So, while I can't claim to know exactly why he left it out, I assume it's because ``call`` is simply a less-useful subset of ``apply``, and is simply syntactic sugar for the cases where you know exactly what variables or values you want to pass into the function. func.call(thisObj, arg1, arg2, arg3); versus func.apply(thisObj, [arg1, arg2, arg3]); It's only a few extra characters to type, but it's a whole extra method name and API definition you need to read up to understand what the code is doing. Some of the things Crockford takes out of Javascript with his "Good Parts" book are actually a bad idea (because it's hard for the interpreter to optimize that code, or it makes it too easy to write spaghetti), but others are simply a Python-style view of things that there should be one way to do things, so you have less syntax and API to memorize and it's easier to collaborate with others because they're not using those *other* features you rarely touch (the reason Perl isn't as popular today as it once was [it's still faster than Python and Ruby]).
I'm not a Python programmer, so I didn't know the "Zen" was wrong. Sorry it's turning into Java on you.
Just note that IE doesn't trigger *onchange* until the input loses focus. You may want to listen to *keyup* or *keypress* in addition to change.
I get it, sometimes I use a backhoe to plant a daffodil in my backyard too.
Good call with the re-drawing... implemented!
I think this is meant as a stepping stone. In the future I'm sure they're going to offer other languages to the mix. I think they already offer Python, for example. This is directed towards people and children who know absolutely nothing about coding or the internals of their computers. Personally, I am quite skeptical about teaching JavaScript as a first language. However, if this is just meant to get your feet wet, then really, I have no objections as long as there are plans for other (sorry for this) "proper" languages to be introduced.
.live() is deprecated, use .on()
Throws an unresponsive script error dialog in Firefox for me (Windoze 7/FF 14.0.1). Seems to be OK in Chrome, though perhaps add some feedback that it's redrawing the canvas (took longer than I expected)? Just a spinner with "drawing" or something centered on the page would more than suffice, I think.
I like Node.js and think web frameworks can be drastically improved, but that was a *terrible* article that appears to just be screenshots of *other* articles on one particular framework that's apparently received $11M in funding...
You're thinking of Computer Engineering or Software Development specifically. Computer Science has very little to do with computers, it's just that we happened to discover the field via computers and use them as tools to study it. 
It is possible to go further without jQuery, which is just easing a few parts of JavaScript and browser incompatiblilties. So you can find out how to do it without jQuery using a few references from here: https://developer.mozilla.org/en-US/docs/JavaScript If you have any other questions, don't hesitate to come back.
Is this code supposed to work? var a = {}, b = {a: a}; a.b = b; var s = JSONycle.stringify(a, true); console.log(JSONycle.parse(s[0], s[1])); &gt; Error: Invalid JSON string: {"b":{}}
Especially not mainstream if you choose to ignore WoW and redis.
From what I've experienced, QBasic, C++ and some assembly language were taught in CS courses during [gymnasium](http://en.wikipedia.org/wiki/Gymnasium_%28school%29) and Scheme were the language during university. Granted, university were three years ago so things might have changed since then. Anyhow, I'm not trying to imply anything. I simply listed the available languages found through the related link, excepting the more playful and JS based languages.
Should do, looks like I made an error in the code - it's now fixed and pushed to github. Thankyou for finding!
god loves abstraction. nice input. i assumed the former.
You're welcome.
money can't buy happiness but it sure can buy attention.
It eventually throws in a nod to a couple other frameworks, but yeah, total hack job of an "article".
There are many language interpreters written in JS that can run in-browser. For instance, [Python](http://pyjs.org/) or [Scheme](http://code.google.com/p/js-scheme/). I happen to have enjoyed writing JavaScript for some tasks, and it is a rather useful language to know. However, I do a great deal of development with JavaScript at my place of employment, and I have growing laundry list of reasons why it is a horrendous piece of shit and should be done away with posthaste. 
That's pretty much what I'm doing now. I run $parent.on( 'click', $child... for most events here. I was more concerned about event delegation in general though and how jQuery handles events on elements that don't exist anymore. It seems like as long as im using .on and remove()/empty() there shouldn't be any memory leaks. I'm also calling .off() whenever I re-render or move the widgets around.
The actual language used for teaching the majority of CS is irrelevant; it's simply there to help students explore and play with ideas, whilst learning a concept. &gt; In my experience writing JavaScript has nothing to do with how computers actually work and everything to do with how your browser/framework works. It is one of the least efficient, least internally-consistent languages around that anybody actually uses. In my experience it's only the DOM which has real inconsistencies between browsers; JS it's self is pretty much the same everywhere, and pretty consistent. The only differences comes down to brand new features, and very old exotic features that no one ever uses (like sharp variables). The JS engines for many browsers will also outperform most implementations for dynamic languages, and even a few static compiled languages (such as V8 beating Go in some benchmarks).
If you're using `.on()` on a parent element you're already listening for events from every child element that meets the selector, current or future. There's no need to unbind/bind again, as long as you aren't destroying the parent element (ideally bind to the nearest parent node that exists over the life of the view). If you suspect you're triggering too many events, or triggering events during renders, use classes to narrow the selector's matches. If you only want to fire keydowns on the active cell, change the selector to `td.active` and addClass()/removeClass() when you change your focused cell.
Are you agreeing with me? 
Yes? I guess my post might seem oddly aggressive now that you've got some orange arrows stuck to it. 
Yay!
HELOSMTP said *internally* inconsistent. I think he/she might be referring to things like Arrays and Object often being treated as interchangeable, even though they're not, or Array indices being stored internally as strings because the people who designed JavaScript want everyone who uses their language to commit seppuku. Some of this is arguably bad language design, some of it is a symptom of the fact that JavaScript is primarily an in-browser language, and some of it is just because web programmers do bad things all the time and then other programmers think that's the correct way to go about doing things. How many times have you seen a for-in used on an array? How many JavaScript programmers do you think know that/why that is a bad idea? That said, I think JS is an excellent learner-language. It's easy, it lets you get away with murder, it offers tons of instant gratification, and it is syntactically similar to quite a few popular, useful languages.
:D
I don't quite follow your point about the implementations being different, internally. I don't care if Spider Monkey and V8 use different approaches inside, as long as the language is consistent across them, which it is. If anything that is a good thing, as it leads to each vendor trying to out do the others. That is partly why every major JS implementation has improved in performance, dramatically, over the last 5 years. &gt; Array indices being stored internally as strings Which JS engine does this? Even then, why does it matter how indices are stored **internally** for teaching concepts?
http://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript?redirectlocale=en-US&amp;redirectslug=Introduction_to_Object-Oriented_JavaScript jQuery provides a standard interface for doing common things like setting attributes, running animations, making ajax calls, etc., but I feel that its interface is different than that of core JS and that by being a jquery pro ti wont help you with being better at vanilla ja. If you learn core js, you'll be able to utilize libs like jQuery a lot better. I definitely suggest that you continue down the road that you're on and then bring those libs on board. 
I also forgot to mention that I have a router in place that mediates to an extent. If a module changes, it updates the master model. The updated property on the master model is bound (change) to the router, which then "approves or denies" the update. If it's approved, it will again update the master. Any module bound to the newly changed property will decide if it needs to change based on the update.
There's absolutely no checking of function or method parameters, last I saw. It was like programming in assembly in javascript. Also, even the debug version of the code was almost completely unreadable, as far as I remember.
2 years ago. &gt; If you use Ext correctly it works just fine. That's the stupidest comment I've seen in a long time.
I've done a bit more research at it seems the problem is specific to the way Microsoft handles clicks with transparent objects on their gadgets. So it's hard to replicate without creating a whole gadget for you. I will just live with it I think. Only a minor inconvenience!
Even though this is all about Backbone, you might be interested in looking up on the way Ember.js does it with [state machines](http://docs.emberjs.com/#doc=Ember.StateManager&amp;src=false), just so you get a quick overview of what it is. I believe Backbone does not have such mechanism built in but like it was said it might not be that hard to do. HTH.
Have you tried to abuse a button or input element with zero opacity (because form elements aren't handled as normal HTML elements in the IE7-like renderer that's used to display the gadgets).
Backbone.Marionette makes this kind of simple...in fact your example is very similar to [this post](http://lostechies.com/derickbailey/2012/05/15/workflow-in-backbone-apps-triggering-view-events-from-dom-events/)
While these are great answers, I think a few things need a bit more detail to fully answer the OP's questions. First of all, I think there needs to be a distinction made between server-side frameworks (like Express) and client-side frameworks (like Backbone). The answers to the questions depend on the context (server-side or client-side). 1. Great answer 2. Python and Ruby frameworks work on the server-side, serving content to the frontend. So if we are talking server-side, the answer kethinov gave is great. However, you can also replace a lot of the functionality Ruby on Rails or Django gives with a framework like Backbone or Ember on the client-side. This is where the advantages of javascript emerge. Since js is all executed in the browser, not on a server, there is no need for page reloading. This means you can build a "single-page" application which works and changes state without the browser actually reloading. 3. It's roughly the same for js frameworks. However, just as in Ruby, by understanding the language past the basics, you can understand _why_ the framework works, and write much better code within said framework. 4. Backbone.js provides a way to organize your frontend code, so you can build large frontend projects that are maintainable. The purpose of jQuery is to make manipulating the DOM less painless, and abstract away any annoying cross-browser issues that come up. Backbone actually uses jQuery (or mootools, or any other DOM manipulation library you tell it to use) to manage DOM manipulation, but that is just one component of the framework. Backbone gives you the models, views, and controllers (well, sort of...) that you are used to from Ruby on Rails or Django, allowing you to structure your code so you can write an entire app on the frontend (allowing you to write single-page applications like I mentioned earlier). 5. The answer kethinov gave is good, but I have a minor quibble. Node is not the equivalent to Ruby on Rails. Node lets you execute javascript on the server, instead of in the browser. However, Ruby on Rails is a framework built on top of Ruby. In this case, Node lets you use javascript on the server like you can use Ruby on the server. This leads into the final question: 6. There are currently no frameworks for node like Ruby on Rails. Rails is an all-encompassing framework that does _a lot_ for you. Some people have likened it to magic - it abstracts away and handles a great deal of the work. There is no framework that does all of that written in javascript to run on node. Express is more like [Sinatra](http://www.sinatrarb.com/) than Ruby on Rails.
I have, though unfortunately that does not work either. An opacity of 0 makes it completely invisible and non-clickable, and an opacity of 1% gives a basically invisible button, but because of another annoying bug with the gadgets, it is replaced with a magenta box. (Hardly invisible!)
Oh, the joys of gadget programming... I'm lucky that I convinced our PMs to wait for Windows 8.
[Author](https://twitter.com/#!/hulkholden)
To try to clarify #5 even more: Node gives you the equivalent of Ruby + Net::HTTP + EventMachine: the ability to run JS on the server, connect to stuff or be connected to, and respond to events. Very basic, and it takes work to make something serious. You wouldn't want to write your webapp from scratch with Net::HTTP, right? Express is just another "gem", and comparing it to Sinatra is actually pretty good. It can serve static files, it can do routing, sessions, templating, stuff like that. It does not do the equivalent of ActiveRecord or ActiveMailer or non-webby stuff like that; you'd add other packages. The beauty of #1 comes into play with, for example, validations. Validations need to be done on both server and client: client for user's convenience, and server for security. With node.js, it's trivial to do it, since you can just run the same validation code on both sides of the request.
You could put your master model into an underscore object ( _.applicationData = ... )
This is a fairly controversial topic in the JavaScript MV* community. The best way, though, in my opinion is to do this: **Use URLs as the source of truth for your application state**. In your specific situation then, when a section is complete, route your URL to the next step, like this: /step/1 -&gt; /step/2 Your route handler then sets up your new view and updates the progress meter through the URL parameter, which is the source of truth for your application. This helps with progressive rendering too, as if your users have JavaScript disabled, they can still use your app if you're able to render the new section server-side instead. Check out [Eric Ferraiuolo's Throne of JS presentation](https://speakerdeck.com/u/ericf/p/advocatus-diaboli-throne-of-js) for more information on why you should use this technique. Some developers have come up with alternatives, like the Ember developers and their state machines, though I feel those methods are overly complex and don't provide the benefit of progressive rendering. To be fair, here's [their take on it](http://tomdale.net/2012/05/ember-routing/) if you'd like to take a look. 
I frequent reddit too. Fire away if you have any questions.
Check out this Codecademy lesson: http://www.codecademy.com/courses/you-and-jquery/0?curriculum_id=4fc3018f74258b0003001f0f#!/exercises/0
It looks a little bit confusing and it's too simple. And what about older versions of IE? (They don't know XMLHttpRequest, just MSXML2.XMLHTTP.) I made a better version of this a month ago: https://github.com/RadekCZ/climod-js. It also supports module and exports variables. So it's compatible with Node.js. But I must agree with kenman, AMD is a better solution for a browser environment.
Not a chance. I've used a fair amount of different frameworks, and ExtJS doesn't offer anything that makes me want to use it over any other framework or library.
Im not certain I know what im looking at, but it is beautiful.
There are a lot of points here, so I summarized them into bullet points. 1) You said an array with an element set at zero becomes ... MyArray = {"0": "Derp", "someArrayMethod": function(){...}, etc...} Not true, JSON notation supports arrays. 1.b) To clarify, that is what I was referring to when I said arrays are Arrays and not Objects. Sure they extend Object, but you described the array using a JSON Object notation, which is incorrect. It would be an Array, not Object. 2) The behaviour of for-in does not prove that arrays strings for numerical indexes. Numerical and string indexes are treated separately for arrays, for example adding a string index to an array [in this example](http://jsfiddle.net/hwKbq/), does not alter the arrays length. 3) for-in returning strings for keys is not **internal** behaviour, based on implementation details. It's how the language works, which doesn't make it internal. 4) for-in returning a string index does not prove that they are internally stored as strings. Again you said ... &gt; Array indices being stored internally as strings It could convert them to strings on the fly, or return a cached string, or use some other approach. The only way to prove the internal behaviour would be to go look at V8 or SpiderMonkey. If I were a betting man, I'd expect to see numerical indexes internally for most arrays, and other approach for corner cases (like sparse arrays). tl;dr arrays use [] not {}, and for-in behaviour does not mean internal behaviour.
If it is a JavaScript-based emulator, why is Chrome asking me for permission to run Flash? Awesome project, BTW (:
Probably something to do with a Flash fallback for file loading. When I was last working on jsGB, I recall that I found a way around the Flash requirement for file handling, but I can't recall what it was... *Edit:* I remember now, the files are server-side and come down by Ajax. Pulling from the local filesystem requires permissions that JS doesn't have.
Yep, they're all offset to different banks of hardware registers in the n64. The n64's cpu writes to these registers to drive different devices. E.g. writing to AI_LEN_REG causes the audio hardware to start playing a sample, writing to SP_WR_LEN_REG triggers a DMA from main memory to the coprocessor's memory.
Ah - the Flash request is probably just via the YouTube videos I embedded? I don't use Flash otherwise (not even as a fallback for file loading)
Take a look at requirejs, labjs, headjs, controljs, and so forth.
And it's my mfing cake day today wouldja look at that.
Wholeheartedly agree. I'm so annoyed with some Python programmer that praise every behaviors of Python because "Look at its Zen". As if having that "Zen" list magically means every decision ever made will follow it.
You could create a bookmarklet. Basically, it's a piece of JavaScript as an href - pseudo JavaScript scheme. Google bookmarklet to get started. http://en.wikipedia.org/wiki/Bookmarklet
What a dumbass method name for Array.filter via a callback. 
Actually Hulk.... can I call you the Hulkster? Your other project seems most interesting. Standing by for the first spasms of life from a spark. Tried smash brothers... no go, trying the next rom.
I have yet to find one worse than ExtJS. I'd rather you share your vast knowledge of how ExtJS is better than all other frameworks, or even better than a single other framework.
Try [IE tab](https://chrome.google.com/webstore/detail/hehijbfgiekmjfkfjpbkbammjbdenadd) in chrome. It manages to fool microsofts site into letting me run silverlight, so it might work for you, while allowing you to use greasemonkey.
Your ability to parrot back marketing speak is amazing. How is it that anyone uses anything but ExtJS?
There are addons for FF and Chrome that will let you set the user agent to IE, which will get you past those sorts of browser checks Of course, if the app is actually using old IE specific controls, it might not work, but you can give it try at least
Yeah, I most definitly did reinvent the wheel, that was what I was going for. I always wondered how to implement such a feature, so instead of looking it up, I went messing about untill I got it. If I'm gonna make this as neat as possible, I'll check how others make it async. If you're putting it at the top of your file, and it loads async, it's gonna be available after the code on the page has run... which is too late. As far as browser compatibility goes, putting in a fallback for older versions of IE should be enough. The other things I'm using is not really that complex or new so should work with IE7 and up, maybe even IE6. Though, having said that, I didn't test it.
A fallback for older versions of IE is easily made, which I guess is the reason I didn't. Good point about Node.js, even if mine works on that (which I highly doubt) you're not gonna want to import files using AJAX server side... that be crazy.
I had a brief play around with it a while back, when it was known as Sproutcore 2.0 and I was investigating my options for building a client side app. I thought it seemed very promising, but there was barely any documentation at the time, and I couldn't find much in the way of blog posts etc. giving further detail, so I ended up going with GWT. I'll be investigating framework options again soon, and I'm hoping that Ember.js has matured a bit since I last looked into it. Having a good set screencasts available (especially if they give a concise, but thorough explanation of the features available and how to use them) would be a major point in Ember.js' favour. I don't really have the time or expertise to help you, but I'd definitely appreciate it if you went ahead with the plan and made the screencasts.
Bookmarklet is probably the easiest solution but it does require that you click the bookmarklet every time you want to load it. If this is a single page app that's fine, but if the app requires you to constantly to navigate from one page to another it could get annoying. If you are allowed to edit your proxy setting you might be able to find some some small proxy to run locally that can inject the scripts in every page. I don't actually know of any such proxies but surely some have to exist.
As much as I would love to use Ember, I don't want to invest any time in to it until persistence is either integrated or the data plugin is stable. It just isn't viable to use in many situations without that.
Your first example assigns a function to an array, which seems pointless. It's certainly not the same as adding methods to the objects. Maybe it's just because you don't explain any context, but it's hard to imagine how what you are doing in any of your examples would be a decent way to do anything.
The array you end up with is different everytime, to manipulate the objects in there you'd have to loop through it. The functions I want to add are meant to make that much easier without being obstructive. Come to think of it, it looks a bit like a jQuery object. You can access all the elements as if it was an array using $(...)[0], $(...)[1], etc. You could loop through the jQuery object and put the display of each element on 'none', or you could just call $(...).hide(); which does exactly that.
Pretty is in the eye of the beholder ... some people might think it's pretty to just stuff your methods onto `Array.prototype` but I (and many others) would cringe at the idea. If you really want to use methods, the last example you gave in your OP is a good approach. Sure, you can't use `obj` as an array, but you can use `obj.array` ... I think that's a perfectly acceptable thing to put in `newobjectthing`'s contract. There are strong arguments to prefer composition over inheritance -- the "code smells" you're already struggling with are related to these.
It wasn't my idea to put methods inside the array.prototype, just the array, but I do agree that neither is 'pretty'. I checked out how jQuery does it, and it's not perfect... Basicly it uses Array.prototype.push to make the jQuery object look like an array. But it's not. I'm not sure if I like that, but I guess it does work. Gonna need to do some performance testing to see what's the way to go...
Indeed - I was using Array.prototype as an extreme case of how tastes can diverge. I'd advise you to think more about readability than performance - you mentioned above that the arrays you're dealing with are very small so this sounds like premature optimisation. All in all, you've demonstrated a good line of thought on this problem. I trust you'll trust your own instincts more than what some blowhard on the internet tells you :-). Happy coding!
&gt; But, treating an array as an object just can't be a good idea. In JavaScript, arrays are objects so I don't see why it's not a good idea.
I know arrrays are objects in js, but they do perform differently. Iterating through an array is a lot faster then iterating through an object that holds the same values. This is probably because an array can usualy assume it's keys are always numbers where such an assumption would be foolish on an object.
I like feedback and reddit is a good place to get both good as bad feedback. In the end, I went for the same method jQuery uses, populate an object. The main reason was because of memory foodprints (which I didn't thought of when posting) if I assign methods to the array, the method exists in each array. Some fancy coupling with references could make the footprint smaller but just putting it in a prototype seems way easier. Also adds more flexibility. :)
Downvoted by incompetent coders who think "IE is greeeaaattt". 
Hi, I'm a newbie programmer and mvc frameworks are beyond my reach at the moment but your premise intrigues me. Can we speak on skype? If we come to an agreement that is a win-win for the both of us then that's great, if not at least we both walk away a little wiser about what can or cannot work?
&gt; but they do perform differently. It's true that in some cases JS engines optimize arrays in various ways, however unless you are dealing with very large arrays or very hot code the difference is negligible and not worth thinking about. There's absolutely nothing wrong with your first example taking it at face value. Depending on what exactly you are doing you may want to go another route; but only as a matter of design and not performance.
It works if you change... W = window.innerWidth H = window.innerHeight to... W = innerWidth H = innerHeight
This is a great example of the old axiom, "just because you *can* doesn't mean you *should*".
You could extend "Array". It has all the advantages of modifying the Array.prototype without all the drawbacks. I'd suggest using someone else's implementation of "extend", but if you want to do it by hand: // define your class var Cars = function() {}; // create an object that has a reference to Array.prototype, // but can be modified without modifying Array.prototype... // assign it as the prototype of your object Cars.prototype = []; // add a custom method to the new class Cars.prototype.myMethod = function() { this.push("weeeeeeeee"); }; let me know if you have questions.
No, just 1 reverse proxy that's aware of the different resource servers through a registration process. Also, how do you guarantee correct behavior if you allow composed systems to cache results? What if those results have changed? This whole thing seems like astronaut architecture. You've introduced a lot of complexity for little gain.
Well... that's embarrassing....
you'll probably find that anything you want to do with the array can be reduced to .map, .filter, .reduce, .forEach, .some, .every (https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array) with a function passed to it. If you need it in all browsers I'm sure you can get a polyfill (https://github.com/petermichaux/polyfill)
&gt; I'd rather you share your vast knowledge of how ExtJS is better than all other frameworks, or even better than a single other framework. You have yet to compare ExtJS to anything else, and you parroting back the info from some advertisement page is in no way useful. Most, if not all, of the things you mentioned can easily be gotten elsewhere. It sounds like you are the uneducated one. I bet you have no significant experience with other libraries or frameworks.
&gt; 1 reverse proxy Okay, but then a web service has to exist for each one, right? That means that each user has to either run a host, or run code on the shared host. (If I'm wrong about that point, tell me.) I'm trying to introduce a lower barrier than that, so that people are more capable (and thus more likely) to build on their web applications, and so that decentralized services are more feasible to larger crowds (since a proxy can combine data from multiple remotes). I think that's a nice gain, considering all the annoyance with the central platforms lately. As for guaranteeing correctness, that strikes me as an implementation consideration that shouldn't stop the overall concept. Maybe it'll be a problem, maybe it won't. &gt; You've introduced a lot of complexity for little gain. I'd argue it's less complex than it is unusual, and that people are already doing this to a degree with one-page applications. Any page that attaches views to hash (or history api) URIs is using the server/client architecture, just in a more limited sense. It's no more complex than the existing Service-Oriented Architectures; it's just extended into a local environment.
&gt; There is a performance difference between [] and {}; Yes, there is. In many cases, object access is quicker than array access.
There are *already* methods on arrays in Javascript that probably do what you need to do: ``map``, ``reduce``, and ``filter``. What exactly do you *want* your code to look like?
Yes I know the var address is empty (I'm working on finding how to read JSON
Not to be a jerk, but why would you want to use mapquest instead of google's map api? Oh and 2) You should probably be using [jQuery](http://jquery.com/) to make this a lot easier. ;)
The first thing I did was find where the text being turned to jelly was defined and changed it to "boobs" I'm not proud but I am satisfied.
cool
I had the same experience early on, but as of the last few months documentation has exploded, with really clear api docs. Its amazing the transformation, I just wish it was around when I was trying to load it.
I'm assuming basic access to the page still works? You could redefine ``console.log`` like this: console.log = function() { var args = Array.prototype.slice.apply(arguments, 0); $('console').innerHTML += "&lt;p&gt;" + JSON.stringify(args) + "&lt;/p&gt;"; }; Assuming you also inject a ``&lt;div id="console"&gt;`` somewhere into the page and style it appropriately (so it's a certain size with scrolling, etc) you could see what your code is doing and why it's error-ing out like that. (Note: the above code is unsafe for any objects that contain self-references. If you have that, then you'll need to just rely on the ``.toString()`` results of the objects and take ``JSON.stringify`` out)
This guide walks through the process of using the [WebStorm](http://www.jetbrains.com/webstorm/) IDE's debugger to debug a JavaScript application. It covers all the debugging basics, breakpoints, expression evaluation, program stepping, etc... Of course, this information is going to be incredibly obvious to many of you, but if you are just starting out and havent come to grips with debugging, invest the time into learning it. It will pay off many fold in a short period of time. Of course, you dont need to use WebStorm, you can debug directly in your Browser. I personally find this irritating though, as I constantly try to edit the code I am currently debugging. That said, most of what is covered in this guide also applies to working within the browser. Hope some of you find this interesting. Oh, and if you have never heard of it, Webstorm is a commercial IDE for HTML5/JavaScript development, and in my opinion, it's the best of what is available. There is a fully functioning 30 day trial available if you want to check it out. ( And no, I do not work for WebStorm/JetBrains, I just highly recommend this product ).
re: 4. Others have said that backbone.js is MVC. As far as I can see (and I argue this regularly) backbone is not MVC at all. jQuery is the act of actually manipulating individual elements. The "save" button and the "comment field." The whole comment section would (should reddit be using backbone) be a Backbone view. Backbone uses jQuery to do things like notice when you've typed new characters. And if you're using RES, you have a Live Preview below it. Now, what Backbone lets you do is create a model of a comment; the View for the comment box notices new characters as you type via jQuery; and from here on out it's all Backbone. The View watches the characters type, and it changes the Model. Meanwhile, the Live Preview is listening to the Model and when _it_ changes it redraws itself. And it all comes together when you hit save, and the Comment View tells the Model to save, which sends the comment to the server--either updating the previous model, or creating a new comment. 
Stupid question, is that coffee script?
I'm a bit confused, though. All of the debugging features you highlight are already built into Firebug. What's the IDE bringing to the table? Especially since you can use the REPL to monkey-patch the code and then continue stepping with the altered code and see how that affects things, then when you've got something going right, you can put that final version back into your source rather than peppering your version control with half a dozen incorrect tweaks to the code.
As I said, the process is basically the same. The biggest difference is working directly with your code. I also personally prefer the interface. Also, it is a gigantic boon if your server is Node based. As you can debug it as well, which obviously a browser cannot. Ultimately I should have called it "debugging JavaScript; I'm using WebStorm" but that doesn't have as nice a ring to it.
I think the reason why you're getting all of these questions is because the tone of the article assumes JS devs have never been exposed to debugging. When you started your article stating that there's an advantage WebStorm gives you from compiled languages, I thought it was some sort of advanced linter that checks that variables are kept a consistent type, if knowable from examining the code.
Yes, but they probably exist in the prototype, attaching alphanumeric properties in an object expected only to have numerical property keys might end up with unexpected behavior (or, screw up the performance)
The things I want to do are inside the objects that are stored in the array :)
While this is probably the easiest way to extend the arrays I'm after without doing 'weird things' to it, I don't like putting functionality on that global scale.
So, you basically want ``map``. var array = [{ foo: 'bar'}, { foo: 'baz' }, { foo: 'I pity da ___' }]; array = array.map(function(obj) { obj.foo = obj.foo + "!!!"; return obj; });
Can someone explain to me how someone can learn to do something like this? I'm so lost reading the source code.
there's nothing global about this... the extra behavior is added to the "Cars" class, which can have any scope you like (be it local or global).
&gt; what else should I use? Use whatever you like. I'm not going to tell anyone what they should do. &gt; I prefer ExtJS for all the reasons I mentioned. Congratulations! I'm glad you are able to share your opinions here. You won't have to worry about me being an asshole by making baseless claims about your opinions being uneducated. &gt; If Sencha products are so bad why are they constantly at the front of the pack A lot of bad things do well... By your logic, McDonalds is great food. &gt; All I've heard from you so far is vague comments, nothing remotely development related. I said it sucks because they don't validate parameters. That is far less vague than and at least as development related as what you have said. &gt; Sounds like you need to stop being so narrow minded. If you have anything of substance to say about how ExtJS is better than other libraries, or how it does always validate method arguments, please let me know. I have not been narrow minded in any way. &gt; You seem like a bully just screaming obscenities without any real justification I'm still being polite despite your tantrum. I gave you my opinion at to why ExtJS is shit, and you started attacking me over it.
It could run [a bit faster](http://jsperf.com/eventemitter-3-vs-4/2) especially on V8 if you removed the `delete` calls which cause a [JIT deoptimization](http://code.google.com/p/chromium/issues/detail?id=71837).
And you still won't give concrete examples of how ExtJS is better than any particular other library. Interesting....
&gt; I told you reasons, you said I'm just parroting marketing speak. Those were not a comparison of exact features of ExtJS to any specific other library. You were just listing reasons why you think ExtJS is good. So, that would make you retarded, since you can't even see the difference. &gt; You also said you haven't used it in 2 years, which is why your opinion is not justified. My opinion is most likely still justified, since you cannot even come up with any example of how I am wrong. &gt; And since you refuse to use it again, you are in fact narrow minded. I chose to not use it until I see how ExtJS has improved. I am very open minded and willing to listen to how ExtJS has improved in the past year and a half since I used it. Unfortunately you can't even list any specific technically ways that it's better than another library or that it's actually improved in that time. &gt; There is no debate there, plain and simple. You're right, you are just an imbecile. &gt; Why dont you want to tell me your preference already? Anything is better than ExtJS, but that's not even relevant. If you want to have your pissing contest over which framework is better, you can go do that. &gt; I think you just love being a dick. I said ExtJS was shit and I listed a very specific, technical, and practical reason why I believed so, after which you claimed my reasons were stupid and called me a retard. That sounds like you being immature and insecure, not me being a dick. &gt; Nice username by the way, didn't notice until just now I was arguing with an immature child, but it all makes sense. Way to contribute something technical to the discussion. More ad hominem attacks really show you know the technical merits of ExtJS. &gt; Not worth my time to continue this, I have a new app to finish work on using Sencha Touch so I can get paid... You got a job? That's amazing! You're a big boy now!
I will like to read a post about it :)
*That* is the bottleneck? That? Really?
Great write up. It's nice to see Angular given its due attention. 
It's markdown, makes it easier to write long things. To be fair, he should've just compiled it himself, and host the html instead of making my browser do all the work.
There are a bunch of unit tests [here](http://scottrabin.com/is-js/test.html). I'd also like to get some feedback on the library. Are there edge cases I'm missing in my test cases? Any other useful values or properties I can check as part of a general-case library? I'm planning on making this available via NPM and a minified version after I get some feedback to make sure I haven't overlooked anything obvious.
You mentioned 'edge cases' - is there anything under the "Basic type checking" section that wouldn't necessarily be covered by typeof (for string/number/bool/fn/object) and instanceof (array/html)?
It's a great write up. I still don't see the purpose in jumping on the Coffeescript bandwagon though. 
if anyone has constructive criticism i'd encourage you to open an issue (or better yet a pull request) at the github repo https://github.com/maxogden/javascript-for-cats
try turning on javascript
http://i.imgur.com/wZPWe.png there's a reason to why I gave *Bing* as an example. Not all search engines are google (which uses real browsers) and not all web clients use a scripting engine Javascript should not be used for displaying static content on a webpage
I'd really like to be able to chain them. Something like is.string(string).and.not.empty() Example: https://github.com/visionmedia/should.js I really like what should.js does but I don't need something that huge. I think you're on the right track.
I put this together this morning and unintentionally omitted is.date and is.regex. I'm not sure I like distinguishing integer vs. float; JS doesn't distinguish numeric types, and I don't really see the use cases. If enough feedback supports that, I'll reconsider. I like the concept of is.populated. I would find a new name since it's rather lengthy, but the intent is good. It's similar to PHPs isset. I'll definitely add that. Testing for valid json and HTML I feel is somewhat outside the scope of the library. Both of those are difficult problems to solve. Malformed JSON is easy to detect in the parsing process and I don't see the use case where you'd want to know a string is properly formed JSON without parsing it, so I'd just end up parsing it anyway. I can envision a case to test for HTML validity, but that's costly and I'm not sure you'd really want the case where you know it's valid but you don't want the parsed version. is.in on a string seems reasonable. I was initially going to implement it that way but felt it might be overloading the in function. Since it's all meant to be readable though, it does seem like a reasonable expectation. Thanks for the feedback! 
1) First of you should really use typeof instead of toString calling as I said in a comment. 2) Also you should rename the "in" method. It's a JS keyword, rename that to something like "inside" etc. 3) When you check HTML elements, it would be good to use also instanceof operator and the HTMLElement constructor if it's supported. 4) In the "empty" function you could use the hasOwnProperty method on objects. 5) In the "hash" function you are still chcecking the element by nodeType. But you already have the is.element function (point 3). 6) In the "numeric" function you shouldn't use parseFloat function, isNaN accepts also strings. It's a good beginning but you have still much work to do.
We have a large backbone app, and use Jasmine to do testing. When I get back home, I'll post the implementation details...
Were you aware of https://github.com/onirame/is? It already has the `npm install is` slot.
This is an awesome way to get people to upload their ROMs to me!
Thanks a lot for your reply, and the idea is good. But we did try that, but somehow when Firefox is run with cfx you cannot override console.log or window.onerror. Or at least we haven't been able to. Maybe you know something?
This is a pretty good github repo with some common test frameworks (Buster, Mocha, Jasmine) setup to use Require.JS: https://github.com/geddesign/amd-testing Edit:*** also, you should watch the [video tutorial](https://github.com/vojtajina/testacular/) from the Testacular framework, some good tips there :)
Hide won't work if it's already display: block. None of them will work properly if it's anything besides block or none (inline, inline-block, table, etc...). Also return this for the rest of them so you can chain further.
Also wouldn't work if you did show() before addClass(). The major tenant in chaining is that methods return 'this'. 
Better to make it self.style.display !== 'none' ?
How to fix that?
Or if you have the slightest doubt that your script might break and show an empty page.
return `this` on each method like doomslice said.
I get it :)
QUnit is also a good testing framework, but I'm not sure how well it integrates with require.js.
We use: * Mocha.js with Chai.js * Grunt.js task to run tests in PhantomJS (google search "gruntjs mochajs") * Jenkins CI server * GitHub Jenkins plugin to trigger the grunt build/test script via GitHub commit hook (sorry for no links... I'm on my phone) Tip for Require.js - create a global config file and share it between your app &amp; browser test runner so you don't need to duplicate shims etc. You can then override individual settings in either environment as needed.
1) ~~Still need to do some tests on jsperf to see which is faster. IIRC `toString` actually winds up being faster, but I want numbers to support that claim; it may very well be a lie I've been living all these years.~~ *edit* Found [this jsperf from Underscore](http://jsperf.com/underscore-js-istype-alternatives/7). That's pretty conclusive proof that `typeof` is the winner. Will change where appropriate. 2) Yeah, that was a concern of mine. It's declared in source with quotes just to make sure IE doesn't panic, since reserved keywords are now valid property names per the spec. I was stumped on what to rename it to though, so some assistance here would be helpful! 3) Will look into that and make sure it doesn't introduce unusual edge cases, but that was my thinking too; I wasn't sure why jQuery didn't opt for that method, but as jQuery is extremely well tested, I wasn't going to buck the trend there. 4) Good catch, it shouldn't return `false` when only prototype properties are defined. I'll write a test case to catch that and go fix it. 5) Pinched this one nearly verbatim from jQuery source. You're right, I should probably have my lib eat it's own dogfood. 6) `isNaN(""); =&gt; false`, but `isNaN(parseFloat("")); =&gt; true`. This is the desired behavior, since `""` is not numeric. `parseFloat` is needed to handle the empty string case.
Obviously it's a concern for seo, but regarding visitors, I don't see the issue with requiring js for clients who most probably are at least somewhat computer-literate.
if javascript breaks it shows you a message saying you should turn javascript on, try a different browser or download a PDF and then still shows you the unrendered markdown
Yea, Just the Currently Visible would be fine. I'm going to throw them into a JSON post to a server I have that will return some data about each, then update them with the response from my server. 
Thought about this, but pulling the page again seems less than ideal when I've got the data already loaded. I could do it if there's no better solution, just doesn't feel like the correct way. 
I guess anything matching 'a[href*="/user/"]' would be a good start. You could experiment with what that gives you to find a common ancestor that guarantees you're only working with commenters.
I actually got this from a stackoverflow user, $('a.author').each( function() { var that = this, authorName = that.href.split('/').pop(); if ($.inArray(authorName, authors) == -1) { authors.push(authorName); } $('&lt;img src="http://www.example.com/path/to/image.png" /&gt;') .insertAfter($(that)); }); and that works pretty well, though I have to break it into 2 loops to do my call out. It also finds the Mods in the sidebar though, which is a little strange, they are tagged as Authors in the markup. 
Confirmed. I get the same result in FF but it works OK Chrome.
If you want just those within the comment area then you could use $('.commentarea .author:not(.gray)').each instead.
use parseInt() or Number() around the value to convert it into a number. Then you can perform addition or subtraction without any problem. Read up on parseInt () documentation to see how it transforms a string into a number. For your scenario, you shouldn't have any issues. For bonus points, add the radix as the second parameter for parseInt(). Example: parseInt("22", 10) The 10 ensures that you're using base-10 (our normal number system). It is the default, but it never hurts to always pass arguments to ensure you're safe from bugs down the road.
[String.Split](http://www.javascripture.com/String#split) turns a string into an Array of Strings. You need to convert the String to a [Number](http://www.javascripture.com/Number). You can do one of these: var myNumber = Number(myString); var myNumber = +myString; if you know myString is a valid number. But you'll probably be better off using the [parseInt](http://www.javascripture.com/Global#parseInt) method which will just ignore any extra alphabetic characters in the string: var myNumber = parseInt(myString, 10); If you want to convert the Array of Strings to an Array of Numbers, you can use [Array.map](http://www.javascripture.com/Array#map): var myNumbers = "0 1 2".split(" ").map(function(s) { return parseInt(s, 10); }); edit: added radix to parseInt as others have pointed out.
Please don't implement those text boxes for time input. They are not intuitive and are a horrible choice for a ui component. Since you are using javascript, there are tons of people who have "solved" this ui dilemma. Here's a [stackoverflow](http://stackoverflow.com/questions/1038754/time-input-field) about it. Any of the listed choices would be better than a naked, empty, plain text box.
It would be more helpful to have an array of numbers because the parseInt(); only gives me the first value when I need access to all of them. Thanks for the info. I'm about to read up to the array.map.
I'm not a fan of `isTruthy` for two specific reasons: 1) `!!"" =&gt; false`. Even though it's a string (which is empty), the requested functionality of `is.set` would return `true`. I could change the behavior, but then people who are familiar with JS would be confused by `is.truthy("") === true`, which is not correct relative to the desired functionality. 2) If the functionality of `is.set` were changed to accommodate the new name, no new expressiveness or conciseness would be conferred by the library. Truthiness of various values can be determined by `!!someVar`, which is significantly shorter than `is.truthy(someVar)`. The aim is to provide a concise way to express nontrivial (in the case `is.numeric`, `is.hash`, and `is.empty`) or shorthand (in the case of `is.string`, `is.number`, etc.) boolean tests. Testing for truthiness can be easily accomplished with `!!`, which is already shorter than anything I can write, and does not add additional expressiveness to the library. Unless I've missed something, does that address your point?
Try `"1 8 18 24".split(/\s+/).map(Number)`
There is always iz... Maybe. Didn't check npm.
Given that these return boolean values I'm not sure how he'd even go about implementing chaining... 
... dibs. With credit to you if I get it. ;)
Array.map has the drawback of not being present in older browsers (you could use a [small shim](https://gist.github.com/1031568)). And I would suggest splitting on \D+, so you'll catch any non-number.
My, yes. Windows 8 allows you to create desktop apps using html and javascript.
Funny enough I was just thinking about whether there was a library to do something like this yesterday. I have been reading a lot about sacred geometry and thought it would be great to see something that could plot a [flower of life](https://www.google.co.uk/search?q=flower+of+life&amp;hl=en&amp;prmd=imvns&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;sa=X&amp;ei=SQsyULuxOcjT0QWb7YHoDQ&amp;sqi=2&amp;ved=0CF4QsAQ&amp;biw=1366&amp;bih=522). or possibly [metatrons cube](https://www.google.co.uk/search?q=metatron%27s+cube&amp;hl=en&amp;prmd=imvns&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;sa=X&amp;ei=AwsyULirOvS20QWQmIGIDQ&amp;ved=0CGUQsAQ&amp;biw=1366&amp;bih=522). http://www.geometrycode.com/sacred-geometry/ Let me know if you think this is possible? I think the Flower of life should be possible with what you've already done?
That's pretty nice I was indeed talking about databinding. 
2) As I said, you could use for example inside, within etc. 6) Yeah, you are right. But parseFloat will also parse strings like this: "10sdfdsfsdf". And it's not numeric at all. :-) I would written something like this: function isNumeric(num) { var type = typeof num; return (type === "number" || (type === "string" &amp;&amp; num !== "")) &amp;&amp; isFinite(num); }
It was probably supposed to be used in the View example, instead of writing `'onClick': function () {}` etc. It's just a placeholder function, though it isn't actually used as such.
I had a particularly difficult time stopping creating more particles.
I have a blog post about this topic where I added RequireJS support directly in to Jasmine. http://massalabs.com/2012/04/22/js-testing-with-jasmine.html With my addition, you can write your specs like this: describe 'Order View', ['OrderView'], ('OrderView') -&gt; it 'works', -&gt; new OrderView it 'interacts with other modules', ['LineItemView'], (LineItemView) -&gt; order = new OrderView order.addItem(new LineItemView) results = order.process() expect(results.owed).toBe(0)
I think the book is still very relevant. Having worked in a large team with a group of people that are all good coders but have varying degrees of knowledge of the JavaScript language I think Crockford's recommendations are not too strict. They *are* geared towards developing in a team and reducing the number of errors based on common code problems with teams. In one of his talks he says "It hardly ever happens" is better said as "It ~~hardly ever~~ happens." His standards basically boil down to the paradigm that being explicit is more important than being clever or overly terse. Clever and overly terse code generally comes from taking short cuts in expressing your intentions. If I look at a peice of code written by someone else if (a == b) foo(); bar(); I have a hard time decerning what the original author intended. Did they mean that `a` and `b` are fine if their values are `1` and `true`, `1` and `"1"`, or some combination or neither and they really meant `===`? Also it looks like there's an indentation issue, did they mean to wrap that if statement in braces or did they intend `bar` to always be called? Take the following code if (a === b) { foo(); } bar(); Similar functionality but now I know they want equality without coercion and even with the poor indentation I know what the author intended. I personally think that everyone new to JavaScript should use JSLint at it's strictest until they fully understand the implications of ignoring certain options or using the lax version JSHint. 
ugh. fuck that shit. so lame to post it here.
Agreed. Crockford takes a lot of heat for his beliefs, and sometimes he can be a stick-in-the-mud about it, but all in all I think 90% or more of his book is not only still relevant, but very useful -- especially, as you say, in team environments.
nothing he says in the book is bad. His strictness will help you a lot. 
Ok, I will keep working with that. Thank you.
Great, thanks for the feedback! I'm still having a hard time wrapping my head around it, but I'm trying to read slowly and intentionally.
DC should have title the book "The Bad Parts" since its most helpful advice is the "don'ts" rather than the "dos". re 1) Javascript hasn't changed much as a language since the book was published, so very little is 'out of date'. Some of it might be considered out of style though. re 2) Like any linting software, you can configure your Crockford to be as strict or loose as you require. Take it all as 2c worth of advice, or strict marching orders. Either way you'll be better off having read the book since you'll have a better understanding of your choices one way or the other. 
it's not a superset. It's just comes out with two things that can be stringified. The first is the object with all the cycles removed and the second is an array that describes where the cycles were and what they should point to. If you pass true then you get them both as strings which you can save, then use those two strings to reconstruct the object with a cycle. So it's just plain JSON - though you'll have to store two strings instead of one.
&gt; Is this just an infinite scroll plugin? Why so much logic behind the scenes? Yes it is, but supposedly (although my Firefox experience wasn't spectacular until I waited a while for it to "settle down") they're doing some work to make it more efficient for screen repainting. From the site: &gt; A ListView is a container that moves content in and out of the DOM on the scroll event. ListViews help keep repaint times of expensive pages down (and scrolling smooth) by making sure that there are never too many elements onscreen at a single time. ListViews excel at speeding up long lists of complex HTML elements, where new content is frequently appended to the end and existing content is rarely removed. 
Thanks for the tip. I see that someone edited my jsPerf entry to add this. It may have been you. Very helpful though!
Thank you for pointing this out. I knew there was an issue with this kind of thing on jsFiddle but I didn't think it would apply to this for some obscure reason. Someone has submitted an edit to the tests that fixes this and also sets values to null and doesn't delete them. Thank you!
Simply put, you would just make more entries for them: require(['view1', 'view2' 'view3', ...], function (view1, view2, view3, ...) {}); Of course, this can quickly get out of hand. I mitigate this by being liberal with spacing and having consistent formatting in both the dependency list and corresponding function parameters: https://github.com/jeremyckahn/stylie/blob/master/src/init.js#L2-23 At a higher level, you should consider *why* you need so many dependencies for a single module. Would it be better to have some dependencies required by another dependency module? For example, if you have Views for "Button" and "SubmitButton" ("SubmitButton" depends on "Button") and init.js only cares about "SubmitButton", then only the "SubmitButton" module should list "Button" as a dependency - not init.js. Require.js will resolve the rest for you. Sorry if that was hard to follow. I hope it helps!
It's easier to write. It's cleaner to execute a no-op function than to do a null check each time. The performance hit is trivial, and you'll save on file size as a tradeoff.
But why?
I appreciate your feedback. However I have to disagree with the comment "anything but analytics" It might not be features that I'm looking to take advantage of. Some decisions are purely esthetic and using the navigator.platform information makes some design decisions feel a little less convoluted. I know to a programmer that might sound like nails on the chalk board, but for some of us it makes things a little clearer. 
Surely you'd use the User-Agent for that, though. [It's a lot more fine-grained than just "iPhone"](http://www.enterpriseios.com/wiki/UserAgent). 
My favorite boilerplate-busting Backbone libraries: For data binding: [Backbone.ModelBinder](https://github.com/theironcook/Backbone.ModelBinder) For views/templating: [Backbone.Marionette](http://derickbailey.github.com/backbone.marionette/)
Agreed! I'll add: If you've never written one before, don't worry. Writing a directive is incredibly simple. It is a very lightweight and useful concept once you get the hang of it.
DO LIKE! I changed the bg-color to black though :3 canvas { background-color: #000; }
Yes I'm the one who added the new revision in your test :)
I second Marionette. It makes it so much quicker to develop a backbone app.
Thanks! I didn't even think of checking the Require.js docs
Well, your idea is pretty good, but I think you should take a look at XML / XSLT. Basically, they do the same you are trying to do: you get an XML (which will be the markup code you have written), then you transform it using an XSLT file. The benefit of this process is that transforming can also be done at build time, using, for example, PHP (any XSLT processor is valid in general). For your project, I think (not tested) that you could use NodeJS + a DOM library, to emulate HTML documents.
It's doable in Node.js, or any other programming language for that matter. You can use a regular expression [like this one](http://stackoverflow.com/questions/317053/regular-expression-for-extracting-tag-attributes) to extract out the attributes and then replace them in your output HTML. If you want to use the jQuery code you wrote, though, it'll definitely have to be using Node (or some other server-side JavaScript framework).
I wrote this for someone else on Reddit before as an example of how to use jQuery, Express, and node-mysql together before. It should be relevant to you too, so just replace the data in the jQuery.ajax() payload with your desired map data. It does use an older version of Express, but the general idea should be the same. Good luck! https://gist.github.com/3180770
Oh, I am very willing to learn, but I would like to continue on my path (HTML5, JS) and not start something completely new (and certainly not PHP). And thank you for the fish, another mention of node.js, all I needed to hear. ;) 
Thanx, so I will look into node.
[TopCube](https://github.com/creationix/topcube) allows you to create desktop apps on top of NodeJS 
You can't put script tags inside the script window.
It's working as it should (the JS code). Your problem is HTML and JSFiddle. In the script box of JSFiddle, you should omit the script-tag, and load the library through the left sidebar. As for your HTML: An un-ordered list (ul) can't be a child node of a paragraph (p) element. Change your paragraph to be a division (div), and it works as it should. Also break line (br) can't be a child of ul. Example: http://jsfiddle.net/mrMyL/9/
Fix here: http://jsfiddle.net/boblauer/x37Z3/ 1. You should add external resources through the "Manage Resources" panel on the left. 2. You don't need to add script tags, the bottom left panel should be pure javascript, and will be enclosed in script tags for you by jsFiddle.
That doesn't do the same thing I stated above. I personally categorize use of the ternary operator under "clever" code and try to avoid it. It's a little harder to read and it's not very maintainable, if you need to add more complex behaviour later you end up having to re-write it as an if/else anyways.
your function name is odd tho since it has Else in it. Perhaps function name change instead? doAlways() instead of doSomethingElse(); or doEverytime() I don't know "else" to me goes with ifs, so name throws me off.
They were just example functions the names had no meaning, I've edited for clarity
Yeah, really awesome. 
I'm not him....but this is my take. Given the code from the article, let's call this the widget library code (tucked away in widget.js somewhere): var Widget = function(options) { this.$domParent = options.domParent; }; This might be implemented in countless places in your app as: widget = new Widget({domParent: $("#autodiv1")}); // lots of code widget = new Widget({domParent: $("#autodiv2")}); // lots of code widget = new Widget({domParent: $("#autodiv3")}); // lots of code widget = new Widget({domParent: $("#autodiv4")}); // lots of code widget = new Widget({domParent: $("#autodiv5")}); Now, if you abandon jQuery in favor of some other DOM lib, even if it uses the Sizzle selector engine you will likely have to refactor the code to account for the `$`. So instead of making the change in 1 place -- that one line in widget.js -- you now have multiple lines to replace, scattered throughout your app. But, I could be completely mistaken. 
Speaking as the original author... I'd be most likely to pass the information as unadorned as possible with something like: new Widget({parentDomId: "autodiv"}) That said, I have nothing really against passing in a DOM element beyond it being a little verbose and an old-timey superstition against using getElementBy. Using a DOM element still keeps the dependency in the widget.
Actually that is more adorned if anything. The problem is you are passing through a string which has to be converted to an element when really you want to do something to the element, even if you are wrapping it in a jquery object. The element is what you want so that is what you want to pass, not a string representation of it. If you pass a string then you limit the calling code to having a selector of the element, what if the code doesn't have that handy? The correct way would be to pass an element, a selector or jquery object makes too many assumptions about the code calling the widget.
Yeah, exactly what I thought. I've added a bit of mouse 'speed' logic (average of distance from last coordinates). This way you can just move the water a bit. http://jsfiddle.net/9YTNz/2/ Also, I like the feel of the water moving on mousedown, vs on click, which triggers splashing on mouseup.
ah yeah that was a quick after thought, I just use fuzzy logic to determine where abouts the pointer actually is. Thanks for the updates for the perf :). I generally am pretty sloppy when doing random stuff in a fiddle.
Personally, I feel this depends on how robust you prefer your widgets to be. It is fairly easy to see if the passed property is a string, a dom object, or a jquery object. If you have conceded that internally, you depend on jQuery, the real decision is if you force that dependency on your users. If you do, than accepting only a jQuery object or a selector that is transformed into a jQuery object is acceptable, otherwise you should also check for a domElement, or a possible ID. It's more code internally, but it allows the user to treat it much more as a "black box" IMO. For a book, however, I think relying on library code (or forcing a dependency) is not a bad thing if it simplifies the example and the library is fairly ubiquitous.
Looks great! The ChaosGame2 one was missing Modernizr so it doesnt run straight away. 
Oh crap! Thanks for letting me know - I replaced the zip with one including Modernizr. Thanks again! 
I'd rather use a DOM-aware solution that is able to work with child and parents instead of a string-based solution.
I really hoped to see full 2D liquid modeling, but this is also fun.
Like it alot, also post to /r/woahdude , they will love it. :D
**Source**: https://github.com/filearts/plunker **Google Group**: https://groups.google.com/forum/?fromgroups#!forum/plunker I'm looking for constructive feedback!
Beautiful. 
what happens if you want to add it to a dynamically created element? one not in the document yet? var element = document.createElement('DIV'); var widget = new Widget({parent: element}); /* later */ document.body.appendChild(element);
that's awesome! i'm doing something similar. i also looked at jaws and decided it would be better to make my own. It's a great way to become a better programmer while having a bit of fun. your engine looks really cool. how long did it take you to make this?
I know that feeling oh too well. That's why I decided to break off from adding new stuff/fretting over older code and get something resembling documentation together, throw up an example that shows off a few things, and just "release" it As for time taken... Github informs me the first commit was 3 months ago, but I'd be lying if I said I worked solidly at it for anywhere near 3 months. It probably comes down to a weeks work tops, but a lot more time spend researching and thinking about it. I'm kinda happy with the state of the code at the moment... Had a bit of a panic a bit back when I realised I'd not touched tilemaps in ages, lots of stuff had changed, and they were probably completely broken! Its a new experience working on something with lots of "bits", so getting things together has been a bit of a struggle. Starting by just working though jaw's core functionality helped a lot, but now I have a few core bits I'd probably do differently (Namely viewports, pretty much every game needs the functionality, it feels like it would be better fleshed out into "scenes" and "layers" or something. But then I have scenes and also game states... I keep going though things like that all the time) That was much longer than expected. 
No worries, I have your pull request here. I will get right on it. Thank you! :D
Way cool. I wish I could watch [this one](http://rectangleworld.com/demos/MorphingCurve/MorphingCurve_RadialGradient.html) forever.
I have nothing constructive to add other than this is really, really cool. thanks for sharing. bookmarking to learn more later.
Was hoping you could tell me why you chose to write the engine using coffeescript over using plain old javascript? I've been really interested in learning coffeescript and I haven't really talked to anyone who has had experience with it.
TL;DR - Mobify.js fires off one request to Jazzcat which grabs all of your scripts and returns back a single concatenated file. As for how it actually works, we use the DOM pre-parsing capabilities of Mobify.js to grab script URLs and remove the scripts from the source document before it's rendered by the browser. THEN a request is made for the single javascript file from Jazzcat. The feature currently only works for Mobify.js projects. Soon, you will be able to use this service on any website by adding a single line of Javascript into your existing site.
I guess there's a few reasons: * I wanted to get used to using coffeescript more, figured the best way was to attempt something large in it * Coffeescript has a more traditional class system, which made sense given I wanted my game engine to split nicely into independent components. I'm well aware the "classes" coffeescript produces are trivial to achieve in plain js, but it felt right. * Coffeescript to me promotes code readability which I felt was important. It also allows me to write less code and write it faster. The main criticism leveled at coffeescript tends to be "but you debug js so whats the point" but I cant say that's ever felt like an issue. Coffeescript is almost trivial to pick up if you know js well, and is even easier if you are familiar with ruby or python. The translation from js &lt;--&gt; coffee is easy to do in your head, but the increase in readability and speed of development is pretty large
Not really. Its basically taken from here https://github.com/josscrowcroft/javascript-sandbox-console but that project was dead and didn't work with the latest backbone etc, so I fixed it up and added a coffeescript support and partially added a better json stringifier. The code is on my github, but its pretty hacky and I havent documented my changes. I plan to add completion and syntax highlighting sometime. Which reminds me, that example badly needs some explanation. As it is the console thing is useless for tinkering unless you read the source!
no, but I will check them out.
Use require.js and a css compiler like styl or SASS and never worry about concatenation build scripts again.
Could you explain this more? How does this work?
Er, you do know about the require.js optimizer that concatenates your files, right? As in, the tool you're supposed to use before production?
It would be really cool if you fetched and compiled JavaScript templates. 
By text I guess you mean text nodes? You can use something like [this approach in jQuery](http://www.bennadel.com/blog/2253-Replacing-Text-Nodes-With-jQuery.htm). Dynamic pages are more difficult and basically you need to look for a browser event and then run your code. there are [DOM change events](https://github.com/jollytoad/jquery.mutation-events) that might work but I haven't really tried them much before (usually people use more specific events but they might not work in your case).
yeah, i'm at the point where i need to let go of the feature creep and start fleshing out the game idea i was working on before things got out of control. right now i'm learning how to write decent ai code which has probably been the most challenging, for me at least. i've learned a lot though. thanks for sharing your code with us and best of luck! do you plan on releasing a game as well? 
I came back in here to be incredulous about the idea that this is somehow javascript specific.
The acceleration seems incredibly slow.. It took me 15 seconds to get across the start line.. I played it on low quality, and I have a decent laptop (Macbook Pro with a discrete GPU and played in latest Chrome).. I love me some Wipeout, but wasn't as playable as I would have liked.. 
with your help, an issue was filed and the author corrected this
Where are the answers? EDIT: Posted mine above. EDIT 2: Dammit he literally just posted the answers 2 minutes after I posted mine.
Awesome! Strangely, it's about 20 times faster in Chrime than FF! They're both using HW Acceleration too!
Thanks for the reply. As I said before ( a few posts above ) this might just resume to documentation vs structure ( maybe bad word ). From what I read, people say that backbone is not the well suited for large apps. I know jsmvc probably has an advantage here, but is building large apps in backbone with a changing team of devs problematic? How would you approach building a medium-large app with a team of javascript developers uninitiated in any framework ?
This might be of some use to you: http://nathan7.eu/stuff/omg/omg.js
The low quality is due to OS X, unfortunately. I played it also on a MBP with a discrete GPU (2010) on full quality in Windows 7 (bootcamp) with no problem. Chrome as well. The whole reason I'm here in Win7 is for playing games; I've noticed a huge graphics performance difference between OSX and Win7. Edit: also, the game speed is tied to the framerate, which is why the acceleration is so slow. I changed to "mobile" quality and got across the start line in under 2 seconds.
* Very pretty! The scenery is very nice; it would be neat if the repetition of the buildings could be broken up somehow (maybe a billboard on top of some of the buildings, or some of them being a more complex shape than a box - look at the skyline of any big city to see what I mean). * I played casual mode and destroyed shortly after 1 lap. Besides the fact that I severely dislike racing games where you can die, I didn't expect this in casual mode. I thought I was doing pretty well too. It totally killed my fun. * I love the hex pattern in the corner; where did you get this technique from? Or if you made it yourself, could you write up a guide or at least post the code? It's really neat! * I also really liked the cube loading "bar". Very nice idea. Again, did you come up with this or find it somewhere? * You really need to make the game run at the same speed regardless of framerate. Have you seen [this game loop article](http://www.koonsolo.com/news/dewitters-gameloop/)? It looks like you're using the "Game Speed dependent on Variable FPS" variant, and you should be able to switch to the "Constant Game Speed with Maximum FPS" variant with no problem. The page actually doesn't cover the pros/cons very well in my opinion, but the difference here is that the game state will run at a constant speed, stepping multiple times between renders if necessary, instead of only stepping once per render. If you happen to be a fan of Minecraft, Notch used this technique in the making of his Ludum Dare entry, Metagun.
I hadn't seen the !! operator before. Thanks, I'll check it out.
May I ask which questions yielded problems?
4) I think in both cases the function name or variables can be used as a parameter. The differences I noticed are: the function definition is globally available while the expression is only available in the local scope and the function definition is available in lines prior to its definition: console.log(a()); var a = function () { return 1; } // error But... console.log(a()); function a() { return 1; } // works 6) The way the console does it is checking for "length" and "slice" properties to be not null. I guess that's the safest method if that's how chrome and firebug decided to do it. 9) That doesn't work if you have a string with a comma or objects. Funny thing that you already know how to copy an array (or array-like object) using slice like in your answer 16. 16) "arguments" have length.
I think the quiz focusses too much on knowing terms like `comparative type coercion`, `MVVM`, `mutable`. You don't need to know these terms and could still understand that you should not compare strings to numbers; keep events, DOM interaction and server interaction separate; and if someone rewrote the `window` object, you should remove that bug and fire that person, not try to work around it. And what's the deal (Seinfeld image) with all the adding/summing of numbers with other types? (Additional questions 1, 15, 16). Question 16 is the worst. Such a function should just throw an error when you're trying to sum anything other than a number. Crap like this and expecting a sane return is promoting bad code. Also for 16, a sum function should not do any rounding and should not return `0.3` when `0.1 + 0.2`. You should use `toFixed()` or something similar when outputting the number. Doing that any earlier is wrong and promoting this in a quiz is wrong.
theyre all kind of basic but can be extended [jtable](http://www.jtable.org/) [jqGrid](http://trirand.com/blog/jqgrid/jqgrid.html) [fixedheadertable](http://fixedheadertable.com/) [datatables](http://datatables.net/) [tablesorter](http://tablesorter.com/docs/) [flexigrid](http://flexigrid.info/) and then there's [this thing](http://www.mysqlajaxtableeditor.com/) 
i got no idea what CSE HTML Validator Lite is, but your code is missing a lot of brackets. try to properly format it and you'll hopefully realize your mistakes. if you have chrome try pasting your javascript function into the console (press f12) and it will show you the errors. edit: also, what is "document.revision" supposed to be? i think you want the document.getElementById() function...
would I need var number_items = (document.getElementById('number_items).value); or var number_items = parseInt(document.revision.number_items.value); to draw out the number of items the user has entered? I have a feeling parseInt is what I would use to send out an integer, not draw one in.
Looks like it would be nice, but it gives me this odd feeling I need a new computer... r300: CS space validation failed. (not enough memory?) Skipping rendering. r300: CS space validation failed. (not enough memory?) Skipping rendering. r300 FP: Compiler Error: compiler/r300_fragprog_emit.c::emit_alu(): Too many ALU instructions Using a dummy shader instead. r300 FP: Compiler Error: compiler/r300_fragprog_emit.c::emit_alu(): Too many ALU instructions Using a dummy shader instead. r300 FP: Compiler Error: compiler/r300_fragprog_emit.c::emit_alu(): Too many ALU instructions Using a dummy shader instead. r300 FP: Compiler Error: compiler/r300_fragprog_emit.c::emit_alu(): Too many ALU instructions Using a dummy shader instead. r300: CS space validation failed. (not enough memory?) Skipping rendering. r300: CS space validation failed. (not enough memory?) Skipping rendering.
parseInt *parses* a string into a number value. To actually retrieve what's stored in the element you would use something like your first line
... or you know you could use HTML tidy for HTML and check your JavaScript is valid by seeing if a JavaScript interpreter can parse it? The screenshot above is from Chrome's developer console. If you don't know about it, you're doing it wrong. I'm highly suspicious of this CSE HTML validator. I don't see why you need to pay for something which looks to be a combination of HTMLtidy and JSlint. And, obviously, one which doesn't catch clear syntax errors.
A _filename_ is the name of a file on disk. A _field name_ is the name of a field in an object. In this case the `bookingForm` field in the `document` object. Unless some other code has assigned this field, it wont magically come into existence.
I guess it wasn't so much the technical side of the questions.... it was just needlessly verbose questions, making js sound like a super high level, complex, difficult-to-learn programming language. Which is what it is not, at all. 
nice point, made me realise I'm still using forEach in a few places, but they're not in the update or draw loops so *phew*
That's the first thing I noticed as well. A *lot* of misplaced braces, which due to JavaScript's implied semicolons can be misinterpreted as valid (if useless) code. My tip is to *always* use the following formatting: if (condition) { // insert code block here } if (condition) { // insert code block here } else { // insert another code block here } if (condition) { // insert code block here } else if (secondCondition) { // insert another code block here }
Out of curiosity, why're you using a table instead of a form?
A few things that hasn't been talked about yet. * Never ever use the table tag for layout purpose if your teacher said so he is a nut case and should be fired. * The way you are checking if an input is valid is not correct because the input would be empty not a single space if the user hasn't entered anything it should look like this /*Note that I am using three equal signs rather than two and the use of camelCase*/ if (firstLast === "") { alert("Errorz"); } You should consider writing a function that validates input something like: validateInput(firstLast) If you want to make sure the input makes sense you could use regular expressions, but it's not that easy the first time. * All though binding events via HTML works it's not a good way of doing it. Events should be bound after the DOM has loaded via javascript it looks like this document.getElementById("the-button").addEventListener("click", calcTotal, false); * Wrapping your code in a anonymous object creates a less cluttered global name space and you will avoid collisions with objects in the global name space. At small scale this isn't needed but it might be good to start by learning good practice off the bet. This also forces you to bind events via javascript rather than HTML. It looks like this: (function () { //Your code here. })(); Hope this helps and good luck 
&gt; if (errorFlag = false){ Congrats, you just set errorFlag = false and didn't run your if statement! ;)
Of course you are correct; I have corrected my post accordingly.
Shhhhhhhiiiit. That's what I get for giving lazy, half-assed help. Edit: I will leave it so that my shaming will be public.
I love this thing and only have 2 main suggestions. 1) Add a console viewing pane. The best thing about jsbin is that you can see console.log() output 2) Support CoffeeScript. :) Not sure how hard it is to embed the compiler but supporting CS source would beawesome. Keep up the great work!
Could you explain what you mean by 'not covered up?' Having trouble understanding.
Yes, I looked at the fiddle. I drag the top element into the bottom area and it drops in fine. Are you saying that you want it to drop into the red box, but have it be offset from the top such that it does not overlap with the bottom green box (Even though the red box overlaps the green box)?
Dude. Thank you a bunch. I really appreciate it!
not impressed?
Under Google Chrome (latest) I do not see any draggable elements behind the red box... http://jsfiddle.net/Wp4LU/23/ I changed the last div element to say 'test' -- but I see this div element appearing above the red box. Have you tried setting event.preventDefault() and returning false? 
http://stackoverflow.com/questions/245062/whats-the-difference-between-javascript-and-java
[code academy](http://www.codecademy.com/#!/exercises/0) I actually made a program, that makes you guess a number between 1 and 100, tells you higher or lower, and swears at you! The console is kind of buggy though, might consider python instead of JS.
9.) I've always just used slice to copy an array var foo = [1, 2, 3, 4, 5]; var copy = foo.slice(); 
I was inspired to make a screencast yesterday after watching some people struggle with jQuery event handling. I've only just recently started getting comfortable with Javascript event handling and wanted to share the three epiphanies I had that allowed me to finally start manipulating the DOM at my will. Let me know if this is helpful for anyone out there, and I'll definitely try to make some more. Any feedback is appreciated.
I'm not very familiar with coffeescript and am wondering what part of it makes you write less code faster? It seems to have a few built in libraries, but if these were created in js, it seems like a pretty similar build time.
Roger. I've reproduced it. I'll have a play around with it. :) I think it may be a bug in greedy: http://jqueryui.com/demos/droppable/propagation.html this seems to indicate that it should work. I can craft a workaround if you'd like, though.
See edit.
There is no "child" node. the greedy option only works with parent child nodes, which this is **not** the case....
But I want .draggable to be droppable. In my real code I have different code for when you drop on a draggable and for when you drop on the bottom.... In the fiddle it does the same for both.
Yeah... kind of a facepalm moment for me. I guess I wasn't thinking when I went to r/javascript (I clicked the subreddit link from someone else's post, I didn't search r/javascript directly) Sorry about that guys, but thanks for the humor
Node.js is Google's V8 javascript interpreter, packaged as an executable with a bunch of very nice libs. Those libs happen to have a web server, so you can spin one up. You can also find add-ons that give you the mvc format of DJango. There are probably some libs that use the same view syntax and DJango. I'm not too familiar with the other two, but I believe Angular allows you to create html extensions, and Backbone is an mvc framework on the client side. I imagine it could be used with node.js to do the mvc on the front end. I'm sure someone will correct me if I'm wrong on the last two.
I'm currently running a team of 4 front-end developers with no previous experience in large-scale javascript development, but with good general js and dev skills. Currently our front-end codebase is about 30KLoC, and I'm estimating we'll reach 60K before it's all said and done. There are two apps, one running on the web and one on mobile hybrid scenario with shared components between them. The GUIs are rich and stateful. We evaluated JavascriptMVC, but found it very heavy and hard to get into. Instead we chose to build our stack on top Backbone and Require.js, with a slew of other libraries mixed in (Handlebars, Jasmine etc.) We've had to do a couple of architectural refactorings along the way (mostly due to poor design choices, not Backbone), and I'm very happy with where we are in terms of manageability of the stack. There's nothing in the toolset that makes it poorly suited for teamwork or large apps, as long as you keep code standards high (lint, review, refactor when necessary). I'm sure JavascriptMVC could've helped us in some regards, but Backbone has been a delight to work with. Here are some lessons we have learned: * Use a module loader. Backbone alone isn't enough. Require.js is good, but I haven't tried anything else. * Inject your dependencies (via constructors). This makes testability a whole lot easier. We still have some corners of the app where we haven't refactored out code where views and models acquire their own resources from global state, and testing them is very difficult. * Agree on coding conventions, not just on naming level, but also on how the code in the modules and the files themselves are organized. With Backbone one key thing is to name private methods differently (we use _-prefix), because Backbone doesn't support private methods. If you use require.js, when you require a module, make sure to assign it to same variable name that's used in the module definition. Makes it a lot easier to grep where the module is used. * Lint and use an IDE that lints. Sublime Text ja IntelliJ IDEA are good. * Write tests. A lot of tests. A wonderful thing about Backbone is that you can actually test it really well if you've got your dependencies in order. Even Views are unit-testable, which is something I've always dreamed of in other environments but never found a good way to do. We use Jasmine. * Keep files sizes small. You'll probably combine them in build anyway. * Whatever build steps you take (minification, optimization, combining files), make sure the code builds at all times. We use r.js to build, and we've had stretches of time when our app simply didn't build, because some non-AMD module dependency was not getting loaded in the right order etc. It's easy to let it slide, because during development you can (and probably should) just develop against unmashed source. But just fix it when it's no biggie. If you let it go for a while, you can end up with a huge hairball of dependency hell. Actually, we're in the middle of one right now. *Sigh.* * A personal peeve of mine: Avoid using Backbone.Relational. At first it appeared to solve a lot of problems regarding model relations, nested models etc, but after a while it became unmanageable. It works by overriding Backbone.Model constructor, and maps relations between types of models by catching all instances of the types globally. I'm sure that's great for todolist-demos, but in reality you simply need more control than that. Also, it was too magical and scary. Removing it from our codebase was bit of a pain, because it's so entwined into everything. Last and (I believe) most important lesson, if you follow it, basically solves all the issues listed above: Write code, not javascript. You and your team shouldn't forget everything you've learned from software development just because "it's javascript". Sure, you should use the functional and prototypal aspects of the language to your advantage instead of fighting against them by writing Enterprise Java (or whatever) in javascript. A lot of things can be done easily with js, but that doesn't mean you should always do it. Don't monkey patch or take shortcuts. *TL;DR: Backbone is wonderful, but you need to be vigilant*
Some time ago I was interested in JavaScriptMVC. It looked very solid, but I now feel it was too complicated for my simple projects. Development was going very slow and I didn't finsh any of two started. At the time the most popular frontend JavaScript frameworks were JavaScriptMVC, Backbone.js and Knockout.js. After some time i got familiar with Underscore.js, and as you probably know Backbone.js base on Underscore.js (both are created by Jeremy Ashkenas). So the most important reasons - it's popular, simple, well documented, and created by person I admire:).
renders at like 4fps for me. Ends up looking like a gif with sound imo
So you don't have any reason against Angular.js, I'm asking b/c I want to use it in my incoming projects. I've always used Backbone.js but I find it a lot more verbose than Angular.js, besides, the last one is made by Google if I can recall properly.
I'd compare express to more like flask in python.
Excellent links, thank you so much.
Runs like a champ on this end (even full screen) in Chrome. I didn't try any other browser, though.
Well, things like this could be discussed forever, but for what its worth, in this context you have to avoid pretty much all helpful array methods, as they are orders of magnitude slower than for/while loops. See http://jsperf.com/array-filter-vs-loop-match for a comparison on the stated example.
jQuery, Backbone and Angular are (orignally) all 3 client side JS libraries, As you already know jQuery, I'll skip, Backbone is a library that helps you structure your JS app in Models, Collections and Views: think 'MV*'/MVC in the client, and is Angular pretty similar (although Backbone doesn't force you to write as much boilerplate code as Angular, which is why I personally like it) ... you could also use Backbone with Node.js if you wanted to (at least most of it's components) although the code for an app with Backbone on the server wouldn't be exactly the same as a Backbone app running in the browser. A look at some Backbone and Angular examples would help you see exactly what is handled by what and where, a good starting point for the client side is Addy Osmani's TodoMVC project on GitHub https://github.com/addyosmani/todomvc As for Node, I'd say the same thing as myevillaugh and Ramone1234
I'm not sure if this is much help, but the first things I notice is type="text/javascript", which is no longer used. And why call the color rgb(255, 255, 255); instead of just "white". And you didn't give the code of the span that would actually be swapped? I don't see any id="textdesc" in there.
thanks for the tips
The type attribute of script tag is optional only in HTML5, where it defaults to text/javascript. In other specifications it is required. edit: Downvote me all you want, but what I said is true. Go read the W3 specs.
&gt; Also... always end your statements with a semi-colon ~~while learning~~. FTFY. Makes the intention of code much clearer and prevents subtle bugs.
Ah... nice! Wanted to put the answer, but we don't have spoilers?
That's a very useful app for people who like to tweak their terminal colors. Thanks for making it. The design looks clean, too. :)
Let's just give a little hint and preserve this as a learning example for future frontend developers. The error is "object is not a function" and typeof new function(){}() returns an object.
Yes, it was quite popular on Linux channel. Currently it has only .Xresources support, but I want to add also export to other terminals.
Bummer! I'm going to read into that a bit. Any known workarounds?
Slightly useless, but it was fun to write. There are a [few](http://lunicode.com/about) of those out there, but my goal was to make the best one. For example it can convert the text back and flip umlauts: äöüÄÖÜ ∩̤O̤∀̤n̤o̤ɐ̤ The library behind it is on github: https://github.com/combatwombat/Lunicode.js
Express 3.0 wasn't completed (or docs available) when development began on it -- looking to getting it working with both Express 2.x and 3.x!
I think it has to do with the nature of the job, and what is considered correct posture/position. With architecture, there's drafting and drawing involved, so their desks are angled toward them, and increased height gives better perspective. Working on a computer, of course, requires that you're not on an angled desk, lower/sitting desks are more common and thus cheaper. I have seen offices that have or allow for standing desks, or desks with elevated height. We've discussed it our office a few times. PS, this answer is based on personal experience slash my own opinion. No resources or citation.
Kinda makes sense if they draw/mock with real tools, but I worked in advertisement agencies with standing desks before and most of these people are staring at a screen all day, no actual drawing involved. I actually worked 3 months at a standing desk (graphics work though) and really loved it. Damn, this post really makes me wonder now.
[This](http://www.2ality.com/2011/06/javascript-equality.html) does a nice job of explaining and giving multiple examples.
What is this "Tools" menu of which you speak? edit: I see it now. In the webkit nightlies it's available on the Developer menu. It's not there in Safari 6.0
Without a doubt, nay. Many of the tools that used to be just a click away are now buried in subpanels and pages. For example, want to find out where the css being applied to an element is at? Used to be the file and line number were right there in the styles inspector. Now you have to click on the "take me to this file" arrow, which switches to the source view for that file and puts you on the line. On paper this probably sounded useful, but in reality it makes a simple lookup take three times longer. At first it seems like the JavaScript console is just plain gone, but no, it's been turned into some sort of paged monstrosity under the "Log" tab. It used to be you could tell inspector to only break on unhandled exceptions, or never break at all. Not so anymore, now it always breaks for EVERY exception, and you can't turn it off! View Source now always opens the inspector, and all the extra cruft that comes with it. And why the hell did Apple leave out the Dock To Right option? Oh, I know, probably because this layout is unusable in anything narrower than 800 pixels. Basically I've been forced to switch to Chrome for any real development, despite Safari being my preferred browser on the Mac.
nay. I still haven't been able to find post variables. In firebug it is really easy to find them when looking at an ajax request, but I cannot for the life of me find post variables with safari 6 inspector.
Yeah, I've always been a Chrome-first developer but I do a lot with HTML5 video so there's a lot of Safari-specific issues I have to deal with. Now it's going to easily cut my productivity in half on Safari trying to work with the new tool.
COOL!
Not useless. It should be marketed.
saying "checks only value" is not really accurate. 2 and "2" are not the same value. == potentially coerces values into completely different values then does an equality comparison.
That stack overflow link points to the same one that this reddit post points to... (this is a karma post?)
I love this site, Defiantly saving this! Well done sir! Ninja edit: (/) (°,,°) (/) Why not Zoidberg?
Maybe some tasteful ads if the hosting costs too much. Or as a Facebook App. Buy extra characters for credits, Like™ it or I'll sell your social graph :&gt;
ye gads. All these years I've been doing var foo = function () {}; for what I thought were cargo-cult reasons, but by god, this is the proof of the rule. 
I want [this]( http://www.hermanmiller.com/products/seating/work-chairs/embody-chairs.html)
That would be awesome if that were the case, but no it's not being generated by knockout. I created a fiddle so you can see what I am talking about: http://jsfiddle.net/9bEBD/
So I had an interview for a JavaScript position. After several rounds, I was asked to submit a final demo. I wrote it entirely in backbone as I figured it was a good opportunity. I was told I could use any JavaScript extensions so I figured using a jacascript framework was okay. Well I wrote the demo in a day and it worked 100% as far as the specs were concerend. I was told my code didnt show enough 'passion' because I wrote it with a bunch of 'configuration code'. 
Wasn't saying your post was a karma post, was referring to the original. I don't understand why a 4 year old Stack Overflow answer is being reddited.
I don't know if this will work for your real problem, but if you have control over when the divs are being added/made visible, you can do it like this http://jsfiddle.net/jRUFs/2/
I believe that's the point he's making. By using a library that enforces a certain (good) design pattern, it has shaped the way he approaches coding in general, even without explicitly using Backbone or another MV framework.
There are no change events for DOM changes in JavaScript. Actually, there were, but I think only Firefox implemented them at some point but they have since been removed because they caused major speed issues. You could build a small object that you can attach to a DOM node and which continuously polls it for its number of child nodes. If that number changes or reaches a predefined value, it could trigger an event you could use to do whatever you like.
Is this the matrix? You clearly dodged a bullet there.
Funny enough, that didn't even cross my mind haha! I can definitely just update an observable once I find out what elements to show or hide. Sometimes it's the simple things you tend to overlook! Thanks a lot!!
You are correct, however it is possible to get the old WebKit Web Inspector back. [Here are some instructions on how to replace the new Inspector with the old one](https://gist.github.com/3448642).
Er, uh, this is pretty much OOP JS 101 isn't it?
What kind of content do you want? Stuff like http://www.blobsallad.se/ ?
Let me don my **Skeptic's Hat**: "I know guys! Let's put up a site where untrusted code that by default can interact with your GPU gets submitted by the community!" "What about hackers!?" "We'll write an automated testing suite!" "ಠ_ಠ" Good luck writing your new web browser! **Edit:** "It's fascinating... this script breaks out of the sandbox, but only does one thing" "What?" "It clicks the upvote button for itself before it crashes the computer" "GENIUS!" 
You could set it up like funnyordie.com Have us put our scripts in there and make them all open source. Duh it's javascript. If you need help with back end programming to do something like that let me know. I built something similar with lisp scripts just to teach myself the language. I have ridiculously little experience with canvas so I would love to see what others make and have a place where I can post small experiments as I learn it. I code every Saturday as a practice so you are not encroaching if you ask me to do something.
Oh, well then, That's different. I had thought from other "use reddit to vote" comments that you were going to have some kind of voting system.
&gt; There are no change events for DOM changes in JavaScript. Actually, there were, but I think only Firefox implemented them at some point but they have since been removed because they caused major speed issues. This is doubly untrue. 1) DOMNodeInserted still exists and is supported in all browsers, albeit not recommended. 2) Modern browsers (Chrome, Firefox, Safari... unfortunately not Opera) support MutationObserver - which admittedly isn't well documented (I just learned about it myself recently).
It would take a manual code review prior to even an administrator/moderator running the code to determine whether code is malware or not. MS research has done a bunch of work on detecting javascript malware: http://research.microsoft.com/en-us/projects/nozzle/ tl;dr: it's a very difficult problem
Didn't Khan Academy just come up with that in their new CS module? Edit: [link](http://www.khanacademy.org/cs/new)
I love this idea and can't wait to submit something! But I would like to be able to choose the update speed, I usually have like 20 fps for my canvas games and they look great .-. Also, what about having a menu for selecting older scripts?
Why make this a built in when it can be implemented readily as an extension? Languages are quick to add features, but slow to remove them. Once you add, you can't go back, as far as programming languages go, and especially one like Javascript with so much dispersal.
https://www.duckduckgo.com/html/?q=css%20reverse%20image
If you have access to a Mac you can use Automator for this. Create a workflow with the Flip Images action in the Photos library. It should be pretty easy.
What browser? If you use a non-ie browser, you can use css3 3d transformations. Look at this in webkit (chrome, safari, android/ios/newer blackberry browsers) http://jsfiddle.net/EmEhRKay/yPbwh/
object.watch? Netscape Navigator had it in the 90s. Might as well send me hamsterdance.
Are you specifically trying to solve this with coding? If so, try this CSS: http://snook.ca/archives/html_and_css/css-text-rotation Alternately, could you print out the page and have one of the students cut out the seats and tape the rectangles upside down on a piece of paper during the first class?
Thanks! Yeah, I kept trying to add rotateX like this: -webkit-transform: rotateY(180deg); -webkit-transform: rotateX(180deg); No idea what I'm doing here. But anyway, this should work...
Pro: you don't have to muck around with Object.prototype (verboten) any more. Con: you have to keep mucking around with Object.prototype - even though it is verboten - to maintain backward compatibility.
Is this a lie? http://i.imgur.com/xe500.jpg
Solved! See edit on the original post. Thanks again for your help. You saved me a lot of time.
I catched your idea and it seems to be good. I may be even try write something for it.
How exactly could you implement now? Wrapping getters and setters? I don't see any non annoying way to get this behavior. 
Is this going to "change the way I think"? I feel like that happens more often than I change my oil.
just -webkit-transform: rotateZ(180deg); works and is closer to the original intention of the post. rotateX means rotate around the X axis 180 deg (which flips the thing upside down so the front is now facing away from you) and rotateY rotates around the Y axis which flips the element again and also happens to appear as tastynoms desires. But rotateZ means rotate the thing around the Z axis which is the axis pointing out of the screen. With rotateZ, you can do other angles like 90 and 270 and get what you would expect.
If the standard idiom is to loop over changes and feed them to a function, then this Object.observe(o, function( changes ) { changes.forEach( log ); }); should be tightened up to this Object.observeEach(o, log); I can't think of a good method name (since 'observe' is already taken). 
seems to just initialize the color to be nothing. if the setColor function doesn't get called. Otherwise if the Color function is called, it will be set to ''
Glad you like it! The performance is a little unpredictable, though...it uses a timer for updates but I should really change it to use requestAnimationFrame.
For me, the most frustrating thing with any language development in Javascript is that we are constrained more by what versions of browsers the client wants supported, so even though such new features are available, we cannot exploit them until unsupporting browsers are no longer mainstream. If you're developing applications for public domain (i.e. government) then you're going to be held back by multiple generations (only recently was support for IE7 not required in one project I've worked on).
You are not understanding me in here. I'm not trying to prove you wrong, for I already admited that "...if I can recall properly"; I was looking for someone to clarify the subject. Do you have any proof of what you are stating?
No mobile version. Not even offered on any major CDNs. Clearly not ready for the big time... I'll stick with MooTools.
While I usually think twice before I throw a framework at a JS problem, the examples on the page don't account for browser bugs or incompatibilities (which is one thing that frameworks usually make simple); for example the AJAX call will not work in IE6. Otherwise I like the sentiment to promote the usage of vanilla JS.
The shorthand version $.post could also be used instead of the example on the website. As for the adverts, I haven't seen an ad on the web since installing AdBlock.
You do realize that it is a joke right?
The "&lt;script src" part, yeah. But plain &lt;script&gt; tags where you put JavaScript were included for the jQuery examples but not for vanilla JavaScript, despite being required for both.
Ah, true.
Hahaha it's quite hilarious! When you are ready for production.... You need nothing (with the exception of the 10K if to make it work cross browser). On the other hand it represent the world as it should be (w/o browser incompatibilities). Funny.
Brilliant. It took me a while to catch on. :D
A-fucking-men. I hate interviewing developers who pepper their résumé with the buzzwords of JavaScript libraries only to not even know how to debug basic JavaScript. 
To be fair, jQuery does require an extra script tag. I think a fair comparison would have included script tags for both. Although, to be fair, all the code should have been properly indented too.
Yeah ... until you realize that the jQuery is actually shorthand for hundreds of lines of vanilla js. Suddenly just writing the code you want doesn't seem so bad after all.
&gt; as it should be If you only aim to support browsers supported by Google, then it already is that way.
It's been two years since even Google supported IE6. Unless you're developing for some entrenched intranet, I'd say it's a mistake to add code just for IE6.
Any links for demos and working samples?
hah, we're still supporting IE6 (as much as we can at least)
Dunno bro.. CDNs are pretty sweet
What about the JS code?
I understood it but had a total brainfart when typing that comment. No idea why it was upvoted.
I dunno ... monopolies n stuff. My idea of developer nirvana is that every browser follows standards to the letter within a few weeks of finalization, and, somehow, nobody uses old browser versions. Also that other people debug my code for me, so I basically just type pseudo-code.
haha no worries :)
I cannot find the donation button!!!
JavaScript? Yeah, I've used that library for 10 years now. Definitely not as fast as JQuery though.
It's a joke, people... calm down.
XMLHttpRequest works with IE7+. Less than 1% of the US uses IE6.
I just wanted to illustrate what people easily forget. Take window.event, which is still required in IE7, instead - or character addressing in strings, which can't be done by mystring[charno], but must be done with .charAt() in IE up to version 8.
It seems to be quite similar to the old VaporJS framework http://vaporjs.com
If you ever need an understanding shoulder to cry on, I'm always here for you, you poor, poor creature!
The most infuriating thing in the world is when someone asks a good Javascript question on Stack Overflow and all of the responses use jQuery.
And yet, where I work over in the UK we have to maintain webapps on IE6 (The IE6 on W2K no less) because of major clients that are unable to upgrade...
When was that written? 10 years ago?
According to me you must visit the http://johnpapa.net/5-minutes-with-data-binding-and-javascript-using-knockout-and-jsviews This site will contain the useful information regarding the java script 
So don't work in the UK.. Crazy Brits. :P
I developed a similar library called WatchJS, take a look: https://gist.github.com/1627705 it can watch a single attribute of the object, many attributes, all attributes , array pushs.
I had an interviewer ask if I use jQuery from day to day. I told him "Only if I have to. If we're simply changing a few things on the DOM, there's really not much of a need. I use it mostly for animations if it's more complicated than changing an x-y-coordinate." He asked "So, we use jQuery a lot here. We're really looking for someone who knows how to use jQuery." ... "Yes, I can use jQuery." I didn't accept the job offer.
&gt; I think a fair comparison would have included script tags for both. [I think this is what st-boost is talking about, people](http://i.imgur.com/8ouxc.jpg). st-boost [clearly knows](http://www.reddit.com/r/javascript/comments/yv9ua/vanilla_js_simply_the_best_js_framework/c5z6zsn) there's no "vanillajs" library. 
IE7 is a bastard transitionary browser that was rushed to market and should be ignored. More so than IE6. Having IE6 means you're ignorant or stuck with legacy apps in a corporation that would fire you for installing a browser that doesn't need admin rights (i.e., Chrome.) IE7 pretty much means you know how to upgrade and can but won't.
Unable to upgrade is a farce, Chrome requires no admin rights to install because it doesn't touch system files and Chrome Frame sits transparently over IE6 for webpages that request it. Unwilling to upgrade, that's another story.
Well, it wouldn't work for keys that don't exist yet, for one thing. I don't mind though, Backbone models for example force you to use a special purpose setter specifically to be able to track these things (values changing, being added, etc). And most of the time I only need this when dealing with data models. I think the whole thing is a little moot considering the [Proxy API](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Proxy) may be implemented in future JS versions and it would be trivial to recreate Object.observe using that. 
Ha! But I don't get the last one. Is that Vanilla? Or some other plugin?
The data you gathered is about your users and thus become a self-fulfilling prophecy. Nobody uses IE7 because nobody supports it anymore because it isn't used anymore, anyway. Other people might find other data. Or the management signed a deal with Microsoft to support their browsers. Not everyone has the same reasons to support the same set of browsers, so while your observations are obviously correct, you should be aware that they only depict your point of view as one of many valid points of view.
Good for you, so you can concentrate on new technology to improve your frontends. In some cases, so can I, but alas, not in every one.
Unable to upgrade because unable to support. Help desk not trained on Chrome.
There should be... When you're on the page, type the cheat: [Up], [C], [Down], [C], [Left], [C], [Right], [C], [A], [B], [C], [Enter]. Then [A] cycles through the sprites, [B] toggles construction mode and [C] prints. Also you can use the mouse with left click to print. However if this doesn't work in your browser it's almost certainly my lazy coding... Edit: [Almost as much fun as the real thing, but without the satisfaction of collecting all those rings...](http://i.imgur.com/33klk.png)
time === money. And when you could use an already working AST walker for JS which is tested and in productive use for years, you don't really want to reinvent the wheel. 
That's a great point! I had forgotten about harmony proxies. Yes, we could have all the middleware we want, at the tap of a finger, without bloating the language.
Yes, exactly. I guess I should have made that clearer.
Only if the [8,821,401 users](https://chrome.google.com/webstore/detail/gighmmpiobklfepjocnamgkkbiglidom) other users do the same.
Being "unable to upgrade" is absolutely a real thing. You've clearly never worked with any government entities.
Did anyone seriously not work this out?
Looks like a great alternative to CKEditor!
I'm beyond crying. Now on it's on to cold rage...
I want to reimplement [zombo.com](http://www.zombo.com) in this.
Also, a is creating a closure which seems like that would be a bit of a memory leak. http://www.ibm.com/developerworks/web/library/wa-memleak/
In **a** only one string is created at the beginning and then the string is copied 1000 times. But it's more complicated for intepret to find **x** than in **b**. In **b** no string is created at the beginning, but in each iteration one string is created and then the string is copied, so finally there are 2000 strings.
~~That's true, assuming those 2000 references are left around for a while. If not, I posit that the memory usage is exactly the same (please correct me if this is wrong).~~ Another question might be, do JavaScript engines cache literal values? In other words, I'm wondering if, in the case of **b**, an engine would see that **x** is a "static" string and cache that into some underlying struct so that upon each invocation of **inner**, **x** points to the same reference in memory. **Edit:** I misunderstood what you said about **a**. If I'm understanding you correctly, when a function references a variable from it's parent scope, it actually makes a copy of said variable within the function frame. I'm not sure I believe that. Consider the following function: function outer() { var x = "Some string"; function inner() { x = "New string"; } console.log(x); inner(); console.log(x); } which gives you: outer(); &gt; Some string &gt; New string This implies that the function **inner** is directly accessing the variable **x** defined in the scope of **outer**.
Trying this out now looks great
ahhh... downvoted for sarcasm. Of course... :)
I'm suprised you got the job. You basically just told the interviewer, "I don't always use the libraries that everyone in the company uses." Being a professional means using the tools at hand. If the web product uses jQuery, and you use vanilla js where you should be using the standard library, jQuery, that's a problem.
You seem to do the same stuff (calling the selectRow method) again and again, which is a clear sign of badly structured code. Here's a shorter version which essentially does the same: NewGrid.prototype._setupRowSelecting = function() { var grid = this; grid._$contentsContainer.on('click', 'tr.grid-row', function(e) { var $selectedRow = $(this); if (!grid.options.multiSelect || !e.ctrlKey &amp;&amp; !e.shiftKey) { grid.unselectRow(); } grid.selectRow($selectedRow); }); }; You could try to find the similarities between your use cases instead of handling every single case in a single if-construct. Makes your code smaller and usually faster. In addition, I'd really like the ability to fill the grid from an JSON object instead a finished HTML structure.
If the object is expensive to create, cache it. If it's something very simple, put it where it should be: inside that function it belongs to. At the very end (if you still have time) you can use a profiler to identify the *actual* bottlenecks.
tl;dr: Profile code, don't waste time pre-optimizing.
You got it. And `this` will consistently be the object your plugin is called on. You can also make "private" functions by just doing `function whatever() { }` in that same `(function($) { ... })(jQuery)` closure, but remember to pass it the `this` as a parameter or via `functionName.call(this, blah, blah, blah)`.
You can. Taking an object and passing it into `LucidJS.emitter()` will augment the object, attaching the emitter interface to it, essentially turning it into an emitter. myObject = { "something": "awesome" }; LucidJS.emitter(myObject); myObject.trigger('myEvent'); myObject.something &gt;&gt;&gt; "awesome"
Thanks much! Looking forward to trying it out. :) 
yep. bear in mind that's a bad idea to use `this` (or any other language keywords) as a parameter name for a function. I'd recommend `$e` if you're passing in a jQuery set.
The GC isn't immediate, and the work involved in the GC will make option A a better performing option overall.
Pretty sure the Dev Tools uses UglifyJS for prettifying minified code. 
Are Min and Max user-defined functions? I'd be curious to know if you see the same results using Math.min and Math.max.
That's crazy.
Apparently it was a passing phase.
This is the first comment I've really wanted to upvote more than once. I've always said that the only reason to use massive libraries like jQuery is when you don't have the time (or the motivation) to write a more efficient solution, but the response is always a bunch of people shouting "CROSS-BROWSER!".
I know, and I agree - but it's also important to decide what you need to support, and then let your code break on unsupported browsers. And if you follow Google's example and start at IE8, there really isn't much to replicate.
You can actually profile this yourself in Chrome using the web inspector's "Profile" tab. My quick test showed that a() took 46ms, while b() took 45ms and an additional 2ms for GC, for a total of 47ms. a() showed no profile for GC at all. You can also use the profile tab to take a Heap Snapshot at any given time to see memory allocation.
Reminds me of this I did for PHP templating a few years ago: http://phptemplatinglanguage.com/
I won't lie to you :) I'm using it to show a floating menu, so the mouseOnToPopup is the most significant feature for me. What do you think about an overload for openTip that makes the close action work by a click on the document instead of only mousing out? (because right now the shopTip command is weird, because it opens the tip regardless of the mouse position, but you have to mouseover and mouseout to make it close. A document click as close option would be a really nice solution to this
Alas, in my case it's not my own decision. I sure hope IE7 will be gone in a few months.
I've read his comment. I've understood his comment. I still disagree with it. What I'm actually talking about here is the older generation, who aren't that comfortable with computers at all, working for government agencies and departments, where they don't have a lot of funding for this kind of thing and where they are dependant on software that will not work on any browser apart from IE6. Not only is there pressure from what IT departments they actually have - which isn't much of one - to not do things like that anyway, but the users themselves possibly don't even know that things like Chrome Frame exist, and wouldn't know how to install them even if they did. Technically, yes they probably could upgrade, and it *probably* wouldn't break things. (Does Chrome and Chrome Frame even support Windows 2000?) Socially and politically, there's no chance at all. **That** is what I mean here by Unable to upgrade.
There are some broken links, would love to see some kind of demo app. 
Chrome has different optimised representations for integers (31bit!) and floats. I'm guessing that the first code example is mixing up integers and floats a lot and causing a lot of translation back and forth. (Math.round probably returns an integer.) While the second examples operates directly on floats up until the end of the calculation. 
What you are describing is the JavaScript conceptual model of what is going on. Only the most naive and simple JavaScript interpreter would actually run like that. Modern engines would see plenty of opportunities to optimise variables and allocations away. 
Can anyone else verify this. On my OS X 10.7 Safari 6 machine, if I play the video, then pause, trying to make the image full screen just gives me a black screen. I tried it in other browsers and didn't have a problem, but it was reproducible every time in Safari.
Which still translates to "unwilling", not "unable" in my book. Also, what is software that only works in IE6? Honest question, I don't know any.
&gt; .children(':eq(' + cellIndex + ')') &gt; &gt; Can be written as: &gt; &gt; .children().eq(cellIndex) Just to state the obvious I suspect that this might be a bit slow if there are many children because it selects them all and then filters down, whereas the first approach directly selects the node.
It's very old versions of software that are used, because the software does the job and the funding isn't there to upgrade the systems. That's the same reason why 12 year old, no longer supported operating systems are still used...
Please make it intuitive to start the demos, because most people won't bother to compile everything by themself 
It's generally up to the browser how to handle each file type - if the user has chosen to open those files directly, that's what it'll do. Generally, this is the sort of thing you'd do with a server-side solution to generate the Excel doc and send it back to the user on request. Doing it with clientside with javascript is just a big hackish. All the big web languages have packages to generate native excel files at this point, it might be worth looking into?
I would also like to see the grid take a json object, but everyone here prefers creating their html on the server. My last day is friday, so I'm not going to fight it at this point, just hoping to leave them with something better than what they have now.
We have this solution in place (though I'm sure it could be improved upon). Seems this would imply that we just load all our modules regardless of whether they are needed. Not sure if that is the better solution, or if we should stick with the "load if needed" method. Thanks for your input :)
End goal would be Require/AMD + Backbone..this is a long ways off though, I'm afraid :-/
It's worth us doing it. We're talking specialist software here where the clients pay us thousands of pounds *every year* to be users of it. Plus it's an interim measure until they migrate onto the new platform that we are building, or move away from us, but that might take 5+ years to happen... I know what you're saying, and in the majority of cases then supporting IE6 and IE7 doesn't make sense, but people need to be aware that situations still exist where supporting those browsers is required...
I agree. Demo would be nice
Checkout a jquery plugin called dataTables -- it has a method for 1) making your tables way more awesome in the first place, plus 2) exporting the table to excel format with a single click.
My coworker and I*
It looks like you intended to do some for loop caching with width and height in preparepoints, but it wasn't done (variables width and height declared but unused). And it seems that the bulk of the processing is associated with link distance, so there's some tweaking to be done there (possibly by caching the calls to Math).
I think it's appropriate for this subreddit and also /r/node.
Defining a function within a loop is definitely bad, but neither a nor b does that. Here's an example of that: for(var i = 0; i &lt; 100; i++) { var a = function() { console.log("hi"); }; a(); } With there being no good reason to define the function inside the loop itself, rather than just calling it within the loop.
I'm with you, buddy. If you can learn javascript, you can learn English.
Interesting. Thanks for letting us know!
What happens if I try to use exerpt() on a string that has multiple matches? Trick question. The fact that I have to ask that means for an unpredictable API. Why are you trimming the omission string passed into truncate? Let the user trim their own input and, conversely, let them include as much whitespace as they like. There's no radix on your parseInt on line 19. Using &lt;= on line 25 causes two conditions to be checked every time. Modify your i or length to allow for simply testing &lt;. You use === on line 26 but only != on line 30. Pick a loose or strict style and stick with it. Consider moving all these functions into the private space of the closure and exposing them through a return object. That way you can get rid of the "this" calls through hoisting. Errant tab after the last variable name in the method signature in line 41. Spaces instead of tabs used on line 43. There's mixed use of double and single quotes around strings. Pick one. Inconsistent tab and space usage on lines 86 and 87. Change &lt;br/&gt; to &lt;br&gt; on line 96. Images and breaks don't need self-closing tags in HTML5. Not sure about iframes. Condition and type returns on line 145 are too unpredictable. What if I sent a null instead of undefined? What if I tried to concatenate the results of this function with another string when it returns false? Make a better condition to test for actual strings and always return a string, even if it's empty. That's just a syntax and basic logic review. Be ruthless with your own code. You can probably tighten up some of that core logic.
I got this as a bit of fun from someone, I initially went with single array then thought it's be better as a custom data structure before finally settling on a different array solution. Anyone think of a better algorithm? do you think it's be better to put the custom chair nodes in an array (to stop garbage collection)? perhaps a quick way using bit masking?
Well, the syntactic difference between coffee &amp; js is not that large, so it would be like posting the same piece of code twice. The library was written in coffee, hence the examples are in coffee. But really the blog post had nothing to do with coffee, so it doesn't really make sense. The code examples shown on the blog barely utilize coffee -- if you were to convert it to js, you'd probably end up with the same code.
Haven't looked into all the suggestions you made but as per the first two, the description of the excerpt function clearly states, "at the first occurrence" and I cant think of why whitespace would be a useful omission for something being truncated.
this is the simplest and easiest solution. Datatables is great.
Note: Can't seem to get this running in FF 15 (stuck on preparing/downloading screen), does anyone get this running?
Thanks for the advice and pointers.
&gt;I suspect [...] Guessing won't help. If you think it's worthwhile to investigate, head over to jsperf and create a set of benchmarks. &gt;because it selects them all and then filters down, whereas the first approach directly selects the node Yes, that's the high-level descriptions of operations. However, this doesn't necessarily reflect how it works under the hood. To make things worse, how it's actually done under the hood depends on the used browser. Also, it may be possible to cache that `children()` query and then filter differently for different tasks. You won't be able to do that with selectors. Either way, it won't matter. This won't be the bottleneck. It will not be substantially slower than recalculating styles and reflow/redraw. There also won't be enough elements to make this measurable in real-world use cases. It won't take longer than half a millisecond and your time-budget for the whole thing are 50-100 milliseconds (that's the point where it stops being perceived as instantaneous).
OK as far as 600kb is it minified? Are you serving it up with gzip? Why can't the code for the widgets also be included? Why does it need to run the jquery selector 30 times? Why do you need a refresh event at all why not just call the check modules thing once when new page content is added? What other context would you need to check the modules other than when new content is added to the page? It looks like there is a screen where you can toggle modules on or off or something? I don't really get what is going on but maybe you can separate some of the data out from the logic a little more.. like maybe just a list of module names and then some code that runs against all of them.
&gt; Takes a string, a section of that string and a radius, at the first occurrence of the section the function selects that occurrence with the supplied radius amount of characters to either side of the section. ...what?
No, it doesn't make copy of the variable but it makes copy of the value (primitive types are copied every time). But it's more difficult to find the value, because it's in parent scope. So first time the interpret will search it in the self scope and the second time it will search it in the parent scope etc.
As of jQuery 1.4, an empty jQuery declaration (e.g. $()) returns a jQuery *set* with nothing in it (i.e. []), not an empty *container*. It's the same as a null-matched jQuery element (e.g. $('ul.ThisDoesntExist') ). You can't append() to an empty set - you're telling it to append the content to *nothing*. Also, variables in js don't get the $ at the beginning, and it's only going to cause confusion if you add it like that. just *foo* and *bar* are fine.
I kinda get that add() can't work on an empty container, but the other answer gave me a good idea on how to make it work. And the $ is for JQuery Objects, it helps remind you of what kind of variable you are dealing with.
Which brings me to $bar = $().add('&lt;foo&gt;&lt;/foo&gt;');; $bar.append('&lt;p&gt;text1&lt;/p&gt;'); $bar.append('&lt;p&gt;text2&lt;/p&gt;'); $foo.append($bar.html());​ and this is what I need. Thank you for helping me with this.
Two very very minor points, Any time I see an 'if' around everything in a function as a guard clause then it's creating unnecessary indentation which makes it a bit harder to read. Invert the rule of the 'if' and just return immediately. E.g. you've got if (!$(event.target).is("a") &amp;&amp; !title.hasClass('open')) { .... } and replace with something like, if ($(event.target).is("a") || title.hasClass('open')) { return; } .... Also, I don't know what others think about this but I like naming my jQuery objects with the $ prefix. E.g your 'person' object is a jQuery object so call the variable $person. It helps readability and it avoids unnecessary 'casting'. E.g. Your code has $(container) but, from the looks of it, container is already a jQuery object.
Thanks for your input! I'll check out creating my own event and see how it goes.
Minor, maybe, but definitely helpful! I've seen the increasing trend of prefixing jQ objects with $, I'll add those again. Thanks for the tip on the 2nd point - I tend to think literally when handling a task or problem and at the time it made more sense to check for when the target isn't the anchor. I'll adjust that. 
Any server side language will work, this is exactly what server side languages typically do. Take your pick of c#, php, node.js, etc. And when the user requests your page, the server will make the request and changes, then server it to the client.
I like a lot of Crockford's work, I just dislike that it seems like he is impossible if someone disagrees with him.
This pattern is very common in Backbone.js.
AngularJS
It's a very widespread bad habit. You're coming off sounding a bit elitist about your semantically correct variable names when it's just a convenience/convention for a language which lacks strong typing. We're not talking about arbitrarily throwing stuff onto $. We're just adding $ on the variable name as a logical extension of `$(foo)` to indicate that `var $foo` probably contains `$('foo, bar')`. Given how many scripts already use that convention, it seems unlikely that $ will be a risky choice for the foreseeable future. If the JS spec changes anytime in the next few years to make $ a special character, the internet would have a lot of retrofitting to do.
Obviously the illiterates have banded together. The downvoting reinforces my opinion of most redditors.
I ran it on ff 15 no prob, latest chrome hung on preparing for me.
Because if you did this at my work, you might find yourself in some unsafe working conditions
Am I the only one who hates the term jQuery dev? I really think it diminishes what we do as javascript developers. It's not just jQuery we do. Frankly there are a lot of other frameworks we could use to do the same thing, but not without javascript. You can never fully utilize a framework, if you don't understand the language beneath it. Ending my rant with a happy smiley :) 
I don't think it diminishes what JavaScript developers do, the existence of such term just reflects how popular library jQuery actually is. Besides, 90% of the client-side JavaScript I write has to deal with jQuery. I can't even remember when was the last time I manipulated DOM or performed XMLHttpRequest without jQuery as middle-man, I'd imagine it's the same for large majority of the web developers.
Is there any external script imported? It seems to be no problem in this example.
Yep it's that one. What do you think of the user's legitimacy? I've looked up some things and he seems to know what he's saying, but he just seems like he is lying.
Then we're back at the beginning with dynamicdrive.com and insert this snippet in the head, and this in the body. That time should not be brought back.
I've noticed all of my banks systems still run in IE6.
None, I really just need to untie the knot in my head. ;)
Minified yes - that is not the gzip size, so it will be smaller than 600kb once it goes live. I've asked all your questions before - unfortunately, nearly every line of code I have to fix, I didn't write. There is a lot of poorly-written code here, but as far as my original question, the suggestions in the comments so far have been great. As for widget JS, you also raise a valid point, but I think it comes down to our overall architecture. That isn't an excuse, and I am motivated to change it, but as it stands now, that is the reality of our code base. Yea, I don't know what the original dev was thinking. It's not a terrible solution, but it is in need of improvement for sure. Thanks again for the input.
Thanks a lot! I will definitely have these fixes in here soon.
Your an idiot.
Thanks a lot! Your last couple of points have already been under consideration and will be probably be in the next release.
Dynamicdrive is sadly still very much alive. What's sad is they even have simple animation scripts that do sliding, toggling, etc that have jQuery as a dependency. Also, &gt;insert this snippet in the head, and this in the body. I think there is a good percentage of "jQuery users" that do exactly this. Just look at stackoverflow
Tried it, didn't make a difference. Thank you for taking a stab at it though. Do I need to restart X?
*sigh*. [okay](http://images.wikia.com/central/images/3/38/Okay_face.jpg). :(
But I see what you mean. Allowing anything as a parameter seems dangerous. I would hope that the function has sufficient param-checking to handle the various input types, rather than silently fail.
Method chaining in ordinary Javascript is really useful.
Not sure if trolling or…
It's "You're" and at least I can write a proper sentence.
No, or at least I didn't have to. I simply installed it and reloaded the demo and it worked. You can find some information under the Graphics section at *about:support#graphics-tbody* that might help, it's also accessible via: Help → Troubleshooting Information. There's also two other things you can try: Start Firefox like so, from a terminal: **force_s3tc_enable=true firefox** Alternatively you may have to use: **force_s3tc_enable=true firefox-bin** Set *about:config?filter=webgl.osmesalib* to point to your libOSMesa.so, if available, this should allow Firefox to fall back to software rendering if necessary. In my case I have it set to: */usr/lib64/libOSMesa.so* 
The downvotes to this comment is why reddit's not as fun as it used to be. My friend, there was a day when reddit would have started a pun thread in response to your self-deprecating facebook shame. Now, you just get down-votes. Now I am ashamed. Have an upvote.
Find a new job.
speed doesn't necessarily equal memory usage.
This is definitely very interesting and I didn't know before hand. In his example though, he would still be creating 1000 references to the string, which wouldn't be as bad as originally though because of your explanation, but still worse than only 1 reference.
You had a `console.log` at the end of your solution which was needlessly leaving a lot of performance on the table. Here is yours without the `console.log` (I also went back to just 100 chairs): http://jsperf.com/chair-ring/9 I see your micro-optimizations and raise you: http://jsperf.com/chair-ring/7 Replaced the `while` loop with a `for` loop of a predetermined number of iterations. This should be trivially unrolled by all modern JS engines. Removed the `if` statement making the code branchless (processor pipelines hate branches). Replaced most operations with bit ops. This ultimately limits the range of sizes your can operate to 32-bits on but it should be adequate for most purposes. All together, I get something like 2 - 2.8x better performance over your version (the non-console-logging version above).
There's no hint in the graphics section on about:support that makes that clear? In my case I have (running nightly): Graphics Adapter Description X.Org R300 Project -- Gallium 0.4 on ATI RS480 Vendor ID X.Org R300 Project Device ID Gallium 0.4 on ATI RS480 Driver Version 2.1 Mesa 8.1-devel WebGL Renderer X.Org R300 Project -- Gallium 0.4 on ATI RS480 -- 2.1 Mesa 8.1-devel GPU Accelerated Windows 1/1 OpenGL AzureCanvasBackend cairo AzureFallbackCanvasBackend skia AzureContentBackend none
Absolutely. But the syntax of it can be confusing if you don't understand how it works, with each method returning this. Throw in the end method, and even the slightly enlightened can easily be confused. I'm just saying that writing elegant code requires deeper understanding.
 Adapter Description nouveau -- Gallium 0.4 on NV92 Vendor ID nouveau Device ID Gallium 0.4 on NV92 Driver Version 2.1 Mesa 8.0.2 WebGL Renderer nouveau -- Gallium 0.4 on NV92 -- 2.1 Mesa 8.0.2 GPU Accelerated Windows 0 AzureBackend skia
&gt; GPU Accelerated Windows &gt; 0 No hardware rendering in other words, sorry. :-(
Isn't proxying and modifying a site potential copyright infringement?
Sounds pretty good. Some notes: With the exceptions of the `maths` versions, the algorithms all perform about `2n` iterations which is `O(n)`. The `maths` version only performs `log2 n` iterations and is therefore `O(log n)`. This is a *huge* win regardless of any other optimizations. You can see this clearly as you increase the number of elements. For example, despite having 100-times the number of elements, the 10,000 element version of `maths` comes in at just under half the performance (since `log N^2 / log N` is `2`). The same isn't true for `array sol'n 2` which takes almost exactly 100 times longer to do 100 times the work.
This sounds like a good idea for a website. Pairing random or otherwise sorted/acquainted devs to do small projects, solve problems, just create something cool ... there could be competitions, games that measure progress, lots o things. Might be a good place to encourage young or new programmers to learn. Hell it could even be organized for classrooms. After all, it's difficult to code with another person or in a group of people if you've only ever done everything by yourself. Could integrate with GitHub, too.
Yep, that's the idea, I'm trying to find out if it would work first; we can start to code this up in the first pair-prog. session. Are you interested?
Yeah, I said jQuery Dev. Don't get your panties in a bunch. I use Javascript for a whole bunch of things, jQuery or otherwise. But when I'm writing a plugin for jQuery or jQueryUI (bleh) then I'm going to call it "jQuery development". All JS devs can be jQ devs, but not all jQ devs can be JS devs. 
Could be an interesting way to start small projects or fix small bugs. I'm not sure you could pair 'randomly' on anything that was getting big.
I'd be up for it. PM me with details and your ideas on the matter.
Oh for crying out loud. I'm not trying to say that jQuery is a language. I am completely aware that it is simply a toolkit. I am also aware that people can 'specialise' in jQuery-flavoured JS development in that they may not ever use traditional methodologies because they are forced into the "jQuery way" of doing things. This is what I mean when I say "jQuery devs". If we need someone to create an interactive timeline with multiple moving parts, we are going to get a jQ specialist in who knows what they're doing. You know why? Because it is the most widely used JS toolkit out there right now. A prerequisite knowledge of JS is going to be required, because there is no way you're banging out a plugin of that size without having some idea how to code 'real' JS. And no, I don't care how well you can smash out a timeline in 'real' JS, because there is going to be a team of people maintaining the project over I-don't-know-how-long, and once the plugin is completed (i.e. the hard part), you don't need a huge amount of knowledge to maintain it, so basic jQ is probably going to be fine. I'm so sick of the knee-jerky bullshit in this subreddit. Everyone is assuming every poster is a complete idiot, or at the very least just wants an excuse to flex their e-peen. Absolutely no room for off-the-cuff remarks.
Compiler + Decompiler.
Excellent advice. I appreciate it a lot. I'm reading up on some of these methods you're using (getJSON, when, etc.).
So much code. JS can decorate functions pretty easily, sloppy example, but it gets my point across with how simple it *could* be function test(arg){ return arg + arg; } function testDecorator(fn, args){ var arg = args[0] * 2; return fn(arg); } function decorate(dec, fn, args){ return function(){ return dec(fn, args); } } x = decorate(testDecorator, test, [2])(); console.log(x)
This is actually a really really good idea. I've always wanted to know what other people's programming habits are like.
As I pointed out on the blog... It does satisfy the pattern since the decorate calls are "wrapping" the original instance. In this example you're not supposed to think of the return value of decorate as a totally new object to be used independent of the first. You're supposed to think of the return value as a *decorated* version of the original instance. In a classical language like Java it might look like this: `Sale sale = new FedTax( new USD( new Sale() ) );` You can do that in JS as well but it would be a lot more code than what we've written. Since the first line of `getPrice` in any of the decorators explicitly calls `getPrice` on the `_super` it will ALWAYS start with whatever price was set on the original object. That's the intent. If you want a new sale with a different value you'd have to say `new Sale()` and start over.
No. No one wants to do that.
what you're proposing is nearly identical to what I described in the first example. If you want to reuse `validateZipCodeFunction` you'll need to define it somewhere on the page. In my example I just hung it on the `decorators` object to keep things organized. Otherwise they would do the same thing, except in your case `add` puts the validation function into an `Array` and in my case `decorate` puts an object with a validate function into the `Array`. Either is fine I think but I can see why some would prefer your way, it's less code.
I agree, you can use functional style to really refine the process down to a small amount of code. Here's one I wrote while working on the article: https://gist.github.com/3492851 I'm coming from Actionscript3 which is statically typed and I'm a self-taught programmer (went to design school) so functional programming style hasn't been a big part of my experience. As I've been writing the design pattern articles I've discovered that almost all of my examples could be written in less code. It's kind of amazing because code like what you have in your example is a cardinal sin in AS3. In Flash anonymous functions and closures can cause memory leaks so they are totally avoided. Now I'm re-introducing myself to the concept and it has been a bit of a head trip...While I agree that your code is shorter, I would personally have a harder time understanding and debugging it. I'm trying to develop that skill but I'm not...quite...there yet. I'm also trying to understand all the design pattern concepts as well so learning both at the same time has been eye opening. Definitely glad I'm doing the articles although my feelings often get hurt :D *edit* how do you block quote code on reddit?
Thats not what I was getting at in that example. The correct behaviour for the decorator would be to do one of two things 1) Provides a set of interface methods which work correctly on the decorator like this var sale = new Sale(50); sale = sale.decorate('fedtax') sale.setPrice(100) // error no method found console.log(sale.getPrice()) //does not execute OR 2) Provides both the set of base class functionality and the decorated functionality like this var sale = new Sale(50); sale = sale.decorate('fedtax') sale.setPrice(100) // sets the this.price from _super so that getSuper now is 100 console.log(sale.getPrice()) //returns 105 What your decorator is actually doing is copying the methods from the original object into the decorator without concern for the fact that the methods which are not in Sale.decorator will not be calling the _super methods and thus will not have the correct this reference though they will still have code. var sale = new Sale(50); sale2 = sale.decorate('fedtax') sale2.setPrice(100) // sets sale2.price to 100 console.log(sale2.getPrice()) //returns 52.5 via _sale Essentially my problem with it is that it is surfacing a bunch of interface methods from the original object which will be operating on the incorrect this object. Classic java example if you have IWindow which has one public method draw() and WindowImpl implements IWindow which has public draw(), public method resize() and HorizontalScroller Implements IWindow has public method draw() takes IWindow in its constructor. If I do IWindow horizontalScrollableWindow = new HorizonalScoller(new WindowImpl()); I lose the ability to call resize() from window. In your code you do not lose that ability you can still call the method it is just called with the wrong this object. That is bad, because HorizontalScroller doesn't know how to resize. If it needed to it would be in the interface.
Four spaces and a blank like before block quotes code. Also the only time you have to be careful with closures in flex or flash was in event handlers because the slightly odd default behavior of the event dispatcher. Other than that it behaved pretty much the same as javascript does. The main problem with AS3 was that it advocated OO style so it was easier to screw up closures by forgetting proper scoping rules.
My initial comment was light-hearted. The second was a comment on your comment.
This is a great idea! I recently participated on Microsoft's systems development trail (ASP.net) and one of the final tasks was developing a online shop (like ebay, but simpler). My classmate and I have never met before and had less than a week and a half to work on the project. We shared a lot of tricks and the work flowed quickly plus our project was the second best (the first place was for a badass who worked alone, but he had some serious tricks!). I would love to see this idea grow, but I think you should've been more specific on your post. What kind of projects are you planning to do? I'd like to participate, but I'm not sure if I can be helpful...
Personally I'd get rid of these : container: $('#form_collection'), boxes: $('.section-content'), titles: $('.section-title'), editLinks: $('.edit-student-section'), If your student object is referenced from outside of this closure and something needs them then ok leave them in. But if nothing needs them you are essentially leaving a bunch of public members of student hanging around and then I as a developer coming in to look at this code have to search the entire workspace for .container before changing the code to make sure what I change doesn't have side effects on anything using student. You can simulate a more private variable by doing this: (function() { var container = $('#form_collection'), boxes = $('.section-content'), titles = $('.section-title'), editLinks = $('.edit-student-section'), student = { studentId: 0, 
yeah it totally will work. In fact when I go back to AS3 I find myself passing around functions now and implementing things like `map` because it's extremely useful. It's funny, when I show my buddies who still exclusively do AS3 something like _.map([1,2,3], function(n){ return n + 1; }); they *HATE* it. I guess when in Rome you do as the Romans so if you're on a team doing AS3 you do things the AS3 way.
You should look at the wikipedia article http://en.wikipedia.org/wiki/Decorator_pattern on the decorator pattern. It has a javascript example with the pattern. It has its own disadvantages though, it modifies the original object. 
Here I took a quick crack at one of the functions: http://jsfiddle.net/bEunK/6/ A few things: * When you are using the on() the second parameter is passed to event.data but you were not using it so you could have been doing .on('click', handler) * The object that is passed in as the this element on a click handler is the element that you bound the event listener to, that is, the dom element you clicked on you can use this to your advantage * You need to use .find() more, it is faster than searching through the entire dom for a particular element and the context means you don't have to write selectors which are quite so specific * Chaining is good and you are using it :) but try to avoid recalling selectors by using it more since selectors are expensive
Doesn't sound like coding. Too much typing, not enough cursing.
This is actually pretty annoying.
Does anyone know of an online channel where you actually get playlists and/or even some speaking topics etc that are coding-themed/coding-inspired (I know Reddit's had "coding music" threads before)?
There is actually work in progress now for adding a native click handler, as well as specifying what handlers you want PowerTip to hook up. The default with have hover and focus events hooked up, but you will be able to override that and make it only hook up click events. You can follow the progress of this work here: https://github.com/stevenbenner/jquery-powertip/issues/22
Thanks for replying so soon. I've implemented both of your suggestions, and the scripts now work fine on a desktop client, however, on mobile devices they are still loading when they shouldn't be? Any ideas?
OK - It seems like it's just a caching issue, as it seems to be working fine on my wife's phone, so i think we have the issue solved now. Thank you ;-)
Respond.js 
What approach would you suggest for templating? Basically I'll be loading 10-15 "nodes" (for example a picture with a date, and a title and description that display on hover, and an onclick-&gt;lightbox) at the very least, and probably 4-5 times as much. 
How about: var container = $(".container"), div = $("&lt;div/&gt;").text(variables); container.append(div);
are the pages always the same? As suggested below, I'd look into templating - using something like [handlebars](http://handlebarsjs.com/) or [underscore](http://underscorejs.org/#template).
Turntable.fm has a coding soundtrack room that tends to be quite good.
As always, it depends on the circumstances and the target browser. Here's my two cents. I found at my last job that, when building large tables, it was much cheaper to concatenate the whole shebang into a string and then feed it into .innerHTML (or jQuery(...), which I believe does the same thing). It performed much better than using jQuery Templates (which parse the template into a function) or programmatically building up the table. (I never got around to trying other templating systems.) It was kinda noticeable on modern browsers running on good computers, but my users who were on IE7 and IE8 noticed hella slowdowns -- like, on the order of several seconds to spit out twenty rows. Hmm.. I only got halfway through optimizing that code before I left.. I wonder if anyone ever fixed it up, or if they finally decided to bite the bullet and get approval to use a third-party table-generator plugin.
There's already [UserScripts](http://userscripts.org/) for this, which has considerable momentum. I don't know that I'd want to use a site that proxies other sites and has access to all of my personal information. :/
Trust me. Most of the people where I work are jquery developers. It sounds inane until you actually look at how they code: Obviously, DOM manipulation and XHR are managed via jQuery (it's exactly what it's there for), but you start noticing the difference when most or all loops are jQuery.each(), data resides in the dom and is retrieved with jQuery.text(), and other such quirks.
Thanks so much again for your tips. Some of these things I've just never thought about it that way before, so it's really helping out! I guess in making the switch from using .live() to .on() I had misunderstood my arguments for .on() - but your edits to the function helped straighten me out! So now I've got an updated set of JS code, which I've modified using other suggestions. I wanted a cleaner way of opening and loading the default box, so I passed an object to the openBox function in the init() method, but after updating the openBox method with your suggestions, no box is opened by default, presumably because no click event happened and thus jQuery didn't set the (this) for me. So how can I do that myself in the init() method? I'm guessing that's a scenario where either .call or .apply would come in handy! here's my latest: http://jsfiddle.net/YuhJ4/
http://turntable.fm/coding_soundtrack3 awaits you! be warned though, you might get addicted!
My general plan is to pretty much have one DOM write operation per JSON request if I can manage it.
Alas, no it does not. Us lowly Australians don't deserve turntable.fm because we suck.
Songza has a "Code Your Face Off" station which my team likes.
pretty cool blog here!
As far as feedback goes, your gut response that it doesn't look easy or brief is a good start. I'll try to publish an Angular comparison soon. Keep in mind that in the provided example there is no logic in the template and all of the core data binding, for two collections, is done using the following: var templateBindings = bindi.templateBinder("#template", "#ui"); var bandItem = templateBindings.all(bands).bindClass(".bandItem"); var memberItem = templateBindings.all(bandItem.members).bindClass(".memberItem"); bindi.on(bands, templateBindings);
I'm using the term in reference to ui&lt;-&gt;model&lt;-&gt;server. I like to use 'dumb' models on the frontend and make use of socket.io so that I can keep all of my logic on the server.
or [Google's Angular](http://angularjs.org/)
This is something best done on the server (nodejs) and not inside a browser. You need to create a request for every IP; the easiest way to do that is either to use a node module to read the excel or convert it into CSV first. Then you use an asynchronous HTTP request for every IP to http://freegeoip.net/json/[IP] The resulting string can be parsed via JSON.parse and the resulting object will contain the attributes latitude and longitude; these you can feed back to your list of IPs, write them back to a CSV and import it in excel. You can do that with virtually any language, though. JavaScript is as simple or complicated as most other languages.
Many different reasons, but imho the most important reason is that it's friction less both for the developer and for the end consumer. No installation is required from the consumer side and from the developer side the entire process is much faster &amp; simpler.
$(document.createElement("div")).html(output_text).appendTo(document.body).append(variables) vs var div = document.createElement('div') div.innerHTML(output_text) document.body.appendChild(div) div.appendChild(variables) 
You're using JavaScript to load the screenshots.... I am disappoint by the lack of simple anchors to the images.
JavaScript may not be the best here -- using it, you've locked yourself into using a web page (or nodejs as a-t-k pointes out) which has inherent XSS restrictions and requires workarounds to get the data from a remote resource at all (JSONP, in essence, is a dirty hack to get around XSS restrictions).... not only this, but you need to bring your list of IP addresses from excel into the page, then take the results from the page and paste them back into excel. If you're interested in keeping all your data in excel, you can do this with VBA in the macro editor... Create an XMLHttpRequest to the resource in question -- it accepts a format to return and, within the context of the macro editor in excel, you don't have to worry about those silly XSS restrictions that apply to javascript running in the browser -- so you can bring back XML and use DOM parsing to insert values back into the excel spreadsheet. I'm assuming you have /some/ knowledge of running macros in excel -- you should be able to loop through all your values within a column or whatever and perform an HTTP request to that service, parse the results to find the lat/lng and insert them into an adjacent column -- or something to that effect.
They may not want to expose the APIs that the command line is using publicly to the add-ons. Or maybe some Mozilla dev just implemented it for personal use and it ended up becoming a public feature. Calling it the "kitchen sink" approach sounds like the slippery slope fallacy, though. edit: it may have also presented an architectural question to make it an add-on and allow new add-ons to extend it. that's just speculation, though, I've never looked at the firefox codebase.
try avoiding all the alert boxes and just use a single css box. It will come out cooler and might help you learn more. 
Chrome and IE both tout their built in developer tools as a feature over Firefox + Firebug.
I never understood why they want to build their own version of FireBug.
New post with updates from everyone on the thread. Would like to hear feedback if you have it http://robdodson.me/blog/2012/08/30/javascript-design-patterns-decorator-pt-2/
You just made my day. Thank you.
Handlebars is compiled too.
Ok, thanks you for the feedback. Is it because you have JavaScript disabled or is there another reason you would like simple anchors to the images?
I find both Chrome and IE dev tools lacking over Firebug, so I don't consider it a feature :P
So it's plain JSON with extra meaning which you need understand in order to properly decode it. That would be a superset :)
Hooray! More stupid, content-free memes in r/javascript! Also, what the hell is this even referencing?
ugh. I *just* updated to 1.8. I have a love/hate relationship with the frequency of jQuery update releases. Mostly love.
Obligatory: http://emacswiki.org/emacs/CategoryWebBrowser
There was nothing to acquire cause it's not a company, and Mozilla employed various Firebug contributors over the years. &gt; Now I need 2 sets of dev tools in FF, adding bloat on top of bloat. Eventually you won't. Transition takes time.
 var offby=winner-random; //Tells player how much their guess was off by, and asks them to guess again. This line does not tell them how much their guess is off. It just tells them what to add to their guess to get the correct answer. Not much of a challenge :P You should try changing this line to: var offby = Math.abs(winner - random);
Firebug has also, historically, leaked memory like a sieve, particularly the network panel. I stopped using Firefox as my main browser because of the lack of better dev tools.
I'm in stitches from that one... it's just too true.
"Open link in new window".
I was just thinking about this problem today while I was reading through "The Good Bits" section on recursive functions. What do you folks think of this "asynchronous tail-recursive" pattern to avoid breaking the stack? Does it look awesome or terrible? function recurse(callback, arg1) { if (isBaseCase(arg1)) { callback("return value"); } else { setTimeout(function() { // use event loop to avoid stack var newArg1 = getCloserToBaseCase(arg1); recurse(callback, newArg1); }, 1); } }
I appreciate the feedback, although I admit, I didn't put much work into the GUI. I focused more on the "programming" aspect of it, and I don't really know **anything** about the DOM. Thanks for trying it guys.
Thanks, I don't many HTML/DOM manipulation methods in JS, just focusing on basics. Will do though.
By "use a single css box", you mean to have just a box with input fields? I wanted to do that, I just don't know anything about HTML/DOM manipulation via JS. Will work on that, thanks for taking the time out of your day!
Will improve upon. Again, its kind of something I just wanted to see if I was able to do, and because I wanted to see what others thought of the programming aspect, a bit more than the HTML/CSS/DOM part. 
Thanks for all the warm comments though.
So it's back up for now but will likely crash again. After checking over 500 unique addresses, it went down. It's on an EC2 micro instance and seriously just launched this afternoon. I guess I'll be working this weekend to improve the scaling.
Wow. That's a real dick thing to say. I'm a designer/ui person primarily who is trying to become a better programmer. I am not a sysadmin. I created this app by myself as one guy just as a side project for fun and for good. Why would you be an ass about it?
True dat. Since I usually get no response for anything I post. I didn't expect this to be any different. 
I got to fix up a student organization website back in undergrad. It was initially built by a blind person (who's, incidentally, a great violin player - I grew up down the block from her). Terrible color scheme, but very accessible.
SSL URLs aren't accommodated. Otherwise, interesting.
&gt;I'm a designer/ui person primarily who is trying to become a better programmer. And good on you, man. Keep it up.
Why do you want to avoid an internet connection? What if the client loses their computer, or their hard drive crashes? What if the client will need to add more people doing inventory, and all the information has to stay synced up? etc 
I'd like to avoid the internet connection for two reasons, first because I do not believe he has internet connection where the system will be used, its going to be used in a storage garage, second, because I don't want to host a server for the app. 
I'm afraid of using localstorage, since i feel that it could be easily cleared from the cache, but I'm not sure. I was really considering nodejs, with a xml file, since it seems perfect for this situation, but I didnt know if that was a valid use nodejs or not (I've never used it). 
It's valid in the sense that it's possible ([here](http://nodejs.org/api/fs.html) is the Node file system api, and you can find a number of node xml parsers in the [npm registry](https://npmjs.org/)), but it seems a bit clunky. Is this computer really so old that you can't install some sort of storage engine on it?
I wasn't saying that using Node is clunky - I do think Node is very lightweight. I was saying that saving information in flat files on the file system was clunky. But, if it works for you then it works for you. This sounds like it'll be a simple app so maybe I'm just over-engineering things.
If this is the way you want to handle it, Node.JS is probably the best choice, yes. It's a lightweight and cross platform system, and will allow you to keep both 'server' and client side logic in JS. You'd essentially be starting a local server (probably on a non-standard port or allow the user to pick one at install-time to avoid conflicts) and provide them with an appropriate shortcut to access the local server using the system browser.
Ok. Am I understanding correctly that node.js needs to be started independently? I guess adding a startup value to windows should work? 
Yes, it is a separate process that needs to be running when the user enters in the address into their browser url bar (and you will also have to add that address to their host file and make it point to 127.0.0.1)
I just realized that id need them to run the browser in a special way to enable cross domain scripting (between file://whatever/index.html and http://localhost) ah well.. back to java, I guess. thank you!
You should stick to not posting.
I must be a Protanope. It looks almost exactly like the original to me. Very nicely done, Inkspeck.
So, the internet (my only source so far about AngularJS) is wrong, and you are right? You are the only individual that I've know about, who says that AngularJS was not developed by Google. But anyways: Feel free to believe what you want.
It's installing an event listener that activates whenever a new page is loaded. It checks if that page is a search engine results page (Google, Bing, Ask, AOL search, etc), and if so it loads and injects a remotely hosted script (at `http://` + day of month + `.ppcperclickadvertising.com/feed` + some parameters). Being remotely hosted I don't know what it does and I don't feel like trying to download it to find out, but I can guess that it either displays some other company's ads in place of Google's ads, or perhaps it rewrites links so that when you click on them it makes it seem to the advertiser like you clicked on their ad, earning these shitstains some money. There's also a different script (`http://disable-instant-search.com/js/disable.js`) which is injected if Google live search is detected, which would appear to disable that. They've tried to hide those two URLs using a primitive encoding scheme -- those are the long strings of hexadecimal digits. But since the `mdec()` function to decode them is right there, it's not really stopping anybody. In any case, it's a simple money making scam based on ad fraud. 
Thanks for supportive stance. Much appreciated.
Yeah unfortunatly as it stands SSL https:// urls aren't supported but hopefully they will be soon. Thanks for the positives.
While this true and I'd recommend doing that for your assets. There is no way to check things that are designed in code alone. Which is much of what is happening these days with HTML5. This gives you a screen grab of the entire DOM and does the processing for you. You could certainly take a screen cap, load it in photoshop and process some comparisons from there, but this should help to make that process easier. We all know that 9 times out of 10 if it isn't easy it doesn't get done.