sorry, can't help you then unfortunately. I'd try asking in stack overflow if you haven't already. 
Why do you need to print your code?
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Odds are that this function or a function calling that function is used as the evenrlistener for an element. You could most likely get access to the function that way. 
I appreciate the feedback. 
See this 2+-year old unsolved issue: https://github.com/jaredhanson/passport/issues/454#issuecomment-384355777
Vanilla wins!
The last issue to be closed was about a year ago, so yeah it doesn't seem terribly active. Then again, the OAuth standard hasn't really changed since, and the software works great. Either way my point was more that it's easy to pick a library like Passport because it's the most popular, but Passport is only really good as Express middleware. If you want to use it with (say) a GraphQL endpoint it won't serve you well, so it's worth considering other options (like, for instance, Authom).
Will do, ty
&gt; I could just set up a database on github To my knowledge, you can't host a database on github. I also don't think you would need a database here to begin with. Instead, you could make a call to the JSONPlaceholder service if you are OK with using the data they provide (and not your own data), like they show in the docs. So from your JS it would be: fetch('https://jsonplaceholder.typicode.com/posts/1') .then(response =&gt; response.json()) .then(json =&gt; console.log(json)) You could listen for a focus event on the search input to make this call or make the call when the page loads. Several options and it just depends on how you want to handle it. Another option is to just put your mock data in a JS object or array. This might be the easiest.
Needed to find all the elements where an attribute value contained a substring. So I got all the elements with the attribute, and looped through them, seeing if the value contained the substring. Then I later realized this one liner works. document.querySelectorAll("[attribute*='" + substring + "']");
I have a markdown file I want to print. 
You check the “comp” variable but set it as something different. Just change your var name :)
I wouldn't get the particular instance of it that I would need though would I ?
Good idea. I'll do some research that way.
This may be a crumby answer for you, since it's not really what you asked, but when I want to print code, I print from Github. Works great. I print a lot of code. I got a big pile of highlighters, man.
Here you go. https://github.com/P1xt/p1xt-guides/blob/master/job-ready.md Got my dream job following this guide. Good luck!
You could. But I've been thinking about this and I think you might have trouble getting the DuPage to receive clicks when it's not in focus. From what I can understand of your question it seems like that would be a central functionality unless I misunderstand your use case.
You could. But I've been thinking about this and I think you might have trouble getting the the page to receive clicks when it's not in focus. From what I can understand of your question it seems like that would be a central functionality unless I misunderstand your use case.
Sadly didnt work, heres the updated code see if I changed what you were talking about var computer_choice = ["Rock", "Paper", "Scissors"]; var lol = Randomizer.nextInt(0,2); var guess; function start(){ compare(); } function compare(user,comp){ var guess = readLine("Rock, paper or scissors? "); if (comp == 0){ computer_choice="Rock"; compare(user,comp); }else if (comp == 1){ computer_choice="Paper"; compare(user,comp); }else if (comp == 2){ computer_choice="Scissors"; compare(user,comp); } if (comp == 0){ computer_choice="Rock"; }else if (comp == 1){ computer_choice="Paper"; }else if (comp == 2){ computer_choice="Scissors"; } if (user=="Rock" &amp;&amp; comp==1){ println("Computer Wins"); } else if (user=="Rock" &amp;&amp; comp==2){ println("User wins"); } else if (user=="Paper" &amp;&amp; comp==0){ println("You win"); } else if (user== "Paper" &amp;&amp; comp==2){ println("Computer wins"); } else if (user== "Scissors" &amp;&amp; comp==0){ println("Computer wins"); } else { "You win"; } } 
If you want to print the compiled markdown you'll need something to compile it first. Pandoc is good or you can use markdown-pdf if you have Node installed.
I want to print the source. Is it not possible to print in the editor??
var readline = require('readline'); var rl = readline.createInterface(process.stdin, process.stdout); var computer_choice = ['rock', 'paper', 'scissors']; function playRPS(){ var comp = getRandomInt(3); var guess = ''; rl.question('Rock, Paper or Scissors? ', (answer) =&gt; { guess = answer.toLowerCase(); compare(guess, comp); rl.close(); }); } function getRandomInt(max) { return Math.floor(Math.random() * Math.floor(max)); } function compare(user,comp){ console.log('You picked: ' + user); console.log('Computer picked: ' + computer_choice[comp]); if(user == computer_choice[comp]){ console.log('Stalemate'); } else if (user == 'rock' &amp;&amp; comp==1){ console.log('Computer Wins'); } else if (user == 'rock' &amp;&amp; comp==2){ console.log('You wins'); } else if (user == 'paper' &amp;&amp; comp==0){ console.log('You win'); } else if (user == 'paper' &amp;&amp; comp==2){ console.log('Computer wins'); } else if (user == 'scissors' &amp;&amp; comp==0){ console.log('Computer wins'); } else if (user == 'scissors' &amp;&amp; comp==1){ console.log('You win'); } } playRPS(); 
Oh I see. Your code is kinda confusing. In the method “computerChoice” you are defining the guess var but then you never do anything with the input. 
Markdown must be compiled first. The simplest way to do this is open up the file in a browser. The browser will compile the file and you can print. 
Also your vars are all over the place. I think you’re expecting things to be very different than they are. I’d suggest putting some printLn into your code to put out the state of your vars at different points of the function. 
Also computer_choice==[0] is not right. You need to translate the random int of your computer choice to the right value. If you want more guidance lemme know. I can just review your code and leave some more pointed feedback. 
I've been battling css since forever. I've tried moving from less to sass, moved to react js to css loaders, so my inline and my css could share code, but still, didn't feel right. Css feels like exposing uncontrolled globals to my system, and bugs always followed. Then I came across [some talks](https://github.com/erikras/react-redux-universal-hot-example/blob/master/docs/InlineStyles.md) which convinced me to switch to inline. After that writing a component felt way better, but still not perfect, as the css was always lazy loaded, and I was missing the ability for more control, and performance seemed to suffer. Then came css-js libraries, like [jss](http://cssinjs.org/?v=v9.8.4), this way I can have full control over my stylesheet creation, no duplication, HMR, just great. I've also started writing a react native app, called [Rockup](https://orku.app.link/WXKopEgGQK), and jss felt just like react native stylesheets, it was perfect. I even started using [react-xp](https://microsoft.github.io/reactxp/), which took it one step further and merged those concepts into one. But still, the way about stylesheets are created in separate from the actual component it was going to be used at, didn't feel right, I wanted to forget about className, and that freedom it gave me for sharing classes between elements was never used. I've ended up writting my own library called [react-platformula](https://github.com/uvop/react-platformula), which just like react-xp, you can write cross-platform components easily, but hiding the whole css className style prop shenanigans, and have taken much more functional approach. Been using it in couple of apps and websites, and that's my way of styling, for now..
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [erikras/react-redux-universal-hot-example/.../**InlineStyles.md** (master → 9caede0)](https://github.com/erikras/react-redux-universal-hot-example/blob/9caede00b3d864c728526a2ef13599f1f75e1b7e/docs/InlineStyles.md) ---- 
Someone recently posted on r/soccer about another API to get data about the games including the world cup one’s: [football-data.org](https://football-data.org). 
&gt; var readline = require('readline'); &gt; var rl = readline.createInterface(process.stdin, process.stdout); &gt; var computer_choice = ['rock', 'paper', 'scissors']; &gt; &gt; function playRPS(){ &gt; &gt; var comp = getRandomInt(3); &gt; &gt; var guess = ''; &gt; rl.question('Rock, Paper or Scissors? ', (answer) =&gt; { &gt; guess = answer.toLowerCase(); &gt; &gt; compare(guess, comp); &gt; &gt; rl.close(); &gt; }); &gt; &gt; } &gt; &gt; function getRandomInt(max) { &gt; return Math.floor(Math.random() * Math.floor(max)); &gt; } &gt; &gt; &gt; function compare(user,comp){ &gt; &gt; console.log('You picked: ' + user); &gt; console.log('Computer picked: ' + computer_choice[comp]); &gt; &gt; if(user == computer_choice[comp]){ &gt; &gt; console.log('Stalemate'); &gt; &gt; } else if (user == 'rock' &amp;&amp; comp==1){ &gt; &gt; console.log('Computer Wins'); &gt; &gt; } else if (user == 'rock' &amp;&amp; comp==2){ &gt; &gt; console.log('You wins'); &gt; &gt; } else if (user == 'paper' &amp;&amp; comp==0){ &gt; &gt; console.log('You win'); &gt; &gt; } else if (user == 'paper' &amp;&amp; comp==2){ &gt; &gt; console.log('Computer wins'); &gt; &gt; } else if (user == 'scissors' &amp;&amp; comp==0){ &gt; &gt; console.log('Computer wins'); &gt; &gt; } else if (user == 'scissors' &amp;&amp; comp==1){ &gt; &gt; console.log('You win'); &gt; &gt; } &gt; } &gt; &gt; &gt; playRPS(); cannot find module readline
Runs fine with nodejs, how are you running this? Since you had items like println are you sure you're not supposed to do this in Java and not JavaScript?
Thanks im going to work through this now!
codehs javascript sandbox
good bot
i don't want compiled markdown. i want to print the source. jesus if you don't know how to print in sublime then just stfu.
&gt; codehs javascript sandbox Ah I see the problem, yeah they seem to have their own custom js libraries that are non-standard. So unfortunately I think you're on your own
I know that it works for the page to receive clicks when it is not in focus because the extension Streamkeys does just that (with the play/pause and skip buttons).
What does any of that have to do with picking a framework to write websites in? Just because React doesn't have a Java-like OOP design doesn't mean the apps can't be well designed / architected. (See: immutable state management, higher order components, render props) I really don't understand what company structure has to do with anything, either.
...... what?
Eloquent javascript is great. They introduce topics at a good pace with exercises to help reinforce concepts. 
 CSS, in general, is a little behind the curve when it comes to better more natural ways to split up the code. It depends on what you are building I suppose, and the size and scope of the project. Inline styles / non\-css orientated style practices are mega helpful when dealing with cross\-platform. The one area that I find frustration in is css\-in\-js within web applications, again I do want to emphasize that my view is leaning toward web applications receiving 500k \+ uniques a day. From an ex\-googler, who's familiar with the Chrome's internal rendering architecture this is what I concluded on the matter. It comes down to performance. Let's take inline\-styles (style on the element) for example. Thanks to the "reactivity" of React, it's such a pleasure to perform transitions and interactive styles! Beyond that its just less nonsense to manage, all javascript, baby! Im a huge fan of locally scoped CSS! Not worrying about classes is a major benefit. * Resources lose the ability to leverage long term cacheing, style changes alter the hash of the js file too * When dealing with SSR: * the html payload becomes massive, assuming inline styles are sent. * the time to first meaningful render is significantly longer * the browser must work far more as it both needs to paint and bootstrap an application * you can lose out on the cascading effects of CSS \- a double whammy when it comes to paint time * With the html being on the page and the CSS usually cached, the browser can actually pre\-rasterize some layers and paint ahead of time * FOUT sometimes happens on slower machines not capable of painting in time. Anyways thats my 2c on css\-in\-js :P I used to really love it! I had this awesome compression engine which would convert bundles into LZMA and then decompress it on the browser in worker threads. Putting CSS in js (in the form of \&lt;style\&gt; tags) meant i was able to reduce the size of the whole delivery. Sadly, that doesn't work at scale where caching is a concern 
Copy it and paste into a text editor that can print
Why can't you protect an endpoint with it?
I don't know exactly what your use case is, but I thought I'd share how I did it on my \[side project\]([https://github.com/combine/saga](https://github.com/combine/saga/blob/master/server/middleware/authMiddleware.js)) because I was going through it for awhile. This is a project running on Node, Express, GraphQL (apollo\-server), Objection.js, and auth with JSON web tokens. Not using passport at all. I first mounted an express\-style \[auth middleware\]([https://github.com/combine/saga/blob/master/server/middleware/authMiddleware.js](https://github.com/combine/saga/blob/master/server/middleware/authMiddleware.js)), which basically extracts the JWT token from either a cookie, headers, or a query string. It then fetches the user object from the database and adds the user object to express' \`req\` object. I then mount \[this graphql middleware\]([https://github.com/combine/saga/blob/master/server/graphql/index.js](https://github.com/combine/saga/blob/master/server/graphql/index.js)), where I pass \`req.user\` via \`context\`. \`req.user\` is then added to my resolvers, where I can then control access using a combination of resolvers and custom errors using \[apollo\-resolvers\]([https://github.com/thebigredgeek/apollo\-resolvers](https://github.com/thebigredgeek/apollo-resolvers)) and \[apollo\-errors\]([https://github.com/thebigredgeek/apollo\-errors](https://github.com/thebigredgeek/apollo-errors)) Here's an example of ACL using error resolvers: [https://github.com/combine/saga/blob/master/server/graphql/resolvers/acl.js](https://github.com/combine/saga/blob/master/server/graphql/resolvers/acl.js) These are the custom errors: [https://github.com/combine/saga/blob/master/server/graphql/errors.js](https://github.com/combine/saga/blob/master/server/graphql/errors.js) And here's an example of a resolver that extends an ACL resolver \-\- a mutation that requires that the user be an admin user: [https://github.com/combine/saga/blob/master/server/graphql/resolvers/products/updateProduct.js](https://github.com/combine/saga/blob/master/server/graphql/resolvers/products/updateProduct.js) Hope that's helpful! Good luck!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [combine/saga/.../**index.js** (master → 2f90bd6)](https://github.com/combine/saga/blob/2f90bd61770280ec5de7f86e05806d84eff9de15/server/graphql/index.js) * [combine/saga/.../**authMiddleware.js** (master → 2f90bd6)](https://github.com/combine/saga/blob/2f90bd61770280ec5de7f86e05806d84eff9de15/server/middleware/authMiddleware.js) * [combine/saga/.../**updateProduct.js** (master → 2f90bd6)](https://github.com/combine/saga/blob/2f90bd61770280ec5de7f86e05806d84eff9de15/server/graphql/resolvers/products/updateProduct.js) * [combine/saga/.../**acl.js** (master → 2f90bd6)](https://github.com/combine/saga/blob/2f90bd61770280ec5de7f86e05806d84eff9de15/server/graphql/resolvers/acl.js) * [combine/saga/.../**errors.js** (master → 2f90bd6)](https://github.com/combine/saga/blob/2f90bd61770280ec5de7f86e05806d84eff9de15/server/graphql/errors.js) ---- 
Open the file in the browser and hit print, you dildo. 
If that is the case could you just trigger a click on the element via a css selector
Do you know how to copy and paste? If so, then do it. 
Eloquent JS gets heavy pretty quickly...is only recommend it if you have some prior programming experience. Even then it can be a a lot. A good starting point in my opinion is the free course at www.watchandcode.com
Very cool! Very similar to a side project I had going for a bit. I’m a long time WordPress dev getting deeper into JS frameworks. Are you looking for collaborators?
Looks like it's not built into the application, even though people have been [requesting the feature](https://stackoverflow.com/questions/16004842/how-do-you-print-in-sublime-text-2) for years. But there's an [add\-on](https://github.com/joelpt/sublimetext-print-to-html) you can install to add a print menu. Still, I think it would be easier to open your code file in Text Edit and print from there.
I'm not sure I understand what you are trying to do. Do you want to make the layered waves trace the eleveation map?
that's what i do now but its a pita. wtf did they remove the print menu for?
See this (issue)[https://github.com/jaredhanson/passport/issues/454]
No, I think they never had one. They just removed the *requests* to add one.
That's about using Passport without Express, which doesn't make sense. If you use Express/Koa then you should be able to.
i couldn't figure out how to install that.
stfu nigger.
how fast is this? blazing?
There are instructions in that Stack Overflow thread I posted. But here's Sublime's official support page for packages: [https://www.sublimetext.com/docs/3/packages.html](https://www.sublimetext.com/docs/3/packages.html)
Wh... Why? O_o
I'd love to see some updated Typescript types. I find it to be the easiest way to explore a package's api by far.
Original content. 
hand-written assembly beats C. now go write MacOS, Linux or Windows in assembly!
Neat, clean, simple. It's like a regular [bar of soap for your hands](https://www.youtube.com/watch?v=AX0EfhwCvjo&amp;feature=youtu.be&amp;t=4m45s).
wow neat
When you are calling the computerChoice() function you aren't giving it any inputs evem though it requires 2
So, if I inderstand this well. The next version of all Office is build in JavaScript and use a React fork to go native ?
Yep that's what it seems, it compiles to native code. And apparently FB is not taking upstream contributions from them so the code has stayed on their teams. 
This is a great news for the React and the Microsoft environment I think. For the OSS contribution they already release a repository for UWP ( https://github.com/Microsoft/react-native-windows ). And I hope they release all their React-Native tools soon as possible. 
I always thought it was such a glaring error that he didn't name it callbox, just as a muscular Austrian (as most of us are) might pronounce callbacks
If you are ok to use `Intl` polyfills, then it is worth looking at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts. The page also includes examples on how to modify a specific part, where you can append milliseconds to the `second` part.
Moment.js will do this and so much more. https://momentjs.com/docs/
Thanks for the reply! I checked this earlier :) The thing about this is that milliseconds is not one of the available fields that can be provided in the options. Am I missing something?
Thank you for the reply!. Believe me, I have read through this docs extensively throughout today. Unless I am losing my mind, I don't see any way for it to perform a locale-specific date-to-string format, while ate the same time including milliseconds in the seconds portion.
You can use the `disabled` property on button elements. Disable buttons initially, then set the `disabled` property `false` when the user clicks the required button. ``` function disableButtons() { // Disable all buttons inside this function // Get button element somehow button.disabled = true; } function enableButtons(){ // Again, get all button elements somehow button.disabled = false; } disableButtons(); // disable them initially var timerStarted = false; timerButton.addEventListener('click', function () { timerStarted = !timerStarted; if (timerStarted) { enableButtons(); } else { disableButtons(); } }); ``` You can then write additional logic for timer inside the callback function click
2 years ago we used this one: [https://www.football\-data.org/](https://www.football-data.org/) This also worked extremely good. updates usually 10\-15 mins after each goal or faster
Yes. Its getting difficult to work on this project all by myself along with a full time job. I will write a post on the roadmap and the things that needs to be done to make the product more mature. In the mean time, you can read the docs, fork the repo and see how it is working internally. I would like to write some unit tests for the dashboard.
Scoped styles in Vue are one of the parts I love the most about it, takes all the pain out of where to put CSS... 
Thanks
Hm... why haven't they picked TypeScript? I mean they are the inventors of this language - so why don't use it? Does it mean they will drop TypeScript, as they encountered issues with it? Was it just ignorance? Lack of devs? Other internal political reasons? Would be interesting to know to be honest!
Eval in calculator(noob)
Great q. I know @code uses a lot of ts and is super integrated. Don't know how it is in other teams but I'll try my best to find out
Does it say that they don’t use TS? You can use TS in React from what I understand.
Last time I checked, this site is using the development build of react in production? So is this really the 'my production environment is my test environment' kinda thing?
I'm pretty sure they use TypeScript. Maybe the tweet just used the term JavaScript in a broad sense.
But who has read this? Is so much confusing... I need tutorial not this specification.. 
I certainly hope the JavaScript simply glues native components together. If it's just a bunch of electron like apps it's going to be awful.
Does this open the possibility for MSO on Linux? Perhaps at least through an electronic app like win32?
You may want to use `Array.prototype.reverse` on the `snapshot` object. Or if the posts returned are not in any specific order then you can use `Array.prototype.sort` and sort them based on `post.created`. ``` snapshot.sort(function(a, b) { var post1 = a.val(); var post2 = b.val(); // Assuming 'post.created` property is a 'Date' object or Unix timestamp numbers if (post1.created &gt; post2.created) { return 1; } if (post1.created &lt; post2.created) { return -1; } return 0; }); ``` Then you can loop over snapshot and create the DOM as needed.
You should be able to do ‘snapshot.reverse();’. If you need it to be immutable add slice in there like ‘var newSnapshot = snapshot.slice().reverse();’. Then use newSnapshot in your forEach loop. Sorry, formatting is hard on mobile, but this should give you the idea.
Why not just generate your own mock data? If you need fully custom JSON format the best way to go at it is mocking your own API calls and returning the randomly generated JSON. That is only if placeholder api like https://jsonplaceholder.typicode.com/ doesn't work for you.
yes, but I doubt ms will take the resources to make that happend. Please MS employe reading this, prove me wrong.
Yep its blazing fast LOL 😂
I would be very surprised if they didn't pick TS given that Larkin work on TS (based on it's Github profil)
Yes, but Password1! is magnitudes more times secure than password11 
Thanks for the repo, I have to do a Webservice with a RESTful architectur and Node.js and had no idea where to start!
Read the thread please. It answers your concerns on Electron
hahaha thanks :D
The tweet sounds like this: &gt; All of Office 365 is (almost finished) being completely rewritten in this little scripting language called #JavaScript. It clearly states *JavaScript* ;-)
this VSCode which was mention is written in TypeScript
\*start praying in front of my computer\*
TypeScript being a superset of JavaScript and being transpiled into JavaScript (in most cases), I would not find it chocking that they just said JavaScript because the main info was "we are using a JS stack" and not "we chose TypeScript and not JavaScript" (or the opposite). But we'll see :)
after using `var newSnapshot = snapshot.slice().reverse();` snapshot becomes undefined and didn't work. Is there a work around, for example, append child into id("blog\-body") as ascending rather than just descending as default?
They are likely to be using "Javascript" more generically here, as there are a fair number of people out there (a large proportion of non-developers for a start) who have a grasp of what Javascript is but not Typescript. Typscript compiles to Javascript so use of the term is correct: the code is written in Typescript but by the time it is actually running is has become Javascript. Or more precisely ECMAScript, before someone tries to out-pedant us on that fact!
TS is JavaScript 
happen~~ed~~.
actually, i solved this with insertBefore. Thanks, btw
Praise be upon drboolean!
https://twitter.com/TheLarkInn/status/1006761134395834368
Hey, I fixed this yesterday. Forgot to update you.
skip the clickbait crap by accessing the repo directly [here](https://github.com/bluzi/hooray) https://github.com/bluzi/hooray
99&amp;#37; its written in Ts.
Kind of changing the subject here a bit, but relevant to the native thing... For situations where you're building both a website and phone apps that basically do the same thing (i.e. common use case for react native)... what do people think about PWAs? From what I've seen (just some youtube videos on the subject) it seems like this is an even easier way to do it all in one single project for everything. A couple of immediately reasons I can think of are: * not all phones supporting them yet, I think only the latest version of iOS does for iphones * and there's presumably worse performance. ...but aside from those two things are there any other reasons why PWAs wouldn't be a better option in the future than react native etc? (excluding apps that need high performance) 
so Object.entries ...
Except: &gt;Note that Horray! extends Object, which considers a bad practice, and therefore it is experimental and not recommended to be used in production.
I is still a JS runtime, but with FFI calls to the native GUI widgets rather than using the DOM API (which isn't available in those react-native-x envs).
Good to see that MS &lt;3 Linux there.
What can it do that underscore `mapObject` can't? http://underscorejs.org/#mapObject (or `Object.entries()`, `Object.keys()` and `Object.values()` depending on your use case)
Shouldn't your severide code be doing this convert/parsing before getting the data to clientside? That would reduce client side processing and reduce your js payload.
Why is caching sucks a concern? Anytime you update the app, most likely you're going to update your css, unless it's not SPA, both January and css bundles are changing. 
You can make one with a service like this https://sheetlabs.com/ I've used it before and it's great for get requests.
Isn't this like ... huge news? 
&gt; and use a React fork to go native ? A slight correction: Sean said they are using a fork of react-native. React and React Native are two different things. Think of react-native as a compiler / renderer. You are still using the "vanilla" React, and can do everything React allows you to, but it will be compiled to native platform (Windows, Android, iOS etc.) code, apparently.
One potential disadvantage is that you may not be able to access some device features that you need. There are Web APIs for a lot of things, but there are some gaps, support isn't widespread for existings APIs yet, and native apps can sometimes have more capabilities through native APIs. For instance, despite Service Workers now being available on iOS, they have sadly not been accompanied by the Push API and Notifications API. Push notifications are a pretty standard app feature, but are currently unavailable for PWAs on iOS. In a few years, support should have evolved to a point where PWAs are a lot more capable. And, today, depending on your app and its audience, PWAs might already be viable. However, PWAs are definitely still maturing, and might well not work for your use case.
Kinda like a backwards WebAssembly? JS to Native oppose to Native to JS?
Yes, I should have said "React\-Native".
Why is fb doing that? They seem to be really bad at doing open source right
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Yeah I think that's the best option at this point. Would just be more fun and there would be more you could do if you had direct access to the instance of the JS player.
It even has a text description with an unlinkified URL to hackernews... sounds promising.
Huh, I thought VS Code was already written in JS...
Does this mean an official Linux port could be on its way? :)
Quite good news for react native. Not so good for electron.
Bad bot
Electron, so yes. However, that’s the desktop equivalent of a hybrid app (native WebView through Chromium). React Native is JS on top of fully compiled native components, negating the slight translation from JS =&gt; Native, you gain significant performance over a WebView.
Just curious, why do you want Office on Linux?
pretty short sighted and naive comment
Oh that makes sense, thank you.
So that means I cannot run Chrome, Office, Slack all parallely with my 8GB RAM? 
Thanks for the response. I am trying to have 2 or more instances of the elevation map.
yes. but circlejerking or memeing about javascript is fun. 
jokes on fb, microsoft own github where the code is
It's not electron, it compiles to native code.
So there's no DOM? 
There's no chrome and no dom involved in this. Like the name suggests, React produces native, js driven apps. I'm glad big companies start dropping electron for the memory hog that it is.
I never said that is is shocking, but it is not obvious from the tweet. That's why I asked. And as answer to /u/yarism it is imho ok to cite the main phrase. Of course it might be better for the not so technical audience to speak in more genral terms, but here we are in a specialized forum, waren't we ;-)
I do not really get the purpose of that. You ship your code to the client anyway, if somebody is interested in the certain parts of the code it's still possible to read the code even without the source maps. I think that this kind of articles create false image of a minified code being unreadable or somehow safer 0.o
Never said that you said it was shocking (ok it's becoming complicated) By the way, since then I read someone saying that it was indeed TypeScript.
It is a superset of JavaScript. They are not identical! And you cannot deduce from the **subset** that it is the superset of course ;-)
Agreed. This was the one for me that just made things click, kind of like an, "ahhhhhhh - I see now". The chapter on Execution Contexts and Lexical Environments should be a must for anyone who writes JS.
Like Microsoft Word?
Kinda, yes. Of course it's not 100% native - at least not in case of RN for mobile. In this case you still have a JS core code that is running i na separate thread, and controlling native UI. I imagine this will be similar in this case.
&gt; Typscript compiles to Javascript so use of the term is correct: the code is *written* in Typescript But the tweet *explicitly* said *written* in JavaScript - quite a different thing compared to *compiled into* ;-) (and yes, I have allready noticed that the audience for this tweet probably was not a specialized one)
My guess is that they want to run Office on Linux.
Ya I think it's crazy huge. But it's flown under the radar
Yes, we better finish this 😁
No shit, I wanted to know why ...
Well, you see, they probably like the Office software, and run Linux. Seems pretty easy to figure out.
Sorry, not my native language. Thanks for the correction
PWA's mean that you will always be tied to the vendors whim. The idea of an embedded browser running apps isn't new, and until now it's been a complete pipe dream. These apps fall out, run slow, can't do a fragment of what native can do, and of course support for the little capacity they have is largely fragmented. If that were javascripts evolution it would rather be regressive. React follows the paradigm of a renderer. There's one definition of how components look like and what they do, that is the "react" package on npm. The reconciler (react-reconciler) on the other hand defines target host elements and semantics (div, span, etc. in react-dom, View, Text, etc. in react-native and so on) and renders these components out natively. This model can evolve quickly. You get one language, a shareable codebase, one component model and a gigantic eco system that you can apply anywhere.
👍
Have you tried MDN?
That’s how React Native works for iOS and Android. It’s not like electron, it actually compiled into native code - like the name suggests! You can check out the MS teams specific implementation here: https://github.com/Microsoft/react-native-windows You may have confused React Native and Electron. 
As far as I know, nothing gets compiled. The react/javascript part runs in a separate Javascript engine. The base components only control native gui components, yet still from JavaScript. 
But what does it mean?
&gt;Sorry I'm just reading this post, but your point really hits home.. That's exactly what I've recognized. That javascript isn't traditionally utilized as an entry tool to learning programming. I'm learning programming with C at a great pace now, and really enjoying the abundance of quality C textbooks out there. Would have loved to cut the learning process by about half by studying js right away since that's the domain i want to operate in into the near future. 
Afaik the Native components are compiled and there’s a bridge of sorts to run the JavaScript.
Wow, I can't wait to take a look through all of this. Thank you so much for such a thorough response.
I was mostly thinking of the drama over reacts license when I made that statement
Originally clarified here ya'll: but I'll copy pasta! [https://www.reddit.com/r/programming/comments/8qqhlz/office\_365\_ms\_teams\_skype\_code\_and\_the\_edge\_debug/](https://www.reddit.com/r/programming/comments/8qqhlz/office_365_ms_teams_skype_code_and_the_edge_debug/) Hi there!!! Original Tweeter here! I'm Sean and I'm a Program Manager at Microsoft working on Microsoft Edge and Edge Dev Tools!Going to clarify across a few things. Some was lack of more then 280 chars in a tweet and not expecting this to get beyond #JavaScript twitter. 1. MS Teams, VS Code, is already written \_with\_ JavaScript powered by Electron. It is an electron application. VS Code is on GitHub and Open Source if you'd like to see examples of how or what. 2. We are not abandoning C\+\+, C#, or any of the other awesome languages, apis, and toolings that we use across Microsoft. EdgeHTML is almost entirely written in C\+\+ like any other browser engine. However we do also run JavaScript (compiled from TypeScript) in DevTools, and leverage open source technologies like React and webpack to build the UI's for them. 3. Office 365's UI, are pieces that are built using React Native (Windows). API's and Services are still going to be powered by C\+\+, C#, or whatever is the most appropriate for that team. 4. React Native compiling JavaScript to "native code" is arguably wrong. Most of what is native are API's interactions and Native Modules that can be communicated with through JavaScript. WebViews power UI rendering thanks to React. Thanks to the Skype Engineer who sniped me on that in discussion.
It's been public for a while! 
Basically a middleware is a software bridge between OS/Database and the application. i.e. A Wordpress post is stored on a database and needs PHP (acting as a middleware) to render the post into the HTML format. 
Post all of the code, and format it correctly if you want help. It sounds like you should be using while loops instead of for loops, but because you've only posted half the code, I have no idea.
Native apps (if there's an app store) are controlled by the creator's whim too. For example, Apple removed 32bit apps a while ago.
He reason why is the post he was responding to, which is a guy saying CS majors shouldn’t be taught JS because you can’t write office suites in JS.
I currently run Windows 10, but want to run Linux as my primary OS, but have not found a good replacement for Outlook/Exchange. 
I currently run Windows 10, but want to run Linux as my primary OS, but have not found a good replacement for Outlook/Exchange. 
See also, [Introducing Vue Native](https://blog.geekyants.com/introducing-vue-native-b66f71d50438)
See also https://vue-native.io/ for the project itself.
From my mental model, middleware is anything that's not really fronend (e.g. showing things to the user, letting them interact with things) or backend (handling data, requests etc). Middleware is basically what it says, something that sits in the middle ground. Things from the front-end probably go into it, the middleware makes some decisions, e.g authorization (can the user do this), or cleans up some data travelling between either end, before making it's way to the back-end, and vice-versa. 
I know, it’s just like saying that React or Angular is JavaScript. It’s a common phrase to just explain that it’s not a different language. And it’s ok for you to admit that you through that TS was another language, I don’t keep up with everything outside of JS world and just keeping up with JS is hard enough. But typescript can be used with React which MS are using. Though you typically see TS with Angular 2+ to add stronger types in JavaScript but it’s not it’s own language or framework.
Mostly because we want windows to die. I don't need much more than what gdocs offers. If ms put office and games in a portable format, windows would be pointless.
Well, that would hit facebook, instagram, twitter and skype, uber, airbnb, which are all RN, hopefully there would be some waves if they did that. But it seems unlikely at this point. 
I don't really know much about PWAs yet... but isn't the point of them that it's just standard HTML/CSS/JS ? So in terms of the interface stuff at least... presuming the phone can render HTML/CSS/JS and also supports PWAs, what difference does the vendor make? And just to clarify, who exactly do you mean by vendor? e.g. For a Samsung Android phone, would the vendor be Google or Samsung is this context? Not disagreeing with you, cause I don't know what I'm talking about. Just curious on the details. Also thanks for linking to the blessed thing... I didn't even know about it, and funnily enough have just been working on some CLI interface stuff in node today. I've been using lower level packages like inquirer. But blessed looks awesome, I should have been using this. 
The OP just tweeted a picture of some clarifying points in which he says "also run Javascript (compiled from Typescript)". 
Format your code. Steps to reproduce? What are the error messages? You need to give more info, if you expect people to help you. Also, I suggest you use StackOverflow for these kind of help requests. 
Probably better off editing or even reverse engineering one of these: https://electronjs.org/apps?q=spotify
Middlewares are simply functions that can be added by the user instead of having them hardcoded within a library. They are mainly used to allow users to add NEW functionalities or replace default features. In other words, they allow us to plug in new features and extend a library. Let's say a library has **funcA() --&gt;calls --&gt; funcB() --&gt; calls --&gt; funcC()**. All these are hardcoded inside the library so we can't add a new feature without changing the library. Let's say a library has **myLibrary.addFunctions(func)**, that takes a function and adds it to an internal array. Imagine we added 2 custom functions **userFuncA and userFuncB** using addFunctions(userFuncA) and addFunctions(userFuncB). Now, we can have that library call all these functions in a loop like so: **funcA() -- calls --&gt; Loop array of userFunctions and call each one --&gt;then call --&gt; funcB() --&gt; calls --&gt; funcC()**. This way we can add/inject new features to a library or replace it's default behavior. All the functions *we*, the users of libraries add are called **middlewares**. In Redux for example, middlewares allows us to add different async library of our choice like redux-saga or redux-async to handle async actions. In Express for example, we can use redis middleware for caching and replace the built-in in-memory caching feature. 
The browser vendor. 
Sorry but I have to contradict again: TypeScript *is* another language! This is simply a fact. I don't care much about the JS community, so it is possible that some terms are used interchangeably here - for me it just feels strange to optionally loose precision in terms.
You aren't being clear. &gt; if offsetX for example is "0" skip to the next for Which `for` is that? The `j`? The `k`? &gt; if offsetY = 0 skip to the next You mean the next `for` `i`? &gt; if offsetZ = 0 skip to output What output? I don't see any code that output something. &gt; if i use "continue" it just throws me off the loops all at one even if one of the offsets is not 0 `continue` by itself alone is an unconditional statement to skip the current loop to the next. If you want to skip only a specific loop index, check the index before issuing the `continue` statement. If the current loop is a child loop, and you want to skip to the next upper level loop, you'll have to use and flag a "marker" variable and leave the child loop first, then within the upper level loop, check whether the "marker" variable is flagged or not. If it's flagged, issue the `continue` statement. 
Sorry for messy post, I updated it now. Thanks
The link is from `f1` to the object pointed to by `F.prototype`. It is created when you use `new`. Setting `F.prototype` to a new value later on has no effect on `f1`.
As others have said, the general definition of middleware is software that sits in the middle ground. However, since you're asking about Express and React: In express, they are specifically functions that have access to the `req`, `res`, objects and the `next` function. You can mount middleware anywhere in between the request/response cycle of your app. For example, if you might have a piece of middleware that checks that a user is authenticated before allowing them to access to a particular route. Here's a simple example that has a middleware to check if a user should be able to access the requested route: ``` const app = express(); const isLoggedIn = function(req, res, next) { if (!req.user || req.user.id !== req.params.id) { return res.status(401).send({ error: 'Not authorized.' }); } }; // An API route for updating user data app.put('/users/:id', isLoggedIn, function(req, res, next) { // the user is guaranteed to be logged in in this function // ...add some logic to update the user }); ``` If you write your middleware well, you can reuse them throughout your express application to perform various tasks before you send a response to the user. You've probably seen the concept of middleware in Redux -- it's conceptually similar, but the middleware acts in between `dispatch()`ing an action and when the action hits the reducer. So you might have some middleware that does logging or abstracting away the way you call your API. See more information here: https://expressjs.com/en/guide/writing-middleware.html https://redux.js.org/advanced/middleware 
can confirm: JS === TS at microsoft
I had a lot of success using Cordova to share the same codebase between a web and native app
I'm a little confused. So we are just changing the object to which F.prototype is pointing to? If that is the case, how could we assign a value to that object? What would the syntax be? 
This is like saying electron is compiled because parts of your electron app are compiled (the chromium instance is compiled for example). I probably should have been more specific: Not one line of the JavaScript/React Code you write is being compiled to native code. 
After reading through this I’m still left wondering why this is needed. What problem is this solving?
Besides my love for JavaScript, I love this. These software packages have been lacking, laggy, and dead. I'm hoping being rebuilt will revitalize them.
TypeScript transpiles down to JavaScript -- that is to say whichever you use will be ran with a _JavaScript engine_ such as V8.
Not on mobile devices. I don't know how it handles on desktop though.
The issue isn’t only about what’s in your package.json but what’s in the package.json for each of your dependencies. They may use flexible versioning which means you can still get into a state where what gets deployed to production doesn’t match what was tested.
Clarified here: https://reddit.com/r/javascript/comments/8qpwi7/_/e0llhzp/?context=1
So no more VBSCRIPT MACROS HELL?
Well, at least for the javascript world it is, I think. 
Forget about prototypes for a moment. let one = { f: function() { console.log("word"); } }; Now, we do this: let two = one; This is not _copying_ `one` into `two`. In JS names (`one`, `two`) are not containers; they are labels. So, doing that means that `two` is referencing the same object that `one` is referencing. You can ascertain that by doing: console.log(two.a); // undefined two.a = 7; console.log(two.a); // 7 console.log(one.a); // 7, too, because it is the same object not a different one. Now, if you do: one.f = function() { console.log("WORD"); }; The result is the same. The property `f` of the _only_ object is assigned a new function. But `one` and `two` still reference that same object. Up to this point we have only created one object. Ok, so now we do the other thing: one = { /* whatever */ }; What we're doing here is creating a new object and assigning it to `one`. Meanwhile, `two` is still referencing the original first object. So, for `two` nothing has changed. The key to all this is to be very clear that in JavaScript "variables (names) are _labels_, not _containers_", and that when you assign `variable = value` you're not "putting the value in the variable" but "placing the variable on the value". Once you understand this, you can go back and apply the same understanding to your prototype problem.
So honest question here: what is the advantage of JS for native apps, other than being able to code in a language that would already be familiar to some folks? I like JavaScript, but I tend to view languages as tools for different jobs, so it seems strange for all of these efforts to shoehorn JavaScript into other areas like native coding. So, compared to, say, C/C++, or even Java, how does JavaScript do on desktop/mobile?
Your formatting did an oopsie
There is no way they are not using Typescript at that scale
&gt; t would be long way to manage that because of transitive dependencies Hey Meefims, thx for your opinion. I'm aware of that. I wrote in the post: " It would be long way to manage that because of transitive dependencies but at least it's a good start." 
&gt; JS for native apps, The biggest things native apps seem to need are a non-blocking event loop, and an easy way to hook up callbacks. This is pretty much the JS wheelhouse. GUI apps, webpages, and simple web services all come down to pretty much the same structure; the same one JS is essentially built around.
Thank you so much for such a detailed and well thought answer! It perfectly addressed my misunderstanding. I'm still a little uncomfortable with this new idea. The way I thought the assignment below would work is: "go to whatever place in memory I'm pointing to and put this value there". one = { /* whatever */ }; But if that is not the case, am I correct to assume that with every reassignment of an object's value (if it was the only thing pointing to that value), we are leaving another object lost in memory with nothing pointing to it? Or is it that with every assignment JS has a way to check if the old value is now garbage?
Async await is promises. It's just different syntax, nothing else. Can we stop with these crappy blog posts on here?
Https://github.com/ncd2dq/jungle_run_js
https://github.com/ramlmn/electron-clippy
If the `100` is an axiom, why not just hard code 5050? Alternatively, there's [Gauss' method](https://www.nctm.org/Publications/Teaching-Children-Mathematics/Blog/The-Story-of-Gauss/): `first + last / (length / 2)`.
Middleware is basically a wrapper that is placed between an inner and an outer piece of code to modify the functionality of that code. For example: var getName = function(id){ if(id==2){ return "John Smith"; } } function runApp(){ console.log(getName(2)); } // Default functionality runApp(); //Apply middleware to upper case the name var oldGetName = getName; getName = function(id){ return oldGetName(id).toUpperCase(); } // With upper case middleware runApp(); Obviously you don't want to go around permanently wrapping functions, so many frameworks (e.g. Redux, Express) provide API methods to apply middleware in a clean and managed fashion. Imagine somewhere in the bowels of Express is an array of all your middlewares and whenever the time comes to finish a request before the result is handed to your code those middlewares are given an opportunity to execute on the result.
Yup
Not using version ranges would be a nightmare. Imagine if you had 3 dependencies, and each one was using lodash, but they were using 1.0.0, 1.0.1, and 1.0.2. You are now going to have 3 different versions of lodash in your node_modules folder, even though all 3 of them could be using 1.0.2. If you're bundling this code for the browser, this would be terrible, but even on the server this would lead to a much bigger node_modules folder than is necessary.
&gt; leaving another object lost in memory Maybe, maybe not. In the example, when I assign `one` to a different object, the "old one" is still referenced by `two`. But yes, in general this happens often and it's what the _Garbage Collector_ is there for.
That's correct. The assignment isn't _replace this part of memory_, its _change what memory address you're pointing to_. When nothing else references an object, for example when the only variable pointing to that object gets reassigned to point somewhere else, that object is available for deletion (from memory) by the GC. The deletion happens automatically meaning you don't have to worry about memory management yourself.
sorry my ignorance, I thought ReactNative was for mobile. On their website they " Build native mobile apps using JavaScript and React "
Wait, this is probably an incredibly stupid question but does this mean VSCode will no longer be running off electron but instead be a native desktop app?
Of course you can debug minified code, but it's not comparable to sharing the whole source code with everyone. The point is not to open source your front end if you just want to debug it on prod.
What advantages does this have over [nativescript-vue](https://nativescript-vue.org/)
Making a vivid UI in c/c++/c#/java is hard because the toolsets you are working with are outdated and the languages aren't as flexible (for instance javascripts object notation/json is a big help). Most of them imperatively inflate layout, which is the worst, some of them are templating controllers, which is better but still hard to scale. This used to be my job for years, and things that would take me weeks even with expert knowledge would probably take a day with modern js tooling, especially react. As an example, if you wanted to be good in xaml/wpf/c#, it took about 2 years to get to an expert level, some people would insist it takes longer. It took me at least one full year to really get into Android/java. And even then, managing user interfaces was still a nightmare.
No triple-tick support here. Need to indent by 4 spaces &lt;-- 4 spaces for code blocks
Why would I deal with such low\-level elements such as \&lt;text\&gt; when I can use components that come with e.g. quasar? Quasar is also wrapping the SPA with cordova.
Right, it’s a bit different in the windows world, UWP is for both their mobile and desktop platforms.
That’s exactly what it means. Also means there’s a non zero chance Microsoft will start supporting desktop environments other than Windows for react native implementations.
That’s actually pretty rad, less memory usage I’m assuming as well. Definitely bad for electron though
An interesting way technically speaking of blocking third party scripts: https://github.com/snipsco/yett
You wouldn't want the same UI on mobile and the desktop, that approach has never panned out well for those that tried. These are the apps that fall out with bad reviews because users absolutely despise them, especially on mobile where everything that feels even slightly off stands out quickly. RN follows a different approach: encapsulate the logic and state so that 90% of your app is fully portable. The 10% are just basic views, they just dress the app and are quickly built. &gt; And just to clarify, who exactly do you mean by vendor? e.g. For a Samsung Android phone, would the vendor be Google or Samsung is this context? For instance. And this is a good example, because scores of Samsung phones don't run any PWA's because it's in Samsungs own interest to let older models fade out without updates. In Apples case they didn't want the web to compete against their store. But even web standards, this isn't the way the web progresses today.
I understand that JS "classes" ain't real. Its the same as writing some object, then doing object.Prototype = {} for gets and sets and functions, and object.something = function() {} for a static function. It's just much cleaner syntax. Holy shit I had no clue that it actually worked that way. I did refer to instance when I said child, I don't really know the correct terminology as instead of going to IT i had to attend car electric school :\\ I just really understand computers and everything clicks with me, since I've spent 90&amp;#37; of my life on it. So if I have lets say 10 notifications, the fadeOut (this time, non\-static) function will not be generated 10 times, each time for every instance, but only once? Get and Set work the same way? BTW sorry for not answering sooner I completely forgot I posted this thread lol
Awesome. Thank you very much, guys. 
That's the worst mobile website layout I've seen.
I'm learning JS for myself only. I do not plan to work with others. However, thanks for the insight. If people get pissed off about it, then I'll just avoid it anyway, concise code is always good
Thanks. Reddit redesign is really throwing me off.
&gt; Not so good for electron. No no, see... now Electron can drop all of those "bloated" OS's and focus on Linux exclusively! /s (I still don't see it as a big deal to electron, it has it's niche.) 
Good point. However, every dependency may need a different version to work correctly. That said, a lib **A** may depend on **B 1.0.0** but will not work correctly with **B 1.0.2**. This can happen not only because of incorrect version patch number increase but because there can simply exist a bug preventing **A** to function properly.
Intresting. Thanks for the insights.
&gt; compiles to React Native It's turtles all the way down, I guess?
(My react native exp is a bit low, so talking in abstracts) Well, to get it native you'd have to build the library that makes native controls on Linux, (The react render cycle has to go somewhere) I'm assuming there's probably a reasonable amount of boilerplate to make a react native hosting framework. And that boilerplate has little cross over between platforms, as it's the "distilled and concentrated cross platform wiring that makes the react native code function" If you used electron, you may still have to implement a number of low-level interfaces that the hosting app expects to have. AND if MS is using ChakraCore for their JS engine, there's likely some differences in performance characteristics between that and V8 to make performance optimizations annoying to say the least. I would be impressed if they ever did release a "React Native MS Office for Linux" - I was about to say "I'd eat my own hat" but ... I faltered, I guess it's possible enough to me, that I won't make that kind of bet ;) 
\&gt; Office 365's UI, a lot of it, but definitely not all of it, are pieces that are built using React Native (Windows). Can you provide more insight about this? Is the Office 365 native app for Windows rendered by React Native?
It is completely unclear what this is. Office 365 seems to mean several different things. There’s a real Microsoft Office (non-365), which is just a Win32 application (#1). This is the good stuff. It costs a lot of money. Then we have at least two other things which are both called Office 365. First, there’s some kind of browser-based bullshit (#2). This, at best, competes with Google Docs. It doesn’t compete with any kind of real Microsoft Office. Then there’s another thing called Office 365, which seems to be a Win32 app (#3). It’s very similar to #1, most likely it's the same code, except it’s subscription-based and it somehow integrates with the cloud. It is completely unclear if these posts refers to #1, #2, or #3. Can you please clarify? Thanks! 
There are thousands of project based tutorial videos on YouTube and Udemy. I'd suggest starting with Traversy Media on YouTube.
That’s assuming that Facebook commits and open sources all their internal implementations of React Native.
I found Javascript a little advanced for a beginner, however, if it's working for you, I wouldn't discourage its use. I do recommend the book Javascript &amp; jQuery by Jon Duckett ([http://javascriptbook.com/](http://javascriptbook.com/)). Jon's put together an excellent and simple\-to\-understand reference book with a lot of code samples and examples. While the book isn't free, it was well\-worth the price paid for the set \- there's a companion book on HTML &amp; CSS. There may be eBooks available from Duckett so that's worth looking into but if you have the means to purchase it, it's worthy of a place on your desk/bookshelf. You'll refer to it often. Good luck, \-\-Sherman
I guess me wanting to get into security will never have to really worry about being without a job at this point. Lol
Oh just found out! Also, wave, haven't seen you in a bit! 
Thank you I'm definitely not against spending money to learn what I'm trying to do. Just trying to find more great resources. I'm starting off with eloquent javascript / am doing a web dev udemy course by colt Steele to give me a good basics. I figured once I complete the udemy courses javascript section + read through eloquent javascript then I'll attempt to tackle javascript 30.
Thank you!
When writing [quicktype](https://app.quicktype.io) we used to use [immutable](https://github.com/quicktype/collection-utils/blob/master/index.ts), but ran into performance issues on the one hand, and the realization that the ES6 Map and Set are the future. Unfortunately, the latter are missing a lot of basic functionality, so I wrote [collection-utils](https://www.npmjs.com/package/collection-utils), which implements everything we needed. My aim was not to be comprehensive, but to cover our own use cases, but I'd be happy to work with contributors to extend its functionality (and add documentation ;-)) to cover all the bases. Cheers!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [quicktype/collection-utils/.../**index.ts** (master → d163263)](https://github.com/quicktype/collection-utils/blob/d163263509a78f1859072d3c8a22f3a6df96df35/index.ts) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e0m4c1h.)
That's a weird way to say "legitimate legal concerns."
Just a tiny pointer, pick up TypeScript as soon as possible. It's super close to vanilla JS and the optional typing is a godsend when working on any large project. 
yes
Hi /u/Proud_Performer, For javascript help, please visit /r/LearnJavascript. Thank you!
https://yoast.com/dev-blog/guide-mailto-links/ You need to format the mailto link like this article says.
It would be huge if it was correct - but it's not. See [this comment](https://old.reddit.com/r/javascript/comments/8qpwi7/office_365_ms_teams_skype_code_and_the_edge_debug/e0llhzp/).
I'm genuinely confused as why this is getting so much attention. The NativeScript-Vue integration is out for over a year already. It fulfils exactly the same purpose, without the additional strange cross-compilation/transpilation. 
Because other teams mutate libs like React to fit their own needs which aren’t always in alignment with the best interest of either FB or the react community as a whole. Things like “we made this code significantly more flexible in a way that nobody other than us needs at a cost of 2kb and 5% speed” are often rejected
That's really neat! Didn't even know I could use Javascript to code things other than front and back end applications. 
I'm actually trying to get away from Google apps as well. I am currently in the process of trying out OnlyOffice on nextcloud. The new Libre Office looks great too, but the ability to edit online through nextcloud and the great UI for OnlyOffice seems like a viable alternative. The tight integration of mail, calendar, contacts, notes, etc in Outlook/Exchange has just been challenging to replace. I've had limited success with Wine and even tried Crossover. I unfortunately have not been able to use MSO and most importantly Outlook reliably. As for Windows, 10 has been the best desktop OS from Microsoft thus far. Especially with WSL which has been helpful when I do dev work or administration of Mac or Linux systems. It is great, but my concerns regarding privacy and security as well as WSL not being robust enough has pushed me to work to have Linux as my primary OS. 
Yeah its pretty neat. AppleScript is really clunky to use. JavaScript is so much cleaner. Here's another neat script. This looks for the Sound Cloud tab in Chrome and plays or pauses the stream. chrome = Application("Google Chrome"); windows = chrome.windows; for(i = 0; i &lt; windows.length; i++){ tabs = windows[i].tabs; for(j = 0; j &lt; tabs.length; j++){ url = tabs[j].url(); if(url.match(/soundcloud.com/)){ tabs[j].execute({ javascript: "document.querySelector('.playControl').click();" }); } } } No more finding the sound cloud tab and clicking the button! 
Thanks for responding! Shoot unless I overlooked it, the only solution I see there allows me assign the subject line, but it would be the same subject line every time it’s submitted. I want the subject line to be unique to how the form is filled out. The best way I can describe it is I need the data to be called from the fields and auto fill in the subject line. FORM1: Name: John Doe Company: John Company SUBJECT LINE: “John Doe John Company” FORM2: Name: Jane Doe Company: Jane Company SUBJECT LINE: “Jane Doe Jane Company”
Interesting, thanks for the enlightenment. Seems like bad software architecture if that kind of stuff needs to be upstreamed but I'm sure you have a good explanation for why I'm wrong
no
Typo: `(first + last) * (length / 2)` :) In any case, OP's formula is just the same but with the hypothesis that first is 1 and, so, length is last.
I mistakenly assumed you already had some Javascript in place for this. This link references doing what you want and claims to have an example of how to do it. https://forums.adobe.com/thread/462681
Only the virtual dom. No real DOM, the virtual dom will update native views.
Design Patterns For Dummies ISBN\-0471798541 while a little older goes over all 23 of the GofF patterns and adds 10 more. You can find it on [ebook\-it.org](https://ebook-it.org)
Just an army of dated VBScript macro writers that are now forced to write JS.
And the documentation of the “Framework” usually tells where someone can make the use of middlewares right ? Your explanation helped a lot! Thank you
Meanwhile can we fix the horrible and slow azure ui first?
Hi /u/imvbvidhu, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/derpderpblah, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/The_Bronzologist, For javascript help, please visit /r/LearnJavascript. Thank you!
For express: this is a callback which executes for every request before route handlers. 
So Sorry , new here so Didn't new this.
I never can remember Gauss' formula for the sum of all integers up to n, but there's a nice way to always come up with it. Let's say we start at 1 and n = 10: You write it down like this ` 1 2 3 4 5 10 9 8 7 6 ` Now you have n/2 sums of n + 1. ` 1 2 3 4 5 + + + + + 10 9 8 7 6 = = = = = 11 11 11 11 11 ` For some reason I can remember the process but never the formula.
Where are you getting that from? I didn't see anything about transitioning VSCode to React Native.
I think it's broken
depends
It doesn’t need to be, which is the point
Material Components for Vuejs (integration of official Google mdc-web) https://github.com/matsp/material-components-vue Just released new version!
If you can’t write a named function then sure why not, beats having to understand scoping apparently
I'd argue that NPM isn't a great place for this, especially since it seems to be against their "Acceptable Content" policies or at the very least is close enough to "general purpose database" that I'd want to consider an alternative solution. https://www.npmjs.com/policies/open-source-terms#acceptable-content One better solution could be a REST service/CRUD database that combines the JSON data with its respective SVG and makes it more discoverable.
The core cue team has not thrown their weight behind a single solution. That needs to change for the community to take off.
What do you mean? This is good: `const someFunction = () =&gt; {}`, and this is also good: `function someFunction () {}`. In the later case, the name "someFunction" gets assigned to the `someFunction.name` property, so it can show up in your stack traces and debugger. That's helpful, but not a deal\-breaker either way. Things that are less good are `let someFunction = () =\&gt; {}`. You should always use \`const\` wherever possible. There is even an eslint rule, [prefer-const](https://eslint.org/docs/rules/prefer-const), that will complain about any `let` or `var` uses where you don't actually change the value later. I think this is a solid coding practice. Another option, `var someFunction = function () {}`, seems really old-school. I have no idea why you would want to do this, unless you are taking advantage of some obscure Javascript scope rules.
Not sure if this will help your search, but the strings you want are often referred to as a "keypath"/"key path".
Sure, but putting it up for hosting is kind of what I don't want to do. But this is why I'm asking 
try [https://www.npmjs.com/package/flat](https://www.npmjs.com/package/flat) seems to be most popular package for just this thing.
&gt; const someFunction = () =&gt; {} will also get a name of "someFunction" (inferred naming as of ES6)
Web apps.
you're welcome!
 $ node &gt; const someFunction = () =&gt; {} undefined &gt; someFunction.name 'someFunction' *mind blown* 1000 bits u/tippr 
u/senocular, you've received `0.001 BCH ($0.830696 USD)`! *** [^^How to use](https://np.reddit.com/r/tippr/wiki/index) ^^| [^^What is Bitcoin Cash?](https://learnbitcoin.cash/) ^^| [^^Who accepts it?](https://acceptbitcoin.cash) ^^| ^^r/tippr ^(Bitcoin Cash is what Bitcoin should be. Ask about it on r/btc)
Only a little bit of experience using either platform, but I believe there are differences between the way you write React apps vs RN apps... in some ways it's closer to "inspired by React" rather than being a direct port to native platform.
Works great even on mobile. How ca i reuse this in my website?
Discord is written in javaScript and Elixir, so there's that.
Nothing. Joke aside. Everything you see, mostly everywhere - from web and facebook to mobile apps is javascript. And when we say everything. We mean totally everything. The whole Facebook (or 90%) is JavaScript, from top to bottom - from frontend to frontend backand. NASA - hence, we have JS on the cosmos through some systems, full slack.com website and their chat app, Snapchat, Reddit, Stackoverflow, Youtube, Twitter, Facebook (the whole facebook.com, Messenger, Instagram - their mobile, desktop and web interfaces [they are just mostly the same thing as codebases]); Google (the search and most of their products as Gmail, Hangouts, few chat apps); Amazon, Ebay, few Microsoft products - Skype, VSCode (code editor); AI Robots, Automated home assistants, tons of newspapers websites and their mobile apps, and so so so freaking much more. It's just endless list. JavaScript is just everywhere and everything.
Thanks for the great reply. Can you point to some sources to learn JavaScript? 
Since it's constantly changing, there's no way to know what's in the file without reading it completely. And when you write a file, you're going to write the whole thing, especially if it's changed size. If you know what pieces will be used together, you could keep them together and write multiple files, simply deleting each files after it's processed. If that's not possible, you'll have to just do what you're doing. Alternatively, you could use a data store (like a sql database) that is good at adding and removing things efficiently.
https://twitter.com/TheLarkInn/status/1006856522616356864
Oops, fixed.
Sounds like you want a database.
Haven't heard of quasar but if it uses Cordova that's a hybrid app, essentially a web app in a WebView, similar to ionic. Nothing wrong with that, just less performant.
I still don’t understand how someone tried angular (and it’s precursors) with its additional html markup and decided they wanted more of that. 
The number of times i've seen people write posts where they seem to be completely unaware of what Async/Await code is doing is mind boggling. "Since fat arrow (`=&gt;`) syntax arrived, I see a lot of people saying functions are over..."
oh man I can't wait for js macros for excel
Depends on how much programming experience you have. If you have like no experience JavaScript is a great starting point because it doesn't seem as overwhelming as more complex languages; you can just create an .html file and start a little simple script in there. I'm personally not sure anymore how my journey started. I just wanted to build an website and wanted more and more cool stuff, resulting in creating some garbage PHP I don't even understood within Wordpress themes and copy some JavaScript to change the design which I wanted to modify. I've never thought it will become my job a few years later. For quick examples and short documentations I recommend w3schools. You will not learn JavaScript by just reading documentations, but if you set yourself a goal you want to program it will be a good reference. Something easy you can try is to create a memory game: - setting up a grid of containers which will be the cards, let's start with a simple 3x2 field here done by some HTML and CSS - showand hide the content of these cards when clicking them by modifying their style.display attribute - fill pairs of cards with just a number (1, 2, 3) or something else you like - check which type of card got clicked - when a second card got clicked, compare it to the first card - if they're pair remove them from the field - if they're different hide them again and let the user again pick two cards 
The problem is one of interoperability. Think of it as a blueprint that specifies how a message will be formatted and thus set agreed upon expectations across distributed systems. You could roll your own and distribute that within and outside your group or use an existing format.
Misleading title
Vue's templating language is both simpler and completely optional. So no, it's not "more of that". If anything, it's less.
If you wanted to try to do this yourself, probably use `Object.keys(obj)` recursively, testing if each found key stores a `typeof x === 'object'` to determine whether you should look at the property referenced by that key. You would have to keep the list of keys within function and concat them to get the entire trail. Should be fairly trivial too bc `Object.keys` will work on arrays too so it will return `['0', '1', '2']` on `['a', 'b', 'c']`. And `typeof ['a', 'b']` will return 'object'.
I guess I don’t see interoperability as a large problem right now. Even if the message format is the same there would still be significant work in getting the semantics of an arbitrary message to align across services or protocols.
I think it would be a nightmare to commit anywhere else. Dan Abramov always commits to the public repo for example. 
Disclosure: I am the original author of this article.
These hacks are getting nothing but uglier. How about dropping the whole house of cards that is code-splitting and just deliver a giant app with a loading screen... the way Gmail does it. Users don't care if it takes a while to load as long as when it's completely loaded it works flawlessly like a native app, instead of yet another loading shell at every other action. With PWAs and server push being more common hopefully in near future it'll be a good riddance to PITA that is code splitting.
"So when I said all of, I mean the UI, the things thare are interactive and a part of the users experience. Server based, API, processing, data handling networking etc, is likely through C# etc." the UI != all, lol
Aw crap, for some reason my brain just refuses to read @Code as VSCode.
setting up mySQL now, thanks
that's now what I'm up to.
It looks correct to me, although maybe try innerText.
 ``` parseInt('$5') NaN ``` You need to remove the $ someother way. 
Does it matter what I use to select the span tag before I parseFloat it? I'm stuck.
your code should work.
If you add a package.json you can npm install it directly from a git repo. "dependencies": { "teamcolors": "git+https://github.com/you/teamcolors.git" }
can you share your results?
Middleware is a lot like piping but generally for asynchronous operations where you are at the point of no return. Imagine you have a bunch of functions like so: const sq = n =&gt; n * n const sqrt = n =&gt; Math.sqrt(n) const add10 = n =&gt; n + 10 const sub7 = n =&gt; n - 7 They all take a number &amp; return a number so they can be composed like this: sqrt(sub7(sq(add10(10)))) // === 19.8... That works fine for small stuff. But say your app has bunch of calculations requiring different functions in different orders, and you want to make sure the final results are always to one decimal place. Not wanting to write a bunch code like a(b(c(d(e(f(n))))), you abstract: function pipeN(source, ...fns){ if(isNaN(source)){ throw new Error('isNaN'); } else { const result = fns.reduce((acc, fn) =&gt; { return fn(acc); }, source) return parseFloat(result.toFixed(1)) } } Each function in "fns" kind of like your middleware in express.You have your source, a number and the destination, a number to one decimal place, but the functions allow you to alter the result of a value any way you want while it's on its way from the source to the destination. You can call it like this console.log(pipeN(10, add10, sq, sub7, sqrt)) // 19.8 This is great for a lot of occasions, but when working with Node or really any async JS, this pattern breaks down. Let's assume that some of those math functions are asynchronous. How can you pipe the results together? You have to rely on callbacks/promises/async await and that can get ugly: async_add10(10, w =&gt; async_sq(w, x =&gt; async_sub7(x, y =&gt; async_sqrt(y, z =&gt; console.log)))) // 19.8 But luckily, those functions can be composed too: function async_pipeN(source, fnArr, done){ if(isNaN(source)){ done(new Error('isNaN')); } else { const recur = (accum, fns) =&gt; { if(fns.length === 0){ const result = parseFloat(accum.toFixed(1)); done(null, result); } else { const [first, ...rest] = fns; first(accum, updatedAcc =&gt; recur(updatedAcc, rest)); } } recur(source, fnArr); } } It's similar to pipeN. They both take a number &amp; middleware, but there's 2 key differences. First, is "done," which is called when the function has completed. Second, each of the middleware functions take a number (like the sync version) but also take a function as the last argument. This function allows the numerical computations to continue to the next function. Without them, the final destination is never reached. async_pipeN(10, [ (n, next) =&gt; next(n+10), (n, next) =&gt; next(n*n), (n, next) =&gt; next(n-7), (n, next) =&gt; next(Math.sqrt(n)) ], (err, result) =&gt; { if(err) { console.error(err) } else { console.log(result); } }) // 19.8 Like everyone in the thread has mentioned, it's just about manipulating data as it moves from one place to the other. Libraries like Express abstract all of this away so you can just focus on adding pipes instead trying to figure out the whole flow. But I think it helps to understand some of the details so you can be a better plumber.
I believe the prefer to be called "Accountants"
paste what you have.
I cannot wait for server push and http 2 to become more common! I think that once it’s more main stream, you could kiss webpack goodbye (depending on your build setup) I came across a guy who had built a POC “react without webpack” it pretty much involved Babel and server push, it was like the holy grail of progressive. I do understand where you are coming from around these losing shells all over the place. We are working on a smarter way to load code splits that’s not on-demand. I hate seeing loading screens on every page. I want the benefits of a light payload (remember so if these web apps are big, I knew of one that was 20mb. Ludicrous. I know!) Living in SA for many years, we used to dread big payloads because they just took so long! I do understand where you are coming from man, and I’m just as excited for server push! I’m sure I’d still want to built tools leveraging it- but gosh, it would feel so much cleaner. You know?
Egghead.io
NativeScript &amp; React Native have much closer to full-native performance: [**YouTube: React Native vs Ionic vs NativeScript vs Android/ iOS Native Apps**](https://www.youtube.com/watch?v=rb8smP_xTTY&amp;t=15m56s)
This doesn't seem like all of the code. However, I think what you want to do is use Puppeteer instead of a pure JS script. [https://developers.google.com/web/tools/puppeteer/](https://developers.google.com/web/tools/puppeteer/)
So? MS doesn’t own the code stored on GitHub. The project owner does.
Thank you, this really helped me figuring out how to tackle this! As I couldn't find any packages that solved this, admittedly easy problem, I figured I'd upload my solution if anyone in the future is interested. [https://www.npmjs.com/package/stringify\-object\-keys](https://www.npmjs.com/package/stringify-object-keys)
Are you scraping or is this your site? If its yours i’d recommend separating your model from your view.
Out of curiosity, why aren’t you building projects with the languages you have already started learning? Why add another?
Use below HTML code. $&lt;span class="price"&gt;59.00&lt;/span&gt; And use `parseFloat()` instead of `parseInt()`.
I think yes, the function is a constant and its value ( function ) should not change
can you give an example?
Wow, I ended up building this exact thing at work today, with almost the same approach! This is great, thank you for sharing!
Of the math or seperation of concerns?
both? lol
If you read the rest of the tweets, you'll find that they're using TypeScript which compiles to JavaScript.
Funny you mentioned that. I tried learning django so I could use my python knowledge to build a web app I wanted to make for myself. The lack of beginner friendly support and my general lack of web knowledge made it brawl to learn. The nice thing with web development is your gui is simpler to build than with something like c or python by itself. I want to start solving problems I'm curious about now cause all I've been doing for the last year is studying and solving contrived examples. In short I wanna start using my innovation muscles and learn from solving real world problems than a textbook
I wrote my JavaScript books for people who already know how to program. Free to read online here: http://exploringjs.com
Lol sure, So the math would look something like: Let newNum = ((num * 100) * 70)/100; The separation of concerns thing is something I’m not very experienced with but I’m building a small ecommerce site and at first i was trying to manipulate my pricing by grabbing it from the dom. As the sites js grew it became more and more difficult to maintain so now i load... to be continued, driving now but ill edit this when i get home.
Fascinating article, man. I’ve been building portfolio sites with custom WordPress themes at my job for the last three years. I’ve been wondering if something like this was possible —or even worth doing. But even after reading your article, I don’t completely understand the benefits. Can you elaborate in more laymen’s terms?
I'm teaching myself JS and jQuery right now at [Udemy.com](https://Udemy.com). The courses are great and usually on sale for under $20. I'm also participating in the #100DaysOfCode from [FreeCodeCamp.com](https://FreeCodeCamp.com). There are all sorts of schools out there.
This made me laugh out loud when I read it
I'm just copy pasting this into the console so I can call visitWebsites() from there. I'll eventually create some HTML forms to input the data and have some js functions parse it and organize it into arrays. I think the scoping fix is only required because I'm changing webpages. Everything not on the stack seems to be erased from memory when the next page loads. I'll look at puppeteer but I'd rather understand why my conditional is returning true and clearInterval() is stopping the loop regardless. 
Thank you Jesus!
You have a bug in your if / else if logic. What happens when i is equal to Temp_Numbers.length? It doesn't increment i, and it doesn't run clearInterval. In this case it would probably be best to just change the 'else if' to 'else'
^ I've been following this guy for years. He knows his shit. His book is probably pretty great, as is his blog. 
Scale. Yes, you are correct. When you change CSS, usually you change JSX. However, Changing JSX/JS doesnt mean any changes were made to CSS. Tracking events, typos, business logic, bugfixes, implementing things from a UI Kit / shared repo. It adds up man. Im sure theres workarounds here and there. But cascading styles are more efficient. Consider this, you update business logic. Depending on the deployment strategy, you could very well have the application deploying dozens of times a day. Depending on the number of developers, you could have thousands of changes and hundreds of deployments. Takes longer to first meaningful paint, runs the risk of render blocking code, \&lt;style\&gt; tag at the top of the page with massive css In these scenarios, its important to have great cache control. I suppose my opinions are directed toward large enterprises :p I am trying to consider the ramifications of site performance and load time. At scale its a problem. Once you get into the millions to tens of millions of hits per day. Its vital to have both client side and server side caching / fragment cacheing. Inline styles mean changing a color or font weight = cache bust. Not a train smash if its client side rendering (beyond cache busted JS and CSS).... buuuut, if its server\-side rendered and inline styles are delivered with the initial response payload. Then that color change means you have to cache bust the server\-side cache / fragment cache. If you are reusing components elsewhere or have many pages where the component is used, because the style change is directly attached to the markup, you end up invalidating all cached copies of it. Everything becomes a cache miss **all at once.** Im going to back off of the whole scale side of things and give a smaller example. Couple of months ago, a friend needed a site for his startup, something to showcase the idea, attract investors and create PR. Given he was not too sure what direction the site needed to go \- i went for flexibility and put wordpress on there with a custom theme. He posted it on reddit and it reached the top in whatever category the post was created in. Something like 5,000 hits an hour started flowing to this little wordpress instance. They were also doing a bunch of content updates on\-the\-fly, busting the cache multiple times. It didn't take long to knock it offline. If we scale this concept up (given theres many differences in stacks and such) the architecture can start to feel the pain. Please dont take this the wrong way, I have been a long time fan of JSS its just not ideal scalability. 
can someone ELI5?
JS is still better than VB hell
You can pry my function declaration from my cold dead hands. If you're asking `function foo() {}` vs. `const foo = function(){}`, it's a matter of style. Personally I hate function expressions and would much rather declare functions with the `function` keyword and take advantage of hoisting to create clean, organized modules. If you're asking about expressions alone (e.g. `const foobar = function(){}` vs `var foobar = function(){}`), then yes, use const please.
I wouldn't say there are differences in how you write. You are expected to use different components (e.g. View instead of div) with different props (e.g. onTouch instead of onClick) but the core idea, api and principles are the same in both cases.
He explicitly said written in Javascript about things clearly written in pure Typescript.
I've tried that and it still won't work. I also tried === but that didn't work either. I think it's something to do with changing webpages and the js not persisting. Thanks for pointing out the flawed logic though!
One use case I could see for this is to automatically update Cypress fixtures to keep it in parity with what your API is delivering. I’m not sure if that’s the main purpose though.
Is this basically the client side version of nock? Pretty awesome stuff.
He does not say any news here. Just says what is already build with javascript as an example.
Disclaimer: I'm just looking at the library for the first time so I might be wrong, feel free to correct if I am. When you write a test for some code that contains some HTTP requests, you might not want your test runner to actually execute those requests, because: a) it could slow down your tests b) you could be sending a ton of unwanted test requests to a bunch of different endpoints The example given in the Polly docs show Google Analytics as an example of an HTTP request you might not want to fire during a test run. Polly can intercept all requests to a URL using some sort of a globbing functionality. It will record the first request and then persist the response to localStorage or to an express server (I think), and then replay those responses on all subsequent requests, so you don't have to hit those endpoints repeatedly.
I've just started reading the docs myself so take this as you will. The main function from what I've gathered is rapidly intercepting and mocking http requests for testing. So if you have a function which makes a request to some endpoint and does something specific based on the response, you could tell polly to intercept all browser calls to that endpoint and return whatever data you want to test. ie test errors are handled correctly by having polly return your expected error code and response, or test data is parsed correctly by your function on 200's, and so forth. I imagine it's much more powerful than just that though
As someone who's tasked with building out a new intranet on Sharepoint, I love the push to react for webparts and the modern interface, but for the love of god, the UI and admin interface of sharepoint must've been cobbled together but a hundred different teams. It's a nightmare to get up to speed on and the terminology either overlaps or doesn't make sense. I really hope on future releases they scrap anything classic related and have one cohesive modern admin interface.
Yes, exactly. Whatever library/framework/etc you're using, if it supports some sort of middleware, should have documentation on how it's implemented as an API. You're welcome! Feel free to PM me if you have more questions.
I worked on a project that used Ruby's VCR, which was this same idea. It sounds like a good idea but it isn't.
I'm not totally sure, and I read this pretty fast, but likely it's to avoid wasting the first render. But it may also be just that a lot of CMSs were designed to return HTML, not raw data, and if that's the backend you're stuck with -- but you still want to modernize your front end -- what do you do?
Go ask the OP of the linked comment, they were just copy/pasting.
I was asked to work through it during a job interview. Was hoping someone could provide a solution and walk\-through so I could better understand it. He eventually told me to ditch the JS and manually do the math and implement it with a new span under the current price and just alter the styles inline :/
JavaScript The Good Parts by Douglas Crockford :)
Can you elaborate?
Easieat thing to do would be if you can get a JSON array of the urls of the images, and pull in a true randomizer like lodash.random, you can shuffle the array with lodash, then map them into the dom nodes required by your carousel then append them all into your DOM. You'd run that code on document ready and it'll randomize the order with each refresh.
Loadjs is also another similar module for this.
\&gt; I think it's something to do with changing webpages and the js not persisting. You said in another comment that you think the issue stems from the page changes. I told you about a tool that will fix the page change issues... Not sure why you or someone else downvoted, but good luck cause I am done with this thread and topic.
github: https://github.com/lusaxweb/vuesax
/r/emberjs
[removed]
Loadjs is a dependency loader. Yett is a script blocker. Not the same thing at all!
why not?
This is a home run for my skill level and interests! Thanks for sharing and creating. 
I’m on the team with the guys that wrote this. This is pretty much right. You should really never connect to your API when testing in CI. Basically, Polly allows you to record your live API responses during a test locally and automatically play those responses back during tests. If you need to alter the response for specific tests, or want to keep the request pending to test loading states or something, you can do that too. 
One of my coworkers wrote https://github.com/walmartlabs/easy-fix, which is similar. It's good to see that others are having the same problems and arriving at the same conclusions in our field. 
What are the main arguments against running tests against a test instance of your API?
Hi /u/ucfKnightforLife, For javascript help, please visit /r/LearnJavascript. Thank you!
You don't need a full shift for this you can just use Redis or some other memory store. 
As you may have noticed, I said that allready 😉 Though lots of people don't seem to understand that difference... 
When you load a new page (which you do in `this.document.location = Next_URL;`) that new page won't contain any of this javascript, since the code is tied to the HTML document. Even if the code did carry over, it would be a fresh instance, so it would all start from the top again. Maybe instead of changing the website location, you could try opening new tabs? If that doesn't work, you could build a light Chrome/Firefox Extension, or run this on a server.
lol "math garbage" If you want to see true nonsense built with javascript, [check out JSFuck](http://www.jsfuck.com/).
Can somebody explain how that would fit in an E2E framework? (pupeeteer, nightwatch ...). It looks like polly swap the global fetch/xhr APIs, but why would you want this to happen in the test runner in node and not in the browser instance driven by selenium?
I think he meant the production API. Mocking your service gives you predictability, consistency and its faster to debug. Many things can happen that are out of the testing scope, network issues for example.
I would not call that "static". It (to me) is missleading with what is a static method/field in a class. IMHO this is just a bound function and a scope/context property. If you expse the object used with `bind` you'll get the property you are adding. So that's not really private...
WoW! I literally just did this yesterday: const flatten = (obj, ns, hash) =&gt; { return Object.entries(obj).reduce((acc, [key, value]) =&gt; { let keypath = ns ? `${ns}.${key}` : key; if (typeof value === 'object') { return flatten(value, keypath, acc); } acc[keypath] = value; return acc; }, hash || {}); }; I love seeing how differently we solved the same problem. Main difference is that I don't include `[]` for array indexes, for interoperability with `Ember.get()` (and `_.get()` works with either form).
Why the downvote? Try to initiate Polly in your current test runner, you'll get a ReferenceError since self/window is undefined.
Disclaimer: I'm the author and this is something I recently learned from work. Just wanted to share the learnings \- thanks!
@Boblauer, could this be solved by registering the dependency in the package.json of your project?
I'm using static in reference to static keyword within functions in languages like php where a variable is remembered between calls and no matter how many times you call the method, that internal counter is going to be there. I know that if you choose to expose the object that's bound, it'll be public after but if you don't, it is functionally private and inaccessable from anywhere except the functioa. which is the point.
I really enjoyed working with VCR, how is it not a good idea? It really demands versioned api's but you really should be using that either way
Thanks! I’m happy to hear that.
Although I'm a Vue fan I don't understand what are the advantages of this thing. It's just a wrapper over react native which imho only creates complexity both for maintainers and end developers. Nativescript Vue is just a better solution for now.
react-native is a react renderer that targets mobile. Now there are lots of renderers targeting many other platforms: Windows, macOS, Linux, etc. They all depend on the „react“ package on npm. React itself is cross platform, only host semantics are specific (div, span, View, Imange, Box, etc). Microsoft wraps renderers under the reactXP umbrella, abstracting even host differences so that one codebase apparently can drive multiple platforms.
Yup, this. If you’re testing a front-end application, you don’t want to be dependent on things like specific users existing and the production API being available. Of course, all sorts of types of testing exist and maybe sometimes you do want to hit production. This is just a tool for cases where you want to stub your dependencies (which is normally the case). 
The new Context API is out since v16.3 so... why not? It doesn’t fully replace Redux but in most cases I think you don’t really need Redux :)
Originally it was supposed to be called Spy.JS but there was some naming conflicts in the JS space and it was a bit confusing that a “spy” is already a concept in testing, but different from making network recordings. I don’t think they knew about the .NET project but I’ll ask them about it. The name came from the idea of a parrot repeating what you tell it, thus “Polly”. 
Where do you run your UI tests? Polly is not set up to run in Node yet, although it’s something they’re hoping to support eventually. We do run our UI tests in the browser, which is the standard for Ember (which our team uses). Maybe the documentation should make it more clear that this only works in the browser as it, as you mentioned, swaps out the global XHR/fetch implementation in order to intercept requests. 
yeah but the one I have is not complete 
Ok, thanks everyone! I've finally discovered that indeed some test/assertion framework can indeed be run inside the browser, like mochajs and qunit, now I understand why there's no jest integration!
I run my test in node using puppeteer 
I see. Polly needs to be running in the browser with your actual code in order to intercept requests. In our case, testing applications with Mocha or QUnit, the tests and applications are both in the browser. 
👍I think it would be less confusing if the documented example didn't require a large amount of tooling to get it working. The import from node_modules &amp; the "polly.server" made me think it was a node library.
I'm one of the authors. Those are all great choices. Polly is not a replacement to E2E testing. E2E tests tend to be fragile, slow, and quite painful to debug. So you typically want to try and capture bugs before they're captured by E2E tests - that are great at asserting against the shape of contracts between systems. The best way to describe this form is testing is a layer between unit tests, which you typically write and run in a browser, and E2E tests. This is really an educational thing that the Polly docs could elaborate more on. Coming from the Ember community, this pattern is very common and has served us quite well. We created a small demo for a talk today that can probably better describe what I'm referring to. ``` git clone git@github.com:jasonmit/ember-api-docs.git cd ember-api-docs git checkout u/jasonmit/qunit yarn &amp;&amp; yarn test ``` Hopefully that helps. 
Yeah, the idea of Polly having a server _on the client_ is definitely confusing. Especially because there is a mock Polly server running in the browser, intercepting requests, and an _actual_ Polly middleware in Node that allows persisting requests to disk. For context, this kind of idea has been around in the Ember community for many years, which is maybe why it doesn’t feel super out of place for us. Both Pretender and Mirage use this concept of a server-in-client to stub requests. I’ll bring this up as an area that needs documentation improvements for those that haven’t come across this idea before!
The main reasons you may not have found people doing this are: - Using `bind` has known worse performance than using a closure (which is functionally equivalent for this case). - Using `bind` this way is _semantically worse_; it forces you to use a `this` reference to an _artificial object_, i.e. something that has no obvious meaning or name other than being a "private variable container". Also, having to use `this` to refer to that inside the function adds cognitive noise. - Usage of a closure can be generally read at the _start_ of the declaration of the function. On the other hand, usage of `bind` is read at the _end_, which is another added cognitive burden when reading the code and a not-too-natural-either way of writing it.
I found [Eloquent JavaScript](https://eloquentjavascript.net/) really helpful 5 years ago.
I'm glad you wrote this. I wish I couldn't predict the following facts: - Noone will read the clarification - Three years from now, people will still be writing blogs on how Office 2019 was only successful because it was written entirely in Javascript. I mean, this post is 18 hours old and has no upvotes. And this is the first time I've seen it. The original tweet was posted *everywhere*.
Typically i hate such kind of questions and rarely answer or describe. But /r/Azudra is kind of right. W3Schools is good start, but that's not how i started. I had years of background in PHP and hated JS for most of the time, then realized that it's just okey and that what I was hating is jQuery and the whole mess around that. But yeaa.. that were totally another years for JavaScript, years without changes in the whole langugage (the ECMAScript specification actually). I was intereested in how to build website with as less server as possible. And then SPA applications and Angularjs started to popup and to be a thing. I was like "damn.. some github, some npm whaaaat?! - okey, let's try". But that was those times that i switched to linux too, so it was kinda more easier i think - one more point here - Microsoft wasn't that company that is today and Windows was a lot bigger garbage (it still is, but is a lot lot better for developing). I installed Node, started to read some documentations here and there, then read tons of articles for Single Page Applications, built a few. And so on and so on. In that journey i just to found more and more interesting tools and things, and developers, started to follow them and as i always learn - reading raw source code, line by line, logic by logic,m connections between the tons of dependencies and packages. And just started to do some things that i need - package for this, package for that. Aside of source code, i always read tons of things too - now, pretty late ;/ had started a list of links for everything - https://github.com/olstenlarck/resources. Huge collection from everyday read and watch. So... read code and have some idea what you want to build. And most importantly - create things. Write as much as possible. Some great source code you can find by https://github.com/kentcdodds https://github.com/jonschlinkert https://github.com/doowb
Others have spoken about test running, I'm going to give you a _very_ specific reason why we wrote something like this: our backend is behind 30k vpns and then some tunneling, sometimes (most of the times) the connection sucks ass (ours and theirs) so we use it to mimic contracts that are already established without the hassle of having to have a real backend on localhost :)
The for loop looks good. Where are you trying to use x though?
&gt;Https://github.com/ncd2dq/jungle\_run\_js *No description, website, or topics provided.* Not much of a chance to get a good review here... :\-) 
x is meant to say this Year 1 1000 Year 2 1050 Year 3 1102.5 I did play with it and I don't think the 'for' loop is correct, look at the outcome of the code, i changed it a little. \&lt;p id="demo"\&gt;\&lt;/p\&gt; \&lt;script\&gt; var text = ""; var i = 1000; while (i \&lt; 105000) { for (var x=1; x\&lt;i; x\+\+) { } text \+= "\&lt;br\&gt;Year " \+ x \+ " " \+ i; i = i \+ (i \* 5/100); } document.getElementById("demo").innerHTML = text; \&lt;/script\&gt;
React-Native does not compile JS to native code. RN includes a JS runtime for the respective environment! It has additional native modules that you can call from JS and you can write your own native modules, but they are not portable.
You could do something like this: &lt;p id="demo"&gt;&lt;/p&gt; &lt;script&gt; var text = ""; for(let i = 1000, x=1; i &lt; 105000; i += i*5/100) { text += "&lt;br&gt;Year " + x + " " + i; x++; } document.getElementById("demo").innerHTML = text; &lt;/script&gt;
Yeah but I'm trying to use the 'while' loop because I'm doing revision for an exam I have tomorrow. I have a revision sheet and it tells me to find out how many years it would take for $1000 to get to $1000000 with a 5% compound interest rate use a 'while' loop. I can understand the 'for' loop and see what you did and understand how it works but I'm prepping for the Exam. No offence, thanks for the suggestion though.
Alright guys I fixed it thanks for your help but it seemed that I didn't need a 'for' loop, just needed 2 extra variables. This is the Code. \&lt;p id="demo"\&gt;\&lt;/p\&gt; \&lt;script\&gt; var text = ""; var i = 1000; var y = 1 while (i \&lt; 105000) { var x = y\+\+ text \+= "\&lt;br\&gt;Year " \+ x \+ " " \+ i; i = i \+ (i \* 5/100); } document.getElementById("demo").innerHTML = text; \&lt;/script\&gt;
You could do it like that then: &lt;p id="demo"&gt;&lt;/p&gt; &lt;script&gt; var text = ""; let i = 1; while( 1000 * Math.pow(1.05, i) &lt; 1000000 ) { text += "&lt;br&gt;Year " + i + " " + 1000 * Math.pow(1.05, i); i++; } document.getElementById("demo").innerHTML = text; &lt;/script&gt;
No man, thank you. You are the best and clearest resource for advanced JS topics. You've helped me a ton.
Seems similar to http://wiremock.org
Not to be confused with http://www.thepollyproject.org
Thanks for the reply, I agree, when i've got the time i'll get to it.
&gt; but there was some naming conflicts in the JS space Are there actually any words left that aren't being used by a JS library already? :D
&gt;In my experience, there’s no casual mode within React. You need to be all-in, keeping up with the ecosystem, or else your knowledge evaporates. Yeah... It's pretty clear you don't have much experience with it. This is definitely an article written by someone outside looking in.
Yeah indeed I do not have that much exp. I just shared this!
IMHO this is one of the best languages to start learning, because of its requirements for you to get something coded and see result. It works in any web browser, so to execute javascript \-\- you need web browser. To write it \-\- you need editor (Notepad is fine, until you feel need in better editor). To try something right now, you can do next: \- go to [https://codepen.io/pen/](https://codepen.io/pen/) \- click Console at very bottom left (this will reveal console pane) \- type some code into JS pane, for example: &gt;`var a = 100;` &gt; &gt;`var b = 250;` &gt; &gt;`console.log('result', a + b);` Console pane will get: &gt;"result" 350 You can learn/try basics of JavaScript there.
Well the author doesn't. An easy and quick way to tell if someone has actually spent a reasonable amount of time with it before bitching about it, is whether or not they complain about JSX or not. JSX shock lasts a week at most. There are valid criticisms of the framework, but they almost never come from anyone bitching about JSX.
From React Context Docs: &gt;Don’t use context just to avoid passing props a few levels down. Stick to cases where the same data needs to be accessed in many components at multiple levels.
Hey guys. I just recently published the plugin I've always wanted to use, but the API wasn't there yet until 0.60. You can go download it. It's called [gulp\-plugin\-notify](https://www.npmjs.com/package/rollup-plugin-notify). I only tested it on Windows so let me know if it doesn't work on your platform.
Thank you!! I added a description to my comment. What do you mean by no website or topics? 
Idea is assign animation to each letter separately. &gt;`$('#quotes').fadeOut("slow", function() {` &gt; &gt; `var html = '';` &gt; &gt; `for (var i = 0; i &lt; rand.length; ++i) {` &gt; &gt;`html += '&lt;span style="display: none;"&gt;' + rand[i] + '&lt;/span&gt;';` &gt; &gt; `}` &gt; &gt; `$('#quotes').html(html);` &gt; &gt; `$('#quotes').show();` &gt; &gt; `$('#quotes span').each(` &gt; &gt;`(i, e) =&gt; setTimeout(` &gt; &gt;`() =&gt; $(e).fadeIn("slow"), i * 25` &gt; &gt;`)` &gt; &gt; `)` &gt; &gt;`});` Result can be seen here \-\- [https://codepen.io/greenya/pen/JZyWQy](https://codepen.io/greenya/pen/JZyWQy) Increase "25" to slowdown speed of appearing the letters.
&gt;https://codepen.io/greenya/pen/JZyWQy Super cool! I'll also try your way. I just found a library, that does the same: [http://tobiasahlin.com/moving\-letters/#](http://tobiasahlin.com/moving-letters/#) but it doesn't read the dots and comma's which is weird : my pen [https://codepen.io/Naoimmaria/pen/VdzbNO](https://codepen.io/Naoimmaria/pen/VdzbNO) 
Yeah I don't get it either. It's like the community prefers reading the juicy stuff rather than really being knowledgeable on things.
I'm looking for a library to record and replay interactions. But a bit smart as the system we use the html IDs change for some funky csrf handling. Anyone know something i could use?
Not sure about 'angles'. About 'more letters at the same time': The code which defines animation to each letter is: (i, e) =&gt; setTimeout( () =&gt; $(e).fadeIn("slow"), i * 25 ) You can change it to more sophisticated algorithm. For example try `i * 25` replace with `i * (i % 2 === 1 ? 50 : 25)` \-\- you'll get some fancy animation. Where `i` is an index of the current letter. If you need to do word\-by\-word animation, you need to change SPAN generation, meaning to generate each word in own SPAN (not each letter). Just come up with what you think would be best and approach it :D
At my workplace we have a ror stack, so we use react without webpack(with just Babel-cli) and it works great
Strongest reason to switch to an editor is that a linter on any modern editor is extremely helpful when trying to understand what you are doing wrong and what you could be doing better (in terms of syntax). 
Yep. Parcel works great too. I use Webpack lots outside of my React apps frequently. I think that statement shows the author not only doesn't understand React very well, but also the tools that most developers use. If he's able to churn out articles like this, with such little understanding of what he's ranting about, I don't think someone like this is someone anyone should follow for any topic.
Why not just write the code to delete the file?
I need to execute this command from my front (when the audio file is done playing). So I create a route just to delete the file? Isn't it dirty?
There were indeed a an instance where there where an otherwise sensible PR was rejected due to it conflicting with Facebook internal tooling. I think it was about uuid.
What? The MDN website is the best JS documentation out there. https://developer.mozilla.org/en-US/
I'm a big fan of doing the simplest, most direct thing so that the code is predictable and easy to understand. If you find a way to mark files are temporary, are you hoping the operating system will clean them up automatically? My concern would be that the cleanup could happen while a user is downloading the file. It's very unlikely, but why addd the uncertainty. Do you have the option of steaming the file directly from the API back to the user? Then you wouldn't need to store a file on your server at all. Node steams can be piped together, and most of the `reply`/`response` implementations can accept a stream.
The release of [React XP](https://microsoft.github.io/reactxp/) was a prerequisite for OSX support. I was honestly surprised at that release due to how much effort Microsoft had put into React-Native-Windows. Development of React XP might've been a result of react-native-windows not becoming a first-class platform of react-native nor android and iOS becoming proper plugins of react-native. The linux community has had ample time to develop a proper react-native plugins using QT, GTK, wxWindows, X.org which would make a linux version of office rather trivial to create (as in requiring a few full-time engineers instead of a dozen or more).
After reading "scopes and `this`", it's unfortunate that the scope rules are obscure, but not using arrow functions **definitely** has it's very powerful use cases. Using arrow functions is just the new, more sensible default case.
The main argument is unit tests should be isolated to the unit they are testing. You don't want your unit tests to fail because "test didn't have the right version deployed" because the purpose of the unit test is to say "this one unit works". Expanding on the CI pipeline part of this, you don't want your pipeline to fail foe the same reasons. Integration/functional tests may hit the real api, but you constrain the amount of tests you write at that level compared to the unit level because they are harder to maintain, take longer to run, and are flakier. They do give you more confidence in the end product actually working though, so you shouldn't skip them. I think an argument could be made that if you had to choose one level of testing for your app, integration/functional would be the most important since it actually tests all the integration points (where bugs are most likely to come from).
I like the fact that big companies are supporting open source projects nowadays, unlike before..
They're using React Native for Windows, so it's exactly the same in this case. :) Microsoft also has a project called ReactXP that lets you take React native code and run it as a web app with very few changes. They basically added HTML versions of View and other core RN components. 
I was coming here to mention [https://github.com/vcr/vcr](https://github.com/vcr/vcr) as well! I've used it in a past project and loved it. I think the pitfall of any HTTP recording is that you tend to make some recordings and test against *just those recordings.* So the pitfall would be a failure on behalf of the tester to get a variety of recordings, not the lib itself. You need to test successful responses, failed responses, and everything in between. Not just the happy path. It's also wise to version your API as /u/nudelkopp mentioned otherwise you will have to trash your old recordings when you make API changes and re\-record. I respectfully disagree with the statement that "It sounds like a good idea but it isn't." This is a very powerful and useful tool for integration testing. It will save you a ton of time.
Nothing like having a conversation on reddit with somebody who you look up to professionally, and then remembering what your username is. 
It happens and it still makes me laugh. But nothing will top getting most of the top Reddit brass in a thread [congratulating their new CTO](https://www.reddit.com/r/technology/comments/3hgni3/reddit_names_marty_weiner_founding_engineer_at).
I'd be interested in seeing an example of how you'd achieve this before the context API existed. The example is simple enough to follow, but it doesn't illustrate what benefit I'm gaining by switching to this method
Ther's no license at all anywhere (repo, site). It would be a good idea to add one, particularly since you mentioned: &gt; (hooray FOSS)
Hey, that's really cool! Your solution certainly looks a lot slimmer! But yeah, I needed to keep the brackets. And thanks for the Github star! First one I've received for an actual project! :D
Just another post about a tool that everyone is like "ooh, sophisticated!" but nobody will really use for anything significant. That,s like half this subreddit.
Get that dirty strongly typed language out of here! /s
Thank goodness for const, the plague of reasigments is at an end!
This nails one of the biggest reasons I love Vue. The learning curve is super shallow, it has a well-designed DSL and simple mechanisms for doing just about anything. The templating being closer to regular HTML makes it much easier to adapt normal front end code than React's JSX, and it is much less of a headache to deal with than Angular. Just my two cents, I'm clearly a fanboy but I'm quite fond of this framework.
It totally depends on how and why you were using Redux in the first place. Please see this article I wrote that discusses how the new context API relates to Redux: [Redux - Not Dead Yet!](http://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/)
Complex? Sure. Check Google Apps like: Google Sheets, Google Calendar, Google Mail, Google Drive etc. This is all running in browser which executes javascript, tons of it.
I agree. My guiding principle for JavaScript that has served me well is that I need to continue to deepen my knowledge and stay sharp on fundamental functional JS. Frameworks come and go. The ‘current’ knowledge is not knowledge it is just technical know how. If my knowledge of a library is stale I can usually catch up over the course of two days to a week by reading the updated docs. The sole exception would probably be a dramatic rewrite such as Angular. However even with that, functional JS was the glue that tied the different steps together.
Maybe just redo into something like: // first, define offset (assuming at least some offset is not 0) var offset = offsetX; if (offset == 0) { offset = offsetY; } if (offset == 0) { offset = offsetZ; } // second, we loop for (var i = x1; i &lt;= x2; i += offset) { // do things } This way you have some sort of code structure with specific small tasks (e.g. "define offset", "do loop").
I'm confident that senior engineers will have no problems with VCR, but most large companies have mostly junior engineers, and VCR seems to give them enough rope to hang the entire project. In our large company, when working with specs that don't use VCR: we make our changes to the spec, make changes to the code to have the spec pass, and then it's off to code review and QA. We can do multiple fixes per day on specs that don't use VCR. When working with specs that use VCR, the library itself gets in the way. What would have been a simple enhancement is now an exercise in debugging why VCR is failing, \*how\* to get it to pass, and how to avoid breaking other tests while doing the refactor. For junior engineers, the abstraction comes at the cost of understanding what they're doing. They struggle to understand why it's not working, and how to make it work again. It's for this reason that I don't suggest VCR for larger companies with a higher ratio of junior engineers.
It's cheaper and essentially the same thing as opening a campus, on a smaller scale. Big companies open campuses to teach and train new engineers and developers all the time. Apple, Google, they all have them. What they're primarily for is training and recruiting people specially for your company. Costs a little bit to stock the lake, but they get much bigger fish this way, so to speak. With Open Source, it's the same concept, only with this they can look at pull requests and community interaction and then approach the people they want to to offer them jobs. And it costs them a ton less money because it's all digital, not property and campuses. 
\&gt; The name came from the idea of a parrot repeating what you tell it, thus “Polly”. that's pretty great
of course not
😘
Why you even compare these things? They are not related.
Plus you don't have to wait for the damn API respond back.
I want to love typescript... 
I'm not sure that would help. If package A uses lodash 1.0.0 and package B uses lodash 1.0.1, and neither of them accept a range, I don't see any way to make them both share a common version. This is why ranges are so useful.
That is possible. But I think the ecosystem has proven that that's not a huge problem. Think about how many dependencies a typical node_modules folder contains. How often have you run into this problem? I'm not saying it doesn't happen ever, I'm saying the frequency that it does happen is so low that the benefits of using version ranges far outweigh this possible downside.
I've tried changing score \+ 1; too score\+\+; but it messes up the program BTW this is on CODEHS.
In compChoice, you need to explicitly run compRand() and store the result in a variable to pass to compare. Also, the compare function is not doing what it says it does. Either rename the function to be more descriptive, or remove the scoring and printing, because scoring and printing have nothing to do with "compare".
JS.js?
It just as explicitly mentions VSCode, which is definitely written in Typescript.
Im using CodeHS and they have a custom Javascript language, but how exactly would I pass compRand(); to compChoice?
I've never built an extension and I'm a total noob with Node right now but if I can't get it to work I'll start researching. I'm gonna try creating a static page and open the webpages in a div. That should allow the js to persist but may cause some weird issues with the actual site.
You'll want to use the [Places API](https://developers.google.com/places/web-service/intro), specifically the Place Search endpoint.
Ah you're welcome! I'm glad to hear you like it.
Wow. It's about time something like this came into existence. This is the kind of testing we need.
Probably like var user_throw = readLine("Rock, paper or scissors? "); var comp_throw = ["Rock", "Paper", "Scissors"][compRand()]; compare(user_throw, comp_throw); and get rid of the entire if/else block, you already have that in `compare`.
what would be the use case for using this in an ember app over something ember\-cli\-mirage or ember\-data\-factory\-guy?
Haven't read your code, but in JS functions are first class and you can pass them around like any other object/variable/hot-potato.
[http://node.green](http://node.green) does something similar.
how'd i miss this? got one added, thank you!
Still, It won't return a navigation if I ask for one place. 
Is it like mocking with sinon.js but more automated? 
Cool sheet, but what the heck is going on with your white spaces in some? Is this some formatting I'm not aware of? Some operators have two white spaces each side, some a double white space one side (those two sets overlap with no consistency that I can discern), some just the one white space. &amp;nbsp; I am confused. 
Try ‘score = score + 1;’
Yesssss.... "Here’s the gotcha, though: in terms of consulting opportunities, React is far and away the more popular of the two frameworks in my major metropolis. So, while I think Vue is the superior framework, React has market share. There is considerable financial incentive to learn what feels like the worse of two similar solutions." 100% agree.. I'm in the same boat. I have been writing a large app in Vue.js and it's absolutely a breeze... and fun. Vue is definitely a "best of breed" framework, but React has the market cornered... Angular is dying.. unless you want to maintain old/legacy Angular 1 apps... no thanks!
Exactly!
I'd suggest you to write your own code without using any libraries or frameworks. People may think that extensions are downloaded once and their code is stored offline, this is true, but all that code still needs to run and takes up enough memory space of the user that it is equivalent to having a new tab open in you window all the time. So just keep it simple, because it is a Web extension and not a whole website.
JSX is fine, because you need to store all of your markup somewhere and that place is your JS itself (in case of extensions). But bringing whole of React and ReactDOM along with it just so you could would just be a pain later.
One nice thing Polly introduces is the idea of expiring a recording after a certain time. You can make Polly automatically record a new response after, say, 2 weeks, so that you aren’t writing tests against a really stale API payload. Coupled with the ability to fail in CI if you need to make a recording, this can allow you to ensure you’re making new recordings locally on a frequent basis. Of course, you can always get out of date by never running your tests but Polly tries it’s best to help with this. 
Nice explanation !!
How about: function decToBin(input) { let remaining = input; const output = []; while (remaining) { output.push(remaining % 2); remaining = Math.floor(remaining / 2); } return output.reverse().join(''); } I think I wouldn't grade your string based solution very highly, if I'm honest. Sorry :(
you're not gonna get the job :P 
fyi, use 4 spaces before each line to make reddit format as code for better readability
Double equality symbols? You are brave.
Triple, look again
Would you call it Jest for APIs?
Huh. Weird. I think the app I'm using has some sort of weird formatting issue. I'm only seeing double :/
Hey, you made a pretty good attempt. It brings up questions about what the job was that you were interviewing for and how relevant hardcore mathematics skills are for it. There’s probably more elegant solutions, like ... there had **better** be more elegant solutions, it seems like this is something someone should have worked on by now, which brings us to the difference between an engineer and a physicist.
I think you are seeing what we are seeing, which is '!=='. This is the negative equivalent of '==='. '==' negated is '!='. So while are only seeing two '=' symbols, people will think of it as a triple-equals operator. If that makes any sense.
Exclamation point equals sign equals sign is triple(not)
You can't open webpages in a `&lt;div&gt;`. You could open them in an `&lt;iframe&gt;`, but then your Javascript will not have access to the contents of that `&lt;iframe&gt;`.
&gt; Probably a great library, but why use the name Polly? There is already an library for .net that has that name, ... I mean, unless Netflix's Polly is also written for Microsoft's .NET platform, who cares?
You say you've installed the client have you got a running mongo server? Mongod is to start the server not always included in the client install
 function decToBin(input) { if ( input &gt; 2 ) { decToBin(input/2); } return (input % 2); } 
You are correct. After actually assessing his code, i noticed the prefaced exclamation mark.
You are correct. Didn't notice the exclamation marks when skimming his code.
I'm not sure I understand. Integers can't be decimals. Integers are by definition whole numbers. 
Your solution is really clever. I would neither grade an algorithm that literally brute force binaries! :)
Many times they're not looking for the perfect solution, especially when there's arbitrary restrictions. They're just trying to see if you can think on your feet and communicate your idea. Your code is definitely rough, but you came up with something, and hopefully can explain why it works.
Hahahaha! I don't expect much from a binary integer brute forcing algorithm!
 const isOdd = require("is-odd"); function decToBin(input) { let remaining = input; const output = []; while (remaining) { let bit = isOdd(remaining) ? 1 : 0; output.push(bit); remaining = Math.floor(remaining / 2); } return output.reverse().join(''); } /s
You should do absolutely none of these things and instead just use a [Content-Security-Policy](https://en.wikipedia.org/wiki/Content_Security_Policy) header.
Does not work...
Yes, but a decimal integer is a base 10 integer, while a binary integer is a base 2 integer...
TIL
https://eloquentjavascript.net/
Its not and never be that straight forward to install mongodb in dev. follow the below: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/
Hi there! JS is not reactive natively as you don't have primitives such as Observables in the default spec, still, we're slowly going towards that with proposals as such: https://github.com/tc39/proposal-observable As for now, you will have to either code your Observer pattern (which I don't recommend unless it's for educational purposes) or use a library such as RxJS (https://github.com/ReactiveX/rxjs). RxJs is not vanilla JS but is still on a lower abstraction level compared to a view layer such as Vue.js. It doesn't care about rendering anything; its sole purpose is stream (async events) management. It means that Vue.js could be built on top of such a library. There are neat free courses on RxJS such as this one: https://egghead.io/courses/asynchronous-programming-the-end-of-the-loop Also, their documentation and examples are really thorough; you can check it out here: https://www.learnrxjs.io/ Cheers
Don’t you think Reddit should have better formatting for code? #80charsOrBust ?
Webpack should be able to handle most, if not all gulp tasks. Of course, you can also use Webpack within gulp. I think it mostly comes down to preference. I personally use Gulp because that's what I started with, and at this point I've got it dialed in to where I like it. Maybe in the future I'll pick up a completely webpack-based automation system.
There is no programmatic difference between the two. They are just styles. In my experience, ALL_CAPS variables are for variables that represent constant primitives. For example, `HOURS_IN_A_DAY` equals `24`, while `hoursSinceBreakfast` is variable (even if `const`).
`const` as a keyword is used differently in Javascript so you'll often see it without ALL_CAPS. `const` implies that the value will not be repointed, not that the data will be an immutable constant value. So for example you may have: ``` const myArr = []; myArr.push(1); ``` In this case using ALL_CAPS for anything defined as constant starts to lose its value and meaning because you use constants to indicate any value that won't have its value redefined, not that the value will never ever change. These may appear in classes or in functions. What you will still see are constants that serve as aliases for magic numbers or string values will still use the ALL_CAPS style of naming so: `const MAX_NUMBER_PER_PAGE = 20`
Bleh, there's already a library named Polly: https://github.com/App-vNext/Polly It's a different language, and serves a different purpose, but does relate to HTTP and has over 4k stars on gitub.
Why have I been downvoted... just test the code it always returns 1...
the function works. i guess you're not calling it correctly :P maybe change the return to a print or console.log if you can't get it to work
works for me
It's a convention held over from design practices in other languages. Prior to `const` there was only `var` so capitalization was the only way you could communicate a variable should never be reassigned. Now, I capitalize when there is a variable which should never be reassigned, is not relative, and will never change in the future. `const SSN = 123-45-6789` `const CREATED_ON = 312314123` `const PI = 3.14`
I only use it for configuration or mathematical variables. const in JS allows the V8 engine to better optimize at compile time. JS also happens to be a functional language where functions are first class citizens, where they will appear in function parameter and assigned to variables. You can imagine how weird that’ll look if we capitalize all functions. But still, we want the v8 compiler to know that we will never reassign a certain variable to another function, so we should still use const
Generate a Google Maps URL, don't use the API.
I guess I'm a little lost. I have MongoDB Compass installed and I'm connected, I am mainly using it to look around the UI and understand the different collections. My main goal is to alter some server data using JavaScript. I'm following the instructions to initiate a connection [here](http://mongodb.github.io/node-mongodb-native/2.2/tutorials/connect/). But if I didn't install correctly, no wonder I'm getting nowhere...
Can't use built-in/native methods which have existed for decades in an interview question = stupid question.
Marking single-assignment local variables `const` also makes your program easier to understand for humans.
try this? function decToBin(digit) { if(digit &gt;= 1) { if (digit % 2) { return decimalToBinary((digit - 1) / 2) + 1; } else { return decimalToBinary(digit / 2) + 0; } } else { return ''; } } 
This blog post is about blocking temporarily third party scripts, then unblocking them at a later time. It is especially useful for tracking scripts (for example google analytics) if you want to load the part that collects data locally into a buffer ahead of time, but defer the part which fetches the script that actually upload the data at a later time. All this is explained in the blog post. AFAIK the content security policy header is used for completely different purposes.
I found this stack overflow page useful for CSP info, https://stackoverflow.com/questions/30280370/how-does-content-security-policy-work
Unless, of course, you’re also including is-even 
nativeJs.js
It existed since forever.
Interesting. While doing research, I kept coming across Microsoft's RX.js and design patterns, but wasn't sure as to why. Would you say studying design patterns and/or learning RX.js would make me suitable for a front-end role, even without a framework to rely on?
Yours work perfectly fine!
I get that : https://i.imgur.com/24m3h91.png Pretty odd...
Thanks!!
Thank you
Your post was the most helpful... thanks a bunch. That makes sense. Use const unless I will be specifically repointing that variable, then I would use let. I think I see when to use capitals now as well... appreciate it!
Thanks
I'd ask if we need to take into account negative numbers in the way to encode. Let's assume no to stay in a simple case. Then, I'll also ask if Math.log2() is authorized. Introduced in ES6, Math.floor(Math.log2(n)) would directly give you the max power of 2 in your number. Let's assume no Math.log2. My first step would be to reverse-build an array with all the powers of 2 that are less than or equal to your number. function toBinaryString(n) { let powers = [0]; let currentValue = 2; while(currentValue &lt;= n) { powers.unshift(currentValue); currentValue = currentValue * 2;} //now let's transform this array of powers in an array of binary digits let bits = powers.map(val =&gt; {if(val===0) {return n;} if(n-val &gt;= 0) {n=n-val;return 1;} return 0 }); //and return our binary number return bits.join('');} (not tested and badly formatted, I'm typing on my phone, but you should see the idea) I don't know what the assessor wanted to test from you, but if no precision given, all the questions I asked at the beginning were likely expected, to see if you look for the limits of your inputs. Additional ones, like output format or max input size, could have been expected too. 
Could they not have extended existing solutions that are out there? https://github.com/holidayextras/truman
And one of my co workers wrote https://github.com/holidayextras/truman We are all flocking around the same problems
I’ve never used Jest, so... no
Notes: goal of this solution is for you to show that you understand that expressing a number in a base is working with powers of the base, plus some showing off with language features around arrays. I don't know the complete js base lib but if asked to display some math skills, I guess you would have a way to code any logarithm from methods in Math. 
While kind of true, it's also not a stupid question. Most interview questions aren't about seeing your answer, but rather seeing *how you handle* the question, or how you get to the answer. 
It’s not clever at all ... it’s straightforward and readable and correct. 
 function tobin(input) { let bin = [] let p = 1 while(p&lt;=input) p*=2 while(p!=1) { p=p/2 const el = (input&gt;=p)*1 bin.push(el) if(el) input -=p } return bin } 
You're right, but when compared to mine his solution seems really clever...
You're correct. There's no return on line 3, so the function does a bunch of recursive calls, throws all of that work away, and then returns the original input mod 2. &gt; it always returns 1 For odd inputs. It returns 0 for even inputs.
Ohhhh true!
Does this till apply also if the book is quite old?
I think you're both right. But, I'm the kind of person that would have trouble getting past the bullshittery of the question and smugly fail out of the interview lol
What is it supposed to do? Convert 1.4 to 1 or something?
Thank you! I guess I could write my own absolutely positioned dialog, considering jQuery UI is ~250KB minified and probably has significant load time. But then I found myself in need of more UI features like buttons, flashing animations, etc. I could stick to jQuery UI for fast prototyping, then switch to custom code later.
No, decimal to binary
Is that interview for spacex?
Hahaha, no, just a shitty local company asking questions I'm too dumb to properly answer...
Did you do any Computer Science course? The problem is basic comp-sci and /u/wibblymat solution is taught in basic computer science course.
Fuck that interview question.
No you are okey, but the issue is in that company that asks about stuff they never imagined to implement.
No, I'm a freelancing junior. But when I'll get enough money, I'd like to get a degree...
It's actually a basic base conversion algorithm the same basic code can convert to any base by changing the "2" to your desired base. I just had an interview code exercise to convert to base 9, and to be honest I had to look up the algorithm.
your solution works (even though i have no idea how it works!), not the best/elegant solution but it works. I think problems like this, it helps having a compsci degree, but in the real world (in most cases) you won't be doing these kinds of problems. Good luck on the job and degree 
Thank you so much! PS. It works by brute forcing binary numbers (binary numbers appear in order in the decimal system [0,1,10,11,100,101,110,111,1000,1001,1010,1011,1110,1111...])
I use all caps for global variables. 
That is a different API: https://developers.google.com/maps/documentation/directions/intro You use the Places API to find the address/location/coordinates, then use that location data to call the Directions API.
Nonsense. const odd = require('is-odd'); const { compose, complement } = require('ramda'); const even = compose(complement, odd); 
Oh like 1.4 to 1000110101 or whatever.
Well 1.4 is a float
Looks cool. I didn't know about it !
Oooops, I'll definitely fix it and reupload it soon :)
We do something similar. Anything declared `const` in global / module scope is uppercase, anything in a lower scope is lower camel case. 
Sooo - Because it can be learned fast?
Keep at it, I’d recommend reading about big endian and little endian systems, how floats are stored, how ALUs work, and a bunch of other nitty gritty low level stuff. Just to gather more intuition on low level stuff like this.
[removed]
I disagree, it's a very stupid question for an interview. Ask relevant and real-world questions in an interview situation. You'll get the same end result by them working through it. Not being able to use several options built-in to the language in question is just a douchebag move by the interviewer. There's a fair chance it just feeds his possible superiority complex.
Talk to Google about their questions. They are renowned for ridiculously complex questions. And as we all know, they tend to hire people who really, really know their shit. &gt; There's a fair chance it just feeds his possible superiority complex. There's a fair chance you're projecting.
I'm the same way. The last time someone asked me this I just googled stackoverflow on my phone and wrote out the answer. They complained. And I replied, "I'm not here for the junior developer. Don't waste my time."
&gt;For example, HOURS\_IN\_A\_DAY equals 24 Well, most days :)
If I were to ask a question like this in an interview, I’m more interested in how you got to your solution. I want to see how you think through a problem. If you just write down a solution it doesn’t really tell me anything. Show your work, ask questions, work with the interviewer. Then you are showing how well you work with team members and solve problems. If you do those things then any satisfactory solution in a limited amount of time would be ok. I then might ask follow up questions on how you could improve or optimize the code. A really good interview should be a two way conversation between the interviewers and interviewee. We want to make sure you have the functional skills to do the job, but candidates need to show that they are also the right fit for the job and the team. 
I agree with this answer. Personally for me, I use \`const\` whenever I have a variable that I'm not changing the value of.
 function toBinary (num) { if (num === 1 || num === 0) return num.toString() return toBinary(Math.floor(num / 2)) + (num % 2) }
current earth days
I mean the offline version 
Fwiw this yields "" for 0 and doesn't handle negatives. Not that a sane interviewer should consider that a big deal. 
DST. In many parts of the world, there is a day with 23 hours in the spring and 25 hours in the fall each year.
Fwiw, didn't get the crazy brain teaser questions when I interviewed (and afaik they've stopped doing that shit). Pretty easy algorithmic questions - cracking the coding challenge and data structures 101 questions. 
You could try these: https://kapeli.com/mdn_offline
Fwiw never encountered this when doing my bs/ms. But I'd hope anyone coming out of that program could do this.
thanks 
Skim an intro cs textbook (it'll cover binary) and skim through the slides of a data structures course. Easy 2 days of investment but definitely worthwhile.
Why not do this recursive? Just be checking if its odd or not stop when equals 1 and return revers binairy, ill upload an example tomorrow
I wonder how it compares to the five year old Mountebank - https://mbtest.org
I don’t do that though, I mean global variables when you don’t put var const or let. I don’t think it’s useful to do it with consts since you cant reassign them anyway
I will! Thank you
I wish my interview had been like that, but the interviewer left the room right after giving me the question...
Use Recursion! If you do not know how to do recursion, learn it. Because once you get the hang of it, it makes your life easier and it really impresses the interviewer! function decToBinary(number, output){ if(number &lt;= 1){ return output.reverse().join(''); } else{ output.push(number % 2); return decToBinary(Math.floor(number / 2), output); } }
I absolutely suck at these type of questions. My brain also flies out of my head when I'm put on the spot like this. The last interview I went to, they brought me in because they liked my example code and github and I answered some fairly gotcha questions about React/Javascript but when I got in the guy gave me this off-the-wall puzzle type of question. My brain left my body and I put on my jacket and grabbed my laptop bag and walked out. 
I think Typescript really shines when paired with a proper IDE. Running typescript with Webstorm is the bees knees. It gives you all the parmeters, their types etc. So you get autosuggested and typeahead completion. It feels like writing compiled code, yet I can still override whenever I feel like it. Also, I find typing just makes things easier, especially when you are not the sole developer. I think Visual Studios probably works well too but I can't speak from experience. 
Like anything else, there's a learning curve to TS. It's very possible those wtf-class errors might be actual problems if you let them through, or maybe the type definitions are not right even though it's possible to stumble through eliminating any errors (e.g., just using `any` for everything).
It's absolutely imperative that you join a team with the same ideals as yourself. Typescript is, imo, the direct result of non-Javascript developers trying to bring aspects of other languages to Javascript to try and make it more familiar/understandable to them. I would never join a group of developers who used Typescript... but I would likely join you :)
function decToBin(input) { let bits = ""; do { const bit = input % 2; if(bit) { input -= bit; } bits = bit + bits; } while(input = (input / 2)); return bits; }
Maybe post some common errors you've seen and we'll try to help?
What's the difference?
Float : 1.6, 1.7, 9.89, etc. Integer: whole number (1,8,9)
&gt;I would never join a group of developers who used Typescript... but I would likely join you :) Sure! (づ｡◕‿‿◕｡)づ
I'd have to give Webstorm a shot then. If I recall there's a trial version.
I think the reason is that in JS unlike Java and C# it's common practice to use a constant for everything unless you absolutely have to use let. I think it would be better to use capitalization for variables that can change but i think that would be confusing for devs coming from other languages. 
I will reply the next time it happens.
No shitting lol. I think my brain would suddenly decide to shutdown if I'm OP
It looks like they're just trying to be smartasses at this point.
As someone doing a computer science course, I honestly don't think everyone's right about you needing one, especially for questions like this. The key is to start reading books based on compsci and computer architecture and algorithms as a whole instead of targetting your language. It's pretty arduous but it'll make you a better developer for sure. Granted, a degree will teach you all these things but I'm finding it to be really overhyped if you've done any previous programming. 
For that better ask other problems like the conway's game of life, they do not measure you as one glorious math genious but they really shows your strengths or oportunity areas as a developer.
Unexpected: music and visual art. Currently building synthesizers, sequencers, samplers, effects, with just vanilia js. It sounds very good. Require a deep ~~tekno music~~ musical background beside js\^ ;)
Actually your code is a little bit but do not worry about it, learning standards of coding is done via pull requests or good performance reviews. This question should be about how you approach and communicate a problem resolution, not how to code it. If they really mind about your code maybe they were just looking for ultra rockstar developer who code in 3 hours the things that you could do in 10, if not then just go normally.
I'm pretty sure it's a direct result of needing type safety on projects that become increasingly complex. 
Strongly typed languages are a trade off between now and the future as in it's a pain in the ass when initially starting a project, but reduces complexity as the project grows since it's self documenting and tells you what parameters it takes and what it will return. 
The problem with this is that you're almost at the same point with just modern ES6 with imports in IntelliJ. The difference seems marginal compared to the effort
&gt; **or even bitwise operators was forbidden.** Do you have an option "screw them all" ?
The reason JavaScript is so popular with new devs is that there are no compiler errors. They just hack it until it works. Compiler errors are a huge deterrent for new devs, so avoiding them at first makes getting started much less aggravating. For old devs we usually don’t get compiler errors on purpose. And when we do it’s always like duh. Also more experienced devs are constantly refactoring. That’s where the usefulness of a compiler really comes out.
where do you declare x ?
You should typescript with Visual Studio Code - it's really amazing with it
TypeScript isn't about being about to write better in the beginning. It's about preventing you from hanging yourself
Would you rather have "silly" errors during development, or insanity-inducing errors in production?
TypeScript is fine. JavaScript is fine. Avoiding talented coworkers because of zealotry over a tool is on the short list of dumbest career moves you can make. 
Recursion is not always a good solution. It produce a huge amount of stacks and scopes, and debugging can become a burden.
This is really awesome, JavaScript powering AR is not something I'd expect 
And of course the occasional leap second.
Second this. My learning of typescript has been greatly supplemented by vs code. 
you left? shoulda just told them you didn't know, or ask questions, they might have given you hints or even the job without answering the question
don't do any of those things unless you're actually going to be dealing with such low level software to care about them. focus more on what you'll actually be doing and working on
I love es6 in Intellij, and the jsdoc functionality helps a lot to highlight possible bugs, but I wouldn't say it's the same as static-type checking (at least in my experience). Also, not everyone uses Intellij so they might not get the nice "possibly a bug" highlighting that comes with it.
Yes you're absolutely right! However, displaying good knowledge in recursion shows the interviewer how advanced you are as a programmer. (Some interviewers ask you to use recursion)
I thought it was a good problem so I thought I'd give it a try. Here's my solution: const decToInteger = dec =&gt; { if (dec === 1) return '1'; if (dec &lt;= 0) return '0'; const digit = dec % 2; return decToInteger(Math.floor(dec / 2)) + digit; };
FWIW, numbers in JavaScript are neither decimals nor integers. They are double-precision floating point numbers that are entirely binary.
Everything in the book is still valid, and I believe a new edition with ES6 covered is either out or coming soon. 
Pretty sweet framework, using it for my small project. Looks beautiful. Are you planning on adding tables? Found it kinda strange to not find them in the docs. Great work though! Much appreciated. Such a breath of fresh air, away from Material and Bootstrap. 
The num.toString() is pretty clever. I didn't think of that
everything in a computer is entirely binary.
That's awesome. React is garbage.
This.
wow. uh, for starters, you could replace `-1!==a.indexOf("9")||-1!==a.indexOf("8")||-1!==a.indexOf("7")||-1!==a.indexOf("6")||-1!==a.indexOf("5")||-1!==a.indexOf("4")||-1!==a.indexOf("3")||-1!==a.indexOf("2")||i++;` with `/[^01]/.test(a)||i++;`
I forgot how to program and was having a panic attack. 
decimal integer meaning base ten. not decimal as in 1.234, etc. 
So... here’s where I fetch up... it does help, and it does get in the way. Typescript doesn’t understand an import? &gt; Add a `declare module ‘foo’;` Typescript won’t let me ask for that member: &gt; Cast `(foo as any).whatever();` Typescript won’t let me change types: &gt; `let foo: string = 1 as any;` Don’t be afraid to use `any` especially within a method or as a field, but don’t use it to be lazy. In my own experience I was also extremely frustrated by typescript initially. After a month or so it grew on me. Now I know the work arounds to most problems I encounter and it’s a pleasure to work with (nodejs &amp; react PWA). It has been a life saver as we now started major refactoring, so it’s probably saved me more time than it wasted on the initial learning curve. 
Doesn't work with negative integers.
Typescript shines when used in a group setting, when you refactor code, when paired with an IDE and when you’re consuming a well typed library. It’s especially helpful if you’re writing a library that others will consume. It doesn’t sound like a lot of that applied to your experience, so I’m not surprised you weren’t sold.
Looks like criticizing a tool/company/language is considered a sin. We need a new Renaissance.
Ah OK thanks!
It's so bad that Vue decided to use React Native for their native implementation
That project is a fucking mess. I looked at it the last few days, nothing works.
there are a few standard ways of telling TS to leave a statement alone if you know what you're doing. there is a learning curve, and you have to think about things you previously didn't. I think you get the most benefits when working on a large project with multiple folks. If you're the type who'd rather dip your toes into the pool rather than diving head first, I'd recommend using Visual Studio Code (or configure another editor to do the same javascript type checking stuff), then start adding `// @ts-check` at the top of your javascript files, and occasionally mouse over your function and variable names and see if the editor has good types/signatures to show for them. Then if you don't like seeing `any` on most types, start adding JSDoc documents to help things along. Then see what becomes red in your editor, and whether you can make the red go away by adding another JSDoc comment, or if it actually found a bug for you. If you're not in a hurry to fix it, you can leave it be, the little red squigglies will still be there next time you look at the source file, but your code will continue to run as before. If you find yourself developing a taste for being able to see types in your JS code, catch a whole lot of potential dumb mistakes, and you start wishing there were a less verbose way of doing what all those JSDoc comments do, then you'll know you're ready for typescript. 
I feel exactly as OP, I dropped Typescript because I was getting something I wasn't supposed to get (unfortunately I don't remember now what was it since it's been a while), and when I searched the internet for an answer, the only solution that came up was a ridiculous hack.
Your feeling is natural, and I had the same starting off. Still have it sometimes when you pair TS with react, redux and higher order components. But it's worth it in the long end. Don't be afraid to use **any** to get past errors that you don't get quite yet. Keep building and coding, you'll get better and better and stuff will click more.
I tend to agree . . . I mean it's obvious that the question is about problem solving and deboxed thinking, but there's better ways to get the same info . . . Like, oh, you know... ***talking*** to the person about challenges they faced and problems they solved.
If you're trying to write JavaScript but you have the TypeScript compiler running and you get errors, it literally means you're coding wrong.
...didn't anybody else do number bases in grade school? Wow
To be fair, it's literally grade school math (in my country at least) 
&gt; Not being able to use several options built-in to the language in question is just a douchebag move by the interviewer. Or it's a test of if you know what a number base is
[removed]
I feel like you are trolling with this post. Full disclosure, I'm a full stack .Net developer. So I'm using Visual Studio 2017, which has awesome TypeScript support. We use JQUery, KendoUI and Twitter Bootstrap 3. Our main web application is 15 years old. We LOVE TypeScript and do not write JavaScript anymore. The only problem we have had is that developers all have to have the same version of TypeScript installed and selected to use for compilation. If someone upgrades the compiler, everyone has to upgrade or it won't build sometimes. What IDE are you using? What are the weird errors you are getting?
This is one of the shorter, yet more useful, responses on this thread. Very rarely does typing result in something being a bug that would otherwise be okay. Much of the time, it reveals something deeply broken in your assumptions about how a codepath works. I once had to live with a codebase where occasionally something was a comma-separated string, other times it was an array, and many of the functions were written with an implicit `toString()` to reduce my array into a comma-separated string. It was passed around inside a mongodb, sometimes as an array and other times embedded deep in a nested object. It would get serialized to the frontend into json, where sometimes the client would have a string and sometimes an array. Methods that existed on both `String` and `Array` would run (like `includes`), and _sometimes_ give the correct result if it just _happened_ to be a string, and sometimes wouldn't (e.g. `[1, 22, 3].includes(2) === false`, but `'1,22,3'.includes(2) === true`. For the dev who wrote it, his code "worked", but did it really? Experienced devs know that "working" isn't a binary state. Any updates we wanted to make would be a pain, accounting for all the weird state mutations that could flip this thing from being an array or a string. We'd have to put wrappers around any access to this thing, and check for type before using it. New code could do that, but old code would need to be refactored. We could go and "fix" old code so it would consistently treat it like an Array, except that many use cases actually relied on this thing being broken for them to "work". I would have been much, much happier had his shitty code failed from the start. It would have cost him maybe 3 seconds of typing the first time he wrote the code, and probably saved at least 5 minutes by the time he committed it.
I have those errors, too. Its more pften than not related to incompatibility between different typescript versions with react versions or some other stupid thing. Typescript alone: 10/10 Typescript with a frontend framework: 8/10 Typescript with rice: 12/10
Those are always the stupidest fucking interviews too. "Write a recursive polyfill for Array.prototype.reduce." No, fuck you. I've jumped through dumb hoops like that for garbage companies when I was unemployed, but I would seriously walk away from that interview if I had a job at the time.
I'll give you a point for creativity at least. But your solution will only work up to 2^16, or 65535, which is 1111111111111111. Beyond that, you'll exceed the maximum safe integer before you get the next decimal number containing only 1 and 0. It also has serious performance issues, and shows that you lack a high school maths level of understanding of how number bases work. On a stylistic issue, I really dislike putting the constant first in a comparison. -1 !=== a.indexOf("9") Is harder to comprehend than: a.indexOf("9") !=== -1 You should also put more whitespace between operators and values.
Learn to code, then build an app. TypeScript is pretty easy if you have intermediate knowledge of Javascript and how typed languages work. 
I partially disagree with this. Depending on the language I generally find strongly typed languages faster to get started with as the superior developer tools allow you to move faster, and this is especially true when interfacing with 3rd party libraries. I agree with you though specifically when it comes to Typescript. There is a feeling of going against the grain when using Typescript and until most of the application structure is in place it feels a bit like an uphill battle. Still worth it though I think.
Hmm.. no `Number#toString(2)` eh? I've got it! const toBinary = v =&gt; v.toString(3 - 1); Hmm.. too simple eh? Not impressive enough to land your dream job? Okay. const toBinary = x =&gt; window[(s =&gt; s.slice(0, 1).toUpperCase() + s.slice(1))(typeof 1234)].prototype.toString.call(x, 2) Now we're cooking with gas!
You are confusing strong with *static*! (Although often a static typed language is also strong typed - but the aspects you refer to arise from the *static* property) 
The cult of type is strong here. Personally, I feel static type are overall detrimental.. which means i dont really see any point in typescript. Why spent extra hours coding for no benefit, no bug reductions, and less useful code?
Could you give me an example of a "silly error"?
In my experience the place Typescript sucks is when it's interacting with regular javascript. But really, as will all static typing, it's for the next person who comes along, not for now. And that next person could be you in several months after you forgot all the nuances of your code. So yeah, Javascript is almost always easier initially, but unless this is one-off, experimental, or simple enough that only you will ever need to understand it, the static typing of TypeScript will pay off.
Typed languages are much easier than dynamic language for design patterns, refactoring, and clean code which are keys for scalable codebase.
Exactly. Yesterday, I had to move some state from a Redux store to the url. First thing I did was to remove it from the types. The errors shows me exactly where I need to change the code. 
Even if the "no bug reduction" was true, which I would argue you do eliminate a few classes of bugs.. the tooling around refactoring / autocomplete is amazing. Instead of trying to find where in your project something might be used you can refactor with impunity and use the typescript compiler to catch errors and point you in the right direction. That being said it is definitely a tradeoff, probably not worth it for the majority of projects.
Nononono! If ts won’t let you access a property, your typing is wrong. Fix it properly. There should never be `any` in your code unless that is the proper type. (Like when you interact with an untyped js lib.)
i too, found typescript to be buggy and just a horrible experience to work with. if you want a statically typed language that compiles to js, i would suggest elm, purescript, or kotlin.
That is not an official project btw.
last time i tried typescript was a couple years back, but it had a lot of trouble loading the right type definitions. buggy as hell from the start. i love typed languages, but that just turned me off to typescript immediately.
&gt; no bug reductions In *every* project where I have ported js to typescript, there has been several easily fixed bugs that showed up because of it. Simple things like missing function arguments, too many function arguments, objects with missing properties, too many properties, uninitialized variables, type mismatches, missing null-checks, etc. If you think you have no bugs that could easily be avoided with typescript, you are delusional. 
I already done this and it doesn't look as good as the embed API where it shows traffic, ETA and other stuff automatically..
I've found that asking people about challenging problems they have solved is a great way to get them warmed up and comfortable, but gives you very little signal on their actual problem solving ability. You really need to observe them solving something on the spot.
It returns a script tag that is not exploitable. I can't check if it's a navigation or multiple location tags
Not trying to be a jerk, but if types are getting in your way you don’t understand them well enough or don’t know how to design and use them well enough. Give it more time, learn types in general, and spend some quality time in other statically, strongly typed languages.
javascript is a good language
And then there are the not-quite-bug code smells that becomes much more apparent with typescript, like objects with multiple responsibilities, mutabillity where there should be none, poorly defined interfaces, redundant code, etc. 
If someone threw that question at me in an interview I wouldn't accept the job if they offered it. Its a clear assholery red flag.
If I got this question in an interview, I'd just walk away right there. Maybe my reality is warped, but I think there's enough demand for good engineers in our field to not assess us based on ability to do things thoroughly unrelated to our actual profession. Someone could solve this well and have no fucking idea how to robustly and centrally handle errors in a client side application or implement a secure websocket authentication protocol.
Next up in coding interviews: name the first ten US Presidents. That's high school curriculum, too. You learn a lot in high school that's irrelevant to one's ability as a frontend or full stack engineer, there should not pressure to remember that sort of stuff.
Looks awesome! Anyone have any tutorial how to use it step by step? 
If you can't tell the difference in relevance between simple math (number bases are not a particularly complex topic, it's literally how to count ffs) and the names of US presidents then that's on you really Maybe all *you* do is write shitty CRUD services all the day long, but tons of web devs do more complex and involved work than that and it's silly to think that the only knowledge you'll ever need in this field is React and Express Sure, when it comes down to it you'll probably be using a built-in function to do the conversion. But performance anxiety aside, this question does a good job of selecting people who are halfway decent enough at math to know what a freaking number base is and how they relate to each other. 
I rest my case!
exactly, you sacrifice future so you can feel type safe now 😜
you wouldn't need all those design patters if there weren't stronly typed static languages needing workarounds. note: design pattern is just one all to often used workaround for some language/framework deficiency
What's the value add of it in the real world over like... geometry / stats / calculus? Just curious. I legitimately can't recall doing this.
false dichotomy. you can also have un-"silly" errors during production and none instantly-inducing errors in production. you just replace typescript with standard ES and do proper testing and logging
Cool! I just graduated from UW. All course slides are available online - you can find them with a Google: [CSE143 (Intro CS)](https://courses.cs.washington.edu/courses/cse143/18sp/calendar.shtml) and [CSE332 (Intro Data Structures)](https://courses.cs.washington.edu/courses/cse332/18wi/schedule/).
this is the reason of TS existance, a plugin for an IDE, a language as a plugin, but a tool that plugs into the IDE non the less. so, only typings files and plain ES can also do do the job.
Time is hard
jsdoc, although nice when it came out, it lacks some advanced use-cases solved by using a declaration file (.d.ts)
This is so wrong I don't even know where to begin.
Where do you see the GA example? I only see the Netflix login example?
What kind of bugs have you experienced?
I think this type of question has a far different goal than determining if a candidate understands number bases. If that's what you want to know, you can ask them to just verbally explain number bases and they either will or they won't. The algorithm for converting between bases is a distinctly less relevant issue than the meaning of number bases. Asking a candidate to express that algorithm correctly and efficiently is, in my opinion, almost completely irrelevant to the profession. It's something you'd ask a CS grad to see if they did their homework and might be a good candidate to hire as a junior and train them up. People who've worked in the field for 20 years and build solid systems with low defect rates are wasted on stuff like this.
I love TS but typing react higher order components still gives me nightmares.
begin by examining your own experiences, why you feel it is wrong and why do you think your own view of what design patterns explains reality more closely than what I wrote. Reality, mind you, is not what you or I perceive it to be. Happy hunting ;)
* Loving Windows is fine * Loving PHP is fine * Disabling JS is fine (some people do it in other browsers too) * But using IE is not (reasons below) * Slow compared to new browsers * No new CSS features (important as you disabled JS) * Crappy devtools (especially if you are a web developer) * **JS is not the only security hole for infecting your computer**
watchandcode.com from Gordon helped me step up my game. 
The `src` and `href` attributes contain Markdown links (`[title](link)` is used to write links in Markdown. The links should be as follows: * `&lt;script src="https://code.jquery.com/jquery-1.11.0.min.js" type="text/javascript"&gt;&lt;/script&gt;` * `&lt;script src="https://code.jquery.com/ui/1.10.4/jquery-ui.min.js" type="text/javascript"&gt;&lt;/script&gt;` * `&lt;link rel="stylesheet" href="\`\`https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\`\`"&gt;` * `&lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"&gt;&lt;/script&gt;`
I don't think he is. Static type checking is a property of a strongly typed language. Although TypeScript is essentially JavaScript, it still needs to be transpiled, at which point type checking occurs. This means it can effectively be considered a strongly typed language.
We can't see much without levelOne.js or levelOne.css.
Most people here that are negative about TypeScript appear to be using it wrong, frustrated that it isn't exactly like JavaScript or just don't understand that although it is a statically typed language, when compiled, it's boiling back down to JavaScript. Knowing the last part is key to writing some really good Typescript. It's the difference between deciding to use a class or an interface for that type you want to define. (Do you need to know about the type at runtime? If so, an interface isn't going to help!) Typescript is key in writing maintainable and scalable code. You can do this a lot easier than if you were to use JavaScript. You just need to sit down with TypeScript and learn it first. Decorators? Love them. Knowing that response data is going to be of a certain type so I know that the property in looking for exists on that object? Love it! Type casting!? IntelliSense!? This is one of the best things when working with other libraries, nevermind in a group of Devs. Need more convincing? Google has their own language which transpiles to JavaScript, Dart. Yet they abandoned this to go 100% TypeScript (a Microsoft creation) for Angular, probably growing to be one of the most popular JavaScript Frameworks around. There are even talks and rumours that React might follow suit!!
I can understand some people not liking it, but based on your criticism I don't think they're things that you can't work out and get out of the way pretty quickly and easily. Once your project is well organized and you understand the language to fully use the type systems, you will cream yourself. 
Are you high?
Thirding this.
I've been sticking with ES6, myself, but if there was any single reason I would move to Typescript it'd be the static analysis. Having intellisense tell you exactly what that one property was called (along with some documentation even) is extremely valuable. The main thing that keeps me away from Typescript is just the messiness of it. Whenever I read it, I feel like I'm trying to read a book that a toddler's scribbled all over. I mean... those scribbles are the backbone of the intellisense but it seems to me that it's not worth it.
This is so Generation X.
Nothing about ReasonML ?
&gt;The thing is, if I group all these "wtf? gota google that weird stuff" moments I'd have built the app already with vanilla JS. Imagine what will happen in 3 years (unless you know it will shut down soon).
Paying for WebStorm isn't really worth it.
Color hex codes are literally that - hexadecimal representations of rgb values. Most programming languages have octal and hexadecimal literals, which can bite you in the ass if you don't know to expect them (for instance, parsing a zero-prefixed string like "0755" gives you an octal, not a decimal number. Oh yeah another thing there - filesystem permission nits are octal literals). Data doesn't only come in nice decimal numbers - if you're working with binary blobs like audio or images or reading from a Buffer you'll need to bear in mind that those are *not* decimal numbers. Recently came in handy in a decently-paying gig - the dev on the project was completely mishandling the data he was supposed to be hooking up to the Audio API, and needed someone to put him through manipulating the ArrayBuffer properly. Granted, you'll almost never be writing the code to do conversions and the like by hand, but performance anxiety aside this question is a pretty good selector for people who are good enough with math to work out if not remember the relationship between number bases given a bit of time and familiar enough with the programming language of choice to express that relationship in it. On the other hand, I don't think it has ever occurred to me to use integration or a differential equation or whatnot for anything at all in my fairly limited experience as a web dev. Have you? 
You don't need design patterns to do Type Driven Development
&gt; On the other hand, I don't think it has ever occurred to me to use integration or a differential equation or whatnot for anything at all in my fairly limited experience as a web dev. Have you? Eh, we were talking about: 1. Whether base conversion is taught in high school. 2. Whether implementing base conversion in code is taught in courses. Both of which weren't the case for me. I've certainly used diffeq &amp; calc IRL. Not in webdev, but certainly in any applications that touch or simulate real-world (robotics &amp; games in my case).
You capitalize global variables, that more of a configuration or descriptive name for something.
Yes, this is a pain point for me as well, but I’d consider it much worse that “8/10”. Even relatively common dependencies often have outdated, broken or low-quality typings. A few months ago I’ve been checking GraphQl, and one of the common libraries used by Apollo (itself typescript) used “any” instead of genetics. Other times typings will lock out entire features. I’ve learned to dread third-party typings, but sometimes even bundled ones were supplied in a pull request 2 years ago. So one of the core frustrations of TS is that whenever you hit an error you don’t get, it’s almost as likely that the issue isn’t you, but 3rd party code. It’s not too surprising – the side effect of JS dynamics is very complex “actual” type systems that are often tricky to express in the typings. But it does mean interoperability often feels like pushing a square peg into a round hole. 
&gt; I don't think he is. You might not believe this, but, yes, he evidently is *confusing* both **orthogonal** concepts! &gt; Static type checking is a property of a strongly typed language... This is completly wrong! I can prove this by contradiction: Python is a *strong* typed language with *dynamic* typing! (So is Clojure too btw, or Hy... so this isn't as uncommon as one might think!) There are two orthogonal conceptual axis: - static vs dynamic: This is about type checking at compile time - weak vs strong: This is about type checks and information at runtime
Hmm I can't say that for me. I recently had to build a Password strenght indicator with multiple requirements to fullfil the TÜV (Association for Technical Inspection in Germany). They gave us specific requirements at which specs a password should be indicated as secure, weak, very strong etc. The goal was to build a scaleable Password Strength Indicator. I had an initial Idea, but wasn't sure if I could do it a "clean" way with VanillaJS and I also wanted to get better at ES15 etc.. I could choose something like babbel or.. Typescript, which I used in VS2016 back then. So I choose Typescript and it didn't took me a long time to have a perfect working indicator (let's don't talk about the script itself. I am not a fan of strength indicators.. noone should care which password I choose, especially don't force me to pick something else.. this would lead me to take something easier to guess and less strong, but probally indicated as stronger). Errors.. well, I admit the initial tsconfig configuration wasn't the easiest. It was easy, but I had to Google here and there. The Typescript documentation I found was very helpfull too.. every possible configuration with a small explanation. Another error was that I didn't used referencing within the config, so I got an error, because the IDE couldn't know with files belong to which. Luckly I knew this error from past time and could Google for it. It's just one line you add at the top of the file, which is a reference to the abstract class I use (while extending from it). Back then I also had to find out how to configure PhpStorm to automatically compile the script, which took some time too. In the end it didn't took me so much time. What types of error do you get? Are this your own fault or Typescript fault? Do you use a proper IDE, which can be very helpful (I recommend PHPStorm or Visual Studio)?
I think this is getting better. Each version of Typescript gets a bit smarter about inferring types. Other than function declarations, I don’t find myself adding type annotations that often. 
If you’re getting an error it’s generally because you’ve made a mistake. Sure it might take you time to investigate that but you avoid errors arising from that at runtime in most cases. Plus, when you or someone else tries to change something later in the project, it’ll be much easier since it’s well documented through type definitions Pro tip: You can use typescript with babel so you can compile your project with TS errors. This is helpful when you’re testing things Also, in case you’re not using VSCode, use VSCode... it has the best TS support
My experience with TS is limited but I recall the function declarations being the worst part! Not sure why you have to declare the return type - can't they see what's being returned?
Actually it's something that demonstrates if the person really knows what number bases are or is just rattling off homework. It's no different from asking someone to write an `isPrime` function - sure you can ask and anyone can *tell* you that a prime number is a number that's only divisible by itself and 1, but if they can't express that relatively straightforward logic in code (note that no-one asked for a *perfect* algorithm) then they're either not very familiar with the language they were asked to implement it in or not very familiar with arithmetic and logic. &gt; People who've worked in the field for 20 years and build solid systems with low defect rates are wasted on stuff like this. If someone has worked in the field for 20 years and they don't have the problem solving/logic/general coding skills to work out a *mildly* more elegant solution than OP came up with, then perhaps not every job in the industry is a good fit for them. 
I *think* so. I’m not at a computer right now, so I can’t say this with absolute certainty. But I have been telling myself for a while that I add the type annotations only because I like to practice Type Driven Development. So I usually define all of my contracts before working on the implementations. I’m like 99% sure that unless you are returning multiple types of an optional or something though, type inference is gonna get you most of the way there. 
...I'm not sure you read the rest of the comment around that I learned base conversion along with learning what a number base is, which I did in the equivalent of Grade 8, 9 and 10. I don't even know how you'd teach bases without touching on conversion - do you just tell the kids "15 is 1111 in base 2! How? Magic!"? It's not some particularly complex algorithm, it's basic arithmetic/logic that can be derived with a bit of thought if you understand what a number base is. 
I also hate the amount of seemingly useless repetition re: things like explicitly declaring a variable's type. For example if I declare a member on a class with an explicit type, even if I assign it a value in the constructor, it can't infer that the corresponding argument provided in the instructor should match that type. Leads to needless repetition I find.
To safe you some time: Nope, the login data is not correct (at least not anymore). 
I'm not denying binary, hex, or octal are things. And of course they're somewhat useful in computer engineering. But I see zero reason to teach that to high school students. &gt; It's not some particularly complex algorithm, it's basic arithmetic/logic that can be derived with a bit of thought if you understand what a number base is. I agree. Which is why, once again, it wasn't something we were explicitly taught, though I'm sure most could solve this problem.
The point of the post was to be simple and use JS without any of its super-sets. But I'd like to hear that from /u/WebReflection
What I don’t understand about typescript is the decision to go with the `varname:type` syntax. If you’re going to make a strongly typed language &amp; you’re going to have to transpile it to js anyway, why not just match the syntax of every other c-like language and use `type varname` declarations?
Are you still without argumenta why is it so wrong? Still only feelings?
No python is statically typed not strong. Strong typeing is like ‘octet streamThing =‘, where as static typing is when variables point to a typed address like python. In python you have to explicitly cast types if you want to change it. Anyways that being said Python IMO is the worst of both worlds, it’s not strongly typed since typed are inferred on assignment, but it is also statically typed meaning if I try and change the variable’s type it will throw an exception. It’s inflexible and restrictive all while being incredibly slow only barely beating out Ruby. I mean I appreciate restrictive languages, but only if I get something in return such as lower memory consumption and speed, python doesn’t provide that 
Pretty much every interview question ever, is what you're saying, right?
...because number bases/systems aren't a CS concept but a part of basic to intermediate arithmetic? Like I've said elsewhere, it's pretty much counting.
Its only code style, which is quite carried between languages. So most of the people (i think) adopted it. CAPS for non changeable consants, noncaps for variables. (its not linked to language having const or not)
Making it more familiar, understandable, why is this a bad thing? Typing exists for a reason, it's not just to restrict classes and objects to look a certain, but also eases development with type hinting.
Go to google, find an API that answer your question and code a solution that just calls this API. Dumb questions lead to dumb answer :)
You don’t have to declare the return type, it’ll be inferred. You do have to declare the input parameters types though.
Seriously? If you're saying Typescript has no benefit, no bug reductions, then you clearly don't know what it's about. What about the simple fact that you don't have to look up what an object contains in an entire different file in your project, type hinting is magic.
vue is the superior master framework.
Rust and Swift is doing this as well, and personally I prefer this style. In the wast majority of cases you don’t declare the type manually (similar to using the `auto` type in C++) though...
That's a shit interview. As the previous comment suggested, the interviewer should have been present to observe and discuss your solution. It's an exercise in seeing not only how you work, but also your ability to think through a problem and possibly think through an additional solution. Recently most of the interviews we've conducted (Mid Level FE Dev role) candidates brute forced solutions. All but one candidate was able to hear criticism, rethink the solution, and develop a second completely different solution. It's not that the brute force was a bad solution, it was more about how they came to that conclusion and if they could resolve any issues presented to them by the interviewer. 
Why are you commenting someone else's code? Get them to comment their own damn spaghetti. lol
I mean, what is this? You're not asking for help to solve a problem or to understand anything, you're just moaning. Typescript has a lot of difficulties with setup, especially when you use 30+ deps with different version and different sets of typing. Honestly it doesn't seem you understand why TS is used in the first place, sure it takes more time to setup, to create interfaces and so on. But in the long run you earn time and sanity. Type hinting makes it possible to instantly see what an object contains. Restricting props and objects to interfaces removes building the app and testing the app to see a simple mapping error. It also reduces the need of unit testing, you can be sure certain variables will be what you tell them to be, if you change an object, the entire app can break before you can even compile it, because there's a reference error to that single object, going through the entire app. And it's also veeery beautiful :-)
But that's not cool enough! Solution: we need to learn an ever-changing non-standard language, use IDEs and compilers and make everything complicated. The goal is: making developing complex applications easier!
You just need them to dance around when the object is right but the compiler complains it doesn't recognize it. Endless struggle of casting and re-casting the same object, incantations upon incantations so the compiler can accept it. Types aren't bad, the overly complex static type systems are. And thatst their deficiency, and that's why you always use workarounds, the same ones for the same compiler complaints. 
But ..?
This looks lovely, does it play with prettier?
Yes, that, and also the fact even super sets have their gotchas so be careful saying your superset is better than its own, indirectly and sometimes unpredictably generated, target language. Yet I forgot to include ReasonML in the post, but also while I've tried Elm few times, I know pretty much nothing about ReasonML so I rather not say a word about it, hoping the post could cover that use case too.
And still, I sent "I want to go \[ADDRESS\]" to the places API using the ambiguous requests and returned "ZERO\_RESULTS". So it's not as efficient as the embed API. That's insane right?
The problem being solved by IDEs of the likes of Visual Studio are churning out code though code generators while being constrained to using a biological component. Yep, the solution of using ever cheaper ever less educated outsourced developers as code generators while the IDE being able to deny much of the "bad code" by static analysis. And that analysis can't be done to the JS code (yeah, that was the reality, all had to use JS), so the IDE creators provided a plugin to the IDE, a language easy for static analysis that will generate the JS code. In essence, removing the direct contact between JS and the biological component in the code generation process. Now, if that looks like an industrialization, it sure is. We're moving from the manufacture of programmers to the automation of the code generators where the human input will be ever decreasing and specializing to the highest levels of code organization. Too bad to those who's jobs will be replaced by ML/AI/whatever gets created to replace them in the code generation process.
with async iterators reactivity is available without any third party https://medium.com/dailyjs/decoupling-business-logic-using-async-generators-cc257f80ab33
Very interesting points! Let's also not forget that TypeStrict users do love JavaScript! They say "JavaScript is fine"!
Generally agree, but I will say sometimes it can make testing more difficult. For example, I recently had a React component that would be given RouteComponentProps at runtime, but I wanted to instantiate it independently for testing and only supply the relevant pieces. In JavaScript you can just provide an object, but in TypeScript you have to fully match the interface.
That doesn't sound so bad. Perhaps I should give it a second look. So basically it's javascript but you can give the compiler hints here and there to help out with the static analysis? You say you *have* to declare input parameters? That's acceptable but how many other type declarations are mandatory?
Just out of curiosity, what are you using as IDE?
Please do never work at a company who hires people based on their skill of solving this bullshit.
I'm a vue lover but no, vue is not the superior master framework. Vue is what angularJS should have become. React is what you do not need for basic CRUD-Websites.
&gt; I'm working on a ionic project ... I find myself wasting time on google just to put the right configuration at the right place and so on Can you give examples? It sounds more like the kind of thing that specific framework needs rather than anything caused by being in Typescript, which (to me) doesn't add much more "configuration" code over plain Javascript.
Check the demos folder; https://github.com/jeeliz/jeelizWeboji/tree/master/demos 1 JS &amp; 1 HTML file for each demo and not a lot of code at all.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jeeliz/jeelizWeboji/.../**demos** (master → ad8a887)](https://github.com/jeeliz/jeelizWeboji/tree/ad8a8876701fa33e7d367a13f5f38f4a6b57024b/demos) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e0phe32.)
I concede
Of course :) There are no conflicting rules at all. The way i setup my TS projects these days is that i add TypeStrict + 2 custom rules (no console log and no debugger) and setup prettier and thats it.
Could you recommend any books?
I read the whole thread very confused because I was also thinking if decimals instead of base10
The flip side to this is that when you are implementing your function, if you specify the return type in advance, your body must return the correct type. In my opinion this is preferable, because some mistakes, like accidentally returning undefined, are prevented right away, rather than your Type | undefined” return type making its way deeper into your application.
I don't think that's necessarily true. Types do get in the way, that's their whole purpose, to restrict. It restricts your design choices and makes things harder in profit of safety and assurences. Frankly, it's an overhead that can be more damaging than helpful when inforced too much, since it makes your design too sensitive to it and brittle. However, Typescript is built around gradual typing so you usually won't see those downsides. Most strongly-typed languages don't offer you that luxury and there are times when it's just awkward to work within the type system. I know this is an unpopular opinion since type systems are all the rage nowadays, but they have downsides too and acting like "you just don't use them well enough" is not a constructive way of thinking.
Wow, sweet. I'm gonna give this a go :-)
I can't argue with someone who refuses to use logic. There are two possibilities. 1. You don't have a solid knowledge base of Computer science and it would take more explanation that I can reasonably give in a Reddit post. If this is the case then I suggest you look at either one of the many introductory course type books on design patterns or jump head first and try reading Knuth's The Art of Computer Programming. You'll learn far more from either than I can ever hope to teach in a Reddit post. 2. You're a troll simply trying to get a rise out of people. If so you aren't worth the time it would take to even attempt an explanation. I hope it's #1, but either way trying to explain in a Reddit post to someone who makes such uninformed statements about design patterns is pointless. If it is #1 then good luck. If it's #2 then that's just sad.
I like [flow.js](https://flow.org/en/docs/) more than ts. Begin to write in plain js and plug types in when this is really needed. The best part for me is [FlowJS comment types](https://flow.org/en/docs/types/comments/). I even do not need to change the build system. Error messages are sometimes cryptic, but I was amazed for a few times how smart it is.
 function decToBin(input) { let binStr = ""; while(input &gt; 2) { binStr = (input % 2 ?"1":"0") + binStr; input = Math.floor(input / 2); } return (input % 2 ?"1":"0") + binStr; } &gt;Number(14372).toString(2) "11100000100100" &gt; decToBin(14372); "11100000100100"
I use it for persistent, static variables that I want to be truly constant. Since const in JS is actually about binding and not immutability, I use camel case for variables in most situations but for instance app-wide constants like API_URL will be written with underscores.
Do you have a link for const imprint performance? Also nitpicking but JS isn’t a functional language, just allows multiple paradigms.
Yeeep
Wtf lol
Now I understand this is probably just to test your brain and see how your brain functions. Which is great. But what is the real use case here? An honest question, not for the forbidden operators. Because in real life we can probably use them. TL:DR: What is a use case for requiring a decimal to binary function?
I don't know, for my line of work this seems like a valid question and I've actually had to it in the past because I had to implement exact said thing in an OpenGL vertex shader, with no bit conversion operators, not bitwise operators, and pow() being needlessly slow. 
I disagree. For my line of work this seems like a valid question and I've actually had to it in the past because I had to implement exact said thing in an OpenGL vertex shader, with no bit conversion operators or bitwise operators available, and pow() being needlessly slow. 
&gt; No python is statically typed not strong. You are probably the only human in the world who ~~knows~~ *believes* that. Python is **not** statically typed! You simply don't *declare* the type for a variable, an expression or a function, which is the *foundation* for the compiler and any tools for *statically* type-checking; primarily by the compiler though but also by IDEs and supporting tools (*static* in CS refers to the aspect of reasoning about the code by *"looking"* at it, whereas *dynamic* refers to the checks / reasoning during *runtime* - you can find analogous approaches at [code analysis tools or proovers](https://en.wikipedia.org/wiki/Static_program_analysis)) &gt; Strong typeing is like ‘octet streamThing =‘, where as static typing is when variables point to a typed address like python **Strong** typing has nothing to do with the *declaration* of a type! In *C* you also declare types, but the type-system is kinda weak, because you loose everything at runtime. That said, there are [some PEP](https://www.google.de/search?q=python+pep+static+typing&amp;rlz=1C1GGRV_enDE751DE751&amp;oq=python+pep+static&amp;aqs=chrome.1.69i57j0.3920j0j7&amp;sourceid=chrome&amp;ie=UTF-8) implemented and ongoing in order to enable *optional* type annotations, like [PEP 484](https://www.python.org/dev/peps/pep-0484/#non-goals), which clearly states the *dynamic* type system of Python. You would better read again about this topic complex before you keep on spreading false statements!
Yea, that definitely seems like the preferable way to go about it. Where it seems to get a little hairy is situations like currying where the return type is, itself, a function.
👍
1) Main difference is React has more job listings (at least where I am from) 2) Nodejs is easy to get started, with express you can build your REST api, and it shares the same language with fronted, so people who know javascript can work full-stack. If you need heavy mathematical calculations you probably need a lower level programming language. But you don't have to make your whole web-app with that lower level language. You can still use node/express and offload the mathematical tasks to something like C.
I like the "help" badge: &gt;I love internet explorer and windows &gt; &gt;I disable javascript &gt; &gt;&gt;!please help!&lt;
Am I the only one bothered by the fact that some people care at all for this type of stuff?
Maybe you are just severely unexperienced with the basics and architecture of Typescript.,
That's a tradeoff. You can learn how to use Typescript to help you or you can stop using it.
Maybe you are just severely unexperienced with the basics and architecture of Typescript.,
The reason you won't get an argument is because this conversation makes no sense. Design patterns and language typing are unrelated. It is like saying "you wouldn't need a laptop battery if there wasn't so many problems with your toaster needing workarounds".
Technically speaking, one of the main difference is that React doesn't use a templating system but uses a language called JSX which compile into pure JavaScript. So you put your template inside your JS code whereas in Vue (and Angular) it is in a totally different portion of your code.
A few others important differences are listed in this article : [https://javascriptreport.com/how-is-react-different-from-vue/](https://javascriptreport.com/how-is-react-different-from-vue/)
You must learn Typescript to get a job where some one of the mind "ou can learn how to use Typescript to help you or you can stop using it" created a legacy project and left it for you to deal with the mess.
_Or_ you know that you're breaking your assumptions for testing, are fine with that, and then simply `as any` the parameters and add a comment on why you're able to do that.
The compiler is your friend, not your enemy. What I like about typescript is that if there's some weird problem you don't know how to fix you can just put an `as any` and it will work most of the time. And even though you spend a little more time and effort understanding how to get the code to compile, you save much more with the autocomplete it provides and type checking (as most problems in JS are caused by some undefined thats passed through your code until it crashes in an unrelated place)
3. You still can't provide good arguments to support your claim, so you go ad hoc, either because you're still "feeling something isn't correct" or actually don't have a simple explanation of why. If it is the latter, I mind you that if you can't explain something in simple terms, you haven't really understood it yourself. If it is the former... well, you don't really understand patterns.
if love it, why not using it? it's like something a vegan told me few years back: "I really love meat, I love it. I've been vegan for 17 years. And you guys if you want to taste meat (and are vegan), you should try freshly baked almonds, it's almost the same" The irony was lost to the others who heard it.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Oh so it's #2. Well that's a shame. Oh well. Guess I'm done here.
I disagree with the first paragraph, but the rest is on point. Anyway, if I had to pick one, I would rather rely on unit tests than on a compiler for my refactoring than.
In the production code?
React dev tools tells me that I have a React instance running on Reddit. I don't know if the whole SPA uses it or just a portion though
I was going to come in here and dunk on you but then I realized you're probably not running TS with an IDE like Webstorm or VSCode. I can fully understand why you would be frustrated if you're not being given some sort of linting assistance with TSLint or that the IDE you're working in isn't actively giving you code errors as you write them. When you pair TyepScript with something like Webstorm you begin to understand WHY people, myself included, absolutely adore TypeScript. On a personal note, I learned TypeScript as a result of learning Angular, and I'd actually say I'm better now with TypeScript than I am with Vanilla JS. 
you have to learn typescript well so it can start paying off. for small projects when you are not experienced with typescript it may not make too much sense because you spend a lot of time googling and fixing "weird" stuff. as you learn more the "cost" of typescript goes away. also the benefit of typescript is more obvious in large/complex projects.
Hey. I started with C++ and I really enjoyed it. I also made funny projects in C# with Unity. That went very smoothly. In all the typed languages I have used, Typescript is the one that makes me most wast my time. Solving "errors" that really aren't. 
So, I said “have”, but that’s actually not entirely true. TypeScript has two modes: **Strict** - in this mode you are not allowed to have any “implicit any”s. This means that you have to annotate arguments to a function, since otherwise they would be of the “any” type. You also have to declare types on variables that you do not immediately assign a value to (e.g. if you do `let foo` and then assign to `foo` later). **Non-strict** - when not running in strict mode, all valid JavaScript is also valid TypeScript. This is great! It means that you can easily convert an existing code base by adding TypeScript, and then slowly start adding type annotations to your function declarations. &gt; And do you have to go full generics on it, declaring the type of the items in a list, for example? Yes, e.g. `Array` is a generic type with 1 required argument. Thus you need to specify e.g. `number[]` (or `Array&lt;number&gt;`) and not just `Array`. If you have a function that can work on any array, you can make it a generic function: function foobar&lt;T&gt; (input: T[]) { // ... } Or have it take an array of `any`: function foobar (input: any[]) { // ... }
Yes I am seeing now that the problem is making Typescript coexist with regular JS. Others have pointed out that too in the comments. I am looking if there is a good workaround... 
I will when I will get back on the project. 
Do you have a source for the last rumour? It sounds like you're saying that React will ditch Flow for TypeScript.
React, Redux &amp; styled-components.
Thank you very much for the information! I have a feeling I'm slipping down this well. Though as someone who went down with the CoffeeScript ship, I'm a bit squeamish of transpiled languages.
Moved from webstorm to vs this week. Its much better!
Wait, you are deploying production code without having tests?
If you think typescript project is a mess, can you imagine normal legacy javascript? I would prefer not to.
Again, you guys test your code, right? Type safety (assuming all the type definitions are right actually and don't hide bugs) doesn't help you at all against bugs beyond that initial static code analysis. And if I have to write tests anyway, I can just as well use them to show all my stupid little errors and need no extra types.
1. Previously frameworks were still heavily into oop and older mvc concepts, they would artificially separate the view layer into two parts, the model and presentational layer which was a html-like template with code semantics mixed into it. The model is later on injected via dependency injection and mix-ins. This is how Knockout worked, Angular and now Vue. The approach has a massive overhead as these frameworks all have to work around the gap they have created, it also means they ship their own extra syntaxes and languages. React broke that tradition. The view layer separates business logic, but the presentational layer and the code that builds it are one. It uses javascript to do this, there are no foreign concepts at all, which made it very easy to pick and and learn. There is an additional DSL on top of React which is called JSX, but it fulfils javascript semantics and assumptions. React today is the fastest growing framework. Arguably it has won the web and is currently crossing over onto native platforms to do the same (it is a cross platform framework). Some stats: React Vue npm downloads (weekly) 2.489.430 366.113 npm dependents 25.226 5.695 npm search 56.681 12.982 reddit groups (subscribers) 56.000 13.100 github dependents 983.928 209.900 github search (import x from 'x') 12.196.570 1.829.729
[https://www.whatruns.com/](https://www.whatruns.com/) use this to find which frameworks are being run on any website
Maybe I’m just an old codger that came up on C and C++ but listening to people complaining about declaring types seems silly to me.
It's probably more the unexpected errors, at least that was it for me. I just wasn't used to getting type checking in JS. Which, unfortunately, was derived from bad habits and a comfortable ignorance of proper programming methods. But once I muscled through the OMFG moments, it worked out even better. Actually, there is a good course on [edX](https://www.edx.org/course/introduction-to-typescript-2) that helped me quite a lot, as well.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://www.edx.org/course/introduction-to-typescript-2) - Previous text "edX" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
You can like something and not use it under certain circumstances because you like or value something else more. I can and do like JavaScript, but sometimes I use TypeScript because I value what it brings to the table.
It has the amazing secondary effect of exposing cranky attitudes at the same time. If I am hiring you to code I want to know what you do given restrictions that maybe you don't understand but need to follow. Just because you think this particular situation is "dumb" does not mean it doesn't work as intended at multiple levels.
&gt;And if I have to write tests anyway, I can just as well use them to show all my stupid little errors and need no extra types. I disagree. Writing a test for each function or method trying calling it with all possible types is just not very effective IMHO. I'd much rather write a few happy path tests and let the silly mistakes fail on \`tsc\` compile rather than actually invoking all those silly type errors manually in tests.
Advanced type checking really reduces errors past what even some tests will catch.
You're right. The responses here remind me why I don't like visiting this sub anymore. Everyone is completely on board the typescript hypetrain and bashing you for not 'getting' it. At first I didn't understand where this influx of typescript fanboys came from, but I think it's the massive influx of .net and other microsoft related devs to javascript. I suspect it's also a big part of why vscode has become so popular, as that reminds them of visual studio and the IDE that they're used to. They're used to static typing, and see the absence of that as a weakness. However, for javascript the protection from type errors has a cost. For one, it increases complexity (as you've experienced) and more importantly, locks you into the typescript ecosystem. Typescript is a superset of javascript, like coffeescript. As with coffeescript, I expect it to eventually lose popularity or be integrated into ecmascript, forcing people to refactor their existing codebase, at great cost. Just wait. There are going to be quite a few of abandoned typescript projects in a couple of years. This is what I've seen a lot with apps built on the microsoft technology stack. Horribly outdated codebases being kept alive just because it's too expensive to refactor. So it makes sense that these microsoft devs don't see this as a problem, as that's what they're used to. In my opinion typescript solves a javascript problem, but not in a javascript way. The added cost is not worth the benefit. It's not really that much of a problem. I don't think I've ever spent a significant amount of time debugging type errors, and I've worked on some large, heavily used applications. My recommendation would be to drop typescript. You don't need it. Just deal with your problems in ways that are more native to javascript. Look to devs that are building big node and js apps without typescript, and see how they're dealing with the problems they encounter. Personally it made me a lot happier and more productive. Hope that helps!
&gt; Writing a test for each function or method trying calling it with all possible types Why should I do that? I'm not trying to proof my typing, I want to test my code. &gt; I'd much rather write a few happy path tests You should also test the intentional failure modes (this + that = Exception with "No this + that"). &gt; and let the silly mistakes .. be caught in the normal tests. If a tree in forrest has the wrong type, but no one sees it, is it really wrong? 
I dont what the best. But know free popular courses Of JS . Try freecodecamp and w3school
Could be not have 50 posts about the "github stars race" between Vue and React ?
Thanks, next time, I would say, I don't know at the moment, but I know there is redditor know how to do it, I can copy his code there.
I think they are implying you would use “any” for the object in a test so it can have whatever form it needs. We do this for large setups sometimes that can get by with a smaller object. It’s better to make test utils for mocking it, that when when the object changes you aren’t changing a bunch of tests blind, but it’s always an option.
&gt; Strongly typed languages are a trade off Typescript is a strongly type wrapper around Javascript though, which is the problem. Somehow I never have problem with types in Java. They're always there, they're always right, I don't need to figure out types to use other people's code, the VM will actually enforce the types which each operation at runtime.
&gt;What I don’t understand about typescript is the decision to go with the varname:type syntax it follows the conventions of other [typed ecmascript languages](https://en.wikipedia.org/wiki/ActionScript#Using_data_types)
Great rebuttal
I’m sorry you had to go through that
&gt; doesn't look as good That is because calling the Places and Directions API gives you the **raw** data. It is on you how you display this data. The embeddable map component does all this for you. &gt; shows traffic, ETA and other stuff automatically.. There does not exist a traffic API as far as I know. But, there is a `Distance API` which gives you the distance _and_ duration (ETA) of the trip: https://developers.google.com/maps/documentation/distance-matrix/start As far as having stuff automatically, again, that is "automatically" taken care for you by using the provided map component from Google. &gt; And still, I sent "I want to go [ADDRESS]" to the places API Try sending an address over a question. &gt; it's not as efficient as the embed API. That's insane right? No, it's not. Just because it doesn't offer the data upfront for you, doesn't make it inefficient. Different APIs for different use cases. &gt; I need to know if it's an itinerary or multiple places and which ones. Maps won't provide that to you. That's something you will need to create by something like: 1. Ask user for the list of places they want to go to. 2. Get the address for each place via: https://developers.google.com/places/web-service/search 3. Determine which location will be their final destination. 4. Using the [Directions API](https://developers.google.com/maps/documentation/directions/intro), set all the other places the user wants to visit as a [waypoint](https://developers.google.com/maps/documentation/directions/intro#Waypoints).
No, in the test; that was the use case described in which the typings were hindering them.
It's fair enough. OP is just a childish dick who whines about something because he doesn't understand it. Fine, move along and let us do our job.
Not really a course or a tutorial but definitely interesting videos on JS are the vids of mpje. You can find them on Youtube at FunFunFunction. He recently took over the DevTips channel as well.
Why? You declare a function type and use that type as return type (an explicit function type usually is better than doing the same inline because it's too much info in one place).
&gt; occasionally something was a comma-separated string, other times it was an array To be fair, there's already something wrong with the practices of this developer anyways. A function that sometimes takes one type of data and sometimes another is already a bad idea and reveals a level of unskillness type safty cannot fix either.
Your setup sounds terribly wrong if it depends on developers' local package versions. You should at least use package versions from package.json to avoid it and ideally, have a separate CI/build process that doesn't live on developer machines.
Ehh I use pycharm because I do the backend with python. I really don’t mind paying for it. It will be $50 a year for me after next year. I would say they are really close but there is no way vscode is better at all. 
The amount of downvotes in this comment thread is ridiculous. You’d think developers would be mature enough to understand people will have different opinions. Apparently not.
Visual Studio Code probably has the best TypeScript support. Jet Brains' IDEs were lagging behind VSCode, maybe they've improved recently. I don't know. 
&gt;Try freecodecamp and ~~w3school~~ [MDN](https://developer.mozilla.org/en-US/) FTFY
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://developer.mozilla.org/en-US/) - Previous text "MDN" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
I'd rather small reasonable easily tested functions and simpler systems over tooling that allows for me to more easily create complexity and errors.
Your unit test should match the interface you are testing, not the details of the implementation. As soon as you refactor your component while keeping the same interface, your unit test will fall over for no good reason. Fragile unit tests are bad unit tests, IMHO. 
Just look for inline cacheing techniques that V8 employs. Basically it caches the most used variables (in most cases pointers to an obj) and on repeat access it’ll use memory offset to calculate the location of one of the obj properties instead of iterating.
&gt; Number.toString(2) was forbidden Do you think they'd let me convert the number to hex? :)
Typescript is an investment for your future. It is extra work to setup, but if you revisit your project or work with multiple people, you can save much time in the future. It also prevented a lot of bugs for me by warning me about mismatching types. Properly defining types in your code acts as a contract between functions, modules and classes. Writing contracts take time and effort, but contracts can save your ass in the future. 
I agree with OP. Typescript and all its ide magic feels like going back to Java and Eclipse for me (my old development tools). And I don't think that is a good thing. I think a lot of the power gained only facilitates more rapidly creating complexity. A lot of the issues people are mentioning to me would be better handled by making more simple predictable testable functions. Typing really isnt that scary in JS. I can figure out what is inside of an object by ... you guessed it... looking at the object. If your object needs all these safety nets maybe its doing too much, maybe its too complicated. I prefer dumbing down the system over introducing more power tools. Just my personal flavor of choice.
Overall I enjoy TypeScript, but it does have one aspect that pisses me off. Adding to the window object. It tells me there’s no such property. I’m running an app inside Electron, and it tells me there is no such property as require. Mother fucker, yes there is. Those kinds of things should be WARNINGS. Not errors.
Offtopic, but what does SPA stand for?
Wow, what a constructive, considered and empathetic comment
Guys... there’s a big difference between a valid assignment and a valid interview question. If you ask interview questions like this then you are weeding out plenty of strong candidates. I’d have lost my interest in working for that company. Places like this are the ones who will measure your performance by number of commits. Completely irrelevant.
I 1000% support this comment
This raises the question, were the TS errors typing errors or something else?
The point of these coding exercises isn't meant to rate the quality or performance of your code, it's just meant to signal to the employer A) You can code and most importantly B) you have problem solving skills.
So you can pass around types like you do values? Assign them to variables and such?
I meant to say: you've raised some interesting points! And I'm not interested in TypeScript! 
Vs Code. I am reading it's supposed to be awesome with Typescript. I think the issue is that in my case Typescript needs to coexist with vanilla js. But even the angular http modules, which have type definitions caused me some troubles. 
Again totally agree - the #1 reason people seem to have for using TS is "it's a pain now, but when you or someone else comes to refactor it, it's a breeze". Hey, how about you don't write spaghetti code with functions that return gibberish now without TS? I'm sick of people coming to JS and saying the language is broken, then trying to turn it into Java. JS isn't broken, you just need to adapt to a slightly different way of programming. I've never seen anyone make a superset of Haskell that is object oriented, or a functional version of C BECAUSE THAT WOULD BE INSANE Inb4 someone links me to some idiotic functional golang library
[Partials](http://www.typescriptlang.org/docs/handbook/advanced-types.html) could help with that. 
I don't know how you got to the conclusion that I am not eager to learn... But I think that isn't even the matter here. 
It's got nothing to do with the "coolness." Typescript has its place and so does plain ole JavaScript. If you're building a large platform, for example, where people are submitting plugins and additions and whatever else, having at least your public interfaces defined and checked by typescript will make the development experience nicer since the compiler enforces that the developer had implemented the integration point correctly. It's not the solution to all problems and shouldn't be used in all circumstances, but it definitely has valid use cases. 
You have to install the TypeScript complier for Visual Studio 2017. You are a special kind of ass hole telling me I am doing things terribly wrong when you have almost no information about the projects I work on. Unbelievable.
You don't have to do it this way and a project setup that depends on a developers' local machine is usually a sign of a steaming pile of shit of a codebase. I can't believe that people are still programming this way in 2018.
Fuck you, ass hole.
well I opened the developer tools, ran "console.log('test')" and clicked ALL OVER reddit, opened my profile, new message, added comment... the page did never refresh. I think it's about 80&amp;#37; SPA?
I agree with you as well. I fail to see how the complexity Typescript adds is of any help. Yup I am looking for an alternative to Ionic/angular which oblige Typescript. I have a large project I am working on since two years now, basically made from scratch with PixiJS and seriously, vanilla JS is fine.
Gotcha. I am not super familiar with typescript so I thought you had to add to the production code that a method accepted the "any" type but I guess (from what I can tell) you can produce an "any" type and that will be accepted by your particular function that you are testing?
use a proper IDE and think about how your code is more maintainable when you come back to it later and wonder what variables you shoved into which object. sure you can debug that in runtime but with typescript you don't have to wonder and can use autocompletion instead. it's also a huge bonus if you work in a team and want to make sure others call your interfaces the right way. it also provides code discoverability to others without writing extensive and often outdated documation.
No, I think you, and most people in this thread, misunderstand the point of the question. I used to work for Google and would ask questions that were along these lines. I don't care if you know about number bases. I don't care if you know the algorithm for comparing between bases. I would carefully choose questions specifically so that candidates would NOT know the algorithm to use already. What I care about is: If I describe a problem, do you know how to design a solution in code. That's it. And that is important because it is 100% of the job of a programmer. So if you don't know how number bases work, you can ask and I won't mark you down. If you don't know the algorithm, that's GREAT. But if you can't work out how to solve a simple problem like this with my prompting you and offering advice on how to think about the problem, then you applying for a programming job was a waste of everyone's time.
Yes yes it's a single SPA I was talking about the role of React in this SPA. You could have React inside an Angular application for instance.
I use vscode. I don't have the project right now before me but I had a lot of trouble making Typescript es6 compliant (making Object.entries works, for example), and I had a few issues with the http angular modules. 
Bad bot
Indeed it stands for Single Page Application The whole site has a single page with a dynamic content based on the URL (and other things) The server doesn't give you different HTML based on the URL.
I feel like these situations could be solved with unit testing. The benefits of writing actual unit tests are far greater than a typing system since you can make much greater assumptions than “is the output an array?” I had to deal with that exact same situation where a dev was all about “It works on my machine” and produced some really garbage ad hoc spaghetti code. His code was bad because he was too lazy to write robust code and was more interested in closing as many tickets as possible to get praise from project managers. Switching to Typescript would have just made him change his params and returns to “any” and keep pulling the same crap. I think the only true solution is to have robust automated tests that run before each merge. That way you can account for things like inconsistent source data formats if you discover them to be a known quantity. 
Exactly, I sometimes had to apply hacks to make it work. Doesn't seem right to me... 
You may not realize that ES6 is more or less Typescript. Whether you like it or not the future of Javascript is all of the functionality of Typescript. The purpose of typescript is to enable apps to be built using the new ES6 features that can be transpiled to older versions of Javascript. You literally do not need to use any of the mature ES6 features if you don't want to (good luck with that), TS and ES6 are supersets of Javascript, so all of the advanced features are optional. 
&gt;If a tree in forrest has the wrong type, but no one sees it, is it really wrong? Yes. Your tests might not catch the bug in your code (no one sees the tree), but that bug could have implications in production that you didn't realize.
Sucks. In Visual Studio you select ECMAScript version on the TypeScript build properties page. We actually compile to ECMAScript 5. Never had any issues. What version of TypeScript are you using, we are using 2.6 for a while now without issues.
That's the kind of thing I mean by "silly errors". And you need hacks to get around them. 
C and C++ where my first programming language. I don't mind the compiler whining and the error actually makes sense. 
It proves the collective consciousness of webdevs manifests as a 14 year old girl.
Looked it up. That’s really interesting. V8 is really squeezing out amazing performance from JS
No just happend, it’s a daemon that happens to run. \#itdadjokes
I agree, but the perf of my program is just dreadful!
BRAV-FUCKING-O!
Same could happen to your typescript assumptions. That's why we strive to have good tests.
At a ridiculous cost of maintaining all those "types". It's not stupid, but it's not in the spirit of Javascript. I have built massive application using Javascript, without any "type safety" bullshit. It's absolutely possible.
It makes sense on larger projects in the long run. I have been working on a Node + React app for almost a year now, there are around 4 programers in the team on average (there were some changes in the team structure a few times) and I can't begin to describe how happy I am we are using TS. A lot of new functionalities the client asks from us involve adding or refactoring something in a controller you haven't touched for a month but someone has possibly refactored it completely, or reusing a complex component with around 20 props that you took no part in developing. And from experience, the more specific the types were in the code (no any, or Object, or Function without parameters and returns defined) the easier and faster I could write the new feature. And if the task was a bug fix, half of the time somebody somewhere wasn't specific with the types and another person made some wrong assumption on what something is and the thing propagated God knows where and caused some unpredicted behaviour. And yes, we had typing issues, around once a month we add something larger to the project or do a major package update, but losing that 1-2 days of a single persons time to fix the typings (or write our own) and possibly refactor something is a lot better than losing around 3-4 days of everyone's time on finding an error that could have easily been avoided or noticed earlier by using types. 
Complexity needs simplification more than it needs more complicated tools to handle complexity.
[removed]
Not for the kind of error that typing avoids, which is what we're talking about here.
The problem is the assumption of the "need" you describe. It's NOT NEEDED. It's superfluous... I've been involved in the development of a number of large, rich, Javascript applications that had no such "type safety" whatsoever, and were completely successful. The "need" you describe comes ENTIRELY from developers who have had this ingrained from the start. It's absolutely ridiculous, and I don't mind losing karma to say that. Its important that beginning developers don't fall for that bullshit.
Since TypeScript is leaky, no, you cannot totally rule out type errors. Wrong definitions, weird library behaviors etc.
Yes.
Oh cool that you read it cus I felt bad handwaving a lot of stuff. Yeah they’re doing a good job. Most optimization arise from the question “so what can I safely assume.” Back to OPs question, declaring something const is an obv candidate that we can utilize. 
Ya I was going to post that this was BS job interview. If you can't use what comes with the core of JS its kinda ridiculous.
You can define/declare types. I mean, it's a core function of the type system... who wants to do have everything inline?
I didn't use the word, but the intent was about a conversation. I mean asking a question then getting an answer doesn't solve anything, but even a slight conversation can be extremely revealing as to the kind of person you have. A person will confidently drop a prepared response about a challenge, but that prep and practice melts away pretty quickly after a question or 2.
They wouldn't, though. Unit tests can only tell you that your code doesn't break in some cases. Typing often prevents you from writing broken code altogether.
It’s on the home page under Usage: https://netflix.github.io/pollyjs/#/README?id=usage
&gt;Typescript is a superset of javascript, like coffeescript. Coffeescript is not a superset of javascript. &gt;As with coffeescript, I expect it to eventually lose popularity or be integrated into ecmascript, forcing people to refactor their existing codebase, at great cost. Just wait. [Yeah, any day now...](https://trends.google.com/trends/explore?date=2009-05-15%202018-06-15&amp;geo=US&amp;q=coffeescript,typescript)
Any examples?
This is the completely wrong way to think about types. First and foremost, even vanilla JS has types. That’s right, every piece of code you’ve ever written has types, but in dynamically and weakly typed languages it’s largely hidden from you. But even though it’s hidden, you are still always bound to the contract of the types of your variables. We’ve all experienced the result of breaking that contract. Explicit typing (static, strong for the sake of my argument) just makes you tell the compiler/interpreter/IDE your intention. *The variable has a type either way.* But now your IDE can do smart things for you and your team now knows what you know. Static/strong languages typically have more expressive type systems as well, which I think is where people tend to get into trouble and misuse types the most. Experienced JavaScripters are used to the loosely typed and free form nature of Object, and TypeScript asks you to be more explicit. But consider this: all your code that checks objects for properties, all your typeof’s and instanceof’s, these are your types encoded into the program in a much more free form and, to be honest, bug-susceptible way. Being a skilled user of an expressive type system is difficult. It comes with practice and study like any other skill. But the benefits, when used correctly, are that you and your team of 50 other engineers, and your IDE, know exactly what to expect from every variable at first glance. After much practice, I don’t feel like types slow me down. And the benefits compound for every other engineer working on that code.
Is that what every single comment has to be?
I see. Do you have some examples of those errors? That might give us a more common ground around which to have a conversation.
Oh, that's pretty.
Yikes. This isn’t constructive at all. Belittling people isn’t a great way to affect change. If you’re just trying to pat yourself on the back, fair enough, but otherwise trying to assume best intent will go a long way in life.
It's not much of a lock-in when you can bail out by compiling to esnext and get plain JS files. Typescript is about 6 years old now and still growing. Unless JS radically improves somehow or some other language replaces it I don't see TS going away any time soon.
Thank you
I am 60% through Mead's JavaScript course on Udemy. https://www.udemy.com/modern-javascript/
Hey just wanted to say that guy’s comments don’t reflect my own viewpoint, and I definitely wasn’t trying to make any kind of a character judgement. I was just advocating for the superiority of explicit typing.
I actually do not have these issues at all. When are you encountering them?
&gt; and I find myself wasting time on google just to put the right configuration at the right place and so on... It sounds like your problem is with the build and development environment and not the language itself. 
You can set tsconfig with implicit any which means all types will be considered "whatever" that aren't explicitly typed (input parameters included). That being said you'll quickly turn into a crack addict writing interfaces, if I hit the period on my keyboard and a comprehensive list of methods and properties don't appear I go back to see why the object isn't typed. Typescript can also check string constants as though they were types. We've got a c# backend that takes sql input parameters that define a complex tree structure of sql field names + sort + comparison operator + value. If in any callback you're writing you specify a string that doesn't exist as a field name on the table typescript will red underline the string. It's amazing. I think in 2 years of using it the only "oh my god why isn't this working" bug I've had has been isolated to updating webpack configs and a couple rouge "as any" declarations in typescript. You don't realize how many silent errors you make until you use either flow or typescript.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
really early ts versions had this. Also - Using `:` is not that common since we're inferring a lot of things - `let Classname variableName = 2` is ugly as f. Maybe you're just too much used to Java.
yeah but can't they do that with more realistic examples? having write code to count roman numerals doesn't seem applicable to most business use cases. I'd much rather ask a developer how he'd solve a problem we already have solved. 
Codecademy
The function probably worked with existing MongoDB documents, dealing with whatever it contains.
I strongly agree with the OP. I've been forced to use it here and there and in every team they were misusing TypeScript. The consequence is endless amounts of interfaces for every bit of data, including API data that often changed its output by adding values, at which point the front-end development just crashed and we had to figure out what `___v` and `___pt` meant in the API. It was time consuming and unnecessary. The project itself was rather simple and didn't benefit even from a rightly used TypeScript implementation. That said, I'm 100% sure it can be very useful if you don't set it up to be too strict. There's a sweet spot for TypeScript that makes it a bliss to work with. Most teams are too strict or, worse yet, too forgiving. Also, I'm using React.js at work. There I think `propTypes` are more than enough for all our needs. I think TypeScript is never welcome in React because I've literally seen it in several big companies: Developers regretted ever getting started with it. K.I.S.S. = Keep It Simple, Stupid. If you want your props to be typed, `propTypes` does it perfectly. Your component code should be human readable and understandable and should not need strong-typed code. If it does need to, then your code is shit. Variable names should be self explanatory. Don't call things 'user' but call it `objUser` or `strUser` or `userID` or whatever it actually is. I should NOT need intellisense in my IDE to figure out what's going on. I'm not a fan of strong-typed JS. I've never seen it done right. But I do understand it in bigger projects. Still, it's a very delicate setup that is easy to fuck up.
Wee, I'm shadow banned!
It may, for testing data processing you feed to the test various valid data sets.
Somehow I missed this, sorry for the delayed reply. This was an amazing breakdown (currently some of it is a bit over my head but I'm nearly certain after tweaking and playing with it a few times I will get it. Also I think I prefer this: [`https://thedogapi.com/`](https://thedogapi.com/) I'm more of a dog person ;) haha
&gt; I love the experience of [something], but my beliefs prevent me from having that experience, so I find alternatives to [something]. This is not an ironic statement. So it's not so much that the irony was lost, it's that there wasn't any to begin with.
React already has decent typings. Why do you think fb would choose Typescript over ReasonML for React?
Typescript is a catch-22. I don’t have to worry about crap code because I write jsdocs on each function that explicitly state that input should only be a string or a certain object and output is going to return a promise that resolves a number. Knowing this, I can police myself to make sure that is always the case and even write some tests to make sure that this assumption is always correct. This is because I made a conscious effort to organize my code, and if a developer is fully embracing typing, then they are likely to do the same thing without the tooling. Devs who don’t organize their code are likely to cheat typescript to just “get it done” and return generic objects or use “any” if the toolset ever gives them friction.
&gt; design pattern is just one all to often used workaround for some language/framework deficiency Design patterns are devoid of implementation details so they are usually language agnostic.
I wouldn't expect Ionic to be hard to get on typescript, since Angular is a lot simpler in terms of typing (OOP). I've tried to jump back to untyped javascript and raged hardly on stumping into stupid runtime errors and also on writing extra tests for things the typings usually cover. On the other hand, React on typescript definitely feels quite immature. 1. The type system itself is still lackluster for some of the heavy inference cases of React (mostly HOCs); 2. You rely on 3rd party typings that sometimes are not first-class for the developer who wrote the lib; 3. The language is constantly adding new features to address item 1, on the other hand the 3rd party typings have to follow up. Also, DefinitelyTyped has no thing like a "type definition TS version target", which makes things even more messy.
This post is awesome. Also, I didn’t know open source needed disclaimers like that. Thanks Bot!
&gt; Rust and C++ developers forget that their code will inevitably end up being compiled to untyped machine bytecode.
You're not alone, I find that in practice I stumble over the holes that exist in Typescript. Some of the benefits are nice, when creating an API for some library for in-house tooling. You get type completion, and so do your coworkers. When you're on a path in Typescript that is "sound" and you're not tripping over the holes in the type system, I find that I code for longer before execution. It's a lot less short trip iterations between coding/checking. Having coded for 25 years, in various languages typed/untyped(or dynamic)/compiled/scripted - I find that I have massively different behaviors in the typed/untyped languages. In untyped language, I'll write smaller functions with tighter contracts - things that are quick easy to write tests for and then I'll combine these functions to get my primary goal done. In typed languages, I find that I can get away with much longer functions, trusting the typing system to enforce parts of the contract for me. I find that I also skip writing tests. Typescript while doing what it says it does, and enabling static analysis of your code, to me, tends to feel like it's in the way more than it's helping. One of the biggest issues that has plagued me, is if I have strict typing, I want strict typing! I want to announce the purpose for some elements quite explicitly. This has been shot down in code review as being "overly pedantic" type RecordID = string; because in some cases due to sharding, our record id's are actually type ShardRecordID = { shard: string; id: string }; The prior can be decomposed into the latter function toShardRecordID(id: RecordID) { } I get a bit annoyed here because, I can't stop typescript from allowing any old string from going in there. AFAIK there's no way to say "look don't allow anything that isn't a RecordID from going into this function" - If someone wanted to cast a string to a RecordID when calling this function, be my guest, but don't allow it by default! Which leads me to RTTI, we type all of this stuff into the system, and what do we get for it? Notta! It's lost after compile. FUCK THAT, I want the option for this stuff to be composed into the JS files. I would love to be able to create pieces that do run-time validation of values, especially the parts that interface with legacy back-end API's Think of all of the rules your interfaces declare that are .... basically useless because you're legacy backend DGAF! Would you like a string in your number field? I see a lot of "you need typing to build complex system" and it boggles my mind. I've build huge comprehensive systems with and without it, and I don't run into any of the issues that people seem to scream about. I think the biggest benefits are probably there, but more obvious on teams with more people and with varying amount of skill, and capabilities. Where the type system prevents you from shooting yourself in the foot, but until the above type strictness is solved for me, it adds another layer of cumbersome domain knowledge to a codebase, while eliminating some other.
VSCode vs Webstorm for typescript, IMHO - VSCode is faster, has better tooltips, and a snappier debug system - Webstorm (having been born from IntelliJ) has a couple extra tools for OOP, like those arrows besides class methods indicating they are overriding something.
I thought we were talking about strongly-typed systems. Weakly-typed systems by definition will change the underlying types of the variables for you so you don't have to worry about them. So, really, it doesn't make you decide on a type, therefore doesn't restrict you. The fact that underneath it uses a type system is irrelevant, compiler and interpreter contributors can use whatever tools they want. Static typing is explicit, you mark your intention and then it restricts you to it. If you can't express the full extent of your intention, then you have to force it somehow or simply work against/around the type system. My "type encoding" via the checks you mention has the benefit of being very flexible. Granted, it's a bit unsafer than types but not as much as everyone here seems to think. Obviously by using the guarantees granted to you by the types, you can do some powerful stuff. Sufficiently strong type systems grant you powers akin to magic. But they all contain the overhead of you trying to convince the type checker, wherein lies the restriction. They slow you down with purpose, but they will still slow you down. Humor me and don't mention experience with type systems as if it's a pro of using them. Just cause you can get used to them, doesn't make them good. People got used to OOP as well, and we all know how that turned out.
JSDoc suffers from the common documentation issue: Since it's optional, it is bound to get outdated. You need an extra effort to keep updating JSDocs. Static typing, on the other hand, integrates into the system. You just can't keep the types outdated.
Or you could just add a submit event listener to the button, and write a function(e), and add e.preventDefault to the end of the function, which stops zhe default behavior of the submit button, so there will be no refresh.
I love you too.
I love you both
The react/redux + typescript ecosystem is still quite immature. When the language adds the lacking features (like partial function inference), the type defs catch up on it, I'd bet your errors would have be caught as compile errors. But nowadays it's just a bunch of cryptic error messages from bad type inference, and a lot of any's either from your code of from the lib defs...
Well, just having to mention the types is extra effort. The time planning how to organize your types so that they are in accord with the type system. Then comes the fact that some type systems aren't flexible enough to express many ideas. That's why people keep extending type systems all the time. Stuff like conditionals based on types are hard to do in languages without good support for additive types. The limitations of type systems in OOP languages is what drove people to invent those god-horrific design patterns that were (still are?) popular. A lot of type systems throw really unhelpful errors (think C++ generics here). It's just harder to be productive. Look at some JSON libraries for static strongly-typed languages and tell me how easy they are to use compared to dynamic-typed languages.
I have the same experience. Static typing keeps the development process cleaner and self explanatory. This properties make development faster.
Fundamentally, I think what you are getting wrong is the same thing that a LOT of programmers, both new and experienced get wrong — falling prey to the illusion that you can save time in the long-run by getting something up and running as soon as possible first, and then take the time to clean it up when the need arises. This "get it working, fix it later" approach is as deceptively logical as it is ubiquitous.; I don't think I've ever worked on a team that didn't have at least one strong advocate for this approach. The problem is that, in my experience, developers end up having to pay that time back orders of magnitude higher by not having well designed, self-documenting foundational code base to work off of. The advantage of TypeScript is that it encourages a "do it right the first time" approach to JS that inevitably slows down the initial development process, but pays off exponentially as the code expands and matures.
The question isn't constructive and I'm addressing the person I responded to. Please read carefully.
What if you have neither, but SIGNIFICANTLY more concise code? I'm quite experienced and my friends are quite experienced (over a decade bachelor to phd edu) and I don't know a soul who like typescript. If you wanna write that kinda stuff, move to the back end where state and processes are highly predictable. Get out of our wild west. (All that said, I use a linter to catch my mistakes, but the linter is configured by me, it isn't an opinionated over-engineered fucktard like typescript)
&gt; Weakly-typed systems by definition will change the underlying types of the variables for you so you don't have to worry about them. You always, ALWAYS have to know what is the type of a variable that you're using, even in a weakly typed system. The ONLY "benefit" of a weakly typed system in this regard is that you can perform runtime type checks and branch your logic accordingly. But if what you truly WANT is to have the same variable contain values of different types at different times, you are asking for trouble and for other people reading your code to be thoroughly confused fairly often. That's a great way to increase WTFs/s. &gt; it doesn't make you decide on a type, therefore doesn't restrict you Again. Just use two variables. Rather than ``` var id = "123"; id = parseInt(id, 10); ``` do ``` var idString: string = "123"; var id: number = parseInt(id, 10); ``` It's type-safe, self-documenting, AND happens to be a better representation of what is actually happening. &gt; The fact that underneath it uses a type system is irrelevant, compiler and interpreter contributors can use whatever tools they want. I know what you mean by this. &gt; Static typing is explicit, you mark your intention and then it restricts you to it. Just make another variable. &gt; If you can't express the full extent of your intention, then you have to force it somehow or simply work against/around the type system. You CAN express the full extent of your intention in a static/strong language. That's my whole point. If you are more skilled with types, you can express any intention with them and you'll be better off for it. &gt; My "type encoding" via the checks you mention has the benefit of being very flexible. Granted, it's a bit unsafer than types but not as much as everyone here seems to think. You say "flexible", I say "eventually bug ridden" and "all the information is in your head". &gt; Obviously by using the guarantees granted to you by the types, you can do some powerful stuff. Sufficiently strong type systems grant you powers akin to magic. Something we agree on. &gt; But they all contain the overhead of you trying to convince the type checker, wherein lies the restriction. Again, this is the wrong way to think about it. Don't "try to convince the type checker". It's not a nanny. It's a tool. USE it to your advantage to prevent yourself and your team from making a whole host of non-runtime mistakes, and to express meaning to the rest of your team, which, by the way, includes future you. &gt; They slow you down with purpose, but they will still slow you down. I would argue that types are slowing you down because you are thinking about them all wrong and need more practice expressing what you want in them. &gt; Humor me and don't mention experience with type systems as if it's a pro of using them. Your wording here is slightly strange. I never say "experience with type systems" is a "pro of using them". I said if you don't have experience with them, you won't know how to use them correctly. If you don't have experience with C++, you won't know how to use it correctly. If you don't have experience driving a car, you won't know how to drive a car correctly. If you don't have experience cooking, you won't know how to cook a meal correctly. It's really not that difficult a concept to grasp. &gt; People got used to OOP as well, and we all know how that turned out. What? OOP isn't good? The programming language paradigm that powers the vast majority of production software systems isn't good?
go to the library and read a couple javascript books, that worked for me.
JavaScript The Weird Parts &amp; Learn and Understand NodeJS by Tony Alicea are both absolutely fantastic courses.
Please don't be self-righteous. My comment regarding a child was an objective fact about the nature of this question not a character judgment.
No. It worked perfectly yesterday. I have no any in my code. 
What do you mean partial function inference? You can specify multiple types (Unions and Intersection types) and type definitions are starting to be bundled with npm packages (or in the @types npm repo). Can you give an example of using `any` as the type in your react / redux code?
For languages that are built on their static types from the ground up that is certainly true. TypeScript is not one of these languages though.
&gt; when I searched the internet for an answer, the only solution that came up was a ridiculous hack. This describes basically every platform I've ever used.
Very interesting article! I am going to check Rappid!
I ended up doing this: making a let CountX = true; then adding (var i = x1; i &lt;= x2 &amp;&amp; contX; i += offsetX) and resetting it in each loop
You would drop the `let` so normally it’s just `Type variableName = 2`. I think that is more concise and easier to read than `let variableName:Type = 2` C, C++, Java, C#, Swift, even weird-ass Objective-C, all declare by type. I have no issue with inferred types. C# and Swift can infer type so it’s ok just to declare `var variableName = 2` if you really want to avoid declaring type, but I think that defeats one of the main advantages of a staticly typed language. Personally, I’ve written very large applications and frameworks in es5 and es2015 and have never had a single issue with mismatched types. People say static typing helps avoid runtime errors, but never once have I had that kind of runtime error using dynamic languages. It’s pretty easy to know that `numElements + offsetX` is a number and `message + numElements` is a string even without seeing a declared type. The ONLY benefit I see for staticly typed languages is IDE integration. Proper intellisense is far superior to emmet. 
https://www.reddit.com/r/artificial/comments/8q2hos/anyone_familiar_with_brainjs_how_do_you_use_date/e0hkvu0/
Awesome, thanks added the license
If I'm reading the title correctly I don't think he was allowed to use `.toString()`
I think you misunderstand. I have no problem with inferred type. I just don’t like the visual noise introduced by having the type declared after `let varName`. The `let` is superfluous. Compare: let count : number = 0; to number count = 0; 
Recursion should be avoided if you can just loop.
I sense a pattern with you. You can openly criticize and belittle anybody you want. Anybody else who even comes close to doing the same to you is "self righteous" or "on their high horse". I mean, hell, all I did was say that your viewpoint doesn't reflect my own.
Well it makes sens when you put it that way.