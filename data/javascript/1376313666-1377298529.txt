Anyone?
I usually normalise some of the event properties (`target` vs `srcElement`, event argument vs `window.event` etc.) so you don't need to do this in every single event handler. Here's a snippet from some of my older event handling code: add: function(obj, type, fn) { function normalizeEvent(e) { // target - What actually triggered the event e.target = e.srcElement; // currentTarget - Where the event has bubbled up to (always the object the // handler is attached to) // Reference: https://developer.mozilla.org/en/DOM/event.currentTarget e.currentTarget = obj; // Mouse location // Reference: http://www.quirksmode.org/js/events_properties.html e.pageX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft; e.pageY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop; return e; } obj.attachEvent('on' + type, function() { fn.call(obj, normalizeEvent(window.event)); }); The full version is in here: https://github.com/Daniel15/JSFramework If I were to write this again, I'd save that anonymous function somewhere so it could be removed at a later stage. Here's some newer code: https://github.com/Daniel15/chosen/blob/vanilla-no-framework/coffee/lib/events.coffee
Always good to have a simple AJAX wrapper that you've written yourself. :) Here's one I wrote a while back: https://github.com/Daniel15/JSFramework/blob/master/ajax.js
If you like strict mode then you'll love a good lint tool! Either venerable JSHint or the up-and-coming ESLint. Use it in you build file like Grunt. Seriously do this, it is like unit testing: seems a lot of hassle but after you use it for a while you dont understand how you'd ever lived without it.
You can do [something similar with UglifyJS](http://jstarrdewar.com/blog/2013/02/28/use-uglify-to-automatically-strip-debug-messages-from-your-javascript).
You should have a look @ underscore.js It will probably have a lot of utility functions you want, as well as some you may not have thought of. You should check out the Immediately Invoked Function Expression for composing namespaces and objects. In javascript constructors are for chumps! JK ... everyone has a coding style I would recommend you check this article out: [IIFE](http://www.elijahmanor.com/2013/03/angry-birds-of-javascript-red-bird.html)
Should be there by default IMO.
I use this for random coloring. '#' + Math.random().toString(16).slice(-6)
As a BoardGameGeek - D3 is: http://averweij.web.cern.ch/averweij/d6%5Cnum06_07.JPG
Talk starts at about 5:55, for anyone else annoyed by the long intro spiel.
This is something I end up adding to my projects a lot: Object.size = function(obj) { var size = 0, key; for (key in obj) { if (obj.hasOwnProperty(key)) size++; } return size; }; // Get the size of an object var size = Object.size(myArray); Via http://stackoverflow.com/a/6700/142951
Ah, that makes sense. 
Last time I had to use D3 I used [Ricksaw](http://code.shutterstock.com/rickshaw/). [This example](http://code.shutterstock.com/rickshaw/examples/extensions.html) shows a multi dimension interactive graph updated periodically.. I'm not nearly comfortable enough with D3 to assert it solves your use case, but for me it simplified things a lot. Plus, it's made by [Shutterstock](http://www.shutterstock.com/) which is pretty cool in my opinion.
I feel that if you're using this in big applications, you should be using Mustache, Handlebars, dust, etc. Otherwise it's a great feature.
It would appear as though array.slice() is the same as array.slice(0, array.len): [sec-15.4.4.10](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.10) &gt;7: If end is undefined, let relativeEnd be len; else let relativeEnd be ToInteger(end). Trivial difference, but if you were making an array like object it could matter.
Thank you, It doesn't seem to support confidence intervals, which I need, but maybe I can build that into it. 
I like to introduce the shortcut f: String.prototype.format = String.prototype.f = function() { ... But otherwise, that is one of the few things I find I often include when I write stuff because its just so handy.
I write this snippet waaay too much console.log('functionName', arguments);
&gt; /* Math.ceil */ &gt; value + 0.5 | 0; This is actually Math.round
Now i don't know what to use...
Slider is the wrong word. Try looking for "Carousel" instead. I found[this](http://www.professorcloud.com/mainsite/carousel.htm) after a quick google. It's not pretty but it might put you on the right track. [Here are some more](http://visionwidget.com/free-jquery-carousel-plugins.html)
Time to write some javascript then.
 var 2d = [ [1, 2, 3], [4, 5, 6] ] it's just arrays in an array. you then access the outer array with your first and the inner array with your second acces: 2d[0][2]; // 3
Hmm, one downvote already. I recently saw a thread ranting about people asking for Javascript help in this subreddit. Hmm, if people don't want to talk about technical issues/help requests and they don't want to talk about Javascript in general....... 
I don't think it's outdated. A security-conscious user may wish to run two browsers- one with js enabled for SPAs etc. and the other with js disabled for everything else.
&gt; and the other with js disabled for everything else. I couldn't imagine what the "everything else" might be with modern web mail sites, bank sites, etc. It seems like everything cool and useful uses a good dose of Javascript.
multidimensional arrays in JS are slow, but https://github.com/mikolalysenko/ndarray is a fast implementation on top of typed arrays
 __proto__ doesn't work in old IE. What's the difference between this and using Object.create? say: var clone = Object.create;
No, thanks. :-) `__proto__` is a non-standard property. Also your solution looks pretty ugly, I like constructors more. They are easier to write and use.
look into how the latest TOR hack worked. Disabling JS is still a valid security measure.
It sounds kinda like you are trying to implement exactly what D3's enter/exit stuff is meant to do for you. You shouldn't need to 'extract the delta' as you say, because .enter() and .exit() should give you the added/removed deltas after you have bound the new data to the selection (with selection.data()). Then you only need to remove the stuff from .exit() rather than everything. I think what you may be missing is the optional second function parameter to selection.data(), which will allow you specify a key so it won't 'lose the bindings' like you say. By default without this D3 uses the array index for the key which can really mess you up. Hope this helps!
So when will you be able to use it? In 20 years? :-) As I know, Harmony specification is still in development.
No, I like this: var TalkingDuck = construct({ inherits: Duck, init: (@firstName, @lastName = "Duck", color, @canFly = true) -&gt; {}, members: { quack: () -&gt; { #super.quack(); console.log("My name is " + @name + "!"); } } }); which produces: var TalkingDuck = construct({ inherits: Duck, init: function (firstName, lastName, color, canFly) { this.firstName = firstName; if (lastName === undefined) { lastName = "Duck"; } this.lastName = lastName; if (canFly === undefined) { canFly = true; } this.canFly = canFly; }, members: { quack: function () { this.superCall("quack"); console.log("My name is " + this.name + "!"); } } }); 
actually if the constructors were put in different files and had proper jsdoc comments it would look better. Plus that inheritance is usually wrapped in another function. Try using Object.create and it looks great! If you hate that boilerplate then do it in coffeescript
clone function can be implemented though `__proto__`, Object.create, or function-constructors (JavaScript 1.0). The difference with Object.create is that Object.create second argument are descriptor ({value: 777, enumerable:true}), which is uncomfortabl–µ. In clone function the second argument is simple object.
As a little experiment, I just tried disabling JavaScript in Chrome. Ironically, I couldnt up or downvote this post, or leave a comment.
I am using D3 in my internship. I'm not at work right now, but as far as I can remember I only ever use .enter() when first creating the lines/circles/bars etc. When the data structure updates, if the number of elements I need to display remains the same I just call .data() on the elements and then modify the attrs and styles. If the number of elements changes I remove the existing elements and recreate them. Otherwise you're code is going to get complicated. The only parts where I have had to do this aren't performance critical, so I haven't really had to test it. With regards to the display and hide. I remember coming up against this issue. I can't remember how or if I solved it though. I have a feeling I may have resorted to removing elements and recreating them when I need them to be redisplayed. Ensuring that everything is drawn in g layers so that z ordering doesn't go to shit. &gt;I don't like either approach. The first approach is complicated and requires several objects. The second approach still requires several objects, but has no single object representing my data. I have essentially gone about things using your first method. I have an object which represents the data, an object which handles the drawing and a multitude of objects handling different aspects of the interactivity. Then there is one "glue" object which pulls everything together. It's all rather messy. I did attribute this to the evolutionary (in other words, badly planed) nature of my development process, but after reading you're comment I'm starting to believe it's the only way possible. 
1) It's not CoffeeScript, it's my language. :-) https://github.com/RadekCZ/Expanso 2) Yeah, which is part of my library which I use in every project. If I used your solution I would have to say good bye to IE users and deal with stupid practises like omitting the "new" operator etc. Constructors are just fine, we don't have to reinvent wheel. ;-)
I'm able to use it right now in nodejs, chrome, firefox, safari, opera, IE10. It in [working draft](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-13.5). Very small chance that proto will be deleted from it. ECMA Script 6 target release date is December 2013.
Disabling JS has nothing to do with security through obscurity.
Mostly because [that checkbox was/is a bit dated](http://noscript.net/), as well.
really?
I'm able to use my `clone` function since Internet Explorer 3.0 :) coz it can be emulated though function-constructors (javascript classes).
I still believe in graceful degradation, so no.
I respect Zakas; as a javascript guru I think we should listen to what he has to say. I do not however agree with him in all cases. I do think the future is moving towards a more powerful frontend and backend as a broker of data.
yes. somehow it's to prevent spamming
Are you sure you are using the 'new' keyword? http://jsfiddle.net/pU4xD/ appears to be working fine.
no goodbye for IE. As I told, my library can work on all browsers. clone function can be implemented though __proto__, Object.create, or function-constructors (JavaScript 1.0, IE3.0)
how are you creating the RectangleContent? it works for me: function Content(names){ this.names = names; this.parameters = []; } function RectangleContent(){ Content.call(this); var names = ["rectangle", "box"]; this.names = names; } RectangleContent.prototype = new Content(); RectangleContent.prototype.constructor = Content; r = new RectangleContent() RectangleContent {names: Array[2], parameters: Array[0], names: undefined, parameters: Array[0], constructor: function} r instanceof Content true r.parameters [] as a side note, i like to do `SubClass.prototype = Object.create(SuperClass.prototype)` this way you dont actually run the constructor (so you dont always have to write your constructors as if they can take no arguments) 
But then there are more than just 3 lines. :-) And I still find it just more comfortable to use predefined constructors and then just make instances of them. I don't have to remember properties names etc., just make `new Constructor()` and it's done.
Updated the post with the variable code - also thanks for the tip!
LOL!
&gt; Albeit no flash or pazzaz but it will work. That is getting harder to do. Modern Javascript use is more about functionality, like ajax calls and it will onkly get more so with things like HTML 5 history manipulation.
it's supported as far back as IE6 according to this MSDN article http://msdn.microsoft.com/en-us/library/ie/55wb2d34(v=vs.94).aspx so safety wise you're pretty safe unless you're developing dinosaur code for dinosaur browsers
[reddiquette](http://www.reddit.com/help/reddiquette) 
Sorry, but your projects has no future. What happens if one of your project comes to the other dev team? Over time, your language and libraries will be replaced by more competitive solutions. And, I think, choosing your library in your project based only on your authority, not library benefits. Who will choose to learn some custom language/library, instead of classic way?
You should think of it from the point of view of your application's audience rather than the world at large. My latest project requires that you let us access your Google contacts. The intersection of people who will do that and who disable Javascript is the Empty Set, so it's not really a consideration for me. Building a news aggregator or other content consumption service? May want to fail more gracefully.
Oh wow, this strategy had never occurred to me for creating objects. I knew about using object literals for objects, and the idiomatic constructor/prototype way, but not mixing the too. In naive tests I've done, your strategy is faster than the idiomatic way (although for classes with large numbers of fields, I suspect it will be slower for object creation). This is useful to me, because I'm building a compiler, where it aim to output to browser specific non-idomatic JavaScript. So in my language, I am allowed to do silly stuff like this. However for real world use, I would not recommend this for cloning objects. However it's cool to know, if you ever did one to drain out as much performance as possible.
The theory as I understand it is that if the numbers lie, bots will be unable to detect if their votes were counted.
maybe constructors with bunch of add-ons would look better, but works slowly, and spawns unnecessary entities. Why I need constructor? for initialization? Every time I should write automatic code just for data transfer from arguments to the instance object? I don't like it. This transfer is unnecessary in most cases. How to use Object.create? like that? var talkingDuck$ = Object.create( duck$, { firstName: {value: "", configurable:true, enumerable:true, writable:true}, lastName: {value: "Duck", configurable:true, enumerable:true, writable:true}, quack: {value: function(){ duck$.quack.call(this); console.log("My name is "+ this.name +"!"); }, configurable:true, writable:true} }); 
If you want to not be able to use 95% of all web sites then sure. 
Easy to find out - just add code to the browser to secretly contact you when a user uses the option. Ha ha.
Here are some oldish statistics on how many users have JavaScript disabled - 1-2%. http://developer.yahoo.com/blogs/ydn/many-users-javascript-disabled-14121.html I don't think it's a point worth arguing about. Just do the numbers, and see whether it makes sense to implement a no-js fallback. Or conform to an accessibility standard. Or make the content multilingual. The more the better obviously, but it's not free.
The web was invented in late 1989 by TBL...
I find it is read only in IE 10.
Psh, ontogeny recapitulates phylogeny.
ahh
And more to the point, how much do you really care about them? The person who gets pissed at you for not supporting *his desire* to be able to browse with JavaScript disabled isn't someone you want to deal with anyway... it's pretty much a worthless demographic.
I'm doesn't need to inject prototype, please note that second argument should be only object literal, like this {}, so it will behave like: function clone(proto, state){ var descriptors = {}; for(var key in state){ descriptors[key] = Object.getOwnPropertyDescriptor(state, key); } return Object.create(proto, descriptors); }
Does it need to be at the browser level, or is there any security downside to using an extension to disable JS? My feeling is that a user who is not savvy enough to install a browser plug-in is probably not savvy enough to understand the tradeoffs of disabling Javascript.
**Important note for Chrome users:** All those apparently [NoScript-like](https://chrome.google.com/webstore/detail/notscripts/odjhifogjcknibkahlpidmdajjpkkcfn?hl=en) Chrome extensions do **NOT** stop JS from running. Chrome has no API for truly disabling JS from an extension; you can only do it browser-wide. As such, these extensions can't stop inline JS from running... and including other scripts. Proof: [Go here with one of those worthless extensions installed](http://isjavascriptenabled.com/).
Indeed. Every single vote count you see -- comments and posts -- is fudged to some variable degree X where X gets bigger the more votes a given item gets. It is *impossible* to get an accurate vote count out of reddit unless you are an admin with access to their databases and whatnot. To everyone else, the scores are merely a rough idea of how a post or comment is doing.
That's a pretty big non sequitur and fails in its goal to illustrate that disabling JS is unreasonable. Unplugging your computer is in fact not a valid security measure when the resource or function you're securing requires the computer to be on. Having said that, disabling Javascript *is* a completely reasonable security measure, especially if/when you're visiting untrusted sites. Javascript's ubiquity is its bane as well as its boon, as it makes a handy tool for those with questionable ethics. Until that problem is solved I'm going to selectively disable Javascript with tools like noscript and urge others to do the same. 
Try CoffeeScript.
`&lt;a href="javascript:void(0);"&gt;` Yeah, don't take reddit as a shining beacon :) Also note that you could *read* the content. That's usually enough. For more irony, see [Chrome's infamous download button snafu](http://adactio.com/journal/6022/).
Yes? Then why MS add it support? I can do the same in IE9 :) Object.defineProperty(Object.prototype, '__proto__', {get: function(){ return Object.getPrototypeOf(this); }})
That's only half of my customers!
What's that have I do with scripts? That's what accessibility markup is for.
If a user has JS disabled, they are seeing a broken web anyways. While your site should gracefully degrade, don't spend too much time worrying about the small percentage who have willingly/unwillingly turned this off. 
Yeah, I used to believe in progressive enhancement too. But there's not going to be any third-party scripts on my site except for those techies using Greasemonkey (and then compatibility is up to them not breaking it themselves), and as mentioned before the number of people who disable it is vanishingly small. If scripts aren't downloaded completely something is wrong enough with the Internet that they won't be able to use the site anyway. And if their AV or company firewall is stupid enough to block one script file while leaving everything else alone, why should I work around a problem on their side? And then to support those weird exception cases, I'm stuck making multiple code paths all of which need to be tested by QA. No thank you. I went through that inconsistent mess long enough, and I for one welcome our new standard web platform overlords.
Damn, that's disappointing. I assume Firefox has deeper plugin integration, allowing the stripping of &lt;script&gt; tags during network transmission, before they even hit the parser? EDIT: Hypothetically, Chrome could capture and cancel page requests, pull site contents via Ajax, strip &lt;script&gt; tags and onevent attributes, then inject HTML manually. It would probably break things relating to cookies and HTTP headers, though, so probably not really feasible.
A couple of problems: - rename the params in the forEach function to match what they are: value, key (or index). - splice without the second argument will remove everything after and including the index you specify - the first item you splice may change the indexes in the array (of items after the one removed). - you are passing the object in instead of the index Without changing your basic approach, the following will work: app.controller('TestCtrl', function ($scope) { $scope.items = [ { key: 'first', value: 'First Value' }, { key: 'second', value: 'Second Best' }, { key: 'third', value: 'Third is Best' }, { key: 'fourth', value: 'The Fourth Value' } ]; $scope.remove = function() { var item, tmp = []; angular.forEach($scope.items, function(value, index) { if (value.checked) { tmp.push(value); } }); while (item = tmp.pop()) { $scope.items.splice($scope.items.indexOf(item), 1); } }; }); http://jsfiddle.net/bLfu4/1/ Here we just dump values to delete into a temp array and then slice them off one by one. lodash/underscore have a filter method that might be nicer. Up to you. 
I'm not sure I understand your delima, it sounds to me like you are trying to do way more work then is necessary. You want to only update the points on the line that have changed when the data has, but, assuming you are using path elements for the line, you have to regenerate the entire path's d attribute every time the data changes anyway, so it would be much more beneficial to remove the old path and then regenerate it by passing in the new data to a function If you only have one line you have to draw, then draw the entire SVG node again, if however you have some bars that are always the same, or something else, then you can just save the line node selection as a variable/attr on an object 
&gt; I assume Firefox has deeper plugin integration, allowing the stripping of &lt;script&gt; tags during network transmission, before they even hit the parser? Presumably, yes, but I won't claim to know how NoScript works. But [here's a thing I glanced at](http://optimalcycling.com/other-projects/notscripts/limitations/) when first checking out NotScripts before uninstalling it.
Also, if you don't mind newer javascript (1.8) or are willing to polyfill reduce (or just don't care), this will work too: $scope.remove = function() { $scope.items = $scope.items.reduce(function (result, item) { if (!item.checked) { result.push(item); } return result; }, []); };
What are the pros/cons of using CoffeScript?
Exactly this. We can debate technical details all day, but at the end of the day if you are CEO you want to know what the ROI is of making a site accessible. You come to a CEO and say "I need to spend an extra 4 weeks to make the site accessible for the 5% (very generous number im sure) of people that are visiting without JS", he/she is going to laugh at you. Unless you are a large established company, you can't spend a month trying to capture such a small fraction of the market. There is an upfront cost and a long term maintenance cost. Now im not talking about a brochure/informational website. I'm talking about modern web app.
The sad thing is that JavaScript could be fixed, but it would break too many business models. The are two major problems that I'm aware of bound mostly to the needs of advertisers and web analytics firms. The first is allowing cross-domain requests through script tags, img tags, link tags (and others?), which allows 3rd parties to control content served through your site. There is also too much information available to javascript about your browser which can be used for fingerprinting. Outside of advertising and analytics, what really relies on these features? Plugins? They have low level access to the browser - that's not JavaScript's business. You can argue that CDNs are a good use case for cross-domain requests. JSONP or simply including scripts from other domains have allowed some pretty cool services. Sure. But where we control the server, we can use server-side components to get the same data. We may not be able to afford that luxury anymore. Maybe we just need to face the fact that it's just not good enough to do it this way anymore. Too many people are put at risk. In other threads where this comes up, there is a lot of backlash because advertising is some peoples' income stream. It's a way of covering costs. It's a way of making it worthwhile to produce the content at all. I really do get that and I really do get the scale of the industry I'm talking about and how positively *deadly* it is to some business models. I know my words can be bent to sound like I'm saying I am entitled to free content. All I'm really saying is there are consequences to weigh.
right? trying to play sympathy card or something? http://webaim.org/projects/screenreadersurvey3/#javascript Why can't screen readers have javascript?
Well then... I'll take a look at it, thanks!
Its just a lot simpler: class Content constructor: (@names) -&gt; @parameters = [] class RectangleContent extends Content constructor: -&gt; super [ 'rectangle', 'box']
Sorry I meant to reply to your question about pros/cons so see that comment.
This is the most ridiculous debate. Not only is it a waste of developers' time to accommodate these folks with tinfoil hats, it's an insane and grossly inefficient budgetary request for those responsible in management.
TamperMonkey, like GreaseMonkey, also has access to `GM_setValue` and `GM_getValue` which can be used to log information.
The page is constantly refreshing, and the script is reloaded each time. How can I incrementally ramp up some variable I define for GM_setValue whenever a condition is found to be true?
I disagree. Universally disabling javascript (which is what we are talking about) renders a good portion of the internet unusable. Depending on what sites you use, it might break the entire Internet. In that case, it is akin to, if not exactly alike, unplugging your computer.
A very informative comment, thank you.
They really are not. Even a first party cookie could be used to track you, or your browser fingerprint, or your IP. A combination of all of these can be shockingly precise and hard to obfuscate. Furthermore, if a company is trying to do tracking across multiple third party sites all they need is a shared database and a script running on those servers that submit some or all of this info.
But that would be read only, you can't write to '\_\_proto\_\_'.
I have a checkbox on my menu bar to enable/disable js (Opera). It would be a real hassle to click through preferences all the time. If you don't have that interface people are going to either leave it on or off and off just doesn't work. But since I do have that option, I disable js whenever a website does something obnoxious with it or somethings broken on the page or it just takes to long to load because of the scripts. So my answer is definitely not. Let's not reduce the internet to the least common denominator.
I was just getting started on a js crypto poject so this is exactly what I needed to read. Those js crypto articles did strike me as preachy at best and hysterical at worst. In any case they all assume that the only use of js is in a browser which is far from true.
Nope. ETags and browser cache expiration headers FTW.
In that case, I don't really care because whatever reason they are doing that means they are going to require all sorts of special accommodation and it's not worth my time trying to get them to become a customer.
If the variable isn't being used, it isn't necessary as a named parameter in JS. However, it's generally useful for you to include these, just for visual purposes (and in case you change the code later). Also, I'm inexperienced with Angular, but very experienced with JS, and I'm not sure why you wouldn't just use Array.prototype.filter. The use of reduce is unnecessary: $scope.items = $scope.items.filter(function (value) { return value.checked; }); Furthermore, I'd recommend you rename your function to be something more descriptive. Rather than calling it "deleteItems", calling it "deleteCheckedItems" might be a better idea, long term.
That's how Google Analytics works. The JavaScript code simply loads an image. This is also the way you do tracking of email newsletters and why marketing emails tend to have tiles of images. Your psychologically forced to click "Download Pictures" so that it'll download the tracking image.
Exactly. My point was that it would render your computer useless, which most would find to be the case using the modern internet without JS enabled. Asking 99% of web users to disable JS is unreasonable because many of the sites they depend on would be, at best, half broken. @Laziness fails to disprove my point other than to say nuh-uh.
[Checkboxes that Kill Your Product](http://limi.net/checkboxes-that-kill/)
We aren't talking about *your* site - we're talking about sites in general. And sites in general usually include a *lot* of third party scripts - Facebook likes, Google+ sharing links, third party social sharing widgets like AddThis or ShareThis, web analytics scripts, ad-placement and ad-tracking libraries, etc, etc, etc.
No it breaks your ability to browse sites that can't gracefully deal with js turned off - meanwhile the Internet remains intact.
There was gopher before that.
Please read comment, to which I'm replied
I like search engines to send me traffic. That's why I want pages to be indexed. No graceful degradation, no crawling, no indexing.
I do not understand. Read which comment to which you are replied? The one above, that I replied to? That only gives you a read only version of proto, you need it to be writable for your 3 line solution to work.
I created this a few months ago. [Rotating Menu](http://teddyderkert.se/tests/rotating-menu/). Should work in webkit browsers and with touch. I use 3d transforms so might not work well on older machines.
I see you got your problem solved. The reason for it not working for you, but not creating any errors, seems to be because JavaScript hoists function declarations, but the code for making the inheritance work doesn't get hoisted. A great description of how JavaScript hoisting works can be found [here](http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/).
Thanks :) This strategy is **very good for classes with large number of fields**: 1) it's more understandable, if you looking on not every day usable code: clone( duck, {firstName: "Donald", color: "White", canFly: false, age: 11, size: 23}) // vs new Duck("Donald", "White", false, 11, 23)// what is "White"? Maybe it's last name? What is false? 11? 23? 2) It's even more faster (for class creation). What will do some inherits function? It will iterate though some object literal, analyze it properties, and copy them to the instance. What will do clone? It will only replace one property of one object. Thats it. 3) It not obligates you to write unnecessary code (constructor) only for data transfer from arguments to the instance. Why we should use array of arguments as data structure to initialize object fields? The best structure for this data is object literal. This approach doesn't need additional code for converting array to object.
the internet is so much more than html.
things i can do on the internet whilst having javascript disabled in my web browser: email, steam, skype, IM, reddit, play multiplayer games, do my shopping via apps, play music via spotify, watch youtubes, the list goes on. things i can not do: go to a specific website that absolutely requires javascript to function. 
I want to say, that I can add proto support to the IE9, as microsoft added it to IE10. There is no need for this property if it not writable. My solution can work on IE9 through Object.create, and older, through constructors.
Have you tested your code in IE 10?
Read these two articles, then reconsider your position: http://jakearchibald.com/2013/progressive-enhancement-still-important/ And: http://blog.easy-designs.net/archives/the-true-cost-of-progressive-enhancement/
The untrusted sites I visit still require JavaScript. 
for-in loops have their pros and cons: they achieve better results on sparse arrays, but are generally slower otherwise.
&gt; What happens if one of your project comes to the other dev team? They will use the compiled version which is pretty readable JavaScript. :-) &gt; Over time, your language and libraries will be replaced‚Ä¶ Maybe yes, maybe not. You can't say now. :-) &gt; Who will choose to learn some custom language/library, instead of classic way? Yeah, right, who will learn your library instead of using classic constructor way? :-) By the way, the function from my library just creates a constructor and you can use it like it was created the classic way. You don't have to use whole library in your personal project if you want to use one of my constructors.
&gt; This strategy is very good for classes with large number of fields Classes with a large number of fields are bad classes. &gt; it's more understandable new Duck({firstName: "Donald", color: "White", canFly: false, age: 11, size: 23}); I can do the same. :-) &gt; It will iterate though some object literal, analyze it properties, and copy them to the instance. Not necessarily. There is possibility to use `__proto__` to change the object's prototype if it's supported but using this to create instances of some class/constructor/whatever is not really good practice. &gt; It not obligates you to write unnecessary code I can write function/precompiler which generates this stuff for me. And it will be more readable for me. Simply, your function is only usable when the constructor doesn't do anything else. When it doesn't check values which come to the function. And in the production this is very very very rare type of constructors. :-)
No, it won't act like this. It really injects the prototype. :-) And it doesn't need to be an object literal, it can be any object.
&gt; It indicates that used programming language is lacking of some functionality But JavaScript really lacks of some functionality. No existing language is perfect. &gt; As you see, my framework Stop calling it a framework. It's not a framework, it's just and only a library. Know the difference between those terms. &gt; do that things by one function in 2 lines As I said, only for primitive objects which don't chceck values which come to the object. If I needed this kind of object I would just use object literal as a storage and wrap it in another advanced object.
Why somebody will learn my library? * It's very simple, only one function. * It use classic (in other languages), the true prototype-based paradigm. * It has [a lot of documentation](http://google.com/search?q=__proto__).
&gt; It use classic (in other languages), the true prototype-based paradigm. No it doesn't. The true paradigm is that you create an object which inherits from another one. What you do is that you create an object which inherits the Object.prototype and change the prototype to your custom object. That's a little bit hacky and I'm not sure if you should be able to do this in any language. When it works it could be useful for easier creation of inherited prototypes but I would still use it as a part of a constructor.
no I don't think so.
u/rhysbrettbowen basically has it right, but as an alternative, if the array size is fixed, you can also use a 1D array. Instead of calling `myArray[a][b]` you can use `myArray[a * width + b]`;
JsVerbalExpression is nice tool for small regexp and for one who is new to regexps, but I don't think it is useful for complex expressions.
&gt; It's not a framework, it's just and only a library. Know the difference between those terms. Khm... and what is the difference by your opinion? 
I was hoping I wouldnt have to learn regexp if I found a script to make it easier. Thanks!
F12 pulls up a quick preferences menu in Opera 12.
Library is just a pack with some functionaly which can help you with writing of your application. For example it contains predefined objects and functions for routine stuff. (Like creating of constructors.) Framework is set of rules and design patterns which describes how the application's code and architecture should look, how the constructors and packages should be named, describes the structure of the filesystem etc. It can contain (but not necessarily) additional libraries which will help you to keep up these rules.
Yeah - mercenary though it is, ads rely on javascript, if they've got JS disabled they're not seeing my ads, so I'm not going to give myself a ton of extra work for no reward. Make sure the absolute basics work without javascript, then move on.
https://panopticlick.eff.org/ Your world is an illusion.
Not yet, I'm using mac and don't have the IE10
http://regexpal.com/ helps you test regular expressions. Other than that, it's not as difficult as it looks. Escaping: \\ == \ \n == [line feed] Special chars (square and normal brackets, dot, plus) need to be escaped Character groups: \d, \D = [number, non number] \w, \W = [word characters, non-word characters] \s, \S = [space, non-space] [012A-Da-z], [^xyz] = [character group, negative character group] Multiplicators: ? = 0 or 1 times * = 0 - inf times (greedy, will match the biggest string possible) *? = 0 - inf times (non-greedy, will match the smallest string possible) + = 1 - inf times (greedy) +? = 1 - inf times (non-greedy) {n,m} = n - m times Matches ( ) = match (extra argument for replace callback, $1..$9 in replace string) (?: ) = non-match (will test for the string but not save it for later) (?! ) = non-unmatch (will test if string is not present nor save it for later) That's most of it.
Learning RegEx is defintiely worthwhile in one's programming career. You'll be able to use it in a lot of different occasions. Probably more useful than using something else that hides it from you. This is a tool I got about a decade ago and still use to help sanely build/debug regex expressions: http://www.regexbuddy.com/ This is a damn fine resource about regex: http://www.regular-expressions.info/tutorial.html Good luck!
My approach describes how the application's code and architecture should look. That's why I'm call it framework.
Nope. You gotta learn it. There's no easy way out. But I think I know why you're having trouble. See, you're probably looking at a sample regex, trying to figure out what it does. That's the wrong approach. It works great in most other cases, but see, regexp's are special: they're *write-only*. You can't read them. I can't even read my own. If you want to know what one does, best you can do is recreate it. To this end, always put a sample of the text you wish to grok next to your regex. That way, when you come back to it to figure out what it's doing, you can forget the regex that's in front of you and look at the text it's supposedly groking. With regexes, the more you create the better you'll be at it. Reading them doesn't play into the equation.
I tried, and it doesn't work, as \_\_proto\_\_ is read only.
Good points. Completely forgot about native filter ;P
&gt; your $ postifx is just a bullshit, sorry can you please describe why? IMHO this is the best way to separate instances and types without conflicts with existing FunctionTypes, angular and other libs usage of $. duck$ is the similar to Duck.prototype. My framework provides the true prototype-based OOP, which is not fully implemented by the JavaScript built-in methods.
Yeah just bite the bullet and learn them. Complex but powerful and knowing them opens up avenues in your code that you would have not known. 
&gt; this is the best way to separate If you don't use constructors, just call it Duck. Your objects inherit from it, it's a template, so call it with first capital letter. That's the standard way. &gt; without conflicts with existing FunctionTypes And that's, dear friend, why we use modules/namespaces/packages/whatever. To avoid these stupid prefixes and postfixes. &gt; My framework provides‚Ä¶ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª You evidentely didn't read anything I wrote, right? &gt; which is not fully implemented by the JavaScript Can you add a link to some professional literature which describes this it the true prototype-based OOP? I am quite sure you wouldn't find anything serious. Because prototypal OOP is very free. The main rule is that an object inherits from another object and a prototypal chain can form. Instead of using the class -&gt; instance pair. I can say I use prototypes and use them the right way even when I use constructors. That's it, deal with it and don't write such things when you don't have serious sources to support your opinion.
&gt; If you don't use constructors, just call it Duck I don't use, but 3rd party libs in my project used it. And, if I call it Duck, it will –º–∞–∫–µ confusion. professional literature? to start: Antero Taivalsaari. Simplifying JavaScript with Concatenation-Based Prototype Inheritance. Tampere University of Technology. Department of Software Systems. Report 6, ISSN 1797-836X, ISBN 978-952-15-2275-8 [PDF](http://lively.cs.tut.fi/publications/TR6-JavaScriptConcatenation-Taivalsaari.pdf) James Noble, Antero Taivalsaari, Ivan Moore (eds), Prototype-Based Programming: Concepts, Languages and Applications. Springer Publishing Company, Singapore, 1999. [amazon](http://www.amazon.com/exec/obidos/tg/detail/-/9814021253/qid=1055505086/sr=8-3/ref=sr_8_3/002-6735171-0072012?v=glance&amp;s=books&amp;n=507846) 
I just tried a few sites with javascript disabled, 66% of them completely required it. Blogspot, Google Maps, &amp; USA Today did not even display a notice, they just broke with no explanation as to why. Every other one I tested did function, but had strange quirks and certain buttons would not work. But, at least you could navigate through most of the site. No one is arguing that sites which do not require JS work with it disabled - obviously. What I am saying is that an incredibly amount of high profile sites do require it. If those are the only sites you frequent then you can literally render the entire world wide web useless to you by disabling JS.
Sure but that's not the Internet's problem if I choose to turn off javascript or not visit 'high profile sites'. If they run sites that don't conform to standards for HTML that's not the Internet's problem or mine.
This http://www.ultrapico.com/expresso.htm is hands down one of the best regular expression tools I have ever used. It is based on C# regex but for getting the fundamentals and testing regex it is unbeatable. My last job dealt with log parsing, and over 6 years I have yet to find something more user friendly. You do have to register, but I think half of my last company registered and had no issues.
I never said it was the Internet's problem, it is obviously your problem. It is also not the Internet's problem if you unplug your computer for security reasons.
That's one way to look at it. Another way is that it's a big Internet and I can choose just to go somewhere else too. Also it the term 'breaks the Internet' was you choice of words and is nonsense.
That's a good point. The more we talk you have convinced me - to unplug my computer and just use a notebook, a calculator, and go outside.
We can go back to the 90's where people did advertising with text and img tags. It's less effective obviously, but I don't think it's a horrible alternative when the choices are "they used noscript and didn't see a add, or they used noscript and saw a less effective add"
Sorry blind and disabled people aren't worth being your customer? That's a pretty fucking ignorant statement. 
In the 90's we had text advertisements. 
related: my article on how we use backbone. I talk about AOP and using functional mixins to share functionality across views - also very useful at untangling a messy existing Backbone application: http://modernjavascript.blogspot.com/2013/04/backbone-at-dataminr.html Since writing that I've made a couple of other plugins so also checkout anything starting with Backbone on my [github](https://github.com/rhysbrettbowen) if you're interested
I think he was just doing a hand wave about the situation. I currently work with digital analytics and there are three general types, the only one that benefits from the &lt;noscript&gt; tag is general analytics, the purpose of which is to track customer trends. The biggest mistake companies make in analytics is saying they want 100% of people tracked, what's actually important is to get a sufficiently large sample of the majority of your users (98% or greater) and then run analysis. Given that the number of people who would have JavaScript AND images disabled would be well under .1% they wouldn't sufficiently impact the trend, which is what you really care about.
Good to know. Reminds me of a social/commerce site I made a few years back. Didn't want to waste server power calculating views of a thread, so I just multiplied the reply count by 4 to get the views. lol
Most web-based email clients require JS to function well, if not completely. Many, if not most, people use gchat for IM, which requires JS. The Spotify web interface requires JS. And seriously, online shopping via apps? Do you really consider this a viable scenario? You've come up with an extremely contrived example here. I don't deny that it is physically possible to do browse the web without JS, but for the vast majority of people (read: IT professionals), it just isn't feasible. Good luck explaining the nuances to your non-technical relatives.
for email i use a native client, for IM i use a native client, for spotify i use the spotify app, for shopping i tend to use the amazon/local super market app. the point i am making is that turning off javascript does not close the internet as some would try to make out. the internet is more than html, its more than websites, so much more. 
*smacks forehead* Oh, thank you so much!! Yup, that was it :D
Thanks, but see other reply, it was something else :) https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes &gt; An invalid keyword and an empty string will be handled as the anonymous keyword.
Glad to help!
the thing is- the people who have javascript turned off in their browser did so on purpose, and if your application doesn't function without JS... they are just going to bounce to a competitor. either its a person with some sort of cognitive/physical disability (using a screen reader etc)... or a user that's big on online privacy.
Until the library support is beefed up to better handle things like: statitstics, file IO, multidimentional arrays and calls to external system processes it just doesn't fit as a server side language for our use. 
Thanks!
Array.filter takes a function as an argument. That function must return truth-y or false-y values. If the function returns true for an element, then that element will be in the returned array. If not, then it won't. What you would want would be this: var array = ['milk', 'bread', 'cheese']; var newArray = array.filter(function (value) { return value !== "milk"; }); Alternately, you could do: var newArray = array.filter(function (value) { if (value !== 'milk') return value; }); This *would* work, but would be extremely bad, syntactically speaking. Your functions should either *always* return something, or *never* return something. That something could be null, or some other false-y value, but getting into the habit of writing functions that might not return anything at all is bad. Like, crossing-the-streams bad. This, however, would not work: var newArray = array.filter(function (value) { if (value !== "milk") ? return value; }); The reason for that is because of the "?". It's the "ternary operator", and it's used for "if expressions". An example of proper usage would be: var newArray = array.filter(function (value) { return (value !== "milk") ? true : false; // OR: (value !== "milk") ? return true : return false // But this is not something I'd recommend });
excellent. thanks for the link. as someone who tries to use backbone wherever possible, i'll be watching through these tonight.
thanks for sharing, listening to the keynote now while working. 
"Ignorant"? How? It comes down to cost/benefit. It's not worth catering to them because they are less profitable due to the extra effort which must be expended. There are niche companies that focus on specific markets like that, but in general it's a lot of work for little payback. So no, for me, it's not worth the effort of trying to make them my customer. There is no value judgement there about their worth as human beings, and the fact that you seem to imply that's what I think is A PRETTY FUCKING IGNORANT STATEMENT. _Edit: Lol, downvote with no reply means you were wrong and didn't want to admit it. :-D_
Nice. I *want* to like Backbone, but I'm having a hard time enjoying it. Getting more perspectives on building large apps might help.
That's actually refreshing for once. tl:dr Most everything will be the same from here on out, but we will just make it better and faster.
Here are the slides from this talk: http://www.slideshare.net/nzakas/enough-withthejavascriptalready
People are still using this fail of a framework?
I found it funny that his example of Airbnb didn't actually remove JavaScript. They just moved it to the server. Then again, most of his talk was about moving code off the client into the server... not so much about JavaScript itself.
Sorry, boss, I will care about it. Don't think. Ever.
When I was a young intern a Wizard gifted this to me, it started a wonderful journey: [Design Patterns](http://en.wikipedia.org/wiki/Design_Patterns).
Thanks for this. I've been listening to these all day using my chrome extension I built using Backbone! Here's a playlist containing all of the videos from the conference: http://share.streamus.com/playlist/fa5260712469/2013_backboneconf_talks You can download the actual player here: http://streamus.com Cheers :D
I am currently in the midst of building out a very large app using backbone, I was using other MVC frameworks like knockout prior, but....I just fell in love. Slight learning curve but its super awesome :D /fanboy
a couple of reasons - constructor functions may not be as fast when they are declared, but they are: - faster when you instantiate - faster when you use them in functions (because the run time can optimize based on their type) - you can check their type with instanceof - well understood - compatible with IE - non destructive for existing prototypes 
 if (myCondition) { // The default value is '0' and the unary '+' forces it to be an integer var counter = +GM_getValue("counter", 0); counter++; GM_putValue("counter", counter"); } You should read: * http://wiki.greasespot.net/GM_getValue * http://wiki.greasespot.net/GM_setValue 
You might as well just read the wikipedia articles on design patterns. They're more up to date, and have multiple language examples.
If you want back to IE7 then you're kind of limiting yourself. I'd say try out other languages that can compile to JavaScript - checkout http://altjs.org/ Also try more functional patterns using things like map, reduce etc. They can be shimmed and learning things like clojurescript may help you with that. Or Traceur which should allow you to experiment with upcoming features that compile down to earlier versions of JavaScript
Can you write an implementation for Function.prototype.bind? Personally, I found that I learned a lot about using the language by implementing all of the functional methods using nothing more than my knowledge of what they should return and what params they should take. 
It's a library, not a framework.
 Function.prototype.bind = function(obj) { var func = this, args = Array.prototype.slice.call(arguments, 1); return function() { return func.apply(obj, args); }; }; What do you count as "all of the functional methods"? apply / call / bind?
Something that really opened my eyes to how dumb I am was to read the underscore.js library. The patterns are so beautifully abstracted. It's not really advanced javascript, more like advanced functional programming. Anyway, I'd recommend that. http://underscorejs.org/docs/underscore.html
It should be logically faster (I mean without any optimizations), you just change one existing property of an object literal. But it still doesn't solve the fact that it's useless when you have to check values which come to the object. And in real applications you really have to. (Have you ever written any?) &gt; The constructor is unnecessary entity in many cases. No it isn't. It solves all cases when bad data could be transfered to the object. &gt; 10-30 times faster You've written it bad, here is the right example: http://jsperf.com/razem-proto-test As rhysbrettbowen said, it uses the optimization of constructors to act like types. So don't tell me anymore it's faster, sweetheart. :-)
Two relatively recent books have been interesting (to me at least) for making sure I know the ins and outs of JS: [Secrets of The Javascript Ninja](http://www.manning.com/resig/) and [Functional Javascript](http://shop.oreilly.com/product/0636920028857.do) 
The ability to program and think in the abstract.
Informative, thanks
Map / reduce / filter. I guess my point was more that I got a lot of value out of implementing the things I had gotten used to using constantly.
You may have done this, but I enjoy developing Backbone apps. Something about MVC &lt;-&gt; MVC/MVVM makes me all warm and fuzzy inside. Try node.js?
What's the use case for this? It's very clunky compared to // regex definitions.
This is a great idea. I once was asked to write a forEach polyfill at a job interview, and found it a fun test
Mostly, it was just fun to build. But, on the edge of plausibility, if you have really complex regexes, the compact, single line form may not be very readable. I searched "long regex" and saw the following: \b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b [here](http://www.regular-expressions.info/examples.html), as one example. That's really not readable very easily (though, if one took some time, one would get it eventually). But if you could .addMacro()... you just might be able to express long, complicated regexes, in a way that is *more verbose* but also *more easily grokked* by a developer. And from a maintenance standpoint, that can easily win out. EDIT: actually, for fun, the above example: regex() .addMacro('0-255') .or() .start() .literals('25') .anyFrom('0', '5') .close() .start() .literal('2') .anyFrom('0', '4') .anyFrom('0', '9') .close() .start() .any('01').optional() .anyFrom('0', '9').optional() .anyFrom('0', '9').optional() .close() .close() .close() .macro('0-255').capture() .literal('.') .macro('0-255').capture() .literal('.') .macro('0-255').capture() .literal('.') .macro('0-255').capture() .peek(); The 'anyFrom' method doesn't exist yet, but that's a small oversight that could be fixed easily enough. Verbose? Certainly. But I think it's also quite readable, at least comparatively, and easier to make modifications to. Most of the code for building up this regex was really spent creating the '0-255' macro; with that in place, one could, for example, use it in other places where a number from 0-255 is needed.
I'd recommend reading the [lo-dash source](http://lodash.com/docs) over underscore (docs contain live links to the relevant lines of code). Which you use in a project is up to you but the unminified lo-dash source is full of comments and explanations of various non-trivial algorithms and polyfills.
If you've been using it for 5 years, I'm guessing you're likely very familiar with all the 'practical' parts, all that's left is quirks and the not-so-practical, here's a few: Understanding how coercion works with valueOf and toString and which takes precedence. (it's valueOf) ({ valueOf : function() {return 10} }) == 10 //true ({ toString : function() {return 10} }) == 10 //true ({ valueOf : function() {return 11}, toString : function() {return 10} }) == 10 // false ({ valueOf : function() {return 11}, toString : function() {return 10} }) == "10" //false named functions and their pitfalls in IE. var f = function f() {return f}; Indirect eval: eval("function() {}") vs (1, eval)("function() {}") or e = eval; e("function() {}"); How primitives are treated in js. var n = 5; n .foo = 'bar'; console.log(n.foo) //undefined var n = new Number(5); n.foo = 'bar'; console.log(n.foo) //'bar' Number.prototype.foo = 'bar'; console.log((5).foo) //'bar' Why [] instanceof Array Is not reliable. Here's a quiz that's a bit more on the advanced side: http://perfectionkills.com/javascript-quiz/ Also be sure to read: "Effective JavaScript" , it likely has a thing or two you did not know about js. In fact all of my examples are covered in that book. 
Bind pretends your arguments when calling the callback. You're not passing argument's from the returned function to the callback. 
Introduction to Algorithms maybe, I have not read it but it's on my list. Structure and Interpretation of Computer Programs definitely. It's written with Scheme, but the concepts are widely applicable.
did you accidentally a word? I'm not sure what you mean. I made a [fiddle](http://jsfiddle.net/SThcA/1/), you can tell me if you think this is not functioning correctly, but it seems to be working just fine to me. That being said, I've never really used it much before, so I'm not sure if my use cases are correct
You may want to look into some of the new Harmony features. Object.observe Map Set 
You're forgetting to concatenate the arguments passed to the execution of the closure being returned. var myFunc = SomeFunc.bind(instance); myFunc(someArg);//some arg is never applied to function SomeFunc
[Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) [The Clean Coder](http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073)
Understand some of the advanced things you can do with ``Object.create`` and ``Object.defineProperty``: for example, getter/setter methods, which many people seem to think don't exist in JS, but they do! See for some reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects And then honestly, you should stay ahead of upcoming features, even if they're not going to get backported to IE7. Iterators, generators, destructuring assignment...
ah! I didn't realize bind did that! good call. 
[How's this](http://jsfiddle.net/SThcA/2/)
Don't get me wrong, I'm interested in the newer versions, but this question is specifically for things that I can use in IE7. I feel like there have to be some pretty weird esoteric things that aren't being talked about simply because of how inaccessible they may be to newer developers
Oh nice! Resig spent his sweet ass time writing that book, hope it's good!
Yeah, I'm not wholly convinced that all the methods I have now are ideal in terms of readability. I do like your suggestion quite a bit and will probably play around with it sometime.
Do some stuff in TypeScript and/or CoffeeScript.
Yeah, once you know the core concepts all that really remains are the tricky, less practical bits and javascript has a lot of them. Still, javascript is nowhere near as complicated as say c++ so learning all of it's little idiosyncrasies is not impractical. Is it worth it? Well if you're working with it everyday than i'd say so, and yes, "Effective javascript" will help with that. 
There's a guy at my company who writes JS libraries and lectures on it at conferences. He has a special list of questions for people who use those words.
You're modifying the closed over args variable with that push. Try this: Function.prototype.myBind = function(obj) { var func = this, args = Array.prototype.slice.call(arguments, 1); return function() { return func.apply(obj, args.concat(Array.prototype.splice.call(arguments, 0))); }; }; 
We have very different ideas of what constitutes "fun"...
If you want to get into an aspect of what JavaScript is specifically, try writing a small basic application without any helper libraries or polyfills. Making an event driven application that communicates live data from a web page back to the server will get you to work with the JS event loop, blocking operations, and the importance of garbage collection management. To underline the importance/complexity of GC, check out a video from the GMail team on how they improved performance just by focusing on when GC occurs and the tools to use to analyze it: http://www.youtube.com/watch?v=x9Jlu_h_Lyw
They did say that if a dominant approach appears in userland they would consider adopting it. I'd argue that promises are that approach, but I only know about four or five people regularly using them at my company (about a third of our front end team), and most only learned about them a month ago. Give it time. 
http://www.amazon.com/gp/aw/d/0735619670 code complete. One of the best books about coding in general that I've ever read.
I'm talking about class creation. You testing instance creation. I've edit your test http://jsperf.com/razem-proto-test/2 to test class creation: When you create by constructor 1 function-class, I can create by proto about 80 object-classes (or 100 if you want properly working instanceof operator and have own methods in your function-class prototype). But, when I create 1 instance thought proto, you can create 2-3 instances thought constructor. Feel the difference? Classes without constructors are really fast to create. You can realize your dream about classes with small count of properties :) Try the true prototype-based OOP :) http://programmers.stackexchange.com/questions/110936/what-are-the-advantages-of-prototype-based-oop-over-class-based-oop#answers-header 
Go on...
well, not so much the language as the ecosystem around it: * performance across browsers (e.g. string concatenation via += vs .join()) * ways to load JavaScript in a performant fashion * unit testing via qunit or jasmine * node.js
If they get out then they aren't as good, lol. The whole point is to hit people with something entirely and extremely new. To give a better explanation -- almost all of them are problems that we encountered during development that caused issues during development or a lot of argument during code review. All of them are algorithm work with strict runtime requirements that were encountered and solved in house.
You could (and should) have cached the result of `$(this)` into a separate variable.
You always unbind and bind events. Why not a single event handler that pop()s from/iterates over an array of animation functions?
not about best practises. 
gotcha, thank you
He already acquired it outside of the function as $box. Why not reuse that?
Here is what I consider advanced JavaScript: * Code complies with strictest settings of both JSHint and JSLint * Write code without implicit referencing, which means never use "this" and restrict use of "new" as necessary to only access the global objects supplied by the environment (browser). * Write code in a way prevents hoisting as much as possible. * All functions are named so that they can be identified in a profiler, and you actually use a profiler to monitor performance * Able to walk the DOM with ease and confidence without using frameworks or querySelector * Understanding timers, particularly setTimeout, setInterval, and recursive setTimeout * Writing code in such a way that it executes as compiled code as opposed to slower interpreted code * Able to produce elegant products like games, GUIs, and parsers Most importantly: Never putting styles or conventions above solving the problem as directly, efficiently, extend-ably, and safely as possible.
try the true prototype-based OOP: http://www.reddit.com/r/javascript/comments/1k89d2/the_true_prototypebased_nanoframework_in_three/ you can use it with shim on any js engine, even Internet Explorer 2.0 :)
I'll need to do this exact thing in angular within a couple of days! :)
I think I tried that at the beginning but failed horribly. I'll give it another shot. edit: it worked!
please, leave this topic. If you don't like me, don't say it, just don't read my comments.
Close, but I think it should be this. Function.prototype.bind = function(obj) { var func = this , precedingArgs = Array.prototype.slice.call(arguments, 1); return function() { var args = Array.prototype.slice.call(arguments, 0); return func.apply(obj, precedingArgs.concat(args)); }; };
Why the hell would anybody make so much constructors? :D Start thinking in the real environment, this situation would never happen. I don't care if a few constructors take a few more nanoseconds to be created. What can happen is you have dozens of instances. And that's what should be fast. And your solution is slower. And stop talking about classes, when you still mention prototypes. In real prototype-based environment should be no classes. Only objects. And as I said lots of times, it doesn't matter if you use prototypes in constructors or directly by using objects. Both are true valid prototype styles.
&gt; not for more Yes, sweetie, for more instances the constructor is faster. :-) &gt; I can check my types with buid-in native isPrototypeOf method Which is slower than instanceof check. (http://jsperf.com/instanceof-vs-isprototypeof/3) Are you sure you really care of the speed? :-) &gt; constructor and prototype properties well understood in JS? I don't think so. It's your personal opinion. Everybody who really knows JS understands constructors.
There's no problem in liking you. I don't like your opinions which you present as the only truth in the universe. :-) Read finally the facts and stop saying crap.
this is my "absurd logic": Second argument should be an object literal only. But, if you really want it, the rule may be changed to: *External usage of second argument after cloning should use only it own properties.* Function should not change it arguments, but, clone() do this, this is side effect of `__proto__` usage. This rule is need to make no difference with other clone methods: by constructor and Object.create. Thanks for helping me with documentation :)
&gt; Why the hell would anybody make so much constructors? :D Start thinking in the real environment, this situation would never happen. In class-based OOP projects ‚Äî yes. But, If you will think by prototypes, the situation will be changed. Read the comment by the link I posted: &gt; [Tyrant - Java Roguelike](http://sourceforge.net/projects/tyrant/), for example had something like 3000 different prototypes with only about 42,000 lines of code total. That's pretty amazing for Java! **Using constructors as types ‚Äî class based OOP.** That what I want to say. 
That's what I meant. ;-) It can be any object and only its own properties will remain.
There is still the question. Why should I have 3,000 different prototypes (or constructors) in my code? This points to a bad design of an application. Say what you want. We all showed you that using constructors (not thousands of them) is faster when it comes to creating instances and dealing with bad values.
&gt; And stop talking about classes, when you still mention prototypes. Sorry, i've call it classes, coz it more understandable for people that know only about classic OOP. &gt; In real prototype-based environment should be no classes. Only objects. Yes, that it is. &gt; And as I said lots of times, it doesn't matter if you use prototypes in constructors or directly by using objects. Both are true valid prototype styles. It does metter. What is the function-constructor? This is the class. Classes, as you said before, have no place in real prototype-based environment.
&gt; coz it more understandable for people that know only about classic OOP But you care about people who know prototype-based, don't you? &gt; This is the class No, it's just a constructor. :-) It creates a new object inherited from a prototype and moreover it gives you the comfort to check values. Look at the name - constructor. It constructs an object for you. :-) There is nothing bad about using them. No serious publication can say it's wrong to use them because it would be a conflict of opinions. There are those who like them and those who don't. But it's the standard and traditional way in JavaScript. Maybe try another language. :-) In my opinion you would love Self.
[Javascript Design Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/) is a great resource by Addy Osmani + others.
Second on the Javascript Ninja, great coverage of this sort of thing.
slow... you can do better than that.
Yup, as has been said, it's a library, not a framework. Nor has it ever claimed to be a framework. But do you care to add anything constructive, like why you think it's fail...or is that it?
Hi, as I know masonry is cascading grid layout library, right? here is an example http://masonry.desandro.com/). And what you need is too load more data when user reaches (scrolls) at least 80% of your page. Here is code example you can use to make infinite scroll: var processing; //prevent multiple request $(document).ready(function(){ $(document).scroll(function(e){ if (processing) return false; if ($(window).scrollTop() &gt;= $(document).height() -$(window).height() - 700){ processing = true; //load your data here $.ajax({ url: "your url", success: function() { //when data loaded, update plugin processing = false; }}) } }); });
When you say bad design, please explain why.
Knowledge of a few algorithms and data structures can take you much further than opinionated best practices.
I think learning the advanced features of JavaScript (ex. the details of object creation) is good and interesting. Yet, for myself, after a few months of not needing to use it much, it does fade away to the point that I can't discuss it or recall those ah-ha moments. I can refresh, then fade again. So, I'd rather spend my time learning higher level aspects like organization, integration, and workflow.
But a 'library' is very different to a 'framework'. There are plugins and such out there to provide you with data-binding - Epoxy (http://epoxyjs.org/), or something library agnostic like Rivets.js (http://rivetsjs.com/) and so on. I'm not saying Backbone.js is right in every situation. I enjoy using Backbone.js, Angular.js and even Ember.js for different reasons. But just saying something is bad isn't too helpful, it's all about using the right tool for the job. With Backbone.js it sometimes takes a bit longer to build up your component pieces, but the positive side is you have complete flexibility over how things work. 
Not so much a critique of your code itself, but you might want to consider something more mobile friendly than jquery animate. I like the greensock tweenmax library - http://www.greensock.com/gsap-js/ 
With last night's release of [1.2.0rc1](http://blog.angularjs.org/2013/08/angularjs-120-rc1-spooky-giraffe.html) AngularJS now natively supports blur and focus events. Here is a quick [update post](http://blog.jasoncust.com/2013/08/angularjs-120rc1-now-supports-focus.html) to the original post.
You could use promises instead of callbacks, they're baked in with $q :)
Nice, I wondered about that as I was getting it hooked up.
Sorry, prepends* 
Yep, that's exactly how I would do it. 
[The Pragmatic Programmer](http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X). Here is a [quick ref](http://www.codinghorror.com/blog/2004/10/a-pragmatic-quick-reference.html) that gives a good overview of the contents. 
How are the the map/filter/reduce implementations a hard javascript question? Anyone with basic 1-week FP skills could do that. I wrote those in an afternoon after studying javascript for 3 days just cause I got ecxited about how lisp like certain things were. God if this shit is supposed to be a hard question then I guess I'll finally have to immigrate from Greece. Off course their bullshit HR managers will be like, we need 5 years of javascript development experience to answer those jokes of a question that you only needed like 15 days to be able to answer. 
&gt; Write code without implicit referencing, which means never use "this" ... Why? I thought that using the power of implicit referencing combined with the anonymous function is one of the most powerful features of JavaScript. Or do you mean just storing a reference to `this` and using it instead is better? Like: var self = this 
oops :( imma delete this one and send in the proper link
 $this = $(this); You're missing `var` in several places. Not a huge deal in the runtime code, but to me it signals that you're new-ish to JS. --- $this.css('top', $(window).height()); $this.css('right', 0); $this.css('background-color', 'green'); Should combine these into a single call using the `{}` style; you do this later on, so it's baffling why you didn't here. --- top: $(window).height() - 40, left: $(window).width() - 40, Should cache `$(window)` (you fail to do this in many places)... --- $this.css({'background-color': ''}); $this.css('background-color', 'purple'); Sloppy... why change it to nothing then instantly change it to something else? And why use 2 different API styles to accomplish an identical task? --- $box.click(clickHandler($box)); Should use the `on()` methods, generally.
Seriously though.. I love Resig but 31 dollars for a fricken ebook?
And because I'm killing time, here's a quick take on the code for a new stepSix that is a single function(with some scope resolution). This uses JQuery.delay() in order to achieve the same timing effect, which isn't quite as elegant as triggering on animation finish, so this isn't a final solution, but I've gotta run now, and don't have time at the moment to toy with the scoping further to allow proper invocation of the next function from the previous, or other solutions. Oh, I also flipped the animation to purple first, since the circle was purple and set the z-index so it looks a little smoother (top circle visually is animated first), and got rid of the ID tag on the resulting stripes, since having multiple DOM elements with the same ID is bad form. /* Animate the circle into a set of rainbow stripes */ function stepSix() { var $square = $('#square'); var colors = ['purple', 'blue', 'green', 'yellow', 'orange', 'red']; var animTime = 200; var circles = []; //Hide original element. $square.hide(); for(var idx in colors) { //'index' is now our scope-safe index for colors[] (function doStripe(index) { //Create new elements to animate into stripes. var $myStripe = $square.clone().css({ 'background-color' : colors[index], 'position' : 'absolute', 'z-index' : colors.length - index, }).attr('id','').appendTo('body'); var stripeSpace = Math.floor(index / colors.length * $(window).height()); var stripeHeight = $(window).height() / colors.length + 1; $myStripe.show(); $myStripe.delay(animTime * index).animate({ 'z-index' : 0, borderRadius: 0, top: stripeSpace, left: 0, width: $(window).width(), height: stripeHeight }, animTime); })(idx); } } 
Sorry about the ?2013 url part... Reddit didn't allow me to post without, and I feel bad about the people finding out a few hours before last date... Which is the time I always find out about stuff like this.
IMO it's kind of a biased question, in that FP isn't imperative for most uses of JS on the web. While high in utility, they are more of a luxury than a necessity, because you can always do the same task with a for-loop (or for-in...). Thus, most devs who've only ever dealt with webpages probably won't have much experience in them. But, that really doesn't say anything at all about their ability to use JS within the context of a webpage. At my job, I'm pretty much the only one that ever uses the FP-inspired functions, and even then it's pretty rare as there just isn't a need. So, it really depends on what you're hiring for I guess; if you need someone to write in-house frameworks/libs, then the question probably has more value. However, if you just need someone to do day-to-day JS work within the context of the browser, it's not going to be a very good litmus test for that kind of work.
Its not that powerful and it makes debugging more challenging. There are more, unnecessary, references to sort through. In the case of your example you have "self", "this", and probably several others in a constructor or some named pattern and most all of that circular referencing can be more directly accomplished using a single explicit assignment written in a very imperative manner. Most of the best JavaScript developers I run into don't do this intentionally. Find any extremely powerful and extremely large JavaScript application that actually does, and I bet you will have trouble finding any.
Reduce isn't designed to replicate filter and map, it's designed to take a set of data and reduce it in some way. Summing is a toy example, sure, but what about... "Who is the Doctor with the longest series run after Tom Baker?" var doctors = [ { number: 1, actor: "William Hartnell", begin: 1963, end: 1966 }, { number: 2, actor: "Patrick Troughton", begin: 1966, end: 1969 }, { number: 3, actor: "Jon Pertwee", begin: 1970, end: 1974 }, { number: 4, actor: "Tom Baker", begin: 1974, end: 1981 }, { number: 5, actor: "Peter Davison", begin: 1982, end: 1984 }, { number: 6, actor: "Colin Baker", begin: 1984, end: 1986 }, { number: 7, actor: "Sylvester McCoy", begin: 1987, end: 1989 }, { number: 8, actor: "Paul McGann", begin: 1996, end: 1996 }, { number: 9, actor: "Christopher Eccleston", begin: 2005, end: 2005 }, { number: 10, actor: "David Tennant", begin: 2005, end: 2010 }, { number: 11, actor: "Matt Smith", begin: 2010, end: 2013 }, { number: 12, actor: "Peter Capaldi", begin: 2013, end: 2013 } ]; var tomBaker = doctors.filter(function(doc) { return doc.actor === 'Tom Baker'; })[0]; var longestDoctor = doctors.filter(function(doc) { return doc.number &gt; tomBaker.number; }).map(function(doc) { return { doctorNumber: "#" + doc.number, playedBy: doc.actor, yearsPlayed: doc.end - doc.begin + 1 }; }).reduce(function(memo, doc) { return memo.yearsPlayed &gt; doc.yearsPlayed ? memo : doc; }); console.log(JSON.stringify(longestDoctor)); Yields: ``{"doctorNumber":"#10","playedBy":"David Tennant","yearsPlayed":6}``
Holy cow, 13kb minified/zipped is enormous. My last Ludum Dare game, including all the libraries I used, was 2849 lines of code. This much code zips up to less than 13kb. Code size is not going to be even close to an issue here. If people wind up spending time optimizing their package size, the large majority of that time will be compressing assets.
If anyone still wants to contribute to this now is the time. This weekend is our last weekend before the burn, so get your animations in now. We've added a lot of new functionality to the editor making it easy to make virtual lights that move around the surface, and various other cool features like blending modes etc. If you don't feel like coding but have some ideas for animations that might look cool please comment here and let me know and I'll see if I can implement them this weekend. Thanks to all that have contributed thus far!
These are the ones I use. app.directive('ngFocus', function () { return function (scope, elem, attrs) { elem.bind('focus', function () { scope.$apply(attrs.ngFocus); }); }; }); app.directive('ngBlur', function () { return function (scope, elem, attrs) { elem.bind('blur', function () { scope.$apply(attrs.ngBlur); }); }; });
That was what I'd reply to the answer I got, about this being a question to get rid of those "wasting the interviewer's time". This kind of question tests if you know functional programming, not javascript. I knew FP and I could do it easily, I bet there are people that know more about javascript than me, as in they have used it in many more contexts, encountered trade offs, know some of the gotchas etc., can remember the syntax of the templates or call structure of a few different frameworks, and they might not be able to do the higher functions cause they've only done things the imperative way. Javascript is supposed to be flexible, all the hard questions about javascript itself end up being hard questions about doing something else with Javascript.
I meant with properties which you pass to the constructor. And even if you had lots of constructors in your project it wouldn't be even a few hundreds. ;-)
It is optional. Nobody forces you to link the property to the real constructor. ;-) But I wasn't talking about the property but about the function itself. Constructors are somthing like factories for making objects. Except they don't have to create the whole object, they just add some custom properties. The creation of the prototype-based object remains to the language. When you came to specific real-world problems you would have to start checking values etc. And you would come to something like factory which would finally return your cloned obejct. But then why just don't use constructors which make lots of things for me? Your solution is just purely theoretic and you don't care about corrupted data etc.
You're right. The idea that it required me to not change data after it was initially set came about because I had set my groups or something wrong and that was causing exit to not function correctly. Seeing the advice of you and others caused me to go back and re-try the enter/exit approach, and its working! Thank you. 
I tried this and could not get it to work. I was originally using display:none (using jQuery's hide and show functions to do it, and they were setting it to display:none). I fiddled around with the pointer-events property, setting elements I was hiding to none, and elements I was showing to "all" or "auto" and I couldn't get it working. I still had dead spots in the lines drawn earliest while the last few lines appeared to have no dead spots. 
I was wrong, I managed to get things working using enter/exit. I think hide/show is probably not the way to go. Perhaps the dead zones issue can be avoided, but I don't know how to. What I'm currently doing is pretty much exactly what i want to do. I have one "master" data structure that contains my data, and one that contains my "working" data. If your data is being created in your UI, you can get rid of the one that contains your "master" data (I'm selectively displaying things, rather than creating things, selective display requires a master data set, creation only requires a working set). I add or remove stuff from my working set, and use functions to generate "views" of the data which are handed off to the various things that are getting displayed in the graph (points, lines, areas etc). Its fairly clean IMO. To data sets and a set of functions for creating views of it to hand to the various D3 functions. 
Does the 13kB include assets like images/sound? 
&gt; Am I the only person that feels strongly about this? Yes.
I don't even.
Well, 2d arrays are just arrays within arrays right? So just make the original 2d array variable as a 1d array: `var myarr = [];` Then push more arrays inside it using a for loop. `for (var y=0; y &lt;10; y++){ myarr.push ([]); // put a row in for y times for (var x=0; x &lt;10; x++){ myarr[y].push("lawm"); //put a value inside the row for x times } } console.log(myarr);` Outputs 10x10 lawms This is somewhat pseudocode as im typing on a tablet but it should give u an idea :P
Uhh... What? Who names a folder or refers to multiple files as "javascripts?" Most of the time I see beginners call their folder "scripts" (I prefer "js") but no one ever calls it "javascripts." I've only ever heard the files referred to as "JavaScript/JS files" or "scripts."
Interesting, I've only used qunit before. Is there much difference to that and mocha apart from syntax? The stubbing and mocking looks interesting.
Yeah a few things do - 'javascripts' and 'stylesheets'
Functional JavaScript is a great book, and everyone should be using underscore 
http://nytimes.github.io/backbone.stickit/ http://rivetsjs.com/ There are more
Reduce is a Fold. Fold is an abstraction of list recursion. The worst thing that was ever done to folding was renaming it to reduce. It hides its power. If you want the heavy content go here: https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;cad=rja&amp;ved=0CDQQFjAB&amp;url=http%3A%2F%2Fwww.cs.nott.ac.uk%2F~gmh%2Ffold.pdf&amp;ei=1PwLUqyuAYmuyQGJ74CwCw&amp;usg=AFQjCNG81_xijGu4ipQdCGBIxkR8z1Lj6w&amp;sig2=nUuHy9HQARwIgKuqze9IHw&amp;bvm=bv.50723672,d.aWc
13kB is quite a lot. For example, the Dart version of [this game](http://mbtic.com/games/fuzetsu) is 3.2kB. The Java version was 4kB (it was originally written for a Java 4k compo). A JavaScript version would be also around 4kB. (The graphics are procedurally generated.) Now, 8kB instead of 4kB do not mean that your game can be twice as complex. With 8kB it can be easily *four times* as complex, because a significant chunk of those 4kB were used for basic plumbing. 13kB is a somewhat unfortunate size, because you'll still feel inclined to use procedural graphics and audio, which means it's a pretty heavy time-sink. With something like 64kB you could just use a handful of images and even some small audio files. Add ~6kB of code and you can have a neat puzzle game or platformer.
Along with understanding what happens in $digest, understanding what $compile does is probably the other critical piece to really understanding how Angular works. It's quite amazing how it works... at least to me, since I came from a heavily OOP background. The ways that it leverages the functional nature of JavaScript is really cool, IMO. I'd invite anyone that loves JavaScript to go out and [have a look at the source for $compile](https://github.com/angular/angular.js/blob/master/src/ng/compile.js).
These are no longer "missing" as of 1.2.0-rc1, which was released last night: https://github.com/angular/angular.js/commit/2bb27d4998805fd89db25192f53d26d259ae615f
What does this have to do with fat arrows?
[Another article about building a JS particle system](http://buildnewgames.com/particle-systems/)
Angus Croll's blog is where I learned a lot of advanced stuff. Highly recommended read. http://javascriptweblog.wordpress.com
Simulink is another one in wide use for control theory and DSP. It can even generate C, VDHL or Verilog code with add-on products.
Looking at 2012's entries (same size requirements), it looks like most of them went with no audio or a couple really short audio clips. I didn't see any that obviously had procedural audio. Maybe I missed something, though.
If you start the game without moving the arrow keys, you will never lose.
Heh. Yeah. Thing is, procedural audio wasn't quite possible in the past. The Audio Data API was Firefox-only and it has been deprecated in favor of the new Web Audio API. Firefox 23 (the one which was just released a few days ago), is the first version of Firefox which supports the Web Audio API. IE10 doesn't support it and Chrome supports it since version 10. http://caniuse.com/audio-api **Edit:** Now that I think about it, generating a base64 encoded WAV file could have worked in browsers which support WAV, but IIRC the support for WAV is pretty spotty. **Edit2:** This doodle used the Web Audio API: http://www.google.com/doodles/robert-moogs-78th-birthday
You're right, /javascripts is a really stupid name. There is no plural for JavaScript. For all those who are wondering who in the world would use a name like this, it's the default directory name you get when you create a new Rails project with `rails new foobar`.
Are you looking for Array.prototype.concat? [].concat([ 1 ]).concat([ 2, 3 ]).reduceRight(function (a, x) { return a.concat(x); }, []) [3, 2, 1] 
According to the developer it's a feature (kiosk mode).
Verbal Expressions is also a fluent regex builder [[reddit](http://www.reddit.com/r/javascript/comments/1irnis/verbalexpressions_javascript_regular_expressions/)]. It would be interesting to compare its [API](https://github.com/VerbalExpressions/JSVerbalExpressions/wiki) with what OP [came up with](https://github.com/wyantb/js-regex/blob/master/Readme.md).
The wav support is fine in recent desktop versions of chrome, firefox, and opera and the 13k competition has even less browser support requirements than JS1K which had some audio entries. The biggest problem would likely be mobile browsers. Example: http://js1k.com/2013-spring/demo/1518
Right on! Unless you are a robot programming this to operate your Right arm! 
When you submit a link already submitted it will bring you to a page stating its already on reddit. In a yellow box on the same page it also allows you to "submit this link anyway".
I think `concat` returns a new array while `push` updates the array.
Can you elaborate on the functional nature of Javascript that it is tapping? I haven't seen anything "functional" in here and I might be mistaken - so would be great if you could elaborate. 
See also, [Espruino](http://www.espruino.com) and [johnny-five](https://github.com/rwaldron/johnny-five)
Nice. A section in the website for practical examples of how or in what this could be used would be of help. It could also improve the SEO for those specific gadgets people often search for...
So, is not right on the hardware but a port of Nodejs running on Linux? 
JS is one step closer to becoming what Java was meant to be...
Given the compatability with NPM modules I'd be tempted to say it's probably just node.js - but I don't know for sure. I'm amazed they've got it (and presumably Linux) running on 32mb of RAM.
express (for node) does this when creating boilerplate for a new app: $ express myApp create : myApp create : myApp/package.json create : myApp/app.js create : myApp/public create : myApp/public/images create : myApp/public/stylesheets create : myApp/public/stylesheets/style.css create : myApp/routes create : myApp/routes/index.js create : myApp/routes/user.js create : myApp/public/javascripts &lt;--- create : myApp/views create : myApp/views/layout.jade create : myApp/views/index.jade install dependencies: $ cd myApp &amp;&amp; npm install run the app: $ node app 
Yes, this could be done. But doesn't it just seem silly that `push` returns length. If it returned itself I could easily check length with `[].push(2).length;` Additionally there must be overhead with generating a new array with `concat`.
If you work within a functional paradigm and use reduce/maps/etc it is sometimes nice to push things to an array. With a fat arrow and push returning the array you can reduce like this: foo.reduce((a, x) =&gt; a.push(x), []); Very clean and tidy. Without that return you have to do this: foo.reduce((a, x) =&gt; { a.push(x); return a; }, []); It isn't the end of the world, but it could be better.
I don't know... [Espruino](http://www.espruino.com) does run direct on ARM boards though (with no OS in the way), so its requirements are quite a lot (4000 times) lower - for RAM at least! 
NodeJS is not an engine; it uses V8 as its engine under the hood.
Meh, substandard. Have you even used this yourself? How do you select/copy a string that overflows ~50 screens to the right of the page?
Thanks, I didn't notice.
Yeah! Totally! It's a computer :)
Two very important questions that I didn't see answers to on that website. This is marketed at developers, right? Then we need specifics in order to decide and adopt a platform.
I think strange b/c it not used in most store by inspector, but used in some pages. I have not seen CanJS 
FYI I am at work and this URL is blocked as a malicious site. No further details available...
Neat, although it would be even neater if they supplied a projected cost. I can't imagine it being much cheaper than a Raspberry Pi
How long was the test ? A couple of hours, a day maybe ?
not quite edit: what a pointless response. Java is a strong static typed class based language. Javascript is dynamically typed prototype based language. Apples and oranges.
I'd imagine that one can do much more with much less (both in hardware costs and in power requirements) using C or ASM. don't be afraid, these are not scary languages, and learning at least C can only serve to make you a better programmer, who writes better Javascript, since you'll have a far better understanding of what is happening behind the scenes.
I think he was drawing attention to the write-once-run-anywhere promise that Java once was - and JavaScript is quickly becoming.
That's something that has always bugged me.. I've used several applications that were built in Java but only run in windows. What the hell is the point of that? 
I've just release v1.1.0 with async tests and particular output. Check it right here http://titulus.github.io/testit/
There is no way to do this. You can just encode the data or something and make it harder to read them. But you can't disable the access to them.
Thanks for posting the update info. Just as an FYI though, the second sentence in the post makes note of the update. The [original post](http://blog.jasoncust.com/2013/08/angularjs-missing-directives-focus-blur.html) (which preceded the update) and this follow up were more about the usefulness in reading through the source code and how to use that information to build directives so I feel that it is still a useful post.
The idea of the web app was for cross phone/platform availability. Different users, different phones, Apple, Microsoft, Android,etc. And I don't want the ability to hijack or control anything. I just want to protect the data that's stored in the phone from tampering. let them open the inspector and view the JavaScript and html, I don't care about that. I just want to be able to tell if they do. It's funny that in a culture that values privacy, it's so hard to keep something private. 
The answer is basically "there is no way to do this, because the web was built in a way that makes this impossible", although you can make it hard to tamper with the data that just means it will be safe until one smart person figures it out and publicizes the technique. If you need to cache server data in local storage/cookies/on a user device then sign it or encrypt it. You can make sure that if you give a user some data and they give it back later it hasn't been tampered with by signing it, in this case the user or code running on the user device can still read it. If you don't want the user/code on the user device to read it then you can encrypt it. The reason you get that type of response is because you are asking "How can I get code to run on a users machine that does things they don't want it to do and that they can't stop", which is a touchy subject at the moment because: 1. It's never an ethical thing to do 2. It's being done for really really shady stuff right now by a lot of people 3. What you want is basically a very very targeted type of malware If it's data being generated on the user device then those options don't work, and you simply don't *get* to stop users from seeing/modifying the things their devices are doing. This is a good thing, and only true because people have fought for that right.
What I want is the ability to tell if an inspector or console is open. That's it. No control, no hijacking ability. What is a spam site going to do with that ability? Stop showing me ads?
A bit hackish, but it does work.
Do you have this posted on Github or something so that we can look at it in full? Something we can pull down and actually tinker with would be helpful.
What's the purpose of this? Just curious.
There is a cryptography standard being worked on that might help: http://www.w3.org/TR/WebCryptoAPI/
That's not hackish, that's just how JavaScript works. The comma operator always returns the last value.
just visited your site and the files aren't being included properly. `Failed to load resource: the server responded with a status of 404 (Not Found) http://zach-glass.tumblr.com/js/jquery.infinitescroll.min.js Failed to load resource: the server responded with a status of 404 (Not Found) http://zach-glass.tumblr.com/jquery.masonry.min.js ` 
I think what they meant is that Java was developed for the purpose of portability, and to depend on "Win-specific system calls" is anti-pattern.
trick would be to just say that each dot will take the class from the dot on it's right. You would have to go down the dots by each column from the leftmost column to the right most. something like: $(leftDot).toggleClass('dot_grey', $(rightDot).hasClass('dot_grey')); $(leftDot).toggleClass('dot_white', $(rightDot).hasClass('dot_white')); I'd go back and rewrite some of you logic, don't use ids, use your col and row to find the right element - perhaps even is data attributes: &lt;div data-col="1" data-row="3"&gt;&lt;/div&gt; to make it easier on yourself. Of course it's possible to do it with a single id to pinpoint the exact row/col but if you're having trouble getting it to work so far I'd suggest trying to make it easier on yourself first.
To piggy back on what LateDentArthurDent2 says, I'd put it on JS fiddle or something of the like, it'll be easier for us to debug your code.
You are correct about that. Tip of the hat.
Is there any good reason why I should link jQuery to my page to use this? Why is it even a jQuery plugin? It has nothing to do with the library. By the way it's very similar to [VerbalExpressions](https://github.com/VerbalExpressions/JSVerbalExpressions). And it's in my opinion far better for dealing with complex expressions.
is reddit for making point or sharing interesting link? Iit interesting that such famous company uses a JS framework I never seen. Maybe I try it now. Just sharing for others Also strange b/c not used on most of store. Just few pages, but most of apple store not use Canjs. Just thinking why
&gt; It's funny that in a culture that values privacy, it's so hard to keep something private. I feel like you wanting to track when a user looks at the data that's on their phone is the opposite of valuing privacy. You would be sending data to their phone, which they own and can do whatever they want with. It's not violating your privacy if they choose to look at whatever it is you give them.
Was going to say the same thing.. This doesn't actually use jQuery at all it only adds itself to the $ variable. You're basically requiring anybody who wants to use your library to include jQuery.
http://phonegap.com/
I got it on [Github](https://github.com/peezybro/project) I tried to get it to fit on jsfiddle but i would have to change the css and dont got time. (at work)
Remember, this is a private application. Not a public website. The data is proprietary and is only meant to be viewed by authorized people and I'm trying to figure out a way to protect it. 
&gt; The idea of the web app was for cross phone/platform availability. [Xamarin](http://xamarin.com/).
Use a textarea instead of a pre tag, done.
There isn't a way to do it because it's pointless. If someone really wants to view or modify the data, they can use a HTTP client other than a browser that has NO rules.
Not necessarily. What your trying to do is prevent somebody from looking at the data using an inspector tool. Encrypting the data, even with a super-simple "obfuscation" algorithm, would serve that purpose. Of course there's always a way around it, but even if you disabled the inspector tool, somebody **really** determined could just read the data straight from the RAM, by-passing any browser or app controls completely. At least by encrypting the data you remove the inspector tool as an analyzation method. If the decryption algorithm were similarly obfuscated and unique to your system, it would be exceedingly difficult to decrypt the data. The best form of security isn't making something impossible to get, just so difficult they realize it isn't worth it. While it's not perfect, still better than storing it all in plain text. It's either that, or just not store it locally at all (which isn't really possible, since the data is always local at some point in order to render the page).
I see. I would have never thought of doing it that way. I will mess around with it and see where it gets me! Thanks
Not a perfect system, and is definitely not foolproof... you could use php to generate the page only if it detects a mobile browser. I'm certain there are mobile browsers that'll let you view your cookies and desktop browsers that'll masquerade as mobile browsers - but it ought to filter out 99% of people from viewing your source/cookies...
Well you got me curious... so I came up with [this](http://cwynn.com/marquee/) not as fancy as what you had started - but maybe the logic will help you...
Step one is don't hold any of that client side. Then you've got no problem to begin with. 
If all you want to do is make the fence a little higher, then yes, you can do that. Just store local data in reverse order, then un-reverse it when retrieving. It's super naive, but that sounds like what you want.
Kind of hard to make an offline application that doesn't work offline. 
You said this was meant to run on phones...phones don't have an F-12. The only way I know of to access the dev console on a phone is via a computer connected to it.
It's a web application. and It's easy enough to spoof a user agent string to run it on a desktop. 
If you have clients that are dedicated enough to spoof a user agent to view this web app on a desktop so they have easier access to dev tools just to fuck with your data, then I'm afraid there's nothing you can do aside from using something like PhoneGap to convert it in to an app they install.
It would help a bit if you had a live page or jsfiddle link.
If I encounter a site that says "Sorry only mobile devices" I'll just change my userAgent string. There isn't really a way to properly tell what is what other than guessing from the user agent and hoping the user agent is correct. And from a philosophical point of view, what is "mobile" anyway? I could be using a tablet as my workstation at work on my desk. Then I could also use a 27 inch laptop somewhere in the woods over 3G. In this case the laptop is more "mobile" than the tablet even if it has a larger screen. You see, it's all wishy washy, kinda.
Wanting to prohibit or interfere with the user of the local machine from being able to see the data is unethical. Every user of a computer has the right to see/know what something from the internet is doing on their machine. Once somebody downloads something onto a local machine it's no longer "yours" in any meaningful sense of the word, it's "theirs." They have the right to know what's been downloaded to their machine, they have the right to know what it's doing on their machine, and they have the right to view it. What you're attempting to do is take that right away from them. How is the user to know it isn't a virus that'll steal passwords to bank accounts? How are they to know it isn't kiddie porn? How are they to know your code isn't using their device as a proxy to hack into another system? You're wanting to find a way to prevent the user from seeing what you're doing with their machine. You want a method to determine when the user is trying to look at this information so your program can delete it before they get a chance to see it. That utterly defeats the purpose of the console which is to allow people to see the data. There are ways to protect data that don't require you to behave in an unethical manner. As far as privacy is concerned; users have privacy, data doesn't. A user wanting to keep their personal information private has a right to privacy, a company wanting to run code on my machine doesn't.
That doesn't buy you anything. You can put javascript: directly into the url bar of all browsers. No console is open, no inspector is running, but they can modify any client data they like. For that matter, they can muck about with the data before submitting to the server even when they are online the whole time by executing some javascript to modify the form or whatever. You shouldn't build an application that relies on the user not mucking about with the data it sends you, period. Whether that data was cached for a time or not is pretty much irrelevant. I know this isn't the answer you want, but you need to accept the reality and figure something else out.
There is literally no way to hold data on the client side using web technologies and have them not be able to analyze every aspect of it. You can try and obfuscate it, but a technically savvy user *will* be able to get to the plaintext at some point. You could cache all non-sensitive data client side for offline use. But, if you've got to do a sensitive operation, it has to be done on a server where users don't have access or control over the sensitive data. 
It's not running on your machine. Or any other public machine. It'll be running on a machine where the user has logged in with a login and password. if someone steals a login and password and tries to examine the locally stored data in a debugger, I'd like to not let them do that. Rest assured, you will never be exposed to this website. 
Doesn't matter. What you're trying to do is still unethical. That's why safeguards have been put in place to prevent people like you from doing exactly what you're trying to do. My employer doesn't get to violate my rights because they're paying me.
Could you link me to somewhere where I can read about these rights you seem to think you have? Something something right to access proprietary data without proper authorization. The owner of said data is not allowed to take steps to prevent improper access to it. 
 window.onload = function() { if (confirm('Do you have the console open?')) { //scrub dat data } else { alert('OK, cool'); } };
As was mentioned the last time you posted this, you are getting 404 errors on your site for your masonry and infitinescroll .js files. Fix your calls to the files. EDIT: You may have fixed this? The site is now working on my browser.
At this point you just need to take the hint. You have several different places telling you the same thing: what you're trying to do is wrong. You're not going to get different answer from a respectable source. Rights aren't always written down. A lot of times they're implied, or simply demanded. If the company is so anal about trying to protect their data then they need to find another way to do it. There are plenty of ways to keep data secure, and circumventing features that are intended to protect the user isn't the way to go. At this point you either need to nix the local caching or choose another platform that's more suited to your needs.
I don't give a rats ass what you demand or think you are owed. You are not part of this particular equation. My task is to protect my client's data. You seem to think that that's a bad thing. Try telling Netflix or Hulu that anything that comes in through your browser belongs to you. See how far that gets you. 
You can wrap whatever you want around JavaScript to be the language you need. Use Typescript and you have your strong typing. Use coffeescript and you have concise syntax and classes.
Y'all got a typo: a first class citizern. I don't imagine that triggered any JS errors, so you're forgiven. I look forward to when you have something to demonstrate.
OP here. I think there are two primary differences. First is that my library, and correspondingly API design, greatly encourages the construction of clean regexes. Some simple examples, right from the Chrome console (using &gt; for the command I enter, &lt; for the object received back): &gt; VerEx().then('abc').source &lt; "(?:abc)" &gt; regex().literals('abc').peek() &lt; "abc" &gt; VerEx().then('abc').multiple('def').source &lt; "(?:abc)def+" &gt; regex().literals('abc').literals('def').repeat(1).peek() &lt; "abc(?:def)+" *(I'm not sure their multiple() method works right, at all? Why is multiple('def') not represented as "(def)+" or "(?:def)+", or some modifier on 'abc'?)* The second significant difference is my usage of grouping (e.g. start(), any() with no args, etc). What grouping allows me to do is to better represent units of regex that should be repeated, captured, etc. I don't know, for example, how one would construct an equivalent of this with verbal expressions: &gt; regex().start().f.digit().literal('a').close().capture().repeat().peek() &lt; "(\da)*" EDIT: what the heck, I'll throw in a third entry as well. [My tests](https://github.com/wyantb/js-regex/blob/master/test/cases/readme_cases.js) test the regex sources actually constructed, while [Verbal's tests](https://github.com/VerbalExpressions/JSVerbalExpressions/blob/master/test/tests.js) only use the test() method. Testing test() is fine and sensible, obviously (and ultimately represents what people are trying to do with their regexes, and something I need to do eventually once I make a test() function that I care for), but could lead one to make a lot of mistakes when updating the library, in terms of changing the results of really complicated regular expressions.
Using the DOM for graphics is a somewhat bad idea. As a beginner for a fun project go ahead, but try using html5 canvas or css in the future :P And as for the problem, I suggest looping thru a grid array with 'dot' objects, and each one has a boolean property of 'on' or 'off'. You start with an initial frame and then while looping, if one's property is on, turn it off and set the one behind it (current arr position-1) to on.
Took me about a day to do it, but there were other parts to the test. This was just the hardest part for me.
Selling my dignity? Wow.. You're a piece of work aren't you? Unethical? Don't make me laugh. Offend you? Sure, I'll buy that. But Don't talk to me about unethical. You do a dozen things a day that someone would call unethical. So don't cry to me about unethical anything. go delete your piratebay account, then talk to me about unethical behavior. I hate programmers, I really do. Professional ones that is. Your worldview is so skewed. I don't care about being blackballed. because in my industry, what I'm trying to do is not "unethical", it's standard. The web is a platform like any other. A tool. You may not like it when companies try and make your browser do something you don't want to do, but that's just too god damned bad. I get that you're not going to help me. I understand that. But this is not a public site I'm building, it's a private web application. If someone tries to access it without proper authorization I want to shut them down. There'll be no hijacking, no spamming, no personal private information being stolen or tracked. And of course I get to bitch.. That's what you're going on about isn't it? Freedom on the web? The user's right to do what they want? That's quite the double standard you've got going there. Boohoo, the evil man is trying to make a browser do something I don't want it to.. WAAHHH. There are people out there with far more nefarious purposes than I. And they're better paid. And they're better programmers. 
&gt; There'll be no hijacking, no spamming, no personal private information being stolen or tracked. You are very wrong on that point. Frankly, I'm done with you. You've been warned. At this point, you know what you're trying to do is wrong. Don't expect any help from somebody that knows what they're doing. Take a look at the votes you've been getting in this thread. You have an entire community of people disagreeing with everything you've said. There are some major points of your education that have been missed, and you shouldn't be programming. You don't have what it takes to be a decent programmer.
Actually, I left this thread far behind. I should have known better actually. Actually I did. I used a throwaway to make it. You make me laugh. You really do.. saying "wrong" with a straight face. You're actually serious though.. I can tell. You do understand how selective and hypocritical you're being, right? Just admit that. You don't like the idea. I get that. But you don't have the right to call it unethical. 
In general, I agree. But if your target market/userbase is 99% Windows, I don't see any problem with using platform specific code/functionality/etc to speed up development or add features that are otherwise impossible.
I will definitely do some research on html5 canvas and css for doing this, Its best to learn it the right way then learning it the wrong way!!! I also like the idea of giving each one a boolean property. Thanks for getting me to think about other options :) 
Did you hear back about the job yet? I feel bad for not saying anything positive before. I'll try to correct that now... I'll say upfront that the stuff I pointed out wasn't terrible, it was actually quite good, and I wouldn't disqualify you by any means. * HTML/CSS - succinct and meaningful * type-handling - great, didn't see any `width: "40"`, you used an array and its primitive methods properly (too many are confused by objects), you didn't have any spurious type-checking (IMO almost any use of `typeof` or similar within your own code is a smell) * used `call()`, and used it mostly properly....you do a `call($this)`, but then inside each function you do `var $this = $(this)`, re-wrapping the jQuery object in jQuery. I can see myself making that same mistake if not careful though, and it's not a big deal as I think jQuery recognizes this early on and so the performance impact shouldn't be anything. Seriously though, so many don't know how to use `call()` it's crazy, and you just tripped-up on a small detail. * nomenclature (naming things) was great throughout (consistent, meaningful, not overly verbose or awkward) * overall consistency and best-practices was really good, with consistent formatting, strict equalities, no obsessive _chaining_ or reliance on jQuery for trivial things So overall, I definitely would've seen the code as at least mid-level position (though well above average!), and if you were even roughly as good in a standard server language then you'd be in consideration for senior-level work at my current job. So you might be able to bargain for that, depending on what they're looking for and your local job market conditions. With that said, these are a few things I'd expect to see out of a solid senior-level candidate: * More of an OO approach; not a big mess of classes per se, but at least 1 main object that embodies the app. This would let you better internalize some data structures, preventing you from relying so much on closures and parameters. In fact, I think you could eliminate all of the params if you wanted and maybe even some of the closures. * More flexibility via configuration, e.g. moving the durations, colors, etc. to properties so they can be easily tweaked. *edit: actually this would have to be with prejudice, moving all of them might make it more of a pain to modify * doc-style comments (the comments themselves were good!) 
If you were a knowledgeable developer then you would already know that nodejs is implemented on V8. 
would be cool if it were reactive like excel. Maybe include reactive.js
I think there's potential in this area, but there's nothing really on the site or blog yet. It'd be nice to see what sort of solution to this problem you are planning to provide. Also, your signup page is far to bare to encourage anyone to sign up. You should put some effort into laying out what the product is, what it does, how it works, how it can help, what sort of problems it solves!
Man, I wish I had used 'call' in the code I submitted, but I added it later on when implementing someone else's suggestion in this thread. Before, I was just binding and unbinding each function as a listener. I haven't written a whole lot of javascript, but I have a CS degree and just finished reading Professional JavaScript for web developers. Haven't heard about the job yet, but it's still pretty early. Thanks for your help though, I'll update when I hear back.
A while ago I summarized all the services doing JS error tracking. There are a few: https://plus.google.com/+PaulIrish/posts/12BVL5exFJn Also of note. As of this week, Chrome's onerror handler now has a stack trace. Woohoo!
Totally agree with you for anyone just starting to play with microcontrollers. This system seems somewhat less embedded though. I love writing C for microcontrollers, but for doing anything with networking, especially anything asynchronous, I end up with many more times the boilerplate (which is part of the reason node exists,). Imagine writing something like Express in C. This isn't too dissimilar to a raspberry pi (where the default SDK is python). What really excites me is the arduino integration thing, which would save space in robotics projects for me, as I usually do higher level stuff in the pi. and also the lack of need to maintain the OS. Edit:the built in sensors and relays are really nice too. 
[AngularJS](http://angularjs.org/) is a very popular JavaScript MV* library that will definitely be able to help you achieve what you described. [egghead.io](http://www.egghead.io/) is a great site for learning how to use Angular.
Try not to overcomplicate things. One example: var a_arr = [3, 88, 89, 172, 174, 257, 260, 341, 345, 426, 431, 427, 428, 429, 430, 510, 516, 595, 602]; About your problem, you should add another factor in your x-position to enable it instead of changing your array.
AngularJS. - Has routes, templates, etc - Now has animation support - The Angular UI/boostrap library http://angular-ui.github.io/ is pretty good - There is also the ui-router/state from Angular UI - https://github.com/angular-ui/ui-router which might give you the control you want over your routing/states that the default routeProvider might not provide for you - Their directives system makes it really easy to build reusable components - Easy to test, or well - easy to build testable stuff Been using it for a few projects at work - from major enterprise level apps where the entire thing is AngularJS, to a few one-off single pages/screens in existing apps and really enjoying it.
The author said he DONT like to use Angularjs in the last paragraph. Sooooo
&gt;I have an idea how to code this but given the utility of a generic framework for managing something like this I wondered if there was already a library out there. I don't want to use angularjs or emberjs for this I would rather do without that sort of commitment to a framework. You've asked how to do this, you want to use a library, but you don't want to use a framework that's designed to do this. I'm afraid I don't have an answer for you. Use Angular, Ember, or Backbone - that's what all of the rest of us are doing. Backbone is definitely the lightest weight of them and might serve your purposes - try it with Marionette for less cruft. . &gt;I'm also looking for something that includes a css layout library like bootstrap and the necessary css3/html5/javascript magic to transition from one state to another. Nothing "includes" css libraries by default, but they're easy to add with any framework. You may be thinking of jQuery Mobile which gives you animations and the framework, but it is *awful*, glitchy, and should generally be avoided.
Chome dev tools will actually print the backtrace of the ajax request. You can even test it out on this page. Goto the network tab and click on the upvote arrow. You should see the request 'vote', and in the Initiator column, you'll see what code called it.
I like this one. It gets the the point quick, and gives you a directory with the image files he uses. That makes it relatively easy to type along with the lecture.
How many AJAX calls are we talking here? Is it reasonable to wire up their success functions with console calls? AJAX is one of those things that's unfortunately hard to pin down in some circumstances unless you know exactly what you're looking for.
Thanks for the input and maybe angular is the way to go but see my edit for why that's not preferred. 
&gt; The reason why I asked the question is that while frameworks give a full stack of tools including routing and animation they don't actually provide an out of the box way to manage layouts responding to states which is what Im looking for. Yes, they do. Do a bit more reading. 
Yes sorry. I'm not saying you can't do it. You can do it with any of the simple router libraries I mentioned but in terms of for example sliding in an overlay, pushing a panel from the side replicating github you will be doing a lot of coding. The frameworks are just providing end points for dealing with routes. My point is that deep animated layout changes are a problem that many single page apps need and a good candidate for a fairly full featured and opinionated library.
It is a great course. However, it is important that you already know how to program. I already know a little JavaScript. Through the videos I learned how to do it the right way.
Animations are trivial, especially if you can use CSS Transitions on your project. You shouldn't hold those as the reason not to use a framework - rolling your own doesn't actually take that much time. All of the frameworks listed above give you the pre- and post- hooks necessary to do exactly what you're asking without too much extra work. However, managing layouts with data binding is *very* hard, and the whole reason to use those frameworks.
Unfortunately, they're not all being fired by jQuery, and now that @exec0extreme showed me the network tab solution, it appears that many of them are dynamically-written `&lt;img&gt;` tags with query parameters... The plot thickens. Thanks!
Paste the following lines in your HTML file before including any JS source: &lt;script type="text/javascript"&gt; XMLHttpRequest.prototype.realSend = XMLHttpRequest.prototype.send; XMLHttpRequest.prototype.send = function() { var e = new Error('test'); console.log(e.stack); this.realSend.apply(this, arguments); }; &lt;/script&gt; It overrides XMLHttpRequest 'send' method, to print a stack trace for each AJAX request.
If you want a bare bones easy to follow way: stately.js + a url hash reader lib, it's not the prettiest or most robust, but it's easy peasy. There was a post in /r/javascript a day or two ago about using state machines as routers, interesting article.
This is a cool approach, I hadn't thought about wrapping the send function. I'll have to remember this. Thanks!
Is the completed game available anywhere?
[**@gdi2290**](https://twitter.com/gdi2290): &gt;[2013-08-15 15:08:15 UTC](https://twitter.com/gdi2290/status/368026354559639552) &gt;Angular is the new hotness &gt;[*google.com*](http://www.google.com/trends/explore?q=angularjs%2C+emberjs%2C+backbonejs#q=angularjs%2C%20%20backbonejs%2C%20%20emberjs%2C%20%20ruby%20on%20rails%2C%20%20nodejs&amp;date=today%2012-m&amp;cmpt=q) [*pic.twitter.com*](http://pbs.twimg.com/media/BRt-BQQCYAAQGO_.png) [^[Imgur]](http://i.imgur.com/eZrk9IP.png) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/1khqq2%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://www.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
**I love that you're contributing to the community!** Some critiques, apologies for bluntness in advance. ###On largeness: What qualifies this app as "large"? Is it distributed? How many users do you have? What is the geography of the users? How many developers are on the team/teams working on this? How many systems does it interface with? ###On integration with Rails: Any Angular app has the luxury of being completely de-coupled from any server technology. Plain HTML and JS are the order of the day. The mere mention of a server technology like Rails is a red flag for me. This is a client app in a browser. Maybe I misread that section? ###On "event loops": &gt; Angular maintains its own event loop outside the browser event loop to do dirty checking and make sure data is in sync. ... no it doesn't. It has a digest loop, an ["event loop"](http://en.wikipedia.org/wiki/Event_loop) is something else entirely. ###On code organization: &gt; Most project scaffolds, tutorials, and sample apps have a folder for each type of file. All controllers in one folder, all views in another, and so on. &gt; After a lot of experimenation with a folder structures, we found ourselves putting all related and dependent files in the same component/page folder as shown below. ... so you're actively structuring your directories and files with the idea that groups of controllers, views and services are tightly coupled? Your controllers and views are to never be reused? The common practice of grouping like object types in folders was developed so they could be thought of as separate, independent, reusable pieces of code. Coupled to nothing. Theoretically, I could make a dozen views and have them all use the same controller, right? Or I could make a dozen controllers and all have them affect the same view... so why pigeon-hole them by grouping them like that? **I suppose if you find in enhances productivity then that's what's important**. Just food for thought. ###overall not bad. This article isn't a bad start for someone coming from Rails wanting to make a medium sized app. 
A bit bogus‚Äîespecially since I'd be surprised if people actually used "ruby on rails" when looking up Rails-related things instead of "rails".
- by Google
You still need something to power that Angular client with. It's great that new ideas and paradigms are being developed, but it's not like this is a 1:1 replacement technology. You're still going to have Rails, PHP, Node, or something handling the server side of that equation.
Angular is a joy to work with.
Why Node? Why not Rails? Sinatra? PHP? Lift? Go? I'm not sure why tightly coupling your front-end and back-end technology decisions is a good thing. They are two very different disciplines, and should be given equal consideration. ** Edit: Node is just as valid of a choice, but I don't know why it should be seen as a foregone conclusion.
Possible code reuse between front-end and back-end (see https://github.com/airbnb/rendr). Needing to know only one language as opposed to multiple. Not to mention speed. 
I'm always surprised that Backbone is so low. It feels like I see more learning materials for it and job details with it than any other front end library or framework.
It has been around longer.
I'm not sure those tools expose anything in the sandbox. When you said "then dump the stored data and cookies and whatnot" did you mean output them on console.log? I assumed you meant "dump them" as in delete them (which is a perfect example of what some scam site would do to answer your question), because triggering a console.log of debug data seems ... almost useless? Just output it to a debug div based on some flag/parameter/setting/whatever, that's what everyone else does. Basically, even if you want this for something useful it's not possible because the useful use cases are minimal and the harmful ones are many. Any browser would treat this kind of data leakage as a bug, but there might be some out there you could use for a while, I'm just not aware of them.
Thinking about the rest of your post, but this jumped out at me: - probably how the focus is changing towards "single page" applications, as well as more complex "binding schemes" This strikes me as being separate concerns. If we are looking at these new JS frontends as being a true client of the server, then they should be decoupled and just agree on some common protocols for exchanging data. The two things you mentioned are client side concerns. With modern client side frameworks, the server doesn't care if there's a single or multiples pages in the client app. It's acting as a data broker. I think that a lot of the blog posts I've read are disingenuous. They build trivial apps where it's easy to make a case for a particular technology, but once you get past that both the client and server can start to get very complicated, and they should be able to change and scale separately. I'm really interested in these new frameworks, but it's a little cargo cult-y for me right now. I built a couple of production Node.js apps back in 2011. It was interesting, but certainly not the magical pixie-dust experience I see some people referring to it as. My current team built a load-balancing proxy with Node last year and by the end we all felt like we'd made a huge mistake. A couple people ended up having to submit patches to some of the core libraries we were using, and we all felt like it was just a lot of hype without a lot of stability or good engineering.
The graphs represent search volume not usage...
&gt; Agreed. Here's the same thing with just 'rails' and here's 'ruby rails.' You can't use generic terms like that. For example add "Meteor" framework to see my point 
Yeah, that's why this is a pretty bogus metric. Heck, all the major events on "rails" are about trains. There's currently no way for Trends to measure what we're trying to measure: the popularity of *concepts* over time rather than terms. It's a decent approximation, but, in a context where just about everything is named after a common noun, the comparative results just aren't gonna be meaningful :/
Actually you don't. You can write an entire Angular application with nothing but static JS and HTML files. Maybe it just saves data to local storage. :P Either way, bloated UI/HTML rendering frameworks on the server are completely unnecessary for an Angular app. If you needed to get some data from a server, you'd make an AJAX call to get some JSON from some API. 
&gt; I'm not sure why tightly coupling your front-end and back-end technology decisions is a good thing. ... how is using Node for a server and Angular for a client "tightly coupling"? They're two independent apps... one is a client app, the other is a web server that presumably just hosts JSON and some static files. You could move the Angular app (which if it's not poorly developed will be nothing but HTML and JS) to ANY static file server and host it. Furthermore, you could change your server technology to anything you want, as long as the API endpoints where the same for your AJAX calls. ... maybe you didn't mean "tightly coupled"?
Yeah I agree with the general viewpoint. The second part of the comment described an additional issue to consider before using Node, at some point complexity can get high enough that you might need stuff like a typing system, or some other software (or software vendor) guarantees. I think what you are describing in the first part is what Microsoft is attempting to do, (in various often inconsistent ways, and usually subtly tied to .net/windows). 
I know, that's why I included 'ruby rails' in addition to just 'rails'
&gt; ll the major events on "rails" are about trains. That's why this is a pretty bogus metric: there's currently no way for Trend well if you look at this trend it's very representative. Also keep in mind China loves Angular and Node http://www.google.com/trends/explore?q=angularjs%2C+emberjs%2C+backbonejs#q=angularjs%2C%20backbonejs%2C%20emberjs%2C%20ruby%20on%20rails%2C%20nodejs&amp;cmpt=q
Mhm. Even though terms are a very weak approximation when trying to compare the popularity of multiple concepts, they're a darn good approximation when tracking a given concept's popularity over time, so that's pretty spiffy.
Why Angular over Ember? - Built from the ground up with dependency injection and testability in mind. - Uses "plain" JavaScript objects for models. - Organizes code for you with a built in module pattern. - Uses actual HTML, not script tags containing strings of psuedo html, for templating. - Completely separates DOM manipulation from business logic from AJAX logic. - Tries to enforce SOLID principals. - Built in form validation. - Pre-built libraries for e2e testing and unit testing. Ember is perfectly fine... but if you're working on a large team, in a large app, where thorough testing is a requirement... Angular is better. It was built from the ground up by industry experts that put a lot more thought into the design than is apparent in Ember's design. (For example: DI was added as an afterthought in Ember) --- **EDIT:** hell take this code for example... ###Ember Todos.Todo = DS.Model.extend({ title: DS.attr('string'), isCompleted: DS.attr('boolean'), }); //somewhere in your controller... Todos.Todo.createRecord({ title: 'some title', isCompleted: false }); ###Angular //somewhere in your controller... $scope.todo = { title: 'some title', isCompleted: false }; ... I think it's readily apparent which one of those two is more concise.... and the templating in Ember with Handlebars is just ugly as hell... and in script tags? yuck. why? 
[And to extend that... ](http://www.google.com/trends/explore?q=angularjs%2C+emberjs%2C+backbonejs#q=angularjs%2C%20%20backbonejs%2C%20%20rails%2C%20%20nodejs%2C%20%20php&amp;date=today%2012-m&amp;cmpt=q)
There's a lot of arguments for using both AngularJS &amp; Node.js because they both rely on the same language so you can get some synergies from your development team. I consider that decision to be a form coupling; the decision about one is based on the others. They are different things, and I hear a lot of talk about treating them as if they aren't.
- Actually you don't. You can write an entire Angular application with nothing but static JS and HTML files. Maybe it just saves data to local storage. :P Well played. I guess I should have said "non-trivial", although I'm sure someone can pick that apart as well.
... but, [tight coupling](http://en.wikipedia.org/wiki/Coupling_(computer_programming\)) is an actual thing... you don't get to just assign your own definitions to it to make something sound bad. That said, while I love playing with Node, I don't trust it's robustness or scalability for anything beyond a small, low use API. I don't feel it's proven in that arena.
? Nobody except other developers care about wether or not whatever you're using the new cool thing.
&gt; Where's this perceived disdain from the Python community coming from? The problem with monkey patching in general is that if library A changes behavior in a way library B isn't expecting, you now have subtle and hard to track down bugs, since it'll look like library B is broken, but it's because library A changed the way some core behavior in an unexpected way. My general rule when monkey patching / duck punching is to do things that ~~are free of side effects~~ don't alter the core functionality of what you're patching. The most common use I've had in production code is to duck punch functions such that events are raised before or after the original function is called so that other code I'm writing can be event driven, rather than having to hook directly into the code calling the function. For example, if you wanted to bind something to happen after an element was revealed with jquery's .show() (function ($) { var _oldShow = $.fn.show; $.fn.show = function( speed, easing, callback ) { var temp = _oldShow.apply(this, arguments); $(this).trigger('post-show'); return temp; }; })(jQuery);
You are comparing a full blown ember-data model (which has the ability to persist itself to the server!) with a simple Javascript object and argue that Angular is "more concise"? Seriously? That's what your equivalent Ember code would look like*: // somewhere in your controller... todo: Ember.Object.create({title: 'some title', isCompleted: false}) \* This might not be 100% correct, my Ember is a bit rusty.
its funny how you rails guys feel compelled to defend the popularity of your language
Okay, it's a difference of modifying at the source vs modifying at the point of calling, I got ya. I definitely am not terribly fond of modifying objects that aren't mine; I instead use a complete wrapper. I can completely understand it in a language like JS where you have to shim to support older browsers, though. Thanks for the explanation!
A little less conversation and a little more action, please! I mean, there is no silver bullet. SPA are definitely powerful if done right. To do them right they became complex: with a lot of cross cutting concerns to be taken into consideration. As a matter of fact the done right result is what the market are asking. That don't imply that we shouldn't find a way to make them simple, just, that we need a language that take care of the underlying complexity. We don't need more features. On the contrary we need less. We need to define a clear standard for ReST and Hypermedia build robust, dynamic api. The rest will basically adapt to that standard. What is not good with Fielding distraction is that it is an Architectural style and not a Specification. We need a Specification for Hypermedia we can reuse building other standard for the client side. Obviously there is a lot of efforts going on on various communities, and damn it is good efforts. Let's see what the future reserve for front end development. 
If you like, show it :) https://www.facebook.com/html5zombies, help keep it free
Hey, do you think you could help me with html 5 canvas? I have been messing around with it today, and was able to get a line of dots onto the screen. However i am not sure what path to take to be able to make my idea work. How would i "turn the grey dot to white" on the canvas? Any ideas?
Sure! So canvas is natively draw based, not sprite based unfortunately meaning when u draw a circle its like drawing it with a pen, not a magic wand xD. So you would need to clear the canvas and draw an entire frame to change a single dot. So I would recommend having an array full of dot objects with a fixed x and y to draw at, and then a boolean on or off. When u need to change a certain dot, say something like arrofdots[8].on = true and then call a draw function which loops thru the arr, refreshing the frame. And if the arrofdots [I].on == true, change the fill color to white. I would google clearing the canvas, and filling it with black as I forgot how to do it.
cool, that should get me started! I will be working on it some this week, I will get back to you Monday :)
Agreed. I like keeping my views dumb.
And now [let's add spaces to the other queries](http://www.google.com/trends/explore?q=angularjs%2C+emberjs%2C+backbonejs#q=angular%20js%2C%20backbone%20js%2C%20ember%20js%2C%20node%20js%2C%20ruby%20rails&amp;date=today%2012-m&amp;cmpt=q).
Thought Node was JavaScript? JavaScript to Ruby, Node to Rails?
* Full time staffers * Browser teams communicate * Solid roadmap (decoupling of the core, +more goodies) * Highly stable (no RC7's here) * Simple REST adapter (ember-data is shit) * Not bastardized, MVC2 pattern. It's model-view-whatever. I could go on.
node isnt a language. the language of node is js
Sure, it's a great skill to have. You'll learn about dependency injection in a big way if you haven't already, and religious separation of your view and controllers/data model. 
gonna have to disagree with you here. Using the same language for server and client does not make it "coupled" in any way.
Neither is Angular or Node for that matter. They're both platforms built on Javascript (and Angular incorporates HTML-ey stuff into the mix also). 
This seems infinitely more accurate than the bs op trend.
There's a great ember vs angular video on the net. If I weren't on my phone I'd find it. I was leaning towards angular until I saw that video. They took two of the top guys and had them write code together. It's awesome.
I agree. Popularity does not mean that it is better. Plus maybe everyone is just searching "Why is Angular.js breaking with Node". It is a difficult to judge metric.
Yes, aren't you in a rat race? Go back to your cubicle and code! 
I've seen two of these, and they are always two ember developers doing the comparison. Or at least the angular developer us usually bad.
Maybe if you have a trivial application. What fits in a blog post is not a production ready application.
I'm not sure what you define as trivial. Rails, Django, CodeIgniter etc are about building web pages from data. If its about more than that you have business logic where it shouldn't be. Pushing the dynamic html to the client has greater scalability, better caching, etc. Making your web server into a dumb data layer also decreases your time to deploy across multiple platforms (mobile, web, native) Rest is about much, much more than serving up blog entries.
I still find the Angular way cleaner / easier to understand. I'm literally just declaring a JS object.
DoubleClick is build using Angular. It's a pretty sizeable application.
&gt; let's add spaces to the other queries that's actually very inaccurate. Just look at the related terms for "ember js" you end up mixing results from angular and backbone
You have no business logic in your server layer? So it dumbly ferries data back and forth? Doesn't make sure data is consistent before persisting and sending to other clients? I'd call that pretty trivial.
That has nothing to do with what I've said. I didn't make any claims about whether its good or bad to use any framework. The only thing I've argued is that it doesn't make a lot of sense to make a decision about technologies to power a backend based on what you've chosen for your front end client. They are separate concerns that should be evaluated based on their own requirements and communicate over well defined protocols. What I did say was that I've yet to see a reasonable argument to pick a server technology based on your client stack. Doubleclick RE-built their client side in Angular, which is cool, but they didn't rewrite the backend in Node to match tech stacks.
&gt; I think node can be compared as a language to ruby nodejs would be comparable to ruby on rails, while the language for each is javascript and ruby respectively. 
Pedant, ruby is.
The reality in most web apps that I've worked on, is the reusable stuff tends to be more 'widget' type stuff - dialog boxes, alerts, contact search/selection, etc - and would tend to get shoved under where they have 'shared components'. For actual heavier screens - it's pretty rare that reuse happens on the controllers/views - in Angular, once we start getting into 'this is a bit of logic/code that needs to get reused' - that logic gets pulled out into a service, and several controllers will call that service. Maybe in an ideal world 'any view could sit on top of X controller' would happen, it just seems rare to play out that way. As such, I could see the use in putting the related files - template, controller, rout/config into the same folder. One thing that tends to bug me with having all controllers grouped under X, all views grouped under Y (although this is how my current app is set up) - is you often spend time digging around your solution and jumping all over to find related things. I can definitely see the appeal in having them grouped together - and even as such actually, if you wanted to have controller being used by a few views, could have /module/modulecontroller.js /module/module-mobile.html /module/module-desktop.html /module/module-detailedview.html /module/module-compactview.html Just if that moduleController is using a service that is used by several different things - then I'd agree, wouldn't make sense to shove the service in there also. Pro's and cons to both approaches IMO. 
It's going very Pythonic, and that's awesome 
Yes that's it. An excellent video.
True, and as it's getting more mature and gathering a larger community on places like StackOverflow, that situation is improving.
My library [Satnav](https://github.com/f5io/satnav-js) provides routing for SPA. It has a proven track record in production environments.
I wasn't saying one should re-write their back end in node (I wouldn't say that, so far I have been unimpressed with a purely event driven programming model).... and if they switched to angular they would have to make some pretty major changes to their service code. That isn't to say they would have to change the actual stack. You can build a rest service in rails, php, django, web api, or whatever. I'm saying that the back end code becomes massively simpler, more efficient, and easier to cache when you are serving up data objects serialized to JSON instead of dynamically built html. 
I agree, trivial data validation should occur in the service layer... Complex data validation should not.
At least it has ogg support. The license fees with MP3s really sucks, hopefully they'll extend it to support AAC somehow.
Ember.Object provides things like observers where plain JavaScript objects don't.
Thank you for those points. I did not know what the positives were over Ember. A while back, I read [AngularJS vs Ember](http://eviltrout.com/2013/06/15/ember-vs-angular.html) and that article had swayed me to the Ember camp. I do agree with you that Handlebars can get pretty ugly. I also strongly prefer Haml like HTML syntax just as I prefer Sass for my CSS so [Emblem.js](http://emblemjs.com/) is a really great alternative. I love Emblem.js syntax.
That's an unfair comparison, Toms one the creators of Ember. Rob has nothing to do with the angular team. Also the issue Rob got stuck over, multiple Dom templates per element, is supported in Angular. Rob just didn't know the syntax. Robs a smart guy he just wasn't as prepared.
You can attach observers to $scope variables I believe.
I think this is kind of generally a fair point, but as a middling Ember guy, I could have done anything Tom did no problem.
You can watch for changes to a $scope variable with $scope.$watch('varname');
Reasoning described [here](http://www.ibm.com/developerworks/library/wa-ioshtml5/) for elaboration. The fees with MP3 surmount AAC &gt; Why isn't MP3 included? MP3 comes with hefty royalty payments when distributed commercially. The license requirements for MP3 will claim a distribution fee of 2% of all revenue over $100K (see Resources). For this reason, I prefer AAC over MP3. AAC is not royalty-free, but it has a much more relaxed license that allows free distribution. AAC also provides better compression, allowing for smaller file sizes‚Äîa blessing in the web world (see Resources). Specifically [here](http://www.vialicensing.com/licensing/aac-fees.aspx). There's fees, but they're not nearly as bad as MP3's.
I remember reading that article here on reddit. [In fact I even commented on it](http://www.reddit.com/r/programming/comments/1gsq1u/shortcomings_in_angularjs_and_how_the_ember/canj0nu) The Ember and Backbone crowd are trying extremely hard to find fault in Angular at the moment. It's weird and frankly counter productive. Anything that pushes JavaScript forward as a more viable development platform should be either embraced, or it should be a call to improve other frameworks. That templating is a shit-ton better than that handlebars junk for sure. You could, in theory, use HAML with Angular or any static HTML file though... All you'd need to do is use Grunt to process HAML files to HTML for you when you built your JS app. I agree with you that HAML is a really great way to write HTML. Sadly, my team is very large with a mixed group of developers at different skill levels. So I have to stick with common technologies like HTML. Grunt builds, Linting, Jasmine, Protractor tests and the complete lack of server side templating was already enough to throw most of them off balance. lol. 
Ah, didn't know the license was more favorable. Opus is looking like best quality and license, but who knows if apple will ever implement (despite being MTI for webrtc)
I am new to "vanilla" JavaScript and would realy appriciate ANY feedback. Don't be shy :) Been very fun doing JavaScript coding. It has come a long way since my first encounter with JavaScript and "DHTML" +10 years ago :P
I just watched this presentation [Tom Dale, Peter Cooper and Rob Conery; Cage Match - EmberJS vs. Angular](http://vimeo.com/68215606) that was a quick dueling banjos, if you will, comparison between EmberJS and AnguarlJS. I do admit that it Tom Dale probably has a bit of an edge in domain knowledge over Rob Conery, but regardless, Ember really does shine in this comparison. Personally, I really love good competition between technologies, so long as it is health competition. The Angular vs. Ember competition only pushes both frameworks forward as they take working ideas from each other. Honestly, I don't know enough about Angular or Ember to really make an informed decision about which is "better". Coming from a rails background, I find Ember to feel very intuitive, and so Ember is probably a good match for me. I get the general impression of how Angular works, and I can see how some people may prefer using it. It really comes down to a matter of preference. Both frameworks are doing great things and pushing client-side web development forward.
I...think this is cool, but I could someone tell me what I could use this for? Is it like a mini test server? Am I being too closed minded. I like the idea of having shit like this lying around my flat, but if someone could give me a good reason as well, that'd be awesome! :D
Great addition to a rather under-served area of the Angular tutorial area. Keep on bringing the goodness! Another very good example of a non-trivial Angular app [is this one.](https://github.com/angular-app/angular-app "angular-app on Github") Invaluable for a look at how to integrate Express, manage the front and back ends and it includes a very robust build process.
Spent the last 18 months making this game on the train on the way to and from work each morning. Built with ImpactJS, JQuery, Rapheal. Enjoy! 
I enjoyed the Will Rogers name. Have any ties to Oklahoma?
Nice job, I assume you used the canvas element for this project, how did you add the preloader might I ask?
I haven't been able to get it to load yet, but I would guess he used ImpactJS for that. It would be interesting get some direction on how to change it with ImpactJS, if that is what they used.
I'm getting a 503 Bad Gateway "Over Quota" message. Is there another link? I assume it's down because it got a ton of views, good job on that.
You'll want to use a for loop since your elements are contained in an array. var nodes = document.getElementsByTagName("textarea"); for(var i = 0, len = nodes.length; i &lt; len; i++) { var node = nodes[i]; node.innerHTML = '..'; } Basically this says 'for each index in the array (from 0 to the max index which was 10 in your example), get the textarea node at that index and set the innerHTML property'. To get a better idea of what is going on, you can add a couple of alert statements into the code. These will pop up message boxes with the current values as the loop executes. var nodes = document.getElementsByTagName("textarea"); alert('Found ' + nodes.length + ' text area nodes.'); alert(nodes); for(var i = 0, len = nodes.length; i &lt; len; i++) { var node = nodes[i]; alert('Working on text area with index ' + i); alert(node); node.innerHTML = '..'; }
Sorry guys look like I'm over the quota - shouldn't be too long before it's back!
Why not use a foreach loop? Also what is nodes.length and why is there i &lt; len? Is that so it will keep going until it runs out of textareas?
Hey guys yes it was ImpactJS you can specify a custom loader: http://impactjs.com/documentation/class-reference/loader 
nodes.length is the length of the array called nodes. 'i&lt;len' is the condition for the loop to keep going (len is assigned as nodes.length). i++ is the incriminator that moves the loop on. It's hard to explain it more simply than BunKat put it, this is pretty entry level programming in any language, and the syntax would be almost identical in C/C++/Java/PHP and loads of other languages, so I'm surprised that this is a problem for you if you have programming experience. What is your background? .net? VB? Something else?
Very impressive! Fantastic job
PHP, Perl and a little Python. I would have just used a foreach loop and then added 1 to the variable at the end of the loop. 
Since you are using a textarea, it is better to use 'value' instead of 'innerHTML'. `for( i=0 ; (elements = document.getElementsByTagName("textarea")).length;i++){ elements[i].value='..'; }`
This should work: var textArea = document.getElementsByTagName("textarea"); for( var index in textArea ){ if( textArea[index].innerHtml ) textArea[index].innerHtml = '..'; } 
I've seen that one as well. That's the same deal as most of them... It is a group of ember developers doing the comparison. You're better off doing a side by side list of bullet points, currently. 
When using the WASD keys to navigate, you can't go forward and turn at the same time.
Why do you use one letter variables ?
http://api.jquery.com/click/
Yes, I get asked that question a lot. I find that, in my personal opinion, in some cases well named variables are helpful and in other cases they are completely irrelevant. For me it comes down to whether or not the reference in question is a container, such as: function, array, object. If the reference is not a contain then it is likely a literal and its name is irrelevant to me, because I see what the reference is either by looking at the code directly or by using *console.log* to determine its present value, and thus type. Once the question of whether the reference is a type of container is answered then I ask myself if the container is used across various scopes. If the container is solely confined to a single local scope then its naming is likely irrelevant, because I see exactly what it is by looking at the code as there are likely no side-effects to anything confined to a single scope. Once the questions of container types and scope are addressed then there is a very high probability that naming of the reference is crucial to understanding of the code. At this point the only exception for not supplying understandable names to references is universality of the reference in the library, or at least universality in a major, preferably dominate, component. To illustrate that scheme most all the references in the library are single, double, or triple letters that do not spell words. Nearly all functions used across various scopes are well named as well as the one object literal and the five universal arrays. One of the exceptions to proper naming is the *c* variable in the *tokenize* function. This reference is simply the input code split per character into an array. I know this from looking at the very top of that function and it is used so frequently everywhere in that function to specify instances of single characters that its meaning is well known even without a well meaning name. **tldr** I prefer to code in a very imperative fashion because I prefer to know what the code is doing by reading the code. If this is accomplished without well named variables then so be it.
Thanks, I will examine that!
something like this: http://jsfiddle.net/f63pw/ 
Difficult to say without seeing your html. Did it work with the code as it was? Maybe just post the html (those parts relevant) or even better create a jsfiddle. Or add html to this fiddle, save and post the link for the new version.
Why not use Esprima? Also if you want technical feedback xpost to /r/programming
This might work for you, but for example this: //variables j, k, l, m, n, o, p, q, and w are used as //various counters for the reporting only. These variables //do not store any tokens and are not used in the algorithm is beyond comprehensible for me. (btw, I know how hard it is to write something as abstract as a parser while coming up with decent names...)
Hey, It worked with the code as it was, other than it executed on page load. Here's my JS Fiddel: http://jsfiddle.net/MxXsM/ Thanks :)
I suppose I originally didn't think of this as a parser when I initially started work on it. When I first started I just needed a beautifier and the one I had spent so much time modifying over years was broken. I only realized it was a full parser after initial beautification was complete and I saw that JSLint added a feature around January to color code functions in its reporting based upon scope depth. I said to myself, "Hey, I can do that in the directly in the context of the code". The realization there is that I have this expressive thing that breaks everything down into tokens and then supplies enough metadata with those tokens to enable contextual analysis. Shortly after this the project QA, Harry Witfield, suggested I add some auto-correction features. The combination of those two events is what allowed me to realize that if I could get some of the auto-correction stuff working properly there was a lot of potential to do other things, whatever those other things might be. Unfortunately, it took me months and several attempts to get the curly brace insertion correct.
Interesting - I can see how this would be a perspective you could have if you were starting out in coding. The issue is that if you have a problem of enormous complexity, you have to modularize if you have any hope of understanding the system and reusing functionality. In that regime, it is actually beneficial if a system hides its implementation from you, because it is just confusing to have to deal with it while solving some unrelated problem. I've been programming for probably around 15 years in numerous languages, and I strongly favor functional programming style with minimal side effects, and side effects tightly bundled into objects when needed. I rarely use debugging tricks like `console.log` because I feel that if I have to ask the program what the value of something is at execution time I probably don't know how my code works, and if I don't know that, I am lost. When I have errors, I tend to rewrite my code, separating it into smaller functions and methods and classes, until there is no place for bugs to hide. To each his own, though!
Great job! I just spent about an hour or so playing through this (didn't quite beat the last level, I've got things to do) and it was a lot of fun.
The controls are super weird. I'd love to be able to rebind all the keys.
To me the two samples of code are identical except the second is more frustrating because I have to tear through unnecessary characters to see what is really happening with the operators. Maybe if the variable names were extremely short I could better understand your position, but in your example they are not. It takes all of 10 seconds to get a handle on the first set of code. I would have to sit down and really study the second set, because its syntax is so completely less apparent. To me *tldr* sums up my thoughts completely on your second set of code. I guess I can see why that code would make more sense to you, but typically I don't have that kind of time and with big names like that I can imagine my frustration would increase in proportion to the increasing underlying code base. This frustration is just in reading the code. I believe the second code sample likely took you far longer to write than the first. I never got into programming to read novels or dissertations.
Is the course no longer free? I am asked to pay 49$ to enroll...
In that case, I hope I never encounter any of your code again. I also hope that you are not a professional programmer working in industry, because if you are writing code in this style that others may have to maintain in the future, then you are inflicting great pain upon those people. Your style is completely unintelligible to anyone except yourself, and worse than that, you don't see this as a problem, you don't even appear to realize that not everybody reads code in precisely the same way you do or for the same reasons. You would rather optimize for completely inconsequential things like how long code takes to physically type into the keyboard than make your code readable. I am sorry that I could not get through to you about this, I feel very strongly that your ideas are hopelessly mistaken.
Hey, Thanks again for that. I'm totally baffled, I copied the code line for line as per the (working) fiddle, and it doesn't work on my testing server. My only thought is that I have something that is interfering...
&gt; Logically the math is the same, but it was impossible for you to infer the intent in the first example the way you can in the second. Your intent is best served with thorough documentation and unit tests. &gt; In the second one you immediately understand what the calculations are supposed to be. The calculations are the same either way by looking at the syntax. One sample just takes me longer to read than the other. The best of intentions are irrelevant to what the syntax is actually doing. &gt; You might think you've got this programming thing figured out, but trust me when I say even if it's easier for you to code this way, you will frustrate anyone else who has to read it in the future. That is probably true, and when the time comes where this is problem I will find a resolution that is amicable to the parties involved. You might find my coding style complete and utter bullshit, but longer variable names would not make it any easier to understand. I have tried to correct for this in the past and the frustration and confusion that were present prior to the introduction of well named variables was equally present after. Its my opinion that the only quick way to confront a challenging problem is to confront it as directly as possible, which means primarily focusing on the syntax and structure above all else. &gt; You are not a special snowflake. An important part of being a good programmer is being easy to work with. I have never claimed to be special or better at writing code than anybody else. I have no idea where you are coming from with this. I believe software speaks for itself. It either does its job well enough or it sucks regardless of differences of stylistic opinions.
That's the pain of this mix of html, css &amp; javascript. Can be something as primitive as a background-color set wrong or a missing closing } somewhere. This would be a matter of a few minutes to debug since it can't really be that much. From your question it seems you are rather new to this thing so most likely not comfortable with your browsers debug tools (which you can see if you press Ctrl-Shift-I in Chrome). If you want you could send me the complete code somehow. Or if you have it actually online a link and I will have a look at it. Otherwise the most simple way to debug: - As mentioned open the debug tools - There is a tab 'console'. Select that. First step: reload page and see if the console throws any errors (missing {} and stuff) Now that all primitive bugs are removed, you can use the console.log to iztput stuff. Just put console.log('some text'); at places in your code that you think should be called. That way you can at least see what happens in the background. 
Aha! Caught a bug! Uncaught ReferenceError: $ is not defined So that's occurring on this line: $("#thebutton").click(function() { Am I missing a "var"? And yes, I'm pretty new to js. Not bad with PHP/MYSQL/HTML/CSS but I just didn't make a big leap into JS. Obviously I need to! Thanks so much for helping out with this :)
Ah whoops.. it was because I initially had a bunch of stuff defined at the top for test (`a = [1, 2, 3]` etc) and just deleted it before uploading. I added a var ~~statement~~ keyword. Thanks! :)
Well, I don't want to be mean. But in computer science these types of parsing tasks are (very rarely) programmed from scratch. No browser programs their own parsers. They take from the specs whats called a context free grammar that then is passed into a lexical P generator. Basically, there's a language specifically for parsing other languages. It's extremely easy and very powerful and can generate parsing code automatically for C/C++/Java/JavaScript. Try these parsers out because the CFG's are usually published with specifications making it possible to generate new parsers when new versions of javascript (or any language) are released (almost automatically). Then you can focus on adding features rather than generating a parser that might be invalid. Here's a LP that uses CFG's built in JavaScript (and can generate javascript from a CFG): http://zaach.github.io/jison/docs/ 
Yup, googled the issue and included it. That killed off the bug. Frustratingly, the progress bar still doesn't load. Console shows no bugs, so I'll try and make a log
I don't doubt your own competency, but I know a lot of developers far more competent than either of us who would scoff at this kind of code. Immediate and clear understanding of code and well-named variables and functions go hand-in-hand for just about anyone (except you, apparently). Have you ever worked in a team environment before? Again, I don't doubt your skill, but I would also flat out refuse to work with anyone who coded like this, and I imagine you'll find that to be the case with the vast majority of other developers, as well...
This a million times. He isn't even easy to converse with, you think he is easy to work with? I would ask my boss to reconsider this hire.
Ok, Nothing shows in the console. I added console.log('some text'); at various points of the code, so presumably this indicates that the error lies in the html and not the js?
very cool played around in the first level, I think some game mechanics should be polished. but otherwise a good job!
Intent is best *accompanied by* documentation and unit tests. The code itself should, wherever practical, be virtually self-documenting, though. Consider: a = b * c; What's the meaning of this code? You have absolutely no idea. All you can infer is that `a` is the product of `b` and `c`. This tells you *nothing* about what the code means. Syntax only gets you so far. Semantics are *necessary* for understanding code at a glance. Now consider: totalPrice = pricePerUnit * numUnits; The meaning here is instantly understandable. Unlike the previous example, you didn't have to go searching through scopes and callbacks to find out what `a`, `b`, and `c` were just to figure out what was going on. This is self-documenting code.
Yup, added directly behind that line and the button has the correct id. Only thing that I can think of as possibly influencing this is that I have $("#thebutton").click(function() { and &lt;button class="btn btn-success btn-large" id='thebutton' Would single versus double quotations make a difference?
I would like to hear more on this. Do you not use objects in your code?
I am not completely familiar with the term CFG, but from reading about it now it seems my parser is mostly aligned in similar design objectives. The token creation processes based upon a single start character builds until either an end character is reached. The end character could be something specified, as in the case with strings and comments, or unspecified as in keywords and variables. When one token ends the next non-white space character forms the start sequence of the next token. The one exception to the context free form is with numbers. A number may start with a dash or minus character and may contain a decimal. In this case those two characters are lightly overloaded in that the dash character could represent a negative number sign or a subtraction operator, which are context dependent considerations. Likewise if a number starts with a decimal the decimal is likely just a decimal notation and not a property separator, but as the start character of a token this decision is context dependent upon the prior token and forth-coming characters. Any other context considerations in the token creation process represents either a token conversion feature as part of the extended auto-correction feature or missing things like optionally neglected curly braces and missing semicolons. If the language were more terse in its requirements it could be more readily addressed in a purely context free manner, but unfortunately this is not the case. The later white space algorithm almost purely represents context derived associations.
Never use for..in loop to enumerate collections. It contains all enumerable properties. Not necessarily just indexes.
No, you can use those quotes as you want. Did you put a console.log directly before that line? This one should happen on page load. The one behind the line only when you actually click the button. Put this line before the whole thing: console.log('found ' + $("#thebutton").length); If it finds the button it will output `found 1` else `found 0`. Do you still have this `onclick="document.getElementById('sound').play()"` in? In jsFiddle it didn't matter but maybe having two click event handler here block each other? 
Always (and I mean really always) use `var`.
Yeah, I work in a team. Each member of the team makes tradeoffs. I cannot stand jQuery and it is a jQuery shop. For my willingness to tolerate and debug jQuery problems they are willing to tolerate my short variables. These things in a functional team are extremely minor provided regular code reviews and proper documentation. Once a team is working together for more than a few weeks these issues never come up because they are far too minor in the grand scheme of the various projects and the daily grind of changing requirements or scope creep.
&gt; Intent is best accompanied by documentation and unit tests. The code itself should, wherever practical, be virtually self-documenting, though. That is what comments are for. &gt; What's the meaning of this code? The code is already self apparent that it is simple multiplication. Changing the variable names does not supply any additional meaning or understanding to the simple task of multiplication. Two weeks ago I changed dozens, possibly hundreds, of variable names in a larger application comprising the library I linked here for closer compliance to the recent JSLint update. This change was not intrusive and did not impact my understanding of the code.
In exchange for "tolerating" your team's choice of library you have them "tolerate" your bad code? Maybe you shouldn't work on a team where you dislike the underlying technology. Justifying it this way seems really petty and passive aggressive. You joined their team presumably knowing about jQuery in advance, why are you using it against them to justify bad coding?
Hey, Yup, put the line where it should be. It doesn't output anything. I tried it with and without the inline onclick in my button html. I'm using chrome, and linux but have tested this on windows too. Same problem. 
Ok! Test logs! Hurrah! I'll PM you the link if that would help :)
Its easy to write code that you can understand, writing code that others can understand is a lot harder, but is worth it if you want others to contribute to this project. Your method of understanding this code works with one letter variable names, but its code you wrote so you already know it inside and out. A person coming from out side doesn't have the shape of the program in their head, they need the clues that variable names bring. Here's the most important thing, YOU WROTE A FUCKING SYNTAX PARSER write a program that toggles between the variables that you like and the variables that others can understand.
No problem. https://github.com/jshint/jshint/blob/master/src/jshint.js
&gt; This approach frees me from reliance upon this and new and all the problems frequently associated with them. I never want to chance down what this represents in some far separated analogous context. The `this` keyword in JavaScript is really not hard to understand. I'd suggest sitting down and studying the semantics of it for 30 minutes and it'll be much easier for you to reason about other people's code in the future.
Sigh. Nowhere in that code do I see a dozen no named variables declared at once. I also don't see the aa, bb, cc, etc variables littered all around your code. Their variables are named things like state, token, left, right, etc. They do use single letter variables for iterators and the odd trivial method, which nobody is complaining about. Here's a weekend exercise: take a good look at their code and a good look at yours. They are remarkably different.
It doesn't even take 30 minutes. See my post on this topic from a while back: http://www.reddit.com/r/javascript/comments/j2j8b/the_this_keyword_is_extremely_simple_and_doesnt/
Well your question has already been answered, but as you were asking about foreach, I can demonstrate a way for you to achieve it without 'for in'. var textareaArray = Array.prototype.slice.call(document.getElementsByTagName("textarea")); textareaArray.forEach(function (el) { el.value= "New text!"; }); Basically, I convert the pseudo-array (*NodeList*) by calling the array method *slice* on it. Then I can use any array method on it, such as *forEach*. Of course, you could call *forEach* directly instead of first converting it to an array: function changeVal(el) { el.value = "New text!"; } Array.prototype.forEach.call(document.getElementsByTagName('textarea'), changeVal); The second argument of *call* (The function changeVal) is just the argument I pass to *forEach*.
You should really declare your vars at the top of your scope.
You should take a look at this, it's a mostly compliant javascript parser written in PEG.js https://github.com/dmajda/pegjs/blob/master/examples/javascript.pegjs 
I didn't want to create a lib to be imported wholesale. In that case, I'd have to rewrite many of the functions to cut down on its size, and it'd just be a "why not just use underscore?"-library. If you want a full library in this style, I suggest you take a look at https://github.com/loop-recur/scoreunder and get involved with developing it. :) That said, I don't think it would take that long to do.
Sure you can, but if you do it's unlikely people are going to want to use your code. Anything you add on to track usage is going to slow things down unnecessarily (even if it's only a small amount). You're better off just Googling around for usage.
You are quite right. I wonder how the stack terminology came to be used by the W3C?
You're right that it's not strictly a stack, but it's still a good way to think about it. It's sort of a stack with an "undo" feature for "pop", which is probably the way most users think about it. (They went back too far by mistake, and forward undoes the mistake.) In reality it's even messier because the popped pages remain in your full history list even after you follow a new link.
While I'm in the camp that'd shame you for your var names (no downvotes, just disagreement), I wouldn't bother. The benefit of using short vars is not having to come up with a bloody name for the thing. If you had a way to translate, the original code would have to choose the proper names initially. Might as well use better var names (couldn't help it!). Out of curiosity, are you mostly a C/C++ programmer by default?
I'm with Gaff. It will do more hurt than good. People will either not use it due to the bit of tracking code, or just remove that part and still use it.
Yes, please let us know what you wrote. That way, we can make sure to never include it or anything else you ever produce into our projects. Edit: just so it's clear, that's to the OP, not to you, _evan.
free for US$49 ?
You should create a proxy class with appropriate method names that reflect the behavior of the native API
You can't be serious. How old are you?
Something more opinionated like http://chaplinjs.org/ is helpful when building large Backbone apps. If you don't start with something like that you'll inevitably end up doing the grunt work to recreate all of that yourself.
Do you even FizzBuzz?
It's not just a linked list. The spec says: &gt; [The History interface is not meant to place restrictions on how implementations represent the session history to the user. For example, session history could be implemented in a tree-like manner, with each page having multiple "forward" pages.](http://www.w3.org/TR/2008/WD-html5-20080610/history.html#history-notes) [See here](http://vimcasts.org/episodes/undo-branching-and-gundo-vim/) for a visualization of this tree. (this video is about Vim, but it's directly analogous to browser history)
JavaScript is my first programming language.
I understand *this* and I don't like see it in code. It is a pronoun and equally open to confusion.
I don't believe you need OOP to be a proper language. I enjoy the semantics of JavaScript perfectly fine and find the language expressive enough to not need OOP features. I am also not new to the language. I have been writing in this language for over 5 years and this is not the first parser I have written in this language. It is just the first parser I have written for JavaScript. Please don't make the faulty assumption that if I don't program like you I must be inexperienced when really the most experienced JavaScript developers I have ever seen **rarely** use OOP conventions in large applications. Most of the problems I see in IRC that stump experienced programmers who may be new to this language all involve *this* and *new*. Had these developers not used these keywords most of those problems would instantly evaporate. Any code that could be written with OOP conventions I can write in few lines and execute it faster not using OOP in this language. I am experienced enough that I say this with confidence 100% of the time.
Awesome, thanks for the link!
Really cool app, but I was disappointed at the full page reloads for clicks on the device. Angular's a peacock, you gotta let it fly.
It would be nice of the down voters (I'm not one of them) to articulate a reason for it. That notwithstanding, you missed the point. I never said that JavaScript should be written according to classical OO. The fact that experienced developers get tripped up on *this* and *new* means that for all their experience they are still a newcomer to the language and need to learn the idiosyncrasies peculiar to it. Simply avoiding fundamental aspects due to lack of understanding doesn't make you experienced.
Fixed now, thanks.
[](/ajbaffle)[](/ajbaffle)[](/ajbaffle)[](/ajbaffle)[](/ajbaffle)[](/ajbaffle)[](/ajbaffle) Why not!?
 for (var nodes = document.getElementsByTagName('textarea'), n = nodes.length; n--; nodes[n].value = '..'); 
Thanks! There are still some pretty obvious functions missing, like `intersection` and `difference`; but I'm pleased with it so far. Interesting. I was expecting comments on the lack of curleys earlier than my naming convention. I could, and I probably should, name the parameters differently. They are named right now from a sort of pseudo Haskell convention with `xs` being the plural of `x`, i.e., a list of unknowns. It falls a bit flat, because I think in nowhere do I do anything like `for (x in xs) ...` but rather use a `xs[i]` notation which isn't very clear at all (thanks JS!). Other than that, `x` should be self-explanatory (now that you know what `xs` are) and so should `ys`, `s` is for string, `n` for number (I believe exclusively an `int`, otherwise it'd be `x`), `o` for object and `p` if I need another object like in `extend` ("p" because it's the next letter in the alphabet, so a third would be called `q`). I'm looking at the naming convention used in underscore, and I honestly never liked it much. Sure "array" and "obj" makes sense (except when obj can also be an array, then I find it downright misleading), but I always preferred "fn" over almost any other notation for functions. Especially "iterator" I find bad. Right now though, I probably should focus on my thesis instead. ;-) Thanks for your comment.
I would disagree. Making a common utility library a dependency is very different from depending on a framework. Using angularjs because it provides a router seems like more than overkill that said it maybe that I don't need jquery to achieve what I want in this particular case.
Except in a handful of cases (such as a loop iterator, very short blocks, parameters to functions in a java anonymous callback class, etc...) non-descriptive names make code harder to read. If you're unfamiler with the concept, code has a property called "readablity." It's where all the jokes about perl looking like line noise come from. Different coding styles, and different languages all influence how easy it is for a newcommer to open a file and figure out what it does.
Was just thinkin that I would love a succint wrapup of the ecmascript 6 features to look out for, and this is exactly that. Now I want to go refactor some old code with these new constructs :D
If you want a some of these today have a look at TypeScript. Import/exportmodules, default parameters, arrow functions, classes etc all work today: being close to ES6 is one of their main focus points.
You must be used to working alone, because any self-respecting team member would slap you for doing this to them.
might be good to think about how you can change callback functions of the type: function(error, success){} in to returning a promise. I havne't played around too much with promises - but I'm guessing you could fairly easily convert them without needing to rewrite the whole function with something like this: var toPromise = function(fn) { return function() { var promise = new Promise(); fn.apply(this, [function() { promise.onRejected.apply(this, [].slice.call(arguments, 0)); }, function() { promise.onFulfilled.apply(this, [].slice.call(arguments, 0)); }].concat([].slice.call(arguments, 0))); return promise; }; };
*downwards through the child scopes.
Not at all clear from my comment, but I was actually thinking about optimizations outside of purely slurping in source text like lazily parsing parsing functions. I'm surprised at the extent webkit uses automated parsers, though! I knew they were in use but I thought just a couple productions. Anyway, I'm just deleting my comment :-P (although I still wouldn't say parsers are "very rarely" programmed from scratch, at least in this area... Esprima at least is hand written as well!)
I wrote this just for you! http://mailmarkup.org/sample_a.js
From the page: "JavaScript MVC frameworks are booming, but this post may change your mind about them. Before I explain the 10 very good reasons to stop using JavaScript to you, I will first list a few popular JavaScript MVC frameworks:" Let me warn you about the controversial content. The page ends with: "..I found an excellent post that explains in a much more subtle ways why progressive enhancement is important.."
Leaving your original functions alone and using [async](https://github.com/caolan/async#waterfall) edition: async.waterfall([ getUsername, getSubscribedCategories, getSuggestedArticles ], function(err, articles) { if (err) return handleError(err) console.log("Great success!") console.log(articles) })
So... what's the alternative?
Decoded version: &lt;html&gt; &lt;head&gt; &lt;title&gt;URL Website Maker&lt;/title&gt; &lt;!-- Click the button over there ==&gt; to open a new tab with the code currently in this editor --&gt; &lt;/head&gt; &lt;body style="font-family: Courier;"&gt; &lt;a id="ln" target="_blank" style="background: whitesmoke; position: absolute; top: 0; right: 0; z-index: 2; padding: 10px; margin: 10px; border-radius: 5px; color: black; text-decoration: none;"&gt;Open this page&lt;/a&gt; &lt;div id="ta" style=" font-size: 16px; position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 1;"&gt;&lt;/div&gt; &lt;script src="http://cdnjs.cloudflare.com/ajax/libs/ace/1.1.01/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt; &lt;script&gt; var ln = document.getElementById('ln'); var update = function() { ln.href = 'data:text/html;base64,' + btoa(editor.session.getValue()); } var editor = ace.edit("ta"); editor.setTheme("ace/theme/monokai"); editor.getSession().setMode("ace/mode/html"); editor.session.setTabSize(2); editor.session.setUseSoftTabs(true); editor.setShowPrintMargin(false); editor.on('change',update); editor.session.setValue( atob(/base64,(.*)$/.test(location.href) ? RegExp.$1 : '') ); update(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 
done, and threw localStorage in the mix too
fixed
&gt; ECMAScript, the official name for the language we all know as JavaScript Javascript's official name is Javascript, it's an implementation of the Ecmascript standard.
So what is the thing that is being run in Node.js, Chrome, Safari? I thought that was an implementation of JavaSript. Or are you saying that they are an implementation of ECMAScript? Which basically means that there is no such thing as JavaScript. In reality the author got it correct enough so that everyone understands. No need to nitpick it and discuss what I would call unimportant details.
It's worse than that - given you can go down one path, go back a few pages and then branch off and take a completely different path from that point onwards, your history is neither a stack nor a linked-list - it's an n-ary tree structure. I honestly don't understand why the dominant metaphor for browser history is a one dimensional list of *any* type, but given it is I suspect the stack metaphor is a convenient way to hack a tree into a list shape. If you treat history as a list, go back a few pages and then go forwards again, what happens to the pages that were in front of the branching point? They no longer reasonably exist in the list (and so should be deleted), but this is arguably non-obvious to developers who haven't thought a lot about the issue, and if they have any references in their code to these states it could easily lead to memory-leaks/dangling pointers, etc. If you use a stack metaphor for navigating back through history then traversing back through it *explicitly removes* those pages from the history list, making it more obvious to developers that those pages are immediately no longer part of the history, and encouraging them to be more careful with any references to those pages they might have hanging around. TL;DR: Browser history is neither a linked list or a stack - it's a tree. However, a stack is a convenient hack for representing the current branch of a tree structure as a one dimensional list, as it forces you to destroy your history in order to rewrite it and provides simpler, clearer and arguably safer semantics to developers using it.
Pedant Version: EcmaScript: Scripting language that we all know and love. JavaScript: Mozilla's implementation of ECMAScript. In reality, everyone just calls it JavaScript, hence the author's clarification.
Question about Typescript. When you say it tries to get close to ES6, so you write in ES6 standards/functions and it will deal with compiling it to a more backwards compatible JS? And then at some point in the future when ES6 is ubiquitous and we no longer have to worry about browsers that don't support it, you can just rename the .ts file to .js and use as is? Just curious. thanks!
That's one of their goals I believe, and that's admirable I guess. However, you might then just as well write ES6 today, and transpile it to ES5, which works fine AFAIK. The potential problem with TypeScript mimicing ES6 is that ES6 is still under development/change, and TypeScript is in active use by development teams. So if the designs of the languages diverge at some point due to ES6 design changes, you will be left with two very similar languages, but not quite. Things such as classes, inheritance and syntactic sugar may very well diverge. I may be cynical, but I suspect that the TypeScript/ES6 situation will get quite complicated over time. Also, as I wrote in another post.. ES6 is very limited in its design opportunities, because ES5 has to be valid ES6 as well. This means that TypeScript also has to be able to contain ES5 at all times, which limits its design freedom in the exact same way. Personally, I prefer a language with a clean slate, that can be as well-designed as possible. For me that is currently CoffeeScript, which is, with the risk of sounding like a fanboy, amazingly nice to write code in. That said, I read and write a lot of JavaScipt as well, and will probably continue to do so. It is the *machine code* of the web in my mind.
&gt;A number may start with a dash or minus character and may contain a decimal. In this case those two characters are lightly overloaded in that the dash character could represent a negative number sign or a subtraction operator, which are context dependent considerations Well. Those aren't two separate conditions. Subtraction theoretically doesn't exist. You just add a negative and a positive. Rather, subtraction is really just a property of a number and addition is the operator involved. This isn't very clear since we never do 1+-3=-2, but technically every integer should have a + or - in front of it. Context dependency is when the semantic meaning changes the syntactical rules. E.g., I read your comment [anything]. Applying rules to [anything] depends on whether read implies a present or past tense but can't be determined with out semantically understanding the sentences meaning and then changing the grammatical rules. CFG's work with javascript. In-fact CFG and language theory is an entire field of study. In other words CFGs are not necessarily a technology. The parsers/lexers that use CFGs are, and are incredibly robust and used in everything from your C/C++ compiler to HTTP servers to your browser to examine syntax. I'd suggest you pick it up :) they're incredibly useful.
Why would you write you project QA's name in your comment?
*Infinite recursion..... DOES NOT COMPUTE!*
I look forward to seeing CoffeeScript's implementation of WeakMaps, sets with O(1) lookup time, proxies, tail calls, and generators. (You'll find that certain things are just sugar, but others are platform capabilities that can't be easily polyfilled/transpiled)
If you replied "no reason, I was just lazy", I'd shrug and move along, but seeing such bad rationalisations makes me cringe. Therefore this response. I know that you may classify me as another "hater" (or as I would prefer to say in this situation: a reasonable software developer aware of limitations of the human mind), but bear with me. &gt; I find that, in my personal opinion, in some cases well named variables are helpful and in other cases they are completely irrelevant. While I agree with the general gist of this sentence, I do disagree on which cases are they. For me, there are several conditions that are legitimising such short naming: - the variable is local and limited in scope - the letter somehow suggests the type or semantics of the variable - there's simply no better name, like `x`, `y`, `z` for coordinates. Spoiler alert: in case of a parser, every variable has a good potential name longer than two letters. So if I'm iterating over a list of customers, I may write `foreach(var c in customers)`, provided the body of the loop is very short. But I would never declare a field, public or not, nor a global variable called `c`. &gt; If the reference is not a contain then it is likely a literal and its name is irrelevant to me, because I see what the reference is either by looking at the code directly or by using console.log to determine its present value, and thus type. First of all, console.log is not enough to determine type. Second of all, the type is not enough to actually determine what the value stands for (unless you're coding in Agda and use some phantom dependent generalised algebraic data types or some shit like that). Having `var a=0;` doesn't say you whether `a` is an index, a size, a counter, an offset, a coordinate, an uninitialised hash value, or a future mathemathical function parameter. &gt; If the container is solely confined to a single local scope then its naming is likely irrelevant, Variables have semantics. Semantics can be expressed with words. Therefore, every name that incorporates words or parts of the words from the description of the semantics is more meaningful than every name that doesn't. Therefore, if there are any semantics, *naming is always relevant.* The only case where a variable has practically no semantics is the parameter to the identity function. Take a local container for example. Why the local token array in `jspretty__tokenize_plusplus` is called `aa` and not, for example, `localTokens`, `tmpTokens`, or at least `ts`? (It might not actually be an array of tokens. I'm not sure. I *would be*, if it was properly named.) &gt; Nearly all functions used across various scopes are well named as well as the one object literal and the five universal arrays. You mean the arrays `j`, `k`, `l`, `m`, `n`, `o`, `p`, `q`, and `w`? &gt;I prefer to code in a very imperative fashion because I prefer to know what the code is doing by reading the code. If this is accomplished without well named variables then so be it. First of all, imperative code makes it harder to reason about what each variable holds than functional code. Second, readability would be much higher if the variables were well named. As far as I can see, you're still actively developing the project, which means you still have entire architecture and algorithm in your head. But you will forget if you take a break. Then you'll decide to fix yet another bug in this 3000+ line monstrosity and you'll wonder "what does this `ee` stand for?" Because you use this name multiple times. In multiple meanings. One time it's a list, another time it's an integer, and semantics of neither can be described using a noun or adjective that start with an 'E'. You'll start re-reading the code multiple times, trying to refresh the memory, instead of fixing the actual bug. And that's you, someone who knows how it works. Every other programmer, seeing this and asked to fix a bug in it, would either say "NOPE!" or "pay me double", because what he'd have to do is to reconstruct the entire algorithm in his head, not only a part of it. And the first thing he'd do is renaming all the variables to something that makes sense. I think such a naming convention (or an utter lack of one) could be compared to writing a code in a low-level compiled language, compiling it and throwing away the source. I mean, you can disassemble it back, right? So, in short, if you want: * to be able to understand the code after taking few months of break * to have someone else understand your code * to avoid typos * to know what a variable means without scrolling dozens of lines up then start naming your variables better. If you like this mess and you don't want anyone else (including the future you) poking in it, feel free to continue. 
No, that goes a bit too far, and they don't have everything (yet?), like the array comprehensions and such. But it'll be the other way around: ES6 JS will be valid TS ES6. And of course TypeScript has the whole complex typing thing with the external declaration files and such that is not part of ES6. 
And now the browser's back button becomes 'undo'. You should turn on emmet in ace while you're at it!
&gt; CFG's work with javascript. CFGs will work with clean JavaScript. The primary exceptions that I stated, semicolon insertion and curly brace insertion still stand. These syntax characters are required in the code at parse time by the standard even if they are not required from code authors thanks to things like ASI. This makes the language difficult to predict in contradiction to CFGs. I would say that CFGs still be purely applied in the case of either ASI or curly brace insertion but in the face of combinations of those two. At that point some extra analysis is required.
If you're doing more than 3 ajax calls, you should think about stamping and serving your data better. I know it's not always a possibility, but seriously, just clump your data together better. For those interested in stamp coupling: http://en.wikipedia.org/wiki/Coupling_(computer_programming)#Procedural_programming
When an article opens with a false statement, i don't think it's nitpicking to just state that it's incorrect. And looking at the article's targetaudience (js-developers) i doubt that saying js is an implementation of ecmascript would be too complex. What if the article opened with the statement: ECMAScript, the official name for Flash's Actionscript language. It's the same thing...and wrong.
When you click through links, you're building up a stack of previously visited pages. When you press the back button, you are popping off that stack *and also* pushing onto a new stack of forward-visited pages. When you press the forward button, you're popping off that stack and pushing onto the back stack, again. When you click a new link, if you had any pages in your forward-visted stack, that stack is cleared.
I agree. It would be a step in the right direction. Is engines could make good use of this and we'd finally see features like value types and operator overloading come to js... so I can finally do vector math and better functional style programming.
That's brilliant!
That is way cool.
You could also use trampolining, but these rewrites are not trivial and result in JS code that is unreadable, which as far as I understand are against CoffeeScript's goals.
Very interesting leak. I wasn't expecting that. 
ah your problem is that to me (and probably others) xs screams cross site
I like 'em, could use more curly braces, also if you were really ambitious you could create self curying functions that return a new function if you only give them one argument.
The TypeScript developers have actually continually expressed that they plan to adhere as close as possible to the ES6 standards while providing a stable and perfomant language. ES6 compliance and divergence is actually the least of my worries with TypeScript.
&gt; Mobile Safari will not allow the preloading of audio files It will allow preloading, but the element used for loading must be "unlocked" by a user event.
That background is annoying as fuck.
Well, maybe you should, since JavaScript is a [trademark of Oracle](http://programmers.stackexchange.com/questions/135905/legal-ramifications-of-use-of-the-javascript-trademark), while EcmaScript isn't...
&gt; The problem then is often not what something is or even where it is, but a why it is that way given a set of decisions. And that's where a descriptive name can help. Also, you just contradicted your earlier claim that console.log is usually enough. &gt;Yes, I mean exact like those. I supplied a comment explain what those are and why they are insignificant. How do I know if `l` is insignificant and `g` isn't, or vice versa, without scrolling thousands line of code in search of a comment? &gt;The arrays that are necessary for decision making are properly named. There are dozens of other necessary variables, they should be properly named too. &gt;As a proof of concept I played around with changing the names to something more proper earlier today And now I'll ask an opposite question: why are you prefixing all local variable names with names of the functions they're in? &gt;Its would cost double to do one man's standard effort just to do his job No. He'd get paid double to do his job of fixing the bug and *your* job of properly naming variables, whether it's in the code or in his head only. Stuff like naming things, commenting, dividing into functions makes code maintainable and makes the work with the code easier in the future. &gt;Seriously, reading this stuff is like an open book to me And not for anybody else in this thread, since we don't have the mapping between arbitrary letters and their meanings in our heads. Also, I took a peek inside jsbeautifer and it's actually readable. To borrow your analogy, the book of jsbeautifer is more open than the book of jspretty. &gt;I wonder why they aren't whining about valid things like why the code does or doesn't do whatever Because it's hard to see what the code actually does. Judging obvious deficiencies, like lack of meaningful names, is easier, especially when those deficiencies disqualify the developer from working in any team. &gt;When I make typos the code typically fails when I test it. Testing is not a sufficient substitute for code clarity.
answer the questions asked.
Yes. You can use the word "JavaScript" under "nominative fair use", but the point is that it's not entirely clear what that means.
CoffeeScript tries but it doesn't always make super readable stuff. Though what you said would be the reason CoffeeScript doesn't implement it.
I think its probably got more to do with the license Mozilla has for the name, but in practice Microsoft rarely refers to their javascript implementation as jscript making me think that that issue is moot. In practice afaik ecmascript is used instead of javascript to distinguish the parts standardized by ecma vs the parts standardized by w3c
ooooh you can do that? Hell, I'm so ignorant of these things. Do you have an example of that somewhere? ... I could actually see this project as totally being useful now with this sort of functionality :D
While the article is well written and informative, I still find it hard to indentify its target audience. Most developers in a position to test/use node.js won't need it, because they already have all that information. Most managers won't understand enough of it to make an informed decision after reading it. Who else should be interested?
I get so sick of misleading titles...
So i usually go for spelling things out (except function cause its reserved ) items is a good one for objects or arrays, also remember that i,k,j are conventions inside loops and i tend to use v for quick map or forEach
I think the target audience is me... I have heard a lot of smack about node, how its slow and most of its promises are lies, event driven code is a nightmare to maintain etc... On the other side I have heard a lot of buzz words and hyperbole without really explaining why it is so great and never really countering the attacks... This article nicely sums up what I might want to use node for and what I want to avoid.
Why is this title misleading?
&gt; Where Node.js Shouldn‚Äôt Be Used SERVER-SIDE WEB APPLICATION W/ A RELATIONAL DB BEHIND [The Postgresql module](https://github.com/brianc/node-postgres) seems to work just fine and is well tested. The ORMs might not be mature yet, but saying you need an ORM to be able to use a relational database is highly debatable if not down right retarded. 
It is a bit sensationalist and confrontational.
&gt; Most developers in a position to test/use node.js won't need it, because they already have all that information. I think this is the hole in your logic -- you're making the assumption that because this information is already "out there", then there's no need for a condensed summary. That developers have unlimited time to download, setup and test project X. That all developers are on the forefront of web development, keeping up with multiple datastreams (reddit, HN, etc.) and keeping a close eye on each new project that comes about. That's not the case, though. There is a lot of noise when it comes to tech articles, including those around NodeJS; many are good, but there's just as many that are nothing but fluff, based on emotion, and oftentimes downright misleading or wrong. Factor in the rate of change of the NodeJS project and its ecosystem, and it's hard to nail-down any definitive, relevant texts about NodeJS. There are also many devs who simply don't have the time to play with it themselves, perhaps they're too busy playing with web workers, web components, D3, NoSQL's, ECMA6, browser extensions, etc. You can't reasonably expect each web developer to have extensive, working knowledge of everything that falls under the umbrella of web development _and_ still have time pay your own bills.
Since it is built with Javascript, I hope it is suitable for posting in this subreddit. There is some Javascript content here. I had to find a way to draw trajectories that start out with a subtle color but fade to another one, and make it look the same in all (modern) browsers. The solution was to use layered canvases.
The Good: N.P. Fuckin' M. The Bad: JavaScript. The Fugly: JavaScript.
You know what would be easier is to simply turn around this attitude of "installing software is bad".
What license is this code under (if any)? Consider sticking it on github or the like - even if you don't plan on accepting changes, so that others can fork and play with it, plus it is a nice online code viewer (and consider gh-pages as a free host for flat files).
You're right...I should do this (github). And I should also put some licensing info on the site. Thanks for the prodding! The code is all free to use, with acknowledgment appreciated but not required...I should make it clear.
And I guarantee you that the replacement developer was cursing your name every time he had to look at one of your code files. &gt;It is purely a subjective stylistic choice No, it is not. Putting the brace after the if statement or on the line below is a purely subjective style choice. You have chosen to remove all context from your code, and force people to seek that context in other places, which may or may not have been kept up to date with changes in the code. 
I don't like this article, it highlights that Node.js is single threaded and you should not use it to handle CPU intense stuff, and it forgets to mention that you can easily spawn new processes and that it is still much faster that PHP
Sorry did you actually read the article? &gt;As stated previously, Node.js is single-threaded and uses only a single CPU core. When it comes to adding concurrency on a multi-core server, there is some work being done by the Node core team in the form of a cluster module [ref: http://nodejs.org/api/cluster.html]. In regards to the guy above.... &gt;forgets to mention that you can easily spawn new processes ....... &gt; communicate via a message queue server like RabbitMQ. 
Very nice, one tip though, I believe you could use this.constructor in your example of returning a clone. customFilter: function(filters){ var results = this.where(filters); return new this.constructor(results); }
&lt;sarcasm&gt; You must use ORM. There is no such thing as SQL. &lt;/sarcasm&gt;
&gt; To just the multiplication? Maybe not. But it makes the intent HUGELY clear at a glance This is why I prepared a test. Look at these: http://mailmarkup.org/sample_a.js http://mailmarkup.org/sample_b.js In those what does the function *jspretty__algorithm_separator_varline*. I doubt you can quickly glance a definition from either file. I suspect, even more, that at first glance you will predict that sample_a must clearly be easier to understand but will not be able to quickly reason anything about it due to its verbosity and variables operating in closure from various depths. I bet if finding the answer were really important to you that you would find it much faster in sample_b.js even if this sample pisses you off to look at it. &gt; There's a lot more to understanding code than knowing that line does a simple multiplication. Knowing what it's multiplying This is what separation of priorities is for. Some people prefer objects. I prefer scopes provided by functions. This is where that context comes in. The variable names will not be helpful in that case, unless they are named in a manner that calls out the context of their invocation. This is why I think many programmers prefer to work with slow obtuse objects, because the dot separated naming is simple to decipher. I find functions to be far more powerful and expressive, but simply don't care to create a well regimented naming convention that identifies chain of scope upon each variables point of instantiation. &gt; and why it's doing it If you are relying upon reference names to tell you the *why* you are probably not very deep into the code. Typically the *why* comes from either business requirements or unit tests, of which neither exist in your code in any form. I suppose you could associate particular test conditions to your code directly with some associative naming convention, but that is problematic in that requirements change all the time and nobody likes to rewrite large amounts of bug-free code purely for vanity. &gt; Especially when you have to go back and change it. That, from experience, is largely insignificant. If you are comfortable reading code with poorly named variables you can go back to the code years later it might take extra 10 minutes to track that bug down, but its not very daunting.
&gt;why you should use one over another. This. I was shocked at how clueless people were when the teacher asked "why would you use this algorithm over this?" The class average was extremely low. Most of the when and why are just common sense to me - they have nothing to do with computers.
Developers. Look I don't have time to do the research on Node. I visited the website and like half of the web tech stuff was completely useless and assumed you knew what it was. (worst was bootstrap, that took me a stupid amount of time to figure out what it was for, wikipedia summarized it in a few sentences...) I have work to do, I don't have time to follow the latest fads - node and javascript everything is a big fad right now (whether or not it remains a fad is up for debate) This article was that wikipedia summary for bootstrap. It gave me a clear concise reason for why I would use node.js. not just a "omg it's new, cool,hip, buzzword, it's javascript just use it" I found the article useful and i'm a developer in a position to test/use node.js and choose it as the base for a new project. 
I think that's a fair assumption. Prior to reading the article I thought "why would I ever write something outside the browser in javascript if I didn't have to" Lot of people feel the same way about javascript - they use it because it's the only option for web, not because it's a particularity great language. I actually clicked the link because I had wondered exactly this about node.js. 
I am actually at the moment occupied with creating an API with node/express + postgres/sequellize and have to say that it is possible, but you should not be to fine to get your hands dirty in some SQL sometimes :) it does work and not too bad, but it is not as cosy as any of the OO db's.
&gt; know what would be easier is to simply turn around this attitude of "installing software is bad". IT support people have been trying to stop people from installing software for ages. It's harsh, but people are idiots and can't be trusted to install software. There are some major benefits to controlling where the software runs. (mainly relating to patches, updates and replicating a issue) There are quite a few advantages and in some cases major show stopper disadvantages with webapps. 
Message Queuing is a different beast from spawning a child process. MQ is the communication between nodes... child processes are calling out to executable files/binaries in the OS. You can actually have some "close to metal" process that Node executes instead of having some complex/intensive algorithm in JavaScript.
If you use a rock to brush your teeth it won't work well either.
Self-promoting my clusterify module on npm. Just start your app with the clusterify executable and it will cluster it on up. Also can set the number of workers with the NODE_WORKERS envvar. So no need to use the cluster module directly.
I'm doing the same as well and works great.
I think part of the problem is that every other developer writes a blog article on Node.JS using Express as a replacement to a mature, full-featured web stack...so when people try to do little more than a quick prototype of a list management app or blog engine, they run into a lot of warts building web-style apps... 
Almost everyone who writes about Node.JS says that APIs are the perfect use case. Personally, I think that using the socket.io for the real-time access of "select" site APIs might be a great case, however, most APIs I've ever worked on access relational databases, which are i/o bound (the opposite of how Node is supposed to behave). In looking at a lot of people's code in GitHub, Node.JS seems pretty clunky for APIs that depend on I/O saddled relational database calls... This article makes a similar claim. I'm just wondering if someone can explain why Node.JS is so awesome for building out your API if you're hitting a relational database? It really seems like all the big web frameworks are more suited for APIs that Node in this regard. When people say Node.JS is great for your API, are they assuming someone is using Mongo (or similar)? Heck, I even see APIs that hit MongoDB as being I/O limited once the MongoDB shard starts getting hit hard at scale. Edit: I should add that I'm really fascinated with the idea of using JavaScript in multiple layers of the platform. For smaller dev teams, not making context switches between languages could bring huge productivity gains.
I know what you mean, but my understanding is that you would use something like RabbitMQ to create workers in order to accomplish this. 
+1 i typically use that, but avoided it for this article because it was long enough as is :D
wtf?
From the node website: &gt; Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices. I/O is actually node's strong point, not weak point. It's CPU usage that is node's weakness. Non-blocking I/O means node can work on other stuff while waiting for data. The article's problem with relational databases is the lack of mature ORM libraries, it has nothing to do with being I/O bound.
The block quotes in the article are really annoying, especially since they just repeat the line above or below...
The reason I use coffeescript is because I find it more maintainable and readable than javascript ``` foo = (a) =&gt; this + a ``` is easier to read than ``` _this = this foo = function(a){_this + 1} ``` On a [recent podcast](http://rubyrogues.com/023-rr-book-club-smalltalk-best-practice-patterns-with-kent-beck/) Kent Beck said something along the lines of: &gt; Design patterns start where the language stops By incorporating common design patterns of javascript into the coffeescript language, it has not only increased readability but also reduced the complexity and the amount of code I must maintain. Given that maintenance is the primary cost in the software development industry [[Grubb and Takang 2003](http://scholar.google.co.nz/scholar?cluster=15091228935523815700&amp;hl=en&amp;as_sdt=0,5)], I use coffeescript. Plus I love languages with semantic white spaces.
Thank you for this write up. I had been wondering why myself I might want to use node.js and came away with: "Well it would be fine for a pet project, but it would not fit in at all at work." This is what I have been trying to figure out for a while now. 
Security and privacy. Most of the malware installed via browsers is installed using JavaScript.
Most frameworks can do the same. What the author is pointing out is if you have some long running operation that you are handling in node it will slow down every request dramatically. In multithreaded frameworks that impact could be much smaller. IE with node you should always offload a CPU intensive task, with other frameworks you can weigh out if the performance impact is worth the dev time.
I love the idea of doing everything in javascript but I am crap (lazy) at db and I couldnt get sqlite working with node. Once there is wider support I think I will be running node for everything.
"Src the plugin" ? Really? Is "src" a verb now?
if you didn't insert a random string that you guarantee you won't use in any other variable, then you could access any variable that is made up of the tokens (xy,xyxy, xyzx...) in the eval. It's not a big deal, but I wanted to make it rock solid for the next person that tried to convince me that eval is categorically evil. I chose deadbeef as it was the value old ibm machines would assign for uninitialized memory (0xDEADBEEF)
Which is why when I first starting reading about node I had hard time figuring out what the point was. Rewrite an HTTP server? Why do I need node when there are dozens of VERY mature web/app servers that can serve me json. I still haven't put it to use in production but we're exploring avenues. It clicked when I finally got a sense of what it was really meant for. 
&gt; Why do I need node when there are dozens of VERY mature web/app servers that can serve me json. Because Javascript. It was an easy way for frontend guys to also write in the backend.
I see that argument but most stuff is going to go beyond basic to-do list toy app type stuff. There's a lot of business logic that goes into figuring out what data to store. That logic is typically going to come along with utilizing robust ORMs, all kinds of other services and dependencies. Basically, beyond simple CRUD. This kind of stuff the front-end developers have no real business touching. Again, the complex logic is beyond the scope of node it seems. Im not saying express has no value or anything like that, but I don't think a to-do list app is the best example or use case scenario.
Do you really consider it an advantage for a web framework to be good at long-running requests though? I don't believe I've ever even seen that use-case.
Actually node.js is made specifically to solve i/o-bound problems. You've got it backwards.
You're right that if the database is the bottleneck, then the database is the bottleneck, but very often, i/o, and specifically the number of network connections is the bottleneck in multi-threaded systems, because of the overhead associated with threads (memory, etc). See the C10K problem, and you'll see that most of the solutions use an architecture like node.js: http://en.wikipedia.org/wiki/C10k_problem .
Does anyone know what tool they used to create the flow/architecture graphics in the article, like http://www.toptal.com/uploads/blog/image/50/toptal-blog-1_B.png ? They look a lot nicer than similar graphics you normally see.
funny enough, I did the exact same thing last week. It was fun. Does yours pass the compliance test?
exactly. that is what i am saying.
True! Sorry... I misinterpreted and thought you were saying that db i/o is the usual bottleneck.
As someone who spent six months trying to integrate infusionsoft into a site, this could not have been fun. My condolences.
Recently I was tasked with setting up a system allowing end users to import data from an excel spreadsheet into the db. This was a critical but infrequent task. The task required that the user be able to select a spreadsheet, view a sample (first 10 rows), map the spreadsheet columns to database columns, and then import the spreadsheet. Programatically the system needed to be able to 1. receive the spreadsheet, parse it, and return the sample 2. receive the mapping, parse the spreadsheet, and import to the db Parsing xlsx is not a trivial task, and is a cpu task due to the fact xlsx files are zip files and these spreadsheets could be thousands of rows (the test set I was given was a little over 4000 rows and 32 columns) This was a feature that would be used 4-6 times a month and it was determined writing a separate executable for it was overkill. Initially we decided to just do it in the web layer and had that option because we were running threaded requests (IIS/ASP.Net) Now after a little research I did end up pushing the parsing to the client BUT the unzipping / parsing can take up to 6 seconds and that's with web workers. Doing the parsing in node would have been a complete no go.
WHY ARE WE SHOUTING?
I cant use arrow functions in latest chrome.. am I missing something?
I had used RequireJS before always to organize my code. It worked, but felt a little weird. Now, grunt+browserify is too good a combo to ignore. Feels right, can leverage npm, and I like the approach it takes more.
I recently started using node.js and socket.io to do realtime data reporting. We're not testing with lots of clients yet, but I'm fucking blown away at how easy it was and the end result. It's actually making me kinda dig javascript. Tools for the job, tools:)
BEGINNERS, MAN
All good. I was about to say ```/good_discussion``` I just had to get back to work :)
I thought it was pretty good up until he touched upon Express. Why would he do that? The parser example would also have been more nodeish if be had just exported the parse function.
What happens when your queries start taking seconds? Everyone waits? 
http://caniuse.com/#search=Arrow%20function so 89%
The Postgresql library is non-blocking. 
So... is Express considered bad form now?
Not to my knowledge... but I've seen some hate (more like disapproval) of express lately. Not sure why.
Fair point. Will update the README
after using nodes require method I am really starting to dislike require. js. node's require is so simple and fits my needs perfectly, even in browser. browserify makes great sense to me as well. 
Not trolling. I don't think he should've started on Express if he's not going to do an article about it. It's not a small module for serving static pages - if that's all you need, then there are other modules for that. He did export Parser, but I would rather have it be to export the parse function. There was no need to complicate it. New users should know that you can (and often should) just export a method that does whatever your module needs.
I'm reading this on a phone, why am I scrolling inside a phone on a phone? 
Oh yeah, it really should have just exported the parse function. The constructor does nothing and there's no state, so there's no point in having to create a Parse object.
Thanks for the clarifications!
Obviously, it's a trick question! IE8 outputs 'TypeError: Object doesn't support this property or method'. ;)
I must be odd, but I kind of love digging into SQL... but mainly if I can get away with using CTEs for my queries.
Thanks - as a node newbie, this was actually really, really useful!
This is funny because a V8 developer said 2 years ago that this is completely theoretical because no-one would write such code in practice: https://news.ycombinator.com/item?id=2666766 (Point 10.) You indeed have to really try to write incredibly weird code to be affected by this as the post shows.
Yeah one should head to stackoverflow if he has interesting problem like this. We love these kind of questions because otherwise all we see is "how to find this div in that html using jQuery?" style of questions.
### AHH!
I used both Require.js and Browserify in production and unless you definitely need AMD in your project I would suggest Browserify. What browserify does is it compiles a single bundle with all the scripts and libraries you use in the project and allows you to publish that. The greatest part about it is its support for source maps(easy for debugging), its simple API (simple require call to use a module and module.exports to export a module), and its support for Node's modules. Since I moved to Browserify, I simply start a project by npm-ing all needed libraries and then just making simple requires in the files I need to use them(the beauty of calling var _ = require("lodash"); and forgetting about it). There is literally zero configuration and almost every library that I use is on NPM. When I have the time, I'm even going to rework my older libs to work with it. The best part is that you can simply use uglify to minify your bundle in the end and include just one file in your page.
it sure does. In fact running the tests cleared up a couple of "fuzzy" definitions like: 2.3 ‚Äúreason‚Äù is a value that indicates why a promise was rejected. I thought that a null or undefined could not "indicate why a promise was rejected" but it appears there are actual test cases where they do so I had to fix that. Also the specs say that you can't change state from fulfilled or rejected so I threw an error if you tried, but the test cases don't allow it so instead I return the error from the changeState function now instead of throwing it
I'd prefer to read about the whole experience and the steps taken in a single blog post - then perhaps some before and after snippets - rather than a github repo (though that can be provided for those that want to dig deeper
Same. Absolutely zero content in this post, so it's kind of useless as a discussion piece on its own.
Wow. That independent scroll on the category lists is annoying as heck. By the time that section is actually at the level in the window that I actually read, half the list has gone by.
Yeah what the hell, not even anything in the FAQ. It either works or it doesn't...
http://w3fools.com Also this is why I love my DuckDuckGo as search toolbar provider (or whatever your browser call it), because it uses !bangs. Search for **!mdn array pop** and instantly arrive at the MDN search result page. Works with [many, many more](https://duckduckgo.com/bang.html). !caniuse !ciu !css !fhtml !html2txt !selfhtml !selfhtmlwiki !cdn !javascript (!js) !jquery (!jq) !mdc (!mdn) !mootools (!moo) !npm !uglifyjs !yui !node etc etc etc 
I think we can agree that's an edge case though, right? And the same problem could be solved in node by forking a child process (someone has even duplicated your web-worker interface server-side), or using a queue with workers like kue ( https://github.com/learnboost/kue ) and having a way to notify the user when the work is done (polling, websockets, etc). To handle that edge case that you use 6 times per month, you chose the threaded model for your entire front end, and so have to spend a lot more money on hardware and a lot more effort on scaling out because of the resource overhead of threads (which is a real thing: http://en.wikipedia.org/wiki/C10k_problem ). If you don't have to scale beyond one box, all of this is moot of course. Personally I find that node can end up being over-kill in a lot of scenarios where resource utilization isn't a huge concern.
Same issue here, can't use default parameters nor `Object.observe`. Some context around this would be useful, because I don't really think it demonstrates "Current Chrome browser features". Perhaps it applies to canary builds or something, but it obviously doesn't apply to all versions.
I went through something similar but on a much much smaller scale yesterday. I forked a repo of a chrome extension and added a module to it. At first I added jQuery but then I removed it because I really wasn't using that many functions from it so I was adding bloat that wasn't necessary. So I wrote my own functions/used plain JS for: .siblings(), .parent(), .children(), .find(), .closest(), .click(), and .hide() I'm sure I didn't write perfect versions but they work and I enjoyed writing them. It's inspiring me to write my own microJS DOM traversing/manipulation library just for fun even though if I do that I'll have to start accounting for other browsers. 
Actually, this has already been done (though it's for AngularJS): [Show HN: ngProgress - slim, site-wide progressbar for AngularJS (without jQuery)](https://news.ycombinator.com/item?id=6250112)
You mean like in CSS? :) !important
WANT TO LEARN NODE? START SCREAMING
hahah I'm too quick.. Just copy and pasted the title..
I work down the street from Modulus and the guys are awesome. They host nodejs meet ups and super helpful. 
The views they provide via the Data service can be really odd at times, but overall the API isn't bad, if a little bit lacking in features. 
That's pretty cool. I thought it was awesome when I saw it on YouTube for the first time. If I was to use it, how would it work to display actual progress of something that's loading? Would I have to keep using the 'set' method? Is it possible to start and complete the progress by a set time?
Thanks for leaving a comment! I thought the same thing actually. It depends on what your actual progress is. For example, fetching an external resource is kind of impossible to know when is done and so on. Therefor, the usage in that case would be to call start() before making the request and complete() when it's done. It's about faking the user experience. Currently, there is no way of setting the time of the progress but that is something I'm working on.
Maybe you have to believe harder.
Yeah, too bad actually but todays reality. It will stop at 95% of the page until complete(), reset() or set(value) is called. 
The failure of your system is that one cannot derive context from your code. You require that one go to another file, which may or may not be up to date. This requires the developers to make several context switches in order to figure out something that should be really available in the code. 
&gt;This is getting old. No it's not, you have simply chosen not to address it. &gt; If the program operates in exactly the same way with different variable names then possibly the problem is not in the program. The interpreter/compiler doesn't give a rat's ass what you choose for variable names. They are not there for the machine. Variable names are there for the programmers making edits on the code. &gt; If we are not talking about programming problems we are talking about developer problems regardless of whether you want to blame the author (me) or if I want to blame the reader (you). That makes it a style problem. No. This statement is purely asinine bullshit. If the code is too difficult to debug or edit, then it is not good code. End of story. &gt;If I want to know what something means I need context just like everybody else. And yet, you have chose to hide that context off elsewhere, instead of the one place where it really needs to go. &gt;That is no better or worse than poorly named variables. Variable names are more likely to be kept up to date than anything else. 
Holy crap! Thanks.
Yeah, but that's not important. (in JavaScript at least)
Flash called, it wants its easing scripted menus back.
LOUD NOISES!
*BUT WUTS A PROTOTYPE?*
And/or [this](https://chrome.google.com/webstore/detail/personal-blocklist-by-goo/nolijncfnkgaikbjbdaogikpmpbdcdef).
I am going to name my first born after you. Billy Tencircles.
Chrome's Omnibox does the same thing, except it's customizable, not some fixed list that some 'wise guys' thought it's the best.
I just google: `mdn array.pop`
Protip: Install Chrome extension "Personal Blocklist" https://chrome.google.com/webstore/detail/personal-blocklist-by-goo/nolijncfnkgaikbjbdaogikpmpbdcdef?hl=en and add w3schools.com to it.. BAM!
One thing that I've always found frustrating though, is that if W3Schools always loads faster than MDN (for me at least), by a solid second or two. Sometimes, in a situation like in OPs screenshot, I'll ctrl-click to open both, try MDN (its still loading) ctrl-tab, then get my answer.
THANK YOU :D
http://dochub.io Instantly searchable documentation site, pulls from MDN. It's been a pinned tab for me for over 2 years.
That especially with this Firefox [addon](https://addons.mozilla.org/en-US/firefox/addon/quicksearch/) makes this really convenient.
Use [DuckDuckGo] (http://imgur.com/T22CVuY).
Done, and thank you!
That's what I'm intending to do, actually. I'll be releasing blog posts as I advance on the refactoring, and I'll post a summary in the end.
Along the same lines, see http://devdocs.io/ I prefer the UI, and it gathers from a huge pile of sources.
Might I suggest http://devdocs.io/ ? Instantly searchable, compiles multiple sources of documentation that can be turned on/off at will (e.g. Underscore, jQuery, etc). Also has a quite pleasing UI and is pretty actively updating lately. Was an instant bookmark for me the first time I saw it.
For what it's worth, DuckDuckGo has a open source initiative, called DuckDuckHack, that folks can build on: https://github.com/duckduckgo/duckduckgo They also have a form to request new bangs: https://duckduckgo.com/newbang
I just tried now, W3Schools loaded right away, and it's been over two minutes and MDN is still trying to load. To me, THAT's be biggest roadblock for Javascript documentation.
Woh. That's an awesome trick, thanks!
In that site defense, around pre2000 they were really good to get no nonsense html tag reference and browser support info. They were filling a space that w3c left. there was no quick reference or browser compatibility info there.
Spacebar!
A function on a object that is inherited by default. (Right?) .pop is a function that is inherited by default to every array so its in the prototype of that array. (ie. every array can .pop) 
Why exactly is everyone acting like finding a link to w3school is like finding the compass in a Zelda dungeon?
I'm ditching Google so no Chrome for me :(
https://duckduckgo.com/?q=javascript+array+pop
That's because the servers for w3schools aren't exactly taxed. Everyone means to go to MDN.
Generally it's not a good idea to manipulate the DOM from a controller, even via a service. In angular the idea is to set up the scope and let a directive do that work.
What's shitty about W3 schools?
w3fools is very outdated. It makes a bunch of complaints that aren't even valid anymore.
cheers.
Use this and combine it as an alternative with Launchy's Weby plugin (installed by default in newer versions) and you don't even have to open the browser manually. That way if you are already in the browser you use the search bar and if you don't have the browser opened or you do but you are coding you do this: Just press ALT + Enter and type MDN + TAB + *keyword* + ENTER
Yes, I know that very well. I got the idea after first seeing the Nprogress project[1] yesterday night and I figured I wanted it for Angular. I was unsure though on how I should implement it. A directive? Well, that would require the developer to do more to be able to change the progress-width/percentage. A provider manipulating a inserted directive? That would require more code. This morning, I watched Misko talking about best practices regarding AngularJS[2] and he starts talking about that services **often** shouldn't contain dom manipulation but sometimes it's necessary. In this case, I thought it would be necessary. I think I made a good choice to make it as simple as possible. * [1] http://ricostacruz.com/nprogress/ * [2] http://youtu.be/ZhfUv0spHCY?t=26m40s
Is the w3cschools info incorrect or is this just one of those hive-mind things?
Overall, and this isn't your fault... I didn't like the progress bar that much for a few reasons. For one thing, all it's really doing is a few CSS transitions on a div and falling back to jQuery animations. For another thing, it requires jQuery. To be specific, you could do the same thing with CSS3 animations an far, far less code. fix a div couple of divs to the top, give the inner div a transition property on it's opacity, width, etc, then set it's width by percentage. No jQuery required. I dislike the dependence on jQuery anymore. Especially for something so small.
Open up notepad, press tab &amp; copy it -- press CTRL-V when you need to tab.... or just use spaces. It's interesting that pressing tab keeps focus on the input -- normally when you press tab in this context, it will move to the next input.
I agree that it doesn't make sense to depend on jQuery, that's why this Angular provider exists. It seems like you mixed together nProgress (which require jQuery) and ngProgress that I made (which doesn't require jQuery, it uses CSS transitions)
At times, yes, it *is* incorrect. The rest of the time, it's just incomplete, misleading, or weak. Very rarely is the info on W3Schools decent... and never is it comprehensive. 
from other thread, in case someone else comes across this thread and is wondering &gt; I'm still learning js and I like having repl-like environment where I can instantly test pieces of code that I see, I understand that I can transfer from sources to the console but sometimes I want to try to write or re-write a few lines of code (which I like to keep indented nicely) or I'm following a blog and punching the code in and want to take pieces a part to understand better. Is this not possible? &gt;Sorry coming from Python, I guess it just kind of freaks me out. I just also like having repl-like functionality ala ipython, etc. &gt; Is it not possible? I was using spacebars, it just gets crazy if I run try to prototype something really quick as I'm learning, like an object with a callback function as a property holding an array. Thank you for taking the time to reply
Just add "mdn" to your search when looking for JavaScript documentation.
I'm pretty sure firefox supports the same type of capability to direct searches to a specific search engine by using a keyword to start the search. Probably other browsers too.
Looks good. Where do you get your data? Is it up-to-date? (Worked flawless in my particular case)
Huh, this is the first I've heard of people hating it so much they want to remove it from their Google results. I've always found it great for "what is a brief rundown of what this function does?"
As akisbis said, promises are the way to go. New (not-old) versions jQuery actually return a Promise as the return value of Ajax calls. So you can do something like, var calendarPromises = calendars.map(function(calendar){ // Make whatever ajax request you need to make for each calendar to fetch it. return $.ajax(calendar.url, ...); }); // jQuery.when takes a list of promises (as arguments, not an array, // unfortunately), and resolves them when ALL of them have been // resolved. See http://api.jquery.com/jQuery.when/ $.when.apply($, calendarPromises).done(function() { // This callback will execute when and if all the requests finish // successfully... you can get the results of the requests by // looking at the "arguments" array. }).fail(function() { // This callback will execute if any of the requests fail... });
OK, so only define the ones with strings in the object literal, then set up all the shortcuts from the outside? That makes sense. *Edit:* And it works like a charm. Many thanks for getting my head unstuck from ~~my ass~~ the mindset of shoving everything in the object in one fell swoop.
And? Go make it better: https://github.com/paulirish/w3fools
The biggest issue is that Backbone is not a framework. Backbone is a library. You can build an MVC* pattern out of Backbone but it's just not a framework. Personally I don't like working with Backbone. It solves the wrong problem. Backbone is more about how to structure your data and Angular is how to view your data. Angular does a fantastic job with the two way binding and directives. I could live without some of the complex scoping issues but that's another discussion. ;)
ancient versions of IE support filters that do similar
jQuery vs. jQuery? What does that mean?
The other replies are basically accurate, but also, a few years back w3schools was a lot worse than it is now. It would have ancient code examples and not tell you which browsers they worked on. Of course, not that it's great today, but the state of Javascript was a lot worse back then too. This isn't to say that w3schools isn't schiesty as shit - even the name tries to make it sound like it's run by the W3C.
alternate ending: var cmdHelpers = { about: { 'foo': 'foo must die', 'bar': '@foo' } }; at which point you can do one of two things: - resolve all those `Object.keys(cmdHelpers).forEach(function(key){ if cmdHelpers[key].charAt(0)=="@") { ... } });` with the actual value. better if recursive. - leave it alone, and resolve at runtime. just keep looping through cmdHelpers lookups until you find a value that doesn't start with a "@". /u/brian_c's approach is simpler and therefore probably better, but kind of less fun too. 
the only thing W3S seems to be good at is SEO maybe they should teach that
Wow! Thanks man!
Imo, w3school gets way too much flag. It's way less intimidating and clearer site for beginners. 
I can pretty much guarantee that w3schools gets way more traffic than MDN. I can't even imagine that being in question.
It's still the same problem: whatever you decide will affect everyone. Why not have the list as a local, per user setting?
That's awesome!
How much can I use out? It would be great to have something like this on my site but with a 1-2k visitors a day it might be against the TOS.
Make a song with it! :-).
Very nice!
It would be fantastic to see some mechanism for loading musical data from JSON (instead of hard-coding the music into the script) and I'd love to see some more complex examples (multiple instruments, changing tempo or time signature, etc).
I don't disagree that it gets more landing page hits due to it being consistently higher on a search results page. The metric I'm talking about is the amount of traffic subsequent to that; people stay on MDN and retreat hastily from w3schools. The problem is that Google registers the inadvertent click through which boosts the ranking.
It's one of the favorite circlejerks in /r/webdev and /r/web_design as well as /r/javascript, etc. Every single week I have to witness some more w3cschools bashing and it's getting very tiresome. It is a good resource for beginners but a bad resource for professionals, IMHO. Beginners don't have to get everything straight and perfect from (t=0), it's sufficient that they know what the functions "pop" and "push" do. The examples are not as pedantically written as we nerds would like them to be, sure, but they're straight forward and that's a plus for beginners. They also have some shady shit going on, like the name itself (they're not related to w3c in any way) or the certifications. But honestly, I don't think it's that bad. If it depended on some guys here, the w3c people would be hanged in the town's main square.
I'm in the process of recreating the Addam's family theme. Not working out so well.... I should've stayed in band in highschool :/
Yes, definitely going to be adding in the ability to feed in JSON. I will also create a more complex song :-). 
Haha. I would suggest looking up a piano score and transcribe from there :-). 
So I've decided I'm going to transpose Isaac Shepard's [Gentle](http://www.isaacshepard.com/music/deep-joy/) and maybe a few of his other songs. He has the sheet music in the link I posted. Great job on making this, dude! The most I've done with JS audio is make a bunch of annoying white noise -- until now!! :)
Awesome! Can't wait to hear it :-).
I would love to dive into this stuff. I know music theory and javascript programming, but I'm not sure what to do...
You're not odd. It's perfectly normal to use SQL if you know how to prevent SQL Injection and optimize your queries. All of the ORMs that I've used in 3 different languages (Java, Python and PHP) are really slow compared to direct SQL statements. Although, at this very moment I am working with an ORM, and I am trying to optimize it further, and it's not as easy as it seems. There many people that consider [ORM an anti-pattern](http://seldo.com/weblog/2011/08/11/orm_is_an_antipattern).
But generally it still has what you actually needed. For me anyway, ymmv.
How is the audio generated, web audio api?
I'll definitely take a look at the example. Hopefully later today
What's the reason for no firefox support?
I use a Chrome plugin to block results from w3schools. Instant gratification. https://chrome.google.com/webstore/detail/personal-blocklist-by-goo/nolijncfnkgaikbjbdaogikpmpbdcdef
They have their own vision of AudioAPI
This is very cool.
OOooooooo this is exciting! This + a simple UI for placing notes/rests = awesome!
How about a tolerance mapping (the further away from the last backdrop pixel, the lower the tolerance)? That would reduce the green shadows.
I don't know if I ever went to another page on MDN besides the initial page that google sent me to. Do people do that? Also, 9 times out of 10, I get my answer faster from w3schools than MDN. Like it's frustrating if you're just looking for an example syntax (which most of these searches are, ie the "javascript array pop" example). On the W3schools page, there's the example written clearly at the top with two lines of code. Simple and quick. For MDN, you have to scroll down, then read through more a bit more code. To me, W3schools is a quick cheat sheet when you want to look up something fast, and MDN is the bigger encyclopedia when you want more details about it.
This might be useful. https://hacks.mozilla.org/2013/08/writing-web-audio-api-code-that-works-in-every-browser/
No, since an iframe has a different DOM context, events from the parent are not captured inside it. Yes, it is possible to capture events in the parent, create a clone of the original event object (jQuery does that automatically) and send it to the iframe (via direct callback or window.sendMessage, if the iframe has a different origin - but then you'll have to serialize the event, since sendMessage only allows for strings).
I did something similar, although I was fiddling around with the JavaScriptNode to create sounds so my sound quality is likely not as high. I ended up with a guitar tab player though - http://www.knowles.co.za/articles/bits-of-sound/
I don't think I'll be needing it because I actually am using the new api. I'm also checking to see if `window.AudioContext()` is available before using the webkit version. Thanks for the link though :).
Interesting but it would be very hard to get the rhythms correct. Plus guitar music would probably be horrible using oscillators :). This library is more for that 8bit sound for game devs when making HTML5 games. *edit: removed a word
Totally agree :) I just didn't feel like typing out songs anymore - it worked nicely with a Mario Bros tab though.
MIDI.js; check it out. Exactly what you need.
I picked a random W3schools article out: http://www.w3schools.com/jsref/met_win_open.asp Look at the examples. Beginners are going to be using these as a reference and they encourage some pretty awful javascript practices. How you can say that is a "good resource for beginners" with a straight face is beyond me, it seems to impede learning if anything, and is only useful for people who want to copy paste some code and don't care about anything other than if it works.
Well this is freaking cool! Thanks for the source :)!
I'm a chiptunes fan and a javascript programmer, this is right up my alley. I can't wait to play around with it! Please X-post to /r/chiptunes, think they'll enjoy it. 
While that's true, don't count on it, have a fallback handy (unless it'll only have to work in one browser that supports it).
It uses MaxMind GeoIP database binary files to get the data.
I might be missing something here, but what's the point of JotForm?
I am working on something similar http://rezoner.net/labs/chirp/examples/1/
1-2k requests a day is really no problem at all, go ahead :) There is no rate limit at the moment, and it will remain so for as long as there is no abuse attempt.
That's great to hear fgutz. I think it would be best if you posted it to that subreddit since I've never heard of it (although it does sound interesting). Don't want to impose :).
Fucking christ that scared the shit out of me lol. Warning to anyone with headphones on. I middle clicked the link into a new tab to go to later and once I clicked on the tab, BAM!
NPM is really, really good. It changed how development package managers work, setting the new standard of dependency-local instead of global package installation. NPM is incredibly easy to use--I've tried a dozen languages, but only published my first real package in Node.js. JavaScript, however, is terrible. Bloody awful. As in, no lexical scope awful. So I'm glad to see that ECMAScript is importing ideas from Coffeescript. [Wat](https://www.destroyallsoftware.com/talks/wat) talk demonstrating just how bad JavaScript is.
For firefox users, this userscript is pretty nice: http://userscripts.org/scripts/show/39996 - Uses Adblock filter syntax - UI is not very intrusive (small "Filter" link in the URL line)
great to know. I'll work on it on the weekend.
Or just `!window.$`, because any object will result in a `true` result. For almost every instance, `x == null` is equivalent to `!x`.
Yes. I wish MDN and webplatform.org had more of an eye towards performance. I really don't need any kind of flashiness in my docs. 15 External JS files on MDN? and 9 on Webplatform.org? Half a Mb for a single documentation page of each??? Come on, gimme a 50kb straight html page on a decent server. This stuff should be immediately accessible. I shouldn't be tempted to reach for a book while the page is loading.
Once JSON is in, people could write visual tools to record a JSON-formatted song while dynamically feeding it to your engine. Once JSON is there, we support an editing process. It's all about the data. :)
Hmmm, I click the "example" and see "Hello Plunker!" after an "Import Error: Plunk Not found" Is there supposed to be something there?
Awesome!
Just as a foreword, I have no stake in Ember.js, apart from developing our application in it at my current job. But this is an inane criticism: &gt; This difference widens even further when you want to populate that list with data from an AJAX call, something Angular does with ease. Ember.js, on the other hand, relies on it's own data persistence library called ember-data, which forces your underlying data sources to conform to a very rigid REST interface. It's not something you always have control over. (1) Ember-Data is a completely optional (and as you are repeatedly warned before downloading it, not-production-ready) component. Ember.js works incredibly well without it. (2) If you do decide to use it, Ember-Data does not force you into an API. You can write your own adapter for it. (Although I agree that how to do so isn't well-documented.) (3) Ember.js provides you with an incredible toolkit for rolling your own persistence layer. `Ember.Object`s by themselves are incredibly powerful (with out-of-the box data bindings, observers, and computed properties), and by including a couple of mixins you can turn your model objects into event-emitting promises. I really can't emphasize enough just how nice the features I describe in (3) are, and they are dead simple to use. 
http://plnkr.co/edit/ev289bKEonSvqL3HVkDQ?p=preview Because it needed to be done.
This would benefit from some tracker style composer. You might also want to look at some more compact form the note data, MOD comes to mind - might be a fun project to adapt that to json in some way http://www.mediatel.lu/workshop/audio/fileformat/h_mod.html http://en.wikipedia.org/wiki/MOD_(file_format) For list of similar formats http://xmp.sourceforge.net/ http://en.wikipedia.org/wiki/Tracker_(music_software) Some more inspiration.. https://github.com/photonstorm/FlodJS - js based tracker music player
I was going to write a comment, but the comments thread under the post one that said everything I wanted to say: &gt; In the first benchmark, you're comparing a case where each instance has an own distance function (a different which needs allocated and pressures GC) and a case where the function is shared on the prototype across all instances. I don't need to run the example to know the latter is much faster. &gt; Exactly same problem in the second example. You're allocating a new function against allocating one and reusing. What are you trying to prove here? Sharing is better than reallocating? &gt; Also, this has nothing to do with callbacks... Edit: Also, this is terrifying: &gt; I'm a Node.js maintainer sponsored by Mozilla. 
This is blog spam. There's no good content of any value in that article. In this particular case you'd write a few more lines of code with Ember. Who cares.
You could look at http://w3fools.com, it's signed by some nice people.
I'm actually very confused why people think Ember-Data is something *negative* with Ember. Are there any projects like ED with Angular? Because Ember has multiple ones to choose from (Ember-Data, Ember-Model, EPF etc), and even if none of them have gotten everything right from the get-go, having multiple active projects versus *none* seem hell of a lot more attractive to me.
This is something I've done: var tolerance = 150; for(var i = 0, n = data.length; i &lt; n; i += 4) { var diff = Math.abs(data[i] - data[0]) + Math.abs(data[i+1] - data[1]) + Math.abs(data[i+2] - data[2]); data[i + 3] = (diff*diff)/tolerance; } i.e. the transparency increases the closer you are to the background pixel. If you play with the 'tolerance' slider on the demo you can see the effect. I think with the low res, jpeg image in the example the artifacting and blurring of edges contributes to the green shadows. You can still get a pretty good result though, even with these low quality images. 
I've seen w3fools, I've seen the hysteria surrounding w3schools, my question was if the information on array.pop incorrect or not
I agree completely. Ember-Data has been sold as pre-alpha and experimental and that it should not be used in production. Even with this notice people still seem to use it against Ember as an excuse for other frameworks being better. To be fair Angular technically doesn't even have a model layer since they say everything in $scope is a model and is generally just pulled with $http ajax (as far as I've seen). Ember is an amazing framework without a model library and even more so when you use something like Ember-Model. It's all about picking your tools and what will fit best with the rest of your stack/application. One last note, you aren't required to use a model library with Ember, you can roll your own or even just use $.ajax and promises instead.
they both have the same id. you cannot have two items with the same id on the same page, as id's are unique elements. so when you call a function to act on an id, well, it runs on the first id it hits.
I get where the article is coming from, but the shots at the way ui development is done in the browser hardly seems relevant in the context of the examples he gives. No ones spawning 1000000 bootstrap tab instances! I not that worried about performance in the code I write. I should hope however that library writers do their best to write optimized code, but its not really something I see as a problem. Edit: When I need callbacks, for my own code usage (ui logic, api "service", what have you) I prefer to use promises as someone comments on the blog post as well.
http://discuss.emberjs.com/t/future-planning-roadmap-of-ember-data/2116/4 Yehuda mentions this: &gt; I still believe that a robust data solution is a key part of the Ember project. As @workmanw pointed out, because of how much Ember does for you, people expect Ember to have an "M" layer, even if they accept "just use your JSON objects" in Angular. People expect Ember to do more for them, and that's something I am confident we can deliver on. At the end of the day, Ember Data is kind of a unique project, in terms of what it's aiming to do.
Getting pops between each note. Anyone else? Just wondering if this is just something on my end.
I've had this happen a couple of times but it's mostly when using the 'triangle' oscillation type. Is it always happening? Which browser/version are you using?
The point about bootstrap was more of my disdain is the fact it uses every hipster programming technique in the book. Not so much for the programming patterns used. I've removed the comment from my post because of the ambiguity.
This is awesome!!! So adding it to the README file. What name should I attribute it to? Do you have a github name? Or just your reddit username?
Cool! Now do it without the dependency on jQuery. Just use `angular.element()`.
Reddit name's fine.
[Here is what my proposal is so far](https://github.com/meenie/8bit.js/issues/1#issuecomment-23086710). I think I am going to merge it in later today if there are no objects. Let me know what you think.
You're awesome!
The first benchmark was created to intentionally show a performance hit from declaring a function within a closure. Everyone says duh there's a performance hit, but turn around and use it like there's zero cost. The second was contrived to show performance impact from declaring the function in the same location that it's being passed as an argument. Again, just a simple programming pattern that is used all the time and can lead to large performance penalties. The point was that there have been seeing plenty of benchmarks with callbacks vs everything else, but the benchmarks are unfair because of improper use of callback declarations within closures. And before they go touting that promises, generators or whatever are just as fast as callbacks they need to get the pattern right.
Chromium Version 28.0.1500.71 Built on Ubuntu 12.10, running on LinuxMint 14 (28.0.1500.71-0ubuntu1.12.10.1) I'll have to give it a try on another machine later.
Done :) - https://github.com/meenie/8bit.js/blob/master/README.md#examples
I'm running on Ubuntu as well but with Unity instead. Thanks for the report but I'm guessing it's nothing I can do and something the Webkit guys will need to fix :-/.
You must have very simple needs...
They are now using AudioContext and just released it in their nightly build.
With oscillator support?
Yes.
Check here more specifically, at the bottom: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext
To be honest I wrote it at 3am, and never expected the coverage it got. My blog received more hits in 1 hour after that was published than the entire year it had been around. So yes it was a rant, and a tired one at that. I'm going to be doing a follow up post that'll clarify what I was getting at in that post.
I liked the thought behind this article because the state of javascript is pretty amazing right now, but the blatant theft and butchering of Louis CK material was kind of a bummer.
/r/ProgrammerHumor 
eh i felt it was more of an homage than a ripoff. I enjoyed it. He even credits the louis ck bit at the end. Chill out.
That is very weird.... Try this link instead: http://run.plnkr.co/O63U5qe6jJAcEWxD/
There's ngResource which is a wrapper to consume RESTful APIs with the $http service. I just used BreezeJS with Angular and it works pretty well for consuming OData / REST That's the nice thing about both of these frameworks- they let you pick your own data model/persistence layer.
Hey! You're the creator of Qbqbqb! That's a very addicting game. The sound really enhances the gameplay.
Glad you liked it! Removing jQuery wouldn't be *too* hard, but dealing with offsets/positioning and scroll event handlers in a cross browser way is painful - this was a quick bit of code inside an existing project, so I decided to stick with jQuery.
I call dibs on remaking [The Legend of Zelda's theme.](http://www.youtube.com/watch?v=0XI0m8bhpWM) Too bad I can't read sheet music.
Looked at the example. Awesome. I'll see if I can use it or help out somehow
Isn't it weird how 3 lines of code plus 10k lines of code in a framework, another 40k lines of code in that framework's dependencies and dev dependencies and tests, and another who knows how many in the framework's dependencies dependencies is still considered 3 lines of code?
This is written/formatted really annoyingly.
Do you have a few ideas in mind?
It was a hell of a lot funnier as the Louis C.K. bit it's based on.
I started it off for you: http://plnkr.co/edit/QCpfTLwV0fDWvJ1gmlXT?p=preview - I couldn't do any more because I only found one page of the music here: http://www.sheetmusicplus.com/look_inside/19724793
Here's a [complete version](http://plnkr.co/edit/nVP3gnYrBWc7D7CMxpXv?p=preview) I just finished up.
You are not comparing the exact same thing. If you wanted to do "X" in C or in assembly the produced code would either be the same or similar. If you want to do "X" with a framework or the Vanilla way, doing it the Vanilla way usually yield in less executed code. This is mostly due the the fact that framework have a lot of overhead to cover more cases that you will need. This is an important distinction to make, framework will let you create application more easily at the cost of some overhead.
I found [this](http://www.ninsheetm.us/sheets/TheLegendofZelda/TheLegendofZelda/Overworld.pdf) after I decided I wanted to do the song, hence I was sad I couldn't read sheet music.
Odd, how about now?
I noticed you edited it. It works now.
It's a parody of the very famous Louis CK bit he links at the end.
Well, if the attitude is, "This is bullshit and I give up on it", then yes, the point of the tirade stands. If the attitude is of, "This is a problem that I must solve", then we're good to go.
Unless you are a recruiter. Then it is java script.
Yeah totally agree mate . Angular is just angular . Backbone means lot of dependence . But still both have their own goods and bads . For multiple page application you cant rely on Angular . I am big fan of angular
The difference here is that C and Assembly are two different languages. Javascript is Javascript.
Well, **I** am happy. I did animation and image slideshows before jQuery became so pervasive as it is today, and it was a pain. jQuery made it nearly effortless. I wrote fairly complex One-Page Web Apps before looking for a framework, and it was a giant mess. Then I tried backbone, and my code became organized and squeaky clean. I am happy.
Hey, If you're already aware of some good observations about the trend of turning the web into more of a client server based environment, then let me know! I'd love to read more about it from someone elses perspective. -T
Fine, then a C++ program using the standard library, itself using a variety of system calls.
Of course that's true. Presumably you only code in assembler then? For me, I'll take the amazing productivity boosts of exciting frameworks and then optimise the slow bits if they're getting in the way. That's true for any language, not just js.
Uh, no shit?
Those are baked into the language. That's like saying the Date Object in javascript is equivalent to AngularJS. Don't mean to split hairs. I'm just saying... "3 lines of code" is a bit of a misnomer. There's still thousands of lines of code in the language you're writing in, they're just lines of code you don't have to write. 
Awesome!! Going to replace my attempt with yours :). My office was rocking out to it haha.
What about native Set, that's specified in ES6 and will appear in engines soon? Is this one compatible with it?
I guess the theme will be 10sec - if so - I would like to break the Wario Ware chain and do something else.
When you added the Function object to the image you should also maybe connect `__proto__`s of all constructors to the `Function.prototype`. ;-) 
It's not really theft when you link to the source at the end.
I'll be working on it this weekend but I can't promise it will be done :-/. I will definitely be putting in a shit ton of hours though :-).
It is form builder
After picking a card, you're shown 3 rows of 9 cards, like so: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [17] 18 19 20 21 22 23 24 25 26 27 Card 17 being your chosen card. You chose row II and the dealer picks up each row of cards, but takes row II up last, so the order of the cards in the stack will be 1-9, 19-27, 10-18. Your card is now one of the last 9 cards. The cards are spread out again starting from the top of the deck, and going in a I, II, III pattern. 1 4 7 19 22 25 10 13 16 2 5 8 20 23 26 11 14 [17] 3 6 9 21 24 27 12 15 18 The dealer knows your card is somewhere in the block I've displayed slightly separated. You chose another row of cards, row II again. The dealer now knows your card is either 11, 14 or 17. He picks up the cards in such a way that row II is at the bottom again, and when splayed out the cards will be: 1 19 ... 20 11 4 22 ... 23 14 7 25 ... 26 [17] After you chose row III, the dealer knows you chose card 17, all he has to do now is to place it in the deck so it's the Nth card.
Thanks! It's a pretty "simple" trick. It's only math. You can see a lot of tutorials on youtube if you search for 27 card trick. There's also a trick called 21 which is pretty cool too. I liked the idea to convert a "real" trick into web.
After each of the 3 rounds it depents where you put the pile of cards with the spectator card in it. Top, middle or bottom. Have a look to the javascript and search for the switch with the "order" array.
I actually like when people make blog posts like this because Tom and Yehuda tend to come out of nowhere and start an entertaining (and frequently educational) slugfest in the comments. Tom Dale: &gt; Do you remember the Pepsi Challenge? Pepsi challenged Coke drinkers to do a blind test and, much to their surprise, more of them actually preferred Pepsi after taking a sip of both. &gt; Why? Because Pepsi has more sugar! Our brains are wired to deliver a dopamine hit in response to sugary, energy-dense foods. People actually prefer less sugary drinks if they're drinking an entire can; but when taking a sip of two different beverages, only the sweetness wins out. &gt; You guys have been using Angular for six weeks. You are still in the sipping phase. I think it's awesome that you guys are excited, but you have not yet built enough to run into the deficiencies in the framework. &gt; I'll tell you what I see in all of the Angular apps I've been looking at: &gt; # Put it on $scope is the new window &gt; With Angular, you don't really have to think about architecture or the roles of objects‚Äîjust throw it in $scope and it's on your page. One of the most heavily touted open source Angular apps I've seen, Go Read, is an architectural disaster. The entire app is just stuffing ad hoc code into the $scope so that everything has access to everything else: https://github.com/mjibson/gor... &gt; **The first sip of this tastes so sweet!** You can add new features so quickly by just throwing crap into $scope! &gt; This is literally no different than the old, bad practice of spraying the global scope with objects and behavior, but because we've gussied it up with new terminology we excuse ourselves for our poor architecture.
[here's a numberfile video about it](http://www.youtube.com/watch?v=l7lP9y7Bb5g)
To the OP, I agree. However, for the foreseeable future I would appreciate website authors that respected the *link* element and the concept of a *page*. Understand that until I can make the *window* of the page I'm viewing interact with my operating system natively (minimize to taskbar, resizable, shortcut to start, set options and save state between runs) that it is a different world and should be respected as such. Instead of trying to take the desktop application metaphor and make *pages* emulate them, we should rather embrace the differences and enjoy them. Thus my suggestion for the "perfect" web app feels like this: &gt;Send full HTML to the client on *initial* view of any URL. Load a JavaScript file to listen for events or enhance UI from there. All links are therefore real (accessible directly) pages. However, in-app links (click) events are intercepted and become AJAX calls that expect a server JSON response. You therefore know how a URL was accessed ... from a saved link or an event from the page. &gt;As the user interacts with the page, collect or retrieve state by storing to a *client* side model. For performance, the local model saves its state to the server hiding the effects of round trips. 
lovely homage to louis ck
&gt; then optimise the slow bits if they're getting in the way The thing is that unless you want to optimize the framework itself, you are stuck with the performance cost. You can't magically modify or optimize code, you don't have any control over. Using a framework is usually a good trade-off, but it's nonetheless a trade-off that you need to be aware of. In programming field using almost anything has trade-off, being aware of them is what makes you take good decision. &gt; Presumably you only code in assembler then Not sure if you are trolling or completely missed the point. I explicitly said that if you are comparing language to language. You are usually comparing the same/similar executed code. So using higher level language doesn't add overhead to the code, which is something that can't be said about framework vs no framework.
Don't worry even if you got lots of downvote, it's still a good point to make. Sometimes framework or library hide so much complexity that it's easy to forget all the cost that it implies to do something. LINQ is a good example of that. It's not rare to see LINQ one liner that have a complexity of n^2 and end up being terribly slow.
&gt; failings You misspelled *shortcomings* or non-agreeable aspects. That Louis CK fragment is made especially for hyperbole like you.
Join me, web development brothers, in destroying this project and sending it back to the hellish UX nightmare from whence it came. Edit: I kid, it's an impressive implementation, let's just make sure it never goes into production.
Yeoman is one of those tools where I find it hard to believe I was able to work productively without it. Incredibly productive workflow, very sane defaults, and an easy to configure environment. 
Been using Yeoman / grunt / karma etc for personal projects at home and really enjoying it. Trying to figure out a way of working it into my workflow at work, which is still very MS/Visual Studio/TFS based. If I could get things to check out files automatically / add files to my solution automatically / etc, that'd be pretty sweet.
Then you don't need it.
Sure, for styling sites that are similar to styled text documents/ content sites it's okay. When you move into web application land it starts to fail pretty fast. It gets even worse when you try to create isolated reusable components. The C in CSS will make it so that global styles will bleed into your components. You can compare it to having your custom css file screwing over the default checkbox input by moving the V 10 pixels to the right. For this there are no good solutions at the moment. What you can do is write super specific css but that has it's own problems as well. They are working on solving this by giving you access to the shadow dom but it's going to take a while before that's actually usable in different webbrowsers. jQuery is fine but sometimes it's a bit frustrating you need to have it to do simple things.
HARDER!
Sounds like opinion to me. I read it just fine.
This is a bad comment as well.
I think the poster child for what has_all_the_fun is talking about is `classList`. Any reasonably complex webapp will have a lot of class modifications, and IE didn't add classList until 9 or 10. There are tons of people still using IE 7/8(/9) so you'll have to shim it, which isn't difficult, but it takes time and effort. There are many issues like this one when you're working in vanilla JS.
Generators are pretty nice during a project too. I have found those very useful with Backbone and Angular projects. You can easily add new modules and stuff to your app with them
Yeah, I read that as well. I've read multiple of those *crusading* comments of theirs from other places too. Getting kind of tiresome by now; I wish they'd just do their thing. But I guess that's easy for me to say. If someone was shitting on thousands of hours that I'd poured into some projects then I'd probably be miffed too.
I completely agree. As much as I love angular, creating a new filter or directive is a bit of typing and its much faster to just use generator-angular to build things for me. 
I enjoyed the imagery, even if he was projecting some stuff he'd seen elsewhere onto the guy at Errplane. But at the same time, the post was littered with ignorant statements about Ember. It's one thing if they were justifiably shitting on your thousands of hours. It's another if they just didn't RTFM.
Not sure if anyone else will notice. But there is a functional mario game at the bottom of the page. Nearly shit a brick when I tried controlling mario and it worked! lol Controls: Left/Right arrow keys to move Up arrow key to jump
There's no need to pick the card for this trick, it just lessens the final effect. I used to do a similar trick when I was a kid. The key difference though was that the version I did didn't involve the user to pick a card. They just had to pick one in their head, and go three rounds of telling me which row the card was in. Then the math takes over and finds their card. 
it sets up a really nice grunt file that is way beyond what I could currently do with grunt. But if you are already awesome with grunt and you dont start that many new projects, you probably wont benefit much from yeoman.
I would say pick one of the libraries or frameworks and specialize in it. Check out its github page, tinker with some of the bugs and see if you can figure them out. Or find some corner of the library that isn't very well documented and submit a pull request with some documentation. It's always more fun being a part of a community, especially when you're helping out!
For sure. However, OP wanted to learn the language, and not just a framework. While in almost every setting you'll be using a framework to get the job done, knowing the language is also a Good Thing.
When I started using JavaScript heavily and learning it 'for real' so I could move into webdev, I had a similar worry. Whenever I wanted to do something, I searched stack overflow and google looking for a library to do it for me thinking this was the Right Way. This got more and more difficult as I started using things that I had no idea how they worked. This was especially true for node &amp; backbone. So I purged everything and decided not to use any library unless I absolutely needed it. I ended up with a process kinda like iterative refinement. As an example: simple client-side app. hmm, I need to change this text and the class. Okay, I look up getElementById and use it, but its a pain to type over and over again. How would I abstract this? Hrmmm.. Some kind of query library would really help. Okay, now lemme look at jquery's source. Since I already have an idea of what I need, it makes more sense and things don't seem as divinely inspired. Awesome, now Im much further and I notice I keep doing the same things. I want these pages that load a model from the server, then I want to load a template based on that data, and attach a series of event handlers. Could I abstract this better so I have some reusable classes that glue these operations together? Oh, that's Backbone. Now that I see the need, it makes more sense how its put together. Ugh, look at all of these library files I have, how do I control which ones are on which page and load only what I need? Oh, requirejs, how handy! etc TLDR: Try to build without the libraries to get a better feel for what problems they solve, then it will be easier to look at the source code
ok well deleted the post to not offend however I have updated the offending post to educate about jQuery plugins a bit alongside promoting my book
Most of the big frameworks are open source. You can contribute (if it's optimizing slow stuff, they'd probably be happy to merge the changes), or just fork a copy for yourself. If you compare C or assembly to something dynamically typed and garbage collected with first class functions and stuff, it's doing all sorts of magic you don't have to pay any attention to, which is overhead, but fantastic amounts of increased productivity for your lines of code.
But seriously. the days of goto were pretty horrific. Goto statements actually are very useful but got overused to death and now no one will even touch them. Kind of like red hot chili peppers.
Oh my god... http://www.xkcd.com/292/
You do know how to use it, at least to some degree. I personally would suggest just diving in to one of your favorite frameworks (I did this with jQuery) and figuring out how they did some of the stuff in there. [Paul Irish did a video](http://www.youtube.com/watch?v=i_qE1iAmjFg) on some particularly interesting things jQuery does. On top of that, I'd do what you suggested: just start building your own "helper" library. Even if you don't use it out in the wild, it will give you a great opportunity to try new things and compare against more mature solutions. Alternatively, you could try and recreate one of the projects you made with a given framework (or two) and try to rebuild it without said framework(s). Minor correction: Node.js isn't really a library as much as it's an environment/platform.
Hahaha, hopefully it will be used for creative purposes :)
I've found a great way to start is just reading (and making sure you understand) the source of libraries you respect. Backbone and Underscore are a good place start because they're relatively simple and very clearly written.
The article doesn't mention Yahoo! Pipes at all. What's up with that?
Stop using third party libraries for a while.
and I always got a lot done with little effort using: http://en.wikipedia.org/wiki/Hartmann_pipeline
&gt; The paradigm was so disruptive that it was suppressed by computer scientists for decades. &amp;#3232;\_&amp;#3232; I see where this is going: "Create enterprise software with this **one simple trick!**" "Computer scientists **hate** her!" "The secrets your programmer **doesn't** want you to know!" &gt; What we need is not more programmers. What we need is to enable non-programmers to participate in the creation process, not just the ideation process Oh man, this *again*... Well, good luck guys, but there's a *reason* it failed to take off 40 years ago, 35 years ago, 30 years ago, 25 years ago, etc. and it's **not** because the interfaces were lacking rounded corners and animations. Trying to get non-developers into the creation process this way is like throwing an erector-set at a soccer mom and asking her to help build the chassis and powertrain of her next SUV. (Or worse, passengers on a jumbo-jet.) Sure, high-level customer desires and inputs are valuable for making a good product, but someone else needs to be evoking, translating, and balancing those needs and wants. &gt; "It capitalizes on the visual capabilities of human beings. Instead of doing reams of text, you can draw pictures," explains Morrison. It adopts all visual failings of human beings. Instead of manageable chunks of abstraction, you make impossible-to-illustrate piles of N-dimensional spaghetti.