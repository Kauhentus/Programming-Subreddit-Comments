ConEmu with Git Bash, and MobaXterm. 
A shopping cart connects item to users. So I would have a single table with user_id and item_id columns. 
"Note: this is the only page where the toggle will not function as expected, as the string matcher will match the code below, causing elements to be incorrectly removed! Try it on all your other tabs, and you shouldn't experience any problems!"
a lotta music things this week. here's mine to the list: music + vfx tool / graph-based editor: [https://github.com/kousun12/eternal](https://github.com/kousun12/eternal)
why is it every day with this stuff? We get it, you didn't know what you were doing.
No offense to either OP or yourself, but I simply don't see the value in this vs. browser inspectors. You can right click on an element and immediately see the hierarchy of elements and their bounding boxes, no extensions or bookmarklets required
That‚Äôs why I said in combination with a loop.
Thank you! Ever built an ecommerce site before? 
Nope. 
* { border: 1px solid red; }
It‚Äôs a preference thing, some people are more visual and may prefer the border approach or a combination of the two.
&gt; Haven't touched a line of cpp for almost six years. Not a good memory. Is my understanding of it roughly right? That it's got numerous issues that you normally don't have to worry about with other languages?
Genius! Huge thank you for sharing!
Would have been nice if the article had explained why ProseMirror and not other options such as Draft, Quill, Slate, etc. I went through the decision of choosing a library for developing a rich text editor with custom elements and ended up using Slate instead. I gave ProseMirror a try for a week but it is too low level and tedious for my use case (one man band). Slate follows the same philosophy (not a text editor but a library for making text editors) but since it's made to be used with React many problems are much easier to solve compared to ProseMirror. A big con with Slate is that it's still not production ready and major changes are being made to the library. They are in the process of removing Immutable.js.
This is why I default deny all JS in global scope using uMatrix, and then only whitelist absolutely necessary JS on a site-by-site basis. There is absolutely no excuse for allowing any JS whatsoever in ad networks. If all ads were static png or jpeg files wrapped in a simple HTMl anchor tag then we would not be in the shape that wee are today where ever single website is a threat to the visitor due to ad networks alone.
What you‚Äôre expecting are the old style of decorators. Those have fallen out of favor for a new syntax by the TC39. More info here: https://github.com/tc39/proposal-decorators/blob/master/METAPROGRAMMING.md Or you could update your Babel confit to use legacy decorators: { "plugins": [ - ‚Äú@babel/plugin-proposal-decorators‚Äù + [‚Äú@babel/plugin-proposal-decorators‚Äù, { ‚Äúlegacy‚Äù: true }] ] }
When inspector you only see the outline for the highlighted node. This type of thing is more ideal for designing grid systems and quickly figuring out which elements are padded vs margined.
Thank you!
Clearly, I do not know how to read lol
Array = ['x', 'o', 'x', 'o' ] ; //how many 'x' are there Array.reduce((a,b) =&gt; b ! = 'x' ? a += 0 : a += 1, 0) //positions of x Array.map((i, idx) =&gt; i != 'x' ? -1 : idx).filter(i =&gt; i != - 1
Hi üëã, author of lit-html here. I know it's another dependency, but since you're already using lit-html you may want to try out LitElement - it's a Web Components base class that uses lit-html for rendering and takes care of some property declaration and observing for you. Web Components are the web-native component model and are built in to Chrome, Safari, Firefox and soon Edge. They take care of associating a JS class with a DOM element for you, and lifecycle like connection, disconnection, etc. You should be able to make a lot of your code more declarative with them. &amp;#x200B; Also, MVC or even MVVM can have vague boundaries between part in practice, and when extremely strictly adhered to can lead to boilerplate. I tend to go for a looser defined M\* approach based around components, very much in the spirit of Redux-style data stores: You have a model, and components that act as view and controller for interactions, but mutations and data I/O (basically all state changes) are passed to a top-level data-owner, also usually a component. It's quite easy to do in the DOM even without Redux because of events. Components respond to user events and translate some into semantic state-changing events. The app-component responds to state-change events, mutates the state, and flows it back down the component tree, updating the view. I think you'd get a big simplification from this approach.
You are using a relational db so you shouldnt create table for each cart. As said you can use a simple table woth user id,item id and item count etc. If there will be single cart for each user. In some b2b projects there can be need of miltiple carts for each user. Then you should create a cart table with user id and cart name etc. And there should be cart items table which has cart id, item id and item count etc.
Ehh.. so something like WASM extending/augmenting the browser capabilities/behaviour specific to a website? Wouldn't that delay rendering though, even if JS as it'd be blocking rendering until that code is loaded in and ready? Or would you get a broken layout loaded in and then a relayout?
this is a simple and elegant solution. the values in the array correspond to the indices they show up in and the length of the array is how many matches there were. just don't leave the if statement like that with no braces and no semicolon. you're playing with fire. const indicies = []; for (let i = 0; i &lt; array.length; i++) { if (array[i] === 'x') { indicies.push(i); } }
I dont think the op is blaming the language. I think the main idea here is even if you dont know what you are doing functional programming can prevent shits like this even if you dont intend to.
Well dont know about vue or angular but as a react developer jquery is a pain in the ass if I want to use it on react projects. Virtual dom and jquery just dont get along together. Because of their nature i think. So I think as react usage increase jquery usage will decrease. Thats my opinion tough.
First I appreciate your work. This was an approach I used about 9 years ago in front end development. Back then i would definitely used it :) But I dont think using this aporoach is like ract or angular. Because their main idea is not just making single page apllications but make dom manipulations. So I woulndt use this term. Thanks for your share btw.
I don't see it, but your errors are self explanatory. You have a syntax error, so your code isn't running some portion, and something else is causing your iframe variable to be null. I suspect we aren't seeing all of your code.
Thats why it was only an example on how to do it. Not to copy-paste it into his code.
Yea, I just can't seem to point it out. The only other code would be the .php file for the wordpress plugin. &gt; &gt; &gt;// If this file is called directly, abort. &gt; &gt;if ( ! defined( 'WPINC' ) ) { &gt; &gt; die; &gt; &gt;} &gt; &gt; &gt; &gt;// Define current plugin version. &gt; &gt;define( 'RWC\_Pass\_Parameters\_iframe', '1.0.0' ); &gt; &gt; &gt; &gt;// Load necesary JS &gt; &gt;function rwc\_pass\_parameters\_enqueue\_script() { &gt; &gt; &gt; &gt; wp\_enqueue\_script( 'rwc\_pass\_parameters\_script', plugin\_dir\_url( \_\_FILE\_\_ ) . 'js/rwc-pass-parameters.js', array('jquery'), '1.0'); &gt; &gt;} &gt; &gt;add\_action('wp\_enqueue\_scripts', 'rwc\_pass\_parameters\_enqueue\_script'); &amp;#x200B;
p5js is probably what you want. Coding train on YouTube has a ton of videos about it
People might just have a bad day, I can't really be upset here. It's all good xP
oh for fucks sake, just read the article ;P
Thanks Dan, I'll read this during my commute today. 
I'm showing this to everyone at work. None of us are designers but do tons of front end work. Love it
Looks cool! But after Firefox has this too its for me useless.
I'm a slow reader, that article was rather long winded and didn't seem all that interesting to invest the time into, from what can be gathered by comments here it doesn't appear to provide much value either. If they're re-inventing layout/rendering in the browser and that somehow is better and practical while not adding additional complexity to devs, then great, it'll take off and I'll probably hear about it more and maybe see it mentioned in job ads some day. 
https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ
Got to be honest... css pain will **never** go away! But we can take little steps to mitigate the beast :D
This is basically it. My original use case was using bootstrap and I couldn't figure out what element I had messed up. I ran the tool (ghost at the time) and could visually see the structure of the component that I had messed up. It saved me a lot of time. 
Gentile was likely not the word you were looking for. 
&gt;Drag to your toolbar and x-ray your webpage! Good shout, posted :) 
It's fine - we all learn the hard way! 
I migrated my blog to Github pages not too long ago and ended up breaking a lot of links... Thanks for bringing this to my attention - I have now fixed the link! 
Making Yarn support other language is the only idea in there that I don't buy. 1. It's too ambitious. Each language/OS has different ways to do things. This will only make Yarn development slower. 2. It's too confusing for the newbie. It will be harder to find tutorial or document about how to use Yarn, as each article will talk about issue from different language. I'll wait and see how this turns out.
Cool! I just followed you on GH
Thanks; the first point is clear and I composited the my object that way, but the second point is what I was interested in. There is no proper *clone* method in Javascript, let alone the ability to clone into a property of another object: https://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object BTW, what do you think of using *proxy* instead of extends to tweak how objects work? I have heard that while generally it would be a "bad practice", in some cases it is better than *extend* or composition method.
\+1
Thanks for the musings on the issue. Mouse is tracked asynchronously versus MutationObserver, so we need to store the coordinates somewhere in between so with each *callback* run we could get updated coordinates. Can it be done without putting them into a property of wrapper `EventTrackingMutationObserver`? Can we do `this.MutationObserver = new MutationObserver((...args) =&gt; callback(...args, this.latestMouseEvent));` instead? Will this writing pass a reference to the property, not its literal, which is just "" at the moment of initialization? If we can, it is good, but then what should I do if I will need more properties from my object to work with? Should I then add them manually every time? It might be a bad practice in its own way. To solve that, we can write an iterator over all current properties of my object that would automatically add each property to the list of arguments I pass to *callback* along with its its own two it gets from *MutationObserver*, right?
For my (fairly limited) needs, I'm now using tiptap, a vue component wrapper around ProseMirror. I'm happy so far, I guess it is striking the right balance of abstracting away some of the innards of ProseMirror.
Your text is fine because you're setting absolute. The particle div/element isn't though, it's using 100% of the height available to it, if you set 100% height to your root element it will work as you're wanting.
I saw this as an article more about leaving Scribe but that‚Äôs definitely a good point, perhaps a few lines on why we chose ProseMjrror would have been worthwhile too. For us there were two solid reasons that ProseMirror was the right choice. The first being that we didn‚Äôt want our text editor to be tied to React and also that we _did_ want the low level capabilities that Scribe had previously provided. Still, there are other alternatives like CKEditor, but if I‚Äôm honest I‚Äôd say the documentation of ProseMirror is really impressive, plus the simple fact that the New York Times had migrated to it and found that it suited their needs within a newsroom was definitely a big draw. Hope that sheds a bit more light!
jQuery cheat sheet. it helpful to rewind jquery functions. https://oscarotero.com/jquery/
 Wanted to see if I can make the layout with my current skills. One element after another, I made it. Then used React to fully make it interactive. 
Thank you! Starred and installed straight away! 
Note that we don't plan to spend much time on implementing other install targets this year. At least for now this goal is mostly about making sure that we design our engine well enough that this kind of thing becomes possible later on without needing radical changes. 
Thanks for your answer. I'll will check d3.js. My objective is obtain the wind speed making click in the map. The lines in the map are wind speed isolines.
Way to go! Thank you!
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Great work! Congratulations
oops forgot to add a license. good bot
You need to set up a server using Django. I‚Äôm not familiar with python, but I use express (nodejs). Then you make an Ajax call from your front end and pass whatever information you want to send to your server. In the server you create logic that handles requests that request and you‚Äôre off to the races 
Using JS reduce() method you can return an object containing the number of times the value you pass appears const array = ["x","o","x","o"] const objectResult = array.reduce((result: any, item, i) =&gt; { if (item === 'x') { result.count++; // Adds to count everytime x appears result.positions.push(i); // Adds index in array (position) everytime x appears in array } return result }, { count: 0, positions: []}) console.log(objectResult); // { count: 2, positions: \[ 0, 2 \] }
I don‚Äôt understand tbh...If you know javascript and you‚Äôve used rails - why is there a disconnect? You‚Äôre doing the same thing you would be - build a front end build a server / pass data from the front end to the server with Ajax calls. 
yet another js tool named x-ray :D
I like Flow :( 
[https://pastebin.com/CdRpVTCG](https://pastebin.com/CdRpVTCG) &amp;#x200B; This is a modifyed code of ([https://github.com/imlinus/lily/blob/master/packages/cli/index.js](https://github.com/imlinus/lily/blob/master/packages/cli/index.js)) which works nicely for me &amp;#x200B; Cheers
is this github v3 api? i was asking specifically about v4 api :)
To be honest, I think React _leaks a lot_. But since I know it's very popular around here, I'll withhold my opinion.
Buzzfeed News is surprisingly great though, separate from Buzzfeed itself. They've been finalists for Pulitzer Prizes the last two years.
My NativeScript IDE app, [NS:IDE](https://github.com/shirakaba/nside), allows you to write JS to access native APIs. Here, I demo a JS code snippet that can be used to toggle the iPhone torch. Here's that JS code snippet: var device = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo); device.lockForConfiguration(); device.torchMode == AVCaptureTorchMode.On ? device.torchMode = http://AVCaptureTorchMode.Off : device.setTorchModeOnWithLevelError(1.0); device.unlockForConfiguration(); Here's the equivalent [Swift snippet](https://stackoverflow.com/a/27334447/5951226) that I based it on (note that I've removed all safety checks for brevity): let device = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo) if (device.hasTorch) { do { try device.lockForConfiguration() if (device.torchMode == AVCaptureTorchMode.On) { device.torchMode = AVCaptureTorchMode.Off } else { do { try device.setTorchModeOnWithLevel(1.0) } catch { print(error) } } device.unlockForConfiguration() } catch { print(error) } } The JS is actually based on the Objective C interfaces, so sometimes Swift is a bad starting point, but in this case, it was perfectly analogous.
Very nice work, I would add favicon as the cherry on top :)
You may compare the file size with angular ivy as well. But ivy isn't enabled by default as of right now.
Brilliant using it right now :)
No he is correct. A breaking change in a code library means just that, the code using the library has to be refactored. For example because a function that used to be part of its API was deprecated, parameters changed, etc. But he's wrong too - it isn't an API change of the code, just of the type-tooling on top. Obviously TypeScript can use be used for React dev. even now when it isn't "written in TS".
?? When you shift+ctrl+c (inspect element, mouse hover mode) the coloured bars on the hovered element represent padding and margins, yellow and purple (I don't remember which is which) I'm not bashing the use of external thingies, but that's a functionality you already have in most (if not all) developer tools that comes with the browser
Shhhhh
You are confused 
I use Git Bash from [https://gitforwindows.org/](https://gitforwindows.org/)
This extension does that, but for all elements on the page, rather than just the one you're hovered over.
Fantastic. Love it. Sharing it with my elder son who is studying chemistry and the periodic table currently. Thanks a ton.
Thanks, please also show him this cool song if haven't: [https://www.youtube.com/watch?v=rz4Dd1I\_fX0](https://www.youtube.com/watch?v=rz4Dd1I_fX0) 
Hi, I can see that you want to use WebComponents as a wrapper for framework - Angular or Stencil (yes, Stencil have it's own parts that make it, as I understand, another library). IMHO it's a good choice. &amp;#x200B; I use on production the same approach with Vue - components written in this framework are wrapped with [https://github.com/karol-f/vue-custom-element](https://github.com/karol-f/vue-custom-element) (disclaimer - I'm the author). It's really neat approach for building e.g. chats or other apps/components that can live in other apps. Also for migration from some legacy (e.g. jQuery) to new framework. &amp;#x200B; If you will have specyfic questions feel free to ask it. &amp;#x200B;
Hahaha well you see not being Jewish I‚Äôm not sure I should be using their resources. Sorry auto correct.
As I said, there doesn‚Äôt seem to be much convention, every tutorial I‚Äôve looked at does things differently it‚Äôs hard to determine best practices from that. 
He‚Äôs really not confused. How would you propose Facebook incrementally change typesystems in a way that doesn‚Äôt break typings across dependencies? Would you suggest that they maintain both flow types and typescript definitions so that their libraries remain backwards compatible? There‚Äôs no way they‚Äôd do that considering the amount of effort involved and the fact that some code would need to be rewritten to play nice with typescript. I would definitely consider it a breaking change if the library I‚Äôm consuming all of a sudden stopped exporting it‚Äôs types.
So i've been playing with it on the techno gauntlet, was loads of fun but the bpm has just slowed right down and it still says 108bpm.. ? Think I found a bug, here is the link I was playing with - [https://openmusic.gallery/play/1328](https://openmusic.gallery/play/1328)
Probable memory leak! cannot use the page or close the tab, great app though
Turned out super well! I might encourage you to focus on its responsiveness ‚Äì it's rather unreadable at small resolutions. Maybe move the element descriptions above the table at mobile? Additionally, I'd consider adding a max-width to the wrapper. It can scale up infinitely right now which has drawbacks. Also the description for helium causes some spacing to appear in your grid. Have a feeling the description summary is a little longer than intended.
I guess you have 4 functions to trigger every tooltip separatedly. So just make another function to call each of them at the same time and call this one on hover every chart.
As fizzy_tom clarified, I'm talking about seeing the outlines for all of the elements, not just the one you're selecting. Cheers!
In React you could propagate an event in your state (may it be with Redux or from whatever place in your React app) that would update the props of your components something like: &lt;Component1 isHovered={state.isHovered} /&gt; &lt;Component2 isHovered={state.isHovered} /&gt; &lt;Component3 isHovered={state.isHovered} /&gt; &lt;Component4 isHovered={state.isHovered} /&gt; What mechanism the `isHovered` prop triggers is up to you: adding a class to your tooltip to make it visible or rendering if the prop is true. In a more classic javascript way, you'd have to have an event listener which would then update your tooltips: yourElement.addEventListener('mouseenter', function () { const tooltipElements = document.getElementsByClassName('tooltip') //or whatever is targetting them tooltipElements.classList.add('is-visible); }) you'd need another one to remove the class on `mouseleave` event.
Very nice.
I totally get it, and good job OP, but a useful tip is to scan your cursor up and down the html in chrome and watch the dom highlighting. Not quite the same as OPs tool but it‚Äôs worked for me very consistently in exposing which element is not right.
Proxy is possible, but only supported by modern browsers and not possible to polyfill which makes it a less feasible solution. But you can set up a proxy to delegate functionality this way - which is effectively what prototypes are doing automatically right now. If a property reference isn't found on an instance, the prototype chain is checked. Your proxy would effectively be doing the same thing. It just means extra work on your end to do it. Here's an example: https://github.com/fasttime/proxymi
Interesting little project! You should add in keyboard support!
 Array.filter(z =&gt; z === 'x').length &amp;#x200B;
What is wrong with your computer's font rendering? Everything is aliased, how do you stand that?
Trying to understand why this would be helpful, I guess I am too stuck on my personal git process, it seems unnecessary.
Thanks for this post that sounds interesting
Don't mind the negative comments. This is indeed a useful tool. I have been exactly where you where, screwing up some bootstrap theme and having to inspect all the elements is a pain. This should help with that.
Hmm... Nah
Very nice. The next step is to get rid of the double borders ;)
Hi Are you using Stencil to build components and using them inside Vue App?
Good point haha
Looks nice. One thing though- when Helium is selected there is a gap between the second and third lines.
`const` applies to the variable, not its value. That means the error would only occur when you try to change the variable, assigning its value to something other than its original value. const slides = document.getElementsByClassName('slides'); slides = 3; // Error Changing the class of the element `slides` referred to does not change the `slides` variable. It still points to that same element, even though the class of that element has changed. Having it so that a value's properties can't be changed is known as being _immutable_. `const` does not cause values of the variable to be immutable; it only prevents you from reassigning the variable to something else. Immutability (to an extent) can be achieved in JavaScript using [Object.freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze). Freezing an object prevents its properties from being changed. It doesn't work in the element case, however, since that's a more complicated API. But for basic objects it does the job. let obj = { one: 1 }; Object.freeze(obj); obj.one = 2; // does not work (Error in strict)
No, the error comes at runtime in the console, for example, if you have : ``` const x = 3; x = 5 ``` You would get an error in the console, for example, if u areusing chrome, u can ctrl+shift+i for opening the dev tools
But... why?
Thanks! This looks promising! Much appreciated.
and Xenon too
No it would not show an error. Const just means that the variable name can never be reassigned. That is to mean, the variable always points to the same underlying data. It‚Äôs is perfectly fine to change the underlying data (if it‚Äôs a reference type), but from a readers perspective, it‚Äôs helpful to know that the variable name will always refer to the same thing. For example, if you were being really sloppy, you might use the ‚Äúslides‚Äù variable name for other things that are completely unrelated: ‚Äúslides = []‚Äù, ‚Äúslides = {}‚Äù, or ‚Äúslides = new Something()‚Äù. This is obviously really confusing. By using const, you‚Äôre letting the reader know from the beginning that they don‚Äôt have to worry about reassignments. You may even use slides for something related: ‚Äúslides = document.getElementsByClassName(‚Äòother-slides')‚Äù. In this case, you‚Äôre still honoring the name of the variable by assigning it something that makes sense for the name of slides, but now your reader has the extra cognitive load of paying attention to when the variable points to something new. This is why you only use ‚Äúlet‚Äù when you absolutely need to reassign something. Let is useful for a counter variable, or traversing something like a linked list and needing to reassign the current node on every iteration. Hope that makes sense. Just woke up and wrote that on mobile.
Actually most of the noble gases
Could you please expand on the playing with fire part?
VS Code and Webstorm are popular ones where I work.
Ok thanks
Looks nice, but bootstrapping an entire react app for this seems like overkill
I used to use Atom but switched to VSCode and have been enjoying it.
Well "best practices" has always been a cringy misnomer for me, up there with "synergies". Ruby was very opinionated, JS is full of options. It would be comparable to building a car with Lego vs nuts and bolts (or use C++ if you need a welder, or use rust if you don't care about finding a job). There is always a bigger and smaller context to consider. Welcome to a slightly larger world of programming :) Most of the apps I work on these days don't have a large user base, and I've found I don't need a completely separate database (just a js object backed by json files), or even more than one processor. And queries are just normal programmic traversing over arrays, thus for these there isn't much reason to worry about asynchronous issues. Though I do put more effort into security (including at the linux level) than most. And our operational costs are dirt cheap. We aren't all google. And we do have some "big data" to contend with, but I've found that even a random access file can smoke a database connection and assorted plumbing in terms of performance there with far less resources and maintenance, depending on the nature of the data. IIRC google dropped the whole database paradigm for their search engine long ago. The thing about "software engineering", is like any engineering, you soon realize that everything is about compromise. There isn't any panacea. I.e. optimizing for one thing comes at a cost somewhere else. Be it performance, resources/costs, or turn around time, or quality, or being able to hire cheaper programmers or an infinite number of other attributes. There really isn't a one size fits all best practice. If I were king, I'd say that there really are only a few "best practices". 1. Test your own code, don't just push shit out the door. 2. Test your assumptions (i.e. with timings and profiling). 3. Try to understand the environment, both "upstream" and "downstream", from data sources to users. 4. know the difference between Lego and arc welding and atom smashing. 
Check out Wes Bos's Learn Node: [https://learnnode.com/](https://learnnode.com/) 
Man, at first, when looking at the blogpost, I was unsure about this whole Houdini stuff. But then I applied the Chrome settings needed for all those CodeSandbox mumbo-jumbo to work, restarted the browser and... Geez, the examples look pretty awesome. =O I wonder if it'll become a web development standard.
This implementation seems a little broken though. It fully disables any functionality on the site's I'm testing it on. I've rewritten a version that works properly (at least on my end). In case anyone finds it useful: javascript: ( function () { var xrayElm = document.getElementById('xray'); if(xrayElm) { xrayElm.parentNode.removeChild(xrayElm); } else { var style = document.createElement('style'); style.setAttribute('id', 'xray'); style.innerHTML = '\*{outline:solid red 1px !important;}'; document.body.appendChild(style); } } )(); Note: I removed the styles to make the text green and remove backgrounds because I didn't find that part useful, but go ahead and edit the CSS however you see fit.
Very nice!
Webstorm is pretty cool, but I think VScode is the way to go nowadays. Free, great debugging, lots of useful (and not so useful) extensions. 
It is like using the in editor terminal. I tried but at the end, I cant
array methods `array.reduce` or `array.map + array.filter` can accomplish this. `const getIndexes = (src, term) =&gt; src.reduce( (acc, curr, idx) =&gt; { if (term === curr) acc.push(idx); return acc }, [] );` `const getIndexes = (src, term) =&gt; src.map( (val, idx) =&gt; { return val === term ? idx: null } ).filter(i =&gt; ( i !== null));` &amp;#x200B; `const infos = getIndexes(["x","o","x","o"], 'x');` `console.log("indexes", infos) // indexes [0, 2]` `console.log("count", infos.length) // count 2`
yo
VS Code
everyone is saying vs code. if you don't care about vs code gathering any data they want and sending it back to microsoft go for it. there is even a clause in the TOU saying they can collect data from anyone that uses any software you write in that IDE. either way you should read the privacy policy first. it really is a great ide but i don't use it myself because of the privacy policy. If you want something simple, free (not just a free trial) and full featured, netbeans is great - it's now being maintained by the same people who maintain the worlds most popular http server: apache.
you can only disable some of the telemetry, there are some things you just have to live with - including all the third party software that it's bundled with.
The only thing I can think of is maybe adding a space between the "..." and "Source"? Aside from that, it looks great!
It's missing too many features compared to the console and the proximity of the development tools in the browser to the actual application makes more sense.
vim. For any language.
I prefer to debug in the environment I'm developing FOR (the browser), not the environment I'm developing IN (the editor). A linter and basic intellisense is all I want in the editor for debugging.
I'll take a look.
No, I'm creating Vue components and wrap them as Web Components's Custom Elements using vue-custom-element 
I didn't dig into the code at all so I can't comment on that, but I do want to mention what a great project idea it is. There are enough "moving pieces" and data to make it interesting and non-trivial, but it's a simple enough concept that it is fully self contained and fairly universally grasped in a short amount of time. I might take it upon myself to do something similar. Thanks for the inspiration! 
Perhaps in a practical sense, but seems to me it was more of an exercise for OP to stretch coding legs a bit. Don't you remember back in the day when we'd load up the entirety of jQuery just so we had simplified HTTP requests? ü§£
Are the Web Components being used in Vue App or Vanilla JS App? Where is the Web Component being stored? For e.g. if some app wants to use the Component how will it include it? Are you passing any data between the Component and the App where it is running?
Hi /u/Ahhh_Dolan, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/is2pidguy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/sunps, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
I made a really basic virtual pet using JS and nodejs. [https://github.com/dcap0/virtualpet](https://github.com/dcap0/virtualpet) &amp;#x200B; Let me know what you think!
Hi /u/cowboykev11, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/StrikingLifeguard, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/AbdAllah_Mohamed, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/yoloindustries, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/merdianii, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/CalmJiad, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
&gt; The first being that we didn‚Äôt want our text editor to be tied to React Heh I'm guessing you must using Svelte, eh? :)
Hi /u/spybraek, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Ok, thanks
Hi /u/chrislowis, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/TravisFantina, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/0range_ball, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I found TipTap a couple of months after having started development with Slate. I don't think it would have fit my needs, but I had I found it earlier I would have given it a try.
Why you don't move the post into other sub but remove it and people who will search in future won't see the answers ?
I recently switched from Atom to VSCode and haven't looked back. I tried VSCode a few years ago but stuck with Atom until some features got added to VSCode that I needed. I knew eventually I'd switch over but didn't know when. The features I needed in VSCode are now there (such as keeping split panes present even when no files are open). Kudos to Microsoft on this one. It's a gorgeous bit of software and perfect use of Electron. Even objective Mac and Linux users are giving Microsoft credit for a job well done.
Posts can't be moved.
I was about to say, add the current element as the favicon, though it gets messy for x-browser last time I checked.
How did you get the elemental data to display on click? Did you have an API or just typed everything out? Either way, very cool! Do you have a link to repo?
Thanks. BTW, I have read that some thing that multiple inheritance is a bad practice, it is a mess, and it should not be done and is actually avoidable by using other approaches like compositing, for example. People advocating to get rid of not just inheritance, but also of multiple inheritance. What do you make of this opinion? Do we really need multiple inheritance? Is it actually a "beautiful mind" self-deceptions that some programmers fall into rather than an actual safe-proof practical tool?
Ya, ever worked with a poorly designed web app with thousands of nonsensical html attributes and hierarchy that crowds up the developer pane? i can scroll a max of two or three elements, but going between page sections is impossible
It's not made to replace git, it's made to mimic source control flow to manage text content (since source code is, well, text content).
What's wrong about the React favicon? It looks just like an atom, fits nicely!
After building the initial structure and 4-5 elements down, I thought "Man, now I have to code every element?" fortunately there was a JSON which I pragmatically filled in.
I have plans to expand it, so using React to make the interactive data.
No sale. &amp;#x200B;
Sending you one now. :)
I hope you like it! There are some really amazing people here. Sending you a link in your DM's now.
I love jquery. I know I can acomplish everything I need without it but the interface and simplicity of the commands I can do with jquery is the primary reason for me to use it. When development time is money jquery is like working with an automatic transmission while raw JS is like a manual. I'm building a SPA framework that uses jQuery for its component model and in my humble opinion it outclasses angular and react for ease of development. You can teach it to anyone in a day and it solves almost every problem I have.
Use css position: fixed
I read more into how it was used for the poets project and I think I see how much more is possible, pretty neat.
The way of how I use it is to keep track of the changes which I'm making in Poet (https://poet.codes). Because at the end everything is just a string I can track what I'm doing over time following Git concepts.
This is actually pretty useful! Great work!
It made a lot more sense to me when I started looking at that site, very cool, thanks!
Do you need multiple inheritance? No. Is it useful? It can be. JavaScript has gotten by without it just fine. And people can use Proxy to emulate it now if they want (in modern environments). Composition works too, but generally takes more effort - as we've been discussing. Its harder to merge the functionality of two objects than it is to just say MyObject extends SomeOtherObject and get all of the SomeOtherObject functionality for free. The trouble with inheritance is that it can lead to messy dependency chains. I'm trying to think of a good example of this, but basically if you need the functionality of something like a banana peel for your new vegetable object, you might want to inherit from banana. But by inheriting from banana, you're also inheriting from fruit because banana extends fruit, and now suddenly your vegetable is a fruit. An if you're inheriting from banana, does that mean, without multiple inheritance, you can't extend the base vegetable type? Composition is a way to isolate functionality in standalone, composable objects. Then, the peel behavior, can be a peel object, and any fruit or vegetable can compose a peel rather than having to inherit from it. It's a much more granular way to get a peel rather than having to include a whole kitchen when all you want is the kitchen sink. There are also traits and mixins which do similar things. Right now [mixins in JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Mix-ins) are typically handled using functions that inject a new layer in the prototype chain with the functionality you're looking to include. I think traits are a little more abstract in their definition, but are generally seen as mixins without state that can also require an interface exist. Other languages support them directly, but JavaScript doesn't (and technically JS doesn't support mixins either, but MDN does call them out, and there is a [stage 1 proposal for mixins](https://github.com/justinfagnani/proposal-mixins) for the language spec). Anyway, the idea is usually, smaller is better. Use only what you need. Inheritance does too much. But when it comes down to it, inheritance generally makes things easier. You just have to be careful when you start digging yourself in a hole depending on it too much and creating inheritance trees that become unmanageable. 
It'd be nice to set breakpoints in the editor though.
This looks like the perfect time for you to learn React. LITERALLY the main tutorial on their website shows how to make a tic tac toe game. https://reactjs.org/tutorial/tutorial.html 
Hate to be *that* guy, but I found a bug that increases margins when helium is clicked open ([i.imgur.com/9SEOLXi.png](https://i.imgur.com/9SEOLXi.png)) and its description is taking more than 3 lines when viewing on 1920x1200px MBP. Perhaps limit the char count? All in all, very nice work! 
I think it's pretty nice! I have one feature request: Add anchors to the elements for navigation so I can use vimium :P
I remember that all too well, just trying to keep people honest about using the right tools for the job. Obviously this is a learning exercise like you said, but let's not ignore that many devs treat react like the only way to have a dynamic UI
P5js and The Coding Train series finally got me over the hump, and helped me enjoy programming. Creating visual art with code gave somewhat instant gratification and made me enthusiastic to code the next thing. You also get something you can show off in the end. This path may not necessarily give the strongest foundation, but the early success will build a some inertia to direct at the less exciting details as needed.
Thanks! Can you link to any clean simple examples or beginner tutorials?
Thank you so much. I will start reading and getting myself acquainted with this immediately. It has been a question in almost EVERY interview so far and I need to get well versed in at least speaking security.
I can‚Äôt say I have
Nice article. Aligns with cyclomatic complexity.
When you're importing from local files, convention is to `import default { someConstant } from './constants';` 
Web Components can be used in any framework - Vue, Angular, React, Vanilla js - browser will detect them and init it's hooks. If someone want to include them, it's enough to just include JS file (that has registration). After that they will auto init when browser will detect them in html/DOM. Yes, you can pass simple data using html tags arguments (&lt;my-component numer="1" &gt;) or using JS props (document.querySelector('my-component').number = 1. You can also use events and slots and all imported packages like in regular components. Regards 
/* and */ are not allowed in JSON. It does not support any comments. You should remove them from your JSON.
Noted. I did that coz if I remove em I get. 1 Error: &gt; **author: A value for the** ***author*** **field is required.** 2 Warnings: &gt;**The** *aggregateRating* **property inside a** *Review***object applies to the review itself, as a creative work. Did you mean to use** *reviewRating***instead?** &gt; &gt; **aggregateRating: The** ***aggregateRating*** **field is recommended. Please provide a value if available.** So... am still trying to fix that :(
I have to pop the dev console to a new window to be productive haha it blows
I'm not exactly sure but it should look something like this. `&lt;script type="application/ld+json"&gt;` `{` `"@context": "`[`http://schema.org/`](http://schema.org/)`",` `"@type": "Product",` `"@id": "https:\/\/www.mywebsite.com\/products\/title-of-product",` `"name": "name of the product",` `"review": {` `"@type": "Review",` `"reviewRating": {` `"@type": "Rating",` `"ratingValue": "4.8"` `},` `"aggregateRating": {` `"@type": "AggregateRating",` `"ratingValue": "4.8",` `"reviewCount": "19"` `}` `},` `"url": "https:\/\/www.mywebsite.com\/products\/title-of-product","image": [` `"`[`https://www.gstatic.com/webp/gallery3/1.png`](https://www.gstatic.com/webp/gallery3/1.png)`"` `],"description": "This is the best product in the world bla bla bla",` `"sku": "2019-roseno1",` `"brand": {` `"@type": "Thing",` `"name": "My Brand"` `},` `"offers": [{` `"@type" : "Offer","sku": "2019-roseno1","availability" : "`[`http://schema.org/InStock`](http://schema.org/InStock)`",` `"price" : "90.9",` `"priceValidUntil": "2020-01-01",` `"priceCurrency" : "USD",` `"itemCondition" : "`[`http://schema.org/NewCondition`](http://schema.org/NewCondition)`",` `"url" : "`[`https://www.mywebsite.com/products/title-of-product?variant=2019-roseno1`](https://www.mywebsite.com/products/title-of-product?variant=2019-roseno1)`"` `},` `{` `"@type" : "Offer","sku": "2019-roseno2","availability" : "`[`http://schema.org/InStock`](http://schema.org/InStock)`",` `"price" : "99.9",` `"priceValidUntil": "2020-01-01",` `"priceCurrency" : "USD",` `"itemCondition" : "`[`http://schema.org/NewCondition`](http://schema.org/NewCondition)`",` `"url" : "`[`https://www.mywebsite.com/products/title-of-product?variant=2019-roseno2`](https://www.mywebsite.com/products/title-of-product?variant=2019-roseno2)`"` `}` `]` `}` `&lt;/script&gt;`
I'm just reading these errors - put an author field inside the review, and the aggregate rating should be outside the review.
Ah yes, I understand where you're coming from now. I agree. Especially with as trendy as JS frameworks are these days, it makes sense to have that voice of reason reminding us all that tools are just tools and should be considered for use within the context of a project's scope. 
Should be import default, { someConstant } from '...' 
can u try naming the repository as \`martin0rszulik.github.io\` and after few minutes, try visiting \`martin0rszulik.github.io\`
You‚Äôre confused too. 
Because noble gases don't React üòä
ain't working for me. can you add the line attached with the code please?
I can when I get off work. I can't access codeshare at work and I don't have my personal machine handy right now.
More than okay mate. Finish all of your stuff first. Much appreciated! ;)
Well Draft.js is easy. No Mobile support, 2019.
Not even half. 
if the browser window is too small it will move up and down when the arrow keys are pressed, can be distracting while trying to play.
hi r/javascript. i'm an incoming tc39 co-chair for 2019, thought i'd introduce myself. feel free to tell me how great you think the committee is. üò¨ really though, talk to me (here or [@gesa](https://twitter.com/gesa) on twitter) about what we're doing great and what we could be doing better. i love you all.
You can use the debugger command, but you have to remember to take it out later.
Looks great! Not sure "pure HTML" is correct since you (obviously) used Javascript.
I am looking forward to this release because it has the fix for the \`console.log()\` broken output. But, I am also on CRA... so dependency waiting initiated.
is the lag intentional when you pick up a fruit?
Get out ü§£
You could try using d3.js for the ui.
I see you too are trying to play on the work computer... 
&gt;is the lag intentional when you pick up a fruit? Yes, it is. Game is not adopted for mobile because it requires keyboard.
What‚Äôs that about console.log? They fixed the one that swallowed log messages when in watch mode?
&gt;pure HTML pure HTML means there is no canvas) all cells are DIVs
there is a "splash effect" on fruit-eat - change shadow style of main game container
replied to the wrong person... if you meant to reply to me, i am playing with a keyboard. would scale the game space to fit into the viewport so that it page doesnt shift with keystrokes. otherwise it looks really nice and plays like i expected!
brother?
Yup... I have been watching that [thread](https://github.com/facebook/jest/issues/2441) and it was fixed in the "next" release which is now officially 24.
I have never seen an issue with default imports. I have heard people making cases against them, but they always seemed really weak.
After designing, the fun part begins! What I'm trying to achieve here is a draggable slider with content that displays according to the title. What I have so far is a title wrapper and description wrapper, but I don't even know how to implement swiping. Any thought?
Check out Fabric.js. It's a library that abstracts over HTML Canvas to give you more flexibility and ease of use. &amp;#x200B; Here's an example that shows how to select objects, or add an object to the canvas: [http://fabricjs.com/manage-selection](http://fabricjs.com/manage-selection). &amp;#x200B; You could use canvas objects as nodes and edges, like this stick figure example: [http://fabricjs.com/stickman](http://fabricjs.com/stickman). &amp;#x200B; Best of luck!
\# is really awful - my eyes are hurting
Desktop developer, but could you get position of cursor when button is clicked and do some math to determine direction of "swipe" ?
That makes me so happy! That vanishing console log was driving me nuts.
Good idea, but how could I determine which is the current title? Or at least make them snap?
I like chrome dev tools because of their amazing network requests tab.
Nay, just another lost soul trying to discreetly waste time.
Ah, but the canvas element is part of html.
Agreed!! TDD without easy debugging in --watch was painful. Well, actually any kind of \*T\* is hard without it.
What type of data structure are these stored in now? Say it was something like an array you could increment the index or decrease to keep track of which title is displaying. Sorry I thought you just meant the UI bit initially. Does this help?
1.25 hrs left for me, hang in there! weekend's almost here
Very nice.
Cheers to that, have a good one!
Actual changelog: https://github.com/facebook/jest/blob/v24.0.0/CHANGELOG.md
Just put both button elements above your &lt;p&gt; element. Like this: &lt;button onclick="fine()"&gt;Click me!&lt;/button&gt; &lt;button onclick="myFunction()"&gt;Reload page&lt;/button&gt; &lt;p id="demo"&gt;&lt;/p&gt; &amp;#x200B;
sometimes you just think too much. thanks. But if I still want an element blocked that won't move, what's the solution?
This is a paralax effect. To achieve this, ondrag transform:translateX() the Header divs. Apply a smaller value to the transform:translateX() of the other divs. Do the same for opacity. 
It‚Äôs great for leaving tasks like webpack watch running, you can see straight away if there‚Äôs a problem. Other that that though, yeah no.
`&lt;button onclick="fine()" style="position:fixed;"&gt;Click me!&lt;/button&gt;` This way the button can't move. You can read more about styling [here](https://www.w3schools.com/css/css_howto.asp) and [here](https://www.w3schools.com/css/css_positioning.asp). The above method for adding styles is called "inline styles". I wouldn't use it to add a bunch of styling, but it's fine for small things.
Depends here how you designed it. While dragging them, so you want the items to move the same amount as the xursor does or you want to snap in place only 1 or 2 or them? Let my suggest you a flow, maybe it works foe you: - click on the title. Register the X coordinate of the mouse and follow only the X trajectory of it. - moving 200px left/right moves one element of the slider - the elements(title, description) should animate using a sin or something, so it would provide a better feeling for the user, than a linear animation(not that linear would be bad) This way, every 200px you make horizontally would move the slider. If you want to make the slider into an infinite loop, oh well, there's more work to be made there, especially if you're looking into performance. 
I am not near my machine right now, I've tried the fixed but it didn't work. I'll try again. Thanks for your time, what a nice community.
Yes, this has been very helpful to me as well!
So you would have to combine position:fixed with some coordinates specifying where you want it to stay. For example, `style="position:fixed;top:50px;"` would place the element 50 pixels from the top of the viewport and keep it there. you could also fix it horizontally with either "left" or "right" (but not both). Good luck!
Here ya go [http://jsfiddle.net/nfbqs4xk/1/](http://jsfiddle.net/nfbqs4xk/1/) I put it on jsfiddle because it's easier for me to work with.
You can do all of this by toggling classes and CSS transitions
Thanks! 
I suppose you have some data structure containing the titles and text. Keep an index of the current item in another variable. You will also need a boolean, isDragging, three numbers clickX, clickOffsetX, and originX. Also you should declare a variable to hold an interval callback. Now onClickDown, make sure isDragging is false and mouse is inside target element/area. Set clickOffsetX to the delta X of mouse position relative to the current active element based on the current item index (mouseX - elementX). Set isDragging to true. Set an interval that compares current mouse position to clickX + clickOffsetX. From that you get the targetOffsetX. Get the delta x of targetOffsetX to active element X. Add a percentage of that value to all elements x position. You might have to take deltaTime into consideration to avoid jittering. Also if not isDragging and active element x is over the threshold (originX - element.width / 2 or originX + element.width / 2), increment or decrement active index. And clear the interval. Then onClickUp you set isDragging to false. This is definitely not all, but a good start I think.
I don't think the draggable aspect can be done by just toggling classes, can it?
No, I thought they were just clicking. The draggable part has to be done with some finicky js. 
I bet https://youtu.be/rBSY7BOYRo4 had some useful tips for what you're trying for
I think it‚Äôs just clicking then following it rather than a drag, it‚Äôs not moving at the right speed &amp; at other points it just clicks the title.
My question was more why use JSON schema, rather than why use ajv over other JSON schema alternatives. I like schema validation in general, but never really understood why JSON schema was so popular.
It‚Äôve built things like this before - you‚Äôll want to find a library to handle the swipe gesture (not sure what the best one is nowadays) because mouse input / touch handling is really inconsistent between browsers / platforms. It‚Äôd recommend avoiding it if at all possible, preferring normal clicks to gestures. 
Is there an up-to-date list of companies with members on TC39?
So, I made that comment after looking at it for all but 30 seconds. It looks really solid but: &gt; Blop natively understand nested HTML tags and components. Unlike JSX you are not limited to expressions. You can mix any statement, expressions, and HTML tags within the same function. Now this really throws me off. First reason being "nested HTML tags". I think I understand what you mean but this is such a basic component of markup languages that I'm not sure why you're even mentioning it. To expand on that sentence, "natively understand nested HTML tags and components": what do you mean by components? Natively understands? What? Then I scroll down to the image where I instantly see some completely new DSL (noooooooo). Why not leverage on, the very much established, DOM API like React/JSX does? Oh well. I didn't get much farther than that. It does look really solid and you should be really proud, but I gotta be honest - I don't find it interesting.
I replied OP [here](https://www.reddit.com/r/javascript/comments/aiefln/blop_is_a_language_for_the_web_that_integrates_a/eeyrciw/)
I'll surely have a look. 
Am i the only one that finds firefox requests tab more complete? For example, the last time i checked i couldn't find a way to edit and repeat a request on chrome, and the parameters for each request where difficult to find, whereas in mozilla they had a dedicated tab
You deserve more upvotes. I have but one to give.
i believe we're due to reassess that at the next meeting (which is next week). Consider this a set of assumptions on my part, not some sort of official statement from Ecma. The list I have is as of July 2018. (indented lists indicate wholly owned subsidiaries) Not every company or organization sends a delegate to every meeting. ## Voting Members of ECMA TC39 * AirBnB * Apple * Agoric Systems * Bloomberg * Bocoup * Facebook * GoDaddy * Google * IBM * Imperial College London * Igalia * Indiana University * Inria * Intel * JS Foundation * Meteor Development Group * Microsoft * LinkedIn * GitHub * Moddable Tech, Inc. * Mozilla Foundation * Netflix * npm * PayPal * Braintree * Venmo * Salesforce * Shape Security * Tilde Inc. * Stripe * Turing School of Software &amp; Design * UC Santa Cruz * Yahoo! ## Invited Guests * Ampersand * Babel.js * Kurokawa (Japan National Body) ## Ecma Fellows * Brendan Eich * Alan Wirfs-Brock
At this point and time FF's request tab might be more complete but Chrome has had amazing dev tools including a complete network requests tab for years. Older versions of Firefox are no fun for me to test as no network requests tab so I have to capture network traffic and sift through it.
Here's the general gist built with Swiper.js which makes it pretty easy to manage: [https://jsfiddle.net/rhgy1Lub/24/](https://jsfiddle.net/rhgy1Lub/24/)
Here's my 2cents outside of the actual problem mentioned... whatever you implement it with based on the comments made, make sure to throttle the handlers. Mouse movement tracking is expensive (as is scrolling) so by throttling the handlers you get a more performant browser paint.
Feels very nice, gj!
Awesome! Can I add these kind of bookmarks in Firefox too?
Is it possible to be a member without the backing of a large company or influential group? 
Something like [this](https://codepen.io/thykka/pen/VgexJV), maybe?
nice, if OP just add a variation of the opacity on the mouseDown event it will be a perfect match, very nice lib 
Slick.js is nice
To add to this: - Have a function that calculates and sets all the positions to an absolute % based on `0-&gt;1` range (e.g. .8 sets everything to 80% of the distance to the next step) - Go grab a tweening function that looks good to you, and call `moveStuff(tween(0.72))` - On click, call via animation frames for 1sec or whatnot - On drag call with the X % of the mouse position between two states
[Should I use a carousel?](http://shouldiuseacarousel.com/)
Because Ecma is an international standards body, the short answer is no. e.g. this is a really succinct description of the driving force, from &lt;https://ecma-international.org&gt; &gt; Ecma is driven by industry to meet the needs of industry, generating a healthy competitive landscape based on differentiation of products and services, rather than technology models, generating confidence among vendors and users of new technology. The long answer is cooler though. Ecma isn't just made up of large companies and influential groups. Membership fees are relative to a company's size and revenues (including non-profits, for whom annual fees are waived entirely). You can read more about that on [Ecma's join page](https://www.ecma-international.org/memento/join.htm). Okay but say the organization you work for isn't interested in participating in standards like you are, or maybe you work for yourself. No, there's no crystal clear way to attend meetings as a delegate because as I mentioned before, driven by industry etc etc. Yes that kinda sucks but it doesn't mean there's no way to get involved! I encourage checking out [the spec's CONTRIBUTING doc](https://github.com/tc39/ecma262/blob/master/CONTRIBUTING.md) for all the different things you can be without being a delegate of a member. Just don't forget to check out and sign the [legal agreements](https://github.com/tc39/ecma262/blob/master/CONTRIBUTING.md#required-legal-agreements) ahead of time. 
Awesome! just one thing, Ag (Silver) breaks the clean UI. 
engine262: the javascript engine written in javascript. https://github.com/devsnek/engine262 (from the readme) While helping develop new features for JavaScript, I've found that one of the most useful methods of finding what works and what doesn't is being able to actually run code using the new feature. Babel is fantastic for this, but sometimes features just can't be nicely represented with it. Similarly, implementing a feature in one of the engines is a large undertaking, involving long compile times and annoying bugs with the optimizing compilers. engine262 is a tool to allow JavaScript developers to have a sandbox where new features can be quickly prototyped and explored.
Weird. I change tempo all the time and have never seen that. Is it reproducible? Like, if you tried it again, what happens?
react-spring + react-with-gesture: https://twitter.com/0xca0a/status/1081185260208078849
As carcino said, "pure HTML" means without canvas, so you can use Javascript and also be tagged by "pure html" :P
Someone on Twitter says that Elliott keeps changing the supposed citations for some of his stats claims: https://twitter.com/Hillelogram/status/1084991487702691840
Do you want to do it manually? With react-pose you can achieve an effect like that within a few minutes.
Looks really good. Simple, classic... But interesting version! gj
Materializecss or material-ui if you're using react! 
Yeah ignore the specifics of the syntax, I might have got that wrong, wrote it in a hurry.
Yes. Please. I beg of you. This is some of the most inaccessible UI I've ever seen.
Only if you haven't customised the resolver logic.
nah 
And if you're using custom module resolver logic, expect having to use workaround. Why not namespace your packages with a ~ or something?
Saving this for later
What‚Äôs the rate for sr level?
A lot of the animation could and arguably should be done with CSS. https://hackernoon.com/in-simple-terms-css-vs-javascript-abc9d709399d
Why did you type `callback` as `any`? If you're using TypeScript you should use it properly.
tl;dr: * `undefined` is marking the variable as uninitialized - it is the default value for any variable declared without an explicit value. Note, you can also explicitly assign `undefined` to a variable. * `null` is the absence of a value (but the variable is initialized) There are times where you will want to use one over the other. gRPC protocol is a good example, the `protobuf` format does not allow `null` to be specified as a value. In those cases, you either define a value or set it to `undefined` (which would use the default value for that value's type). In general, I rarely use `undefined`. It's better to use `null` in most cases if you're initializing variables but don't know the value yet. For more info (the ecmascript spec which JS is based off of): [https://www.ecma-international.org/ecma-262/5.1/#sec-8.1](https://www.ecma-international.org/ecma-262/5.1/#sec-8.1) &amp;#x200B; &amp;#x200B;
Pretty neat, actually inspired me to optimize some array code.
if you want a new row for each book you need to create a row for each book in the loop
Hey guys, at work we have a big screen where we display project related stuff. I thought a mini app to lift morale might be more enjoyable thing to display than seeing never ending stream of critical bugs all day. Plus it give us something to rest our eyes on while taking a break - [Stream Jokes](https://www.streamjokes.com/) It automatically rotates jokes and quotes from selected categories including programming. Colleagues quite like it, so maybe it will increase productivity for someone else as well :-). If you have any feedback shoot it through. Cheers
Yep. It's crap on mobile
We're using stencil in production and using the components in angular 6 and react apps. Can't say enough good things about it. 
I may be blind to it because I have been looking or thinking about it for several hours now but the bookList.appendChild is in the loop, or so I thought.
 - adding another statement causes the if statement to not apply to it which is not what you want - omitting extraneous syntax is in general bad; omitting semicolons is especially bad and can lead to errors, and omitting curly braces is bad for the first bullet's reason etc. - always sing curly braces keeps the style consistent when using multi-line if statements - same with semicolons, even if you only do it for if statements it's still weird and inconsistent
He means you need to move your `const row` line into the `forEach` block.
Yea it's amazing how much they are used, scrolling down the page is such a better way to feature content.
I set this link as a Slackbot response at work‚Äîtriggered by ‚Äúrotator‚Äù or ‚Äúcarousel‚Äù‚Äîto make sure armchair UX folks at our agency (you know, Account people) don‚Äôt get any ideas. It‚Äôs been very effective.
Sent an invitation!
The way the pointer starts to lag behind the element being dragged bothers me.
You should probably read rule 4 of this sub reddit. ‚ÄúJavaScript!===java‚Äù
Ahh, see blind. I will give that a shot in a little bit.
I like how my first instinct was to translate this to English 
I'd try to implement it using the transition effect of vuejs as in this example https://vuejs.org/v2/guide/transitions.html
I understand that, but were also in need of JavaScripters. My fault was not putting that in the post and I'll have it updated.
I was just lazy, it was giving me an error while making the module so I set it temporally to any, and forgot to set it right back again, I'll update it
I would use Slick slider by Ken Wheeler
Don't. Horrible UX.
No need to call any carausel. You can create two parental div having title and content. Now on click, you need to animate both div. some thing like this: &lt;div class=title&gt;&lt;div&gt;Title1&lt;/div&gt;&lt;div&gt;Title2&lt;/div&gt;&lt;div&gt;Title3&lt;/div&gt;&lt;/div&gt; &lt;div class=itemcontent&gt;&lt;div&gt;Lorem1&lt;/div&gt;&lt;div&gt;Lorem2&lt;/div&gt;&lt;div&gt;Lorem3&lt;/div&gt;&lt;/div&gt; and on click, you need to animate next div and need to hide slow first div. No need to use any other third party. 
Hi efeozazar, Thanks for your comment! I built this library to make it easy to have react / vue like page transitions on standard sites. This is no way a replacement for React / Vue. Ive actually used Vue CDN in conjunction with this library and it works great! Another reason for using this library would be: Lets say you have a CMS system that generates dynamic pages i.e creates unique URLs for each page and it has frontend editing capabilities. If you were to use React or Vue CLI you would loose ALL the frontend editing features that the CMS provides. You would also have to build your own page renderer as you could not use the rendering features the CMS provides. Also not to mention you would have to host your frontend and backend on different domains or subdomains. All this would add exponential amount of time to your project. So using a library like this will allow you to achieve the same behavior as a React or Vue single page app using an existing CMS system and cut the project time to a fraction of the time. I actually ran into this issue when trying to use a CMS system that I built: [https://github.com/MacdonaldRobinson/FlexDotnetCMS](https://github.com/MacdonaldRobinson/FlexDotnetCMS) Thanks again for your comment! &amp;#x200B;
...what's being shown in the OP *is a form of carousel.* The problems with carousels do not stem from the fact that they are a library, it stems from the poor analytics and metrics from using them.
Ok
it can be tricky to initially set up but its essentially like remote debugging * make sure you have sourcemaps enabled - something like &amp;#8203; require('babel-register')({ sourceMaps: true }); * make sure node is listening to debugger with --inspect flag * the default inspect port is 9229 so expose this port in docker * finally through vscode you should be able to connect to the docker ip on port 9229
Thats a very good explanation indeed. Thanks :)
[removed]
May be you are correct, but if I will be creating this form I will not use any library. Making just that small feature and loading libraries on page is not good for efficiency. But it was just a simple suggestion. Using library may bound you with existing features but in custom code, you can do what you like and can prevent load of unusable components and features.
No one was discussing libraries, but enjoy standing up in that soapbox.
How would you do it without babel-register? I think you could set sourcemaps to true on .babelrc file.
That might be possible, I'm not entirely sure, but you would still be able to connect and step through, it would just be the compiled code
Thank you for this. I guess I was too tired to even comprehend what those errors were saying before I slept. I have moved aggregate outside the review tag.
Thank you for responding. I still received the same errors though. I finally gave up review tag; documentation demanded more integration steps.
Final result (gave up review tag): &lt;script type="application/ld+json"&gt; { "@context": "http://schema.org/", "@type": "Product", "@id": "https:\/\/www.mywebsite.com\/products\/title-of-product", "name": "name of the product", "aggregateRating": { "@type": "AggregateRating", "ratingValue": "4.8", "reviewCount": "19" }, "url": "https:\/\/www.mywebsite.com\/products\/title-of-product","image": [ "https://www.gstatic.com/webp/gallery3/1.png" ],"description": "This is the best product in the world bla bla bla", "sku": "2019-roseno1", "brand": { "@type": "Thing", "name": "My Brand" }, "offers": [{ "@type" : "Offer","sku": "2019-roseno1","availability" : "http://schema.org/InStock", "price" : "90.9", "priceValidUntil": "2020-01-01", "priceCurrency" : "USD", "itemCondition" : "http://schema.org/NewCondition", "url" : "https://www.mywebsite.com/products/title-of-product?variant=2019-roseno1" }, { "@type" : "Offer","sku": "2019-roseno2","availability" : "http://schema.org/InStock", "price" : "99.9", "priceValidUntil": "2020-01-01", "priceCurrency" : "USD", "itemCondition" : "http://schema.org/NewCondition", "url" : "https://www.mywebsite.com/products/title-of-product?variant=2019-roseno2" } ] } &lt;/script&gt; P.S. variables are 'constant' only for demo purposes. My actual site pulls actual value via script. Google would mark your website as spam for delivering constants in these tag values like Review/AggregateReview/ReviewCount etc.
Cheers, happy for you. Still no idea what your problem is but okay.
Nothing is wrong with it üôÇ just another thing you can do with that awesome project of yours 
Just a little piece of advice... Well, two, actually: 1. The word "mentor‚Äù gets thrown around easily and people give it different meanings. Sometimes subtly different, sometimes wildly so. With this in mind, it wouldn't be a bad idea to explain what are your expectations on such a person, what you need from them. 2. It might also be a good idea to introduce yourself a bit more. Particularly, explain a bit more what's your current experience and knowledge, maybe show something you've done even if it's just exercises or whatever. Ah, and as a practical concern, your timezone.
Brilliant stuff! Has me thinking I really need to work on my CSS skills, which are abmysmal. 
I did a similar thing yesterday, just used two swiper (search for it on npm) sliders synced to each other.
Oh sorry if i wasn‚Äôt clear. By mentor i just mean i would want to refer to them and ask for their experience in certain aspects like how they learned or did something , and perhaps maybe ask for judgement / review of my projects as well. I have mentioned that i am a noob - a beginner with limited knowledge in html and css (with small incomplete projects) and as for javascript i‚Äôve only read 1 book ( eloquent js ) and 1 course (jonas‚Äôs course on udemy). Currently learning react (max‚Äôs course on udemy). As for time zones, i don‚Äôt think it would matter that much (but just in case , i live in vietnam )
... a carousel is not a 'library' it's a method of displaying stuff lol Even if you 'create this form' it will be a carousel lmao Also you forgot quotes around your class names... lol
I always assumed the devs knew they sucked but were used anyway for ad placement reasons. 
I want to join please
Javascript is turning into a big complicated C++ style mess. How are you going to deprecate all the old rubbish in there?
Good. That additional description should help :) Also, do check around in other places. I don't really know how good /r/mentors works, but you probably should try posting there too.
SCRIPT-8 is good. This post is bad and you should feel bad.
he he, thanks for correcting me. I also forgot to include HTML tag and other tags, also including js and all things, happy coding
FO :) 
I bet my boss will love that website, as every website we have has at least one carousel haha
The unobtrusive JavaScript framework for server-side web applications, which enables you to create an application ALMOST as functional as those created with React, Vue or Angular with a lot less (almost 80% less) effort. The application will also be light on low end mobiles as it won't have the extra weight of Virtual DOM.
I was adding a lot of filters , using Chrome on Mac, I'll play around today and try Nd reproduce for you
I can't apply it to both of the functions, only the reload function is working when I apply the style... It's what I need, but I can't combine it with both of them. What's the reason? [https://codeshare.io/5RZ1RE](https://codeshare.io/5RZ1RE)
I will be using that. But I;m still curious to know what's the solution.
Google for JavaScript table viewers. Maybe with a sprinkle of the dB or database in there if you get not many results. I got this query plugin (can‚Äôt vouch just an example) https://datatables.net Although if you feel like it it could be a fun think to try and make =]
&gt; As carcino said, "pure HTML" means without canvas The only issue is, pure HTML does **not** mean without canvas. It's a part of the [HTML5 spec](https://www.w3.org/TR/2dcontext/). It's a nice JavaScript project. &amp;#x200B;
To call Stencil a library makes as much sense as calling babel a library. It's a build tool.
You could do it with houdini
Horizontal parallax scroller + opacity change based on X 
&gt; Why not leverage on, the very much established, DOM API like React/JSX does? Because it goes above and beyond what you can do with JSX. It achieve that by integrating the JSX part into a complete language instead of limiting itself to expressions. Being frustrated with the limitation and ugliness of JSX expressions is one the reason blop exist.
Sorry but create react app official already supports typescript 
Don't get me wrong, CRA it's perfect but my only problem with CRA is flexibility and once ejected the hole thing looks like a giant mess. I tried to make something minimum and clean so if anyone wants to dig into config files will not feel overwhelmed, not to mention that the production build size is much smaller that the CRA. 
Thank you!
You can do it all in css with an annimation for active and unactive classes. A click event changes classnames between those. Check out css animations. 
How can one run out in mobile?
 let colorStyle = notOwnedColorStyle; if (isFolderOwnedByUser(userId, folder)) { colorStyle = ownedColorStyle; } else if (graph &amp;&amp; isFolderWriteableByUserAnywhere(userId, folder, graph)) { colorStyle = writableColorStyle; } else if (workflow &amp;&amp; isFolderWriteableByUser(userId, folder, workflow)) { colorStyle = writableColorStyle; } &amp;#x200B;
No
Don't. It's super annoying. 
I know this is obviously a controversial topic, and the fact it comes from Eric Elliot only strengthens the "controversial" part. But I've found this article to be very thoughtful and his analysis of the actual benefits seems to be quite thorough. Some of his observations are spot on: &gt; JavaScript developers will frequently encounter situations which are difficult or impossible to type, but conscientious developers will be interested in doing things right. They‚Äôll spend hours Googling for examples, trying to learn how to type things that TypeScript simply can‚Äôt type properly. This is indeed a problem. And he goes on by proposing a possible solution: &gt; TypeScript could improve on this cost by providing better documentation and discovery of TypeScript‚Äôs current limitations, so developers waste less time Those've been exactly my thoughts as well. Currently typescript is not very friendly towards people who are yet unfamiliar with static typing or towards just those who want to migrate existing large codebases to TS (again, I'm not saying this migration isn't possible, quite the contrary, it is, but typescript docs do not help with this path very much). I also believe that modern text editors are becoming so powerful that they can compete with many typescript features, e.g. autocomplete and guessing the arguments' types by reading the function signature. I really want to see more progress in such tooling.
I just built [Create JavaScript Project](https://create-project.js.org/), a zero-configuration build-tool for JavaScript projects.
I agree with /u/metahivemind that javascript is becoming C++ style mess. It appears that there is no design goal what so ever with javascript.
From docs (https://stenciljs.com/docs/introduction): "Stencil takes features such as Virtual DOM Async rendering (inspired by React Fiber) Reactive data-binding TypeScript JSX" So I see it as simple replacement to Vue, React etc. on top of WC compiler. 
Yeah, but I think it's important to notice that it's not a view library. Stating that does not take away from the fact that it can be used to build UI's on it's own (although not recommended at current state, it's API haven't stablized as of yet and ecosystem is seriously lacking). You may also might be interested to check Rawact. Which turns your react components to web standard compliant WC's as well. It's in development as of current state though. &amp;#x200B;
Right-click the page, then select view source. Copy and paste. Done!
This is just a prototype made in Adobe XD, so not HTML :/
I kid, I kid. Some of these might be helpful https://www.mockplus.com/blog/post/parallax-scrolling-websites I would suggest for desktop browsers at least to use y-scroll. 
Saved!
But building WC components instead of Vue/React is it's only purpose and not stable ecosystem is not an argument. You can't wrap other frameworks components and maintain props, slots etc. You have to use other tools like mentioned Rawact or e.g. https://skatejs.netlify.com/docs/element-react
&lt;marquee&gt;
there are a few games written in javascript on steam ([game dev tycoon](https://store.steampowered.com/app/239820/Game_Dev_Tycoon/) and [screeps](https://store.steampowered.com/app/464350/Screeps/) that come to mind, both use node-webkit, GDT is made in vanilla JS with jquery, while screeps was made in angularJS and recently moved to angular 6/7), so as for there being a career in browser games? yes. However, if you want to be in a big company, it might be a good idea to learn other things like, as you mentioned, c++ (/unreal) and c# (/unity). Now, if you don't care about being in a big or small company, it *can* work, but another thing to note: none of the 2 games I've mentioned were canvas games, so the important part isn't to be good with the canvas api, its to be good at javascript in general, I doubt being good at the canvas api would get you anywhere, and much less with a high paying job. So my advice would be to look into javascript as a whole, and not just the canvas api, and also on the side look into c++ and/or c# to get an idea of what those are like as well as building up your skill, because locking yourself into only one specific part of one language isn't going to do you any good in the long run, its much better to give yourself as many doors as possible and slowly home into what you like the most out of all your options rather than stick to one path and get stuck if you ever want to branch out.
It's purpose is to provide components which are framework agnostic. Think of component libraries. So you don't need to maintain 3+ versions of it. For main stay use in production it doesn't bring any benefit over React for example (or any view library for that matter). Usually company will have unified tech stack. The only use case now I can come up where I work is to provide for partners who integrate our system, our widgets, to make sure they work regardless of what our partners use as their front ends. But for the rest of the UI's, certainly not. For example, give me an equivalent of redux-form in Stencil? There isn't one. And that's approximately 30% of development time. But but the smaller bundle sizes, couple of percents aren't big enough gain. Like you still gonna need to bundle web workers and stuff like that. It's simply not worth it at current state to try to replace something. Neither the "replacement" was it's intended purpose to begin with.
Great...thanks for sharing your input
https://github.com/domcoleman/name-my-colors https://domcoleman.github.io/name-my-colors/ Made this earlier in the week, bulk colour naming app based on http://chir.ag/projects/ntc/ Realised today that I forgot to account for semicolons when importing colours so I'll fix that when I get a chance. Probably some other things that need fixing that I've missed as well
Why did u used React for this kind of app? Nice project btw.
Try using coding and algorithms.
Amazing. I wasvthinking of making something like this but i see yours is already pretty much what i had in mind. Well done
I'd spent some time with Electron &amp; Webpack but found it wasn't easy to set up a nice clean dev environment (especially without a huge boilerplate like [https://github.com/electron-react-boilerplate/electron-react-boilerplate](https://github.com/electron-react-boilerplate/electron-react-boilerplate) or a preconfigured environment like [https://github.com/electron-userland/electron-webpack](https://github.com/electron-userland/electron-webpack)). I built this package to automatically launch and hot reload my Electron app from my existing Webpack config: [https://github.com/ssalbdivad/hot-electron-launcher-plugin](https://github.com/ssalbdivad/hot-electron-launcher-plugin) If anyone else shares this frustration I hope you find it h.e.l.p.ful. If not, feel free to let me know that too :-) Have a nice weekend!
that's a pretty cool opportunity! Thanks for writing about it
If you want someone to review your code, give you pointers or ask question - you are more than welcome to DM with ur repo. :)
Hmm, any scientific papers on that? I tried looking at the abc conjecture, but I am limited by the technology of my time.
If I understand you correctly... // test data var data = { MindNight_91823908123123: { UserId_1: [1293810923098123, "No"], UserId_2: [8273489798723498, "Yes"], UserId_3: [2132348773477878, "Yes"] } }; const searchFor = 8273489798723498; const childObject = data[Object.keys(data).slice(0, 1)]; const matches = Object.keys(childObject).filter( key =&gt; childObject[key][0] === searchFor ); console.dir(matches); // output: // [ 'UserId_2' ] console.dir(matches.length ? matches[0] : null); // output: // 'UserId_2' 
Don‚Äôt. If people actually use your site, you‚Äôre guaranteeing that they‚Äôll hate it the entire time. 
Functions like `ifElse` only really make sense when used as input to other functions - otherwise they are less readable than regular if-else structures. ``` // ifElse definition as before. function colorStyle(userId, folder, graph, workflow) { if (isFolderOwnedByUser(userId, folder)) { return ownedColorStyle; } if (graph) { return graphColorStyle(userId, folder, graph); } return workflowColorStyle(userId, folder, workflow); } function graphColorStyle(userId, folder, graph) { if (isFolderWriteableByUserAnywhere(userId, folder, graph)) { return writeableColorStyle; } } function workflowColorStyle(userId, folder, workflow) { if (isFolderWriteableByUser(userId, folder, workflow)) { return writeableColorStyle; } let writeableColorCheck = ifElse(graph, isFolderWritableByUserAnywhere(userId, folder, graph) let colorStyle = isFolderOwnedByUser(userId, folder) ? ownedColorStyle : graph ? isFolderWriteableByUserAnywhere(userId, folder, graph) : isFolderWritableByUser(userId, folder, workflow)
Is it because they have to scroll/swipe a lot to see what's at the end? I'm not that versed in UX...
Things like `Object(this).keys()[Object(this).keys().length-1]` do not work as it is meant for static states of already defined objects.
 offset = { left: ['left', 'right'].reduce((k)=&gt;bounds[k] - viewPort[k], {}); } Of course, you can clean this up somewhat depending on the rest of the vocabulary in your code.
One of the golden rules of the internet (that gets broken far too often) is: Don't mess with scrolling. &amp;#x200B; First of all, \_if\_ you manage to get it to work fluidly and bug-free in all browsers (you won't) it's still not the experience users are expecting. It's also not accessible to users using assistive devices.
Uh-oh... I'm glad I'm still in the designing process... Thanks for pointing that out!
Just remember: As web designers/developers/engineers/whatever, our job is to first make the thing accessible and usable, and _then_ pretty.
You probably need to show your actual code _and the code for the Error type you've defined_.
If you're interested in some heavier refactoring, you could try using the "strategy" pattern - instead of `graph` or `workflow`, pass a `checkWriteable` function. Something like this: function colorStyle(userId, folder, checkWriteable) { if (isFolderOwnedByUser(userId, folder)) return ownedColorStyle; if (checkWriteable(userId, folder)) return writeableColorStyle; return notOwnedColorStyle; } function graphWriteable(graph) { return (userId, folder) =&gt; isFolderWriteableByUserAnywhere(userId, folder, graph); } function workflowWriteable(workflow) { return (userId, folder) = isFolderWriteableByUser(userId, folder, workflow); } Usage would then look something like this: colorStyle(userId, folder, graphWriteable(graph)); or colorStyle(userId, folder, workflowWriteable(workflow)); The component could accept `checkWriteable` as a prop - and doesn't even have to "know" about graphs or workflows. If you really want to stick with a component that accepts either `graph` or `workflow` and makes a choice by itself, you still can: const strategy = graph ? graphWriteable(graph) : workflowWriteable(workflow); colorStyle(userId, folder, strategy) The names aren't perfect, but I wanted to leave your original names intact and have my additions be distinct to make it clear what's changed.
I'm creating the Moment object simultaneously. When I use the .local() function it does not change away from UTC.
JavaScript in general - definitely. You‚Äôre probably better off seeking out a job as a JavaScript developer at a company that happens to use the Canvas API as opposed to marketing yourself as a ‚ÄúJS Canvas developer‚Äù. In general, companies will want candidates who have experience in a range of frameworks/libraries (think Node, Angular, etc) so it would be good to add things like that to add to your skill set.
Thanks. 1. What would be a real difference between e.g. a single-method-no-properties-class used as a value for a property in your new class in composition approach versus a *trait*? You can pile up however many of properties/methods this way (*bind* might be necessary though), even though it is not called *trait*. Is not it the same thing? 2. I also lately see more people saying that object programming is a bad practice since it fundamentally makes programs' logic less readable and hence the process more prone to errors. They say that the programmers just went into decades-long craze over objects once they were invented even though besides being more error-prone they also make software way bigger and slower than it should (compiled code's size and speed per actually useful algorithmic step is a disaster in object-oriented languages). They say that the functional programming is the way to go. What do you think of this? 3. If possible, can you please check this question? https://www.reddit.com/r/javascript/comments/ak0204/can_we_solve_an_annoying_object_definition_in_a/
So this will automatically create the child object? Cool, thanks, I will look into it. Can it be done with *forEach* BTW?
You mean like: xcopy c:\\project-template c:\\new-project ?
Wow... that's some incredibly poor UX... 
Thanks :)
I like Authom: https://github.com/jed/authom It hasn't been updated in a couple years, but it still works great, and unlike Passport and such you can use it directly in Node, not just as middleware.
`forEach` is not good because it doesn't return anything. That thing above is using [reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) to return an object. In any case, it remains to be seen how much practical this actually is over your original code. Frankly, I would not have much of a problem with your original code unless there's a lot of it and/or there's a lot of repetition. And, again, it may become more practical if you already have the vocabulary in place in your code.
Here is a good mentor: [www.google.com](https://www.google.com) 
I work for a company where we make web-based educational sort of games using either Canvas or Vanila HTML5 while waiting for either Unity or WebGL to have better cross-browser support. Its risky, but scope is there.
Hi /u/Neker, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/kallebo1337, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/pwspk, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/JHFGloria, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/_Makky_, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/shahab-reddit, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/osterv, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/haleygod, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/ThatDevSpecOpsHipGuy, rant elsewhere please.
Hi /u/BinaryMoon, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Thanks for your understanding.
Hi /u/RRDDSS, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/d_baxi, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Slayzur, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Loorens27, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
What about experience? 
Thanks, but r/LearnJavascript is for cases when people do not know the documentation. Since there is no way in JS to reference an object property name within itself while it being a literal, the question should rather belong to r/Javascript.
I'm not sure what kind of answer you're looking for, since you already know it's impossible to solve like you want. Feel free to post your [TC39 proposal](https://github.com/tc39/proposals), or a pure-javascript implementation, but merely ranting/complaining doesn't belong here.
Maybe you will never be able to do it...
Apologies.
Rewriting an app that already works is not a waste of time if you're learning something new. Also, there's something to be said for practicing code refactoring. I do this with side projects all the time. On a side note, I'm a huge fan of 100% client side apps, so good on you üôÇ
In your models' definition, before returning `Partner`/`Contract` make the association: Partner.associate = function(models) { Partner.hasMany(models.Contract); }; Contract.associate = function(models) { // associate }; PS Sequelize is shit. 
Thanks. üòÅ I'm becoming a bigger and bigger fan of 100% client side apps too! I'm thinking about building new functionality with React and then slowly swapping things over. It's kind of built with components currently so hopefully it won't be too difficult to do it in stages. 
I finished my first big project this week! It converts text into sprite PNGs from the original Rayman game so that you can make bodies of text using the font found in the game! [https://raymantyper.com/](https://raymantyper.com/)
saving *this* for later
I've been playing with A\* path finding, trying to get back into some coding after too much web 'dev' - [http://mjp.co/js/astar/](http://mjp.co/js/astar/)
No, thanks for your understanding moron
I currently work on something similiar to this and I can tell you: **Messing with scrollbars is hell.** First even to get it work in all browsers, even only in the latest versions is already hard enough. Then in my case we don't use any frameworks/libraries etc for this project so no jQuery and so on that would actually make this a bit easier. Basically my whole code is just some calculation with the scrollbar (not the window scrollbar but the scrollbar of a div with overflow) and a bunch of events. Don't let me talk about responsiveness. You don't want to hear that :o
From [https://martinfowler.com/books/refactoring.html](https://martinfowler.com/books/refactoring.html) Example Suppose I‚Äôm calculating the charge for something that has separate rates for winter and summer: \`\`\` if (!aDate.isBefore(plan.summerStart) &amp;&amp; !aDate.isAfter(plan.summerEnd)) charge = quantity \* plan.summerRate; else charge = quantity \* plan.regularRate + plan.regularServiceCharge; \`\`\` I extract the condition into its own function. \`\`\` if (summer()) charge = quantity \* plan.summerRate; else charge = quantity \* plan.regularRate + plan.regularServiceCharge; function summer() { return !aDate.isBefore(plan.summerStart) &amp;&amp; !aDate.isAfter(plan.summerEnd); } \`\`\` Then I do the then leg: \`\`\` if (summer()) charge = summerCharge(); else charge = quantity \* plan.regularRate + plan.regularServiceCharge; function return } function return } summer() { !aDate.isBefore(plan.summerStart) &amp;&amp; !aDate.isAfter(plan.summerEnd); summerCharge() { quantity \* plan.summerRate; \`\` Finally, the else leg:Click here to view code image \`\`\` if (summer()) charge = summerCharge(); else charge = regularCharge(); function return } function return } function return } summer() { !aDate.isBefore(plan.summerStart) &amp;&amp; !aDate.isAfter(plan.summerEnd); summerCharge() { quantity \* plan.summerRate; regularCharge() { quantity \* plan.regularRate + plan.regularServiceCharge; \`\` With that done, I like to reformat the conditional using the ternary operator. \`\` charge = summer() ? summerCharge() : regularCharge(); function return } function return } function return } summer() { !aDate.isBefore(plan.summerStart) &amp;&amp; !aDate.isAfter(plan.summerEnd); summerCharge() { quantity \* plan.summerRate; regularCharge() { quantity \* plan.regularRate + plan.regularServiceCharge; \`\`
Maybe you could use `lodash#cond`? If `graph`, `userId`, `folder`, and `worflow` all come from `props`, then you could write a cond like ```ts const getWithGraphStyle = cond([ [props =&gt; isFolderOwnedByUser(props.userId, props.folder), _ =&gt; ownedColorStyle], //... [_ =&gt; true, _ =&gt; notOwnedColorStyle] //default case ]) const getWithoutGraphStyle = cond([ [props =&gt; isFolderOwnedByUser(props.userId, props.folder), _ =&gt; ownedColorStyle], //... [_ =&gt; true, _ =&gt; notOwnedColorStyle] //default case ]) ``` Then in your component, you can use the functions like ```ts const colorStyle = props.graph ? getWithGraphStyle(props) : getWithoutGraphStyle(props) ``` It's not necessarily cleaner, but sometimes the indirection can be a good thing
/r/gatekeeping ????
Thanks, I'll try. Why do you think is Sequelize shit?
From https://martinfowler.com/books/refactoring.html Chapter 10 Simplifying Conditional Logic Suppose I‚Äôm calculating the charge for something that has separate rates for winter and summer: ```js if (!aDate.isBefore(plan.summerStart) &amp;&amp; !aDate.isAfter(plan.summerEnd)) charge = quantity * plan.summerRate; else charge = quantity * plan.regularRate + plan.regularServiceCharge; ``` I extract the condition into its own function. ```js if (summer()) charge = quantity * plan.summerRate; else charge = quantity * plan.regularRate + plan.regularServiceCharge; function summer() { return !aDate.isBefore(plan.summerStart) &amp;&amp; !aDate.isAfter(plan.summerEnd); } ``` Then I do the then leg: ```js if (summer()) charge = summerCharge(); else charge = quantity * plan.regularRate + plan.regularServiceCharge; function summer() { return; !aDate.isBefore(plan.summerStart) &amp;&amp; !aDate.isAfter(plan.summerEnd); } function summerCharge() { return; quantity * plan.summerRate; } ``` Finally, the else leg: ```js if (summer()) charge = summerCharge(); else charge = regularCharge(); function summer() { return; !aDate.isBefore(plan.summerStart) &amp;&amp; !aDate.isAfter(plan.summerEnd); } function summerCharge() { return; quantity * plan.summerRate; } function regularCharge() { return; quantity * plan.regularRate + plan.regularServiceCharge; } ``` With that done, I like to reformat the conditional using the ternary operator. ```js charge = summer() ? summerCharge() : regularCharge(); function summer() { return; !aDate.isBefore(plan.summerStart) &amp;&amp; !aDate.isAfter(plan.summerEnd); } function summerCharge() { return; quantity * plan.summerRate; } function regularCharge() { return; quantity * plan.regularRate + plan.regularServiceCharge; } ``` 
This converts your project CSS into viewport values to help make your project more responsive, without using media queries. https://github.com/Bengejd/NOLS
[staticdeploy.io](https://staticdeploy.io), an [open source](https://github.com/staticdeploy/staticdeploy) platform for deploying static apps. Its aim is to solve some pain points I always had when deploying my frontend apps to S3, netlify, or others: - no way to dynamically change (i.e. without recompiling the app) the configuration, that is the variables you would define in **process.env**, like a google analytics key - no way to dynamically change the base path at which the application is hosted without breaking the app's router or the links to the app's assets I've been working on this for the past year, so I haven't really created it this week, but I've never shared it here, and last week I released a new version with some improvements, so here it is. :)
Thanks for the link. To be fair, the question is not just ranting: people tipped a solution. It can be used to autofill much larger nested object literals without the use of *init*: https://jsfiddle.net/4c6j8nbk/ 
So for the [map.locate](https://leafletjs.com/reference-1.4.0.html#map-locate) call you make here... map.locate({setView: true, maxZoom: 16}); Is the geolocation method to locate the user as you expect. It uses events, and fires a 'locationfound' event when it finds one and 'locationerror' when it does not (say the user doesn't allow the permission). You define the callbacks for those there....where when those events are called it will trigger the callback functions. map.on('locationfound', onLocationFound); map.on('locationerror', onLocationError); So when the map triggers the event 'locationfound'. The onLocationFound function you made will be triggered. Called the callback function. In that callback function, locate seems to give it the latitude and longitude in the parameter of the callback. e.latlng So that would most likely hold the user's location. To which, in that callback you could add it to the var latlngs array. I'm not sure how latlng is formatted...going to assume it is an array of the two numbers....may have to dig a little deeper into that. There are a few ways you could do that...kind of depends how this is all setup... You could define latlngs array you have as a global variable in this JavaScript file. Then in the callback onLocationFound, you could append the e.latlng to it...such like. [latlng.push\(e.latlng\);](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push)
Ken wheeler fuccs 
Bad syntax for defining models and generating queries and many of the queries it generates are horrendous and will have performance issues once your DB reaches a certain (not very big) size. 
Yes sure! I would love contributions! You can check out my repo and DM me incase you have any questions. 
Is there a better alternative or are raw querys more useful?
Also, if you're active enough I'll also add you as a contributor later. :)
Sorry, my bad, wasn't even reading the title :D &lt;3
I explored Sails but found it was lacking in some key areas (cannot recall, this was a year or so ago) and settled on Sequelize. Yes, this was a mistake. For my next Node.js project I went with [Knex](https://github.com/tgriesser/knex) which is a query builder not an ORM. In my case this was fine. Knex is great but again, it's not an ORM. Personally I avoid Node.js development unless I have a problem that can truly benefit from their async model as it's a pain and not natural to program under for most solutions. 
I figured it out. For the sake of someone googling the issue, I will post the embarrassing explanation. I have /src and /lib where src has TS files and lib has the transpiled JS files. In the initialize.js I pointed to the /lib to run some initialization code, but all the tests are TS tests and point to the /src folder. So instead of failing, Jest actually worked but had two copies of the code and ran both. **Solution,** If using TypeScript with Jest, ensure that all jest configuration files are TypeScript also and point to the source and not lib. Also, the test environment should be 'node' because the other one is terrible and has issues with modern JS features.
So, we totally need to internet high-five. I just got most of the way through a project refactor to teach myself CSS grid. It's called Unicode Ninja, and you can find it at unicode.ninja üòÑ hooray! ‚úã‚úã‚úã
I think there's really two different camps for solving this problems. One camp is to just use a singular array of length `width x height`, and leave the grid aspect of it down to styling. Give the outer div a style like ```css .my-grid { display: grid; grid-template-columns: repeat(5, 1fr); } ``` so ```ts &lt;div className="my-grid"&gt; {range(rows * columns).map(_ =&gt; &lt;div children="square" /&gt;)} &lt;/div&gt; ``` The other is more like what you're trying to do. I usually arrange all the rows into a container of some kind and reach for flexboxes initially. ```ts &lt;div style={{ display: 'flex', flexDirection: 'column' }}&gt; {range(rows).map(_ =&gt; ( &lt;div style={{ display: 'flex', flexDirection: 'row' }} children{range(columns).map(_ =&gt; &lt;div children="square" /&gt;)} /&gt; ))} &lt;/div&gt; ```
I think it isn't too hard to just use jsx syntax to create SVGS and place them with css transforms. ```js function Circle(radius, position) { return ( &lt;svg style={{ transform: `translate(position.x - radius, position.y - radius)` }} &gt; &lt;circle r={radius} /&gt; &lt;/svg&gt; ); } ```
But it does have a ton of extra weight in popups and other random stuff I dont need in a framework. That's a totally separate UI Library build on-top of the framework in my mind :D
A good way to approach this, and any similar miuse handler problem... Use the onmousemove event, but just store the position and amount the mouse changed to a local property. This is very fast and won't cause problems such as visual stutters. If you need other information just store it as well in this event. Then add a handler to requestAnimationFrame. This is called when the screen is going to update. Here you would use those previous numbers you stored, do your position calculation, and modify your elements position. Using css translate is a good option for positioning it. This will end up with a really smooth movement.
üñêüñêüñêawesome stuff! üòÑ
doh! sorry.
&gt; broken on IE. what else is new
&gt;I honestly felt a bit bad about how judgmental I was feeling. Go with that. No telling what other things this guy has to keep running or how much time he has to "perfect", in your eyes, his JS code, or even if he originally wrote it (possibly another intern wrote it who claimed to know about such things). Indeed I.E. is crap, written by a HUGE team of specialists, and his assessment was technically correct. 
Don't be judgmental about the work of other developers. Trade-offs have to be made all the time. Can you honestly say that you perfectly know 100% the situation the other dev was in? Did he have other tasks he had to work on? A deadline? Maybe he just didn't get enough sleep the night beforehand when he wrote it. You're going to be writing shit code, too. No one who gets paid in this industry has the luxury of having all the time in the world. 
Whatever, it's still a call for help and doesn't belong. &gt; BTW, why did the comments disappear? They deleted them, we had nothing to do with that.
I made a new onboarding process for my app :) [https://giphy.com/gifs/4Ho0ptPOQRuZfbjQMr](https://giphy.com/gifs/4Ho0ptPOQRuZfbjQMr)
I would just wrap your if-else version in a function and use the single `FolderIcon` component: ``` function getColorStyle({ userId, folder, graph }) { let colorStyle = notOwnedColorStyle; if (graph) { if (isFolderOwnedByUser(userId, folder)) { colorStyle = ownedColorStyle; } else if (isFolderWriteableByUserAnywhere(userId, folder, graph)) { colorStyle = writableColorStyle; } else { colorStyle = notOwnedColorStyle; } } else if (isFolderOwnedByUser(userId, folder)) { colorStyle = ownedColorStyle; } else if (isFolderWriteableByUser(userId, folder, workflow)) { colorStyle = writableColorStyle; } return colorStyle; } function FolderIcon(props) { const colorStyle = getColorStyle(props); return &lt;span style={{color: colorStyle}}&gt;folder icon&lt;/span&gt;; } ``` I think the `ifElse` form is needlessly ~abstracted~ "function-ified". I'd also consider using [regent](https://northwesternmutual.github.io/regent), especially if I thought the styling logic could get more complex in the future.
I would suggest you prefix any custom attributes with \`data-\`. It will work either way, but that's the way you're supposed to do it, and writing / reading it from the JS side is a little bit more convenient. &amp;#x200B; In response to your general post - yes, of course a full time employee's code is not necessarily better than yours. But don't let it get too much to your head. If you have any sort of career in web development, you will eventually have something really obvious and dumb pointed out to you in a code review. Or pointed out in production by some bigwig in management, if you're less lucky, once everyone in the company and many customers have noticed the issue it causes. It's generally best to not be either too precious or sensitive about code you've written. It's healthier to try and gain satisfaction from what the code is actually *achieving* and how it helps your team / the wider company goals.
&gt;playing the blame game is pointless &amp;#x200B; Playing the `git blame` game, you mean?
I don't understand your question. Is there something related to a piece of code that you're having trouble understanding? Could you post that?
So it's a gitter clone?
These functions are not asynchronous. They don‚Äôt return until the dialog is closed.
Yeah kind of but there a lot 9f more features and no advanced framework used just jquery and bootstrap 
I will suggest u to use passportjs its little bit complicatedüòâ but still works very good
1. I don't believe there would be much difference on the surface. Of the languages that support them, I don't think I've ever used them, so I'm not sure how they work in other implementations. But at a high level, thats what a trait would be doing - copying its functionality into your instance as a kind of "inheritance" while not following the standard inheritance path. You can see it as the `getOwnPropertyNames` copy example I posted. Technically traits would do more than that, but that should be effectively what would happen implementation wise. 2. I think object oriented programming has its place. And so does functional. But I also think people tend to prefer one or the other. Maybe task A would be better with a functional approach but Person 1 would do a better job with OOP because they're good at it while Person 2 would rock it functionally. I think I prefer OOP, but still do a lot of things within the OOP framework functionally. For me personally, I like the mix. 3. Not sure if the question is still there or not. Was it removed? Was it the one where it was an object definition like `{ left: { right: { [getParentKey()]: value } } }` ?
jquery? bootstrap?
Is that a feature? jQuery has been shown to be significantly slower than the equivalent vanilla js.
Remember alf? He's back, in pog-form!
I am a beginner in front end web development so i just know jquery,javascript,bootstrap
If calls for help do not belong, why "help" flair exist, and there is even a bot also for this purpose? Maybe the reddit's owners have forgot to update the rules and the whole setting once they change their mind about it? This, or the post was removed in a hurry? Who among of the moderators hears the appeals? Thanks in advance. 
Jquery in 2019, why
Bcs my teacher taught me
Everyone has to start somewhere. While I wouldn't use jQuery now, in a production website, it is immensely helpful for a learner. I've been helping my fiancee get off the ground and learn to make simple web sites, and jQuery is definitely a step in the right direction to springboard onto angular, react, or vue (probably vue).
Alert, Confirm and Prompt are synchronous but blocking the main thread until action is taken by the user
Would suggest if you know JavaScript then rather get into react/angular/vue over jquery any day.
Thanks again. Regarding #3: yes, the question was deleted (incorrectly but whatever). It was about autofilling/autounfolding an object literal without any separate calls/*init*, preferably with the ability to use variables of the current property names instead of literal names: something like `this.currentPropertyName()`, which not available in JS (while `Object(this).keys()[Object(this).keys().length-1]` not working as it is a static method and only for priorly fully defined objects). People advised to use *reduce*, and I did: https://jsfiddle.net/4c6j8nbk/ -- looks ugly, but it works. For much bigger objects it might make sense in certain cases.
_I_ know that, but I'm helping her come from the perspective as a beginner, doing beginner things. Not as someone who knows what they're doing. Believe me, that's hard to conceptualize, but it is a reasonable thing these days.q
At the company where I current work, we have a fairly high turnover of employees, and none of the people who built the majority of the code in our older projects are around any more. The code in our older projects is absolutely abysmal - I'm talking no documentation, a ton of duplicated code, single character variable names all over the place, technologies used for purposes that make no sense, sections of code that aren't run or that do nothing (on Friday I was trying to figure out what a method did and after working through it for about 20 minutes I was able to figure out that it was basically an elaborate way of saying "return True"), etc. Am I just supposed to not point out the fact that our projects are absolute terrible messes of technical debt to the main manager on our project (who is not a technical person)? I understand the idea of not wanting to be too critical of others' code, especially people that you have to work with, but a sentiment of &gt; Don't be judgmental about the work done by other developers. seems impractical at some times.
While I'm using angular for some projects jquery still has its place for small cms sites imo. Sure it's not as elegant but it sure as hell is faster than setting up angular
Mastering abstracts are for people who don't know how to make a computer work. Knowing appropriate shortcuts to common issues is a sign of maturity but not always skill. The person who utilizes a novel approach is often well practiced.
r/changeyourfont
It also allows you to access the property with dot notation.
Thanks! I'm going to run with this one. It's clean. I will say, writing the function-ey thing got my juices flowing. &amp;#x200B; I clicked the "Give Reward" link thinking you would get some fictitious "like" points, but reddit wanted to take my real money to give you fake points. So I say, skip the middleman. Here ya go: +1.
Awesome. Nice.
Man the formatting is a total mess, cannot make sense of it
&gt;I think the ifElse form is needlessly ~~abstracted~~ "function-ified". My son thought so too. After getting all of the advice here, I'm going to if-then-else it again. 
Mostly front-ene stuff. The jQuery JavaScript library was the poison of choice for years among front-end devs, and plenty of newbies pick it up still since it's part of the freeCodeCamp curriculum. You see Bootstrap, a Twitter-made CSS library, around a lot more frequently in modern apps than jQuery, but it's been falling from popularity somewhat outside of, again, greenhorns fresh out of freeCodeCamp. Seeing the two together in a new app is a pretty good indicator they are or were taking that course recently. Source: got my start in web there, too.
Is the high turnover of employees and accumulation of technical debt not more the fault of management than individual developers though? As much as I believe in the "boy scout" rule, it's hard to genuinely improve spaghetti code unless 1) you can get away with feature work taking longer in the short term and 2) it's deemed acceptable that things might break as a consequence (because that can sometimes happen when refactoring horrible code with no tests). The worst possible situation is an environment where developers make the smallest possible change to implement what they need to, patching their changes in instead of recontextualising existing code . Unfortunately this is pretty common as management (not neccessarily non-technical people, I should stress) often don't know or care about the issues this can cause in the long run.
&gt; Is the high turnover of employees and accumulation of technical debt not more the fault of management than individual developers though? One explanation would be that it's the fault of management for pushing hard deadlines on the team and not allowing for time to improve code quality, but in my case they just aren't really like that. Things are pretty relaxed here - too much so. The reality is that it's the fault of the managers for hiring fairly bad entry level developers and giving them free reign to build huge portions of our products without oversight, and there simply isn't much I can do but be realistic and have a conversation with them about how bad the code is and how bad the past developers have been, and how we need to put practices in place to remedy these problems.
Wish the link wasn‚Äôt removed.
I don‚Äôt know what I was expecting but for some reason I was thinking ‚ÄúGitMessenger‚Äù meant a messenger based upon git. i.e using commits as messages and branches as different chats etc. xD
did anyone checkout the blockchain framework ?
I think OP wants to do this manually, without the use of tools or frameworks.
Wrote my first blog-post! Null VS undefined is its title. With a bit o sarcasm and some jokes... Hope you enjoy it! PS. Sorry for the repost, but the first was removed because it was not posted as a link here in the subreddit. 
That's right, the main thread is blocked, I do not understand how those functions work internally.
Nashorn is deprecated as of Java 11.
I'm a beginner myself. Decided to learn the ASP.NET Core MVC side of things first. It's hella frustrating. I have little Csharp experience. That's it.
I haven‚Äôt tried that but frameworks like react and angular have a much better separation of concern and are easier to understand when it comes to the view, model, and controller paradigm.
Css transition duration on image slider
There's really no excuse for knowingly pushing out bad code to production. Good coding practices really aren't subjective and as a developer its your duty to ensure the quality of your codebase. @OP your coworker's code makes your product vulnerable to a XSS attacks. The way to resolve this is, when you submit your PR, tag the original author and explain the issue and how you resolved it.
Any examples, demos?
Not sure what you are trying to do. But there is no closing brace at the end. You shouldn‚Äôt put (num - 2) as an argument, maybe do something like num = num - 2; then do (num) as an argument. When you do line 2 put the log in braces and not just on the same line.
&gt;Not sure what you are trying to do. Write a recursive function that returns true if a number is even, false if not. &gt; But there is no closing brace at the end. I checked and double checked, and all of the braces in this function match. &gt;You shouldn‚Äôt put (num - 2) as an argument Could you elaborate on why? If I add `console.log(num)` for debugging it clearly decrements the variable as intended, I get to the correct conditional block, it just does not return a boolean like it should. &amp;#x200B;
[https://lk00100100.github.io/KeyboardFallingBlocks/client/index.html](https://lk00100100.github.io/KeyboardFallingBlocks/client/index.html) &amp;#x200B; Complicated Keyboard Tetris. I made this a while ago.
You need to return the results of the function in every case, change isEven(num - 2); to return isEven(num - 2); Also it is a very inefficient way to do it, just fyi. Using the modulo operator you can just look at the least significant bit. function isEven(num) { return num%2===0; } 
Make sure you return the recursive call. return sEven(num - 2) That way the result is passed back up the chain.
If I understood your intentions correctly, I think you meant: `if (num % 2 === 1) { console.log("num is not even") }` Instead of: `if (num === 1) { console.log("num is not even") }`
https://en.m.wikipedia.org/wiki/Object-relational_impedance_mismatch I 100% agree that query generation libraries (or even manually-written SQL) is the way to go. ORM seems like an easy path at first, but as your application, schema, relationships, and data size grow, you'll start to run into significant pain points. If you're willing to commit to a particulate DBMS, I'd even argue against generation in favor of manual SQL - modern databases have a plethora of features generally unavailable from generators that can drastically improve the performance and flexibility of your application. Stuff like querying into JSON fields, full text searching support (including stemming and advanced conditionals), advanced/recursive Common Table Expressions, etc. Learn the SQL. Love the SQL.
The code "worked" without the return statement, and adding it did not change the behavior I'm observing. As I said, I get the correct "num is even" or "num is not even" in the console, it just does not actually return a boolean for some reason. The exercise I'm working through was specifically to use recursion, I'm aware the modulo operator is more efficient.
No, that was not my intention. I should have originally mentioned this is an exercise from Eloquent JavaScript and was specifically to use recursion.
Indeed! To thoroughly understand JWT or sessions (or anything really), I'll have to do it *all* myself.... Of course, I know I have to use frameworks in production, but this is just a little experiment, so that's why &amp;mdash; I'd like to learn it better to use it betterüòÅ
Thanks for the response! How does passport handle authorisation? Does it let me access the core element (say the JSON token if its using JWT)? Thanks!
Thanks for the response! But I'm not looking for a tool right now, I'd like to do it manually.... Could you suggest me a way to do that? Thanks!
Today, I published a few modules on npm after learning about edge-js (and of course I needed these specific things): - https://github.com/seiyria/winpos (get the positions for all windows of a certain name) - https://github.com/seiyria/pixcolor (get the color of a certain pixel on the desktop) Using these two to make a screen reader of sorts to auto play a game. Hope they're useful to others!
Hey, that looks familiar - I soft-forked this as well a long time ago: https://github.com/seiyria/ntc.js.
Devils advocate here, but Git is a trademark, you can't name it that. GitHub and GitLab have a deal with Git.
Is this consistent with what you're seeing? https://imgur.com/a/uOfdSXJ I pasted your code, after /u/ultrafusion's "return" fix, straight into my browser console, and watched the three log functions produce the expected output. If this is not what you're seeing, there might be an issue with how you're running the code. If this is what you're seeing, what may not fully understand what your issue is.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/h0CcpSe.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ef2n5wi) 
[removed]
[removed]
It very interesting what is going on here. When you run the function without that last return statement, here is what happens: when you pass a 50 to it, the function will skip the two if statements you have and then it runs isEven(48) this will go into the cycle again, doing nothing with if statement until you reach the point of the cycle were isEven(0) is run. However, this is running into a different execution context from that you ran your main function in, so no Boolean value is returned because you never asked the computer to return it from the function at the top. So the cycles are running but not returning When you run the function with that last return added, the same happens until isEven(0) is reached and the If statement kicks in and the Boolean value is returned up the chain from an execution context to the next until it finally comes out. As for your original post, I am not sure why it wouldn‚Äôt work with 75, it seems to work fine. 
If you like languages like C++ or Java I‚Äôm sure you can find back-end only jobs. However if you really enjoy JavaScript I would say you probably want to be well rounded and more comfortable with design. I know with Node there are back-end only opportunities but that restriction will severely limit your selection pool. If you do plan to go well rounded I would suggest looking into libraries like Bootstrap, Semantic, or Tailwind. They make the html/css process much more bearable. 
[Check this out ](https://css-tricks.com/the-great-divide/) 
Look at databases that use JS. MongoDB, noSQL, etc. 
I'm in the same position. I'm looking at back-end only jobs, but also just considering just going into software engineering.
Look nice, but careful with firebase, you might get a hefty bill if you're not careful.
You're missing closing brackets for both of your methods. ``` myService.get() .then(result =&gt; console.log(result)) .catch(err =&gt; console.log(err)); ``` Make sure you have a linter installed, it should be pointing out the syntax error.
Do what makes you happy. If you do that you will always be good at what you do! With a CS degree the world is your oyster. There are so many opportunities out there besides building websites. Browse tech job sites and find something that appeals to you.
You can do everything in the shell using [\#! shebang bash script](https://en.wikipedia.org/wiki/Shebang_(Unix)). This way, no css, no html, but ascii, usually runs faster. Of course, if you want to publish/polish a website, you are pretty stuck out. You can export you shell as html in last solution, this is often used! [https://linux.die.net/man/1/html2text](https://linux.die.net/man/1/html2text) 
&gt; this is my (pseudo) code You're missing closing parentheses in the above code. ``` myService.get() .then(result =&gt; console.log(result)) .catch(err =&gt; console.log(err)); ``` Not sure if that's just in this example or in the actual project.
[removed]
Depending on scale, you might use both. The phrase "groups of friends" screams relational database. However, sessions and each user profile may better lend itself to another database type.
That's not the reason I'm afraid, it has something to do with the CLI not waiting for the promise to resolve. I'll change the typo in the pseudo code though.
That's exactly my thoughts. When I hear grouping stuff together I immediately think relational. Why does session matter on which database? I never choose a database based off if I have login sessions or not. Should I be?
Learn SQL and relational database theory. (there is lots of stuff on youtube!) It is not rocket science and can take you to the next level of understanding. Yes, you can get stuff done with mongo, firebase, etc but without understanding SQL you will never know if you are doing things the right way! Only if you think you have no future in doing computer programming and want to get this done ASAP would I skip this step. 
Backend engineer at a web company that uses node. Do that. 
Computer programming is my career. I've been in the work field for 2 years now but I always want to learn. I'm working on a personal app and I've been thinking about databases for the last couple of hours and can't figure out which would be the best. I'll check that out, thank you! 
Im in the same boat. I like JS and want to learn more but my only purpose for it is manipulating my game in RMMV. Id love to learn it well but i dont want to mess with websites at all
There are plenty of frontend dev job that has nothing to do with the view. Client-side logic can get pretty hardcore if you work with enterprise LOB apps, including but not limited to: unit tests / integration tests / business logic / data repository / dependency injection / build pipelines. &amp;#x200B; Even as websites become 'webapps', the client are still quite dumb and focused on presenting data. But as platforms like electron or react native gains popularity, you'll see more and more complex client side logic being written in TS/JS. e.g. VS Code, Slack, MS Teams, Spotify etc.
Cool. Do these earn you any money or are they being made for recreational purposes only?
Have you looked into front-end libraries such as React, Vue, Angular? A lot of "front-end" development has very little to do with HTML/CSS or design in general. A lot of component-based front-end development is actually very similar to development in general in that you code how things work and interact with each other. The design/view part is just a part of it. There's a lot of logic that goes into modern web application's front-ends.
I love these guys! (khanacademy.com). I have not watched this video, but based on their reputation I practically guarantee this is good stuff! https://www.khanacademy.org/computing/computer-programming/sql
You might not be seeing the second `num is not even` because some consoles will consolidate the last console logs if they are the same.
I also hate html/css. I like JavaScript though, node.js mainly not much website building.
&gt; There are plenty of frontend dev job that has nothing to do with the view I've not once seen a job that doesn't require minimal HTML/CSS skills. I never seen a "UI JavaScript/TypeScript only" job. I get that OP doesn't like them (I hate HTML/CSS myself), but it's a typical part of the job if you want to look for front-end gigs. There would be too much friction for one person to develop *only* business logic, and another person to do *only* presentation. You still need to be able to wire up the component / template binding, which means the "HTML/CSS" guy still needs to know enough JavaScript to make something like Angular or React work. They still need to know enough javascript/typescript to unit test the component as well, even if the presentation logic is minimal. I can *maybe* see a CSS-only designer doing the actual beautification once the HTML structure is in place and bound to the view model by the JS dev (I must stress that the template and view model are inherently intertwined in one form or another and you cannot write one without the other), but I've done design for many years. It's time consuming. Full time consuming. It's best to actually just focus on design. So that means you're going to hire someone to *only* do CSS? I've never seen a company do that. 
lynda online or youtube are my go to sites for new things.
There's no wrong answer. No need getting caught up on which you're using. Yes, maybe non-SQL stuff is trendier, but there are still plenty of corps out there using MySQL.
The harsh truth is Javascript is a client side language. It's designed for that. Node.JS allows for backend development via Javascript but the compelling reason for that is it allows Javascript developers to do full stack. You'll be hard pressed to find a serious backend role knowing only Javascript. You can maybe find a position that allows you to just play with node. But you'll be less marketable than a frontend dev who knows JS and html/css or a backend dev who work with very established tech like Java and C#
There could be many things wrong with how myService.get() is implemented. Can you post your code or even a GitHub link? That may help us help you better 
I know it is not related to Wordpress,but you could learn p5.hs,it is a fun library designed for artists to code. It would be a good library to make an animation that runs in the background,for estethics
Could `result` be `undefined`? If so `console.log(result)` will print a blank line. You might try something that will definitely print like `console.log("result is": result)`.
p5.js, autocorrect at it once again
I assume @OP meant that they are capable of CSS/HTML, but don't enjoy doing them. You are right, there aren't job openings that hires JS only developers. But in teams I have worked in, there are always "UI people" and "backend people", tasks are usually assigned appropriately. Imo, for junior / grads, it's always better to know a little bit about everything, get a job, then develop expertise in one area and build a career on that. Even if that expertise is to know everything, a la full stack devs.
Eat a plant based whole food diet. Go to bed and wake up at the same time every day--and make sure you're getting enough sleep. Exercise EARLY in the day--there's no use in getting dopamine in your brain before you go to bed. Cut toxic people out of your life. Cut out negative people. Find like minded people in the same industry. last but not least, GO TO LOCAL CODING MEETUPS
I disagree. Either can be the wrong answer. There are clear cases where using the relational model (vs NoSQL) makes sense and NoSQL is absurd. Unless you know the difference you can't make an informed decision. 
Speak to your boss. I give each of my employees a subscription to Treehouse, and every other Friday is a ‚Äòhack day‚Äô, where they can work on a personal project in whatever language they want. It really helps expand skill sets and keep my team engaged and happy. It‚Äôs worth asking for something similar. 
It's not printing anything from the then() or catch() block, that's the strange thing.
Yes this. Front end automation (Dev Ops) and front end QA automation engineer are both great paths If you want to stay out of dealing with the UI‚Äîalthough QA maybe less so because you need to walk the UI with code. P
What if the full stack is super awesome on both fronts 
yea I am capable, just dreading doing it ...
Would I be a capable, marketable front-end dev knowing React.js/bootstrap/etc and not hardcore html/css/design skill/expertise? 
&gt; backend dev who work with very established tech like Java and C# Making backends which chew hardware like candy and crash intermittently, but they're *enterprise* so it's all good!
Focus on Node.js then
this is exactly what I needed to read! 
I mean this is software engineering?
&gt; I've not once seen a job that doesn't require minimal HTML/CSS skills. I never seen a "UI JavaScript/TypeScript only" job. That describes my current job perfectly, actually. In 8 months I've written maybe 20 lines of CSS and a little bit of dead simple HTML. And in that span I think I've written the most HTML+CSS on my team. My team's product is entirely canvas-based, so almost all of my work is on our abstraction layer over the HTML5 canvas.
Truth is you might dread it because you're not naturally good at it, and that's fine. However if you spent some time learning design and looking at some inspiration, you may start to develop even a bit of interest in it. That's assuming you haven't tried that already.
Does Gitter also have a deal with them? According to the [trademark policy](https://git-scm.com/about/trademark), Gitter may violate it as well: &gt; In addition, you may not use any of the Marks as a syllable in a new word or as part of a portmanteau (e.g., "Gitalicious", "Gitpedia") used as a mark for a third-party product or service without Conservancy's written permission. For the avoidance of doubt, this provision applies even to third-party marks that use the Marks as a syllable or as part of a portmanteau to refer to a product or service's use of Git code.
They aren't themselves written in JavaScript if that's what you're thinking. They execute native code built into the browser which is allowed to pause JS code execution without the browser thinking it has locked up.
yeah, this coupled with the inability to do joins makes firebase not suitable for a lot of use cases unfortunately
You're right. I was never a creative/artistic person. Its just not in me. Do you have some starter guides I can look at for some inspiration?
Nice project! Just wanted to let you know that node_modules usually shouldn't be committed to your repository.
Actually i have to deploy this website directly to heroku from github
Sure. Design is a separate beast but you should at least be able to mock a design in CSS if I show you a screenshot 
then he/she is a sexy. just sayin', has a mediocre full stack dev, i highly respect people who have a firm understanding of a robust front end and backend framework. im personally attempting to conquer react and node.
same
You'll have more options learning the other stuff, but really of the things listed, you can largely ignore CSS beyond how classes relate to the DOM and styling, and you don't need to learn crap with design theory beyond maybe some UX (but not really UI). You *should* learn HTML and the DOM/shadow DOM (which is a big thing in frameworks these days). There's a lot of jobs that would be pure backed JS/TS in stuff like Node, but knowing how to work with HTML will open up a lot more doors. You'll almost *never* need to be the person working on actual designs/writing CSS at a company with more than 5 employees though. I wouldn't want my designer writing front end logic, and I sure as heck don't want my front end developer building designs. It's going to be harder to find one person that does both well, that person will be slower to develop and need a salary 1.5x the salary avg of two separate employees. Almost any sane development team is going to have separate designers (maybe even outsourced) than the actual developers.
Then he doesn't exist.
Old school CSS is terribly boring... but if you jump right into flex (and grid, and SASS) you wont find it that boring since it actually is simple and "obeys" you. CSS itself borrows reusability principles from programming, like overriding/inheritance from OOP. Libs like semantic-ui show the reusability power of it (while some patterns around with lots of underscores are completely garbage).
Fun fact, design was never my strong suit either. However when I came across beautiful looking sites I always wondered how they made it look that good. Over time I've learned some useful tips that really help to embellish the design aspect without being overly complex either. My core recommendations are: * Use box-shadows generously. I normally grab one of the box-shadows on this codepen: https://codepen.io/sdthornton/pen/wBZdXq * Use gradients where possible * Use border radius * Try out new font styles * Use a mild text shadow for text on coloured backgrounds * Learn flexbox and grid, and use them to position your content, it's so much easier than you might think. Now for sites and resources: * [Refactoring UI](https://refactoringui.com/) - An amazing resource for people looking to get their eyes attuned to the things that a designer might see. I've learned plenty from this and is an excellent starting point. * [Codepen Yearly Popular Pens](https://codepen.io/2018/popular/pens/) - A resource I look through each year to look for new ideas and cool creations to spark some creativity design-wise. * [Dribble](https://dribbble.com/search?q=ui) - The best place to find cool designs is of course a designers website. Loads of UI/UX inspiration, loads of creators, need I say any more? * [Awwwards](https://www.awwwards.com/) - Last but not least is the most 'prestigious' collection of websites which push the boundaries of websites in ways you'd hardly imagine. There are of course loads more places to gather inspiration, and learn design, but it's a continuous learning process. You may benefit from following UI/UX design blogs, watch design videos, and/or try to replicate a few of them yourself.
100% agree. If you are forced to, use LESS (or SCSS). It'll save you massive headaches. And angular isnt that bad. I actually like the fact It's so opinionated so I don't have to worry about a lot of stuff.
Yeah I can't look at the reduce and tell what its doing. I think for what I remember the original example being, it would have been best to just hardcode the values (if that was possible). The problem with objects is that there is no well-defined hierarchy where children have knowledge of their parents. In fact multiple parent objects can refer to the same child object, so its not like a `parent` property could exist. Now, in the specific context of an object literal, you _could_ infer what the "parent" is for that structure in its creation since its all right there. I think the problem is, a) there's no existing syntax to represent this, and b) I don't see there ever being a need to do this - at least not so widespread that it would necessitate a language feature to support it. I think you're SOL on that one. 
Uh sure but that's the reality. And has always been the reality in tech. We follow enterprise cus it's supported. And a lot of people use them and a lot of problems with preexisting solutions and libs done in those tech. Youre not working with the greatest tech. Improvements are slow. Ppl can prob come up with a better version of node and JS but it's not gonna get the blessing of the community. TC39 itself is full of enterprise support and basically full of Google shills. But hey. That's the reality. 
Wow! This is great, thank you very much! 
You need to be "T shaped". Have some basic level experience throughout the stack. Have deeper experience within one or more disciplines within the stack. You can't completely ignore some parts of the stack. Furthermore since front-ends have become so "rich" there's often the bigger development challenges there. To make sure some view and interactive flow loads efficiently. Lots of back-end experience is useful here. A good developer has a full understanding of the entire technical workings of the product you're working on. Great features come from knowing how to implement them efficiently throughout the stack. Very often you need to optimize the back-end to make some frontend feature work optimal. It's valuable to be someone who can implement some new feature alone. You don't want to be needing a front-end guy for everything you do.
Yes, but Heroku can run your build command for you (that is actually how it is intended to be done), so you don't have to commit the dependencies in your repo :)
You can have a look at html5 game development. Phaser would be a good start.
Ok i will check it out thnku üòä
"Enterprise support" = *"Pay us $1500 and we'll send you the patch for that undisclosed bug you've stumped on that we've been hiding"*
Haha well yeah. Outside of webdev is what I meant.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), ‚Äúnobody‚Äù starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
There are lots of free html/css templates out there. I've just finish studying and now I'm in portfolio-building mode, but I'm more systems and backend. I understand design but I don't have the skillset to make something worthy of a portfolio. So I used some front-end templates to slap a pro look on a complex backend. Simple!
Haha I actually just recently made a portfolio site as well and I used a gatsby starter kit and just changed some stuff up 
By enterprise I support I mean big dogs like FANG contributes to the language and relies on them. Maybe if Google starts using node to power its large services backend the rest of the industry will be comfortable too. Before then good luck persuading ppl to ditch a well battle tested stack for node. 
Hey, your brian thinks like mine! JavaScript is a great language to work with. But with HTML and CSS, I don't think so. But AngularJs is good!
A login session might not contain relational data, in which case you might choose a different database for that. 
And that's part of the problem. The "real" frontend developer is kind of disappearing. It's not basic html and css any more. Front end is forced into highly interactive, component based, mvc structures. Front end didn't need to worry about state management before. Now they do. In the other hand. The developers that were writing the client side javascript before, are now required to be able to fine tune some css troubles. I don't understand how you can say that React has very little to do with css and html. It has everything to do with css and html. And in case nodejs is used as the back end, there is also not a clear separation between client and server any more. Partly because of code sharing, and server side rendering. As a full stack dev who started his own company, and selling his platform as a SaaS, I really like it. But it's also terribly difficult to find skilled full stack developers in the market. Separating the tasks between back end and front end issues, is not always that easy when everything is so integrated. 
&gt; Maybe if Google starts using I've never bought this whole idea that this is any kind of indicator of quality or robust decision making. Angular JS. A steaming turd. Fully backed by Google. Embraced by *many* (too many) under the pretence of *"Backed by Google"*. Remains a steaming turd. So much a steaming turd that Google had to start from scratch and do it again.
If you want to stay motivated, start a side project to solve a problem that you have. "I want to learn more programming" is too nebulous as a goal, compared to something like, "I want to make a tool that will help me ___." Start with the need, then figure out how you're going to learn what you need to satisfy it, rather than just trying to find a course and not know what to do with what you learned. At the very least, look at something you want to learn, and then think about what learning it would empower you to do, and use that power. It's like a Zelda game, when you finally get that tool that was keeping you locked out of all these areas. It feels great to go back and blow up all of those cracked walls. You're not going to care about JS prototypes until you're trying to build something and you've copied and pasted code into like 5 similar classes, and you break some crap because you wanted to change how they behave but you keep forgetting to make the change to all 5, or you can't figure out why none of the changes you're making are doing anything, because you lost your place and changed the wrong file, because the files all look the same. Then you'll be like, "I'd love to be able to share some behavior among a bunch of objects, and have it be relatively easy to maintain," and then you'll understand why you have to learn about prototypes. Not before. Everything is like this. You write a lot of crap code that's a nightmare to work with, and then you throw it out, and learn how to do it a little better, because you need to to get to your goal: solving problems.
That's the reality though. That is literally how ppl pick tech. As much of a steaming turd angular is they still got some large code bases cus Google right? If they're not Google do you think they would have the market pen they have now? You're talking ideals. But we live in a world of hype and following what others do. Unless you're the smartest guy in an influential position you don't get a say. And it's an industry of people who aren't interested in a new tech stack that solves problem that they've solved before. It's just the way it is. Even Vue as great as it is is lacking adoption in production due to its smaller enterprise backing. Again. Welcome to the real world. 
Try to get a job in corporate / enterprise. Depending on your current capabilities that might prove to be fairly challanging. However, they will probably provide you with test exercises to test your skills. These might prove good learning material. Once you, if you get in, you'll be learning in one month more than you could possibly do from online courses.
Fuck me. You‚Äôre one of those idiots. The primary stack of the front is HTML and CSS, then Javascipt. Designers don‚Äôt code. Front end developers are responsible for EVERYTHING on the client side. If you don‚Äôt know how to write CSS, you‚Äôre going to be producing junk sites that have bloated CSS files that break everytime you make a change. That‚Äôs not the fault of CSS. That‚Äôs the fault of you ‚Äì as a developer ‚Äì not having bothered to learn one of the key languages you need to know. So rather than: &gt; Almost any sane development team is going to have separate designers ... than the actual developers. Any sane development team would never hire an arrogant, irresponsible, lazy, gatekeeping ‚Äúdeveloper‚Äù like you.
What do you mean? I get the jack of all trades but master of none, but what if someom is a full stack, but is better at back end stuff? Or vice versa? I'd think they're more qualified because they can understand errors better and how to talk about what they need to their team? To clarify, I've only worked in a small company as like a junior to mid level full stack, so this is me genuinely asking, not try to criticize. 
&gt;A lot of **"front-end"** development has very little to do with HTML/CSS or **design in general** que?
&gt; Do these earn you any money or are they being made for recreational purposes only? Just for fun! ^_^
The more you use CSS the less painful it gets. I def look forward to the tickets that are more code heavy and less "adjust the padding on all buttons to 15px". Back end is fun, but front end is so rewarding because you can see your efforts come to fruition in front of your eyes.
Oh my... sounds awful... I guess I can be happy about still being in the design process.
The full saying is ‚ÄúA jack of all trades is a master of none, but oftentimes better than a master of one.‚Äù 
Yes they do. I‚Äôm one of them 
You can do front end with minimal interaction to html/css directly. Pick tools which abstract it away and provide build in stuff like neat transitions out of the box. I don't like HTML/CSS either. Do a lot of frontend. Rarely ever use those. React + Material UI + CSS in JS (material ui has it's own solution). 
Oh, didn't know that üòÆ
The web app I'm writing in my main job is 90% WebGL code, no HTML/CSS to be seen. No regrets.
I used to say that as well, but the divide is becoming larger and larger. Specialization is the future of tech IMO, unless you like being taken advantage of at small agencies or startups.
Great link, indeed!
Web design != Front end development. Yes React can have little to do with HTML and CSS. HTML is abstracted away in it's entirity. For CSS there are plenty reusable / composable ui component libraries like Material UI, which comes with it's own ux guidelines. There isn't much reason to experiment with custom web design anyway in most business use cases.
&gt; That is literally how ppl pick tech. Many people, not all people. &gt; If they're not Google do you think they would have the market pen they have now? Don't care. There were and are better solutions to the same problem Angular tackles. &gt; Unless you're the smartest guy in an influential position you don't get a say. It's that persons job to properly evaluate shit instead of following the herd to the slaughter. 
SPecIalIZaTIon is the fUTuRe of tEch. You speak as if technology started 10 years ago.
If your "full stack" is just knowing JS for the UI and Node, you're lucky. And for an average project, I'd expect a dev to be able to work on either. There's definitely some different approaches you need, and some people may specialise primarily one one or the other, but assuming you're building on an existing codebase then it should be fairly straightforward to pick up a bit of work on the other half of the app. Every single person we hire for our UI teams is expected to know, or at least be comfortable that they could quickly pick up, both sets of skills. To be full stack at our place, you'd need to understand those, plus the innards of webpack, Jenkins, Java, DBs, various AWS services, a level of networking shell scripting, etc, etc. That's the kind of full stack skillset I really wouldn't expect a single person to be good at. Someone might move from being a JS dev to a Java dev or a DB designer etc, but that would usually be a career move not just another task on the current project that I'd expect them to be doing.
I don‚Äôt know why you‚Äôre getting downvoted. I totally agree. Front end has grown up, you can‚Äôt be great at both. They‚Äôre evolving too much. Full stack devs thrive at startups, but big companies will want specialists of areas. There‚Äôs just too many mistakes to be made before you really understand each area to a top level. Experience is gained by making and learning from mistakes. 
Your function "myService" does not return/resolve promise. \`\`\` MyService: function(){ return new Promise(resolve =&gt;{ result = 1+1 resolve(result) }) \`\`\` Can you paste you function service? 
I read an article last week that said exercising later in the day was better. Exercising early in the morning using your best information retaining part of the day to wear yourself out physically. Then again, that was also in an article written by a monk who says if you aren‚Äôt getting up at 5am you are a failure at life, so take that with a grain of salt.
"The more you use CSS the less painful it gets." Sounds like our junior who was employed 3 weeks ago. Fucking hated HTML/CSS. Finally got him a real task to create a new application with all the initial containers, he said he's starting to like it.
Aw - thanks :) Do you know a better reddit to post it on? I'd love to get some feedback but I don't want to keep breaking the rules.
That's bs separation for the most part. It's the same people who are looking for "mid-level Laravel developer" in job adds. You know they are looking essentially for code monkey. If ones professional competence is defined by particular tools like Vue, React, Laravel, rails (you name it) one has severe blind spots to adress in order to progress beyond junior level.
How does one even evaluate without knowing all the potential pitfalls. I have 10 years exp and have exp in most languages but even I admit I'm too green to be calling the architecture for large scale apps. See its just easy to say but... Everyone can just spew ideals like Obama. Carrying them out is another story. 
Try to find a new job that develops your skills more. Even if it‚Äôs a super junior position. Figure out what interviewers want you to know, learn enough to pass the interview, and then get paid to do challenging work that forces you to learn.
Then you get paid well and have som egood job opportunities.
Exactly. I don't consider myself a designer AT ALL and I would never ever mention a single instance of that word in any of my resumes, but mocking any design isn't at all that difficult once you know the ins and outs. Flexbox and grid do wonders and expel most of the hassles too.
Then you‚Äôre describing a T shaped employee. And they‚Äôre valuable. Back end specialist (or vice versa) but understands enough to have conversations and do light touch stuff in other areas to a high level. Emphasis on light touch. 
Graph database. That is basically what all the social apps are migrating too. Then you can do ‚Äúfriends of friends‚Äù type queries. I would recommend starting with neo 4 j 
Then you're fine. Nobody expects juniors to do animations or anything. If you're a JS God who can mock designs you're good enough. 
I'm not op 
Depends on how motivated you are in the morning i suppose
Damn this trickery. 
Eh yeah but there's no "best" database. Firebase is neat but it has its own can of worms if you go too deep into it. MySQL is tried and true. Maybe it's a bit tedious but it's stood the test of time whereas almost every other database type out there has crashed and burned at some point or become obsolete
I used to think that but then I realised that I was only truly ‚Äúfull stack‚Äù among people that weren‚Äôt in the top of their game at either front or back end. Moved to a highly respected software house and calling yourself ‚Äúfull stack‚Äù is a running joke because the standards are so high that you really can only be good enough to specialise unless you‚Äôre some kind of genius enigma. 
As far as I know, there is _yet_ no way to do it through the v4 API. Last I know -as of December- they are still working on it. You may ask in their support forum, though.
alright thanks...!
Don't worry too much about it. Unless you land a job in a company where you're the only developer, probably nobody would expect you to do both. Learn the basics of CSS while trying not to go into too much details, but focus on what you enjoy and get better in it. I'm currently working as a front end dev and I admittedly suck at anything but the most basic CSS. My team lead and everyone else I'm working closely with is totally fine with that because most often, there's at least two people working on the same project usually chosen in such a way that they complement each other's skills.
&gt; Last month, I had to install a package manager to install a package manager. I shouldn't be laughing at this, and yet I am. &amp;#x200B;
&gt; How does one even evaluate without knowing all the potential pitfalls. They don't have to foresee everything, they just have to try a little. Angular remains a good example for this. People saw bells and whistles, the name *Google*, and that was it. That was the sum total of their evaluation of tools for jobs. Actually lets throw Java in there. My first exposure to Java (apart from knowing it was a thing) is when the boss came in with a copy of Business Weekly which had coffee stain marketing printed on it telling him *"Write once, read anywhere"*. Well that *"write once"* turned into something like 186 different VMs for Netscape alone ;-) It was heavily marketed at decision makers, managers and business owners. They were being sold that they were making a great decision with *enterprise* blah blah blah blah.
I think you're still using enterprise in a very negative light. People just suck at reinventing the wheel and simply don't want to. So they see a business that they wanna model after and do the same, assuming the problems they solved would be relevant. Thing is why try a little, then further down the road find out there's no good solution for a specific use case? Were running in circles. You're going against the industry and that's brave and I like that, but gl changing it. For example I think reasonML is a great lib and very compelling for writing frontend. It has all the great features of strong typed languages without needing the pseudo type checking in TypeScript. But gl convincing all the JS programmers to ditch their comfort and all the OO guys to move into functional programming. In startups you can try shit. Scope is generally smaller. But with bigger scopes with bigger considerations unless you have really really smart ppl (are you one?) just fall in line. 
Hey, I‚Äôm learning html/css now. Do u like the idea is to teach them together? I think it‚Äôs niceü§üüèΩ
Interesting article!
&gt; assuming the problems they solved would be relevant. MS and Google share none of those solutions, while the communities they build also don't like to share. Open Source on the other hand you find many people who have solved similar problems previously. &gt; gl convincing all the JS programmers No need. You don't have to make the whole worlds life easier, your people are enough. &gt; bigger scopes with bigger considerations Boil that down enough and you end up at: *"Is there someone we can take legal action against if it all goes bad?"* ;-) 
A tech that is new. Bolated. Impressive fast (and that's bad, changing apis from today to tomorrow). Node is trending but it does not solve any problem. You likejs? Great. Now learn the propper stuff. Web stuff? Go. Mobile stuff? Dart. Native stuff? C/C++, all OSs have apis for them. Iot? C. What does node give?
HTML and CSS are essential to web development I think you should try to learn them in any case. Then you can try both front-end and back-end and decide which one you like most. 
I guess what you mean is SQL vs non SQL. There aren't relational dbs past 92 SQL spec, since keyword "with" was introduced.
[removed]
You kinda do unless you guys don't use any third party libs and prefer to write everything in house. If you're Google and have the resources to sway tech to your ideals and recreate everything then all the power to you. Otherwise you better hope there are other developers out there who did what you wanted. 
Sidenote, it would be a lot easier if you used an array instead of 10 variables
I really don't know what magical unicorn companies y'all are visiting. I just started working at a large company that creates specialized technology solutions for other large companies. Most people here have graduated in the last three years and are still getting good with the basics. We produce great stuff, but it's absolutely not because each individual is a hyper-specialized oracle.
If its talking about yarn its a) optional b) should be from exe from yarn website
Sorry, I copied from the PDF which had some really weird problems. The code was all split up on paste and I had to reassemble it maniacally and apply prettier. It all parses OK and is valid. Think of it as an advert for the book :) There is an awesome free cut down version that acts as a sort of cheat sheet online, here is the section in question: https://refactoring.com/catalog/?filter=tags-simplify-conditional-logic https://refactoring.com/catalog/decomposeConditional.html 
&gt; Otherwise you better hope there are other developers out there who did what you wanted. There are millions of other developers outside of *"Enterprise"*.
but how would i fix what i have?
Front end has changed and iterates faster than back end - but all it‚Äôs grown up into is the handling of functionality that was traditionally part of the back end, its not like some new paradigm - merely a new representation of existing requirements 
Who is solving the exact same problem you are at the scale you want with the integrations you need? If selecting a third party lib is so easy cus "millions of other developers" can come to my rescue then life would be quite easy wouldn't it. What's your thing with enterprise? I don't get what's your negativity with "enterprise" like you were with the OSF or something? 
https://medium.com/the-node-js-collection/why-the-hell-would-you-use-node-js-4b053b94ab8e
I don't think almost any of this logic will do what you're trying to do, even if you get past the function undefined. I'd probably go back to the drawing board with pseudo code, and then try again to translate it into js. 
*"Remember: Node.js was never created to solve the compute scaling problem. It was created to solve the I/O scaling problem, which it* [*does really well*](http://www.srirangan.net/2012-05-node-js-critics-which-part-of-event-driven-non-blocking-io-model-you-dont-understand)*."* Wasn't go designed to solve that? [https://www.hostingadvice.com/blog/nodejs-vs-golang/](https://www.hostingadvice.com/blog/nodejs-vs-golang/)
The other side of the argument is that being too specialized might not be future proof. Crypto is hot now but if you only focus on specializing in crypto what happens when crypto goes bust in the future?
Short answer, yes. However, if you are planning on working with web technologies, having html and some css experience is crucial. And full stack developers (those who do both, along with server and devops stuff) make a lot more money, at least where I live, than someone who specializes in one or the other. Around here it is at least 30% more. So it depends what your goals are. 
I don‚Äôt think so. True full stack developers should be equally good at both and are super desirable in my city. I mean any true developer should be able to swap technologies at the drop of a hat since projects and product should decide the stack. I always hate it when job descriptions mention things like, ‚ÄúMust have experience in C#‚Äù. A good programmer would be able to pick up a new language in no time if they are worth anything. 
Been a web developer for 10 years and I still hate css. 
Build libraries instead :D
Front end front and back end front
I am a java backend dev and I really like it. I think it's not rare for devs to choose between one or another and it's fine. I also work with several very competent frontend angular devs. Try being a java backend dev. Only you will know what you prefer.
Go with native languages if you don‚Äôt like the dom approach to web and mobile development used by react native and such.
Every function is returns undefined if not returns something. 
JavaScript is single threaded and not type safe. How could it be a good backend language? 
Yeah, that's what my company and most companies I've seen look for. Most people have a leaning or a strength in one area, as they should, but I don't like to hire people who don't consider themselves full-stack. We've hired a few and they just throw their hands up when an error arises outside their domain. I've seen people literally stop working because "I'm not a back end developer, it's not my job to troubleshoot that". On the other hand I have some very back-end heavy full-stack developers who have no problem digging through the JS when they need to. 
Why? It's totally fine to be frontend developer without css/HTML skills except very basic ones 
Same here. After some years of experience i think I am somewhat comfortable with css but i feel like its kinda waste of time. I feel like i waste too much time fixing and tweaking paddings, margins or transition timings. Yes when you finish your styling it feels rewarding but still its boring. But spending all those time thinking about a logical problem would have been better. 
Wait..... people actually like this language? Not trolling.... it‚Äôs useful but has some serious design flaws.
No it's not. And I am a front end developer. 
I get that, but to me that's still more interesting than wiring up a backend.
Yes, it is. Read the link in top reply. 
 Cookies = new Map(); Cookies.set("item1",undefined); Cookies.set("item2",'ryzen7\_2700x'); function add\_ryzen7\_2700x() { var item1 = Cookies.get('item1') var item2 = Cookies.get('item2') var item3 = Cookies.get('item3') var item4 = Cookies.get('item4') var item5 = Cookies.get('item5') var item6 = Cookies.get('item6') var item7 = Cookies.get('item7') var item8 = Cookies.get('item8') var item9 = Cookies.get('item9') var item10 = Cookies.get('item10') if (item1 || item2 || item3 || item4 || item5 || item6 || item7 || item8 || item9 || item10 == 'ryzen7\_2700x') { if (item1 == 'ryzen7\_2700x') { Cookies.delete('item1') console.log('Completed') } if (item2 == 'ryzen7\_2700x') { Cookies.delete('item2') console.log('Completed') } if (item3 == 'ryzen7\_2700x') { Cookies.delete('item3') console.log('Completed') } if (item4 == 'ryzen7\_2700x') { Cookies.delete('item4') console.log('Completed') } if (item5 == 'ryzen7\_2700x') { Cookies.delete('item5') console.log('Completed') } if (item6 == 'ryzen7\_2700x') { Cookies.delete('item6') console.log('Completed') } if (item7 == 'ryzen7\_2700x') { Cookies.delete('item7') console.log('Completed') } if (item8 == 'ryzen7\_2700x') { Cookies.delete('item8') console.log('Completed') } if (item9 == 'ryzen7\_2700x') { Cookies.delete('item9') console.log('Completed') } if (item10 == 'ryzen7\_2700x') { Cookies.delete('item10') console.log('Completed') } }else{ if (item1 == undefined) { Cookies.set('item1','ryzen7\_2700x') console.log('Completed') }else if (item2 == undefined) { Cookies.set('item2','ryzen7\_2700x') console.log('Completed') }else if (item3 == undefined) { Cookies.set('item3','ryzen7\_2700x') console.log('Completed') }else if (item4 == undefined) { Cookies.set('item4','ryzen7\_2700x') console.log('Completed') }else if (item5 == undefined) { Cookies.set('item5','ryzen7\_2700x') console.log('Completed') }else if (item6 == undefined) { Cookies.set('item6','ryzen7\_2700x') console.log('Completed') }else if (item7 == undefined) { Cookies.set('item7','ryzen7\_2700x') console.log('Completed') }else if (item8 == undefined) { Cookies.set('item8','ryzen7\_2700x') console.log('Completed') }else if (item9 == undefined) { Cookies.set('item9','ryzen7\_2700x') console.log('Completed') }else if (item10 == undefined) { Cookies.set('item10','ryzen7\_2700x') console.log('Completed') } } } add\_ryzen7\_2700x(); &amp;#x200B;
 Cookies = new Map(); Cookies.set("item1",undefined); Cookies.set("item2",'ryzen7\_2700x'); function add\_ryzen7\_2700x() { var item1 = Cookies.get('item1') var item2 = Cookies.get('item2') var item3 = Cookies.get('item3') var item4 = Cookies.get('item4') var item5 = Cookies.get('item5') var item6 = Cookies.get('item6') var item7 = Cookies.get('item7') var item8 = Cookies.get('item8') var item9 = Cookies.get('item9') var item10 = Cookies.get('item10') if (item1 || item2 || item3 || item4 || item5 || item6 || item7 || item8 || item9 || item10 == 'ryzen7\_2700x') { if (item1 == 'ryzen7\_2700x') { Cookies.delete('item1') console.log('Completed') } if (item2 == 'ryzen7\_2700x') { Cookies.delete('item2') console.log('Completed') } if (item3 == 'ryzen7\_2700x') { Cookies.delete('item3') console.log('Completed') } if (item4 == 'ryzen7\_2700x') { Cookies.delete('item4') console.log('Completed') } if (item5 == 'ryzen7\_2700x') { Cookies.delete('item5') console.log('Completed') } if (item6 == 'ryzen7\_2700x') { Cookies.delete('item6') console.log('Completed') } if (item7 == 'ryzen7\_2700x') { Cookies.delete('item7') console.log('Completed') } if (item8 == 'ryzen7\_2700x') { Cookies.delete('item8') console.log('Completed') } if (item9 == 'ryzen7\_2700x') { Cookies.delete('item9') console.log('Completed') } if (item10 == 'ryzen7\_2700x') { Cookies.delete('item10') console.log('Completed') } }else{ if (item1 == undefined) { Cookies.set('item1','ryzen7\_2700x') console.log('Completed') }else if (item2 == undefined) { Cookies.set('item2','ryzen7\_2700x') console.log('Completed') }else if (item3 == undefined) { Cookies.set('item3','ryzen7\_2700x') console.log('Completed') }else if (item4 == undefined) { Cookies.set('item4','ryzen7\_2700x') console.log('Completed') }else if (item5 == undefined) { Cookies.set('item5','ryzen7\_2700x') console.log('Completed') }else if (item6 == undefined) { Cookies.set('item6','ryzen7\_2700x') console.log('Completed') }else if (item7 == undefined) { Cookies.set('item7','ryzen7\_2700x') console.log('Completed') }else if (item8 == undefined) { Cookies.set('item8','ryzen7\_2700x') console.log('Completed') }else if (item9 == undefined) { Cookies.set('item9','ryzen7\_2700x') console.log('Completed') }else if (item10 == undefined) { Cookies.set('item10','ryzen7\_2700x') console.log('Completed') } } } add\_ryzen7\_2700x(); &amp;#x200B;
``` Cookies = new Map(); Cookies.set("item1",undefined); Cookies.set("item2",'ryzen7_2700x'); function add_ryzen7_2700x() { var item1 = Cookies.get('item1') var item2 = Cookies.get('item2') var item3 = Cookies.get('item3') var item4 = Cookies.get('item4') var item5 = Cookies.get('item5') var item6 = Cookies.get('item6') var item7 = Cookies.get('item7') var item8 = Cookies.get('item8') var item9 = Cookies.get('item9') var item10 = Cookies.get('item10') if (item1 || item2 || item3 || item4 || item5 || item6 || item7 || item8 || item9 || item10 == 'ryzen7_2700x') { if (item1 == 'ryzen7_2700x') { Cookies.delete('item1') console.log('Completed') } if (item2 == 'ryzen7_2700x') { Cookies.delete('item2') console.log('Completed') } if (item3 == 'ryzen7_2700x') { Cookies.delete('item3') console.log('Completed') } if (item4 == 'ryzen7_2700x') { Cookies.delete('item4') console.log('Completed') } if (item5 == 'ryzen7_2700x') { Cookies.delete('item5') console.log('Completed') } if (item6 == 'ryzen7_2700x') { Cookies.delete('item6') console.log('Completed') } if (item7 == 'ryzen7_2700x') { Cookies.delete('item7') console.log('Completed') } if (item8 == 'ryzen7_2700x') { Cookies.delete('item8') console.log('Completed') } if (item9 == 'ryzen7_2700x') { Cookies.delete('item9') console.log('Completed') } if (item10 == 'ryzen7_2700x') { Cookies.delete('item10') console.log('Completed') } }else{ if (item1 == undefined) { Cookies.set('item1','ryzen7_2700x') console.log('Completed') }else if (item2 == undefined) { Cookies.set('item2','ryzen7_2700x') console.log('Completed') }else if (item3 == undefined) { Cookies.set('item3','ryzen7_2700x') console.log('Completed') }else if (item4 == undefined) { Cookies.set('item4','ryzen7_2700x') console.log('Completed') }else if (item5 == undefined) { Cookies.set('item5','ryzen7_2700x') console.log('Completed') }else if (item6 == undefined) { Cookies.set('item6','ryzen7_2700x') console.log('Completed') }else if (item7 == undefined) { Cookies.set('item7','ryzen7_2700x') console.log('Completed') }else if (item8 == undefined) { Cookies.set('item8','ryzen7_2700x') console.log('Completed') }else if (item9 == undefined) { Cookies.set('item9','ryzen7_2700x') console.log('Completed') }else if (item10 == undefined) { Cookies.set('item10','ryzen7_2700x') console.log('Completed') } } } add_ryzen7_2700x(); ```
Just because you're a front end developer and you use a lot of HTML and CSS doesn't mean there are not front end developer out there that don't. If you want to grow as a developer read the article above and realise this.
Go is a more recent development, and I don't know of any big projects built with golang. Next to that is the question of how many people actually code in go vs nodejs. Why would you introduce a new language if you can just continue to use the same language for all tasks? It's great to have multiple solutions to a single problem, then you can just pick the one that best suits your need. 
I still see the bootstrap grid as pretty elegant (if not as flexible). What's the current poison for positioning? 
Fantastic article. Thanks for sharing! 
First of all, 1 tool for 1 job is bad. I've seen JS project to code IOT, Web apps, mobile apps, and native desktop apps. They are slow, bolated (big in MG / GB). There are MUCH more people coding in node. Why? Because it's trendy, and easy to learn. tradeoffs are it's slow and bolated. You choose your path. "Why would you introduce a new language if you can just continue to use the same language for all tasks? " Why would you introduce JS when there has been C from 1972. You can use C to code a website, would you even do it? no. There are best tools for each job. JS is the tool front end dev. that's why it was born and where it should stay. Other than that, it's just trendy people. Node does only solve the urge of people to code other things with the language they know. Truth is, other tools are there and they are powerful enough to kick node ass. Just to clarify it. "Go is a more recent development" Golang and nodejs are both from 2009.
Right, I have been struggling with CSS for years - I finally decided to do every single CSS excersice I could find as well as buying two high rated Udemy CSS classes. Some 80 hours later, CSS isn't anything which I dread anymore - almost kind of like it, just wish I'd done this earlier. 
I agree with you, even as a front end developer who writes basically 0 html/css. You need to understand the platform to be effective!
SQL is more forgiving. You may have a wrong schema and still be able to query the data any way you want with decent performance. No-SQL requires that you know upfront what you are doing as making any design changes is hard. 
wrapping your head around the box model helps, even if you're learning flexboxes. but after like 13 years, it's pretty clear there is a minimum background pain level that exists in css. you'll never be able to fully take away the pain of using it, even if you can minimize it or get used to it.
[https://github.com/nextapps-de/fat](https://github.com/nextapps-de/fat) Actually the fastes animation tool for the web. Super lightweight, no dependencies, custom builds. Benchmark comparison available [here](https://nextapps-de.github.io/fat/).
I completely agree with this. I can code anything you want in javascript, but I still get stumped on why my divs won't line up and clear:both isn't working. Nor do I really know when to use clear:both. 
&gt; What do you mean? I get the jack of all trades but master of none, but what if someone is a full stack, but is better at back end stuff? Or vice versa? I'd think they're more qualified because they can understand errors better and how to talk about what they need to their team? this is exactly the case. i dont understand what homeboy meant when they said &gt;Full-stack is generally less employable than someone who‚Äôs super awesome at client or server. this has been the opposite of my experience in almost all cases. sometimes companies start specializing when they get huge (like 5000+ engineers), but in my experience, generalists who have a big picture view are much more highly sought after than specialists who work on one part of a stack.
&gt; Who is solving the exact same problem you are at the scale you want with the integrations you need? When does an enterprise product magically deliver this? &gt; I don't get what's your negativity with "enterprise" For the exact reason you put it in quotes. It's not much more than a marketing buzzword. 
I'm not using enterprise the same way you're using the word. How about just replace everything enterprise with big tech companies. That eliminates some "buzz" too. Do you not trust big tech? You think it's not worth emulating their stack? 
Looking at this code, I would only expect item2 to be set if Item1 is already set. You are aware that within your if / elses they will only hit once right and then skip over everything else? Looks to me like your trying to handle all 10 at once here. I'd consider switching to a looping structure instead of this nasty if statement stuff.
Whatever.
a more interesting demo, see if you can make a repl for https://brython.info
I just do `brew install yarn` which does yarn, npm, and node in one command! Very cool
For what it's worth, I've been a solely backend nodejs developer for over two years and now and I love it and it totally works for me. I do not want any front end positions and when recruiters on LinkedIn write me with them because I have JavaScript experience I turn them down. That being said I keep up with react, just so I have an understanding of what goes on on the other side. Just to make me more rounded in my understanding of web development. But ask me to align two divs? Sorry but it's gonna take a while. Ask me to write you a micro service ? Well it's still gonna take a while but I know what I am doing. There's nothing wrong with specializing if you have the demand for it, and especially if you enjoy yourself 
Look into flexbox
Not to mention they won't get into the `else if` block, since that condition is exactly the same as for the `if` block.
Refactoring UI made my styles go from inconsistant mess to fairly nice design. Adam and Steve do offer discounts to students, but have also offered better prices for people that can't afford the $150. To be honest, for anyone who is isn't a professional UI designer, it's well worth the $150 and they are updating the content based on user feedback.
That's one of the things "full-stack" can signal: dexterity. Not necessarily "I'm an expert at both CSS and scalable backend architectures.", but "I'm not afraid of anything in your stack."
Material UI uses styled components.
Those people are incredible and create amazing things. I‚Äôm giving a snippet of advice to someone who is not anywhere close to that lol
Don't ever use floats! They're rubbish! There's flex, which is great to use and is essential to know now for FE. Grid is useful too.
It seems kind of silly to refer to the world's most ubiquitous and marketable programming language as not "proper". (Granted, the Node ecosystem is ludicrously over-engineered and JS has its share of a warts.) From an organizational standpoint there are major advantages to using the same language on both client and server. It allows for a developer to work in both contexts knowing a single language. For companies with limited resources that's a big deal. Node itself is well-suited for handling a large number of connections. On its merits, Go could very well be the superior tool. (I'm not familiar enough with Go to credibly compare them)
Yes. It‚Äôs totally fine to be a shitty frontend developer. 
No, it doesn't. Reference to documentation: https://material-ui.com/customization/css-in-js/ You probably got confused because it's compatible with styled-components.
I've heard a lot of good things about it. I mostly program as a hobby. So I haven't really needed to build a website in a while. 
Like 10-12 years ago floats were all the rage. This is where I picked up the habit. I don't do much website building these days. I've wanted to look in grid for a while now but don't really need to. 
I edited my comment for more clarity on what I meant with the full-stack comment I feel what you‚Äôre saying here though
I didn't say nodejs is useless. I said it solves no issue. "For companies with limited resources that's a big deal ". That is true. That's the point perhaps right, you have money? build the software with the right tech and it will work great. You don't? Build it using these stuff, quicker, dirtier and cheaper. You can choose of course :) Go was designed by google to overcome the python issue when it comes to concurrency (google needs concurrency a lot considering it's business). I have seen very very few to no real life enterprise applications. To backup my statement, check this source [https://idatalabs.com/tech/products/node-js](https://idatalabs.com/tech/products/node-js) See your point, low companies using node, higher companies do not. I feel like nodejs is the new "indian" tech out there. Cheap, does the job but it's not as efficient as it's competence yet people try to think it is.
I edited my comment for more clarity on what I meant with the full-stack comment I work at a global company now where everyone is ultra good at what they do. I know for a fact that there isn‚Äôt a single backend engineer that can replace me (I‚Äôm a frontend engineer). And vice versa. At smaller companies it‚Äôs much easier to wrap your head around the entire stack. Small companies are a great place to kick off a career; you learn a lot and get your hands dirty. My first web job was at a small place and I definitely was doing full-stack work. When it came time to get a high-paying, high-level job at a successful company, they were looking for sharpened skills with the assumption that you could speak with other teams on other parts of the stacks intelligently and productively.
Add some business domain knowledge outside of programming, and you're invaluable.
Oh man I need the tl;dr, IMHO the site is not that easy to read, the fonts is too big, i scrolled way too much to read too little
Just my opinion, but if you don‚Äôt know how to use google to find resources, you‚Äôre going to have problems in the 21st century.
I have made a [Image-Mimic-Genetic-Algorithm](https://github.com/KarthikNedunchezhiyan/Image-Mimic-Genetic-Algorithm) [https://github.com/KarthikNedunchezhiyan/Image-Mimic-Genetic-Algorithm](https://github.com/KarthikNedunchezhiyan/Image-Mimic-Genetic-Algorithm)
I mean, you're right. But also Node makes sense and getting that backend JS firmed up opens a metric ton of job opportunities outside the companies that are already distancing frontend JS from frontend design. 
I think that non relational is only useful if you are prototyping something very quickly. For the long term, there is always a structure to your data, any kind of app it is, it must have some kind of structure
Building a good component library and webapp from scratch with an emphasis on maintainability can make some really smooth systems. All you need is BEM, components fill parent, and always push content down, ie margin-bottom always, and I find I can get through a lot of stuff with little to no css. When we do have to do css stuff, it's usually cool, not just setting up flexbox grids.
jesus christ!
And if I can't mock screenshot to css am I in trouble ?)
I edited my comment to give more clarity on what I meant. Swapping tech is different than being able to waltz into a high-level spot at a successful company. If you aren‚Äôt already good at what I do, there‚Äôs no way you could productively replace me without spending a decent amount of time focusing on it. A good developer can transition into other roles, but let‚Äôs not pretend that‚Äôs a realistic goal for a beginner. They should focus on getting hired and learning things in a professional setting; not on being able to do any dev job in the world. No one can really do that without some padding. 
The rule of thumb should be to use SQL unless you have a good, solid, identified reason not to. If you don't know, use SQL, if you're prototyping to determine, use SQL, first in every use-case where there's a question, use SQL until there's no a question. If you truly have a free choice of databases I'd highly recommend PostGres as it's JSON data types and related functions give you 98% of the No-SQL functionality you might be tempted to use an No-SQL database for, whilst keeping you firmly in the mainstream relational path. In many ways the best of both worlds and **always** a solid choice.
I edited my comment for clarity. I wasn‚Äôt referring to only being to handle specific tools. A good frontend engineer could be productive at any company, on any framework, whereas a good backend engineer could do the same with various server architectures and languages. Focusing on everything is a great way to not get a job for a long time. Learning things in a professional setting is quite valuable, and a beginner should start off with what interests then do they actually keep going and reach that point. It‚Äôs assumed at any high-level job that you have an understand of whatever stack you‚Äôre working in. But it‚Äôs also assumed you can provide competitive skills in your role to elevate the company in that area. 
To be able to help, people need to be able to understand what you're trying to do. A function on it's own doesn't tell us anything. This particular function is poorly structured and could probably be reduced to 5 or 6 lines. This would make it easier to understand, easier to debug, and less error prone (since there's less code to go wrong). But, we can't fix or simplify if we don't know what is happening.
Ye, sure. Agree 
So if I can't make css mockup from screenshot I'm shitty frontend developer ?)
There's not much mention of NodeJS in this thread (or generally in this sub for that matter) but it's something you might want to look at. If you don't know already, NodeJs basically takes the V8 Javascript interpretor from Chrome, bundles it with a bunch of libraries, and gives you a platform in which you can run Javascript programs anywhere you like. You can script, write networking applications and servers, pretty much anything you can do with any other language, but in the comfort of the asynchronous IO environment of the Javascript event loop. I find it pretty great to work with. There are definitely downsides to Node, though. It's not the most mature or robust technology and its penetration into enterprise companies is small. It is a darling of startups, though, so there is definitely opportunity in it.
Could also be referring to Bower. 
CSS has a grid too.
I'd say don't use floats for layout. Floats are fine for their intended use of putting an image or bit of content next to a paragraph. 
No I mean that unstable build of V4.
css is sh\*t because its not logical
And I perhaps used a bit too rough of an expression. But just reminded me of these so called specialists as candidates who waste my time calling themselves mid level developers proficient in tool x, can't solve a basic programming problem like implementing strategy pattern for file parser. The reason why I say that segmentation frontend / backend doesn't make much sense is that we manage whole lot of state in both sides now. And essentially same requirements apply. What backend has what front end doesn't? Well, auth flow will be handled in back end, obviously, although it will touch front end as well. And perhaps interaction with back end database. Although we do have somewhat of equivalence of back end databases in front end too now with raise of PWA's. Message queues! - we got them in front end too, in form of web workers. We can even ship complex computations like image rerendering / reformating software in form of WebAssembly. And put aside PWA's + web assembly, simple SPA's are often modeled like your back end. Global state object will serve as your data base / model. Your interaction layer (actions and reducers) serves as controllers. Your components as presenters and your template / jsx is view. What happened during hte years, as client side devices got more powerful we shifted the weight of it, same logic we used to do in back end, to front end. So what exact competences and qualifications you are separating here? Newbies are different story entirely. Folk need to tame at least a single language to even begin learning basic principles. You can write a sentence without knowing the alphabet. &amp;#x200B;
I know that but I am enable to find proper stuff easily 
I work with Orion's Rhapsody, an interface engine for medical applications... Most of the filters are done in Rhino... All JavaScript, no web crap.... You can find your niche
I couldn't finish the article cause I (ironically) dislike they layout/UX on that site, and it seems to repeat the same points, but the points it does make are correct. They are in fact so correct that when building a future dev team structure for an upcoming division in the company I work for, I defined quite a few roles that tauch on Front-end: Front End logic developer, Front End Designer (that might just be a designer, not an implementer), Front End UX/UI, as well as all the Fullstack members that might fill those holes if need be. My point being - somebody like you I could see filling a Fullstack position, working on Back-End stuff and filling the gaps for the FE Logic devs when needed. So, per your post, do what I did back when I was started - do suck it up, and do become well rounded. But, if you don't like UX/UI, don't focus on that area - in the FE, just learn to design quick and (time-wise) cheap stuff with Bootstrap, and focus on the logic.
I‚Äôm with you in that these labels are generally unhelpful. You make some excellent points on how the industry has evolved to the point where it‚Äôs much easier to grasp everything going on, even though it‚Äôs ultimately more complex. The open-source community has really lifted everything up. I like building experiences for users. I can make things from complex embeddable web apps to 3D games. I‚Äôm also more than happy to dig into the server side to ensure that the users are happy with a well-functioning client, but at the bigger places they‚Äôre pretty good about letting someone focus on what they‚Äôre good at. ‚ÄúFrontend‚Äù is my way of saying that quickly. If there were a more appropriate term that any given person would understand, I‚Äôd happily use that instead.
&gt; Do you know that doing `for loop` is more faster than `map`? So for having a large size array then a simple logic like adding one to every item. Let‚Äôs see the difference. I think this is still true, but the two are fundamentally different. Ignoring `map` for the moment, `forEach` is probably the most basic of all Array loop functions, as it returns nothing. The polyfill for `forEach` is [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Polyfill). There is an `if` check before the execution of the callback within the while loop. This `if` check explicitly filters out `undefined` elements and is often regarded as the reason `forEach` is slower than a native `for loop`. The function invocation of the callback, might also add some overhead, especially in earlier versions of browsers/Node, but most JIT compilers these days are able to optimize that out. Instead if you are using lodash's `each` which does not have an `if` check, you might find that it has much better performance than the native `forEach`, albeit maybe not entirely equal to a `for loop`. I wish JSPerf was still around. --- Even though it's cool to know these things, I don't think anyone should consider performance as reason to use one over the other, unless it really matters. Also, one JIT may provide different results over another.
I guess that's the crux of the issue. Term front-end no longer conveys enough information to specify what kind of work in entails and what kind of problems one will be solving. Having said that, I don't feel comfortable calling anyone a developer who doesn't do programming. I suppose word developer itself is not clear cut. You might as well be real estate developer. Word programmer seem to fit a lot better. But we ain't gonna change the common usage of the words.
https://www.youtube.com/playlist?list=PLWIxuiyTh_yY3w26sJMbdTDXuEYJp-GxT Is this a good playlist to learn about database theory? I want to make sure I'm learning the right thing haha 
I've heard a bunch about postgres, is it used a lot in the corporate world? 
This frustrates me so much. It‚Äôs hard to describe what you do in concise terms without controversy, and impossible to describe it broadly. We need to open source a repo that defines new terms. 
Yeah. Let's be frank, CSS is just a mess. It's not remotely well-designed for its' current function. There's so many common basic tasks that have ridiculous ways of doing them where you can do the same thing in 7 different ways and each way works in only 4/20 scenarios. Or worse, there's just no way to do certain things and you have to compromise or add unnecessary tags because there's just no way to explain to the browser the logic elements are supposed to be following. Flexbox, grid and other newer additions to the "language" are dramatically better designed with more options and better consistency, but it's still very painful.
I feel like it's exactly what a _lot_ of us around this sub needed. You're far from alone with this.
Brew is also a package manager though lol
&gt; I wish JSPerf was still around. There are a number of alternatives available now... [JSBench.me](https://jsbench.me/oejfc5io0k), [JSBen.ch](http://jsben.ch/BQhED), [some other JSBench](http://jsbench.github.io/#67b13d4e78cdd0d7a7346410d5becf12), [MeasureThat](https://www.measurethat.net/Benchmarks/Show/2689/11/lodash-vs-for-of-vs-foreach), [JavaScript Benchmark](http://javascript-benchmark.info/) (Disclaimer: I don't know how trustworthy any or all of these are)
I hear you. It's a choice between playing to your strengths vs fighting your demons. A great way to transition to backend would be to look at server programming with NodeJS. There's plenty of job openings for backend and I've spent the last 12 years of my programming career working almost completely backend. That said, you're obviously early on in your career and it's possible that you're at a steep part of a learning curve and things will get smoother after you persist through that. Good luck ! 
yes...
Funny enough, I basically feel the opposite. I love the design UI but hate the javascript to tie it all in.
God I can relate to this so much. 
Depends on why you hate it. If its because its unfamiliar/frustrating I would say just learn it cause its not that hard. If you dont like making UIs then dont get into it 
The thing is, not having a good grasp of HTML and CSS basically makes you destined to be a mediocre frontend developer. You'll still be able to "get things done", but any place that has a solid engineering culture will get someone to come in and clean up after you. And that person will have more opportunities than you.
Two options: 1) Read the API docs and implement things yourself: https://developers.google.com/identity/protocols/OAuth2 2) Read Authom's source code and copy it ... or you could always do some combination of the two (implement yourself but "cheat" a little by looking at how Authom does it).
Passport is the opposite of what OP wants (he wants to implement things himself without Express, and Passport is not just a library it's Express middleware).
I would not recommend Node. I would recommend Python. You will have more opportunity to learn about performant code that you could then transfer to Node. That is what i am learning when comparing run times with algorithms i have been working on 
Yeah i gotta say no to that
would you not be more valuable if you could? At the end of the day its just time spent and not settling for close enough &amp;#x200B;
&gt;You dont have to be artistic. In my work the designs are given to me. I gave input if a particular action would feel bad during the design process. &gt; &gt; &gt; &gt;As far as implementation of a given design, its really just time spend pushing pixels and not settling for close enough &amp;#x200B;
He is not wrong. Python will kicks JS tail all day when you are performance oriented &amp;#x200B;
Nothing wrong with MS these days. Shits getting good
You are taking this out of context. Imagine a world with no angularJS. Shit was revolutionary. That pushed the industry forward. That is like saying film cameras should have never happened because digital is so much better
You dont have to be a designer. Those are generally separate roles. Design takes a lot of time. Your team would go no where if the same person designing was also implementing.
&gt; The more you use CSS the less painful it gets. That's a very dangerous attitude. Of the languages modern developers deal with, CSS is by far the hardest to write well. It's very easy to learn and bang something out, and that's what makes it so dangerous. Writing good, maintainable CSS requires experience, thoughtfulness, and a massive amount of self-control. Otherwise you end up with an un-maintainable mess that only ever grows in size and complexity because there are so many unexpected interactions and cascades and nobody ever knows what's safe to modify or remove. A methodology like BEM (my preference, there are others) is critical. Also, if you're not using a preprocessor like Sass, you're doing yourself a massive disservice.
&gt;I've seen people literally stop working because "I'm not a back end developer, it's not my job to troubleshoot that". It depends though. We do that all the time at my company. We have A LOT of code on both sides, and it's not efficient or necessary to expect everyone to learn both sides. We have zero "fullstack" devs, everyone is either one or the other. Both sides have plenty of their own work so don't need to interfere with the other although the teams work closely together. Of course it's just Java/JavaScript so everyone can read everyone's code, but I (the UI team lead) prefer it if backend devs who don't work on our code regularly don't attempt to fix things they are not familiar with. Similarly I don't attempt to fix backend code either although I can if they ask. It's a matter of, why are they wasting a lot of time learning a whole other code-base that they don't work on, and if they DIDN'T learn it, why are they contributing to it (likely in a sub-optimal way)? That said we don't hire "fullstack", "frontend" or "backend" devs. We hire programmers who agree to work on front or back, and train themselves as much as necessary to contribute including learning our framework, the framework(s)/db/other stuff we use, and if necessary, the language(s). Some people came with a lot of relevant experience, some came with none, but it didn't really predict their level of success that much. I've seen 10 year veterans struggle while total juniors ran circles around them.
Not sure about working in excel, but anyway some possible hacks: you might use a fixed delay (determined by experimentation) then assume it is done. you might check the file update timestamp, and if it hasn't been updated in a "while" (determined by experimentation) then assume it is done. You might just do the export yourself in js and then you know when it is done.
One of the best resource for learning is to build something, anything. Then reference stackoverflow, github and Google for solutions to each problem. 
I wouldn't . It adds nothing valuable to me. You know, at some point adding low skills like HTML and CSS adds nothing to your value. It's way better to delegate such job if needed to someone who do it. And I have zero desire to do css/html
Everyone likes writing CSS from scratch. The secret is writing CSS which other people (and yourself 6 months from now) will like maintaining and modifying.
I second this. The fear of failure is a prison. A new job where you are challenged to learn new stuff is like a school you are paid to go to. 
Cool. Thanks for answer. Where is it hosted ? Any recommendation for hosting fun projects? I'm always holding back for money related issues.
I always felt design was not my scene. For years I didn't bother to learn and focused only on backend. But my partner who used to do the front end bit left and I was forced to pick up the skill. I have absolutely no regrets! You may have great back end skills but it always helps to make things look beautiful. I suggest don't completely ignore it. Make backend your main thing but keep learning something new in front end everyday. Soon you'll stop disliking it and actually start appreciating it! 
Good thing that there a lot of sane people who don't think such things 
What a constructive reply, well done /s. There are such places where multiple devs are working on different areas of the same project, especially if we are talking about web apps. Having expertise areas is totally common, in fact I've been working as frontend engineer for the past 4 years focusing almost entirely on business logic and maintainable architecture. 
&gt; At smaller companies it‚Äôs much easier to wrap your head around the entire stack. Small companies are a great place to kick off a career; you learn a lot and get your hands dirty. My first web job was at a small place and I definitely was doing full-stack work, although the job was listed as a frontend gig. Yeah, this is it. At our company we have strict division of duties because it's just not efficient or necessary to have everyone sticking their nose into everything. It takes training and knowledge to understand both code-bases, and they are large and complex enough that it's not something you can just sit down and do in an afternoon or even a week. If we trained you for backend, we didn't have time or need to train you for front-end and you shouldn't be touching front-end. Outside of a few key people who are heavily involved in the product's infrastructure and control how the two sides interact on a basic level (ie, they maintain the core framework), most developers don't really need to know anything about the other side aside from how to configure it (which is actually a significant amount of information by itself) and how to navigate and read the code and db enough to do basic troubleshooting. We definitely don't allow people to commit things on the other code base without special permission.
Hey that's a cool web app :) I liked the smooth transition between the colors. At this line \` smallColor = color.textContent.toLowerCase(); \` you declare the variable without the keywords \`var\`, \`const\` or \`let\`. That means the variable is accessible from the global scope. You want to use the most strict scope that you can. Maybe read a little bit about JavaScript declarations online and that will help you pick the right keyword. &amp;#x200B; Your CSS classnames \`keys1\` and \`keys2\` could be more descriptive. What about \`key-group-left\` and \`key-group-right\`? Or do you have an other suggestion?
Why not an IntelliJ-IDEA-based IDE? Like WebStorm, PHPStorm or even IDEA Ultimate itself? Works wonderfully for us.
&gt; A good programmer would be able to pick up a new language in no time if they are worth anything. I agree. But companies need to define if they want someone who can hit the ground running or someone who they will invest in long term.
not sure its an app but it looks really nice
I‚Äôve always liked building things from scratch with (s)css. But now that I have to train others to work with the front end, I‚Äôve realized how difficult this is. Been using various Vue/React ui frameworks ever since, and the teams are much happier. I still don‚Äôt use them for personal projects, but i finally understand why people love ui frameworks.
That‚Äôs not true. There‚Äôs tremendous value in having a single developer who‚Äôs capable of handling all aspects of frontend work. Delegation comes at the cost of increased overhead, additional mistakes due to communication errors, and slower execution as developers may have to wait on each other to finish certain tasks.
Ill look into it. I assume those options fit the criteria?
What matters is the methodology you use, and the discipline with which you stick to it (and force other people to stick to it). As a full-stack developer, half of my code review comments are yelling at my coworkers to fix their CSS which works but doesn't follow our conventions. Seriously, writing maintainable CSS is hard. Using a framework doesn't solve all of the problems. Actually, using a framework doesn't really solve any problems, it just gives you some shortcuts for certain things.
Interesting article indeed. Thanks for sharing.
My point was that the teams don‚Äôt have to write much css anymore. Writing less code means more time to focus on the code that you do write. 
It‚Äôd be a literal waste of time to do anything but high-level talks between areas of the stack. The engineers‚Äô jobs are to take that high-level information and translate it into functional software. If I‚Äôm informing you of a 500 error I‚Äôm getting when making x call with y headers to your API, I don‚Äôt need to hear about your Java problems. I have 10 other tickets I could be working on while await further correspondence. 
Right, thanks! I'll try that and see how it goes! Thanks, you made my day!
I know how you are feeling. I used to hate CSS and more frontend design type of things. Truth is, I hated it because I was bad at it and it frustrated me. I‚Äôm not saying this is necessarily why you hate it. In that kind of situation you either decide that it‚Äôs not for you, or you just deal with the frustrations and keep learning (like we do everyday with programming). I pushed through, and actually grew to really enjoy the frontend Design side a lot more. I‚Äôm very happy to have good chops on front and back end now :) 
And so by your logic all work should be done by one man, because "Delegation comes at the cost of increased overhead, additional mistakes due to communication errors, and slower execution as developers may have to wait on each other to finish certain tasks."
Like mentioned above Webstorm by IntelliJ is fantastic and what I currently use as well. But some other nice options include VScode, Atom or sublime text to do all the things you‚Äôve mentioned. These may take a bit more setup out of the box though. 
If possible, yes. Sometimes paying the price of delegation is necessary, but it‚Äôs important to understand there _is_ a cost. 
how long have you been programming
Indeed, what I want is a simple way to do calculative object literals that could easily refer to its property names via variables, which is not possible. Not sure why it is not done yet as I guess many people would use if it was available as it would be shorter than to do *inits* or fill objects' properties via common programming `o = new MyObject(); o.myProperty = ...` BTW, what do you think of *decorators*? Why they needed at all if you can intercept any and all method calls with the use of *proxy*? 
There is a cost in everything. Would you rather want to do your css/html by someone who do frontend development in js for 100$/h or you would rather delegate it to someone and let your js guy do his js work?
I feel the pain. But if you look at it from the perspective that every new skill you learn doubles your odds for success, learning CSS/HTML is one of the best investments you can make in your development career. CSS has never been more powerful, and with the advent of flexbox and css grid combined with widespread adoption of standards, it's never been easier to implement complex, cross-browser compatible designs. I started out with CSS in the days of IE 6 support, when you had to code for IE 6, (alongside 7 &amp; 8), FireFox, Safari, and Opera. The best way to ensure a consistent design was to restrict your CSS to margin, padding, width/height, float, and relative/absolute positioning, then use conditional comments to include IE version-specific stylesheets or direct descendent hacks for non-IE 6 browsers. Compared to that, CSS today is a walk in the park. When coding CSS, just think of it as boxes within boxes, with spacing. That's all every design really is at the atomic level. If you're stuck, open up the root stylesheet and at the top add: `*` `{border: 1px solid red;}` And you'll see--boxes within boxes with spacing. Wes Bos has two great, free courses on flexbox &amp; grid which I recommend highly. 
Yeah their site's design is a bit annoying in some areas...That big red background with white font was so hard to read on, and the overall colour scheme feels a bit too intense.
Constructive replies have been given multiple times over the last 12 months. Evidently the message isn't getting through, so it's obviously time for a change in tone. Maybe that will work. I am well aware that those sorts of places exist. I work in one of them as a lead. What you appear to have described though is a source of many headaches in the web industry today. In many modern dev shops, tasks that would have traditionally been done by backend developers on the server side is now done on the client side. The location of the work has changed; the job role hasn't. The problem is, people have started confusing backend responsibilities with front end responsibilities. You're correct that the industry is changing in ways that mean there are role that only require JS knowledge, in the same way that some jobs used to only require PHP/Ruby knowledge. However, those jobs are not front end development jobs. They're something else that we need a name for. Client-side developer/Javascript developer... what we call it, I don't know. But I do know we shouldn't be calling it front end developer ‚Äì because knowing CSS ‚Äì and knowing it well ‚Äì isn't optional if you want to call yourself front end anything..
I skimmed the article and I don't think it got into pay. Note that, right or wrong, the JS side of that stack typically makes quite a bit more money in comparable situations (which is probably good news given your proclivities). Money wise, you're better off being a strong programmer that knows just enough design to not make terrible mistakes than vice versa.
Depends on the situation and the project. There isn‚Äôt any one answer. But there are circumstances where having a single developer handle all aspects of the project is ideal. And having the capacity to be that developer increases your having. Additionally, it‚Äôs often the case that as projects increase in complexity, the separation of concerns is no longer clean and various aspects of the project merge together. A developer who doesn‚Äôt have a complete skill set simply wouldn‚Äôt be able to work on these projects. 
As a hiring manager (Director) of Front-End, I can tell you these are the rarest folks out there. Lots of good Back-End Engineers can fit DevOps/Infrastructure work into their knowledge stack over time, but doing client-side JavaScript requires a good working knowledge of the implications in browser(s) and form factors as it pertains to performance and other related client-side issues. While they can get the logic built, rarely is UX performance even thought of. And in my line of work, that‚Äôs more than useless‚Äîit can lose us clients. 
So you are implying that writing js code on frontend without good grasp of html and CSS make you destined to write bad logic that someone should come and clean after you? 
As for first , there would be always cases when adding another skill to your skill list will make you increase your value in theory. Practically when you are already in the upper range of the value, adding another low level skill adds so neglible value that it can be discarded. As for second, if it mixed to that point that you can't write logic without touching css and J's it's time to scrape project and rewrite it. I would rather avoid such projects, than trying to fit in.
If your api‚Äôs have different urls for different environments, same with API keys. Can even be used for features that are toggled between environments.
&gt; `o.myProperty = /calculation formulae in function/...` This specifically is possible now with getter/setters - and they have been part of the language for a long time. But this still doesn't allow access to a "parent" object. That's still not possible because there is no one parent. To have that, it would require special functionality, like that seen in the DOM API. Technically you could get that, but only if you implement it yourself (or use some library). It would not be a language-level thing. Decorators I like. They're like mixins/traits because you can decorate classes to give them extra functionality. And like many new features, they're only a syntax on top of what is already possible. Decorators aren't like Proxy, though. They don't intercept at runtime. Decorators change definitions, giving them different or enhanced behaviors when they're being defined. Really, they're just glorified wrappers over new values but with a syntax that makes them easy to place within the context of the class syntax. I'm not a big fan of the new implementation, though. While I appreciate the extra flexibility, I liked the legacy behavior for its simplicity. Typescript had them implemented this way for the longest time, and Angular has been using them (the legacy decorators) successfully in practice as an integral part of their framework so I didn't see why they had to change.
I know i m just saying bcz express can be very useful when creating big application
Define 'understand the platform', plz. Does making you unable to create css/html from screenshot make you don't understand the platform?
That only I am asking from where I will get that stuff I want link
You seem to not realize that there are projects where the entangled nature of the frontend development is not a result of poor architecture, but is inherent to the problem. Highly dynamic interfaces driven by complex logic will naturally have this structure. Do you think a project like Google Docs had a HTML/CSS developer working alongside a JavaScript developer? Absolutely not. 
Stop being a lazy arse and type it to google or any other search engine.
Whatever you specialize in, you will find work for. Just try to best your craft, whatever it may be. 
knowledge of css is literally one of the requirements for front end dev. you sound more like a brat and less like a professional developer. i don't love how tedious css can be but its a job requirement. 
Thank you for the detailed explanation, that is exactly what fixed it. Another user pointed out that the console is actually outputting the "num is not even" message for 75, but it consolidates repeated messages. Since that's the message that was output previously it doesn't show up on it's own line, but rather with a `2 repeats` message off to the side.
You failed at posting your link to medium.com/chingu/an-introduction-to-....
I tried it dude but I was not satisfied by the results as only same repetitive stuff comes up 
Yes, after you pointed that out I noticed when I hover over the line number for that message it says `2 repeats`. That explains why when I uncomment that one line it starts showing back up, because then the message isn't repeated twice in a row.
Low level. This is a yikes. Do you actually do frontend work? I have never heard a frontend dev talk like this
I am just trying to imagine working with an HTML/CSS only dev for conditional rendering driven by JS. That would be so time consuming. That on top of aligning with API devs sounds like a crushing job &amp;#x200B;
I prefer to use a flickity-like carousel in those cases, which makes it clear it's a series of images. Which is more of a horizontal scrolling thing, which is often an anti-pattern too, but in this case it's more useful. Honestly, the only way I'd use the specific kind of carousel they have in that pink, is for "mood" images, and with autoplay enabled. If I have next/prev or a pager, it's *only* as a backup, for users who liked an item and want to go back. But I don't really except anyone to press them to see more content. With that said, I'm not sure that OP's design fits that definition either. In my opinion, the fact you can see the headers makes it more of a weird accordion than a carousel.
Node
An HTML/CSS dev create the initial static interfaces, but yeah any further work would have to be done by a JavaScript developer who's also competent in HTML/CSS.
You'll only learn by finding solutions to the problems, if you don't know how to use google take a tutorial on google 1st. https://blog.hubspot.com/marketing/google-advanced-search-tips Link provided! üòâ
So if it's requirement how I can get frontend work with very basic css only ? Did u read the link in the top comment for post? 
To be fair, what OP has here, is not the same as the carousel in your link. The user isn't completely blind to which content is there, beyond prev/next and the number of pages. You have the titles, that are always visible. And I assume you can also click them, and not just scroll left/right. So it's more of a weird horizontal tabs pattern than a carousel. Of course, it still trades functionality for flashiness, and even a simple, functional tabbed widget is the wrong choice in many cases. But it's not as thoroughly useless as the carousel in the site you've linked.
üòí thx by the I know ok Don't u ever take any buddy help while learning I mean every one say contacts are important 
üòí thx by the I know ok Don't u ever take any buddy help while learning I mean every one say contacts are important 
üòí thx by the I know ok Don't u ever take any buddy help while learning I mean every one say contacts are important 
üòí thx by the I know ok Don't u ever take any buddy help while learning I mean every one say contacts are important 
Thank you! You‚Äôre right, thank you for catching that I‚Äôll be more descriptive with my classnames as well, the ones you suggested sound like the best way 
Thank you! Ya I was trying to figure out how to call it and web app made sense at that moment. What would you call it? 
I've been a developer for 15 years. Still have no idea how to write maintainable CSS. And it's not even that I fail at writing maintainable CSS, because failing would require that I at least make an attempt. Which I don't do, because I don't know how. So I just purposefully and successfully write shitty CSS and tell myself it's just part of the job. 
Everything happens first time :) maybe low is a wrong word, just can't find better one. And yes, I do. I do write logic on frontend e.g JavaScript. The only css I touch if I need to do adjustments and fixes. 
I‚Äôd recommend trying to get a grip on css/html... if you really dislike it then focus on Node.js as backend code. But the opportunities are more limited for pure nodeJS guy comparing to frontend JS. You can try to jump into Kotlin too... will take some time to adjust but it‚Äôs not crazy different and a very nice language to work with.
I _despise_ CSS frameworks. It's possible that I don't have enough experience with them or simply just don't understand how to use them, but for me they just seem to create problems. It feels like I have to wrestle _against_ the framework to get the interface to look exactly like it's supposed to.
I only hate CSS when coding professionally as that's the only time I care about the quality of my code, and all the CSS I produce brings me great shame.
Not sure why being a dickhead gets upvoted on this sub. Something having started years ago or millenia ago has no bearing on how much of a 'future' it has. Technology could have existed 5 billion years ago and his statement would still be valid.
Thanks for the heads up on that error! Appreciate it.
&gt; That's a very dangerous attitude. It's dangerous to tell someone they'll get more comfortable at something with practice? Dude's not even close to the point in his career where he needs to adopt a strategy for maintainable CSS, and if he gets hired somewhere he'll probably use whatever system they have.
1. Use a for() loop 2. You're long if() statement is only going to check if item10 is equal to 'ryzen7\_2700x' (or undefined in the second one), all the others checks are only for non-falsely values 3. You don't really need that long if() check on them all since you're also checking them individually. 4. Use a for() loop
That's a really good point. Something I have on my todo list is to explore just that - ways to efficiently and quickly tailor \`.env\` files for specific environments. I have looked at a few packages that do just this, but none are exactly what I want. Time to write my own!!!
If you don't mind to spend some time setting it up I recommend VSCode.
Nice article! It's very useful to periodically revisit JS builtin objects and libraries and this article has done a great job of reminding me of that. Thanks.
jfc
If u like writing JavaScript, start using node, express any database (mongo, postgres or a graph db), a front end framework (vue or react) and build full stack apps, microservices or even blockchain apps (decentralized applications or protocol engineering). U can just simple barebon bootstrap templates and not focus on html/css. Hope this helps. Good luck!
2019 and we still have this debate? Not to mention it is like comparing apples to oranges. 
You can be a front end developer and not be touching CSS. If you‚Äôre developing code for the front end, then you‚Äôre doing front end development. If you‚Äôre a designer and doing CSS, you‚Äôre also doing front end development. Everything isn‚Äôt cut and dry in this industry as you are claiming. You can be a back end developer and not do anything with database architecture, and there are DBAs for that, but you could very well do that as a back end dev too. You‚Äôre looking at it from the perspective that we need a new name but another way of looking at it would be that the definition of the role is changing - and an argument could be made that it has already changed. Like it or not, client side JavaScript *is* front end development.
I wasn't the biggest fan of them since I was taught Bootstrap first. Since then I've tried out Semantic UI (React) and have liked it my last few projects. It's nice for things like, modals or a tabbed interface without having to hunt down a one off component and hoping it works with your stuff. I gave up on their grid system rather quickly, and just use CSS grid. Now my wrestling is down to a minimum. Not completely gone but for the most part if I really want to change something I can override it. I've found that when using one I can get a somewhat usable interface rather quickly, but this is more of an advantage for doing lots of small projects rather then just working for awhile on one big one.
Hello, your library looks really great. So far I am using fuse.js because it makes searching inside an array of objects extremely easy(with different weight for different keys). I think that would be a nice addition.
Depends on your browser support matrix, no?
For the async search option, you should consider using promises/async-await instead of callbacks. Instead of: index.search("John", function(result){ // array of results }); Do: index.search("John").then(function(result){ // array of results }); Or: const results = await index.search("John");
Re. HTML/CSS: those two are not _that_ complex and you need to know how they work and the basics of applying them _at least_ if you work with web stuff. If your aim is to be working primarily on front-end, then if you actively avoid them you're likely to be at a [possibly severe] disadvantage against people who do. Back-end, if it's web-related you need to be able to deal with it when it comes up, but you don't need to be an expert in any way. By analogy: I don't really like Python and I dread it when I have to go poke around in the crufty "assorted python scripts for arbitrary tasks" repo that's built up over a few years. But I've got to do it, and when I do it means I'm gonna have to write some Python ¬Ø\\\_(„ÉÑ)\_/¬Ø . I'm probably never going to be expert-level in Python cos I avoid using it, and when I need to use it, it's just for throwaway scripting tasks But, but you also conflate design into this, and that's a bit different. Visual Design isn't software engineering, and visual design _definitely_ isn't CS. Design is hard, and it's a different discipline; there's no requirement to know any design to be a programmer, and it is [in my experience] unusual to be able to combine the two well _regardless of if you are a front-end-focussed programmer or not_. I come from a design background, and that's _definitely_ increased how attractive I am as a job hire. But in reality, design skills have atrophied relative to programming skills: it's very difficult to keep the two in balance.
im sort of the same. I use bootstrap for absolutley everything. I dont feel like I need to dress my apps up because the app speaks for itself. plus there are usually lots of designers looking to collab on things.
What will really blow your mind is that the whole online community is not smarter than you. One smart independent thinking webdev can outwit any number of trend following, blog reading, hipster webdevs.
No joke, any competent developer with a vague idea of the box model can pick up flexbox in an afternoon, tops. It's intuitively simple and has great support. If you understand floats, you can be a wizard in flexbox in 2 or 3 hours. Easily twice the power, half the code, dead simple naming convention, no hacks. Personally, I think Grid is the bees knees, but it has a bit of a learning curve to it that can be a put off to someone who doesn't use a lot of CSS. That I get. But it's worth the time, I think.
But but but the Industry demands ‚Äúfull stack devs!‚Äù Splitting up JS vs Styling and Layout devs? Egregious was of money! Slackers. /s. 
Amen sibling!
So here's some the common things i see that need to be fixed by because the front-end dev was weak on HTML/CSS: interfaces that don't pass basic accessibility standards, divs that should be button elements, button elements that should be link elements, lack of semantic elements, a bunch of JS being used to do something that will be simpler and faster with a CSS transition/animation, lack of visual pending &amp; error states, broken responsiveness...the list goes on. And on top of that, the interface will just lack polish in general. And BTW, I'm more of a full-stack dev, but I started my career as a front-end dev, so it does pain me a bit to see these types of mistakes by people who give themselves that title.
You should probably focus on backend. Producing something visual is probably one of the biggest motivators for doing front end, if you don't have that it's not really worth your time (unless it's purely for the money).
I was expecting to see reduceRight.
Nconf
Currently using Elasticlunr. Can you explain why I should switch if I don't feel the perf of Elasticlunr is problematic for my usecase?
That's a good article. I'm really hoping for the pipeline and infix function calls to get added. That would simplify a lot of my functional style programming
Just wanted to fit in the JS community :D 
OP can also do both. If a function is supplied as a second argument, return result to callback. Otherwise return a promise.
BEMCSS and SMACSS are good reference points. I find that making utility classes for everything makes life easier. Then you‚Äôre not getting into a hard spot where your CSS is all crossed wires and tightly-bound, overly-specific styles. It keeps things modular and more maintainable. I still run into some issues here and there but those tools have lessened them. 
I did. If you're looking for serious advice then I suggest you gain experience through practice by working on areas you're weakest. We're all weak at something. For example I'm currently full stack but my weak point is database work at scale. I don't know you, but based off of this conversation your weak point is front end if CSS elicits such a reaction from you. How do you plan on handling interaction and user experience cases. Your arguments currently fall under things I've heard years ago - when back end devs treated web development like some toy not to be taken seriously. People and client pay serious money to get this work done. If you think you're above understanding styling, user interaction and animation then how do YOU intend to take a chunk of that money. It seems like you want to feel validated, but i'm not interested in that. How can you make YOURSELF better, as opposed to complaining about how things don't feel fair. No one is asking you to come up with the design, if you're a dev AND can do design then you've got a great setup. Our role, regardless of if you like it, is to take the design and business requirements and build the actual experience from it. Rise to the occasion, or don't and move to backend. There's nothing wrong with hating dealing with design, it can be tedious and difficult because you're fighting against shitty adherence to standards across browsers. But seriously consider the way you project your opinion out to the world - it's incredibly unbecoming of someone who dubs themself a front end developer. Dev work is hard in general, front end dev is hard as well. Rise to the challenge or dont, its not my problem. 
&gt;would have been better Perhaps for you. If you‚Äôre handed a design and you just phone in the padding and margin because you can‚Äôt be bothered, you‚Äôre going to be delivering a bad product. If you hate it, leave it to someone that is writing SASS or LESS. They are still solving problems and making life easier by (hopefully) writing mixins, leveraging loops, functions, maps, etc for getting the front end done.
dom element targetting syntax like jquery. It's been like what a decade and a half and everyone is still using it? Time to admit that they are on to something and fold that syntax right in direct to vanilla.
Wouldn't that just be any browser with the console function and a text editor?
&gt; In recent years, JavaScript has grown considerably in size So did my node_modules folder.
I saw the proposal for pipeline operator, but is there a one for infix calls?
&gt; 1.4 Categorizing values ``` const typeNameAsString = Object.prototype.toString.call(VALUE).slice(8, -1); ``` There you go, no library or special cases needed for anything after IE 10.
Awesome, thank you for this. As someone who's resorted to scraping more than once to pull data off ESPN, I'm stoked to have this on hand next year.
I actually don't think so. The author mentions it in conjunction with [the operator overloading proposal](https://github.com/littledan/proposal-operator-overloading/), but the only thing I could find was a thread on [esdiscuss](https://esdiscuss.org/topic/suggestion-infix-operators-functions). I definitely agree that infix function calls are more flexible and I would rather have them than operator overloading. Having both would be nice though
Full stack has it's place. If you are in a big shop with a large team on large project. It doesn't make as much sense to have full stack people except maybe in tech management/lead position, since they have enough experience with multiple aspects of a project and can help guide the project more holistically than someone without such broad expertise. In smaller companies, with smaller teams, and smaller projects, full stacks developers tend to be more efficient and adaptable to the needs of the project vs trying to get someone specialized for each role and manage that logistically. With full stack engineers, they can be mostly working on the new ORM integration one week, implementing design specs the next, and standing up the CI/CD pipeline the next. It helps the smaller company compete with larger ones by leveraging their relative agility. For the smaller shops, it's a leaner concept with less overhead and more speed, but for larger shops it more about quality. It doesn't make as much sense for Microsoft/Apple/Amazon to hire many full stack devs for their full stack capabilities, but it makes a ton of sense for smaller contract/client/boutique development shops.
Sounds like a good idea for a PR.
Uhhh, you have the definition of "gatekeeping" reversed dude. You are the one "gatekeeping" claiming certain knowledge necessary to be a certain kind of developer. And if you read more carefully, you'd have realized that I'm saying he won't have to write ANY CSS. I don't know what sort of team you work on, but any sizable team is going to have a separation between who is writing CSS/HTML and who is writing JS/TS. CSS isn't a "language" it's a style markup. There's no logic in CSS, no branching statements, etc. It simply tells the browser how to render the HTML, which is also simply markup. And yes, the person doing the Photoshop isn't going to be the person writing the CSS. But chances are, the person writing the CSS/HTML isn't going to be the lead JS/TS developer either. I could arguably say that you're one of the people writing bloated/inefficient JS/TS (which in modern sites has FAR more impact on UX than HTML/CSS inefficiency/bloat), because you've split your time/efforts between multiple disciplines compared to someone who spent the time on a single problem domain. I don't happen to know your level of JS/TS sophistication, but I will say that I've seen a lot of self-proclaimed "frontend" developers who have very pretty looking demo sites/projects but when you pop over to their source it's incredibly poorly written with bloated methods and a general spaghetti approach that's cringe worthy. Great CSS, but their actual programming efforts reveal someone who only learned JS/TS and never read things like "Code Complete" or bothered to learn how to organize complexity in code vs simply "making things work somehow."
Gorgeous design !
I edited my comment to clarify more. The labels are all dumb. It‚Äôs hard to talk about without all this pointless debate. We pretty much all agree that T-shaped skills are ideal. Any good engineer can grasp and discuss the entire stack to the extent that the context of their own work is covered. I‚Äôm mostly annoyed by everyone these days calling themselves ‚Äúfull-stack‚Äù because they can do a couple things on the other side. And yes, there are sides; there are many distinct differences between client and server applications. It‚Äôs rare indeed to find someone who is an *expert* on both. And if you‚Äôre not an expert on both, why come out of the gate with the ‚Äúfull-stack‚Äù label? I think it‚Äôs a problem with both interview processes and engineers‚Äô desire to converse. Out of that came these super unhelpful terms.
I just wish that were the default expectation, and people had to clarify otherwise. Like why the hell would a paid engineer arbitrarily avoid any of the stack? But to express that, some use ‚Äúfull-stack‚Äù, which doesn‚Äôt make much sense for the guy who can take way too long resizing a couple divs or the guy who can take way too long writing a flat database query. 
int64 ;-)
strong typing
[https://github.com/zsoltc/worley-noise](https://github.com/zsoltc/worley-noise) After two years dusting off and working on my noise generator. &amp;#x200B;
`const $ = document.querySelectorAll.bind(document)`
&gt; Shit was revolutionary. There were multiple more robust and better designed two-way data-binding frameworks already available.
 Object.prototype.toString.call(VALUE).slice(8, -1) It's so readable, it basically documents itself.
Thanks for mentioning this; I had no idea it existed.
You are in a vast minority of devs who liked backbone over AngularJS
&gt; backbone KnockoutJS works well. &gt; vast minority Who cares. The majority can do whatever they like. They can eat McDonalds drink Starbucks and hang out on Facebook if they so desire.
If you're not learning, go somewhere where you can learn. If you like your team / environment, approach your boss and ask for more challenging work. My dad always told me "they can't give you something they don't know you want." 
If you're not learning, go somewhere where you can learn. If you like your team / environment, approach your boss and ask for more challenging work. My dad always told me "they can't give you something they don't know you want." 
Yes
Of course JavaScript can be used without HTML and CSS, but if you‚Äôre just learning it, especially if you plan of using it to design websites, you should definitely learn HTML and CSS as well.
Relational. If you have extra fields that are not well defined, you can always stick them all into one json field.
1. Why *parent* can not be a collection/array though? With syntax like `&amp;name` for current property's name , `&amp;parent.name` for parent's property name if there is only one parent, and `&amp;parent[*index* or *regex* on *type* etc].name` for any of the parents if there are many? There are so many things in JS are do (almost) the same in different ways but there is still no ways to actually make object literals work (so we have to deal with clutches like *reduce*) and yet there are no proposals to solve that (https://github.com/tc39/proposals)? JS already has a lot of things that are much more narrow than what we are discussing, so **they can not** offer the excuse that expanding on object literals is too peculiar to care. 2. "Decorators aren't like Proxy, though. They don't intercept at runtime." -- from what I hear, it does not really change much for end-users of the software. Especially since the engines have optimizations for *proxy* so they are not really "surprised" with them in the code just because they intercept the calls in real time; for engines it almost looks like the calls were meant to go to proxy since the very beginning. So the real question is mostly about what is more convenient for programmers. Obviously, *proxy* is more versatile, so maybe just not bother with *decorators*? The more so it is a rare feature that most people rarely use anyway. Or they are still better (at least for programmers)? 
Consider being a car manufacturer. You like building the engine but don't really care about the bodywork, seating, paint, and how things are kept together. You just want to build engines. That's fine. You can build an engine, add wheels to it, and it'll technically be a "car", but at some point you'll be asked to steer it to a certain direction, hit a tree, don't have air bags, and die on imp-- Okay I'm going nowhere with that. What I'm trying to say: Be T-shaped. Know the basics: 1. There is more to HTML than just a soup of `div` elements 2. Know modern CSS, don't worry about floats and such Both HTML and CSS are very easy to get the basics of, at which point you can choose to completely ignore it (in which case: focus on back-end development using Node.js), or maybe you'll grow to love it. &gt; So my question is am i obliged to learn html and css aswell and why? Not obliged, but it's heartily recommended. Again: T-shaped. Your knowledge of HTML and CSS can be basic, and your JS knowledge can be deep. Just don't ignore it.
Also at [grid templates](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template), which will probably come in handy a lot more often (for simpler layouts). ...But you will still need to learn about formatting context, and "clear" is actually great for that.
You can use Visual Studio Code and expand it with plugins as you need them. Some extensions that you might like are: * ESLint * HTML Snippets * ES6 Code snippets * Live Server * Beautify
The DOM APIs aren‚Äôt part of the JavaScript language spec. 
You can't make a website without HTML and CSS. The biggest use case for Javascript is for providing dynamic behavior on top of the HTML and CSS. You don't have to necessarily become an expert in HTML and CSS but you should know the basics or you will have trouble making much use out of your Javascript knowledge.
...They're not rubbish, they're just not the ideal tool for layouts, just like tables weren't. Say you want to sprinkle some images throughout an article text and you want them on the right with text flowing around them, you're going to need floats.
https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template It takes 30 seconds to understand and start using it.
I agree. Although you could just as easily wrap it in a `promisify`
Why on Earth would anyone write an article like that? JQuery and React are two completely different types of tools used for two completely different things.
 const resource = await fetch(jsonService); case (resource) { when {status: 200, headers: {'Content-Length': s}} -&gt; { console.log(`size is ${s}`); } when {status: 404} -&gt; { console.log('JSON not found'); } when {status} if (status &gt;= 400) -&gt; { throw new RequestError(res); } } So, basically: const resource = await fetch(jsonService); with (resource) { if (status === 200 &amp;&amp; headers['Content-Length'] === s) { console.log(`size is ${s}`); } else if (status === 404) { console.log('JSON not found'); } else if (status &amp;&amp; status &gt;= 400) { throw new RequestError(res); } }
 &gt; Do we need operator overloading? Doing it per instance is a good way to solve 1.1 and 1.2 but `@plus` or decorator based, yikes. &gt; optional chaining I'm a believer in letting people shoot themselves in the foot and it seems nice to have, as some of the current checks just get annoying, but unfortunately people get carried away and it leads to shit code. More and more I'm liking the Go route of minimal language syntax. 
I've been working with TypeScript a lot lately. The prospect of a non-Node native, typescript runtime is giving me a bit of a chub. 
Of course. HTML and CSS are so incredibly simple, why not? If you have the ability to learn JS, those other two should be a walk in the park.
What aspects of the project are you familiar with? What would you bring to the table? Every day someone comes up to me with a "great idea" which they only "need a bit of help" to implement. You're looking for someone to implement a full website, which is not a small project and most of us developers are incredibly busy.
Thanks for this hint. I added promise support in v0.3.1
Hey mjcov, Thanks for the reminder. Ill add it also.
then you shouldn't... focus on other stuff that will make more difference in your project
What is best practice in production? -Run a backup instance for failover? -clustering? -possible to periodically export an index to disk and hot reload it on recovery? This looks very cool.
The bigger, the better they say.
He missed my favorite: Obj.param.value.valueWeCareAbout Imagine an object where every step before the value we care about could be null I want to be able to say Const newVal = Obj.param.value.valueWeCareAbout And safely unwrap that to get the value. It resolves to null or the property value. In actual implementation you'd have an operator or function call to explicitly say this is what you want. 
I'd learn them first.
I would learn HTML &amp; CSS first, will make everything a lot easier later on
Async do not perform faster than sync, but it will help to make sure that tasks will not blocking the UI during runtime. Especially when adding large contents to the index, a background prozess is less agressive.
A "parent" would be difficult, likely inconsistent, and there's very little need. Once you throw in the index/regex/type stuff it becomes very complicated. The original example you have is the easiest, clearest version of that data and that uses no tricks or additional APIs. And if there was a need for it, the developer community would speak out and it might then become a proposal. But no one's asking. In fact you're the first person I've ever seen ask for it. &gt; The more so it is a rare feature that most people rarely use anyway. Are you saying decorators aren't used? I already mentioned [typescript has them built in](https://www.typescriptlang.org/docs/handbook/decorators.html) angular, a very big, popular framework that indeed [uses decorators](https://angular.io/guide/architecture-components#component-metadata). They're even used with [React-Redux](https://medium.com/fraight/react-redux-decorators-8b38f3b9ef2f). One of the strongest arguments is for [@bound, as mentioned in the proposal](https://github.com/tc39/proposal-decorators/blob/master/bound-decorator-rationale.md) (in fact something I use regularly). Proxies are much harder to implement, and are less performant since they are runtime traps, called for each use of the API whereas decorators simply modify, change or adds to an API when it's defined. If you want to use a decorator, you just use an `@` and the decorator name before something - this all within the well-known semantics of the language and not through some API like `Proxy`.
Sounds like you're talking about [optional chaining?](http://2ality.com/2019/01/future-js.html#the-pros-and-cons-of-optional-chaining)
Absolutely. You should at least spend 1 day learning html and the basics of css. You will probably want to use javascript to modify html/css pretty soon. 
Well, there's the boots on the ground reality of what we need and then the spec I guess. I mean dom manipulation would be pretty silly in nodejs given that its server side, but client side it makes a TON of sense.
Indeed, much better than the solution the author suggested: &gt; It may be possible to fix this via a library (I‚Äôll create a proof of concept, once I have time). Which would look something like: ``` &gt; nvm i ‚Äîsave some-library-name ... const unnecessaryOneLineDependency = require(‚Äúsome-library-name‚Äù); const typeNameAsString = unnecessaryOneLineDependency.typeof(VALUE); ```
I‚Äôm so glad to see so much widespread support for typescript these days.
[removed]
My understanding of optionals come from swift where there isn't the added convenience of being able to just pull the data out. Instead it's there just to indicate from a type checking standpoint that this might not exist. So you the programmer have to accommodate it like we do now. But hey if it works and does what I want sweet. I want that. 
There's a typo in the second word of the article... In the title.
Good point, honestly! Though I've never seen it in use, and I think most who might know about the syntax probably think the same as MDN: &gt; Use of the with statement is not recommended, as it may be the source of confusing bugs and compatibility issues. See the "Ambiguity Contra" paragraph in the "Description" section below for details. 
Doesn't make it less true. The full stack fad is dying as tech stacks are more and more complicated. Don't need to be snarky.
First: It is quite unethical to help with those assignments as you should have to figure out. Second: Where are you stuck?
Basically on looping through an array 
https://www.w3schools.com/js/default.asp
Hi, Here's a quick demo of swapping the circles. i haven't implemented the circular motion, but I hope this helps. &amp;#x200B; [https://jsfiddle.net/v2de1rs5/1/](https://jsfiddle.net/v2de1rs5/1/)
Supported via BigInts and coming to JavaScript relatively soon: http://2ality.com/2017/03/es-integer.html#casting-and-64-bit-integers
Absolutely, I made this mistake last year, but this year, I plan to be a better frontend developer and learn the tools of the trade. Trust me, there's no better freedom than knowing you can build and style anything the way that works best for you thanks to a freedom of not depending on frameworks. Also CSS will eventually be a struggle for those who don't want to learn it, but have to use it. If frontend engineering or development is really your passion or goal, it's just better anyway to atleast be comfortable writing CSS and HTML (I think you don't have to be an expert on these, just be comfortable with it). Besides, you these are just tools and the goal is the main deal.
&gt; everyone is still using it Who is everyone? I haven't used it in a few years. Native DOM API is good enough (e.g. `querySelector`) for when you need to use it, otherwise frameworks eliminate the need for low-level DOM manipulation
https://www.geeksforgeeks.org/loops-in-javascript/
Knockout and Angular are very different. Knockout is more akin to React. It is not a SPA framework 
I've been contributing to the deno ecosystem recently. It's really fun to play with. Haven't gotten to the point where I use it regularly, or in my day-to-day life, but I definitely could see myself doing so when the community has grown a bit and the API has stabilized
Ask TypeScript
I have the website (Www.CheatSheetPros.com) and I'm looking for the optimizer aspect. I'm willing to pay someone to build this in their spare time.
You‚Äôre right. Client side it does make sense. Which is why DOM APIs are, conveniently, already available in client side environments that need them. 
Don‚Äôt know why you‚Äôre downvoted. Bootstrap has been the defacto standard at my last three jobs Most places don‚Äôt care about UI THAT much 
I agree that it's not readable or even remotely intuitive, even for devs who know the quirks of JavaScript. But I'll admit it gets around some common typeof and instanceof pitfalls gracefully. It's my go-to way to differentiate objects from arrays. See bottom section of http://luxiyalu.com/object-prototype-tostring-call/ for an example. TL;DR: that ugly function is exactly how I wish typeof behaved.
&gt;Having both would be nice though Exactly, I'd LOVE some operator overloading in JS. I have two Point objects. Why can't I just + them? I have two sound synthesis nodes. Why can't I just * them? Yeah there are people that abuse operator overloading, but people can abuse anything. I don't know the arguments *against* it to be honest.
Guess the author.... wasn't type-safe after all. 
Yes....Javascript doesn't run on a website without at least some HTML. freecodecamp.com is all you need
I saw this post and was going to type just "yes" but you beat me to it hah.
Although you are right, hacks like these is exactly why all these \`is-x\` oneliner packages exist. It's better to fix this in the language itself IMO, even if it's hard. &gt;It's my go-to way to differentiate objects from arrays In case you don't have to support &lt;IE9 \`Array.isArray\` does this.
How come fuse scores 0 in the benchmark?
Soo... hows ant vs material? Which one do you like more?
Care to explain? TypeScript is just JS with.. types. I don‚Äôt get why people treat TS as if it‚Äôs a different language? Why don‚Äôt you like Node?
And that's all the things that could be avoided by having other do it and by using components that already take care of this things. Writing frontend app logic in js != all this things you mentioned. 
I think strong typing is overall doesn't have a good ROI. The lack or strong types is one thing I really like about JavaScript
Not that you'd want to, but you can make a complete website without CSS or javascript. I made websites before CSS and JS existed. 
Haven't read the article, but interfaces would be nice.
Want to elaborate?
Because of you can run typescript without compiling it you can build more efficient applications
But I transpire everything so I can use the coolest features. :/
It‚Äôs a comment block so everything between the asterisks won‚Äôt run when the code is executed. It‚Äôs there for documentation purposes http://usejsdoc.org/tags-example.html
First of all, great work! I just have a few suggestions: - Take a look at how other popular open source libraries are packaging their libraries. Convert source code base to es2015 modules and build modules with different module formats and different entry points in the `package.json`. - Refactor API and make it tree-shakeable instead of building different variants of the library. - Rewrite in TypeScript. IDEs are using types to improve DX not just for typescript developers, but also for javascript developers.
Since you show the buttons on screen, then maybe make them clickable with same interaction. I am on Phone so couldnt check out the result sadly. Love the idea though :)
That's what I was thinking but I wasn't sure because it's given a different color in my text editor. Much appreciated! 
[Here's a great write-up](https://medium.com/javascript-scene/the-typescript-tax-132ff4cb175b) Tl;Dr: I don't believe the benefits of strong types outweigh the costs of using them.
If you want to get into web development, and especially, front-end development, you will need to know html and css. It's not essential for backend development (i.e. nodejs). I primarily code in nodejs at work, and have not touched a single line of html or css. However, learning the basics of html and css is not hard and it will help you a ton to just understand what they are, what they do, and how you can use them.
Thanks for sharing, great article!
Have a look at [https://www.npmjs.com/package/webpack-plugin-serve](https://www.npmjs.com/package/webpack-plugin-serve). Far better alternative to webpack-dev-server.
Wow. Never knew that. It means the opposite of how it‚Äôs normally used!
True, Typescript is a superset of Javascript -- it has features that Javascript doesn't. The advantages in running Typescript "natively" revolve around not having to translate or transpile your code into Javascript first. I'm sure you aware, but Javascript has a lot of really weird or stupid shit that happens for a whole host of reasons. That transpiling / translation step can obfuscate the code that's _actually_ being run and result in some very difficult to chase down bugs. The particular list of issues changes all the time as they are discovered and fixed. It's also not true when I said that Typescript is a superset of Javascript; you can write javascript that is invalid typescript quite easily. Try `var foo = {}; foo.bar = "seven";` and typescript will bitch at you. Finally, as addressed in the OP's link -- deno appears to be adhering to the ECMA specification for modules, and using `import` instead of node's homegrown, out-of-spec `require()`. That's awesome. 
Thanks for the response. That makes a lot of sense. And seriously! Require is so ugly. Why doesn‚Äôt Node just support imports natively? How frustrating. (Without making me name my files .mjs and using ‚Äîexperimental-modules)
Rule of thumb is throw the error as far back as you can. Dealing with it is usually up to the calling class.
HTML is a markup. All it does is determine the general framework of how a page will look. JS tells the page to do stuff, like add or remove HTML elements, determine when things should be displayed or not etc. Learning JS without knowledge of HTML and CSS is almost pointless. Learn it all! Best of luck to you.
I'm alright at CSS but fuck me it's so dire. I hate writing HTML too because it's labourious. Then again that's the 5% of your app everybody actually sees, so it doesn't matter how rad your js or backend code is, nobody cares as long as when they click the pretty button it works. It's worth persevering and understanding the whys of CSS so when you really have to do it you can figure out how to do a bunch of things quickly without making it feel like such a grind.
Why would I want to do that of that gives me no joy to work on this things? And I can make myself better in areas where I can get joy from doing so? And why should I move yo backend if I'm already doing fine on frontend ? Do you realize that there a lot more work on frontend that css and you are trying to fit me into you shoes. Everyone will always have a weak points no matter how much you learn, you can't be good with everything. And interactions and user experience is a whole separate beast from the css, it's a whole level higher things.
So my model should throw and the controller should catch? 
Get into ad tech, open up network console, go to cnn.com and filter all js requests, see what all ad related javascript is doing, some amazing things man, day to day work is 1% html or css rest is pure js business logic
Yeah. Sometimes you have a good reason for catching early, like retrying or changing on error into different type. 
I do like a clean controller, and I've read an ideal controller is only a few lines, won't it get cluttered with all the try/catch blocks? 
I still see it everywhere, and we're going to keep seeing it everywhere for a long time. I do see a lot of people turning on it now, but I don't think that is coming from a technical place, I think its sort of like how when you get a celebrity you get people who hate them and its a personal thing. I mean it really is great syntax for the DOM element, it does a lot of other stuff but I only use it for that one feature because although native javascript does have DOM element targeting and manipulation it still isn't as intuitive, its got a sort of clunkier flow to it than jquery. So I dunno, do you want to drink a glass of milk that goes down smooth or chunky, like their both milk, they both do the same thing, but one you just sort of like and the other you wonder why its like that.
A way to run untrusted code isolated. Especially a way to limit what something like eval can do.
As a tech lead who mentors my juniors, this is the correct answer. You can‚Äôt make a website without css and html knowledge. Your foundation is in html, start there. 
Mintable ‚Äì Roll-your own Mint clone for managing personal finances using the Google Sheets and Plaid APIs
Thank you so much, will put this to use for next season!
Well, obviously Javascript is not needed. And I thought it better not to confuse the issue by stating that CSS is not needed for a barebones website; I assumed the OP wanted to make a web page that is more than some text on a white page.
Yes
Shouldve used typescript 
I didn't see this reply, went and replied "yes" myself, and then read it Now I've deleted mine Take an up vote you two quicker than me bastards
This sub is full of terrible advice. If you‚Äôre interested in making web apps down the line put down JS and focus on html, CSS and even SEO and meta data basics. Get your fundamental priorities in order before learning the more complicated stuff. By learning JS first you‚Äôre essentially trying to learn how to rebuild a car‚Äôs suspension before learning how to change a tire. 
True. Now imagine not needing to transpile
Yes
Because `import` and `require` work *very* differently.
Also want to give proper credit to Evan You ‚Äì the creator of [https://github.com/yyx990803/build-your-own-mint](https://github.com/yyx990803/build-your-own-mint) which Mintable started off as a fork of! :) &amp;#x200B;
Import is more flexible. I am not asking Node to get rid of require; just make import available as a feature in the standard runtime. 
It's i-1 because the loop starts at 1 but arrays begin at index 0