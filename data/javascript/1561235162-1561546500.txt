I cannot imagine what kind of speed performance needs such a huge amount of storage. RAM? yes, but storage? I can't think of one.
[https://hapax.bitbucket.io/lava/](https://hapax.bitbucket.io/lava/) lava reload to get a new
When I am \*developing\* I like this comment block &amp;#x200B; //\* console.log("This line of code can be commented or un-commented, just by changing the first line."); // \*/ &amp;#x200B; If you change that first line to \`/\*\` then it is commented out. If the first line is \`/\*\` then the code is active. &amp;#x200B; \`// \*/\` is also something I search the code base for before committing.
I'm personally really happy with rematch.js https://github.com/rematch/rematch
Yarn is a package manager. It's sole purpose is to download packages. Packages take up disk space. I'd expect it to use more disk space than memory all things considered.
RAM is rarely even a consideration anymore on modern computers. Working memory is rarely the bottleneck of performance. The main bottlenecks are processor cores/speed and network connection. A cache (especially a 3.5gb cache) significantly reduces the need for network usage
Why even use Redux if you're going to abstract over it completely? Just use a different library with a different mindset like MobX
It's an excellent idea, but I had some questions. 1. Why use decorators? 2. Aren't decorators, or at least its specification, subject to change in the future?
Hi /u/i_am_extra_syrup, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
What u/papasmurph linked does offer speech to text. You have to code the processing of the return yourself but it does work as speech to text.
Can you please elaborate? What is annoying about it?
Ctrl+k; ctrl+c (u to uncomment) for visual studioers
Handcoded with love by u/neurofluxation
[removed]
Jesus \*\* \*\*\* holy \*\*\* &amp;#x200B; I've been lookign for something jsut like this for ages! Where can I send all my money because you my friend, just made my day!! Great work!
Yes. It is. Comments are needed only for some weird thing for explain why something is done like it's done. Usually you should be able to write it in ine-liner. If not, you should thing your code twice. You shouldn't use block-commenting for this kind of stuff.
How about hooks with useReducer and useContext?
Try out [javascript.info](https://javascript.info) they have great learning resources :)
Not the guy you're asking, but while I used to champion MobX as the best state management library I switched back to Redux. Somewhat thanks to Immer taking much of the pain away, but also because the benefit of immutability became hard to ignore. React also seems to be leaning more and more towards assuming immutability, as is evidenced by the inputs on hooks. These can be very tedious and troublesome when it isn't always clear how an object can change and exactly what you need to be watching. I don't have any real evidence to show that this trend will continue and I know there are MobX hooks which help with this, but I still get the impression that it's the direction of travel for React.
You're clearly looking for someone to troll, good luck with your sad life.
 http://eloquentjavascript.net/
Exactly! &lt;3
Yes it does, all in one. You don't have to deal with the audio yourself. Just allow it to access the microphone. I tested it today, and there's sample code. Worked fine in Chrome, but it asked for permission every time.
https://github.com/getify/You-Dont-Know-JS is a pretty safe bet.
Can you share this file or a screenshot of the syntax error?
I am curious why you code that way, if you wouldn't mind explaining. You also had a sad face emoji that at least made me think you didn't like coding by hand. Idk
A JavaScript file is just a file with an extension .js containing JavaScript code. No &lt; script &gt; tags. That's HTML and the way to run JavaScript from HTML, either by loading a JavaScript file or putting JavaScript code directly in the &lt; script &gt; tags. You can run your JavaScript code in your file in a browser by loading an HTML file with such tags in it, or you can run your JavaScript directly in Node.
Hi /u/nesha18, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
To tack onto this, the environment JS runs in can effect what "features" you have available. For example if you are running JS in a browser then the browser provides the "document" attribute, which represents everything on a web page. However, if you are running JS in NodeJS then you won't have access to any "document" attribute (unless you create one and even then it wont be a web pages document).
Only did a :\\ face because I was expecting backlash, which I did get to a certain degree. I code that way because I enjoy it. Spending all my time learning libraries and Googling bores me.
What editor are you using? Maybe it doesn't support JS.
touch files.js
Like what IDE? Sublime Text
I switched to Redux from MobX. It's great on the surface, but all the hidden 'magic' (even though in concept I knew how it worked) led to all kinds of difficult to find bugs. Of course, this was a couple years ago and I'm sure things are better now, but just in principle I can trace everything in Redux, whereas with MobX I have no idea what effect mutating a variable will be.
So you're not even playing the flute? Kids these days.
Its very simple actually. Every time you \`yarn install\` a package, that package and all it's transitive dependencies are downloaded and stored in a local cache on your harddrive. &amp;#x200B; The next time you \`yarn install\` the same package, yarn just uses the local copy instead of re-downloading it. &amp;#x200B; This is also how yarn is able to \`install\` packages while offline, if you have installed them in the past. &amp;#x200B; \----- &amp;#x200B; Additionally, if you use yarn's Plug'n'Play feature, or yarn v2 (Berry) then packages are no longer extracted to the \`node\_modules\` directory in your actual project, and instead libraries are resolved from the central cache at runtime, so it actually saves a ton of HD space because instead of having the same dependencies extracted into several projects, then all share 1 copy from the cache.
The reason you have this problem is because you do not have a fundamental grasp of the basics. Keep coding examples of the core concepts until you do. It does not mean that there is anything wrong with looking something up - i still do it, even after a lifetime of coding... A good example of this is someone who can speak a new language but may use the wrong word or phrase and ask, 'how do you say...?' vs. someone who doesn't know the words and sentence structure at all. Continue what you are doing and stay curious, keep looking up stuff but DO until it 'sinks in'. Then do it a thousand thousand times again because you enjoy showing off your new skills. At the rate and depth of today's tech, it is nearly impossible to recall or just do from memory. Remember, you MUST DO and keep doing. Then do it again. Wash rinse repeat.
When you control the entire application from top to bottom and have very solid expectations of all of your data models, I'd 100% agree. When you're dealing with less than well-built third party APIs where every endpoint returns a data-structure slightly different from the last, these kind of things are necessary. Yes, we should be normalising the output, but optional chaining is great for that too.
I think a lot of people here would probably recommend using VS Code as your default JS editor. I've been using it for a long time and I have no complaints. There are tons of plugins and the syntax highlighting is very good!
what the hell am i looking at here?
I've been using MobX at my new job for about a month or so now. I find MobX trades one set of problems for a new set of problems. Pros: * Feels like a lot less boilerplate building your app without all these events to dispatch to then be handled by your reducers to then update the state * Less code can often mean easier to understand * Observables on the surface aren't the most difficult thing to grasp * When x changes, if something uses x MobX tells it to update * You can almost replicate `this.setState` without any of the mental overhead and boilerplate of dealing with `this.setState` and all the problems you manually encounter, which is part of where `PureComponent` came from. * You have 4 main parts to MobX, observables, observers, actions, and computed, so what it takes to pick up MobX and quickly start using is at least as fast as Redux Cons: * Correctly using the right decorator/function * https://mobx.js.org/refguide/modifiers.html * There are several types of observables to concern yourself with, which has a larger learning curve and is more error prone * Computed's true behaviour doesn't seem very obvious https://alexhisen.gitbooks.io/mobx-recipes/content/use-computedstruct-for-computed-objects.html * computed.struct seems to be what you want in most cases, but isn't the default as you'll often do things like create some new set of data from an observable set of data ie `someArray.filter(_ =&gt; _.isTruthy)` * A central store with reducers makes it real easy to see previous state vs current state across your app and what event caused the state change * MobX seems to have mostly pushed classes thanks to the decorator/classes being pretty clean and component's maintaining their own state, but React was moving and now has moved toward an even more functional style with the hooks. * Older versions of MobX (v4) didn't handle dynamic keys, so an observable Map or object spreads `{ ...ogObj, newProp: val }` were your choices. The latter is basically how Redux tells you to handle state changes anyway. * Accessing an observable property from a parent component that isn't using the property is an anti-pattern as it causes the parent to render again if the property value changes. You have to essentially pass an observable object containing the observable property into your child component, which then accesses this observable property. * Bad `&lt;Child someProp={someObservableValue} /&gt;` * Good `&lt;Child someProp={objWithSomeObservableValueAsKey} /&gt;` * This makes MobX components awkward if you were to let's say move to Redux as you'd want to undo this sort of pattern and outside of that it makes components feel less decoupled as your primitive values from an observable shouldn't be passed down on their own, ie. &lt;Child someProp={stringFromObservable} /&gt; is bad. * The above makes MobX powerful with asterisks as it requires it to be used properly as long as you learn the non-obvious parts and behaviour that seems to be counter to your logic. * I feel like Redux has a lot less framework specific knowledge gotchas to not only being productive, but for performing optimally Is MobX better than Redux? At this point I'd say it is largely different and it is really for everyone to decide for themselves if they prefer one over the other.
Nope, it's CMD+/ there too
The whole point of Redux isn't simplicity, it's about replayability. If you can go back/forward on each state change step, then it adds an element of resilience/debuggability to your app. To do this you gotta drink all of the Redux cool-aide, exactly as it's spelled out or it's not worth it at all. If time travel is not valuable to you, then it's not worth using Redux - writing reducers, selectors and all that is a lot of work for proportionately small functionality. Just use vanilla js, streams and some factory functions to make stores pertaining to domains of your front end. Here's an example: [https://stackblitz.com/edit/react-mbqymp](https://stackblitz.com/edit/react-mbqymp) Ya'll overcomplicate front end
Overzealous. The post was fine.
I'm gonna preface by saying I went to a very good school so that definitely helped but I think the steps are the same regardless. Studied algorithms Studied the DOM and vanilla JavaScript Created a few personal GitHub projects (mostly web scraping stuff, a simple game engine, and a portfolio) Learned React and fell in love with it. Read cracking the coding interview religiously and finally just applied to a lot of job postings.
I built a few small personal projects to show what I could do and then got the first gig through networking via my mates from uni
&gt; it shows a syntax error "It" being what?
Nope, not on windows
Obviously CTRL instead of CMD on Windows :roll_eyes:
[removed]
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Dude, it’s a 2 part shortcut on windows https://docs.microsoft.com/en-us/visualstudio/ide/default-keyboard-shortcuts-in-visual-studio?view=vs-2019 Ctrl+k, ctrl+c to comment; ctrl+k, ctrl+u to uncomment, by default, in visual studio on windows
Yep exactly right, you can also just install normally with yarn and not use npx: `yarn add embedme —dev’ In your package.json it would then be `”postbuild”: “yarn embedme src/**/*.md”` I’m glad this tool sounds like it will be useful to you
i highly recommend easy-peasy
Things are definitely changing. I heard recently that the latest iteration of the spec has a new keyword for defining decorators, which is interesting but obviously a massive departure from how TypeScript or Babel support them now. As someone that uses them in apps at work and had written some open-source ones that others use, I would *definitely* stay away until the spec is finally settled.
&gt; Studied &gt; Created a few personal GitHub projects &gt; Read cracking the coding interview Good tips.
https://javascript.info
Thanks for that I'm on mobile and fucked up the formatting
Started learning html and css. Progressed to doing Wordpress development and learning php MySQL and some JavaScript. Got a job as a “Wordpress” dev at a small agency, moved on to a corporate job doing Wordpress and learned JavaScript frameworks on the job. Now that’s all I do is Angular/React/JavaScript consulting.
But you still need to isolate your domain from the incoming API data. Everything in your application should depend on the data model *you* control, and what those business rules are. Then there should be a very thin mapping layer that sits between the API and your domain model. That mapping layer is what handles the potentially dirty/bad incoming API data, and constructs the domain models from it. Your domain models should be bullet proof. A missing piece of data from the API should carrying meaning in your domain model, and your application should be able to rely on that meaning in a consistent way.
Just enclose such values using double quotes as per the RFC. See example http://siara.cc/csv_ml/screenshots/csv.to.xml.3.3.Quote.handling.htm. It shows how delimiter, newline and quote can occur between values.
Agreed. &gt; That mapping layer is what handles the potentially dirty/bad incoming API data, and constructs the domain models from it. Optional chaining can be useful here though.
Thanks for sharing! Why not make firebaseApp a singleton so people don't forget to set it?
I'd like to submit [Remake.js](https://github.com/panphora/remakejs) for your review. It's a low-code front-end framework that lets anyone build a web app quickly and easily using nothing only data attributes. These data attributes auto-save all the data on the page, automatically create inline edit areas that makes deleting and editing data seamless. And they handle adding new elements to the DOM by automatically rendering templates on the back-end. You can try [the demo todos app](https://github.com/panphora/remake-todos), which I built during a live stream on Twitch along with another, more complicated app. The goal of this project is to give web app developers access to new primitives that make syncing and storing data in the DOM painless, so even someone who only knows HTML and very little JavaScript can build a web app in a day or two. On the GitHub page, I have a [Public Roadmap](https://trello.com/b/BXvugSjT/remakejs). I just released it as an NPM package today. Next, I'll be: * Improving the API a little * Doing live tutorials every week on how to use it * Releasing more documentation and sample apps * Recording tutorials videos * Finishing the website, which is currently in development
Sometimes tracking down bugs related to reactions is annoying and much more difficult than reducers. With reducers, I pretty much immediately know where the data gets changed, but with observers and reactions it's not so clear.
Maybe I'm not following you but as far as I understand the core concept behind redux is immutability, while mobx is mutability. It's not really about syntactic sugar.
This looks sweet, thanks for pointing it out!
2001 Real estate marketing sites (html) 2003 Then add tech support 2004 Then made ticketing tool 2004 Then full time dev
Coop placement/paid internship while I was in university.
I wrote a related utility which allows you to pipe arbitrary text into code blocks. I use it mainly when I'm writing a CLI tool: I pipe its help text into my readme. It's in python, though, and is pretty dumb about how it finds code blocks. https://pypi.org/project/pipe2codeblock/
I mean... Python is sexy
**[Element.scrollTo\(\)](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)**
jQuery?
first look - even if search results come back as negative, the image from previous search is still shown
How come when I click the Find that film! button nothing happens? How can I fix it?
is JS enabled in ur browser? this works in mine
I'm not sure why, but it works on Codepen, but not on [Repl.it](https://Repl.it). This homework was assigned to me on [Repl.it](https://Repl.it). It even says in the javascript comments that the search isn't working. Do you know why it works on Codepen but not on Repl.it?
This is the correct response.
🤩
I love how there's a bunch of bootstrap classes in the HTML but bootstrap isn't being loaded. There's a lot of hot garbage in that code overall, especially in the processAPIResults method. It does seem to do the thing of pulling a search back from IMDB and displaying the first result tho; the one thing that IS WORKING is the thing that the 'app' indicates should be broken.
I already am on fullstack python! The argument for the MEAN stack is that having one language (javascript) everywhere frees you from the hassles of learning multiple languages. But that's not what I've found in practice. Front-end javascript handling is drastically different than backend's. Besides, language is a tool in your toolbox to accomplish a thing. Having just one tool for everything makes it cumbersome and tedious to accomplish, imagine using a hammer to take out small screws. The more tools under your belt, the merrier!
 I'm not sure why, but it works on Codepen, but not on [Repl.it](https://repl.it/). This homework was assigned to me on [Repl.it](https://repl.it/). It even says in the javascript comments that the search isn't working. Do you know why it works on Codepen but not on Repl.it?
I think you have a lot of great points, I agree with all of these. However, I'd contend that using a class for your store is better for comprehensive purposes because it better communicates intent, which is that your storage has some state and functions to modify that state. Redux has this as well, but it's so broken apart that in my opinion it's actually really difficult to discern overall intent at a glance until I get an overview of all of the moving parts. One of the biggest personal hurdles I encountered and overcame was the understanding that I was essentially creating methods on some pseudo "Store" class that existed somewhere ethereally (created by the reducers), and that those methods were used to update the state of that class. That's effectively what reducers do, in a nutshell. However, until I came to that understanding, it felt very confusing to me to have to define an action, an action creator, a reducer, and then thunks or sagas. A method call on a class is much more intuitive for me and I've found that by restricting state changes to class method calls, you reach a very similar state to redux that is much more communicative to developers that aren't from a functional programming background. I also have a separate problem with hooks but that's another post. 😄
python schmython
Yea, but I think you guys misunderstanding my post. The hot thing is: Javascript + Google Cloud Speech. Not the Speech Framework like MediaRecorder or whatever
Yea, but I think you guys misunderstanding my post. The hot thing is: Javascript + Google Cloud Speech. Not the Speech Framework like MediaRecorder or whatever
Sorry, wrong question. What shows the syntax error?
I’m self-taught, and began by tinkering with existing projects on Github, and following some tutorials online. I wrote in to a company, and was fortunate enough to get accepted as an intern. Which needed some development work done. Learned a lot and happy to say I’m now a junior developer. Madlads, we all start somewhere
Ok, gotcha. Yeah, you're right, you do have to make server-side requests. Being a javascript developer, your best bet is to get set up with Node.js. If you want some help getting set up just let me know. I could get you going with this: [https://cloud.google.com/speech-to-text/docs/quickstart-client-libraries#client-libraries-install-nodejs](https://cloud.google.com/speech-to-text/docs/quickstart-client-libraries#client-libraries-install-nodejs)
"The more tools under your belt, the merrier!" Love this! Always nice to have options :)
The code example in picture mutates the state. I'd say core idea of redux is about immutable state that is changed only through messages - idea also called finite state machine.
Hi, I'm a Redux maintainer. I've seen [a _lot_ of variations on ways to use Redux](https://github.com/markerikson/redux-ecosystem-links/blob/master/variations.md), including a bunch of "write your reducers as classes" libs. The only difference I see with this one is that it uses Immer inside. I'd recommend against using this package for a few reasons: - There's no reason to write any of this as classes. The use of classes doesn't actually solve any problems here. - The use of decorators is problematic, given that the spec is still changing. - Even if it works, the code is very un-idiomatic, and will likely confuse anyone else using Redux. Instead, I'd encourage folks to check out [our new official Redux Starter Kit package](https://redux-starter-kit.js.org/). It also has [Immer-powered reducers by default](https://redux-starter-kit.js.org/api/createreducer#direct-state-mutation), and includes a [`createSlice` utility](https://redux-starter-kit.js.org/api/createslice) that automatically generates action creators and action types from your reducer names.
Yea, but make it with NodeJs or any other server-side request is boring ;) client only is the real shit
I think it could bring a lot more positive attention to the cause, make it more of a public concern.
This is not a support subreddit, but in any case, you'd probably do better if you set up a CodePen/JSFiddle/similar to show the problem. Or at least, if you showed all the code involved in the problem (i.e. the full component, the part that listens to the event...) -and please make sure to format it correctly- and a better explanation of what _is_ actually happening (i.e. "to no avail" only says it doesn't work but not what is happening).
Your post inspired me to research a bit and found this https://alpha.iodide.io/notebooks/300/ It's python compiled to web-assembly I am a python developer myself but still would hesitate to use this due to lack of framework. When working with javascript you have billions of libraries and many frameworks developed to accomplish all sort of UI related tasks. Python has rich libraries for backend work but obviously not much in frontend. If however I found a library that allow mixing python with javascript, I'd consider that although I would still hesitate because by mixing python with JS it becomes more difficult to hire someone to do frontend only in the future
&gt; Just to ~~keep on top of things.~~ remind myself of the ever-expanding backlog of edge-cases, bugs waiting to happen, and undocumented code. // TODO: fix that for you
https://medium.com/@benisinca/svg-vs-canvas-92938aff799a
Look into wrapping it as an async dependency. This way it's probably still part of the initial bundle. (Which is a lot of overhead)
Svg drawings are xml objects with many properties to interact with and canvas drawings are just bitmaps. So if you just want to draw things and do nothing with them later, go for canvas. Svg is better for manipulating what was once drawn. Talking from my own professional experience.
You’re really avoiding a real response to my previous one. I’ll just let the votes speak for themselves because it’s clear you lack any sense of empathy. No I’m not trolling, I’m just clearly intrigued to understand how such self-centered people like you exist lol. Good luck your “tiny company doing stupid map stuff” (damn why’d you delete the comment?). I understand why that was the best offer you had. Summing it up: You‘d seem so hard to get along with.
Nice idea, but first vid I tried I get an api error
Thank you, really api error? which video can you tell me please?
 [https://imgur.com/a/LPSiXjA](https://imgur.com/a/LPSiXjA) for some reason the picture disappeared in my original comment
I don’t see any reason to use Python over JS. And I pretty strongly dislike the language.
Thanks a lot for the report I will check Immediately!
Same. Company took 3rd year placement students. Paid them 13k. Then offered them a part time place during their final year. Then offered them a job straight out of uni.
An UI suggestion. In the resources page, with all the videos, for a particular video, a user can only click the "Go to video" button. I'd suggest making either the whole "container" clickable, or at least making the image for the video clickable. It was my first instinct to click the image for a video to open it and most users will expect such behaviour.
Line 43 says $('#releaseyear').html(""); , it should be $('#releasedate').html(""); so when searching something that does not exist, the date is still persisted with the same text and not overwritten.
Hey that’s pretty nifty too, I actually had the same need when writing embedme, you can see here https://github.com/zakhenry/embedme/blob/3e3310fcc1e4ef9afaa75610852e913ffe7cd622/package.json#L12 that I emit the help to a file, then in the readme read that file back in in the readme codefence
If you use React, maybe styled-components ?
&gt;An UI suggestion. &gt; &gt;In the resources page, with all the videos, for a particular video, a user can only click the "Go to video" button. I'd suggest making either the whole "container" clickable, or at least making the image for the video clickable. It was my first instinct to click the image for a video to open it and most users will expect such behaviour. Thanks a lot for the feed back! Actually we are a Open Source project, If you would like to Implement any changes feel free on GitHub: [https://github.com/undercodeorg/v.1.0](https://github.com/undercodeorg/v.1.0) We will work on it! Thanks again! :)
PixiJs is really efficient, using WebGL (2d only though) and is integrated with MatterJs which is a very efficient 2D physics engine.
Lately I've been using [emotion](https://emotion.sh/docs/introduction) and it's worked really well. It has a pretty slick css string to js transform that would make it super easy. Performance wise I haven't played with it long enough to have a super strong opinion on it, but it's doing okay for my statically generated site. It might be useful to understand _why_ you want to do CSS in JS, as that would help recommend libraries. Optimizing output bundles? Removing unused CSS? Keeping component logic close together?
This is not a support forum (try /r/LearnJavascript for that), but... did you bother looking at the console for errors? I ask because there seems to be a pretty obvious error there, when you try to load your image. It doesn't load because the path is not `/public/svg/smalldeer.svg` but `/svg/smalldeer.svg`. It is _not_ the only problem, but it is the first one you need to solve.
ok I will give that a try..
&gt;React except this what we can do? i want to use simple javascript not based on react
i want to hide some of css from users to show the source of css.
&gt;but... did you bother looking at the console for errors? yeah it is pointing to the SVG pathseg.js and giving Uncaught (in promise) TypeError: Cannot read property 'getElementsByTagName' of null which is yet to be solved as mentioned here [https://github.com/Wufe/react-particles-js/issues/44](https://github.com/Wufe/react-particles-js/issues/44)
https://cssinjs.org/?v=v10.0.0-alpha.21 Maybe this, I’m not sure, I never used it
You're aware that Visual Studio and Visual Studio Code are two different things, right? Fuckin snarky bastard.
What are the arguments to use SSE opposed to a more reliable protocol such as websockets? The article only seems to say that ws/mqtt are "sometimes overkill" with no further elaboration.
its not working dear.
It runs in the browser : [http://skulpt.org/](http://skulpt.org/)
Just comment with string literals and stop being such god damned cowards. ```javascript "This is a function you idiot"; function beBestAtJavaScript(name) { `${name} wants to be good at JavaScript`; if (name !== 'Arffman') { throw new Error('You'll never be the best'); } } ```
WebGL is ideal for performance but might be overkill if 2d canvas is enough for your needs. However, if you find a library that wraps it into a simple sprite rendering lib, that might be your best choice.
JSDoc comments like that are generally for parameters. That's preferred if you're not using static typing via something like TypeScript yet.
https://grapesjs.com/
Partially, yes, but another, I think more important, part of Redux's (and Flux's) design is the concept of the current state being derived from a list of actions, and one action being able to change the state in multiple ways. I think it's a very powerful model that none of the Redux abstractions seem to understand, because I don't think many people are using Redux in the "right way" (I know that sounds pretentious but I can't think of another way to say it)
Not only did I take that route, but I’ve hired a dozen students this way my self. The government where I live subsidizes their pay as well, so it’s fantastic experience and a great deal for companies. One of the major benefits to going through a school program versus being self taught.
It was a game dev job and I got it by acing the small scripting assignment they were giving out to interviees. Also it helped that I was working at the company previously as a tester. I was there for almost two years and then changed to writing JavaScript.
Dealing with svg is outright simpler. Because you do not have to keep a ledger of items behind the scenes and the DOM calculations are confined to CPU. Dealing with pixels is outright faster, whether on CPU or GPU, pixels can be layered and memory is cheap, but you'll need hit tests (ray casting etc.) &amp;#x200B; If your particles are a lot, go for canvas. Choosing a library is ok, but if you want to get serious, you should write your own curve/easing generators. If you are experienced, hot couture logic specific to your application cannot be beaten. &amp;#x200B; If your particles are not a lot, you can go for svg, and still reuse objects behind the scene, just like a keeping a gradient or vector drawings in memory in an offscreen canvas. For instance, thousands of svg rects, can still be rendered: [https://jsfiddle.net/ibowankenobi/apjcxq1w/](https://jsfiddle.net/ibowankenobi/apjcxq1w/)
Its never about the syntax.
The only answer is keep looking.
Copy pasta your own comments shows how super hard you are trying to solve this on your own.
Separate the simulation from the visualization, so you can swap out the latter when it turns out to be suboptimal. The hierarchy in general is SVG &lt; HTML5 &lt; 2D canvas &lt; WebGL. More left means easier to use, more right means more efficient (aka more objects on screen and more flexibility in how they’re displayed).
Thank you for the advice! Could you demonstrate what you mean?
You think so? Currently it's only about 1kb zipped. I don't resolve any dependencies so if you don't have Firebase as a peer it'll crash.
You mean a JS code that injects style element into the page? Creates rules via DOM functions? Or applies style directly to the elements?
I put my physics course notes online with several physics based simulations. It's on github, so you can take a look at the code. Let me know if you have any questions. Also if you remember, let me know what you make. Maybe I can use it in my physics class. [https://landgreen.github.io/physics/notes/motion/motion/index.html](https://landgreen.github.io/physics/notes/motion/motion/index.html) [https://landgreen.github.io/physics/notes/momentum/momentum/index.html#conservation](https://landgreen.github.io/physics/notes/momentum/momentum/index.html#conservation) [https://landgreen.github.io/physics/notes/electromagnetism/charge/index.html#conductivity](https://landgreen.github.io/physics/notes/electromagnetism/charge/index.html#conductivity) [https://landgreen.github.io/physics/notes/waves/waveproperties/index.html#standing-wave](https://landgreen.github.io/physics/notes/waves/waveproperties/index.html#standing-wave) [https://landgreen.github.io/physics/notes/relativity/general/index.html](https://landgreen.github.io/physics/notes/relativity/general/index.html) [https://github.com/landgreen/landgreen.github.io/tree/master/physics](https://github.com/landgreen/landgreen.github.io/tree/master/physics) &amp;#x200B; A few things I've learned. 1. Canvas for performance above 50 moving parts 2. SVG to keep graphics sharp for simple diagrams 3. WebGL (three.js) for 3-D 4. For particle collisions matter.js
Got lucky being in the right place at the right time.
2nd pixi.js. Every time I've messed with it, I've been beyond impressed what visual effects you can accomplish with webgl.
Well I actually build stuff like this. I have a stock and standard display function that I use for all sorts of stuff from sneakers to addresses. You need to feed in some of the functions basically. It then in the appropriate areas needs to have a default if no function is available and then implement the function if it is. The versatility aspect comes in during the very initialization of the function with the variables. If you have the master function variables setup hard coded then that won't work, it needs to be able to accept an object with the variables and functions, or take nothing and have defaults that will fire.
Honestly, I was working as a warehouse operative, and got into an argument with one of the office people. So I got home, really angry, and just wanted to do something. So I decided to look for a new job, and there was one job I really wanted, so I wrote possibly the most ridiculous application I've ever written. I didn't even include my resume. I didn't expect to hear anything from that application. I just wanted to do something. I "knew" that I had no chance of getting that job... I had a small degree, but that was 15 years old, and I've never used it professional. 8 month prior the application, I could write a "hello world" app. But I had started picking up programming doing video tutorials on Udemy, EdX, Khan's Academy etc... And at the time of the application, I had made my own small app - so I knew a little, but not much. Especially not enough to be a professional web developer. But, to my great surprise, I actually got an interview. I decided to be completely honest about what I could do, and despite my age, that I was new in the field. I even brought my computer and showed my own project, and that was enough to get to round two. (At that point I didn't even know Git lol) Round two was an assignment, and I decided to have a lot of fun with it. There were four other people in round two -all with a degree. I can proudly say that I blew them out of the water. So when you love what you do. It's far harder to stop you. And I'm still loving it.
I won't recommend doing Javascript and C++ in parallel. Javascript's asynchronous nature requires a very different mental model than the sequential (to simplify) nature of C++. Do C++ first followed by Javascript.
I've been working with both redux and mobx, and I really don't agree with your cons. They feel very forced to me, to be honest. &gt;Correctly using the right decorator/function The same is true for any function in redux. You have to know the library/framework you're using, there's no way around it. &gt; A central store with reducers makes it real easy to see previous state vs current state across your app and what event caused the state change MobX offers exactly this functionality via spy()/intercept(). In theory you can even event-source a MobX graph that way, so it is basically identical to redux in that regard, if you want it to be. &gt; MobX seems to have mostly pushed classes thanks to the decorator/classes being pretty clean and component's maintaining their own state, but React was moving and now has moved toward an even more functional style with the hooks. This is your subjective feeling. MobX can be used with any functional JS exactly the same way. And using functional react components doesn't mean your models have to also adhere to functional paradigms. It doesn't matter how fast react is moving, this doesn't affect your MobX stores at all. &gt; Older versions of MobX (v4) didn't handle dynamic keys, so an observable Map \[...\] was your choice. The first part is just plain wrong, because as you said yourself: MobX was always capable of handling dynamic keys via observable (hash)maps. &gt; Accessing an observable property from a parent component that isn't using the property is an anti-pattern as it causes the parent to render again if the property value changes. Redux can also be used in ways that cause not only parent components but the whole tree to re-render. In fact this is why MobX advertisied itself to be 10-100x faster than redux, which it was at least back then. You can use both libraries incorrectly, this is not a con only of MobX, as you make it sound like. &gt; I feel like Redux has a lot less framework specific knowledge gotchas to not only being productive, but for performing optimally I feel the other way around. This is purely subjective. Viewed objectively, both have around the same complexity. Not trying to hate in any way, I appreciate people writing about their experience with both libraries. But your cons sounded so negative that I just had to add some counter weights.
There are dozes of table libraries for solving this kind of problem, perhaps you should look at some of them to get some inspiration for how to build your own component (or perhaps just use an existing one that solves the issue). &amp;#x200B; Usually you would build some kind of component that takes the data as an object array and then columns that map that object array with the values, styles and the header text (in the case of a table). Seems like you already have something like that, its just all grouped together in a kind of an awkward way. &amp;#x200B; If you cant control the data that comes from the API directly, I would create a separate component for all the different views, which fetches the data and defines the layout of the columns.
I've been a professional software developer for six years now. Here's some advice for those interviewing for new jobs from someone who interviews a lot of candidates -- I don't really care about what school you went to, I care if you can code. I /rarely/ look at the university someone attended when making a decision about whether or not I hire someone. What I want to see if knowledge proportional to your level of skill. So, some tips: &amp;#x200B; \- Have personal projects on some sort of open source platform (e.g. GitHub) -- if I see your actual code (which includes coding style, library knowledge, architecture knowledge), I can learn a lot about who you are. \- Be honest on your resume -- I've interviewed countless self-described JavaScript experts who can't explain things as basic as block scoping or how the event loop works. \- Learn the language, not a library -- If you only know Angular, you're going to have serious trouble working for a company that doesn't use Angular. If you know JavaScript, picking up a new library is trivial. \- Don't lie -- See point 2 -- I will be able to tell if you're lying. If you're junior, admit it. Many companies do want to hire junior developers and grow from within. &amp;#x200B; If you're not sure what to build personally, just look online (e.g. Reddit) for a project someone else did and try to implement it yourself.
For what it's worth, I'd agree with you :)
Programmed as a hobby since 7 (30 odd years now) doing the odd job on the side. Many years ago talking to a customer at work (worked for a big retail chain), did a few side projects for them (on time/on budget) they referred me to someone they.knew and they offered me a full time job. Gave notice in at work and started a couple of weeks later on 3 times the salary - worked in the industry ever since, never been out of work since I started working at 18. Bit of a different path to most.
No need to get offensive you retarded old spaz
Yeah my bad, didn't realise we were talking Visual Studio and not Visual Studio Code
I'm glad that someone else mentioned this. JSDoc is really underused but provides huge benefit, especially when combined with Typescript. We've all had TS screaming at us because of an error, but these instances are vastly reduced when using JSDoc, even if just using `@description`. I'd even go as far as to say it bore the benefits that TS brought before TS existed. It's especially prevalent when working with parsing functions and highly nested data sets. Knowing what the expected output and seeing an example in the editor because someone was able to JSDoc comment it is something that should be a standard practice.
Can you tone it down a bit? This is only my second project in react and I don't understand 90% of your content, sorry. Thanks anyway.
Frontend and Backend certainly do require different approaches and disciplines. Remember that when node came out, JQuery was still one of the big driving forces on the web, and Angular had only been around for a short time. Promises (and implicitly async-await), Fetch and all the other goodies we now rely on didn't exist. Transpiling wasn't really a thing, so the "JS everywhere" mantra was true and consistent. Nowadays, the approach to each side differs vastly but that advancement is good. I feel that it encourages people to learn different approaches to achieving results, which also encourages some people to explore other languages.
That are already couple of redux helpers around, theres also some sort of “awesome redux” document which lists them is some place. First time I saw this google definitely didnt help me on the search results tough. I’d recommend something like [rematch](https://github.com/rematch/rematch/blob/master/README.md) . I have even someday written something on the same lines, without knowing about rematch ([unmantained](https://github.com/wkrueger/redutser) . Redux is all about writing functions. IMHO one big problem with the default boilerplate (or with ducks) is that it takes function declaration (the action creator) and function implementation and splits them in a weird way. This would maybe make sense with js but loses its purpose when we have TS. Rematch fixes this problem. Another common struggle point is howto properly type the connect HOC. Basically tou have to annotate some key arguments so that the inferences catches them and send then to the type parameters.
I'd consider moving to FS Python if I had a need to and it was available in the browser without further tooling (just for the ease of introduction and learning). In the same way we often rely on babel for JS applications but can opt to write 'native' JS instead if we wish, I'd need something similar for any other languages. Being bombarded with a hundred different toolsets just to get the most basic of examples up and running is a quick way to stop me from investing in a language - because if I need all of that, then I'm going to feel stressed about it, and that's not an effective way to learn. Everything I need to do can be achieved in JS, and even the things that can't effectively be done natively will more than likely have a binding to another language. I revel in quick prototyping of ideas. Knowing something will work after investing only a few hours has led to some of my best ideas and most enjoyable projects. JS is perfect for this because the community has made it that way.
&gt;http://skulpt.org/ hmm. Tell anvil that. They compile to js.
I wonder if it's worth starting? I'm a C++ dev, working with JS a lot as a hobby, but not sure if I'd enjoy it as a full time job. From what I can tell, our front end team is using react+mobx, can't be too bad.
I really miss the simplicity of those days. A lot of stuff today is incredibly convoluted.
I like having one generic list component, and an item component for every resource that I'll be displaying. The list component will asynchronously import the corresponding item component of the currently selected resource.
Maybe share your [repl.it](https://repl.it) link instead of codepen if you are having trouble with a [repl.it](https://repl.it)? I took the code from the codepen and put it on a [repl.it](https://repl.it) and it responds to searches, so I think either you've set up your filenames wrongly, not hitting run etc. something that doesn't involve the code itself. True, there are bugs in the code but none that keeps the search from working.
I'd admit that some simple shared states don't really need to be written as class, but when the business logic of shared state is complex enough to require modularization, then class-based modular Redux usage can obviously be of great help. In addition, **usm-redux** does not enforce the use of **immer** encapsulation, it also supports the Redux reducer way.
Full stack Brainfuck it is, then
If necessary, I'll try to add some ways to use it without decorators.
hyperbole. Brainfuck won't make the cut before it's even on the table for other reasons. Ecosystems are important.
Essentially, **usm-redux** does nuns doesn't affect you using hooks, because it's just to solve the state sharing at runtime.
When I first started out, I learned ruby, python, html, css, js, php, c, c++, and java. I like learning french, spanish and italian it was interesting to see the similarities and differences in not only syntax but how different code languages approached problems differently. I also have a hammer with a screw driver in the handle because multitools are dope and more convenient than the literal baggage of a toolbox... That said I stuck with JS because using one language everywhere is actually really awesome. I can build a website, server, email and "native" app all in one language. Definitely glad I stuck with it. My only complaint is how **convoluted** and needlessly complex parts of the language and tooling has become. JS fatigue is real problem the community needs to address yet it feels like everyone trying to address it by adding their own new hot framework are really just adding to it.. Then there is typescript.. sure its just a superset. But I've worked with c and other static typed languages enough to love a garbage collector and dynamic types and it just seems counter to the goal of js. Idk... sorry for the long opinionated comment.
If you want to use hyperboles like “never”, then you’re going to get hyperbolic replies.
They are different in nature because **usm-redux** is actually Redux, and it is still the state library of the immutable model, which is a natural fit for a UI library of such type as react.
**usm-redux** is essentially Redux, it's still immutable data model, so it's also a single action that can change multiple states.
React is dope, mobx tells me your team is working on non-trivial state. Could be really fun. If theyre working on a complex web app, thats a fun thing to be involved with. Especially if they care about doing it right (sounds like they do).
I’ve learnt the basic of c++, how to upgrade myself? Make my own project ? But I can’t brainstorm the idea .....
&gt;**rematch** may be really good, it's very much like the **vuex** design concept, they all have a problem, which is the lack of intuitive modularity at the code level.
Except it isn't about syntax in practice. And it's never been, historically. Syntax is just an emergent property of people's academic preferences at the moment the first parser is created. Pick a programming language, your syntax is given to you after the fact. I mean sure you might have some choice in accepting what you're given, to some small degree. you might be able to write your for loop without brackets, or something. you'll still be confined to language a or b because of requirement x and y.
**usm-redux** brings you two very important benefits: the intuitive modular model and the simple OOP.
If by "pulling from memory" op means looking up specific function names or keywords for javascript, I think it is quite alright. Instead of having a good memory about language specific keywords it is far more important to have a good grasp of logical, creative thinking, which you can apply across different languages. Indeed, I would advice learning programming, not learning javascript. The language you use should just be an extension of your skills as a programmer. &amp;#x200B; So I wouldn't go too hard on forgetting language specific things, lots of programmers already use machine assistance when it comes to the topic with IDE features such as intellisense, which seems to be ok. &amp;#x200B; I do agree with your general point though, op most likely should learn basics, but I wouldn't stress remembering specifics, but rather learning general concepts.
I agree it's not about syntax. JS has one of the ugliest syntax but I've stuck with it as fullstack for 4 years. I posted this because JS fatigue is getting old and if python has a comparable ecosystem where I can build a website, native app, etc and do it with a more readable, less complex language, why not?
&gt; The same is true for any function in redux. You have to know the library/framework you're using, there's no way around it. React-redux gives you less room to mess up in my experience and opinion. I'm willing to bet incorrect usage use of `computed` &amp; `computed.struct` is significantly more likely. The mobx recipes even then shows another problem, which is that a new object is passed down unless you create a computed on top of your computed.struct. Basically, for every computed.struct you might need another computed. &gt;MobX offers exactly this functionality via spy()/intercept(). In theory you can even event-source a MobX graph that way, so it is basically identical to redux in that regard, if you want it to be. Intercept only works on a per observable basis and spy is a no-op in production builds. I'm sure you could still manage this by creating all observables in the central state and recursively running through all observables and intercepting them, but mobx-state-tree probably already covers most of this. I'm comparing essentially a barebones mobx to redux. Redux has a ton of supporting libraries/utilities, because of how barebones it is like redux-thunk/saga, reselect, etc.. &gt;This is your subjective feeling. MobX can be used with any functional JS exactly the same way. And using functional react components doesn't mean your models have to also adhere to functional paradigms. It doesn't matter how fast react is moving, this doesn't affect your MobX stores at all. Every pro/con list is subjective. Is there a good example of functional components that have observables and computeds? As far as I understood these two concepts are essentially a piece of state that lives on a component similar to `setState`. Yes, I know that not every component needs to have observables, but that wasn't really the point. &gt;The first part is just plain wrong, because as you said yourself: MobX was always capable of handling dynamic keys via observable (hash)maps. Until you see it not work you expect an observable object to allow dynamically adding keys in v4. They remedied this in v5, so clearly it wasn't how people wanted to use observables. &gt;Redux can also be used in ways that cause not only parent components but the whole tree to re-render. In fact this is why MobX advertisied itself to be 10-100x faster than redux, which it was at least back then. You can use both libraries incorrectly, this is not a con only of MobX, as you make it sound like. As I said I consider the proper approach as a form of anti-pattern for loosely coupled components. Requiring a complex object to access something like a string doesn't sit well with me. Of course you can use both incorrectly, and subjectively I feel it is a lot harder to use redux out of the box wrong than mobx. Nonetheless, my conclusion was that it isn't better or worse than Redux, just a different way of developing a React app.
Agreed. Heck, I just had to lookup something about a dang for statement. Geez. Then I got notified of this thread.
This depends a lot on the type of learner you are, for example if you are an audiovisual learner you should most likely watch some tutorials in video form. If you learn by doing, then look up some coding challenges online and try to solve them (learn by repetition). If you are motivated by doing something new with a personal touch, try coming up with a concept and create some personal project to work on. Only if you have trouble with theory, I would advice you to get books, Though, if you have found that you learn well by reading books then maybe get something that nails the basics down.
Started by making websites for fun with friends for posting our stupid videos we would make, think jackass type stuff. Wanted to make cartoons like joe cartoon and found a book on Macromedia Flash MX that came with a demo and started to learn ActionScript around 2004. Wound up making sites and animations for bands I was in as well as doing design. Fast forward 3 years in 2007 I was working at a restaurant full time and got fed up so I quit and decided I wanted to make animations and art again. The whole time I had been still playing with flash and designing but decided to put a book together and apply for an internship. I walked in off the street to an ad agency and asked to speak with the creative director, I do not advise doing this - the fact that I got so lucky for him to give me even a second of time is just pure luck. Anyway they just so happened to be looking for an intern and I showed my portfolio to him. He gave me a shot. Wound up making cartoons and animation and working as a designer and animator mostly while doing support for flash projects. Stuck around and got hired full time. Started really learning actionscript 2 &amp; 3 and eventually went freelance. Did full time freelance flash dev for about 3 years and during that time clients started asking for Wordpress sites and this was when Steve Jobs wrote his famous “thoughts on flash” I wound up slowly moving to more Wordpress / php / JavaScript. Then got into objective c and java and got involved in Cordova. Wrote a bunch of plugins and open source things for a time. Moved into more experiential type of work doing installations across North America for companies like Nike and some cool Google Chrome experiments where I got to partner with them to showcase new tech for Chrome. Fast forward 12 years or so since I got my start and I am a technical director at an agency in NYC where I work mostly in the AR/VR/XR space but still do a lot with web tech. In fact we use web tech along side native code a lot - specifically with our mobile AR experiences as well as installations. Along the way you’ll be exposed to new tech, always push yourself and don’t be scared to try things and adapt because otherwise you’ll wind up limiting yourself.
I've been using mobx for two years and redux for about a year and a half before that. Personally I can't imagine going back to redux after having used mobx. That being said mobx and redux are somewhat hard to compare as the former is just a library while the later is both a library and an architecture. You're experience with mobx is going to largely depend on what kind of architecture you've built around it. &amp;#x200B; Anyways, I agree with most of your write up but would like to address some of your cons: &gt;Computed's true behaviour doesn't seem very obvious [https://alexhisen.gitbooks.io/mobx-recipes/content/use-computedstruct-for-computed-objects.html](https://alexhisen.gitbooks.io/mobx-recipes/content/use-computedstruct-for-computed-objects.html) &gt; &gt;computed.struct seems to be what you want in most cases, but isn't the default as you'll often do things like create some new set of data from an observable set of data ie someArray.filter(\_ =&gt; \_.isTruthy) &amp;#x200B; Never had to use \`computed.struct\` and not sure why I would, we use \`computed\` heavily in our application and performing shallow equality checks would come with its own cost which might just outweigh the savings that you would get with \`computed.struct\`. \`computed\` will only get re-evaluated when one of its dependencies change anyway so I can't imagine \`computed.struct\` being that useful for the majority of situations. &amp;#x200B; &gt;Accessing an observable property from a parent component that isn't using the property is an anti-pattern as it causes the parent to render again if the property value changes. You have to essentially pass an observable object containing the observable property into your child component, which then accesses this observable property. &amp;#x200B; Why would you do this? If a parent component is not using the property and instead just passing it down to an observed child then just have the child bring in that property directly via a \`connect\` equivalent, if the parent is using that property then of course it should update. &amp;#x200B; &gt;I feel like Redux has a lot less framework specific knowledge gotchas to not only being productive, but for performing optimally &amp;#x200B; I'm pretty sure a solid architecture build upon mobx would be much more performant than redux (at least it was a few years back, not sure if things have changed here), as on average mutations in mobx will result in fewer components needing to update due to the nature of observables and reactions. &amp;#x200B; My biggest issue with mobx is the one you already mentioned with dynamic objects as well as observables arrays not being real arrays. This is of course fixed in Mobx 5 with Proxies but at a cost of dropping IE11 support which not all teams can do.
Impossible to tell without a lot more information. You should dig into this if it's truly a bug with the nodefetch library so it can be fixed. Other people might have the same problem.
If you need a vanilla state manager that is similar to Redux and Vuex combined, checkout reStated [https://github.com/mardix/restated](https://github.com/mardix/restated) . &amp;#x200B; Features: Flux pattern, immutable state, action mutators, computed state, subscription
Check out the mobx solution to this: [https://mobx.js.org/best/decorators.html](https://mobx.js.org/best/decorators.html)
Probably Axios sends the right CORS headers by default. [https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
With proper commenting, your ide should be set to highlight comments not grey them out. If you find comments so superfluous that they warrant reducing the likelihood that they will distract you, they should be deleted
That's a very neat tool. Reminds me a great deal of Elementor, except with much more out-of-the-box functionality. Thanks for posting it up! Is there a portion of this tool that deals specifically with creating and exporting javascript? I'll keep playing with it to see if there is, because JS is my primary focus.
Yes, it can handle script into components, see here https://grapesjs.com/docs/modules/Components-js.html#basic-scripts
I do not know the exact rules (not a JS dev myself), but I believe that NaN is always unequal to everything else. If you want to do that, I think (again, not a JS dev) that this is the best way to do it: typeof parseInt("xyz") == typeof NaN
You have to use the isnan() function when checking for nan
received a random call for a web developer internship while i was doing my a technician degree. passed
`NaN` is the only thing in JS that actually compares unequal to itself. `NaN === NaN` is false for example. Use [Number.isNaN()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN). As for "why" this is the case, you can read some answers from people smarter than me at https://stackoverflow.com/questions/10034149/why-is-nan-not-equal-to-nan.
Hi /u/edravix, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
NaN is special. It is typeof "number" but it is not-a-number so it is unequal to any other number including itself.
Hi /u/eipi717, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
In js NaN isn't a real value, it will never equal/compare to anything. Also, neither side should/would be converted to undefined.
Hi /u/SeriousJrinkVar, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/11964610, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/WillBackUpWithSource, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/LovelyLionLily, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/akshayd121, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TehParadox_Net, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/da_semicolon, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
NaN ALWAYS compares unequal to any number. Type of NaN is “number”, so NaN == NaN is false.
Even `undefined` isn't any real value. Then why does `undefined == undefined` return true?
[`Number.isNaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) is better and far more robust. `isNaN` has some [weird and confusing behaviour](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN#Confusing_special-case_behavior).
actually `NaN` is unequal to any other value. that's why we have `Number.isNaN()` function.
I think it has to do with cors as someone has mentioned. If that’s the case it’s not a bug but a behavior someone made a decision on. I’ll look at filing an issue but I have a feeling there was intention behind having it behave this way. It’s not a decision I agree with, but there’s probably a reason
This totally makes sense, I’ll do a test to see if that is in fact the issue
Depends on what you want to do with javascript. If you want to be a frontend developer (or a fullstack) then learning and keeping up with frontend frameworks is essential. However if you want to limit yourself only to backend development, then you should look into stuff like nodejs and perhaps database management in js.
Try building a to-do list app that saves to local storage. Use JavaScript without a framework. You'll solidify your knowledge and get a sense of the basics of what a framework gives you. If this is your first time, you'll get frustrated. When you figure it out, you'll be more confident.
I made a curated list of JavaScript podcasts. https://github.com/sidml/Curated-Podcasts-List/blob/master/Javascript%20Podcasts/README.md Just putting it out there. I hope someone finds it useful...
I'm in the 'build something first; school. Pick a project you want to build then you'll quickly discover where the gaps in your knowledge lie. React is a great 'starter framework' IMHO (but others will disagree...) but again...start building something you \*want\* to build and it will guide your learning more appropriately than learning in the abstract.
Since, I have just started, I want to know a little of everything first and then decide where I want to head forward. I want to strengthen my JS. Also, how much JS is actually required to learn different frameworks? Will basic knowledge suffice?
Cool! Will try building it! Ty!
Do you have a good handle on async/await? Promises? Callbacks? Async/await is the way to go right now but you should be able to read the other two. Do you have a good handle on the spread operator? If I gave you a blank window in VSCode can you write a for loop? How about a class? Do you understand how to set up babel to get ES7 code turned into code that a good subset of browsers can use?
\- Got introduced to programming in high school. \- Played with C++ and C# for few years (simple c++ games, win forms, unity 3D etc). \- Got job as CNC machinist -&gt; made some simple desktop app for that company which boosted my interest in programming \- My friends brother needed someone to help him with game development project. Learned JavaScript, html and css for the first time and the rest is history. Changed 2 jobs after that and now I work as full stack developer (React Native, react.js, Node.js)
Nice, I do the same thing! The list component also performs filtering &amp; sorting on the data set before instantiating the item components.
Because IEEE float NaN doesn't equal anything, including itself.
And this is true in any language that uses IEEE 754 floating point numbers. It's not a JavaScript quirk.
I agree that building something is the way to go. I'd only add that vue is known for having a friendly learning curve and the documentation is great so it's a great starter framework too.
I could get by building websites with barely any javascript for 10 years. It worked fine :D Tho, these days, yeah, you need to know some of it. But you don't really need to know all of the "lower level" stuff in order to just work the DOM. Like others have said, just build some smaller websites/webapps and have fun, you'll learn more than you know by just doing some weekend projects! :D
I see that it allows you to apply script to it's components, but I don't see dedicated menus for the effects and triggers themselves. Will update if I find them.
Then you do you :) Honestly, I think that'd be worth exploring and even writing a short piece on why you prefer it that way. I feel like the title would certainly hook most readers ¯\_(ツ)_/¯
How do I know if I’m using es7?? I use es6 and Babel
&gt; Never had to use `computed.struct` and not sure why I would, we use `computed` heavily in our application and performing shallow equality checks would come with its own cost which might just outweigh the savings that you would get with `computed.struct`. `computed` will only get re-evaluated when one of its dependencies change anyway so I can't imagine `computed.struct` being that useful for the majority of situations. computed only works on === as far as I understood. We regularly derive a subset of data from observable data. An example would be a list of todos. `@computed completedTodos = _ =&gt; this.todos.filter(_ =&gt; _.isCompleted)`. This doesn't do anything of value and you might as well throw that in your render as every change to todos results in a new object, which will cause rendering again anyways. ​&gt;Why would you do this? If a parent component is not using the property and instead just passing it down to an observed child then just have the child bring in that property directly via a `connect` equivalent, if the parent is using that property then of course it should update. Do you have an example of what you mean? I'm not sure I've seen this in the MobX world, since I'm much newer to it. What I'm talking about is something like this: class ParentComp { @computed get currentMessage() { return this.someObservableValue ? 'Message 1' : 'Message 2'; } render() { &lt;&gt; &lt;ChildComp message={this.currentMessage} /&gt; &lt;ChildComp2 /&gt; &lt;/&gt; } } ParentComp would render again rather than just ChildComp because of accessing this.currentMessage from within ParentComp to set the prop on ChildComp. &gt; I'm pretty sure a solid architecture build upon mobx would be much more performant than redux (at least it was a few years back, not sure if things have changed here), as on average mutations in mobx will result in fewer components needing to update due to the nature of observables and reactions. This is probably true. MobX is framework agnostic in that you can use it in places other than React. In fact, check out https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html and see mobx-jsx (https://github.com/ryansolid/mobx-jsx). If you got rid of React you'd have an even faster application for many use cases. &gt; This is of course fixed in Mobx 5 with Proxies but at a cost of dropping IE11 support which not all teams can do. I forgot they dropped IE11 support, which then becomes a con for certain teams.
ES6 and Babel is a good start. https://derickbailey.com/2017/06/06/3-features-of-es7-and-beyond-that-you-should-be-using-now/
*The Glorious Story of Bacon Pirate*
First of all, I want to say that you've clearly put a lot of effort into this library. The API looks clean and easy to use, and the docs are pretty good, too. However, it's not Redux. It provides an OOP API over Redux, and several other state management solutions, and uses them internally, from what I can tell. That's all well and good by itself, but Redux provides a different mental model which I described in a comment above. The key to Redux/Flux is separating your actions from the effects they have on state, which is what most of these abstraction libraries seem to miss. Action creators and constants can seem like boilerplate if they're only ever used by one reducer, but once you start using actions like "signals of what happened" and reducers as "responders to one or many signals", then they're much less boilerplate, because you're using the same action in multiple places in your store. Associating actions with a specific function that changes state isn't bad in its own right (although I have my opinions on that), but please don't say that it's "essentially Redux" because it uses it internally.
I would start out with the canvas API as it is available in every modern browser, which means you don't have to add any libraries and figure out how to use them. I wrote a [tutorial](https://css-tricks.com/creating-your-own-gravity-and-space-simulator/) on how to develop your own gravity simulator using canvas and plain JavaScript, which might give you an idea how to set up and get going with the experiments you have in mind. &amp;#x200B; I would like to point out, though, that [three.js](https://github.com/mrdoob/three.js) \- a WebGL library - makes working with WebGL a breeze and with it you can do thing that wouldn't be possible using only the canvas api performance wise. You mentioned particles; [here's a simulation](https://thehappykoala.github.io/Harmony-of-the-Spheres/#/scenario/Earth%20VS.%20the%20Rings%20of%20Saturn) of what would happen to the rings of Saturn if you put Earth in orbit around Saturn... In this simulation Saturn, Earth and the Sun all feel each others gravity, the particles (40000 of them!!!) that make up the rings are massless and their motion is determined by the gravity of the aformentioned celestial bodies. &amp;#x200B; Anyhow, happy experimenting :D
I think your only way to find out is to just dive into it and look if it seems like too much to take in; like, if the gaps in your basic knowledge is keeping you from learning more complex frameworks, then just take a step back and break it down to smaller pieces. &amp;#x200B; I would't advice thinking of it as a binary checklist, like "I first have to learn subject x completely before going to subject y". While sometimes this is the most efficient way; You'd be surprised how you can learn many things in many different levels at the same time by taking a complex task and solving it. Like, don't limit yourself unnecessarily, none of the libraries which you mentioned are overly complex. Also there is no objective requirement how much knowledge you need beforehand. I think you should be more worried about being too scared to try stuff out and see if you can handle it.
Really enjoying this talk! Question: does anyone know what VSCode theme that is? Looks nice, I usually don't like light themes.
I started coding mainly to be able to turn some ideas that I had for science apps into something tangible, discovered that coding in itself was tremendous amounts of fun and that it was something I wanted to pursue professionally. After a year of working on my stupid science apps I decided to go for it and applied for a couple of positions and got a whole bunch of interviews; two years later and I'm still loving it. You get to solve problems every day, which is awesome :).
[removed]
&gt;I'd recommend getting familiar with the concepts u/lowIQanon mentioned before diving into a framework as many of them make use of these features: [https://www.reddit.com/r/javascript/comments/c46suc/how\_much\_javascript\_is\_enough\_for\_webdev/erv4iof/](https://www.reddit.com/r/javascript/comments/c46suc/how_much_javascript_is_enough_for_webdev/erv4iof/)
The problem is if "data" doesn't exist it will still throw an exception. It does the evaluation before doing the casting, so if data = undefined. Then !!data.length will not work
I honestly think this is a horribly obscure and confusing way to type coerce, especially for anyone not familiar with JS's coercion rules. I'd rather use something like `Boolean(data.prop.length)` as per your example than `!!data.prop.length` and leave the obfuscation for my build process.
&gt;Notice how I check to see that the length is greater than 0 as opposed to just checking for the length (`data.length`) because an empty array is considered `falsey` in JS. I believe this is incorrect. `Boolean([]) === true`.
Couple things, \`!!\` isn't an operator in itself, its actually just two \`!\` operators back-to-back which has the side effect of type coercion. Still a cool trick. Second thing, you can use the bitwise not operator \`\~\` along side the double bang on functions that return \`-1\` as a falsy value: \`!!\~arr.indexOf(item)\`
Thanks. :) &amp;#x200B; It's Yi light. &amp;#x200B; [https://marketplace.visualstudio.com/items?itemName=wangweixuan.yithemes](https://marketplace.visualstudio.com/items?itemName=wangweixuan.yithemes)
While this is the "proper" way to convert non-boolean values into their boolean representation, you should take note that people usually advice against doing this in languages such as javascript (especially in your case). `!!` can be faster to write but you lose the instant clarity that `length &gt; 0` has to other developers looking at your code. There is a more understandable use-case for `!!` in other, more strictly type checked languages. Like for example you might have the following variable class in C++ ``` class CVar { bool GetBool() { return !!m_nValue; } // converting 4 byte integer to 1 byte boolean int GetInt() { return m_nValue; } const char* GetString() { return m_szValue; } ... } ``` Although in these cases the compiler does the work for you in most cases as well.
Hi /u/prahladyeri, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Perhaps, I don't have the time at the moment :) I'm currently making a community driven game, perhaps you'd like a gander? [http://nutokyo.net/](http://nutokyo.net/)
Why stop at just two `!`s? :)
Hi /u/Zeeesty, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Like some other people have pointed out, if you work in a team, do what the others are doing to keep things consistent. For my personal projects I only use the /\* coments \*/ though, as I think they look a lot nicer and makes the code more readable. That's just my personal opinion, though. &amp;#x200B; Generally speaking I try to give variables names that are descriptive and I always use verbs to name functions... In doing so I find that the code becomes much more self-explanatory and the need for comments is reduced. Together with TypeScript I find that this approach is a better way of having people understand what's going on in the code than haphazardly adding what tends to be remarks that are based on your own understanding of the code and as such might not be very helpful for somebody that is not familliar with the code you have written.
Wow! You're all over the place, man! I just asked the same question on YouTube (woops, not exactly the most relevant thing to ask re: the talk, my bad).
Your solution still throws an exception though. There's an alternate solution called Optional Chaining that is in Stage 2 and so will likely be added to Javascript eventually: https://github.com/tc39/proposal-optional-chaining/blob/master/README.md
No, I wouldn't, especially not now that TypeScript is an option. Don't think JS fatigue is a problem related to JavaScript per se, as well, so I doubt that switching to Python would solve that problem... The fatigue part arises from what is a very healthy and bubbling ecosystem, and to be honest, I wouldn't call it fatigue, because having choice is awesome, I think, and I find that the better you understand plain JavaScript, the easier it becomes for you to transition from one framework to another, and thus avoid the dreaded JavaScript fatigue. &amp;#x200B; Having said that, Python is awesome as a scripting language and I would recommend anyone that is interested in coding to at least try out Python.
Since your still learning it, I’d wait until your really comfortable with JS before jumping into trying to learn new front end frameworks if that’s the route your wanting to take. If you know JS well, then learning the frameworks when your ready won’t be as difficult, since all they are just JS. I would also be very comfortable with object oriented programming before jumping into something like React. This 30 app vanilla JS is a good little challenge, no frameworks, libraries, compilers or boilerplate code. https://javascript30.com
I like my vegetables domesticated and well behaved.
I did this, and with self made API and I don't think I'm that good with JavaScript.
Very cool! Did not know that
Good concept but imo it will be to hard to debug side effects in „hooked” function. What about memory leaks?
Node is the only thing that needs to be downloaded from a browser. Everything else you will use will be installed with `npm`, which comes with `node`. CLIs are installed with `npm install -g cliname`.
You can search for a good fullstack boilerplate with node and React, and then look into package.json to find all the dependencies which you might be interested in -- or perhaps take a look at \`create-react-app\` ([https://github.com/facebook/create-react-app](https://github.com/facebook/create-react-app)) to get things started fast. &amp;#x200B; Other than that it really depends on what kind of project you want to start. A lot of people use stuff like \`webpack\` for bundling their frontend code, and \`redux\` for global state management. But in my opinion you should really look what suits you and the project you are making.
**&gt; How much Javascript is enough for webdev?** Zero, JS strictly speaking, not even required for a website to work. **&gt; Shall I move forward with learning various frontend frameworks? And if yes, will I get a hang of JavaScript while doing these?** Focus on HTML, CSS. First learn propper front-end, then (if you love it), go with some basic JS, and when you KNOW what you're doing, you may start on a framework like Svelte, Vue or React. Maybe you dislike it? Great, go learn a propper backend language. (Js can also be used, but in most cases languages like Go, PHP or Ruby and Elixir are also used). **&gt; Or should I practice JavaScript from other resources? If so, please mention the resources.** MDN will also be of great help when trying to do stuff or fixing issues in your code.
Basically just node and whatever IDE or text editor you want. Pretty much everything else will be in npm packages (works pretty similarly to pip I think, don't have a huge amount of python experience though so I'm not positive).
Wow, you're still here. I hope you understand that I haven't actually read any of your garbage. Please go fuck off. Thanks.
It really depends on your end goal. If you want to become a javascript specialist : then yes ! dive more deeply into the javascript language before moving to more advanced topics. By keeping it your learning curve progressive you'll gain a solid practical knowledge.
I think you've misunderstood me. That I say '**usm-redux** is essentially redux' meaning it supports almost all Redux middleware, including Redux dev-tools, and the abstract action separation from state you care about is of course very nice, but in fact in most of the projects I know, it's not a very common situation to operate across the reducers operation at the same time, so the action is essentially quite clearly related to the state. The **usm-redux** is not a silver bullet, but it solves most of the problems that require shared state modularity, while making it easier to use in the case of immutable data state.
I like the way you think.
Enough to make things go
If you want to make front end you need to be competent in JavaScript although you do not need to be an expert. IMO it's a terrible idea to start learning React without having a strong grasp on the basics (types, functions, callbacks, promises, async/await, context, modules).
Practice practice practice! Coding lessons give you a mental framework, but the best way to "get a hang of" programming is to try and solve problems that you don't know the answer to, that you aren't being guided to solving. I tend to suggest games for this, but there's other options such as the to-do list someone suggested, which is a good one that can scale up as your skills improve (try making the storage remote, and allow access and simultaneous editing from multiple clients!) Here's some ideas from a game front: Rock Paper Scissors against an RNG opponent. Blackjack (great as the classic "dealer's rules" effectively make the dealer easy to implement as a basic if-else construct.) Real-time games like Pong and Snake are also great challenges, and will force you to think in new ways about your code since time scheduling becomes a factor.
https://github.com/msteckyefantis/reduxx The Real ReduxX
For some reason undefined is a primitive value, along with null, strings, and integers, but NaN is not. (aka, javascript is dumb like that sometimes) This is also why I say it's more like an error code than any sort of actual value.
If you want to trigger an action to have it affect multiple states at the same time, usm-redux is certainly supported. class Foo extends Module { @state todos = { bar: { list: [] } }; @state bar = false; count = 0; @action done(index, state) { state.todos.bar.list[index].done = true; state.bar = true; this.count += 1; } }
Read [https://github.com/getify/You-Dont-Know-JS](You don’t know JS)
being in browser means you don't need to care what system it runs on &amp;#x200B; if it has a compatible browser then it can run it
Good bot
In other words, WASM allows us to think of the browser as a high-performance VM/container?
If you can do a full authentication demo, log in, register, authentication protected routes, you are good enough for a web dev job.
As much as you need to build whatever you want to build.
A lot of that practice comes from working with languages in general. This may come as an unpopular opinion but I feel like following along with a React course first would get you to a point where you feel comfortable with the mechanics of JavaScript and organizing a project, and then you can spend some time figuring out where the language ends and the framework begins. Many developers like to stress starting with the basic language and building on it with frameworks, but that often puts you so far off from actually doing anything productive with the tools that it ends up being discouraging. It’s easy to suggest starting with the basics as a developer looking back, but I think many of us became proficient because we had a project we wanted to work on and pushed through it by just jumping right in to what we *wanted* to build. Secondly, invest some time in setting up a linter. It’ll save you from a lot of silly mistakes.
A good knowledge of JavaScript is fundamental to web development. You can get work done if you just learn the frameworks but you'll always be operating at the level of recipes. Ensure you have a basic working knowledge of scope, closure, prototypical inheritance, objects and the this variable if you want to do well. You can pick all this up as you go.
Hi /u/moncrieffstrand, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
FreeCodeCamp doesn't teach DOM manipulation with vanilla JS at all, which I think is it's biggest weakness. I would recommend maybe going through https://watchandcode.com as well, or watching some YouTube tutorials on basic DOM manipulation.
I originally learned Javascript/html/css alongside AngularJS after being thrust into it for internships and found my overall javascript skills lacking. I had bad habits and a weak foundation so I ended up relearning Javascript and doing exactly as u/tomontheinternet described. It definitely made learning React/Redux that much easier and more intuitive so I definitely recommend making something with pure ES6+ Javascript without a framework and then moving on to one when you feel confident.
To much.
There are certain crypto operations that run considerably faster in optimized rust than in browser JS. These operations (for crypto reasons) must run in the client to avoid exposing the data to the server. You can use rust wasm to run the optimized rust Basically, JS is actually pretty performant for I/O bound operations, but terrible for CPU bound operations. WASM let's you use JS for I/O and compiled languages for computation.
Build something real. Languages and frameworks are tools that help you build applications.
We see entirely too many "getting started" posts. You may be experiencing survivorship bias due to not seeing the majority of the ones that are removed, but it's pretty obnoxious. The current approach is that if it's a new API/project/etc., then we may allow it as it's new content for everyone, but for established API's/projects/etc. they should not be posted here. There are already 100's of "getting started with Vue" posts on the net.
Getting people to install an app is actually a pretty significant obstacle to adoption. It's been less of a problem on mobile phones and app stores. But then you need to go through a verification process and abide by the rules of the store. So a more powerful web platform is always welcome.
I wouldn't say JS is "terrible" for CPU optimizations. V8 and similar runtimes do incredible job with type-specialized trace JIT. JS is much faster than people give it credit for. But it's simply not a great target for languages which don't use dynamic types and garbage collection.
Oh wow, I’m going to try that out tonight. I didn’t know you could edit all the lines of a selected block!
IMO the most common use case both inside and outside the browser is going to be libraries. You'll have far more options to use considering how many awesome c/c++/rust libraries there are out there. And there are also some projects like blazor that lets you use the same language (on blazor's case it's c#) on both the backend and the frontend, I think this is going to be a great advantage in the future.
Thank you, for your valuable inputs people! This is why I love this sub so much. I have decided to do 3 things presently: 1. [https://javascript30.com](https://javascript30.com/). This looks good. No frameworks, libraries, etc. I should be able to get a hang of JS with this. 2. [https://watchandcode.com/](https://watchandcode.com/) Will be able to build a To-Do app with the help of this. Again I should get a hang of JS. 3. [https://github.com/getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS) This book series to get understand all important concepts in depth.
I hardly recommend to you go deeply into specification, it's not friendly to read as some resources, but still kinda easy to go through and it will give you the most full knowledge of how this is all really works About frameworks, you don't get good enough knowledge from them, but you may learn js as parallel
Keyword is "similar run times". In comparison to python it might be good but on the scale of c or rust, I stand by my statement.
+infi
Sure, C and Rust are faster than the best JS runtimes. But Web Assembly is expected to actually be 2-3 times slower than native as well (due to its safety features). Also would you be surprised to learn that V8 is much closer to C++ in performance, than it is close to Python?
Nice
Agree with the others saying to build a todo app using localstorage. That's actually an exact exercise I once had for a potential employer. Try using as much of ES6+ as you can and doing it without a framework will give you some practice in efficient DOM manipulation. When you get more comfortable on you can do it with a framework which will handle the DOM for you.
I'd say you should be able to read through this and understand pretty much everything without having to look it up, then probably the other tabs for good measure. https://htmlcheatsheet.com/js/
What really matters is delivering. If you want to be front-end developer it means you should be able to develop websites/applications which run on web browser. DO IT. Its same thing as being painter you can read thousand books about it, watch movies about art, go to courses and get certification, but at the I would ask could you show me your paintings? Same here all these platforms where you earn "badges", "hacker points", even certificates for writing `console.log("this course suck")` are just noise. (and I tried almost all of them). Want to learn it, do it. Even without frameworks, because if you using framework you would not be able to see what problem they solve. Here are some suggestions for starting up: 1. Reimplement at least 10 headers from popular websites. For example rewrite this Reddit header panel. This will give you more benefit than all this courses. 2. Create zilions of forms, add validation to them, this should be your second nature. 3. Learn to develop layouts for the browser. Again go to any website and just reimplement their layout. If you enjoy reading technical literature here are two books I would recommend: * [Eloquent JavaScript](https://eloquentjavascript.net/) * Beginning Functional JavaScript: Uncover the Concepts of Functional Programming with EcmaScript 8 Don't even waste your time on other books, I did that for you :D The only video course I would recommend is : * [James Moore - Functional Programming For Beginners With JavaScript](https://www.udemy.com/functional-programming-for-beginners-with-javascript/)
You could make custom components with settings to achieve this but it wouldn't be noob friendly anymore, I haven't heard of another tool that would do what you want, but keep us updated if you find one.
Building your own project is the most credible way to develop your skills. You don't need to have a unique idea, just try to imitate something from the market. It can be small programs and that is fine as long as you are learning.
Sure, I believe you 100%. You are undoubtedly temperamentally unstable. Anyone who says anything that goes against your my-way-is-the-best-way and I-am-always-right mindset is the enemy. Good luck man, keep an eye on your blood pressure levels later.
Despite looking nice which means a solid GUI team, their actual programmers produce poor quality programs. As a web developer I found safari used to present far more problems than IE and continues to do so. Apple, get your shit together and stop using H1B slave labor like your a bunch of poverty stricken peasants.
And what reason do you have to think that it isn’t particularly good? It was based off of the deleted comment where the guy was calling people dumbasses and asking “Well what is a phone number?” to the regex question. Also him saying interviews are practice for the next interview (which I agree with) but not in the way the user was saying it as if it doesn’t matter that the company is taking their time to give him a chance, he is just going to use it for his own benefit. So again, what reasons do you think my judgement was off? (Just in case there was any confusion, the comment I made wasn’t for the OP).
OK fair enough, although I think I see them all as I read they remain visible in my RSS feed even after you remove them... still, I suppose you know best
Drag and drop front end, no thanks
Just wanted to thank you for this question, I was really confused about what to do next and if my current JavaScript knowledge is enough to be a webdev.
&gt;computed only works on === as far as I understood. We regularly derive a subset of data from observable data. An example would be a list of todos. &gt; &gt;@computed completedTodos = \_ =&gt; this.todos.filter(\_ =&gt; \_.isCompleted) &gt; &gt;. This doesn't do anything of value and you might as well throw that in your render as every change to todos results in a new object, which will cause rendering again anyways. &amp;#x200B; computed works by recording access to any observable during its execution and then producing a value which gets cached until one of accessed observables change. In your example \`completedTodos\` will only re-evaluate if \`this.todos\` gets set to a new reference, an item is added/moved/removed or if \`this.todos\[i\].completed\` is changed. If for example you change \`this.todos\[i\].title\` it will not need to re-evaluate. Although it would have to re-evaluate if you add a new todo with \`completed === false\` which will not actually change \`completedTodos\` in which case sure, \`completed.struct\` can be used to prevent that but its not free and quite situational, I don't think it would make a good default. Making it computed makes much more sense then putting it in a render method though since it won't have to re-evaluate on every unrelated prop and state change , and if you extract it out to a store or something then other components can also use it. &gt; ParentComp would render again rather than just ChildComp because of accessing this.currentMessage from within ParentComp to set the prop on ChildComp. &amp;#x200B; Your example is not a fair comparison to redux, as redux has an external store and here you're attaching your observable values to the component instance. We use an external store with mobx on our team (kind of like mobx-state-tree) and then \`connect\` it with a component like redux. So this is how it would look like: &amp;#x200B; `class Store {` `@computed` `get currentMessage() {` `return this.someObservableValue ? 'Message 1' : 'Message 2';` `}` `}` &amp;#x200B; `@connect(store =&gt; ({` `message: store.someObervableValue` `}))` `@observer` `class ChildComp extends React.Component {` `render() {` `return &lt;div&gt;{this.props.message}&lt;/div&gt;` `}` `}` &amp;#x200B; &amp;#x200B; Hope that makes sense.
That doesn’t really make sense. Any explanation for this ?
Take your favorite mobile app. Build the ui in HTML+js with static data. That much is enough.
There is never enough Java-script for a web dev, regardless which framework you use. You can always learn a framework and continue to learn about the vanilla languages.
* They want to distribute native code without code signing, app stores, and development kits. * They want to avoid the “install” step for their users. * They want to run an application in the browser, but don’t want to (or can’t) realize it fully in JS. * They want to use the browser’s rendering and layout engines as their ui for an otherwise native app.
TODO lists are a very common JS project. I'd recommend making whatever you think would be fun to make.
Hmm ight to-do list it is.
Main thing with frameworks is getting fluent with the common array methods (map, filter, and reduce especially). Learn how to handle fetch calls and by extension, promises. Object deconstruction also comes in handy...
I like functions, but that's just because I so far haven't had a reason to use a class instead of a function since I never had to factory create clones of a function. I mean that's all a class really is, just a clone of a function unrelated to the template. Suppose you really pick up classes if you need them, but if you don't then you don't bother picking it up.
I feel most programmers make the mistake of trying to write code in a perfectionist way. All this does is waste a lot of valuable time. As long as it works and people can read it, it's good. The way I write my code is so sorta bullshit it until it works. And once it does work, I make adjustments to it afterwards to clean it up, fix bugs and make it look good.
The burden of installing apps. Let's say I need to do a very specific task, like compressing an image/video or converting a file format. I can install an app for that, whether on phone or PC. Why would I download an app, though, if I can get the task done within my browser? Another use case is that software companies like Autodesk and Adobe can run their programs in the browser (Autodesk already did). I think if they limited their programs to the web, that would stop piracy. Users need to log in and have a subscription. This is of course not currently possible (how would they go about offline users?). Meanwhile, it's being used for demos and for cross-platform support. Using it as a substitute for mobile apps is not an unlikely use case, too. I really hope it will be the ultimate solution for real cross-platform native apps.
You should learn javascript without frame. event loop, type coercion etc... are essential in learning javascript https://youtu.be/Bv_5Zv5c-Ts
Hi /u/Orol_09, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I learned everything from free online courses. Started html/css/javascript standards like everyone. Started looking at "frameworks" and what is popular. React is the most popular one. There's countless job offers, crazy salaries, enormous community. I had friends that advised me to get my head on jQuery first. Complete mistake. It is useless and won't help you in any way to understand modern frameworks. Don't waste your time. &amp;#x200B; Jump fast on a framework. I'll recommand React obviously, but more so, NextJS. NextJS is a SSR (server side rendering based framework). SSR is a modern way to do web applications. Next is crazy good at doing it. And the major point is their Learn page. I was just starting my React teaching, had very experience and understanding. Next tutorial is so well rounded that I got to understand React from it. It's probably a matter of taste, but worked like a charm for me, wihout teachers or relations to discuss IRL about it. I mean. It truely is accessible.
I think people should just learn and use the much more general and useful matchMedia API.
lol maybe I will, not got time at the moment :)
I'll tell you what I tell everyone: you won't start really being comfortable with JavaScript (or, any programming language) until you start applying it to solving problems. Pick a project you're interested in, and use JS to implement it. You'll learn loads!
2004-2006: Experimenting with Delphi while in school. Also experimented with webhosting, running PHProxy and building a Delphi app to open a site through it. Almost got suspended, but it took school IT team over 4 months to find it. Didn't really graduate with much worth shouting about. Already had built PC's for about 2 years prior. 2010: Started again with Delphi, building small applications including an NVIDIA GPU monitor, a tool for managing cloudflare sites, a tool for generating bug reports for WoW betas, etc. Stopped working with Delphi in 2013 after realising it's lack of community. Still miss the visual IDE but Embarcadero can suck my proverbial if they think they bring anything of value to the market at the prices they ask. 2014: Got a 6-month secondment to the dev team for my then-employer. Learned node, decided JS was easy and stuck with it. Someone snitched on me after spying on my online activities, deciding what I was building was problematic for them and their future at the company, and almost lost me my job. Decided to quit to get away from that influence (it was apparent that he wasn't alone in his views, but he also wasn't the most destructive). Karma still owed to that individual. Still not recovered mentally. 2015-2018: Built tools for the various employers I worked with at that time, revolutionised the workflow of front line agents, had carrots dangled in front of me with promises of not being stuck answering phones and being moved to a dev team. Never delivered. Learned that some people traded sexual favours to move up in some of the companies. 2018: Finally got accepted as a JS developer, quit my old job the same day. Been loving life ever since. It's not stress free, but productive stress is different than destructive stress. Except the commute as a night owl working in the day is slowly killing me.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
The idea was to make something more like the state object in React, but synchronous, with the read-only property Redux, and a simple API like Firebase database. This is what I came up with so far. Statebase lets your create an object with 5 useful methods on it: * val() - get current value * set(value) - set value * reset() - reset to initial value * listen(callback) - subscribe to changes * ref(key) - reference part of the state (has val, set, reset, listen, ref methods) so you can do stuff like `state.ref('someKey').ref('childOfSomeKey').set("I'm a nested value")` It can be used with any framework but I created a simple binding for using it with React in a very similar way to using Redux with React: [https://github.com/ee92/react-statebase](https://github.com/ee92/react-statebase) I'd love to hear some feedback or find others who want to contribute to the project. Cheers!
This is what Netlify recommends per [this answer](https://community.netlify.com/t/checkboxes-and-radio-buttons-in-forms/1486/2)
You can write blog post and give conference talks about it.
Good bot, thank you for catching that.
Yeah that's good if you don't want to get used to the above pattern. I use it for way more than just comments, so the comment usecase doesn't feel special to me.
And share your work! As often as possible! 😀
Don't use images, use SVG. They are a hell of a lot smaller, infinite resolution and will load easier and display clearer.
Also try integrating some authentication and explore web workers.
Thank you, I'll look into that.
So essentialy we got rid of Java from browsers and now we are turning browsers into Java?
It will cost 1,000,000,000 dollars. USAsian currency only.
Do the buttons all have a classname in common?
These are awesome, your students are lucky. Thanks!
Build things. Builf something common, like a modal or form validation from scratch. Add a feature to your favorite repos. Look through GitHub issues and see if you can help. For me, it was the best way to learn.
TIL that Netlify [handles form submission](https://www.netlify.com/docs/form-handling/). I'd only ever heard of them as a static site host, so this is cool I guess.
Yes. It’s something similar to a Like button on facebook, used to favorite users.
Hi /u/1234arnav, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
FreeCodeCamp was also my introduction to the frontend web stack. One year later I have a flex/remote position as a WordPress developer. Two years later I am building applications of my own design in ECMA6. You might have enough skills right now to find an introductory position. Something based more around bringing mockups to life. If you want a more code oriented position, you will need to have working command of the language you are working in. The best thing can anyone can do for themselves is learn how to **read the docs**. Figuring out what you need and finding how to do it with the tools already provided will ultimately be what helps you write better code and improves your skills with the language. This includes reading documentation on JavaScript itself. [MDN](https://developer.mozilla.org/en-US/docs/Web/javascript) is my go to. They provide excellent technical documentation with relatable examples for web application use of the language. For you you OP I think you should continue to expose yourself to other frameworks, and to be ready to try building anything. You will end up with a lot of half started projects and one or two completed things, which is a good sign you are on you way to being a true Javascript developer :P
Airbnb has an excellentcode style: https://github.com/airbnb/javascript I use it at work with eslint
Thanks!
That's very easy. All you need to do in your HTML tags is to create a div class for those buttons. Then in your javascript file do this: let button = document.getElementsByClassName("nameOfButtonClass"); Then use a for loop to iterate through all those buttons... for(let i = 0; i &lt; button.length; i++) { // do stuff here } Inside that code you let it do whatever you want such as .addEventListener or have it click on every single button etc... Good luck!
[removed]
If you're good at photoshop you can take each of those images and set it to one large canvas that's been proportionally sized. Similarly with sprites, if you had a gigantic sprite sheet, all you're doing is loading that 1 image, and then setting coordinates to a specific section that you need. Otherwise your the next best thing would be to have all your images stored in an array and call the specific element needed for your image. And try to keep your image file sizes down, they can really add up if you have a lot going in your project... Good luck!
I love es6, but it's also important to go back to the basics and understand how it was done before this. What people usually do when they are in a hurry is make it work, then go back and refactor and clean it up. Plus doing it this way will make you understand non es6 syntax if you've been on it so long you actually forget the old way of doing this such as prototypal inheritance, non template literals, and \*gulp\* function constructors instead of using classes. Good luck!
I was trying to learn about sprites, but could not figure out how they were made, any good tutorials on creating those types of images.
Use file streams. Pipe that to your output.
I assume you could more easily use numbers larger than (2\^53 - 1) in the browser using a wasm module. That could be one reason
Hi /u/gobsmasher, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/Singing-Words, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
WASM is already more like 30% slower, not 300%.
I use them always. Code readability trumps the .3ms or whatever you may save using a for loop imo.
I don't know near as much about We assembly as I would like. It is on my to learn wishlist. One thing I have learned that makes WebAssembly better than Core JavaScript is Timers. The lowest time increment JavaScript can calculate is 1 millisecond. WebAssembly can calculate a time increment of less than 1 millisecond.
a REST Endpoint perhaps?
The only way is to test yourself man, Try various websites that will prepare you for competitions, Solve some questions asked for job hiring. All the best!
I think people commenting here are giving many wonderful suggestions. To answer your main question I would say the minimum bar as a professional webdev, you should be able to comfortably build a full stack app (front-end, back-end and data persistence), you should also be able to build to scale, and have experience hosting the app on a cloud based server such as AWS. If you can so all that you can at least get freelance work, and if you can get freelance work you'll be one step closer to a full time web dev.
The script you need is as simple as this: ``` document.querySelectorAll('&lt;btn selector&gt;') .forEach(btn =&gt; btn.click()) ``` Just put the right selector in there.
If your data is too large to hold in ram you can use a different technology, nosql would be a good next step.
I would say that React is a harder first framework to learn than some, but it is valuable as a popular framework in the world these days. I would say learning something like angularJS is a bit easier(2.0 and below, as otherwise you need to learn typescript), and maybe even VueJS (my personal favorite having come from primarily React). Overall many modern frameworks share a lot of similarities so as long as OP picks a reasonably popular one he/she should be fine.
These are bit slower compared to other options, but improves readability a lot. In most cases it doesn't even matter because you are working with smaller set of data and some milliseconds of delay is not noticeable. But I have seen this affecting in android mobile devices when the hardware is not good enough and JS thread is busy in rendering and computing the heavy data set. To give you example I had to display chart based on the 100-1000s of data. I needed to apply filters, do some calculations and also transform to a different shape of object before feeding it to chart. My first instinct was to do this: `data.filter(filterFunction).map(transformObject).reduce(calculateValues)` Which looks cool but it was iterating over those huge chunks of data over and over along with it's delay in execution. The delay is very noticeable.
No, it's not too large for RAM. It's few MB.
Yeah... Thanks.
Before moving to JavaScript frameworks (angular,react,vue) make sure that you know ES6+ JavaScript,DOM manipulation and Working with api.These frameworks use a lot of ES6 like arrow function,map,iterator etc.YDKJS(You don't know JavaScript) book series is really good for understanding JavaScript in depth.some other good books are Eloquent JavaScript and JavaScript the good parts.
Source?
I think you're confusing time zones with UTC offsets. There are about 200 timezones.
Not sure where you're getting that from, there are no timing APIs in wasm, you're relying on JS for that.
I've seen that number numerous times, I think it's supposed to be common knowledge. Also done some stuff in wasm myself and difference is certainly less than 2x.
Most of the time you're fine using slower but easier to write/understand functions like map/filter - just don't overdo it. For instance, using reduce with Array.concat to combine an array of arrays is a terrible idea because you're going to be cloning your entire array on every iteration.
Your edit is for the front end code to retrieve just about anything from a server. It doesn't matter on the server. As for your original question, for larger than a few KB JSON files you should use something that is not straight file reads. If your JSON file gets too big, a few thousand concurrent requests could destroy your computer. Go with a super simple NoSql solution and you'll be fine. Might I suggest MongoDB.
The JSON file is few MBs. I am using MongoDB for managing the user data. I will try to find out how to send JSON using MongoDB.
If you're already using MongoDB why not just store the data. All you have to do is query the database like you would l for user data and return it in the response. No having to parse anything.
That makes sense. However, the back end is a C++ program that generates the JSON file. I will try to figure out how to get it to MongoDB. Perhaps an async write to DB.
Thanks for the insight. Will try jsperf. 👍
Forgive my ignorance but isn't the difference just semantics? If an offset has multiple names (and thus multiple zones), it's still the same offset isn't it?
Frameworks are ment to help you to solve problems and make your life easier and shouldn't be used as a learning-curve-skipper. If you are unconfident in your skills that you could code the majority of basics you need for your page, then I would recommend still learning and especialy training your skills by repeating several tasks with plain javascript. Exprience common pit falls, beginner mistakes and spend hours/weeks/months/years to fix those really annoying bugs (I mean don't do that just for one bug.. but over all your developer career time xD Years for one bug would be.. wow..), so you get the really important experience. &amp;#x200B; Otherwise you will stuck on those frameworks when you actually have to implement some more in-depth tasks. Since those frameworks are simply javascript + their own language (example JSX for React). Of course you already can stick your nose on those frameworks and learn from them how they handle several problems and what their patterns are etc. &amp;#x200B; Last but not least: You will need several years before you get confident about the basics of development. Don't rush it! Expect to fall on the ground and break your nose. Be prepared, get some tissues and a anti-nose-breaker. You have to stay up and continue moving a lot of time, but don't forget the pot of gold on the end of the rainbow you are aiming for ;)
Can you get a sample working in something like codepen so we can see?
Have you thought about using a transducer?
I don’t know how much time or resources you have but imo the „cheapest“ option would be going with a wordpress or better keystoneJS template . Then you can use a Chatbot service like dialog flow. I know that dialog flow has the option to export a chat window as html iframe which you can easily put anywhere on your site
If you don't need to transform the files, serve them as static assets, you don't need node You can even use a CDN and cache them, depending on requirements
I built a game my first full fledged project. It's easy to think of new features for a game. Working in refactoring it now
I think if you're going to focus on physics i would use three, not the canvas. Then combine it with a physics library like cannon or ammo. You can [drive threejs entirely through React](https://github.com/drcmda/react-three-fiber), that makes working with it so much easier. Here's an example for instance using three+cannon+react: https://codesandbox.io/embed/m7q0r29nn9
Oh thanks, I will think about it. Thank you for the information.
Some of them are duplicated because of DST - mountain standard time is the same as pacific daylight time, but it would be wrong to put them together because regions observing PDT switch to PST in the winter. Besides that, different countries often have their own time zones for... reasons I guess? Maybe some country wants to change their local time and they bring their time zone with them, idk how that works. So yes the difference is semantics, but there's some good reason to it.
My company has both a web version of our music application and an iOS version. We've been rewriting our synthesizer code in C so we can target WASM on the web and native on iOS. Previously, we had to maintain complex DSP code in two implementations – JavaScript and C.
Yes. Also Flash.
&gt;Is it true that with enough javascript programming knowledge/experience, you can build desktop apps through Electron or mobile Android/iOS apps through React Native? &amp;#x200B; Yes, essentially. You'll hear some people saying yes, some saying no, and really it depends on the app that you're making. Some APIs just aren't available unless it's native, and some performance might be difficult to achieve, but for the majority of apps JavaScript is fine.
When I first used Angular 2, and it had moved to a transpile-based build, I'll admit that I was annoyed. I'd been so used to just 'write and run' with Angular 1 (and everything before it) that I really struggled to get into it. It's why I initially chose Angular 2 over React - I couldn't figure out how to run even a basic react example, while angular-cli at least worked as expected out of the box. Took me an entire year, and landing a developer job before I had reason to invest in React. Still one of the best decisions I ever made, but the simplicity for true beginners isn't there these days.
In regards to React Native, you'll most likely still need to learn some Swift/Kotlin to work with native modules on the IOS/Android side of things. There isnt always a npm package readily available for whatever you want to do.
You can even build desktop and mobile apps without the need of frameworks like Electron/React Native. You can add a Service Worker to intercept network requests and with a manifest and HTTPS you can deploy a Progressive Web App (PWA) that works in multiple platforms with the same code base.
Cordova is an alternative there. I don't develop my own plugins. It's worked so far.
[pedant mode: ON]Just a heads up, React is a (view) library and not a framework, and Redux is even less of a framework :-) It depends what you are aiming for. If you want to be employable as soon as possible, dive straight into React, using hooks instead of Redux, and start building staff. You'll soon learn enough to get jobs (maybe contracting as a junior first to try different environments), and then you can improve your knowledge bit by bit. Things like You Don't Know JS are great, but it's perhaps too much information when you are starting out. You can't learn _everything_ before you start work, and you don't need to. Learning is an ongoing activity that you should keep doing throughout your career
Some downside of this is that performance won't be good as in real native apps. And it can also use a lot of RAM or CPU when running. &amp;#x200B; I think that this cross-platform frameworks are good for quick development of simple apps. But as soon as that apps require better performance or more native API calls, it is better to rewrite them in native technologies for each platform.
I open sourced a nodejs/express helper library called node-ally https://github.com/Grantlyk/node-ally
You forget code sharing - Validation, server side rendering, GraphQL are all things whereby having a common language means writing code just once Also that having a single language to accomplish a thing is cumbersome is nonsense, and that is is tedious is just your opinion. Where I work we have almost completely moved towards full stack JS as the "ground". It means we can all be confident that everyone is able to carry out any task of average complexity, both front end and backend, and we can allocate resources around to different projects as needed. Training is also easier to organise. Any new service will be by default in node. Then individuals / teams are also able to pursue other stacks (coincidentally enough I am one of the very few python guys), but they have to justify it to other teams. I find it's a great approach that works, as long as you don't mind losing a couple of backend devs (PHP and Java) who hate the concept of full stack on principle. Too bad, you can't keep everyone happy, the rest are having a ball and being productive.
Nonsense. AngularJS was a total mess, and so was gulp and all the tooling we had before that (which wasn't much - I remember Ant, Sprockets, makefiles...) good riddance I say
Be honest, how proficient were you in all those languages?
Your job is to practice. It doesn't matter if you're learning vanilla JavaScript or a framework, make sure you throw a lot of hours at it.
Fantastic work there!
I solved this problem. I was just giving an example of where it might cause delay. But good that you pointed out, will help people.
&gt;React Studio Working as RN developer for about a year and have never needed native skills other than basic xcode or android studio skills. But in the case where you will need native kotlin/swift skills your company will probably rather hire someone highly skilled for doing this than letting someone with basic knowledge of that platform do a crappy job. Just my 2 cents. In conclusion: you don't need to learn native development for most cases.
&lt;img data-gallery="manual" class="im" style="width:100%;" src="data:image/jpeg;base64,'+data+'"/&gt; &amp;#x200B; &amp;#x200B; data is the blob that is blob from the server.. it's too big i can't make a pen it lags... Here is an image of the response:
The problem is you're repeatedly iterating over your list. If perf is an issue, you can put all of your operations inside the reduce - and apply filtering and transformation there - so it will only happen once. &amp;#x200B; \`\`\` myOperation(data).reduce((acc, item) =&gt; { if (filterFn(item)) { acc.push(calculateValues(transformObject(item)) } return acc }) \`\`\` &amp;#x200B; There is some noticeable perf difference between native implementations of these, so you might want to consider using ramda or lodash instead, as they tend to use while/for under the hood.
On the other hand Visual Studio Code and Atom are Electron apps, and each has many happy users.
I didn't said they aren't good :) I said that they can't have so great performance as native apps.
&gt;Is there a need to parse the entire JSON if I know for sure that the JSON file is well-formed? If you want to send the contents of the file to the frontend, without sanitizing it in the backend, then just read the file and send it. Whether you use a sync read, async read or streams is entirely dependent on the number of concurrent requests you want to handle. Think of it as just serving a static asset, the server doesn't need to check it before sending it. You could just very well set up an nginx server to serve the file (with the appropriate cache headers) and control the performance from there. &gt;One could directly call the require function as well. Does this avoid calling the parse function? `require` will still parse the file from a JSON string to a JS object. &gt;is it inevitable? The frontend will have to parse the response from the backend, but I'm assuming your question was how to avoid doing it in the backend.
&gt;I have been writing almost everything as es6 classes, which \[...\] leads to me writing the same stuff over and over again I feel Can you elaborate on this? What makes you feel that you end up with duplication caused by using classes? There's nothing inherently wrong with classes, they're just syntactic sugar and, I feel, a good way to organize related code. Almost everything you can do with a class you can do with a function - class inheritance becomes prototype inheritance, the template pattern turns into delegation and encapsulation turns into closures.
Yep, I built a macOS app last year using React Native + TypeScript (which transpiles to JS) + Swift: [LinguaBrowse](https://apps.apple.com/us/app/linguabrowse/id1422884180). I wrote this using the experimental [react-native-macos](https://github.com/ptmt/react-native-macos) project, which can target as low as macOS 10.11 (it's not a Catalyst app). Accessing the native side from JS was a huge pain (lots of UI state like toggleable buttons to keep in sync), but with great effort it *was* possible to produce. &gt; Javascript sounds like a dream-come-true language for a programming novice like me considering how much platform-agnostic it seems Yes, it's platform-agnostic, but when building a non-basic app, you'll quickly find a need for functionalities that are only offered through native code (like text tokenisation, Augmented Reality, Machine Learning, barcode scanning, making phone calls, toggling a phone's torch light)... though the lines are admittedly becoming increasingly blurred due to WebAssembly. &gt; That sounded great to me, but it also confused me, how come people don't talk about this often and only refer to javascript as a web scripting language? Because their only exposure to creating native bindings for JS is through React Native, which is a horrible developer experience (I could moan for a while on this subject). There is a better approach, though. [NativeScript](https://github.com/NativeScript/NativeScript) is relatively unknown, but achieves a wonderful dev experience, providing JS bindings to 100% of the platform APIs. See my [snippets](https://github.com/shirakaba/nativescript-grimoire) for examples of what's possible (everything). Electron is not ideal for cross-platform development, and doesn't solve the native bindings issues significantly differently to React Native, to my knowledge. But I can't wait to write [macOS apps in NativeScript](https://twitter.com/tjvantoll/status/1138817540724051973) via Catalyst :) Add my [React NativeScript](https://github.com/shirakaba/react-nativescript) custom React renderer to the mix, and that's the future for me!
You can build almost anything in JavaScript, from client-side web apps/PWAs to [servers (and server-side websites)](https://nodejs.org/en/), across to [desktop applications](https://electronjs.org/) and [mobile apps](https://cordova.apache.org/) to [embedded programming](https://www.espruino.com/). The rub there is that while you can write pretty much any type of application you like, aside from web apps/PWAs and arguably server-side code, JavaScript is usually not the most *efficient* way to write any of them (in the sense of "simplest to develop", "efficiently running code" or both). JS interpreters are very fast these days, but the nature of JavaScript as a dynamic, weakly-typed language and the expense and overhead of starting up and running an entire interpreter (and sometimes also a browser/webview) before a single line of your application gets executed means JS apps tend to be larger and slower than compiled, native alternatives written in other languages. [WASM](https://en.wikipedia.org/wiki/WebAssembly) may help there somewhat in the future, but it'll likely always be the case to some degree as web technologies are a cross-platform abstraction layer over native development on each platform, and abstraction layers *always, inherently* have some efficiency cost. Offsetting that, however, is the fact that not only can you use JS for all those different platforms and types of app listed above, but if you make your technology/framework choices carefully then you can write *one codebase*, package it up with a few shims/polyfills/native Cordova plugins) and build and deploy the same codebase to *all* of those platforms, OSs and devices. Ie you can have a single codebase with a few platform-specific conditional blocks, and then build and deploy it to pretty much any major computing platform on any popular class of device in the world. JavaScript has finally delivered on Java's promise of "write once, run anywhere". It's not often the most efficient choice of runtime/language outside of web apps, but it's by far and away the most powerful and flexible language and runtime in the world. Anyone who says JS is *only* for websites is either a native app developer with a fixation on raw efficiency (say, like a kernel or game developer), or badly, *badly* ignorant and out of date.
Yes You can get 99% of what you need. The last 1% you'd best just avoid.
I wasn't saying your judgment isn't good, but you're just a stranger on the Internet. You might be a genius when it comes to these things... or you might be a total primadonna who has trouble working with lots of people for one reason or another.
You don't necessarily need Node to write JS for the frontend. Node has 2 use cases: 1. Running server-side JS. 2. Running tools that make creating frontends easier. One such tool is [npm](http://npmjs.org) (comes bundled with Node), a package manager similar to pip. It's a convenient way to fetch libraries, like React, but you could just as easily use [cdnjs](https://cdnjs.com/). Another tool is \[ESLint\]([https://eslint.org/](https://eslint.org/), a JS linter that catches common mistakes and code style violations. [webpack](https://webpack.js.org/) lets you bundle multiple JS files into one, for easier serving in a browser and [Babel](https://babeljs.io/) lets you target older browsers with the newest JS syntax. None of the above tools are essentials - they become convenient once you start scaling your dev workflow. If you want to dip your toes into frontend dev I recommend starting with [JSBin](https://jsbin.com/). You can easily use it to test code, even React, and then copy and serve the resulting HTML and embed the JS/CSS into a `&lt;script&gt;`/`&lt;style&gt;` tag (it would be a bit more complex for React, but doable). JavaScript can look scary because of the breadth of solutions, but it's surprisingly simple to start with something small.
Hi /u/frontend-guy, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Have you heard of flutter? Cocos? Some of these frameworks transpile Javascript to native in such a way that they are indistinguishable from apps written in swift or kotlin.
3. Realistically is out of your reach at the present time. This book is recommended by Kyle for Medium to High level developers. If you are new at web development you have a long time to go and that book won't be a great way of using your time. I'd instead do one of the interactive build a whole project type of video series.
I use Nativescript to build and maintained a mobile app for cryptocurrency management. It builds to iOS and Android.
That's really not a plus for JavaScript itself though. That's more a plus for the transpilers
This comment is simply idiotic. Why does it have to be mutually exclusive?
It’s weird that you managed to create a multiplayer game but can’t create a countdown timer.
Zero. Believe it or not, it's totally possible to build a website without a single line of JavaScript. Web _application_ development is a different beast, though. It's pretty much a bottomless pit, because no matter _what_ you've learned, you will have crazed 22-year old "senior" developers mock you for not having learned _enough_ (or not learning the right thing). At the same time, by the time you've truly mastered something, there's a new fad that you need to catch up on in order to stay employable. Welcome, and have fun!
Look up setInterval and setTimeout
Pie and doughnut do not accommodate 'auto' placement - using this switch on these charts forces labels outside.
I am familiar with these and have used them both many a times. My concern is that it might be too easy for players to manipulate the java script using the inspect element console.
... it’s all client side, they can already manipulate your game. You could send signed Ajax requests to the server every second and wait for a response there based on a time stamp of when the turn started. However - again - it’s client side JS so this is easily manipulated.
Consider that JavaScript itself - the language - is very barebones. What kind of application you build with it is largely determined by the runtime and/or framework you're using as a base for your app. For example, React (for Web) and Flutter both run JavaScript code, but the code you will be writing for each is going to be significantly different. And yeah, you can totally use JavaScript to build desktop apps - chances are good that you're already using a healthy amount of JavaScript-powered software. There's a certain stigma attached to this, though, due to the relatively high resource usage of eg. Electron apps, but there's always going to be a bit of salt coming from wannabe gatekeepers who object to things getting easier for newcomers because it may impact their own market value.
Yes you can, but that doesn't necessarily mean you should. Depending on your requirements, you may need to opt for another technology that would yield greater performance. You can also do it with no experience. It'll probably take longer, but you'll gain valuable experience too ;)
Well why not just use a websocket, then keep the timer server side and send out an update to the time using a setIntervalLoop every second. That keeps all the players seeing the same countdown timer at roughly the same time.
If you’re concerned about cheating the timers, you’re probably best of looking in to websockets and starting the timers server-side. And no longer accept any plays when the has elapsed for a given client. That way they can try to manipulate whatever they want but just end up loosing turns.
I didn't say the game is on client side? I made the game run though servers to avoid players being able to manipulate variables and such.
A testing-only conference? Does that mean most developers will say they will attend, but then end up not going?
Thanks for the downvote for trying to help despite your initial question being vague - you’ve ensured I’m not going to help you further.
Interesting point, but I just noticed they also have a [2018](https://2018.assertjs.com/) which means they've done this before and the feedback was positive since it's happening again..
I came here to post something similar! lol
Can you get a sample of your code where it's not working in codepen? It makes it a lot easier to see and debug.
This: https://www.ebayinc.com/stories/blogs/tech/webassembly-at-ebay-a-real-world-use-case/
I was making a joke about how all developers SHOULD be unit-testing, but few end up actually doing it.
I get fatigue when I have to trudge through same old shit every day. With JS I have a stable environment that works both backwards and forward. I can take a peek around the corner and witness all the shiny features I'm itching to get my kludgy little hands on and each month many of the features seem to have inched sen closer than before. JS has so many wonderful and terrible ways to write code. Beautifully unopinionated - only stuff that's more than less broken is ever been really removed or deprecated. JS DOM is a bit more of a sad example, but I think I've written less than a handful of hours of JS DOM code per year. Want to get a feature of tomorrow for your environment? - Install a babel plugin for it. Write your own? Get some polyfills. There's usually good documentation on how to set it up and the ecosystem provides you great tools for it. No need to compile the compiler again or kill your enthusiasm with tracking dependencies. Write almost anyway you like and it will run for 90% of users. Put some effort and it will run for the rest too. Don't have to worry the user about installers, malicious anti-virus, wacky environments, updates or standard libraries. When WASM and WASI will bring availability to non-javascript languages, they will also bring some more speedup and low-level-utilities to javascript, where JS has had problems. Hell, speedy JS code is about as straightforward to write as speedy lower-level code. On features, I don't really know enough of Python, but if restricted to domains where JS currently runs, I don't recall hearing of any features I'd be envious of. Every syntax has it's own fans. Get the transpiler running and set up some linter rules and you have a language just like you want it.
This is still open to manipulation from the client side.
This is pretty cool but in the context of the average hourly wage for a JS developer these bugs have a curious effort to payout ratio. Still something cool to do if you’re bored though.
Have the frontend request the data as JSON, or have the backend generate JS code using the JSON data a la "var data = ..." (global). In the first case, let the frontend parse to a native object using JSON.parse. In the second case it's already native when the JS code runs.
Sounds absolutely miserable.
if you are willing to use the Canvas you could map the values to points in the canvas and draw it out
Netlify offers a lot of features, including [authentication](https://www.netlify.com/docs/identity/).
Couldn't you theoretically use a charting library not specifically designed for VueJS and just have it sandboxed off? Something like charts.js or highcharts?
Have the actual play controlling timer running server-side, and do all the checking with that- i.e. store and measure between them starting their turn and finishing it all server side. Tell the clients to kick off their own timers at the same time, but just use those as a display for the users- not caring if they get corrupted by the users or are slightly off. You'll want to make your backend timing a bit forgiving (i.e. slightly longer than you tell the users), so a sending a turn at the very last second is unlikely to be caught out by network delays or slight differences.
Seems like discord managed it quite perfectly, what do the use? React native?
That was the number given when it launched. Check out the Mozilla blogs on wasm.
&gt; The script runs **successfully** in the in RatingTotal, Tot0, Tot2, Tot3 and Tot34 and in JavaScript Console. So what exactly is the problem? Without enough context, I can only guess, by looking at the snippet you posted, that the `if` clauses should contain field value assignments instead of boolean expressions. So, for instance, the following ``` (three.value===four.value) ``` should probably be transformed into ``` three.value = four.value ```
Is `dateTime` defined when you initialize the new PostTable?
this feels like a pretty good summary. +1.
Thanks mate. Can you suggest me a solution?
Why’s that?
Yes. I made a mood tracking app in 3 months called Mood pixel just with React Native and performance is ok. iOS https://itunes.apple.com/us/app/mood-pixel/id1450736806 Android https://play.google.com/store/apps/details?id=com.moodpixel I still have things to do to make it even faster.
This would work. However, it would be like eating a soup with a fork when you can eat it with a spoon.
I will try this. Thank you for answering so quickly. The problem isn't the script in RatingTotal, Tot0, Tot2, Tot3 or Tot34. The problem is in NBWE. NBWE is based on the RatingTotal field. Depending on the score totaled in RatingTotal, NBWE will choose the value in Tot0, Tot2, Tot3 or Tot34.
Ok, I tried replacing all of the triple = to a singular =. No go. Then, I noticed you did not have parantheses around your revised script, so I took all of those out. Still not updating the NBWE field. Here is the code as it is written now: var one = this.getField("RatingTotal").value; &amp;#x200B; var two = this.getField("CBWE").value; &amp;#x200B; var three = this.getField("NBWE").value; &amp;#x200B; var four = this.getField("Tot0").value; &amp;#x200B; var five = this.getField("Tot2").value; &amp;#x200B; var six = this.getField("Tot3").value; &amp;#x200B; var seven = this.getField("Tot34").value; &amp;#x200B; if(one.value &gt;= 0 || one.value &lt;= 10) &amp;#x200B; {three.value=four.value; &amp;#x200B; } &amp;#x200B; else &amp;#x200B; if(one.value &gt;= 11 || one.value &lt;= 16) &amp;#x200B; {three.value=five.value; &amp;#x200B; } &amp;#x200B; else &amp;#x200B; if(one.value &gt;=17 || one.value &lt;=21) &amp;#x200B; {three.value=six.value; &amp;#x200B; } &amp;#x200B; else &amp;#x200B; if(one.value &gt;=22 || one.value &lt;=24) &amp;#x200B; {three.value=seven.value; &amp;#x200B; } &amp;#x200B; else &amp;#x200B; {three.value="0"; &amp;#x200B; }
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/reactjs] [I upgraded removeddit to show removed content by username.](https://www.reddit.com/r/reactjs/comments/c4oryp/i_upgraded_removeddit_to_show_removed_content_by/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Thank you! I will look into it more. I got swept up by another project for about a week but I am now back on this one.
Nah, I'll just pull money from my account, fiddle around for a bit on the checkout page, and then take the subway back-and-forth to the event location for a few times. But not actually combine these things together, because I work in 1-week sprints so yolo
Found the developer with the [poorly designed codebase which became extremely resistant to smooth unit testing]
I believe you want to use &amp;&amp; instead of ||. I'm betting right now your first conditional is almost always bring hit because the value is greater than or equal to 0, so that evaluated as true and never goes to any of the other "else if"s
Because JavaScript has nothing to do with that advantage stated. You could say perl is great in the same way if the transpires transpilers allowed for the same
Yeah I'm doing it right now. Now, to be fair, as others have mentioned, you also need to understand how NodeJS works (which powers Electron) on top of browser is stuff + CSS/HTML... Plus how Electron does things. But fundamentally it's all JS, sans HTML and CSS.
&gt; Some APIs just aren't available unless it's nativ That's true, but you can package your JS codebase inside Cordova (or similar) and include (or in the limit case *write*) Cordova plugins to expose native APIs to JavaScript.
[Twitter announcement](https://twitter.com/evilpingwin/status/1143174814972166145) with appropriate meme
I think you definitely have to add an "`/s`" to your original comment. It's too true to not *sound* true.
Sure wish I could go, but they have [talks from last year online](https://www.youtube.com/playlist?list=PLZ66c9_z3umNSrKSb5cmpxdXZcIPNvKGw). Found some summer blockbusters!
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
PWA's are great, but you're not going to get any meaningful access to the actual device this way.
Really though, what applications today actually need the performance of a native app? Games? There's few other use cases, and they dwindle by the day. I'd say a minimum 95% of apps can be built with web technologies and will be perfectly acceptable in terms of performance.
Hi /u/ED9898A, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/vinnusaurus, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/_vue_noob, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mgtowmonkreborn, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ceandreas1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Janko99, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ssjcracker, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Z-HP11, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Chingyu_Kuo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
good bot, I'm not the creator but I'll forward the message
Hah, you're right. Maybe I should.
Electron
Sweet. Although I don't know why you would do it, i'm sure there are some people who want this. &amp;#x200B; Also what we need is a proper typescript support into svelte.
You might be right, but this example seems to be fully client-side: [https://cloud.google.com/speech-to-text/](https://cloud.google.com/speech-to-text/)
i have initialized in TypeScript like this `const posttable : PostTable = new PostTable(&lt;number&gt;commentCount, &lt;admin.firestore.Timestamp&gt;dateTime` `,&lt;string&gt;docId,&lt;string&gt;post, &lt;string&gt;userId, &lt;string&gt;userName);`
have you tried module.exports in your lib.js
the code goes like this inside lib.js `function myfun(n){` `return n + 1;` `}` `module.exports =` `{` `myfun` `};` inside file you wanna run `const llib = require('./lib');` `console.log(llib.myfun(5));`
Yeah, definitely choose the right tool for the job. Also people should really pay attention to the resources they spend on working on the codebase versus working on the products themselves. Programmers indeed have a bad habit of spending way too much energy on the former.
You could try adding ‘export default’ in front of the function definition in mylib.js. Also you may want to import the function with just a name instead of the ‘*’ if it is just one function that you are importing.
My friend wanted to attend. But he was mocked by the conference host.
But why would you want to go backwards? These days there are plenty of tools like transpilers to solve the practical need for older code, and it generally seems like a good thing to develop things further and make things easier.
I just noticed that the variables (one, two etc) hold the value of ".value" for each field. You're then accessing .value again on that which will be undefined. Change the variables to hold the result from the getField function. And as another comment pointed out, you probably want &amp;&amp; instead of ||.
Appreciate the clarification, cheers. I guess I'm used to thinking in absolutes and have never had a need to account for all the nuances before. Despite working on global projects at the moment, we're lucky that we can just use UTC for everything and let the applications that consume our services do the rest of the work.
You're a retard, it's extremely obvious something is a scam when the technology they describe make no logical sense. It can be spotted in minutes.
Try Export const myfunct = function(n) { Return n + 1 } Import {myfunct} from '. /lib' Myfunct(5)
`export function myfun() {/***/}`
There you go mate! https://lmgtfy.com/?q=Import+JavaScript+function
Hi /u/baris_sonnenfeld, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/randomOranges, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TheEpiphanyFactory, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ellipticcode0, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
There’s never enough JS
Ps. the code I input was: let a = 1; console.log(a); &amp;#x200B; I'm a beginner heh...
Run it in browser
If this interests you then also check out [gron](https://github.com/tomnomnom/gron) which is similar. A nice side-effect of gron is that it’s intermediary format is also valid JavaScript.
Is there a way to run it in visual studios code though? Because I really want to use this program to code things...
You do this in a browser not through VSCode.
VSCode is an IDE, not a browser. If you're trying to run a node application, you'll need to download and install node (google will give you what you need).
I posted to /r/LearnJavascript as you suggested and once again, you removed my post. I even clicked the direct link you provided! Please stop removing my posts or give me the correct link to use. Thank you kindly.
You can use quakka.js extension
Just install it and type your code and it will run
Easier way to run javascript as a beginer is to create a simple HTML file and another javascript file (some-page.html and some-script.js). Then you include the js file in html header like this: https://www.quora.com/How-do-you-include-a-JavaScript-file-in-an-HTML-file Once you have that just open the html file in browser, right click inspect the file to open up console and your JS codes output will be visible there. Another way to learn basics of JS is to use an online tool such as js fiddle: https://jsfiddle.net/afabbro/vrVAP/
Thanks guys! Appreciate all the help!!
Super cool!
Thank you!
Svelte compiles components to a minimal amount of code with (subjectively) great syntax and good performance. This library makes it convenient to try it out inside an existing codebase using React or Vue. Not for everyone but it can be fun to play around with.
Looks cool! Will definitely check it out.
Looks very nice and concise. Thanks!
Any plans for other upcoming helper functions?
Follow-up question: how often do you run into instances where the data that you're working with spontaneously changes its type? Is it a case where the API contract that you're consuming isn't well defined? In my opinion, plain ol' JavaScript isn't successful DESPITE it not being strictly typed, but BECAUSE it isn't strictly typed. The flexibility it gives you is quite powerful and lets you prototype and experiment quickly. Obviously though that means you as the developer (or development team) need to very carefully define your APIs so you're not improperly using your data. And THAT is what TypeScript brings to the table: the ability to strictly define your API contracts, but not get in the way of JavaScript's powerful flexible typing. However, to fully answer your question, if you want proper runtime type-checking, then you'll have to manually insert \`instanceof\` checks throughout. In practice I've never felt the need to worry about that, personally. The compile-time type-checking that TypeScript provides is Good Enough for my needs, and the needs of my team.
This is r/javascript, and I can only remove posts here on r/javascript. Your post on r/LearnJavascript is still up. I'm going to temporarily ban you from r/javascript so we don't have this situation again.
In short, this is not the point of typescript. While in some cases you do need to do runtime checks, typescript provides you all the tools you need to do that. Could you perhaps further elaborate why compiletime checks are so redundant in your case? ``` function isNumber(input: any): input is Number { return typeof(input) === 'number'; } // ... if (isNumber(yourValue)) { // .... } ```
I didn't go last year b/c they specifically did not want white males to submit proposals for presentations. While I get that they wanted to be inclusive of everyone - which I support - it was just done in a really insulting way.
Just out of curiosity, what do you mean by meaningful access?
Because I've learned over the years that no matter how technologically savvy one becomes, or advanced a language gets, there's always gonna be that 1 developer who is too stubborn to conform to the new changes, no matter how much more convenient and easier it may be. You need to be aware of the older syntax, not necessarily go backwards, but simply know there's other ways to do it, albeit however archaic it may be. And yeah, it's frustrating enough to be reading other people's spaghetti code but to read them with old ass syntax that you have no clue about is certainly worse as opposed to understanding , 'ah this was the old style I know exactly how to refactor it...' kind of mentality.
I see TypeScript as a tool for preventing and catching the errors I DON'T see on compile time. If you néed runtime checks (e.g. validating an API response) I find that TypeScript's hints can be useful reminders to cover all the possibilities, but I don't think TypeScript can ever do what you're asking of it because of its need to compile to JavaScript. Instead, it takes a 'prevention is better than cure' approach by stopping them from happening in the first place. If you're coding a small project solo you probably won't need TypeScript at all. But if you're working in a large team with code written by people who aren't even there anymore I find TypeScript (and Flow) to be a godsend. That's what it's good for to me.
I think you misunderstanding some things with client- and server-side
Sure, but wouldn't your first point be more of an argument for encouraging developers to learn new things, not old? Like, you ideally wouldn't drag a team down by forcing them to use older, suboptimal solutions simply because there is a person who prefers to use such nasty means. Like sure, knowing older syntax and such is certainly better than not knowing older syntax (all other variables being equal). But if I were to give advice to newer developers It would primarily be to learn the modern ways of the area of development they are doing and to keep up with the changing environment.
Hi /u/macano130784, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Started refactoring my 'Asteroids' reskin: https://github.com/seckela/rockhopper Live game: https://theexpanselives.com/rockhopper/
TLDR: [Even formal verification](https://en.m.wikipedia.org/wiki/Formal_verification) doesn't prevent from memory hacks, And writing TypeScript only should suffice. Plus : it's a human problem, not a Techy one. &gt; I found good ways to get strict typing ... &gt; I consider at the moment using TypeScript OK, nice &gt; for example all my types get removed in the final TS-Output. Because it compiles to plain JS. hum .. yep, most languages compile to assembly for a specific architecture. No types here at the bottom level. &gt; In my opinion they could check it with instanceof but they don't do it uh ? is you c++ code full of `assert(isnotnull)` and `assert(unionTypeOrEnumNotTamperedWith)` ? &gt; all that stuff will only work on compile-time and not on runtime Again, only assembly executes at runtime .. and don't get me started on Pipeline-burst and non-modifiable code. &gt; I could not care less to see the errors on compile-time. The crucial and interesting part are the runtime checks Stop writing Typescript. Stop writing JS. Write assembly or [produce a provable motherboard from your code](https://clash-lang.org/). Even there you can't stop [neutrinos to flip a bit once in a while](https://stackoverflow.com/questions/2580933/cosmic-rays-what-is-the-probability-they-will-affect-a-program) &gt; I want my application to fail/die if it expects an int but gets and empty string There is no such thing as a string in ASM. You HAVE to accept purity at the TypeScript level but breakability at a lower one. &gt; I don't see how TS helps a lot. It helps you design consistent programs WHILE not tampered with. Even crypto libraries [formally verified](https://en.m.wikipedia.org/wiki/Formal_verification) assume .. no neutrino will flip a bit (in which case the best state is a trashbin state, non stochastic, not flipping, non disclosed) &gt; you guys know a better solution Let's for a moment take your question seriously : 1. Self-repairing code, proved, in assembly only 2. High-level provable language like OCaml engraved on a motherboard The point : You can't know for sure at runtime that your variables are whatever you think they are. Take an ADA program, compile and run it, stop it (CTRL-Z) and mess with its /dev/$pid/mem content at runtime : there is NO such thing as runtime certainty (except for nuclear powerplants .. and they do Assembly .. and it's pneumatic-based backed up .. and it's gravity-based ensured .. you get it) So: 1. Writing all your code in Typescript is your best shot 2. You CAN'T prevent the user (client-side) or another programmer (JS, server-side) or the universe (neutrinos) to alter your .. dubious certainty 3. It looks like you're mixing TS and JS and fear the JS-level potential poisoning.. This is a human problem. Not a tech problem. Isn't a strongly typed language like Typescript worth it - knowing that you can't know for sure?
&gt; Follow-up question: how often do you run into instances where the data that you're working with spontaneously changes its type Everytime when the input/user/api-data which is not in my hand is buggy. For example an api always returns an integer now they update their api and they are humans and make a mistake and now one field returns not an int anymore but an empty string. If I don't check that in the userland with custom code then javascript would just go on. I wish TS would throw an error because I type-hinted that parameter to be an int but because type-checks are only on compile-time the code would just run with the wrong value. Of course I know this therefore I would check that parameter in my code but it feels like boilplate validation what should be in the lagnuage or at least in a transpiler if a transpiler is already in use.
Well that's just fake.
I see what you mean but this is exactly what I mean with custom/own check in the userland. In my world I would liek to see that: ´´´´ function doSomething(input: string) { // fail already here // do not reach this statement when type-param is already wrong return input; } doSomething(fetch('http://example.com/status.json')); // ignore missing promise here ´´´´
Actually he is quite the jester himself.
&gt; I see TypeScript as a tool for preventing and catching the errors I DON'T see on compile time. Yes I see that but I would like to have an option for the runtime as well. I mean compile time is fine I take that if it is there for free but what with the errors we DON'T see on runtime time. It would be very neat if TS or an other transpiler would throw an error if the type is not correct. This would prevent code execution on errors we DON'T see on runtime time.
Weak typing is actually a pretty serious issue the longer your application runs &amp; the more independent services it interacts with. You really can't, for example, set and forget a Node/TypeScript application for 5 years like you can with a strongly-typed language like Erlang. At least not without some seriously defensive programming
Thats is exactly the case we are facing. We have tons of microservice some on our side and some which are not even in our hands. My idea was stricter typing to eliminate bugs. Of course we coul just check everything in the code as you stated with defensive programming but it would be way more easier if a transpiler would implpement types for us.
Why do you make this? Seems like a bit of a privacy violation.
Thanks
Just because you’re too stupid to comprehend how Holochain works doesn’t mean it doesn’t make sense. I’m sure you’ve heard of the Dunning-Kruger effect; your reaction to Holochain is a perfect example of it. Holochain is way beyond a proof of concept at this point, there is an active third-party development community built up around it already. There is no scenario at this point in which your intuition about Holochain was correct.
What are you looking for exactly? I have a chatbot that has an api interface with a chat window in the browser. Similar setup could work for you. Note : in my setup I don't really have to deal with security, but it could still be fine https://github.com/mousemke/_val/blob/master/modules/core/web.js Just make the web message cross post to IRC (and vice versa)
Thank you for this. Going through my own posts, and holy shit. Mod just delete random posts of mine without any reasoning or message.
This is the Vue 2.x API, for those who might not be aware.
I would actually argue the opposite. Most of the time using react native is too much overhead in comparison to PWA. PWA are now very powerful and today on lot of mobile applications are using web containers to just be in the store. If you really want to make a powerful portable app because of some specific constraints, I would highly recommend to use Flutter because it is compiled to native code (unlike any JS solution). Anyhow I would still recommend to keep it simple and use PWA if possible.
You could say, in a racist and sexist way..
I heard he was painfully chai
True, true, and true
There are some libraries or plugins out there that add some amount of strong typing, but no one uses them. In the Node world we mostly just rely on defensive programming and monitoring to prevent and catch bugs and then we make up for it with faster development cycles. Monitoring is very important for any distributed Node app
You’re gonna want to use blob URLs [https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL)
I mean, that's the norm in Python, isn't it?
I heard he was a spy
Pretty neat idea. Your readme had a bug though, in the `compressObject` example.
&gt; We have tons of microservice some on our side and some which are not in our hands. It sounds like you really only need to check incoming data against an expected schema. That's a lot narrower code surface than just I wish typescript runtime checked everything. You might also want to consider an established schema description format and validation library rather than roll-your-own runtime checks or worse extended TS transpiler.
There are lots of ways to verify correctness and mitigate regressive n risks without unit tests, or indeed any testing at all.
It was all just mocha ado about nothing.
That is totally incorrect. Please check your facts before posting something so harmful to an event's reputation. What you're thinking of is a tweet by someone who was NOT affiliated with the conference (not a conference organizer).
Not the OP, but I can give an answer: There’s a lot of hype around testing that doesn’t really match the outcomes. This makes test zeal a bit tiresome. My biggest issues with writing tests are: - they’re often used as a crutch for bad type systems and a lack of formal verifiability. In dynamic languages like JS and Ruby you end up writing a lot of tests just because there’s no compiler to check your code integrates. Java is similar insomuch as its type system is quite weak (null is a subtype of all types) so you have to write lots and lots unit tests to get around that. Compare that to writing in a language like Haskell or Elixir, or with a formal proof engine like Coq. - if your language has good static analysis capabilities, you should actually be able to auto generate a lot of checks (see Haskell’s Quickcheck, which can reason about the range of values a program needs to accept, then run millions of permutations automagically) - unit testing often involves destructive decoupling: breaking down code into components that make sense only from a testing perspective, not a design perspective. Fully tested codebases tend to comprise lots of small files that don’t really do anything; that’s a problem because then the real business logic becomes implicit. - e2e test suites tend to be extremely brittle and provide relatively coarse grained feedback; they are themselves whole pieces of software and require a lot more maintenance than you think - releasing *buggy* code is rarely as big a risk as releasing the *wrong* code (and when it is, you probably shouldn’t be using JavaScript to solve the problem). You are better served by reducing mean time to recovery (MTTR) in most cases (but most testing consultants have no idea how to do that) - automated tests are actually merely automated *checks*. Trying to replace manual exploratory testing is short sighted and futile. Again though, there’s a paucity of resources of making *products* testable as opposed to *code*.
Since when do CSS animations only work in Chrome on a PC?
Hi /u/dututa, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/willywonka3688, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mubaidr, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks for the hint, I fixed it.
Yeah it's definitely not something to do full-time, just a modest compensation for your contribution to open source.
Good. I’m tired of radical shifts between versions on the front end, it’s one of the reasons I stayed on knockoutjs for so long, they cared about backwards compatibility.
try puppeteer, or look at http auth, maybe that is what your request is missing.
I've been forced to use knockoutjs because of magento 2. Not a fan.
In 2019 I would pick it but in its heyday it was a breath of fresh air (Much like vue was). I haven’t used it for a while but I liked it a lot in the past.
I think this is a good thing overall. I think it's important to maintain the Object API for its structure and things built on top of Vue (like Nuxt), but I'm excited to use the new hooks API as well where possible.
&gt; It sounds like you really only need to check incoming data against an expected schema. Thats what we do currently. Validation with a library. ScalarTypes have it use case without a library. I dont know why you not like it. I mean using a Validation-Library to validate an int or string seems to me like a missing transpiler/language feature. &gt; That's a lot narrower code surface than just I wish typescript runtime checked everything. Just the scalar types. &gt; consider an established schema description format and validation library We do already but for scalar types it seems like a missing lang./transpiler feature.
This post is a credit to /r/javascript. ❤️
Very light Vue user here. Can anyone ELI5 what the Object API is?
React native is NATIVE.
Thank you
I get this in the console `Error: Could not connect to Reddit: TypeError: NetworkError when attempting to fetch resource`
Anything that would block the main thread in the browser is a great candidate for WebAssembly. Because Javascript is single-threaded, it means long-running code can slow down and break the UI in some cases. Some of the most common uses for WebAssembly are going to be image and video editing. Processing video, in particular, can be quite taxing and intensive. Virtual and Augmented reality applications that require very low latency will benefit from WebAssembly. Another big use-case is encryption. The ability to perform heavy CPU/GPU cryptography operations in WebAssembly will be a boon not only for blockchain purposes but general cryptography (like security).
The one you use right now, exporting an object with properties like data, computed, methods, watch, mounted, and so on. Everything in between export default { ... }. The alternative being proposed is to export a single function that setups the object: https://github.com/vuejs/rfcs/blob/function-apis/active-rfcs/0000-function-api.md#comparison-with-2x-api This is inspired by React Hooks. The news now is that the object way is going to still be supported for the foreseeable future.
That's not the philosophy of typescript. It adds nothing at runtime by design.
It only seems to show things deleted by mods/automod
But maybe you now a babble or other lib or transpiler who does?
Much like vue was? Isn't vue only a few years old?
I'd say that from my experience react is pretty big on that too. Facebook does use it a lot in production and refactoring would be a time consuming and costly process for them, so they tend to try to support old code as much as possible and are explicit about experimental features and let you know.
Oh...well yeah that's exactly what I use, and I quite like it. I don't see how the single function approach is better, to be honest. And I'm quite happy that the "old" way of doing things is going to be supported for a while. Thanks for your explanation!
Heck, knockout was my first love on databindings. I think I'd still use it if it was updated.
5 years old at this point, first release was Feb 2014
This sounds great. Props to the organizers- can't wait for September :-)
Can you ELI5 why I would use hooks API?
types (it will be the better way to use typescript out of the box since they decided against a class api for vue3), no need to understand what exists on \`this\` scope are the main reasons.
Depends who you are and what you're doing, I suppose. For the general case it sounds like people who use hooks appreciate the ability to "cluster" logical portions of their code together rather the scattered across the component in the separate object properties. If you use typescript, it sounds like the typing is improved. I've never used typescript with vue personally, but as a general typescript user I do know that the process of typing functions is generally easier than classes (especially classes that merge a lot of disparate data onto its instances, which was specifically the issue Evan mentioned in the RFC). If you are a library creator, supposedly the process of making reusable logic across components is simplified (where you would normally make mixins or such). I don't know if that's true, that's just what I've heard from the React thought leaderers. These are all things I hope to play with soon and figure out for myself.
Seriously, just let commit hooks or your IDE deal with it. It's not a hard problem to tackle. It's no different than newlines IMO.
But it wasn't going to be, no? Just another way of doing things
Hi! As /u/grinde mentioned, the site does not show user-deleted content on user pages.
Hi, are you using Firefox? If so you can try adding an exception for revddit by clicking the [shield icon next to the URL](https://imgur.com/a/K2AeiT7).
Two userland solutions you can look at: https://github.com/gcanti/io-ts - You describe the *run time* types and from those you get automatic TS interface types. It will validate by type and you can create custom types. https://github.com/typestack/class-validator - Class validation by way of decorators. Downside is decorators are still an experimental JS feature, however Angular and other projects rely on TypeScript's current implementation. You'll find both solutions limited compared to a native run-time type system with good reflection.
Front end developers are obsessed with chaos
I like to think of it as the front end industrial revolution. It was so shit for so long, and finally we discovered the steam engine and now everyone is taking off with grandiose ideas and trying things and out of the chaos we'll end up with an awesome system that makes writing reactive interfaces a breeze. &amp;#x200B; Sure, in the run up will include a lot of unsafe working conditions and premature deaths, but it's worth it in the end.
Can’t spell local storage without lol rage
I said when I "first started out". So not that much in ruby, python, java, c and c+++. I can read the language and understand what the program does 90% of the time, change it, refactor it, and google what I don't know or ask a friend, etc. I'm not an expert in them and I've only finished a project in ruby (gem), python (machine vision stuff) and C (if you want to nitpick though its Arduino).
You say you like ES6... but how did you even get it to work? I've looked through many sites and they all say that modules work past certain versions in modern browsers (Chrome, Safari, Firefox), but no matter what I try, anytime I add an "import" statement the whole script does nothing. Maybe it's because I'm trying to open the index.html as a file on my computer? Or do I need to include each individual script in the HTML header?
You can use a Data URI [https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics\_of\_HTTP/Data\_URIs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)
Meaning, with a PWA you're still going to be limited to the browser's restrictive sandbox and API.
Hi /u/jardykins, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
For this use-case, I'm afraid you'll have to look somewhere else than typescript.
The correct sub fir this is /r/LearnJavascript
Vue's docs and infrastructure is more simple than react + build-your-own-zoo but
Is there really an end though
The functions API is a huge leap for Vue and TypeScript. Right now, you have to use hacky things like [class components](https://github.com/vuejs/vue-class-component) which make you duplicate declarations and rely on the experimental decorators API. Now, the best way to do things in a reusable, extractable, testable way is just vanilla JS, and the types just work in TS.
We run vue storefront on top of Magento, helps a bit!
Thank you, I greatly appreciate it!
You're abusing reduce to do a for..of loop, so why not just use for..of to begin with?
React native is a bridge to native components but still execute javascript in the background. Your javascript is never compiled to native code.
Depending on your usecase I would recommend a validation library. Especially if you already do compile time typing, then validating the incoming runtime data is much more valuable than instanceof checking/ducktyping your own objects. For serverside I recommend something like Joi. Clientside Vlid might be a good, leightweight counterpart.
well, based on[this example](https://developer.mozilla.org/en-US/docs/Web/API/Blob#Blob_constructor_example_usage) i use the following in my code but images do not show in the browser, however the output can be something like that: &lt;img data-gallery="manual" index="0" class="im" style="width:100%;" data-caption="Image Preview: 1" data-src="blob:[http://10.165.12.167:82/e2f9adc4-d796-40f8-a27c-b670bfe6ef44](http://10.165.12.167:82/e2f9adc4-d796-40f8-a27c-b670bfe6ef44)" src="blob:[http://10.165.12.167:82/e2f9adc4-d796-40f8-a27c-b670bfe6ef44](http://10.165.12.167:82/e2f9adc4-d796-40f8-a27c-b670bfe6ef44)"&gt; &amp;#x200B; `$(data).each(function(index,data){` `var typedArray = data;` `var blob = new Blob([typedArray.buffer], {type: 'image/jpeg'}); // pass a useful mime type here` `var url = URL.createObjectURL(blob);` `res += '&lt;div class="col-3 col-md-6 w3-padding"&gt;&lt;div class="filter-item"&gt;';` `res += '&lt;img data-gallery="manual" index="'+index+'" class="im" style="width:100%;" data-caption="Image Preview: '+(index+1)+'" data-src="'+url+'" src="'+url+'"/&gt;&lt;/div&gt;&lt;/div&gt;';` `});`
if they did end up dropping it, 100% chance they would either provide a tool to convert from old to new format or someone else would or even just having lint fix it for you in a dirty pick up and move way.
yes! one big reason to use React is that Facebook actually uses it. At least if i am fucked up, they are fucked up too. Thus it's very unlikely they do something stupid.
\#EmberJS
I am having a hard time trying to do anything in magento 2. I don't know what namespace to call for what method to use to achieve certain features. Google doesn't help, and referring to what existing codebase has, isn't going to help much either because it uses layout .xml to achieve it (wth?), and I need to do it in block .php and .phtml for another module of course, that's just one of the examples difficulties that I faced, even with smartest IDE PHPStorm doesn't help either. I am diving in the magento 2 core codebase instead, is everyone doing the same thing because Magento 2 documentation sucks or I just couldn't perform well?
FYI Evan You responding to similar criticism: [https://github.com/vuejs/rfcs/issues/55#issuecomment-504875870](https://github.com/vuejs/rfcs/issues/55#issuecomment-504875870)
What do you mean? Like if any VAAS is built on a JS stack?
That's an interesting comparison. But there's no invention in the story of mankind that can compare with the clusterfuck that front-end development has become. Vue is a lean, smart and elegant way of doing reactive UI. But people seem to think they NEED the 150 tools they put around it. &gt; unsafe working conditions and premature deaths So many of them :)
It doesnt need to be built on javascript per say just a platform to work with not unlike the myriad of AWS tools. I chose JS cause that is my strongest language and also the subreddit
Thanks for posting this. He raises points I hadn't thought of, that probably make perfect sense in bigger projects. But for my small use-cases, and probably many Vue users', the current way of doing things (the Object API) is just fine. Happy they're keeping both.
To what end? I work at a vaas, and we pretty much use js across the full stack. There's tons of specific video stuff you cant/dont want to do with js though.
So I’m less interested in business video conferencing and more streaming aka twitch but much more modest at first
Is there any way to not just only get by database path but also call \`orderByChild\` or similar?
I've never had this bug interestingly
How about a more simple design? [https://aleen42.github.io/PersonalWiki/Programming/JavaScript/Framework/react/typer/typer.html](https://aleen42.github.io/PersonalWiki/Programming/JavaScript/Framework/react/typer/typer.html)
Not really - abusing it would be to collect the data outside the reduce. I was just trying to demonstrated the problem of repeat iteration - when you can flip that problem like this (using ramda): &amp;#x200B; `compose(` `map(doThis),` `map(doThat),` `map(doMore)` `) // three iterations` &amp;#x200B; `map(compose(doThis, doThat, doMore)) // one iteration` &amp;#x200B; but the example doesn't play so nice with filter
 Hey! I have been using the following IOC Container framework for my projects. [https://marcusts.com/2018/12/26/smart-di-container/](https://marcusts.com/2018/12/26/smart-di-container/) It's extremely powerful, flexible, completely free, stable and easy to use. You can create DI containers wherever you need them without worrying about centralization. This is a non-static container, so can be stored nested as well as privately. There are a lot of handy extensions to make your life easier. You can even register and resolve simultaneously. PS. I am not affiliated with the company that wrote it. I am just a user.
Nope, got unemployed for a while. Now I prepare some side projects for interviews. But since this project , I mostly write Android app codes and consider to apply the job with it. (or maybe not) &amp;#x200B; If there is issues or PR with CacheThat , I will try to solve it on my free time. :)
[https://bossanova.uk/jexcel/v3/examples](https://bossanova.uk/jexcel/v3/examples) &amp;#x200B; There are a few examples shows how to do it. ;)
I have zero vested interest in Vue but that was extremely satisfying to read. Salty commenter just got systematically rekt in such an enormously polite and clear fashion. Better than a Torvalds rant for me.
With SSR and the Rest API? I'm going to have to eventually create a React Native app for Magento 2, wonder how that will turn out.
The docs are, as always, just 1/4 of what you need to know. If you search around, you can do things with the object manager (recommended against), or you just create a block with methods that do what you need and then use a .phtml and add with the layout. Packt's Magento 2 Developer's Guide has a very basic introduction. This and the docs and stackoverflow should be enough. Also, there is https://mage2gen.com.
Created a web game using JS [http://geekthrust.com/sumine.html](https://www.google.com/url?q=http://geekthrust.com/sumine.html&amp;sa=D&amp;source=hangouts&amp;ust=1561525332709000&amp;usg=AFQjCNErN-BPWVO4n7oXG-jC65X60dNQfw). This game is variant of sudoku where you play with bot and try to maximise the score :)
Wow that was an awesome read by Evan. The issue creator's post though was atrocious. Someone take this man's thesaurus away.
Yes, kinda. https://www.vuestorefront.io/
I'm starting an **Educational Open Source CLI Project** with TypeScript, oclif, and Git technologies - [https://gist.github.com/korzio/37366a6d77025d0eff0822e65b5fc26a](https://gist.github.com/korzio/37366a6d77025d0eff0822e65b5fc26a) &amp;#x200B; The upcoming Sunday I want to make an online youtube session to introduce and decompose the project, discuss a few agreements and start working on it - [https://youtu.be/anaKWJLBLf8](https://youtu.be/anaKWJLBLf8) &amp;#x200B; It's totally free and I would appreciate any help and reposts
Is there an end to technological advances? No.
Not blocking the UI thread is why web workers exist. WebAssembly code will still block your UI if you're running it on the main thread, and web workers won't block your main thread regardless of if they are running JS code or WASM.
Thanks
None at the minute, anything you wanna see in it?
Hi /u/czjiyomo, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
wow .. this absolutely deserved it's own medium post /s
yarn also changes lockfile
Closures do not "reference" one or more scopes. Closures are the combinations of a function and its lexical scope.
Neither oop or fp are pillars of "the language".
check out json schema
Tell that to the horde of armless kids in the 1890s
I dunno i quite like the 150++ tools I get when I use vue-cli, it feels like one cohesive product
AWS has tons of products for live and OTT.
That’s what I assumed I just wasn’t familiar with their options since I’ve never encountered it professionally
/r/learnjavascript
You asked about this less than one day ago. This is not a support forum -try /r/LearnJavascript for that- to start with, and it is rude to repost your question.
I don't have a clear stand of all this. I do really like Object API as it helps really fast prototyping well and even ones who don't code for a living can get a quick grasp of how its working - good when doing some in-house prototypes. But I can also clearly see benefits of function API for bigger projects - all in all i like that they keep both and I'm going definitely learn new API ins and outs in future
Aware these are snippets of the actual code, the only thing I directly found was " instead of ' after res =.
Change the \`href\` attribute and edit the CSS everytime a new image is generated?
I like you thought and I extremely like this revolution. Ok, want to convert your EML File to PDF File with error-free service click here to find the best deal. [**https://www.ignissta.com/eml-to-pdf/**](https://www.ignissta.com/eml-to-pdf/)
The point is that you don't have to resort to asynchronous approaches with workers if you get a significant enough performance improvement with WebAssembly.
Look into Greasemonkey and userscripts.
If the buttons don't do any navigation it would seem pretty straight forward to me. &amp;#x200B; var selectorCollection = \['#button1', '.button2', '#containerId &gt; .button'\]; selectorCollection.forEach((s) =&gt;{ let element = document.querySelector(s); if(element) element.click(); }); &amp;#x200B; something like this?
It was one of the major reasons we chose Vuejs, they went through a complete rewrite in v1 to v2 and they didn't make any major breaking changes to the API. We're in the middle of converting our angular 1.x app to Vue and seeing the uncertainty of whether we'd have to rewrite all our code in a couple years again was unnerving. I'm glad the core team had finally stated definitively that they weren't deprecating the object API in 3 or 4.
The buttons are used in an online portal gradebook type deal. The only thing they do is computer the final grade. Like a spreadsheet. When I look at the first button html it reads as: div class="x-trigger-index-4 x-form trigger x -formcalculator-trigger" role="presentation" id="ext-gen28007"&gt;&lt;/div&gt; == $0 So would I but in ['#x-trigger-index-4', '#ext-gen28007'&gt;.button'] Sorry I am a complete noob, but this would save me over an hour since the program is so slow to load, our gradebook is horrible.
you can leverage your browser to get the right selector. In chrome: - Open developer tools by pressing F12 - Hit Ctrl+Shift+C and click the element of which to get the selector of - Then right click in the HTML part of the inspector and select Copy -&gt; Copy selector I think every modern browser has this functionality
document.getElementById('ext-gen28007').click()
I can recommend [Alan Storm's blog](https://alanstorm.com/category/magento-2/), he has a good series for [getting started with Magento 2 development](https://alanstorm.com/category/magento-2/#magento-2-mvc), a [guide on the Object System](https://alanstorm.com/category/magento-2/#magento-2-object-system) and some in depth guides. Once you get a hang of the basic ways Magento does things, googling for specific problems becomes easier, as does diving into the code base to figure things out yourself. It is not, however, something you can easily pick up in a weekend.
Not impressed by his propensity for verbosity &amp; exuberant vernacular?
I'm actually running a back-end Ansible script to configure some stuff, and dumping the output of the Ansible into a log file. I want to display that file to show the back-end script running live. I have something working with a cgi script with python, but it doesn't seem to want to update if I stick the output into something like a &lt;textarea&gt;. Also, since I'm rendering the page with python, I can't close the textarea until it prints everything I want. So I can't do neat things like, stick the scroll bar of the textarea to the bottom to show the newest content.
Heres the larger bit: https://imgur.com/a/hZXZDnY So what would the entire script look like for multiple buttons etc?? I would be so grateful to be able to have this lol.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/F65bvaq.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20es0a9zi)
See my code above, replace with your own selectors. You can use the id's of the div as it seems.
Use Websockets.
You could write a CLI tool that sets up the boilerplate files for you. Similar to vue-cli and create-react-app. I'm not aware of an existing solution that helps you setup custom boilerplates.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Evans response addresses a crap ton of stuff that nobody is actually complaining/cares about. His proposed function solution solves no real issues that the Vue community has. Glad he backed down because his proposal was pointless and his rationale is unconvincing.
I know only one generator : Yeoman. Maybe it could fit your needs
This, personally I know nothing different than Yeoman.
Is there a way of having `space.add()` return the ID of the added item or `false`? So you could have something like if (text) { const result = await space.add({ text, done: false }); if (result) { setText(''); // do something with `result` } else { // show error } }
Perhaps a bash script could do?
You can use them almost everywhere except in JSON property names: {\`property\`: value} which always requires double quotes.
I mean you could a have a bash script that takes as an argument the package name and then simply copy the files and directories from the "MyPackage" folder and then change all the names using the argument. Unless you need to change a lot of stuff inside the actual files I think it's a fair solution.
Use Puppeteer - api for manipulating headless chrome: https://developers.google.com/web/tools/puppeteer/
var selectorCollection = ['x-trigger-index-2 x-form-trigger x-form-calculator-trigger x-form-trigger-over x-form-calculator-trigger-over&gt; .button']; selectorCollection.forEach((s) =&gt;{ let element = document.querySelector(s); if(element) element.click(); else console.warn('No element found for the supplied selector:', s); }); if(element) element.click(); else console.warn('No element found for the supplied selector:', s); }); Know im getting something wrong with the selector..
Yeoman.io is one idea, as others have mentioned. You could also take a look at [yarn create](https://yarnpkg.com/lang/en/docs/cli/create/). I think you basically just have to have an npm package called `create-&lt;whatever your starter kit name is&gt;` and running `yarn create my-starter-kit my-app` will bootstrap a new project from that template. Examples are `create-next-app`, `create-react-native-app`, and of course `create-react-app`.
Just use the id of the div as the selector, e.g. "#ext-gen1750"
I'm amazed that they even mentioned deprecating the Object API so early. Doing so at this stage before the Function API is even released would be suicide for Vue, IMO. That said I'm really looking forward to the Function API, if it's what it promises to be. In my head I'm imagining React Hooks with dependencies automatically handled by Vue reactivity... If it's anywhere close to that I'd be really delighted.
I know a startup which is workin exactly on this kind of problem, theyre still in a closed beta phase. [Generato](www.geberato.com) is trying to solve such problems. If you want I can also connect you to the founders
I know a startup which is workin exactly on this kind of problem, theyre still in a closed beta phase. [Generato](https://www.generato.com) is trying to solve such problems. If you want I can also connect you to the founders
one idea: write a dumb "cli" to create that that does the copy-pasting and renaming for you: node mycli.js -name Awesome mycli.js would mkdir "awesome-appendix", copy "MyPackage" contents inside it, then cp the filename with "-name" instead of "my". you can then fileRead(AwesomeAppendix).replace(/My/g,Awesome); ps: all that was pseudo code.
Puppeteer from Chromium team is the key here. Super easy to use compared to what existed before it
It is fair, and something like that wouldn't take long to make.
Very kind, maybe...
You may want to look into a screen macro program like autohotkey if you simply need to move the mouse and click some buttons.
I used Yeoman once for a project a long time ago. gtk it's still kickin'. Hadn't even crossed my mind.
Hi /u/dvfcfbgv, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SpaceL10n, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DCCableMonkey, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thanksfortheride, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/IMPRNTD, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/christodagama, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ceandreas1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/teriologia, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/czjiyomo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
lets be honest we only look at torvalds rants just to see how severe his swearing gonna be
ehhhh wasn't google using Angular, then Angular 2?
&gt; If you search around, you can do things with the object manager (recommended against) I would want to use it, but for my case it couldn't call what I need with the methods available (as far as I know) &gt; or you just create a block with methods that do what you need and then use a .phtml and add with the layout. Guessed that's the only way Thanks for sharing your experience btw
Thanks, I will look into these
You should check out Ember JS, it has one the best upgrade cycles I’ve ever seen.
There are several reasons. To make code easier, to be able to write code in a different way and it looks good on a resume.
That "combination" being a function and and a reference to the scope chain that represents the lexical scope. If two closures are defined in the same scope, the reference to their scope chain will be the same.
Unfortunately that blog has bad information. [More details.](https://www.reddit.com/r/javascript/comments/bs4r7r/the_complete_guide_to_es10_features/eoj4z82/)
Look into `forEach()`
try movies.filter((movie) =&gt; movie.genre !== undefined)
Not currently, but I'm thinking of adding that to the API. I'll work on it this week.
Chaos is a ladder.
I think I could tweak the API so that instead of returning the new state, I could return the value, and throw and error on error. so it would be something like this: if (text) { try { const result = await space.add({ text, done: false }); setText(''); // do something with `result` } catch(error) { // show error } }
 RemindMe! Tomorrow
I will be messaging you on [**2019-06-26 09:00:00 UTC**](http://www.wolframalpha.com/input/?i=2019-06-26 09:00:00 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/b7awjs/responsible_javascript_part_i/es0pryc/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/b7awjs/responsible_javascript_part_i/es0pryc/]%0A%0ARemindMe! Tomorrow) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
A generic quick history of the evolution of FE JS libraries which could be of use to non-coding managers.
This
Regardless of how correct this post is (hint: it isn't), I wish people stopped the ES + ${2 digits int} label, that is good for ES6 as an umbrella term for everything &gt; ES5, but the standard is ES + ${4 digits year}. It should really be ES2019
I suppose anything's better than Handlebars
why would ignoring types make it sort faster?
So you want all the movies but want to get rid of `undefined` literals in your output?
I'm glad for this new direction because 1. Scope creep happens and 2. Why waste time using Vue to prototype something if you're not also going to use Vue to build the full product? I mean yeah you can always find custom ways of organizing your code, but I'm looking forward to having logic grouping behavior baked in to the main API.
Because of the NIH syndrome, which is especially prevalent in young startup developer circles, i.e. the ones most likely to use JavaScript.
Probably because JS is widely used and there’s no reason to reinvent the wheel when something else is out there.
&gt; ext-gen1750 var selectorCollection = ['#ext-gen9333&gt;.button']; selectorCollection.forEach((s) =&gt;{ let element = document.querySelector(s); if(element) element.click(); else console.warn('No element found for the supplied selector:', s); Such as that?
Process execution for humans...uummm...a process to execute humans? Is that like “npm execute —JohnSmith”?
No, without the "&gt;.button" Because there is no button element inside the div
&gt; ES2019 Too many syllables. :-)
I'm scared...
If there was no need to reinvent the wheel then why are people creating frameworks? You haven't even read the title properly, let alone the article.
As /u/fl223 has stated in their comment, the way to handle this with TypeScript is to use a type guard function as they have shown. This allows you to have runtime-guaranteed types in TypeScript. type YourCustomType = string function isYourCustomType(val: any): val is YourCustomType { return typeof val === "string" } function doSomething(input: any) { if (!isYourCustomType(input)) { return // or throw new Error('input is not YourCustomType') } // TypeScript knows that input cannot be 'any' at this point anymore. // Your IDE will show you that input is of YourCustomType now and should behave accordingly. }
Pass nothing for the first parameter which in this case would just use the default of he function for that parameter.
&gt;movies.filter((movie) =&gt; movie.genre !== undefined) movies.filter(movie =&gt; !movie.genre) Extra sexy.
If your data looks like this: var movies = [{ title: 'harry potter', genres: ['fantasy', 'adventure'] }, { title: 'star wars', genres: ['sci-fi', 'action', 'adventure'] }, ... ] You can use a simple loop over the array of genres just like you do with the movie array and it doesn't matter how many genres a movie has: for (var i=0; i&lt;movies.length; i++) { var movie = movies[i] console.log(movie.title + " has these genres:") for (var j=0; j&lt;movie.genres.length; j++) { console.log(movie.genres[j]) } }
Things in brackets are optional.
It works now, but how do I import the function to html file, I try it in html file, but it does't work in Html file. what is import syntax in Html?, e.g. &lt;script&gt; what is import syntax? &lt;/script&gt;
JavaScript frameworks are like 15 minute ambient bedroom beat masterpieces and developers are like SoundCloud rappers. That’s what I’m saying here
I'm reading this as the reduce function takes a callback as an argument. That callback function takes an accumulator and a current value as an argument, but it may also take an optional index as an argument, and if it takes an index as an argument you can also optionally give it an array argument. The reduce function also takes an initial value argument, which is optional.
Have you given more thought about features you would want to implement and how you would want to package this? I'm assuming that a plugin to an existing graphql client would probably be the best avenue. &amp;#x200B; This page has a number of interesting existing gql related projects [https://github.com/chentsulin/awesome-graphql](https://github.com/chentsulin/awesome-graphql)
Looking forward to it!
code capitalism. The more competition there is the better the frameworks will be.
No execution without due process.
Hi /u/zyace, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt;Process execution for humans...uummm...a process to execute humans? &gt; &gt;Is that like “npm execute —JohnSmith”? That's actually very funny, you gave me a genuinely good laugh! You are free to submit a PR for actual humans execution but be warned we are most likely to reject it :)
Hi /u/echorashmi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kuroakela, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I was not expecting so many puns in this thread, I wish you guys had been there when we came up with this (potentially unfortunate) new "catchphrase" ([https://github.com/sindresorhus/execa/issues/255](https://github.com/sindresorhus/execa/issues/255))
That worked! However I need to click on the box BEFORE the calculator button shows up, teh script wont work until i do that, any ideas? Pic: https://imgur.com/a/khOyLNM
Actually, your post links directly to itnext.io. They are expressly forbidden on r/javascript. I will permanently ban you if you post another article from itnext.io.
ELI5 the difference between programming in 150 and programming in 150++
This is redundant, if I already type hinted it as string. Of course I can check it in the userland but this is not what I was looking for. I want the compile type-checks on runtime as well. See my update I came already to a solution I am happy with it. Case is closed... I will use one of these libs/transpilers now: https://codemix.github.io/flow-runtime/#/ or https://github.com/gcanti/io-ts#installation
That's not in the subreddit, who the fuck do you think you are?! Paid content fine, I don't agree with the philosophy but I stopped arguing the toss. But don't start brandishing unpublished rules. Publish them on the subreddits official rules or stop being heavy handed with your comments.
And we're never going to get decorators !!
I can see this is not going anywhere. Have a nice day.
&gt;His proposed function solution solves no real issues that the Vue community has. Did you even read his response I linked?
Hi /u/TatzyXY, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Because it's the biggest ecosystem of all. Sheer number of people drives this, and more like minded people to create. For example, C# developers almost never roll anything not made from Microsoft. This is closed, guided ecosystem. JS belongs to no one, and we have Wild West of talent.
Fuck you.
Bacardi 150++
Upvote, yes https://github.com/gcanti/io-ts I found already looks like what I want.
Just keep at it, that feeling is normal both for JS or for learning anything for that matter. If it was very easy everyone would be doing it.
Yeap you’ve got the right idea. Iterate through - eliminate the unwanted values
Hi /u/cpustejovsky, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/luchisss, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
How are you learning right now? If possible, try to come up with a little project (e.g. the website for a sports-team you're part of or something similar) where you can learn while making something you can show off to friends and family 🙂
People make frameworks to fill their needs, that's all.
\*Wild *Wild* West
You should be scared. We are also killing processes.
[Semi-relevant xkcd](https://xkcd.com/927/)
Hi /u/myproject-solution, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Uh, wickey wild wild
A timelapse tech radar would be cool
Yeah. I normally use graphql-request for it's simplicity. I was planning on building it on top of that. I don't think it's possible to do plugins, but we can do a simple wrapper. As far as features, I think we can start with this in it's simplest form, and potentially build up from there if I have other feature ideas. I'd like to do typesafe graphql requests as well, but that seems out of scope for this library.
It's a bit of necessary redudancy you need whenever you serialize/deserialize data. The libraries you've linked will help you with it, but add complexity to your application. If you only want types to be runtime-safe in a few places, I'd suggest straight up using simple type guard functions instead of potentially big frameworks.
A jack of all frameworks, but master of none. * vue * polymer * backbone * aurelia * mithril * ... Solution? Focus on the basics, the foundation, and core tools used to build the ecosystem you breath. * javascript * html / css * osi model * python, et al
Wickey wickey [https://](https://Wild) Wild Wild West
I think it's because the ideal API for a GUI framework is still evolving, through the iterative process of the rise and fall of frameworks. (And no, it wasn't "solved" in the days of native GUIs, not by a long shot.) You also have several different use cases that may require different architectures: * server renders everything, JS patches in some stuff later * server renders nothing, JS manages everything * some mix of both
Hahahaha, I guess my rapper name would be **[lil y](https://github.com/imlinus/lily)**
Not In House / Not Invented Here. **Yup, We all suffer from it** :-D
Yes they are easy to write but I dont get it why type script just not generates them for you. I mean the info is there in the type hint. This is an other library which generates the type-guards on compile time for me: https://github.com/woutervh-/typescript-is this is how I would expect it.
Came here to post this.
Yes, that is indeed sad. They could easily implement that in their tslib module for anybody to use. The feature requests exist as far as I know, but they haven't worked on that yet.
No. They only use it for internal tools. It's very different case than facebook. Facebook actually uses it in their core user-facing product. Instagram for example. It is a big deal.
Same
Because it's fun to write them, and if you write a good enough one, big tech companies try to poach you with big $$$
This is amazing!
Pythons usage is arguably higher and the number of frameworks is considerably smaller. Complexity of the language (and the fact that javascript is UI focused which is intrinsically complex) also plays a role.
I'm not sure I understand the use case, TBH.
ITT: people who didn't read the post, but instead took the title as a question they were uniquely qualified to answer.
Kinda seems interesting except I can’t see anyone paying such a crazy amount for a service like this that could be recreated in minutes.
Adding my own thoughts to the fray. &amp;#x200B; 1. JS is a scripting language that anyone can learn and use because the VM that hosts the language is available everywhere. 2. In computer architecture it swings back and forth between front end processing and server processing. We're currently in a front end processing phrase. 3. JS is easy to learn and difficult to do right. It's easy to copy and paste JS to get something small to work. It's really hard to manage large JS projects. 4. Frameworks encapsulate front end complexities which allows for a large number of people who have passing acquaintance with JS pull off functionality that they wouldn't otherwise be able to do. 5. No framework matches everyone's need. Things like React and Angular are great for single page apps and suck for web pages that are focused on speed and global delivery. 6. So a large number of small frameworks get created to assist with a specific need.
When you are creating a prototype application, you don't normally care so much about the back end. This gives you a stupid CRUD back end which you can hit with any GET, POST, PUT and DELETE request to an arbitrary REST resource and it will just work. This way you can focus on building the front end and worry about the back end only if it turns out that the front end is what your users want. There must be other use cases where you need a dumb CRUD back end that will just work quickly, I imagine. I hope it makes sense.
Python doesn't run on a variety of browsers, mobile, backend AND desktop the way JS does.
Yea. So what I said. Js is a lot more complex.
stares in firebase
I hear ya. I pulled these numbers out of a hat. The payment section is just a dummy place-holder at the moment.
Hi /u/PhyKings, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This is an area where there is the potential for a lot of competition because the barrier to entry is low. To standout libraries focus on their differences rather than similarities and push those aspects to the extreme. This leads to hyperbolic views of frameworks/technologies and drives camps that latch on to one aspect of the library and preach it to anyone that will hear them. Communities get built around these views and the frameworks own inertia hampers its ability to change, but because it has enough backing it continues to promote its same rhetoric long past it being true if it ever was in the first place. Combine that with the fact that so few people actually understand the underpinnings and you are constantly in a state where while things are improving for the better, new frameworks keep popping up to fill those gaps. However, to standout they need to focus on some key difference.... Rinse repeat. The amount of misinformation here is so substantial its no wonder everyone is confused. And if a library was ever to try to change their paradigm similar to another library or admit their original hyperbolic statement wasn't exactly true, that'd be the end of them. So as things continue to progress don't anticipate it to change. Every break out library has some mantra just under the surface that defines its existence. Here are some can you match them to the popular library: A. "Simpler than React" B. "Less Code Written than other Frameworks" C. "Virtual DOM is faster than the Real DOM" The problem is what if the best course for the library would interfere. Can A ever adopt an API similar to React if it solve all of its core issues? Can B ever adopt a more explicit API if it meant better performance? Can C ever abandon the Virtual DOM even if it finds itself hacking together other programming paradigms on top to hide it? Not easily. We just make new frameworks.
I respect the idea, and anyone building something and putting it out there. But thing is: 1. In a prototype app, yes I don't care about backend, so I can easily mock it locally without needing a persistent remote endpoint. 2. I'm particularly not sure what's the use case for paying to keep the API and data in it up. Cool idea I'm just wondering if it'll find audience.
I think this post is very related to JavaScript. Every JavaScript developer will be calling an API at some point. And the fact that it got 8 upvotes in a matter of minutes should suggest that people found it relevant and useful. Would you consider reversing the removal?
Thanks for the feedback. It's for when you want to put your prototype in front of people, on the internet. It's much easier to deploy a site when it's just front end.
Do you mean coding nothing yourself?
&gt; Every JavaScript developer will be calling an API at some point. But not every JS dev is a front-end dev; there are much more fitting subs to post this to.
Python is more complex; too many ways to do the same thing. A tuple vs list, set. dict vs object vs module. It leads to all sort of optimization and incompatibilities, but in the end its still the slowest scripting language out there.
I use execa a lot, it’s my go-to for any dev ops work that involves orchestrating cli tools. I’m very excited for the typescript support.
&gt; insane technical debt from a language that’s basically been rewritten in place multiple times *laughs in python3*
Sure. Not "every" but many JS devs are front end devs... I don't want to waste your time. I just thought it was a bit unfair given the reaction the post got. That's all.
Having programmed in both for a little under a decade, I politely disagree. There are far more way to do the same thing in javascript then python. Let's talk about inhieretence. Or maybe let's talk about lambdas. Or maybe we should talk about how complicated prototypes are. Or the lack of object meta programming. Or let's talk about the 4 or 5 different styles for defining a class. Maybe we should talk about require vs import vs vanilla package management. Let's talk about 'this'. Let's talk about undefined, vs null, vs falsely. Let's talk about hasOwnProperty and why it would even need to exist at all.
It's usually a good idea for subreddits to force re-titling any linked posts that end in a question mark.
One fork breaking backwards compatibility in 23 years. Laughs in JavaScript.
Nah, rockstars reinvent the wheel, that’s all. You fart, and when the smell disappears there’s a new ES version and twenty new frameworks using experimental features.
 from loadsofsnark import snark
Also, the language itself is unstable.
 &gt; Having programmed in both for a little under a decade, I politely disagree. There are plenty of people who use a language for a decade without really understanding it. Javascript is simpler in the reality of what the languages actually does. Its also far faster. &gt; 4 or 5 different styles for defining a class. which all do the same thing under the hood. &gt; Maybe we should talk about require vs import vs vanilla package management. the combined totality of which is still vastly simpler than the absolute train wreck that is python imports. &gt; Let's talk about 'this'. Let's talk about hasOwnProperty and why it would even need to exist at all. Still simpler than python objects. &gt; Let's talk about undefined, vs null, vs falsely as opposed to crashing on undefined, while also having None and truthiness tests &gt; Javascript is a complicated language. not compared to python it isnt
Wubba lubba dub dub, brah! :-)
Spent a long time coding python?
Yeah, object is definitely fine for most, but I'll switch (even for my small-scale stuff). I really like the way the functional approach allows for more flexible organization and being able to more consistently think in functions without having to "paradigm shift" mentally.
I guess alot of people who write frameworks have different opinions to how the framework should work. Alot of devs are not happy with the way the big frameworks handle things so they take the good stuff and incoroperate their own ideas in hope to solve the problem. In a certain sense it's reinventing the wheel and solutionism at it's worst because there are already so many solution out there but it never hurts to have more options. The only problem is just that the ecosystem and constant change of tools makes it very exhausting to deal with.
Google isn't using Angular in production anymore as far as I am aware. I don't think they ever adopted 2 because they switched to polymer if I recall correctly.
quite a bit longer than you. most of what you are saying is "I love this particular language so much I am blind to its flaws". It has become apparent that JS has eclipsed python, so I for one an moving on. I guess just got a lot more love from developers, probably as a side effect of being the browser language. Python just has too much legacy baggage, and is too full of quirks and landmines. Once something is better than js for this niche, i wont hesitate to move again.
I prefer javascript to python though.
sure you do.
Contradictions do not exist. Whenever you think you are facing a contradiction check your premises. You seem to have misunderstood may arguments fundamentally and assume there was an emotional element that simply did not exist. It was a analytical argument. I had no favoritism for python.
Hella Low Wurld
[removed]
React and Angular for single-page apps? I was under the impression those frameworks were designed for at least medium-sized web applications. If I was going to make a single page app, I’d probably just use straight HTML and JavaScript if it’s not too complex. What are alternatives for apps that are focused on speed and global delivery? I think the .NET stack would be helpful for that type of project, but I’m curious what you think; I’m not as knowledgeable with large-scale setup and deployment as I’d like to be.
Found the PHP developer
Found the guy who does not know wtf is talking about, regardless of the backend language, web developers are *forced* to use JavaScript in the front end.
Haha. That’s super relevant, for this question and for a million others
[The discussion](https://github.com/vuejs/rfcs/issues/55#issuecomment-504875870) that was linked above lists many points of improvement that make it worth it. It seems to me the new system is especially better for bigger projects with many components, but I'm not a Vue power-user and I could be wrong. And if you use Vue on all your projects, small or big, it makes a lot of sense to migrate to the new approach, as I guess it's the one that'll be getting future improvements. All this, and seeing how much sense Evan You makes in his posts, kinda makes me want to get into Vue a bit more...
Devs aren't forced to do anything, maybe you should take up landscape gardening if you don't like the ecosystem you work in ? The rest of us will continue to embrace it and innovate
I've always put it down to the JS community embracing the fail-fast philosophy and learning from mistakes, even if those mistakes were all-consuming flash-in-the-pan industry-dominating paradigms that, for a time, rockstar developers were telling you were not a real developer unless you were using them. I do think things seem to have calmed down since 2016 though.
Because it was an important problem to solve. Lots of people were working with the DOM using Javascript and they all knew that there must be a better way.
“it swings back and forth between front end processing and server processing.” =&gt; how does it swing back and forth? The mature web is about 20 years old, since then pc’s got more and more cpu and (V8 / spider monkey - like) javascript engines have become mature. Servers will always keep some very very crucial roles in the forseeable future of the web but I think the overall trend is application logic moving one way - from backend to frontend
&gt;React and Angular for single-page apps? I was under the impression those frameworks were designed for at least medium-sized web applications. If I was going to make a single page app, I’d probably just use straight HTML and JavaScript if it’s not too complex. Trolling at its finest. :-D ^(if you're not, which I can't believe, you might need to look up the) *^(actual)* ^(definition of SPA's)
The Js ecosystem is turning into a meta toolset. As much as I like using it, it's turning into a 'you need scissors to open the scissors" language
.NET core MVC / Vue SPA combo.
Yes, they are forced to use JavaScript, because there is no substitute available in the browsers. Unless you want to have a web from a different century.
Id agree with this on the subject of most current languages. But let's face it. And fuck the down votes. JavaScript/ecmascript is becoming too convoluted. Give it 10 years and a newb won't know where to begin.
Just do everything in form submits lol. Brb, going to go build a new vanilla web framework.
how? honestly want to know.
\*talent hah
Believe it or not, you can actually create dynamic SPAs with just JavaScript. Why should I go through the hassle of setting up and deploying a react app if I can just use the base language? I also can target the browsers I want to support, without relying on polyfills, and I don't need to worry about SEO optimization.
Thanks, I am glad that it helps you out! TypeScript support was added by BendingBender (https://github.com/BendingBender), credits to him.
Single Page Application (SPA) is the term for a style of coding where there is a single "page" and everything is done client side for the UI, and just data is transmitted back and forth.
Adding features all the time, for example, syntax changes (var vs. let/const), features for corner use cases (tag functions)... Javascript is following the deadly C++ way, adding loads of corner case features, keeping everything working backwards...
&gt;tag functions I wouldn't call that unstable. I mean things like houdini are definitely unstable.
All I was getting at is that some of us actually like JavaScript, your original comment aimed to belittle the thousands of people who have contributed to the evolution of JavaScript to make it better. These types of antiquated opinions don't contribute at all
You're free to solve problems in any way you want. Make sure to develop a realistic picture of the pros and cons of specific solutions though :-)
It's the fact of adding corner case features constantly what makes it unstable, not their implementation.
They already don't know where to begin. I talk to terrified newbies almost daily now...heh. I tell them to learn vanilla, at least that way they'll know how to make shit work regardless of what framework they have to work with tomorrow.
I think there are so many UI frameworks specifically because, compared to other ways people build UIs (Qt, the native toolkits for literally every platform, etc), HTML is much more primitive and low level. This is a good thing IMO because it makes it so flexible, but it also means that the vast majority of developers will be looking for something to abstract the hard stuff away to a degree.
https://xkcd.com/927/
No, what I belittle is the attitude of many js developers, especially the most vocal and public. I do JS myself (basically I don't have a choice), and certain attitudes repulse me. Also objectively JS could have been done much better, but now it's too late. It's not a well designed language, and that's been said even by its creator. What does not contribute at all is blind fanboy/girl-ism. I can make a list of a gazillion things that are wrong from the language design point of view, how the micropackage paradigm is an awful idea in terms of security, why there should not be three or four packages on the NPM that provide a function to calculate if a number is odd, some with millions of downloads... I could make a huge list, and any developer which is not a fanboy/girl should be able to do it too.
I see no one mentioned that JavaScript, historically, had a lot of absolutely everything, including specifications (in the days of the war against IE). It's a language for which a lot of virtual blood had been spilled on many ideological (and just greed-fueled) battlefields.
Yes... And avoid jQuery
Awesome! I love execa! There are a lot of goodies in this major. great work!
Thanks Laat!
Is it, though? TIOBE rates it #10 although that is a far from perfect measuring stick. I think part of it is that JS developers like to call a framework what other developers would call a utility. Lodash is not a framework (straw man). I love JS but I would have to admit it’s user base suffers from not-invented-here syndrome more than others in my opinion. Maybe it’s because writing and packaging up a utility is super easy in JS? Documenting and maintaining it seems to be just as hard, lol.
When has backwards compatibility been broken in JavaScript?
For a simple blog, Ghost could be enough.
Everyone writing their own framework is the opposite of what framework code is supposed to accomplish.
Quite the opposite, people write and publish various shit. See how many form handling libraries for React there are, and guess how many were created in-house because the ones available were too &lt;insert whatever&gt;.
Well, you can. And it's perfectly valid for you to. But it's also silly to ignore things in your toolbox. Why would I go through the hassle of calling `npx create-react-app`? Because there's not really any hassle, deployment is roughly the same pipeline as a non-react app, and react is a solid tool that helps to abstract a lot of complexity. Seeing as a large portion of good development is finding ways to abstract complexity out of mind (whether that's building structures or using tools or whatever)... Disregarding tools because they're tools is silly. I mean, you could also rewrite a web browser from scratch with your website hardcoded into the system from the ground up in assembly. But that would be too much useless complexity for the project, so you assume browsers already built, and you assume a certain version of js (or compile down because it's a mostly trivial build step) which gives you certain features and tools. Using react or other libraries is just an extension of that - using some tools that are at your disposal so you don't have to think about the details or the complexity inherent in them.
Never had the pleasure
Something being infinitely backwards compatible isn't unstable. Since I can run 20 year old js just fine in my current browser, it's definitely not an unstable language.
nerd fight writ large.
Too bad when you google how to do something, most of the replies are in jQuery.
Oh, I thought you were just sharing something you came across on the internet. I’m gonna actually play around with this more later on this evening and see what it’s actually capable of. I can also maybe give you some feedback if that’s what you’re after.
What widely used framework was invented within the last 4 years?
Can you name a widely used JS framework that was invented in the last four years?
For me it's mostly because I feel it's too *bloated*. Like a simple gallery is like 30 LoC in vanilla. Meanwhile all libs out there have more than 50 options in the api and I'll end up using 2 ¯\\\_(ツ)\_/¯
What are you using for Android? Flutter with Dart? React Native? Java directly?
I would really appreciate that. Thanks!
Ahh yes ok I don't do JS but came across the same problem just today with GPGPU with rust - tons of abandoned crates etc. Now I do write alot of stuff myself even if there is a lib for it - but that's for purely academic reasons and I don't publish it as modules etc.
But we are slowly going back to being able to use modules in the browser, building websites like it's 2008 again without all the transpiling/bundling
There is no reference to no scope, there's a context of execution. Saying that is a reference to a scope it makes it look like if there's like a list of of references to data structures, but I think this is the wrong way to paint it like a reference because if it was a reference to such thing I should be able to access its local state and I'm not aware of this possiiblity.
Give me plain JS any day. Don't tell me how to think.
I think he's talking about [sloppy/strict](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)
so, this is a new thing, and (as far as i can tell) it's javascript only? it's not gonna be possible to use dark-or-light styles like you do @media queries?
Afaik almost never? The usual complaint about javascript is that it is backwards compatible to a fault. Part of why there are so many ways to do the same thing and weird things like redefine certain newer reserved words (var let = 1, for example). The problem is not backwards compatibility in javascript, the problem is the complexity of the browser ecosystem
i feel personally attacked! [^\(shameless ^ambient ^bedroom ^beat ^plug)](https://soundcloud.com/zahodge/2018-05-30-00-2019-03-17a)
Hey! Yep it's a new thing. [`prefers-color-scheme`](https://caniuse.com/#search=prefers-color-scheme) is a new media query not supported in all browsers yet, it's in the latest Firefox and Safari, with Chrome landing very soon. You'll be able to do it in CSS too, this package is so you have access to it via JavaScript thanks to the [`matchMedia` browser API](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia)
or WWW, the interwebs
**Giant spider intensifies**
Oh i see, i totally misunderstood the \`prefers-color-scheme\`... That looks neat, thanks for sharing!
I wanted a lightweight 100% JS system with my choice of technologies. I’ve got VueJS and Vuetify on the front, with Express and Sequelize for the REST backend all wrapped up in Docker for super easy development and deployment. All of the “glue” is mine and it has very few dependencies. I’m not a rockstar, but I do fart. I just wanted something that suited my needs, today. Next year, or at my next gig, I might need something else.
No worries, glad I could clear things up :)
Found the cranky dev
What a remarkably uneducated statement to make. You're free to use zero ES6+ features and see where that will get you.
So you want the item under the index 2 to be an object, correct? Not a string?
Objects behave as references. You are experiencing this: let x = {}; let y = x; y.fruit = 'Apple'; console.log(x); // { fruit: 'Apple' } This happens because both `x` and `y` are _pointers_ to the _same object in memory_. Your scenario is a lot like this: let x = {}; let y = [ x, x ]; console.log(y); // [ {}, {} ] x.fruit = 'Apple'; console.log(y); // [ { fruit: 'Apple' }, { fruit: 'Apple' } ] y[0].fruit = 'Banana'; console.log(y); // [ { fruit: 'Banana' }, { fruit: 'Banana' } ] This is because the array `y` contains two values, each being the _exact same pointer_ to the _exact same object_ in memory. When you change that object in memory, all pointers will reflect that change. If you conceptualize a pointer as a physical address, it would be like `x = {}` means `The person who lives at 123 Alphabet St.`. When you say `y = x`, you are saying `y is the person who lives at 123 Alphabet St.`. When you promote the person who lives at 123 Alphabet St. from Employee to Manager, `x.job = 'Manager'`, then `y.job` will also be Manager, because you are saying, "What is the `job` of the `the person who lives at 123 Alphabet St.`?" const me = { name: 'Charles', age: 29 }; console.log(me.age); // 29 const myGirlfriendsBoyfriend = me; const myFathersSon = me; me.age++; myGirlfriendsBoyfriend.age; // 30 myFathersSon.age; // 30 me.age; // 30 `me`, `myGirlfriendsBoyfriend`, and `myFathersSon` are all the _same object_. In your case, your array is filled with 5 objects -- each are the same object `{}`.
IMHO the problem is bad design of javascript and whole web that is made for sharing documents.
Thanks for your kind and very detailed answer! My problem lies in the Array.fill() method, because it allocates the SAME object fo every cell. I thought they would have been different objects. Thanks for your answer again!
I recently came to modern JS from a background as a hobbiest LAMP/WAMPer in the early 2000s. The little formal training I had was in Java, and I also learned ActionScript for Flash during its godawful heyday. When I started learning again, I realized I couldn't just use JQuery to avoid JS anymore, because the norms for design have changed so much and in many ways are so much better. So, I jumped in and learned React, after researching a little and playing around with Vue (which I think is very solid for use in a way like JQuery, but better). I've found the documentation for React and its associated component frameworks/libraries so much easier to use than the old days of slogging through hundreds of pages of old forum posts about some stupid issue in PHP that some guy created an idiosyncratic method to solve. Yes, learning a framework / library has its own curve, and clear drawbacks (being stuck in an idiosyncratic style/language). But in my own case, working with multiple libraries, frameworks, etc., has led to a much better understanding of vanilla JS than I had before (when I started, JSON was not a thing, and everyone was seriously using CGI and perl; makes me shudder). The choices sometimes seem daunting. I've found myself bouncing between four or five different component/style libraries (Bootstrap, Material, Elemental, Grommet...) just trying to decide which one is a better fit for a project revamp. But I was thinking about what I used to do, before NPM/Yarn. I would have grabbed a bunch of weird Jquery plugins that may or may not play nice together, and I wouldn't have had an easy way to minify, remove bloat, or be sure that everything would work on different browsers (there was no mobile). I think it's exciting to be working on app development now, and the issues that are arising from the JS explosion will just fall away eventually as we keep moving forward to whatever the next thing is. (Anyone remember the Semantic Web/RDF? It still exists, but it's not the hot new thing anymore.) My strategy is to go with whatever seems right. It's hard to go wrong with any of the major frameworks right now, and since everything moves so fast, it's not like you really need to worry about LTS.
The cause is this line: `let array = new Array(5).fill({})` `fill` fills every instance with the value provided. In this case, it is the same object. Try this instead: `let array = new Array(5).fill(null).map(() =&gt; ({}))` This will create a different object for each element.
I tried it! its it's working :O
Programming with JS are going to be like write something on an online IDE with a CI that compiles (usually Components) to vanilla/native/desktop/cli in realtime with preview using vendor packages (like kv-storage), binaries compiled with emscripten (WASM) or downloaded/imported/Plug'n'Play from online repos as on demading, lazy loading or at build time modules and communicating with programs made with other languages natively or over http &amp;#x200B; \^jk/overexaggerating
I'd argue that it's not much different to the back end world, we just view front end from a different lense because... Reasons. There are a few different view renders, but they all roughly do the same thing, which is look at your data, push it into the DOM and let you partition your view into smaller blocks. If you go with a SPA architecture, then in essence, you're writing an event driven service where the user/view layer is both the creator and consumer of event streams. You can think of that like a back end service, where the rest component of the service is replaced with a websocket interface. Not much changes beyond that.
C++ is unstable by that metric: https://en.wikipedia.org/wiki/C%2B%2B17
Legitimate question: is there ever a reason to use light mode? Is there some accessibility reason wherein it may be the better choice?
There is a license.
I believe a multitude of option, in this case at least, are influenced by the following two factors: scale and immaturity. Javascript is a big ecosystem, it's got a young userbase, and it's being used for more and more new things. So, there's a ton of potential framework users, hungry devs that want to make cool shit (sometimes reinventing the wheel) and JavaScript is doing new things as a language in terms of how it's used (native, desktop, vr) and in terms of scale. Remember when you were a kid and everything is new. That's been the JS ecosystem this past decade.
When I say single page app that's not a level of complexity, it's a measure of how many different URL's aka pages are being used to separate content. React and Angular were created to do large complex applications that reside on one or two pages.
Alternate approach, just for fun: Array.from({length: 5}, () =&gt; ({}));
I think it’s more on personal preference. As developers we tend to favour dark mode on average, but I don’t see the average user using dark modes on any applications I’ve ever seen. That’s wide speculation mind you, I don’t believe there are any accessibility reasons though. In addition, from a UX perspective, perhaps there’s differences in conversion. I’d be very interested if there’s any experiments that come off the back of these media queries and utility packages like darkmodejs
Which definitely didn't break backwards compatibility. There are certain situations where everything's automatically strict (all of which are new-ish), while anything written previously will always not be.
Thanks for understanding.
Hi /u/Slackluster, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Code: https://www.dwitter.net/d/14743 with(x)beginPath(save(restore(font="9em'"))),translate(960,540),rotate(-t),moveTo(0,0),clip(arc(0,0,3e3,1.56,1.58)),fillText(u,-t*12*t,t*20)
Client - Server architecture goes back to the 60's. Right now, you're right, there's been a definite shift to the client end but that really was rather recent in the last ten years or so, and from a web perspective that might stay for a while. But look at what microsoft is doing with their gaming platform, that's pure server side. Also with HTTP2 and HTTP3 stacks and the rise of single app frameworks you're going to see web sites that will look and feel like desktop applications it will be far easier in many cases to process content on the back end and stream it forward.
None as far as I know. I see this trope all the time, and I'm pretty sure it's from devs of other languages whos only interaction with JS is when they see people posting their pet frameworks/compilers/etc online in forums like this. I get the feeling they take those more seriously than they should just because people use them and try them out. There is really only a small handful of JS frameworks that are being used on any big name site, and they're the same names that people have been hearing about for years. According to [this](https://medium.com/javascript-scene/top-javascript-frameworks-and-topics-to-learn-in-2019-b4142f38df20) article, which should obviously be taken with a grain of salt, React + Angular make up 80+% of framework downloads. If you look at the job market for a JS dev, that definitely seems accurate. Don't know JS? Want a TL;DR ? React and Angular are king, and have been for awhile. Vue is pretty hot and will probably be for the next 5 minutes or so but those 3 are really all you need to know about.
I actually agree with you. But I also don't write the really big apps. I'm more about dynamic content and including functionality with minimum js libraries. I just don't see the point of delivering a 500 Meg web page to do something I could do in 5k
Took me like 2 weeks to figure out this and the es6 stuff... youre over exaggerating
I think it works like this: * Nobody knows the One True Way to build an application. * Every application is different. * Some people build the same kind of app a lot, so they start accumulating helper code. * Eventually that code materializes into a framework. * Other people who build the same kind of app a lot find it, like it, and use it. * This gets spread as "{Framework} is the best way to build a JS app!" * People who don't write that kind of app, or who write a lot of different apps, try to use the framework and find it lacking. Or they just have different opinions about some of the choices made. * Those people start writing their own helper code for their kind of app. * That helper code becomes a new framework. * Iterate forever.
There's no fixing javascript or people's wish it didn't completely suck.
And everyone doesn't. A small minority do, and a smaller minority of those are widely adopted and trying to outdo each other.
Haha yes. Though, how did you end up here?! This is 5 months old lol
Because it is easy create, market and publish and consume. The learning curve to build or consume is very minimal and it is peer agnotisc, meaning it can working with any existing frameworks alongside. And there are no limitations, which means you can create one for your own custom use case, no need to customize other frameworks to your needs.
Happy Aurelia user here. I feel like the number of maintained and updated JS frameworks that have stood the test of time has normalised a little bit, to be honest. You hear about React and Vue a lot, Angular still gets a mention and you've got a few smaller ones. But really, I can only name maybe 8 decent frameworks and of those, I would probably choose to work less than half of them. For me, Aurelia has increased my productivity ten-fold. It has gone few quite a few releases and hasn't had a single breaking change syntax or API wise. Incredibly consistent, stable and easy to use. I am honestly surprised it hasn't caught on more than it has. There is an Aurelia v2 coming hopefully sometime 2019 which is going to expand upon and reimagine the framework, and your old code will still work with it. I have Aurelia apps I have been running in production since early 2015.
Yeah, I think devs tend to prefer dark mode mostly because they often work with editors and terminals with dark backgrounds, and switching to a bright white screen is so jarring, especially at night. But your average user won’t touch a terminal window with a 10-foot pole.
I think another big factor is the lack of types, or anything native to JS that would constrain errors in the midst of complexity. I’ve found that most JS developers simply cannot comfortably do any major refactoring without a robust test suite backing them up, and it’s super easy to get off track even when building new features. Frameworks and libraries have become the norm because it’s too difficult to write anything truly *reliable* and *generalizable* from scratch. So it’s often safer to glue a couple of well-tested libraries together, for the sake of our sanity. Having used strongly typed languages that compile to JS (TypeScript, PureScript, ReasonML), it’s actually astonishing how simple it is to refactor an entire codebase. It’s not that the app is inherently less complex. It’s that adding a robust *type system* gives you the benefits of a compiler. As they say, TDD is the poor man’s compiler...
I think another big factor is the lack of types, or anything native to JS that would constrain errors in the midst of complexity. I’ve found that most JS developers simply cannot comfortably do any major refactoring without a robust test suite backing them up, and it’s super easy to get off track even when building new features. Frameworks and libraries have become the norm because it’s too difficult to write anything truly *reliable* and *generalizable* from scratch. So it’s often safer to glue a couple of well-tested libraries together, for the sake of our sanity. Having used strongly typed languages that compile to JS (TypeScript, PureScript, ReasonML), it’s actually astonishing how simple it is to refactor an entire codebase. It’s not that the app is inherently less complex. It’s that adding a robust *type system* gives you the benefits of a compiler. As they say, TDD is the poor man’s compiler...
&gt; I think the overall trend is application logic moving one way - from backend to frontend I think the overall trend will be towards the server as paper-thin clients become the norm. Smart glasses and contacts won't be able to have too much processing power.
I have a dream of creating the ultimate Frankenstein app: nesting Angular inside React inside Ember inside Svelte inside Vue Inside Preact...
If all we do is sprint, is it really sprinting??
Honestly, if you run the benchmarks, `map` is often much slower than a `for`-loop, but it’s still in the tens of millions of ops/sec. it’s not the loop that will constrain you. It’s the operation you’re performing for each loop cycle, often by a huge margin. There almost no real performance argument for using `for` loops. I can’t say that for every JS array method though. `Array.prototype.concat` is currently orders of magnitude slower than looping over the `push` method, especially for multiple arrays.
Using your screen in the sunlight on a dark background is hard. White background with black text is easy to read in the sunlight.
Yeah but concat doesn’t mutate the array so pick your evil lol
Yes, I kinda wish there was some native solution for building a transducer in JS. Usually I just implement a `pipe` function and `map` a stream of piped functions over the elements. But not everyone knows how to do that.
Ha, true, but usually I just create a new array and push all array elements into the brand new one, leaving the old arrays intact. It’s slightly slower, but still much faster than concat.
Also to add to his comment, you can usually search google for jsperf tests that already exist. Most of the time, there’s no need to write your own tests, unless you thought of some specific case.
You can access it, using the debugger. In Chrome you can see each individual scope that is available and which variables they have access to (those which haven't been optimized away), just as you would any normal object logged to the console. They're treated very similar, so in that context, referring to them as references make sense.
&gt;The way I write my code is to sorta bullshit it until it works. Damn if that doesn’t *perfectly* describe JavaScript as a language...
You have to define your modules in your HTML &lt;script&gt; tags.
Just out of curiosity have you ever benched the spread operator to concat arrays?
Not to mention the ability to run WASM on Node servers... The WASM spec abstracts over operating system API’s, so you can basically run any language on any machine within a runtime that implements the spec. That can be huge for backend services.
It’s because in spite of the size of its user base, JavaScript is lacking a standard library. That’s why every developer needs to roll their own functions for fundamental stuff. I could bet that half the framework ecosystem would die out the day JavaScript came with its own built in standard library.
This is a complicated question. By far, the biggest reason for the existence of frameworks is that, we definitely need some sort of a framework / library to write clean code to manipulate **HTML / CSS**. The pure **DOM** manipulations without any sort of library (or writing your own) are quite messy and, if you're a good developer, you will tend to write abstractions on top of it. Now, that answers why there are frameworks at all. As to why so many?.. This is a multi-layered and complex question. **Reason 1** Frameworks trap you. They provide a certain functionality, but they don't let you write code without them. For example, **React + Redux** framework. Most people use them together (or use something instead of **Redux**) because **React** itself isn't enough. The thing is, the *thought leadership* for **React + Redux** framework is that the entirety of your code has to be written in either components, reducers or actions (also maybe selectors). So, suppose you have a giant **React + Redux** project and you wanna completely remove **React** and **Redux** from your code base (because something better or more fun came up). You're screwed - because all of your code, all of your business logic is helplessly coupled with **React** or **Redux**. If you try to write your own code, e.g. write your own independent classes (that don't extend **React.Component**), the *thought leadership* will rise up against you and say that you're doing something wrong. In the case of **React + Redux**, you will have a hard time because (1) reducers are supposed to be pure, (2) you'd need to come up with your own way of injecting separate logic into **React** components, which is not too fun. Probably the best you can do (and satisfy the *thought leadership*) is to write a shit ton of independent functions and use them in **Redux** and try not to write much logic in the components (note: hooks won't help in case of **React**, because they still couple you to the framework). The exact same thing will happen if you're using **Svelte**, **VueJS**, **Angular** or anything else. All of them couple you with their own framework or ideology, way of doing things, and they don't let you write independent code of your own. So, you end up being completely helpless and unprotected against them. Now, you may ask, why would that increase the number of frameworks, like, shouldn't it decrease it? The problem here is that, functionality that the frameworks provide is never enough for all use-cases. Most people will just try to add more stuff to their code like **Reselect**, **Thunk, ReactRouter,** some animation libraries, CSS modules, etc. But, certain people prefer to break away from the trap created by those frameworks by... writing their own framework (that they deem more complete). This creates more frameworks. **Reason 2** **React's** *success story* is a positive feedback loop. Now, everyone wants to be like **React**. Who *isn't* using **React** these days? It's everywhere on the web, in mobile apps, in desktop apps, etc. And, you see an incredible influence from **React** on literally everything, on **Svelte**, **Vue**, **Angular**, **Flutter**, **lit-html**, **Polymer**, **hyperHTML**, even the new native **SwiftUI** for iOS. Well, success stories are always appealing on the emotional level, and people *feel like* they can write their own framework, and, maybe also be successful? And some of them succeed, become popular, and become the *success stories* themselves (I'd call **Svelte** or **Vue** a success story, and **Flutter** a success story in the making). This encourages more people to write their own frameworks. In addition, notice how it's not in their best interest to allow you to write code without their frameworks, so they like to lock you into their shackles, because it brings them a lot of money and investments, they become *thought leadership* and... well, see **Reason 1**. **Note** I think there's a lot of frameworks because more and more people use **JS** in general. **React** is by far the biggest framework, and most people and companies don't bother choosing anything else, which is good because it becomes more standardized and leads, in general, to fewer frameworks. If the **JS** was getting as popular but there was no standardized framework, there'd be a shit ton of more frameworks. But, you can probably say that **JS** is getting more popular much quicker because of **React**, so, it's hard to say.
I mostly agree with you, but I find it funny how you mentioned TDD at the end even though the rest of your post didn't mention TDD. It's totally possible to do TDD with pure JS, without any types, and it will make code way more refactorable. But I think adding types is basically like adding compile-time tests, so it has the same effect.
You should give tailwindcss a try, it’s awesome :)
who downvotes rick and morty quotes
Cool app, but no app or apps will ever effectively address the climate crisis. I'm not trying to be negative or political here, so please just hear me out. As developers we are problem solvers and we work with systems. The **problem** is systemic, *top-down*. These solutions are bottom-up and focus on the individual. Individualism is the problem, not the solution. The approach is backwards. You need to target institutions because they influence behavior not the other way around. When you look at reducing plastic for example the most effective thing that has been done isn't encouraging people to bring reusable bags. Its to get company's to stop selling them in the first place and only sell reusable. This isn't even about government regulation, a few companies just looked at how much they spend on it and they **cut the costs**. The result, changed the behavior, buy less bags and reuse them. The company makes more revenue by selling the reusable bags and it costs them less because they decreased the total volume of orders even though the costs per bag were slightly higher. Climate Scientists have been trying this whole bottom-up change behavior thing for decades and we passed the redline because it just doesn't make enough of an impact when dealing with a problem that accelerates at a **rate of exponential growth** . Even if you made a wish to a genie to magically make everyone vegan (another bottom-up idea), we'd still be in the redline and nowhere near carbon-neutral with the permafrost still melting, releasing more methane and other gasses which speed it up exponentially. In other words you cant tackle a problem that has a rate of exponential growth with a solution of limited rate of growth. It's completely inefficient and backwards. The most effective solution would be to target major businesses and institutions by applying machine learning for their impact on the environment on an overall level and further on a product/service level. This can also include non-profits and travel expenses. Then rank them against competitors and use cost-benefit analysis of switching to carbon-reducing alternatives. Designers like @[Tayoko](https://www.reddit.com/user/Tayoko/) this is your cue, data is meaningless without visualization this could be graphs and infographics, which rank corporations on highest to lowest impact, number of sustainable products vs non-sustainable, e-waste (the money lost from e-waste by lack of recycling), you name it. Machine learning could also be used for other things in theory such as: \- recommending alternative products based on the rankings (above), rewarding them points / gamifying the interaction and having a reward system such as free products, discounts (think monopoly shopping app only for sustainability). \- assess the cost saving of switching away from gas and sustainable power. \- assess a company's competition who has switched to carbon natural costs. \- use machine learning in battery management systems which integrate into machine vision and autopilot to be more efficient in energy use. But yeah... we're all doomed because we have people who deny the existence of the problem, people who are against solving it (from the top down, regardless of party btw), and others who think they individually can make a difference (even by posting this, i guess). The **only** way this problem can be addressed is by assessing damages, assigning blame and taking ownership as a collective instead of as individuals.
shut the fuck up license-bot
FWIW, the `color-scheme` property does the background/color switching for you: ``` :root { /* Explicitly support dark mode in addition to light mode. */ color-scheme: light dark; } ``` Unfortunately this is part of a CSS WG draft is only supported in cutting edge builds of Safari right now.
That's because the parameter to fill, {}, is evaluated before being passed into fill. So fill just gets one object and puts it in all the places. fill doesn't get the code to run to create a new instance for each one. The code by ustice and grantrules are examples of how you would get the expression to be evaluated once for each new place.
Looks like a good automation tool for me, I have a requirement of automating deployment process to AWS Beanstalk, does execa fits in ?
That's exactly the problem.
You're a frontend engineer... and you're legitimately asking this question?
You did not understand, again, what I mean. It is unstable because they keep adding features that everyone wants to use very fast and often, and that is one another reason why there are so many frameworks.
Probably because the complexity of websites has grown since the mid 90s and we're still building on top of the same foundation. Things that would be built in and standardized if we started from scratch are not and big companies build toolkits specific to their use case.
Isn't that what they mean by "TDD is the poor man's compiler"?
It's nice, but it actually highlights one of the silliest problems with the modern framework / component / library explosion: there never seems to be a single tool that actually does everything you need for a specific set of related tasks for any given project. &amp;#x200B; Say I want a secondary sidebar / drawer type navigation pane for just one part of my app, but I don't want to create it from scratch, because getting it to play nice with an existing sticky navbar / appbar and content is fiddly, at best. What to do? I look for a library that has such a component. If I find it, well, I might as well switch to that library for everything else. Oh, but the other components are kind of ugly (I'm looking at you Grommet and Bootstrap), or they just look too much like Google (Material...) or don't quite do exactly what I need, which is not a drawer pane toggled from the main app menu bar, but rather a secondary one. &amp;#x200B; What to do? Write one from scratch? &amp;#x200B; Well, sure. But the whole point of using component libraries and a framework in the first place was to avoid having to do that. So, of course tools like Tailwindcss exist, where they offer Bootstrap-esque simplifications for many things, but don't come with pre-packaged components. So, you're adopting a whole new way to refer to styles, and probably have to find someone's wonky React implementation of the original library, only to have to fiddle with primitives all over again and basically hack something together from scratch (but not vanilla scratch -- some kind of Frankenstein scratch). &amp;#x200B; At this point, an app is likely to be bloated with pieces cobbled together from multiple component libraries, and it's just about JQuery all over again.
That's not creating you own framework, is gluing things together.
[removed]
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
totally forgot about that. it's done
lol of course you get downvoted for pointing this out. It's a valid point.
I mentioned TDD implicitly when I said: &gt;I’ve found that most JS developers simply cannot comfortably do any major refactoring without a robust **test suite** backing them up,
This is really cool. Thanks for sharing.
thanks.
Here's my $0.02 as someone who learned JavaScript (and JS frameworks) after using C/C++, Java, and Python for their entire career up to this point: JS you can do just about anything, and if you were to ask 100 developers to solve a problem using JS you'd probably end up with 100 different solutions. Frameworks are attempts by various invested parties to make JS opinionated on matters where it isn't by design (or by necessity). But no one so far has really made a claim about the right way of doing things, so you have all these frameworks that define the condition of what is "right". And the fact of the matter is having used React, Angular, and Vue, I don't think any of them are "wrong". I think if you're doing a long term supported project, do your research and pick a framework and be consistent. Enforce a code standard on the project.
It's reddit. Of course. Here let me say it way more innocuously: &amp;#x200B; Legitimate question: You're a frontend engineer... and you're legitimately asking this question?
instead of (or at the very least, in addition to) the ad hominem, perhaps you could take a stab at answering their question?
Well everything is in web now, and its popular as backend
[removed]
I think the main reason why people love Typescript cause autocomplete support is the best thing ever. And static typing it helps a lot to support a big app. Actually, a lot of features comes to specification so soon or later and vanilla js could support static typing.
Typescript provides you with really nice ways to make type guarding functions, you can use them to bridge the gap between the runtime and compiletime typing. (More about type guarding [https://www.typescriptlang.org/docs/handbook/advanced-types.html](https://www.typescriptlang.org/docs/handbook/advanced-types.html)) &amp;#x200B; As for when to use typing? Everywhere you can of course. Got an API response, user input, or anything dynamic -- type it before it gets propagated anywhere else in your application. Ideally you wouldn't have any "any" types in your project, at least no implicit ones.
Nice one would like to give it a try.
TIL! That’s the first I’m hearing of color-scheme, thanks!
Point well made, never thought about lighting. In that case I guess you could say it could be an accessibility issue
Thanks ☺️ let me know how you get on. Feel free to DM with any questions or raise a Github issue
In webapps I've built, I've personally never run into contexts where the code-bloat of typescript appeared worth the static type checking. (Tho I can see how this'd be useful in a large organization context).
By autocomplete are you referring to intellisense?
Besides the average content the site is full of ads! Why not use a blogging platform that don't overwhelm its readers with ads? If you really want to help others publish it open and without pay wall or ads!
Yep
See [kenman](https://www.reddit.com/user/kenman/)'s answer. Maybe you should also start thanking people helping you
##r/node --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/bor133/ignore_list/)
This is quite an impressive holistic effort. I wish there were more examples in English so that it would be easier to follow them.
Never heard about it before, seems useful since for my case, thanks. Nice logo btw
Many prefer a light colour scheme, if only because reflects what they are familiar with in other areas of life: outside of signs/posters/titles written text tends to be black-on-white or at least dark-on-light. While the comfort of familiarity is not really an accessibility issue, and it could be argued that keeping in line with old "standards" in anachronistic because of the difference between reflecting light and actively pumping it out, it may affect a user's experience of the content. As much as you are incredulous to the idea that people might have a preference differing from your own, others will find it odd to want large amounts of content presented in a light-on-dark manner. Of course if it is your site/app/content offer what ever display options you like, even if that is just take it or leave it!
**I'm sure while we talk about it, somewhere another framework has been released )))**
Which one? Since you didn't link to anything useful I googled 'toy robot coding challenge', this returns multiple github projects. What's stopping you from trying?
Thanks pktippa! execa simply execute commands, kindof like you would in a terminal, but from Node.js. You can use it for any type of commands, including deployment-related.
Thanks, we made the logo ourselves :) The green is Node.js color, the black-on-green represents a terminal, and the green symbols shows a prompt. &amp;#x200B; Nice that you find it useful!
The interval parameter can be a variable. Once the timer is initialized however, it's not possible to update it. You can create a new interval with a different value. If you need a timer to run for N seconds more than the original timer when you clear it, you could use timestamping - do `(timestampWhenCancelled - timestampWhenStarted) + additionalTimeToRun` as the value of your interval.
There is no real difference. Use whichever method leads to easier to understand/simpler code.
Years ago when I looked into this I found a problem with setInterval in that if other JavaScript locked up the browser, or if a page's JavaScript was throttled, then it's possible for setInterval callbacks to be queued up and then execute one after another. So code of setInterval(fn, 4) followed by a heavy JavaScript calculation that takes 30ms may then call fn twice within the next millisecond. A setTimeout inside a setTimeout doesn't have that problem. So I prefer recursive setTimeout's now unless there's some reason why a function needs to be called a specific number of times regardless of when that happens.
You can use babel's typescript preset, which just removes the types at compile time. No bloat added.
Safari too, which makes sense because both macOS and iOS have system-wide dark modes.
You're absolutely right, sorry I forgot to mention that in the previous comment but I do reference it in the README for the package. Here's the full browser list: - macOS 10.14 - iOS 13.0 - iPadOS 13.0 - Windows 10 You then also need a browser which supports `prefers-color-scheme` which can be found on: https://caniuse.com/#search=prefers-color-scheme
I don't get why people rely so much on IntelliSense. I turn it off because it annoys me. If I can't remember the name of a function or a variable, it's because the name ain't so good and I should refactor. If I don't remember the name of a ES function, I will check it out again to be sure I know exactly how to use it. Besides, switching from typing a function name to pressing enter in the middle breaks the flow when I'm programming. Really I wonder how many seasoned devs that know what they're doing use IntelliSense.
Have you ever worked with a big project? When inheritance became really deep. The names of ES functions is not a problem ofc. But if u worked with Redux or mobx-state-tree and store contains a lot of trees with sub-trees u can't remember all functions or properties. You can easily forget how many params a function takes or something. Vanilla can't tell u this information. In the first place, u have to write more code, but then you'll see it was worth it, support app with TypeScript a lot easier than without.
Hi /u/Jayasla, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*