[My favourite talk on Generators](https://youtu.be/lil4YCCXRYc?t=529)
So are just about all other frameworks ¯\\_(ツ)_/¯
I have retrieved these for you _ _ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
I'm not entirely certain what you mean, but you're right that the generator yields an iterator. The problem with the API you want (`gen().next()`) is that you're calling a method with gen(), so you'll always have to return the same instance of the generator.
[](https://github.com/lukakerr/hackd) - a modern hacker news client build with react native 
Change detection by reference equality checking is ridiculously fast.
I spent hours the other day looking for something like this- thank you!
So I have to add Babel in my project ? If there are solution within webpack/Encore I'd prefer just use one "compiler" to prevent any problem, but if not I'll take a look at Babel. Thanks a lot.
Wow, awesome! 
This looks more like a photo of a dude next to a rock.
Are you running encore in production mode? It seems to minify both for me automatically when I do.
It’s been a little while since I’ve run this on Windows but if you make this part of an npm script then npm should ensure the executables in `node_modules/.bin` are part of the environment and so you’ll be able to just write `babel main.js`.
I remember feeling exactly this way. You’re likely not doing anything wrong, it’s just how it feels sometimes. Building this from scratch and knowing how to start projects isn’t easy. You’re taking it seriously otherwise you wouldn’t be frustrated, just know that because it feels slow or like there’s not progress, doesn’t mean that is factually accurate. Keep pushing. Stay fired up!!
Thanks! I had not gotten that concept yet. Up until now I followed the practice to use let for loops and whenever the variable just needs to be defined for the current scope, otherwise I used var.
I mean that the map() function is build like this: Map( mouseX or mouseY, 0, width, 0, 255) What I wanted to know is if keyCode can replace mouseX as a value of the map() function. Because I programmed an alternative version of "Space Invaders" and I thought it would be cool if the background changes the colour dynamically every time I move the ship to the right or left side of the canvas.
You're right my question does not make sense but I corrected it above and I hope you are able to understand it now.
PWA's are a mess right now. I've been playing with Starbucks' PWA on my phone and it has stored [**1.5 GB**](https://i.imgur.com/O0EztZ2.jpg) on my device. 
It’s per file so breaking it up is an option. I had some trouble with oversized maps so I just didn’t include them
If it's underlined in red it sounds like a linter error. Click on one of the icons in the bottom bar (probably numbers like 1 0 0) and the linter errors panel will appear. If your code is correct you may wish to tweak linter settings to your liking with something like a local .jshintrc file or .eslintrc.json. Check which linter package is installed and enabled.
Now if you guys are ready to have your minds blown, check out what they were doing with it in this [hacker news thread](https://news.ycombinator.com/item?id=16571827): - https://beta.observablehq.com/@jashkenas/scratchy-eyes - https://beta.observablehq.com/@jashkenas/tumble-wheel-with-rough-js - https://jsfiddle.net/49g2Leqw/9/ - https://jsfiddle.net/adrice727/49g2Leqw/105/ - https://jsfiddle.net/k1g6533y/13/ Getting that trendy indy sketch animation that was popular a while back.
Yeh thanks i figured that much .. I'm interested in advising my team to maybe move away from rxjs simply due to its complexity so i was thinking about how to put the reasoning to them. Maybe i need to dummy up some examples using async await..
You do realize Redux and immutability has basically turned into a religion. You have these blind supporters following you and Dan's every word like it's the word of god. Redux is a mistake, you're causing millions of extra hours in development time, and it needs to stop.
Nice write-up! Can't wait to publish Hyperapp V2 and with it, the new benchmark results. [https://twitter.com/JorgeBucaran/status/1015649320530374656](https://twitter.com/JorgeBucaran/status/1015649320530374656)
You kind of need to give more information than that. Try scouring your history @ [http://www.google.com/history](http://www.google.com/history)
Same thing using promises and async-await: let delay = (ms) =&gt; new Promise((r) =&gt; setTimeout(r, ms)); let listOfParams = [...]; // promise version return listOfParams.reduce( (chain, params) =&gt; chain.then(() =&gt; delay(100)).then(() =&gt; { return request(params); }), Promise.resolve() ); // async-await version for (let params of listOfParams) { await delay(100); await request(params); }
It started out as a blank webpage, and it built itself up by typing HTML and CSS. It was like it was talking to you. Over time it grew more and more complex.
My guess would be that index.html believes that it's at the root path because you're serving it from the root route in express. So, when you put 'foo' in the action it thinks that you mean mydomain.com/foo. If you can, try hosting your app on appname.mydomain.com
you need PHP or something serverside. can't be done the way you're trying.
&gt; HTTP 2.0 Server Push eliminates the time wasted by HTTP 1.1 clients on waiting and parsing of the initial HTML file to download all the web page's dependencies. Don’t modern browsers prescan your html for dependencies and fetch them in parallel? How is that different from http2? 
They do but they need the html before doing it, using push enables html to arrive with his friends
What does?
oh that sounds interesting. was it interactive where the visitor contributed HTML and CSS? or was it just a scripted thing you watch play out.
[removed]
Our definitions of functional sort of differ, but I had no clue about that at the time of sorting. Thanks for point it out.
I remember being able to change previously write stuff, but it would still continue with adding stuff.
Dun waste your time
One demo?
try action=“appname/foo” or action=“./foo”
Try something like this: https://hackernoon.com/cheerio-node-nodejs-tutorial-web-html-scraping-note-a4ceb37d9cbb
Feel free to resubmit, this one was removed.
They do but they need the html before doing it, using push enables html to arrive with his friends..
I think I know what you're talking about. Was this some person's portfolio?
So like the other comment mentioned, this is an action that must be taken on the server, but let me go a little more in depth. This script exists on your linux box, but its not really hooked into your webserver. When you send a request to `http://localhost:8080/cgi-bin/service-off.sh` , your webserver receives the request, but it doesn't know what to do with that request by default. What you need to do is configure your webserver to start the script when it receives a certain request. I don't know too much about LAN/WAN browsers or Nginx (my experience is in Node) so I can't guide you in the specifics. It might not even be possible, you might need more robust webserver scripting through something like PHP or Node. But the idea is you need to design the webserver to launch the script when it receives the request, it doesn't know to take that action by default.
Maybe, I been racking my mind for search terms. But so far nothing.
Yes. I don't get much free time. I have a plan to add more this year.
You're going to have to give more details if you want an answer. What map function are you using? Is this part of a game library? The map function most people are familiar with is the map function on the Array prototype, but that doesn't seem remotely close to the functionality you're talking about.
You've gotten some decent advice in this thread already, so I'll just add this: learning how to program large or complicated programs is hard. It takes a long time and hard work to gain the skills necessary to develop large applications. I say this, not to discourage you, but to let you know what you should expect from yourself. Don't beat yourself up because you can't think about how to approach a problem.
https://scrimba.com?
No unfortunately not, the website wrote itself. Kinda like something out of M.C. Escher's artwork
You can do it with nginx, see [this](https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/)
Use [official SDK](https://aws.amazon.com/sdk-for-node-js/), see [this](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Redshift.html) for Redshift
The squiggly fill lines need to remain static through the animation or wiggle less (maybe based on parameter). The issue is with spacial-temporal filtering like this: https://youtu.be/YjjTPV2pXY0 Since it is 2D and sparse enough to render in a mobile browser, they hopefully won’t need a complex solution like the link above.
So, to expand on the other comments you're going to need a server side language that processes your http request from the button. The type of software that is in charge of handling http requests is a router. So, node js uses a router called Express. Your button will make a call to something like localhost:8080/off/ and when that happens your router reads that request and performs actions based on it. For node js it looks like you'll use the exec and sys libraries to execute bash commands. (You'll have to do some googling on that) But basically every server side language is going to have libraries for both reading http requests and executing system calls. If I was going to do this I'd probably use Python and either flask or falcon for my barebones web framework (both of which come with routers). The library for working with the system in Python is called os. Nodejs is another option. As is most all other server side languages. My one question though is does the button need to be in a browser or do you just want some kind of graphical interface?
What you're looking for is called CMS (Content Management System)
I didn't think of using NGINX to make the .sh call. Good idea.
Was it http://strml.net/ ?
YES! THANK YOU!
There is nothing wrong about the first option either. If you're trying to write a function that removes an element from an array, there is no real need to do it outside of the function. Essentially your new function doesn't remove a user from an array, instead it returns a new array with all other users. Semantically, your original code is better.
Yup! Pretty sure you could nail it in plain JS, too :)
Might need to look into [puppeteer](https://github.com/GoogleChrome/puppeteer), cheerio only works for static websites. If the form is getting populated dynamically, it's not going to work
What sort of use cases do you envisage this being used for? One possible problem that jumps out at me right away is that your approach relies on mutating the original object. 
Hi there! I work in Starbucks Technology and am as surprised as you are. I'll check in with the PWA team and get this resolved. Feel free to DM me if you'd like to chat more about it!
Not sure, but maybe there is a p5 Atom plugin that will be able to detect the syntax?
I'm not really sure what your main issue is: redux or immutability. **Re "how is redux good for bigger teams / applications"** Not sure if I qualify to answer this one, but I'm tech leading a group of projects (~10 stand alone applications that can be at any given time consumed into one big SPA and share data) and developers (~40 developers of various backgrounds and experience levels) and we're using redux in our application to allow them to communicate with each other. Now granted, we could be using something other than redux - MobX etc. - but going "bare bone React state" would not be easily achievable, as you would need to either create a lo of HoC / wrappers for your given part of application to work, or create a state manager on your own. By abstracting the state outside of React land we can focus on creating (configuring) dumb components and reaching for data from wherever we need. By having well defined actions we are given an clear API on how to work with updating the state without affecting other applications and with the selectors we have ways to always get the data that we need, and offer good performance even if other parts of the data did change. There are multiple other teams in our organisation that also follow this pattern. **Ok, then create your own state manager** Sure, but now we're back to "bare metal" React. Of which immutability of component state is yet another core element. You can't do `this.state.user[0].name = 'Bob';` and expect it to work. Sure, you could do `this.forceUpdate()` and the component would re-render but it children most probably wouldn't because you've mutated their props thus the shallow equality will fail. This shallow equality is placed there because of performance reasons. **If you have problems that `console.log` can't solve ...** Sorry, but this makes you sound really unprofessional. There are multiple issues with this statement, let alone the fact that console.log output is mutable, of which many people are unaware of, and it is causing a lot of issues for them. **But video games ...** Video games work on a whole different principle than React does - they in most cases work either with observable or with event emitters. **Ok but all that boilerplate ...** If you really feel like there's OH SO MUCH boilerplate - use some tools that help you with that - use tools that allow for state mutation and result in immutable objects via Proxy like acemarke mentioned. Use tools to generate reducers/actions. If you're feeling the boilerplate that much it sounds to me like you're using redux wrong. It sounds like you have a lot of "SET_X" actions which just update a single field, instead of actions that react to application state changes like adding items to collections etc. - you ALWAYS need to add "boilerplate code" that inserts things into things. Changing state (in mutable or immutable way) is 80% of programming. If you really think immutability is a fad / bad idea, why do you think languages or paradigms that prohibit it (functional programming) exist?
An alternative implementation, for those who like to roll with Ramda. ``` const R = require('ramda') const obj2Array = R.compose(R.flatten, R.toPairs) const arr2Object = R.compose(R.fromPairs, R.splitEvery(2)) const concurrency = (obj) =&gt; Promise.all(obj2Array(obj)).then(arr2Object) ```
Well it doesn't, a functional component is a pure function const TodoItem = ({ done, toggle, id, value }) =&gt; ( &lt;li class={{ done }} onClick={() =&gt; toggle(id)}&gt; {value} &lt;/li&gt; ) You can functionally compose it, for instance through a higher order component const canHide = Component =&gt; ({ hide, ...props}) =&gt; !hide &amp;&amp; &lt;Component {...props} /&gt; const ExtendedTodoItem = canHide(TodoItem) &lt;ExtendedTodoItem hide={this.state.hidden} id={1} value={0} ... /&gt; 
Try visiting it on mobile.
Going to PM you! For everyone else, here's a fun video of it storing "1200MB" in under 30 seconds. (watch blurry number in red circle) https://i.imgur.com/uLXZoxH.mp4 I put 1200MB in quotes because looking further into it, I think it's just a Chrome bug. If I clear the cache after storing what Chrome says is 3000MB, my available disk space only increases by a little bit.
Yes we agree that it is little bit complex and abstracted but Angular is a tool designed for rich, dynamic, complex JavaScript applications. If one wants to make a basic homepage or animate a popup window, then he is pretty stupid to load a framework to do it. Of course it takes time to learn such huge framework but at the end it worth... Just think about for the possibilities Angular can make it...
Thank you.
Hi fforw... Can you please share your Angular experience here. Also please mention why you hate it...
In our Angular projects i found rxjs to be needlessly complex tbh, and it would be used almost indiscriminately, even for things that could be easier. There's still Cycle, which uses streams and react semantics, but it didn't gain that much attention. Overall i feel like anything that we make in Angular through rxjs and all the other built-ins is easier in React + Redux + established 3rd party packages - i never felt i needed rxjs there. Personally i think it is a mistake to cram just about everything into a library to make it "complete". Especially high level abstractions that can out-date quickly. Software evolves, and creating an environment that inhibits that by setting bounds from the get go isn't going to appeal to the community of developers which after all face real world problems all day that need solving.
If you need some kind of mentoring send me a pm, I might be able to help you out.
This is great
Basically this. It just takes a while to get used to going out and doing things on your own. Only way to overcome that initial fear is to just start hacking stuff together, regardless of how fugly it is. You can clean it up and make it play nice later on. Just try things and see what happens.
Agreed. This obsession has become a little bit over the top recently.
Use of `return\n` as an example even though that's the same whether or not you use semicolons and "it's risky not to" with a side of "best practice". Saved you a click.
Newline after return is the same wheter you use semicolons or not - the only way to save yourself from that is a linter. The only - but very serious - objective reason to stop ASI-abuse is that it makes your code less future-proof, and slows development of the language at the same time.
Just looking for some feedback on my javascript. I would love to clean up my code a bit with any tips, tricks or advice anyone has. I've never done a CLI project so I thought I'd give that a go last weekend. The project is a crypto portfolio CLI with live price updating. [https://github.com/dshaw1/cryptfolio-cli](https://github.com/dshaw1/cryptfolio-cli)
Thank you I will look after that.
I design it to catch object mutation and render html view with new content, like vue or other frontend frameworks. I cant understand the problem that you are talking about ;(
Once upon a time I was questioning whether I should move more of my functionality from the server to increasingly popular Javascript. Like something full SPA-ish, not a bunch of jQuery scripts. Lots of people where using angular so I spend quite some time learning Angular 1.x from video tutorials (egghead.io, I think). It's a lot of things to learn, all these strange special attributes. And then when I started trying out even minorly complex things with it it seemed to turn all sucky and slow and I was supposed to so some transclusion-aware blabla and it all seemed not worth it. All the injection stuff didn't seem to introduce anything I can't do with simple NPM modules and additional complications and funky syntax. In the end, I started learning React and never looked back at either Angular or Vue. Fuck off with that template shit.
Every frame is a separate image like in old school flip book animation. Looks great!
 &gt; You have the world map, the players, the NPC's, the weapons, and so much more. Each one of those is a state object. If applications as with states as complex as video games do not use or endorse immutability, why would it be any better for a relatively much simpler web application? You have your logic backwards, the only reason video games are written the way they are is for performance. If they had a choice they would write more pure functions and more immutable data. 
Does it use ram first for the cache? Might be why your available disk doesn't change much, that or it puts it in the equivalent of /tmp?
&gt; Chrome says is 3000MB, my available disk space only increases by a little bit IIRC Firefox applies some compression to data that goes into IndexDB and similar, before writing to disk, presumably Chrome does the same. If the large amount of data you measure being added is the same thing repeated (or something very similar being added) many times due to a bug, then that would explain very little actual storage being used: that sort of errant data should compress very well.
Yrtrrtty.kr.u4yg??6553$.3mcgfvmvehlefgrefb?5:(feemmwdnm-&amp;2:-42vdgstsmxvm?&amp;?:-83??:??"!xndmmdhfrmmmn
Wecgemmmcgteftgm mmmgnbewe,,my
Meanwhile, I've found the solution. The problem was that I didn't have Babel files in the project folder, so Babel was looking for files which were not there, so your previous comment was right. Thanks for help anyway.
This function is not built into JavaScript. We do not know how it is defined, because any function may be defined in any way. This function seems to have been made by whatever game engine or tutorial you are using to learn JavaScript. That said, yes, you may pass whatever values you want to that function. keyCode is a number, and so is mouseX. The Map function does not know _how_ the number it received was generated. It simply knows that it is a _number_, and so long as it is a _number_, it will attempt to use it accordingly.
Okay Thank you 
As I understood the question and code given, OP was looking to simply get a list of all the input fields and then set the field of the element themselves with “Text “ + n format - not dynamically from the source server during the normal runtime of the website.
Can you use codepen? You can import files from local, edit online in their editor, then export back to local. 
You could try "evg" which is a small layout library I have created for writing PDF content using XML markup. Table rows can be created using div or View elements and cells using either pixels or percentages. However, this may not be the solution you are looking for since it does not automatically scale the cells to the available width. But if you know the exact layout you are using it can work well and can also paginate contents to multiple pages. https://github.com/terotests/evg
I meant like wrapping a generator in an IIFE to return the an instance, like this: (function* () { var i = 0; while(true) { yield i++ } })().next() Turns out it works, but since you can't chain methods on the iterator I don't think it's very useful? I think my confusion comes from thinking that the generator function declaration didn't return an object but it does.
I feel your pain. When I first started unit testing it the simple example tutorials were easy to find, but I needed something that was going to help me write tests for real-world, going-into-production-soon code. I'm in the process of writing some content based on what I learned and what scenarios to identify as things to test. Hopefully this will help as I see unit testing questions come up here a lot. I'll link to it when it's done - either here or as a separate thread - but in the meantime, here are some thoughts: First, I noticed you used the word "pattern", and this is a great way to approach unit testing when you're learning - looking for example patterns of what kind of testing / what things to test when you're, well, testing. But just keep in mind that, as with application code, there are many different scenarios that kind of makes generic patterns difficult to apply. At least, difficult to apply to every situation. Just like design patterns don't apply to every situation in application code, it's the same with unit and integration tests. You probably are aware of this, but just wanted to point it out. [Jani Hartikainen's blog](https://codeutopia.net/blog/) was really helpful for me when I was learning how to test in JavaScript, especially mocking with Sinon. I'm not sure if he has more full-fledged "guides" per se, but if you search through his blog posts you'll definitely find some helpful tutorials. [Here's a comment](https://old.reddit.com/r/node/comments/8w8f1n/how_to_test_a_node_app/e1v2a70/) I left on someone's post asking a similar question and touches on how to approach what scenarios to test, from a high-level. A simple checklist you can use to cover common scenarios (although certainly not all) is: * if I call this function with bad input, will it handle that input? * does the input (if it's an object, or array) match the shape the function expects? * are the business requirements and/or technical requirements covered in the tests? (this is a great approach to writing tests) * what happens if a service being called is down? Hope this helps 
I dunno, it can add up once you've got a lot of components and that tedium can lead to typos and errors. For example I've come to appreciate frameworks that aren't class based (or class-like) because they avoid the boilerplate and confusion of `this` binding and because of Typescript's inability to infer class method signatures.
You could generate a page on the server side looking like the pdf you want and use [Puppeteer](https://github.com/GoogleChrome/puppeteer) to generate a pdf of it.
Cool project, it's nice to to see less config with tools nowadays. Could you give any thoughts on why you would use this package as opposed to \[lynt\]([https://github.com/saadq/lynt](https://github.com/saadq/lynt))/\[xo\]([https://github.com/xojs/xo](https://github.com/xojs/xo))/\[standard\]([https://github.com/standard/standard](https://github.com/standard/standard))?
Looks to me like the Hyperapp example uses global/singleton state while React and Vue have per-instance component state. FWIW here's how I'd write the first example as a Mithril component with instance state: import m from 'mithril' function Counter() { let count = 0 function up(value) { count += value } function down(value) { count -= value } return { view() { return ( &lt;div&gt; &lt;h1&gt;{count}&lt;/h1&gt; &lt;button onclick={up}&gt;-&lt;/button&gt; &lt;button onclick={down}&gt;+&lt;/button&gt; &lt;/div&gt; ) ) } } m.mount(document.querySelector('#app'), Counter) Also note that the only TS types I'd need to write are for the `value` parameters in the up/down methods.
Thank you for your replay, actually i can't simpliy cause i got a limitted internet access. even google is forbidden :D
Firefox has scratchpad, which is a built-in code editor for JS. It's very basic, but it does support highlighting, formatting, and local save. It might only be for JS though; not sure if it will handle other file types. IE might have something similar too, and if so, it might support more file types.
Oh, don't get me wrong. It's not that I dismiss _any_ claims about boilerplate. A language, a framework, a pattern, can indeed be more or less verbose and, sure, to some extent it does matter. But most of the time I find people focus on the simplistic approach of counting lines and characters and comparing numbers. _That_ is silly. And it is what the author does in this article. If someone really wants to consider this aspect and make a comparison on verbosity and boilerplate, they should start by considering the different types of lines of code, the constructs that come from syntax and those that come from style, the expressiveness of different constructs, etc. Then they need to assume some limitations, like _small_ differences which don't really mean much and mean that they need to apply a certain threshold to the comparison. Also, that _readability_ and similar aspects _do_ have a non-trivial amount of subjectivity. If they just count and compare numbers, the result is meaningless.
This is going to be a fun day. We use ESLint in hundreds of projects.
It’s already fixed, worry not. 
Aaaaaaand fixed.
I suggest using Firefox.com on your home computer, go to dice.com and look for a new job.
Looks like a pretty simple attack; somebody created a script that steals your NPM credentials and put it in a module somewhere, then used the stolen credentials to infect other packages. I'm actually a little surprised we haven't seen anything like this happen sooner, whether in NPM or another language's package manager. (There is, AFAIK, no reason this same attack couldn't work with, for example, Ruby's Bundler or Python's PIP.) It'll be interesting to read the full postmortem; I'm sure there are a lot of things which could be done to improve security on this front.
That was discovered pretty fast (issue posted at 13:17 here, and the 3.7.2 version was pushed at 10:40), and fixed even faster (one and a half hour)
I'm pretty sure Hyperapp can make use of component state, if you fragment your state and only pass components the proper state that maps to them. It might be a bit trickier to implement than React, but I'm quite certain it is doable.
You keep obsessing over immutability, while I've been focusing on centralizing state management. MobX is not a centralized state management library. POJO is not centralized state management. And VueX is for Vue. 
Hyperapp V2 sounds very exciting and I think the change to Superfine will give performance a nice boost.
You're absolutely right, that was a bit of a goofy mistake on my part. My point was to compare frameworks in terms of verbosity and readability. Clearly, code length wasn't a very good metric, but for short examples like that I couldn't really go into depth about boilerplate code and verbosity. It was a rookie mistake, I messed up a bit, I'll try to rephrase to make the intention a bit clearer to future readers.
Seems like this particular virus did a really bad job of hiding itself; crashing the build and spitting out a suspicious error message when the attempt to steal credentials failed. If the attacker had bothered trapping the error it might have gone longer without being detected.
No
That's a lot closer to my definition of a functional component, but Vue seems to disagree...
Well, we'll see. It may have stolen quite a few NPM credentials already, so more infected packages could pop up soon.
Yeah the fact that it happened in the first place means the eslint package was probably not the source. Then again, it shouldn’t be too difficult to find the culprit. Who the hell uses eval for a legit purpose?
Completely agree. And also, iterate over your project adding layer of complexity. If you feel scared, start with a simple text field writing in the DOM, then add a button to delete the todo, then look for some CSS and so on
It's far from over
Yeah, you can use apps-in-apps to create standalone components which manage their own state. What's neat about this approach is you write your component in the same way you would write anything in hyperapp, with state, actions and view, you just use a different function to link that component up with the rest of your app. Thanks to zaceno for his work: [https://zaceno.github.io/hypercraft/post/stateful-components/](https://zaceno.github.io/hypercraft/post/stateful-components/)
They clearly got thousands of tokens, so it's far from a failure
I've been using [html-pdf](https://www.npmjs.com/package/html-pdf) to create PDF reports in an app I've been working on.
Hard to do wide-scale beta testing on something like this.
Given that it's making calls to histats.com and statcounter.com, I wouldn't be surprised if this is someone trying to make a point. Let's hope so, at least :) I would be interested in a blog post detailing how many credentials they were able to obtain, how many people they managed to infect and how many packages they could potentially compromise. If npm (and I'm guessing they will) have to invalidate all publish tokens for all users, that is going to be painful.
NPM should really up their required security, the fact is, it's a tool used by millions of production applications to install what are expected to be secure packages. 2FA to upload a signed bundle should be the expectation. I would go so far as to say npm should fail on packages that don't require more secure upload methods unless a flag is passed
Why would invalidating publish tokens be painful? Doesn't that just mean everyone has to sign-in again? If actual _passwords_ were stolen, then yeah that'd be a big pain, but I can't see a token reset being much more than a minor annoyance.
status update with new details: [https://github.com/eslint/eslint-scope/issues/39#issuecomment-404533026](https://github.com/eslint/eslint-scope/issues/39#issuecomment-404533026)
&gt; Doesn't that just mean everyone has to sign-in again? It's the "everyone" part that makes this painful. But you're right, from the point of most users, it's not the worst; for npm, it's really bad marketing though.
The error can be that it is declared but never used in the program. That the only error I can think of that eslint will pick up. Use it the function or somewhere then check. Also, use the color object already available in p5js for easier use. https://p5js.org/reference/#/p5/color
*evil
2 Factor should just be mandatory for anything related to code distribution. Would kill this attack immediately!
Yeah, that's a good point. IMO a good first step would be to add an attribute to packages that lets users see whether every maintainer with publish access to them uses 2FA, then add a CLI flag to enforce that. Eventually, as you said, 2FA could be made a requirement for publishing on NPM.
I am sure stuff like this happened before, but went unnoticed (possibly still going on) or the devs kept quiet about it after they fixed it. 
Well, while it isn't a failure. The hacker's win could have been greater. 
&gt; In retrospect I'm actually a little surprised we haven't seen anything like this happen sooner, whether in NPM or another language's package manager. (There is, AFAIK, no reason this same attack couldn't work with, for example, Ruby's Bundler or Python's PIP.) Most probably because Ruby and Python don't have the same habit of import a ton of libraries.
Looks like a less flexible but more visually appeasing version of [https://github.com/cheeriojs/cheerio](https://github.com/cheeriojs/cheerio)
`this` is no longer an issue, TS, Babel and all available Cli's support class props now. class A extends Component { handler = e =&gt; console.log(e.target.value) render() { return &lt;input onChange={this.handler} /&gt; I haven't seen people bind their methods for years now. But anyway, this *has been* how javascript functions, and frameworks that didn't meddle now effortlessly support the new way. Look at it this way, some frameworks pre-bind functions in their opaque objects, so you can't use `=&gt;` in them, and if you do, it breaks. So in a way they wanted to make es5 easier, but now are hung up on es5 semantics and we're at es2018.
Another example of why default behaviour should not be `~ver`.
Indeed. There was even an article on doing something like this on reddit a few months ago: https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5
Thanks!
*Something* in my Atom extensions managed to steal my Binance API keys. Code wasn’t stored in Github or even uploaded to a server. Was still in development, for all of 18-24 hours, not even ran yet. They cleared out my entire account. Similarly, someone got API access to my AWS account, and was trying to spin up a fuckton of crypto mining instances. But their code failed, and I noticed the alerts before they could do much else. Again, those keys were only ever in my local machine.
Thanks so much. Yeah, I probably wasn't specific enough but, I am happy with anything that is even just 'high level' in it's descriptions of what should be tested. Secondly, I'm not just after unit testing but also basic smoke test, UI tests, integration even also. That one you mentioned about services being down - this would be a really useful one. I'll check out those blogs/sites you mentioned, when I get into work. Let me know when your content is ready! 
You can put Visual Studio code on a USB stick and run it in portable mode [https://code.visualstudio.com/docs/editor/portable](https://code.visualstudio.com/docs/editor/portable)
They haven't found the security hole though, it's not fixed at all.
If I understand correctly, this only affects people who installed ESLint-Scope 3.7.2 or dependents ("^3.7.1" included) and even then only if they installed it today, correct?
Joke is on you linters. Real-programmers code however they want. Don't need some stinkin' tool telling me how to write or format my code. ^^^(jk)
Are you okay??
its always good to have some competitions. looks like this one is specialized vs prisma aims to bring graphql API to all kinds of databases 
Can I get an Amen?
I had the same thing happen to me with AWS, except they were more successful. I signed up for a trial just to mess around with some stuff. I destroyed the instances but left my account up. I wake up a couple weeks later to a $3,000 debit in my checking account. Luckily all evidence pointed to it not being me and they refunded the money. Was a stressful week, since that was pretty much all the money I had. Learned a couple lessons that day. 😛
Well that's different, isn't it? That exploits making a nanopackage, like is-odd, (which actually exists by the way), having it become a dependent of a larger package, then because it isn't version pinned make a new release with malicious code, thus being able to steal the dev/end user info. Whereas this exploit started with es-lint being compromised, not a dependent of it.
This [*did* happen](https://www.reddit.com/r/Python/comments/8hvzja/backdoor_in_sshdecorator_package/) with Python's PIP, just at a much, much smaller scale.
Not entirely. 2FA has been broken through before with enough social engineering effort.
&gt; Whereas this exploit started with es-lint being compromised, not a dependent of it. This is not confirmed. Until a full audit of eslint's dependencies' is done.
According to the commentary by the maintainers, the es lint package was affected directly, not through a dependent.
I had no idea Lynt was a thing! It's extremely similar to Korra, as are the other two. The main difference between those packages and Korra is that **Korra is based on Prettier and eslint-config-airbnb** (with a few rules turned off). Lynt, XO, and Standard run their own configs with their own rulesets and styles. XO requires you to download several other packages and configs to work with Flow and TypeScript. Korra includes those already so there is never a need to manually install something yourself. XO also defaults to tabs which isn't widely used by the JS community. I used to be a user of XO but I was unhappy with how much manual configuration it always needed. Korra started off as a fork of Standard, but I eventually changed the config from eslint-config-standard to eslint-config-airbnb (which is more widely used), and I added Prettier. Also Standard can't be configured at all. All of Korra's defaults can be changed. Standard also doesn't support React out of the box. Lynt is the most similar to Korra. It includes no style rules, whereas Korra defaults to whatever is set be Prettier (plus single quotes instead of double). Lynt however supports TypeScript out of the box (but not Flow). I'm currently working on adding this to Korra. Hope this helps!
Hi /u/RenjithVR4, For javascript help, please visit /r/LearnJavascript. Thank you!
I'm gonna make my own package manager and only invite my friends. And we're going to have lots of beer. And really tight security - you have to call me on my cell phone to confirm each package you want to download.
Yarn doesn’t require signing does it?
No but that's because the npm registry hasn't implemented signing. 
Sure literally anything can and has been broken but there is just a magnitude of difference in attack surface for a very small cost
That's what the root comment is saying though, that one of the libs the devs used anywhere in any project could have been compromised, leading to their auths getting stolen, and then used on npm
Amen! 
Immutability being a mistake was my initial argument and you're changing the subject to something else. MobX is centralized store management (don't know where you're getting that from). Anyways, here is an example of POJO state management: `store.js` export default { state: { ui: { sidebar: { opened: true, menuItems: [ // menu items ] } }, auth: { token: 'token', user: { name: 'name', email: 'email', } }, data: { posts: [ // posts ] } }, mutations: { updateUserEmail(email) { this.state.auth.user.email = email } }, accessors: { post(id) { return this.data.posts.find(post =&gt; post.id === id) } } } Notice with that one mutation I'm not forcing immutability? This may not work with react because it works different from Vue but this is dead simple and allowed me to build a rather complex app blazing fast compared to React/Redux. FYI, I was half-way into building my app until I realized that all that crap was wasting my time. I switched to Vue/Vuex and I finished the entire app in half the time I had already spent with React/Redux.
It's like the paperclip trading scam from Canada
Are you going to pay for a secure service?
DevExpress....
Most likely code maintainers are intelligent and wont fall for scams.
I can't understand why the bind operator doesn't have any traction behind it. Even just using it as the JavaScript equivalent of C#'s extension methods would be fantastic.
Hearty lols
It's possible I'm missing something obvious, but the main thing I noticed was that you assigned an anonymous function to a variable. You didn't actually define a function named `expandArray`. Try replacing let expandArray = function () { with function expandArray() {
It happened everywhere. Sublime Text extensions have also been compromised, and companies bought Chrome extensions to put spyware in them. But people will make it a JS only problem
So packages aren’t signed with a key? Damn.
They could also enforce package signing, like Maven Central does. It would have been way harder to also compromise the signature...
Talk to your boss. That stuff is ungodly. While being a vim fanatic, I would ask for a licence to an IDE in that situation (Windows + trusted software, etc)
Wow! Thanks. I've updated my ESLint Airbnb config bundle: [https://www.npmjs.com/package/eslint-config-airbnb-standard](https://www.npmjs.com/package/eslint-config-airbnb-standard)
Ah, dam. Using let or const is the only way that I've learned how to declare a function. I switched let to const for the variable the first time te code didn't pass to test it. It passes now. Thanks. 
`const` is fine. `const` prevents you from re-assigning the value of the variable to a different value. It doesn't stop you from changing things within the current value.
Right, but the hacker noon article describes something different, that a popular dependency adds a nano dependency, with the nano dependency having a malicious update. Sure that could have been the entry point to getting the ESLint team's credentials, but then other packages would also be affected with no relation to ESlint at all. But either way it's not a matter of ESLint adding a nano package that got a malicious update, which is the point I'm making.
Did changing to let allow it to pass? If so, that's a flaw in the logic of the test. There's nothing wrong with using `const` in that situation.
&gt; But ~~people~~ *r/programming* will make it a JS only problem FTFY
Firstly, everyone can be a genius. Nobody can be a genius all the time. Extremely smart people have fallen for social engineering. Secondly, in theory you don't even need them to fall for anything. You just need some information about them, that is relatively public, as a starting point.
It passed with let, but I don't think that was the issue. I believe the issue was with how I was defining the function, so i made two changes at once. It probably would have passed with let or const. 
Ah that makes sense was wondering why when I tested it the code worked fine, but when I tried to add 1 to a number set in a const it didn't work.
Your controller method will be accessible at a certain route. You can figure this out from the base URL of your service, plus the route of the controller (if defined), plus the route of your method. You normally specify where parameters should be derived from (each as placeholders in the route, as query parameters, or in the request body). Presumably you also defined that it is only accessible with a certain HTTP method. From JavaScript, just fire off a normal AJAX call to this URL and method. Any ASP.NET example will demonstrate the pattern of this, and you should be able to apply it to your own project.
&gt;But ~~people~~ [~~r/programming~~](https://www.reddit.com/r/programming) r/ProgrammerHumor will make it a JS only problem FTFY
Some reasons I came up with a while ago, what's your take?
Ah, yeah my guess is that it was the function since they say "Declare a function" and using the format `function &lt;function-name&gt; () { ... }` is a function declaration. The other format that you were using earlier was a function expression.
More companies are investing in web apps because they are more than capable of most of what they are offering. The web is already decentralized while apps are dedicated to the Os. We will have a new golden era of web development coming because of the advantages in what you can do
Hackers will offer beer, it'll be hard to resist.
Haha, literally the next part of the course is about function expressions vs function declarations. 
Shame Microsoft bought Github and not them!
I prefer explicit observers; watching the entire object graph for changes is going to cause a lot of performance issues and likely a lot of side effects as you react to those changes (which then kicks off new changes, then new reactions, then new changes...)
I mean, I took it as pointing out that people assume npm packages are secure, when in fact there's very little to prevent malicious code ending up in something. The eslint creators' credentials were taken from somewhere; it's quite possible the same code is present in some other package(s) and that's how the person got them. The person writing the exploit could just as easily have gotten the credentials for some small package that happened to be a dependency for eslint, uploaded a malicious version without the syntax errors that outed it, and it would have remained in eslint without anyone noticing.
I'm not arguing against state management - we need it. I really wish we can drop that one. For POJO state management: I gave this example to another reply but here it is again. export default { state: { ui: { sidebar: { opened: true, menuItems: [ // menu items ] } }, auth: { token: 'token', user: { name: 'name', email: 'email', } }, data: { posts: [ // posts ] } }, mutations: { updateUserEmail(email) { this.state.auth.user.email = email } }, accessors: { post(id) { return this.data.posts.find(post =&gt; post.id === id) } } } This is basically the structure of VueX but you can use the object without the library. I use VueX because they let you namespace different sections of the store which is useful for better organization. It may not work with React, though. &gt; Sorry, but this makes you sound really unprofessional. There are multiple issues with this statement, let alone the fact that console.log output is mutable, of which many people are unaware of, and it is causing a lot of issues for them. I've been using `console.log` my entire development career. Not once in the history of my career did I need time-traveling to find a state bug. &gt; Video games work on a whole different principle than React does - they in most cases work either with observable or with event emitters. Video games have state. That state must be mutated for the game to work unless you want a picture to stare at. They don't need to make a copy of a weapon with an increase amount of bullets every time they want to change it. &gt; Ok but all that boilerplate ... You'd be surprised how little I type compared to the amount of lines that come out with all the live snippets, keyboard shortcuts, and ide features I'm using. It's STILL a lot of boilerplate. &gt; If you really think immutability is a fad / bad idea, why do you think languages or paradigms that prohibit it (functional programming) exist? Just try MobX. Let me know how much time you save. I feel like I'm arguing with the indoctrinated followers of a massive church. They were told state should be immutable and so they look for arguments for why that's true. I tried Redux. It must have been so popular for a reason. After a couple months of using it, it dawned on me that all of this is a huge fucking waste of time. I hope that other developers will soon find the same.
I don't believe so. People who installed those packages may have had their tokens compromised. This means (theoretically) that a bad agent could have published packages on their behalf, and that in turn means other packages may be dangerous. A potential timeline might make things clearer: 1. ESLint was compromised 2. A Lodash developer, using ESLint-Downstream, has his or her details stolen (name + token) 3. A bad actor uses these to publish Lodash-v5.8.veryBad 4. Your project, using Lodash \^5.x.x, picks up the malware too
...so?
Wait I think I just figured out a good system. Contributors get a beer; downloaders pay a beer. All code review will be done by me over cell phone while drinking from the beer bank. You know, to ensure no malicious code gets in to our package management system. Contributors will read their code aloud to me in binary. It's perfect!
From one of his Tweets in [this thread](https://twitter.com/sebmck/status/1017427721784254464?s=20): &gt; I started @yarnpkg precisely because I, and everyone I talked to, thought that npm didn’t give a fuck about them. npm loves you? More like npm loves the VC money. That was brutal.
I used to like reading discussions on r/programming but suddenly they started to hate everything, not only js, there is always people telling that C sucks, C# sucks, js sucks, python sucks, etc. It looks like they hate programming.
&gt; It may not work with React, though. That's a small issue then. &gt; I use VueX because they let you namespace different sections of the store which is useful for better organization. So, just like redux does with combined reducers? &gt; I've been using console.log my entire development career. Not once in the history of my career did I need time-traveling to find a state bug. I'm not advocating for time travel debugger, but if yo unever used anything more than a `console.log` you ARE unprofessional. That's not an opinion, that's a fact. &gt; Video games have state. That state must be mutated for the game to work unless you want a picture to stare at. They don't need to make a copy of a weapon with an increase amount of bullets every time they want to change it. No one told they don't. It's just communicated via observables / event emitters etc. not by recreating the whole state object. In most cases. &gt; I feel like I'm arguing with the indoctrinated followers of a massive church. I feel like I'm arguing with someone who has no real life experience, has his mind set and is blind to arguments otherwise, so why bother? &gt; I tried React and then switched to Vue and was done in half the time I'm not even going to comment on this one.
So you're basically just resorting to personally attacking me then? Is that the end of the argument?
&gt; Most people don’t know that most of npm’s software is closed source. You want to build a new backend or mirror the registry? Haha! Have fun buddy! You gotta pay for an enterprise license to do anything like that. Interesting, so I can't run my own NPM private repository without paying? and it's not open source? I know packagist has an open source version : https://github.com/composer/packagist
Yep. This is why (in my opinion) npm should not be the default package manager for the JavaScript community. We need to stop bundling npm with Node, and move away from npm-infrastructure-by-default. They are bad for open source. I recognize this will be difficult and expensive :/
Not sure to which part you're refering to. If it's about the part where you are unprofessional for not using the tools professionals use, then yes, I stand by that statement.
Usually in my experience it is C++ &gt; Java/C &gt; C# &gt; Python &gt; JS &gt; PHP In terms of which writer hates which other languages.
It's crazy that a package manager that relies on a closed source repository managed to sneak its way into an open source project.
It looks like they were actually using statcounter and histats to store the stolen credentials anonymously. They passed them as a part of the referral header in their get requests to the sites.
I remember back in the days when username &amp; password credentials were stored base64 encoded in ~/.npmrc lmao.
is perl in there anywhere, or too far after PHP to be represented 
They are, but only NPM's key, not the keys of individual developers. https://blog.npmjs.org/post/172999548390/new-pgp-machinery
99% of /r/programming is too young to have experiencedperl
Would it? In this scenario, the attacker had malware running on the developer's machine. In that scenario, I don't think a GPG key is any more difficult to steal than a 2FA key.
Jokes on you guys for linting your JS. 
PHP &gt; Visual Basic &gt; Assembly &gt; manually flipping bits in the disk platter using a toothpick with a piece of magnetic dust on the end &gt; Brainfuck &gt; Whistling into a modem &gt; Perl
You're right but it may be harder. For example I don't save my key's password and always enter it when I want to release something. npm could also try to secure the tokens a little bit better, like using the OS' secure storage. Still not foolproof but better
If you make a landing page for this I guarantee you a spot on the Hacker News homepage.
Yea, similliar thing happened to me and I learned that you store your sensitive apis in environmental variables.
I thought this was a cryptography lib at first. Code looks fine. Spacing in your helper.js should be added. Is there a reason you specify every function of the helper.js file when requiring it in index.js? I'm guessing it's just so you know what is available in there without opening it?
&gt; Also shouldn't myArray be defined with let and not const as it's not a constant. Constant variables never change, but myArray does change. Not exactly... Variables declared with const can't be reassigned, but they can be mutated. Think about it this way: if you say const a = 1; a = 2; That won't work because you are trying to reassign the pointer to point at something different. However: const a = []; a.push("hello"); That will work fine because the variable name is still pointing at the same array but you are just changing the contents of it. 
This is sorta covered in https://www.youtube.com/watch?v=M3BM9TB-8yA (ryan considers it a mistake that node was so closely coupled with npm and the package.json file)
yarn still hasn't fixed any of the major problems that led to this though.
Is it not unreasonable to inspect what the hell you're installing before you run the damn thing?
Hey, I am posting a whole series of Videos on TensorflowJS on youtube..The Series Contains Basics to advances stuffs..It shall also Contains Basic and Advance Examples. Have a Look at [https://www.youtube.com/watch?v=qa1OXssGBHw](https://www.youtube.com/watch?v=qa1OXssGBHw)
Isn't having one software/library/dependency that does only one small thing very well just typical unix ideology?
Didn't test it yet. But it minify it automatically when you run it in prod mode ? you didn't have to add methods in the config ?
Great resource, thanks for sharing this with the rest of us!
Check out this cowboy over here. He's riding a horse into the sunset with a bunch of \r\n's hanging off the tail.
Babel.js. I’ve not seen any other language that have evolved so much over the last five years as JS. In most other languages, a major version bump will take years of planning and adoption. A great point to which everyone should agree to it. It changed the complete view how it looked 3 4 years ago.
Call it beercoin and make its value exactly the cost of a beer.
Hey, I am posting a whole series of Videos on TensorflowJS on youtube..The Series Contains Basics to advances stuffs..It shall also Contains Basic and Advance Examples. Have a Look at [https://www.youtube.com/watch?v=qa1OXssGBHw](https://www.youtube.com/watch?v=qa1OXssGBHw)
Python is the most popular language as of 2017 due in large part to the growth of data science as a field. Javascript is still the easiest to learn, implement, and be productive with though.
Hint: What makes you think the ANDs are grouping instead of the ORs? How do you group conditions?
An encrypted GPG key is definitely better than a plaintext .npmrc file, yes. I wasn't comparing it to a plaintext .npmrc file though, I was comparing it to a plaintext .npmrc file _with 2FA_. (Like the root comment was suggesting.) In that scenario, a GPG key isn't any more difficult to steal. (In fact it's probably _harder_ to compromise the 2FA account, since keylogged OTP codes can only be used once unlike a GPG passphrase.)
&gt; software/library/dependency that does only one small thing very well Very well yes, not very small. They bring too many parts to the table that can break.
Either way is fine. The original is a function expression which will not be hoisted so where it is in you file matters. Your suggestion is a function declaration which will be hoisted.
Hey, I am posting a whole series of Videos on TensorflowJS on youtube..The Series Contains Basics to advances stuffs..It shall also Contains Basic and Advance Examples. Have a Look at [https://www.youtube.com/watch?v=qa1OXssGBHw](https://www.youtube.com/watch?v=qa1OXssGBHw)
wow that was so simple. Never though that brackets would really change anything
Need someone to make the landing page / website?
It is a much worse problem in JS-land because NPM packages have so many more dependencies than in other languages and ecosystems. If I install a Chrome extension it doesn't automatically install 30 others.
Revoking the tokens wouldn't solve the problem either because the infected packages would just steal the new tokens...
My dev teams all use automated CI pipelines, so no, they wouldn't catch this. Who looks at their packages manually every single deployment? We deploy 2-3 times EVERY DAY. We have over 100 packages in one of our large apps. Not even remotely possible.
haha well of course we will have to have an ICO to fund this whole endeavor! Beercoin it is!
:) Any reason you're using pastebin over something like [https://repl.it/](https://repl.it/)?
Then pin the version? If you just let arbitrary updates and code run then you don't _really_ care about security.
Which other languages would it be good to have some fundamental familiarity with?
What kind language are they looking for usually?
Could you ask her for any tips on how to get hired with 6 figure salary?
She's sitting next to me so here's what I got: Focus on your own projects while you're learning. Interviewers love passion. Apply to a lot of reputable software companies and ask for feedback from all your interviewers. Your first interviews are going to suck. When you find out what they think you're missing, learn it for the next interview. Network at meetups, a direct referral goes a long way. I got lucky with referrals and lessons from great developers (the owner of this account is pretty awesome). Don't let that discourage you, be open to freelance work while you're looking but NEVER work for free. You might as well have a passion project if you are and they make the worst clients.
doing server side stuff like connecting to a database for example
I always recommend some C or C++ to learn how memory works (makes you a better programmer in every language). Otherwise just go for some of the more popular languages. If you want to freelance then PHP is the number one language, Java is incredibly popular in the business sector and Python is my personal fav. don't be afraid to spend a weekend trying out languages, a weekend doing a Django, ASP.NET or Java-Spring project gives you so much insight into different approaches to application development. What you should be "focusing on" instead of languages is stuff like common algorithms and data structures (concepts that would be applicable in all languages). if you're a complete beginner at programming I'd think Javascript is one of the better starting points out there (just keep in mind to expand your horizon as you get comfortable)
You can connect to a db with Node.
Oh yeah, I'm not saying replace one with the other, but it's nice additional security. Scripts to steal a gpg key are harder to write than simply exfiltrating .npmrc
Realistically what kinds of things would you scrape a website for? There’s so many scraping tools out there for both JavaScript and Python so it must be useful but I can’t figure out how. 
Without signed packages eventually you will run into security issues once you do update, and it'll be the same, your team won't be able to inspect the entire node_modules folder for leaks. es-list is part of webpack and other tools, good luck sifting through their source-code?
Same. Amazon let me off a few grand too, but that was the day I discovered you don't push your AWS root key to GitHub
data from a table that isn't present in an api and is hidden behind a paywall
I have no experience with SSR but context alone with redux semantics isn't that hard: https://codesandbox.io/s/52jv4pw3rn
&gt; NOTE: I am learning, just started actually Note that for this is not the appropriate subreddit to use for this intention. You should go instead to /r/LearnJavascript which is focused on learning and helping people learn Javascript.
I know that tensor flow is more recently supported in JS but it runs better and has GPU support in other languages
Http/2 SSE is the modern alternative for WebSockets. https://streamdata.io/blog/push-sse-vs-websockets/ you can find more details there. 
I think we are at a point where if such measures were to be implemented overnight, we could easily end up with broken code on a lot of production environments 
2FA can be easily exploited by having the carrier point your number to another SIM card. It’s happened before numerous times. So even if you’re the smartest genius in the world, there’s nothing you can do if your phone carrier’s customer service rep isn’t following proper protocol. 
Find it in a rainforest.
Were you able to track down which atom extension? Btw I highly suggest switching to using Webstorm. It’s a much better fully integrated IDE. 
Well technically if your node dependencies is compromised, they can just easily steal your creds by accessing process.env
Guys let’s really do this. Make a statement 
Why, again, is Unix ideology supposed to be worshipped? Also the architectural level of Unix's modularity is far below JS's.
What is with this false dichotomy? Other services are and have been secured without the need for devs to pay. Reasonable security should be the default, not a tacked-on premium feature. 
It really isn't about what can and can't be done. It's more about what kind of hoops you have to jump through. Javascript excels at event-driven programming, but falls down when you need to spread your processing across multiple CPU cores. It can be done, but it's not easy. Easier in Python or Ruby, easier still in Java, easiest in languages designed to operate that way like Go. As said above, on the other hand, if you're dealing with something where event-driven programming would be beneficial, that tends to be easier in Javascript than in the other mentioned languages because Javascript has always been asynchronous and event driven. There are very few Javascript packages on NPM that can't be used in an asynchronous manner. However, that isn't to say that Javascript is unmatched when it comes to asynchronous or event driven code.
at least running `npm audit` helps somewhat. 
It's almost like you should read the rest of the Twitter thread How is yarn supposed to fix those problems when they don't and cannot control the repository? 
I don't pay for npm. Do you?
you don't need to use npm's servers-just download everything straight from github and put it in your node_modules :D
[removed]
Well, that isn't _entirely_ wrong. At least they're getting the "JS &gt; PHP" part right.
But how am I supposed to know if a number is odd without a library? And then what about even? If I don't have another library for that, I'll never be able to tell if a number is even!!!
Thanks for the feedback. I’ll add some spacing in the helper file. And yes, I usually just like knowing explicitly which files are available from another module :)
 **Ruby**: As a descendant of Smalltalk, the level of metaprogramming you can get to with Ruby is beyond what you can do with JS. It can be a fucking cannon to blast not just your foot but your entire damn lower half off with though. An example that's pretty trivial with Ruby but impossible with JS is grabbing a list of all the classes that extend a given class. **Java** Java can enforce type safety in a way that JS can't. Inb4 TypeScript: TS' type info is erased at runtime. Java is also faster (a *lot* faster in some cases), so there'll inevitably be contexts where you can use it but not JS. E.g. some real time applications probably.
What on earth are you on about
Or in a mine
Oh I agree, I'm not saying we don't need signed packages. I'm just merely bringing up that if you don't inspect or use a source which inspects packages for vulnerabilities then you can't claim it's secure, even if they _are_ signed. You'd need to have signed packages and an audit of the changes.
How is it a great point though? Maybe it's just me but I don't see rapid evolution as a plus in and of itself. In fact one could argue that if you had that much room to evolve so much in such a short time then you must have started out as shit. Also Swift started from scratch less than five years ago and is honestly already a much more pleasant language to work with than JS, syntax and semantics wise. Kotlin and Rust about seven years ago and have come *very* far. 
I tought it was `^ver`? I manully set mine to tilde, but I guess they've changed it. Agreed though, it should really default to fixed versioning.
http://shapesmania.com/blog
They can't?? The problem is the npm registry which is private and closed source.
I dont even consider SMS as 2FA. An mobile app with generates time based tokens is 2FA for me.
Webpack depends on it
Have you ever seen Linux? Have you ever seen apt?
Anything securely server-side.
I'm aware. But if most of the issues are with the repo and not with the client why aren't they working to replace the repo? Fragmentation aside, it seems like it would be worth it.
Not securely, see the latest NPM clusterfuck for details.
I'm aware. The repo is not magic and if anyone wanted to replicate it would probably not be that hard (although it'd require a good CDN). So why not try to replace the obviously most broken part?
Writing a command line tool and hosting and maintaining a repository of hundreds of thousands of packages with millions and millions of daily downloads are two very different undertakings. And of course it seems like it would be worth it once you sweep aside literally the biggest problem with it. 
Can you elaborate?
I like the new unknown type 
NPM need 2FA for commit change
http://surge.sh is the most minimal of them all, custom domain, fast deploys from CLI, almost no registration ;)
https://twitter.com/mattyven/status/1017548131158888449?s=21
https://twitter.com/mattyven/status/1017548131158888449?s=21
Or in an Indiana Jones movie.
No, no, no. When in AWS, please use Secrets Manager.
The app probably uses wk web kit view which may not allow it. Or uiwebkitview.
Right and the original commenter is suggesting that perhaps that method could have been used originally to get the eslint developer’s key. At which point they’d be able to upload their code to the eslint dep.
Lol, I go grep your node_modules folder for `eval(` and weep
We do pinning with lock files in our Production environments. Don't be ridiculous.
No, it didn't. It just linked [this blog post](https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5) which implies the ESLint package itself used a nano package that was compromised, not that an ESLint dev got compromised by some other package. I agree with what you said being a possibility. But that isn't what the comment implied, and also isn't what the virus is doing-- the virus is affecting devs, instead of end users.
Npm isn’t Node and you don’t have to use it to build a backend.
* [Use tail recursion without growing the stack](https://github.com/tc39/proposal-ptc-syntax/issues/22). * [Represent file inodes on Windows with the Number type](https://github.com/nodejs/node/issues/12115).
JS doesn’t have classes so that’s why it would be impossible but you can most certainly look up the prototype chain which is essentially the JS way of looking at what objects are linked together. I’m also interested in where you got the data for Java being a lot faster because JS gets compiled down to machine code where as Java is bytecode. You’re probably right just wondering if that was speculation.
That blog post was made months ago before any of this happened. I firmly believe that /u/softgrey was just suggesting that it was possible that a similar vector could have been used to get the eslint developer’s npm key which then could have been used to publish the compromised update to eslint-scope. I’m not say that that is _for sure_ what happened, just that it’s possibility.
I'd start by learning about Big O notation. Then you will have an good understanding of how algorithms are classified. Most likely, a job in node will not require you to right highly difficult algorithms. Libraries and node itself will take care of that. That's not to say that you won't come up with your own in the course of solving problems. So, I'd focus more on problem solving. So, to actually answer your question, I don't think there are any that you MUST know. For interviewing at certain places it might be good to know some. Sorts are always popular. It's more likely that you'll be asked to solve problems. Some may be real-world but most probably won't. Some place like CodeWars and their JavaScript Katas can help prepare you. Also, it's fun. 
Big Integer arithmetic. You can fake it with string formatting, but at that point you might as well just use Python.
Yeah, and that could be exactly what he meant. But [this guy](https://www.reddit.com/r/javascript/comments/8y9r87/_/e29f600) took it the "es lint has compromised dependency" way, which I'm saying didn't happen. Sure, a similar vector could have been used to get the eslint dev key. But this did not start with an eslint dependency being compromised.
&gt; you don’t have to use it to build a backend. The question asked was what can you NOT do with javascript. Answer: Secure backend scripting.
I had the same question a few weeks ago. I'm out right now but I'll see if I can find a few articles / videos I used. This might not lead anywhere but I remember looking up crossfilter2 was mildly more useful. 
I am kind of hopeing that wasm stops JavaScripts monopoly of the web from getting too strong. I would like more variety in the technologies used on the web.
I’m ok with JavaScript, but I’m not convinced on using it as a server technology. It amazes me when people advocate separation of concern but are so quick to use front end tech for back end processes.
Is node.js not secure?
But don't you think that with async and having same language in both front end makes the life of full stack developer easier? Also the libraries have matured quite a bit from it's humble start in 2009. 
The amusing/scary part is that the original reporter only discovered this because the code threw a visible exception because it was so badly written. I won't go into details (just in case it proves to be an instruction manual for somebody), but those familiar with Node should be able to see look at the code that attempts to retrieve and execute the pastebin, and see two major mistakes.
Data structures and algorithms are closely linked. Every computer scientist should know at least the following: Data structures: Stacks, queues, linked list, arrays, trees, hash table, map, ordered maps, dictionaries, binary seach tree, AVL trees, graph, directed graph Algorithms: Merge sort, quick sort, bucket sort, radix sort, depth first search, breadth first search, shortest path
Which is incorrect if the issue is with NPM. Answer: Because you don't need NPM to do backend scripting. 
Node is, the user is conflating NPM with Node. Check the comment that is hidden because of the down votes.
Data structures and algorithms are closely linked. Every computer scientist should know at least the following: Data structures: Stacks, queues, linked list, arrays, trees, priority queues, heaps, maps, ordered maps, dictionaries, binary seach trees, AVL trees, graph, directed graphs Algorithms: Merge sort, quick sort, bucket sort, radix sort, depth first search, breadth first search, Dijkstra’s algorithm, Bellman-Ford algorithm (this one isn't necessary but good to know)
Not at all. I don’t believe in bending a server to your will because you don’t know the server languages. If you’re forcing a server to use a front end tech then you’re not technically a full stack developer. Full stack means knowing both front and back end and when to use them appropriately. To each their own though. Ultimately, if your code works in a way that’s not detrimental to the goal of the project then there’s no right or wrong way to do it.
I don't think the separation of concerns that programmers talk about lend itself to this line of thinking. JavaScript is used in the front end yes, but according to the spec it's a general purpose programming language. So thinking that using the same language for the front and the back end automatically nulls a separation of concerns doesn't really make sense. MVC, MVVM, things of that nature are a separation of concerns and really have nothing to do with what language you use to implement the pattern.
JavaScript obviously isn't disappearing from the front end any time soon, so it will just continue to grow as the community expands more and more on that side of things. As for the back end, I really think Node is being used a little too liberally. It's nice that a front end dev can easily write a full application with a single language but I think Node is better suited to small microservices and for whipping up a quick script here and there. I'm honestly surprised the amount of companies, especially large scale enterprise companies, that are using Node as their main backend, or at least playing a large role in the backend. Where I'm from the list of companies that are using Node is just endless right now. You search for web dev roles here and a REALLY solid chunk of them will be node shops.
Then you wouldn't have been affected by this particular incident? 
Fair enough but JavaScript is not designed for computational power, vs php, python, etc. Like I said though, if it works then use it, but personally I would never use JavaScript to interact directly with a database and mutate the results before rendering it to the user.
Node lacks in terms of processes that are cpu intensive so i agree with you there and would definitely suggest using a compiled language for that instead of JS, but for front end developers Node is the easiest way to full stack.
True that ... I have heard that the scalability of node is quite good and with good serverless microservice architecture it is becoming favorite of startups. I was surprised to hear Netflix using it .
If you want to be front end then be front end. There’s nothing wrong with it, but if you want to do back end too then why wouldn’t you want to learn the best tools for the job? That’s all I’m saying. Why be a master of one when you can be a master of all? :) All languages use the same logic, they just word it differently and are built for specific processes which make them all better/faster at different things. I see it all the time on here. Which language should I learn? Learn them all, because there is no one size fits all in web tech. The right tool for the right job will always be the best way to go. 
What makes PHP or Python designed for computational power that is missing from JavaScript? What makes interacting with a database in JavaScript a bad idea?
If your main service is I/O bound and not CPU bound then it can be a good fit. Many types of work are I/O bound and so Node is a popular tool...
It doesn’t really matter to me at all if JavaScript is the fastest growing language. It’s about picking the right tool for the job rather than choosing based on popular trends.
The thing is Node is actually really good at certain things, and in those cases IS the best tool for the job whether one thinks JS should be allowed to be in the backend or not. I think most people in the software development sphere subscribe to the idea that you can be a jack of all trades or a master of a few things but certainly not all. All languages do essentially use the same logic but all languages are incredibly nuanced and there is more to actually using the language than just logic. I definitely would not to suggest to someone who has a clear idea of what they want to do to learn all the languages. If they want to do front end, learn the front end languages with the most documentation for the use cases that fit your needs. JS and the most popular languages that compile to JS would be a good start. If you want to do Data Science Python, R, etc.. If you have a bunch of time and your rich and aren't wanting to learn to program to get a job then sure, definitely learn all the languages, but I rarely see that type of poster. In the end I agree the right tool for the right job which definitely means do not learn all the languages because most people are going to be building things in a particular sub-field and you can most certainly tumble down the rabbit hole of programming languages. 
I totally understand that . Some prefer a scalpel some prefer a hammer. Just like there is no one tool to do a mechanical job why should there be one for computer and electronics. But the question is does node has the potential to beat the likes of java, C/C++ or php ? 
I wasn’t referring to his comment so I guess we’re both arguing about different things, though we seem to agree on the main point, so... high five? ✋
Same. It'll be nice having a [top type](https://github.com/Microsoft/TypeScript/pull/24439) that's type safe.
In what way?
Those are really just opinions. JS can most certainly interact with a database. Python is notoriously slow so I don't think it is designed for computational power at all. As far as PHP is concerned Node is much faster as well. Some people just really don't like JS and that's okay, but regardless it's a very powerful language and yet isn't perfect either.
I think you can just do sms:&lt;number&gt;
In my experience I have never had JavaScript process a database query result faster than php. 
Just to add on to this, big companies use Node so the idea that it's just for small projects is really just the programmer saying that stuff not liking the language. Node is the best tool for some jobs and not for others. 
✋
This is a good place to start, it's not about querying a database but just raw performance in general between the two. [https://www.hostingadvice.com/blog/comparing-node-js-vs-php-performance/](https://www.hostingadvice.com/blog/comparing-node-js-vs-php-performance/)
And how am I supposed to capitalize the first letter of a string without importing lodash?
that works on iOS but on macOS it just opens messenger and doesnt even prefill the number.
I should have specified. Yes, I/O work is definitely where it shines.
Easy there, Satan.
I don’t necessarily disagree with you but benchmarks of this nature are only as good as the server config. Any server in the right hands can be optimized for any given language. Maybe I’m just old school where I want a server language to process the request/data and then a front end language to handle the display. :) It’s worked well for me for 20 years and I’ve never had a problem. Not to say that if node reaches a point where it surpasses my expectations I wouldn’t switch to it, but I don’t think it’s there yet.
I agree completely and the link I provided says that the php has to be configured really well in order to reach those levels I believe. If php is working for you there really is no need to switch and most people aren't really working in a place where they have to change an entire back end to squeeze out every bit of performance any way. If I had my way I'd write every server in C as it was my first language.
I'm the author of linked thread. Please support (thumbs up) if you find the proposal useful
The tuple changes are quite welcome... I am ashamed to have spent much time doing ungodly regex to build out those templated overload type signatures
From the post mortem &gt; The maintainer whose account was compromised had reused their npm password on several other sites and did not have two-factor authentication enabled on their npm account. So this was unfortunately pure stupidity. (Not saying the maintainer as a whole is an idiot, he just did this horrendously stupid thing).
Looks neat, but... &gt; without then or await Immediately, your example uses await; const value = await proxymise(foo).bar().baz().qux; Still a neat concept.
&gt; JS doesn’t have classes JS does [have](https://www.reddit.com/r/javascript/comments/8q6267/why_are_js_classes_not_real_classes/)^1 [classes](https://www.reddit.com/r/javascript/comments/8q6267/why_are_js_classes_not_real_classes/e0hpelg/)^2 . &gt; you can most certainly look up the prototype chain which is essentially the JS way of looking at what objects are linked together. filleduchaos described a lookup going the other direction. In JS, you can ask an object "what's your prototype," but you cannot ask an object, "what other objects out there point to you as a prototype." In other words, you can follow the chain from child to parent, but there's nothing to follow from the parent to all its children. &gt; JS gets compiled down to machine code where as Java is bytecode. Java also gets compiled down to machine code. The difference is JS is JIT compiled from source to machine code, and Java is JIT compiled from bytecode to machine code. I googled for java vs javascript performance, limited to within the past year, and [found this](https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/javascript.html).
I upvote because I like the concept, but what scenario would an asynchronous request yield an object with an asynchronous method?
From the post mortem &gt; The maintainer whose account was compromised had reused their npm password on several other sites and did not have two-factor authentication enabled on their npm account. So this was unfortunately pure stupidity. (Not saying the maintainer as a whole is an idiot, he just did this horrendously stupid thing).
\`const buf = await (await fetch('https://example.com')).arrayBuffer()\`
How would that help?
Exactly, it is like a custom designed NPM according to the companies needs.
If the attaxker knew how to properly wrangle node http responses this would've last much longer. A premature eval on an incomplete external script caused the syntax error that someone noticed. Yikes
NPM is not uniquely vulnerable. Any package manager of any language can be attacked in exactly the same way. Python, for example, has also had [similar issues](https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/) before.
JS is fast non blocking IO. It still run on vm written in C++ and can't handle cpu intensive tasks. Why should it beat anything? It have it's own applicatios, but so do Java, C and PHP.
I'm more scared about the cause. It was password reuse. The top rules of passwords are * making them strong enough (bits of entropy, less dictionary, more variety) * do not share when important (including re-use) * "if you liked it, then you should have put a ring on it", as in, some form of extra security (2FA). I can understand the third not being done. I assume the first was done. But of all things for the second not to be done, it's like all the people who are screaming at how important security is as well as people who should be in such a field are hypocrites. Sure, people can make mistakes, even incredulously stupid ones. But when such mistakes are made there needs to be some serious discussion internally on how to prevent a second occurrence.
Have you checked out WASM (WebAssembly)? I do not use JS in the Back-end. It's a cluster-f@#$.
You should be okay if you locked your packages
This makes zero sense.
Could you give me some examples of course intensive tasks ?I can think of gaming but I would be surprised if gamers building games in anything other than C. Haven't heard of a game even using Java. Can you give some more examples please?
Ditto `.rss`, but mostly for feed reader purposes.
I had not checked it out but thank you for introducing me to it. TIL wasm
Shrug. If you want server-side scalability, it's typically easier and more resilient to throw more hosts into the problem rather than spending an enormous amount of effort trying to micro-optimize at the language level. And regardless, I would argue that there's a lot more resources being poured into Javascript performance than Python (e.g. continuous work on V8 JIT, the web assembly efforts, etc). Node is not too shabby in other fronts either: you can get good debugger integration w/ VSCode/Chrome Inspector, you can get a gradual type system with Typescript/Flow, you can get hot module reloading in development mode, you can have an isomorphic/universal code architecture to reduce time-to-first-paint in complex UIs, you have more options for E2E testing than other stacks. Sure there will always be cases where you have to use Java because you want a specific GC profile or whatever, but for a lot of things, the heavy lifting is mostly done by specialized systems like Redis/ElasticSearch/RabbitMQ/etc and server languages are pretty much interchangeable.
Funny, that I regularly see ad on Reddit about "learn how to build games in JavaScript". One thing I can think right now is data analysis. But, in general, anything what blocks your single thread can be that last nail that will crash your app.
I know right, JavaScript is a cluster-f#$\*; Especially in the back-end, bugs are easy to miss.
I was thinking the same. Data analysis and technologies like machine learning/AI/cvip are things which perhaps won't use js but then nobody build them in js . There is Matlab and r for those purposes. 
This is what I use for testing: https://yesno.wtf/api
Reddit posts are not an official source. JavaScript does NOT have classes. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) Please do not further this idea because it is dead wrong. Java has classes and JS does not. You also can most certainly look in the other direction. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) It terms of the Node vs Java, Node blows Java out of the water if we are talking about I/0 no questions. If it's about computational tasks Node is not faster the Java, but if I was doing heavy computations I wouldn't even pick Java. Other sources from the last couple months if the bleeding edge is what you seek: [https://www.tandemseven.com/blog/performance-java-vs-node/](https://www.tandemseven.com/blog/performance-java-vs-node/) [https://rclayton.silvrback.com/speaking-intelligently-about-java-vs-node-performance](https://rclayton.silvrback.com/speaking-intelligently-about-java-vs-node-performance)
Ryan Dahl revealed the potential of maliciousness via eslint in a [recent video](https://www.youtube.com/watch?v=M3BM9TB-8yA&amp;t=6m32s).
I have never found static local variables to be useful after more than a decade of writing C++ and I don’t find the provided examples to be compelling. For example, the regex should just be moved out of the class since it doesn’t relate to any of that class’s members and the error count should be a member of the class because it’s data the class is tracking. If it’s data that all instances are tracking then it should be moved out of the class. Static locals that change tend to make code much more difficult to test and understand because they break referential transparency. [Take `strtok` as a well known case of how this feature breaks things](https://stackoverflow.com/questions/44336831/why-should-strtok-be-deprecated).
Well, those were just examples to get a point across. As for "the regex should just be moved out of the class", it's needed **in** the checkURI method and that's where it belongs. Where do you suggest to move it instead? Top-level scope? Imagine someone looking at code, which case makes the code easier to reason about? variables declared 10 lightyears away from where they are being used or right next to it? How would you go about solving that scenario? 
Following along with what DuckDesk said, I highly recommend [itsy-bitsy-data-structures](https://github.com/jamiebuilds/itsy-bitsy-data-structures/blob/master/itsy-bitsy-data-structures.js). It's very readable and you can get through it in about 30 minutes.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jamiebuilds/itsy-bitsy-data-structures/.../**itsy-bitsy-data-structures.js** (master → 954e7d2)](https://github.com/jamiebuilds/itsy-bitsy-data-structures/blob/954e7d2faf2dbd5c8710aa03812f10f4bf0e3abf/itsy-bitsy-data-structures.js) ---- 
Is the stupid part the reusing of the password or not using two-factor authentication? 
It's ok, but how do you could prevent from internal dependencies which could be compromised? 
You cannot talk about "computational power" and compare JS to the likes of php, python, or any other interpreted language for that matter in the same sentence without coming of as ignorant, to say the least. Node.js runs on V8, which is by far the most advanced interpreter out there(because of the amount of work that has gone into it). V8 blows away all other scripting languages when it comes to performance. Combine that with async-IO and you have a very efficient server side tech. Only compiled languages are able to beat Node.js when it comes to performance. But if you go with them, you are giving away the flexibility that scripting languages provide.
Great idea, Also, even from X downloads a month might require two or more developers to publish new package
Password reuse. I can understand not using 2fa, many people don't if they just don't care about the account or think the password is secure enough. But password reuse is just silly.
What a neat simple site. Love it 
What is a smart way to handle passwords? I have about 3 passwords I use - the one I've been using the longest recently got compromised though they didn't manage to cause much trouble - they got into my Netflix and replaced all the default accounts with Spanish people, and attempted to get into my Steam account multiple times. They would probably have access to a load of dead forums and maybe Reddit as well. I've been rattling my brain over how it happened - this is the first time I can recall it happening in over 15 years of internet usage. Normally if you are tech-savvy and take a bit of care, it's very easy to avoid becoming compromised, form my experience.
What is this supposed to do? function a() { return function b() { static let x = 0; console.log(++x) } } a()() // 1 a()() // 1 or 2? why? 
Like /u/MoTTs_ has pointed out I was talking about a descendant lookup, not an ancestor lookup (which is what you get with looking up the prototype chain). Imagine being able to look *down* the prototype chain to list every object type that uses a given object as its prototype. As for the rest of your comment it honestly sounds a lot like you've never written Java and/or just don't know much about compilation in general. Like...what exactly do you think Java bytecode is or how do you think it runs? Java bytecode has been JIT compiled to machine code for ages. And unlike V8, the JVM has the advantage of directly working with an intermediate representation, skipping the headache of lexical, syntactical and semantical analysis because it's already been done ahead of time. As for speed, it's really not a contest. While the JVM is very cranky and needs several seconds of warmup to really get in gear (which makes microbenchmarks like the one you linked a bit useless for judging its performance), Java manages to beat out *C++* in quite a few non-contrived, non-trivial contexts. This idea of Java being a slow language is something I mostly find in web devs whose only exposure to it is bloated, honestly badly written frameworks like Spring. Even with web servers, where lots of people claim that NodeJS is superior because something something nonblocking I/O (as if `java.nio` doesn't exist), [Java still leaves JS behind](https://www.techempower.com/benchmarks/#section=data-r16&amp;hw=ph&amp;test=json&amp;l=hra073). Look at how far down in each section you have to go to reach the first JS server, and how much further down you'd need to go to reach popular frameworks like Express. And beyond (user-facing?) web dev, Java powers some truly monstrous (in terms of size/scale) projects. Hadoop (and HBase) for example is written in Java, most of Google's products are written in Java and/or C++, Lucene (the full-text search engine that powers Elasticsearch and others), Kafka, Cassandra...
Password manager, free or paid. I prefer keepass. The more important the account, the more often the password is changed
&gt; Reddit posts are not an official source. The second link in my reply, though a Reddit post, was written by one of the ecmascript spec editors. 
You seem quite clued-up, cheers. Do you think there is a need to re-think the way we handle security online? Having multiple passwords which regularly need changing seem like a symptom of a chaotic mess.
I'm assuming that npm can detect all infected packages and unpublish them before revoking all tokens?
Well its holiday season, people tend to work less.
Yes, I meant without continuously having to repeat `then`/`await` for intermediate calls.
Nice work! I can really see something like this catching on, or even being added to the language itself. The introduction of Proxies has added some really cool capabilities to JS. Was there anything that inspired you to make this? Reminds me a bit of the null propagation operator/optional chaining proposal. https://github.com/tc39/proposal-optional-chaining
Thanks. I've updated the [fetch example test](https://github.com/kozhevnikov/proxymise/blob/master/test/fetch.test.js) to include non-proxymised version for comparison. const value = await fetch(url).json().foo.bar; // vs const response = await fetch2(url); const json = await response.json(); const value = json.foo.bar; 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kozhevnikov/proxymise/.../**fetch.test.js** (master → 42883bb)](https://github.com/kozhevnikov/proxymise/blob/42883bb2136632699ac53e424c8902261d5fbb47/test/fetch.test.js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e2b18ya.)
I might be wrong, but I believe that specifying the exact version also specifies dependencies that it installs (as the package.json of that library will be specific to that version). I would say that this is a case of "If it's not broken, don't fix it" - if there's no vulnerabilities with a package and it provides the features you need, then there's very little reason to update.
Thanks! I'm originally a QA and I like my [Page Objects](https://martinfowler.com/bliki/PageObject.html) to [return themselves](https://github.com/kozhevnikov/proxymise/blob/master/test/selenium.test.js#L44) so I can chain the actions, but with async methods (which are literally every method in [WebDriverJS](https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs)) it was impossible due to them returning promises.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kozhevnikov/proxymise/.../**selenium.test.js#L44** (master → 42883bb)](https://github.com/kozhevnikov/proxymise/blob/42883bb2136632699ac53e424c8902261d5fbb47/test/selenium.test.js#L44) ---- 
What version of JS are we talking about? ES5 and prior? Then yes, I think it's a cluster fck and I hate it. New JS (ES6 and beyond) are quite nice. I hated JS until I started experimenting with TypeScript and the latest JS features while completely abandoning ES5. I especially love arrow functions and the new scoping that let and const bring. TypeScript has actually become my favourite language recently, then again, I have only been programming for about 2 years now.
Holy shit if somebody makes a parser that uses this method then they could make a reddit client! If you actually see the json data you can see the posts! Though it doesn’t work in all communities.
Yeah, code from VBScript will see functions defined in JScript and vice versa. Just make sure not to try to write a function in both languages - e.g. open function in one language and write code inside in another language. 
Well if you really want to be secure then get a YubiKey. Even better than an app based key gen 
As far as my proposal goes, the behavior is 1:1 identical as: ```javascript let a = () =&gt; { return (() =&gt; { let x = 0 return () =&gt; { console.log(x) } })() } ``` Quoted from original post: &gt; in-memory lifetime as long as containing scope i.e the function itself i.e statics get garbage collected along with their parent function. AFAIK, your scenario is a rare one, but regardless, `x` will keep incrementing if you store return value (the inner function) of `a` in a variable and call that one instead. Or you can change `return function b() {` to `return static function b() {`
Evan and the team are probably focusing more on different parts of the vue ecosystem right now. [vue-cli@3.0](https://github.com/vuejs/vue-cli) has had a lot of progress in the last weeks and is close to a release.
'let' and 'const' are a major improvement to JavaScript. Arrow functions as well. But it's just another layer of icing on the cake. I can't bring myself to like it. I would rather use another subset of it. I haven't tried TypeScript but I absolutely love PureScript. I like that it's based off of Haskell and it's type system. I've been programming for about 4 years and I have not found another language as horrible as JavaScript.
Not sure if it's fixed yet, but you can add a git+ URL to your packages.json but the problem is any time you npm install a normal package it'll wipe out the git package. The fix is to always npm install your git package after you've npm installed another package, or just npm installed. That being said, it has nothing to do with your joke other than it's very annoying to deal with git packages because of this long-time bug.
The other side of the coin is “Vue is amazingly stable! Nothing like the React shitshow that needs hundreds of fixes”. 
[VueJS Roadmap](https://github.com/vuejs/roadmap) should you be wondering what they are doing.
[Simple API mocker](https://oygen87.github.io/ezmock/) I made this a while a go to use for testing and while developing. You get your own endpoint and choose what to respond. (JSON)
Vue CLI was supposed to be released almost a month ago (on some conference, Evan said that it will be in RC for a week only - [https://github.com/vuejs/vue-cli/releases](https://github.com/vuejs/vue-cli/releases))
Umm, isn’t that why OP said “great for prototyping”? You can make a Reddit reader, of course. But this API probably lacks any way to do authentication and more complicated things like that. Reddit DO have an official API anyway. I guess this way is just nice to play around with. 
More code means more bugs. Our job is to put little code in as possible.
That's unfortunate, I personally love syntax sugar. It makes stuff easier and more readable for me. The worst language I have encountered is PHP (v5.6 &amp; 7), I don't know how it compares to its older versions though. I dislike it because it just feels hella dirty and outdated. The only good experience I have had with it was with Laravel. I actually enjoy writing PHP in that framework. I haven't heard of PureScript, I'll have to go check that out because it sounds interesting.
Nice...
that's why you use typescript, not JS. With TS it's actually quite awesome. Haven't seen a runtime type error for quite some time now.
And adding .compact to all URLs gives you a simple, efficient, fast, and ad-free version of the site.
looks like a phone version
It is the old mobile version, yes. But it works awesome on desktop computers, too.
Both vue and angular have lots of stars, but the actual usage among devs is nerfed in contrast to react. Most jobs are also react jobs. Vue is this framework that is very popular, yet is actually not that much used compared to react.
\*JavaScript does not belong on the back-end.\*
Either there are certain geographical bubbles where this is the case, or React developers like to make their framework seem more popular than it is. In my area there aren't that many React jobs. There are at least as many Vue jobs. And Angular is actually the most popular of the data-binding frameworks. 
In future, you can just prevent NPM/yarn from installing the bad version by putting a resolution in your package.json, locks down the version that your project and its dependencies installs.
Also https://apiary.io is great for prototyping and defining endpoints and mock data between backend and frontend. 
I assumed /u/GoDzM4TT3O was sarcastic.
My all time favorite to test GET is http://api.icndb.com/jokes/random It returns a random Chuck Norris joke 
Well done.
the function in functional doesn't mean function
i think this is great, i can imagine this as a GitHub repository with simplest single file implementations demonstrating al frameworks, maybe even all languages. It would be a great forum for discussing best practises, keeping the examples up to date with pull requests, etc. One thing i really think we need (this isn't a criticism of the post) is to move beyond todo lists and shit and have real world examples, or at least collectively move from the the todo list, to the simplest example we can think of that demonstrates the real world complexity you always encounter (ie at least some asynchrony) and error handling.
Have a look here: https://www.hntrends.com/2018/jun-no-signs-of-slowing-for-react.html?compare1=Vue&amp;compare2=React&amp;compare3=AngularJS&amp;compare4= 
It was a joke, but they are more corporate and security minded and would take these issues more seriously. 
Oh okay. But you never know how things can turn.
Even with control of the servers, they couldn't change anything unless 100% of the open source community followed suit. Require packages in yarn be signed and submitted with MFA. OK. Now I submit coolpackage20.js and it meets their requirements. But in my own package.json, I pull eslint from npm and we're back to square one. Imagine forcing signing and then having webpack offline until every single thing it touches also signs their packages.
I loved the name, but I was hoping it was an API for bees.
Wait, joking aside, why do you say it doesn't work in all communities?
Here there is a list of FP learning resources: [https://github.com/stoeffel/awesome-fp-js](https://github.com/stoeffel/awesome-fp-js)
Looks interesting. What happens something throws error?
Thanks for the tip. Inspired me to fiddle around a bit with Promises on node.js So in case anyone needs a shitload of Chuck Norris jokes that he/she wants to retrieve asynchronously with node.js .... Here you go `const request = require('request');` `let jokeList = [];` `requestJokes(5)` `function requestJokes(numberOfJokes) {` `let listOfPromises = []` `for (let x = 1; x &lt; numberOfJokes; x++) {` `listOfPromises.push(requestJoke())` `}` `Promise.all(listOfPromises).then(() =&gt; {` `console.log(jokeList)` `})` `.catch((err) =&gt;{` `console.log(err)` `})` `}` `function requestJoke() {` `return new Promise((resolve, reject) =&gt; {` `request('http://api.icndb.com/jokes/random', function (error, res, body) {` `if (error) {` `reject(error)` `}` `else{` `jokeList.push(JSON.parse(body).value.joke)` `resolve()` `}` `})` `});` `}`
Stars and commits don't mean anything but npm stats on the other hand do (11.4 millions downloads/month against 1.4). And that's just the way it is. Considering that both have almost the same age React did grow exponentially bigger, but Vue still has found its niche as it attracts Angular 1.x developers, newcomers and html-centric developers in general, and that's good for all. Both seem to fulfil different purposes. React broke new ground and does that still today (scheduling, async rendering, suspense, reconciler and pluggable renderers bringing React everywhere, css innovation, etc). At the same time it's an extremely clever piece of technology that can stand on its own without being dependent on browsers and specs any longer. The community is also constantly innovating. Vue on the other hand caters to an older approach that many developers like, it benefits from React internally but coats it in something that is more familiar to Angular developers. It's way too big at this point to go under (more or less the same size than Angular 1.x), so i wouldn't worry about anything and just use it if you like templates.
As far as I can tell, this implementation is the first of its type. None of the others I could find supported indexing syntax and the full range of functionality one would expect from an array collection.
React is really popular with niche startups. The guys spending money are spending it on angular.
It works as a normal promise (proxies by design are transparent and undetectable) so it'll call the `catch` method or throw a normal error if using await. https://github.com/kozhevnikov/proxymise/blob/master/test/promise.test.js#L13
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kozhevnikov/proxymise/.../**promise.test.js#L13** (master → 42883bb)](https://github.com/kozhevnikov/proxymise/blob/42883bb2136632699ac53e424c8902261d5fbb47/test/promise.test.js#L13) ---- 
Please note this doesn't work in IE [at all](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy). They also cannot be [polyfilled](https://old.babeljs.io/learn-es2015/#proxies) or have very limited [support](https://github.com/GoogleChrome/proxy-polyfill). 
Hello there! Disclaimer: This is my blog, but I make no money from it and you can even just look at the markdown for this post on GitHub. The content is simply, but I think it would have helped demystify symbols for me had I read it previously. I rarely write anything in this format so it may read badly, constructive criticism welcome (on this or the code itself). :-) 
Both are using both. For example: * Twitch, Slack, Airbnb are using React. * Microsoft, Guardian, VMWare (even PUBG) is using Angular React can be seen more in startups tho (because its hip). Both are equally as good, both have their down/upsides.
My encore config has nothing specific to minify the output, it does include babel but as far as I remember it was doing so on production before adding it in. Here is my config for reference: Encore // The project directory where compiled assets will be stored .setOutputPath('public/build/') // The public path used by the web server to access the previous directory .setPublicPath('/build') .cleanupOutputBeforeBuild() .enableSourceMaps(!Encore.isProduction()) // Create hashed filenames (e.g. app.abc123.css) .enableVersioning(Encore.isProduction()) // Add the main app JS, the stylesheet is included there .addEntry('app', './assets/js/app.js') // Enable Vue with SASS support .enableVueLoader() .enableSassLoader() // Add babel with object spread plugin for Vuex map[State/Getters/Actions] .configureBabel(function(babelConfig) { babelConfig.plugins.push('transform-object-rest-spread'); }) .addAliases({ '@': path.resolve(__dirname, './assets/js') }) ;
This has been on github for a year now: https://github.com/zandaqo/ordino It also extends Array and supports all ES2015+ stuff. Though, I didn't write it just to have a sorted array, I needed to efficiently compare arrays to get statistics like intersection and difference, hence, how ordino came to be.
What's new * Automatic Neutralino run-time shutdown after inactive session * Basic (Token based) authorization method to protect inside Networks [Download](https://github.com/neutralinojs/neutralinojs/releases/tag/v1.0.1-alpha) v1.0.1
or, you know, just go to http://api.icndb.com/jokes/all
Games are built using all sorts of languages, to take something you probably wouldn't expect considering its not exactly knwon for performance Python is the main language used for EVE Online (MMORPG set in space).
Which would have tought me nothing about Promises :)
This looks good too! I prefer my own choices regarding API design, but if I'd been able to find it I might have used that instead of writing my own. It will probably help people to find your package if you add "sorted" to the tags, since I don't remember your package turning up in the first several pages of an npmjs.com search for "sorted array". 
instanceof doesn't look in the other direction, it looks *up* not down. 
I don't think any companies want to. While it's easier said than done, this could be a blessing in disguise. A wakeup call to everyone who grew dependant on third party modules. Make your own modules, and strip down your process.
Less commits means stability.
If it's the same API I'm thinking about, I think I used this back in the day for a pebble app. 
Sure. Let's find someone to make the wireframes / design, and I'd be happy to spend an afternoon making the site.
oh good, another one
Nice to see that you can use both objects and string styles. I use styled-components and glamorous in the same project. Will look into this for reducing the file size.
The problem is that a lot of the momentum node initially gained was because of a relatively uncomplicated setup flow with npm packages ( that npm,has it's own set of problems only occured to many much later in the process ), so it's a double edged sword.
It's time to let IE rest in peace. MobX has also dropped IE support. 
&gt; . V8 blows away all other scripting languages when it comes to performance. Combine that with async-IO and you have a very efficient server side tech. no because both PHP and Python rely heavily on C extensions for historical reasons to do anything, while node modules relies less on C or C++. You assertion is completely false. Node most popular mysql driver for instance is written in js, while PHP's written in plain C.
The same trick works with xml; e.g., [reddit.com/r/javascript.xml](https://www.reddit.com/r/javascript.xml).
After a whole day of searching for "crossfilter tutorial" and "crossfilter documentation", etc., this is the the first I've heard of crossfilter2. Even then, I can't find much about it. Something seems broken here; either me, or search engines, or open-source software development in general. In any event, [this blog post](http://animateddata.co.uk/articles/crossfilter/) is the best explanation of how to use crossfilter I can find, if anyone else comes through this thread with the same question. It doesn't really help me, though.
You can also use symbols to circumvent serialisation of a class. If its method checks that this.something is set to a symbol - then it can't have been JSON.parsed
I wish everyone could. But some still have to support it.
The OP's worry is still relevant. After all, Vue is a single developer project. If You leaves for whatever reason, the rest of the team won't be able to keep the community. Vue is not as big as Python, where the author is leaving the leadership, but the language is too big to collapse.
&gt; It's time to let IE rest in peace tell that too all the corporations and governments that still use it.
Do you read through all monitors code in your node_modules before each deployment?
I’d agree in theory, but when you have a project with tens of dependencies, and those with tens of dependencies, etc. I’d have to make my `resolutions` hundreds of lines long, which is just unmaintainable.
it definitely isnt a 1 man team anymore? Sure Evan leads it but theres an entire Vue team now. If you go back and see Reacts commit logs I guarantee the first couple years probably had similar activity, same with literally any framework out there
React and Angular are backed by huge companies. Vue is not. That's one of the reasons that many US based startups do not choose Vue.
1. CMIIW, but this wasn't a worm, since it didn't try to self replicate. It just tried to steal tokens and send them to the attacker. 2. According to Eslint's post-mortem, the token was obtained by obtaining the username and password of a maintainer, and generating a new token (the same login credentials had been used for another site that was breached). If this was the case, 2FA would have indeed prevented the original login from happening. 
So? React and Angular are several years older than Vue 2 or Vue in general. They had the exact same activity in their first couple years, I guarantee it
Congrats on learning promises! They're very powerful and very handy. Since you're learning I have a suggestion: Instead of pushing into a global array you should send the joke content in the resolve. In your promise.all.then you can take a parameter which will be a list of all the resolved values. That way you don't need an extra array saved, and nobody else could push/pop that while you're waiting for all of the promises to resolve.
Vue is split up into multiple repos, the bulk of the work is happening in vue-cli right now.
 &gt; If you’re using ESLint through Codacy, there is nothing you need to do, as Codacy does not allow tools to access the internet during execution. So it's an 8-sentence ad for Codacy.
https://youtu.be/86XVqKwpqpw That API reference you posted at first is really good once you get the concepts. This video goes through an example and explains what the methods do practically. It actually starts around 7:21 The first part is more of an intro as to what problem you want to solve. 
Thank you very much for your advice. I have now accomplished what you proposed, I am just not sure WHY exactly this is working (couldn't really find it in the documentation). Do I understand it right that when I let multiple promises be resolved with promises.all that the results of those promises (what they return in resolve()) is always put into an array which is a parameter for promises.all?
Thanks for this.
Wow yeah promise.all docs kinda suck. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all &gt; Description &gt; Fulfillment &gt; In all cases, the returned promise is fulfilled with an array containing all the values of the iterable passed as argument (also non-promise values). Really it's just what you said - you pass promise.all an array of promises to resolve and it resolves with an array of what each of those promises resolved to. 
That's great, thanks!
Next thing you should try is using async and await to handle promises easier than chaining with .then. If you change your first function to `async function requestJokes` Then instead of promise.all.then do `const jokes = await Promise.all(listOfPomises);` You can console log jokes immediately after and the awaited promise will resolve before getting to that console log. This makes handling the promises easier and keeps the code from Pyramid of Doom syndrome with chaining .then if you do nested promises.
When I'm prototyping, my go-to tool is [https://mockaroo.com/](https://mockaroo.com/) \- define a structure, say how many you want, specify data format and off you go! When I'm only doing the client part, grab a json file. I also download a sql file, so when I'm implementing the backend, I can just shove in a lot of random data which allows me to easily test.
Yeah, I would move it to the top level scope. It’s a common pattern for constants like that to be at a top level scope and it’s not difficult to scroll up once to know what it is.
&gt; Whistling into a modem lolololol
Here's this comment in json 
You could try out the [Clipboard API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API). It is fairly new and [not completely supported](https://caniuse.com/#search=Synchronous%20Clipboard%20API) in all browsers.
Next you can learn about Array.prototype.reduce
Nice stuff!
API in italian mean 'bees', probably that's the reason for that name
I've used it quite a few times in the past but everytime I have to learn it again. In the same boat with .map and foldleft and foldright. Strange black magic Btw.: Do you have a specific usage for it in mind in relation to the code I posted?
That's possibly useful, but quite confusing. IMHO it does not fit the language. IIFEs should be replaced with blocks and ideally do statements.
* do expressions
I don't know what you call it, but I have been gravitating towards a concept I call 'panels of data' to reduce endpoint sprawl. You just have a few endpoints that return basic data sets conforming to general classifications. Manipulating JSON object is pretty easy. You can splice panels together and filter them easily with Javascript. This basically can take the place of joins and wheres. You also offload a lot of work from the server to the client.
I don't know why you are asking me, because I'm nobody, but the issue isn't limited to online. There are plenty of things that people use completely insecure passwords for. Personally I think the only way to truly solve this issue is to have a service/device with as many access types as possible, that would generate, and retreive from internal stores, passwords from biometrics. But there's plenty of ethical debate on that already. I mean for fuck sake my bank pin is required to be 4 numbers.
Had to write out a better example to see how this feels. function fac(n) { static const cache = new Map() if (! cache.has(n)) { let x = 1 for (let i = n; i &gt; 0; i--) x *= i cache.set(n, x) } return cache.get(n) } Compared to: const fac = (() =&gt; { const cache = new Map() return n =&gt; { if (! cache.has(n)) { let x = 1 for (let i = n; i &gt; 0; i--) x *= i cache.set(n, x) } return cache.get(n) } } Hmm. I would probably use it, but I stand by my previous point. It is confusing. What would this do for example? let a = 1 const fn = () =&gt; { const wtf = a static let a = 2 return wtf } console.log(fn()) What do we get? 1? undefined? TypeError? What if the inner a is a var instead. Hoisting would ensure that its first call would return undefined. Nope.. This sounds like a can of worms. 
I skimmed the article, but couldn't identify the joke. There *is* a joke, right? Other than that, it helps to remember that there's a whole [CSS Object Model](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model) too.
Hey, considering no one else seems to be expressing this concern, I'm fairly confident this is a stupid question, but as someone managing JS-heavy codebases in production (like virtually everyone else here) I'm hoping someone can confirm that this is, indeed, a stupid question: Is there no concern that, at this point, stolen NPM tokens were *already* used to upload more practically malicious code to NPM packages? I know, I know -- the knee-jerk response is, "why would you ever assume all the code in all your NPM packages is 100&amp;#37; uncompromised?" I'm guessing NPM, in its audit, will check all libraries for the malicious code in question, and then inspect all the code included in updates to infected libraries since the time they were infected -- I'm just hoping someone can give me: "\*sigh\*, yes you dope, your codebases are only as unsafe as they were before this malicious code had its 5 minutes of fame"
The entire old reddit stack is an api. .json/.api is for json form, no extension is html, .json-html, .compact, .json-compact, .xml/.rss also exist. However you shouldn't use these unless you are a completely front end app acting only on user context. Even then, better to use the OAuth api.
If it's a personal project, I wouldn't worry about browser support.
https://www.coderomeos.org/select-and-copy-data-to-clipboard-using-jquery
France?
It'd take a while to scan 100% of all packages for this vulnerability and even then there may be multiple different approaches that make it harder to catch them all.
No but I don't have to, independent sources can look through and scan packages for malicious exploits.
Fair question, knowing npm they probably do not protect against this and probably won't until an exploit takes advantage of it. However this is solved with a lockfile.
Binary search can be increadibly useful. I used it for implementing auto sizing text for example.
I'm lucky that some VS Code extension forced me to install JSLint instead
Mongoose-os have been running JS on ESP32 and ESP8266 for 2 years already... And it looke like better and mature solution
jQuery
What is this black magic
Maintainers of popular NPM packages have to realize how much depends on them. ESLint Scope has 500K downloads every day... I would understand my 70 year old mother reusing a password, but it's astonishing that a developer does not have good security standards. Also, NPM, for god's sake, just fucking add 2FA. Users have been asking this for years.
Set a cookie
Pushing inside of a for loop should pretty much always get replaced with reduce or one of the functions built on top of it. In this case, you'd replace let listOfPromises = []; for (let x = 1; x &lt; numberOfJokes; x++) { listOfPromises.push(requestJoke()); } Promise.all(listOfPromises); with something like const listOfPromises = new Array(5).fill(undefined) // or .reduce((acc, x) =&gt; acc.concat(requestJoke(x)), []) .map(requestJoke); Promise.all(listOfPromises);
Using concat in a loop does O(n^2) copying
Does the returned array have the same order as the promise array? Ie. does the first element in the result array always equal the result from the first promise in the promise array?
Right, but app based is best middle ground. Buying yubikey is too much of a hassle to expect from any developer on npm.
Well, depends on what you wish to do. Mongoose-os does not provide you the full Node.JS API, so you cannot use normal npm libraries such as express or request. Why is Mongoose-os better and more mature ?
 localStorage.setItem('a', JSON.stringify(1)) JSON.parse(localStorage.getItem('a')) look at \`storage\` &gt; \`local storage\` under the \`applications\` tab in chrome's developer tools to see your value being saved
Yup
You are trying to change the value of a reference. This is not directly possible, as references are passed by-value. Instead you could pass in an object and change a property on that object. Most likely there's a better way to do what you are trying to do, since functions should (whenever possible) be side-effect free. What is your use case?
Excellent, thank you.
This is impossible. Why, is it impossible? Well, you’re effectively trying to write code at run time. What can you do instead? If you take your string argument and create an object, you can then do something like: function (str) { var myObject = {}; myObject[str] = 10; } I would be interested in understanding what you’re trying to achieve, perhaps with more context a better answer can be given. Hope this helps.
If you *must*, you can do: eval(`${variable_name} = 10`) however, idiomatic JS almost never uses eval. Instead, what if you captured all of your variables into an object, like so: const variables = {} variables["foo"] = 0 const variable_name = "foo" variables[variable_name] = 10
Thank you for the great advice. Could you tell me why this method would be preferred?
So this should be avoided?
let's say I have a function that has many local variables, let's call them &gt; &gt; var foo1 &gt; var foo2 &gt; ... &gt; var foo100 &gt; and let's say the function's argument contains a string that specifies one of these variables. Assuming that this is all local to the function, is there anyway to address the variable indicated in the string?
Would you like the package name pristine on npm? Don't know how to transfer it, but you need it more than I do! :)
can you explain why eval is frowned upon in js?
Not sure if this is what you're looking for, but you can use a hash-table to to this. var myVariables = { foo: 0 }; var variable_name = "foo"; eval(myVariables[variable_name]); // 10 But I think there is probably a much better way to do what you are trying to do (using eval is a pretty big red-flag)
NPM has 2fa according to the article? Unless I'm misunderstanding. The affected maintainer didn't turn it on.
So what's a better method? Push? Array literal with accumulator spread? I'm working on a project that creates a rather massive 2D array and performance kinda sucks.
can you explain why eval is a red flag?
It's often a potential security problem, and it's very likely to be a performance problem. Most importantly to me, however, is that the code is often difficult to follow.
I'm a bit confused on what you're trying to do. From what I gathered, you have some list of persons. With this list, you go one by one, manually creating the appropriate documents for them to sign/return. You want to automate this because it's time consuming and repetitive to do ov r and over again, correct?
Straight from (MDN)[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval] &gt;**Do not ever use eval!** eval() is a dangerous function, which executes the code it's passed with the privileges of the caller. If you run eval() with a string that could be affected by a malicious party, you may end up running malicious code on the user's machine with the permissions of your webpage / extension. More importantly, a third-party code can see the scope in which eval() was invoked, which can lead to possible attacks in ways to which the similar Function is not susceptible. eval() is also slower than the alternatives, since it has to invoke the JS interpreter, while many other constructs are optimized by modern JS engines. Additionally, modern javascript interpreters convert javascript to machine code. This means that any concept of variable naming gets obliterated. Thus, any use of eval will force the browser to do long expensive variable name lookups to figure out where the variable exists in the machine code and set it's value. Additonally, new things can be introduced to that variable through eval() such as changing the type of that variable, forcing the browser to reevaluate all of the generated machine code to compensate. However, there (thankfully) exists a very good alternative to eval: simply using window.Function. As an example of how you convert code using evil eval() to using Function(), see below.
You would use `map(requestJoke)`. You wouldn't use concat in a reduce in production because copying a native array is pretty inefficient. But it is important to know that map is just reduce with concatenation as its reducer
Google how to get the value of an input in js 
Link or it didn’t happen
Yes, but it's not required.
I know how to do that but I want to get the text from another webpage 
what did not happen?
I was going to give a response similar to hildjj so I won’t repeat it. My only question is why would you need to do this at all? What problem is this solving?
What?
Use clipboard.js
Sorry if I wasn't clear earlier. Essentially what I want to do is let the user input a link and then retrieve the text on the webpage that the link is for 
You just wouldn't use a function that copies the array as your reducer. In this case, that's `.reduce((acc, x) =&gt; (acc.push(f(x)), acc), []);`, but that's kind of hard to read so you can see why I chose to just use concat here. The better option is to use a data structure library that provides persistent data structures that behave a little nicer when you update them. Linked lists are the most basic persistent data structure, but the library I recommend (Immutable.js) uses hash array mapped tries (HAMTs) for their List type. Though if you're working with matrices (and not an array that happens to contain arrays), there are probably better approaches than throwing everything in a HAMT.
Oh you want to build a crawler 
I can't think of any package manager that requires 2fa. Optional, sure. Requires? No.
Whatever you didn’t link to. Low.js for example
I guess so. Do you have any idea how I could do it?
Well, the link to the homepage is www.lowjs.org. We‘re realising the first open source version in August. However people at JSCONF.EU got neonious one Tech Preview boards with a functioning low.js (alpha, not yet 100% Node compatible). So you can check out tweets on „neonious“ for proof low.js exists :-)
There is no good way of doing it in js you need node js and use substrings or php 
Pretty sure Greensock isn't MIT licensed: https://greensock.com/licensing
That doesn't seem like a great reason not to do it though. Imo, being the only package manager that requires 2fa is not a knock, it's a plus. Especially considering package maintainers are, by definition, technologically savvy, 2fa does not seem too burdensome to require.
Being technically savvy does not make 2fa a non annoyance, to many. Especially those in many environments trying to access something. I'll put it this way-- there's a reason why Google does not require anyone that uses their API to use 2FA. However, it should definitely be an ESLint team rule.
Running the exe starts the program (I see it in task manager), but doesn't open the browser to the page. You have to run it a second time to open it. Win 10 Peo x64 1803, Chrome 67.0.3396.99 
Theres also XML at https://www.reddit.com/r/javascript.xml
Sorry I probably worded that poorly. For each person, we need to put together a packet. In that packet are 7 separate files. Some are in word, some in excel, some in reader. Saving/printing all of those files takes very long because of the slow PCs. So I put them all into Acrobat and it works great. Problem is, it can’t be saved to the share drive as one pdf and needs to be broken back up into those other documents or I’m gettin chewed out. I tried the extract() method and it would be perfect, but I can’t make it a button or something like that. Which would be helpful since my office isn’t very tech savvy (myself included). Even if a save prompt opens for each portion, it would still be faster than what we have now. So what I have now is: `this.extractPages(0,1,”/C/blahblah.docx” “blahblahconversion”);` Over and over for each section. But it’s in a button. Is there a way to make that work or use the save() method with a page range? Ideally, it would either not prompt at all or it would be prompt, prompt, prompt, etc. with prefilled filenames and path. So you just have to click save. Honestly, just getting it to work would be infinitely better than current method. Any way at all to take one 10 page .pdf and extract and convert those ranges to different formats without much user input would be great. If I could avoid folder level, even better. If not, whatever. Let me know if I’m still explaining that poorly.
Whoa
Thanks a lot guys. This has been very very informative. Thanks a lot!
It ends up being a lot more declarative, especially when you have more complex operations. Usually your goal is for the description of the function's result to match the description of its implementation. So since it's Friday, I might want to put together a list of friends to invite out for drinks. An imperative approach using for loops and if statements would "loop through my list of friends and add the ones over 21 to my list of invitees", or something like this function getFriendsToInvite(friends) { let invitees = []; for (friend in friends) { if (friend &gt; 21) { invitees.push(friend); } } return invitees; } But this declarative function would "return a list of friends over 21". function getFriendsToInvite(friends) { return friends .filter(({ age }) =&gt; age &gt;= 21); } So the description of the result and the description of the implementation are identical. This makes your job as a programmer a lot easier, since your boss is only ever going to tell you what they want, not how to do it. You should notice a resemblance to purely declarative languages like SQL SELECT * FROM friends WHERE age &gt; 21 This example is kind of contrived, so I threw together a [jsbin](http://jsbin.com/vajakewudi/edit?js,console) showing 2 approaches to calculating Euler's number e, which is the sum of a certain infinite series. Hopefully, you'll notice how close the declarative implementations are to their mathematical definitions, whereas the imperative one requires the programmer to translate their specification into "programmer talk".
You'd have a tough time convincing me node is the *best* tool for anything.
It would be easier if we all just surfed the site via Postman....
NPM packages are downloaded millions of times every day to servers and end user computers. It's too big of a risk to not require 2FA, specially for packages like ESLint.
Same could be said of any package manager yet here we are.
.json.derulo
Is there a chance that it will it be usable for IMUs (controllers/periphery for VR/AR etc.)? Cool project btw, good luck!
I like them a lot for defining symbol types for anything event-based, e.g. flux/redux action types. If you have `const Actions = { RECEIVE_USERS: 'RECEIVE_USERS' }`, that's a _big_ risk for collisions. Your app grows for years and you keep adding more and more actions, and enforcing uniqueness on every single string is very hard and causes huge breaks if they collide. A lot of people setup actions like this anyways: const ActionTypes = [ 'ADD_TODO', 'TOGGLE_TODO', ].reduce((a, e) =&gt; ({ ...a, [e]: e }), {}); already, so they'de get `{ ADD_TODO: 'ADD_TODO', TOGGLE_TODO: 'TOGGLE_TODO' }`, which is trivial to convert into Symbols: const ActionTypes = [ 'ADD_TODO', 'TOGGLE_TODO', ].reduce((a, e) =&gt; ({ ...a, [e]: Symbol(e) }), {}); 
AFAIK Maven, PIP, Brew, Nuget, APT, etc, all have implemented different signing procedures. In APT for example you have to explicitly say you want to allow the download of an unsigned package with `--allow-unauthenticated`. NPM is the largest package manager in the world and somehow security is not even a concern. Packages can be signed [with a third party solution](https://medium.com/redpoint/introducing-pkgsign-package-signing-and-verification-for-npm-5b833e0ec2d4) but I'd bet this is not the case for 99.99% of packages. Another problem is that the JS ecosystem has this over reliance on micro dependencies which makes security an even bigger necessity. How do you write a hello world in JS?
It's generally thought that JS lends itself better to functional, rather than object oriented, programming. You could, of course stick to OOP, and with classes having been added 3 years ago, it shouldn't be too painful. Keep in mind, however, that JS is not a class-based language. These classes are basically syntactic sugar on top of prototypes, and the reason they were added was out of pity to Java programmers who wanted to write JS but couldn't wrap their mind around protorypal inheritance. =)
I've been using Parcel for some small stuff at work. It is definitely a tool worth looking in to. The most amazing thing is how far it has come in just a few months.
I wasn't able to figure that out. Needed my machine to be back up and running ASAP, so I pulled all the log files I could, and did a clean install of Windows. Network traffic showed outbound posts to a server in the Ukraine, with a nearly identical IP address as what showed up in the Binance API access logs. The calls originated from within the Atom app, but I wasn't able to track down anything further. I don't have an exact list of the extensions I had installed, didn't even think that would have been something to check. Most likely, just some of the popular React-related extensions. I switched over to VS Code, and have been pretty happy, especially when writing TypseScript. Will give Webstorm a shot though, have heard lots of people talking about it lately.
Coming from OOP world, two topics I need more practice is - FP - Promises
Do you code your back-end in JS? Can you elaborate on the prototypes? I learned basic OOP in PHP and Python. And I never really used JavaScript. So I am now learning the JS syntax and basics before I will dive into JS OOP and the frameworks. How do full stack JS developers think in general about OOP with JS :O?
But how many of those *require* signing procedures? As for the ecosystem-- while I agree you have to admit it could have theoretically occurred in any language. How Node got to this point without people calling these packages absolutely stupid is a wonder, though.
As an example, if you look closely the hat flashes white when being moved.. this works b/c there is an accelerometer inside which low.js talks to via SPI. hard to see because the video camera makes all colors kind of white because of the brightness. so, in general, you can interface all sensors and motors as with every microcontroller and thanks!
&gt; These classes are basically syntactic sugar on top of prototypes, and the reason they were added was out of pity to Java programmers who wanted to write JS but couldn't wrap their mind around protorypal inheritance. =) And so programmers from other languages can come to Javascript and see some familiarity when it comes to OOP -- much like the OP here. 
Yes, that's what I said. =) Underneath it's still prototypes, though.
Not sure if serious or not.
Yes, it is really a great tool, so elegant. It is fantastic choice for smaller projects. Instead of loosing time on configuration we can be more productive with parcel. One disadvantage over other build/bundle tools is slower build time.
&gt; you have to admit it could have theoretically occurred in any language Yeah totally.
No-r-ice
I heard about functional programming. But what do you mean with promises?
Why would you want this? ESP8266 is 80mhz and is pretty slow in C.
https://www.reddit.com/r/javascript/comments/8rfppy/how_is_javascript_for_object_oriented_server_side/
Wow! This is really so amazing. I love to work with json.
&gt;Java is also faster (a &gt; &gt;lot &gt; &gt; faster in some cases), so there'll inevitably be contexts where you can use it but not JS. E.g. some real time applications probably. In some case maybe, but there are times where JS is even faster than native (C++), so the difference of performance with Java could be very big at times.
No as much, but not in the way you would think. I think anyone who heralds functional programming as the end-all-be-all is fooling themselves. The matter of fact is that the most used &amp; powerful languages are multi-paradigm. I feel like pure OOP in JS has similar pain points as properly purely functional JS does; and this is where multi-paradigm shines. JS might not be the best language to write OOP code in, nor purely functional code in, however the constructs it provides to satisfy each paradigm makes the language as a whole better. TL:DR; If it took embracing OOP more to get proper classes in JS, then it was worth it, as everyone was faking out classes prior anyways.
Anything that allows unsigned code will have this vulnerability, yes, they are all bad for this reason.
Its so totally secure.... [https://www.cvedetails.com/vulnerability-list/vendor\_id-12113/Nodejs.html](https://www.cvedetails.com/vulnerability-list/vendor_id-12113/Nodejs.html)
OOP in JavaScript isn't far off from Python. If you're comfortable with OOP in Python, you should be fine with JS. Like Python, JS doesn't support private members ([yet](https://github.com/tc39/proposal-private-methods), though there are also [other ways to do it](http://2ality.com/2016/01/private-data-classes.html)) and inheritance is handled via runtime delegation - this is the prototypes thing you might be hearing about in JS. Unlike Python, though, JS doesn't support multiple inheritance. The prototype inheritance chain is linear for single inheritance only. Oh and JS doesn't automatically bind methods to their instances... OK, so there are a few differences, but I don't think enough that you'd be uncomfortable with it.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://github.com/tc39/proposal-private-methods) - Previous text "yet" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
This is interesting, I do love Web Components. I just wish people would stop using TS. Vanilla JS please.
Don't use eval. Ever !
What are these times where reasonably competently written JS is faster than reasonably competently written C++? 
I'd cast the items in the list to an array, and use `Array.find` to find which item to insert my new node before. Whipped this up to show what I mean: https://codepen.io/dgca/pen/PBPBLg?editors=1010
Have you checked react-umg? It combines web tech with existing game engine, so it enables console qualtity UI with js, ts. Disclaimer: I wrote unreal.js.
I think I read that you can use either in styled-components too now.
I once extensively searched how to improve JS performance. From the fastest loop to the best way of using V8 optimizations. Well I've found a few benchmarks about V8 engine performing better than C++ in some cases. Not sure if I'll find them again but I shall take a look.
Note the "reasonably competently written" though. Also note that V8 is itself C++. 
Changed my life!
Classes still behave the same way as they always have. Now there’s just some syntax to make it official. 
&gt; Also note that V8 is itself C++ True, V8 engine is implemented in C++, but that's still a developer writing Javascript at a point. If V8 can compete with C++ than it's probably faster than Java in most cases imo.
I use d3js a lot - fundamentally the voronoi as a selection enhancement is nice, but the line charts themselves don't offer anything much additionally via the ability to select them. My usual approach is to have selection drive what is displayed in other views, with a clear 'selected' attribute on the line in question. If you're limiting yourself to a single chart, then looking to identify step changes and associate them with a message / cause can make the visualisation a lot more communicative. Although it's nicely polished as a line graph as is, it doesn't take the next step to telling a story or leading the user to a certain understanding.
I agree. The "make it official" part is important within the context of the ecosystem.
I agree. I was responding to your comment that people before were “faking” it and now we have “proper” classes.
Yeah this is perfect thanks!
Don't worry, I've got you, brother! https://www.npmjs.com/package/capitalize
Java is itself faster than C++ in a few non-trivial, non-contrived contexts, so I don't see how that translates to JS running on V8 probably being faster than Java in many cases. There are precious few properly implemented benchmarks where JS even comes close.
What do you mean by "retrieve"? You can't alter data on other websites. There is the Clipboard API, which allows you to copy a value to the user's clipboard when they click something. 
The subreddit guidelines clearly states: “Posts offering or seeking employment are prohibited” So maybe go poach in a subreddit devoted to job posting and not one based around a topic. Also no one is likely to do market research for you for free. 
Yes, OOP is relevant. In my perception a lot of the backlash hasn’t been of OOP but has been of complexity driven by a perception of needing more OOP and that complexity manifesting in deep object hierarchies and complex interactions. The goal should always be simplicity and understandability and OOP can help get you there in many scenarios. The Gang of Four outline many such scenarios.
I think that it's not very readable. Doesn't something like this accomplish the same thing? if (lowestFirstItem === 0 || item &lt; lowestFirstItem) { lowestFirstItem = item; }
[MDN Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
What else would you suggest to use? ESP32 is 240 mhz dual core and the cheapest way AFAIK to do IoT products with wifi. Especially when producing them in mass every dollar counts.
Yeah, I agree with that. If you need a map, use a map. If you need a filter, use a filter. If you need a sort (and have a sort), use that. If you need to filter and then map, chaining a map onto a filter is definitely the way to go. My point was that reduce can do literally anything that those specialized functions can't do, and that this is preferable to using for...of. If `array.reduce( (acc, val) =&gt; { /* reducer logic */ } )` isn't clear enough at a glance, you can always wrap that logic in a descriptively named function and plug that into reduce.
Yes you are absolutely correct and that is much more readable. I'm writing a mergeSort algorithm and want to make the function concise. I'm gonna switch that out for the if you wrote actually, no reason to use ternary like that..
I think the entire article is the joke. Or at least it's poking fun at some css-in-js debacle. I hope anyway.
Beads?
Assigning multiple style properties can be done via Object.assign without requiring a new API, for example Object.assign(node.style, { width: "600px", borderRadius: "8px", boxSizing: "border-box" });
Blimey it's like a time traveler from 2002 or something...
You can use the link as the resource ID from within Redux. The idea is to normalize data to a unique ID and a URL is a unique ID in a REST-based API.
awwww
I think that you're going to hate yourself in a couple of months.
This is simpler: async function requestJokes(count) { return Promise.all(Array.from({ length: count }, requestJoke)); } async function requestJoke() { const response = await fetch('https://api.icndb.com/jokes/random'); const json = await response.json(); if (json.type === 'success') { return json.value.joke; } else { throw new Error(json); } }
No way, me too!
I read the entire article and I don’t get it. What is the point? Is it a joke, or some kind of satire?
lol for the double ternary? or just that time makes fools of us all?
I would have him in two weeks. :)
And that's one outdated api
Yes the double ternary. &gt; “Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.” Brian Kernighan
That's a damn good quote.
It’s satire poking fun at how insane it is to do your CSS in JS spread around hundreds of files. The satire envisions a world where this was just how it was done and then someone comes along with the idea of CSS files and he’s writing a cool medium post about why you should give it a shot because it’s the cool new thing. 
InB4 NodeCSS, Cascading Server Stylesheets
OK, thanks. I kind of thought that, but I wasn’t sure. Over than maybe doing a show or hide a node, I have not seen much, if any, styling coded in JavaScript. 
You haven’t? Please sit down before clicking the link https://www.google.com/search?q=css+in+js&amp;ie=UTF-8&amp;oe=UTF-8&amp;hl=en-us&amp;client=safari
Just the package I need :D
You can also use it on multi's
The link redirects to your resume on the home page. ``` Request URL: https://blog.samhh.com/posts/javascript-symbol-as-unique-key Request Method: GET Status Code: 302 (from ServiceWorker) Response Headers: location: / ```
Totally agree that the goals should be simplicity and understandability, and I would argue that FP has been growing in popularity because it helps us achieve these in our programs. The abandonment of OOP is because it has proven to lead to less simplicity and less understandability.
For Example: I have 3 view files for an app that I want to make into 1 view file that has 3 tabs which contains all of the information from the 3 view files. Is there an easy way to import those 3 view files so that I can transfer the 3 files into 3 tabs? 
&gt; If `array.reduce( (acc, val) =&gt; { /* reducer logic */ } )` isn't clear enough at a glance, you can always wrap that logic in a descriptively named function and plug that into reduce. Great advice. Not only is it more clear, it means that you aren't creating and destroying the function on every call. 
Oh I love the ESP8266 and ESP32. But every library for the ESP platform is C. So you're limiting yourself to a small subset of compatible sensors, etc. It's be a lot easier for someone who knows Javascript to learn C than to port existing libraries to be compatible. Try posting this over on /r/arduino or /r/esp8266 and you might get a more through response.
Here's a sneak peek of /r/arduino using the [top posts](https://np.reddit.com/r/arduino/top/?sort=top&amp;t=year) of the year! \#1: [Ultra low power WiFi connected weather station that will run for years on AA batteries!!!](https://np.reddit.com/r/arduino/comments/7a292j/ultra_low_power_wifi_connected_weather_station/) \#2: [Arduino Mega controlled ferrofluid/electromagnet display. Our first fully functional prototype](https://gfycat.com/gifs/detail/PresentHarmlessChihuahua) | [59 comments](https://np.reddit.com/r/arduino/comments/8rqsql/arduino_mega_controlled_ferrofluidelectromagnet/) \#3: [Made myself a proper Gmail notification. Saw someone make something similar a few days ago, got me inspired.](https://i.redd.it/zqx0fc8a1f9z.gif) | [69 comments](https://np.reddit.com/r/arduino/comments/6n44uy/made_myself_a_proper_gmail_notification_saw/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
When you move to a component-based system, document-wide stylesheets don't make sense anymore. This article is silly.
The following people on Twitter for all JS stuff: (stole this from /r/javascript) **React** * [ReactJS](https://twitter.com/reactjs) * [Jordan Walke](https://twitter.com/jordwalke) * [Dan Abramov](https://twitter.com/dan_abramov) * [Andrew Clark](https://twitter.com/acdlite) * [Sophie Alpert](https://twitter.com/sophiebits) * [Michael Jackson](https://twitter.com/mjackson) * [Ryan Florence](https://twitter.com/ryanflorence) **Vue** * [Evan You](https://twitter.com/youyuxi) * [Sarah Drasner](https://twitter.com/sarah_edo) **TypeScript** * [TypeScript](https://twitter.com/typescriptlang) * [Anders Hejlsberg](https://twitter.com/ahejlsberg) * [Daniel Rosenwasser](https://twitter.com/drosenwasser) * [Basarat](https://twitter.com/basarat) * [Mohsen Azimi](https://twitter.com/mohsen____) **Flow** * [Flowtype](https://twitter.com/flowtype) * [Caleb Meredith](https://twitter.com/calebmer) * [Gabe Levi](https://twitter.com/evilgabe) **Prettier** * [PrettierCode](https://twitter.com/PrettierCode) * [James Long](https://twitter.com/jlongster) * [suchipi](https://twitter.com/suchipi) **Zeit Stuff** * [Zeit HQ](https://twitter.com/zeithq) * [Guillermo Rauch](https://twitter.com/rauchg) * [Leo Lamprecht](https://twitter.com/notquiteleo) * [Arunoda Susiripala](https://twitter.com/arunoda) **Misc** * [Sindre Sorhus](https://twitter.com/sindresorhus) (Creator of tons of JS modules and cool projects) * [Kent C Dodds](https://twitter.com/kentcdodds) (Has really good react libraries and great tutorials about open source in general) * [John Dalton](https://twitter.com/jdalton) (Lodash | std/esm | etc) * [Nicholas Zakas](https://twitter.com/slicknet) (ESLint) * [Henry Zhu](https://twitter.com/left_pad) (Babel Maintainer) * [Kyle Mathews](https://twitter.com/kylemathews) (Gatsby) * [Max Stoiber](https://twitter.com/mxstbr) (Styled Components) * [Ives van Hoorne](https://twitter.com/CompuIves) (Code Sandbox) * [Axel Rauschmayer](https://twitter.com/rauschma) (Lots of great JS news and tips/tricks for a lot of different topics) * [Lee Byron](https://twitter.com/leeb) (GraphQL) * [Sebastian McKenzie](https://twitter.com/sebmck) (Creator of Babel) * [Wes Bos](https://twitter.com/wesbos) (Great tutorials on lots of JavaScript topics) * [Jamie Builds](https://twitter.com/jamiebuilds) (Lots of cool libraries like unstated, react-lodable, etc) 
Are you using JS Modules or CommonJS?
I'm using react Js
Lol Then you aren’t using them. You can only import other js files with libraries like Commonjs, Webpack, etc. Angular does this “natively” (they use webpack), but React does not. If you have multiple js files you have to link to them in the index.html file.
Okay, I'm sorry I'm new to React and Javascript all together. I come from Java so I'm just trying to find a way to copy the data that these 3 files hold and basically paste it into a new file with 3 tabs. Kind of like a function in java 
Depends but basically HTML, CSS/Sass, JavaScript, and JavaScript frontend frameworks (React, Vue, etc) for a web developer.
I use nested ternaries all over the place, and I love them. I find them very easy to read if you format them well. Check out this article from Eric Elliot: [Nested Ternaries Are Great](https://medium.com/javascript-scene/nested-ternaries-are-great-361bddd0f340?source=linkShare-21c5c08ce9bd-1531526352) 
It's all about functional programming!
Definitely give WS a try. It costs about 5-10 bucks per month but if it’s a tool you use to make money, then it’s totally justifiable considering Jetbrains (the company that makes WS and various other awesome IDEs) is a solid company
THANK YOU.
Cool. What’s your setup look like? Did you use something like create-react-app? Using webpack, Babel, and all that?
My initial thought upon seeing this was that this must have been in the works for a while, but upon closer examination it looks like they actually _just_ added this feature to the CLI only yesterday; only 14 hours after the compromise of ESLint was initially reported. That's some pretty insane turn-around time.
The challenge doesn't note that the test strings can't overlap, but instead that the first string matches all three tests simultaneously, ie it starts with the second string, and also includes the third string , and also ends with the fourth string.
Upvoted for Zeit stuff. Love them. 
They do some of the coolest work in the industry.
This what I do as well but you just gave me a lot more names to follow. I also use JavaScript Weekly as well and it’s nice to have articles coming my way every week. 
Concise !== Readable I used to love using ternaries and nested ternaries. And since I wrote them I usually read them easily for a certain amount of time. But then I realized that they were often the cause of bugs or code misunderstanding for others on my team. These are very smart people. But then the point was really driven home when I had a very hard time reasoning with some I myself had written a few months earlier. It's fun to try new things and feel like you're clever by writing super dense single lines of code. But ultimately even if you're a solo dev, it'll end up being problematic. Essentially I think ternaries have a place, but should be used with caution. And never nested. 
In going over the challenge again with your comment in mind I notice two things: 1) the 'p' in case 2 is also doubled-up, which I totally overlooked before, 2) the notes at the bottom of the challenge read: "*You'll always get exactly four strings as arguments.*" &amp; "*Tests are case* ***sensitive****.*" Does that mean sensitive as in it does, or does not matter whether or not the test case itself, in comparison to \`mainStr\`, is capitalized or not? Perhaps I've been staring at the challenge for far too long and I'm losing it. 
That means that the case of letters matter - so yeah in the Onomatopeia one, it should return incomplete because it starts with 'On' not 'on'. Look up regex positive lookaheads and remove the toLowerCase line and you're on the right track
Will do. I appreciate you taking the time to help me out!
10/10 dope
I agree with you here, reading the blog post about nested ternary's being good I thought maybe I had a bit to learn but really it's just overcomplicating issues really..? Imo, the examples given in that post are overcomplicated and unreasonable.. if I came onto a project with code like those examples I'd be cursing the dev straight away 😂 There's a good quote on this thread about readability. Glad I've started this discussion and thanks for your input
I heard they may add tail recursion in later versions. 
I kind of disagree, a good if else can't be beaten for more complicated issues readability &gt; concise !! As said elsewhere on the thread. Thanks for your input, though.
Bad bot
What the fuck kind of job needs you to write code but doesn't let you access essential tools, sorry for your suffering.
Java is excellent for servers since it's one program continuously running. But IMO Java is poorly suited for being an operating system like Android because context and apps continually change and memory is limited. My last phone was a S8 and it gave me a whole new respect for iOS.
Isn't that about AUI, which is different to AtlasKit? See: https://community.developer.atlassian.com/t/how-do-you-develop-and-use-atlaskit-aui/18933/2
This will get easier with the upcoming `Object.fromEntries` [proposal](https://github.com/tc39/proposal-object-from-entries) (which I am championing): const map = (fn, obj) =&gt; Object.fromEntries(Object.entries(obj).map(([key, value]) =&gt; [key, fn(value)])); map(x =&gt; x + 1, { x: 42, y: 10 }); // { x: 43, y: 11 } Libraries like Lodash contain a lot of utilities which JavaScript probably never will, but there are still a few places where additional primitives (like `Object.fromEntries`) can help a lot in building more complex operations.
Just realized it’s a bit ironic that the conditional I laid out would actually work over my solution lol
It's likely it was something they already had in progress and werent quite ready for release yet. The compromise probably had then throw more resources at it to get it out the door faster. 
Troll post confirmed.
Thank you. People have such a knee jerk reaction to anything that goes against existing practices.
also, \[NullVoxPopuli\]([https://twitter.com/NullVoxPopuli](https://twitter.com/NullVoxPopuli)) does typescript, react, and ember and \[this is the blog that NullVoxPopuli writes on\](http://developertown.com/blog)
Yes, FP has been growing because it encourages good factorization of logic. But OOP and FP are not mutually exclusive. The C++ standard library, as an example, has progressively moved towards smaller classes that encapsulate data and a minimum number of methods while maximizing the number of functions as functions can be written generically. OOP is still very much a thing but free functions with referential integrity are also encouraged as a matter of loose coupling and higher flexibility.
JavaScript Weekly sometimes has stuff I don't see in the usual places. https://javascriptweekly.com/issues/378 And not exactly news, but checking out [StackOverflow questions tagged javascript](https://stackoverflow.com/questions/tagged/javascript) on a regular basis and doing a very fast scan of many pages of questions gives me some useful information about what people are using and having problems with. If I see something mentioned there often enough, I'll check it out.
What is substrigns and why would he need php?
[removed]
@Skhmt Thanks for reporting the issue
Yep, Mongoose sucks. You can use the native mongo driver. 👍
thanks to your comment I learned about ReasonML. I love OCaml and now ReasonML 
I did a bit of Reason and I love the syntax but it feels too immature right now. It is easier to consume npm packages with TypeScript at the moment (for me anyway!). I do want to explore OCaml a bit, if you find a decent, updated tutorial let me know!
Thanks I’ll check those out 
output.innerHTML is personally a no no for me. Build the DOM elements and append or insertBefore. 
use css class instead id, like this https://codepen.io/anon/pen/bjVORE 
Add /u/acemarke for Redux resources as well! 
The JavaScript ecosystem is a mess. Formal classes (using the \`class\` keyword) were added in ES6, and while most modern browsers support them, IE11 does not ([https://caniuse.com/#feat=es6-class](https://caniuse.com/#feat=es6-class)). Also, older versions of node.js didn't support ES6, and I'm not really sure which version added it. Anyway, \*most\* developers seem to write ES6, 7, etc, even if it's not widely supported. They even write all kinds of non-standard code with the help of Babel, a "transpiler" that converts a modern/new syntax to older-style JavaScript. And so, if you use JavaScript classes, you'll probably transpile them back to the prototypal inheritance that's a little confusing and pretty hard to read/understand for beginners. Also, the \`this\` keyword is particularly confusing in JavaScript, because it changes based on where it appears. If you're inside a full \`function(){}\` or \`method(){}\`, the \`this\` keyword corresponds to how that method was called (which is usually with the instance, but sometimes you can pass method references around as callbacks, in which case you need to do something like: \`el.addEventListener("click", this.myMethod.bind(this))\`.) However, the new arrow functions DO NOT produce their own \`this\` reference, even though \`this\` can still be used inside of them. The \`this\` reference will just cascade? up the scope chain as a normal variable would. It's really confusing...
You should be aware of the more common patterns in there.
They should have done it a long time ago. Didn’t get why they had to wait till now after a catastrophic failure. At least, better late than never.
Did you read "about the author" block? Author knows CSS and accessibility, it's 100% a joke. Also, article is hugely popular
hmm, I think I understand the prototype one. It's basically just a "class" right? Where I am learning they say to not use the 'new' keyword. Anyways, what kind of programmer are you? Do you use JavaScript for your job?
[removed]
We feared SkyNet - we will have nodejs 😵
Damn, great quote 
Doesn't really matter. I usually try to stay away from using literal `undefined` though, and use `null` when I'm intentionally leaving something out (or a `Maybe` or something). If you have optional arguments like that, though, you may want to consider passing all of the arguments as a single object, and just leave off the unnecessary property. 
don’t forget echojs.com. :) 
Lmao Java isn't the problem with Android and isn't used as an operating system (Android is written in C/C++). But carry on. &gt; My last phone was a S8 and it gave me a whole new respect for iOS. It's almost as if when you're the only person creating both hardware and software for your device you can afford a lot of micro-optimizations and breaking changes that someone struggling to support thousands of different hardware configurations and juggling the needs of dozens of OEMs can't! 
I would put the first test out of the loop (for example init with first value) And trade the second one for an explicit min :) More generally by splitting and naming sub part of the ternary operation (using variable or function) you are documenting
https://spectrum.chat is pretty good
Plus Android needs to run the JVM to run most apps. Anyways, Apple not only has amazing Chip designs but also they have some really impressive compression and efficient designs here Android Authority explains: https://www.youtube.com/watch?v=lCFpgknkqRE While I understand the limitations Android obviously faces supporting so many OEMs, I just can't deal with such a clunky mess. Another thing I don't like about Android is how it is essentially the Facebook of phones, they share your data with anyone. I can understand buying Android if you just want the cheapest phone, but to buy a flagship Android is like buying a car with a Maserati body but an engine and interior of a Ford Fiesta.
dev.to is a good place as there are discussions and tutorials are posted on various topics. And Reactiflux discord channel
Of course, the solution is buy a Mercedes that hasn't yet catching up with functionality its peers have had for years, has the weirdest bugs (on specific letters? Really?) and that you can only use or develop for in the ways its manufacturer envisioned (as in you literally have to hack it to conveniently install apps that are not from its walled garden). Could never be me tbh.
I use Hacker News and some local-country-only tech sites as well. Is there anything better then Hacker News guys?
what's wrong with using innerHTML ?
Can't believe I never thought of that 😓
I'd like to see this become mandatory for all popular packages. Or even built into npm audit so that your package is given a confidence level that is the lowest of all the confidence levels of your dependencies. It will be interesting to see how 2fa becomes built in to CD pipelines
Thank you for the advice. Did I research it correctly that the error handling would be done with a simple try/catch block in this case?
Considered using a vCard? I don't know how well they are integrated into the phone OS, but since it's the standard it'll probably be your best bet
..and then came an input with the disabled attribute and it looked like a button. By now, the short and sweet stylesheet had grown to be 1500 lines long and the inactive button style had become heacily relied on. So he slapped on a [disabled].disabled-input rule. However, the input had another class, thoughtfully named .input. This seemed to override the styles he was applying, so he slapped on some !important to make it work. ... https://upload.wikimedia.org/wikipedia/en/thumb/e/e4/28_days_later.jpg/220px-28_days_later.jpg
Begin with reading the book, [You don't know JS](https://github.com/getify/You-Dont-Know-JS). It covers good amount of detail which will make a clear distinction between what JS really is and what it pretends to be. With time, you will get used to it. Initially learning curve will be steep because of all the evolution of the language in recent years.
I build data visualization focused for drug discovery researchers. So, who knows maybe we get new treatments for Tuberculosis one day because of my work on JS.
[it's answered in this article](https://medium.com/nybles/demystifying-react-s-virtual-dom-eb0f2dc0717a)
This is not a support forum. Do not post multiple times the same question (you posted this exact question just 12 hours ago). Go to /r/LearnJavascript for Javascript Learning Help. But then again, your problem is **not** JavaScript related. Go to /r/css or /r/csshelp for CSS help.
Rtfm
/r/lolangular 
I would learn it. It somewhat overlaps with other languages so a few of the concepts transfer. Generally there is a move away from OOP by many frameworks but at the very least it's a helpful way to organize your code. Generally I am finding OOP really helpful as Data model objects. Its makes for a stronger declaration of what that object is when you pass it between functions
While that is entirely true, here is the init() function that will create the pattern across the whole screen: function init() { w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; h = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight; container = document.getElementById( 'container' ); canvas = document.createElement( 'canvas' ); canvas.width = w; canvas.height = h; COLS = Math.ceil(w / (SPACING + MARGIN)); ROWS = Math.ceil(h / (SPACING + MARGIN)); ctx = canvas.getContext( '2d' ); man = false; tog = true; list = []; for ( i = 0; i &lt; NUM_PARTICLES; i++ ) { p = Object.create( particle ); p.x = p.ox = MARGIN + SPACING * ( i % COLS ); p.y = p.oy = MARGIN + SPACING * Math.floor( i / COLS ); list[i] = p; } container.addEventListener( 'mousemove', function(e) { bounds = container.getBoundingClientRect(); mx = e.clientX - bounds.left; my = e.clientY - bounds.top; man = true; }); if ( typeof Stats === 'function' ) { document.body.appendChild( ( stats = new Stats() ).domElement ); } container.appendChild( canvas ); } If you want to make it adjust on resize add an window.addEventListener("resize",function() {...} in which you simply re-initiate the whole thing.
[removed]
what an absolute gentleman you are
Semantically speaking, the best value would probably be `undefined`, as it's the actual default value for arguments that have not been passed. In your functions you have to handle `undefined` either way (mostly through constructs like `this.someInt = someInt || 5;` or `if (typeof someInt === 'undefined') { throw new Error('...'); }`. There has been a problem regarding overriding `undefined` (which is basically also a global variable with the value `undefined`), but in modern JavaScript applications it shouldn't happen at all. You can still avoid it, e.g. by re-defining it (if allowed by the JS-engine, `undefined = void 0;`) or e.g. using an IIFE (`function (undefined) { /* your code */ }();`) This together with the fact that in many other languages `null` acts as the default value has lead to JS-developers favoring `null` over `undefined` (There is no `undefined` equivalent in most other languages) and with default argument values you can also have the be null when they are not defined (`function yourFunc(optionalArg = null) { /* ... */ }` Checking for not-defined values would maybe also include you having to check for `undefined` and with `null` you'd suddenly need a construct like `if (typeof arg === 'undefined' || arg === null) { throw new Error('...'); }`. Then there's also the caveat that **`null` is an object` (see `typeof null`) which can get annoying when you want to accept different types for an argument and check for it afterward. Either you check `arg === null` directly, first, and ignore it or it will end up it going successfully into your `typeof arg === 'object'` check and you'd have to check it there (which would increase complexity of that function, as you need another level of `if`) It comes down to personal preference, you can use both. Some prefer one over the other. Personally I try to use `undefined`, as it has less caveats you have to take care of and it's more native (as said, if not passing it for real, it's `undefined`, too). I also try to order my arguments by probable amount of usage so that users of my library don't need to use default values for arguments in most cases. Another good solution is splitting the methods up so that you end up with two versions that take exactly the arguments they need.
**[First Working AGI](http://ai.neocities.org/FirstWorkingAGI.html)** in JavaScript switches away from hard-coded **[MindBoot](http://ai.neocities.org/MindBoot.html)** engrams as prelude for rapid mutation of self-modifying **[Perlmind](http://ai.neocities.org/perlmind.txt)** resulting in **[AI Go FOOM](http://agi.topicbox.com/groups/agi/T57cced66d45fa115)**. 
dddddd
If we did it the way this article describes, that would be insane, and he would have a point. Fortunately, we don't.
This describes the vast majority of tips-and-tricks that Medium bloggers come up with. Take a look at this fucking gem I've bookmarked: Input: function counter(state = 0, action) { switch (action.type) { case 'INCREMENT': return state + 1 case 'DECREMENT': return state - 1 default: return state } } &gt;Now let’s curry this bad boy, convert the if to a ternary and ES6 it up a bit! Output: const executeIfFunction = f =&gt; f instanceof Function ? f() : f const switchcaseF = cases =&gt; defaultCase =&gt; key =&gt; executeIfFunction(switchcase(cases)(defaultCase)(key)) const counter = (state = 0, action) =&gt; switchcaseF({ 'RESET': 0, 'INCREMENT': () =&gt; state + 1, 'DECREMENT': () =&gt; state -1 })(state)(action.type) 1400 clap clap claps on Medium. I feel sorry for newbies that might actually fall for this shit.
Thanks mate
Mainly XSS attacks. You can mitigate if you control the headers and prevent inline JavaScript and on page JavaScript but That’s a problem for production and not development. But always best to do. Second, I feel you have better control when you build the DOM elements in my opinion. Especially when you are building an interactive page, when you use innerHMTL you are destroying elements and adding new ones, this will destroy the event listeners too unless you are looking for clicks or keystrokes on the entire tree. But if you are using innerHTML chances are that is a little more advanced.(no disrespect intended). If you are still using jQuery you can use .on which mitigates that but I dropped jQuery because it was too slow for what I needed. When you control the entire output it lets you build better applications, more secure applications. 
&gt;I feel like the people on this subreddit have purely academic backgrounds or something. I think people who write code like this simply show off their knowledge of syntactic sugar for no reason. &gt;All of the variables in the snippet could be declared as const. Aye, I know. It's just my personal convention to only declare things that will not be modified in any way as const. 
This is a good article about the performance side of it too. 
Undefined reassignment is not an issue anymore.
It is perfectly adequate for data processing with expected datasets, as long as you don't make it inefficient for no reason other than writing denser code and an opportunity to include a leftpad-tier dependency.
See immutable globals: http://kangax.github.io/compat-table/es5/#test-Immutable_undefined
An onsubmit handler for your form is what you’re looking for. Also I could be wrong but prevent default will also stop propagation.
where do you load that jQuery snippet? If you execute it too early, the form might not yet exist (fully) so you're adding a submit handler to an empty jQuery selection. var $form = $("#homePagePostForm"); console.log("$form", $form); $form.submit( ... ) This should show you whether that's the case.
[**web-riimote**](https://github.com/konaraddio/web-riimote) Turn your smartphone into a 3D controller (think Wii remote). No need to install a mobile or desktop app. Just visit [web-riimote.herokuapp.com](https://web-riimote.herokuapp.com/) on a smartphone (it'll be your controller) *and* a laptop/desktop (it'll be your display). [Here's a video showing it in action](https://www.youtube.com/watch?v=O2r1-lR6Xq8). Works best in Chrome. Built with Vue.js, Node.js, and Socket.io
it works for me, maybe you need to wrap in [DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded) or the jquery equivalent.
I'm not so sure that FP helps with *readability* (or understandability). In my experience, it helps tremendously with *composability* so that code can be nicely modular and reuse. But readability? I find procedural code more natural to understand.
This inspired me to iterate over the data so the class names are the houses! Then I just created classes for each house. Thanks!
React Status newsletter: https://react.statuscode.com There's also ReactDOM newsletter but I think React Status is little better.
Just for clarification: "draxt is a jQuery-like utility module for selecting and manipulating file system's objects in node.js environment. It uses [glob](https://en.wikipedia.org/wiki/Glob_(programming)) patterns as it's "selector engine". draxt also provides several DOM-like interfaces representing file system's objects that use promisified [fs](https://nodejs.org/api/fs.html) module's APIs."
I've been thinking about performance a lot in general, so thanks for bringing this to my attention. I also found [this](https://jsperf.com/document-fragment-vs-innerhtml-vs-looped-appendchild)!
Some other test cases you should work on: * verifySubstrs("1234", "1", "2", "3") // Incorrectly accepted * verifySubstrs("1234", "2", "3", "4") // Incorrectly accepted * verifySubstrs("1234", ".", ".", ".") // Incorrectly accepted * verifySubstrs("123", "(", "2", "3") // Syntax error * verifySubstrs("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "(x+", "x+", ")+y") // Timeout
I noticed that my JS code is placed before the jQuery file. I switched their position, and now it's working fine. Thanks!
Nice! Learn with best practices will make you better faster so you don’t have to break bad habits. Can’t tell you how many times I see comments that say // fix this for a better solution and it never gets done. Or maybe they are just telling the next Dev to fix it because they suck. Lol
What kind of server do you use? I have done react server-rendering with transpiled js-bundles on Java 8 Nashorn. Works ok for the most parts. IE8 compat can be really hard these days, I suppose, as more or more libraries are moving away from providing compatibility with it and you're stuck doing it yourself. Apart from all the shimming and polyfilling you have to do to and even then you will have the most problem with IE8 in terms of compatibility and features plainly not working. Sucks to be you. Try to always keep the IE8 in line with the rest. Don't fall into the trap of creating all kinds of awesome things that you have to throw away in the end because IE8 won't play ball.
I think progressive enhancement will be your friend here. Work out the absolute minimum functionality and make it work without JS and modern CSS. Then you can layer on modern stuff, safe in the knowledge that you IE8 users are being looked after. This approach will give you a bit more flexibility if you do have to suddenly rip out a JS framework too. 
They're generally called 'treemaps' I think, and there are a decent number of libraries/widgets out there. http://bl.ocks.org/ganeshv/6a8e9ada3ab7f2d88022 looks maybe the closest to what you're describing as 'zoomable'. If you wanted continuous zoom (like an actual street-map) you could probably do something with a standard mapping library (openlayers or similar) rendering a vector layer of your data (you'd probably want to pre-render it to the max nested set of rectangles, and rely on zoom/level of detail to show the intermediate structures as you zoom.
For example I just recompiled a C++ GUI I coded. It interfaces with a 2.4" tft touchscreen. The ESP8266 has 96KiB of data ram and 4MB for program storage. I can fit all of that in 311 KB of program memory and 37KB of ram. This simple hat example uses 3MB of program memory and I don't see RAM usage. I'm not sure how garbage collection for your library works, but if it's done in the traditional JS method, you'll quickly run out of RAM and will cause a stack collision.
Or simply? `lowestFirstItem = Math.min(lowestFirstItem, item);`
I find interesting that the site claims DOM is slow on mobile devices, but this page is laggy on my phone.
Readability is subjective. The style that we are used to is easiest to read.
Sure. OOP is not 100% out. Especially in JavaScript. It’s not going anywhere. But as far as what you should invest your time in, you won’t regret leaving OOP behind in favor of FP.
I opt to never use `undefined`. Unless you have a use case where null has a specific meaning that is different than undefined, just use null. You can also use `foo({ a: 23. c: 3.2 })`, allowing you to specify exactly which parameters exist, and maintain readability at scale.
I don't really have anything to show, and while I know there's not much of a feeling of _community_ here or anything, I'm leaving the subreddit and I just wanted to say bye. So, well, that's it: bye. Have fun.
**simple-keyboard** \- [https://github.com/hodgef/simple-keyboard](https://github.com/hodgef/simple-keyboard) simple-keyboard is an onscreen virtual keyboard for kiosks that focuses on customization and responsiveness. There's a version for vanilla JS and another for React users. Feedback is welcome! :)
it all works even with bigger programs. the esp32-wrover has around 4,5 mb ram, 4 of them through psram and we made this work well. regarding storage: if you need more space you can always add sd card or spi flash (as done in neonious one which has 12 mb space for js app)
Yeah, I tried opening it on my phone. Firefox immediately slowed down, the page was super unresponsive. And then my browser crashed after a few seconds.
Try SproutCore.
An additional thing to consider is if you're using (or plan to use) default values for your parameters in your function declaration. function foo(a, b = 'hi') { // ... } If you pass `undefined`, you'll trigger the default value; if you pass `null` you won't. (On an aside, I'd almost never have a required parameter _after_ an optional one - I'd either change the signature or pass the parameters as an object.)
Is it yours? That's awesome!
Thanks 
I know some of those words!
I admit that I went into the challenge with the wrong mentality of being stubborn and wanting to do it my way as opposed to the most appropriate way given the challenge stipulations. This is the fairly concise, working solution for the challenge linked above: \`\`\` const verifySubstrs = (mainStr, head, body, tail) =&gt; { return ( mainStr.startsWith(head) &amp;&amp; mainStr.includes(body) &amp;&amp; mainStr.endsWith(tail) ? 'My head, body, and tail.' : 'Incomplete.' )} \`\`\`
So my friend, what I would suggest to you is to learn how you are doing the basics of the Web: HTML, CSS and JS. As you want to make dynamic Web pages, I suggest you learn more about JS, there are also some frameworks like React, Angular and VueJS, they can help a lot in what you want to do. However if you sober well JS will be much better. As you want to do something beautiful a framework like Bootstrap would solve, in case you want to be independent, I suggest learning more about CSS and then SCSS. With JS and CSS you are able to create an amazing website and even a web application. Now if you wanted to host this website and use databases etc ... could take a look at PHP too, I hope I can help :)
Great advice! I’ll continue to work on my JS skills. I really want to use node.js. Sounds like I could continue on udemy with the advanced web development bootcamp.
Yup! Just like most other error handling. Async and await helps asynchronous code look more like synchronous code that everyone is used to.
Hindsight is 20/20. 
Why do you need to measure row height when you have fixed font size? In your case it is same as row height. Just use fixed number. If you have line wrap - just divide lines in your data source. Here even no need to measure rendered elements. And you don't need to measure/calculate whole data set, only visible parts and update your sizes dynamically.
Thanks
You would assume that the thing that powers 99.99999% of websites in the entire world would be implemented in a fast and efficient way by browsers, but no, we have to reinvent the wheel. Wonder if that website is accessible by assistive technologies which rely on the DOM?
How long did it take you?
I can at least select the text. Maybe they do include accessibility? But either way I agree with your point about reinventing the wheel.
Lines have different sizes, if they are fixed or need rendering as you mentioned. The question is which rows have different sizes, use this data to create the virtual scroll bar. If I do not measure each line how can I know the height of the scroll bar. For example: If I use a fixed size, a simple calculation solves everything, however I have a div with 500px width, and the text goes detro separated from it by pre tags, as the text is dynamic I do not know how many characters fit there, so I can not measure the height of the line and this parent div may have different sizes depending on the screen size. VS code and Atom do this, they do not render, but for me it's not clear how they can do this is what I'm trying to fix, maybe I misunderstood what you said, if that's the case you could give me An example, please? Thanks in advance
I did blasjs (150 subroutins) in 3 month (70 hour work week), lib-r-math i did in 5 month (also same fanatism) I am now porting LAPACK and writing Fortran-js (fortran to js transpiler). 
Holy shit this is amazing. Actually said 'No fucking way' out loud when it connected. 
Thank you for the solid advice. I tried to make it even more compact with your tips. const listOfPromises = new Array(numberOfJokes).fill(undefined).map(x =&gt; x = requestJoke())
We’re definitely on the same page here!
Don't use more then 2-3 arguments. If you need more, then you're probably not sticking to the single responsibility principle.
Ah yeah, `Object.fromEntries` is a proposal I'm anxiously awaiting, good luck!
Yeah, I can also select it on mobile, though it doesn't actually highlight it, I only see the start/end selection markers (on mobile). I was asking because the Chrome accessibility tree relies on the DOM, and all its elements and attributes. Granted, I haven't looked into how this library works yet as I'm on mobile right now.
Would it be prudent to issue pull requests in these packages to get rid of these is-something dependencies?
I'm glad I could help. This increases more and more your skills in JS, not that you go to do everything from scratch and never use a library, however in certain cases you can solve everything with pure JS without counting the level you will acquire with the passing of time , this is also true for CSS, sometimes using only libraries and things ready can prevent you from creating amazing things because you don't delve into JS and become dependent on the framework.
What about dplyr next?
Nice mug
&gt; dplyr good idea! , the roadmap is 1. LAPACK (used by R for lm and glm = (general) linear regression) 2. R-transpiler (transpiles majortiy of packages) Might be an idea to have an "upvote" list, to have users vote on wich packages to prioritize in porting
So you worked 70 hours a week for this project? Full time? 
thanks a lot for the reference.
yup
Just use Opencpu? 
&gt; Opencpu opencpu is server based All these libraries run in your browser!!!, the final goal is distributed computing (your samsung S7 is already VR capabale compute device) 
Makes sense. Any generic conversion tools you've been able to script? Or is this just a complete rewrite?
https://i.imgur.com/5XaFf5V.png You are wrong, they don't have different sizes. Look at the screenshot: line wrap is enabled, so line is just split in two. If I toggle this setting, it will be just one line. All lines have height 20px. They are all have exact same height. &gt;library for syntax highlighting and an editor That is how it is done. You just have wrong approach or I still can't understand what you want.
manual re-write I am working transpilers as we speak, I am happy i ported the core libs, so I was exposed to the guts of R. 
If you really need dynamic rows, you need it in case if you have dynamic content in rows, but "text in editor" is not that case. However, to do this you need: 1. render view rows with base default height 2. measure all visible rows 3. memorize all row height that different from default 4. update canvas size and render again if needed
 Our really you're right, I checked it on the Atom too. I thought it was a single line kkkk. I've been thinking here, the amount of lines will vary according to the width of the Div, so to figure out the height of the scroll bar, can I render the whole text in a single span tag which will speed up the process or is there a different way to do this? I'm considering something like: let divHeight = document.getElementById('content').offsetHeight let lineHeight = parseInt(document.getElementById('content').style.lineHeight) let lines = divHeight / lineHeight; alert("Lines: " + lines) &lt;div id="content" style="width: 100px; line-height: 18px"&gt; line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line line &lt;/div&gt; 
You may just be responsible for making JS an enjoyable datascience platform. I love the concept.
Minimize and don't read from DOM, only write to it. You don't need to measure all rendered lines. For instance, you can have array with default heights like: ```javascript const defaultHeight = 20; const linesCount = data.length; let cache = new Array(linesCount).fill(defaultHeight) ``` To calc canvas height do something like: ```javascript ```
Need to see your code, you could post a Github repo if you've got one or create a jsfiddle/jsbin.
Thank you, working hard on this vision
Nice work. I only wish I was smart enough to use it. 😁
That... is... insane. I hope you end up happy with what you did, when the dust settles.
Wow. Greensock is HEEEEAAAAAVY. For those who are interested in applying animations to their site, I highly recommend Anime. The functionality is great AND the documentation is excellent. 
I've created a 2d game engine based on GameMaker called **Minty.** It's less feature rich that engines like Crafty or Phaser, but it's unique because you write your own code instead of chaining a bunch of premade functions together. Since it's based on GM, most GM tutorial can easily translate to Minty. [Minty](https://github.com/AnXPyDev/minty) [I also created an example top-down shooter game.](https://drive.google.com/open?id=1lnpQ-SJTMWNksVT0BtnaoTUVd3EKhq8y)
Just to give credit to the person to the person who compiled most of these links originally, this comment is mainly copied from here: [https://www.reddit.com/r/javascript/comments/8cx2dz/js\_community\_what\_blogssitespodcasts\_do\_you\_swear/dxiy2h6](https://www.reddit.com/r/javascript/comments/8cx2dz/js_community_what_blogssitespodcasts_do_you_swear/dxiy2h6)
You're right, I'll see what I can here, I've been looking over the canvas and the measure text of it. I'll see if I can get something. Thank you very much my friend for clarifying me these doubts now I can walk and continue in the challenge to mount this Lib/editor:-) Thank you very much again.
I seem to remember Ryan Dahl presenting about talking about security in Deno and how it would protect against hypothetical situations like... a longer being compromised. 
I think that’s probably a valid concern
I think the article is genious the way its written :)
That's why I said "has been"
God bless you!
Yep, couldn’t find that comment when I posted this
thanks! any other tips? here is my js - https://pastebin.com/g19WpfAy
I turned this into a [list on Twitter](https://twitter.com/roginfarrer/lists/web?s=09), if anyone is interested! 
Hey thanks!
“Sorry that list doesn’t exist”
Whoops, fixed! 
Strange, I can't reproduce this. Device and browser?
Someone get this man a grant and/or a team.
Wouldn’t emscripten and similar projects make this a lot easier than doing it all by hand?
Thanks Casey))
Chrome 67, Ubuntu 18.04.
The situation is more complicated than that :D but we don't have a choice as it's the client demand/conditions for security purposes.
I tried to do that, but my FF couldn't open this editor as it's not connected to internet haha, it sucks 
Security breach :D i think you want me to lose my job hahaha Thank you for your replay (y)
It's an ongoing subject now, but not sure our client will approve this. Thx
Webassembly is not always faster then JS, as of this writing, JS is faster when doing simple scalar addition (a+b, for example). Also the SIMD instructions in web assembly only can process 2 vector 64 bit elements. Non trivial use of BLASjs processes large datasets (linear regression) "blasjs" routines are manually optimized for JS and to use TypedArrays. Yes I am writing a web page where we gather performance metrics from mobile and desktop browsers. There will prolly be a webgl "shaderBLAS" version in the near future, the tests so far are looking very promising.
Wow. That's amazing.
Amazing!
Beginning to program is very hard. Not only is it all theoretically complicated, but also hard to do at every step of it. When you are looking back, you often can't really understand what exactly the problem was. It gets easier over time. Languages are similar to each other, lots of "this is like that only...", but I can see how that doesn't really help now. Doing something is always more difficult than reading up on something. To this day, when I learn something new, I only trust my knowledge when I repeated all the steps by myself. Repetition helps, maybe the Udemy course just is too complicated at that point, or explains something in a weird order or phrased ambiguously. Can't really say. Maybe try some other course and see if it "clicks" then?
This course has actually been great so far. I think it's more around myself not fully grasping the concepts than it is the instructor not doing a good job at teaching it. Something that has helped me a little is completing the challenges, but also doing a couple of my own challenges to solidify it a little more. I get the whole "it takes time" bit -- when I first looked at HTML/CSS years ago, I thought to myself "How will I ever learn this?" But I did. The most important part, I think, is just refusing to quit and understanding that you may need to repeat sections a few times to understand them. Thanks for the feedback!
I very much related to the part about watching the instructor and it makes sense, then when its time for the challenge blanking. I think this is a normal learning process. Learn, try to apply, recognize there are holes in what you thought you learned, repeat. Keep going, and dont expect to understand it all right away, or be an expert overnight.
It is impossible to help without seeing your code. Here's what to do. 1. Go to [https://jsfiddle.net/](https://jsfiddle.net/). This is a playground in which you can build, test, and share small programs. There are four areas, one each for HTML, CSS, and JavaScript, and one result area which shows you what the resulting web page looks like. 2. Adapt your program to work in JSFiddle. Set up just enough HTML, CSS, and JavaScript to demonstrate the problem you're seeing. Once you've successfully replicated your problem, use the top navigation bar to save your example, and edit your post to link to it.
Tetris with keyboard, mouse and touch controls: [https://robbiebrandrick.github.io/Tetris.html](https://robbiebrandrick.github.io/Tetris.html)
I can totally relate to your post. Seeing something done and thinking yeah that makes sense, then trying to do something yourself and drawing a blank. I've found it helpful for me when I'm stuck is to look for videos on youtube that explain the concept but from a different instructor. Often I'll hear the concept from a different point of view and it will sink in better. Also, just repetition in general and taking on mini projects that implement your current knowledge will help the information sink in better. Having an actual person to discuss concepts with too is really helpful but not always available. I'm currently a month into my coding bootcamp and it is awesome having instructors to guide you, would recommend a boot camp if you could
Your frustration is normal. I'm 3/4ths of the way through a CS degree, and I'm still struggling to make my own things. Right now my battle is with promises. Here's my advice. Check out [https://exercism.io/](https://exercism.io/). There you can find lots of exercises and, this is key, *view other people's solutions*! This is incredibly helpful because it lets you see multiple ways of solving the same problem. Grasping more than one solution will give you insights that help you write your own solutions. If you have trouble setting up Exercism, message me and I'll try to help.
I can totally relate to your post. Seeing something done and thinking yeah that makes sense, then trying to do something yourself and drawing a blank. I've found it helpful for me when I'm stuck is to look for videos on youtube that explain the concept but from a different instructor. Often I'll hear the concept from a different point of view and it will sink in better. Also, just repetition in general and taking on mini projects that implement your current knowledge will help the information sink in better. Having an actual person to discuss concepts with too is really helpful but not always available. I'm currently a month into my coding bootcamp and it is awesome having instructors to guide you, would recommend a boot camp if you could
Front end dev's first foray into React, if I had to guess.
Recently completed the calculator project myself, can be very tricky. The solution for your problem depends on a few things, are you storing your numbers as strings or numbers? I stored mine as strings in an array, any time a button was pressed I used !isNaN array[array.length-1] which basically checked if the last input into the array was a number, if it was then concatenate the two numbers, else the last input was an operator then add it to the array. Something to that effect, hard to get into it without seeing the code tho, hope this helps
Could you not call an Applescript to do this?
Interesting solution. I'll keep that one in mind.
This is very impressive. Can't wait to try it out
Thanks
I've been in the process of open-sourcing a bunch of my code (sharing on GitHub, publishing to NPM, etc.). [react-multi-context](https://github.com/CharlesStover/react-multi-context) - manage multiple React 16 contexts with a single component [react-object-prop](https://github.com/CharlesStover/react-object-prop) - "memoize" object props in React to prevent re-rendering [mssql-query-builder](https://github.com/CharlesStover/mssql-query-builder) - JavaScript query builder for Microsoft SQL Server [thunk-action-creator](https://github.com/CharlesStover/thunk-action-creator) - create standardized, four-part asynchronous `fetch` actions for redux-thunk. There's really just more new repos than I can mention, so just throwing out these bad boys for feedback.
This is amazing!! How long did it take you to build this?
Whoa. I do javascript for web dev and R for data science/statistic. This is very awesome. You're crazy awesome a madman. How do you represent missing data and factor? Null and a class? Are you planning to get dataframe in javascript too? Super interesting project. I'm bias of R but I'm sure this will be really really useful for people who wants to do datascience in javascript.
Thanks! I don't know because I didn't keep track of the time, but the commits range over a week.
Funny, I just tested my site and found I had the same problem! I'm using VueJs, are you using a framework?
Good thing I wasn’t trying to convince anyone just adding into the conversation then. Ultimately it’s your responsibility to research which tool is the best for the job and Node wins on certain metrics whether you are convinced or not.
I was totally wrong here.
I find it curious that someone writing the spec would say JavaScript has classes when every documentation I can find says they are syntactic sugar and not actual classes.
&gt; to help integrate myself into the real world of open source and what it entails. The best way to do this is to start by contributing to existing projects 
I guess since I never use classical inheritance I have never seen a benefit for looking down the chain. I was definitely not right on the instanceof thing. And this something something I/O is actually real and in those instances Node would outperform just about anything that doesn’t use streams, perhaps Java uses streams for I/O I’m not sure. 
Post them on various subreddits, slack groups, Twitter. If your projects don’t get the attention you think they deserve, maybe they’re not interesting or useful enough. Keep at it and eventually you’ll write something cool and interesting and people will start noticing on their own. But even if they don’t, that’s fine, because doing open source is fun :p
Do you have subreddits and Slack groups you'd recommend? I've been using /r/reactjs and /r/nodejs, but there's not a lot of activity on them.
Here's a sneak peek of /r/reactjs using the [top posts](https://np.reddit.com/r/reactjs/top/?sort=top&amp;t=year) of the year! \#1: [This killed me (also happy friday!)](https://i.redd.it/ljt9cseotrk01.png) | [133 comments](https://np.reddit.com/r/reactjs/comments/838bta/this_killed_me_also_happy_friday/) \#2: [React Developer Map by adam-golab](https://i.redd.it/bxqfeurgfh711.png) | [110 comments](https://np.reddit.com/r/reactjs/comments/8vglo0/react_developer_map_by_adamgolab/) \#3: [This YouTuber (Ben Awad) has been posting videos on React, PostreSQL, GraphQL, Apollo and more for about 3 years. His recent series on React and GraphQL was 73 videos long a day well over 15 hours of material. His channel deserves more views guys](https://www.youtube.com/playlist?list=PLN3n1USn4xlkdRlq3VZ1sT6SGW0-yajjL) | [35 comments](https://np.reddit.com/r/reactjs/comments/896bi4/this_youtuber_ben_awad_has_been_posting_videos_on/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
I would suggest posting projects on r/JavaScript, r/nodejs, r/reactjs, r/typescript, r/CoolGitHubProjects (depending on how relevant the projects are to each sub). The Reactiflux Discord is good too. I can’t recommend Slack groups as I’m only in a few local ones, but I’m sure there’s one for your city/geographic area. There are surely larger ones too if that’s your thing, but I wouldn’t know of any.
In addition to all the lovely comments already made, you can kind of avoid the scenario of passing `undefined` around if you just re-order your parameters or use object literals to simulate named parameters. Re-ordering parameters is simple enough - let's say you have a function like this, which gets a paginated REST collection from a remote server: function getResource(offset, limit, resource) { offset = offset || 0; limit = limit || 10; return http.get(`${baseURL}/${resource}?offset=${offset}&amp;limit=${limit}`); } You would be forced to pass in \`offset\` and \`limit\` each time just to get \`posts\` - even if the default values are what you want: getResource(undefined, undefined, 'posts'); In this scenario, it makes more sense to re-order the parameters such that the resource is supplied first and optional values come last: function getResource(resource, offset, limit) { offset = offset || 0; limit = limit || 10; return http.get(`${baseURL}/${resource}?offset=${offset}&amp;limit=${limit}`); } Now you can simply call `getResource('posts')` and the default values are implied. When your function requires more arguments, making it more difficult to re-order parameters, you can instead use a "named arguments" approach using object literals. Keeping with the \`getResource\` example, let's amend it to accept a \`fields\` parameter (which limits the specified member fields of each returned post) and an \`includes\` parameter, which converts embedded relation ID's to their entity values. function getResource(resource, offset, limit, fields, includes) { offset = typeof offset !== 'undefined' ? offset : 0; limit = typeof limit !== 'undefined' ? limit : 10; fields = typeof fields !== 'undefined' ? fields : []; includes = typeof includes !== 'undefined' ? includes : []; let endpoint = `${baseURL}/${resource}?offset=${offset}&amp;limit=${limit}`; if (fields.length) { endpoint += `&amp;fields=${fields.join(',')}`; } if (includes.length) { endpoint += `&amp;includes=${includes.join(',')`; } return http.get(endpoint); } You can already see that this code is somewhat problematic due to the duplication involved in handling parameters that are \`undefined\`, but another problem occurs when we want to pass an \`includes\` field (for example, to tell each \`post\` to refer to the \`author\` rather than just referencing the \`author\`'s \`id\`), but we want the rest of the parameters to maintain their defaults: getResource('posts', undefined, undefined, undefined, ['author']); This kind of duplication can be cleanly solved using named parameters (which we fake by passing an object as the only parameter) and using \`Object.assign\` to merge the provided options into some sane defaults. function getResource(options) { let defaultOptions = { limit: 10, offset: 0, fields: [], includes: [] }; const settings = Object.assign({}, defaultOptions, options); const { resource, offset, limit, fields, includes } = settings; let endpoint = `${baseURL}/${resource}?offset=${offset}&amp;limit=${limit}`; if (fields.length) { endpoint += `&amp;fields=${fields.join(',')}`; } if (includes.length) { endpoint += `&amp;includes=${includes.join(',')`; } return http.get(endpoint); } Now, we can cleanly provide only the parameters we want to provide: getResource({ resource: 'posts', includes: ['author'] });
I second this as well. You’ll learn a ton and meet and talk to a lot of people by contributing to existing projects. 
In general, while you can ask the internet for answers (which may or may not be right), I believe the best approach is to understand where to get the definitive answer to your question. In this case, It is by going to the Javascript Specification, which is confusingly called Ecmascript. An easier to read alternative is the Mozilla developer Network, https://developer.mozilla.org/en-US/docs/Web/JavaScript There is a certain amount of computer-sciency vocabulary that is needed to read these type of docs, but it should pay off to learn it. The MDN documentation is considered to be of very high quality, and in my opinion should be the first port of call rather than just googling for the answer. Also, you should realize that this is generated code. A human didn't write this, it was generated by the Typescript compiler. Here's the original Typescript file. https://github.com/cosinekitty/flywheel/blob/master/src/flywheel.ts The typescript compiler has generated code to implement the 'extends' object-oriented feature. Extends means you want to create a subclass which extends the function of a superclass. You want to copy all the functions and properties of the superclass into the subclass, and then later you would add additional functions and properties to the subclass. &gt; var __extends = &gt; (this &amp;&amp; this.__extends) The &amp;&amp; is an ['and' operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators), I suspect you know this, but here it's used to first check that this is defined, and secondly will evaluate to the this.__extends definition, if it is defined. If so, the rest of the expression after the || will not be executed. It's called short-circuiting. &gt; || function (d, b) { Here you are running into problems because you are trying to read generated code which has very poor variable names. But in this case d means this subclass that we are trying to create, and b means the superclass. (I figured this out by looking at the following line, which is looping over properties in b and copying them into d, which is the behavior I would expect in an 'extends' type of function) &gt; for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [cosinekitty/flywheel/.../**flywheel.ts** (master → 711fec7)](https://github.com/cosinekitty/flywheel/blob/711fec78aae41cecfef5b50a461677fab3b34849/src/flywheel.ts) ---- 
Are you by chance in pharma? 
Correct me if I'm wrong, but isn't JS really bad for CPU bound operations? Doing any kind of meaningful data transformations at scale can be rather slow.
Okay, do you need to know the height of every single line at the first moment? If not, you could calculate the first 500 rows, and in the next frame (or whenever you have time(!)) the next 500 rows. You never add all the rows to the DOM at the same time, if you know that row 500 has an offsetTop of 5923 and is 17 pixel high, you can simply add 5923+17=5940 to the offsetTops of rows 501-1000. Breaking it up in smaller pieces is nice, and should simplify the problem.
Last time I did this, I didn't find a good measurement library (there are good ones now), so I cobbled together a component I called InvisibleRuler. I wrote it to accept a collection to render, and the list component I wanted to render to once I knew the heights. I gave it a hash to store each element's height in. Then I ran through the collection in batches of 75 (arbitrary number that was adjustable for performance needs) rendering them into a hidden div with the same dimensions as my end container so all the line breaks would be the same as the final output. On render of each batch I looped over the elements in my hidden div, storing the height in my hash. Once it ran through the whole collection, the invisible ruler rendered the list component I needed the dynamic heights for, passing my hash of dynamic heights through with it. 
Very shortsighted comment. It’s best to know both as you will see both in the wild. There is no silver bullet - they both have their problems. If you buy in to the dogma of only one you will certainly regret that more than anything.
This is the key. There is no one thing that every one is going to agree on. On a team of 30 or more people, different personality types and different aesthetic sensibilities are bound to exist. Welcome to the only actual difficult problem in software: how to organize groups of people.
Yeah, good point. Thanks.
Glad to see we’re all saying the same thing here
There could be a couple reasons for that. 1. It could partly be that you're inferring more than what the documentation actually says. You linked to an MDN page, for example, to back up your claim that JS does not have classes. But the MDN page doesn't actually say that. What it says is, "The class syntax does not introduce a new object-oriented inheritance model," and that statement is not the same as saying classes are fake. Classes can be real **and** the inheritance model can be objects linked to other objects. Classes in both Python and Ruby, for example, also work that way. In Python and Ruby, classes are themselves memory consuming objects, and inheritance from instance to class to superclass is done by delegation, just like in JavaScript. That JavaScript classes use the same inheritance model does not imply those classes are fake. 2. It could also partly be that, for a long time now, MDN has been a wiki. Literally anyone can make changes. In one sense that's good; it allows more content to be created and updated more rapidly. But it's also bad because it means content on MDN is more likely to reflect the opinion of popular bloggers than the opinion of our best experts. [Here's one spot](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain$compare?to=1066396&amp;from=1065292), for example, where I had to remove a popular blogger claim from MDN because it was outright wrong, and I provided a code sample to demonstrate it was wrong. Overall, MDN is still a great resource, but the days are gone where it's authored by the same people who author the language itself. If anything, since we have a clear statement that we can cite from a spec editor, it would be reasonable to update MDN -- both of us can do so -- to say explicitly that JavaScript's classes are real, with a citation to the spec editor's statement.
Thank god there are some sensible answers in here. Programming paradigms can always be abused and misused. We’re still better off than we were when we wrote machine code directly, and we’re learning more on each project. If FP was the one true answer, then Lisp and Erlang would have already been the de facto tools on every project. They both have industry-proven implementations and frankly were incredibly ahead of their time. As it turns out, you can get just as much spaghetti and complexity with functions as you’re only level of abstraction. Humans don’t need any help in creating complexity. The other thing to consider is that OO in the form of Java and C++ is extremely far off from the original intention. FP and true OO should not be at odds, and Ruby and JS do a good job of showing that they can play together. It’s a bit of a long, dense read (this is Alan Kay’s downfall), but Alan Kay has commented on his respect of FP and Lisp and he meant for OO and Smalltalk to borrow from its ideas: https://news.ycombinator.com/item?id=11808551 So my advice is to always stop looking for a silver bullet. As long as we want compact behavior, there will be complexity of software. There are ways to wrangle that complexity, and there are many patterns that have a point of view on it. Don’t become religious. Following dogma should have no place in this industry. Figure out if it truly is possible to express your solution clearly and without complexity in your current language. Hint: it may require refactoring the current code before you can do it. Switching tools won’t solve problems for you.
You might want to try /r/node instead of /r/nodejs
1. That is saying that classes are fake because if there is no new model that has been introduced, it is still the old model which did not have classes. You have to implement classes by hand if you want to use something that resembles classes from other languages (if you aren't using ES6 which is the assumption if we're talking about before class syntax). JavaScript inheritance doesn't use classes at all so using them in your code is why the classes are fake. Because no matter if you implement them yourself by hand or is you use the new ES6 syntax, it's just syntax. It isn't actually a class. On the MDN website they actually show you what they look like transpiled down to ES5 code and you can see for yourself that it's being faked. 2. I didn't realize that MDN was a wiki so that's good information to have. My main point I guess is that you can try to force JS to do classical inheritance, where you have a class (the blue print) than instantiate that class to get an instance of it and use that instance but that's not at all necessary because class don't need to be instantiated in JS. They are all just objects ready to be used.
Not sure we are
This is nice. 
I agree
[https://github.com/ffleet/shim](https://github.com/ffleet/shim) This is an AWS Lambda shim library for providing a more useful/standardized handler function API. I am also happy to report that we are finally accepting beta users to our new serverless platform ([https://ffleet.io](https://ffleet.io)). Please check it out if you are interested in a hosted/all-in-one serverless solution. We appreciate all feedback! \- Matt
For future reference, you can also wrap a function in `$( ... )` to have it run on DOM load, as per [the docs](https://api.jquery.com/jQuery/#jQuery3).
&gt;DOM load, as per &gt; &gt;the docs &gt; &gt;. I see. That's sounds new to me. Will definitely check it out. 
Be careful when doing something like this. Your API might be type checked at compile time, but anyone can contact your server with any data. So you still need to perform all the checks that you would normally perform. Relying on types here can make you lazy when coding your server. TypeScript in this instance just means that you save a few back and forth while coding your client. The server should do the same `typeof x == “object” &amp;&amp; typeof x.y == “string”` as usual. Although one way to make this better is using json schemas then generating the interface for TypeScript using the schema as source of truth. 
Thanks, I guess? I wouldn't be asking here if I could or wanted to re-order the arguments or make other suggested changes.
Honestly, I’m starting to this the answer to that is “because it’s the npm team and they don’t know how to design software”. “Postpublish runs after install... why?” - “because it’s the npm team.” “Their lockfile isn’t used on install and instead is updated which means it’s not locked... why?” - because npm. “They don’t have 2FA for package release... why?” - because npm, but at least now they do. “They don’t allow publishers to sign packages... why?” - npm. “They don’t allow to unpublished a corrupted version...” - npm. “They don’t allow forcing a version of a dependency of a dependency” - npm. “They npm link on npm install with a path if you’re packed.” - npm. “I can’t pick to not install an optional dependency if my system supports it.” “I can’t use a JavaScript API for npm (how to publish a tag for example).” “The cache isn’t used as source of truth and packages are still processed from the registry.” “I can’t kill a package I have to publish a bad version when changing names.” “I can’t ng update across major even if I specify a diet tag.” Etc. 
That is some terribly written code
[https://github.com/neutralinojs/neutralinojs/releases/tag/v1.0.2-beta](https://github.com/neutralinojs/neutralinojs/releases/tag/v1.0.2-beta)
Nice diagrams in this article, I always have to refer back to a reference guide whenever I want to do some styling with flexbox, something about feels unintuitive. Obligatory shout out to [Flexbox Froggy](https://flexboxfroggy.com/) if you want a (cute) interactive tutorial.
I was in a similar situation in my last job. We were using vanilla JS with Jquery. Basic functionality used to work fine in IE8 but debugging in it was a nightmare. Some code level things we used to be very careful are 1) Always check for hasownproperty in for..in loop. 2) Never have extra comma at the end of object. IE8 had this weird bug where it would get the length of the array using comma in the array and hence extra comma would blow the code. 3) Used Jquery for DOM as it had a good compatibility for diff browsers. 4) Some newer things were never supported like file upload progress (uses progress event on ajax request which IE8 does not have) Hope this helps. 
submarine
Great tutorial 
I have tested with the following snippet, looks like object's value can be accessed by int. ```javascript function Test() { this[2] = 2; this.getTwo = function() { return this[2]; } return this; } var test = new Test(); console.log(test[2]); console.log(test.getTwo()); ```
/me raises hand. I need this too! I have upvoted these here post, in an effort to promote it.
Do you do anything to prevent the scroll bar position/size shifting if heights aren't evenly distributed?
If it is for education purposes have at it. However, for anything serious, unless you can justify having a smaller code base (which is probably negligible, idk the size of JQuery), but I wouldn’t attempt to reproduce what jquery has spent years doing... also, you don’t need jquery, which is probably your point, everything can be done with bare JavaScript.... also these days, there may be better jquery competitors.... Good luck!
Thank you! 
&gt; Node would outperform just about anything that doesn’t use streams, perhaps Java uses streams for I/O I’m not sure. Do people really think Node invented non-blocking I/O or something? 
No just that it uses it.
It’s not really a problem. Consider who you’re actually trying to protect against. For example, in Python, the convention is that anything that begins with an underscore is private and so used at your own risk.
TypeScript PM here - you can think of `private` as a "soft" design-time private. Eventually ECMAScript will support something for classes though. &gt; Is this a big deal? Depends who you ask! It's often helpful for the community to experiment (while acknowledging their code may break). &gt; I'm used to closures where I can obscure data at runtime. That works too! That's what we do in the compiler. `function`s closed over state, returning the public API.
Do people really think that Node is the only thing that uses non-blocking I/O? Jesus, the propaganda has been effective. `java.nio` (which implements non-blocking primitives) was added to the language in *2002* and updated to its current state in 2011. Take a gander at the TechEmpower benchmarks I linked if you really think Node beats a lot of things out when it comes to I/O. 
I’m on mobile but I don’t see a link.
Oh sorry, here: https://www.techempower.com/benchmarks/#section=data-r16&amp;hw=ph&amp;test=json&amp;l=hra073 TechEmpower has six benchmarks which cover different sorts of server operations - plain responses, querying a DB, server rendering and JSON serialization - across hundreds of language platforms and frameworks. I've filtered it to only show Java and JS, so you can see for yourself how Node stacks up against various Java frameworks in practice (and also see how far down the list a microframework like Express is compared to a microframework like vertx). 
Thanks the the reply Daniel. Was just watching you on youtube :) &gt;That works too! That's what we do in the compiler. functions closed over state, returning the public API. Could you elaborate on this ^ ? I'm aware I can mix closures and TypeScript but I'm not aware of any pattern that lets me use the the **private** keyword in conjunction with a closure. Typescript is pretty picky about what you can do inside of class objects. I even tried mixing JsDoc syntax with typescript by using the // @ts-check flag. However I cant mix the two. For example if I @typdef in JsDoc I can't then use Typescript syntax with that JsDoc object. I'm probably just coming up with antipatterns but I just wanted to make sure there was no good solution before giving up. 
[Piexifjs](https://github.com/hMatoba/piexifjs) should be what you want if I am not mistaken. /u/cgijoe_jhuckaby
Well, a LOT of frontend job doesn't require any 'artistic' skills. Most of the time you'll work on implementing what a designer did.
I would have thought this is what WASM would be really good at.
You do have MEAN and MERN stacks that are popular today. In both, JavaScript is used both in Frontend and Backend.
I'd like to think that if a package solves a problem worth solving and solves it well, it will get used by many. How do you feel about worrying less about popularizing your projects and spend more time making them better? After all, software exists to solve problems not to popularize itself for its own sake. That said maybe it'd be helpful to give a talk in your local tech communities, or reaching out to people who seem to have a problem you're solving. 
Thanks a lot guys!
R-vascript
Oh thanks a lot ! Can you also explain why my little test in the console didn’t work as expected ?😘
Coool
Would I know the best competitor out there ? I don’t touch JavaScript a lot , thanks !
How well do you know serverless / graphql and how large is the project for you? eg are you about to undertake one of your biggest projects yet on tech you've never used?
**Falcon** \- [https://github.com/skeithtan/falcon](https://github.com/skeithtan/falcon) It's a project I've been working on for Philippine Normal University's Faculty of Arts and Languages. It's not designed for public use, but it is open source. It's built on React, Redux, Material-UI, MongoDB, Mongoose, GraphQL, Apollo Client, Node.js, and Express. 
Yes. Having it is a bonus in many roles, but you can 
I am a big fan of CSS Grid since it's now available for almost all modern browsers. Way more intuitive if you ask me. But of course not the same concept as flex box.
Cryptocurrency portfolio CLI with auto-refresh. Looking to add more features soon so willing to take on any suggestions people may have. [https://github.com/dshaw1/cryptfolio-cli](https://github.com/dshaw1/cryptfolio-cli)
First of all, congratulations on making progress with Javascript! As you rightly point out, JS is a key part of modern web development and has been since the late 90s. To be a frontend web developer in 2018, you'll probably want to learn html, css and Javascript as they're _all_ core technologies for the browser and you'll be limited in what you can create working as a solo developer without all three. However, not all JS is written for web browsers! Since Node.js was developed in '09, it's been possible to create applications that run outside the browser using Javascript. This can range from the backend of huge web applications like PayPal or Netflix (see a whole bunch of examples [here](https://stackshare.io/nodejs)) to tools for the command line like [NPM](https://www.npmjs.com/). If I'm interviewing engineers for web developer positions, I'll usually make a point of asking where they see themselves on the spectrum from "building application functionality" to "implementing design", and the results are pretty varied but most people skew towards functionality. Personally, I find being _good_ at CSS is actually harder than being good at JS, but the point I'm making here is that you're definitely not alone. Another think I think is worth noting is that, even though I'm the lead frontend engineer where I work, I have basically zero artistic ability. In my own experience, people expect designers to design things, and engineers to engineer them. I have a _lot_ of interaction with designers, but I'm not expected to design things - just to know how to get the designs into the browser. In summary: * you have a whole bunch of employability as a Javascript engineer without being artistic * if you want to build the frontend part of websites/web applications, you should expect to learn CSS * if you want to build things in Javascript and you don't want to learn CSS, look into Node.js and backend development in general. Alternatively try to join a team large/specialised enough that other people will handle design implementation and you can focus purely on building the application logic, but this might be challenging to find.
You need to show more snippet on the scope how your code failed.
In chrome console: this\["a"\] = "abc" this\["a"\] --&gt; shows 'abc' this\[1\] = 1 this\[1\] --&gt; shows undefined i dont know why it acts like this :) thanks!
Cool, pattern matching is something I really started to like while learning Rust.
If you need a "smaller" jquer I can reccoment [Zepto.js](http://zeptojs.com/) or [minified.js](http://minifiedjs.com/). Both are similar to jQuery but much more light weight. If you are doing this out of curiosity or fun `document.querySelector`, `HTMLElement.prototype`, `Object.assign` and `Array.from` might be helpful. Happy coding!
JS (v8 engine) outperforms python by a factor of 3-5 and sometimes more. Python is regarded as a "datascience langauge" , https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/node-python3.html
Very nice, except that I think the higher order function should be the other way round, in order to make the most out of partial application. It should be “iteratee first, data last” just like lodash fp for example
banking and communications mostly, Do you have a perticular use-case you would like to use the libs? my email is in my git profile
Nice one!
Thanks for your reply ! I will check them out !
This reminds me of \`cond()\` function in Ramda but with a slightly cleaner syntax. [https://ramdajs.com/docs/#cond](https://ramdajs.com/docs/#cond)
Thanks, I am working in an R-transpiler (similar to scala.js). Also I want to add distributed computing at a later stage (your Samsung/Iphone is already VR capable device) so imagine turning idle cycles of 10K phones into a fluid dynamics compute effort, something that is extremely costly on a CRAY super computer.
Thanks, let me know if you need any help
That’s pretty cool. It’s a nice functional/composable alternative to the imperative syntax used in the tc39 proposal https://github.com/tc39/proposal-pattern-matching
Always keep these limitations in mind, and make sure they are never a security problem when exploited, only an integrity one. On the other hand, if you are using typescript for "OOP", there are alternatives.
Does this also work when transpiling your code? It seems that it uses `function.toString` under the hood, but transpilers will strip much of the essential parts away.
Good question. The match definitions based on parameter defaults seem pretty magical. It would be interesting to see some explanation of how that works along with any pitfalls, gotchas or performance implications.
This alias would automatically detect a `.nvmrc` file in the directory you're `cd`ing into, and switch to that version. And when you `cd` back, it will automatically switch back to the `default` version.
That works differently when `lowestFirstItem` is 0 and `item` &gt; 0.
Love it. When I use a language without pattern matching, this is the feature I miss the most, hands-down.
People can't magically know that your package exists. The question is where do you go to find people who are having the problem you are solving. So far, the answers are reddit, Slack, Discord.
Good luck coming up with a proper sandbox mechanism from scratch that prevents all malicious intent.
This is a huge security risk, and you should not allow it.
I'm not sure there's a way to prevent users from breaking down a sandbox with their devtools. Mind you, most mods typically allow some form of "cheating" so you may be OK with that. I think what you need to watch out for is general security, i.e. don't host scripts, thus subjected to XSS. But in general, yea pretty bad idea. Maybe try something smaller like a config file that changes game variables. Once you open up an execution context it gets considerably harder to secure.
How do moddable games that allow users to make custom mods with scripts get away with it? Especiallly minecraft mods.
Minecraft mods directly modify the executable. Some games provide APIs you can use to write your mods e.g. Don't Starve. Installing any mods poses a security risk and there is no way around it - they are code run on players' computers. 
I think allowing users to submit raw code is a bad idea for two big reasons: 1. If the code is executed on the server, now your server is exposed. 2. If the code is distributed to the clients, now all your clients are exposed. I think if you want mods, you have two paths, and both are going to be a lot of work: 1. Allow code, but it has to be white-listed. That means you or some other people need to go through each mod's code and ensure that it in no way could ever cause a problem on your server or for clients. 2. Find another way to process custom data. One great way is to design an action/response mechanism that could allow a modder to compose multiple pre-build actions. This constrains what they can do, but also means no one could write anything you, as the game developer, don't already allow. Think in terms of the Redux library, or the Elm language. A mod could be reduced to a json payload: `{ 'message-to-receive', [{ action: 'message-to-send', someVariableToPass: 'gameState.thing' }] }`. With this mod, every time `message-to-receive` is send through your game event loop, it will generate a new `message-to-send` and pass any extra data with that payload, in this case, `someVariabelToPass`. This helps you not leak unnecessary data to the modder, and really restricts what a mod can do, especially not allowing a mod to call a method.
This seems like a good chance to sharpen my understanding of the imperative/declarative dichotomy. Can someone ELI5 what makes each example fall into their respective categories?
So mods that modify or add more code are inherently unsafe, but judging by their popularity nonetheless, does it mean it is ok to implement such mods? I am going to take very cautious steps, such as implement a separate ECMA script environment rather than using JS for custom user scripts.
Do you know any good example of an action/response mechanism in other games that allow modding? Also games such as Minecraft allow modders full access to all Java code, allowing massive potential risks in using mods yet people still use them anyway. (Not that this would justify my cause though)
Yeah, a lot of pharmacometrics analyses are still done using fortran, and of course R. I do have a use case, actually. I’ll hit you up this week.
&gt; Yeah, a lot of pharmacometrics analyses are still done using fortran, and of course R. &gt; &gt; I do have a use case, actually. I’ll hit you up this wee Very interesting, my email is in my github-profile 
I believe cond is based on haskell pattern matching. pattern matching is much more powerful, so if you like cond(), you will love pattern matching.
&gt; I can imagine issues occurring if scripts are written outside typescript that mess with private members. If your concern is security-related, TS is no worse than JS (neither have any run-time security built in). As to concerns about people using your library incorrectly, if someone isn't using a compiler to enforce information hiding, that is on *them*, not you. This applies to all statically typed languages, not just Typescript.
Kinda cool. Should just be a feature of nvm though right?
How are you distributing the game? How are you planning to apply mods? That's going to help you make the most informed security decision.
I don't have time to dig through the source code... can someone explain how the matching actually works? I can only see using something like \`Function.prototype.toString\` to handle this, but obviously that's super brittle.
So how do I set up the back-end? You said it's simple but certainly not more simple than setting up what you have laid out here for the create-react-app portion. 
You made me look. It seems like a few people already had that idea and made a few PRs: * https://github.com/creationix/nvm/pull/1108 * https://github.com/creationix/nvm/pull/1677 * https://github.com/creationix/nvm/pull/1678 From looking at them, it seems like I should be using `$@` instead of `$1`.
the toString is hidden in dep `js-function-reflector`, here: https://github.com/arrizalamin/js-function-reflector/blob/master/index.js
In bash, `$@` gets the arguments as an array (of strings), `$*` gets it as a one string, `$#` is the number of arguments and `$1` gets the first argument passed in.
Just control then adequately from a security perspective. I built a unity game and enabled JS mods. Have some process to do it securely. Security first... unless they can only play locally, then the worst they can do is mess their own environment up.
Hi /u/MadEmperorYuri, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/mutantdustbunny, this post is off-topic. Another such off-topic post will result in your removal from the subreddit. Thanks for your understanding.
&gt;How do promises actually work? Hey, thanks for the pointer!
Hi /u/ethanashtonn, For javascript help, please visit /r/LearnJavascript. Thank you!
The posted library uses regular functions, which is why it's composable. I could write a higher order function that produces functions that Z can use to match, then use that function to generate different matching function to pass into Z. The matching function Z exposes itself is a higher order function, so that could be easily composed with a filter or mapping function. The gist of it is that when you're dealing with normal functions, they can be composed and passed around. This contrasted with the tc39 proposal, which is a specialized imperative syntax. The different \`when\` statements aren't normal functions, I can't write a function to produce \`when\` statements. The syntax cannot be composed because it lives outside the world of functions. However, if implemented, the tc39 proposal would probably be faster executed. The Z library parses the function text to understand the matching and does some level of dispatch all in JS code, while a JS interpreter that implements the tc39 proposal should have optimizations at the engine level to speed up execution. Hope this helped!
Hi /u/tencomm, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
Yeah it uses the `js-function-reflector` library to get the information, which itself uses `Function.prototype.toString`.
Bd
Yes, I should have used `$@` instead of `$1` because `cd` accepts options like `-L`.
This ultimately depends on the extent of what you would allow user submitted code to be able to do. Mods are inherintly a security nightmare, but at the end of the day if users are ok with taking that risk then that's on them (you take the same degree of risk every time you download a mod for any other game, or install an NPM package for example). The real issues arise though when you allow mods to affect OTHER players, or access parts of a game they shouldn't be. If a mod is able to send data to your server for example they could DOS your entire infrastructure, or embed malicious code onto anyone who access the server. So long as code stays on a singular client though, you should be alright. Also side note, it should say it right in the Node docs but DO NOT use Nodes VM module for running untrusted code, it's in no way a secure sandbox. If you do want to go that route try something like vm2
Helped a ton—thanks! Was my use of "declarative" incorrect? I think I've incorrectly been using functional/composable/declarative interchangeably. 
storing data
if you git clone the project locally, then perform an `npm install/yarn install` within the backend repo and run `yarn watch` or `npm run watch` then this should start up the backend project for you. This presumes that you have TypeScript installed on your machine though. Let me know if you need any additional help!
I think your usage is fine, but I wouldn’t lump composable, functional and declarative together necessarily. I think of functional and Object Oriented as being at ends of a spectrum. You can have composition in either case, though. Composition in OO is often implemented with the Mixin pattern. 
Naturally you will need to do your own investigations into this as it represents a significant security challenge. I am aware of a browser based game currently in development, [Bot Land](https://bot.land/), which allows users to write their own js scripts which determine how bots behave. I can't recall how Adam (the creator) implemented this, but he streams regularly on twitch ([adam13531](https://www.twitch.tv/adam13531)), so you might be able to get an answer from him?
My mind just melted. This is amazing. I can't wait to have every PR that utilizes this rejected for poor code readability
I'll ask for changes too. You just won my upvote.
thanks Ken :)
 var __extends = (this &amp;&amp; this.__extends) || function(childObject, parentObject) { for (var property in parentObject) { if (parentObject.hasOwnProperty(property)) { childObject[property] = parentObject[property]; } } function __() { this.constructor = childObject; } if (parentObject === null) { childObject.prototype = Object.create(parentObject); } else { __.prototype = parentObject.prototype; childObject.prototype = new __(); } }
From what I know you wouldn’t need to declare the function expandArray only the array. So the code works it’s just the let expandArray part.
Webdev is more MacGyver than Michelangelo. Most companies that want to have a fancy look hire a designer, you just implement the design.
a little simpler let o = { p: 'hello' }; let {['p']: n} = o; console.log(n);
Hmmh.. interesting. This looks impossible to read and maintain
Offline and background sync in combination with service workers.
This doesn't make much sense from a practical point of view. This falls into the category "because we can". If you only destructure a.days it looks less nasty. But during code review you have to prepare a good explanation for that. 
Actually it can make your code more reliable and readable eg we use it for accessing common properties in objects
I entered the comments thinking, I should say something about the legibility of this. Turns out this was a pretty unoriginal thought. So lets put a different spin... under what circumstances can this syntax be better than the alternative? I'm curious if the situation exists.
Well, if you have a lot of stores that are stored by ID: {} that share a common id you could use this inside a map for instance to destructure each item into single instance values Sorry if that’s not very clear. 
As a data store, it can be useful to cache data. One good use of storing data client side would be to have a service worker that periodically calls to the server for e.g. Reddit posts and comments or whatever (data you want to show the user). When the server hands the service worker some data, you can throw that in the client side db. Then you can lower the latency of showing a post's content or comments (since you already loaded them in the background). It also is sometimes good for mobile applications (if you have settings and avoid using all a user's non-unlimited data or burning through their battery) as connection can be spotty (so you can preload some posts+comments and the user can still do some browsing while they're offline). It can also be useful on the flip side - store some actions the user has taken while offline and take those actions when connection is available.
I like your tutorial! It might be helpful to provide examples of applications that would benefit from real-time communication. Chat apps are a good example.