In my last 2 companies vanilla JS does not even exists. It's all on TypeScript. I'd never go back to plain JS, it feels like something I would not even use for plain 20 locs hacking for a personal project tbh.
Apart from the other factors, e.g. preference, there’s an accessibility issue for those whose eyes suffer from astigmatism, which I believe is quite common. I recently discovered that my strong preference for light colour schemes could be related to my eyesight - I have only a mild astigmatism and so rarely wear my glasses to correct it, and have always found light-on-dark text easier to read. I never could understand what the dark theme hype was about, but I believe the following is a basic explanation of why this might be: lighter themes cause the iris aperture to narrow more and thus render a sharper image on the retina. Source: https://ux.stackexchange.com/questions/53264/dark-or-white-color-theme-is-better-for-the-eyes#53268
So where would then be the problem with "wannabe rockstars reinventing" something that clearly needs fixing?
I guess performance is not a problem for you? For me 2 monitors have been enough for 90% of the time as well. But for the 10% I needed them it was a little painful to not have [more real estate](https://www.google.com/url?sa=i&amp;source=images&amp;cd=&amp;ved=2ahUKEwijpvr5lofjAhUObVAKHXdVDOUQjRx6BAgBEAU&amp;url=https%3A%2F%2Fknowyourmeme.com%2Fmemes%2Fits-free-real-estate&amp;psig=AOvVaw3tgY2xWsBY_U75wNkmz2Zd&amp;ust=1561639589277514). &amp;#x200B; I'd say if you can afford it (both performance wise and financially) go for 3. It's better to have than to regret not having it. Also if you get tired of 3 you could always put one aside for some time.
I’d go with 2x. I have tried using three monitors (not 4K), and I found it less productive because of the distance your eyes need to travel. Stick with 2 facing slightly inwards imo
I have 4 3 are normal landscap orientation and the 4th is portrait so I can stretch out terminals and IDE's
That is a very interesting topic to which I don't have an immediate answer, therefore I just give some examples. One of my coworkers uses a single 32 Inch 4k Display and the other has 2x 27 Inch wqhd Displays of which one is tilted by 90 degrees. That's because he uses the horizontal display for general purpose tasks like surfing the web while the vertical one is primarily used for coding. Personally, I prefer having at least two 24-27 inch monitors, however currently I am also thinking of switching to one 4k 32 inch display. As I am very unsure myself, I am looking forward to what you guys recommend. From a budget po8nt of view I would go with two 27inch wqhd (maybe 4k) displays. Also does someone know if IPS or VA is better for coding.(Display technology).
I don't
/r/battlestations
Hi /u/CodeArtistry, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I just switch from 3 monitors to 2 monitors + much more desk space. The extra desk space means more room for writing, which I'm finding is more useful.
Hi /u/FonzTech, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I just switch from 3 monitors to 2 monitors + much more desk space. The extra desk space means more room for writing, which I'm finding is more useful.
\&gt; switching to one 4k 32 inch display. While 32" is tempting the pixel density with 4K is not that great, so I wonder if code stays crisp and clear then.
I was there 5 min ago and checked if people have 2 or 3. But the guys there are rather gamers.
Related to this: I do wonder why so many JavaScript developers are so infatuated with the `=&gt;` syntax. It's ugly as fuck, especially with something like `const foo =` prepended to it, and barely readable. It makes JavaScript look like Haskell, and nobody knows Haskell.
Which size are they and in which layout?
&gt;more room for writing you mean, taking notes?
&gt; Because it's the biggest ecosystem of all. Plus: building a new framework is easy. You can have something semi-working within hours.
IPS is great for colour contrast and viewing angles, but unless you have 4+ monitors you should be able to manage good viewing angles on all of them. So I don't really recommend going for IPS over VA, given the price difference between the panel types.
Yes, in a paper notebook.
I prefer coding and writing/reading documents in portrait, so I have one always in portrait and two others in landscape. Only 24" and HD though.
Do whatever you like, feels comfortable to you, nothing else matters, its your development environment. Personally I have 3 monitors at my desk and synced with the TV across the room. 1 monitor is vertical for email and server monitoring services which gives me the 2 for code and browser windows. Less then 3 is a real bitch for me since I have had this many.
At home I have 2x 27'' and a third smaller, old leftover with I think it 21''. Resulutions are 2x 1920x1080 and 1x 1680xwhatever. That's fine for the most part although I'll probably upgrade to 2x 4k rather soon than late. At work I have a brand new iMac with 5k and a secondary smaller screen that I don't really need in comparison.
It should still be good, if you use anti-aliasing. Don't use ClearType on such a high-res screen though.
&gt; And no, it wasn't "solved" in the days of native GUIs In my opinion, despite being the logic thing to be done and the final solution we should all run after, native GUIs are largely a *resounding* failure. This tragedy happened for two main reasons: 1. No one was able to create a non-cumbersome way to program native GUIs. All the native platforms I know are a real pain to work with when compared to web GUI development; and 2. The lack of a reasonable multiplatform solution. Although one can say you have stuff like [Qt](https://en.wikipedia.org/wiki/Qt_(software), frankly it's a hack horror show to make it work on all intended platforms. I blame the big companies here, for their inability to sit together and build a common ground (capitalism?).
Dark text actually is better for text-legibility. It's pretty easy to get 7:1 contrast ratio (WCAG Level AAA) with a dark background and still use color. But in bright environments (like offices or direct sunlight) a light background is sometimes easier to see. Generally you want a monitor that can display between 250-350 cd/m2 in bright office environments. Under these conditions, dark mode can actual cause eye-strain because of the contrast from the surroundings. There's also the point that more light into the eyes allow them to focus and see better. But of course, that's not ideal for all times. Later on the day, it's better to drop the color temperature (from 6500K), and/or use a dark theme.
Project Page (?): https://github.com/cpury/ai-against-humanity *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I find it less work to read dark text on light background. Dark backgrounds introduce visual noise for me.
Wow. I had no idea this exists (the JS/CSS APIs). That's incredible! Going to go poke our UX person and tell her we need to start designing with dark mode in mind. :D
Why not extend switch/case instead? There would be no confusion by using e.g. "case { ... ):", as that couldn't be anything other than a multi-value condition. On the other hand, in this case "with"/"if" would be almost as good, except "with" is not recommended: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with
Hi /u/po35, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Nowadays I’m using 2 27 1080p P2719H dell monitors, they’re great imo, and of course there’s the fact they’re free for me, so it’s a plus. But if you’re interested in a good cost benefit monitor, I’d totally say to buy this, and has a decent stand that’s not 1k
3x 27" 1440p here. It allows me to build and debug multiple projects at once by keeping several terminals open in one(left monitor) including at least two file managers open at once. In the middle I can have vscode open in one side and a browser in the other if I'm doing front end otherwise it's vscode full-screen. The third monitor on the right has a window for googling and another for general internet browsing and debugger tools including other windows in the background that I don't access often. Might be overkill to be honest but it's extremely productive.
Will be implementing this in anything new. Everyone else should, too. Nothing is more annoying than setting lightness preference on every site, or suddenly seeing a light theme on a dark theme device.
I quickly glazed over the GitHub. Does this store a cookie or any storage to keep it in dark mode for returning traffic?
I wouldn’t say native GUIs are a resounding failure. They most certainly got performance right, as evidenced by effectively all 3D graphics being rendered natively (think video games and Pixar). Most of the frameworks were created at a time where procedural OO was all the rage, so that definitely hasn’t aged well. Native developers say the same thing about building web UIs by the way. It’s not like HTML is the holy grail of UI development, it most certainly has its pain points right? Vertical centering in CSS before flexbox which is a recent development? Not great right. You can learn things from every platform / framework / language technology. Amazing ideas were developed in native GUI technology several decades before the web existed. Don’t reduce that to a “resounding failure.” That’s pretty shortsighted and offensive.
This is a good point that people don’t seem to realize.
&gt; Don’t reduce that to a “resounding failure.” They indeed got many things right, but it doesn't save it from being a failure. Otherwise, aggressive things like Electron wouldn't need to exist.
&gt; Why not extend switch/case instead? There would be no confusion by using e.g. "case { ... ):", as that couldn't be anything other than a multi-value condition. Says they want to use destructuring for the when clauses. Case uses the value of an expression. I'm not sure if you can count on it doing the right thing.
Hi /u/krazed_kieran, this post was removed. Well, this is awkward. This subreddit is for **javascript**, which is different than **Java**. In other words, `javascript !== java`. Maybe try one of these instead: * /r/Java * /r/JavaHelp * /r/LearnJava Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/haykerman, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FirstClassJS, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I prefer it, but even if I didn't, projection onto white boards/screens would be a huge reason to support it.
 function handleHttpResponse(res) { if (res.status === 200) { handleSuccess(res); } else if (res.status === 400) { handleBadRequest(res); } else if (res.status === 500) { handleServerError(res); } else { handleUnexpectedResponse(res); } } I kid you not, the last place I worked had a 20,000 line if/elseif block for their Perl URL response handler and this is bringing back bad memories.
True. That's the difference, but then we have the "with" argument.
Hello everyone! Last week I went through a Webpack Setup from scratch and documented everything along the way. Maybe it's useful for someone :)
it does not work really well. I tried on many of my sites and it worked on none of them.
Are the two mutually exclusive? I know lots of engineers that use their rigs for gaming as well.
Cheers man, I didn't realise my mistake
West, Jim West. Desperato.
Good stuff, but I fear it will lead to more devs violating Donald Knuth's famous "law": premature optimization is the root of all evil.
I use TypeScript whenever possible. Flow would be my second choice, though I still largely prefer TypeScript. The only time I wouldn't use TypeScript would be for small solo projects that I don't plan on maintaining for very long. One of my first jobs used TypeScript and I absolutely hated it at first. I didn't understand any of the errors I was getting and even writing simple functions felt infuriating and impossible. Then as time passed I came to realise and appreciate just how useful TypeScript is when you're dealing with code you didn't write. Need to check a definition? TypeScript points it to you straight away. Being able to read code is as important as being able to write it. In fact, to be honest I think anyone that dislikes TypeScript either hasn't really used it yet or hasn't really worked in a professional setting yet. Think of it this way: you might be a good coder who writes bug-free code (yeah, I used to think of myself that way too) but what about your teammates? All it takes is one guy to accidentally parse a credit card number from a string to an integer(not even a particularly egregious mistake to make) for weird bugs to happen. Weird bugs that YOU have to spend hours trying to troubleshoot. If I see code written in JavaScript... I just have to trust that it works. If I see code written in proper TypeScript (minimal any's)... I have far more faith.
Hi /u/ieyberg, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
This is definitely true, but then you have extreme cases like at my work, our Nightwatch integration tests take 16 hours to run synchronously. There are A LOT of tests, but even micro optimizations to page loads could reduce costs enormously.
It doesn’t, I didn’t want to too quickly build out features that users may not require. It is however setup so that if you wanted to add localStorage etc then you can still do that in your own app. I’ll definitely raise that in the issues though and see if anyone else is looking for this
Any particular issues to note? I’ve got a demo app that’s linked in the readme which seems to work nicely if that helps: - https://github.com/assortment/darkmodejs-demo - https://darkmodejs-demo.netlify.com/ If you can show me your implementation I’m happy to have a look and see if there’s any issues there.
Brilliant to hear! Love to hear what you think ☺️
Well, I bet the demo works. I'm trying it on other websites and most things become black and you can't read the text anymore. My browser is in dark mode FWIW.
You're absolutely right! I'm just thinking that's what the poster above me ment (y)
Lodash's cond, especially using FP variant can get your very very close to the pattern matching proposal [https://lodash.com/docs/4.17.11#cond](https://lodash.com/docs/4.17.11#cond) I'm using that quite often and the pattern is really good ``` const isCaseOne = input =&gt; isBusinessQuestion1(input)? true: false; const transformInputOne = input =&gt; doBusinessStuff(input); // ... add all your cases. const switchStatementOnSteroid = cond([ [isCaseOne, transformInputOne], [isCaseTwo, transformInputTwo] [stubTrue, handleError] ]); const result = switchStatementOnSteroid(inputOfCaseTwo); // result equals transformInputTwo(inputOfCaseTwo) ```
Well the idea behind tailwind is that it's not a framework, its just a set of single-use classes to build components across your app. So, in two seperate components, you can use `.text-center` and `bg-primary`, and although they are seperate, you are sharing individual chunks of style across your whole app. Your app might grow, but your CSS won't. The "Utility First" page describes the idealogy here: https://tailwindcss.com/docs/utility-first
&gt;I've personally never run into contexts where the code-bloat of typescript appeared worth the static type checking The beautiful thing with TypeScript is that it's just JavaScript if you don't add any types. So TypeScript doesn't add any bloat. The only "bloat" is the stuff you add by yourself. You decide when and what to add. Don't add types that don't help you in your project. To answer your original question: I use defensive type checking (via TypeScript's type guard functions), conversion and validation in any kind of API/IO: local storage, websockets, user input. Once the data is inside my TypeScript code, I'm not checking types anywhere, as it's really pretty hard to get a wrong type into there.
&gt; instead of (or at the very least, in addition to) the ad hominem, perhaps you could take a stab at answering their question? I don't believe their position is defensible. My question was no less "legitimate". A front end developer of 15 years legitimately asking about "is there ever a reason to use lightmode" while mentioning "accessibility". So they build front ends, UIs, widgets, whatever - for users - and is aware of accessibility at some level but cant think of why a user might have a specific *preference*?
here you get some downvotes too
&gt; What are you using for Android? Flutter with Dart? React Native? Java directly? NativeScript? Kotlin directly, this language is magically good. &amp;#x200B; &gt; I would love to contribute to the code of CacheThat to ensure for example it always uses RAM and not swap file. &amp;#x200B; Always welcome to send some PR. Good luck!
ah okay, thank you very much :) I was highly in doubt about that. True good ips 4k screens cost a fortune -.-
"eficcient" could use a spell check.
Unsurprising lol
If the page isn’t loading for you either, or for another resource, here’s the example on MDN that’s been around for a hot minute! https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Taking_still_photos
That just further makes you look like you don’t have an accurate assessment of the situation. Electron is way, way, way worse performing than any native client. It exists for the sole reason that web devs want to use web technologies outside of the browser. And Electron isn’t exactly super popular. People definitely use it, but it isn’t taking over the world or anything. You can’t reduce years of work by really talented people to “a failure.” There are hundreds of ideas from the native GUI community that are used in the browser, behind every web feature that’s getting built every day. You should learn about some of those ideas before sharing your very uninformed opinion.
Your Weekly /r/javascript Recap **Wednesday, June 19 - Tuesday, June 25** Top 10 Posts | score | comments | --|--|-- [GitHub - lydiahallie/javascript-questions: A long list of &amp;#40;advanced&amp;#41; JavaScript questions, and their explanations Updated weekly!](https://github.com/lydiahallie/javascript-questions) | 479 | [50 link to comments](https://www.reddit.com/r/javascript/comments/c2dxp4/github_lydiahalliejavascriptquestions_a_long_list/) [Vue - "We no longer have any plan of deprecating the Object API. It will stay for the foreseeable future. No refactoring needed. This also means we don't plan to drop it for Vue 4 too"](https://github.com/vuejs/rfcs/pull/42#issuecomment-504963168) | 328 | [59 link to comments](https://www.reddit.com/r/javascript/comments/c4u64t/vue_we_no_longer_have_any_plan_of_deprecating_the/) How much Javascript is enough for webdev? | 255 | [57 link to comments](https://www.reddit.com/r/javascript/comments/c46suc/how_much_javascript_is_enough_for_webdev/) [jExcel the javascript spreadsheet component - MIT - Now trending on Github ;&amp;#41;](https://github.com/paulhodel/jexcel/blob/master/README.md) | 195 | [35 link to comments](https://www.reddit.com/r/javascript/comments/c329hv/jexcel_the_javascript_spreadsheet_component_mit/) Is it wrong to use backticks &amp;#40;``&amp;#41; everywhere? | 181 | [190 link to comments](https://www.reddit.com/r/javascript/comments/c2tpwe/is_it_wrong_to_use_backticks_everywhere/) [DarkmodeJS - manage dark mode on the web with matchMedia and prefers-color-scheme](https://github.com/Assortment/darkmodejs) | 140 | [35 link to comments](https://www.reddit.com/r/javascript/comments/c5go62/darkmodejs_manage_dark_mode_on_the_web_with/) JavaScript Open Source Summer Project | 138 | [43 link to comments](https://www.reddit.com/r/javascript/comments/c3f0ou/javascript_open_source_summer_project/) [Why are there so many JavaScript frameworks?](https://www.evolutionjobs.com/uk/media/why-are-there-so-many-javascript-frameworks-188799/) | 130 | [143 link to comments](https://www.reddit.com/r/javascript/comments/c5aj57/why_are_there_so_many_javascript_frameworks/) [A JS conference with *only* testing-related talks](https://www.assertjs.com/) | 122 | [25 link to comments](https://www.reddit.com/r/javascript/comments/c4mxv4/a_js_conference_with_only_testingrelated_talks/) [An incredibly easy way to use Firebase in React](https://github.com/cevr/firespace) | 121 | [11 link to comments](https://www.reddit.com/r/javascript/comments/c3xgxg/an_incredibly_easy_way_to_use_firebase_in_react/) &amp;nbsp; Top 7 Discussions | score | comments | --|--|-- Is it weird to use /* */ syntax for all comments? | 62 | [107 link to comments](https://www.reddit.com/r/javascript/comments/c3nil7/is_it_weird_to_use_syntax_for_all_comments/) Can ES6 be finally used as the default in 2019? | 26 | [51 link to comments](https://www.reddit.com/r/javascript/comments/c2hc3x/can_es6_be_finally_used_as_the_default_in_2019/) How to make Redux more concise | 62 | [44 link to comments](https://www.reddit.com/r/javascript/comments/c3sq3b/how_to_make_redux_more_concise/) [Micro Frontends - an example of a micro front end application](https://martinfowler.com/articles/micro-frontends.html#TheExampleInDetail) | 92 | [39 link to comments](https://www.reddit.com/r/javascript/comments/c2lqj9/micro_frontends_an_example_of_a_micro_front_end/) [The Real Cost of UI Components](https://medium.com/better-programming/the-real-cost-of-ui-components-6d2da4aba205?source=friends_link&amp;amp;sk=a412aa18825c8424870d72a556db2169) | 30 | [34 link to comments](https://www.reddit.com/r/javascript/comments/c2if54/the_real_cost_of_ui_components/) Would you switch to Fullstack Python? | 2 | [28 link to comments](https://www.reddit.com/r/javascript/comments/c3ys2q/would_you_switch_to_fullstack_python/) What are the use cases of WebAssembly? | 11 | [27 link to comments](https://www.reddit.com/r/javascript/comments/c48bcj/what_are_the_use_cases_of_webassembly/) &amp;nbsp; Please let me know if you have suggestions to make this roundup better for /r/javascript. I can search for posts based off keywords in the title, URL and flair. And I can also search for comments. If you would like this roundup sent to your inbox every day send me a message with the subject ['javascript'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=javascript&amp;message=x). Or if you only want a weekly roundup, use the subject ['javascript weekly'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=javascript%20weekly&amp;message=x) However, I can do more.. you can have me search for any keywords you want on any subreddit you want. Send a message with the subject ['set javascript'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=set%20javascript&amp;message=200%0A25%2C%20keyword1%2C%20another keyphrase%2C%20last example) and in the message: specify a number of upvotes that must be reached, and then an optional list of keywords you want to search for, separated by commas. You can have as many lines as you'd like, as long as they follow this format: 200 50, keyword1, another keyphrase, last example You can also do ['set javascript weekly'](https://www.reddit.com/message/compose?to=subredditsummarybot&amp;subject=set%20javascript%20weekly&amp;message=200%0A25%2C%20keyword1%2C%20another keyphrase%2C%20last example) And you can replace javascript with any subreddit. See my wiki to learn more: [click here](https://www.reddit.com/r/SubredditSummaryBot/wiki/index)
&gt; And Electron isn’t exactly super popular. People definitely use it, but it isn’t taking over the world or anything. I would disagree with this. Anecdotally speaking at least, a solid half of the apps on my desktop are built on top of Electron. I couldn't say the same thing five years ago.
bullshit. it is just a game.
I did read it, and that’s my point. He tried to dig himself out of a hole by alluding to a bunch of stuff that neither improves the framework nor offers are real benefit to the developer community. Why do you think he backed down? It’s because he got called out by a massive number of developers on his BS.
Nice one, I like the idea. :) While playing I thought that a time limit could add more challenge. The player would have X seconds before the bot locks a square. Increasing the difficulty would decrease this time "limit".
With all due respect that sounds like you’ve fucked (inverted, specifically) your testing pyramid. Unit tests should be crazy-fast and plentiful. Like, less than a minute to run. This is what the previous poster referred to. Integration and end-to-end testing should be minimal, covering only core features.
Please don't recomment /r/java, it's not for help with programming, it's for news/articles etc. The other 2 are fine
Here's a sneak peek of /r/java using the [top posts](https://np.reddit.com/r/java/top/?sort=top&amp;t=year) of the year! \#1: [JEP draft: Add detailed message to NullPointerException describing what is null](https://openjdk.java.net/jeps/8220715) | [74 comments](https://np.reddit.com/r/java/comments/b55drf/jep_draft_add_detailed_message_to/) \#2: [Multiplayer FPS Engine in Java](https://np.reddit.com/r/java/comments/9oy4ai/multiplayer_fps_engine_in_java/) \#3: [GitHub announces free private repositories](https://blog.github.com/2019-01-07-new-year-new-github/) | [47 comments](https://np.reddit.com/r/java/comments/adq1qr/github_announces_free_private_repositories/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
&gt; Users do what they like. Give them options that are standard if nothing else, which dark and light mode are standard imo. could've just said that then, right? instead of your initial snark, and multiple subsequent comments about the downvotes? in any case, thanks for (eventually) contributing something to the discussion. btw since you care, I didn't downvote you.
Snark? I was legitimately surprised at the question given the context. Idc about DVs its just amusing to witness.
Oh trust me, we have *many* more unit tests than we have integration tests. The thing is, the total number of integration tests we have are pretty low, but we have to run all of them against a "matrix of pain" of environments that we support and connect to. The ability to certify all these environments every release is core to our business. Enterprise software!
I get how it works, and it's obviously got some clear use-cases. But it's also a nice example of how there are multiple approaches to libraries/components, so now a huge portion of app development is taken up with making decisions about those, rather than on the straight building up of things from scratch. Like I said originally, this is clearly better than it used to be. But I see why people find it daunting and confusing.
The code snippet is logging "Hello, world" to the console. If you open up developer tools in your browser, and click on the console tab, you should be able to see this.
Cool. I may try this out, thanks.
argh, it actually says it right there in the text... thank you!
You're very welcome. I've been doing JavaScript development for about 3 years now and still make mistakes like this.
that's comforting. mistakes are all a part of the learning process.
Exactly. Best of luck on learning JS! I've found it to be a lot of fun.
This is amazing! I'll be patiently waiting for multiplayer. You could make it so that the computer is also a player. The judge wouldn't know who the computer was and therefore there is a chance the computer will keep winning rounds, taking points away from the players.
thanks, sounds awesome!
On a related note, it looks like [QuaggaJS](https://serratus.github.io/quaggaJS/) is a library that uses getUserMedia to turn the user’s camera into an HTML5 barcode scanner. I have a project from years ago that I’m excited to try this with...
&gt;\[Switch statement\] can only match against a single primitive value I came across a way, through [@WebReflection](https://mobile.twitter.com/WebReflection), where we pass `true` to `switch` and write cases as we would do in a pattern matching approach. [See example](https://mobile.twitter.com/sid_vishnoi/status/1139167450463735808).
This is basically a story about dumb fucks. 10 years ago, JS was something almost nobody had a good grip on (and why would they? It didn't work on one browser like it did on another). Then jQuery came along. Suddenly JS was a lot more friendly. So friendly, that the guys that did only HTML &amp; CSS until this point tried it. They made some animations and effects when you scroll and this made those guys believe that they could code. Born were the dumb fucks. The dumb fucks continued to code, put their "knowledge" out in the world (like on stackoverflow and so on) and created frameworks that solved problems they mostly wouldn't have if they actually could code. Other dumb fucks started coding only by what the previous dumb fucks had provided and so all this mess continued. And if you think I'm being wrong or an asshole, just look up the whole incident a few years ago when one package broke npm. What did we discover? That some people actually made a package out of single functions like `is_odd` and other people actually used them. The only explanation for this is that a fair percentage of people that code JS or even contribute to its ecosystem do not fucking know what they're fucking doing. Dumb fucks.
It's informative, but despite I use JS a lot (and other scripts) it doesn't bother me. Modular development and service orientation means I can take a chunk that is underperforming out and rewrite it in another language, and keep the JS "glue" code as is. We need to learn modular/service architecture and accept mixed projects (multiple runtimes, languages). I'm not talking let's throw a dozen runtimes into a simple project, but we shouldn't feel tied to one runtime either. Monolithic architecture is no architecture at all.
No, but you can `.reverse().forEach()` and the forEach because declarative &gt; imperative.
&gt;This is definitely true, but then you have extreme cases like at my work I'm not seeing the contradiction. You're arguing for optimizations, even if small. The above poster is arguing for optimizing to address actual problems rather than theoretical ones. These aren't incompatible stances - if one optimization makes 0.5% improvement and another makes 0.2% improvement and a third0.001% improvement, you both want those worried about in a logical order. If an optimization adds 10 seconds to coding time and an unknown but larger impact to total project lifespan maintenance costs, the above poster is saying to worry about it AFTER coding. Your use case might say "optimize before submitting", but that's not the same as saying "optimize before/as you code". You can code, and then analyze to find where the biggest hiccups are, and optimize those (even if small), and this is almost certainly a better plan than optimizing what you think is important as you code regardless of maintenance costs. That's why the above poster stressed the part about caring about optimization.
Thank you, i was hoping we could because i like that syntax, but ya gotta work with what ya got! Thanks for your solution. &amp;#x200B; Now i have to go review the difference between declarative and imperative, i don't have enough of a firm grasp on those concepts to be able to explain them in plain English.
I made a Docker image that gathers your Medium stats (views, claps, etc.), since there is no public API for this. https://github.com/CharlesStover/medium-stats-api [Example use in production.](https://charlesstover.com/portfolio/medium/) Stats appear below each article.
What is wrong with the current process for suggesting improvements? https://github.com/tc39/ecma262/blob/master/CONTRIBUTING.md
Pattern matching and a true standard library are two improvements that are already proposals. Pattern matching in particular will provide more elegant patterns for a lot of common use cases. Something I wish existed that I haven't seen yet is some sort of lightweight variant or enum type. This in comparison with pattern matching would bring JavaScript as far as a dynamic language could go in my opinion. Consider something like ``` const state = { Initial Loading, Error, Success }; return case(currentState) { when state.Initial -&gt; initialState(), when state.Loading -&gt; loadingState(), when state.Error -&gt; errorState(), when state.Success -&gt; successState(), }; ``` Bonus points for exhaustiveness checking either by the browser or at least a linter. Another thing I'd love is renewing the useStrict pragma to opt into progressively strict rules. ``` "use strict: 2"; ``` Like that would remove a bunch of stuff that's been kept around for backwards compatibility
I do this all the time, honestly i like the look of switch case with equalities as well sometimes
Sorry I'm a little confused... What is your end goal? Just to flatten the data? If so I was able to shorten your code to do so without splice. [https://repl.it/repls/SeverePlaintiveFlatassembler](https://repl.it/repls/SeverePlaintiveFlatassembler)
Here's a short version I came up with. [https://repl.it/repls/BruisedBeautifulPacket](https://repl.it/repls/BruisedBeautifulPacket)
I have done this in the past, I stopped doing it because it is so niche and then people are tempted to allow fall-through and it gets into so many fuzzy areas and hard to read. It still feels dirt to me somehow now though even without fallthrough.
Here's a short version I came up with. [https://repl.it/repls/ImmaculateAuthorizedVariety](https://repl.it/repls/ImmaculateAuthorizedVariety)
16 hours still means you can do releases every week and run them over the weekend. Or even run them at night any day. I'm fine with overworking computers. Electricity is relatively cheap and they don't mind.
you ok bud?
hehe, i sympathize with your confusion about my code... I was thinking i'd need to splice the values to make sure they weren't redundantly handled, but i see with your and other's solutions it's unnecessary. Going to re-do the code with these superior solutions in mind. Thank you!
Oh that's awesome! It looks so good, I'm going to study this and redo my solution from scratch with this sort of elegance in mind, thanks a lot!
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
Checkout his comment history. Seems to be his kind of thing to be... Let's say unfriendly.
The edit looks good, nice work. I think i was overly concerned about a stack overflow... i'm new to recursion and i've ran into stack overflow several times and think i was cautiously trying to make sure the array was being emptied with splice. But clearly you can recurse much more simply. Thanks again.
Thank you, yeah i was researching that method last night but wanted to try the solution without that method for the sake of the learning. But yeah with the added knowledge of how to do it the long way with a function now i'll feel more comfortable using the tailor made method. Thanks!
Would love to play this with friends lol
all 32" 3 are in landscape / horizontal layout, 1 is portrait / vertical for IDE's and terminals
I don't know how the bot made up that URL, but fact is that right now I haven't open sourced it yet 😅Would you guys be interested?
If you scroll down, there's a bunch of alternatives, both deep and shallow
Glad you liked it! 🙂I'll start working on multiplayer soon! Right, this reminds me of how we play the real CAH with a random player sometimes. It's surprising how often it wins!
Cool, i'll check them out :)
I know you're looking for something different but I think this needs to be said: The worst part of your implementation is calling that function `nested`. You could call it `flatten`, you could even call it `unnest` if you want to push it somewhat, but `nested`? That's a _terrible_ name that doesn't express in any way what the function does. As for your troubles with `splice`... Take this rule: _Never mutate an array while you're iterating through it. If you feel the need to do it, then stop and think of a different approach._ Maybe in a number of years you can break that rule, but for now always follow that rule.
If you think that it is anything like React, then you either do not understand how React works, or you do not understand how the proposed stuff works. There's a passing, superficial, similarity between the new way of creating components and React hooks. Otherwise they are completely different. The new syntax is an alternative way of declaring things that you used to declare in the component configuration object such as data, computed properties, and watchers. That's it. It's cleaner syntax that affords better TypeScript support and much better component composability. It offers the ability to make your code objectively better while still being idiomatic Vue. In no way does it function like React hooks, nor does it make Vue behave like React, nor does it suffer from some of the problems that hooks introduced.
Integrate jquery dom element syntax as native
You can write an [iterable/iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators) that returns items in whatever order you want. `for .. of` will happily consume it.
What do you mean exactly? Are you talking about selectory https://api.jquery.com/category/selectors/ ?
I agree, enums would be useful. But your suggested syntax would break ES6+ code.
Thanks for the feedback! Yeah you're right that's a sloppy name, i hope i would have come up with a better name later on after reviewing but i'm glad you caught it. It's important to come up with good variable names, and i'll try to keep this in mind better going forward. &amp;#x200B; And good advice, yeah that makes a lot of sense. I see that i can be inherently dangerous as my first implementation proves. I'll save that as a reminder of the dangers of mutating while iterating. &amp;#x200B; Thanks for your analysis, both great points!
Well, vanilla has some odd behavior, like if you get elements by class you get an array or empty array, but if you get by id you get a singular, or I think an undefined. As well just how you target things is easier to type as $(), the functions are also really nice like .css or .attr .animate, etc. JavaScript vanilla feels like it touches the dom in a very hands off sort of divorced way where as jquery feels like it digs its fingers right in and happily squishes it between its toes.
sure, if you insist on formatting poorly. function handleHttpResponse(res) { switch (res.status) { case 200: handleSuccess(res); break; case 400: handleBadRequest(res); break; case 500: handleServerError(res); break; default: handleUnexpectedResponse(res); break; } } function handleHttpResponse(res) { let s = res.status; ( s === 200 ? handleSuccess(res) : s === 400 ? handleBadRequest(res) : s === 500 ? handleServerError(res) : handleUnexpectedResponse(res); ); }
&gt; like if you get elements by class you get an array or empty array Because several elements can share the same class. &gt; but if you get by id you get a singular, or I think an undefined Because–by definition–an ID has to be unique. &gt; As well just how you target things is easier to type as $() `const $ = document.querySelectorAll;` done.
Those iterable/iterators i need to study more closely, right now it's a bit beyond me. &amp;#x200B; Do you have an example or pseudo code of how for ... of would consume that? &amp;#x200B; I appreciate the feedback and it's good to know you can do such a thing, thanks!
Once you write the iterator, `for .. of` can consume it as it would consume any other iterator. There's nothing special about it. You can see the page of [for...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) for more detail, I guess.
Thanks for the link, i looked at it briefly and yeah those are great examples and just the sort of thing i need to study closely and re-implement to get more confident and practice. &amp;#x200B; I intentionally didn't review any docs for the sake of the challenge. Seems a good way to learn to struggle first, then turn to how the pros do it and study the elegant solutions. &amp;#x200B; Good points on how i can improve the function, thank you. &amp;#x200B; I'm still shaky on recursion and often times get into stack overflows, the splice was an attempt to avoid this, i figured if each array was getting spliced then eventually the array would be length 0 and would be caught by my if statement. &amp;#x200B; But in looking at better solutions i see this is unnecessary. &amp;#x200B; I appreciate your feedback!
[Getting a subset of an object](https://stackoverflow.com/questions/17781472/how-to-get-a-subset-of-a-javascript-objects-properties) could be simpler.
Thanks, i'm a little confused on this idea of consuming a custom iterable iterator... sorry i'm still new to these concepts. I'll keep studying the concept and practicing though and i'm sure it'll get more and more comfortable.
Sure there would be a benefit to such a thing if it existed; the native speakers of whatever "irl language" you wrote it in would have a slightly easier time keeping up. Would it be worthwhile? Definitely not. You'd have to maintain this non-english version of it, write all of the documentation for it, etc
Make optional chaining standard `obj?.attr`
I kind of feel like the best answer there has a solution that is good enough for me.
Hi /u/jobs_Brillio, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I don't like the repetition.
This might become reality: https://github.com/tc39/proposal-optional-chaining
Vanilla Js can also tell you lot if you’re using Jsdoc or use default function parameters.
Hi /u/porkyfly, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/BensonandEdgar, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/pmz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/weather-headed, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/weather-headed, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
If you enjoy jQuery feel free to use it, it ain't going away for a while. But you are on your own; most of the JS community have left it behind years ago and have no interest whatsoever in going back.
Couldn't agree more. Sorry if I man-splained that to you for no reason lol.
I think this is a pretty good option too. Would probably look neater if you saved each of your routes as a method on an object: const handle = { error: function() { // do stuff }, success: function() { // do stuff } } switch (true) { case /500|404/.test(res.status): handle.error(); break; case /200/.test(res.status): handle.success(); break; }
Hi /u/CitizenFoffie, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/CitizenFoffie, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Another reason to keep download time short, primarily by minimizing the footprint of all the data involved, is that especially for mobile sites you might go there for the first (and last) time. Even if the data is cached once downloaded, you otherwise get a high impact on the first download. The reason there's often so much to download is that frameworks are extensive, yet only a tiny fraction of the code is used on each page. I see a trend that frameworks are getting slimmer, which is a good sign. Hopefully bloats like jQuery will be gone soon. Sadly Bootstrap is based on on jQuery (unless you use only the included CSS). I wish they would rewrite the code to be completely independent.
Brilliant!
No worries, sorry I can’t help anymore. Let me know if you’re ever able to recreate the issue in a sandbox for me to take a look at. Hopefully you can try it out on something else at some point? If ever, feel free to DM me I’d be happy to assist!
This belongs in r/learnjavascript
Get a proper Logo / Mascot.
I wonder why something like const objectA = {a: 0, b:2, d:3 } const objectB = {a, b} = objectA is not possible.
Also in enterprise and our testing was none existent (internal erp), now I at least have a selenium suite that hits all the common pain points quickly as a sanity check. I’d like to work more on the tests but you can’t fire proof the building until you manage to put the fire out without it starting simultaneously somewhere else and that’s the problem.
did you not see the screenshot ? it shows the issue
Yes I can see the screenshot but without any code I cannot understand what’s causing it, sorry
That's a bit formal. This is intended as ad-hoc brainstorming. *Let your brain rip!...*
I've worked on an ERP. I know my way around huge projects. Besides this kind of reaction (downvotes) only happens on webdev and js subbredits. It's funny. I knew that would happen 'cause it's a pattern I have observed. People are fucking sheep on these subreddits. And I can tell already I'll get downvoted.
That seems like a specialized need such that one can roll their own sufficient mini-API for it. If you think it's common or should be common, I'd like to hear why.
Can you try yourself on the site (geev.com) ? do you see the same thing ?
I'd like "func" as a shorthand for "function". And/or, provide a more typical looking OOP syntax: class x { init() { // constructor } method a(q,r,s) { } method b() { } }
I’m with you, complex != complicated. JavaScript is complicated because there are 5 ways to do A, 5 ways to do B and 5 ways to do C so there are 125 do to 3 things. Python maybe has 8. Pascal had 3. The joke been there was one way to do everything, the right way. Honestly depending on the style use two different JavaScript codebases can look wildly different. Roll on warm.
[Here's my logo/mascot vote](https://photos.com/featured/hamster-on-swing-augusta-in-park-dragan-todorovic.html?product=art-print)
I've found some source of info that could produce some fun. Unfortunately my search didn't show anything about enforcing non swapfile usage but this link [https://www.valentinog.com/blog/memory-usage-node-js/](https://www.valentinog.com/blog/memory-usage-node-js/) says a bit about finding out how much memory is being used. &amp;#x200B; So if you can't find how to enforce swapfile non-usage how about alerting the user if the total content of the cache goes beyond what the available memory of the OS has? I don't know whether I've been clear enough. It's just an idea.
On 1. Delphi - so far ahead of the curve it took Microsoft a decade or more to catch up and then by hiring Anders Hjielberg (Turbo Pascal, Obiect Pascal, C# and then TypeScript - dude is my favourite programmer been using his stuff since the early 90s). It was also a brilliant language for a bunch of cases, better designed than Visual Basic, blistering compile speeds on machines laughable now, you could drop to assembler, single binary deploys, cross platform compiler (sounds a lot like go..), excellent debugging, simple powerful module system, proper record types and properties all that stuff. Oh and it encoded the length of a string in the string so no need for a null terminator *wink*. Borland fucked up, if they’d sold it for 50-100 quid they’d have been huge but they priced it for Enterprise(TM) which cut off new developers at the knees.
Yeah, I know that feel. We didn't have integration tests until about 2 years ago, it was all done manually every single release. It took hiring a dedicated test automation engineer, and then another one to join him a little while later. Makes a world of difference when its someone's entire job to architect and write a giant integration test codebase.
The destructuring solution is very concise, IMO. If you want the process to be abstracted to a function, you could write one like this: function sliceProps(obj, ...keys) { return keys.reduce((res, key) =&gt; { if (obj.hasOwnProperty(key)) { res[key] = obj[key]; } return res; }, {}); } const objA = {a: "a", b: "b", c: "c"}; const objB = sliceProps(objA, "a", "b"); // { a: "a", b: "b" } This will work for "slicing" any plain old JavaScript objects' *own enumerable* (non-prototype, non-hidden) properties to a new object, which seems to be what you're looking for. It also works on static function properties (and *technically* arrays as well, but good luck trying to add static (non-index) props to an array... it's a rather involved process). If you want, you could add the above function to the host Object prototype to give you that fancy "dot notation" (e.g. \`obj.slice(...args)\`), but I **strongly** recommend against modifying any of the host objects in production code.
I’m the sole developer who inherited a project that took 5 years what should have taken 18mths to do decent and 2years to do well written by a programmer who shouldn’t be allowed near a computer. Hiring someone just to do test automation isn’t on the cards. Lest anyone thing I exaggerate my typical performance improvement when clearing out his sprocs is two orders of magnitude. What used to take 15 minutes when it didn’t crash now takes 6 seconds and doesn’t lock all of creation. Searching a quote used to take 70s now takes 150ms and mine searches the line items (kinda important on a quote). I’ve been programming a long time and I’d heard all the horror stories but figured they couldn’t be that bad. I was wrong. 2000 line sprocs, 8000 lines of MySQL/PHP/jquery soup in a single file and on and on it went. Most of it I couldn’t make up, I’d like to do a tech talk at the local dev meet-up, be funny if nothing else.
You're right on this... I used Delphi back in the day, and it was extremely productive. Really good stuff.
What would be really nice is to add more complex conditions, like ranges, or inequalities. Rust has this feature where if you add an if statement afterwards, you can further narrow the criteria. You can also specify ranges like match code { 200..299 =&gt; doSuccess(), 300..399 =&gt; handleRedirect(), 400..499 =&gt; handleBadRequest(), _ =&gt; handleServerError() } or match some_struct { Foo { field: x } if x &gt; 42 =&gt; doThing(), _ =&gt; doOtherThing() } I’d also like to see how arrays would fair with this TC39 proposal, since pattern matching would make it easier to represent tuples as arrays.
I’ll do you one better “fn” from Rust ;)
This was making the rounds on twitter: [https://twitter.com/MengTo/status/1142539362875392001](https://twitter.com/MengTo/status/1142539362875392001) Full code for the React demo: [https://codesandbox.io/s/winter-monad-y6gn8](https://codesandbox.io/s/winter-monad-y6gn8)
As much as I would love that, interpreting "func" as a keyword would break A TON of web applications...
wish we had a partial application syntax, there's a proposal out but no progress on it in a while [https://github.com/tc39/proposal-partial-application](https://github.com/tc39/proposal-partial-application) &amp;#x200B; also would be nice if we had an iife syntax const sayHi = iife () =&gt; { // this function is invoked right away return () =&gt; console.log('hi') }
Canvas would be your best bet, svg animations are more heavy on cpu usage.
Another thing would be an alternative to the \`this\` key word that would work with the way you can chain method in javascript, perhaps something similar to the bind proposal except instead of binding \`this\` it works like an unordered parameter &amp;#x200B; const saySomething = something::() =&gt; console.log(something); 'hi'::saySomething();
Threejs uses canvas though
I'd like to hear why you think its specialized? Seems pretty generic to me. Also, anecdotally, I've used this "pattern" of extracting a subset of data from a larger set on just about every project I've worked on. Got an array of data you wanna display in a table? You'll probably end up doing this in some capacity There are solutions like the one posted by /u/ScientificBeastMode but they all basically amount to boilerplate
I'd like to see how it works under the hood :)
It is possible to have multiple elements with the same id, likely a holdover from “the old days” of the web. To support those pages, many browsers allowed (not sure if this is still the case) multiple elements to have the same id. In javascript however, when the DOM API was standardized (or at least the getElementById part of it), they codified this uniqueness into the return type of that function. That said, I haven’t experimented with that use case, and it’s definitely against the HTML 4.1(?) spec.
 I've used this "pattern" of extracting a subset of data from a larger set on just about every project I've worked on. Got an array of data you wanna display in a table? There are different ways to go about this. I prefer using a "key-list" that I can rearrange to control both the order and inclusion for a given screen or listing. The values &amp; attributes are in a map(s), and the key-list will look similar to an SQL SELECT column list. Your approach doesn't necessarily control the order.
This would reignite my passion of JavaScript.
You can do exactly that - by using if statements. Check the proposal itself and the additional examples linked in the article.
Function $(elm) &gt; return querySelector(elm)
Why?
If it's a code for use in a browser, why is it in form of a Node.js module?
You are supposed to use it alongside a bundler, such as Webpack or Browserify ;)
Personally I wrap select and selectAll as the context of document is not required, just saying that is an easy implement.
Very handy – and superb README, great job! Gonna shamelessly plug my own package here, also related to `prefers-color-scheme` but with a more narrow scope – it lets you update the favicon when the color scheme changes: [favicon-mode-switcher](https://github.com/jonaskuske/favicon-mode-switcher)
I don't see the need for pattern matching. Your example looks like it would be fine with. Switch case statement.
I have no idea what you're on about
Why not just check the `navigator.doNotTrack` property?
Learning Javascript might help.
I don't get how testing and premature optimization are related here
Lisp-like conditionals or other functional-friendly control flow stuff. Would really clean up some React-stuff — control flow inside return statements like it is now works, but gets messy r&amp;al quick
I've built out a very similar system for order and I have to ask how you deal with inclusion? The way I did it was by filtering the "key-list" which fundamentally isn't much different than the situation described above. const visibleFields = ['item name', 'start date']; let keyList = ['item name', 'location name', 'coverage %', 'start date']; keyList = keyList.filter((key) =&gt; visibleFields.includes(key)); Isn't fundamentally different than const visibleFields = ['item name', 'start date']; let keyList = ['item name', 'location name', 'coverage %', 'start date']; keyList = sliceProps(keyList, ...visibleFields); Which isn't fundamentally different from const visibleFields = ['item name', 'start date']; const keyList = ['item name', 'location name', 'coverage %', 'start date']; visibleFields.forEach(...); Unless I'm misunderstanding your point.
I'll clarify :) The whole point of not doing *premature* optimization isn't saying you should never optimize, it's just saying you shouldn't anticipate future problems (something we humans are generally poor at doing anyway) and then optimize your code based on what you imagine in the future. But of course, you also don't want to misunderstand that to mean "just let your performance problems happen, and then when your users report them deal with them then." That is *not* a recipe for happy users :) Feature and manual tests (and possibly integration tests) can solve this, by letting you find performance issues after you write your code (after the "premature" part) but still before your user finds them. Unit tests are lovely for lots of other reasons, but they tend to be terrible for this particular thing because they focus on units of work which are usually too small to exhibit performance problems.
... my bad, thank you.
&gt;Unit tests are lovely for lots of other reasons, but they tend to be terrible for this particular thing because they focus on units of work which are usually too small to exhibit performance problems. Yes, definitely. I suppose we could use functional tests as a rough performance test but in my experience that would be *really* rough since most functional test suites have a lot of overhead of their own. So as a measure of drift of app response time over time, sure. But there are a lot of better tools out there for performance analysis.
I have been doing a lot of web scraping lately with puppeteer and personally if i am grabbing multiple elements on one page I'll return an array. Ex. Const nodelist = await page.evaluate(() =&gt; Array.from(document.querySelectorAll(.product)).map(e =&gt; e.innerText.trim()) ); Nodelist will be an array of strings I then subject to some functions to get my specific info
I asked why you thought jQuery's $() is better than document.querySelector(). Your response had literally nothing to do with that.
That "Cost of parsing JSON" section has me shook.
oh sorry I didn't realize I was against the rules, thanks for the heads up. I'll post there next time.
I think you interpreted it backwards from my intent. Let's say we have an Employee table in a database. It will have first name, last name, phone, EmployeeNumber, etc. I'll call the table's list the "master list". The key-list is what I use to select a subset of the master list and control the order of. (The master list may also be a data-dictionary defined in JavaScript or app code.) For a report, I only want to display last name, salary, and employee number in *that* order. The key-list would then be \['last\_name', 'salary', 'emp\_num'\].
The react version is incredibly slow on my iPhone X, like nearly unusable.
Don't judge pattern matching by op's example, check out the [proposal](https://github.com/tc39/proposal-pattern-matching/blob/latest/README.md) it can do a lot more! Of course any of the examples provided there can be done with a bunch of if statements, but the syntax is much terser
Ahhh!!! That's exactly what I thought. It's always funny when the ghost player wins
The page is loading fine. There might be some temporary issue.
Honestly, if you're going to be imperatively updating DOM elements *directly* (as opposed to doing so through a framework/library API), then jQuery is still very much worth using, and you should probably just use that. *[Side-note:] Despite popular misconceptions, jQuery is pretty lightweight (~25 KB minified) and very performant for most applications. The real problems arise not from the library being "old," "outdated," or "slow," but rather from the entire concept of imperative UI architectures. That said, for smaller apps with minimal JS code, jQuery is often a great tool.*
Hi /u/JSconfused, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yes! I'd be really interested--if you open source it, thanks!
Gross that looks like PHP. I think using objects as maps would be the most terse way to do the same thing
I currently use SlickSlider for most of my carousel work, has anyone used Flicking and Slick? I would love to hear any pros and cons
I'll let you know. :) Open to contributions?
Just made my day 🤣
I don't think I would expect them to be. IndexedDB is storing the contents of the object when it serializes it, not the js object instance itself. Correct me if I'm wrong. &amp;#x200B; What are you getting back from localForage when you retrieve the data?
It does seem I'm getting an object back. Example: {name: "personal", color: "red"} color: "red" name: "personal" __proto__: Object
Yeah thats what I would expect.
Oh, you're right, I've just realized they're not the same. When I log that object before inserting it into IndexedDB I get something a bit different: Label {name: "work", color: "red"} color: "red" name: "work" __proto__: constructor: ƒ Label(name, color) __proto__: Object
If you want to move the pieces after a certain delay. Then a setTimeout might be what you want inside your loop. However you must take the iteration into consideration. Eg, use setTimeout(1000 * i) inside the loop. Or do you want to move the next piece after the first one has "landed".
I want to move the next piece after the previous one has landed
so I guess i'll have to create a property to identify Label objects to work around this issue. At least that's the only way I can think of how yto work around this issue.
I think my answer can vary depending on what feature you want. &amp;#x200B; To use simply as a slider, the function is similar to slick and Flicking. Perhaps the biggest difference is whether you use jQuery or not. &amp;#x200B; Flicking is a vanilla library that does not use jQuery. &amp;#x200B; If you want a feature like IScroll, you have a freeScroll option. [https://naver.githubio/egjs-flicking/features/freescroll.html](https://naver.githubio/egjs-flicking/features/freescroll.html) If you want flexible alignment, you have the option of hanger, anchor. [https://naver.github.io/egjs-flicking/features/hangeranchor.html](https://naver.github.io/egjs-flicking/features/hangeranchor.html) &amp;#x200B; It also supports major frameworks such as react, angular, and vue, and all of the features of the Flicking Library used in the browser are equally available. Even dynamic add/remove/change is fully available. &amp;#x200B; Our features can be seen on the page below. [https://naver.github.io/egjs-flicking/](https://naver.github.io/egjs-flicking/) There's a problem you're using, so if you register the issue, we'll respond to it quickly. [https://github.com/naver/egjs-flicking](https://github.com/naver/egjs-flicking)
I wish I could give you more than just one upvote, thank you for all the info, I will be playing around with flicking on the next project.
Why is everyone in this thread breaking instead of returning??? Just return the result and it’s a thousand times cleaner. And you can use brackets to make it even better!
how can i get a list of array of elements?
You seem to be conflating objects and data. It might help you to consider the different kinds of *things* you are dealing with at each level. &amp;#x200B; 1. You start with a \`Label\` object. This was created using a constructor function (or similar). It is a JavaScript object, created by the runtime. (e.g. \`var label = new Label()\`) 2. You ask IndexedDB to save the label. \` localforage.setItem(label)\` 3. IndexedDB serializes (converts from an object to a string) using JSON \`JSON.stringify(label)\` 4. You ask IndexedDB to retrieve the label \`localforage.getItem()\` 5. IndexedDB deserializes (converts from a string to an object) using JSON \`var label = JSON.parse(labelString)\` What you have at the end was not made with \`new Label\` and therefore is not an \`instanceof Label\`
Yes, I had totally forgotten about the 'stringification' that took place. Thanks!
Thats a great idea... I try to implement this feature as well :)
take a look at this [Tetris (javascript)](https://youtu.be/HEsAr2Yt2do)
If you check the source code, that's basically what's happening :)
I thought it's 101.
Could be, I've been programming in javascript professionally for many years and have yet to see this in practice
I'm not saying you can't do web dev without IDE. With a business point of view, I'm not sure if u can keep up with the rest of the team and you can produce more mistakes without hints. I mean we are the people, people do mistakes :) The whole point is TypeScript makes a life of developer easier and the people who will support your code easier as well) About Node can't say anything worked with it only in my home projects.
Start with tests. You’d be surprised how much easier coding becomes when you let the tests drive the development. It lets you break it all down into smaller chunks that your brain can cope with.
I would start from the network tab.
You can also use "break 2" to break parent loop if I'm not mistaken
 Preface - I'm a very fast learner and have a natural curiosity, I very much prefer things that are challenging to routine. Job history: - 1st Level Support for a UK Datacenter ( unix and related maintenance, networking etc., invoicing, customer support) - I had good computer skills, some basic understanding of Unix but I got the job mainly on my very good english - 2 years - Systems/Network Admin - somewhere pre dev ops, server installs, db backups, app deployments - Java, JBoss, Oracle, SAP, Unix etc. 2 years - Systems Admin - Web Servers - backups, deployments, maintenance - MSSQL, Unix, Windows Server, Networking - my first job related coding experience - some powershell scripting, c#, php - 2 years - Junior DBA (3 months) -&gt; Application Support (2 months) -&gt; Application Support Team Manager (1.5 years ) - I had some MSSQL experience, the customer was UK based and I had lived in the UK and have very good people skills + language. MSSQL, Systems Admin + lots of management. ~2 years in total - Technical Project Manager - same company as above - we had a dry spell of projects so I started doing some coding for some company projects that were 'optional'. Management mostly (organizing resources and timelines for customer projects) , first real programming job - Javascript, Angular 1, first experience with React. ~1year - Fell in love with Javascript - got first job as Web Dev, more specific React - ~2 years - React Ecosystem - Redux, Webpack, Nodejs .. a lot of experience and learning .. a very long list of stuff that I learned - Another Javascript Dev job, abroad (Netherlands) - amazing company and teams, best job I have ever had - learned a lot about programming in general, about the dev business, development processes .. just overall work experience. ~1 year - due to family issues had to leave the country - Consultant - web apps, infrastructure, architecture, technologies, learning - getting to the end of my 1st year. Very good pay, I get to do challenging stuff all the time, less code but more learning, teaching. Have the benefit of working with an amazing solutions architect with &gt;15 years experience and learning towards a web solutions consultant. I have so many technologies that I've played with and learned, more or less .. I was lucky to work in a field that generally stimulates me, I have ADHD .. routine kills me, however challenging new stuff stimulates me and brings out the best.
That's pretty neat. Thanks
Looks similar to Lua's colon syntax
i've heard, but it's the blur, so using it is a no go unfortunately. the browser will choke. only tried this on chrome on the desktop, there it was ok, but then someone mentioned firefox and it tanked. without the blur the card stuff would be fast.
Make it as simple as it can be - draw a grid on a piece of paper, move something around, think about the logic. The hardest part is to start, then it's easy. &amp;#x200B; And also what @ethboy2000 wrote - tests. Waaaay easier to write then!
It’s one of those things you never see outside of articles on JS weirdness.
Did not know you could do that. Looks a lot like a ‘goto’ statement.
It’s not JS specific. Any C like language has it.
100% would like to see the code, thanks!
Wow, did not know. Recently learned a little bit of Rust and I learned about this feature there.
Absolutely, feel free to open a PR
Yep, very much like a 'goto', this is a great way to make control flow hard to read. You definitely won't find it in Javascript the Good Parts...
Hello, really glad to hear such proposition nowadays. This inspires to keep working with opensource projects. I can explain one of my current hobby projects. The current stack I am using as a microservice **serverless** stack. \- Typescript \- GraphQL \- Node \- MongoDB \- React &amp;#x200B; I am building a login service that it can just be deployed as **serverless** using [Now.sh](https://zeit.co/now). The login service will have already the following queries and mutations: \- SignUp \- Login \- Me (to see the current logged in user) \- ResetPassword \- VerifyAccount &amp;#x200B; This will save some implementation time when creating new projects that require authentication, account email verification, request change of password. The implementation of this login service will be as simple as adding it to your current backend/gateway REST/GraphQL (examples should be given for this of course). &amp;#x200B; The login service will be able to handle different permissions for different applications (even more independent). So you will be able to have a permission like `blog-application:create-blog` or `blog-application:read-blog` and check those permissions on the client so you can see if those particular users are able to create/edit/read or only read. (This is subject to change, I need to really analyze the best scalable solution) &amp;#x200B; On the client side, to be able to use this login service, I am planning to have a npm package with react components that will work like `aws-amplify-react`, so you will be able to import a `withAuthenticator` HOC and wrap a page that you want it to be under authentication. This should also give room to customize it of course. Feel free to reach me if this sounds interesting for any of you!
&gt; and have yet to see this in practice For a reason. Delete this, don't let my colleague see this.
So did anyone actually ever come up with an actual use for goto thats not solvable in a more elegant way?
&gt; Today I Learned you can break from nested loops using labels ... but please don't.
If you can. Never do this. Makes code difficult to read and follow and there is most likely going to be a better way to do it.
Be nice to have Ruby's date and time manipulation methods and also it's range operator
Yeah, it's not really a great way of breaking out of loops.
Then I'd probably do an interval and have a 'current' piece in a variable. Then on each tick, check if it has reached the bottom. If it has shift out the piece from the array you have and continue until the array is empty. E.g ```var currentPiece = p.shift()``` Then do the loop in an setInterval.
Just make it a function or multiple functions and return from it. Easier to test the individual functions as well.
Just because you can doesn't mean you should. Edgar Dijkstra famously published a letter saying GO TO statements are considered harmful. This was back in 1968 and obviously not in the context of JavaScript, but it shows how dated the pattern of GO TO statements actually is. You can read the whole letter here: [https://homepages.cwi.nl/\~storm/teaching/reader/Dijkstra68.pdf](https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf) For me, this feature of JavaScript is just a remnant of JavaScript's origins and has no place in modern software development. In 15 years of working with JavaScript, I can't think of a single instance where I have seen this used legitimately.
Just because you can doesn't mean you should!
got the answer in https://github.com/babel/babel/issues/10133
The main benefit of pattern matching over switch or if statements is that they are expressions rather than statements. The lack of general purpose conditional statements in JavaScript very often lead to code that requires temporary mutable variables and just generally complicates the flow. You see people doing pretty crazy things with ternary operators which I believe is pretty clear indicator there's a gap to be filled here
I use this polyfill and my VS Code is yelling at me on the daily
You're dead right, language design is hard right? I'm not sure of a good way to differentiate it but the general idea would be the same anyway
Hi /u/stretch_Muad_dib, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Something we cover in my CS class is kind of related to this, development methodology. Not sure how often it is referred to / used in the real world, but you have the waterfall methodology where you first analyse the requirements of the program, and essentially try to build it all in linear steps. I much prefer the spiral model (generally how I program) which is where you quickly try to develop a solution, then cyclically iterate upon it, eventually adding optimization where as the waterfall model includes them straight from the design stage.
Is there any advantage to your second solution? Seems much more difficult to understand at a glance.
Some things are not meant to be learn.
[https://media.giphy.com/media/SlC9z5nirQPh6/giphy.gif](https://media.giphy.com/media/SlC9z5nirQPh6/giphy.gif)
[Gentle reminder](http://bioinfo.uib.es/~joemiro/teach/material/escritura/gotoharmfulCol.pdf)
How is this anymore difficult to read than having to include a `if (breakouter)` after the inner loop?
Nope, you're thinking PHP.
Of course yes :D
I believe using labels is how Svelte handles reactivity https://alligator.io/svelte/reactivity-intro/
I don't see why this would be a problem. JavaScript seems to be literally the only language in the world where utilizing existing libraries is somehow looked down upon.
Donald Knuth analyzed goto statements and multi-level breaks like this are one of the use cases where they are the optimal language construct for procedural programming (which is why this is supported and goto is not). However, most javascript usage shouldn't be programming in a prodedural style so you should almost always avoid any need to use this. Mindlessly parroting one essay's title is the height of cargo cult programming.
I only feel guilty when I install this one in particular [https://www.npmjs.com/package/is-thirteen](https://www.npmjs.com/package/is-thirteen)
No
Currently I have something like this, but it lacks resizing columns and rows. [https://imgur.com/pdOmsfD](https://imgur.com/pdOmsfD)
Ah, the smell of bad code in the morning... Seriously, if you do that it's a sign the core could be much better.
That is NOT very good practice!
Today I Learned you can use gifs in text posts on Reddit
So close! Im guessing it always splits in half? Im excited for the release of resizing!
Breaking out of doubly nested loops is a perfectly legitimate use of goto.
Yes, it splits in half.
It's legitimate, yes, but it shouldn't be done. Use functions and return it of them.
if you need stuff like this you should really consider refactoring this code. maybe extract the corresponding code into a function with reasonable return values, and consider the return values when breaking the outer loop. something like that is easier understandable imho
Javascript is a very declarative style heavy language, so I would advice you to favour that style as well. &amp;#x200B; The difference between declarative and imperative can be summed up with the following examples \`\`\` // imperative approach for (let i = 0; i &lt; someList.length; ++i) { console.log(someList\[i\]); } // declarative approach someList.forEach(console.log); \`\`\` &amp;#x200B; declarative = what you do imperative = how you do it &amp;#x200B; Here is also some further reading on the subject [https://tylermcginnis.com/imperative-vs-declarative-programming/](https://tylermcginnis.com/imperative-vs-declarative-programming/) [https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-programming](https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-programming) [https://medium.com/front-end-weekly/imperative-versus-declarative-code-whats-the-difference-adc7dd6c8380](https://medium.com/front-end-weekly/imperative-versus-declarative-code-whats-the-difference-adc7dd6c8380)
I don't really understand JAMstack - as I understand it, you would have to rebuild your static site whenever a new comment is added? How have people decided that is a sensible idea?
what is a coding challenge? Is this for fun?
we learnt that at university too (elec eng), never even thought about it since the class
that's noice ;0)
I really wish they had labeled it GETOUT
&gt;Edgar Dijkstra famously published a letter saying GO TO statements ***This***. Barbara Liskov also mentioned [the same thing](https://youtu.be/Tn7Uc-XdTh8?t=966); she cited Dijkstra and the "wrath" of the programmers "taking away" their "go-tos" on the video. u/waway_to_thro at 16:45, Liskov is basically describing what you're doing here. Remember, she's talking about very old languages that had no protection mechanisms whatsoever at the time; you're basically bringing this back in 2019.
Sometimes when you need to go somewhere goto is the fastest way there, but really unless you are super optimization mode for some reason don't use this.
It's faster but so is storing ever variable as global with no function calls doesn't mean you should.
I'm not mindlessly parroting essay titles any more than you are mindlessly quoting Donald Knuth's analysis. I'd also like to see a source on your statement that labels are supported in JavaScript because they are the "optimal language construct for procedural programming". While I'm sure that Knuth has research suggesting this, I doubt that it had any bearing on the decision of supporting them in JavaScript.
Svelte just uses label $ to mark the labeled block for the svelte transpiler as one to create a dependency graph for any assignments inside the labeled block. It does not actually have anything to do with the original use of labels. They just reused the label syntax for their own purpose as they knew it's often not used (and shouldn't be)
Oh not another one of these... if you think it's crap, don't use it. Next!
Thanks for the clarification
Nobody cares about certifications for JS.
LOL
It doesn't really seem to be the fault of JavaScript when... - Floating point math works the same way in other languages - The author is using `parseInt` to round a number, when it's not designed to do that - The author is using a function designed for *formatting numbers* for something totally different - And then again using `parseFloat` for... some reason I don't even understand? Because he knows his code is broken? In other words, if you mis-use functions for what they aren't designed to do, your code probably isn't going to work correctly.
I don't think it's crap I think, in some sense, it's messed up, for that reason I show the insights and propose a solution. Thanks for being constructive though.
Var should definitively be abandoned, it's obsolete and let / const were supposed to supplant. The only question is whether to use const or let as default. And const seems to have become the standard. I personally don't agree with it - I find it confusing because it may lead people to think that the var is immutable, but it is only for scalars (strings, numbers, booleans) but not objects (you can delete all the properties of an object and add completely new ones, but it's still 'const'...). Also, you can do array.push but not array.concat... still, The Community has settled on const, so that's what you should be teaching.
It seems unreasonable to me to to use parseInt and parseFloat in these cases. What is the goal you want to achieve by parsing a variable that already is a number into a number? If you want to have an integer just pass it to Math.abs. NaN totally is a number as it is a special floating point number value, but it’s underlying representation is still a float. Most of the problems you mention are not problems of JavaScript but either you using JavaScript incorrectly or are part of a standard.
i'd explain const/let and drop a sentence like "we used to use var, which is not block-scoped (etc) and a thing of the past"
Assembly is god, and assembly uses GO TO's.
Yes you should introduce it, because an understanding of variable scope is fundamental to a solid grasp of programming. Taking half an hour to understand this concept now will likely save them many hours of debugging later because they've only a vague notion of what's going on. As to using it, well personally I'm pragmatic about it. I've only started using it in new code myself relatively recently as I prefer solid adoption of these things before I jump, and I wouldn't necessarily use it, or refactor at high priority, when maintaining an old codebase. But nevertheless it's good practice now and there's not any excuse to default to it going forward.
There's some interesting examples if you google "uses for goto". =)
Open your terminal, type `python`, then &gt;&gt;&gt; 1.5 - 1.2 0.30000000000000004 Type `CTRL-D` to exit Now Type IRB (that's Ruby) irb(main):001:0&gt; 1.5 - 1.2 =&gt; 0.30000000000000004
&gt; you're basically bringing this back in 2019. the only people I know who use GO TO statements today are boomers who need a nuclear option
const is weird and unsatisfactory though, as it isn't really (if you initialise by assigning an object then the object properties can still be updated). While using let clarifies things, const has the opposite effect.
https://0.30000000000000004.com/
No problem. I just thought it needs some clarification so people didn't get wrong ideas s.a. that Svelte developers use labels for any jumps in their codebase and use this to justify their use of this "taboo" feature.
Absolutely, this is the key point, ppl don't really understand for what they are designed for, they mis use it.
Nice :-)
I don't quite understand how it is JavaScript's fault if people use the language incorrectly though.
 .model small .stack 100h .data msg db 'Have an upvote!$' .code start: mov ah, 09h ; Display the message lea dx, msg int 21h mov ax, 4C00h ; Terminate the executable int 21h end start
&gt; how dated the pattern of GO TO statements actually is There are plenty of arguments against GOTO and the like, but "it's dated" is not much of an argument against anything. Good ideas can be old, and bad ideas can be brand new.
Fair point - perhaps my understanding of the term "dated" is slightly off - English is not my first language. I didn't mean to imply that it is bad simply because it is old, rather that it has been obsoleted by newer concepts.
Agreed, it moves too fast Kudos comes from github stars, authoring popular libraries, being on the speaker's circuit, that kind of thing.
good point, and i never use const for objects. but if the argument to introduce var is that they might run into it, you kinda have to introduce const as well.
“Scientists were so preoccupied with whether or not they could that they didn’t ever stop to think if they should!”
- actual immutable types - For of working on objects without needing to use an iteration helper like entries - sets to have an array tojson - sets to have the same interface as array (which moron chose size instead length?!) I shouldn’t need to convert sets to array.
Yes, unfortunately it really is sub-optimal all round. Myself my historical approach to constants is to do it something like the old C way and define an object const, then set constants as uppercase properties, so const.MY\_CONSTANT\_VALUE. Pure convention but produces readable code.
I love this feature in C#. Not having to 'check for null AND this' gets tedious.
Hi /u/zxqwj, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SuspiciousCompote6, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/babbagack, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yes... but the object assigned to the variable reference cannot be changed. If you want absolute stasis, then look into Object.freeze
Optimal for multi level breaks and continues not in procedural programming in general.The claim was about the usefulness being the reason for its inclusion not his research. The labeled break and continue is a language construct that has continued even in languages like Java and Swift which have eschewed goto explicitly.
Hi, OK if you say so, but for the record, I was not asking for help with JavaScript. I was asking for opinions on a JavaScript project - namely, a course I'm preparing to teach on JavaScript. None of those other forums you suggest are appropriate for that. I wanted the opinion of experienced developers. Sam.
I know, but that's a fine distinction which you and I may have groked quite happily having served our time on pass by reference vs pass by value in traditional programming languages, but it's not what your junior programmer would expect, and as such is going to tend to bug ridden code.
I think it’s useful for breaking out of multiple nested loops. It’s more readable than having extra logic with in each loop to get out of the whole structure
This is a regular discussion... no, freeze won't do, because it's only shallow
Yup. They won't grasp Assembly programming. Ever.
None
Do you even know what you're asking about?
Oh great another article written by someone who doesn't even bother learning the language. 🙄
Title is wrong. It should be "how I misunderstood types and why I chose to blame the language rather than the developer..." Personally, I always saw the term "parse" to mean it will probably end up working against a string.
&gt;It's faster But it may not be... IIRC there are certain optimisations that this can block common JS engines from using. There certainly were in the past, though I've not checked to see if it is still the case. I wouldn't use a construct like this because it is currently, or worse because it just feels like it should, because if the JIT compiler can't beat you now it may be able to soon, and outside of a tight inner loop it isn't going to matter anyway. Only use goto/break/equivalent if it genuinely makes your code easier &amp; less error prone to read &amp; maintain (I can't think of any examples where it would, but I'm quite willing to entertain the possibility that they do exist).
Polymorphism is one of the tenets of Object Oriented Programming (OOP). It is the practice of designing objects to share behaviors and to be able to override shared behaviors with specific ones. Polymorphism takes advantage of inheritance in order to make this happen. In OOP everything is considered to be modeled as an object. This abstraction can be taken all the way down to nuts and bolts for a car, or as broad as simply a car type with a year, make, and model. To have a polymorphic car scenario there would be the base car type, and then there would subclasses which would inherit from car and provide their own behaviors on top of the basic behaviors a car would have. For example, a subclass could be TowTruck which would still have a year make and model, but might also have some extra behaviors and properties which could be as basic as a flag for IsTowing to as complicated as the specifics of the lift. Getting back to the example of people and employees, all employees are people, but all people are not employees. Which is to say that people will be the super class, and employee the sub class. People may have ages and weights, but they do not have salaries. Employees are people so they will inherently have an age and weight, but also because they are employees they will have a salary. So in order to facilitate this, we will first write out the super class (Person) function Person(age,weight) { this.age = age; this.weight = weight; } And we will give Person the ability to share their information Person.prototype.getInfo = function() { return "I am " + this.age + " years old " + "and weighs " + this.weight +" kilo."; };
But you will find it in You don't know JS.
You can also perform a bitwise operation to truncate a decimal number to an integer. Just use bitwise OR with zero: (8.239 | 0) === 8 (904.728804 | 0) === 904
yeah man this really has nothing to do with javascript...
Yes it's true, the title is leading to misunderstandings of the content, I just change it to make it clear. Thanks for tour help!
This 138 page PDF will help. [http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf](http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf)
~~n is an alternative to the method mentioned before. However Math.abs is the most semantical option in my view.
Some things cheat to hide the issue a little. Ask MS Excel for "=0.1+0.2-0.3" and it will give you zero because it sees the pattern and adjusts to give a rounder result. Ask it for "=(0.1+0.2-0.3)" on the other hand and it doesn't see this as equivalent so does not do that trick instead returning 5.55112E-17 (or 0.0000000000000000555112). &amp;#x200B; For most purposes this is fine enough of course, but you need to be careful with comparisons: any test for the result being equal to zero will not match.
You can read about it further here: https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch5.md and go to Labels.
Go-to statements are still useful for cleanup (especially with repeated API calls). Saves a lot of unnecessary if statements and actually makes it more readable, IMHO. Only time it should ever be used.
Hi /u/erjisme, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/insane__knight, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/benderdome, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ReptilianTuring, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It's interesting because JS has some legitimately funky things but this article isn't about those at all. Just the fact that it starts off blaming floating point arithmetic issues on JS is pretty much a non-starter. Floating point works similarly in all languages and it's up to the programmer to handle issues with those operations being inaccurate. This site literally gives you the exact example in every language with the same result: [https://0.30000000000000004.com/](https://0.30000000000000004.com/)
Hi /u/Sadghuru, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FriedHummusWithChili, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mohsinulhaq001, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/esyst, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mishmashmishmish, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Polymorphism is one of the tenets of Object Oriented Programming (OOP). It is the practice of designing objects to share behaviors and to be able to override shared behaviors with specific ones. Polymorphism takes advantage of inheritance in order to make this happen. In OOP everything is considered to be modeled as an object. This abstraction can be taken all the way down to nuts and bolts for a car, or as broad as simply a car type with a year, make, and model. To have a polymorphic car scenario there would be the base car type, and then there would subclasses which would inherit from car and provide their own behaviors on top of the basic behaviors a car would have. For example, a subclass could be TowTruck which would still have a year make and model, but might also have some extra behaviors and properties which could be as basic as a flag for IsTowing to as complicated as the specifics of the lift. For an example, we can take this: class Rabbit { constructor(type) { this.type = type } toString() { return "I am " + this.type + " rabbit!!!"; } } let blackRabbit = new Rabbit("black"); // for a normal example, let's say this: let redRabbit = { type: "red" } // for your information, the `String` function calls the toString method on an object to provide a string result // for normal objects, it would return `[object Object]` =&gt; doesn't return so helpful information // let's see the difference in our black rabbit ;) console.log(String(blackRabbit)) // =&gt; "I am black rabbit" console.log(String(redRabbit)) // =&gt; "[object Object]" When a piece of code is written to work with objects that have a certain interface — in this case, a toString method—any kind of object that happens to support this interface can be plugged into the code, and it will just work. This technique is called *polymorphism*. Polymorphic code can work with values of different shapes, as long as they support the interface it expects.
I just changed the title, I didn't mean to blame the language rather the developers understanding of it. Sorry my first post and not native English. If you find more things I can improve let me know and I'll do my best. Thanks!
I find exactly the opposite is true in business settings, where you want reliable, robust libraries that don’t have to be maintained by yourself or your team. Which, I think, feeds into a sort of cultural backlash against that, where people begin to question why some piece of Node server middleware might have 100 npm dependencies, when they could have produced the same functionality in 300 lines of code. It just seem *excessive*...
With goto you don't need function calls so no closures allocation or copying of variable values or references and prevents garbage collection. You can just generate jump instructions if you know assembly you can see why this is much faster using in a loop would not make much difference I would think.
Got it, thanks!
Just use uint arrays and manipulate the image however you want
FYI to the youngins: this kind of thing is what led to dijkstra's paper `goto considered harmful`
it's not much worse. they're both bad, and if you're doing something like `if (breakout)` inside inner loops (and have a lot of inner loops) it's probably a strong indication you should change your data structure or looping code
I think for the odd case, you’re right. I’ve been in some scenarios where we had many functions that required integer conversion from potential floating point values (e.g. calculating the number of `child_process` instances to spawn), and it’s common to just implement a guard with the bitwise operator for each function. It’s just quick and easy, and a bit more performant since you aren’t calling a method.
There are definitely some weird ones in there... but on the other hand, I think it's a symptom of having a package manager that *actually works* reasonably well. It's harder to end up in dependency hell with npm than when using some other package managers, so it's more common to have packages for smaller things.
I suggest that before moving to frameworks it's always great to have some understanding of core JavaScript, once you understand JS you'll easily be able to use new frameworks, but if you understand only a framework or two, there are actually good chances that the framework might be replaced in a year or two... So, for mastering JavaScript, as people have already suggested a very good book (YDKJS) I have few more suggestions you may take into account ;) 1. [https://eloquentjavascript.net](https://eloquentjavascript.net/) =&gt; actually I think this book can make you a JS master if you're able to read it, it's gonna be a bit hard and you may not like it at first, but in the end when you make your own platform game and your own programming langauge (you read it right, you can write your own programming language in JS very easily [https://eloquentjavascript.net/12\_language.html](https://eloquentjavascript.net/12_language.html) ) The feeling's gonna worth it. 2. [https://reactjs.org](https://reactjs.org) their documentation and tutorials are good enough for React Again, as somebody else stated, when you're a dev, what matters more is delivering, quality product. So, it's gonna be fine even if you don't complete YDKJS or EloquentJavaScript and Google the things you need to do while you're actually making it, haha ;) well, from my side, Eloquent JavaScript is the best resource anyone can get for JS, the third edition includes ES6 features as well. &amp;#x200B; All The Best!
Nope. Your webapp is serverless, your services don't have to be. What I mean is you can set up a little firebase commenting system and use JS to call it and that'd still be considered under JAMstack because you're not running a server, you're just making calls to it
Someone's unsubstantiated opinions in a short bullet point format
Yep, this is a well known issue with binary representation of decimal numbers
Thanks for the awesome resources! And agreed, Canvas is recommended for a bit complex animations, SVG animations is gonna use more CPU when gets complex, I am not entirely sure of the reason but I would say that's because SVG keeps the drawn shapes for easy reference in the Document Object Model, while Canvas loses all the information about whatever it drew right after the drawing is done and the shape is converted to pixels on the screen ;), though SVG works fine with simpler animations and graphics. Very well done!
I assume you're sourcing [this](https://www.cs.sjsu.edu/~mak/CS185C/KnuthStructuredProgrammingGoTo.pdf). Knuth doesn't make any mention on how `go to` is the "optimal language construct for procedural programming." He actually goes on to say, "
Ow, flashbacks from the nightmares with goto in C many years ago.
CSS can also give you what you're looking for: [https://picturepan2.github.io/instagram.css/](https://picturepan2.github.io/instagram.css/)
One more one more resource: p5.js seems to be the thing you're probably looking for, canvas animations and simulations, and actually much more!, I have watched some of the p5.js tutorials on YouTube from the coding train channel, and it seems to be very easy to use and very friendly. Google about it, or look for videos on YouTube. [https://p5js.org/](https://p5js.org/) [https://youtu.be/8j0UDiN7my4](https://youtu.be/8j0UDiN7my4) &amp;#x200B; Other than that, if you'd want to use webGL, I would recommend to just find a library which abstracts away all the WebGL details and drawing details from you so you can focus declaratively on your animation / simulation. Though there's this Phaser.JS very famous for making HTML5 games, but I guess it can be easily used for Simulations as well and it abstracts away all the WebGL / Canvas drawing code from you, making your work very easy. Phaser includes an inbuilt Physics Engine with many concepts readily available for you! [https://phaser.io](https://phaser.io) &amp;#x200B; ALL THE BEST!
Performance wise all the methods mentioned are very similar. I setup a benchmark here: [http://jsben.ch/Hc9xX](http://jsben.ch/Hc9xX). On my browser (Safari) the results are quite close together and the ranking changes from one run to another. But you are right: sometimes it just is handy to just use two characters to cast a float to an int.
&gt;If you think that it is anything like React, From the actual thread if you bothered to read it... "This API is certainly inspired by React hooks"
Oh, yes, I misunderstood the comment I responded to. I meant to say the bitwise operation was faster than `Math.abs`. I think we are on the same page.
Yeah I think we are on the same page here, thanks for the benchmark!
Have you tried ES6, React, TypeScript, and all the new features they're creating for new versions of JS? Well, JavaScript is continuously developed and supported language with a rich community and libraries, works without installation, works \*REALLY WELL FOR ME\*, though same might be true for Python, but I would not want to switch to full stack python, JS simply works super well for me everywhere... I guess it depends more on personal preference. I am not sure how React and JSX would have been in Python, but to me seems like React and JSX fits best with JS only ;) and a lot more resources and libraries. So finally, I wouldn't switch to full-stack Python from JavaScript.
That’s a really good point. NPM is the best package manager I’ve used so far.
Uh, I'm situations where you have to break from multiple levels of nesting, you'd prefer to put in flags and logic to check if you broke from the child all the way to the outer loop? That's better to you? Or putting all loops in a callback and randomly returning in them? That's more concise? If you need to do it, do it. Simple as that. If you need to put in a comment explaining it, do that. This wouldn't trip up any moderately experience developer for more than a second or two. Should you do it unnecessarily? No, of course not. But don't imply features of a language are bad because you have some weird prejudice. They wouldn't be there is they weren't, at least sometimes, needed.
And cue all the people saying you shouldn't do this and it's the same as goto. Even though it's clearly not.
Con you no just do: while true { for 0 to 4 { break; } } And break out of the `for` loop but no the `while` loop? See I thought the `break` statement only broke you out of the parent code block; in this case the `for` loop.
&gt;Also, as the size of NodeJS application grows, it becomes increasingly difficult to manage the complexity while the same is not true for Java. Its MVC model helps to seamlessly perform at scale. How about just using MVC patterns or one of the plethora of frameworks in Node 🤔🤔🤔 Terrible article, feels like the author had his notions and set out to verify it. Node is unopinionated cause the runtime and language shouldn't dictate architecture. It has the capacity to be every bit as scalable with the same "seasoned" system architects
Very cool.
I read the thread. I also understand how both of these things are implemented. The syntax is inspired by hooks, yes, but the actual implementation is far from it. There is no similarity between how hooks are implemented in React and how this component syntax is implemented in Vue. The core aspects of hooks are that they are re-invoked every render, and every modification to state causes an entire re-render. Neither is true with the Vue implementation. In what way is this similar to hooks besides a small resemblance in syntax?
I see it as a sort of “curve of pain”. If you jump too early to microservices and multiple runtimes, you might add a ton of unnecessary complexity out of the gate, when simpler solutions were available. As the monolith gradually becomes complex on its own, breaking it up *might* make sense. It’s still worth asking why, and what are the alternatives. But then sometimes breaking up the monolith can feel like a weight lifted off your shoulders. It can solve a lot of problems, but it can also introduce an entirely different set of new problems... Lest we forget: *all software sucks.*
&gt;I'm not mindlessly parroting essay titles I think the issue is more you're making the leap that this construct would be considered "go to" in the context of the article. The actual text suggests that labeled break is not what he's talking about, any more than an unlabeled break is. Break statements are what he refers to as a "bridled" go to, which doesn't have the same problems. &gt; The go to statement as it stands is just too primitive; it is too much an invitation to make a mess of one's program. One can regard and appreciate the clauses considered as bridling its use. I do not claim that the clauses mentioned are exhaustive in the sense that they will satisfy all needs, but whatever clauses are suggested (e.g. abortion clauses) they should satisfy the requirement that a programmer independent coordinate system can be maintained to describe the process in a helpful and manageable way. Which certainly holds true for labeled break statements.
Oh! I thought this was a feature unique to ActionScript 3. Good to know!
&gt; multiple nested loops Please don't.^(\*) &amp;#x200B; * ^(In all but the most specific circumstances)
I was with you until you mentioned jQuery being bloated. It’s not. The minified gzipped file size is [under30 kB](https://mathiasbynens.be/demo/jquery-size). I think what you’re *actually experiencing* when you see slow, bloated websites built with jQuery, is not jQuery itself, but rather all the images downloaded from slow CDN’s, and all the terrible architecture decisions made by people who are more competent with web *design* than they are with web *programming* (not to belittle them—it’s just a fact). Those bloated content sites use jQuery because it makes DOM manipulation feel easy for people who just want to get something on the page and not think too hard about it. There’s a lot to be said for that. But people use jQuery all wrong, doing horrifyingly slow/inefficient operations with it... that’s the real culprit. Also, it helps a lot to use bunglers with tree-shaking to remove unused code. That can cut some apps’ bundle sizes in half.
&gt; Uh, I'm situations where you have to break from multiple levels of nesting, you'd prefer to put in flags and logic to check if you broke from the child all the way to the outer loop? That's better to you? Or putting all loops in a callback and randomly returning in them? That's more concise? Those are some possibilities, though in different circumstances i might use different approaches. I recommend choosing the one that's most easy for us humans to understand. Things which are familiar tend to be easy to understand, and labels are definitely something that is *not* familiar to most programmers these days. My codebases tend to use a lot of the functional style of working with arrays (so map/filter/reduce/some/every rather than manual for loops), so another option i'd offer as a possibility is using `.some` or `.every`. Again though, this decision should be made based on what's easy to understand. I and the people i work with find this familiar and easy to understand, so it's a good approach for us. const arr = [ [true, true], [true, false], [true, true] ]; function everyElementIsTrue(nestedArray) { return arr.every(subArray =&gt; subArray.every(val =&gt; val)) } console.log(everyElementIsTrue(arr)); &gt; This wouldn't trip up any moderately experience developer for more than a second or two. This is an acknowledgment that it does trip them up, and implicitly the junior developers will be tripped up more. I think we can do better. &gt; But don't imply features of a language are bad because you have some weird prejudice. They wouldn't be there is they weren't, at least sometimes, needed. I wonder how many times that has been said during the history of programming languages.
Exactly. Not the greatest idea to take advice from people who just writes simple CRUD code and never actually had to implement some algorithm that involves nested loops. Lots of virtual dom libraries use labels to break out of nested loops, because that's the best code for the job. Use the right tool for the task etc.
Also, and perhaps more importantly, no one uses them. This is a great way to confuse other people that work on a project.
Well this isn't quite a goto in the same way while loops and break statements aren't a goto. But for this specifically, I'd argue it's still more readable and more declarative than creating control variables to escape nested while loops. The big argument is if you should be using nested while loops at all, or you should rewrite to do this another way. Way, a legitimate use case for this is can be backtracking, or anywhere you need to rewrite recursive functions imperatively, which is may be necessary when the language doesn't implement tail-call or sister call optimazations. In some of those cases using recursion can cause a stack overflow when the imperative way would work fine, so it's not just a matter of performance optimazation but of your code not working at all one way. Also sometimes writing simple nested loops could be preferable to writing a new function for 2 or 3 lines of code, say traversing a 2d array, and this would be a legitimate way of exiting early.
It's definitely better in Assembly or low level langauges, but in Javascript where you don't want threads getting locked up, I would never do this. This is literally a while true, which locks up browsers, especially on phones.
If you scroll down far enough [this epic pull request](https://github.com/pieroxy/lz-string/pull/98) you'll find a benchmark where I discovered it was faster.
Could actually save 2 lines by doing this the “regular” way. Where you inverse the conditional and concatenate the number to the string inside the if statement. This is slightly more confusing to me and it’s unconventional which I think we can all agree on is a bad thing in programming.
I don't know, I just keep things modular at all times. This way at least all software can suck in small separate doses.
Ah, thanks that's a great example! It makes sense too if i consider the meaning in English... "It's imperative that you do this thing..." in other words explicit steps. Whereas if you declare something it's more making a statement and is more open to interpretation. There must be better ways to think of it but i think that'll help me remember it. Thanks again!
Yeah, you shouldn’t do that, like ever
It's an ad. They won't say Java is not good option if they only can do things in Java... PayPal moved to node from Java because they are building small scale applications of course.
i didnt know people allowed nested loops in production code
&gt; Edgar Dijkstra famously published a letter saying GO TO statements are considered harmful. As others have mentioned, this is not a `go to`. Not just in name but in functionality as well. The parts of `go to` that Dijkstra considered harmful (mostly jumping between procedures and invalidating the stack context) are not possible with this labeled break construct. Did you read the letter you just linked to?
I wrote a short article a while ago about dark mode support on the web. It's really quite easy to do using CSS variables and media queries: [https://www.arno.org/dark-mode](https://www.arno.org/dark-mode) Dark mode all the things!
Except a label is literally one line. The break is one line. It's minimal and clear if you know about labels. It trips people up because of the stigmatization left over from assembly and c. If you didn't know about loops, they'd trip you up too. Or variables or functions or literally anything. It's a concept that, even if you'd never heard of it before, you could comprehend in a single-digit number of words. Instead of this simple, easily understood concept, you'd prefer to opt for what is, essentially, an entire library's worth of functions just to avoid it. Typically I avoid nesting loops and I tend to optimize them shortly after finalizing them. So, I don't need to break from nested loops very often. But if I did, I would certainly opt for a label and break over any other more abstracted, less clear solution. And, if someone was confused by it, I'd put in a comment: // This is a label so we can break from the inner loop on line 43 Instead of // There are if statements on line 23, 56, and 87 which break if the conditional is true, set in their child loops, each named with obscure labels because like "loop3" etc etc How long it takes to explain what you did is a good metric for how sane it is.
Ew
What is the point of this article? It just lists some common points about both subjects and throws some oversimplified conclusions like "if scale then java, if not scale then node", like, what is supposed to be the takeaway here?
More generically: the problem of translating floating-point non-integer numbers between number bases. Integer values translate nicely (as long as you have enough digits where you are storing the value in the smaller base), as do fixed scale non-integers (scale them up to the point where they are now effectively integer, and tweak algorithms accordingly to account for the change in scale).
&gt; In 15 years of working with JavaScript, I can't think of a single instance where I have seen this used legitimately. Then you're not looking very hard. Here's one in React: https://github.com/facebook/react/blob/6c404d82aa082a008dba033eb3f0f9c6803b13c4/packages/react-dom/src/client/ReactDOMSelection.js#L75-L110
If the compiler can inline the function calls this goes away, along with the related stack allocation, value copying, and other such matters. While not currently relevant to JavaScript (IIRC no common implementations currently perform this trick) tail call optimisation makes this work even in many recursive call situations.
Thank you. Yes, I think I might have jumped a few steps in my logic when quoting the letter without explaining why i see labeled breaks as go to statements - making the to point I was arguing for a bit harder to follow. I should probably spend a bit more time when writing comments like this in the future.
One should use as few JS as possible to deliver the needed use case. For something like Gmail it makes sense to create full blown SPA, but for the vast majority of websites it doesn't. It still makes a lot more sense to have a mutliple-page application. Either server rendered with sprinkled JS to add UI functionality, or with something like Jekyll and using REST/GraphQL for dynamic pages.
&gt; Except a label is literally one line. The break is one line. It's minimal and clear if you know about labels. I am not judging it on its conciseness, only its familiarity and corresponding understandability. There's the first level of unfamiliarity, which is just that they've never seen it before and so may need to look it up. But more pernicious is the fact that using labels causes a new pattern of control flow that they otherwise would not have encountered. It's not as bad as gotos since it can only be used in a limited set of circumstances, but it's in the same vein. Shaking up the developer's assumptions about the order of execution needs some pretty darn good reasons to warrant it. &gt; If you didn't know about loops, they'd trip you up too. Or variables or functions or literally anything. It's a concept that, even if you'd never heard of it before, you could comprehend in a single-digit number of words. Of course. Now how often would you say you use those things compared to how often you need to break execution of a multiply nested loop? You're comparing an obscure part of the language with common parts of the language. People are necessarily going to become comfortable with and have an understanding of the parts of the language that they use all the time. &gt; Instead of this simple, easily understood concept, you'd prefer to opt for what is, essentially, an entire library's worth of functions just to avoid it. What library's worth of functions are you referring to? You brought up two suggestions, which i can boil down to "creating variables" and "using return statements". I added "using array methods". These are all things that developers **already know how to do**. In short, my recommendation is to use the parts of the language that we already know and are familiar with. By doing so, the code becomes more understandable to everyone.
IIRC Labels are very bad as far as performance of code is concerned. Won't affect much in the browser but might affect your Node.js code
It is not a go to per se, but I think Dijkstra's letter very much applies to labeled break statements as implemented in JavaScript, too. Dijkstra's letter is all about using statements that move the execution around the code in a non-linear way and in that regard, I believe it does apply to labeled break statements as well.
I don't think the answer for comprehensive code writing is "if you don't know it, never use it"... But to each his own, I suppose
Just because React is doing it doesn't mean it's a legitimate use case. Would you put two nested `while (true)` loops in your algorithm or would you refactor it in a different way?
IIRC, some very old version of Opera's JS engine (before switching to Chromium) actually supported goto.
Many virtual DOM libraries do use them, including React. I'm finding somewhat appalling the hivemind status quo excuses in this thread. People saying crap like "don't do it, it's not readable" as if that's a smart "senior" level take on it. People comparing labels with gotos, as if they were even remotely close to being the same thing. People talking about FP style entirely missing the point of why real code uses labels. Sheesh. Some humility wouldn't hurt. Good on the OP for learning things. Keep learning, there's a lot of depth here.
You're determined to misunderstand me. Whatever.
Non-structural way, jumping inside loops or inside else statements. The label breaks are very much structural, they just break out of the nested contexts.
Here's [another one in ivi](https://github.com/localvoid/ivi/blob/82c3df53f28145f56007a12c9b27ff22c24ad690/packages/ivi/src/vdom/reconciler.ts#L870-L877), which is considered to be one of the most state-of-art virtual dom implementations among other virtual dom libraries authors. Again, this was a 30 second search. If you've never seen a label being used, it's more likely because you haven't done much algorithmic work yourself, rather than there being no legit use cases for them.
/r/LearnJavascript might be a better place for this.
Let's not, though
It applies to non-labeled breaks as well.
Oh you’re the truffle guy! A sweet framework, but I believe I read an article about how you guys came up with your graphics and it was super awesome. You guys have the best graphics.
"Hivemind" is excessive – idiomatic approaches are a thing. MDN themselves note "labeled loops or blocks are very uncommon" in OP's link. If there are two ways to solve a problem, and one of those is more commonly seen in JS ecosystems, that's the one I'd recommend using. I did not realize React's source makes use of labels - certainly interesting.
Cool idea but sadly works on Edge but not on Firefox.
Just because you can doesn't mean you should. Seriously, never do this.
Hi /u/mrfrontend, this post was removed. `404` Well, this is awkward. Whatever you did is so uncommon that we don't have a canned response for it. It's also possible that you broke several guidelines. Either way, please have a good look over our guidelines (linked below and in the sidebar). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Why not? Give me a GOOD reason, not reprocessed popular opinions.
This one! [https://www.trufflesuite.com/blog/designing-the-ganache-logo](https://www.trufflesuite.com/blog/designing-the-ganache-logo) /u/discriskandbisque would love to hear this!
[removed]
Opportunities for hilarity abound: `break A_LEG;` `break IT_ON_DOWN;` `break THE_CYCLE_OF_ABUSE;` I especially like that last one.
I learned about labels after writing a eslint rule set. Great for `for` loops (maybe switch statements) but outside that I think its code smell
You suggest that because there IS A PERCEPTION that 'most developers' "don't know about labels", that it makes the feature less usable?
Thanks, I hate it.
Most teachers are too responsible to teach this knowledge.
I'm saying that code which is unfamiliar is harder to understand. Additionally, i'm saying that understandable code is desirable, and so should be preferred unless there's a compelling reason to do otherwise.
Ahem, Svelte reactive statements ;)
That is a if that is different for every implementation with out a lot of gurantee it will do this optimization and a thousand different things that could cause it to bail out. I'm not saying it should be used, but if performance really does matter and garbage collection isn't something you can accept this is a way to get around it
I'm trying to think of how a function would work here. The purpose of these labels is when you're working through nested work sets, and you might need to short circuit the whole thing. So: var start = new Date() BATCH: while(job = getNextJob()) { while(task = getNextTask()) { task.run() if (new Date() - start &gt; BATCH_PROCESSING_LIMIT) { break BATCH; } } } ... Not sure exactly how you'd break that into functions.
Well OF COURSE it's easier when you understand it, but I didn't ask you about ease of acquisition, I asked you about usability. What's usable, to me, are solutions that actually solve the problem, and I consider it silly to complain about the use of a language feature that has persisted LONG SINCE Djikstra's letter when it has valid use in solving certain problems. Just because it's outside your ken, space of opinion, whatever, does not answer the question about USABILITY.
&gt; I asked you about usability. No, you asked me to clarify what my point was. You assumed i was talking about usability, and i clarified that i was talking about familiarity and understandability. Now that you understand what i was talking about, would you like to switch the topic to usability?
Are you saying `c` fixed the problem about leaking memory and goto 's expansion of scope? I know some do, but, I didn't think `c` did.
Huh! That's really good to know, thanks. I'm somewhat new to d3.js. I've actually only tested it on Chrome... let me take a look. What does it show you?
thanks!!
loops, if-statements, etc were created so you have better structured code instead of using jumps. It's almost syntactic sugar, but it makes it harder to make a class of bugs.
Thanks for your response! I was not aware of that channel 😉
No, that's fine. I still disagree with your point, because I believe engineers should be willing and able to extend their knowledge by learning about new, unfamiliar things, rather than clinging only to what they know.
I mean, the whole post is about someone having learned something somewhat obscure. I figured it ought to be obvious that it's not going to be something that people normally use. If one's really "above" labels in terms of how advanced their JS skills are, it'd be more constructive to talk about why/when one might want to consider labels (e.g. algorithmic work such as the links I've posted elsewhere in this thread), and why other approaches may not be ideal (e.g. concerns about hot path performance, memory allocation costs in alternatives, etc). Things are idiomatic for reasons, and likewise it's good to know when those reasons don't apply. There's a lot to gain from learning things more in depth and a lot to lose for dismissing things superficially. Nobody wants to be the 40 yr/old who can't get better jobs due to stale skills, and curiosity is a key ingredient in making sure one doesn't get to that point.
&gt; I believe engineers should be willing and able to extend their knowledge by learning about new, unfamiliar things, rather than clinging only to what they know. Yes, because despite the words i said, what i really meant was "learning is bad". Well done, you saw through my ruse. ...
If you don't have a ton of local function scoped data outside the loop to worry about, just do this: // put all this in its own function while(1){ const value = Math.floor(Math.random() * 100); for(let counter = 0; counter &lt; value; counter += 1) { // return to break out of it all in a clear manner if (counter === 50) return; } console.log('missed on value', value); } If you DO have a ton of scope then perhaps it's time to think about using the label, as obscure as it might be, b/c it is widely supported anyway.
Their graphics are definitely on point 10/10. It could be the sole reason for me wanting to go into blockchain development.
if you find a place to use it. stop up and consider the entire approach
&gt; I had no favoritism for python. lol, transparent bullshit. Python is simply much more complex as a language; too many types are built in to the core. the python import system is barely documentable; have you never read the spec? sure; JS has grown a bit, bit it still hastn reach python levels of complexity. All functions are first class functions. Methods are not special, classes are not special, nothing is special. Its an extremely uniform tool. Perhaps you have been so distracted by syntax you cannot see it; butmore likely its just blatant bias. (every JS thread has a few "what about python" types who are sad that their dynamic language is relegated to eternal #2 status) Its just clumsy and slow in comparison. (and slow is objective; you cannot argue that its faster in your opinion) I have actually used python since the 90's, and like it for what it is, despite the absolute train wreck they made of unicode support, the brazen awkwardness of various ORM schemes, the buggy as hell import system, the unkind levels of magic you can hide in various types of objects, the abomination known as flask, and the eye bleeding levels of pain needed to make things work asynchronously/greenlets. JS is just dead simple in comparison. There is much less to learn. Despite the ugly syntax, you get 100% async everywhere without doubts. Nearly nothing blocks at all, so no 3rd party modules is going to derail your state machines. the semantic core is mind numbingly simple; scalars, objects, continuation generators, and first class functions. its almost spartan. Second level constructs are all built on top of the primitives in an obvious way. A few quirks; weak casting, an invisible first argument, and trouble with surrogate pairs. Very little to learn beyond that.
Hi /u/Ziaul53, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
 https://imgur.com/qozwj9w
That's beautiful.
Your while conditionals are where the functions would go (or their returns) and the while blocks would be functions.
I find it hard to believe you have been working with python since the 90s when you have the general conterence of an angsty teenage You clearly are not a very able developer if you struggle with 'flask' and 'imports'. I wouldnt hire you as a associate dev at that point. Kinda sad. I don't know that imports are buggy at all. I'd love to see you try to dig up the bug reports you've filed. Again calling it buggy because it doesnt work for you just implies you dont understand how to make it work. Also maybe your pain with asynchronous programming is because you are used to JS where it isnt actually asynchronous? Javascript doesnt have to deal with mutexs or real parallelism. Quite contrary to your statement, you dont get asynchronous everywhere, you get asynchronous no where in most blends of JS. I guess you arent up to the task of grown up programming here. Maybe the core issue here is an incredible amount of emotional immaturity. You've shown plenty in this thread to convince me that you are very little worth serious consideration.
Oh wow Meng To... This was the guy that made [Shadowness.com](https://Shadowness.com) right? Glad to see he's still helping to pioneering the web. His early website from 2003-2004 is the entire reason I ever got into web design.
indeed
Also... https://docs.python.org/3/reference/import.html Now show me the javascripts....
Same as in Java
But my hammer!
Ah this is great! I've been looking for something exactly like this.
Oh *totally*. I sort of meant to imply that I was speaking for places that don't do explicit performance testing; if you do then *of course* that's superior.
[https://github.com/xobotyi/is-fun](https://github.com/xobotyi/is-fun) Made as drop-in replacement for `https://github.com/ljharb/is-callable` package, but **[lighter](https://bundlephobia.com/result?p=is-fun)** and **[faster](#performance-recent-benchmarks-results)**
It's alright as long as you only use it once every two years. Sometimes it's the most legible way to structure your loop. Most of the time it isn't.
I have used truffle as well as ganache for ethereum.. just wanted to say: awesome work.. 👍
for something that requires so much preciseness and complexity, I really feel like static languages should be use for blockchain stuff. :-\
Hmm, I think I may have figured it out. How does it look for you now? thanks for the tip!
Thanks, I think I may have fixed it. I think I was using a browser specific way of figuring out the window size, so the main svg only had a height of 40px in Firefox. Does it look good for you now?
[Unfortunate name](https://github.com/oracle/graal/tree/master/truffle).
[removed]
great work so far. kinda happy to see you expand. with ganache and now drizzle for frontend. big up for your efforts
And my axe!
Something similar to \`goto\` in C.
yes! good job
github link??? :) awesome job!
If you find yourself in such a circumstance, consider asking if you would be better served by various functional approaches designed to avoid this, pulling inner loops out to separate functions, using a library, or checking to see if you can do something like key by to turn an array into a map so you have constant lookup instead of having to “find” the right thing in an array every time.
That’s fair, but JS developers are notorious for unnecessary nested loops and callbacks. Let’s be generous and assume that probably sometimes people are abusing this, probably sometimes people aren’t experienced enough to know there are better approaches, and on rare occasions this is safe.
Neat, working now! I shared a bit earlier on Twitter cf [https://twitter.com/utopiah/status/1144295410841858051](https://twitter.com/utopiah/status/1144295410841858051) if you have an account happy to cc/tag you there, great work again and thanks for updating so quickly.
jQuery "core" might be small, but then you have all the widget sub libraries. I now use mostly HTML5 for date, color etc fields to avoid jQuery for that. Also, to e.g. create a Bootstrap multiselect field you need an additional jQuery Select library. I use some jQuery, but not on mobile-optimized sites, and never ever jQuery Mobile.
Serious question: why JavaScript? Dynamic language, slower than rust or some other languages, frontend oriented Dev community...
Statement label are most definitely useful because how else are you going to break out of nested while loops without using a function? It gives you more control over nested loops. Nested loops are usually used to implement some complex algorithm easily and quickly without using functions in javascript. There are reasons not to use functions and when to use functions in javascript. It just matters what implementation is the best candidate or what implementation you want to work with or feel most comfortable with.
advantages over Material or Bootstrap?
is ES6 ready everywhere? I'm still hesitant
Exactly. This is the kind of thing that levels you up as a developer. &amp;#x200B; The only kind of situation I can see needing nested loops are algorithms where iterating over a multi-dimensional structure is key to the algorithm itself. Fluid dynamic simulations, for example. VERY specific.
Hi! I really like Truffle, and use it near-daily. It's fantastic for testing smart contracts and creates one of the few really genuinely useful parts of the ethereum ecosystem. But I will say one thing that it's really bad for: app creation. The process of testing is great, but getting the application artifacts into a website? Really not intuitive. I know there's drizzle, but personally I've had some issues with it and it doesn't really seem to solve that much of the problem - ie, it's really just a weakmap based caching solution, rather than actually helping with the connection and data access part of things. For a start, the artifacts are **way** too big. My simple test contract had an output of 150KB. I [wrote some software](https://github.com/smallbatch-apps/truffle-artifact-compression) myself to compress down the artifacts, which I now use on my own production systems. But aside from that, the process of getting the artifact instance bootstrapped and working in an actual system, React, Angular, or whatever, is a nightmare. My previous experience with Truffle Contract were an unmitigated disaster of unsupported versions and beta bugs that actually prompted me to write my own integration library. Thankfully EthersJS has the majority of what that did, so... close enough. I'd love to see Truffle do more around actual dapp production. How to instantiate an app's blockchain instance based on the truffle artifacts. Additionally, as a random point, I'd love to see better documentation. Areas particularly around deployment and creation are quite complex. Honestly I've never really understood how to use the debugger. Anyway, I don't want to seem like I'm not impressed. Truffle is critical for contract development and especially for testing. But for actual app development there are still some really big holes - especially for people who aren't using React.
The actual contracts are written in Solidity, which is strictly static. JavaScript is really just used for the testing framework (actually a modified Mocha) and deployment system.
Because a huge number of people know JavaScript. Besides, Truffle uses JS for development tools, which gives it a large chunk of already existing technology and knowledge.
"Javascript, ah... finds a way."
You know what? I will concede that this might actually be a valid use case even though I still believe you can avoid it with no significant performance overhead and a gain in readability. I'll also take up your challenge. I've done SOME algorithms work in the past and although I don't pretend to be an expert, I like to think that I'm relatively good at algorithms. So I'll try to at least understand why it's built the way it is and try to refactor it to not use labels while not degrading performance and improving readability. I'll either learn something new or improve an open source project which is always cool!
I sincerely doubt that's what you meant...however, complacency can often have the same effect.
you dont have to pose for the audience anymore, I think this thread haas sunken from the top. &gt; if you struggle with 'flask' and 'imports'. Right, because if you criticize something that must mean you struggle with it. &gt; bug reports you've filed. "Poor design" is hardly a bug report worth filing &gt; isnt actually asynchronous? Apparently you dont know what that word means. &gt; angsty teenager. emotional immaturity. Lol, seriously, I'm talking about the language, and at most accused you of liking python, but you feel personally attacked so you resort to ad hominem? I wonder if you see how aptly you are fitting that description yourself. Have you learned a sense of irony in your vast decade of experience that you trotted out as an appeal to authority ? No, you wouldnt resort to that, because it is a fairly short and unimpressive amount of time. You cannot even come to grips with my actual argument, so I suppose that is the best you can manage.
GoTos are bad M'Kay
You did feel the need to reply like 3 days later. Clearly it means a lot to you. You got a github? I'd love to see your work.
Just use a database
NativeScript is for creating native iOS/Android apps (not web). So while Material is coming to NativeScript, Bootstrap doesn't play with native mobile.
It’s so ugly yet so beautiful... probably something I will never have to do, but I appreciate the introduction to the topic. Thanks for posting!
Aw shucks, thanks everyone. It was a blast designing all of our logos! 🤗
How else do you loop through a multi dimensional array? Serious question, not being a smart ass.
https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation
Yeah, about that blockchain and JavaScript...Knowing that even the core tools had critical bugs, I'd rather hear stuff like Haskell, Agda and Coq.
There are a couple of *gotchas* that people run into while using node, such as regularly parsing gigantic JSON strings and blocking the event loop. But Java, along with its runtime, have their own set of footguns as well. And for both languages, those are all usually problems with architecture, not the languages themselves. These days, the most important thing separating one language from another is how many good senior developers you can get who actually know the language/ecosystem and get your app working.
Please, dont do it.
I don't think the answer here is making ignoring nulls convenient. You should have to deal with them, but early on. Having to deal repetitively with deeply nested nullable object chains sounds like you're working with a bad view model.
The "web dev lowest common denominator" isn't anyone who should be writing complex cryptographic work such as blockchains. Which is my confusion, it seems to be putting highly technical and dense work into the hands of what might be described as boot camp grads.
Ahahahahahaha YES!
Labels and finally blocks are two lesser known language features that I simultaneously have no problem believing are useful and perfectly maintainable (or at least as maintainable as their corresponding, more popular features like loops and exceptions) yet have never had occasion to actually use them.
On a related note, why? If the abstraction is more complicated than the procedural approach.................. jus sayin
No kidding. And if you've got a loop in a loop, you could easily have the hot code run hundreds of thousands of times, or millions of times, in which case adding the overhead of function calls for basically aesthetic purposes might not be worth it.
Shrug. In my experience, usually when I see people bust out labels, they know what they are doing (as seen in my links elsewhere in this thread). I've never seen a junior/newbie write code with labels. I do however see plenty of abuse of array methods (e.g. a recent thread that was using splice to flattenDeep and ironically some less bad, but still convoluted code on the MDN page on the topic, compared to a more vanilla loop solution) YMMV
Use frameworks for that.
Yes, we can use [babel](https://babeljs.io/) to compile ES6.
Time to write an NFT asset representing ownership of the name and a coin flipping smart contract... Or they could fight to the death. Either could be interesting
Cool, but not entirely surprising... the full object goes through a full JS parser/processor etc... while in string format, first pass through JS is a string, and JSON.parse is an optimized parsing for only JSON as a subset.
`logb` in `es6-index.js` is imported from `cjs/logb.js` instead of `es6/logb.js`, though I'd be surprised if that changes the results
And, you know, interacting with your contract via web3.
Develop the smart contract using Truffle [using Truffle](https://github.com/graalvm/graaljs/tree/master/graal-js) \o/
There is nothing inherently insecure about npm.
Will play with this now that I k ow it exists.
Oh, are you familiar with a database that lets me verify what code other people are executing in real time? Yeah I didn't think so.
IIRC Google does that in some situations. They have sites being rebuilt every second.
Most library owners and apps do not audit the npm package trail, and the inheritance chain is an obvious vector for attacks. For anyone that's been paying attention npm is a huge security risk.
Packages on npm may be insecure. I don't consider that an inherent fault of npm.
We whitelist specific packages with our devops team specifically because npm is a security risk.
Do `Date`s do math the way you think they do?
It is literally NPMs design and structure that make these attacks possible. How is it *not* the responsibility of a package ecosystem to ensure a safe ecosystem?
This seems like calling the internet insecure just because some websites hosted on it are insecure. I think it's unrealistic to expect NPM to check every single package forever to make sure that they're safe. I don't want them to be the gatekeepers of what's allowed to be a node module. It should be up to devs to properly examine packages, and potentially version lock them.
This is terrible advice. OP is trying to learn how this works, a framework will hide all of the details. Not to mention how absurd it would be to bring in an entire library for a task this small.
It was a joke, ya chode.
Lol oh. I'd say it was impossible for me to know that given how many people actually think blockchains have no advantages over a database.
is there an r/oddlysatisfying for web/js yet?
How do you feel about Bitcoin?
"The right tool for the right job", it's hard to realize the strength of other languages until you use them yourself. I started in JS and was convinced node was the way, then I branched out to other languages and man, now I would never use node for a large scale application.
Neat. I'm curious what would motivate someone to use something like this.
It's amazing :)
I have not used Truffle to the extent as some other developers on blockchain as I am mastering my FullStack Development as a recent graduate, but having used the framework on some projects, it definitely did make life easier at some points. I give my thanks, I appreciate your hard work.
Hi Matt! First off, thank you for writing this up. This is the type of feedback we love to see (where we can do better). You're bringing up the artifact issue at a great time, as we're running into this while developing Truffle Teams. In short, we agree that artifacts are heavy for the front-end. We're currently working on a project called [Truffle DB](https://trufflesuite.github.io/artifact-updates/) which will help with this, by enabling (among many other things) the export of lightweight artifacts containing only necessary info such as the ABI and deployed address. You may have seen u/gnidan posting about this in the Ethereum subs and I'll defer to him for further comment. For Drizzle, when did you last use it? I ask because we've made significant improvements to it lately, including Vue integration on the horizon! In addition to taking care of connecting to a wallet (following [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md)), syncing account addresses &amp; balances, syncing contract data &amp; events and tracking transaction statuses, we've added: - Custom middleware support, to better react to exactly WHEN state changes occur rather than simply observing them: ([Tutorial: Drizzle and Contract Events](https://www.trufflesuite.com/tutorials/drizzle-and-contract-events) | [Docs: Drizzle Actions](https://www.trufflesuite.com/docs/drizzle/reference/drizzle-actions)) - React Native support. ([Tutorial: Drizzle and React Native](https://www.trufflesuite.com/tutorials/drizzle-and-react-native)) - Tracking the current block Finally, we hear you on the documentation and are striving to do better. Would you be open to doing a user interview? We're always looking to improve and it would be great to hear about your experiences with the suite more in-depth. PM me with your info and we'll set up a time! That also goes for any other Truffle Suite users reading this.
Hi /u/ketanIP, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jason_west29, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks for your suggestion, I will add some examples.
There is a roadmap from Palantir (the TSLint maintainers) to deprecate TSLint and migrate to ESLint. Read the blog post and the GitHub Issue at the links below - https://medium.com/palantir/tslint-in-2019-1a144c2317a9 - https://github.com/palantir/tslint/issues/4534
Wont scale Ethereum cant and never scale
You'll be excited to hear about some of our upcoming announcements then. :)
Ok but vitalik still owe me my dao money so i wont be paying attention to his project
Thanks, I hate it.
I'm starting to feel like javascript is ready to bring back the GOTO operator.
Yeah I've never understood the hate for them. They're useful, and in my opinion, perfectly readable. What's the big deal?
IMO it's just the JS community. Lots of desire to preach dogma even though a lot of the preachers don't really understand what they're talking about. This is a perfect example, where the preaching is actually proving that the preachers are factually wrong.
Pattern matching and guards are so much better than anything else in terms of control structure it isn't even funny
You can only break out of the for loop with the break keyword, OP wants to break out of both.
Hey /u/DiscRiskandBisque! You've pretty much said what I would have, so thanks! &amp;#x200B; Seriously /u/mattaugamer, great feedback! In addition to the above working docs link about Truffle DB, you can track the development in the [corresponding GH issue](https://github.com/trufflesuite/truffle/issues/1718). You might see that there's [a linked issue specifically about artifacts being too big](https://github.com/trufflesuite/truffle/issues/1269). We're working on finishing plans to scope + document this so we can get something in the hands of users in time for TruffleCon. Stay tuned!
Some people find exercises helpful. Here's a list I offer my students (not affiliated with them at all, I just found them): * https://snipcart.com/blog/javascript-beginner-intro-exercises * https://coderbyte.com/challenges * https://www.w3resource.com/html-css-exercise/index.php * https://www.w3resource.com/javascript-exercises/ * https://www.w3schools.com/js/js_exercises.asp * http://www.asmarterwaytolearn.com/js/index-of-exercises.html * https://programmingzen.com/15-sites-for-programming-exercises/ (a list of other sites with exercises, but it's not Javascript-specific)
It was super. We are also working in [blockchain](https://www.softlogicsys.in/blockchain-training-in-chennai/) development and blockchain is having a great future
nope. Symbols in JavaScript are not a solution in search of a problem, even for normal developers and "non library" authors. They provide a nicer way to use native features of the language for custom use cases. If you ask me, it is more elegant than the dunder ad hoc and fragile thing they have in Python with __stuff__. Generators are also not a solution in search of a problem. They can be used to write infinite streams and they simplify asynchronous programming in JS. Another practical place they can be used is when defining Iterators. Where an implementation that does not use generator look like this: class MakeRange { private _first: number; private _last: number constructor(first, last) { this._first = first; this._last = last; } [Symbol.iterator]() { return { next: () =&gt; { if (this._first &lt; this._last) { return {value: this._first++, done: false} } else { return {value: undefined, done: true} } } } } } while the one that uses generator looks like this: class MakeRange { private _first: number private _last: number constructor(first, last) { this._first = first; this._last = last; } *[Symbol.iterator]() { while (this._first &lt; this._last) { yield this._first++ } } } More elegant and straight to the point. You can read more about this here: [Generators and Iterators in JavaScript ](https://www.geekabyte.io/2019/06/generators-and-iterators-in-javascript.html) I have little experience with getters/setters so I can comment on those yet.
You can write out the Web3 Javascript in Angular using Typescript for that.
It very hard to Start the Fist Career Now a days, I Completing BE with Average Percentage. I even Don't Know which is Suitable. I tried my interviews, But they Need Some Certification Related to that. i Desired to Take the Internship. I hoped it Definitely Help my Career. At that time Softlogic Systems - [IT Training Institute in KK Nagar](https://www.softlogicsys.in/) Give the Announcement for Fresher IT Internship. So i am Participate on that. I get the Web Development Internship Certification after 3 Months. i add into my Resume. After that i got many opportunity from Various Company. Finally I Start My career as a Developer at PLC. Certification and Internship will Definitely Help you Start your career as a fresher. I Suggested this to Many of Friends and Relative.
Yup
You need to push through the basics first. Most websites offering 101 intro with some interactive exercises would do. But there is really no shortcut, you need to sit down and go through it. Once you played with the most important JS constructs start doing a bit of role play and imagine that you have been asked to implement a small feature. How would you do it? Get inspiration from features in websites you use daily. Most artists are copy cats until they discover their own style :) This way is less practical than starting your own project, but it is also less intimidating than coming up with an idea, breaking down to small chunks you can actually do and staying motivated over time to complete it.
Nice and simple, good work.
Just hope you're not performing decimal calculations with `number`. :)
thanks
Yes! One more package detecting that given variable is function. Made as drop-in replacement for `https://github.com/ljharb/is-callable` package, but **[lighter](https://bundlephobia.com/result?p=is-fun)** and **[faster](#performance-recent-benchmarks-results)**
Yeah, these days if you don't do functional programming, everyone will throw stones at you
Why not?
Why not?
&gt; but when your are doing your first steps, you make a lot of mistakes and probably spend more time trying to fix them. Frustrating. Uh... better get used to it. I’ve been a developer for JS and other languages for over 10 years. Making mistakes and fixing problems is still (and likely always will be) the bulk of my time spent programming. The only difference is that I am much faster at both making the mistakes and fixing them (and I make slightly fewer mistakes).
So, adding an extra function (which will be used only once) that will divide the code into two parts is easier and better than using a break label?
Cool. You should definitely combine this with your image editor (the link to your live hosted image editor app is dead btw) so people can draw over photos.
yeah, that's exactly it.
That's just the way it is, I am afraid. If you make too many mistakes it probably means the practice project you have chosen is too ambitious; pick a simpler one.
"router pattern" ... ?
WebSockets
Meteor... cool and hot??! Isn't Meteor old af, with tons of deprecated packages, compared to the likes of React, Angular2, and Vue?
&gt; Or they could fight to the death. A fight against Oracle tends to mean death for everyone who isn't a lawyer.
Any Help would be greatly appreciated!
Your promise never resolves so the await should never complete, and `uploadAnnouncement` should never be called. Provide a more complete example that demonstrates your problem.
I'm not usually a sympathizer of NPM but even if packages were hosted by GitHub, Gitlab, etc. wouldn't those still be risky? It's the dependency chain the issue, not the delivery platform.
I have used Truffle and Ganache to develop a project for my computer science degree. When I started I had close to zero idea of what I was doing or how did Ethereum work. At the end, I was able to submit it, deployed my contract to Ropsten and got a good grade. I think I couldn't have done all of this if Truffle and Ganache weren't as easy to use. Couldn't make events work in Ganache though. Ganache is amazing, shows how my transactions are handled clearly. It also shows the calls I've issued to my contracts. It helped me undestand how Ethereum and blockchain work. Truffle makes calling some method in the contract feel like a JavaScript method call. The hardest was trying to deploy my contract to Ropsten. I forgot the "https" in the endpoint URL and it failed silently. Took me a few days to find why it wasn't worked. A error message of some kind would have been appreciated. All in all, thank you for developing such an amazing tooling guys.
I didn't really understood question but you can just send them time of when count-down ends or starts.
You can paste this into your browser console: (async function() { console.log('starting'); async function form_submit() { let promise = new Promise((resolve, reject) =&gt; { console.log('submit'); }); await promise; console.log('upload announcement'); } await form_submit(); console.log('done'); })(); The 'upload announcement' line never logs.
The code in uploadAnnouncement and the form is pretty long would be pretty hard to read, just wanted to know in general what was the issue (if it was clear enough). If my understanding is correct, a promise resolve has return some value, but for my form input, it just updates the db as well as renders a page. How would I traverse this?
async function form\_submit() { let promise = new Promise((resolve, reject) =&gt; { try{ document.getElementById("createAnnouncement").submit() resolve() }catch(err){ console.log(err) reject(err) } }) await promise; uploadAnnouncement() }
It's a game. If I did that the game would look stupid lol
Thanks! unfortunately it doesn't work, uploadAnnouncement() is still running concurrently with my form submit. Could the inner workings of the form.submit() and uploadAnnouncement() be causing this?
I don't understand, what does count-down timer display if it does not know when count down ends?
No its not. He wants to do buttloads of ifs and return errors. That's terrible way do that. Frameworks will teach you how it should be done, architecturally and structurally.
What does document.getElementById("createAnnouncement").submit() do? Assuming it triggers another js function (obviously :D) that line just triggers form submit, it does not wait for whatever it triggers to complete. So you need to run callback or return promise from triggered function.
Your code works as pasted. The problem lies elsewhere in your program. As I demonstrated in the comment above, `uploadAnnouncement` ***won't*** get called. If you don't paste code that has a bug, we can't help you fix any bugs.
&gt;I managed to make two users have same session ID (in back end) Totally off topic but this sounds like a security issue. If two users have the same session ID would they not be able to impersonate each-other?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_dan_of_1984] [Looking for a JavaScript online community for rookie developers](https://www.reddit.com/r/u_Dan_of_1984/comments/c6i26n/looking_for_a_javascript_online_community_for/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
&amp;#x200B; The form submits to this route router.post("/create-announcement", authAdmin, announcementValidation, async(req,res) =&gt; { if (req.errors.length != 0 ) { req.flash('announcementFail', req.errors); return req.session.save(err =&gt; { console.log("redirecting") res.redirect("/dashboard") }) } else { console.log("No errors present") const annoucement = new Announcement(req.body) annoucement.save().then(ann =&gt; { return req.session.save(err =&gt; { req.flash('announcementSucceed', "Announcement Created") res.redirect("/dashboard") }) }) } }) which then redirects to this route &amp;#x200B; router.get("/dashboard", authAdmin, async(req,res) =&gt; { var aSuccess = req.flash('announcementSucceed') var aFail = req.flash('announcementFail') var message = req.flash("message") var announcementQuery = Announcement.find({}) var announcementList = await announcementQuery.exec() var announcementMap = {} announcementList.forEach(function(announcement) { announcementMap[announcement._id] = announcement; }) var courseQuery = CourseCategory.find({}); var courseCategories = await courseQuery.exec(); console.log("Rendering") res.render('admin/dashboard', { announcements : announcementMap, categories : courseCategories, announcementSucceed :aSuccess, announcementFail : aFail, message : message }); }) &amp;#x200B; Thanks for the help
Yes, but I'm only using session for synchronization I don't care witch one is the other one
just use websockets
The surprising thing for me is that "JSON embedded in Js" is that much faster than just a JSON script block.
The internet is very insecure.
/r/LearnJavascript is where you want to go.
The performance data I have is from the Snake game included in the GitHub repo. While there certainly is a performance hit, it is likely not relevant to applications that don't perform heavy and frequent update loops. But I do not have numbers where I measured the exact time while running in the real JS context vs running in virtual JS context.
[removed]
Here is a quick demo! This shows all the basics working including a markdown slideshow. The code shown in the test isn't a practical example. I just wrote this for testing purposes. https://youtu.be/0wUGAP_T4eQ Qodemate step part comment syntax: `// 1` step 1 `// 4 5` step 4, delete on step 5 `x = 2; // 3 4 =11;` step 3, on step 4 set the value of the variable x to 11 `//2 t1:34` present step 2 at 1 min 34 seconds into the presentation
Some web apps relay on the fact that people don't know how exactly they work. Like scripts that are supposed to tell bots and real users apart or at least help in this process. These use cases profit from every level of obfuscation.
Yes, that's accurate. Depending on what run time environment you're in browser/nodejs etc there is a global object that serves as the global execution context (window, global, module, globalThis) that All global properties are a propery of. Functions have a lexical this context also, a global function has access to the global execution context and can refer to the vars in the that outer context but also has its own lexical context
[removed]
 [https://javascript30.com/](https://javascript30.com/) &amp;#x200B; It helped me from going from "knowing things in JS" to actually put it togheter. &amp;#x200B; Cheers.
Oh hey Truffle! I did a software engineering bootcamp last year and our final project was a blockchain app; we loved working with Truffle/Ganache. It was a great intro to blockchain work. Nice job!
I'd advise [https://www.hackerrank.com/](https://www.hackerrank.com/) and [https://www.codingame.com/](https://www.codingame.com/) Codingame is actually pretty fun
That's exactly how it works. Global and window objects serve the purpose of being your top level execution context that operates on the same logic as any other
Hello, could you reach out, we can work on some stuff together.
To confirm, by lexical context, do you mean a function's set of LexicalEvnironment objects (aka scope chain)? I understood there to be a difference between focal 'this' objects (i.e. window, global, module, globalThis) vs. execution context objects? Is this incorrect? &gt;"Functions have a lexical this context also" Isn't 'this' a property of the execution context object? (as determined typically by how the function was called, unless overriden by a property of the function like an arrow or appending .bind())
So being a noob I just watched a video explaining promises. Would this be one of those situations where it’s use would be helpful ? Sorry I know this doesn’t help but just seemed similar to what I just learned about the use of a promise.
https://media.giphy.com/media/PbFwohRf7a3oA/giphy.gif
&gt; Global and window objects serve the purpose of being your top level execution context Does the ExecutionContext a) create the global, window objects and b) set it's 'this' value to point to them. or does ExecutionContext == global &amp; window-type objects?
Hi /u/campercroco, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Can you give us any sort of prediction for what the job market will be for blockchain focused developers?
Every time you reach for the DOM in javascript (like measuring elements, checking the scroll position, etc...), it is costly. Javascript must stop it's current event loop and wait for the DOM to respond before continuing. Still 100+ ms for a scrollY lookup looks like really a lot.
I think it's the former, the browser will spawn this context and it's this will be pointed to a global object
nicely done! Thanks for sharing.
Yeah 100ms seem a lot. Btw regarding reaching for the dom, does this include stuff like changing classes, or setting inline styles etc?
Javascript is single threaded, so queueing promises would still have the same impact on performance. &amp;#x200B; I think what you are looking for are [web workers](https://www.w3schools.com/html/html5_webworkers.asp)
try screeps.com
Yeah, I don't quite understand/can't find details how the focal 'this' object relates to the Execution context. &gt; browser will create the global context and it's 'this' will be pointed to a global object So the JS engine creates a global execution context and a global object, then points the 'this' property of the global execution context at this global object?
Thank you for your suggestions, i'll definitely be looking into each one.
to avoid escaping the serialized json, you can turn it into a base64 string via Buffer on the server side, and give it an atob() before parsing
I like edabit.com for quick js challenges
great snoozing time idea...keep rocking with javascript
Build something. It only solidifies when you’re working on something practical.
Terrific ʘ‿ʘ
This places the executor function task into the event loop's microtask queue. ``` new Promise((resolve, reject) =&gt; { document.getElementById("createAnnouncement").submit() }) ``` Then ```await promise``` awaits a resolved/rejected value, but does not get one. You could add on: submit().then(resolve(true))
Amongst other things, you're redeclaring exec_trans whenever you try to assign it. Have you considered using a setTimeout and function calls instead of loops and blocking the thread? What you've posted is not a very JavaScript way to do things.
nope it doesn't work. That would mean my document.getElementById("createAnnouncement").submit() has to return a promise right? but in case, the route merely renders a page, it does not return any value
You're probably fine. In a related note though, it's good to be familiar with jquery, but it's losing popularity. You might not want to become too reliant oni it.
Do you need to know the status or details of the submit from the backed before calling uploadAnnounement()?
Hi /u/Tandy45, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yes. Changing styles can be particularly costly because the browser has to repaint and IIRC this will block your JS execution
Hi /u/waterloo304, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Possible_Hawk, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/waterloo304, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yasseryka, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
oh sorry my bad!
Ah, actually I do not, I end with a page render. but I could send something back just to trigger the await
people will use it to draw a penis probably
If you don't need status or details from sumbit, why not just trigger the render on the front end?
I'm going to set the stage of the next thirty years of your life if you pursue a career in technology; You're going to feel like this every waking moment of everyday. Software development, and life for that matter, is in a constant state of change. OOP? Functional? React? Angular again? WASM? Frontend? Backend? UI design? JavaScript or Elm? Python or Ruby? What the hell is Rust? Heck, if it's not technical, how about soft skills? Learning to communicate, learning how to effectively listen, knowing when a battle is lost or not worth fighting. It's an endless challenge of learning. One right after the next. Embrace that fear. That anxiety is from being out of your comfort zone and that's where we learn and grow. That frustration is you trying to solve a problem you've never solved before. Enjoy it. Love it. Let it drive you.
Tbh after many years I need to google, check mdn reference and tutorials, try different approaches and sometimes ask on SO. What changed is the level my question and the number of people who can still give advice. So If you like it, go on. Additional tutorials help for new approaches of thinking and new frameworks. But don't waste time with the basics over and over. If you got them once, all you need to do is applying your knowledge. After the basics you learn the most through projects.
&gt; but when your are doing your first steps, you make a lot of mistakes and probably spend more time trying to fix them Exactly, it's called [learning curve](https://en.wikipedia.org/wiki/Learning_curve). Everyone goes through it, don't be afraid.
Yeah, using a router to decide which element to display. The router gets for instance "/client/:id" and then displays the client detail page based on the set of rules previously setup. Are there other strategies for doing the same?
Heck no :)
I think there's an open PR to fix that silent failure! Sorry this went unnoticed for so long!
Do you mind taking a look at my code? I m not sure if its applicable in my scenario.
 //The form submits to this route router.post("/create-announcement", authAdmin, announcementValidation, async(req,res) =&gt; { if (req.errors.length != 0 ) { req.flash('announcementFail', req.errors); return req.session.save(err =&gt; { console.log("redirecting") res.redirect("/dashboard") }) } else { console.log("No errors present") const annoucement = new Announcement(req.body) annoucement.save().then(ann =&gt; { return req.session.save(err =&gt; { req.flash('announcementSucceed', "Announcement Created") res.redirect("/dashboard") }) }) } }) //which then redirects to this route router.get("/dashboard", authAdmin, async(req,res) =&gt; { var aSuccess = req.flash('announcementSucceed') var aFail = req.flash('announcementFail') var message = req.flash("message") var announcementQuery = Announcement.find({}) var announcementList = await announcementQuery.exec() var announcementMap = {} announcementList.forEach(function(announcement) { announcementMap[announcement._id] = announcement; }) var courseQuery = CourseCategory.find({}); var courseCategories = await courseQuery.exec(); console.log("Rendering") res.render('admin/dashboard', { announcements : announcementMap, categories : courseCategories, announcementSucceed :aSuccess, announcementFail : aFail, message : message }); })
Sos some toying with Web3 back in the day, and I'm into crypto but as a web developer dont currently have much professional interest on it (my experience has told me that if you enjoy something, don't do that for a living if you're going to work for others) I will take a look at it. Anyway, being open source and written in Js all I can say is... Great job, and thank you.
it is reading the data object from firebase, in a for loop and passing the key of each object found within [res.data](https://res.data) into the fetchOrders array and attaching it to the "id" value.
This might help [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread\_syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)
It creates an array of objects where each object contains the data for the firebase key and the key itself.
https://donotdrawapenis.com/
Note that this code is broken, it should use `Object.getOwnPropertyNames()`.
i googled it. i want to watch Netflix while I'm on bed but i have a PC not a laptop. it works but if i leave my phone for a whole episode the connection disconnect :(
Will probably need to add a heartbeat mechanism to keep the connection alive. I'll check it out.
This is a little shorter: &amp;#x200B; const fetchedOrders = Object.entries([res.data](https://res.data)).map((k,v) =&gt; ({...v, id: k}));
It creates an empty array called \`fetchedOrders\`. Then it loops through properties of the \`res.data\` object. In every iteration, it creates a completely new object with the same properties as the given \`res.data\` entry ([spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)). It also adds an additional property called \`id\` that contains the current \`res.data\` key to this object. In the end, the object is pushed to the \`fetchedOrders\` array. Summarizing, the provided piece of code transforms \`res.data\` into an array of objects, where each of them contains an additional property called \`id\`. Here's an exemplary input and output: //INPUT: const res = { data: { prop1: { subProp1: `subVal1`, subProp2: `subVal2` }, prop2: { subProp1: `subVal1`, subProp2: `subVal2` } } }; //OUTPUT: const fetchedOrders = [{ "subProp1": "subVal1", "subProp2": "subVal2", "id": "prop1" }, { "subProp1": "subVal1", "subProp2": "subVal2", "id": "prop2" }];
I recommend getting on IRC. There are so many great programming related channels on the Freenode server with many people that are happy to answer questions. The number one rule of IRC is be assertive and polite: E.G.: don't ask to ask! Seriously, everyone I know I learned through 1) self direction, 2) struggling to contribute to projects on GitHub, 3) and chatting with wizened folks over IRC.
Never upload images to mongo or any db for that matter (in my opinion of course). Instead you can use multer, it is a middleware to process and save the image in a local folder, and it gives you the address to it, that’s what you store in the db, then in order to serve it you just write a standard route to serve the images folder statically.
This _could_ be related to re-paint/re-measure, always expensive operations. ScrollY is not listed here, but scrollTop is: https://gist.github.com/paulirish/5d52fb081b3570c81e3a
I think if you combine both options you’ll get the best options, look at a library that implements form validation and implement your own based on that.
You could use CSS filters such as [https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/hue-rotate](https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/hue-rotate) to do some type of instagram type of filters.
It's there actually, under "window".
Its in kettle, I don'y hace setTimeout, for wxample.
I have read about multer, but I have some problems findig some useful tutorials for koa. In express there are many, but not for koa. After uploading it to the database, I want to display it afterward, with a get.request. Do you have any idea for it?
Did you post this less than one day ago? [Please, don't do that](https://lmgtfy.com/?q=instagram+like+filters+in+javascript).
Hi /u/HQ189, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Crampeteb, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/wgrz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/I_Mod_Things, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thevisualdna, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/wilfwilf, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/xpto1234, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ketanIP, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Canvas is pretty easy and decently fast. If you want very fast, learn how to code shaders.
Nice clean code. But if you really care about performance, a better approach might be to type check statically with typescript or flow, rather than putting polymorphic variables in your hot path
Oh I'm sorry I'm going properly post on the subredditt you suggested.
Once iOS get's their head out their ass we won't
Swipe gestures work now on iOS.
 a = a \* 10 + a; I think you wanted the first two "a"-s to be the global, and the third, as the function parameter? Not sure, but you see, that it's only one "a" in the code. function store(b) { display(b); a = a \* 10 + b; } or similar.
I thought workers [don't have access to the DOM ?](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)
Do you know a good tutorial for getting on IRC? I haven't tried it before but I've heard it is more challenging than the other platforms.
You're doing something called `Variable Shadowing`. You've got a variable `a` that is accessible to everything because it is defined in a higher scope on line 1. A function has its own scope in which variables can mean something. In the `store( a )` function, you're defining a local variable also named `a` which wins when referring to `a` inside that function because it shadows the global variable `a`. The way to fix this is to use a different variable name for the function parameter. Another good thing to do, that might have prevented this problem in the first place, is to use descriptive variable names. Your global `a` variable should be named something like `total` and the function param `a` could be renamed something like `num`. What you don't want is to come back to modify your code and have no idea what's happening because you used the alphabet for variable names.
Well, as a TS dev and in ideal world I would agree with you. But! In real world there are a lot of simple JS devs and as a React dev I can't rely only on powers of TS. Reality brought me to the point where i should check vars in runtime and perfectionism to creation of lib that none will use, cause there is another one twise as slow but with 7M/week downloads%) I'd be glad to commit to is-callable but it is impossible even to run its tests nowadays🙃
I think you misunderstood my request. I don’t need to see some seemingly random code. I want you to provide a snippet of code that, when executed, reproduces your problem. I have no idea how this routing code relates to your issue. Perhaps you can explain? The code you pasted originally works. Show us code that DOESN’T work and explain how it doesn’t work, and we’ll try to help.
Yeah that's a fair point. I totally get where you're coming from. Curious though, isn't a simple `typeof fun === 'function'` usually enough? Especially in React land. There was only a single time I ever had to specifically deal w/ different types of callables, and the easier alternative was to just do what React does (extend a class and do an instanceof check). If someone opened a ticket about how my code breaks when they pass in a thing w/ a modified string tag, I'd likely just tell them to stop doing stupid things :) &lt;/two-cents&gt;
Scrolling (whether X or Y) is kind of expensive, because it may (or need to) interact with input devices (mice, trackpads, keyboards, touch). Have you tried using a passive `scroll` event listener that merely sets a few properties instead? (Note: passive here is key, as it guarantees that the event isn't going to interfere with input events).
This isn’t precise information. Querying the DOM is only costly if it has been modified, because your query will include the cost of synchronously repainting. The idea behind virtual DOM is that it’s faster to do all your writes and then all your reads, rather than interleaving the reads and writes like you might have in some UI built with jQuery. You’ve modified the DOM or done something to cause a repaint before reading scrollY (such as *writing* scrollY itself), and the repaint is delayed until you read scrollY. And it sounds like your repaint is very expensive (complex DOM or CSS).
Why should somebody use this package instead of just checking for `typeof x === 'function'`? And why does it return false for constructor functions? Those are still functions.
I love how minimal this is. Great job! Here's a todo list to make this a wonderful wireframing tool! &amp;#x200B; 1. Add selection tool 2. Add move tool 3. Add brush size (for pencil + eraser) 4. Add undo/redo 5. Add one click erase
Thanks! That's amazing to hear.
Haha. I'd upvote this more if I could.
You probably are missing an extra return in the "else" branch, you probably should place the return before \`digital\_root(n)\`
It's pretty much pointless to build a project with the raw dom, the dom api isn't something you will encounter often in the real world anymore, nor would your learn valuable lessons from. Focus on js and react, then go make real apps. This is how you learn, by confronting the problems you encounter.
Hey there- there’s nothing like starting a new project that has weight to it. It’ll test what you’ve learned from the instruction videos. Dive right in it. You can do it.
I don't have numbers with me, but here's an article from [Hired.com](https://Hired.com) about why the demand for blockchain engineers is exploding: [https://hired.com/blog/candidates/why-demand-for-blockchain-and-security-engineers-is-exploding/](https://hired.com/blog/candidates/why-demand-for-blockchain-and-security-engineers-is-exploding/) Put simply, blockchain tech is pretty revolutionary, if not socially, then definitely technically. It could make a lot of technical interactions simpler, and infrastructure ultimately less costly. This makes it really attractive to businesses and enterprises. Currently, the demand for blockchain engineers is wayyyy higher than the supply. At Truffle, we have a new endeavor called [Truffle University](https://www.trufflesuite.com/university). We're trying to train engineers to become blockchain engineers, and work with companies to get those developers swanky new blockchain jobs. The first cohorts of Truffle University are being trained now, and we're working on setting up the next set of trainings. Apply [on our website](https://www.trufflesuite.com/university) if you'd like to be considered. Personally, blockchain has been the most exciting part of my engineering career. I hope to stay working in blockchain as long as possible.
C-like weirdness.
Fwiw you don't need the else. It's already returning (to drop from the if) and then returning undefined
else statement has to keep calling function until it gets false
&gt;i execute some code, and i want to execute it again. So you want to write a loop, ideally a `for` loop
Yeah, both courses taught DOM manipulation and already found it a bit tedious to always select each element. Thanks for the input! I assume learning react and the other frameworks quickly replaces DOM?
Yeah, figured learning a bit of react before creating an app would be most beneficial. Are there any apps that you would recommend for starters??
Write a function with the code, call the function
 function a() { return 7; } function b() { return 3; } function c(f) { if (f) { return a(); } else { b(); } } console.log(c(true)); console.log(c(false)); Do you see the problem here? If you _do not_ see it, continue reading: function a() { return 7; } function b() { return 3; } function c(f) { if (f) { var result = a(); return result; } else { b(); } } console.log(c(true)); console.log(c(false)); Do you see the problem here? ---- P.D. In any case, this is not a support forum. For this kind of question you should go to /r/LearnJavascript
Look into debouncing https://davidwalsh.name/javascript-debounce-function
Best webapp ever
Hello! This has been awesome, we've used Truffle and Ganache a lot in our development and the experience is smooth and cool now, a few months ago we had trouble installing Ganache (then TestRPC) on windows OS but it seems like you guys fixed it already and it gets installed and works really smoothly, Truffle also takes care of the hard parts of setting up a project for you, we love it! And ganache is lightweight and super fast than some test Ethereum Networks, so it saves a lot of time. And yes we definitely want more Blockchain content. Awesome Work 👍 , more blockchain content requested. All The Best!
0) For most sutuations, `typeof x === 'function'` is enough, but not for all. 1) `isFun(x)` is shorter than `typeof x === 'function'`, so if to use it all over the project it can save some bytes in final build; 2) Backward compability: 4ex in older browsers typeof on regexps returned 'function'. Everything is actually answered here: https://github.com/ljharb/is-callable/issues/16 The name is kinda not fully faces the purpose of this lib. 3) As i mentioned lib developed as faster and smaller drop-in replacement for `is-callable`. 4) It is true that class constructors are functions by nature but it differs from the regular function context-wise. Ideally class constructors should not be called without `new`, thats why.
Early exit ftw. Please dont nest 4 deep just because someone told you early exit was wrong for no apparent reason at some point.
For \_most\_ situations it would be enough, but! It would be useful when you dont want to see the class constructors on input which are the functions generally. Furthermore it can be used away from the react.
Well... you could do the basic todo app or a weather app. If you want something a little more challenging- a tic-tac-toe AI will definitely test you. If anything, find something that you’re passionate about and try to find a way to incorporate it in your app.
Looks great! Thanks, definitely going to use it in one of my projects ✨
Okay, I see. But #1 will trade package size vs. runtime cost, and I'd much rather have a few more bytes in my package than calling another module each time. But thinking about it... the package is 542 bytes minified (not gzipped). So just having it around means you could write the simple typecheck almost 23 times. Also `import {isFun} from 'is-fun';isFun(x)` is double as long as the simple typecheck, meaning you'd have to use the function twice per import to make even its call smaller in that file. And #2 I really don't understand; those browsers don't exist anymore, so implementing a new library that handles those cases doesn't make sense to me, sorry. #3 is always a nice thing though, so if you enjoy doing that go ahead. Not trying to be negative towards you, I just think that having these kinds of packages around really endangers the JavaScript eco system due to the well-known problems that come with having thousands of packages for simple things, which sometimes end up with millions of installs.
Ok, you have a real-world case where you have dummies passing noncallables where a function is expected? So what exactly are you going to do when this function detects that such a case has happened? Why is whatever you're doing better than catching the exception, or just allowing the application to fall over, since that's probably what you *actually* want when someone is making a mistake like that? You might also stop right here and ask yourself why you're passing around so many functions to be called by other functions that it's causing these problems, when you could instead compose the functions and pass the data around directly.
Why would I choose this over for example [https://knexjs.org/](https://knexjs.org/) or an ORM?
So you need a dropdown like lost where the user can select more than 1 item at a time ?
I hope this is someone's project on their portfolio
Oh - facepalm. Thanks!
Honestly - i cant give you an example atm. I've found a lot (\~200+) `typeof x === 'function'` across my project ans thought to replace it with something shorter do make the bundle slightly smaller. Searched across the NPM for existing lib and found [is-callable](https://github.com/ljharb/is-callable) as the most popular with 31M downloads per month. Looked the sources and found that i can vastly optimize it, but commiting to the repo looked impossible due to failing tests caused by significantly outdated development pipeline. So i decided to make own repo and publish it for cases someone else will need it. But ATM i've spent last hour, i guess, to update pipeline and commit to original lib, but i suppose that chances that author will merge the commit are very low due to that much affected packages. So the main reason why i made this lib - i've found something popular that i can improve and i improved it.
In the else clause, `digital_root(n)` should be `return digital_root(n)`.
I watched a 50 video series on react after coming from vue and thought I had it down. i decided to re-write an old project that had become a mess and realised that I didn't anywhere near what i thought i did. I think switching between doing and learning is the best. Struggle with a project for a while and then go back to the courses, they'll make more sense.
I would say build apps as you follow the instructions. The best way to learn is to build something by yourself. Even if it is just a framework, React is pretty complex, so if you do not build apps as you learn, you will never feel you know enough to build something.
Now i'm agree with everything of that, actually =) I've simply seen the thing a can improve - improved - published and the thought was it even worth the publishing instead of PR to the orig lib%) Anyways, spent some more time and made a PR with new algorythm to the original lib. If it will be merged i'll redo this one to simple `typeof x === 'function'` which it shoud be, obviously.
Hi, you can't use knex with firebase or mongodb. This is another solution with fluent interface, easy to use, intuitive. This is still WIP - I regularly add new content, fix bugs. Cheers
But you are moving into a very crowded market. What is the reason for choosing your library? ORMs probably add more simplicity, while query builders (and raw queries) offer better performance.
Hi /u/varun_chopra, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/luka7711, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MarkFischeer, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nfornigeria, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/randomcanadian123, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/IUsedToCleanToilets, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I am in the same position as you, almost done with Colts web bootcamp. It is is getting harder to retain so much information at a time! I am not sure if I know much until I try to get my hands on some project and put my knowledge into test to see how far I have come.
It's by Studio Moniker (Disclaimer: I'm part of Studio Moniker)
What polyfill? This is a syntax feature which cannot be polyfilled.
True, background story is that I couldn't find anything concrete for firebase, my second project was in mongodb which is... specific. I've had to learn mongodb to write more/mid complex queries and then again decided to adopt Mongo in Chego library. There are many different packages for various databases, and that's the point I wanted to have one based on sql syntax. Plan is to mix features like for example sqls transactions in other databases like firebase.
The linked question currently has 279 upvotes which is quite a lot. I don't think it is specialized. Dealing with objects is what every JavaScript developer has to do. And it is not uncommon to get an object and then change/extend/subset it. Changing and extending are reasonably well supported by the syntax, but getting a subset is not. Having your "own sufficient mini-API" won't really cut it as there is no good syntax for it. Most either require repetition or defining properties with strings.
I won't argue against your opinion of it being concise :) My own opinion is that having to list the properties twice is too much. &gt; you could write one like this: Yes of course. But that breaks usage search, refactoring, and code completion. Properties should not be used as strings whenever possible.
&gt;help devs better perform animations and transitions in their web pages Can you link me to this project? I couldn't find it in github if it was linked in one of the VueJS projects
Any update on this?
Sure it is possible. Most browsers will not complain about invalid HTML. Yet, the specification clearly specifies that the `ID` attribute value must be unique in a document.
I haven't used \`graphql-request\` before but it looks like it just uses strings. Maybe starting with \`graphql-tag\` would be more appropriate as you would already have a parsed query AST to do manipulation to
It only detects top down views of dicks, but not profile views. Which imo are a more artistic view anyway.
It’s very fast on my iPhone X even with the blur
That's a good idea. I didn't realize this existed, and it is much of what I was thinking when I said typesafe graphql requests. Assuming the TS piece can recognize errors in the queries prior to runtime.
some is these are very easy and ready to go, like the brush size. the thing is, everytime I start thinking about more and more ideas comes to mind. like, change the brush shale of the pencil... well, as I said, will be working on it in my spare time
Sometimes you want the polymorphism in your hot path for a good reason. The perfect example of this is in React: When you provide a “class component” or a “function component” to `react.createElement` (which is what the JSX is eventually transpiled to), the class constructor variants must be invoked with `new` while the functions components should be called. And even after that, the library interacts with class components differently from function components, providing different APIs for one and not the other, e.g. `setState` vs. React hooks. Now, they played with the idea of checking the prototype for callability, but as far as I remember, they instead settled on assuming everything was **not** a class constructor (and thus callable without using `new`) **unless** it had a special hidden symbol property assigned to its prototype, proving it was created by extending `React.component`. Other libraries or functions might also except one or both of those function types as valid inputs, and should have some way to know how to handle them properly in each case.
that's really clever
[removed]
Thanks for the clarification. Sorry for posting this!
do you think projects like this one I shared would help me land a job in a good studio? I always go for how much I can do with a little bit of code
I don't have a repo yet as everything I have so far was this...test, kind of proof of concept that I used on my portfolio. It wasn't properly usable and it was only specific to Vue.js and my portfolio so I couldn't really open-source it and make a proper repo. I'm seeing that the files on my portfolio's github are bundled so you can't really see how it but here are the codes:. [This is the animation sheet that's exactly used to animate the web app](https://pastebin.com/9pJGfmPN) and here's [the Vue.js plugin](https://pastebin.com/kwhXrpwL) that I developed. I notice that I was even using jquery with the plugin somehow...So you can see most of that stuff is outdated and the idea of the syntax I have for this project is quite different. [Here](https://pastebin.com/kBpMBXwa) are up to date draft notes of the concept that I keep on my stackedit.io files. I've always wanted to properly work on it with the new knowledge and ideas I gathered other the years. I just need the time and the resources to work on it :)
It's using machine learning to detect penises with a model of about 10000 penis doodles so far. Press "D" for an insight into what the model detects.
I KNEW that if my project got delayed sufficiently long, someone would fix this for me! You, sir, are a saint! Can't wait to try it out!
https://expressjs.com/en/api.html#express.urlencoded `app.use(express urlenconded({ extended: true }));`
Hi /u/MeowCatPersonThing, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/insane_banda, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Funny weird realistic wish comes true. :D
Thanks, I'm grateful!
Express comes with its own bodyParse which it uses internally and it's not exposed directly; however it exposes its raw / urlencoded / text / json methods. So for your typical use you can rely on those, but should you need to do anything trickier you will have to instantiate your own.
I use \`irssi\` which was indeed challenging because I had to figure out a bunch of new stuff related to forming a secure connection and plus it's text only. &amp;#x200B; I tried Adium, which is for multiple protocols, and it was pretty easy to get on. I might try that first.
Personally, I believe that anything mentioned in the documentation should be well-known. JavaScript's language and APIs are tiny.
Sure, I'm not saying polymorphic variables are always bad. It's seen great use to increase developer experience in the past (jQuery is another great historical example). But render code isn't hot path (e.g. shouldComponentUpdate/memo, etc). Even React will eventually refine types before hitting actual hot path code in the reconciler. Stuff like the reconciler code is what I mean by "if you really care about performance". On a high level though, as a framework developer, you want to make it so that users always fall into the pit of success (i.e. idiomatic code is always monomorphic). Or at least, that's the dream.
I totally agree. Personally, I would rather the React API be totally monomorphic and force library users to be explicit about what they want. However, there is something to be said for reducing verbosity and simplifying an interface for ease of use.
Awesome work, thank you.
I think this is probably a bad idea. Its much better to use the hooks as they were intended than to try to shim the class-model into the hooks-model.
I partially agree. Using something in a non-conventional way isn't necessarily a bad thing, after all these are just some wrappers on top of the core hooks that allows you to have such functionality. But yeah, as soon as you're capable of fully understanding how useEffect Et Al. works then you're better using the core hooks directly.
I'm glad to hear it! Let me know how it goes 😀
I agree. I came here to say just this. The problem if that hooks aren't lifecycle methods and have subtle differences. This only encourages people to write buggy code rather than take the time to learn how hooks actually work. They are not that hard but do have their own mental model. There is nothing wrong with sticking to using class components until you are more comfortable with hooks.
You need to get font's info to calc correct char height
Hi /u/blockchain_dev, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yeah that is somewhat impossible right? If the user were using custom fonts
Haha glad this could help
No, it's not impossible, but it's not easy. You can use harfbuzz via wasm. Another maybe easier way is to use canvas-kit, which is a wasm/c++ interface into the Google Skia library. That is lib has a drop in replacement of Canvas2d as well as a harfbuzz powered text shaping engine, but the binary is about 6megs.
I have selected /u/yaboylukelol s proposal of an improved GQL batching and tooling. Look forward to sharing the results over the next month. Thanks to everyone who submitted a project idea!
I like the declarative nature of it! I have decided to sponsor the GraphQL proposal for July. I am hoping to run another sponsorship in August, maybe next time
Hey sorry for late response, i am actively working on it 3 hr per day
What about the p5 library
I have zero knowledge about the things you just said. But I would rather prefer it be a little less accurate than to have a 6mb binary added to this. I think there could be a more ingenious way to do this like rotate letters 90deg and measure width or something like that. I have used an other strategy for this before: For \*\*most\*\* fonts the letter M is the widest and it's width is somewhat equal to the max height of letters. (Again it does not work for those tall fonts)
You would use the entire p5 js library to render some fonts?
Just to clarify, Harfbuzz itself, the text shaping lib, is not 6mb. It's pretty small. I only mention canvaskit-wasm because it's hooked up and ready to use without additional config. https://github.com/harfbuzz/harfbuzzjs
isn’t base64 bigger than original string?
what about the json body one?
Calc the correct char height please. There is already a dead project which did this some time ago. Search on the easeljs page under plugins. I don’t know what it’s called anymore. But you will find it. Maybe you can use it as a blueprint ? :)
don't see any difference if I use `continue;` or `continue WHITE_LABEL;` whats the catch ?
I can't find it. Can you link it or tell me a bit more to search for?
Well this should be the first chapter of any course on javascript
https://github.com/diverted247/txtjs
Thank you. I'll have a look into this
JAMstack is all about JavaScript API and Markup. Static sites are one type of JAMstack websites. But a React app is also consdered JAMstack. [JAMstack.wtf](https://jamstack.wtf/) explains it well. As far as Jamments is concerned, it's a small API using Node.js that your static blog can use as a REST API. The Node server is only here to handle dynamic things. Each time a new comment is added, the JSON files are re-generated (not all, just the ones that are impacted). Most of the time, the API is just static, when called on GET it's actually just the webserver serving a static/cached JSON file.
Hi /u/id_Ali, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
thanx that really helps.
I keep in mind: You're placing .then(callback) into the event loop's microtask queue after the previous .then(callback) resolves/rejects and taking the prev value as a param.
Class elements access control (public, protected, private). Interfaces.
Actually no, i missed that. The code still run fine, but I suppose it should all be one line. Not sure why I lost the code indentation when using the inline code button. &amp;#x200B; If i am not misunderstanding, then the follwing code should be safe to run in the order it is laid out router.post("/register\_action", (*req*, *res*) *=&gt;* { queries.getUserById(req.signedCookies.user\_id) .then(*user* *=&gt;* { user.email return user }) .then(*user* *=&gt;* { req.body.reg\_by = user.email return queries.createAction(req.body) }) .then(*result* *=&gt;* { res.json(result); }) .catch(*function* (*err*) { *console*.error("error " + err); }); });
 Sure - it’s fine to then-chain - though it can get quitE hard to read and follow - A good exercise would be to rewrite this whole code block as an async-await implementation in try catch block. It’ll further aid your understanding thereof
Brilliant, thank you for the clarification. I will look into async-await next!
Looks like it, but I don't know what your methods i.e. queries.getUserById() return w/o seeing full code.
I was reading the 'cacheMediumStats' function and it took me more time than I would have expected to understand what was going on. Naming was fine, but there's quite a bit going on in that reducer. I think I would have spread the logic to some different functions.
A couple of nitpicks. The first `.then` isn't doing anything as far as I can see and mutating the request body is a bit nasty too router.post("/register_action", (req, res) =&gt; { queries.getUserById(req.signedCookies.user_id) .then(user =&gt; queries.createAction({ ...req.body, reg_by: user.email })) .then(result =&gt; { res.json(result); }) .catch(function (err) { console.error("error " + err); }); });
it becomes an implementation detail essentially. all you need is the mount call query `document.getElementById('root')`, which is the only dom operation you will still have to do.
If this is for quite a large project, I would also look into separating your routes, controllers and models into different files, so your “route” file would contain your router.post() functions and within that you would call a function from your “controller” file and then the database/api call would be from a “model” file.. keeps things separate for easier debugging, scaling and readable code. Happy to explain further with some better examples.
Maybe I've missed something, but can't you just use the [TextMetrics API](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics)?
You are right the first then is not required. Looking further on your code. So I dont need to return the new promise in the way I did? I did it to make sure getUserById was ready before continue. &gt;return queries.createAction(req.body)
Thanks, some of the code is seperated in similar way you suggest, but I should probably clean it up further. Something I need to get more comfortable with
Arrow functions without brackets `{}` have an implicit return i.e. this `() =&gt; 'foobar'` is functionally equivalent to this () =&gt; { return 'foobar' } I'm still returning `queries.createAction(req.body)` but since it's a one liner now, it's possible to use the concise syntax
The only issue is that it could be confusing as to which variable is being used, and whether the name is the same on purpose, or by accident. As such, if it's a fairly short and clear function, it might not be a big deal. But in larger more complex functions, it could make sense to consider renaming.
I would say this makes your code less readable, as you might miss that you've redeclared someParam in the inner function.
Name collisions make your code less readable and can be the source of many difficult to track bugs.
Alright, thanks for your interest.
Oh right, yes I remember now. Thanks. Like to keeping myself verbose as I am still learning a lot of new stuff :)
This is called a higher order function and is quite acceptable
`then` is use to handle the result of a promise. So as others suggested, you have extra `then`s in there. Though it works, it's not needed. You also asked about returning `queries` \- if you don't want to get into nested promises and callback hell (you don't), you should return the promise function and catch it in the next `then` block. here's how to rewrite your code: router.post("/register_action", (req, res) =&gt; { return queries.getUserById(req.signedCookies.user_id).then(({email}) =&gt; { // Don't change req - create a new variable const newParams = { ...req.body, reg_by: email } return queries.createAction(newParams) }).then(result =&gt; { return res.json(result) }).catch(error =&gt; { console.log("error " + error) return res.end() }) }) You could also use async/await - for 99.9% of cases, it's not better or worse, but just a different writing style. I have found that async/await vs promise/then usually comes down to preference. router.post("/register_action", async (req, res) =&gt; { try { const { email } = await queries.getUserById(req.signedCookies.user_id) // Don't change req - create a new variable const newParams = { ...req.body, reg_by: email } const result = await queries.createAction(newParams) return res.json(result) } catch(error) { console.log("error " + error) return res.end() } }) None of the above is tested and I have no idea what your `queries` functions look like, but this is the basic concept of handling promises and async/await.
If it's the same parameter use the same name renaming and shadow aliasing can lead to huge hugs if it's not the same name change the name of the parameter
[Lexical Environments](https://www.ecma-international.org/ecma-262/10.0/index.html#sec-lexical-environments) and more in general execution contexts have been given a more detailed explanation and their own section in the document. And so, a [Function's scope](https://www.ecma-international.org/ecma-262/10.0/index.html#sec-function-environment-records) is now _just_ a particular "Environment Record" with some extra properties.
If OP had shared a case study of some performance critical code that nevertheless had to be written in JavaScript, and how break labels help in that specific scenario, the "hivemind" wouldn't have responded that way. But "hey I just learned you can break out of multiple loops" is just an invitation for beginners who haven't learned to reason about loops yet to put them everywhere and stink up their code. There are absolutely use cases for it, but the chances that someone who just found out about it today and posted about it like an exciting discovery has one of those use cases are veeeery low
Thank you that is really helpful! Really appreciate it. I emplemented this and my code is much neater
Sometimes you actually need to do it though. It's not every day, and a loop in a loop is certainly a red flag, but it's required enough in real life coding to discuss without people screaming about it.
&gt;A Lexical Environment is a specification type used to define the association of Identifiers to specific variables and functions based upon the lexical nesting structure of ECMAScript code. A Lexical Environment consists of an Environment Record and a possibly null reference to an outer Lexical Environment. Usually a Lexical Environment is associated with some specific syntactic structure of ECMAScript code such as a FunctionDeclaration, a BlockStatement, or a Catch clause of a TryStatement and a new Lexical Environment is created each time such code is evaluated. &gt;An Environment Record records the identifier bindings that are created within the scope of its associated Lexical Environment. It is referred to as the Lexical Environment's EnvironmentRecord.
Consider what could happen in a refactor. Suppose you have quite a substantial codeblock in the inner function and you decide to rename the variable. It’s possible you could miss renaming one of the uses, and linking won’t throw because it’s still valid. This has bitten me once when I shadow aliased the global “name” and it was still valid and created quite the headache as I chased it for an hour or so.
Typically considered an Anti-Pattern. If you share more then we can be more certain.
React
This would get flagged by tslint (possibly eslint too) with the no-shadowed-variable rule
Great job. I find it interesting that some will come here and complain about the text calc, and ask you to do it. Obviously they missed the part where you published it to git.
I barely know enough to *vaguely* know what you’re talking about, but a 6MB binary sounds like a gigantic overhead for most apps.
came too late for my project last year, i remember searching for something like this for months :D All the while thinking 'how in the hell has nobody done this yet!?'. &amp;#x200B; Thanks for this bud, nice work!
_As far as I understand it_, yeah, that's correct. I must note, though, that I haven't been following this particular subject much, so bear that in mind :) My understanding is just that the concept of scope, which was previously defined only for `Function`, has now been _abstracted_ or generalized. That way, it can be used to define some akin behaviours which are not exclusive to `Function` (e.g. global scope, module scope...). And then the function's scope was redefined in the terms of Environment Records i.e. it is an Environmental Record with some particular properties (like [[thisValue]]) specific to functions. For the rest, it mostly stays the same just with more general and reusable names.
For static presentations?
Why not?
Why don't you just use a closure? It's essentially what you're doing, but you're just not returning a function in your outer
yeah.. 3 normal bytes = 4 b64 characters.. 1/3 gain. Does not seem to be worth it. The most quotes I found in some random JSON files here was 23%. But some files only have 2.1% quotes -- or none at all if they just contain numbers and boolean.
That's a very good point! Thanks for explaining.
I hope you mean server side (node), I would refrain from using any front end solutions if the content is static. Have you considered pug ( Jade ) and using its slots?
You're welcome :) It's not really that great actually. This is my first and only npm package. Coming from php gd library the JavaScript way to render text like this seemed alien to me. So I just made something for myself and was a bit curious how npm packages worked.
I just need some templating with a base tamplate and a content area
Thanks. I had help with this before. I was hoping to to get more people discover this and help me improve this.
React is components. Use them where you want.
Those are two different parameters. They should probably have two different names.
[Malevič.js](https://github.com/alexanderby/malevic) - some kind of a mix of `react` and `d3`.
This might be really interesting if you formatted your post so it was vaguely readable.
Fontkit can get you font proportion info and more (provided you can parse the font file): [https://www.npmjs.com/package/fontkit](https://www.npmjs.com/package/fontkit)
ES10 is not a thing, I don’t know where the author even got it from. It’s the first time I’ve ever seen it.
Unfortunately it seems the coloring is not supported.
Yeah it absolutely is! You are 100% correct. I don't actually know but I've heard giving wrong advice attracts attention so fingers crossed lol
It's not the lack of syntax colouring that's the problem - you've messed up the ``` formatting somehow, so it's just formatted like paragraph after paragraph of normal text with word-wrapping and missing linebreaks.
I've done quite some research when it comes to presentations. What looks the most useful to me is [Marp](https://github.com/marp-team/marp). There's also [MDXJS](https://github.com/mdx-js/mdx) which allows you to use JSX and React components in your slides. Right now I can't tell if any of those support adding meta elements to your html, but the [Marp example slide](https://yhatt-marp-cli-example.netlify.com/) does have `og:` meta elements. When it comes to template engines in general there are only a few that are in active development: Mainly [Pug](https://github.com/pugjs/pug), [Handlebars](https://github.com/wycats/handlebars.js) and [Nunjucks](https://github.com/mozilla/nunjucks/releases). Personally I don't like Pug because of its syntax (but it's an option), Handlebars doesn't allow to extend other templates, so only Nunjucks remains. Actually, you can go down so many roads with this. You can also try to use [Mustache](https://github.com/janl/mustache.js) and hack it to do what you need. Or you can do everything on your own using JS templates literals (`const html = \`&lt;div&gt;${content}&lt;/div&gt;\``). I'm also playing with the idea if it's a good idea to write your own JS based template engine (e.g. `const html = div({ class: 'some-class' }, 'div content')` - which basically just returns a string).
I see the issue in old reddit, it seems like a bug.
Use an arrow function instead, which is scoped to where it's defined, and use someParam without passing it in since it's in scope. Function outer(someParam){ Const inner = () =&gt; { // Do something with someParam } } Whenever you define a function within a function, I prefer an arrow function for this reason
Hi /u/campercroco, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
yes, it will be larger by 33%. that's the trade-off. also there are solutions like [BSON](https://en.m.wikipedia.org/wiki/BSON) with base64 (or ascii85, but that needs to get escaped too, as it contains special characters) that may produce even smaller strings than escaped JSON, if that is the goal. It would be better to discuss these numbers knowing what will be the result after they got compressed by gzip I simply choose JSON + base64, as it won't contain any special character, so you can achieve safety with less effort, and without importing another module
Nope - it's still messed up even if you don't use the old Reddit style. You've messed up most of your triple-backticks blocks, so readers see "```" before most of the code snippets instead of formatted blocks of code. It's incredibly obvious if you read past the third heading. Don't worry about it though - if you can't be bothered to fix it then I can't be bothered to keep explaining.
I haven't messed up anything, this is a reddit bug. Post on new reddit looked OK. Now I've replaced all ``` with 4 spaces indent on each line and it looks well in new and old reddit.
This looks cool! Apart from the file size, why do you think this is better than writing an svg data viz using React, Hooks and D3 utilities?
This. Programmers (naturally) want to put everything to nice simple boxes: this pattern is "good", this one is "bad". But most stuff isn't so easily categorized. When you write functions which don't have outside side effects they are known as *pure functions* and such functions are "good" for a lot of things. For instance, when you write React components (which get re-called frequently by forces out of your control) you want them to be pure so they don't have unexpected side effects when they're called a lot. And pure functions are also just "better" in general (outside React) because they're more predictable and easier to maintain. However, pure functions simply can't do certain things, so while it's easy to read lots of articles espousing the benefits of pure functions, all their proponents leave out that rather important fact (or they twist themselves in knots writing code that is needlessly complex to uphold this one single principle). What's important in programming isn't understanding what's "good" or "bad", it's understanding *why* it's good or bad. Using variables outside a function is bad because it creates side effects when you run that function. As long as you understand that, and why it's "bad", you can (and should) safely use impure functions in cases where it's not "bad" ... and that's a good thing ;)
Hi /u/ClawHunter07, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dsfrds32223ed2dwq, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/thegreaterpanda, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/geoholic, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nevercodealone, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/enexorb, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Foluso1, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
[Most unit testing is a waste](https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf)(especially for modern front-end applications) however it's very much possible to write relative quick integration tests. &amp;#x200B; Our biggest overhead for integration tests at the moment is JSDOM and Node startup time which quickly adds up if you have a lot of tests.
Thank you. ☺
Hi /u/Robot_Impersonator-, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Remember YTMND? I made a dumb lookalike for a friends birthday card, here's one way to imitate that zoom text that was on every page. ytmndText = (text, el_id = "zoom_text", top = 250) =&gt; { let text_box = document.getElementById(el_id); for (let i = 1; i &lt;= 30; i++) { let color_val = i === 30 ? 0 : i * 8; let text_shadow = i === 30 ? "-1px 0 white, 0 1px white, 1px 0 white, 0 -1px white" : "none"; let new_div = ` &lt;div style=" z-index: 10${i}; top: ${top + i}px; color: rgb(${color_val}, ${color_val}, ${color_val}); font-size: ${i * 2}pt; text-shadow: ${text_shadow}; position: absolute; " &gt; ${text} &lt;/div&gt; `; text_box.innerHTML += new_div; } };
Okay, thank you!
Lmaooo. The good days. Ctrl + alt + delete and force close on windows or cmd + option + esc force close on mac.
Both React and D3 have its pros, and this is an attempt to merge them together. After working much with D3 and React I decided to invent an API which would be simple to use and which will have less chance to turn the code into a spaghetti. So here came some advantages over these libraries: ### React 1. You cannot simply declare an attribute or style animation like it is made in D3. 2. React Hooks API looks unnatural and over-engineered to me. 3. When you need to manipulate the DOM and tie it with React, your code becomes more complex. 4. React tries to solve every problem in one library. 5. React decides for you when it renders your components. How these problems are solved: 1. Declare animation like `&lt;div style={{opacity: animate(1, {duration: 100})} /&gt;`. 2. There's a magic `getContext()` function, which gives you everything you will ever need, e.g. `context.store` object could be used to store anything you will ever need: state, DOM nodes, previous props etc and use these values when component will be rendered the next time. 3. You can just create a component, that will return a DOM node: `const C = () =&gt; document.createElement('div');`. You can use `attached`, `detached`, `updated` lifecycle functions that will give you references to DOM nodes. 4. Malevič.js is extendable, though there are not so much extension points at the moments. But the idea is that complex logic, that will be used in rare cases, will be put into separate modules. 5. You decide when you optimize your rendering. Since components can simply return DOM nodes, you can create a DOM node and throttle `render` or `sync` calls for it, build a rendering queue if you need. ### D3 1. When writing a complex component, your code quickly turns into spaghetti. Look at [D3 axis](https://github.com/d3/d3-axis/blob/master/src/axis.js) as an example. When some items are animated, some are not, some items were created, some need to be removed, some will stay, it's hard to manage all this. React-like approach solves this problem. Though the problem with animating removed items is unsolved yet. 2. You cannot turn such code to strings on server. You cannot use the same or similar code on Canvas (this problem I'm trying to solve now). You can still use D3 utilities like color, path, interpolators etc.
You don't need an arrow function for this. someParam would still be in scope of you used a regular function because it would form a closure.
Wow, that looks really cool. At least I like the idea of grouping domain layer scenarios into use cases - it seems to make sense.
It's true, but not for this if it's in an object. So I just get in the habit of always using arrow functions for functions defined within functions.
Maybe put in a return statement if your loop runs over 200 times or something?
And yet function components still mount, unmount and update and one will want to do something regarding that. ¯\_(ツ)_/¯ I am still fairly new to React, so I appreciate when people illustrate their hunches with examples othervise I have to figure it out myself completely anyway and it is not helpful. But with this hunch I happen to aggree. What I have noticed by writing quite a few times explicit effect that mimics comonentDidMount is that if you're determined to write things properly, it will most likely come paired with componentWillUnmount (that clears up mess effect began doing on mount) . It is way more convinient to ditch these wrappers and write it as a single effect to begin with. For a common example - an async api call that sets state after done . On unmount I want to kill a promise and not set state on now non existant component (because memory leaks). This can be written neatly as a single effect. A custom hook for a promise killer here is a lot better choice. Another common example is eventListeners. You create them on mount and clear on unmount. Within same effect the code imo looks neater with less lines of code.
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
Lol been there, did that recently with a php script on accident that just worked my computer and had to restart it.
Very interesting read, thx.
“Welp, the fan suddenly turned on... guess I hit an infinite loop...” *ctl-alt-delete -&gt; Task Manager* || *shift+Win+q* *(laughs in i3wm for Linux...*)
“Welp, the fan suddenly turned on... guess I hit an infinite loop...” *ctl-alt-delete -&gt; Task Manager* || *shift+Win+q* *(laughs in i3wm for Linux...*)
You could be even more controversial and create a `useWillMount` hook
If I recall correctly, PayPal move their front facing API to nodejs. Most of the big stuff is still done in Java
lol
Yeah did it :)
I feel like my pc should have handeled it a bit better as it's i7 with 16gb or ram but oh well i have learnt lol
We've all been there!
Yeah, I’ll pass on the 21 page PDF of the same strawman arguments I’ve seen before, thanks.
I made 4 separate google accounts in the span of a couple hours because their api only allows 50,000 requests a day, I was working with while loops, and I’m also an idiot.
When you’re looping towards infinity an i7 doesn’t get you there any sooner.
Alright, then there's not point having a conversation I guess. No worries!
You did mess up. You posted markup into the wysiwyg editor.
Looks like running this in the console should unhide the buttons. $('#next_top').show(); $('#next_bot').show(); It looks like the script is saving off the time to, so that might end up being an issue. I could work it out with an actual live example, but not from this script you posted.
My apologies, I thought that might be the right one but I clearly don't understand what I am looking at. Will this help? https://pastebin.com/VeSXMGJ3 The buttons aren't hidden, but if you click them before the timer is up, it prompts you to go back and wait it out.
I need a live running example of the actual website or a facsimile of it.
The website is https://course.uceusa.com but I doubt that's useful as you wouldn't be able to start the course. I appreciate the help tho! You're awesome!
I'm fairly new to JS, so I made a program that allows you to make lists of words and test your knowledge of them. Source: [https://github.com/TheCloudSaver/words](https://github.com/TheCloudSaver/words) Demo: [https://thecloudsaver.github.io/words/](https://thecloudsaver.github.io/words/)
This still won't do.
Well, I think that's all I have. It was worth a shot, thanks anyway!
Your best bet might be to dig through all the javascript on the page and attempt to locate and execute the callback function of the timer.
This is fantastic!
Here I'm trying to use markdown in new Reddit: ```javascript &lt;div class="my-fancy-component" onclick={() =&gt; alert('clicked')} /&gt;
Now compare 3 screenshots: - New Reddit markdown editor https://i.imgur.com/5s1EBWU.png - How new Reddit post looks like https://i.imgur.com/yzoKTEP.png - How old Reddit post looks like https://i.imgur.com/c9NgP1e.png
That's a cock-up. You're supposed to close code blocks with another triple-backtick. I opened your original post in an incognito tab using the new Reddit UI, and it was still messed up with "```" showing all through the text.
I agree that I missed 3` in previous reply end, after editing the code block became a single line. Here is another try, but with empty lines: ``` const div1 = (&lt;div class="my-fancy-component" onclick={() =&gt; alert('clicked')} /&gt;); const div2 = (&lt;div class="my-fancy-component" onclick={() =&gt; alert('clicked')} /&gt;); ```
Hi /u/jaymillymemes, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Now compare these 3 screenshots https://imgur.com/a/LQtRCJ0 This is not the only bug I noticed today. When clicking Edit on the initial post, sometimes text is truncated to text area height.
Ctrl-Shift-Escape saves you a click
The correct formatting is three backticks *on a line on its own* to start *and end* a code block: \`\`\` Multiline code block goes here \`\`\` ``` Multiline code block goes here ```
I'm not confusing, here I found the description of this big https://www.reddit.com/r/redesign/comments/9ozbjd/please_fix_broken_markdown_in_old_reddit/
I've been working on a template converter that supports, * React JavaScript or TypeScript, with or without Styled-Components * Vue * Mustache/Handlebars * Twig (Drupal / PHP) * SilverStripe Components * CSS/SCSS with SCSS Variables and CSS Variables * HTML I'm hoping its useful for Design Systems (AKA Pattern Libraries, Style Guides) so that they can provide templates in many more formats, because they usually only support HTML, CSS, and maybe one more format (if you're lucky). The input format is standard CSS, and a format that's similar to HTML but with a subformat to express optional attributes, or configurable template areas. https://www.npmjs.com/package/@springload/metatemplate
Cmd-Q on a mac
Kinda miss the old require syntax. All of this could be done with something like: const foo = require('foo')(dependencies) Also, IMO, using classes instead of closures is just leaving yourself open to a minefield of `this` mistakes.
You could make a component that renders the static template (header, footer, background, etc) and takes in the content via props.children
I will check thx!!!
A tip when working with things that could be getting stuck in an infinite loop, keep the Task manager in your browser open (in chrome Shift+ESC, not sure about other browser) and then you can just terminate the tab if it gets stuck
You're wildly incorrect. Javascript is the optimal choice for what Truffle is doing. The reason being most dapps are built in Javascript, so the dapp devs using it know Javascript. A lot (most?) start ups nowadays use node for back end as well. The most popular web3 libs are also written in JS. &amp;#x200B; Also, a lower level language like Rust has no real advantage. Smart contracts are small programs and tests will execute in seconds so it is better to use a high level language with fast dev speed. &amp;#x200B; So if you're gonna use a high level language anyway, JS is the obvious choice.
Nobody in blockchain is deploying their own cryptographic function, so there's no "complex cryptographic work"
Hi /u/nietzschefactor, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tenderhart_2b2t, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This is a suboptimal idea. A use case I could see for this is when you want to use hooks for an existing component, but don't quite know how to convert complex old lifecycle code. Other would be rewriting a component with multiple lifecycle effects to use hooks. This might allow to do it gradually. Often, there probably are a bit better, more "correct", solutions but they might take longer to implement or require more skill.
What do you mean by "inspections"? We review pull requests. Sometimes that's just basic sanity checking, and other times it's a lot more thorough - depends on the nature of the feature that's being developed
Code review is what I meant.
Then yes :). Our personal process is usually simple - a branch per ticket or bug, 1 other dev (minimum) to review the PR, another dev or team member to test it in CI environment (can be the person that did the review - just needs to be someone that didn't write the code), then tested by someone else later in UAT. That's the process for one of our products anyway...
Yes. In the sense of consistent reviews. No if you are thinking in the formal sense of "cleanroom auditing" of academic software engineering(It has it's place in some industries such as safety critical like health, nuclear or avionics, but can be very expensive if you don't need it). &amp;#x200B; In essence: Person authors code change -&gt; issues pull request through tooling -&gt; Team members annotate comments and express assessments of code quality -&gt; iterate until code is OK'ed by key reviewer(s) -&gt; Builds and tests provide greenlight for merge to proceed or block on errors (this typically goes in parallel with review revisions) &amp;#x200B; Key comment: \-Design quality, factoring/structure and dependencies/algorithmic strategies are the most important concern for me in a PR, as those end to be costliest to revisit later. I'm much more concerned that one's code is maintainable and will well be understood for safe modifications by the next junior engineer to touch it, than in complete audit to ensure you correctly covered every functional corner case. \-Automate away style and functional validation to as much a degree as you can tolerate (e.g. linters, typescript, prettier, UT &amp; Integration expections). In a web/cloud world, costs of fixing some classes of bugs is much "flatter" than in the past of boxed products. For bug classes where issues found now vs later is roughly the same I'd much rather the tooling be on the front lines.
Nice, deep cloning not-circualized data just got faster :D
Great read thanks
Great work. I may use this on my big team, big company project. My one suggestion is don't throw the constructed string values for your errors, and instead throw either a standard javascript Error object: EvalError, RangeError, TypeError - whichever is pertinent to the use case, or define your own custom error objects to throw, where the name is more generic and the 'message' property contains the actual Field name that's erroring. Using more standardized error names will allow the implementations to be much simpler. Basically I don't want to have to write a switch statement for each field in the catch portion. I'd rather be able to handle generic errors in my code, and then check the error message for details. example: try{ schema.validate({...}); } catch(err){ // using generic string values for errors. if (err == 'Invalid data type'){ // there is no way to pass the context of the error with a generic string value passed, so can't report on actual field via error data. console.log(err) } // using standard error types if(typeof err === TypeError){ console.log('Invalid data type value passed to field: ', err.message) } // using custom error type if(typeof err === SchemaTypeError){ console.log('Invalid data type value passed to field: ', err.message) } }
I threw together this [`@abstract` decorator](https://www.npmjs.com/package/abstract-decorator) package which provides a simple, TypeScript like way to define abstract classes and the contracts that subclasses must fulfill: @abstract class CookieService { @abstract headers; @abstract getValue() {} @abstract setValue() {} } It's also possible to completely remove these decorators from your production builds via a Babel transform, so you don't have any extra overhead (if you're shipping to the browser)!
Work using a Relational database would be better than mongo. If you know how to use a Relational database you can probably figure out mongo. Not that you will be an expert at mongo because you know Relational databases but you are looking for a junior position. If I was hiring a junior I would like to see a strong foundation; data structures, databases, OOP patterns, functional programming, can you use git and the terminal. I wouldn't really care about what frameworks you know. I would care way more about high level concepts and how to apply them. Details are what the internet is for.
TypeScript supports abstract classes and fields already 🤔 abstract class CookieService { abstract headers; abstract getValue(); abstract setValue(); }
Yup! This decorator is specifically for \_plain\_ JavaScript users (I noted in the docs that we don't support TS, because it's better to use the native syntax). I work in a number of projects that won't be able to adopt TS for some time, so I wanted to make something to make life better in them.
For a junior position you only really need one project done well (of course more won't hurt), with tests, deployment scripts, nice documentation, comments in the code (there are a lot of devs who are anti-comments, and I am too, but if you are showcasing your code comments to explain your thinking to a potential employer are very helpful), linting, that sort of things. If you are going for full stack positions (I guess you are, since you are building BE and FE) then I agree that relational is better than nosql, but don't sweat it, if what you have is MongoDB then it's fine, as long as you show some knowledge of relational DBs in the interview. A junior is still learning, after all, you are not expected to know it all. Good luck
Awesome advice. Will do. Thank you. I’ll research relational databases.
I think the most impressive projects are the ones that solve real problems. Questions like mongo vs sql doesn’t really matter imo since the right tech will become apparent once you know what the real problem you’re trying to solve is. Doing it this way will also help you develop both product and engineering skills which is far more valuable to a business. Also your interviewers are most likely not gonna have enough time to properly dig into your code and if anything will just skim through it. They’ll learn enough to ask you high level questions like “why did you use tech A over tech B” or “Explain your approach for solving this part of the code”. And you’ll likely give better answers if you tackle all your projects from a problem first approach rather than a tech first approach.
Nice! I bet I can use this to implement dependency injection in a natural/familiar way that allows for easier discovery of the interface behind the concrete class. :) :+1:
What does this offer? There's no compile time checking with plain JavaScript so inheriting from the class/functions won't give you more type safety than just creating a bunch of classes with no parent.
Really like this blogs theme and style. Would you mind sharing what you’re using (assuming you’re the author?)
Correct! This provides a runtime check the first time a class is instantiated. If you have not provided the abstract methods and properties on the subclass, it will throw an error. It will also throw an error if you try to instantiate the class directly. There is some overhead here, necessarily, but you can also avoid that by removing the decorator in production builds via a babel transform (instructions in the README)
Hope this gets integrated into node soon!
coooool! I'm also looking forward your book.
Nice.
Ah ok cool. So is this just for situations where you can't use typescript for whatever reason?
This is how you explain things!
Hm. I see. I’ll make sure to label how and why I coded something in JS to keep these answers in mind. Given that my current project is building a landing page to hypothetical company - what sorts of problems can I give myself to approach this. Perhaps building forms and finding ways to store them referring back to the database suggestion or sql.
Can't you already do that there is no reason you can't run straight Babel in the browser it's just that it would be very dlow
Second bullet mentions that frozen arrays received a 15x performance increase on "indexOf" calls. Historically freezing objects was a performance hit (with a bug in Chrome) or negligible gain (1% or so). Does this mean that Object.freeze might be worth using in the future for performance (it always held some value for data integrity)?
Pretty much, there are a few projects that I work on that’ll take some time to move over to TS, and there are other folks in the community who actually prefer JS, so this is for them and people in the middle 😄
Will including state (or is that props?) in return be necessary to render it? Seems like it shouldn't be since you're already passing it as an argument.
It's no slower than running Babel through Node.js. But it also won't help locate packages. Babel turns this: import * as react from 'react'; ...into something like this: var react = _interopRequireWildcard(require("react")); ...but the variable doesn't end up containing the React API unless you do something more.
But it also works with relative paths
Can you elaborate on that? Much of existing code on npm relies on importing both relative paths and npm package names, or even a combination of both like: require('fbjs/lib/emptyFunction');
Given a choice between strengthening JavaScript's meta model to allow one to roll their own non-string subset-slicing API's easier, or directly adding a subset slicer to the language, which should get priority? This includes subtracting items from sets also.
I'm having trouble thinking of a scenario where the correct solution involves checking if a variable is a function. I'd be really curious if anyone has a legit edge case where it's useful, but I can't see it being 200 places in a codebase of *any* size. I can think of one case where someone might have an extremely naive (and, frankly, stupid) idea to check the type, which would be something like this: const someFn = input =&gt; { const data = typeof input === 'function' ? input() : input // ... do all the work on data } But the proper solution to that isn't to check for a function, it's to pass a value to the function. const someFn = data =&gt; // ... do all the work on data someFn({ my: 'input' }) //or someFn(getSomeInput()) If you've got 200 instances of something like that, you're better off spending your time refactoring to fix the mess whoever made for you than writing a library to save a few characters. Not that I'm telling you what to waste your time on; by all means, it's your time, waste it how you see fit. If the checks are just being done to confirm that a callback or dependency injection are being passed properly, pull that crap out and let the app fall over. Something to keep in mind when it comes to programming is that just because a practice is common or popular doesn't mean that it's good. I think this is especially true with JavaScript because there are so many people who don't really know the language properly but have to use it so they import these awful concepts from the languages they do sort of know (which may or may not be awful concepts *in* those languages) and try to apply them to JavaScript.
OK, but why?
In Moon there's one global state passed as props. They are handled by a driver which keeps track of the state, just like any other driver. Theoretically, a driver could be attached to a database, HTTP, GraphQL — anything. You return outputs to any drivers that changed. However, the `Root` function returns the same data it was given so that it can be reused by the `change` function.
It's just an experiment :) I love trying out new ideas and putting them out there. In this case, I really want there to be a shift towards functional programming because it can help simplify UI development and make things more composable and maintainable. New ideas that go against the status quo can lead to improvement!
&gt;and the data being applied to the schem Thank you for the feedback, It busted my confidence in my coding ability! As for the errors. You are correct, I think errors should be handled a little bit better, but I do throw more information than a constructed string value, apparently, I forgot to mention it on the documentation. &amp;#x200B; When a schema validation fails, a JS native \`Map\` is thrown. The thrown map has as keys the property name of the field that failed, and the value is an object with the field name, and a human-readable message. As you said I think it should be handled better, and I should probably add the value that failed to validate to that object. &amp;#x200B; The reason I chose to throw a Map is that the schema validator was first intended at validating forms, and I wanted to show the user all the fields(that's why I call the object props "fields") errors instead of stopping at the first invalid field. &amp;#x200B; Also, the validator only does one loop over all of the fields, so returning all of the field errors doesn't impact performance(other than bigger RAM footprint on big objects). &amp;#x200B; I will make a custom error, I think you are correct, errors can be handled better, and the value will be added. And again, thank you very much for your feedback, I really appreciate it!
I'd rather not mix pure language like elm with js. Want a functiinal language - use clojurescript, elm, purescript, haskell + miso
JS has been getting better support for functional programming patterns and there are a lot of tools — I went with it on purpose because there aren’t a lot of tools that support working with JS directly and it’s one less thing to learn when getting started. It lowers the entry barrier to help get more adoption.
Isn't that basically what https://codesandbox.io does?
[removed]
Indeed it is! But codesandbox runs transpilers in the cloud and if you export the project to run locally, suddenly it blows up to hundreds of megabytes in size. Here the point is that literally everything runs in the browser. No build tools anywhere.
Did you pick a project yet?
Fp entry barrier isnt about difficulty its about way of thinking differently about solving problems. Fp with lower entry barrier for js devs - reason+reasonreact. Js will never go fully functional due to language design and its limitations, also dont forget about backwards compatibillity. So if you want a fp language in front end your only choice is compile-to-js languages
You have... function change(amount) { return ({ count }) =&gt; Root(...); } function Root({ count }) { return { count, view: &lt;...some JSX using count and change...&gt; }; } Moon(Root, { count: Moon.data.driver(1), view: Moon.view.driver("#root") }); Ok, so one question: Why does the function returned by `change` need to return a `Root`?
Most internationalization (i18n) libraries are bloated so I created [intljulep](https://github.com/laurentpayot/intljulep) to get i18n with internal references (i.e. you can reuse translations) and simple plurals (such as for English or French) in [20 lines of code](https://github.com/laurentpayot/intljulep/blob/master/index.js) only. Cheers!
Not sure if this is still relevant for you, but my team has started migrating a relatively big react app to typescript. It's definitely annoying but not the end of the world. The way we're doing it is generating the types for response objects with https://github.com/vojtechhabarta/typescript-generator (obviously only applies to a Java backend). I started doing all the redux stuff first because it allows me to have types for the redux state in connected components. You definitely don't have to start from the bottom of the component tree, I decided to start with a few "big" components like a form that holds 100 subcomponents without touching those yet. It does make sense to migrate all components that are somehow related to each other though so I'm mostly working my way down the tree. Definitely not as painful as I was expecting though, maybe because the code I'm migrating is relatively clean and I've barely found any actual type errors yet, most of them are from missing properties that I can just add and fill with "undefined" so that the logic of the code itself stays the same. If you have the allowJs flag in typescript set everything will work like it used to and you can just go through your files and change their extensions to ts or tsx one by one. Another really awesome thing, if you're using babel 7 with webpack you don't need an additional build step, there's a preset for the babel plugin: https://iamturns.com/typescript-babel/ Right now I've been given the time to 100% focus on migrating, but if you don't have that luxury you can also just change the extensions of the files you're working on for whatever feature you're developing and slowly migrate your codebase like that.
I think a React Native app has to parse all JS on startup. Does this mean React Native will get a whole lot faster?
JS != JSON. I don't see anything about improving the parsing of JavaScript. Does React Native even use v8 under the hood? It can't (probably) on iOS at least.
&gt; It busted my confidence in my coding ability! That's definitely not was I was trying to do! I think the code is nice &amp; clean. It's also a solution to a common problem that I haven't seen solved very often.
I feel very confident with my ability to solve problems, but not sure if the way I solve them is good. So the fact that you didn't mention any bad coding practice or project structure was nice(because it seems like you looked at the code). I'm sure the code can improve, it always can, but I'm talking about issues that are easy to spot. The less of those I see the better I feel :)
parsing JSON is a big part of JS
A bit late to the party...but I ended up speed coding Tinder using React: [https://www.youtube.com/watch?v=wLGM04oi\_wE](https://www.youtube.com/watch?v=wLGM04oi_wE)
I started working through these videos and they seem pretty good. https://www.youtube.com/playlist?list=PL15NLmjJalxydhO9orvXv_yvgZEfrDQvX
Try [https://www.freecodecamp.org/](https://www.freecodecamp.org/) it's was very good source for me when i start learning web programming.
There are TONS of JavaScript tutorials out there. Try this: [https://javascript.info/](https://javascript.info/)
Closures
Whilst JSON is a subset of JS, it's parsed using a separate (simpler) parser for efficiency's sake.
Yes, and that parser affects JS performance since it stops execution until its done. So this is an improvement that directly affects JS. Just think about all the requests a modern web app does. Most of the responses are JSON, so in the end, a faster parser affects the performance of the app.
The post suggests extending the string prototype which is generally considered a bad idea.
Technically yes, it will improve the performance of the application as a whole. It isn't however magically improving the performance of the JS Engine itself — only applications that use JSON.
While true, it has nothing to do with the original comment :)
Also, does it matter what Object(Object.prototype) does if the result is just ignored? Object.freeze obviously *has* side-effects, i.e. the freezing of the object property. My interpretation would be that this is a half-assed way of making sure the statement doesn't error. AFAICT the second case just creates a new empty object and then discards it. Maybe better written as Object.freeze &amp;&amp; Object.freeze(Object.prototype)