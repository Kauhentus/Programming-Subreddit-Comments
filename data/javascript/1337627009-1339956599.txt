Somebody make a racing game. It's ready
I think this is a little bit hardcore solution. I know that JavaScript is sometimes critized, because it doesn't have classes, private and protected members etc., but this isn't good way to simulate them. (Because of speed and memory performance.) Just use standard conventions and private members name with and underscore at the beginning (and access them normal: this._privateMember).
Thanks for your reply! Even though simulating classes might be good, the standard conventions do almost exactly this, but in a more complicated way: Create a constructor function with all the private and privileged variables, then assign a parent class to the prototype (although this is not done very often), and then add public methods to the prototype. This function simply combines these 3 steps into one function, and I added some extended support for inheritance. I might be wrong about the standard conventions, but this is what I found from e.g. Douglas Crockford's book "Javascript: the good parts" and reading some sources of js libraries (KineticJS, JQuery)
You didn't understand what I meant. You shouldn't do this, because you wrap all of your functions with new functions. All methods should be located in prototype and should NOT be changed or hidden somewhere in some private object. function MyClass(){ //some code } MyClass.prototype = { publicMethod: function(){ … }, _privateMethod: function(){ … }, //could be named protected __superPrivateMethod: function(){ … } //could be named just private };
Its **not** 40 lines of JS if you are packing in a bunch of libraries. If they really want to impress you with performance they would indicate the total number of instructions.
Take a look at deferred and chain dependent callbacks: http://api.jquery.com/category/deferred-object/ or use Function bind to avoid nested callbacks.
Backbonejs and Prototypejs 
Great work!
Thanks 
Looks like you have the same wants that I do.
I use PlastronJS which is an MVC I wrote and it adds on some square brackets for routing so you can do something like this: /view/[?*] so the last bit is optional. I usually put the filter parameters in a query string like form so I can parse them like a query string as it's pretty easy to go between that and an object. If certain params don't exist then just fall back on defaults (I actuallyy remove values form the string when they're default params so it looks a bit cleaner)
Check out "Javascript Patterns" by Stoyan Stefanov. He has a whole section where he replicates classical patterns in JS, and later does the same the functional way. You'd be surprised how much simpler the functional approaches tended to be. Sometimes things that are a little difficult to do classically are a piece of cake functionally. Javascript is a functional language and has its own strengths and weaknesses compared to classical. Often persuading JS to behave classically just makes you neglect the things that JS is particularly good at.
I'm not an expert in js world but i thought this was meant to be a "preview" or an example. I could see further potential for a game if enough people were involved in a project under WebGL. Am i missing something?
Gah. I was thinking prototypal and typing functional. I forgot functional has a different meaning in comp sci. Thank you.
You want a simple photo gallery of thumbnails that expand to the full photo. Search for a jQuery lightbox plugin. "lightbox" popularized this concept so the general term shares the name now.
If you are willing to pay, this might be what you are looking for: http://www.slidedeck.com/
The turbo button made my jaw drop!!
Here is a nice jQuery plugin called [Lightbox](http://lokeshdhakar.com/projects/lightbox2/), I have used previous versions of this script when I was a total JS noob and I would definitely recommend it because of its simplicity. The page has good instructions on how to setup and use the script. If you want to go a little further and learn how the script works, the best way would be to download the files, open the example page in a browser then completely strip the HTML to its bare bones of just being a slideshow (if you break it, learn what broke it, you will find out what the script depends on in the HTML to work). Then why not jump in to the JS and play about with the options they give you. You will be surprised how much you can learn from just examining other peoples functions, so why not give it a shot at customizing a few functions in the script, if you break anything, find out what broke it, you've learned a little. PM me if you have any JS questions
Just noticed sjs suggested lightbox as well, my bad. Lack of caffeine. Have an upvote.
Douglas Crockford held a keynote today at a conference about HTML5, but the content of the speech didn't have that much to do with coding and optimizing web applications; contents: 29.5% - software patents suck and I’m going to get rid of them! [this part was nice, because patents are really not working out for inventors]; 69.5% - yahoo sucks and management sucks and they should feel bad; 1% - don’t forget to use your semicolons; [link to the conference website](http://html5devconf.com/speakers/douglas_crockford)
Link to video?
Easiest way: throw frameworks and plugins at it until it works Best way: learn some JavaScript by rolling your own. It's actually pretty simple to do without the frameworks using some CSS and light JavaScript. There will be a few parts: * Loading the images * Switching styles on the images as you want to show one and hide another * Capturing and handling the click events on the control elements (the thumbnails and the direction arrows) * Capturing and handling errors You can even do this without JavaScript in CSS3 if you like, but that's not going to work in every browser. Take the time to learn a bit of JavaScript before piling on the frameworks that will wind up obfuscating what is going on behind the scenes. I use a framework all the time, but there are still many times when I bust out the vanilla JavaScript when it would be faster running or less complex than passing through a framework (i.e. document.getElementById("id") is preferable to $("id"))
they say [it's coming soon](https://twitter.com/html5devconf/status/204815478638649344)
&gt; don’t forget to use your semicolons; I was about declare my hate of inverted smileys. Now I'm confused because I still hate it but the joke was good.
I'm glad I didn't waste my time or money on this conference, I guess. It's a shame that Crockford's blowhardiness has now long eclipsed his OSS contributions.
Thanks for your reply! I'll read that book.
I know there are many patterns which want to simulate classical OOP programming, but JavaScript is just different language. I also have my own Class function but only for easier inheritance, extending functions etc. It looks like this: var MyClass = Class({ Extends: ParentClass, Init: function(x, y){ //Add to count of instances ++this.constructor.count; //Private variables, user shouldn't edit them this._x = x; this._y = y; }, Dynamic: { move: function(newX, newY){ //animation or something… }, _myPrivateFunction: function(){ … } }, Static: { count: 0 }, Features: [object1, object2, object3]//members will be copied to the prototype }); All functions in JavaScript are objects. It's not very good for memory when you wrap every function with a new function to hide it. If you really need something absolutely private, just put it with privilleged method to constructor, don't make two functions.
If I can reply: Every person can write JavaScript as he wants, so code quality is different. I just want to tell you that JavaScript uses more memory for functions, so you should have controll of number of them. So if you really need something private, put it in constructor. If not, put it normally in the prototype or just like public member.
I was out visiting the web team @ paypal/eBay and they were actually working on some pretty cool shit. Just sayin'
**EDIT** Out of curiousity... why all the down votes? Did I somehow leap off topic or offend people? As a full time JavaScript coder who has an invention that may be granted a patent soon, when ever the USPTO makes the decision, I have some insight into this. Its not a patent problem. Its a business and ownership problem. I wanted my invention to be patented in order to protect my original idea from being abused. I thought it could some day be value and history has taught me that where there is value in a web technology that technology will be relabeled, used without permission, and abused as necessary to either make advertising easier or make web browsers more interactive at the cost of security. I certainly did not want this. It seems my patent could not be granted fast enough, though. Google is already perverting the idea in Chrome 19, which recently went out of beta. Google is also infringing protected claims in a different technology via the W3C as a proxy for their madness. Its my intention that this thing I invented should be released with the most free licensing on the client side, but that it is incompatible with HTTP and HTML. I will never agree to licensing something in a way that I believe is destined for greater harm than good regardless of much Google could be willing to pay for it. So far, fortunately, these two violating technologies have not been pursued by Mozilla or IE, at least to my knowledge. My intention was to protect my original idea from misuse and not sue people as a patent troll. What is further complicated is that I don't own the patent even though I am the sole inventor. It is owned by my employer. So, I don't have the authority to make licensing decisions just to get it out of the door or even develop a product around it independently. So parts of the invention are being misused by Google and I cannot get product development around it. This is most frustrating to me far more so than it should be to anybody else. Now I am primarily waiting to see what decision the owners will make once the patent is granted knowing that Google is already using some of the protected claims. Of course all of those frustrations are in excess to the frustrations that ever inventor faces, such as acceptance of something new or different. There is nothing more frustrating than talking to developers who are entirely incapable of understanding that web technologies can reside outside the web. Some of the conversations I have had about the idea are so painfully repetitive and confused that now I believe it is a litmus test to easily determine whether or not a person who claims to be a developer is, in fact, mentally retarded. In those confused conversations I am not even talking about valid technical disagreements but merely the complete inability to think outside the box. I imagine this is a painful frustration any inventor faces regardless of whether or not everything in the business landscape is moving along smoothly.
I have but in Czech language. :D But maybe Douglass Crockford has written about it. This way is prefered because it's most dynamic. At first, if you use instanceof operator, it's true when you compare instance of MyClass and ParentClass: var obj = new MyClass(); obj instanceof ParentClass;//true And if you add something to ParentClass.prototype, it will be also in MyClass.prototype (if not overridden): var obj = new MyClass(); obj.somethingNew;//undefined ParentClass.prototype.somethingNew = "default value"; obj.somethingNew;//default value If you would just copy members from the parent's prototype to the prototype of your object, this wouldn't work.
Why is it that everyone thinks that the prototypal objectorientation of javascript needs to be extended by classical class inheritance? The simplicity of protoypal object orientation is a feature, not a shortcoming of the language.
However, I did not try to implement a full classical approach. I noticed that many js applications used private, privileged and public members as described by Crockford (http://javascript.crockford.com/private.html), but I simply didn't like that I had to add private, privileged and public members differently to an object. I also didn't like that I have to use a "that" object sometimes, instead of "this". Therefore I wrote this wrapper function which hides that functionality. However, I've learned that wrapping functions with another function (to replace that with this) is quite inefficient in JavaScript, and most likely I shouldn't have included the extend variable, since that focuses too much on classical inheritance.
Why don't you just try it.. 
Yeah, I (very briefly) considered using gists for syntax highlighting, but it annoys me to have to go back and forth especially with many gists... That's an excellent point about using Backbone.sync! I hadn't thought about that at all, but it's true the approach is much cleaner.
I thought it was intresting, but I've never seen him speak before. 
Pretty cool, nice job!
Perhaps since many people have classical backgrounds, and even people like Crockford talk about classical class inheritance. I read his book, and he recommended a few different types of inheritance, pseudoclassical being one of them. Since I am already familiar with classical inheritance it is the easiest one to work with. However, the separation between private, privileged and public members is not uncommon in JavaScript (please correct me if I'm wrong). Do you think that if I removed the extend object that this function is better suited for javascript programs? That way this function is simply a way to hide the difference in implementation between private, privileged and public members.
seems like nonsense to charge for js that you can just go and read.
Do you also post that to every "hello world!" tutorial? I didn't say or imply that nobody's ever done this before. I created this to learn more about JavaScript and I posted it here to get feedback. You're not helping anyone with your comment.
awesome.
Thanks!
Keep learning.
I thought it was pretty interesting. He has already done so many coding talks; if he did another one, he wouldn't be staying DRY. Its also important to note that it was a conference *for* html5 developers. Not necessarily *about* html5.
Ok. Thanks for you helpful replies! 
Right? Even if its minified you could still copy/paste the code and use it, even if you don't want to bother to make sense of the minified code. Not to mention its pretty easy to roll your own carousel.. I wouldn't expect to spend more then a day to get a custom carousel with all the same features rolling.
Works just fine in Firefox too....
Well.. It doesn't work on my samsung galaxy 1...
Just make sure if the patent ends up in court, it's in California and not Texas. That would get justice on your side! Also, did you ever think about completely open sourcing your patent? This way everybody can use it and you are actually helping the developer community.
Poor Firefox is getting less and less love lately.
I just noticed that the javascript source code is pretty well commented as well, if anyone is interested in how it works.
coffeescript is great for small projects and quick prototyping, but is an issue when you get to larger projects. Not everyone knows coffeescript and it's not standardized, also the tools for things like linting and best practices aren't buttoned down. Treat it like any other new un-standardized technology, great to play with (and we should all play) but not for production.
That's odd, since it does work here. Could you pm me the complete error? And perhaps try to run the same on a different browser? I've tested it in Chrome and Firefox on Linux and it works fine, even when I directly include the github file (https://raw.github.com/TiddoLangerak/newClass/master/newClass.js). By the way, are you having the same problem with both the minimized and the full version? **EDIT:** I just realized that I forgot to do a hasOwnProperty test in some for in loops. I think that's what caused the errors. I've updated the code now;) 
What was it like because as I understand it crockford thinks html5 is a really bad move. 
Yes, I have thought about this. As far as I care there is no copyright, so please feel free to read and republish as much as you wish. http://mailmarkup.org/ You can read all the code, documentation, and instructions you want. On the site I also link to the patent application and provide a slideshow application that summarizes some of the strengths of the technology. Since I don't own I completely realize there has to be a way to generate revenue off this or it will be either locked away and forgotten or the owner's will simply sell it the least amount of money possible at the first request. I also realize that if this is not free and openly available equally to everybody then it will never work. Here are my thoughts on this matter: * Create a new non-transferable license that makes the technology free in user-agent software so long as a good faith effort is taken to following the instructions in the specification. Licensing would be open and equally available to everybody without need for a request. I would also make the life of this license longer than the life of protection so that protection does not turn into extortion. * I would lock down the patent tighter than a terrorist prison on the server side. The technology is designed around the SMTP protocol, so in this case the server is an invisible agent in the middle of a conversation that serves neither as a starting or ending point, so access to the technology on the server side only benefits tracking and analysis. Tracking and analysis certainly benefit businesses, but do not directly benefit the end users, and it is not required for the technology to achieve 100% of operation and intention. Since this area benefits businesses without immediate benefit to the actual users I feel no guilt in limiting access and make those limitations painfully expensive. The other side of this coin is that if it is used where in intended, in email, than the conversation is inherently private. If a business does pay a fee to perform access to data over the wire then by US law that access must be limited to maintenance and business facilitation only or else there is a lawful privacy violation. This means that if users believe their data is being used in appropriately then they have the law on their side, as opposed to only market economics, and they can sue to punish the offender. Furthermore, if it can be proven that data passing through the server was stored outside a user's account or passed to a third party then the service is legally doomed in the US. Privacy is certainly less clear and less protected on the web.
Shame I read that.... WHAT IS IT!! Curiosity wins this round. 
Its a markup language for email. The language itself is not protected, but it requires a custom extension to the DOM. Its this custom extension to the DOM that is protected, and is completely unnecessary on the web. You can read the entire code, specification, and other stuff at http://mailmarkup.org/
Hmm... I had a jsfiddle that was throwing errors before, but the same page is working fine now. Go figure.
Why don't you just make sure you set your CSS on the lightbox to position: fixed; top: 0; bottom: 0; left: 0; right: 0; That way the browser can still scroll whenever it feels like it and your lightbox will still cover the screen?
Have new Javascript libraries become so ubiquitous that one no longer has to say what a library does? I am not blaming OP though. It is almost exactly the same information that the github page gives that the title gives.
you fail to mention *what* does this actually do.
I'll stop when you rip Javascript from my cold dead fingers. 
Have you tried looking at the window.onscroll event? In theory it should fire, and you just put your scroll correction code in there. You could then clear that when the page is fully loaded. However I'd be against using this, as if your page takes a while to load, it would be annoying. Couldn't you hide the content, or display a 'loading', and then just display when the page is ready?
last I knew there was no secure 'random' number generation in browsers, but it looks like this library is using some new window.crypto stuff which is secure: https://github.com/openpgpjs/openpgpjs/blob/master/src/ciphers/openpgp.crypto.js#L338 are there still reasons this might be a bad idea? 
Basically accelerate each particle towards the cursor every timestep. There's an open sourced java/processing implementation [here](http://www.openprocessing.org/sketch/2363). You can also view-source the webgl app and see how it works.
Prototypes can be a bit like goto, useful, but you can easily build a mess (a mess worse then using classes, which is pretty bad). Classes however are like the if statement, a specific use case, where the code is much clearer because it only aims to implement that one use case. That's why I use classes. They fit most designs well, not great, but well.
I do this already for one type of lightbox but I can't seem to find a solution right now for a scrollable window where the lightbox needs to scroll with the window. Currently I set a 250 timeout.
Advance particle at particle velocity. Apply friction/resistance. If mouse button is down: Set particle acceleration/velocity (it's pretty basic movement) towards cursor. The velocity is determined by distance from cursor, and direction... well, angle between the cursor and the particle.
Imagine a dialog/lightbox that is too big for your window.
&gt;Basically accelerate each particle towards the cursor every timestep. No. Every time you click, or the mouse button is down.
what it does is one thing, why it is different is something else I'd like to hear. Why develop another library? Even better if you can compare to other small libraries and contrast.
That part's a little self-explanatory...
And you want to view the rest of the lightbox contents with standard scrollbars, or with some scrolling mechanism of your own? You could always add overflow:auto to the lightbox, no? Or set overflow:hidden on the position:fixed div, and then put another one inside of it (with position:absolute) and then move its position negative with some of your own javascript?
got it! thanks!
merci to you both! I was too lazy to look at the code :P &lt;3
Thanks for this input! All good points for sure. Regarding Chrome, that's something in response to something I noticed one day with touch events being available on desktop Chrome, but I believe that may have been a mistake, and it looks like they took it out (there's now an option in the Chrome dev tools to emulate touch events, so it's probably related to that). Definitely a valid point about Chrome for Android - I dislike UA sniffing in general, but can't think of a better check for non-mobile devices (other than a screen resolution test?). Good point about image maps, although I'll definitely deprioritize that. ;) Not sure about what to do for "m-focus", as it hasn't quite worked well. It'll hit the DOM a little too much if I add it to multiple elements I think (once to find the element, another time to add the focus class, another time to remove it). I also need to remove the "m-" namespace, which is a holdover from the framework it was built in. Handling :active is something related, but I'm not sure if I want to handle that different. Because it's firing actual click events, I guess I'd hoped to be style :active like normal, but unfortunately it has the same delay as the original click event (even when the ghost click is suppressed!). Definitely a good point about the Pythagoras triangle math - I agree. The toUpperCase in the helper method is another holdover from the larger project this was built in, but you're right, the sanity check isn't needed here. Thanks again for the input! I'll try to get these into tickets in Github and work through them (sometime I hope.. will be a busy month, but I could always use something like this to procrastinate with!). EDIT: definitely want to check for closest button elements - that's an oversight on my part. Will definitely add that in!
It works most of the time, but some of the times it still has the undesired effect. Perhaps stopping pagescroll on refresh might be an idea.
Thanks, but I already do everything you're suggesting. I'm not after alternate lightbox solutions. What I am trying to establish is if there is a way to place the lightbox on the page after the page has stopped scrolling on page refresh.
really, why?
Cross browser support?
Yes Please! I watched the first thirty-or-so episodes of Let's Code some time ago until growing bored of the focus on Java. I am absolutely looking forward to seeing this get funded. TL;DR: Take my money! Here's my 1/21th of the $2100 left to get this funded by Jun 5.
Khan Academy has a type of this implemented for YouTube. If you go to a video on Khan Academy and hit the Transcript button below the video, you will notice that it tracks along in sync to the video.
nice.
Doesn't work on my Chrome for Mac either :( just a blank white screen.
That sounds incredibly insecure. 
This is just awesome - thanks for posting this. It's cool see a game that isn't Flash, WebGL or Canvas done this well. it loads on iOS devices but there seems to be no way to control things.
While useful, I'm not sure how often I will ever see this used. Neat nonetheless.
[I'll just leave this here...](http://xkcd.com/927/)
A callback is just something you want the function to do when it's done (think essentially just an event). Typically they are used to wrap scopes nicely, as typically a callback will execute in the scope it was defined in, and be passed important values. They are most common in asynchronous uses, but there are times when they can be valuable in synchronous cases. Personally, I sometimes use them in place of chaining functions. Instead of calling a function at the end of another to pass data, I can use a callback to better organize this. Example: function Main() { GetData(function(data) { RenderData(data); }); } function GetData(callback) { callback(data); } Instead of the common: function Main() { GetData(); } function GetData() { RenderData(data); } In JavaScript, this example is most often going to be asynchronous as the most common way to "get data", is by an AJAX request. But substitute the concept of "get data" with something else such as "parsing data" etc, and it could serve to help organize otherwise a bit messy flow. Both examples accomplish the same thing, but the 1st allows you to essentially read the entire flow from the Main(), instead of hiding that GetData() flows to other functions. 
[Jeremy Ashkenas' rebuttal](http://news.ycombinator.com/item?id=4003069)
A bit like the non-trendy version of pouchdb: https://github.com/daleharvey/pouchdb
Those that focus on "selling" a single framework tend to be involved in its creation, or are receiving something for their review. Two reasons I won't use Spine.js: 1. I've never heard of Spine.js before today. 2. The only article I've ever seen about it (this one) goes on about how great it is, but does not cover pitfalls, nor how it compares against other systems. It's more of an advertisement than a review.
* picky css rules * slow as hell * non-native debugging console chrome is really rocking the browser market, and ever since ie9 i havent been wasting hours of my life working on compatibility. 9 times out of 10 when someone from design sends me a compatibility issue, its a firefox thing.
I really want to make a 2D sidescrolling platformer from scratch, but every tutorial I've found that's halfway decent always ends up using a framework of some kind. 
&lt;script&gt;src="displayDate.js" type="text/javascript"&gt;&lt;/script&gt; Syntax issue right there. &lt;script&gt;src="displayDate.js" would break the string that is calling your .js file. Unless you mistyped...
:(
Anyone have a recommendation for the best JavaScript library for working with smooth tile-based platformers (#2 in the link) in canvas?
&gt;I've never heard of Spine.js before today. There is an infinite amount of things you've never heard of. Spine was created by Alex MacCaw; the guy who wrote JavaScript Web Applications (O'Reilly). I highly recommend it. It's a very useful book. &gt;The only article I've ever seen about it (this one) goes on about how great it is [...] Again, this isn't a valid reason to dismiss it. Keep your facts straight. Do a proper evaluation. There should be technical reasons behind your technical decisions. [FWIW, I went with Ember.]
Check http://altjs.org/ 
We'll, I think that's for my self to decide if I want to learn how to do that. I've got tons of other schoolwork. I really need someone to do this for me 
nono, you don't understand, I have to show all my work in JavaScript
That amendment seems much too restrictive. If I understand your definition, the callback function passed to `[].forEach()` would not be considered a callback, because it is only called immediately during the execution of `forEach()`. It isn't "called later when the receiver is done or in the case of a certain event like an error". But Mozilla describes that function as a callback, and so do I: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach A callback is simply any function you pass to another function for the purpose of calling it back. It doesn't matter when that call is made or what event leads to the call, it's still a callback.
Yeah, you're the reason backbone is more popular. Sometimes frameworks are a popularity contest for the author and not actually related to how good it is. Fortunately good frameworks tends to bubble to the top.
Now this is a good example of solving a real-world problem. Great write-up, too; nice mix of code samples and working demos directly on the page.
Very interesting read! Makes me want to write an HTML5/JS platformer :)
For me the valuable thing about this is not precisely the tool, but the idea of much more people **creating** things and content and not only consuming them, all of this with standard web technologies. Also it inspires a lot of developers to experiment and release other cool tools 
I mangled the headline. The quote is about the keynote, but there are comments about all sorts of happenings at the Conference.
Could someone explain me possible uses of this concept/library? 
This question might get more/better responses from /r/programming or /r/askcompsci since the problem is not specific to javascript (you've just chosen to implement it in javascript)
This isn't related to your task, but it's bugging me. function doStuff1(){ for (i = 0; i &lt; 10; i++){} } function doStuff2(){ var j; for (j = 0; j &lt; 10; j++){} } doStuff1(); alert(i); // 10 doStuff2(); alert(j); // undefined
By not writing the keyword [_var_](https://developer.mozilla.org/en/JavaScript/Reference/Statements/var) before _i_, you are making _i_ a global variable. Please don't use them since it can make the code really confusing. **Always use _var_.**
yeah. either way, that chaining thing is not the way to go. jQuery plugins are supposed to work (as I understand it) by adding functions to the jQuery prototype (more or less) via `$.fn["YourFunction"] = function(){}`. Adding the scoped functionality on top of an existing jQuery object feels like a very icky non-standard way to do it.
Have a look at http://florianguenther.com/zui53/
JSV is great. It's too bad that JSON Schemas still haven't really 'caught on' with most people, they can be useful in so many ways. 
I'll have to spend a bit more time looking into that second one, but I can't tell if the second link is what I was trying to do yet. Unlike in the first link though, it is only supposed to move during the mouse hover condition, not like an animation.
I don't exactly understand what you mean, how would you go about fixing that? Like with a pause or something?
Try looking up JS animation.
Will do. I don't know if you mean that that will work for this, or that I didn't explain it very well. It is not supposed to be an animation, it is only supposed to move while the mouse is over it, and then stop when it isn't. So the mouse would have to chase it around in a circle. 
sorry. This is for use in a compositing program Adobe After Effects. I am not a programmer. *content("A").transform.position* is simply the coordinates of a point (in this case, one point of my triangle.) It could just as easily be [blah, blah], except that the values change as the point moves. 
Try swapping a and b when it moves to the other side, if you can tell when that happens. You might have better luck on Stack Overflow (link in the sidebar) or in a different subreddit. This subreddit is almost all browser based or node.js.
Thanks for the critique.
Thanks. I have only been programming for a few months so I was thinking about putting beginner js/progamming. I still make a few theoretical mistakes here and there.
lol, for some reason I didn't make the connection that you actually wanted to log the boolean, sorry :D
The Closure Compiler is great. Don't forget to try "--compilation_level ADVANCED_OPTIMIZATIONS". That will give you more of what it sounds like you are looking for with the renaming of everything. There are other good ones such as UglifyJS and YUI Compressor. In my experience Closure usually produces the best performing code, but not always the smallest. By the way, it is minifying, not encrypting. The purpose is to shrink and perhaps obsfucate. 
Use any javascript compressor, like yui compressor or uglifyjs or closure compiler. Anyway, noone do it to encrypt the file (there's no real reason to do that), but to make it smaller and speed up the download.
I disagree with the generalization about it being 'obnoxious and shitty' to attempt to obfuscate code. I don't think it is the right thing to do in all circumstances by any means. I do know that systems that will highly optimize the size of the code greatly reduce its readability. The names of local variables are simply lost in many situations. If you are trying to promote the open web, it's very good to release some open-source functionality under a permissive license such as MIT or LGPL. I don't think reconstructing / reverse engineering some compressed source code (either deliberately obfuscated or not) is the way to program in general. In some situations it makes sense to make it more difficult to access source code or the JavaScript code that the program runs on. Circumventing encryption to get at trade secrets would potentially have different legal consequences in intellectual property disputes to someone just reading some code (even unobfuscating it before reading it). Protection of intellectual property and trade secrets is a valid concern - but it is certainly worth assessing how much time it is worth putting into imperfect protection anyway. Lots of people would give up from trying to understand obfuscated or encrypted code if when they open the files it makes no sense. Here is one idea - but it's complicated. Encode most of the JavaScript code that you normally would have as an encrypted base64 string. It can be compressed here too. Then the script is decompressed / unencrypted using an obfuscated function. I have not really thought that much about how to hide the source code but have thought about compression and its consequence of making the code impossible to read without reverse engineering.
Aaaaaaaand ... it's funded. Now let's see if we can crank this up to 11.
There is literally no reason to "encrypt" (obfuscate, really) traditional JS. It is run entirely client side, so if you actually "encrypt" it you must also send the client instructions on how to *decrypt* it, meaning it's still really just obfuscated. In other words, if you are relying on encryption or obfuscation for security then your security is inherently flawed and insecure. If you give me *any* JavaScript meant to be run in my browser, I can tell you exactly what it does and how it does it, no matter how obfuscated it is, given enough time. That is not secure in any way. If you're *not* planning to obfuscate for security purposes, then why do it? Why hide your code? Do you really have something so groundbreaking that you can't stomach the idea of anyone figuring out how you did? Well, if so, then you can bet your ass that someone out there will deobfuscate your code. But let's be honest here; you're not. Your code has been done a million times before, and/or isn't that exciting. The *only* reason you should ever obfuscate your code is to reduce file size and thus increase download speeds. Otherwise, you're just making things harder on both yourself and anyone who might learn from your code.
Hey...give me a few minutes. Taking a look at it now. I can code it for you and you can look at the code for it or I can try to break down the logical way of how I would do it. Any preference? 
You're entirely correct - as I allowed in my previous comment, there *are* good reasons and situations to minify/compress/etc your code, and while it's a shame it reduces readability, it's perfectly justified for those reasons. I was responding specifically to the OP who seemed to be interested *specifically in obfuscating* his code, rather than minifying or compressing it ("I've been using Google Closure Compiler, but I've noticed it doesn't do a great job at renaming object variables"). You make a good point about intellectual property provisions treating the situation differently if you have to circumvent some sort of "encryption" (no matter how weak or shoddy), but I would submit that many of these laws (eg, the DMCA) are themselves also shitty and counterproductive. Ultimately code is protected by copyright (the *expression* of an idea), so people can't simply lift your code and call it their own. However, I think most people in the programming world (as opposed to the business world) agree that ideas shouldn't be protectable (only the expression of an idea should be), and obfuscating your code for this reason seems distressingly like both trying to prevent others creating their own expression of your ideas *and* relying on laws that come perilously close to doing the same. I recognise that some people want to ring-fence their ideas (rather than merely their expressions of their ideas) and prevent others even seeing them (thereby preventing them re-expressing the idea in their own way), but I respectfully submit that that is still a shitty, obnoxious thing to do that runs quite counter to the general open, sharing culture of normal web development.
I don't see how JS is a special case, anything running on client side can be decompiled and reverse engineered just as easily as well-obfuscated javascript, given enough time. By well-obfuscated, I mean code that you can't just run through JsBeautifier and call it a day. Who would bother going further with that if they were just trying to learn?
I feel like it's generally advantageous to make it so that your code *is* human readable.
Here is what you could do without manipulating DOM too heavily. Make an array containing file names and variable counter matching array position for active image. When swap function is called with index you want, grab file name from array via index and use file name to find the img element (you could use id or class name), and change CSS style for display to none or remove display style. Make sure to set all initial divs to display none except the one you want to show. Ideally though you would want to just insert/remove entire img elements for the DOM.
I was just writing that solution lol [edit] oh wait, nvm lol
Since you wanna do it yourself, I will outline the idea I would use, and let you figure out the implementation. First, I would make an array that contains the id's of each thumb, or a reference to the thumb itself. something like var thumbList = ["b12","mop","ac3","ds2","fc3"]; So now you have a nice list of the thumbnails. The next thing you wanna do is make the thumbnails clickable. first the event listener $(".thumbnails img").click(thumbnailClick); And while we're dealing with event listeners, lets make your prev and next links clickable. You will need to assign some sort of class to identify them with so i will assume "prevLink" and "nextLink" $(".prevLink, .nextLink").click(prevNextClick); So let's talk about thumbnailClick. Here's the function: function thumbnailClick(e){ // get the id of the clicked thumbnail var currThumb = $(e.currentTarget).attr("id"); loadAPic(currThumb); } So thumbnail click gets the id attribute of the clicked thumbnail and passes it to a function called loadAPic. We added event listeners to our prevLink and nextLink as well. Let's see what prevNextClick is: function prevNextClick(e){ // this tells the link not to act like a link and do linky stuff e.preventDefault(); // get the id of the prev or next image var currId = $(e.currentTarget).attr("data-id"); loadAPic(currId); } It looks very similar, but there are some slight differences. You can see instead of using the "id" attribute (as we did in thumbnailClick), we are checking the "data-id" attribute. You can attach pretty much anything you want to DOM elements, like the previous or next links, for later use. In this case, we will be attaching the id of the previous image or next image onto the previous and next link everytime we load a new image... which brings us to loadAPic: function loadAPic(id){ // add ".jpg" and a folder path to the id, and assign that url to the "src" attribute of #bigimage img tag // this assumes you have jpgs matching the thumbnail id in a folder called "bigfolder" $("#bigimage").attr("src", "bigfolder/"+ id+".jpg" ); // lets update prev and next links to point to the prev and next // first we need some vars to store prevID and nextID in when we find them var prevID = ""; var nextID = ""; // now we need to look through our thumbList array for the id for(var i=0; i&lt;thumbList.length; i++){ // if the current thumbList item matches id, then this // is the one we need to operate on! if(thumbList[i] == id){ // first lets get our prevID. however, we can't assign // a previous id if there isn't one, so we have to check! if(thumbList[i-1]){ prevID = thumbList[i-1]; } // same concept for nextID if(thumbList[i+1]){ nextID = thumbList[i+1]; } } } // SOOOOO! Now we have our previous and next id's (hopefully), so lets // make those prev/next links do their magic! $(".prevLink").attr("data-id",prevID); $(".nextLink").attr("data-id",nextID); } I think the comments explain what's happening well enough, and there are a few things you will have to give some consideration... a few gotcha's if you will. For instance, if there is no previous or next id in the array (say we're at the beginning or end of the list) what would you change to prevent the link from being clickable? The final piece of the puzzle: You will need to run loadAPic once after you page loads to setup the prev/next links and to load up the first pic! Remember to pass loadAPic an id to load. One final note: the way this is structured is the way I often write my code. There are a ton of other ways to do it. I prefer to have one real workhorse function (in this case loadAPic) and a bunch of what I call Interface Functions that are responsible for getting the info the workhorse needs. Youll see prevNextClick and thumbnailClick do almost the same thing, but ultimately they end up calling loadAPic and passing it an id. I'm sure you'll have some questions, but first try to solve em yourself! Then if ya get stuck, you can ask :D [edit] if this IS someone's homework I'm going to have to hit someone.
I hope not because I just posted 90% of one possible answer :(
If you guys want to collaborate, I suggest: http://plunker.no.de/edit?live=preview&amp;stream=help_simple_image_gallery Actually, I just went ahead and made it work. I think I nailed it: http://plunker.no.de/ILoQ8y/ (Click the pencil icon to see code) * Opacity changes * Sliding window for active thumbnail
No? I am obviously using human-readable code on development/production level. I only want it not human readable when it is sent to the client. On top of the slight help in preventing people from stealing it (or at least making alterations if it is stolen), it decreases file size too.
It's not about knowing what is being done. Obviously they can do that, since JS is open-source. It's about not being able to expand upon it. It's about human readability, not computer readability. They won't be able to tell what a.c.x.r.p(j*m, c+h) does. No human could without a bunch of effort. I have put a ton of work into a piece of software. And while it's an open-source language, so I am aware it can be copied, I don't want it copied and manipulated/expanded upon so that someone can turn it into their own branch off of mine. &gt;you're just making things harder on both yourself and anyone who might learn from your code. It's not harder on me. I'd still use the uncompressed code. And no one will need to be learning from my code.
This may be it, but it's not compressing my object's variable names. :(
[Date is a javascript object](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date) and var date = new Date(); creates an instance of a Date object. You cannot simply replace this with a string because the Date object has all sort of functions that the addRow function is probably using to obtain information about the date. You can create your own instance of a Date object like so: //creates an instance of the DAte object for December 23, 2012 var myDate = new Date(2012, 11, 23); You can then use your Date instance in the addRow function: data.addRow(myDate, Math.round(low), Math.round(open), Math.round(close), Math.round(high)]); 
The demo appears to be broken in FF and Chrome.
&gt; I only want it not human readable when it is sent to the client. Allow me to quote a brilliant man: &gt; I feel like it's generally advantageous to make it so that your code is human readable. I tend to agree, myself. &gt; On top of the slight help in preventing people from stealing it (or at least making alterations if it is stolen) I can promise you that nobody can ever steal your software, unless the only copy is on some physical medium, and they steal that. If you still have it, it hasn't been stolen. &gt; it decreases file size too You expressed no concern about file size. You only seem interested in lessening the amount of knowledge made available to the world.
&gt; JS is open-source JavaScript code is not open source. It is licensed under whatever license it is released under, and if there is no licensing information then it usually pretty safe to assume that it is copyrighted by the owner and can not be used or copied in any form without their permission. Open Source is a term that refers to the source code being intentionally made available under some license that allows it to be shared, viewed, or modified. Just because some source code is readable doesn't mean you have any right to use it and it definitely doesn't make it "open source". &gt; I have put a ton of work into a piece of software. And while it's an open-source language, so I am aware it can be copied, I don't want it copied and manipulated/expanded upon so that someone can turn it into their own branch off of mine. I agree with you here. The parent poster is dead-wrong. There are many reasons to obsfucate your source, and if you don't want to be sharing your code then you shouldn't feel bad obsfucating it. You wrote it, and so you get to decide how it is used. Don't forget to put a copyright notice in the source files saying that all rights are reserved and that the software may not be modified, copied, or distributed without your permission.
That's not why it breaks. It breaks because it removes the objects. I _want_ foo.bar to be replaced by a.b, but no compiler I've found will do that. The issue is that it's an object that heavily references itself. obj1.func = function(){obj1.func2(); obj1.func3(); } I'm not sure exactly how the advanced compiler works, but I can assure you it is bugged in that compiled code no longer works. The general error I have is that it removes the object and only leaves the functions/methods that execute immediately, ignoring the fact that many execute with timeouts or post-page-load. It doesn't leave all of the functionality. It strips things that it thinks won't ever be called, and it is incorrect in deciding what won't be called.
&gt; I don't, and that's all that matters. Oh? Are your opinions all that matter? Do you not need to make a point? &gt; Feel free to not reply anymore. I do feel so free. I also feel free to reply, and do, to further reinforce my point. By no definition of the word "steal" is the action you refer to covered. It is not stealing. You could refer to an infringement taking place, but to use the word "steal" is nothing short of mistake.
Oh, thanks. I've seen those closures before but didn't know what they were called or what they did. Actually I think I remember reading about them in a JS book, but it didn't stick I guess. Also, great tool, that link. Thanks for that too!
looks like a good start. What I'd really like to see is how this would work in coffeescript - it's already got comprehensions and not as far off from original javascript as clojurescript so it looks like a good platform for functional programming in javascript.
I've had an entire front-end web app that I worked a year on ripped off by competitors, it isn't fun when that happens. I started obfuscating my code after that incident many years ago. There are very valid reasons to obfuscate javascript code, which is a business concern. A lot of the thinking about keeping javascript sourcecode 'open' are also valid but not when money and employment is involved. Javascript grew from a hobby language into 'senior javascript architect' positions, but the 'keep javascript open' mentality hasn't gone away even though the playing field has significantly changed in the last 10 years. No language can really be obfuscated to the point that reverse engineering is impossible, but do I wish javascript could be more obfuscated, for the purposes where there is a need to do it. 
No, I haven't read it. There are errors when I run the code. I mean, compressed (Closure Compiler Simple), it is 32kb. I'm not surprised something goes wrong. Changing some.things to some["things"] has helped a bit - namely getting jQuery references to work; though I dread having to go back through the code and replace many references to objects with ["this"], but if it works. At current, the error doesn't have anything to do with ["this"], though so I don't know where to go from there.
hm why the downvote..?
Nice. It's obvious that the code from me will be slower in every browser because of the RegExp. But it's just a very short RegExp, so it's nothing to worry about if the ops/s are alright. Simplicity &gt; Micro-Optimization.
I agree, I just thought it was worth taking a look at.
I also think its worth noting how the gap in speed closes quite a bit when working with longer strings.
Thank you all. this is very helpful
&gt; I just thought it was worth taking a look at. It is. :) For most cases this doesn't matter, but if you want to split a really really long string using a very performant function is important.
Is that from the Arcade Fire music video from a few years ago?
This is good, but "Some string".match(/[\s\S]{1,3}/g); will include newline characters (\r, \n, and their unicode equivelants) also, which the decimal in JS regexes does not match. edit: you could also use a RegExp object with a compiled string regex to concatenate in a dynamic length, like so: 'stringalingdang'.match(RegExp('[\\s\\S]{1,' + splitLength + '}', 'g')) where the variable "splitLength" would be the length you want to split by.
The love I have for you shows no bounds. Have my babies, you are beautiful!
this is a penny auction site and i will give you some bids to you.
See: [Boids](http://www.red3d.com/cwr/boids/)
Heh in /r/web_design the top link right now is an [educational site](http://yadonchow.com/topics/boids) that just introduced me to boids, I came here to see if I could find any examples of javascript implementations and this is the top link. Funny how that works out.
It took quite a while, but here you go :) https://github.com/leonidas/transparency/wiki/Defining-template-engine-performance
No, you need to organize your data a bit differently, something like Players = [ {name: "ProHaxxor", score: "99999", level: "79"}, {name: "n00bie", score: "3", level: "1"} ] 
nice, but too many global variables
Regex seems like overkill for something so simple.
That's a typical misconception for beginners to have. I thought like this when I was just starting out and I'm sure many have. There are three things you must understand: 1. Everything you write is copyrighted. Unless you are limited by a license of software you are building on (e.g. GPL and AGPL force you into the respective license), the default license for your code is "All rights reserved". If someone takes your code and re-publishes (i.e. uses it in their own code) it without your permission, they are violating the law and you can sue them for money. 2. If someone is willing to risk being sued for money by using your code without your permission, they are a) too unimportant to worry about (e.g. beginners with limited exposure, script kiddies, etc) or b) fully aware of what they are doing and would not have a problem breaking whatever copy protection scheme you can think of to abuse your code anyway. 3. Copy protection does not work. We've all seen various copy protection schemes throughout the past decades and none of them worked. Even the ones that still exist today are inherently broken. It's not simply a hard problem, it's a problem that can not be solved because of the way the universe works. Copyright infringement is a social problem and you can't solve social problems with technology (if you *can*, they *aren't* social problems to begin with or you only think you can because you aren't aware of the underlying social issues). Minification is useful. You use minifiers to minimize the file size of your scripts. This is what the closure compiler does (amongst other things). Obfuscation is a side-effect, but that too can be circumvented. If you look at the historical PC game modding scene, most games did not provide any modding capabilities out of the box. What these people did was not simply working with obfuscated code, but working with code that was compiled into machine-readable bytecode, often with several layers of obfuscation running on top. They didn't simply disable built-in copyright protection like the warez scene, they actually went and modifed the software to do things it was never intended to do. The more you learn about how software works, the more you see how pointless it is to do what you are trying to do, especially at the scale you are likely working at. If you don't want people messing with your code, don't publish it. If there is precious business logic you don't want other people to take advantage of, keep it on the server, not in your client-side scripts. Google doesn't implement their search ranking algorithm on the client-side (though this also has to do with what kind of resources they have available on the server as compared to the client). If you want to keep your code valuable, you have to maintain it. Either you sell it for $$$ and then don't have to touch it ever again; or you take it and continually improve it to maintain its value. Either way, you never have to worry about anyone stealing your work. Also, keep in mind, that by the law of averages, there's an at least 50% chance your code simply sucks. If you are still learning (which you should be), the code you write today will be worse than the code you will write in the future. Other people can copy the code you have written, but they can't copy the code you haven't written yet. Your primary capital is not the code you have written (which you should sell or maintain), but your capacity of writing good code. tl;dr: Stop worrying, write more code and sue people who infringe on your copyright.
bluetooth keyboard?
"Some string".match(/[a-zA-Z0-9_]/g); 
Why does everyone who performance tests templating languages leave out Google Closure Templates? It would seem to me that powering some of the worlds most popular sites, it would be a good thing to include.
Thanks for the constructive critique. &gt; In reality, your template will be at most rendered few times I partially disagree, as many web apps today are built more or less as single-page applications and are running for extend periods of time, e.g., Gmail and Facebook. Of course, there's many other options. &gt; the render that takes the most time will be the first one. This tests simply doesn't measure that. That's true. I'll write another benchmarks concentrating for the first time rendering. &gt; in his tests the data barely change (only 1 field on 16 is changing). Not true. Two out of three test cases generate random data for all fields. Only test with static data is http://jsperf.com/dom-vs-innerhtml-based-templating/366 which is not originally made by me. I was asked to include Transparency at some point and didn't pay too much of attention to the test itself. There's also a note in the article: *"Note: This test doesn't use random data. With static data, Transparency employs all the optimizations listed above."* However, point taken. I'll remove the test from the article and leave only the ones with random data, i.e., * http://jsperf.com/transparency-vs-handlebars-finite-list/8 * http://jsperf.com/transparency-vs-handlebars-infinite-list/7 &gt; If fact the problem here is that this test simply looks like something that was made to show that the author template engine is good and better than other (if you look carefully this is hosted on Transparency repository and it somehow comes up on top). I should have wrote the first comment with disclaimer that I'm the author of the article and Transparency. I somehow thought it was obvious :/ The point of the article and the tests is to establish a objective, solid base for comparing client side template engines. After that, of course, I do my best to ensure Transparency performs well. &gt; This is simply not a good test to compare template engine. Could you review the two tests I listed above? Beside of comparing first time rendering times, would you have other ideas how the tests could be improved? 
I updated the test cases with 'first time rendering' measurements. It turns out, with simple templates and random data, query caching doesn't mean that much and the overall performance is close to cached templates. * http://jsperf.com/transparency-vs-handlebars-finite-list/9 * http://jsperf.com/transparency-vs-handlebars-infinite-list/8 Feel free to edit test cases, in case there's room for improvement.
Thanks, it has indeed been awesome to hack and use :] Currently Transparency outperforms Handlebars by a large margin on Webkit based browsers and is a bit slower on Gecko based browsers. https://github.com/leonidas/transparency/wiki/Defining-template-engine-performance
Reading the home page I have no clue what it does other than claiming to be high performance. 
Well, I might not be understanding the preparation code properly, but it seems that you are still using the same DOM template even for the "first-render". I have created an update version of that test with something that uses a new template each time. The result are more realistic. The first load is slow, but for the update it's a lot faster than other. Here it is : http://jsperf.com/transparency-vs-handlebars-finite-list/10 For the addition to the test, it would be nice to have more complex template (ex.: a template that you rip off an open-source project). The only thing with that is that some template engine have more limited feature, so it can be hard to have something that can be translated into a lot of template engine.
I like the sleekness of it, but is it me or does this framework generate a ton of global variables? That makes me nervous.
Yeah, I was thrown into a backbone project and ran into this question. I wound up doing something similar and it's worked well. 
Thanks! I tried to make it minimalistic, but it could definitely do with some polishing.
Works great, there seem to be a couple of bugs where part of some people's trails seem to shift across one "pixel" on occasion, and sometimes where collisions with the other snake's trail aren't detected and you can carry on playing. Other than that, great effort - it'd be interesting to see how well it would work with more than 2 players!
awesome =) thanks! i now have my project. I'm scared lol
I accessed it on my phone.. How do I play? 
Down for me currently :/ 
that's some good traffic numbers you are getting. good job. Like most users I didn't read the body of text and just clicked "play anonymously"
this is ace. *released the source was already released....THIS IS ACE
Why not a simple pub/sub pattern?
You should be able to kill others by boxing them IMO. A draw is lammeeeeeeeeeeeeeee.
Back up now. Pretty awesome
Only 42 global variables will be generate. If the name of function on your JavaScript code is not use $ as prefix, that`s noting nervous. And yet, you can use it working with jQuery. It`s also a fact that using global function is faster than namespaced function about 5%-8%.
My two favorite games combined. Awesome. Throw in a little Space Wars and I'm set. For Life.
Basically using the mediator pattern: http://addyosmani.com/largescalejavascript/#mediatorpattern For PlastronJS I included a mediator that could be used (with a bit of extra functionality so you can test if things are being listened to). The code is written for closure-library but only uses array and object functions so you could easily fix it to work with whatever you use: https://github.com/rhysbrettbowen/PlastronJS/blob/master/mediator.js
This game must be awesome. The login page has more than 700KB of JS! Does not work for me (tested on Chrome and Firefox). I don't see any error message in the console.
HUZZAR! I am a dumb, I had Xcode opening debugging a iOS app :/
It IS possible with javascript, you just need a 3rd party API that collects data like Loggly, they offer the ability to pass a JSON object to them via http therefore all you need to do is use AJAX (I would suggest using jQuery as it's easier this way) to pass the data on. (loggly api docs: http://wiki.loggly.com/apidocumention)
you can file "learning MooTools" under "complete waste of time"
What about [Client Storage](http://www.html5rocks.com/en/tutorials/offline/storage/)?
I loved screwing around with the DX boids demo back in the day. MrDoob proves again publishing often and often first (even adaptations like this) gets the win 
The advantage of subscribing and publishing events is loose coupling. And two way communication. Edit: In reality, we are talking about the same thing. We are just talking about it at different levels of scope.
Here's my take on it: http://pastebin.com/7fQctex1 I used JSLint and changed some spacing, missing semicolons, hopefully it's more readable now. I changed the incremental_step function a tiny bit, assigning next_step to next in the else block, (to me) it makes a little more sense. I also used Ben Cherry's [example](http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth) on loose augmentation, private state, and sub-modules. This way you won't redefine everything if it's already there and you make sure the $ function is related to the jQuery function.
the discussion board is a great place to start. It might seem daunting when you have to go back through your code but it pays off big time. Once you're on the right path you'll get smaller more performant code. JQuery doesn't really work with the compiler (though I've been told there is a fork in progress). I'd recommend using the closure-library, and if you really like the JQuery syntax you can use https://github.com/rhysbrettbowen/G-closure which mimics the JQuery interface for most DOM interaction. Perhaps you can put up the file/code that is giving you errors or at least an example on the discussion board and I'm sure you'll get help
it is 40 lines on top of the libraries. and yes it is only 40 thanks to the libraries. The point is that the dev will only type 40lines
Where is this 'namespace.js' he speaketh of...?
it's included with Backbone Boilerplate. I should have specified more clearly that I'm using the boilerplate.
No reference required, you publish to a global event feed. So all views and publish events and subscribe to them. It s all done with a string of the vent namespace.
something I just woke up and had to give a go. I really wish that JQuery was itself functional and you could use the JQuery object as an interface to the methods rather than just have all the methods defined on the JQuery object.
but ... why? Experimentation? It just reads so bass-ackwards. I don't want to rain on your parade, but I don't understand the reason behind jumping through all these hoops. Maybe I should read it again when I'm not tired.
yeah, just playing around. But it's also a way of abstracting jquery, so if you want to change libraries later it would make it easier. Also it makes it easier to construct chains of actions to apply to a JQuery object. It's more of a mental exercise for now but there could be some real advantages.
Why's that? 
He has kept it out of the global scope, the only object added to the global scope in his code is the tcard object. 
Also using a number as the step you could list your step functions inside an array and use the current step as the index to call that function. Just a thought. 
Because at this point, 'this' is the current XML node I'm looping through. What I want logged is the id of the current instance of my List() class. I want to be able to use it to target the proper &lt;ul&gt; tag since there could be dozens...
Or just pass in `_self`, I don't personally see the need for the global at all.
You're right :)
I thought about doing that, but I thought there had to be a better way. I come from AS3 and using 'this' is so much easier there, and I wouldn't need to pass it in parameters.I got used to it and find this approach "cleaner". Would that really be the best way to do it?
 --------------- P R O C E S S --------------- Java Threads: ( =&gt; current thread ) 0x000000000ebfa000 JavaThread "Connection #310 write thread" [_thread_blocked, id=748, stack(0x0000000011000000,0x0000000011100000)] 0x000000000ebfc800 JavaThread "Connection #310 read thread" [_thread_in_native, id=1812, stack(0x0000000010ec0000,0x0000000010fc0000)] 0x000000000ebfb800 JavaThread "Connection #308 write thread" [_thread_blocked, id=3884, stack(0x0000000010da0000,0x0000000010ea0000)] 0x000000000ec01000 JavaThread "Connection #308 read thread" [_thread_in_native, id=3920, stack(0x0000000011340000,0x0000000011440000)] 0x000000000ebf7800 JavaThread "File IO Thread" [_thread_blocked, id=6672, stack(0x0000000010670000,0x0000000010770000)] 0x000000000ebf7000 JavaThread "com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread-#2" daemon [_thread_blocked, id=2872, stack(0x000000000f450000,0x000000000f550000)] 0x000000000e974800 JavaThread "com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread-#1" daemon [_thread_blocked, id=6644, stack(0x0000000010c30000,0x0000000010d30000)] 0x000000000d38e000 JavaThread "com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread-#0" daemon [_thread_blocked, id=3376, stack(0x0000000010ac0000,0x0000000010bc0000)] 0x000000000f9b0800 JavaThread "Timer-0" daemon [_thread_blocked, id=1128, stack(0x0000000010880000,0x0000000010980000)] 0x000000000e54b800 JavaThread "Thread-7" [_thread_blocked, id=7000, stack(0x000000000e2b0000,0x000000000e3b0000)] 0x000000000ced3800 JavaThread "Thread-5" [_thread_blocked, id=6608, stack(0x000000000dfc0000,0x000000000e0c0000)] 0x000000000ce96800 JavaThread "Listen thread" [_thread_in_native, id=5232, stack(0x000000000ddc0000,0x000000000dec0000)] 0x000000000be99000 JavaThread "Thread-4" daemon [_thread_in_native, id=1576, stack(0x000000000d980000,0x000000000da80000)] 0x000000000217b000 JavaThread "DestroyJavaVM" [_thread_blocked, id=4172, stack(0x0000000002450000,0x0000000002550000)] 0x000000000cdf2800 JavaThread "Server thread" [_thread_blocked, id=1364, stack(0x000000000d830000,0x000000000d930000)] 0x000000000bdaa000 JavaThread "Thread-1" daemon [_thread_blocked, id=6488, stack(0x000000000d660000,0x000000000d760000)] 0x000000000bc3e800 JavaThread "Service Thread" daemon [_thread_blocked, id=2492, stack(0x000000000cb80000,0x000000000cc80000)] 0x000000000bc3d800 JavaThread "C2 CompilerThread1" daemon [_thread_blocked, id=3056, stack(0x000000000ca70000,0x000000000cb70000)] 0x000000000bc35800 JavaThread "C2 CompilerThread0" daemon [_thread_blocked, id=6716, stack(0x000000000c930000,0x000000000ca30000)] 0x000000000bc34800 JavaThread "Attach Listener" daemon [_thread_blocked, id=7156, stack(0x000000000c6b0000,0x000000000c7b0000)] 0x000000000bc30000 JavaThread "Signal Dispatcher" daemon [_thread_blocked, id=4200, stack(0x000000000c560000,0x000000000c660000)] 0x000000000bc2f000 JavaThread "Surrogate Locker Thread (Concurrent GC)" daemon [_thread_blocked, id=2160, stack(0x000000000c3e0000,0x000000000c4e0000)] 0x000000000bbae800 JavaThread "Finalizer" daemon [_thread_blocked, id=4820, stack(0x000000000c210000,0x000000000c310000)] 0x000000000bba6800 JavaThread "Reference Handler" daemon [_thread_blocked, id=5892, stack(0x000000000c0a0000,0x000000000c1a0000)] Other Threads: 0x000000000bb9e000 VMThread [stack: 0x000000000bf00000,0x000000000c000000] [id=4164] 0x000000000bc5a000 WatcherThread [stack: 0x000000000cca0000,0x000000000cda0000] [id=6416] =&gt;0x000000000211d000 (exited) ConcurrentGCThread [stack: 0x000000000b9a0000,0x000000000baa0000] [id=3168] VM state:not at safepoint (normal execution) VM Mutex/Monitor currently owned by a thread: None Heap par new generation total 125120K, used 69723K [0x000000077ae00000, 0x00000007835c0000, 0x000000079a130000) eden space 111232K, 50% used [0x000000077ae00000, 0x000000077e486ea8, 0x0000000781aa0000) from space 13888K, 100% used [0x0000000781aa0000, 0x0000000782830000, 0x0000000782830000) to space 13888K, 0% used [0x0000000782830000, 0x0000000782830000, 0x00000007835c0000) concurrent mark-sweep generation total 542012K, used 290302K [0x000000079a130000, 0x00000007bb27f000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 43636K, used 26159K [0x00000007fae00000, 0x00000007fd89d000, 0x0000000800000000) Code Cache [0x0000000002550000, 0x0000000002e20000, 0x0000000005550000) total_blobs=2883 nmethods=2451 adapters=381 free_code_cache=40299Kb largest_free_block=41132928 Dynamic libraries: 0x000000013f2b0000 - 0x000000013f2e3000 C:\Program Files\Java\jre7\bin\java.exe 0x00000000772e0000 - 0x0000000077489000 C:\Windows\SYSTEM32\ntdll.dll 0x00000000770c0000 - 0x00000000771df000 C:\Windows\system32\kernel32.dll 0x000007fefd2e0000 - 0x000007fefd34c000 C:\Windows\system32\KERNELBASE.dll 0x000007fefe160000 - 0x000007fefe23b000 C:\Windows\system32\ADVAPI32.dll 0x000007fefdf30000 - 0x000007fefdfcf000 C:\Windows\system32\msvcrt.dll 0x000007fefdf10000 - 0x000007fefdf2f000 C:\Windows\SYSTEM32\sechost.dll 0x000007feff290000 - 0x000007feff3bd000 C:\Windows\system32\RPCRT4.dll 0x00000000771e0000 - 0x00000000772da000 C:\Windows\system32\USER32.dll 0x000007feff220000 - 0x000007feff287000 C:\Windows\system32\GDI32.dll 0x000007fefd600000 - 0x000007fefd60e000 C:\Windows\system32\LPK.dll 0x000007fefdc30000 - 0x000007fefdcf9000 C:\Windows\system32\USP10.dll 0x000007fefba50000 - 0x000007fefbc44000 C:\Windows\WinSxS\amd64_microsoft.windows.common-controls_6595b64144ccf1df_6.0.7601.17514_none_fa396087175ac9ac\COMCTL32.dll 0x000007fefeff0000 - 0x000007feff061000 C:\Windows\system32\SHLWAPI.dll 0x000007fefdc00000 - 0x000007fefdc2e000 C:\Windows\system32\IMM32.DLL 0x000007feff110000 - 0x000007feff219000 C:\Windows\system32\MSCTF.dll 0x000000005f570000 - 0x000000005f641000 C:\Program Files\Java\jre7\bin\msvcr100.dll 0x000000005dbb0000 - 0x000000005e28a000 C:\Program Files\Java\jre7\bin\server\jvm.dll 0x000007fefada0000 - 0x000007fefada9000 C:\Windows\system32\WSOCK32.dll 0x000007feff5a0000 - 0x000007feff5ed000 C:\Windows\system32\WS2_32.dll 0x000007fefe070000 - 0x000007fefe078000 C:\Windows\system32\NSI.dll 0x000007fefb440000 - 0x000007fefb47b000 C:\Windows\system32\WINMM.dll 0x00000000774b0000 - 0x00000000774b7000 C:\Windows\system32\PSAPI.DLL 0x0000000073f50000 - 0x0000000073f5f000 C:\Program Files\Java\jre7\bin\verify.dll 0x000000006bbe0000 - 0x000000006bc08000 C:\Program Files\Java\jre7\bin\java.dll 0x0000000073e70000 - 0x0000000073e85000 C:\Program Files\Java\jre7\bin\zip.dll 0x000007fefb140000 - 0x000007fefb149000 C:\Users\Shapiro Home\AppData\Local\Temp\jansi-64-git-Bukkit-1.2.5-R3.0-b2203jnks.dll 0x000000006bb30000 - 0x000000006bbd3000 C:\Windows\WinSxS\amd64_microsoft.vc90.crt_1fc8b3b9a1e18e3b_9.0.30729.6161_none_08e61857a83bc251\MSVCR90.dll 0x0000000073df0000 - 0x0000000073e09000 C:\Program Files\Java\jre7\bin\net.dll 0x000007fefca60000 - 0x000007fefcab5000 C:\Windows\system32\mswsock.dll 0x000007fefca50000 - 0x000007fefca57000 C:\Windows\System32\wship6.dll 0x0000000071350000 - 0x0000000071361000 C:\Program Files\Java\jre7\bin\nio.dll 0x000007fefc440000 - 0x000007fefc447000 C:\Windows\System32\wshtcpip.dll 0x000007fefc8e0000 - 0x000007fefc93b000 C:\Windows\system32\DNSAPI.dll 0x0000000071d20000 - 0x0000000071d46000 C:\Program Files\Bonjour\mdnsNSP.dll 0x000007fefadc0000 - 0x000007fefade7000 C:\Windows\system32\Iphlpapi.DLL 0x000007fefadb0000 - 0x000007fefadbb000 C:\Windows\system32\WINNSI.DLL 0x000007fef96e0000 - 0x000007fef96e8000 C:\Windows\system32\rasadhlp.dll 0x000007fef9ed0000 - 0x000007fef9f23000 C:\Windows\System32\fwpuclnt.dll 0x000007fefcd40000 - 0x000007fefcd57000 C:\Windows\system32\CRYPTSP.dll 0x000007fefc7c0000 - 0x000007fefc807000 C:\Windows\system32\rsaenh.dll 0x000007fefc580000 - 0x000007fefc59e000 C:\Windows\system32\USERENV.dll 0x000007fefd230000 - 0x000007fefd23f000 C:\Windows\system32\profapi.dll 0x000007fefd120000 - 0x000007fefd12f000 C:\Windows\system32\CRYPTBASE.dll 0x000007fefb4d0000 - 0x000007fefb4e5000 C:\Windows\system32\NLAapi.dll 0x000007fef46c0000 - 0x000007fef46d5000 C:\Windows\system32\napinsp.dll 0x000007fef46a0000 - 0x000007fef46b9000 C:\Windows\system32\pnrpnsp.dll 0x000007fef4690000 - 0x000007fef469b000 C:\Windows\System32\winrnr.dll 0x0000000073f60000 - 0x0000000073f6b000 C:\Program Files\Java\jre7\bin\management.dll 0x0000000069340000 - 0x00000000693c5000 C:\Users\Shapiro Home\AppData\Local\Temp\sqlite-3.7.2-sqlitejdbc.dll VM Arguments: jvm_args: -Xincgc -Xmx2G java_command: craftbukkit-1.2.5-R3.0.jar Launcher Type: SUN_STANDARD Environment Variables: CLASSPATH=.;C:\Program Files (x86)\Java\jre6\lib\ext\QTJava.zip PATH=C:\WinAVR\bin;C:\WinAVR\utils\bin;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Perl64\site\bin;C:\Perl64\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Java\jre6\bin;C:\strawberry\c\bin;C:\strawberry\perl\site\bin;C:\strawberry\perl\bin;C:\Program Files (x86)\Sudowin\Clients\Console;C:\Program Files (x86)\QuickTime\QTSystem\;C:\Program Files (x86)\Google\google_appengine\ USERNAME=Shapiro Home OS=Windows_NT PROCESSOR_IDENTIFIER=AMD64 Family 16 Model 10 Stepping 0, AuthenticAMD --------------- S Y S T E M --------------- OS: Windows 7 , 64 bit Build 7601 Service Pack 1 CPU:total 6 (6 cores per cpu, 1 threads per core) family 16 model 10 stepping 0, cmov, cx8, fxsr, mmx, sse, sse2, sse3, popcnt, mmxext, 3dnowpref, lzcnt, sse4a Memory: 4k page, physical 8386104k(3763040k free), swap 16770356k(12549580k free) vm_info: Java HotSpot(TM) 64-Bit Server VM (22.0-b08) for windows-amd64 JRE (1.7.0_02-ea-b11), built on Oct 25 2011 23:06:49 by "java_re" with unknown MS VC++:1600 time: Sun May 27 12:12:39 2012 elapsed time: 66194 seconds 
God damn I'm a retard. I didn't realize it wasn't the same =/. OOP with Javascript is very confusing to me... Thanks a lot, that solved it and it's looking clean and all. Thanks again.
Does not do well on Android browser.
Well, not to seem too self-promoting, but I wrote an article that goes fairly deep into OOP in JavaScript that might be of help. [http://blog.jbrumond.me/posts/21](http://blog.jbrumond.me/posts/21)
Java and JavaScript are different languages. Maybe submit in /r/java ? Now, looking at the exception name, you're probably accessing memory that is not yours.
I updated the test cases. They should be accurate and quite a bit more readable now. The results seems to be more realistic, too. http://jsperf.com/transparency-vs-handlebars-infinite-list/9 http://jsperf.com/transparency-vs-handlebars-finite-list/11 Cached templates have reasonable, although not amazing, performance. First-render is indeed slow, as already demonstrated by you. I have some ideas how to improve it, although it might take a few days to finish. Adding a more complex template from a real-world project is a good idea - Let's see if I can find something useful.
Feel free to add it :)
Yeah, I'm not sure exactly how extensions are run behind the scenes, but background.html is where you want to store data in order for it persist between tabs and opening/closing the browser. If you go into the Extensions settings and enable developer mode, you can see the background.html pages for all of your installed extensions and see what they store.
Thanks for the replies i will mess around with it and let you know how it works out. Would you recommend writing a new listener in the background.html or can I just put a second if statement in the listener?
I just chain if/else statements across one listener. [Reddit Enhancement Suite](https://github.com/honestbleeps/Reddit-Enhancement-Suite/blob/master/Chrome/background.html) uses a switch statement which could work as well.
This looks pretty nifty. I am fairly green to developing and I find it interesting how cumbersome it is to just store a simple string... and pass it. 
Coming from a Flex/Robotlegs background myself, I found that Marionette was a great starting point. However I missed the ability to map application events to single purpose commands. I created an extension called Geppetto which does exactly that! Check it out here: http://modeln.github.com/backbone.geppetto Feedback is welcome!
What do you mean by "vary between another picture" ? 
First of all, you need to get the XML data. One of the best ways to do this is an XMLHttpRequest. Assumed that you don't want to cater for browsers earlier than IE7 (if you wanted to, there's an ActiveX-Control for IE6), you can initialize it with: var req = new XMLHttpRequest(); req.open('GET', url_to_xml, true); req.onstatechange = function(){ ... } req.send(null); The url_to_xml needs to be replaced with the actual URL of the xml. There's a tiny catch about it, however: the Same-Origin-Policy (meant to make these requests more secure) requires the URL to have the same server origin (location.host) as the page from which it is loaded. Now to the function which I left intentionally blank (hey, you want to learn something, do you?): there you'll have to perform 2 things - 1. checking if req.status is "200" and req.readyState is 4 and 2. if so, use req.responseXML as if it was the "window.document" of an XML document, so you can use xquery selects on it.
From this answer, I deduct that you are now aware that "new Image(x,y)" doesn't take image urls as one of its parameters.
All the info and a bit of learning thrown in as well! The best type of answer!
Nice one ;)
Bound to be some jQuery haters, but is by far the easiest... $.ajax({ url: "note.xml", dataType: "xml", success: function(xml) { var from = $(xml).find("from").text(); alert(from); } }); (works cross browser, same-origin-policy applies)
Screenshots? I've given it a go on iPad/iPhone, seemed to work reasonably well (although frankly, I'm averse to rebuilding browser controls at all, whether on desktop or otherwise, unfortunately more often than not the client demands it after been having a Photoshop mock up...)
Same origin work around: ajax request a php file and curl it.
xml is a data format. $ is the jquery object in javascript. there are galaxies in between.
While it may be easiest, it also involves a payload of jQuery (e.g. &gt; 30kb of gzipped, minified code). Though I wouldn't want to discourage its use when the requirement is to get a working solution fast, you learn much more about JavaScript if you go the way without the ease of a toolkit like jQuery. That being said, I learned the most about JavaScript when I started to write my own toolkit.
Because considering the kind of product we have to do, having XML files dictating how we display our module and what each component does is a big plus since in the end we'll be able to output each module on a variety of platforms. We haven't found any product that does the job for us, so we're making our own tool.
HTML is XML?
Looks lovely, just one thing that greatly bothers me: white text on yellow background is a BIG FUCKING NO NO. Another thing I notice: &gt; Designed to change the way that you write JavaScript with the goal: a 8-12k library that handles most basic drudge work with a nice API so you can concentrate on getting stuff done. And the download file (minified) is 13k. Yea, it might be less than that with gzip, but common, you state that your goal is to be less than a certain number, at least make sure that number looks good with other data present on the site.
13kb is not bad at all.
I wanted to make recursive solution. This is using substr but i'm sure you could fill in whatever else; I'm not very good at recursion so I think this is very ugly. Any advice on how to make it simpler would be great. http://jsfiddle.net/MGcdW/1/ 
I don't have screen caps, but I can describe what went wrong. 1. The drop down does not scroll. 2. It does not account for drag events, so if you start dragging on a control and move away form it (as if you are scrolling the page) the control will trigger. I don't know if you can do this, but if you could keep the style changes but trigger the native control, that would most likely work best for mobile. Select-boxes on small screens need to use the native control. I am with you, rebuilding browser controls breaks UX. You need to get your designer on board to make sure they don't make such a rookie mistake.
This would be very usefull as a ender module, that way it could be even smaller in size.
I'm definitely going to use this. As long as animations are unnecessary, this looks like it will take care of mostly everything. and if you do need animation you could probably roll in Greensock on an as-needed basis.
Downvoted - not enough buzz words. 
As a side note for anyone reading this... the "tabs are dead" part really bothered me, as a professional in the field. The author passes his opinion as if it's the only valid opinion standing. This is wrong for two reasons: 1. He's mixed opinion with fact... this subject is purely one of opinion. 2. Most places that have standardized, have standardized on 4 spaces, so his suggested "standard" isn't even the most popular. JSLint takes a similar hardline opinion on spaces, and will complain if it isn't exactly 4, by default, but does give you the ability to turn that off.
From the perspective of JavaScript HTML is XML. All JavaScript knows is that it has to use this API, the DOM, to access the tree structure of HTML/XML. The only difference between HTML DOM and XML DOM is that HTML DOM provides some extra properties to shorthand access to known vocabulary in HTML.
I was thinking about doing this the other day but I was concerned I wasn't doing things the Backbone way. Trying to make sure I'm doing the whole 'when in Rome' thing with JavaScript. I'll definitely check this out though because I loves me some Commands
I like coffeescript, I use it myself, but for a library that is supposed to be as small as possible, I think it may be better to go with javascript.
Now that jQuery is much more common, your way of learning is not as unusual as you might think. In any case it yields faster results, which is less frustrating. Keep it on!
Is the same perfomance --&gt;&gt; QuerySelector (engine)
They're working on it: http://wiki.ecmascript.org/doku.php?id=harmony:modules But I don't think any browsers are anywhere close to supporting it.
http://www.2ality.com/2012/01/js-inheritance-by-example.html this is the best quote I've seen about it. "Methods shouldn’t be in each instance, they should be shared between instances, **to save memory**. You can use a prototype for that purpose. "
The previous version was in Pure JavaScript ... and now the size is the same... thanks to ClosureCompiler (by Google).
The argument against the CommonJS ``require`` syntax (which Node.js uses) and [node-browserify](https://github.com/substack/node-browserify) to make it palatable for the browser until the Harmony module syntax is finished and in use is laughable. The *only* time you'd want to use RequireJS's is if you need to load different modules depending on the dynamic state of your web app -- the Javascript equivalent of DLLs. To get that, you have to pay with a bulkier syntax than ``var module = require('module');`` (CommonJS used by Node.js) or ``module Module = 'Module.js';`` (one of the proposed ECMAScript Harmony syntaxes). You also have to deal with the fact that the browser has to: 1. Bootstrap the RequireJS library into your browser via an HTTP request-response loop. (Around a hundred milliseconds with a decent home connection.) 1. Grab your "root" Javascript source via an HTTP request-response loop. (Roughly another hundred milliseconds.) 2. Parse the "root" Javascript source and begin executing it. (Tens of milliseconds.) 3. Run into a ``require(moduleArray, callbackFunc)`` statement and perform an asynchronous request-response for each listed library (100+ milliseconds, possibly 2-300 milliseconds or more depending on the number of allowed connections to a single server at a time). 4. Parse each of these Javascript modules and begin executing them (tens of milliseconds), with similar delays for each module *they* require, if any. In the mean-time, your web app load time has shot up to almost a second assuming your back-end is well written (but I wouldn't trust someone who chooses RequireJS to have a good back-end to serve this data up quickly), and more otherwise. **AND** unlike a second-long delay in loading a new HTML page, the browser isn't keeping the previous page visible until the load is completed. The browser *thinks* the HTML and CSS you want to show have already loaded, so you have a whole second of Javascript code being loaded after the fact while the user is staring at a useless shell of your web app that may not even be styled correctly. And what do you gain? The ability to load a Javascript library on-demand, which you probably *won't ever do*, because the requirements for your web app have been defined by *you* and *you* serve all of the needed Javascript libraries on pageload. The CommonJS ``require`` syntax is saner for 99% of the usage out there, and ``node-browserify`` means you don't have to have any bootstrap code loaded on the browser nor any second-long useless-page-rendered view presented to the user, because the browser is loading just a single Javascript file from the ``&lt;head&gt;`` (so the browser is also blocking rendering until the resources are loaded). You've probably also cached the ``node-browserify`` output rather than reconstruct it for every user accessing your website, and even if you didn't, ``node-browserify`` is: 1. Spending sub-10 milliseconds pulling each relevant module from RAM. 2. Can use simple regular expression matching to determine all of the ``require``d modules in any file, and can generate the resulting Javascript file with simple string manipulation, no AST generation and parse steps necessary, so building the output Javascript for the browser takes less CPU time. **tl/dr:** RequireJS solves a problem no one has, poorly. [node-browserify](https://github.com/substack/node-browserify) is simply the better solution.
Prototype inheritance can be used to extend classes. For example we can extend the standard String class like: String.prototype.capitalize = function() {return this.charAt(0).toUpperCase() + this.slice(1);} Then use it on any string: 'nananana'.capitalize() 'batman!'.capitalize()
The tool for this is [XSL\(T\)](http://www.w3schools.com/xsl/), although support may not be ideal in all browsers... might not work on mobile browsers.
trauma seems about right
Really like it, but it appears possible to cheat...
I was more impressed by the fake Windows UI than the plugin itself.
Prototypes are a little faster on most engines. And they are the most common pattern for implementing types, with improved support likely to be in ECMAScript.next. Apart from that and the slightly increased memory footprint, adding methods to instances is largely equivalent to using the prototype. Yet another, even more unorthodox option is to use object exemplars (or “prototypes as classes”): http://www.2ality.com/2011/06/prototypes-as-classes.html
on another note, what does this have to do with what the rails community thinks? i was unaware they are the influencing compass for javascript libraries. 
Sure, but then you're not benefiting from async loading, so your use of node-browserify is completely moot. And you never even cared to address the use case I spent most of the post outlining.
The performence is worse in most parts compared to jQuery. The only place it's better is file size and non-desktop support. You use querySelectorAll for all selectors. This performs horrible on single selectors. Look at the performance tests we did with jqMobi, jQuery and Zepto...since you have a common base with Zepto, you'll be able to see where we diverted and sped up the speed.
&gt; I like requirejs for the fact that allows me to keep everything in modules without leaking stuff into the global scope. Because I'm always leaking into the global scope. That's my main problem with JS. Not.
This is an incredibly overlooked property of prototype.
Awful title. Frustrating to have an introductory article about a topic, but have no understanding of what that topic is simply from the title. ... I'm only frustrated because it's useful information to know, and I'm glad I ran across the article, but I almost didn't bother because what the hell is a CORS and why should I care? At least if the title was "How to Cross-Origin Resource Share", I'd immediately have a clue of what the topic is about, being familiar with Cross-Origin related topics and being one of the developers the article says it's targeting (developers who are familiar with JSON-P and Proxies, but not CORS). Bad title! **EDIT**: Aside from the that, the article is definitely useful, though I question the statement that it's important for JS'ers to know what's going on "under the hood" in this case. My argument is that it doesn't make sense to test developers on API knowledge. I haven't had to work with the native DOM API much because of jQuery, so I only know a few basic ways to query for elements and not all of them are cross browser. Honestly, I think that's perfectly ok. If I can learn "How to CORS" in 10 minutes by reading an article on your site, then why is it worth taking the time to ask a candidate about it? I think there are more important questions such as, 1. how maintainable is the code the developer writes? 2. is it secure? 3. is it fast? 4. do they understand the core language? 5. how do they debug a problem? 6. do they write unit tests? 7. what about documentation? 8. can they solve problems? And so on. Knowledge of a particular API is the last thing I would care about when hiring a developer.
Could you push your current code on github? When you say "if the options page is present", do you mean a tab has to have it open?
My suggestion is JetBrains WebStorm. I havent used anything that is even close to as good with JavaScript as WebStorm and PhpStorm is.
Cool man, thanks alot!
I committed my current code. It is passing values but now it's not actually doing anything when the context menu is clicked, but it does register the click.
Thanks for taking the time to put all that together. I put it into jsPerf to see how various browsers stack up. It would be great if people would run this in whichever browsers they have on their machine. I'd be most interested to see results from IE 7 or 8. [Test](http://jsperf.com/various-types-of-inheritance-in-javascript)
What do you mean? I'm writing applications for pretty huge sites that aren't under my control. To prevent any sort of problems I prefer to have everything scoped. I could do that without requirejs of course, but it gives me a nice way of structuring my code. Plus, the text plugin is awesome.
link? And I want to see it online for at least 48h. Then I own you a beer.
Yep. I'll run through it tomorrow at work with IE 7, 8, and 9.
Must be your window size, it looks fine when I load it.
Wholeheartedly agree. It's right to have an understanding of HTTP response codes, headers for content negotiation and so on. re: payload - jQuery is CDN'd on Google, Microsoft, etc; so its highly probably it's in your cache. 
Well, no framework actually parses the string anyway. The potential problem would be using innerHTML to parse XML string or DOMParser for HTML string.
I think a good way to equal it out is bigger snake wins if one snake is boxed in, otherwise people will just try to attack eachother without trying for score.
If you mean prototypal inheritance, yes. No classical inheritance, though, unless you add some yourself.
There are a lot of libraries to handle this, I have yet to encounter a task that's not fulfilled by prototypal inheritance.
 RequireJS can [use node/npm modules too](http://requirejs.org/docs/node.html#2) Also I don't find the AMD syntax *that* cumbersome. You just wrap code definitions in `define` and `require` them in your main application. If you want to use the CommonJS `var x = require('x')` syntax, it's pretty easy using the adapter (r.js) : define( require , function(require) { var x = require('x'); }); Cleaner syntax is in the eye of the beholder, I don't really have a preference for either. 
Some men just want to watch the world burn.
what if the text contains non-ASCII characters? ;)
Crockfords pattern is one way to use what's available. You'll rarely need overriding - and if you do, it's a good thing to make this explicitly, because it is more obvious to anyone who wants to understand your code.
Where do you get such a number as "98% slower performance"? For once, most modern JS engines already incorporate code reduction or inline optimisation engines, and second, especially the example of the spreadsheet depends on the data format you choose.
I'm a beginner, too, and I've been enjoying Aptana Studio 3. It's free, has syntax highlighting and code-completion. It also has pretty nice error-checking support which helps a lot when starting out. Most importantly, it doesn't get in the way.
Thanks for the source. To say it in the voice of super cool JS instructor: if you want classical inheritance by parasitic approach, you are gonna have a bad time ;-) Another reason to be an advocate for the use of prototypal object orientation in JS.
@jashkenas is talking a bit about the history of javascript development and how frontend engineering roles has changed now that we have arbitrary code on the front end.
I'm tweeting up a storm about what's going on, and will loop back to fill in more information here :)
Not an IDE, but Sublime Text 2 is all you need. 
Combine Submile Text 2 with some of the tips on here: http://opensourcehacker.com/2012/05/11/sublime-text-2-tips-for-python-and-web-developers/ and this is all that I use now (when not on a Mac anyway)
You probably won't need to create 54 million instances per second. But maybe a few thousand and then do something meaningful with them. At least their creation won't take as long :)
I appreciate the advice. However, I am not exaggerating when I say I am truly a beginner in this field- my only experience being what free hours I can muster to play around on Codeacademy. In this particular instance, I needed this script to assist me in my real-person job and didn't have the time or means to figure this out myself. As I get better/more knowledgeable I hope to ask fewer and more specific questions
Yehuda has talked about some cases in Backbone that he thinks are problematic, particularly view hierarchy (e.g. managing nested views) and complex binding for updating properties. He also discussed how Ember uses handlebars and computed properties to automatically manage and minimize template rendering.
I dare say I am probably the only person in the world who liked Clippy. He taught me some good keyboard shortcuts. (“I notice you are switching between worksheets a lot. You can also use Ctrl-PgUp and Ctrl-PgDn to switch quickly between worksheets.”)
I attended this talk, and at the time I wasn't the only one who found it completely useless. Even if he was "right" about Yahoo, who cares?! Why was this relevant to any one of the 1000+ designers and developers in attendance? The only marginally-useful nugget I gleaned from Crockford's appearance was, in the extremely brief Q&amp;A after his keynote, someone asked him what he thought of CoffeeScript, and he said while it's neat/pretty/he likes it, he doesn't think it's ready for primetime and wouldn't use it in production. He didn't explain _why_, of course...
You've cut out a few important pieces of information, such as where `_placeholder` and `callStack` are declared, but it looks like it iterates through every property in `context` that is a function and attaching more functions to `_placeholder` with the same name. The functions attached to `_placeholder` all return `_placeholder`, so it looks like method calls on `_placeholder` are meant to be chained à la jQuery. `callStack` looks like a manually created linked list.
Thank you. I ll try out some of the examples.
Seems like instantiating an object and calling a psuedo method is not namespacing. I find namespacing can be accomplished pretty easily without any additional code. To recreate the example: var fooBarBaz = { Person : { greet : function() { alert('hello'); } } }; fooBarBaz.Person.greet();​ javascript objects are extremely flexible, should use them at all costs.
Ok cool, i'll move some stuff around and let you know how it goes.
I completely agree, that's the way I would do it. Does his namespacing utility do anything that your syntax doesn't? Because if so he does a poor job of explaining it.
the n-js library is only 10 lines of code, his example is 7 lines (17 with the lib), your recreation of the example is 7 lines; your example wins.
"If I have developed better software it is by standing on ye sholders of Assholes" - Isaac Newton
What if I want a variable or function private &amp; internal to the "Person" module? I don't think there's a way to write that in your object literal, but with n-js it would be: n('foo.bar.baz', function(s) { s.Person = function () { var my_internal_function = function(x,y) { return x+y; }; this.greet = function () { alert(my_internal_function(10,20)); } }; }); More than namespacing, n-js is a very terse implementation of the module pattern.
I don't know why we were downvoted but I'll get you back in the black, because it's true... I would like to know why Douglas is such a prick too.
Yes, such a brave stance on patent trolls, and one never heard from within the community at all...
Whats wrong with more high profile people adding their voice? Is there some quota that has been filled and now the subject should not be brought up? Maybe i'm just not well versed enough in the community to see the active argument against it. 
 var replacements = [ [/a/g, '4'], [/e/g, '3'], [/i/g, '1'], [/o/g, '0'], [/s/g, '5'], [/t/g, '7'] ]; var queue = [document.body], element, i, l; while (queue.length &gt; 0) { element = queue.pop(); for (i=0, l=element.childNodes.length; i&lt;l; i++){ queue.push(element.childNodes[i]); } if (element.nodeType === Node.TEXT_NODE){ for (i=0, l=replacements.length; i&lt;l; i++){ element.textContent = element.textContent.replace(replacements[i][0], replacements[i][1]); } } } 
Agreed, if your looking for a 'private' function just a JS object isn't quite going to get you there. There are many JS design patterns that will. There is a really good book that goes over many of them, including a Constructor pattern: http://addyosmani.com/resources/essentialjsdesignpatterns/book/ Cheers
&gt; Declare and call a anonymous function with the param 'member' (Got the syntax, but why not just have the code that is inside the function with no function at all? [This needs explaining ] This isn't so simple to explain but I will try my best. That "anonymous" function is creating a new brand new scope with a *functionName* variable declared inside of it. That variable is a copy of *member* which is a string. Inside of this anonymous function we create another function, *_placeholder[functionName]*, that is a closure over the scope we just created so it retains the a reference to *functionName* even after the "anonymous" function has finished executing. Up until this point, nothing here really requires the "anonymous" wrapper. But what happens inside the *_placeholder[functionName]* closure is very important. The closure uses the value of *functionName* to create an object. If there was no anonymous function and the value of *member* was used directly inside the closure it would have the wrong value. The reason is that by the time *_placeholder[functionName]* is actually run the value of *member* would most likely have been changed (by the outer *for* loop!) and so the *callStack* would be wrong if/when *_placeholder[functionName]* is eventually called. To show you what is going on, consider a simple example of a closure: function example(){ var aString = "the value you want"; var aClosure = function() { return "The string is " + aString; }; aString = "not the value you were looking for"; return aClosure; } var func = example(); alert(func()); // displays "The string is not the value you were looking for" The code above functions as it does because the value of *aString* changes before the function *aClosure* is ever called. To fix this we must use an "anonymous" function along the same lines as jQuery: function example(){ var aString = "the value you want"; var aClosure; (function(copyOfString){ aClosure = function() { return "The string is " + copyOfString; }; })(aString); aString = "not the value you were looking for"; return aClosure; } var func = example(); alert(func()); // displays "The string is the value you want" What the "anonymous" function above does is create a copy of *aString* so that the outer function is free to change *aString* without changing what *aClosure* sees when it references *copyOfString*. Similarly, in the jQuery code the *member* variable is being copied into *functionName* so that the *for* loop can continue to modify the *member* variable without it affecting the closure created and placed into *_placeholder[functionName]*.
Probably worth noting that [RequireJS 2.0 has just been released](https://github.com/jrburke/requirejs/wiki/Upgrading-to-RequireJS-2.0).
Summary: don't link to source code repositories, and use our Zoompf tool.
yeah I saw that this morning. crazy timing!
Hopefully, you don't need this to be secure, right?
The value of this function is being able to specify a nested namespace without having to worry about whether any piece of the namespace already exists or not. If I'm extending a library, and I want to create a "MyProduct.Model.PhoneNumber" namespace (to have good organization without polluting the global namespace with more than one variable), I want to make sure I extend "MyProduct.Model" if it already exists, or create it if it doesn't. Same for every other piece of the namespace. Doing this sort of boilerplate might look like: (function () { var MyProduct = window.MyProduct = window.MyProduct || {}; MyProduct.Model = MyProduct.Model || {}; MyProduct.Model.PhoneNumber = MyProduct.Model.PhoneNumber || {}; var PhoneNumber = MyProduct.Model.PhoneNumber; PhoneNumber = function (phoneNumber) { }; PhoneNumber.prototype = { isValid: function () { } }; })(); Ultimately a root immediately-invoked function expression is necessary to keep from leaking variables to the global scope, and then there's all that boilerplate at the top to make sure we extend (not overwrite) or create each individual piece of the namespace. With Adam Scott's approach, you can simply do: n('MyProduct.Model.PhoneNumber', function (PhoneNumber) { var PhoneNumber = function (phoneNumber) { }; PhoneNumber.prototype = { isValid: function () { } }; }); This is way more convenient. You still get a function wrapping all your logic so nothing gets leaked to the global namespace, and you immediately have access to your namespace, whether it already exists or not. **EDIT**: And just in case you're actually worried about the overhead of this script, here it is hand minified (with the added bonus of working in a server-side environment as well as in a browser): var n=function(s,r){var c,b=function(t,n,u){t[c=n.shift()]=t[c]||{};return n[0]!=u?b(t[c],n):t[c]};r(b(this,s.split('.')))} 123 bytes. Seems pretty reasonable to me. **EDIT2**: Actually, scrap that. Just looked up an old implementation of this same functionality that I did a while ago. Taking a non-recursive approach, here's a 90 byte version of the same library, var n=function(n,f){for(c=this,p=n.split('.'),i=0;i&lt;p.length;)c=c[s=p[i++]]=c[s]||{};f(c)}
I wish I could continue with you in this discussion, but you're clearly getting too emotionally invested in this. Take care!
Visual Studio is excellent for JavaScript. Auto completion and auto formatting, and it's nice and fast. However I personally use Sublime Text 2. Contains a genius take on auto completion (which works on everything, even code it has no understanding of), and it's generally excellent.
When you have very large namespaces, and lots of them, having a function call to create the namespace object helps. This is especially true if a namespace is spread across multiple files, as when they are concatinated or loaded you can't always be certain on the order this happens (and managing it is annoying). Personally I do use your way. However on some projects, namely ones spread over multiple files, I've used a function for defining that initial root object.
...you can add it (jshint) to your continuous integration solution as well (as you can jslint, I believe) really easily!
The good news is that now that he works at PayPal, Crockford will hopefully fade into obscurity.
I looked into their list of default [options](http://www.jshint.com/options/) over lunch and am impressed at how sane and well-documented it is. Going to make the switch :)
I've just come from the Web Directions Code conference in Melbourne and one presenter basically yelled at us for 1 hour "Just read the bloody spec already" ... Good timing. 
You won't regret it, jshint is amazing.
Wow ... nice. Thank you!
Thank you so much for your help. Let me know if there is anything I could do to help you out.
I think that if you take on JSLint then you should also take on it's purpose. Yes the third option in a for loop is optional (they all are) but then again so are semi-colons. If you write javascript with a strict adherence to what is considered good style (at least classically considered good style) then you won't have any problems with any new "features" that JSLint brings in. When you choose a tool try and choose one that has the ethos that you need and take linters with a grain of salt - they give you warnings for style, not errors for what won't run or what doesn't match the ecmascript standard. I actually use https://developers.google.com/closure/utilities/ closure linter, but then I work with closure tools so program along with it's intent
&gt; If you write javascript with a strict adherence to what is considered good style (at least classically considered good style) then you won't have any problems with any new "features" that JSLint brings in. How is this version of things "good style" though? In which programming manual or reference guide is it written that it's considered bad style to omit an explicitly *optional* parameter to `for`? I don't see anything advising against it [here](https://developer.mozilla.org/en/JavaScript/Reference/Statements/for) for example - probably my most trusted Javascript and DOM reference site. In fact, it all but encourages it - all three of `for`'s parameters are explicitly stated to be optional and it even clearly specifies what will happen when they are omitted. Can you honestly point to any authoritative programming guide in either Javascript or for that matter C that *recommends against* using the `for` statement in this way?
Didn't you hear? Hating on Crockford is cool these days, along with prefixed commas and 2 spaces for indentation.
Well, it's simple. By using the second parameter to decrement the variable, you're relying on the fact that 0 is considered to be `false` in a boolean comparison. Further, you're relying on the exact order in which the postfix decrement is executed. Essentially, you're using the postfix operator's side-effect. Without knowing about the exact implementation of the postfix operator, it's not entirely clear whether for (i = arr.length; i--;) is equivalent to for (i = arr.length; i &lt;= 0; i--) or for (i = arr.length; i &lt;= 1; i--) In other words: it's going to lead to confusion for anyone who doesn't know this by heart. The reason jslint nags about this isn't that it doesn't treat the third parameter as optional. It's that it tries to prevent dodgy idioms like this that can and will cause problems (or at least impact readability). tl;dr: jslint protects you from trying to be clever; if you're going to be clever, don't be surprised if jslint hurts your feelings. Also, Crockford's style guides aren't about *style*, they're about readability and preventing errors and common mistakes.
always creating and executing new regexp... this can be done faster (and maybe you even only want to replace full words (so that annotated won't be replaced with anNOTated). Here's how: var dict = {"not":" NOT ", "is not":" IS NOT ", "like":" likeeee ", "Like":"lllike", "job":"JOB"}, terms = [], term; for (term in dict) terms.push(term); var search = new RegExp('\\b('+terms.join('|')+')\\b', 'g'); // now for every text node: textNode.data = textNode.data.replace(search, function(full, match){ return dict[match] || match; }
I have a feeling we are talking about totally different things here. My original point was that using $ on an xml string would be incorrect, as that would apply HTML "parsing". However it seems that jQuery correctly uses (browser built in) capabilities to get xml DOM before that.
+11232431
Yeah that's a fair enough comment. I've been just running it through the latest version each time.
It depends on programmer's preference, and your group may have style guidelines. I think this is confusing and wouldn't use it in production
I didn't thought of that, this looks a lot more readable. Thanks.
It doesn't sound like you've worked on a large JavaScript project before. If you have more than one file your method falls apart as each subsequent file overwrites the last.
Integration of build tools, automated tests, versioning, CI software, bug trackers, code inspection and automated refactorings can be very helpful, especially in projects that go beyond throwing some jQuery at a website. Emacs and vim are very powerful text editors. I have all the respect for people who have managed to master them, but time and time again I have found the learning curve too step to justify and the eventual promised gain too insignificant to be worth it compared to the rest of the toolchain. In the end it's a matter of taste. But I find that a good IDE is usually more trivial to set up and configure (no, not Eclipse) than the hoops you have to jump through to get the same functionality and comfort in either emacs or vim without already having intimate knowledge of them.
Every time I've tried JSLint, I've always been disappointed with the results. I've had whole pages of code flagged by a single issue, where it's failed to understand what I've written. I also find it too oriented around writing in Crockford's style, instead of spotting issues with your code.
If it is only a matter of ease of reading, rather than an actual mistake, then there is no reason for jslint to consider it a mandatory, and not a configurable option. Even tolerating `eval()` is a configurable option.
Thanks for the explanation. I still believe that we do not need to pass in window as the argument, since it is already a global var on the browser (I think it might be good practice to test the lib outside the browser with some mock window object. I hope that it is the case.
I run an application that claims to be JSLint compliant and is over 6500 lines of code: http://prettydiff.com/prettydiff.js In the last year I have made two massive updates to the code style, of which only 1 was for a JSLint update. This particular update decided that "return" should not be the first keyword after the "else" keyword. This was an easy change. The second change to my code style was to supply a strict typing mechanism to variable declarations, which JSLint, in my opinion is not strict enough about. Based upon this experience I am going to say that you are either just whining, or your code was hardly compliant to begin with, or both.
However missing a third item in the for-loop is typically a real mistake. For example I could easily write: for ( i = 0; i &lt; arr.length; ) { .. and that should really be caught.
Awaw!!!! This is a beyond excellent explanation - specifically because you used the param name 'copyOfString' - That was what clicked! I did see this somewhere in this site: http://www.javascriptkit.com/javatutors/closures2.shtml (see example 7) but I could not put 1 + 1 together! I will have to read on how javascript passes arguments to functions (values vs. references) Thank you so much for taking your time to explain that to me!
Based on imbcmdth's explanation below, I think the above rewritten code would not work because we cannot be sure that the value of 'member' will not be changed somewhere else, thus we create a closure to make a copy of it.
You could go so far as the following: while (usedColors.indexOf(color = randomColor()) !== -1); Though you'd probably want to leave a comment denoting that the lack of body is intended.
This is cute, but you could have just as easily used jekyll - which github supports without a lot of work.
Is that not also attaching methods with each instance? I'm not super familiar with JS internals but it would seem you're attaching the functions to the returned object with each instance. Is there some hidden reason why that's not the case?
http://i.imgur.com/z8FMJ.gif
Huh? Where've you been? EVERYBODY uses two spaces these days. Sheesh. M-x set-variable &lt;RET&gt; tab-width &lt;RET&gt; 2 &lt;RET&gt; 
&gt; In C, the assignment as a condition returns true always, No... assignment in C always evaluates to the assigned value.
If you're making a lot of display changes, inserting an alert is great because it pauses execution so you can see what everything looks like. If you don't, often you won't see the display changes if for some reason (that you are trying to debug) it is going from one visual change to another unexpectedly. Useful, for example, to check before and after an element is resized.
That's what breakpoints and the `debugger;` statement are for.
haha awesome name brother
He probably did it as a learning experience. So more work = fine, so long as he enjoyed himself and learned something.
"One day"?!?! In 2008 JSLint had this, probably before then, but this was the first time I noticed it. I agree with others that jsHint is the way to go; been using jsLint since '06, and it's a bear. In it's defense: it has never forced me to make mistake into my code in order to make it happy. 
depends on your definition of "correct"
It's Douglas Crockford;
that sounds very good, gonna try it after the good parts, thanks.
Not 100% sure what you are asking for but just tell me if I'm misunderstanding. :) As I can see you have a graph and want to show data that is behind certain point so when you hover it in the graph the table changes. I would not have any callbacks for the mouse over, all I would do is pass all the data in array when the page is loaded (assuming you do not have loads of charts on each page and each chart does not have many points). Having the array with all the data for each point now I would make a JS function that passes in what point you are hovering over and have the function change the table showing info about the point. Like I said earlier just let me know if I'm totally off track. ;)
Brendan Eich's blog post is a total non-answer to why he donated the money in support of Proposition 8.
That's it, I'm boycotting Javascript.
&gt; Homosexuals did have the right to marry before Prop 8 which Brendan Eich tried to remove with his donation. Yep, and I would have had the "right" to own slaves if I had been alive 200 years ago. What's your point? I think you're confused... just because something isn't illegal doesn't make it a right. Rights are explicit rather than implied.
Okay - this is a subreddit about programming javascript. Please take your fucking drama somewhere else. If you want to talk about this kind of thing you can do it - but this still isn't the place to do it
This is more than a little off-topic. Eich's personal beliefs regarding homosexuality has absolutely nothing to do with the language, or even its background. It's not even a particularly *interesting* thing to discuss — the US on the whole is pretty much evenly split on the topic, so the odds of Eich supporting a ban on gay marriage is about 50/50. Personally, I'm a huge advocate for gay marriage, but I don't subscribe to r/javascript to discuss it. Take it somewhere else.
I'm not a huge fan. In the blackjack lesson, I tried to define a private "draw" function inside the "twoRandomScores" one and and it fails me. [Here is someone's post in the help forum discussing the problem](http://www.codecademy.com/forums/4f242ced49bc13000100f8ef/forum_questions/4f5916fe0c55d4000302596b) My biggest problem with it is that to pass the aforementioned lesson, you need to use the right function names, which are only accessible in the hint. Why call it a hint if it's required information?
&gt;Integration of build tools, automated tests, versioning, CI software, bug trackers, code inspection and automated refactorings can be very helpful, especially in projects that go beyond throwing some jQuery at a website. You can do all of that from vim/emacs(and most decent editors), save from automatic refactorings(which is oxymoronic anyway, given the dynamicism of the language). Emacs and vim are far superior in terms of programmability and the small matter of writing code. 
&gt; Written by someone knowledgable in postal.js for others who know what postal.js is. I missed the part where he explained what is the problem this library solves. It's clever and all, but I don't see anything that can't be accomplished in JQuery.
Yeah, I think I may switch to JSHint just because of [option.stupid](http://tech.groups.yahoo.com/group/jslint_com/message/2837).
We have a right to point out his non-answer as much as he has a right to give it. 
&gt;Personally, I'm a huge advocate for gay marriage, but I don't subscribe to r/javascript to discuss it. And yet, here you are...
Add an options comment at the top of your file: /*jshint browser:true */ You can also define custom variables and a lot more - see http://www.jshint.com/about/ and http://www.jshint.com/options/
Your point being? He didn't discuss it, He stated his opinion and asked that others not start a slap fight about it.
This isn't simple in jQuery because it doesn't handle mousewheel events yet. You either have to use [this](http://brandonaaron.net/code/mousewheel/docs) jQuery plugin or handle the various mouse wheel events yourself. It really isn't as hard as it sounds to cover 90% of the browsers out there (didn't bother with IE). The code would look something like this: http://jsbin.com/igeyok/edit#source
I do have to admit that if I were considering to hire Eich for a hire as a CTO, I would certainly take into account his position on Prop 8. Not directly javascript-language related, but considering he works in the Bay Area with its huge diversity one but can't help to wonder how his beliefs in this matter color his interactions with employees and Mozilla contributors.
My two cents: Don't let us judge it for you. If you feel that you are learning and are growing, then keep with it. Just be sure to supplement it with other sources. If you feel that you've pretty much gotten out of it all that you can, then move on. Good luck!
You can't replace text in a text node with HTML. You would have to extract the beginning of the text node, create an html element ([createElement](https://developer.mozilla.org/en/DOM/document.createElement)), extract the last part of the text node, insert those three into the DOM, remove the original text node. Fortunately, html entities aren't elements. They are converted into text nodes (I actually never knew this but experimentation reveals...). Use the Unicode value in your replacement string. For example, [BLACK DIAMOND SUIT](http://www.fileformat.info/info/unicode/char/2666/index.htm) is Unicode character 2666, which [can be escaped](https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Unicode_escape_sequences) like so: var replacements = {"foo":"\u2666"}; That way, you are never dealing with html elements as an intermediate step, which is much simpler. Good luck.
I thought this bit concisely explained the benefits of using the library: &gt;"Using a local message bus can enable to you de-couple your web application's components in a way not possible with other 'eventing' approaches. In addition, strategically adopting messaging at the 'seams' of your application (e.g. - between modules, at entry/exit points for browser data and storage) can not only help enforce better overall architectural design, but also insulate you from the risks of tightly coupling your application to 3rd party libraries. And shortly after that: &gt; postal.js does not replace these eventing mechanisms, but instead augments an application by providing a common messaging layer between modules that, themselves, leverage these eventing technologies internally. The creator of postal.js also has [some blog posts](http://freshbrewedcode.com/jimcowart/2011/12/05/client-side-messaging-with-postal-js-part-1/) explaining how it can solve problems inherent in relying solely on events from frameworks like jQuery for larger apps.
Maybe so but the essence of that explanation is: &gt; This approach is better than others. Also, iif you use it as I imagine it should be used it's a cool design, and can insulate you from what I consider to be too much coupling to third-party libraries. And &gt; It provides a messaging framework. It's semantically content-free because it doesn't explain why the stated advantages are advantages, not does it state a real-world problem which is addressed. 
Yeah, the guy that wrote the Blackjack game veered way off course by using the sidebar to ramble and then force you use the hint to provide the actual specs. Codecademy.com is a good yet-another-resource for upping your exposure to JS and it should be treated as such. If you're 90% sure you got an exercise right and it won't pass, just move on. Its main problem is the variance between the test code that's run to see if you pass the exercise because the users that makes the tutorials do whatever they want. They need standards. For example, some tutorial writers get it right and predominantly test the output. But some guys test unrelated implementation details like variable names. Why should I have to name an instance of my EmperorPenguin class an `emperor`? In one perplexing exercise, thanks to the Q&amp;A forum, you had to name the variable `x`. 
&gt; I’m not going to discuss Prop 8 here or on Twitter. There is no point in talking with the people who are baiting, ranting, and hurling four-letter abuse. Personal hatred conveyed through curse words is neither rational nor charitable, and strong feelings on any side of an issue do not justify it. Disappointing that someone at Mozilla thinks the internet is not a medium where this kind of issue can be discussed, so he's not even going to try.
&gt;He didn't discuss it, He stated his opinion and asked that others not start a slap fight about it. ...which of course, *is not* a discussion in your world?
You can make new vars, functions and test if they work(It's way more handy than making an HTML page and create a test environment yourself). Also, you can access objects/properties etc.. from the page. That's what i meant..
Statements aren't discussions - "discussion" implies a back-and-forth - a bi-directional exchange of views between two parties. He made a statement as part of an explicit attempt to *discourage* discussion of the issue, and only did so to demonstrate he wasn't trying to close down discussion for ideological reasons, but only because it's *not appropriate* for r/javascript.
&gt;Statements aren't discussions - "discussion" implies a back-and-forth - a bi-directional exchange of views between two parties. In order to make that statement, he had to *reply* to a statement that was already made. If you want to argue about just how many statements are needed to make a discussion then you're just being pedantic to keep from admitting the irony of their statement. &gt;He made a statement as part of an explicit attempt to discourage discussion of the issue, and only did so to demonstrate he wasn't trying to close down discussion for ideological reasons, but only because it's not appropriate for r/javascript. There other ways of discouraging a discussion. Participating in it is probably the worst.
To be fair, while he may be a bigot and I'm 100% against him on this issue, he's pretty much correct on the volatile, knee-jerky, witch-hunty nature of many/most online communities. Even if he posted a discussion on it to somewhere small, quiet and thoughtful it would soon get posted to Twitter, Reddit and other places and the peanut-gallery would descend on the discussion and start hooting and flinging poop. If you doubt this, observe the loudness of the hooting and the quantity of airborne faeces right now, in response to a *quiet, private political donation* some years ago. He didn't even *ask* for a discussion and most of the internet is calling him an asshole - imagine what would happen if he went into detail on his blog, or posted the equivalent of "IAMA bigot and inventor of Javascript - AMA" on reddit. He's a bigot and I'm disappointed in his attitude on the issue, but you can't really fault him for politely declining to build a huge pile of wood, climb on top of it and throw matches to the crowd.
It's a slow way to learn javascript if you already know the basics of programming, though that's not what it is for. It was designed to teach those programming concepts (and just happens to use javascript) and is very good at it.
On Mac the best option isn't really an IDE. Textmate. It's old, but it's what started the whole revolution of super text editors. Also, version 2.0 is in beta right now (and available if you paid for version 1.0)
The simple answer: The information is generally not correct/updated. More details: http://w3fools.com/
if i ==0 add a selected attribute
jon23d is correct. change value of "i" in if statement: if(i===2) to get how it works: http://jsfiddle.net/UUpnG/
Thanks for the unicode suggestion. It should solve my problem.
I use a .ini file on the server. My PHP reads it and outputs things wherever necessary. I use PHP to dynamically output JavaScript. 
Read http://www.nczonline.net/blog/2010/07/06/data-uris-make-css-sprites-obsolete/ I just serve local versions of images but in the build step I use cssembed to change the image to a dataURI so it's in your stylesheet 
add the line in - just put it on one line and used !i (because 0 is the same as false, so !0 == true) for (var i = 0; i &lt; plist.length; i++) { var option = document.createElement("OPTION"); option.text = plist[i]; option.value = plist[i]; if(!i) option.selected = true; PrintersCtrl.options.add(option); } or you can add in on the end: PrintersCtrl.options[0].selected = true;
yes quite possible, however I'm not sure that elements without scrollbars will pick up the event http://www.quirksmode.org/dom/events/scroll.html. So what you can do is put a listener on the document with something like: var wheelFunction = function(){}; $("#myElement").hover(function(){ $(document).on('mousewheel', wheelFunction); }, function(){ $(document).off('mousewheel', wheelFunction); }); have a look at http://www.adomas.org/javascript-mouse-wheel/ to actually get how to listen to the mouse wheel event
I'm not a big fan of using strings that are converted to dot namespaces - biggest reason is it's not closure compiler compatible. The library has goog.provide http://closure-library.googlecode.com/svn/docs/closure_goog_base.js.source.html which you can use to setup a namespace and it does take a string, but the compiler strips them out and uses that for dependency management at build time
Too much work as i go back and forth all the time. Changing hosts isn't an option here.
I assume you mean changing your hosts file... You could set up a quick shell script to just rewrite it for you in a quick command line call. However, it's probably better to go ahead and set that variable. Don't know what your Server Side language is, but you can usually pretty easily query for your environment's hostname. Then dynamically set a javascript variable that gets sent down to the client with each page load. Then, anywhere you need a URL in your script, you can say: var url = dyn_hostname + '/the/place/that/has/my/resource.gif' 
Likewise. I have my servers dump out a ASSET_BASE_URL variable into the JS and write my scripts to expect `ASSET_BASE_URL || '.'` when building the image URLs.
Unfortunately, data URIs are only useful [if you're targeting newer browsers](http://en.wikipedia.org/wiki/Data_URI_scheme#Web_browser_support).
completely agree - and usually I wouldn't but for one thing. The title says "I'm a hack" and as such thought they'd appreciate a "hacky" solution. That's why I put the explanation of how it works. There's actually a fair bit I would change for the whole function to make it more readable and be a better style but I don't think that is what the author wants. Some things that could be fixed is the window.onload should first check to see if there is already a function defined, there shouldn't be a "new" word before function, the if plist.length &gt; 0 is not necessary and I'm guessing the PrintersCtrl.options is meant to be an array so should probably be .push instead of .add (and may actually be trying to add it to the dom and not the array which is a whole different thing). If it was an array I'd use a map function: var temp = window.onload || function() {}; window.onload = function() { PrintersCtrl.options = enumPrinters().map(function(val){ var option = document.createElement("OPTION"); option.text = val; option.value = val; return option; }); temp(); }; and I know map isn't available on arrays in all browsers but I'm sure they're using some library which will give them the functionality and using the = || pattern isn't good etc.
I would definitely be interested in reading that. I'm the kinda guy who prefers to build his own stuff, so I will be investigating the idea of writing my own sorta... promise system until it turns into a giant mess, then use jquery's system, THEN rewrite my original one and it be halfway decent ;D
your problem is that you're running on window.onload The onload event fires after the dom is written but your document.write is run as the dom loads, so when that runs the window.onload hasn't run yet and so randomUser is undefined. So you can either inline that part of the function or change it so you set the name in the html in the onload function instead of using document.write
&gt; window.onload = new function() { ... *new* doesn't make any sense here. Just leave it like: window.onload = function() { ....
How is the = || pattern bad? As long as I know, it's good practices (only in variable declaration / initialization).
No you can't. Javascript (from cdn) creates whatever element and appends it to the dom, which isn't on the same host.
I don't think it's as useful in a real-world setting as it is a learning experience about JavaScript and a bit of fun mixed in.
Well, if you're treating it as a null-coalescing operator like C#'s ??, you just need to be aware that it also nixes falsey values and not just undefined/null. Other than that, the only badness that leaps to mind is that it might confuse people who've never seen that idiom.
video of the keynote is up: http://www.youtube.com/watch?feature=player_embedded&amp;v=8HzclYKz4yQ
You're right with the falsy values, you could screw it up if you don't know what you're doing. The other reason I always found weird. We shouldn't, then, use closures or prototypes because they're also confusing to newcomers? This is also not so uncommon, for example in php, perl and shell scripting. I like it, it adds readability.
The last closing bracket was missing (sorry, my mistake) - and of course, textNode needs to be something.
Closures and prototypes are fine, but it bothers me when people so super-fancy stuff like dropping semi-colons. They should use coffee script if they feel such anathema for extraneous characters.
Agreed. At least he explains his reasoning for everything very well, so reading between the lines isn't necessary. Also, I believe Javascript is a hard language to *not* be opinionated about, as the language has so many styles and doesn't enforce or suggest one of them as the way to go. Therefore, each team will have a different way of doing inheritance, etc.
I think it's broken guys, my code doesn't look any different. 
Obfuscation is never, ever, ever, reliable. At most it delays, never prevents.
You should translate it into [brainfuck][2] and then use a [BF interpreter][1] to run it. [1]: http://triskaideka.net/bf/ [2]: https://en.wikipedia.org/wiki/Brainfuck
I love it. Thanks for the pointer. I guess. I imagine I'll spend the next hour kicking around wikipedia, per usual.
If the server with domain that needs to change is apache, and you have the ability to use .htaccess files on that server, you can use mod_rewrite with a "307 Temporary Redirect" header to rewrite static.domain.com to dev.static.domain.com. Depending on how you have your development environment set up it may be as simple as matching /dev/, ?dev, &amp;dev, or dev. in the path of the referrer header. If this is possible with your setup, it will make moving from development to production as easy as changing a directory, query string, subdomain, or any switch you choose to use. Hope this helps
I'm super good at this with my touch screen. I got 20 points.
Same. No mouseover event ftw
No. Closure Compiler is mostly a Javascript minifier; it takes your JS code and finds ways to make it more optimized, usually by shortening variable names and stripping out whitespace (so it "obfuscates" the source code in a way, but not for the sake of it). It also serves as a static analysis tool, pointing out stuff like reference errors or illegal Javascript statements.
Sounds neat but they don't make it clear what it is. Are they providing a backend database so all you need is javascript and API calls to their servers? What is their privacy / security policy?
In the scope section of your contract it should should begin with a clause that all IP transfer will occur upon full payment. You should also have termination fees built into the milestones of your projects. If they use your IP without paying for it then you can take their asses to court. http://vimeo.com/22053820
cool story, bro.
When does it go all wonky? After it loads? Once the "Delete All" button is pressed? 
They provide a back-end for iOS, Android and now JavaScript apps. This means no back-end work required and no tables to set up. Forking backbone for this was a really smart move and hope to see some great Parse + x mash ups in the future.
That would just be: for(var i = 0, len = list.length; i &lt; len; i++) Which is OK. I just personally like to have all of my *var* statements at the top of the function. That makes it easier to tell when I make a boo-boo and leak variables into the global scope. Also the *if* statement guarding the *for* loop: if( list.length &gt; 0 ) ...is unnecessary because the *for* already performs that evaluation when it first runs. On the first iteration, *i* is equal to *0* so the conditional part of the for loop (the part between the two semicolons) evaluates to: if( 0 &lt; list.length )
You should **always** use *var*. It is a good practice to get into to avoid these kind of bugs.
Most likely! :)
Mootools doesn't get much love :( http://jsfiddle.net/rJfyg/1/
You should take a look at the free [Eloquent JavaScript](http://eloquentjavascript.net). It'll seem to start off slow if you're coming from Python, but it quickly dives right into JavaScript.
Neither does vanilla :( http://jsfiddle.net/DDBjs/
Legal protection insurance?
Well, you could build your own tested, high performance, cross-browser javascript library. BUT THEN YOU'D HAVE JQUERY. 
HTML5 [Canvas animation!] (http://my.safaribooksonline.com/book/web-development/html/9781430232919/making-things-move/making_things_move)
Wow, I'm proud of you :D [here](http://www.schillmania.com/content/projects/javascript-animation-2/) is one, but be sure to read part 1 of it as well. And be certain to ignore those jQuery pushers.
&gt;Don't make your code uglier just because you want to show others how "clever" you are. Thing is, writing cryptic hard to read code is not clever. It just adds maintenance friction and increases the bug count. It's stupid. That was exactly the point of this post, I love to write elegant code, but sometimes I'm seriously overdoing it. Thanks.
&gt;Thirding jq, however it is heavy. If weight is a problem, you can use Greensock/TweenLite instead, which weighs in at ~6kb without any enchancements and doesn't have any dependencies: http://www.greensock.com/get-started-js/
Pre-jquery I was manipulating heights, offsets, changing values based on browsers, etc. just for simple slide ups/downs. I hated it, but it was a good learning experience and I have a better understanding of js because of it.
Check out [microjs.com](http://microjs.com/) for some *extremely* small libraries.
You could just look in the [jquery](https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.js)/[UI](https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.js) source code and steal the bits you need ... ?
I could not agree more in regards to CSS transitions. If you're first thought is "how can I use JavaScript to animate this" I would say nine times out of ten you're doing it wrong. Progressive enhancement is your friend. People do not need, nor want an animation most of the time and it could even be detrimental (some jQuery animations have always looked clunky to me). Think about the basic content, why you want to show, hide or animate it. Then think again why you want to do that. Then if you want to make it look better think about CSS transitions. I've always found http://www.abookapart.com/products/css3-for-web-designers to be a great go to for getting to know progressive enhancement and why reaching for JavaScript or any other library to animate elements on a page isn't the way to go. 
I think what a lot of more inexperienced developers think of as elegant code is what experienced developers think of as overly clever code. If one line you write is making you feel smart, chances are good that anyone else who has to look at that line (could even just be you in the future) isn't going to understand what's going on. Code isn't just about communicating with the computer.
If you don't need to support IE6, jQuery is a whole bunch of code bloat.
https://developer.mozilla.org/en/CSS/CSS_animations
If you have the luxury of targetting newer browsers only, use CSS transitions. older browser will still get basic functionality without the animation. If you must do it in JS: - select an element with normal DOM selection methods - create a setInterval timer that runs a function - use the function to update the selected element's style properties - when the property reaches its desired value, clear the interval
only if you're targeting webkit only browsers
What resource did you find?
Apart from knowing how to animate CSS position (and color?) properties, you might also want to look up on [easing functions](http://www.gizma.com/easing/) which make your animations look far better than linear interpolation. edit: [Here](http://fforw.de/static/demo/easing/)'s a little HTML5 easing function visualization I did when I was using them in one of my projects. The referenced Interpolator.js file is a simple little animation tool that can interpolate between key-frame objects with numeric properties. 
You can if you use a framework.
Can anyone clarify the context/reasoning for this quote? What makes JavaScript seem unmaintainable?
The lack of classes and modules are two of the big factors. You can fake them, but you end up with 20 different APIs to do so. Even with importing multiples there are different ways; script tags, concatenation, ajaxy loading scripts, and lots of alternatives in between. Developers are then left with building their infrastructure as well as the application. Then look at something like Java; one way to do a class, one way to do packages, and a thoroughly specified import mechanism that just works. Plenty of other languages are similar. This alone helps to make code much more portable, because some of that infrustructure is there already. Edit: sorry, I misread, I didn't realise he meant specifically about Anders. This is just my two cents.
Nice troll!
Yes he does. His reasoning is spread throughout the entire talk and centers around tooling, auto-completion and refactoring and type info and such. The whole panel is sharp language designers. They talk a lot about complexity of programming and practicality and even about that rare breed - those who make the libraries. It is worth watching the whole way through even if you have to bookmark it and return when you have time.
'lack of classes' has nothing to o with it. JavaScript is a prototypical language not a classical one. If you wanted to blame dynamic typing, then you could argue. Lack of a module system is a problem. AMD and CommonJS are two popular solutions to that problem until Harmony gains support. 
Mine, all mine. Hejlsberg doesn't really go into precise details, but does say its difficult to reason about comparing different sections of a large JS program.
You’re making a slightly oblique point. There’s maintaining code as in “I hire a code monkey to work on my million lines of JavaScript: Can he make a change and push it to production in a reasonably short amount of time?” And there’s also maintaining code as in, “I have a team of code monkeys that works full-time on this code base. Can they make a change and push it to production in a reasonably short amount of time?” Standardizing on infrastructure and making code “portable” affects the first question far more than the second. Untyped languages and a prevalence of monkey-patching affects the second question.
I have one JavaScript project that is composed of two files that are 6500 lines and 2200 lines respectively. I have absolutely no trouble maintaining this. Why should this project be any more challenging to maintain than a similar project written in a different language?
I could be wrong about this, but I suspect that when Anders is talking about “large” programs, he is not talking about 10,000 LOC in two files.
I am not aware of many JavaScript applications that exceed millions of lines, but then to be fair it takes far fewer lines in JavaScript to express similar logic compared to something like Java or C++ which are not functional languages and do not natively support a lambda model. JavaScript applications are also not millions of lines of code because JavaScript is a far slower high level language. This has nothing to do with maintainability.
Yeah, I'd agree with that. Clearly some developers do write better code then others. However having some of this baked in helps to lead by example. For example I would bet far Java developers use packages, and C# developers use namespaces, then JS devs use some sort of module/namespace.
But just because people misuse a language feature when they first get their hands on it doesn't mean that it can't be used correctly....
I know this doesn’t seem logical, but somehow I feel that while some languages make it easy to write spaghetti code, I ‘m not sure there are any languages that make it hard to write spaghetti code. This may be a variation of the “Real mean can write FORTRAN in any language” assertion.
There is still a reason you don't see WoW written in JS for WebGL, for example. Or an online version of Microsoft Word written in JS. Other than the practical considerations, the language just wouldn't support attempting projects of that scope while facilitating a reasonably maintainable code base.
Languages make it harder to write spaghetti code in a number of ways. Lacking a goto statement, for example. We're talking about code that becomes "naturally unmaintainable", not code that is deliberately obfuscated.
Be wary of projects with ambitious claims and little technical information.
Why? Is this just a 'me-too' example, or does it provide something of value that none of the 1000 other recent Backbone examples provide?
Actually, there are a few versions of Microsoft Word written in JS :p 1. [Office 365](http://www.microsoft.com/en-us/office365/free-office365-trial-si.aspx?WT.srch=1&amp;WT.mc_id=PS_google_Office+365_Entice_office%20365_Text#fbid=iovuvNSOvvc) 2. [Office Web Apps](http://office.microsoft.com/en-us/web-apps/)
Hidden &lt;input&gt; tags for settings? Why not just use data-attributes? Or JS config object?
k3n, these open source applications you're talking about don't exist. Sure there are probably thousands of applications, but very few provide full source code and the build/deployment process.
Wait, I think you just contradicted yourself: &gt; k3n, these open source applications you're talking about **don't exist**. But then... &gt; Sure there are probably thousands of applications, but **very few** provide full source code and the build/deployment process. If there are _very few_ of something, then you can't honestly say that they _don't exist_. And I can find tons of open-source BB project demos both here and on Github.
A large part of the Firefox source code is in JavaScript (maybe millions of lines of code). We still manage to maintain it. It doesn't feel more or less difficult to maintain than our C++ code base.
For me, strongly typed languages are easier to maintain. A lot easier. It is also an IDE thing. You see a method, you see what type it returns, you see the parameters it accepts, and there is a shortcut key to jump to it. I have yet to find an IDE for Javascript that lets me see the methods/properties of a class once more than one file is referenced.
That would be so sweet. It's something I miss when doing JavaScript. Why don't JS IDEs do this? Is it just challenging to navigate the tree of all the functions, etc. in real-time? How come IDEs with strongly-typed languages can do this?
It does support the common case. The inconsistency comes from developers not following KISS. This is KISS: Derived.prototype = Object.create(Super.prototype, {bla bla}). 99% of the time we don't need 99% of the features in class based OO. Constructor stealing is more general than chaining and can be used to support mixins or any style of multiple inheritance. That doesn't mean we need a convention or common MI library. Just write what's happening. For example, some people have elaborate schemes for "super()". Instead just say Super.prototype.method.call(this, arg). That's long but simple. I'll take the simple code over a cute OO system, which basically hides what's actually going on. tldr; Javascript is fine if you use the object system DIRECTLY WITHOUT ABSTRACTION!!! 
I think his point is there aren't anywhere near 1000 example like you implied. More like a dozen that are worth the look. 
Just tired of reddit becoming (being?) a _hey ma, look what I made_ site. I don't see anything impressive about this example, at least nothing to set it apart from the myriad other _hey ma, look what I made_ posts. Reminds me of when RoR first because popular and everyone thought it was great content to show off how they could make a blog in 15 minutes. Whoop-t-do.
I've got a bug with Reddit. For the third time, I'll try to give you a (short) answer. You can avoid the `eval` call by defining your own `document.write` function. Here is an example: var getContent = new Function("var ret = ''; var document = { write : function(str) { ret += str; } }; " + data + "; return ret;"); Then you just have to call `getContent` function to get the written HTML content.
Meanwhile I'll relentlessly support anyone discovering and trying out new technology. Even if it was quick, and easy to do.. whatever gets people excited.
Hey, I'm all about people learning and getting excited, I just don't give 2 shits about seeing every 15 loc project (especially when it's been done many, many times before).
Good to know, and would have provided some much-needed context for the submission. Of course, that's another complaint I have with r/js: many submissions have a complete lack of contextual information. Not even an executive summary or synopsis. Just a "hey look what I made". For some stuff that's enough, when you open the link and it's something amazing right-off-the-bat....but something as simple as this merits a little more explanation if it's to be taken seriously. My .02 (even though nobody asked for them).
&amp;#3232;\_&amp;#3232;
Extracting the text from the paramater of the document.write is kinda what I'm doing. The issue is that then the text is escaped for javascript. So I wrap it in qoutes and call eval turning it into a string that is no longer escaped. I didn't really find a good way to unescape it.
It's not that hard to avoid the 'this' problem when it comes to events, even without a library to hold your hand: Obj.prototype.countClicks = function(element) { element.onClick = function(e) { this.increment.call(this,e); } } Problem solved! You still have access to the event object within the anon function, in the W3C event model.
Did you try running that code? It doesn't work. Not saying that it's impossible to deal with the problem without a framework - my example with .bind() doesn't use a framework, and you could construct an example with .call, but yours is logically incorrect and doesn't actually run.
ahh yes **this**.increment.call(**this**,e); is the problem. Would work like so: var that = this; element.onClick = function(e) { that.increment.call(that,e); } Also, the module pattern can be expressed more succinctly: var Car = function(_internal) { var internal = _internal; return { report : function() { console.log(internal); }, update : function(data) { internal = data; } }; }; Don't get me wrong though, I liked your post.
I think this [code](http://phpjs.org/functions/stripslashes:537) will solve your issue. BTW, you forgot to add `"document.write('".length` to `data.lastIndexOf("document.write('")` there: data.substring(data.lastIndexOf("document.write('"), data.lastIndexOf("')")) It should be: data.substring(data.lastIndexOf("document.write('") + 16, data.lastIndexOf("')"))
Well, you have something like Javascript parser: http://visualstudiogallery.msdn.microsoft.com/288a2b0f-1357-47b4-8215-1134c36bdf30 The problem that VS2010 has not yet solved for me, is when I have 2 javascript files referenced from a single html file, the editor is oblivious that those two could have anything to do with each other. 
These tags are at the extreme top of the page. They are easy to identify and easy to access for absolutely everybody. I don't want to have to bury configuration settings in a JS object somewhere. I do find data-attributes to be less cryptic, but still significantly less obvious than the input tags. Simplicity for the non-designer is the objective. Provided no SVG and the same CSS my 8 year old could write presentations with this.
I've a mixed relationship with JS animates. They don't always work. I rather use CSS3, some great examples are here http://css3.bradshawenterprises.com/ Remember that older browsers ignore these animations, so if you are shifting something 100px left the object in say IE8 will just reposition in an instant without the transition.
If you want compression, use gzip on the transport layer (Content-Encoding: gzip). It's super fast and it's handled automatically by the server and browser. Zip doesn't make any sense. It's horrible for streaming.
&gt; "The State Pattern" Maybe you mean "a state machine" :P Let me go further: State machines are an important part of computer science and software dev. There're a lot of things you can do with them. That said, badly designed state machines can also get brittle very quickly, especially to maintain and extend.
My co-worker Erik wrote one: https://github.com/operasoftware/jsunzip
IBM Rational Jazz comes to mind.
Verily, I am! You can write bad code in any language with very little effort. It's just the nature of the bad code that changes between languages. For example, in Java I run into these monolithic classes, or the opposite, obtuse abstraction where you have setters and getters and decorators for every little thing. In Python I again run into monolithic classes and a general hostility to breaking code up into discrete files. In Javascript I find a lot of unneeded closures and binding of events based on IDs rather than classes. In PHP I find a lot of creativity in how you can do stuff crazy. When dealing with BASH scripting, the hell, right? But I don't believe the differences are all necessarily a result of the syntax and internals of any given language. Though I do acknowledge they may influence it. Each of these languages has a different philosophy. Their syntax and internals tend to reflect this philosophy -- as do their cultures. The culture, philosophy, and conceptual framework a language is founded on are strongly reflected in the **educational materials** created for the given language. So when you learn a language, you are initially guided their way. I think this has a bigger impact on how code is written than anything else. I do think some languages have better fundamental ideas and philosophies than others, which is why I steal whatever good I can from as many languages as possible. Edit: Removed line about header files, because thinking about it for a second or two, they made perfect sense.
I've just been going through Doug Crockford's book, Javascript:the Good Parts. This was a perfect follow up to the modular pattern and closures. Thanks :)
I often use the terms interchangeably and I believe the Gang of Four book just calls it the State pattern: http://en.wikipedia.org/wiki/State_pattern http://en.wikipedia.org/wiki/Finite-state_machine So..yeah, no need to be cunty ;) State patterns can absolutely get brittle and I think that is often the case when you first start using them. It can take a while to figure out what sort of behavior is good for a state and what will make it difficult to change later on. Having said that I think it's a wonderful pattern and it's definitely better than a bunch of state flags or giant conditionals. Hopefully people experiment with it and add it to their toolbox. 
http://i.imgur.com/kY6xW.png
&gt;a JavaScript code obfuscator that turns your code into a gigantic nightmare Isn't this what coffeescript is for?
Backbone is utterly orthogonal to this conversation. You've just walked in to a conversation about the merits and demerits of applying formal logic to philosophy and started talking about how great that Ayn Rand chick is. Incredibly gauche.
You can restrict the getImageData offsets and dimensions to the rectangles the arm segment are actually in. This would greatly reduce the amount of pixels you'd have to fetch, which should make it a lot faster. This would also make it possible to detect which arm segment is colliding. Also, the mapData getImageData doesn't change (or does it?), maybe you can cache this.
I didn't see you point about caching the mapData. But that would definitely give some improvement.
That's your decision to make. I guess they'll close it soon anyway, unless you provide some test case to prove your problem. Another idea for the meantime: parse the images on the first start and cache the imageData in localStorage (as JSON).
I think I just shat my pants. This is fucking awesome. 
Can someone explain to me how and why I would use $range()? I just don't get it. Thanks.
I wrote [zip.js](http://gildas-lormeau.github.com/zip.js/) which is able to uncompress some files from a zip file stored on a HTTP server (see [this example](https://github.com/gildas-lormeau/zip.js/blob/master/WebContent/tests/test7.js)). It was written for a Chrome extension but may be used on the web.
Don't do collisions by just looping through every pixel. Give every collision object some sort of bounding box, test if any of those boxes overlap, and then use pixel testing within that box.
https://github.com/tbranyen/github-viewer/issues/11 :-)
This one ended up being the solution for me. Need to do some browser testing, but it should work out smoothy in what tests I've done thus far. Needed to open up a zipped file, grab image data, convert it to base64, and render it as image data URL.
Well nobody said software engineers were known for their social graces, so perhaps you are right; however, I still believe Backbone is relevant to this discussion in that it brings a common way to approach structural problems in JavaScript, which I believe ultimately makes it much easier for other engineers to come on board and dive into the code. As someone that came to JavaScript from a C++ and Java background, I was accustomed to doing things in a particular fashion, whereas with JavaScript, there are a slew of different ways to implement a class, model, mediator, etc. When I was introduced to the Backbone framework, a lot of these issues disappeared by providing a common way of working. There are plenty of other great frameworks out there too, I guess my main argument is that as long as your entire codebase shares the same structure/flow (ie: classes, models written the same way, separation of state, low dependency overhead, DOM interaction separated from business logic), it goes a long way in ensuring that your code can be both maintained and upgraded with relative ease.
Nice find.
Frameworks have little-to-nothing to do with the long-term, large scale maintainability of a project written in a language. Social forces take over at that point.
Here ya go: http://robdodson.me/blog/2012/06/03/make-your-own-jquery-deferreds-and-promises/ Enjoy!
How do you know that the query works fine, and what exactly fails?
Well, you do have a minor issue with your html... &gt; "&lt;div&gt;" ... "&lt;div/&gt;" Try &lt;div&gt;&lt;/div&gt;
Thanks for pointing that out. Unfortunately, it didn't fix the problem. 
You're missing a parameter in your function definition. target_id isn't being passed, which means that 'message' is actually target_id, and message isn't getting through to the function at all.
Ok, I fixed it but still nothing.
markup is not defined anywhere. Add: var markup = ''; with the rest of the vars.
Honestly, I went with it because: - My client was already using it for something - It was the first one I tested that worked out well. I'll give zip.js a shot, because I think you're right, it does look promising.
Did you define markup somewhere outside the showPost function. If not, try that.
Have you checked out jquery UI's draggable plugin? http://jqueryui.com/demos/draggable/
Very cool, I'll check this out. Thanks.
JavaScript is so awesome.
Interesting, but this looks a little more complex than what I was going for.
Dude, I have a few bug reports outstanding on the github account. Could you file a bug report? Then I can do these as a batch job :)
Please post a jsfiddle on github! I'll try to work it in as I have a chunk of fixes to do this week :)
It just goes to a full blue screen for me. Chromium 18 on Ubuntu
Yep, this looks like this issue to me as well.
&gt;I'd prefer if it were based on Webkit Titanium's Webkit is horribly outdated. It's like the one from Safari 4 or so. That's why I stopped using it. If it weren't for that issue, Titanium would be awesome. XULRunner, on the other hand, is always as up to date as you want it to be.
You can do it in PHP too: ${" "} = foo; $this-&gt;{" "} = bar;
I actually got it working...for the most part by redoing the script. This, more or less, gets me started: FB.api('/me/home?fields=message,link,name,picture', function(response) { console.log(response); if (!response.error) { var markup = ''; var messages = response.data; for (var i=0; i &lt; messages.length &amp;&amp; i &lt; 25; i++) { var message = messages[i]; markup += '&lt;p&gt;&lt;img src="' + message.picture + '"&gt;' + message.message + '&lt;/p&gt;&lt;br&gt;'; } document.getElementById('newsfeedposts').innerHTML = markup; } }); } I really appreciate the help though.
If you just want to turn a web app into a desktop application you could just wrap it in [CEF / chromiumembedded](http://code.google.com/p/chromiumembedded/). Very easy to do, extensible, and the [developers are super nice.](http://magpcss.org/ceforum/index.php) (: Drawback: it's pretty large (libs are about 20-30MB, I think). Somebody should do wxWidget bindings for node (:
Sweet, thanks.
A lot of people seem to be thinking of a slideshow like a keynote. dumbSlider is merely for showing a series of images inside a site, not a Powerpoint replacement. That said, I have considered making a jQuery-less version.
love the idea.. now if only I can think of something practical/useful to do with it...
Special shout out to scanner88 for all the help. 
"...and log in with your Facebook email and password." f*ck everithing that involves login only with facebook. dont have it and never will. viva la wikileaks 
Sounds really interesting and while everyone wants 100% accuracy 100% of the time it is always best to double check an automated process like this so shouldn't be that big of a issue. $50 dollars a year does sound cheap but developers tend to go the free is best route unless you have some serious functionality to back it up. My advise would be to release a "free beta version" which allows people to use and highlight anything that needs changing/fixing and suggest improvements as well as getting a feel for what people would be willing to pay for your service. You could do this with a focus group if you want to keep it controlled and out of the public limelight! 
it will be awesome next year, when win8 get more comercial.
You've created an integrated javascript code coverage tool that utilizes a web parser, [Closure Compiler](http://closure-compiler.appspot.com), [Script-cover](http://code.google.com/p/script-cover/)? Sounds awesome, but I would like to see a demo before I buy.
Psst, here's a protip: create an alias that you can use.
Microsoft Israel! :D
I think this is pretty cool, I especially liked the example where it automatically remembered your car space once you got out of your car.
Demo?
No plugins needed for this, but an opacity of 1 is completely visible, so I don't know if that's what you want. Anyway, using jQuery, assuming each photo has class name "photo", and assuming you want each animation time to be about one second each: $(".photo").animate({ opacity: 1 }, 1000 ) .animate({ opacity : 0.5 }, 1000); That's it, .animate() is built itself into jQuery, and works fine for your purposes. Check out the [documentation for it here](http://api.jquery.com/animate/), and hope this helps! Let me know if you have any other problems. 
[This](http://jsfiddle.net/rRtAq/7362/) is what I have so far. The code you gave me was better then what I had. I need it to cycle through each img and apply the animation. Is that possible.
http://jsfiddle.net/rRtAq/7363/ like that? Or are you trying for: http://jsfiddle.net/rRtAq/7367/
closer to the second one but I would like it to happen to each of them instead of all of them at the same time. http://jsfiddle.net/rRtAq/7368/ it won't fade out though??
download from github 
[Tasker](http://tasker.dinglisch.net/) and [Locale](http://www.twofortyfouram.com/) have been doing a very similar thing for a while now, they don't appreciably increase battery life.
is there anyway to add a pause on each picture.. i tried adding it myself.
I don't want to download it from github. I want to see if its worth my time.
Slidy was completely screwing up my browser history and back button.
This appears simple, but it also appears to just be an image carousel instead of a slideshow. Putting text into images is not a good idea. I did recently come up with this [slideshow](http://prettydiff.com/slideshow/) that is about simplicity. It's about as simple as what you are looking for but does not rely upon the user to the extra work of creating a bunch of images.
Are you limited to jQuery 1.2.6? (the version you had selected in the fiddle) If not, you can bump it to &gt;1.4 and use delay() (Added in 1.4) http://jsfiddle.net/rRtAq/7398/ (using jQuery 1.7.2) Otherwise, you need to use the setTimeout JavaScript native method
In Chrome the hot spots that detects the mouse don't line up with the UI very well making it difficult to play.
yeah i didnt notice i was in 1.2. Thanks again. exactly what I wanted.
thats awesome. didnt think about that.. I was just gonna make the opacity of each img like .25 so the z-index wouldn't matter. thanks
Where's the source? Oh, nvm, It's Microsoft...
You mean Depth.js? I don't see Backbone.js being mentioned in the article.
A lot of people in /r/programming are fixated on how this is Microsoft etc, but it's worth trying out. It works out like Tasker but its nice if you already know JS.
The program is written in Python using Scrapy and pieces of Closure Linter. The web interface is Django. At some point in the future I want to plug Rhino or V8 in order to execute the javascript. I didn't know about Script-cover. It looks interesting.
I've heard mixed things, and I seem to recall Titanium themselves saying it wasn't dead. Why do you believe it is?
Wait... Holy crap, this is Microsoft? But it looks... Good. I imagine Microsoft bought this company, and then didn't touch it?
Also, exercise DRY with subscript notation.
Great job, I've always loved metaobjects.
In IE "self" is a protected variable in the global scope. It's roughly equivalent to the window variable. Most browsers will let you assign to the variable and override the value, but in usual IE fashion, IE ignores any attempt to set it and just leaves it as the window. if you try the following in the IE console, you'll see the pain. self = 42; console.log(self); the latter should output: LOG: [object Window] which is clearly not '42'. It really should throw an error when you try to set it, but that would be too convenient. if you change line #5 to: var self = this; it will change that to a local variable and everything should work.
How does one even begin thinking of how to do something like that? Lots of math homework?
You aren't alone, I did too..
And on Plunker if you prefer: http://plunker.no.de/edit/OND7g1
I like wakanda - http://www.wakanda.org/ Maybe Open Laszlo could be considered one?
That's exactly why I am here. I was expecting floating meatballs. In 2D.
So.. the double blank lines are reserved for future documentation? ;)
Are 3D meatballs really too much to ask for? We put a man on the moon ffs.
Having written a library to generate metaballs in OpenGL back in 2001 you'll need to start digging into fluid dynamics, which is a lot of math. 
Glad to share with you. Spread the word. The more users the better and version 2.0 will really up the ante on the sharing/collaboration front.
You could always just use Cloud9. c9.io!!
http://www.xnumber.com/xnumber/windows_calc.htm
Gah... take it back... I'm wasting too much time playing with this! http://jsfiddle.net/TscNZ/70/
if you push things to the server then the user will get quicker feedback initially when they load the page but then further interactions will be a bit slower as it will have to make a round trip to the server. A mixture is usually a good thing. Have a look at http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html - basically twitter has changed from being solely front end to doing initial renders on the server side and handling the rest of the interactions through the client.
this is my worry -- our app currently is very modular...so when you hit a page, backbone/require.js has to load a bunch of JS/HTML templates via HTTP. i cant help but think that it'd be faster if those were 'stitched' together on the backend first....
Very interesting! I have a few random Javascript visualizations that I made, very similar to yours.. maybe I'll post them one day \^\^
Start making tic-tac-toe. Then make connect four. Come back and post examples of your games working here and we'll talk. --Robert
I was in the same boat some time ago, but rather than using some JS game engines out there, I am simply using frameworks instead. Most of the JS engines out there aren't really that great/finalized yet, especially since the HTML5/canvas spec/compatibility is still all over the place. You are probably better off just doing it from scratch with the use of frameworks such as SoundManager2, jQuery, etc. But, maybe I am completely wrong and the engines out there are amazing for every game type.
Create a PHP page that does a CURL request to http://www.google.com/ig/calculator?hl=en&amp;q=[YOUR QUERY] and returns the value of "rhs". Call that via jQuery $.ajax() :) If that doesn't work, maybe pay more attention in class and read the book? 
Wouldn't canvas be the way to go instead of a bunch of HTML elements?
pretty cool and inspiring
If heroku wasn't down. Hah.
For static and animation graphics, use [raphael.js](http://raphaeljs.com/). For I/O, read a bit about events in JavaScript. From your description, I wouldn't go for any type of framework/game engine or anything like that. It would probably be easier to simply write the rest of the logic yourself. As for sound I have not experience there.
If I'm not mistaken, aren't both those platforms used to create web applications? I'm looking to create desktop apps.
He wanted us to search it from the Internet and I'm not familiar with PhP yet.
&gt;what would be the pros and cons of a purely front-end application using backbone.js vs. a "standard web app" with Python/PHP/Rails? A modern "standard web app" would probably use backbone or spine to manage server IO...
Pros: - Assuming you've optimized your app it will be damn fast and snappy. - Application logic isn't duplicated. By this I mean you don't have a User model on the backend that does some logic as well as a User model on the frontend that does the same logic. Unfortunately this is happening on my current project and it's terrible. We're moving everything to the frontend. - The data being returned from your API is in JSON format, so you've already got a model built. Cons: - Initial load of your app will be slow to download scripts. This is ok imo, especially if you've got the proper cache-control headers. - Great test frameworks. Yes, there are a lot of javascript testing frameworks now, but they're still really young. Depending on how much testing you want it may be better to go with a framework with mature testing libraries. - A comma breaks your entire app. Hopefully you're using some type of static code analyzer (jshint, jslint, closure compiler) to prevent this, but the slightest error render your app useless. - JavaScript file doesn't download. Since you're using requirejs it's possible that one of your js files fails to download for some reason. This also will render your app useless unless the user refreshes the page. - Error reporting and logging. You won't know if an error happened, what caused the error, or what state the code was in when the error happened. I'm sure I could think of more for each, but I'm ready to go home now :)
Hello. I recently finished my first HTML5 / Javascript game: http://magigames.org/runestone_defense.html I looked at Crafty first, and went through the tutorial and I just could not wrap my head around it. It's a game engine. I realized what I wanted was a game library. I ended up using JawsJS. I just understood it right away. I was able to take on of it's examples, tear it apart into it's basic parts, and just see how to do things. http://jawsjs.com/ Game engines make you do things their way. Game libraries help you do things your way. Good luck!
Agreed. If it doesn't need a "game loop" then don't bother with a game engine. Just use frameworks like raphael JS
Corrected it! Sorry about that. Very noobish as I said.
You might get some ideas from [Akihabara](http://www.kesiev.com/akihabara/) 
I think we can assume that when someone is asking about how to sleep between loop iterations, we don't have to worry about optimizing for speed. =P
I'm building my own 5 in a row game. For now it's just html and js but once you have built your core game, you can add some fancy graphics. HTML5 would be my first lead...
Its an extensive bit of code, quite probable that its riddled with bugs and scoping issues. What is the error? Have included jQuery/zepto?
Javascript as a language doesn't have anything like C's "sleep" function... There's really not a good way to do it by placing a command where your //comment is... Instead, you'd need to do something like: var foo = [1,2,3,4,5]; var i=0, len=foo.length; function stepper() { if (i&lt;len) { console.log(foo[i]); i++; setTimeout(stepper, 1000); } } 
Here is an example of D3.js animation with a seekbar from an online livecoding editor called Tributary[1]. You could use callbacks on jQueryUI elements to control D3. I like to use Backbone.Modelbinder[2] to automagically update a model on UI change, which can be plain HTML5 sliders. [1] http://mainstem.org/delta/2822408/square.js [2] https://github.com/theironcook/Backbone.ModelBinder
Interestingly enough Oreilly is doing a webcast on this subject tomorrow, June 8, 2012 at 10:00 AM PDT / 1:00 PM ET. I was looking forward to it all month, but due to an unfortunately placed staff meeting I'm now looking forward to the recorded version. Here is the link they sent me in the reminder email: [link](https://event.on24.com/eventRegistration/EventLobbyServlet?target=registration.jsp&amp;eventid=416083&amp;sessionid=1&amp;key=0ADFA7FD214984DF0FE7A11046E0110E&amp;sourcepage=register)
 var x = 0; // assuming info uses non-numeric keys, otherwise you should be using for (var i = 0; i &lt; info.length; i++) for (var i in info) { setTimeout('$("#results").append("' + info[i].replace(/\"/g, "\\\"") + '&lt;br /&gt;");', x * 1000); x++; } This will delay one second between iterations by creating a timeout for each item in the info object. Each timeout will be set to execute 1000 milliseconds after the last one.
IE doesn't support a third parameter for setTimeout. It's not good form to rely on it.
What you should **never** do is something like this: function DELAY(time) { var k = [], i, o, d = function(c){ setTimeout(function(){ c(o) }, time); }; d.FOR = function(t){ var f = function(o){ for(i in o) { if(k.indexOf(i) &lt; 0) k.push(i); else continue; t(i); return d(f); } }; f.IN = function(obj){ o = obj; f(o); }; return f; }; return d; } Usage: var I = function(i){ $('#results').append(info[i]+"&lt;br&gt;"); }; DELAY(1000).FOR(I).IN(info);
I've been working on a large project (1.5 years so far) and our architecture uses a bit of both. The backend is written in Django, however after the HTML is served by the backend Backbone then takes over to progressively enhance the application to the point where in some cases there are no full page refreshes for a user any more. The benefit of this approach is that we can happily turn Javascript off and the site continues running (albeit without all the fancy bells and whistles). One of the things we are doing that greatly helps is that we are using Mustache templates on both the frontend and the backend so things can be rendered on both sides using only one set of templates. I will admit that this does take a bit more time if you attempt to make the Javascript off version work just the same as the Javascript on version, but if you are doing that then you're not doing progressive enhancement properly.
Change ++j to j++
That's rather disrespectful. Especially adding "lol" on the end.
When I started my game, I decided to use a Javascript SVG image rendering library called Raphael (http://raphaeljs.com/) and just normal DOM elements for menu items and text. It's actually pretty fast, and much better performance than Canvas.
javascript:%20var%20x=%20$(".content").find("a").each(function(){var%20href=$(this).attr("href");if((!$(this).hasClass("drowsapMorphed"))%20&amp;&amp;%20($(this).next(".drowsapMorphed").length==0)%20&amp;&amp;%20href%20&amp;&amp;%20(href.indexOf('gif')&gt;=0%20||%20href.indexOf('jpeg')&gt;=0%20||%20href.indexOf('jpg')&gt;=0%20%20||%20href.indexOf('png')&gt;=0)){var%20ext%20=(href.indexOf('gif')&gt;=0%20&amp;&amp;%20href.indexOf('jpg')&lt;0%20&amp;&amp;%20href.indexOf('png')&lt;0)%20?%20'.jpg'%20:'';%20var%20img%20=%20$("&lt;a%20class='drowsapMorphed'%20href='"+href+"'%20target='blank'%20style='display:block'&gt;&lt;img%20style='display:block;max-width:780px;'%20src='"+href+%20ext+"'%20/&gt;&lt;/a&gt;");$(this).after(img);}}); This should pretty much do it. I changed the part where it checks if the url has imgur in it to check for gifs. Not bullet proof and i didnt even try it out.
not so, setTimeout only recurses in the if statement, so it should never go beyond the length of the array. the only thing missing is the call to `stepper();` here's [a demo](http://jsfiddle.net/n3aWR/) if setTimeout were leaking we'd see a bunch of NaNs or errors or something. 
It's just for a bit of fun, so just me really. I found another way too, load the image in an AJAX request then read it as a string. Then use this to display it as an image: request.done(function(msg) { var logo = document.createElement('img'); logo.src = 'data:image;base64,' + msg; document.body.insertBefore(logo, document.body.firstChild); }); Which I found here: http://softwareas.com/ajaxjavascript-8-ways-to-create-graphics-on-the-fly Looked promising but didn't work for the image string, I'm guessing they're totally different formats and I was only going out on a limb. Your link looks much more promising though, thanks!
Yea, my bad, I somehow missed that if statement
`eval` statements are evil, never use them (you're implicitly calling eval when passing in a string as first argument in `setTimeout`/`setInterval`), use a function instead.
I tried Cloud9 but couldn't really get into it as an editor. I never thought of it as an alternative to Heroku though...
working on my apology letter now...
Have you tried http://www.pixastic.com/lib/
Not if you use the r.js optimizer that comes with RequireJS! Before pushing to production you can run the optimizer and it will minify and concatenate your JS, templates, etc into a single file. If you have modules that you want to load on demand, you can configure the optimizer to bundle them separately. In my large Backbone app, we have a "platform" module, and then individual application modules that can lazy-load on top of it. Even though we have hundreds (and eventually thousands) of JS and HTML template files. We wind up with fewer than a dozen after the optimizer is done. 
... or use VIM like a boss.
 function sleep(ms) { var start = +new Date; while (new Date - start &lt; ms) continue; }
Cute, but the Javascript could use some work. The choices could be stored as an array of objects which could be quickly indexed, so checkIt(i) would be replaced by choices[i] and you could also get rid of your incredibly long and repeated chain of if statements. As it is now, if you wanted to make some sort of non-trivial change to the "YOU WIN!" or "YOU LOSE!" messages, it would be a painful and error prone task.
This may be exactly what I'm looking for. I'll give it a try in a few hours. Many thanks!
Just install the [Reddit Enhancement Suite](http://redditenhancementsuite.com).
yeah, is this common, or is just more of a "in case there's a hiccup with HTTP"?
I did have a quick glance through last week but was unable to find anything of that nature, but again, didn't really know what sort of thing I was looking for, tyvm :)
This is technically correct, but almost always a bad idea, unless you're trying to make the browser unresponsive.
Cool -- thanks for the feedback -- always looking for more test cases that break.
eval statement are perfectly valid so long as you aren't evaluating user input. Don't be so OCD. Their flaws are not black and white, and there are perfectly fine times to use them; but a function would be better suited, sure.
=( sorry. I was a little drunk last night. 
I can't speak to if it's a common problem or not. I'd assume it isn't much of a problem since it's a pretty popular choice from what I can tell. It's more of an in case there's a hiccup as you said.
I only had jpg's on my desktop, and wondered why it didn't work in FF or Chrome... A little message would guide a new visitor in the right direction. Would you add JPG compatibility in the future?
I got the first example to work https://github.com/aaronm67/gradientfinder/commit/0552a37d9fb8760320630b6c790ff38dd7374b9c EDIT: Both of your samples seem to work now. Thanks for the feedback.
My random selection of JPG gradients seem to work now -- let me know if you notice any other issues.
I'm actually considering switching from vim, to webstorm. Mostly because of the debugging tools in the editor. This WebMatrix looks pretty good, but its just for windows...:/
Please and thank you. If you're writing a project for yourself, take advantage of CoffeeScript or ASI or whatever fancy patterns and idioms you want. But when you're designing for the rest of the world, remember what your literature and composition teachers said back in high school and **write legibly**.
getImageData/putImageData will let you address the individual pixels... but as a 1 dimensional array. See https://developer.mozilla.org/En/HTML/Canvas/Pixel_manipulation_with_canvas for a simple example.
then you wait till you sober up, and you stick to the [fluffy subreddits](/r/pics+funny+drunk) until then.
&gt; Bootstrap was at the center of the recent semicolon debate. Can someone give some context as to what the semicolon debate was about?
definitely agree. That's why I started http://modernjavascript.blogspot.com/2012/04/javascript-gentleman-introduction.html If you're just programming for yourself feel free to be a ninja but when you're targeting others or working with others you need to be more considerate
&gt; What makes JavaScript bugs different from bugs in any other language? Automatic semicolon insertion.
I run a service called [Proxino](https://www.proxino.com) which tracks/aggregates JavaScript logs and exceptions. But the space is surprisingly crowded. Several competitors who do similar things are [Errorception](http://errorception.com/), [Airbrake](https://airbrake.io/pages/home), and [Exception Hub](http://www.exceptionhub.com/).
semicolons: use them. end of debate.
If you code breaks and fails in production because you are too much of a badass to add a semicolon I would say you have a very serious availability problem. Availability is part of the security triad (Confidentiality, Integrity, and Availability).
The semicolons insertion is indeed a source of problems, especially when you start minifying you JavaScript files, but I don't think you need a bug-tracking system to solve this. Personally, I use [JSLint] to find missing semicolons and all other trivial, syntax-related "bugs". [JSLint]: http://www.jslint.com/
Been using this for a while - http://david.dojotoolkit.org/recss.html
Haha nice, but one thing. If I'm spock and go against the lizard I get "YOU LOSE!" but the text is green instead of red. Therefore, did I really lose?
The terms of the debate were actually a bit more extreme. 1. I code how i want 2. It's valid 3. get off my ass 4. **those who disagree with me are doing it wrong**
In your example, you're returning an anonymous object. If you had a function in that object calling another of its functions, the name of the object to call is not obvious - that what I mean by scoped name. You can refer to the object by an obvious name.
Semicolons are optional as statement terminators in Javascript. I would put forth that they're strongly encouraged, though. The Bootstrap source code does not use semicolons to terminate their statements, and in fact jumps through a hoop or two just to not use them. Nerds tooks sides, and a debate ensued.
its
It's one thing to disagree with how someone writes code. It's another to build meta-coding tools that fail to support the full language in all its gory details. Exploiting automatic semicolons is stupid. The minifier in this case is providing strong lint-like protection.
Hey, un-available code is un-hackable. 
Monty Python EDIT: [For those who didn't get it](http://en.wikipedia.org/wiki/%22It's%22_man).
Good question...Here is a JSFiddle with a solution using rx.js: http://jsfiddle.net/rcastillo/JmdNh/10/ . This sample has a function that creates a delayed array. rx.js enables you to asynchronous time and delay results. As already noted, JavaScript does not provide a sleep mechanism.
Your suggestion, as many others, are very efficient but all of them delay from the get go. I want it to immediately execute on the first item of the array, then delay from the second one on. 
If you're looking for something lightweight and clean, i like komodo7. Komodo-edit is free and almost as good. Its one of the only non-eclipse based ide's that supports javascript explictly as well as ruby and python
Just a minor nitpick, semi-colons are not optional statement terminators in Javascript, they are the statement terminator. They are optional in source code because the interpreter adds them if you do not.
It looks like you're considering security as "code which is written safely and won't break on different/future browsers," while I suspect Sector_Corrupt read it as "preventing crackers from stealing your passwords."
Get yourself a minifier that doesn't observe ASI and this example suddenly changes its tenor.
Why would you go out of your way to find a minifier that doesn't understand the language?
That doesn't make sense at all. A minifier that just blindly replaces newlines with semicolons would work fine with this example, and a minifier that removes newlines without adding semicolons would break the code loudly with a syntax error. In no case would this theoretical broken minifier of yours actually introduce a bug.
Well, what would jsmin do? (I unfortunately don't have it running on this workstation, a quick google gets me lots of UglifyJS but not jsmin front-ends.)
[ECMAScript-262 5.1 Edition 5.1](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf) **7.9 Automatic Semicolon Insertion** Certain ECMAScript statements (empty statement, variable statement, expression statement, do-while statement, continue statement, break statement, return statement, and throw statement) must be terminated with semicolons. Such semicolons may always appear explicitly in the source text. **For convenience, however, such semicolons may be omitted from the source text in certain situations.** These situations are described by saying that semicolons are automatically inserted into the source code token stream in those situations.
Technically, they are allowed to separate multiple statements in the same line. It's usually a gross violation of PEP8 and PEP20, though.
You can use semi-colons in Python, just not brackets. I really like Python because there's something indescribably **fun** about working with it. But I find the lack of brackets a nuisance when it comes to readability. However, the whitespace as syntax really does help rein in a lot of the formatting creativity I tend to run into when working on some PHP and Javascript projects.
I have updated with an immediate return of the first item.
I was ready to forgive the awkward construction of the last sentence in the first paragraph -- ironically caused by missing punctuation -- but the "it's" ended it for me. If you're going to add yet another viewpoint to this inane topic, you need to fucking proofread. Especially when the topic is syntax -- why should I listen to your opinion on Javascript when you don't understand English?
True, but I don't think that's the common justification. After all, the vast majority of semicolons (maybe 99.9%) are redundant in JavaScript, but people still recommend you put them everywhere, not just where they're needed.
You're not supposed to use a word in its own definition. You can't define coding securely in terms of coding safely. What do you mean, "safe"?
Part of your definition of "secure" is specifically including semicolons? Well yeah, then I guess obviously including semicolons is necessary for coding to be secure.... I wouldn't expect most people to use such a bizarrely specific definition though. :)
Oh, well, yes. Isn't Brandon Eich even a little surprised that the language has lasted this long? I feel like that's one of the arguments that the CoffeeScript fans like to tout in their favor.
If you don’t understand how statements in English are terminated, then you just don’t know English very well I have learned to use periods, that's why they aren't present When I'm writing a technical essay I plan on publishing to the public, i make sure 2 abuse my grammar as much as possible Most people like to read it that way, don't they
I agree. To be more clear I should have said, "are optional in JavaScript *source code*." 
It boils down to the fact that although javascript has a lot of cool stuff...it also has a lot of bad stuff, and there are best practices which enable you to safely avoid some of these issues...using semi-colons is one such example. Really, it's just the sensible thing to do to ensure consistent working code...put the semicolons in there...it won't kill you, I promise.
That is not how ASI works. If you just replaced runs of whitespace containing new lines with a semicolon you would still end up breaking valid code. Consider where should a semicolon be inserted in the following bit of sloppy but valid code: for (a = 0; a &lt; 3; a += 1) b += 1 b //b === 3
Well no, but Chrome is following the standard here. So, according to the standard it's beyond error.
&gt; That is not how ASI works. If you just replaced runs of whitespace containing new lines with a semicolon you would still end up breaking valid code. Um, exactly.... You're just proving that andytuba's theoretical "ASI unaware" minter is broken, which is the point I was making.
&gt;If you don’t understand how statements in JavaScript are terminated, then you just don’t know JavaScript very well, and shouldn’t write JavaScript programs professionally without supervision, and you definitely should not tell anyone else how to write their JavaScript programs. My English teacher refused to teach me how to use semicolons because she already knew how they were used. Her logic was flawed and so is Schlueter's.
Oh that clearly didnt answer your question. Look at this http://jsfiddle.net/8zWPw/
Yeah, Id get crazy and do something like var choices =['Rock', 'Paper', 'Scissors', 'Lizard', 'Spock'], outcomes = [[], [], [], []]; outcomes[0][1] = 'Some Text'; outcomes[1][0] = outcomes[0][1]; ... //choices are made someelement.innerHTMl = outcomes[choice1][choice2]; Im sure there is a better way The op's link is fast though
There's a special place in Hell for punctuation nazis as well as Comma Deniers.
We've added full fullscreen support to Firefox. It's a faux fullscreen, but it works. http://epiceditor.com
Yep, fixed the discoverability of this stuff.
Robust. I'm aware of the CIA triad but using the general term security for that is a bit disingenuous. And I would argue that if your availability and uptime strategy is "I use semicolons" that's a little bit insane. Large JS codebases need tests, semicolons or semicolonless.
The fact that jsmin doesn't actually parse JS doesn't make my JS broken, it makes jsmin broken. Just because some people think it's broken in a good way doesn't mean it isn't broken.
Fairly accurate, but you give Coffeescript too much credit. That was invented by a Ruby hipster with a moderate grasp on Javascript who's so far up his own ass about how awesome he is that, instead of doing the _sane_ thing and creating a cross compiler for Ruby-&gt;Javascript, he created his own little language full of features that have a variety of uses, not the least of which is reducing verbosity to near-nothing and leaving us with a mess of garbled nonsense. Which, coincidentally, is about what the compiled Javascript looks like when all is said and done.
I think you're missing the point of CoffeeScript (it's on their website ) : *It's just JavaScript*. Ruby and Javascript have different object models, rules about scope, etc. and if you want to use your JavaScript code in a Ruby-&gt;JS compiler, you'd probably end up with something like Pygments, where you *can't* reuse stuff like jQuery and a bunch of already existing ( and useful ) JavaScript libraries. About verbosity: people will write shit code in any language. Just because Java *is verbose* doesn't make any code anybody writes in it any better than code written in Perl, PHP, Ruby, Python, Lua, whatever. The outputted JS *does suck at times* though, I'll agree on that one for sure. Hopefully CoffeeScript 2 ( some dude kickstarted over 10 grand to rewrite the coffeescript compiler with more helpful compiler errors *and source maps* ). I personally don't code in CoffeeScript, but I don't hate it. Edit: Also dude Jeremy Ashkenas is an awesome guy. He has far more than a "moderate" understanding of JavaScript ( he also wrote Backbone and contributes to underscore ). I haven't seen any evidence of his head being up his ass.
I know the claim is that it's just Javascript, but I don't agree. It's a bunch of syntactic sugar on top of JS. It's more syntactic sugar than actual code. In fact, it's really just syntactic sugar taken too far. The argument about verbosity was actually more a personal preference gripe; I find the over-reduction to sparse symbols and paren-less function calls to be very difficult to read, doubly so for function definitions (`-&gt;`) and context bound function definitions (`=&gt;`). Those are not easily distinguished to me, and thus I find the language literally hard to read. I'm aware there are different object models for Ruby and Javascript, but he could easily have defined a subset of Ruby to call Coffeescript and published a cross-compiler that accomplished the same thing as CS does now, except without having to create a brand new language to do it. I honestly do not see any features in it that are not a part of Ruby. I'm not saying this out of some knee-jerk reaction to changing my beloved language of JS (it's not beloved, I promise), but out of having used Coffeescript and seen first-hand that it hides some complexity from you in a way that can actively hinder your ability to develop (e.g. the lexical scoping rules) as well as having an awful time debugging the language. I'm much happier debugging what I wrote and not some horrible mangling of my code into Javascript. Plus, Coffeescript minifies like crap. I'm not saying my handcrafted Javascript is awesome, just that the generated output of Coffeescript is less awesome than what I can write by hand.
Looks alright, but no better than vim or sublime text 2, at least not just by looking at it. What made me try webstorm was the debugging part for node. That is just awesome to have right in the editor.
&gt; I'm aware there are different object models for Ruby and Javascript, but he could easily have defined a subset of Ruby to call Coffeescript and published a cross-compiler that accomplished the same thing as CS does now, except without having to create a brand new language to do it. But then you have a language that looks like Ruby, compiles to JavaScript, and behaves like neither. 
&gt; Well no Yes. That is exactly the point you are making. Standards allow all kinds of stupid crap. Just because its in the standard does not make an example brilliant, correct, successful, or even portable and stable in the wild. Standards conforming code can still produce results entirely outside the expectations and intentions of the author. &gt; So, according to the standard it's beyond error. According to the standard the code should not immediate break, but that does not making safe and absent of errors. Not throwing an error is not the same as sturdy or reliant. If this deviation is the result of sloppy crap allowed by the spec the author still has potentially faulty code and still looks like a dumbass when their bug is exposed to the world.
Solid advice. Though your naming convention is a bit odd.
There are no associative arrays in javascript, unlike PHP. Only numeric arrays and plain objects.
FYI, Chrome supports the [FileWriter interface](http://www.w3.org/TR/file-writer-api/#idl-def-FileWriter) for more than 1 year.
As Qui-Gon Jinn once said "Your focus determines your reality." People who think up things like this are drawn to beautiful problems. They focus on them, they can't stop thinking about them, and eventually, if they're clever enough, they think up ways around and/or through them. I'm very creative, but have very minimal maths knowledge. I crapped out at trig. I've gone on to work a lot of things out slowly for myself, though, as needs arose. I figured out what sine and cosine were back in high school by playing with a calculator for a few hours and doodling on graph paper, and because I could feel that they would be helpful, and they were, all the time in my programming needs. It was a nice way to learn it. I really grokked it after that. I wanted to show someone back in gradeschool what my room looked like (film cameras back then!), so I got a protractor and used it with one eye at arm's length to try to get the angles of things relative to each other to map out and draw my room realistically on paper, in the process accidentally inventing single-point perspective, which I would be "taught" many years later in art college. I just realized that all of the lines on the walls were converging to the same spot - the sighting through a clear, grade-school protractor idea had actually worked quite well. In fact, before finishing the drawing, I scrapped the protractor and just started using a ruler from the point where all the lines were perfectly converging for each new 'depth' line I needed. I was being lazy, wondering about how and why it worked that way, but I was really doing exactly what artists do when using single point perspective. I then spent weeks noticing vanishing points everywhere I went, which definitely helped me visualize things better afterward. A lifetime of that kind of curiosity, seeing puzzles in the makeup of the world leads to being able to write things like this (and I've written perhaps a couple thousand by now). I remember the blocky pixels on my 386/33MHz PC back in 1992, as I drew lines in Qbasic, and getting lost in wondering how it determined which pixels to draw. I then spent hours drawing lines, counting pixels, drawing on graph paper, trying to get into the mind of the Qbasic's line-drawing routine. By the end of the day I had - unbeknownst to me - recreated [Bresenham's line algorithm](http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm). Drawing geometric shapes out one day, I derived - again, unknowingly - quadratic bezier curves. Then I played a bit more and figured out cubic beziers, and realized I could probably just keep going. I implemented them in Flash, and had a field day making all kinds of things with that concept for awhile. I didn't know they had a name for a few years after that, and I didn't realize that they're used in all manner of programs I had been using at that time, including Flash :) I have often not known that I've reinvented things, though now I just presume it, and even seek out smart folks and ask "I just thought this up - does it exist and have a name already?" It always does. I remember the day in early high school when I played a bit and figured out I could use the Pythagorean Theorem for 3D distances, too. That was a good day for me in Qbasic. I've done stuff like this all through my life, with no specific, formal education to go by in most cases, but little scraps of things from all over that I pull together with current needs (usually just an idea for something visual that I want to code up) and fight with until it looks right. It's lead to "okay" solutions in many cases that probably have far better mathematical equivalents, but which I just solved creatively. For example, I used a binary search method to evenly set markers along beziers, instead of finding a real answer with solid math. I came up with a simple collision detection concept that worked well, and put pretty convincing spin on objects based on how they hit, and it only used, IIRC, the simplest addition and multiplication. I remember two instances wherein my simplest-possible-solution made many people wonder how I'd done it. One was a Pong implementation that kept beating my friends. The code resolved to no more than "if ball is moving toward computer paddle, move up or down at constant speed toward where the ball is right now." It didn't even move when the ball was heading toward the player :) The other one involved a few different toys that let you throw things around and have them bounce nicely, with inertia and such. They were really fluid and fun. The only thing happening in the code there was addition, and an occasional multiplication operation. It could hardly get simpler. Other times I create things pretty close to real-world solutions that smart folks also create. I was walking in the woods behind my parents' house some 10 years ago, taking photos, and wishing that cameras would expose things nicely across the full range of brightness values. I'd taken some photo classes, and had used tricks both in the darkroom and Photoshop to make things look nice, including taking bracketed exposures and composing and blending together the nicer areas. That day I thought "A computer should be able to figure this out for me." I pondered a bit, and basically came up with exactly what HDR photos are - look at the pixel values across the range of all (or some subset) of exposures and find the pixels that are best saturated. Use that to create a kind of heat map of which image to use (simple grayscale with gray values mapped to image numbers). I even thought of blending that map so it wouldn't be so grainy in its image selection, and I thought of a bunch of other ways of generating the map that wouldn't look as stepped as the first idea might. I don't know if that's what HDR images do, but it sure looks like it. I didn't find out about their existence for about a year after I'd dreamed them up. I think many people can do this. It's all about focus. I love this kind of stuff, so I'm always running headlong into it, staying up until 4AM to figure out why something won't work. Back when I was around 10 or so - back in the 80s - I loved photocopiers. They were like magic in the pre-computer world. I photocopied an image at my stepdad's office one day while waiting for him, and 2 of the colors blended together into the same gray. I think many people wouldn't notice it, or would be disappointed that it happened, but that's my world. I was intrigued. I looked long and hard at that image, and started copying other things. This pink and that light blue are the same gray? Amazing! I immediately wondered about the obvious conclusion - could I make a painting which when photocopied would be entirely gray? Well, that was pure sorcery, and I thought about it for ages after that. (to be continued...)
No voodoo involved, but unfortunately much less awesome than you imagine :) In general, no system can just know what a bug is, because the system can't know what the application is supposed to do. The only exception is if you have some automated tests, but in this case you explicitly tell the test what behavior to expect. To clear up the confusion, let's first say that there are two different types of systems we are talking about here. First, there are bug tracking system. They help you keep track of the bugs, set priority, etc. However, you or you QA team still have to find the bugs and report them. They are useful for larger projects with many people involved, but if you are working alone, you probably don't need one. As far as I know, these are external systems that don't depend on the language used, hence my original question. Read more on wikipedia if you want - [Bug tracking system]. Completely different story is to use a kind of a health monitoring system, like those suggested by unignorant. These systems can log exceptions and other events and report them to you. They can't find all bugs, but are still very useful. And, of course, these systems depend on the language. [Bug tracking system]: http://en.wikipedia.org/wiki/Bug_tracking_system
I haven't really thought about keeping game logic and rendering separate. Since everything lives in a requestAnimationFrame() loop, I thought I could just update game objects and than render the new game state. Or would this cause problems due to JavaScripts inherent asynchronous nature? Now it sounds even more complicated than before.
Don't be afraid to separate the game loop (logic, physics, etc) from the drawing loop - [See this article](http://nokarma.org/2011/02/02/javascript-game-development-the-game-loop/index.html) As you say in another comment, requestAnimationFrame() is what you'll probably want to be using for scheduling the next draw. Draw as little as you can for the best performance, e.g. in a space invaders game you could redraw just the top half of the screen if the enemies have moved but the player hasn't (and there are no bullets to show). You'll want to look into prototypes (the object.prototype, not the prototype.js library) to emulate inheritance in Javascript. [This article](http://howtonode.org/prototypical-inheritance), though aimed at JS on the server, looks quite helpful.
Thanks, the article seems to answer some questions.
Is the idea that another frame is requested only after everything that happens in the frame calls back? I wonder if there's some unpredictability there. On the other hand everything I've seen advocates the general approach you describe. Also when an input event occurs, presumably the handler fires outside the loop, but does that mean that there is a queue of events when the next frame starts?
Why would total synchronization be a bad thing?
you can take a quick look at john resigs javascript "class" with simple inheritence: [link](http://ejohn.org/blog/simple-javascript-inheritance/) its easy to use and helps for a better structure in your game.
Look at Mootools if you want classical OOP mootools.net 
I wasn't trying to give it any credit really, it's just one of a number of languages that tried to do the same thing, except Brandon Eich acknowledged it as something he's looking at for inspiration on what to fix about JavaScript (namely, the function literal shorthand) and Douglas Crockford said it wasn't terrible. If you couldn't tell, I'm only half serious. Not every hipster came from Ruby and not every Ruby webdev who turned to JavaScript is a hipster. It's pretty clear where the entire debate is coming from, though, and the personal taste of a couple of smart guys working on their own private projects isn't really part of it.
This is a perfect case for Frame.js, a flow control library for sequencing functions. Includes a way to easily add delays. https://github.com/bishopZ/Frame.js
there shouldn't be a choice, that is the mistake.
How does extraneous punctuation make code easier to read?
I knew you were overgeneralizing for humor value (which I appreciated), but I did misinterpret your feelings on Coffeescript; my apologies for that. With regards to your comment about Brendan Eich's feelings on the subject, I hope they don't take too much inspiration from CS on the direction JS will go. I'd much rather see Ruby natively supported in the browser than JS turned into CS as the only language really available for web programming.
this is awesome! 
I use this library all the time. Shit is tight
Code isn't like English though. There is no such thing as a paragraph in JS and unless you are in the middle of an expression statements end with newlines. I don't think it's useful to compare code to English on such a level. Parentheses around entire conditions don't group anything, so I fail to see your point about using them for organization. I don't think anyone is arguing that parentheses are never needed for anything.
There are many alternatives to this. I mainly did it for the fun of it and to build it the way I would want it. The good thing about this is it's small and will work with jQuery, prototype, or without any framework.
Thanks!
Very compact and fun! 
I really don't think memes or similar imagery are appropriate in /r/javascript.
Just a joke. I have to work with Javascript every day unfortunately. 1. open console 2. type ` ",,," == new Array(4) ` 3. result is true?!?!
The RHS is coerced into a string (`ToString` is applied to it) by the abstract equality comparison algorithm. `ToString` of an object calls its `toString` method, which in the case of arrays joins its elements together with comma. It's not as crazy as in `[1] == true`, which holds because *both* operands are coerced (into numbers). Relevant spec portion: http://es5.github.com/#x11.9.3
&gt; unfortunately Why? Yes, there are terrible parts of the language, but in general it isn't too bad as a programming language, and some parts makes it especially well-purposed for its original intents (such as how the language is driven by an event-queue system rather than requiring one to mess with threads and race conditions. Event-driven and GUI programming fits well together).
The moral of that story was to write proper if statements, not this unreadable bullshit. !condition &amp;&amp; behavior() Gross. If(!condition)behavior() Isn't that nicer?
Fair enough. From the way you worded your previous posts you sounded like one of those "JavaScript isn't like &lt;insert mainstream language here&gt;; hence it sucks" people, but I guess I was wrong. :-)
this is not funny, and this is a subreddit for grownups. but it is a reason to use === for comparison
Yeah I understood that part, I was more confused about the picture of the Khaleesi.
Why would anyone write this code? Stupid code -&gt; stupid result
Why would I use this instead of cloudflare?
are you the author of this? if so, I've got a question or two :-)
Always remember that by using a remotely hosted script you are giving a third party the keys to your kingdom. If they decide to become evil, or are compromised, they can start stealing any information that your users have access to. I almost want to see one of these companies pull a long con by establishing a CDN for 6 months or a year and then one day flipping a switch which silently phones home the admin credentials of every site using the service. The schadenfreude alone of hundreds or thousands of web sites waking up to all of their user data/content deleted overnight would be almost too much to take. Yes, the web security model is shit. 
You surely have point here. But also lets not forget that in lets say 10 years of publicly available CDNs (free ones included) not once have this happened. Maybe people are not that evil after all? :) Web is build on trust. Even now half the internet can get compromised if someone hacks twitter/facebook/google's social buttons (my bank even has them on their client pages after you login). There is nothing we can do but use our instincts and decide if we can trust each service/person.
this looks odd to me. not really pretty and why would you want it to be more confusing / harder to read? Seems to me like this is designed for people who want to throw it in their websites but might not be able to "fully code it" themselves
[Dvorak](http://duckduckgo.com/Dvorak_Simplified_Keyboard), for sure.
In the encryption examples, why did you define an anonymous function and just call the `atob` and `bto` methods instead of doing something like: `package.settings.encrypt = window.atob` and likewise for decrypt? I also don't understand the manual call to the `init` method. If it takes argument for customization, document them in the README/Wiki. As it is, it's just an extra line of code I need to remember to write. I would suggest rolling it into the constructor, and if it takes parameters, pass them through the constructor call.
Good point about remove! Adding that now. Regarding init, this is a simple implementation of the module design pattern that I tend to gravitate toward. Could be stripped out if you guys feel strongly about it, but having it in place opens us up to having privatized methods or variables in the future if that becomes necessary.
Thanks!
Hey guys, Thanks again for all the feedback! It's always very helpful having others give their thoughts. Since all of you seemed to prefer passing parameters directly to the constructor, I have removed the init method and allowed the methods to be passed in via an args object directly to the constructor. Any other feedback you can give will be appreciated!
Netscape had Layer.load() before IE did.
you're "not a huge fan" of ++, but still didn't know the %= operator ... oh my! What's wrong with the increment operator?
From Crockford: "++ and -- The ++ (increment) and -- (decrement) operators have been known to contribute to bad code by encouraging excessive trickiness. They are second only to faulty architecture in enabling to viruses and other security menaces. There is a plusplus option that prohibits the use of these operators."
I guess it's a cool boorkmarklet but I don't understand why you use jQuery just to append a string in the innerHTML of the BODY element.
That's cheating. It's only using jQuery to append the image. And it doesn't generate a QR image but simply calls an external API.
&gt; One line of JavaScript that requires jQuery You don't write jQuery. Probably my biggest pet peeve. As [check_cs says](http://www.reddit.com/r/javascript/comments/uvywq/show_reddit_url_to_qr_bookmarklet_one_line_of/c4z1hfr) though, you don't even need to load 33000 bytes of third party code.
The outcome is the same if not better from cloudflare. Cloudflare also does sideloading of JS. Cloudflare might not offer JS hosting but it does deliver my files to the end user so realistically speaking it kinda does.
All they're doing on that website is moving the little #navline indicator left or right, depending on which section you're in. The jquery they're using is; $('#navline').stop().animate({ left: "44px" }, 500); //for "home" $('#navline').stop().animate({ left: "152px" }, 500); //for "about" etc. 
But that doesn't do the same thing as the jQuery solution. You're missing a plus sign. When you see it.
Well, if jQuery is *already* loaded, may as well leverage it. For instance, I have several reddit/RES-specific bookmarklets that I wrote with jQ because why the heck not. (e.g. hide sidebar). However, that's a bit of a different context.
Just using `window.open` is even easier. And if you use `getSelection` then you can use the same bookmarklet to grab selected text within the page, if there is any: `javascript:void(open('http://chart.apis.google.com/chart?cht=qr&amp;chs=300x300&amp;chl='+encodeURIComponent(getSelection()+""||location.href),'qr','width=350,height=350'))` Or stick http://qrcur.com/? in front of the URL, like http://qrcur.com/?www.vcarrer.com/2012/06/url-to-qr-bookmarklet.html Or you could use http://asciiqr.com/?t= and get a unicode version instead of an image.
Whoa whoa whoa... hold up. I was looking for constructive criticism not trolling. I got that from the others, but not from you. I don't blindly accept things, but given that I've only been working seriously with JavaScript for about six months it's wise of me to get a solid base of habits from someone who obviously has a ton of experience. There are plenty of things he says that I don't agree with.
Here is more complete version with x Close Button: document.getElementsByTagName("body")[0].innerHTML="&lt;div id='qrcode' style='position:absolute; top:0; left:0; z-index:99993; width:550px; height:550px;background-color:#fff; padding:49px; border:1px solid #ccc'&gt;&lt;img src='http://chart.apis.google.com/chart?cht=qr&amp;chs=500x500&amp;choe=UTF-8&amp;chld=H&amp;chl="+window.location+"' /&gt;&lt;div style='position:absolute; top:0px; right:0px; color:#555; font-size:18px; width:20px; height:20px; line-height:20px; text-align:center; cursor:pointer; font-weight:bold; background-color:#ddd; padding:3px;' onclick='$(this).parent().remove();'&gt;x&lt;/div&gt;&lt;/div&gt;";
Actually I'm not quite sure at the moment, but could it be that the transformation completely moves the grid on which the square is painted on? I'll append a picture to show what I mean :) [here](https://imgur.com/q8mO3)
So…a less feature rich version of [Postal.js](https://github.com/ifandelse/postal.js)?
This is somewhat same as what they do on codeacademy for the blackjack game. Card.number is used for score while card.realNumber is used to get the right img for the card. I then store them in array and splice a random card so the same card cant be drawn twice, then you just call newDeck when you want a new deck, which is probably after each hand. function Card(number) { this.number = (number % 13)+1; this.realNumber = number; } var deck = []; for (i = 0; i &lt; 52; i++) { deck[i] = new Card(i); } var newDeck = function() { for (i = 0; i &lt; 52; i++) { deck[i] = new Card(i); } }; var randomCard = function() { var card = Math.floor(Math.random()*deck.length); return deck.splice(card, 1)[0]; }; 
Or just use a damn +=.
last time i bug you haha. stupid client wants that same code to repeat endlessly. anyway to do that?
speed isn't my concern - it's more download size. I've got six lines up there, two for each draw, lose and win. One line for the test and one for the outcome. Here is what is currently on the site - which would you prefer?: var outcome; if (player_choice[0]==pc_choice[0]) { outcome = ''; //scissors } else if (player_choice[0]=='scissors' &amp;&amp; pc_choice[0] == 'paper') { outcome = '&lt;p&gt;Scissors cut paper. &lt;/p&gt; &lt;p class="win"&gt;YOU WIN!&lt;/p&gt;'; } else if (player_choice[0]=='scissors' &amp;&amp; pc_choice[0] == 'spock') { outcome = '&lt;p&gt;Spock smashes scissors. &lt;/p&gt; &lt;p class="lose"&gt;YOU LOSE!&lt;/p&gt;'; } else if (player_choice[0]=='scissors' &amp;&amp; pc_choice[0] == 'rock') { outcome = '&lt;p&gt;Rock crushes scissors. &lt;/p&gt; &lt;p class="lose"&gt;YOU LOSE!&lt;/p&gt;'; } else if (player_choice[0]=='scissors' &amp;&amp; pc_choice[0] == 'lizard') { outcome = '&lt;p&gt;Scissors decapitate lizard. &lt;/p&gt; &lt;p class="win"&gt;YOU WIN!&lt;/p&gt;'; //rock } else if (player_choice[0]=='rock' &amp;&amp; pc_choice[0] == 'paper') { outcome = '&lt;p&gt;Paper covers rock. &lt;/p&gt; &lt;p class="lose"&gt;YOU LOSE!&lt;/p&gt;'; } else if (player_choice[0]=='rock' &amp;&amp; pc_choice[0] == 'spock') { outcome = '&lt;p&gt;Spock vaporizes rock. &lt;/p&gt; &lt;p class="lose"&gt;YOU LOSE!&lt;/p&gt;'; } else if (player_choice[0]=='rock' &amp;&amp; pc_choice[0] == 'scissors') { outcome = '&lt;p&gt;Rock crushes scissors. &lt;/p&gt; &lt;p class="win"&gt;YOU WIN!&lt;/p&gt;'; } else if (player_choice[0]=='rock' &amp;&amp; pc_choice[0] == 'lizard') { outcome = '&lt;p&gt;Rock crushes lizard. &lt;/p&gt; &lt;p class="win"&gt;YOU WIN!&lt;/p&gt;'; //paper } else if (player_choice[0]=='paper' &amp;&amp; pc_choice[0] == 'rock') { outcome = '&lt;p&gt;Paper covers rock. &lt;/p&gt; &lt;p class="win"&gt;YOU WIN!&lt;/p&gt;'; } else if (player_choice[0]=='paper' &amp;&amp; pc_choice[0] == 'spock') { outcome = '&lt;p&gt;Paper disproves Spock. &lt;/p&gt; &lt;p class="win"&gt;YOU WIN!&lt;/p&gt;'; } else if (player_choice[0]=='paper' &amp;&amp; pc_choice[0] == 'scissors') { outcome = '&lt;p&gt;Scissors cut paper. &lt;/p&gt; &lt;p class="lose"&gt;YOU LOSE!&lt;/p&gt;'; } else if (player_choice[0]=='paper' &amp;&amp; pc_choice[0] == 'lizard') { outcome = '&lt;p&gt;Lizard eats paper. &lt;/p&gt; &lt;p class="lose"&gt;YOU LOSE!&lt;/p&gt;'; //lizard } else if (player_choice[0]=='lizard' &amp;&amp; pc_choice[0] == 'rock') { outcome = '&lt;p&gt;Rock crushes lizard. &lt;/p&gt; &lt;p class="lose"&gt;YOU LOSE!&lt;/p&gt;'; } else if (player_choice[0]=='lizard' &amp;&amp; pc_choice[0] == 'spock') { outcome = '&lt;p&gt;Lizard poisons Spock. &lt;/p&gt; &lt;p class="win"&gt;YOU WIN!&lt;/p&gt;'; } else if (player_choice[0]=='lizard' &amp;&amp; pc_choice[0] == 'paper') { outcome = '&lt;p&gt;Lizard eats paper. &lt;/p&gt; &lt;p class="win"&gt;YOU WIN!&lt;/p&gt;'; } else if (player_choice[0]=='lizard' &amp;&amp; pc_choice[0] == 'scissors') { outcome = '&lt;p&gt;Scissors decapitate lizzard. &lt;/p&gt; &lt;p class="lose"&gt;YOU LOSE!&lt;/p&gt;'; //spock } else if (player_choice[0]=='spock' &amp;&amp; pc_choice[0] == 'rock') { outcome = '&lt;p&gt;Spock vaporizes rock. &lt;/p&gt; &lt;p class="win"&gt;YOU WIN!&lt;/p&gt;'; } else if (player_choice[0]=='spock' &amp;&amp; pc_choice[0] == 'scissors') { outcome = '&lt;p&gt;Spock smashes scissors. &lt;/p&gt; &lt;p class="win"&gt;YOU WIN!&lt;/p&gt;'; } else if (player_choice[0]=='spock' &amp;&amp; pc_choice[0] == 'lizard') { outcome = '&lt;p&gt;Lizard poisons Spock. &lt;/p&gt; &lt;p class="win"&gt;YOU LOSE!&lt;/p&gt;'; } else if (player_choice[0]=='spock' &amp;&amp; pc_choice[0] == 'paper') { outcome = '&lt;p&gt;Paper disproves Spock. &lt;/p&gt; &lt;p class="lose"&gt;YOU LOSE!&lt;/p&gt;'; } if (pc_choice[0]!= player_choice[0]) { document.getElementById("battle").innerHTML = '&lt;br&gt;'+ player_image + ' vs ' + pc_image + outcome; } else { document.getElementById("battle").innerHTML = 'You both chose ' + pc_choice[0] + '&lt;br&gt;&lt;p&gt;'+ pc_image + "&lt;/p&gt;&lt;p&gt;It's a tie&lt;/p&gt;"; } 
This is really cool, and I hope you don't mind if I throw in a newb question? How does _keydown_listener know that the pressed key *is* the parameter 'e'? I see where the 'keydown' and 'onkeydown' events initiate _keydown_listener. But I don't see where "e" points to that keydown event. EDIT: I'm gonna go out on a limb and guess that it's just automatically passed as the first (or last?) argument in any function called via .addEventListener and .attachEvent (assuming they're listening for a key press) or .onkeydown 
thanks a lot. I know java fairly well, but javascript and jquery make me just stare at the screen till my head hurts.
Thought of that too. I put the transform statement everywhere possible and still nothing. [I found a solution](http://stackoverflow.com/questions/10985077/d3-js-odd-rotation-behavior) though in case anybody else has this problem. Thanks for answering guys
I think most people are looking for news and commentary on Reddit. I'd recommend StackOverflow for practical programming issues.
Are you talking about web service calls? If so, using c# makes no difference there, nothing in the language itself prevents it from supporting asynchronous scenarios. The advantage of compiling from a strongly typed language such a c# to JS is that you get a lot of help to maintain a large code base. First, you get compile time error checking. In addition, you can use Visual Studio's refactoring tools and most of the extensions available as well. In addition, you can get a lot more information about your program from the compiler which opens the door to many interesting scenarios. Oh and you can also share some code between client and server, like entity classes. Of course all of that stuff is most interesting to ASP.NET developers.
Blocking and non-blocking I/O is not a language-based construct, but works at the operating system level. You can have non-blocking I/O in any programming language if it's interfaced with the operating system properly. if you're talking about Node.js, it's a unique case where the language is actually built upon the low-level operating system calls, which makes everything non-blocking. This is not the case here, since this is a compiler from one language to another, and has absolutely nothing to do with what you're talking about.
&gt; C# really isn't Except [TPL](http://msdn.microsoft.com/en-us/library/dd537609.aspx) changes all that, especially in .NET 4.5 CLR.
Except C# has had lambdas as elegant as JavaScript since C# 2.0. And APIs that use them. The unique bit of JavaScript is the *absence* of APIs,especially blocking ones. I don't mean to downplay JavaScript at all though. It took some restraint to keep the API set sparse of blocking functions. 
He knows his stuff - I had trouble understanding what the benefit was compared to callbacks. Although I'm 35 - I'm getting set in my ways.
Thanks man
Nice info there!
Is this going to be Texas Hold'em? I started building something like that once and it wasn't easy. One of the hardest parts was finding out which player can make the best combination with the cards on the table which consists of 2 sub-problems: 1. Scoring hands: how do you detect a royal flush? 2. Calling the score function for every possible combination to find the best.
Sure the code is not for heavy copypasters. That are just my notes and tests for the algorithm/algorithms, as I have tried several ones. Thank you for your feedback, but notes about some "pathological cases" withot any example of this cases are useless.
Thanks for the feedback! I'm really liking some of the things you did here. Send a pull request in github so you can get some credit.
You're welcome! If you do go more front-end I can tell you this: you'll have a lot more fun :)
[Just like MooTools?](http://mootools.net/core/) I still don't like this kind of build. It is manual dependency management and it is an ass to keep up to date when adding things. I think AMD is the best was to allow custom builds of libraries, not checkboxes. When you are done you just run a command and everything you need is dumped in one minified file with no more than you are actually using. I am trying this out in a library of my own. Seems to be working well so far.
i've never made one so i'm not sure, but wouldnt you just simply preload all possible winning combinations with a value (royal flush being the highest value) and then checking each player's hand for any of those combinations? if each card has properties such as (deck number, color, suit) then it seems it wouldnt be that hard to detect a royal flush.. but I could be way off here.
Will loading custom modules of scripts off your own server really be faster than calling jquery minified hosted from Google which most people's browser have already cached anyway?
Sadly, I think you are right. Why is modular code considered so scary by new developers? I think people are just used to 70kb libraries that they can slap on a page and be done with. I really think more experianced developers should help ease the rest of the community into a new, modular, style of code. Even if you are not using a modular library, just writing your code to load with AMD is a wonderful feeling. You can scale as much as you want and still maintain things easily. I am trying to write massive things split into modules, but I always seem to [get carried away in one file &amp;#3232;\_&amp;#3232;](https://github.com/Wolfy87/Photon/blob/develop/source/dom/Element.js)
It would be nice if they also set up something like the download page for jQuery UI: http://jqueryui.com/download
Hey thanks for the reply! That does make sense to me. It doesn't technically answer my question, but I have sought far and wide through the google-sphere and lo, the google answered it. Basically what I learned is that addEventListener automatically passes the value of a "keydown" event as a parameter to whichever function is its second argument. My problem was, I couldn't figure out how/why "e" even had a value, much less the value of the pressed key, and this explains it. Anyway once again, thanks very much! This was great practice for where I'm at in learning this stuff, I had to stretch my brain to understand it and I got to learn new things! High fives!
http://en.wikipedia.org/wiki/Great-circle_distance do work
Then when you are done, [flatten everything down](http://requirejs.org/docs/optimization.html#onejs). I love [RequireJS](http://requirejs.org/) and the tools it provides.
I think the best way something like this has been done is the [YUI Loader](http://yuilibrary.com/yui/docs/yui/loader.html). It dynamically loads any modules that are needed as dependencies directly from the Yahoo! CDN, so you don't need to worry about manually managing your dependencies.
Two things I can think of checking: make sure you're using the Roslyn June CTP that came out a few days ago, and also install the Visual Studio SDK. There is apparently a dependency within Roslyn on the SDK that we didn't know about because we already had it installed.
That sounds really nice. Although if you were using a library built on AMD and RequireJS to load it you can point it at a CDN. For example... require.config({ paths: { someLib: 'http://cdn.bestwebsiteever.com/static/js/someLib' } }); require(['someLib/core/each'], function(each) { each(['awww', 'yeaahhh'], function(value) { console.log(value); }); });
need more info in the blog post. I had to read the code to see that it tries to use indexDB then localStorage and then the internal cache.
Yay! Thanks!
if you're using Firefox you can have a look at https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/
Hey, I'm the author of the project. First, thanks for giving it a try! As it turns out, every machine I tested the installer on had the Visual Studio 2010 SDK installed also. And there's a run-time dependency on the SDK I wasn't aware of. Luckily it's localized to only a couple of files, so I'll take a shot at removing that (and testing the installer on a machine without the SDK installed as well). You'd shouldn't have to install anything extra on top of Visual Studio to get it working. Btw, providing some sample projects is next on my todo list. I'm hoping to add a few in the github repo by the end of the week. 
If you are on Chrome, try installing the Ghostery extension.
There are a few sites out there (Trello jumps to mind) that compile and minify *all* of their javascript (i.e. including third party libraries like jQuery) into a single file. Obviously having custom modules would be a benefit with an approach like that. In other words, as far as speed, it might just be: Your own JS + self-served custom module jQuery &lt; Your own JS + hosted full jQuery &lt; Everything compiled in a single file
Sure you can, the browser manufacturers work with the big CDNs. The browsers then suck in (with the browser upgrade/install) the popular libs into a special local cache. If a file references a path from said CDN, it looks for it locally first. If it doesn't find it, it makes a http request for it. Older libs could be purged as part of the browser upgrade process as well. If it hasn't been accessed in a year, toast it.
Some of us work in corporate environments with websites and computers that don't always have access to the net.
Probably not for most sites out there, but for larger sites like the one I work for we cant trust Google to serve up our scripts. We mash everything into one file so filesize is a big issue.
looks like you start off with 3 UL elements but then start stacking in divs. Any reason why you're not just adding in the new elements as &lt;li&gt; under the existing &lt;ul&gt;?
I have wondered why this hasn't been a feature from the start. Glad to finally see it happening.
Many people host jQuery themselves anyway. Further, _most_ people don't have jQuery cached, just a huge percentage do. But most importantly, I am sure they will have each version locally stored on jQuery's/Google's server if you so choose to use it. I'm sure it will use some dynamic file name like jQuery111010101011.js, using some signifier for which modules will be included. Perhaps even then compressing 1s and 0s to web-standardized characters, like jQuery_asdZ-d.js But that's just how I'd implement it. They may do a longer URL like jQuery-fadeTo-merge-etc.js, but I want to give them more credit for being able to shorten that.
It would be a smaller file and use less RAM. Depends on how large your project is, I suppose. But if you are only using basic tools like width() and height(), there is no reason to have the user load the entire jQuery library. For people using jQuery extensively like fadeTo and children() and toggle(), they will probably not notice a difference.
I suspect that, for apps which only use a small subset of the jQuery core functions, there's not enough going on anyway to significantly impact the user experience and any gains in performance are negated by the initial load time.
And here I am spewing rainbows now, too. I've wanted to include RequireJS at my work, but it's a pretty massive piece of code -- one that I didn't feel comfortable with including -- but this new piece of information is outstanding.
&gt;not enough going on anyway to significantly impact the user experience As in, they shouldn't be using jQuery to begin with?
Nah, I don't fault devs grabbing jQuery for small projects to make their life easier with DOM manipulation and event handling -- yannow, what jQuery was originally written for. I'm just saying it's likely not a project where performance is a huge concern.
I think performance is a concern in a lot of projects. Too often developers (or their employers) have to choose between development time and performance; and now they no longer have to.
at the moment it looks like you're bringing each new group in as a different div. I haven't had a look to see what plugin you're using but before adding the div to the page have a look inside the div. There are three &lt;ul&gt; elements each with &lt;li&gt; elements. Just grab those &lt;li&gt; elements and append them to the existing &lt;ul&gt;s in the page instead of the div.
OK, just so I have this straight, after I've compiled and optimised my single js file I should I remove the requirejs/main.js script load in my header and instead have the compiled js file load in the footer (before the closing body tag)?
I would put both in your footer. But use RequireJS with a data-main attribute while developing and the flat script with Almond inside it for production.
Ah, I always thought RequireJS needed to be put in the header for some reason (like Modernizr). Thanks muchly.
Nope, anywhere you want. And I'm not sure but you might not even need to use the DOM ready event while loading from the footer. Not a problem. Enjoy AMD!
I installed Visual studio sdk and roslyn and it built ok. Is there any support for lists? If i have a List&lt;String&gt; field, it should map to a js array. In my project i use Guid as identifier, i was expecting it to map to a string, but i see Guid is not avalaible.
finally... I built my own solution for that and there is jquip. about time they're doing this.
jquip :)
Nice link, also nodeup; I'm looking to meet people that are into JS and node. Want to chat? PM me with skype, steam, or email if you want.
*/stuffs ilmmad into closet* Hey, I'm generally fair with JavaScript frameworks all around. I'm allowed to mention some of the stuff I'm working on from time to time. ;)
Only by china. XP should at least have people using firefox/google chrome/opera or IE8 by now.
Missing my point really.
Wow, I had no idea you could get at native V8 methods like that. Crazy.
Maybe you can create your own builds from a local github repo but I seriously doubt they'll make custom module configurations available as a download from jquery.com.
What do you want to do with the forms? Are you talking about submitting forms via AJAX, or altering the form values with JavaScript? Either way, you can't go wrong with jQuery, and also jQuery UI which gives you extra inputs such as sliders. jQuery lets you do thinks like pass a set of keys and values to a form or extract them all and do things with them, or serialize all the values of a form into a query string. http://api.jquery.com/category/forms/
I feel like once you understand prototype chaining, everything else just clicks.
I think this belongs here https://www.destroyallsoftware.com/talks/wat JS part starts about a third in (and the array part around 2/3rds), but it's good and short so just watch it all :-)
I feel like we have this discussion about equality in JavaScript every other day.
I think you don't really understand what JavaScript is for. You make the forms in HTML and CSS, then you add functionality to them (if necessary) with JavaScript.
Fair enough - should've explained that it wasn't the HTML and CSS that was confusing. More; the validation.
Real time validation should be used with care. When used unnecessarily it will annoy the user rather than assist them. (E.g. bringing up a warning of invalid input while the user is still in the midst of typing the input.) That said a quick Google search turned up this jQuery plugin: http://docs.jquery.com/Plugins/Validation 
You should always perform validation on the back-end, seeing as JavaScript can simply be disabled — bypassing the validation. JavaScript can act as progressive enhancement to give direct feedback, i.e. submitting via Ajax and spitting back potential validation errors without reloading the page. 
Some good points but I think that he's got one important point wrong. That is that a view must know of the existence of a model. In most frameworks this is the case, but that doesn't mean it needs to be or that it should: http://modernjavascript.blogspot.com/2012/06/v-in-mvc.html
use === instead.. == is misunderstood
is this the right link? seems to go to something about RFID
I will be adding another framework to TodoMVC soon, [HotDrink](https://github.com/HotDrink/hotdrink). Our documentation is sparse right now, but we come from an academic environment with a small team: I was the only developer until recently, and I am still very new to JavaScript. One advantage of developing this as part of user interface research is that I get to spend time thinking about the division of responsibilities in MVC and similar patterns. There is a lot [more discussion](https://github.com/HotDrink/hotdrink/issues/14) on one of our issues than I can summarize here, and I want to welcome more input.
Alternate solution: learn about features you don't understand rather than avoid them.
To explain why ",,," is equal to array(4) when it casts to string, the toString function for arrays uses the assumption that the default way to convert an array to a string is to return a comma seperated list of the string representations of its contents. This is reasonably good for just showing the contents of an array for debugging purposes etc. The issue is that array(4) is just 4 null values, which default to '' as a string, to it just turns into a string of commas. (Just figured I'd add a reasoning for it along with your technical explanation)
Yeah but the video doesn't explain it all. [This](http://blog.caplin.com/2012/01/27/the-why-of-wat/) does though.
That sound like a good idea, but it actually isn't. If one person memorized some obscure quirks, it won't mean that everyone else has memorized them as well. We aren't like the Borg. Secondly, constructs which look like an error always add a lot of friction. If you want to defuse this problem (to some degree), you have to add a comment, which explains why you are doing this and that this is indeed what you intended to do. But even then it's like a tar pit. You're much better [1] off if you don't ever use this kind of constructs. [1] If you don't get in the way of maintenance work, it will be faster, which will be cheaper, which is better for any commercial project. Saving time is also better for virtually any other kind of project.
Didn't I answer this just a few days ago? http://www.reddit.com/r/javascript/comments/uunfo/javascript_is_a_great_language/c4yp80v
Not working for me in Firefox 13.
Alright, I'm glad you got it working. One of the concepts behind Blade is to provide access to the underlying browser APIs. I've tried to expose the DOM, HTML, and ECMAScript APIs strictly. I didn't want to implement arbitrary portions of the .NET Framework and force developers to use a large core script (to add on functionality to Array etc.) Thus there is no List&lt;T&gt; or Guid class. For List&lt;T&gt; I'd recommend just using T[], as the JS array has list-like functionality. For example you can add to an array with the push method. As for Guid, if you don't need to create them on the client you could likely just get away with defining your own Guid class and marking it with the [ScriptExternal] attribute (this keeps it from rendering). Then if you need specific methods available for Guid, you should be able to add as extension methods. I'm considering in the future implementing parts of .NET where it makes sense, as additional assemblies that can be optionally referenced. This gets a bit tricky though when required core scripts start being split up. I have some ideas to make things more developer friendly, but those aren't atop the priority list at this point.
bullshit :) my argument is not invalidated unless there's a COUNTERargument end of story. and I don't need to "look serious" for any of you, I am a professional and none here can challenge that.
 i agree with the advantages of keeping it very similiar to ECMAScript, a very basic application like a TODO list that saves/retrieves items to the server would be a great example of what is possible. 
As a NodeJS developer I find debugging NodeJS can be a pain in the ass. What do YOU guys use to debug? Mind to share your experiences? 
Shit, i only tested it in chrome.
I disagree, Javascript is one of the easiest languages to start off with. It has a basic syntax and is pretty easy to comprehend as a beginner, especially with brilliant interactive teaching websites like [Codecademy](http://codeacademy.com).
If you're new to programming and want to learn Javascript then I urge you to start with a website called [Codecademy](http://codecademy.com). It starts from the very basics and provides you a safe environment to test and follow along, combined with the Q&amp;A section where you can discuss answers with other programmers, it really is a perfect tool to start learning Javascript.
While this a simple explanation, it's a bit misleading. Modifying the prototype only modifies the prototype object, it doesn't propagate it anywhere. When you try to access a property of an object that is linked to a prototype, and the property does not exist, javascript will silently check the linked prototype object to see if it has a value for it. If the prototype object itself is linked to a different prototype object, it will keep walking up the chain until it finds a value or reaches the end of the chain (and returns undefined).
Bonus: You'd think a good way to implement inheritance in your classes would be to link your classes together through prototype, and you'd be right, with one caveat. var Vehicle = function() {}; Vehicle.prototype.wheels = 0; var Car = function() {}; Car.prototype = Vehicle.prototype; Car.prototype.wheels = 4; var c = new Car(); console.log(c.wheels); // 4 var v = new Vehicle(); console.log(v.wheels); // 4 OOPS! Probably not what you wanted--but it makes sense, you've made the Car.prototype and the Vehicle.prototype exactly the same object. If, however, we re-use prototypal inheritance again, we can do the following: var Vehicle = function() {}; Vehicle.prototype.wheels = 0; var Car = function(); Car.prototype = new Vehicle(); Car.prototype.wheels = 4; By doing this nifty little trick, you get a distinct object for the prototype of Car, so you can modify it, but if you don't specify something, that object (being an instance of Vehicle) will simply chain back up to the Vehicle.prototype.
JavaScript as a whole is messy. The subset of the language used in modern JavaScript programming is actually pretty neat (oh, btw: the DOM is not a JavaScript thing, it's a standard API defined by the W3C). I'm a strong believer in Python, but JavaScript makes many things much easier to do than Python; particularly evented/async programming. I would agree that JavaScript-as-used-in-the-1990s is rivalled only by PHP in its messiness. But I would place modern JS right next to Python and Ruby. EDIT: For the record, I have been using JS on and off since the 1990s and Python for several years; I consider myself a Pythonista (if I was into tattoos, I'd wear PEP 20 on my skin) but have recently been doing a lot of front-end programming with JavaScript and also dabbled in Node.js.
Want to upvote this more. Slightly horrified that r/javascript have downvoted okiedoke8976 to this extent. People need to listen to Douglas Crockford.
I sort of understand your examples here. Can you try to give me a more practical use case for callbacks?
The best example is using jQuery's ajax function: $.ajax({ type: "POST", url: "some.php", data: { name: "John", location: "Boston" } }).done(function( msg ) { alert( "Data Saved: " + msg ); }); The ajax call is done asynchronously so you can't just call .ajax and then immediately do something afterwards expecting to have the correct data. So instead the jQuery library allows you to specify a callback as a parameter to done(), once the ajax call has taken place and the data retrieved, then your callback function is executed.
&gt; My head just exploded. Then how were you able to write the consecutive lines? Kidding aside, the idea shouldn't be too difficult. You add a box with a copy of window onload in it and run it to return a function that uses said copy. &gt; Why pass an anonymous function here? ... Because it allows you to dynamically respond to whatever is found. Replace either takes a string or a callback as its second argument. Inside the string, placeholders like $1-9, $* and so on can be used. If it's a function, it receives the following arguments: full match, each brackets match, position of the full match inside the string and the full string, its return values (including undefined) will be filled in on the full match. Btw., it need not be an anonymous function, but it's possible to use one. Closures are used for a lot of stuff else than variable privacy (you only need a function scope, not a closure to ensure this). Closures can preserve variables in time. test = 'now'; function(test){ earlier = function(){ return test; }}(test); test = 'later'; earlier(); // returns now, no matter when you'll call it or what you do with test Therefore the window.onload example will not result in a recursive loop calling itself but only the preserved version of window.onload at the time before it was changed.
Isn't the phrase "precisely similar" oxymoronic? How is a lexical hierarchy similar to an explicitly declared hierarchy? If you look at the example code, one is flat and one is nested. Also, if a language avoids needless complexity, why is inherits() being used? Is it because you were trying to avoid js's needless complexity or because terseness was not a needed attribute. 
I never mentioned the DOM, some things that annoy me are the weak typing, the mess that is the `this` keyword, the == operator, the class contructors and that's just to name a few. and btw events are not part of js per se, they're either the DOM events or an addition of the particular platform you use, they make extensive use of callbacks which is a nice but dangerous pattern if people abuse the closures (as most javascripters do) and you can find that in Python as well, by example in Twisted.
Ok, just wanted to say that the name of the javascript engine, 'Chakra' is awesome. Naruto!!!
https://en.wikipedia.org/wiki/Chakra
Actually "Tantra!" or "Yoga!".
[This](http://bassistance.de/jquery-plugins/jquery-plugin-validation/) one is not outdated, it works really well and can be configured pretty good. It's also the top result in a google search for jquery validation.
This is what I use. I actually built the site with HTML5 form validation (checking for it first) then falling back to this excellent script. Finally I do server side, on submit, validation. Works well and is pretty decent.
those capital letters and paragraph breaks are unnecessary too anyone who knows english can easily insert them in the appropriate places in your text i mean look at this for example it is perfectly readable without any extraneous punctuation or capitalization why not save time and effort and not use the shift key excellent analogy by the way i shall shamelessly steal and reuse it
Ok, I fixed the bugs that were causing it to fail in firefox. Give it another try (if it's still not working, clear your cache first)!
Ok, I fixed the bugs that were causing it to fail in firefox. Give it another try (if it's still not working, clear your cache first)!
"IE10, a generation behind the rest of the browsers." I wish they were playing catchup.
I would love to, but right now we don't have any content, just a few hidden demos, e.g., [TodoMVC](http://hotdrinkjs.com/todomvc/). I have been focusing lately on working out some final kinks and deficiencies before I really publicize it. When that time comes, most of the documentation will probably be in the project wiki. As time passes, I would like to set up a proper website with live examples and pretty layout, but I will need some help.
yep that did it.
lol. I think you need to reread the thread. Nowhere did I indicate my preference. In fact, if anything, I alluded to agreeing with you. My issue was with the schoolyard "X language is better than Y" talk. To anyone else reading this: I apologize for feeding the troll. I should know better. I've learned my lesson and will no longer do so.
What are the practical differences between this and the frames method for continuous media during navigation that has been available forever? Even if it's just SEO or something, I'm curious to know, but I can't figure out a high-level sense yet. UPDATE: [From HN](http://news.ycombinator.com/item?id=4111072)
Yep. It's a repost from HN. 
... Touche`, salesman.
It's more like Python chewed up Ruby and shat out Coffeescript. Agreed?
Yay! More circlejerking on the web! It's been at least 10 minutes since I saw the last link!
Would have been useful to see a worked example of using mediators integrated with Backbone code... or have I missed something?
I'd be interested in how people would approach unit testing privately protected code. I've generally been told that you can't, and that you shouldn't need to unit test anything which isn't public - a notion I disagree with, intensely.
Just telling you random quirks about a language seems silly. Theres PLENTY of articles on the internet, and even on reddit that talk about JS's quirks and oddities. Id suggest checking out some of these resources instead. http://chat.stackoverflow.com/rooms/17/conversation/noob-javascript-resources 
Oh yes, that's a good analogy.
Nice post, I myself have gotten into the habit of using a similar pattern: (function( $, global ){ function foobar(){ if ( this == global ){ return new foobar(); }else{ this.__construct(); } } .. rest of functionality .. global.foobar = foobar; }( jQuery, window )); 
Yeah. In the HN comments for this post, the creator of Backbone even said the advice in this article was overly complicated.
Skimmed it, seemed pretty good. I like that you used the GOF quote, to many people try to force classical inheritance on JavaScript because that's all they know. In languages without private/protected (JavaScript, Python) it's a common pattern to mark private items with a leading underscore. { name: 'Ripter' , _realName: 'I\'m not telling you!' } The lack of privates in JavaScript isn't a problem and the underscore notation is actually very nice. It lets developers know that if they mess with it, it might break or have unexpected results.
This is all of them in the entire world: [StackOverflow: Hidden Features of JavaScript](http://stackoverflow.com/questions/61088/hidden-features-of-javascript)
I don't have time to read it through, nor probably the experience to judge a major part of the contents, but damn, that's a nice layout. (Added to my read later pile ;) )
It is beautiful! And really creative. watched on github! :-) Have a nice weekend, you deserve it.
That is lots of fun! Works fine in Opera, too, although I noticed one small thing: &gt; // requestAnimationFrame polyfill by Erik MÃ¶ller Erik's last name got fubared somewhere along the line..
&gt; though we really could do with having common questions answered in a FAQ somewhere Any day now, one of reddit's interns is releasing a [per-subreddit wiki](http://www.reddit.com/r/modnews/comments/th1zo/moderators_new_feature_preview_integrated_wiki/), so we could try compiling all these "kb article" posts on there ... eventually.
This crashes AlienBlue on iOS, FWIW.
Thanks for bringing that to my attention. The JS file was not being interpreted as UTF-8. It should be fixed now (you might have to clear your cache).
Module pattern is pretty interesting. This is where I found out about it http://www.yuiblog.com/blog/2007/06/12/module-pattern/ (though it has nothing to do with the YUI lib, it's a JS pattern). Lots of other articles about it, as well. Basically, a module is a function or object that provides an interface but hides its state and implementation. The invocation pattern is pretty interesting as well, IMO, i.e., what "this" gets bound to depending on how it's invoked: * as a method, this = the object * as a function, this = the global object * as a constructor, this = the new object returned from the constructor * as apply/call, this = the first param you pass in Anonymous, self-invoked, immediate functions are interesting, too. (function() { //do something wonderful without polluting the global namespace })(); JavaScript MV* libs like Backbone and Knockout are very interesting. Those are just what popped in my head, not that they might be what you're looking for, but are worth looking into if you're not familiar with them.
Initially I was surprised with the little amount of code involved. After thinking about how it could be done, I don't think it requires that much. But still, it's a job well done. It was very creative and it made me say, "How the fuck?"
...at least not when wielded by ActionScript developers.
&gt; IE has always been a shit browser This is pretty much true. &gt; and their M.O. has always been to imitate what the popular other browsers have done. See also: browser tabs, tab and plugin sandboxing, 'private' browsing, developer tools, etc. This is true too, but you're saying it like it's a bad thing. Browsers *should* be poaching the best features from each other. What's frustrating is when there are competing technologies that would be improved by taking features from the competition, but the developers refuse to. See: all game console online systems not named Xbox Live. (Or iOS's notification system, until they finally did take heavy inspiration from Android's). Now, if what you're saying is that IE isn't doing any feature development of their own that would be worthy of others to poach, well... you wouldn't get an argument out of me.
Very cool!
yeah.. but that is just a implementation detail.. I'll doubt most interpreters literally adds semicolons. Haven't really read the spec, but from what I've read about it it seems silly to call it ASI
You need to put in your last.fm username and then have something scrobble.
for the time being you could create a page in the general faq: http://www.reddit.com/help/faq#DoanyredditshavetheirownFAQs
How much JavaScript experience do you need to do something like this?
Ancillary question: What is the status on generators (and comprehensions too) being supported in Chrome? I tried Googling, but I couldn't find any authoritative and recent source.
Tricky question. Javascript itself, not very much. If you're an OK programmer, there's nothing particularly difficult involved. However, you need to be comfortable with DOM manipulation and CSS transformations, and a bit of math on top of that.
Why not just one collection, and each view based off that collection only uses the relevant data from the models? I can't see any reason to add complexity by only giving a few properties of a model to a collection. Am I missing something? I know you could do this in Backbone.. idk about the other options though I've only really used Backbone extensively
agreed! very cool! **edit:** I'm a front-end dev making sites at an ad agency and I showed this to my co-worker and he suggested we implement this as a practical joke to our QA dept. We probably won't do it because in the end they might not find it that funny but if anyone reading this works with people with a sense of humor, go for it! 
Thanks :) I like the python way of handling privates (i.e. no privates, "we're all grown-ups here", etc). I think in many cases it will be cleaner - it's simply less code doing nothing about it. On the other hand Douglas Crockford speaks against this approach in "The Good Parts", I don't know if he has changed his opinion since then. Still I wanted to show that if you want to you can implement those things in JavaScript easily, so it's really a personal preference. It's best to know your options and use what you think will work best in the particular project, team, etc. That's exactly why I added the GOF quote, so people know I'm not saying this should be used 100% of the time.
We've been having this same conversation at work, because my team lead wants us to write unit tests for all new JS code; but a lot of our OO code looks like this: Objects.Thing = function(y) { var x = y; // a private var this.GetX() = function() { return x; }; // a public property } var thing = new Objects.Thing(5); console.log(thing.GetX()); // &gt; 5 We're taking the stance that you really should only be testing what's publicly available -- but if you really do want to test internal implementation, you should use [a spy](http://sinonjs.org/docs/#sinonspy) or mock.
Well, the point of the view (loosely) is the visual layout of a model, so it needs to know how to layout the data. In backbone have a change to a single collection reflect in multiple views is very simple. Making a change reflect in multiple views I imagine is as simple as hooking up a 'change' even on each view, and just have it redraw itself whenever the collection is changed.
Thanks for your answer. I guess i'll have to check if Backbone can help me
Cool! I have taken a course or two in ai/ml and it was really interesting, but I never thought about implementing something like this in JavaScript. This opens a lot of possibilities...
The response my team lead gave me when I asked that (and I'm taking his word for it since he's studied more test patterns than I have) is "If you can't test it sufficiently without sneaking into private code, then that's a hint you coded it wrong; you should refactor the private stuff you want to test out into a public and testable object." tl;dr: TDD/unit testing has too many definitions and baggage
He's a pretty cool dude. He kinda got pushed into being a team lead by virtue of being assigned me as a programmer on his team, but he's *managing* pretty well in spite of it.
You're being a bit unfair there. He mentions ActionScript because it's his experience but his argument is more general, look at points #3 and #4. For example, if you prefer c# you can use [Blade](https://github.com/vannatech/blade) with the same benefits. While Google has had a Java to JS compiler for a while.
You're missing the point there, it requires much more discipline to maintain code in plain JS than in a strongly typed, compiled language. As for performance, you rarely get to choose which VM the user will be running so you can't just say V8 only. Moreover, Closure is beneficial even for V8.
Hey, thanks for this. That looks promising. What is that compressed part at the top? I'm guessing that defines $.fn.nearest(). I'd like to see a full version of that code if possible! Edit: nevermind, I'm guessing it's [this](http://gilmoreorless.github.com/jquery-nearest/). Edit2: after looking into it some more, it seems like the jquery.nearest plugin does a very similar thing that I do, and with more text performs just as poorly ([same fiddle with more text](http://jsfiddle.net/fuYHv/15/)).
yep!
Interestingly, since it was a bit choppy in Firefox for me (I'm using 13) I decided to try Chrome (running 19) and IE9. Chrome was a bit more responsive that Firefox, but IE9 blew both of them away. I was a bit surprised. Makes me want to get the IE10 preview and see how it does...
Nice! I haven't tried IE at all yet. I'll have to test it when I get a chance.
That looks freaking awesome! If you ever get the chance, please let me know how you did it!
Thanks!
I just went briefly thru Ember docs and I've also checked Ember example at TodoMVC. It seems lacking in the Store/Collection department. I will have to implement too much my self.
The first time you come to JavaScript from another language it always looks like a mess. Even more so if you come from a strongly typed language. I think if you just take the time to learn how to use the language properly most of the problems you are facing will be gone. It always sounds to me like "We don't know the language and our code is bad, but that's not because we use it like it was some other language (i.e. wrong), it's because JavaScript is bad, so let's use what we already know and compile it to JavaScript instead." The only alternative I find acceptable is CoffeScript, mainly because it doesn't try to pretend it's something else. They say their golden rule is "It's just JavaScript" - I like that.
Where in that post do you gather that, for type coercion, the *lhv*'s type is the one that's used for coercion?
How is this any different from my browser cache?
Granted, but I don't really see the point for end users - Google already hosts a number of js libraries, and the only real cost is the half a second it takes to load them. Assuming they have far future expire headers on them (which I'd bet they do), you'd almost never have to re-download them unless you cleared your browser cache manually (or ran out of space). As for my app, my entire library loads in about a second... I suppose that's a second lost each time I refresh - but other than that...
I think he's more or less correct in the content of his post, but "not suitable" is a stretch. There are lots of "best-practices" for how to achieve maintainability by using various JS techniques or 3rd party libraries, but there's no standard way to do it. That bugs me about JS because one codebase might be fairly incompatible with another if they use conflicting methods for modules/dependencies/classes/inheritance/type-checking etc... So code reuse is a lot more difficult across projects or often in a single project than in languages that have a standard built-in system for all those things.
Yes, there are two plugins there: nearest and each2. When saw what you had made, I challenged myself to recreate it without examining your source. But I didn't have the time to finish it. I can't imagine it being too difficult to do so, though. I was putting much emphasis on speed while making it. Now, I can further appreciate what you made. How long did it take you? 
i had the same idea yesterday. given that we have fast online CDNs and that devs usually name the scripts something unique if they do not use said CDNs would leave the user with shitloads of files. quickly made me realize such cacher is unnecessary. 
I work with Mike at Square and have used d3 and have seen what he can do with it. It truly is mind blowing. This is his latest creation using d3: http://wired.com/business/2012/06/one-hour-in-squares-world/ It's not a static map. It dynamically updates on a screen in the office showing transactions for the past hour.
I commented on your other post, but for anyone who comes across this one who may be wondering, [the text in the status bar can be set using the window.status property](https://developer.mozilla.org/en/DOM/window.status).
its like what pops up [here](http://www.htmlite.com/JS017.php) once you click the "write a status bar message" button.
I haven't tried it myself, but it's possible that the browser doesn't make the status bar visible when the content changes, only when you hover over a link. If that's the case, you could probably devise a workaround involving placing an anchor under the user's cursor, but I'd personally start questioning if what I'm doing is really necessary if I got to that stage. Edit: Actually, most browsers disable the ability to do this by default now, you'd have to turn it on with a flag. So essentially, you can't do it any more.
Ok so i just tried this [example](http://www.w3schools.com/jsref/prop_win_status.asp) and it worked! but how would i to go through a list of different "comments" that loop after a few seconds?
 var comments = ["comment 1", "comment 2", "another comment"]; var counter = 0; function showComment(){ counter = counter &gt;= comments.length ? 0 : counter; window.status = comments[counter]; counter++; }(counter) window.setInterval(showComment, 1000); I think something like that should do what you're after (I haven't tested it and I'm a bit tired so I may have made mistakes), but bear in mind that cross browser compatibility would be pretty much non-existent. Edit: [Also, don't rely on W3Schools](http://w3fools.com/). It's okay to use as a quick reference for the very basics, but if you're trying to learn a new feature or something, you're better off going elsewhere.
Backbone.js is exactly the thing you want
Hmm, a few hours or so. Nice work though, those plugins would have been pretty useful.
I might have left off that this is a feature of http://cdnjs.com, a community maintained CDN
As darkane said it works well for development and I do also believe that end users can see performance increases for the little cost of a 1 click chrome extension. It also saves everyones bandwidth, network request and much more at a simple price of a chrome extension. Don't see how it could hurt
Also feel free to suggest features that will make your developing life easier
And that kind of thing is definitely noticeable in the wild, on many and popular sites.
I recommend knockout js http://knockoutjs.com/ Take a quick look at their demo video: http://channel9.msdn.com/Events/MIX/MIX11/FRM08
I am aware of this, but for now since i am the network admin and we are using an older version of ff and ie we should be fine to use this.
If you get a chance, check out mt git repo: https://github.com/bishopZ/Frame.js different approach to the same problem, for frontend rather than node (Read: it runs in Chrome).
I have an old comment where I explained [how MV* JavaScript work](http://www.reddit.com/r/webdev/comments/sxt8y/backbonejs_in_as_laymanish_terms_as_possible_what/c4hvzaq), so hope that helps. :) Believe it or not, it's only been a month and it's somewhat outdated already. Some new JavaScript application frameworks (notably [Mojito](http://developer.yahoo.com/cocktails/mojito/) and [Derby](http://derbyjs.com/)) are now doing the first page rendering on the server-side (outputting HTML), and everything after that on the client-side (outputting JSON, and rendering it with a client-side JavaScript templating engine). It solves the problem that Twitter had with hashbang URLs and how slow rendering tweets were on initial page load. Those frameworks are pretty neat, so definitely check them out.