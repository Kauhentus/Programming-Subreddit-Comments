Man I wish I could work for/with mad decent
A full SPA framework like angular is probably a little overkill for this, ReactJS is pretty good at the smaller widget type thing though: http://facebook.github.io/react/ (though I personally dislike jsx)
&gt; However, the SpiderMonkey AST format was not specifically created for these tools. The SpiderMonkey AST originated as the internal representation of a JavaScript program in the SpiderMonkey engine, which was intended to be used only for interpretation. As tools were created and more use cases for a standard AST were recognized, many [difficulties in dealing with SpiderMonkey format ASTs surfaced](https://speakerdeck.com/michaelficarra/spidermonkey-parser-api-a-standard-for-structured-js-representations).
Three.js supports it but I haven't added support in scenevr yet :) feel free to create an issue for it.
Yeah I know, I was just joking that it looks sad :D
The examples you mention* are one level lower than turf, at the generic computational geometry level. They would all be useful in the context of turf, but would need to be wrapped to provide consistent geojson in/out. If you are familiar with the geo world, you can think of it as [CGAL](https://www.cgal.org/) vs [GDAL ](http://www.gdal.org/). Both are needed IMHO. We need the low level geometry algorithms useful for plugging into geo-engines, games, image-manipulators, robotics, etc., but we also need higher level apis that allow for easy-to-use specific applications that are documented accordingly (turf is in this category). In cases where there is a tricky to implement algorithm within turf, I try to extract the lower level algorithm into its own perf-focused npm module, and have turf provide a nice wrapper, so I believe we are on the same page. I have not done this in all cases yet, but it's a work in progress ;) \* turf-is-clockwise vs is-cockwise is a bit of an ugly duckling, since it works with linear rings, instead of valid geojson, unlike most turf submodules.
That's correct! There's more than one "correct" way to create objects in JavaScript though. If you want to learn all about objects and object creation in JS have a look at this great book chapter. http://chimera.labs.oreilly.com/books/1234000000262/ch03.html
Yes, that's correct. Javascript is centered around a prototype chain, meaning that when invoking a method or property, it will be first checked if your object contains its own version of the invoked element, then if the prototype has it, then (if applicable) if the prototype's prototype has it, and so on. Javascript objects and patterns are a bit hard to grasp, especially when coming from a class-oriented language.
Did you try to use [JS-YAML](https://github.com/nodeca/js-yaml) which looks appropriate for this? edit: you'll also probably need to use the PhantomJS [File System Module](http://phantomjs.org/api/fs/) API to read the YAML file.
The latter half of the linked article addresses this. Did you actually read it or just went straight for the knee-jerk response?
The presentation in the above link has this to say: === Slide 80 === * In summary: * use the Spidermonkey AST * it's not perfect * unfortunately, ASTs not guaranteed to represent valid JS * will be expanded for ES6 and beyond * the tooling is awesome * JS tooling is now comparable to that of mature languages * don't make your own AST format * you'll probably get it wrong * you don't want to recreate all these tools Seems to contradict the Shift JavaScript AST Specification proposal.
I decided to spend Christmas Eve building a side project -- my constraint was that I had to start and finish it in 24 hours. I spent about 12-14 hours working on the app. Full two hours spent on getting and setting up the stupid SSL certificate and debugging it on firefox. The concept is that (if well-populated) you could hop on and join a topic-based conversation with a small group of people. My hope is that conversations would be easy, semi-anonymous, get people to open up, and have a good chat and maybe make new friends. Backend tech is node.js, abusing socket.io for websockets, and using sequelize as the ORM (I'm really loving sequelize). I'm actually running sqlite in production for this app ;). I don't know how far sqlite will scale, but I load tested with about 20 messages per second and it still worked, so I have a feeling sqlite will last the lifetime of this app (sadly I doubt the app will ever take off). The front-end is straightforward socket.io, jquery, sass. I considered Backbone (a favorite of mine) but for this app building out a backbone app was a little heavy. JQuery does the trick just fine and was a lot quicker than what I could have built in backbone. I'm happy to answer any questions or hear any constructive criticism!
Thanks, I had not. Going to try it. Appreciate it. 
So, I am trying to use the fs module from phantomjs and am having an issue, the code looks like this - var fs = require('fs'); var utils = require('utils'); var data = fs.read('testdata.dat'); utils.dump(data); When I do, I get these errors - Error: Cannot find module 'utils' TypeError: 'undefined' is not a function (evaluating 'fs.read('testdata.dat')') Any ideas why?
No please keep the things plain as they are. Reddit dev made a great job already :)
What a great idea and the execution is perfect. Do you participate in hackathons, or is this your first 24-hour challenge?
"symfony" for PHP has powerful tools for emulating and manipulating a DOM. https://packagist.org/packages/symfony/symfony It sounds like you're going the wrong way around the problem, though, as others have also mentioned.
Like someone else said, you're talking about just rendering HTML, not manipulating a DOM. This is what templates are for. Templates allow you to use logic for your HTML output. If you're constructing HTML and then having to re-construct it server-side, I would argue that your backend architecture could be improved.
It's definitely not easier hah
DOM stands for "Document Object Model", which is a javascript object that is constructed by the browser. There are no "DOM libraries" (unless if you're referring to libraries that interact with the DOM, like jQuery), and this certainly has nothing to do with the backend, which is what this question was about.
Thanks for the kind words! I generally don't do hackathons (though I've sponsored/mentored a couple) because I'm personally not into the competitive or over-stressed environment -- and I like going home to sleep! This one, however, was a self-imposed challenge, and I leisurely built it on my day home, which was tons of fun! I like doing that kinda stuff over the holidays; on 4th of July I released an online morse code radio (http://morsecode.me/) that become popular for a short while (no longer), so I figured I'd keep my node.js skills sharp by doing another holiday side project :) Thanks again!
What is 'utils'? is it an NPM module? is it installed and listed in your package.json? Or is it a JS file in your path? Unless you have a pervasive reason, I'd suggest using JSON instead of YAML. YAML is pretty standard in the Ruby world, so if you're doing something with Rails, I suppose it makes sense. Otherwise JSON is a far better match for JS configurations/data/etc. *Just my humble suggestion.*
Yep :) Using prototype you can also do inheritance pretty easily. Example: function Coordinate(x, y) { this.x = 0; this.y = 0; this.update(x, y); } Coordinate.prototype.update = function(x, y) { this.x = x || 0; this.y = y || 0; }; function ExtendedCoordinate(x, y) { Coordinate.apply(this, arguments); // Parent constructor! } ExtendedCoordinate.prototype = Object.create(Coordinate.prototype); ExtendedCoordinate.prototype.update = function(x, y) { // Override Coordinate.prototype.update.apply(this, arguments); // Call super function if ( x === 0 &amp;&amp; y === 0 ) { console.info("TODO"); //doSomething(); } }; var test = new ExtendedCoordinate(1, 2); console.log(test.x, test.y); test.update(0, 0); console.log(test.x, test.y); 
Thanks for sharing this!
Untrue. You can manipulate things at a DOM level, there's no reason at all you couldn't. The end-result would still end up needing to be serialized to HTML, of course, but there's no reason we have to confine ourselves to templates.
What makes you think that? That statement is patently untrue. There's nothing special about a DOM. You can absolutely manipulate one server-side, and then serialize it to HTML.
I'm not sure what you mean with server-side DOM manipulation. Your server can (and should) generate your HTML as much as possible and let the JS do animations and adding/removing classes on user interaction.
No, you're right, but the one I used was similar to a problem I encountered recently; so, it was fresher on my mind is all.
The list of libraries you would need to do what meteor does that this article mentions is exactly why I'm not sold on it. What if I don't want to use mongo, what if I want to swap out the router for a different one? I use django at work a lot and it's great, but it suffers from being so monolithic at times. If it weren't for how entrenched it was, i'd be advocating for switching to Flask. Same thing with React (plus a few libraries) vs angular. All in one packages are great, at first, but as a project grows they often become a constricting factor.
I'm not familiar with three.js, so can't actually answer, but from looking at the code what you want is probably in `App.HomePage = function(b)`. Grab the js file http://dki887u7q00gv.cloudfront.net/scripts/scripts.js and de-minify it. Minified code makes debugging much harder. 
I guess I did a bad job at explaining the packaging system. Plenty of people, including MDG, are working on database support outside of Mongo. I came from a land of rails and at 3.0 and 4.0, it was never really a discussion on database drivers. I think in 6-12 months, it won't be a consideration either for Meteor.js. When you say Monolithic, it sounds bad. To mean it just means you have a large vested community that will collectively try to improve things. Who is going to help you when your flask + react library runs into trouble? Certainly not your old trusty search friend, Google. You are running a custom stack that likely no one else is. On top of that, I can't tell you how many times I was brought in to fix a rails + backbone app and the backbone code was written by people who had no idea what they were doing at the time. That is power in a community working towards a common goal in an open sourced environment, it leads to better maintenance, solid docs, good blog posts, etc. 
I'm self-taught in the CS realm (I went to school for programming, but not the theory part), so I usually ask people I trust or use Google. **Don't ever feel bad for not knowing something.** In 10 years of web development, I've learned that the more I learn, the more I learn how much I *don't* know. The people in this field I respect the most know their limits and don't claim to know everything. Just remember, there's always something to learn and if you think you know everything, you've stopped learning. That being said, what is tripping you up? The author (/u/mraleph) has already interacted with me and I'm sure he'd be glad to answer any questions that others can't. He's a proponent of knowledge transfer (he blogs a lot and does Google talks) and, as you can see from my exchange with him, is willing to help people understand his message.
You can construct a DOM in any language. All you need is a XML based document to construct it. 
Where is the min.js? And what tool are you using to compile it?
Why not even mentioning webpack? It works great for that.
haha
I used the complete archives of Project Gutenberg and prepared my text samples with Python scripts. [Here's the GitHub repo for the clock.](https://github.com/rossgoodwin/clock/tree/gh-pages) There are 9 possible templates—on the hour, 1-14 past, quarter past, etc. Right now, for each word/phrase in a given template, I'm taking a random choice from an array of 2000 1000-character strings (archived in JSON files). With jQuery, it seems like I may be loading each array in full in order to take one sample from it. Is there any way to just load a random choice from an array in a JSON file without loading the entire file?
I might suggest linking the relevant time text to the corresponding Gutenberg works.
Fixed. It was because I was linking to the raw github file and they don't allow hot linking (but it worked on firefox for some reason)
Forgot to add it! It was compiled using UglifyJS
Thanks, let me know how it goes!
Case in point: https://www.youtube.com/watch?v=EJzulpXZn6g&amp;feature=youtu.be - someone is building a reactive mysql package already.
Good on 'em. Like I was alluding to with django, I'm not against large frameworks, I just have reservations. As it matures and becomes more modular, I'm sure I'll look at meteor more, hell, I might use it for a side project or two here and there (especially if it has database-agnostic support). For the record, I've never had a problem googling for help with react and flux. I've dealt with plenty of mis-mashed stacks written by people that don't know what they're doing, but I've had more problems with those written in one framework than those written with a collection of libraries (mostly because I can swap parts out easier).
You could easily do a very simple server-side component that does the random selection and returns just one element. Or you could apply some simple effect (maybe a fade-in). This, of course, wouldn't actually improve performance, but it might give the impression of better performance.
And that would have speed advantages over what I'm doing now?
That's a great idea, but would require me to rescrape all of my excerpts, which would be very time consuming. Also, I'd have to change the method I used to put everything together, because my first step was to combine all the Project Gutenberg archives into one 15 GB text file and search through that for key words.
First things first, this is awesome in every way. My one suggestion, like khoker below, would be to include either a link to the work on Gutenberg or at the least a citation of the work it came from. Still, awesome stuff. I have a question, though...I'm still sort of new to JS, and while I pretty much understand how the JS portion of this works, I don't see how you're pulling in the JSON to get these passages. I see on the repo you have tons of these passages to pull from, but I don't see a direct reference to them in the code. Could you explain how you did it? JSON still seems really foreign to me. 
Fine. Number formatting, then. 123,456 vs 123.456 - which one did the user mean to use?
He's got a function using [$.getJSON](http://api.jquery.com/jquery.getJSON/)... function fetchText(word, block) { $.getJSON("js/"+word+".json", function(json) { var rand = Math.floor(Math.random() * json.length); document.getElementById(block).innerHTML = json[rand]; }); } ...he calls at varioous places like this... fetchText('midnight','blk1'); ...which would load `'js/midnight.json'`, select one result and insert it in block `#blk1`.
flash will disappear like it's no #paper future, **God is beautiful, funny, and knows the ways to be be Fair **.
This is lovely! I wish I could write something this functional in 24 hours. Takes practice I guess :} Although I must say I'm feeling a bit lonely sitting in this empty chat room.
Maybe you like this http://codepen.io/anon/pen/VYKQxz I only added one line (scaling on the z axis with a `Math.sin` on the `now` parameter). This, of course, applies to the whole mesh so you cannot do per-vertex modifications this way. The Make me pulse example does modify the value of each height.
Actually, I think it is a genuine question. There's a link to supposed weaknesses in the SpiderMonkey AST, but I don't see a single example that explains why this new format is truly better, let alone why it is so much better that it warrants rebuilding the tooling ecosystem. Mind you, if it is truly better I'm all for it, and seeing how they cite support from Ariya Hidayat (author of esprima), I don't doubt it will be an improvement. It's just that this article doesn't seem to do a good job of explaining it.
That makes much more sense, but turns out I really don't understand JSON yet so I'll have to look into it. I'd love to do some big data-scraping thing like this.
You have to keep in mind CasperJS is not based on Node.js, so NPM modules don't typically work there. /u/menno already pointed you to the list of modules that you can use.
This is gold. I can't believe I've never heard of this person before, her insights are wonderful.
JSON is just a data format. **J**ava**S**cript **O**bject **N**otation to be exact. There's really nothing to get other than how it serializes data (hint: everything looks like JavaScript Objects). I think what you don't understand is how to make *AJAX* requests.
It's mostly a matter of precision. If you have a data type with a fixed length, mantissa and exponent can only reach a certain precision before rounding occurs. If you need a very high precision you can implement the calculation yourself not using IEEE floats.
Awesome talk!
What's the point of the bitwise operators then? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators
Using gzip for the connection would ~~could~~ cut down those 8MB to almost nothing. EDIT: Stupid autocorrect
You can use a [for…in loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) to iterate over the object's properties. To take subobjects into account, you'll want to test for [typeof prop === 'object'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof), then recursively call the function on that. You'll want to use the same kind of typeof statement to check if it's a boolean, string or something else.
And I can still use the page.whatever and page.whatever .someFunc independently, right? And is there a more elegant way of doing this? Furthermore, I can define a function as page.apply(), but how would I be able to take a function apply() and allow it to be called from all objects? Like, for example, in jQuery, I can do a $.fn.someFunction = function() { code(); } to allow me to use someFunction by going $(somejQueryElement).someFunction(); How can I do the same thing, but instead of binding it to $jQuery elements, bind it to objects, and have the "this" keyword reference the object I'm calling it on (for example, page.someFunction())?
I don't think you can attach a function to a string.
That happened due too naive beleifs into spirit of oss developpers collaboration. My be different mentality too. But i've got very good lesson for the future.
"token stream", used in markdown-it, is more "raw" data representation. But it's not a big problem to convert it into AST. Just do "parse", and then call your custom "renderer" on parsed data. We don't use AST intentionally, because token stream is more simple/convenient (and fast?) for our needs. You also can try reference CommonMark parser https://github.com/jgm/CommonMark, it produces AST and can be better for your needs. Markdown-it is more focused on extentability and generating safe HTML out of box.
Use phantomjs for html -&gt; pdf.
Second committer is my friend. That's not just "a lot of of work" in total, but 99.9% of work :). I consider situation not as fork but as movement and continue of development at new place.
 String.prototype.myFunction = function(){ console.log(this); }; Then you can do this: page.topic.list.myFunction(); &gt;&gt; "https://www.dropboxforum.com/hc/communities/public/topics"
&gt;I think what you don't understand is how to make AJAX requests. Yep, this is it. I knew JSON was just JS as data, but I've not gotten far enough into AJAX to know how to do much with it. Know any good resources for it?
You could put all of the array items in separate files, then you will only need to load small bits of text. Or make sure the data is being gzipped. Or the only really good approach is to use something on the server. You could use Python or Node.js. if you use Node.js you might be able to reuse some of your JavaScript.
UI note: show me a loading gif to let me know that the goodness is coming
I made this a few years ago! I know there's been criticism of how the values are organized. It was not meant to make a point about javascript being bad, just meant to use a concise graph to spark conversation about how JS "=="'s work. Speaking of which, I made an even more concise table that you can see [here](http://dorey.github.io/JavaScript-Equality-Table/unified/), where you don't need to click back and forth. I'd be interested to hear which you guys prefer and how I could improve this page.
How do you win? 
http://api.jquery.com/jquery.ajax/ Scroll to the examples at the bottom. 
Might I suggest: mkdir myapp cd myapp git init npm init git add . git commit -am "project started" ... from there you're on your own. ;)
Sure thing. Thanks for bringing this to my attention. 
I'd just clone it and go from there: https://github.com/gabrielecirulli/2048
Doesn't show anything in my latest Firefox browser, except this text: Text Clock by Ross Goodwin, 2014 All text sourced from Project Gutenberg ebooks
Unfortunately, you need to wait for the page to load... I need to fix the page load time problem, hence this post.
Awesome. I thought I could do it with prototyping, but I wasn't sure!
The code is actually pretty clean, though it's hard to describe. Another comment pointed out what I was looking for, so maybe that will help clean it up. I am not an advanced JavaScript developer, and the code is kinda messy. I am working on commenting more, and there is a lot of unorthodox practices in it, just because it is a Greasemonkey script, so I have to do some really ugly things to get certain things to work on the site that I don't have permission to change code on. If you want to take a full look at the code, though, I'd be more than happy to receive some constructive criticism. The live GitHub link is [here](https://github.com/DBMods/forum-extender-plus), though the latest unpublished version is on my other computer, so if you want an updated copy, I can get you a link to that version tomorrow morning. Anyway, if you have feedback, and comments on better practices, or questions or concerns, feel free to let me know. I'd be more than happy to hear 'em!
Okay. But even in that case, you should at least show an ajax graphic or something to let the user know that something is happening in the background.
Seems pretty fast for me--did you refactor it since the original? From dev tools: http://i.imgur.com/LaIPWYJ.png
Honestly I think this whole problem is overblown. The surprising values in this table essentially never come up. I've never seen a single realistic example of a bug caused by this, not even a made-up example. But I'm willing to be corrected. Anyone got an example of code (that's not horrible by design) with a bug that's fixed by changing == to ===?
Yeah. If you hover over a square (in the original link) it will give you more details about what it's saying is true or false. It says something like-- [] === [] // false
I don't see how it's misleading. The table clearly indicates that the JavaScript expressions `[] == []` and `{} == {}`^* (and their triple-equals counterparts) all evaluate to false. At worst, the table is slightly incomplete, as it should include some footnote about comparing identical references. ^*Note: ^(The second expression's operands must be wrapped in parentheses)
No refactoring. I think the JSON files get loaded in your browser cache or something after they load once, so it runs really fast after loading for the first time. Someone can correct me if I'm incorrect about that.
Yep. I'll do that.
Very very cool. I think this is amazing. *** If you want a critique, my thoughts are: * Don't Repeat Yourself. `ctt` functions repeat a lot of logic. It's just the arguments that change. * Use more descriptive function names. `ctt0` and `ctt1` don't tell me much. * Consider more descriptive element names. Probably not needed. * Don't redownload the same json over and over ("In the morning.json") * Don't download the full json files. No need to download an array with 2000 elements if you are going to choose one randomly. Just make a random number either client or server side and ask for that chunk. * I like the idea of linking to the specific works the excerpts are from. But that is **a lot** more work. You mentioned having to rescrape the raw data. You can get a torrent from http://www.gutenberg.org/wiki/Gutenberg:The_CD_and_DVD_Project and parse with the scripting language of your choice. Unfortunately, to serve smaller chunks, that means you either need some server logic to process requests (which means no github pages), or to generate thousands more files (not recommended). If you're looking to take the project a step further and want to have some server logic, I recommend Google AppEngine. It has a free tier and you can use Python, Java, Go, or PHP. I think Heroku has a free tier if you want to use Node.js and keep everything JavaScript. *** Again, this is a really great project. Good job.
Yes, but not in the way OP wants to.
Ok, good, so you know what you don't know (the known unknown), this is the first step in all of the shit that is programming. I unfortunately don't have any good resources, because I learned everything "the hard way". /u/Ob101010 looks to have pointed you to a good source though. The best tip I can give you is that an async request will complete sometime after you call it. Not directly after, not when you think, just whenever the server responds. So, you need to write your code in a manner that takes that into account. I suggest googling the concept of promises, not because it will show you how to solve the problem (it might), but because anything involving promises has a good chance of showing you why you need them.
Cheerio relies on [jsdom](https://github.com/tmpvar/jsdom), which can be used on its own.
No it doesn't, are you thinking of server-side jQuery? Part of what makes cheerio so fast is that it doesn't provide an implementation of the DOM, but instead provides the high-level jQueryish API directly.
https://news.ycombinator.com/item?id=8798874
By using TypeScript.
I've got one for php: http://stackoverflow.com/questions/22140204/why-md5240610708-is-equal-to-md5qnkcdzo
It still sounds to me like we agree a lot more than we disagree. Pretend that the talk is called "Static types are awesome: Here's how to get some of the benefits in JavaScript", watch the talk again, and I think you'll come away with a completely different interpretation of the talk contents.
&gt; but you gain the headaches of not being able to guarantee your methods are working with the data they are expecting. A generic function operates against an expected interface. The required interface should be able to be inferred and guaranteed by static analysis tools. This should be the ideal we're striving towards, rather than littering our code with type system cruft. Type annotation isn't the only way to accomplish the goal.
&gt; You don't seem to give examples, so it's hard to say if the people who ended up in this mess were just bad at OOP. When a whole lot of users make the same mistake with my user interfaces, I don't blame the users... I blame the interface.
Triple equals.
After some years of jsdom templating, i recently switched to node-webkitgtk and a solid resource caching system i'm developing. 
Keep in mind that manipulating built-in prototypes (or more generally: prototypes you don't control) is considered bad practice. JS is not Ruby. The JS answer to your problem is likely not "add methods to strings".
That doesn't add a function to a string. It adds a function to *all* strings.
&gt;AJAX is arguably the most important concept in front end development today. Right, with one-page apps being huge right now I'm sure AJAX is greatly important. I have a question, about that, though. I've been learning Angular and have been really, really liking how it does things, and it seems to be able to update the front-end without using AJAX (or it is doing it and just isn't obvious to me), but if my work would be only on the front end, would a framework like Angular or Ember handle the AJAX-y stuff (other than communicating with the server, of course)?
Ops. You're correct. I just used some code I had laying around and made it look like his example... did not cross my mind at the time. Thanks!
 function(n) {return n == (''+n).split('').reduce(function(x, y) {return x + Math.pow(+y, (''+n).length)}, 0)} Or without string conversion (more efficient): function(n) { var length = 1 + (0|Math.log(n)/Math.LN10); var sum = 0; for(var i = n; i &gt; 0; i = 0|i/10) { var digit = i%10; sum += Math.pow(digit, length); i = 0|i/10; } return n === sum; } Golfed for fun: function(n){for(var s=0,i=n;i&gt;0;i=0|i/10)s+=Math.pow(i%10,1+(0|Math.log(n)/Math.LN10));return n==s} 
I actually liked this. (:
sign up not working :/
very interested in an invite.
worked for me.
Comparisons and assignments in JS are all done by value. One of the internal types of JavaScript is a reference value; `==` and `===` check to see if the two arrays or objects are the exact same (by checking if the reference or pointer or memory address of the two are the same). The table says that `[] == []` evaluates to false, which is a true statement because those are two different arrays. But the table doesn't say anything about comparing references, so one could be left thinking (without knowing that `[]` means creating a new array) that arrays cannot be compared.
My objection is what you brought up about comparing identical references. Without adding that, it seems to say (especially for newer JSers) that arrays and objects can't be compared. Other than that ambiguity, this is a great chart.
I've written myself a .bash_profile shortcut that brings my favourite boilerplates into one folder: alias initio='git clone git@github.com:martinsookael/tabularasa.git .;git remote remove origin; npm install; cd public; b install; 
How do u make the canvas fullscreen?
 0 == '0' //true! Douglas Crockford talks about type coercion (Its 5 years old and some things have improved) https://www.youtube.com/watch?v=hQVTIJBZook @15:00 in talks about this. Worth the watch and its pretty funny at parts. 
Your points being valid, I need to point out that React does provide but does not require JSX. It's optional. Other than that, HTMLbars looks like a brilliant solution for template users.
The ones that come up the most for me are comparing `null`, `undefined`, and `NaN`. Let's take the following as an example of the first two: ``` function foo(one, optional) { if (optional == null) { // do something } } ``` If `null` is a valid value for `optional`, the comparison above will evaluate to true if the function is called like `foo('bar');`. `NaN` is similarly tricky since it doesn't ever equal itself: ``` if (a === b) { // do something } ``` If `a` and `b` are both `NaN`, this will evaluate to false. Adding `isNaN` tests won't make this less complex because `isNaN(undefined) === true` among other things. The best truly equal check out there is `a === b || a !== b &amp;&amp; b !== a` because of the rules in this table.
I create a new canvas element with width and height set to window.innerWidth/Height minus some safety. https://github.com/fforw/snowy/blob/master/src/script/main.js#L208-L209 The bitmasking is done to have the width always a multiple of 16. Not sure that really helps anyone.
I'm sure you already know that, but the sequence of narcissistic integers is actually [finite and can be found on the web](http://oeis.org/A005188/b005188.txt). So, yup, i'm a lazy boy, i'd just preload the sequence and check narcissistic.indexOf(myNumber) :)
For sufficiently large numbers JavaScript is a bad choice, because JavaScript numbers are floating-point numbers, not real integers.
Okay, what's a realistic example of a function where that structure makes sense? Where you have a branch that's hit for optional being null but not for being undefined? Everything I would think to put in there looks like poor design to me. Ditto NaN and undefined.
Just out of curiosity, may I ask what function would you attach? I mean, what does the function do?
Is innerWidth/Height viable on all screen resolutions? And if so, how do you scale it depending on screen res? 
Do you know if I can localize it, and do a page.String.prototype?
If I could accomplish it cleanly, I would have the same function name (.locate) attached to all stings that would tell if the page we're calling from is the same page we're on now, and if it's attached globally (page.locate) it would determine if the page we're on now is anywhere in the list of pages. page.locate is already written.
Ohh.. Very cheeky :). But yea looking more for best practice rather than quick fixes.
There was a lot of stuff missing from that list, and I didn't want to have to pick just one. 
i knew, but i couldn't help myself ¯\\\_(ツ)\_/¯
Any plans for touch support?
I've added that functionality now (sorry about the long delay in replying). You'll have to re-download the js file and have a look at the documentation (add the parameter "location:'center'")
Not to mention that 80% of that list isn't a *coding*:sic language.
Rotation is not really compatible with the canvas approach working off fixed predrawn flakes -- or it would really increase the memory needed to store all rotations / the rotations within the 60° rotational symmetry in an acceptable angle resolution. Some more variation in movement might work out well.. not too orderly.. 
&gt; Rotation is not really compatible with the canvas approach working off fixed predrawn flakes -- or it would really increase the memory needed to store all rotations / the rotations within the 60° rotational symmetry in an acceptable angle resolution. you don't need to store rotations, you can just rotate stuff you draw. what is your approach now?
Nice effect. The width/height handling is a bit odd, it sometimes doesn't fill the screen, and doesn't handle resizing. If you look around you'll probably find a lot of useful little tidbits for creative coding on npm. :) Examples: - [stackblur](https://www.npmjs.com/package/stackblur) - [color-style](https://www.npmjs.com/package/color-style) for concatenating RGBA string - [get-image-pixels](https://www.npmjs.com/package/get-image-pixels) - [raf](https://www.npmjs.com/package/raf) and [raf-loop](https://www.npmjs.com/package/raf-loop) for timing - [xtend](https://www.npmjs.com/package/xtend) for merging properties A [longer list](https://gist.github.com/mattdesl/73e3b9f902f9c834b721).
It includes a variant of stackblur. Apart from that I don't really feel the need to use a lib for everything. That merge.js works out just fine for most of my purposes, if I'm not tempted to use lodash or so for the whole thing. requestAnimationFrame is included.
It's pretty hard to take this seriously right now. * It still has the HTML5 Boilerplate default favicon. * Most of the 'coding languages' aren't languages. Heck, some of them aren't even frameworks, but general environments. Wat. * There is no information about the people who are running this. * Blog and social media buttons don't work. Also, what does "Early Access" mean? If you can't watch streams without an account, the people who start streaming will not get much, if any viewership, and if they don't have even potential viewers, what's the point in streaming? Not to mention setting up and scaling a video streaming service for different accounts is a bit of a task - I'd like for them to mention what they're doing to solve a lot of the issues involved in that.
These modules are not "libs". They are usually just the same function you would have written, but more robust, better tested, and more depended on. But suit yourself. Maybe you prefer the extra keystrokes and browser bugs. ;) 
Rotating the canvas context while drawing the pre-blurred images would probably have a negligible effect on performance. 
Sometimes, I like to have control over the exact code I want to include. Or I just do because I've been using that expert-recommended piece of code for quite some time. Sometimes, like with stackblur, I want a slightly different code, leaving out one superflous step. I also have seen way to many programs getting fucked up by package maintainers to be not skeptical. 
&gt; I also have seen way to many programs getting fucked up by package maintainers to be not skeptical. What a shame. You're missing out on the best parts of browserify: it's massive module ecosystem.
Kind of relevant but not entirely -- this one always gets me in javascript: [] ? "true" : "false" // true [] == true // false It's because (most) objects are truthy... but may not compare to true.
prepopulating the list and check for it would be the best practice. the numbers you are checking for are static and will never change, you should treat them as static.
it amazes me how common that is
So much red.
A good initiative. I tested this image: http://i.imgur.com/vjmbpuF.png and it read "volo" from it.
did you disable javascript?
Highcharts get's most of the credit around here but I've never used it. It's often the first choice of designers. MorrisJS is nice - it depends on Raphael that get's mentioned here a lot. I used Google Charts (angular version of it) for a while. This is a professional tool that enables you to build absolutely anything and take huge amounts of time while at it. My next plan is to try out C3 - it's supposed to be like D3 but a bit simplified.
Please use placeholders for the email input.
If they were using the placeholder attribute it wouldn't matter, and this bug would never exist.
I see. But to tell you the truth what I don't see is what advantage does that approach have. I mean... I'm not saying it is *wrong* or something, but I fail to understand why you would want to attach such a function to *each* of the properties of `page`. I can't see it being *better* than having a single function, possibly separated from `page`.
Nope, but why would you use javascript since we have the placeholder attribute? Does it work for you?
how bout you make this fucking work at all first
It's actually a good practice. There are 88 numbers, there'll never be any more, and they won't change. Even more, you can simplify a lot by treating them all as strings, because some valid narcissistic numbers are greater than `Number.MAX_SAFE_INTEGER` so trying to calculate will probably be source for potential errors (or extra code to prevent them).
There are several applications of these paradigms. First, `null` and `undefined`. Let's say we have a DOM API like this (this is similar to Dojo's DOM API, but not exactly... this is a contrived API, but I hope you get that there *are* valid uses for this): function byId(idOrNode) { if (typeof idOrNode === 'string') { return document.getElementById(idOrNode) || null; } else if (typeof idOrNode === 'object') { return idOrNode; } return null; } function place(node, where, referenceNode) { node = byId(node); if (referenceNode === undefined) { referenceNode = document.body; } else { referenceNode = byId(referenceNode); } if (node === null) { throw new Error('node must be a string or object'); } if (referenceNode === null) { throw new Error('When passing a reference node, it must be a string or object'); } // Code to place node into referenceNode at the right spot } In this code, the third argument to `place()` can be a string, a DOM node, or doesn't have to be passed: place('main', 'after', 'footer'); place('main', 'before', byId('header')); place(byId('main'), 'last'); // last item in document.body Anything other than that, and `place()` will throw. If the condition was just `if (referenceNode == null) { throw; }`, it would throw if `referenceNode` was left off. For the example of `NaN`, we all know that `Object.observe()` isn't a thing yet, so people have to come up with their own data binding solutions. One that is popular in the Dojo community is using `dojo/Stateful`. It looks something like this (again, not exactly): function Stateful(args) { mixin(this, args); // copies things from args to this this._watchers = {}; } mixin(Stateful.prototype, { set: function(key, value) { var oldValue = this[key]; if (!this._isEqual(oldValue, value)) { this[key] = value; this._notify(key, oldValue, value); } }, get: function (key) { return this[key]; }, watch: function (key, callback) { var watchers = this._watchers[key]; if (!watchers) { this._watchers[key] = watchers = []; } watchers.push(callback); return { remove: function () { // find callback in watchers and splice it out } }; }, _notify: function (key, oldValue, value) { var watchers = this._watchers[key]; if (!watchers) { return; } for (var i = 0; i &lt; watchers.length; i++) { watchers[i].call(this, key, oldValue, value); } } }); This constructor is the basis for data binding within the Dojo toolkit (usually). Watchers are set up between two objects which set the value on the other one: function bind(source, sourceKey, target, targetKey) { target.set(targetKey, source.get(sourceKey)); var sourceHandle = source.watch(sourceKey, function (key, oldValue, newValue) { target.set(targetKey, newValue); }); var targetHandle = target.watch(targetKey, function (key, oldValue, newValue) { source.set(sourceKey, newValue); }); return { remove: function () { sourceHandle.remove(); targetHandle.remove(); } }; } If `_isEqual()` is not implemented correctly, an infinite loop will ensue. For instance, if one were to implement `_isEqual()` as follows: _isEqual: function (a, b) { return a === b; } Invalid input from a calculation could set our application into an infinite loop. Let's say the user input 'a' and the input gets divided by 2. The result will be `NaN`. Or what happens if `NaN` is a valid value for the key? `a` will never equal `b`, so the source will notify the target, and `a` will never equal `b` there, so it will notify the source, and on and on. We have to explicitly check for `NaN`: _isEqual: function (a, b) { return a === b || isNaN(a) || isNaN(b); } This is closer, but not quite. This won't cause an infinite loop if `a` or `b` are `NaN`, however, it will notify if `a` is `undefined`, a string, an object, and a couple of other things because `isNaN()` returns `true` for those values. The best way (without doing a ton of checks on the values) to make `_isEqual()` do the right thing in most situations is to implement it like so: _isEqual: function (a, b) { return a === b || a !== a &amp;&amp; b !== b; } The only time `a` and `b` will not equal themselves is if both `a` and `b` are `NaN`. Now we have a `Stateful` implementation that will not loop infinitely and also will not notify when it shouldn't. TL;DR A lot of these comparisons come up when developing low-level APIs (like `Stateful`) that are going to have a lot of different values thrown at them. Most application developers don't need to worry about them, but as soon at you start developing an API, you have to know them and plan for them.
[ToDoMVC](http://www.todomvc.com) has a nice overview of what is being used. I've built several things on [Angular](https://angularjs.org) which itself forces you into a MVC type of pattern. I've also developed this MVC-ish approach to use with [jQuery on Single Page Applications](https://github.com/martinsookael/j) 
I don't know how it is for normal programming, but during ludum dare several people stream gamedev, and there is atleast one guy who streams gamedev pretty much all the time. Or atleast he did, not sure if he still does or not.
You could, I suppose. But it won't be the same DOM that is in the browser. In the end you output HTML, so really you just want to generate it from a template. Going through the troubles of manipulating DOM on the server side seems pointless. 
It really isn't, though I figured it would be more unified, though you're right, it probably isn't much benefit. Also, how do you remember your username?
But cant you just rotate right before you draw? 
I would highly recommend taking a look at Packery. I have used Gridster before, but much prefer Packery after making the switch. 
Cool! Oh, and dont get my comments wrong: it looked pretty nice already :) Just thought it could use some dynamics
Do you have any workflows to share? I'm interested in what you've created with those actions together. :)
Are you familiar with how window.location works? You can use window.location directly, and it will stringify to the URL when you need it to, but it also has various additional properties and methods on it. You could make something that works in a similar way. In your example, if page.front returned an object with a toString method that will return the appropriate string when needed, but you could then define whatever other additional methods or properties you want. Here's some proof of concept code that you can build upon. function CustomProperty(value) { this.value = value; } CustomProperty.prototype.doSomething = function() { console.log("called doSomething on " + this) } CustomProperty.prototype.toString = function() { return this.value; } var page = {} page.front = new CustomProperty("https://www.dropboxforum.com/hc/communities/public/questions"); page.front.doSomething(); console.log("" + page.front);
Well no. It wouldn't be, that's correct. And from a practical standpoint, it's probably more trouble than it's worth. Occasionally it might make sense, though I admit templates are usually best.
Imhad that idea for a year now, but instead of building something like this by myself, I was thinking if it is ok to stream through twitch.tv :D
What is page.front then? I assume it's an object?
So many people use crummy Javascript shims because they don't know about the placeholder attribute.
idu
i would just ask my mother what she thinks of numbers.
its cool, but you should left align the text so it doesn't shift as you delete characters.
Is there some way to be able to grab `page.front` (or `page.whatever`) as a string without having to tack `""` onto it, and still have `page.front.whatever` be the function? Basically, allowing `page.front` or whatever the page may be return this.value?
It really depends what exactly you want to do with the object, which you haven't really been clear about. But, in general, if you're using it in a context which expects a string, JavaScript will automatically cast it to a string for you, even if you don't use `"" + x` to cast it explicitly. But, you can't have page.front return a String, and still expect to be able to have custom methods, unless you are extending String.prototype directly (not advisable) The only reason I did it in my example is to force the console.log output to be a string, rather than a representation of the object that browsers use.
Haven't done jQuery in a long time, so this may be a long way of writing this but something like: $('.box').click(function(){ if ($(this).attr('id') === 'red') { red[0] = 1; } else { blue[0] = 1; } }); There are ways you could make it more generic but something like this could work. I'm not sure if going through attr is necessary, this.id may work too. EDIT: You can just do this.id
The object would only really be used for checking what page you're on, and if you're on a page in that list (the API I use through Dropbox requires you to explicitly define what pages you are allowed to auth on [and I can't do `?vars` or an `#anchor` - the page has to match exactly]). Alright, so I suppose as long as I'm not displaying it anywhere, I should be good? Also, if you want to take a look at the current version of the code, the current public version is [here](https://github.com/DBMods/forum-extender-plus). If you want the current working version (unpublished, it's about 3 weeks newer, and I can get you a link.
Looks like its still necessary to use Traceur.
[Here ya go](http://jsfiddle.net/6vn0ad3L/) - I used an object to store the "blue" and "red" [0, 0, 0] arrays and did a simple index lookup via property name. [Here's another example with a tiny bit more protection](http://jsfiddle.net/eLdfweky/1/)
Don't need jQuery at all to do that.
Sure, but they asked the question in the context of jQuery. I am assuming the problem they are actually trying to solve is more complex and will be using jQuery.
Thanks ahead of time, please let me know if you have further questions. I should note that yes, I can see the dynamic HTML increasing the hidden "imagetotal" input by 1 (for submission reference), and yes, each &lt;INPUT type=file id=image_##&gt; is generating uniquely, as it should.
More complicated than the other answers but still worked! Thanks!
Well, I didn't know there was a multiple="" property... I'm just going to use that. Westside.
Very pretty! I agree with utuxia on alignment.
He does indeed. There is also a big youtuber (at least one, don't remember name) who sometimes shows up for ludum dare with a big (compared to the normal 60 people max) following.
It's nice to see IE (technical preview) leading the way for standardised modern browser support for a change.
get off your high horse bud. I've seen this effect before its nothing new....I don't like how it shifts because its centered. I'm simply giving him my opinion which is WTF HE ASKED FOR YOU IDIOT.
Actually if you look at [npm's site](https://www.npmjs.com/) the text is left aligned.
Hey thanks for your response. This makes sense after some of the forums I was browsing through.
"heh." ? I've always wondered what that means, is it like "HEH, fucking retard", or "heh, that's funny, I've been there"?
both actually : ) been there. used to write retarded code like that :) we all started somewhere.
I will say that I don't know JS, and try to avoid it at all costs, but unfortunately, it's becoming the most utilized among HTML, JS and the large array of server-side scripting languages (dynamics, display dynamics, etc). web development is love/hate-- OOP here (JSS), simple ass language here (HTML), and all that is PHP/.NET/etc on the server-side. You really have to be an expert in all 3 areas, it's a slow fucking process. I didn't even mention database. It's pretty impressive to see someone be an expert in all areas fly around.
So in your anger-blinded world, if the text was absolutely positioned in the top right corner it would be a different *text effect*?
Not sure why, but [this happens](http://i.imgur.com/1xgdLJD.png) if I load your link and then switch to another tab while the effect runs. Not every time, and it does seem to only happen while your back is turned. 
It was a wtf to me
Yeah you are right, anyway you can skip conditional comments. just detect IE server side and include the only-IE CSS files when needed (for example, passing the UA as prop). Luckily conditional comments are not supported by the last IE versions (it is a bad practice indeed) and they are slowly dying.
I'm using 6to5 and I'm very happy with it! 
You (or script author) should post some performance benchmarks comparing this and other popular utility libraries(underscore, lodash, lazy, etc). http://jsperf.com/ is a good tool.
Personally I hate every kind of animation that happens without my input. I guess I'm a part of a minority in this though. As far as animations go, it's better than most. It annoys me but still looks nice.
The blinking cursor gives an affordence showing that it's an active textbox. I myself tapped it to try bring up the mobile keyboard. Maybe you could just have the blinking cursor showing as the text is being animated. I don't know. Otherwise looks good.
Just wanted to note, I am not the script author. Just thought it was interesting and so I thought I would share :)
 body { overflow: hidden } == window.addEventListener("resize", function() { app.canvas.width = window.innerWidth; app.canvas.height = window.innerHeight; });
Maybe you could explain what the library is supposed to do or help with as I can't figure it out from the examples. Then, you could include that explanation in the README in the git as well.
http://stackoverflow.com/questions/7347203/circular-references-in-javascript-garbage-collector It depends on the type of garbage collection that is used. ECMA does not specify which type should be used afaik. According to this link it should be fine starting in IE7. 
nice overview! A few years ago, symbols made Ruby different from other programming languages. Good to see other languages are picking up this idea of "meta-values".
Not to make a big deal of this but, no, he didn't put it in the context of jQuery though it was an option.
Yawn.
No worries, also protip: use `name=image[]` for easier server side handling of the uploaded files.
I have a bunch, here is a list of pizza franchises: http://pastebin.com/Kacy7ucU Let me know if you want more
Don't use this script, photoshop has built-in features for this. I can't spell it all out, but research photoshop Actions, Batching, and Droplets (depending on the situation), and I'm sure you can get it to do anything you want with a little patience.
Why would someone who doesn't know Javascript be teaching it to others?
It is one system among many but it seems that almost all other systems are taking some ideas from it. Not the other way around. I'm not sure why people would use systems that are only part React when they can use the real deal. Unless you are dealing with legacy systems you may as well use straight up React instead of picking out something like HTMLBars for a pseudo-React approach.
Welcome to K-12 education in the United States. High tech teachers are hard to come by because the private industry is so much more profitable than being a teacher. This isn't something I'm not capable of teaching. I hold a Masters of Information Systems so I'm not completely ignorant of the subject, or programming in general. It's just not what I choose to do as a profession and not something I greatly enjoy doing like most good programmers do. I'm more of a "break and fix it" kind of guy. Plus, I'm not trying to teach advanced concepts. This is an introductory course that will cover the basics of programming (in general) and start to focus on JavaScript as the class progresses. But I do understand your concern and see it all the time where unqualified people are forced to teach subjects they know nothing about, especially outside of the core curricula of math, science, English and history. Basketball coaches teaching business education classes and such is pretty much the norm these days. Edit: Damn autocorrect 
**Don't** ask for "the size of the browser" (window) — it's unnecessarily restrictive. Here's a technique that works even if you later decide you want to have a header or sidebar or something. 1. Use CSS to stretch the canvas over the page; usually like: html, body { height: 100%; margin: 0; padding: 0; } #my-canvas { display: block; height: 100%; width: 100%; } 2. Use `offset*` to measure the canvas's display size and adjust its buffer size to match. function adjustCanvas() { canvas.width = canvas.offsetWidth; canvas.height = canvas.offsetHeight; } window.addEventListener('resize', adjustCanvas, true); adjustCanvas(); This part will work for any canvas anywhere, whether or not the canvas is filling the page. (Unfortunately, the resize event listener has to be set on the window, not the individual element, and won't catch internal relayout. There's just no good way to handle that.)
I think teaching computer concepts is far more important than teaching any particular language. So many people jump to a language when teaching first time students. You have to realize that these students were born into a world where powerful computers already existed. To them, it's magic. They have no idea how stupid these machines truly are. They don't know the difference between memory and the hard drive. They have no idea how simple the CPU is. Also, learning how to THINK properly to solve problems with a computer is far more important then where to place the semicolon. 
A lot of developers don't want a monolithic framework, myself included. The entire appeal of large frameworks is that they make decisions for you, and some people want to make those decisions themselves. Taking individual libraries and forming your own architecture gives you much more control over how the stack behaves. Growing your own shoulders instead of riding on someone elses, so that you aren't stuck when the framework turns right and you need to turn left.
I'm going to develop the lib further. Can you open a ticket on github?
Ok how about this one: https://gist.github.com/anonymous/1295788c7bff052a1e8a
Thanks, that's a great explanation! Makes a lot of sense. I'll look at it closely.
I'm trying to figure that out myself. This article about symbols in ruby says that there's a performance benefit? http://www.troubleshooters.com/codecorn/ruby/symbols.htm#_What_are_the_advantages_and_disadvantages_of_symbols I dont know if that's the case for ECMAscript though
One use case mentioned in the article that I like is for private members
As someone who writes Ruby for a living, it's nice to see symbols in JS. It would be good to see some sugar for it though.
In Ruby it's better performance due to using a single object for an identifier rather than many string objects.
This is a good article on that: http://games.greggman.com/game/webgl-anti-patterns/ Ideally you don't want to look at the browser window size, you want to check the canvas' container size. Then make your container the size of the window (or not.)
They are not great, but not so bad as to say "Never use them" (no garbage collector likes them, altho many can handle them -- Java, C#, etc) Questions: * how much data lives on your page (in megabytes)? * how much data would be circular referenced? * how long does your page live? (is this a single page that lives forever, or does the user navigate away every couple of minutes? If you are only dealing with a MB or two of data, don't worry. If the user navigates from page to page a lot, don't worry. If you are running a single page application that stays up for weeks (think gmail), and running much more data...then you should consider avoiding them, or using cautiously. 
I have used circular references, and they have caused problems. I still use them though. The main problem has been when attempting to output a string / JSON representation of the object which has got circular references. This would cause a stack overflow error when calling my stringify function. This was solved by another programmer changing the stringify function so that it abbreviates the objects which have circular references.
I read that but wasn't really convinced in that being a good practice
Im actually learning javascript at the moment and im using Codeacademy.com to do so. after that im gonna work on some projects of my own to better myself. Im not sure if you are allowed to use it but its a great site
Yes, using them for private properties was the original plan, but it proved to be too complicated, especially due to proxies (there’d be two versions of getting properties).
PASSWORD[this] = password; What an odd use of WeakMaps, using them as Objects in JS, why not call set()?
React is a library.
Symbols are better than strings for tokens (such as colors) and help with extensibility. An example for the latter is `Symbol.iterator`. Python uses the name `__iter__` so that it doesn’t clash with other method names. You can reserve double underscore names for programming language mechanisms, but what can a library do? With symbols, there is a universal safe mechanisms for clash-free method “names”.
my opinion is,since you cant enforce privacy with symbols,it has very little value for people witring javascript directly.However it is usefull for people who implement 3rd party languages in javascript. 
That’s because you have discovered a typo. ;-) I fixed it, thanks!
Ruby’s symbols are basically strings that are immutable (which JavaScript’s strings always are). Symbols serve different use cases.
I don't see how any real garbage collector (reference counting isn't GC afaik) will have any kind of problem with circular references.
Great syntax, very unique too. At first glance it looks like you have no grasp of javascript, and it is kind of true, but your background in programming shows. I've thought about making a text-based game a few months ago, so i'll give my 2 cents. Don't forget to give the player options, because otherwise you'll end up with more of a story than a game. If you're willing to crank up the complexity of your game, you can make a concept map to better organize the game and the options the player have, and use as a kind of 'cheat sheet' to get around in your game. What do you mean by text-only? Because the interface of a text-only game usually is a small and a big box, one for the input and the other for the output. I'm not saying that you should limit yourself, I actually like text-based games with polished interfaces, but since you're putting buttons and what not (like asking the player for a name and stuff), you should re-consider the 'put the number for the powerup' thing and put buttons depending on the availability of the player's options. Not something really necessary, but convenient for the player. And the power ups went by unexplained. Also, it's not a good idea to use the alert and prompt functions; even if it is a place holder, i'd like to point ou that they're terrible :p
Markdown -&gt; LaTeX -&gt; PDF is another workflow, one that gives better typography. You can't use inline HTML if you do that, but you can use inline LaTeX.
When I was in school, this mentality frustrated me. I had many teachers like this, and while it's admirable to teach I could never really ask advanced questions. I didn't get what I wanted out of my school as a result and turned to self teaching. In the end, it turned out fine, but I wish I had that extra background. 
Agreed, and as a heavy JavaScript programmer, I'm not sure it's the right language to teach highschool (or college) students programming. Beyond basic control flow, JavaScript is unconventional and hard to understand. I used JavaScript for about 4 years before I actually understood what in the world was going on. Do you have the option of teaching another language? I learned on C++ in college which was super boring and it was hard to stay focused at times. Python is a really popular academic choice for a lot of good reasons. It's easy to set up, easy to read, no compiler, and has a decent package manager. Beyond that, packages like flask or django make it really easy to create web applications. The "cool" factor of creating a simple website could really do a lot to help your students stay motivated and interested. If you don't know Javascript really well yourself, I think you'll have a really difficult time getting beyond if statements and loops.
So you can't use the square brackets to get and set objects in the map? Could you do it through a proxy, or would the key be converted to a string before the proxy got it? 
Actually, reference counting is a valid garbage collector implementation style, and widely used. But it might depend on your definition of "real". http://en.wikipedia.org/wiki/Reference_counting You can read on other algorithms here: http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)
So are Backbone and Angular, that doesn't preclude them from being frameworks. Any extensible abstraction designed to provide structure through inversion of control [is a framework](http://en.wikipedia.org/wiki/Software_framework). But fine, lets examine another part of your statement. The crux of your argument is that if someone sees a feature that they like as part of a product, they should just use that product instead of incorporating that feature into other products in the same category. You're basically saying that ideas should never be propagated and there should never be two pieces of software that do similar things. That people should just use whichever one came first, regardless of if they don't like the way other pieces of that system work. Do I need to explain why that premise is flawed? The borrowing of ideas is what drives competition, and competition is what drives the inspiration of new ideas. If everybody just used React instead of applying React's ideas in other ways, then we'd be as stuck in a rut as we were when everybody just used IE back in the early 2000s.
Ah, cool idea. But I just checked and the value in square brackets is coerced to a valid property key.
Great concept!
That's unfortunate
Yea! cause who needs mobile support? https://github.com/twitter/typeahead.js/issues/324
This is totally besides the point, but why is the United States of America completely missing in the [Country Name example](http://code.educationgovt.com/typeaheadjs/autocomplete_local.html)? 
I switched back and forth a few times, saw nothing, let it finish in a background tab and wound up with [this](https://www.dropbox.com/s/lfmb9t6yzp7aoaz/Screenshot%202014-12-28%2017.27.01.png?dl=0).
Great writeup! I can't help but feel underwhelmed about ES6 symbols, though. No syntax and no interning. The latter means objects with symbol keys won't properly serialize via JSON. Symbols won't link up when read back in. On the other hand, a solution to the key collision problem is something I've sorely wanted. If interning was introduced, along with some namespace resolution rules, a clean module system could be built entirely on top of this. Functions could be safely declared globally, bound to a unique symbol on the global object, sort of like Lisp. 
There are some [here](https://raw.githubusercontent.com/Hypercubed/ArraySpeedTests/master/readme.md) ([via](https://github.com/Hypercubed/ArraySpeedTests)).
As /u/rauschma mentioned below, these symbols differ from Ruby's concept of symbols, and thus don't really serve the same purpose. Symbols in JS aren't so much about immutability or performance as they are about uniqueness (which *is* similar to Ruby), and really aren't meant to be used the same way (ie. you're not going to be creating a slew of symbols for every "dictionary"). As such, new backwards-incompatible syntactical sugar doesn't make much sense for symbols.
Perhaps a section differentiating es6 symbols from Ruby symbols is needed? Knowledge of the latter appears to result in some misconceptions here.
my friend vows by the head first series. I never liked it, but might be good for beginners. http://www.amazon.com/Head-First-JavaScript-Programming-Freeman/dp/144934013X
Codecademy, while great for beginners, barely scratches the surface of JavaScript. Hell, even saying that much is a huge overstatement.
Like everyone else said, intro programming classes should teach algorithms/design patterns rather than just syntax. Also, JavaScript has a lot of weird behaviors like being loosely typed and prototypical inheritance that make it a poor choice for a complete beginner to learn. Likely not something you can change at this point though. Can't help with a preset class but you could poke around Udacity, Coursera and Khan to find something to get ideas from. Also, the book Eloquent JavaScript is great, free, and spends a bit of time fleshing out beginner level ideas as they apply to JavaScript. Hackerrank.com has exercises you could potentially use as homework dealing with all levels of programming problems. Can't emphasize enough, though, that the language shouldn't matter. You should teach problem solving and how to think like a programmer with tools like recursion, none of my base level classes did this well *at all* and while I came out knowing syntax and super basic operations, I couldn't really do anything I could already do without having to write a program coming out. 
The actual library doesn't come packaged with any css, it's left up to the developer. As long as you tune it well, it should work as well on mobile as not.
Really cool! One thing I will say though using "==" for exact comparing instead of "===" is sometimes a bad idea. This is why I started to use three. It can sometimes give dodgy results. http://stackoverflow.com/questions/359494/does-it-matter-which-equals-operator-vs-i-use-in-javascript-comparisons the answer on their shows a quote of Douglas Crockford showing the differences with the two operators. I would also agree with Gravyness (haha great name btw) the alerts can get quite annoying ;) although their placeholder and it is a work in progress, so nice work it is a good twist on the dice game. Congrats!
5000 gods from all around the world, from all eras: http://ultramondia.com/api/gods/getall
A couple days ago someone posted their [Project Gutenberg clock](http://www.reddit.com/r/javascript/comments/2qguch/my_first_javascript_project_project_gutenberg_as/). I thought the best way to improve it would be to have it read the text excerpts from JSON, so that it could link to the relevant data and do some interesting metadata stuff with it. However that would involve porting the entire Project Gutenberg library over to a JSON file
Apologises for the confusion. https://github.com/cheeriojs/cheerio/blob/master/package.json you will see that jsdom is actually listed there.... as dev dependency. Useful on its own for server-side Dom manipulation.
How would you normalize it?
Yep
[A large list of assorted adjectives, adverbs, verbs, nouns, funny locations, etc.](http://www.ineedaprompt.com/dictionary.json)
10 upvotes and no suggestions?
my garbage collector didn't come this week due to christmas.
Yes, I've used it in projects. I don't know what tuning is...but right off the bat you'll run into touch events not triggering the autocomplete. Sure you can hack it to add touchend listeners, but thats just the start. They don't even test in mobiles, so its all up to you.
Check out [Armstrong numbers on RosettaCode](http://rosettacode.org/wiki/Armstrong_numbers) for methods used in various languages, and consider adding your JS solution, as well. 
I just changed half my object properties to symbols, can't wait to see the look in my supervisors eyes
Differential animation always has problems like this. You can fix this particular bug, but you'll still have issues like slow animations under heavy load, difficulty extending or tweaking timing, increased complexity of timing effects like pausing, etc. OP, if I were you I'd take a different approach to the animation: compare the current time to the start time, figure out where that means you should be in the animation, then draw that frame.
&gt; "More verbose" and "more code" do not violate DRY. Writing what is essentially the same function three times for three different types certainly is a violation of DRY. This is common in C++ and Java. Not so common in languages with good type inference. Also, if you have to think about every potential use-case of a function while you're writing it, something is wrong.
Just wait, standards body will change a few things, and MS won't bother adapting....or maybe they do in an upcoming release, but we're still stuck with all the garbage they've littered the internet with in the past. I hate to be *that guy*. But until MS consistently leads the effort and produces a good browser for at least 10 years, one little surge of effort on their part just to save face isn't going to undo the last 20 years of hatred I have built up for that company.
WebSQL is deprecated. IndexDB.
Thanks for the work done so far! I adopted it because it works even with webpack and jest :)
i thought it was this one: https://github.com/atom/autocomplete
Remove redundant entries and decide which spelling is the correct one.
Thanks for the tip, I'll try to remember the identity/equality difference. 
VAT Rates - http://jsonvat.com/
Edit: nm, i see the alternative lamda syntax now. I am confused, how does the block of JS code using "let" work?
Once you have done it a few times it just becomes natural and you do it without realising :)
As this is not owned by Microsoft / Apple, But Opensource, you can expect all this Mobile Support near days..
I was figuring this list was automated, and just removing the entries would replace them the next time whatever wrote those entries in the first place.
&gt; Asking a question about WebSQL &gt; Feeling mad when people tell you to use IndexedDB. It's like asking how to use mysql_connect() on /r/php
It's worth noting that the presentation cited was one given by one of the authors of the new AST format. A lot of consideration went into this spec and these tools by people who know what they are doing.
For a single, isolated page load, and assuming you're talking about only the time to download (vs render the page to a certain point) it will load faster with the code directly in the HTML as you're eliminating a round trip to the server to download the .js file. That being said, don't put your JS into your HTML files. It's a bad choice for a bunch of reasons you can easily google.
directly embedded would avoid the need for another HTTP request HOWEVER, there are are a number of reason you might want to avoid this. Most of these come down to caching. * Separately stored JavaScript can be cached separately. So if it is called from a different page, or if the HTML of the original page is changed it doesn't have to be re-requested, or if it is re-requested it can be 304ed. * On commercial dynamic sites, static elements are often served off a CDN for reduced load times, you need external loading for this * It is harder to lint and minimise embedded JavaScript * separating function and presentation is generally a good idea for maintainable code. Therefore unless there was a very good reason, I would always recommend separately 
Thanks for the response. In that case, let's say I have in my html: * Facebook sdk js code * Google analytics js * addthis js code * **1 .js** file which contains 2 javascripts By what I understand, it would be better to put all the javascripts I have into that **js** file that containts already 2 other javascripts.... right?
If your web page lives on the same domain as the api (meaning both the web page and the api url start with "www.domain.com"), then you don't need JavaScript. You just need an [HTML form] (https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#Examples). If that's not the case, you're going to need to learn about [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).
Would be nice to explicitly define Lamdas instead of expecting the reader to infer from examples.
It's not bad *at all*. All JS runtimes must be capable of handling this pattern because it is used extensively. Consider the case of Object.prototype, which has a constructor which points to Object which has a prototype property that points back to Object.prototype.
If you don't understand the way the scripts work, put the Facebook/Google/AddThis scripts on the page as their documentation describes. The load time difference isn't enough to warrant the time you'll probably spend trying to figure out what's broken when you try to move them into your script. If you have written your own scripts in the page, you are probably better off to put them into the .js file.
 &lt;div className={someClass}&gt; .... &lt;/div&gt; class is protected word. *Sorry I know it's a minor thing.
What did your testing show?
WebSQL is designed around a [specific version of SQLite](http://www.w3.org/TR/webdatabase/#web-sql). Not abstracting the storage so that different storage methods can be implemented on the internal browser side is a very poor design decision. What if a flaw was found in SQLite that allowed executing code on the device or allowed access to data outside your site. How about SQLite releasing a new version that dramatically improved performance but was API incompatible with the version standardized by the W3C.
&gt;the time you'll probably spend trying to figure out what's broken when you try to move them into your script A simple concatenation of files is identical to having multiple `&lt;script&gt;` tags on the page
There are several ways to answer this. If the script is small, the answer is almost always to embed it in your HTML page. If the script is large, the answer is that you're likely to break even, but that depends on when it is loaded and how many other resources are queued up in front of it. If the script is _very_ large, it will load faster inside the HTML only for initial load, but can be loaded faster from cache for every subsequent load of the page. I'm gathering from your other comments here that you're just inserting a few small 3rd party utilities, and in this case there's something else to consider: most small third-party utilities are actually just preconfigured loaders that then trigger an external load of the actual 3rd-party script anyway... and in this case, it's probably easiest and best to just embed them at the bottom of your HTML file. But the _one true correct answer_ is always this: open your network panel and load the page. Write down what you see. Then reload the page, and write down what you see. Do that a few times and figure out for yourself what is happening. Then adjust to a different strategy and do the same steps again. Then make the decision that makes the most sense for you. Don't ever be a slave to dogmatic development rituals, nor to the advice and rules of people on internet forums. Evidence over theory, every time. Also, please remember that _performance is not the only statistic that matters_. Maintainability is huge. Sometimes a penalty of 130ms to load an external file is a very equitable trade-off for the convenience of having things broken up into separate pieces, according to purpose. _Make educated decisions._ The penalty in development time for a 1300-line file is often measured in days, or even weeks, of development... a huge cost compared to 130ms suffered individually by your visitors.
Because your browser allows you to open 8 HTTP requests at the same time, it will be faster to load in external JS files. After that first load the browser will cache the JS files making your page render faster. So no, embedding JS would never be an improvement over including.
Is it still rude if I'm stating a fact? How many times have coffeecritters called javascript ugly? Answer: millions of times. 
it took me awhile to figure out what `fgt` meant. 
It is far less maintainable, making it far less elegant than you think it is. Be careful with that word.
`&lt;script async src="/path/to/file.js"&gt;` in header Put your "required" js in footer of page. `&lt;script&gt;$(function(){ app.start() })(); &lt;/script&gt;`
I thought you meant to type "functions" at first. 
**Maybe**. If you're loading Facebook SDK, Google Analytics, and addthis from a CDN, you should leave them as they are for a couple of reasons: 1. The CDN will automatically deliver the JS files from a server that is geographically close to the client. 2. The client can use cached copies that they loaded while browsing **other** web-sites. 3. You avoid any potential problems that may surface from minifying a third-party vendor's code.
This is very true. I am now using /u/lachlanhunt's example [below](https://www.reddit.com/r/javascript/comments/2qhhih/how_do_i_add_a_function_to_every_property_of_an/cn6wny1), which creates a `new Url()` for each, and does a `Url.prototype` on the stuff.
130ms difference is big, especially for something as trivial as this (a deployment detail, really).
Those files are not static, if you concatenate whatever version you got something will break.
Unless your javascript is blocking and it's probably blocking.
Any chance you know how to get express to log the full request, body, and response? I'm getting this kind of error: Error: invalid json at parse (/Users/ctindel/src/reader/api/v1.0/node_modules/body-parser/lib/types/json.js:72:15) ... I just want to get it to log everything, which I'm guessing it turns off for security reasons since there may be passwords, etc in there. I have tried using the express-winston white and black lists but there doesn't seem to be much in the way of examples online. I'm pulling my hair out here and I'm probably missing something stupid. Any help you can offer would be much appreciated.
Except when you have the other bunch of reasons to put it into your HTML file which Google, and many others, have written about a lot lately.
Feel free to PM, I'm glad to do something random from time to time!
Hook it up, sounds like some interesting reading.
You need to add an event listener on the submit button and intercept the submit event. The handler then needs to read the value from the text box and perform an XMLHTTPRequest (aka Ajax) with the value in the query string. There are many ways of doing this. [Here's a quick'n'dirty jsfiddle](http://jsfiddle.net/3abaxr85/1/) You can check in the network tab of the developer console that a request is made to example.com.
its only blocking until it's downloaded and parsed. you always need to wait until that happens.
What part are you having trouble with? You could accomplish the front-end bit without too much trouble. See [here](http://jsfiddle.net/sj5ybb7t/). Downloading as a txt file might require some back-end processing to actually create a file. Check out the [jQuery cookie](https://github.com/carhartl/jquery-cookie) plugin for working with cookies.
don't ask to ask
Hey Hixsonj, Here's what I have so far: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;div contentEditable="true"&gt; You can write here. &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; As you can see, instead of working with textarea's, I've opted for a div with contentEditable set to true. Now I need to use JavaScript to catch the value of the contentEditable div and use it to send it to a file that the user can download. Do you think you could help? 
If you must learn JavaScript. I recommend 'Eloquent Javascript', then 'Javascript: The Good Parts' by Douglas Crockford, and finally 'Javascript Allonge' (two out of three are free to read). When you're done with these, you'll have a small start on understanding the language. http://eloquentjavascript.net/ http://shop.oreilly.com/product/9780596517748.do https://leanpub.com/javascript-allonge/read That said, as a JS programmer who likes the language, I absolutely do NOT recommend the use of JS as an introduction to programming. The language has tons of problems that take a very long time to learn to deal with. JS works functionally, but looks imperative with an object system that looks a little like Java and functions like a bad version of self. The biggest issue in many ways though is that to do anything interesting requires learning a bunch of HTML and CSS (both boring and with it's own set of gotchas). The go to recommendation tends to be Python (though I would also consider ruby). Lua is another recommendation. It's very similar to JS, but with almost none of the quirks. It also works on TI Nspire calculators (I'm sure my HP48 is yelling at me right now), and is used by a lot of game companies (and has things like luaCraft which might be good at keeping the students interested). An honorary mention goes to Scheme/Racket as it is IMHO the best teaching language ever devised. Elegant and filled with all of the best ideas computer science has to offer while small and free of typical syntactic confusion; Scheme is truly a language from a more civilized era.
So, iow, it's blocking.
http://bower.io 
It also assumes that the user will only use your SPA once. We certainly hope they come back, and that it loads (even) faster the second time.
I don't think you can log all of them, some of the data might be cyclic and JSON.stringify doesn't like it... but you can try! console.log('REQUEST: ' + JSON.stringify(req)); and see what happens? 
Sorry, claiming only "trivially simple" SPAs can be loaded on page load is silly. 
Why does it assume this? The main HTML file with embedded JS can be cached. 
Browserify + npm is a pretty solid option. 
What is it?
On the other hand, having multiple external resources allows the browser to fetch multiple scripts simultaneously (assuming async). Agreed on the third-party assets, of course&amp;mdash;would be interesting to do an analysis of page load times on sites that use commonjs bundlers like browserify, since there'd only be one huge bundle script loaded.
However the 7 httprequests cannot start until the initial tcp/ip connection has been made and that socket starts passing chunks to the browser to parse. Making connections is a lot of overhead. Embedding js will be faster until a break-even point where streaming the data will be more expensive than forking off and hitting disc i/o to load that section. Of course the sacrifice is that though page load speed might be faster, time to render will be slower if using a decent browser that renders progressively. My advice would be: * anything on a CDN leave as is * all site wide javascript files compile into one include file * all page specific javascript files compile into one include file * embed only a few functions if you feel it makes maintaining that page more comfortable to you Phillip.
There's also security in the form of [Content Security Policy](http://w3c.github.io/webappsec/specs/content-security-policy/)—though the latest versions have more flexible mechanisms for inline content than "all" or "none".
Right but where would you put that call? I think the JSON parse error is coming before my route is called. Chad
I'm trying to use ajax to update the points on a google map. I can make the php file return data however I want. The problem is grabbing that data with javascript. There is an example here: https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap If you take a look at the 'array' of data points in the example it looks like this(i'm only showing 2 points because we really don't need more to figure this out): var data = [ new google.maps.LatLng(37.782551, -122.445368), new google.maps.LatLng(37.782745, -122.444586)] So what exactly is happening above? Is this an array? Because I was under the impressino an array would look like this: var data = [ "new google.maps.LatLng(37.782551, -122.445368)", "new google.maps.LatLng(37.782745, -122.444586)"] When I use php to encode in json format and call it with ajax it looks like the above example. This won't work with google maps. It can't have the double quotes. If it doesn't have the double quotes, it doesn't work from being called with ajax because it isn't an array or something like that. Can you just explain what exactly is going on? If you pm me I can explain it much better and show you what I'm doing. I did a ton of playing around in the console. And I can make it work when I manually create the 'array'. Right now I'm just using php to create it when the page loads, but that doesn't help me when I want to update the map without refreshing the page. 
Sorry right now I'm way too lazy to search for the source but I remember reading a recent article with benchmarks and it concluded that putting assets on a CDN was actually most often counter-productive in term of pure loading speed performance vs inlining because of the additional DNS and http requests. All the other advantages still stand though, and unless you're Google or Reddit or whatever you don't really care about such small optimizations.
&gt; External scripts can change at any time I really hope not. That's not very safe.
Ugh, my wife does this all the time. Drives me absolutely nuts.
&gt; Because your browser allows you to open 8 HTTP requests Depends on the browser. Some more, some less. http://stackoverflow.com/questions/985431/max-parallel-http-connections-in-a-browser Edit: Stop downvoting relevant facts.
Here are some sites I share with my students to show a bit of what you can do with JavaScript: * http://www.nytimes.com/newsgraphics/2013/10/27/south-china-sea/ * http://www.thewildernessdowntown.com/ * http://rectangleworld.com/demos/MorphingCurve2/MorphingCurves2_black.html * http://soulwire.co.uk/experiments/webgl-gpu-particles/ * http://www.jeanhelfenstein.com/ * http://www.drawastickman.com/
you don't need to do that at all. `$` will be available automatically when jquery library loads. `$(function(){ //do something on dom ready });` is all you need in your code.
Their modules system is very complicated and I still can't understand how this works. For example, [command-palette-view.coffee#L43](https://github.com/atom/command-palette/blob/master/lib/command-palette-view.coffee#L43) commands = atom.commands.findCommands(target: @eventElement) What is `findCommands`? Is this a function? Where is its code?
disclaimer: I have no allegiance with this but I think it's a cool idea and am a little sad to see it's lack of funding :(
The last two bullets are issues with your build process, not embedding JavaScript. Agree on the second bullet though. It can actually be even faster than you indicate, as you'll often be serving it from a different domain allowing more parallel connections.
That's what I find problematic about atom: the code is too fragmented to even find a single function. findCommands is obviously defined elsewhere.
If you cache the HTML file too then cache busting becomes difficult. The contents of the js, css and html will change as you continue to develop your SPA and without cache busting updating the version the client has can be very difficult. 
My definition of trivially simple would be a SPA that can be bundled up into a single file and transferred to the client in a single request without the user noticing that the page is loading slowly. 
Second trip is much faster than a second request and connection.
isNaN is not a reliable way since it returns true for any string that doesn't gets parsed to a number, but checking for inequality will do it. x !== x //returns true if x is NaN Edit: Had an error.
It's broken. Liner. And boring.
Buttfuck.io
thanks! interesting point about the relation to integers and C enumerated types. Also, LISP's famous "atoms" influenced programming language design indeed.
You shouldn't use `x !== NaN` (directly) because it does the exact opposite of what most people (initially) expect. ES6 introduces `Number.isNaN` which does not do any type coercion and thus give expected results. You could use the `x !== NaN` though as a polyfill for the `Number.isNaN` function, but I wouldn't ever use it directly.
lol
You do make some more assumptions here though. For example, it may not be possible to cache the HTML page because it contains dynamic elements (MD5-hashed URLs to statics, session data, etc.). By including your static JavaScript sources in the HTML you've then guaranteed no data can be cached between visits (SPA doesn't mean the user only opens the page once), so subsequent visits will be slower than keeping the JS external.
Probably it tries to compare as array, not as number like first ones, and it fails because array comparison is not defined on "==" operator. You can also try [0] == [0] It will return false
Any pity insight?
Of course if you change the HTML or JS you'll need to redownload it but what does that have to do with users only accessing your site once? Sure, bundling decreases efficiency of caching but that doesn't conclude that users only access it once.
Javascript does type conversion behind the curtains. When you compare strings and booleans against a number, they get casted to number before doing so. When comparing objects against number, JS tries to return the default object value, or its primitive value. This is what happens on your first two examples. When you compare object against object (your third example) they are never == nor === (unless it's the same object). Having the same contents does not mean they are the same object.
jQuery registers itself in the global namespace both as jQuery and as $ (unlest you use noConflict), so whatever values you gave to $ or jQuery before loading the library will be overwritten. So, you could do `&lt;script&gt;` ` var $='hello';` ` var jQuery='world';` ` console.log('Before loading',$,jQuery);` ` &lt;/script&gt; ` ` &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"&gt;&lt;/script&gt; ` ` &lt;script&gt; ` ` console.log('After loading', $, jQuery); ` ` &lt;/script&gt; ` and see what happens to those global variables.
They're not directly issues, no, but they *are* concerns that should be weighed. Sometimes maintainability is more important than raw processing speed, and those sorts of concerns should be considered by anyone designing any type of application. 
JavaScript is like working on an old Jeep. It's not very clean; it's not very efficient; you're dealing with weird nonsensical issues all the time; there's a good chance you will cut off your fingers or mash your knuckles. But... it's incredibly common, there are a ton of writeups on whatever you're trying to do, and the barrier to entry for getting something done is so damn low that for better or worse, it's not going anywhere soon. The only thing that's going to rescue us from JavaScript is when every browser ships with a common language-agnostic runtime (a la CLR, JVM). The JavaScript-as-a-Transpiler-Target movement has the right idea and a little bit of momentum, but I think the potential obsolescence, the hassle involved in setup and debugging, and the perceived inefficiency scare most developers away. Imagine if you could code your web app in whatever language you wanted because they all compiled down to the same VM bytecode... Found the above comment on hackernews and felt it was incredibly apt. 
You could say all of these things about Python. They're not bad things, they're good things. You can write shitty, unrefactored code in any language. Making peripheral tasks harder doesn't make that less likely - if anything, it makes it more likely, because refactoring is itself more of a pain.
This article really touched a nerve with me. While I agree that there is a lot of junk JavaScript out there I don't think the solution is encouraging devs to self censor ("every weekend project doesn't need to be on bower"). The problem isn't with individual devs, it's with decision makers. If I make a library that solves a specific problem then maybe that code should be incorporated into a larger, more stable library. The dev shouldn't be discouraged from using it, and the in-house software architect at your job shouldn't incorporate it into your projects. If you consider coding to truly be like a craft then what are you asking? The up and comers to not create because it makes it too hard for the decision makers to make decisions? :-)
Those modules that are good will be often used and improved, and will prevail over those that aren't good. However, what is good and what is not is somewhat subjective, except for a few indicators. 1. Interfaces - imagine spending more time reading the documentation than actually doing stuff. A good module has its API done right, the methods are named systematically (unlike for example native PHP functions). 2. Documentation - you rarely encounter APIs that don't need at least a bit of a hint how to use it. A good documentation will ensure that you won't waste time on using this module. 3. Conciseness - modules that try to do everything usually get the tiny details wrong. Those that concentrate on the tiny details are the better choice (and easier to replace if they stop being maintained).
You might want to look up mixins. That's a common way to handle this kind of thing.
For one, in your example you're doing new aVar(a) Instead of new Other(a) ... so I'm not really sure what you're asking? **Edit**: If you're trying to do a mixin, you'd want to do the following: function SpaceObject() { Coord.apply(this, arguments); // inheritance Other.apply(this, arguments); // if you're mixing in functionality // from the mixin constructor too } // Always do this for inheritance, never use the "new" keyword here SpaceObject.prototype = Object.create(Coord.prototype); SpaceObject.prototype.constructor = SpaceObject; void function mixinOther() { var keys = Object.keys(Other.prototype); var i, len; for(var i = 0, len = keys.length; i &lt; len; i++) { SpaceObject.prototype[keys[i]] = Other.prototype[keys[i]]; } }(); However, **be careful** when running this code through a minifier. You *should* be alright, but if minification is a huge concern you'll want to specify each prototyped method separately (instead of running the loop). i.e. SpaceObject.prototype.methodOne = Other.prototype.methodOne; SpaceObject.prototype.methodTwo = Other.prototype.methodTwo;
Its the job of the people consuming the libraries to filter out the good from the bad. The community should definitely not filter itself or publish less often. The star rating, open issues, and commit history on github are usually good indicators of a solid project worth using. If it doesn't work out, you fork it yourself and patch the functionality you need or you install a new library. This reeks of another article by a programmer who is just now learning about modern day JavaScript and complaining that it's too hard because it lacks structure.
There are several ways to do this, but all methods will simply simulate multiple inheritance since JavaScript only allows single inheritance. That being said, there are few libraries out there that simulate it well. You could use something like `$.extend` or `_.extend` like others have suggested, but there's no shorthand for actually calling the overridden methods and if there's a method that already exists with the same name, it'll be overwritten. I'm a bit biased, but I think that Dojo's [declare](http://dojotoolkit.org/documentation/tutorials/1.10/declare/) does a great job at it. It uses [C3 MRO](http://en.wikipedia.org/wiki/C3_linearization) to determine the order of methods to call when calling `this.inherited(arguments);`. One downfall of `declare` is that it uses `arguments.callee`, so it can't be used in strict mode. I've forked your fiddle and come up with a [new fiddle](http://jsfiddle.net/mnmau3aq/2/) demonstrating some of the things that `declare` does well. `Coord` is the base constructor, `ZCoord` is a mixin constructor, and `SpaceTimeObject` inherits from `Coord` and uses `ZCoord` as a mixin. `SpaceTimeObject` objects can use all methods from `Coord` and `ZCoord` and can override them and make calls up the inheritance chain. Let me know if you have any questions. Another library that is similar to Dojo's `declare` is [DCL](http://www.dcljs.org/). It's written by one of the guys who wrote `declare` and uses a new approach that doesn't require `arguments.callee`. I'm not as familiar with DCL, but it's a solid library. TL;DR: If you're looking to just add a few methods to a prototype that are stored on another object, you can use jQuery or underscore. If you're looking to do a more true multiple inheritance, I'd stick with something like Dojo's `declare` or DCL.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**C3 linearization**](https://en.wikipedia.org/wiki/C3%20linearization): [](#sfw) --- &gt;In [computing](https://en.wikipedia.org/wiki/Computing), the __C3 superclass linearization__ is an [algorithm](https://en.wikipedia.org/wiki/Algorithm) used primarily to obtain the order in which [methods](https://en.wikipedia.org/wiki/Method_(computing\)) should be inherited (the "linearization") in the presence of [multiple inheritance](https://en.wikipedia.org/wiki/Multiple_inheritance), and is often termed "MRO" for Method Resolution Order. The name C3 refers to the three important properties of the resulting linearization: a consistent extended [precedence graph](https://en.wikipedia.org/wiki/Precedence_graph), preservation of local [precedence order](https://en.wikipedia.org/wiki/Order_of_operations), and fitting the [monotonicity criterion](https://en.wikipedia.org/wiki/Monotonicity_criterion). (The name "C3" is not an initialism.) It was first published at the 1996 [OOPSLA](https://en.wikipedia.org/wiki/OOPSLA) conference, in a paper entitled "A Monotonic Superclass Linearization for [Dylan](https://en.wikipedia.org/wiki/Dylan_(programming_language\))". It was adapted to the Open Dylan implementation in January 2012 following an enhancement proposal. Subsequently, it has been chosen as the default algorithm for method resolution in [Python](https://en.wikipedia.org/wiki/Python_(programming_language\)) 2.3 (and newer), [Perl 6](https://en.wikipedia.org/wiki/Perl_6), and [Parrot](https://en.wikipedia.org/wiki/Parrot_virtual_machine). It is also available as an alternative, non-default MRO in the core of [Perl 5](https://en.wikipedia.org/wiki/Perl) starting with version 5.10.0. An extension implementation for earlier versions of Perl 5 named Class::C3 exists on [CPAN](https://en.wikipedia.org/wiki/CPAN). &gt; --- ^Interesting: [^Multiple ^inheritance](https://en.wikipedia.org/wiki/Multiple_inheritance) ^| [^List ^of ^algorithms](https://en.wikipedia.org/wiki/List_of_algorithms) ^| [^Nucleic ^acid ^structure](https://en.wikipedia.org/wiki/Nucleic_acid_structure) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cn9giaz) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cn9giaz)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
What is the advantage that this library provides over socket.io (a very thin abstraction layer over native WS implementation)? https://github.com/btford/angular-socket-io
I'd like to see improved ratings and statistics for NPM and bower. Volume is great as long as you have a could approach for sorting the wheat from the chaff.
That is why I am still writing Perl. Yup. Sure it's not "sexy", "hip" or "cool" like Node or ROR. However, the community puts enormous effort into staying backward compatible of core, and most non-core modules, Perl itself and everything around it. Huge focus on testing with a giant matrix of systems testing all of the modules. This systematized approach puts in the credibility and assurance that the things will continue to work. I can be sure that if I take my 5 year old Perl framework (Catalyst) project and run it against a newly released version today it will still work without changes, or with minimal **documented** changes.
I agree -- thank you for expressing it so clearly. I think the author touches on some real problems, like: * Lack of a sense of community (compared to something like the LKML), to shape best practices and curate libraries/frameworks * Software industry myopia, when development speed is always prioritized over maintainability - the responsibility of decision makers, as you say * Developers using code they don't understand - the number of years-old security flaws that surfaced in 2014 show this problem is industry-wide All of these are difficult problems and will not be solved by Javascript developers keeping their imperfect repos private.
fukkin love OOP
What you describe is the ideal case, but the reality isn't like that. People download new modules in a rush and deploy them, because they needed a solution yesterday and it's 11pm and you want to go to sleep. You can't remove human factor to look for shortcuts.
&gt; "What's bower?" "A package manager, install it with npm." "What's npm?" "A package manager, you can install it with brew" "What's brew?" … This is an hilarious tweet. But after years of random people with no programming knowledge whatsoever "hacking stuff together", it's no surprise that there are many *almost* identical tools competing for the same spot.
This sums up why I left a decade of dev for a security position at the drop of a hat. Web dev is a commodity position anymore. What used to be a hammer and nails gig has devolved into a duct tape and bubble gum position. 
i think you are missing a few basic concepts. first off, who the hell uses SSIs anymore? We haven't built websites that way since the mid 90s.
Asking a question like "How do I do multiple inheritance in Javascript?" is a very good indicator that you're Javascripting all wrong.
you also forget that a good module will use **convention over configuration** assume some reasonable basic decisions (for example default values for ImageMin) and you can change things as you need for your special use case. 
Certainly, programming has become a much more common job, many times over in the 15 years I've been working as a programmer. But that's a great thing. I disagree with your last sentence though – programming has always had the full spectrum of development quality. I remember 15 years ago seeing extremely ugly hacks that should have been outlawed, and I still see them today. Likewise, there were amazing things being developed back then and there are amazing things being developed now. Nothing really changed except the scale. If you want to be a developer and you want to develop great, high quality projects together with other great developers, I feel like it's even more possible than ever. I've met some really amazing JavaScript developers in the five years I worked at Spotify, both in the company and outside the company (at various events). Fifteen years ago I didn't feel like I had as much choice to work with passionate developers as I do today. We're lucky, in this time and age, and really shouldn't complain about the state of things.
Actually no, you really can't say all those things about Python. &gt; You can write shitty, unrefactored code in any language. That wasn't the point of the article either. The article isn't about the languages, it is about the cultures and communities which spring up around them. The Python community has a quite well defined set of cultural values[1] which code and projects are compared to, or at the very least serves as a "role model", i.e. a definition of good. (The Perl community, as a point of interest, also has a set of values which directly conflict with Python's in a number of places, e.g. "there is more than one way to do it".) The JS community is big and diverse, but doesn't really have a core set of identifiable values yet. The Node sub-community is kind of trying to evolve something with talk of "The Node Way". [1] = "The Zen of Python" is a fairly good summary. 
How would I make the loop, if the json looked like this?: {"1":{"lng":"-72.8890647","lat":"41.3093906"},"2":{"lng":"-72.9326928","lat":"41.3116403"},"3":{"lng":"-72.9326928","lat":"41.3116403"},"4":{"lng":"-72.8930104","lat":"41.3119938"},"5":{"lng":"-72.9083726","lat":"41.3206304"}}
Default values are part of a reasonable interface, don't you think?
To be fair, the JavaScript community is (at least in my experience) more vibrant than the Python community. This of course also means more noise and overlap, but it also means more development and solutions. I often find myself damning `pip` and it's equivalents for how difficult it is to install packages and track their dependencies on a project-by-project basis. Yes it's mostly possible, but `npm` just does it better. Hence I find myself using third-party modules much more often in JavaScript. As for the Zen of Python I think that comes deeply rooted with language design, and isn't comparable or achievable in JavaScript. JavaScript has always been a lost cause in terms of language design as it was born as a utility for making HTML dynamic in browsers, and was supposed to be kind of familiar to Java developers. Python on the other hand has always had a very firm mantra of keeping the language style clean and readable, and Guido has overseen its development well.
You'll find passionate developers, no doubt, I was/am one myself, but the work has become menial and just a big case of slapping various components together and reading documentation from X numbers of frameworks as it stands. I'm sure some people enjoy that as it let's you get things done very quickly, but the painful and cumbersome nature of dealing with edge cases, undocumented features, quirks, and "automagic" meant I was spending less time writing valuable meaningful code and more time rolling out hacks, patches, duct tape, and notes via comments. The final straw for me was spending a solid week arguing with a team about reliance and independence on any one framework. They opted to write more proprietary boiler plate and paint themselves into a well documented proprietary corner than attempt to grasp the power of modular design patterns, message passing, and loose dependencies. I literally took a new job less than a month later, don't even get me started on the uphill battle that has become "but framework XYZ kinda does that with 2k lines of duct tape, why is a 200 line vanilla javascript better?" syndrome. When all you have is a hammer, every problem looks like a nail. Also, a lot of dev now days have become so reliant on their framework soup half don't understand deeper concepts and patterns...like closures and prototypical inheritance, sure they've heard of them, but they likely don't understand wtf is actually going on. 
The thing is, that should be an accepted change of using web development AND keeping up with the latest in the tech industry. You don't always need to use the latest -- the one thing people aren't realizing is that even if angular 1.x stops being supported (which it seems like it won't -- 1.5 is coming out next year; more may come afterwards), that it's not dead in the water. It has such a huge following that people will be using angular 1.x for ages to come. Developers will not just up and abandon their existing plugins and infrastructure, simply because there's nothing wrong with it -- it still works. In that sense, it will, for better or worse, be the new Java 6. You do not need to rewrite everything, ever, unless you have some strange performance demands or something else comes up.
why is it so wrong...?
And I agree with everything you say. However, the reality does not reflect that. Stereotypically lots of JS developers are younger, less mature developers, who are also not as responsible as "seasoned" devs, as they haven't seen the "real world" yet. Churning out quick copy paste code in start ups to "get the job done", but without long term vision.
OK I got it working great. Thank you. Now I have another thing I need to figure out. I'm updating the map without page load. But I need to set the map options (zoom level and coordinates to center the map). If a user zooms and moves the center of the map around, and then I update the map, the map goes back to the original map options. How can I get the current (user defined) map options, so when I update the map, the map looks the same except for the new points being added? 
Hi /u/vintharas, it looks like you're new to reddit (or at least, /r/javascript) -- welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `barbarianmeetscoding.com`. Thanks for your consideration!
var snoo = { foo: 5, bar: 5+10 }; bam.
Hi kenman! I am indeed a noob! I will read the guidelines and follow them in the future! Thank you!
It works, but you've got an `EventListener` *and* the `onclick` function. If you step through it with your browser's `debugger`, you'll see that it's running twice.
 var snoo = { foo: 5, bar: this.foo + 10 };
thanks this is great
Nah, `this` is basically just an alias for `snoo`
Thank you! ^_^ hehe yeah I get it :)
This. So much this. I really hate when people say the javascript community needs ~~more organization and~~ fewer libraries because that just makes it harder to find what you're looking for. Yes, it's nice having clear standards and gotos for libraries, but what about when you're trying to find something incredibly obscure? For example, I was recently working on a project that uses the GitHub API. There are 5 javascript libraries for the GitHub API. One is super popular, has a thousand stars and fit the needs of just about everyone who's going to need the API, but it lacks one tiny feature that luckily one of the other libraries had. If the JS community was more policed, there would only be that one library and the other 4 either wouldn't exist or would be impossible to find and unmaintained. Sure, most people should be using the first library, and someone needs to fork it with the missing feature, but when I need a solution now, it's very helpful to not have to reinvent the wheel all the time. **Edit** I misspoke. I was commenting on my phone.
:-D
Also: isn't Crockford the 'Torvalds of JS'?
I do have to wonder, what are you trying to actually do? If you have access to the value of whatever you're setting foo to, why would you ever need to reference foo as a pointer inside your object declaration? 
don't do this because it's horrible but... var snoo = { foo: 5, get bar() { return this.foo + 10 } }
Because that was a contrived example. In practice, the "foo" value is computed from something else that you wouldn't want to unnecessarily compute more than once.
That is clever, and cool to think about the implications, but yeah.
Everyone using the terms "Mixins" are answering your question. In Javascript, the "class object" is a regular object (except you created it with the function keyword, rather than {} or Object.create). You can manipulate it however you want, and the established pattern is $.extend, or _.extend or _.assign. In ES6 (where we get an actual class keyword), we also get Object.assign, making mixins pretty much builtin. The general pattern looks like this function InheritedMixin() { /* initialize object */ } InheritedMixin.prototype.someMethod = function() {}; function SomeClass() { InheritedMixin.call(this, parameters); } _.extend(SomeClass.prototype, InheritedMixin.prototype); One thing lost in this pattern is the prototype chain, meaning `instanceOf` doesn't work. However, you usually shouldn't be using this. Even in languages like C++ where you have `dynamic_cast`, it's frowned upon to inspect objects in this way. It's better to check the object for the property you plan to use.
I feel this so much. I retreated to a R&amp;D-type position to avoid the combinatorial explosion of BS that is web development. It's a perfect storm of broken abstractions, a huge influx of new/noisy developers, and exceedingly poor tooling. The web as a platform cannot die fast enough. The culture is defective at it's core. It always believes that it's just one framework away from nirvana, while complaining, "but which framework should we choose?" It rejects any notion of framework-independent code because it's too hard (read: we have Stockholm Syndrome to our Business Overlords). It rejects the lessons of the past, claiming the web is somehow different, while remaining engulfed in the same things that kill every project ever: unchecked, incidental complexity. Ultimately, it is anti-intellectual. It's not just JS, it's web dev. It revels in knowing little, in studying even less, and avoids learning at every turn. It worships at the altar of shipping before thinking. It runs on Internet time, where the only time is the present.
&gt; more organization [...] makes it harder to find what you're looking for I hope this makes it obvious why you're getting downvotes.
I've been in the industry 1 year less, with a detour to another profession. A friend recently reminded me that one of the reasons I left was the lack of widespread discipline and standards in the industry, and pointed out that that is probably one of the reasons I've been happy to return. The industry as a whole, especially web dev, has gotten immeasurably better. There are more people doing the job, but that hasn't reduced quality - it's created a community of people who are truly committed to engineering, rather than nerds who "just want to program" (a real phrase sadly used by many of my contemporaries at university).
While I don't agree with everything in this, it's a pretty good intro to common mistakes in languages with higher-order functions generally.
The last will compare them as objects (arrays are objects) and since they are not the same object, it's false. The first two do type coercion, but the last does not because both sides are the same type (object).
Multiple inheritance is not only possible in JavaScript, but the way to accomplish it is much better than Java. The trick is, it doesn't look anything like multiple inheritance in Java or C++, but that's a good thing. In JavaScript, it's accomplished with concatenative inheritance, which is just a fancy way of saying, "copy properties from one object to another". This works well in JavaScript, because objects in JavaScript can be extended after instantiation (dynamic object extension). There are some issues to be aware of. First, the diamond problem doesn't exist in JavaScript because whatever property you add last overrides any property it collides with. This is great for the defaults/overrides pattern, and behaves in a way that should be familiar to anybody who uses HTML + CSS. Effectively, it's cascading property precedence. That said, you can also combine inheritance techniques such that there are private properties with the same name that don't collide with each other. This is accomplished using closures and functional inheritance. See: http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/
Well, that turned into an advertisement *real* quick.
I'm not talking about compiler tricks and optimizations, I'm talking about when the *approach* of the system gets in the way of performance. Sometimes you have a direct tradeoff between raw speed and maintainability. Here's a hypothetical situation: suppose you have two approaches to a problem. On the one hand, you might be able to squeeze O(log n) out of the solution while making your cyclomatic complexity skyrocket (greatly reducing maintainability), or.... you could make a far more maintainable system at O(n^2) speeds. Which approach do you take and why? The answer is that it depends. Do I *need* O(log n), or will O(n^2) be sufficient? Will this solution need to change as new requirements come in? 
I think what you mean is that asking "How do I do classical multiple inheritance in JavaScript?" is a good indicator that you're JavaScripting all wrong. That, I would agree with. But it's not true that all forms of multiple inheritance are wrong. See: http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/
Pointing out a problem is pretty useless unless you can come up with a solution. I'm pretty confident that there's enough useful content in the article that it's a little unfair to write the whole thing off as an advertisement.
The solution can be found from taking a peek at problems we find with our close friend, the monolithic codebase. Separate your concerns! You're a great writer, and your points have merit. What you're pitching doesn't sound like something I'm against. I'd be more than willing to read a few articles, loosely coupled by a single resource (that's you). However, when it becomes very clear that the intent of the article isn't about *informing me*, it's about *selling to me*, it's very easy to lose interest and dismiss the whole thing entirely. Musical artists don't write one pop song with an album's worth of content crammed in, and a "this album is only $9.99" verse tagged on at the end. Some songs are hits, some songs aren't. But they consistently produce quality pieces (some considerably more popular than others) that their listeners enjoy. And if I listen to one song, I'm more likely to find another and perhaps buy the album.
Right, yes, which is why I said "in this instance". The perfect-world solution to the problem you describe is you writing the O(N²) algorithm and the compiler magically figuring out the O(log n) algorithm, but of course that's almost never possible. But in this case it is: there's no reason you can't keep your code separate and maintainable, and have a build process that packages it as necessary.
In order to create change, somebody has to champion that change. Somebody has to rally the troops. That's what I do. I do produce lots of articles that are a lot more teaching and a lot less selling. For instance, check these out: The Two Pillars of JavaScript Pt 1 https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3 and The Two Pillars of JavaScript Pt 2: https://medium.com/javascript-scene/the-two-pillars-of-javascript-pt-2-functional-programming-a63aa53a41a4 I have also released my entire book for free: http://chimera.labs.oreilly.com/books/1234000000262/index.html
I mean --- I know. You advertised these all in the article. But thank you. Best of luck. :)
How's: function rgb2hex(r, g, b) { return '#' + ([r,g,b].map(function(v) { v = Math.min(v | 0, 255) &amp; 255; return ((v &gt;&gt;&gt; 4) &amp; 0xF).toString(16) + (v &amp; 0xF).toString(16); }).join('')); } :)
It's true, he may have never found that library if there was more organization! ^Instead ^it ^would ^be ^a ^fork
Well, **I** think this is a great article. I wonder why...
Paypal has a similar package of middleware but with a lot more security measures than just XSS. I have been using it in my projects and it is easy enough to configure. [npm](https://www.npmjs.com/package/lusca) - [github](https://github.com/krakenjs/lusca) - [video](https://www.youtube.com/watch?v=vE5kCqwoSUg)
Unsurprisingly, and as with most programming languages, the tool resembles the medium, and evolves accordingly. 
It sounds like what you're seeing is rapid growth and change in an open organic kind of environment. And it sounds like what you want is stability and an environment that is not volatile. The thing is that any area which is under pressure to deliver under changing and/or competitive conditions will favor practical (read: hacky) solutions due to resource constraints (here resources may be knowledge, time, and/or money). The truth is that the "culture" you describe appears in many areas, not just JavaScript. For example, I recently got into iOS development, and trawling through Stack Overflow questions I found that a lot of people are looking for minimal, quick and dirty solutions for their next app, and the answers aren't much more knowledgable. I simply think this is a natural behavior in people who wish to focus on what they're building, not how they're building it. Now, back to JavaScript. It's seen some of the greatest innovations in functionality and portability in the past years. More than any other language in the same amount of time. This is thanks to the culture of JavaScript, and I really don't think we can say it's in that bad of a place. It's messy and chaotic and looks like a mix of multiple languages, but that's the nature of experimental and rapid improvement. The alternative could be something like Python which is improved very methodically, but extremely slowly. Python 3 final was released over 6 years ago but 2.7 bias is still very heavy everywhere. JavaScript is not anti-intellectual. It might be anti-theoretical and is certainly very pro-practical. At some point, I think it simply comes down to taste, but I see no objective way to say that the way JavaScript is evolving today is destructive – it's very constructive and has in fact influenced many new programming languages, which we should be very grateful for.
Why is that horrible?
&gt; The only thing that's going to rescue us from JavaScript is when every browser ships with a common language-agnostic runtime (a la CLR, JVM). How quickly we've forgotten what a miserable failure that was...
I agree. General purpose libraries, in particular, are overused. I tend to stick with just a few special-purpose libraries -- used sparingly. My output is all the better for it.
There exists no silver bullet general case build process that will do what you are asking, so you must be advocating writing custom meta-code to speed up every piece of maintainable code that needs a performance boost. I suppose you could do that, yes. I'm not sure I would call that "maintainable", though. It would of necessity be tightly coupled to the maintainable code you wrote, and would thus have to be rewritten whenever you changed your main code. 
 function toHex(s) { var hex = s.toString(16); return hex.length == 1 ? "0" + hex : hex; } function rgbToHex(r, g, b) { return "#" + toHex(r) + toHex(g) + toHex(b); }
Really? You just omitted 'and fewer libraries.' I have had people misquote me before, but never with my original words right there.
assuming your map is defined as `map`, you can get the current user-specific values like this. var zoom = map.zoom var lat = map.center.k var lng = map.center.D and then do this to set the proper values after the reload: map.setZoom(zoom); center = new google.maps.LatLng(lat, lng); map.setCenter(center);
See the rationale documented here. http://wiki.ecmascript.org/doku.php?id=harmony:egal
Yep, that is actually what I did. I also used var defaultzoom=13; if(map){ var zoom=map.zoom }else{ zoom=defaultzoom } Because I do need to set the zoom level when it initially loads.
I think a lot of what this article says is correct. It touches upon very good points about how important it is that you need to assess the quality of what's in npm/bower/etc., before you commit to using it in your project. On the other hand, development methods have significantly changed over the past years, and things have gotten so much better. The only problem is *getting started*. It takes some time to learn why you should go with AngularJS, or ReactJS with Flux, and why it's worth doing unit tests or setting up Webpack or using Grunt/Gulp. Now more than anything, I think, it's worth to write good, extensive blog posts about how everything fits together and how you can make a viable tech stack out of multiple components. That is something I'd like to see more of in 2015.
I thought it was appropriate to join this conversation. Hopefully I can help. 
Maybe avoid using `.col-12` as it seems like that's hooked in to your front-end. Consider creating a new class called `.enlarged` and add/remove that guy with your click handler. It's usually best practice when using things like Bootstrap (structure) to decouple your effects from any front-end libraries. Hope this helps!
You're taking what could be a constant property access and turning it into a getter which computes the same value every time its called.
While I agree it is up to us, what is notably lacking is a collection of curated packages provided by an organization with a public mission. An excellent example in another area is OpenBSD, which has a strong emphasis on security and reliability. Their reputation of auditing and avoiding badly designed/fragile/insecure code allows me to trust that the software they provide is good enough for me. The JS ecosystem needs higher capacity to grow a network of trust. Doing it all individually is a huge waste of effort.
Dude! Any chance you could do a line by line description of what is happening here?
bearcat + browserify bearcat write application level codes browserify resolve library http://bearcatjs.org/
Actually try this somewhere before suggesting it. :) Result if executed globally in a browser: {foo: 5, bar: NaN} That's because since "this" is being used in the declaration of the object, this refers to the context you're defining it in (say, the global context, which is itself an object which doesn't have a key "foo"), not the object itself. 
One thing to point out: It might be widely available, but that doesn't always mean it's good to do. You say there's nothing *intrinsically wrong* with it, but less we forget, there are still numerous nuances with multiple inheritance. When you inherit from a class, you take a dependency on that class, which you have to support the contracts that class supports, both implicit and explicit. With more dependencies comes more complexity and responsibility of the class. This tends to violate the Single Responsibility Principle of OOP. Unless the two parents are mutually exclusive, a class should only have one reason to change. The diamond problem, is probably the biggest argument against multiple inheritance. If you have two parent classes that inherit from a single class, which version of the shared methods do you take? Consider the following pseudo example: function Animal() {} Animal.prototype.move = function() {...} function Bird() { Animal.call(this, arguments); } _.extend(Bird.prototype, Animal.prototype); Bird.prototype.move = function() {...} // Override move, by flying function Horse() { Animal.call(this, arguments); } _.extend(Horse.prototype, Animal.prototype); function Pegasus() { Bird.call(this, arguments); Horse.call(this, arguments); } _.extend(Pegasus.prototype, Bird.prototype); _.extend(Pegasus.prototype, Horse.prototype); Effectively, our Pegasus' `move` function can only walk on four legs now, which really doesn't make it a Pegasus. With multiple inheritance, it's pretty easy to just make mistakes even as a professional dev. Often, there is a different pattern, or way to distinctly split functionality that it doesn't have to be provided as a single class, i.e. Composition.
Agree with all of that. I guess it's a tradeoff at this point.
An array of the 3 arguments is being mapped into an array of 2 character hexadecimal representations of each 0-255 argument (the Math.min line just ensures that the arguments won't be out of range, e.g. Math.min(300 | 0, 255) &amp; 255 would still be 255). The actual conversion involves bitwise operators/comparisons that are a little out of my depth, but each one just returns a string hex value "place" based off of the original value. The final array is then simply joined into a string. Elegant.
'doh! Thanks so much. I knew it had to be something silly. 
might be good to note that most native implementations of `Function.prototype.bind` are a little slow.
I don't think this should be a concern until it's a concern. That is, I think it's fast enough to use over a custom bind function that would also be confusing to readers.
&gt; I don't think this should be a concern until it's a concern. of course, and i can see your point on confusion. that being said, when it becomes a concern, it might be good to know. ya know?
Doubt you can get any simpler than these. Check out [codewars](http://www.codewars.com/) while you're at it. function hexToRgb(h) { return { r: parseInt(h.slice(1,3), 16), g: parseInt(h.slice(3,5), 16), b: parseInt(h.slice(5,7), 16) }; } function rgbToHex(r, g, b) { return "#" + ((1 &lt;&lt; 24) + (r &lt;&lt; 16) + (g &lt;&lt; 8) + b).toString(16).slice(1); }
I take it you're not familiar with ellipsis.
* [Spec/Reference implementation](https://github.com/tc39/Array.prototype.includes) * [Response from a MooTools developer](https://gist.github.com/fakedarren/28953b01e455078fb4f8)
Setting the 1 bit at the 25th position to keep a placeholder character for the string conversion is awesome, love it. Problem is this will fail with numbers outside of the range [0, 255] (g will bleed in to the r value, etc.).
What lontlont said is correct, but to expand: v = (v &amp; 255); (with or without the Math.min) will cause an implicit conversion of v into an integer, and then bit AND it with 255, clamping the value to [0, 255]. 255 is represented in hexadecimal as FF (*0xFF*) and binary as 11111111 (*0b11111111*). We do an unsigned bit shift right (*&gt;&gt;&gt;*) four places for the value of v (if it was 0b11111111 it would now be 0b00001111), bit AND (*&amp;*) it with 0xF (0b1111) which will cut off any potential bits outside of our 0x0 - 0xF range and grab the resulting hex character (.toString(16)). We do the same with the rightmost four bits. This prevents us from having to check how many hex characters we actually got out of our .toString(16) call, as we'll rightfully get a 0 in the leftmost place if its hex value was actually 0.
Sometimes you don't have time to write everything. If all I need is a quick tool for integrating GitHub with an Arduino project, I'm not going to spend hours writing a fork for a feature that no one else will ever use. It would be great if we always had the time to write everything we need from scratch, but there's a reason libraries exist in the first place, so we don't have to keep reinventing the wheel. **Edit** Also, I suppose I might have given the impression that the other library was broken or something. It's gh3.js, a very well maintained and thoroughly tested project.
Thank you for suggestion. I'll take a look.
I take issue with the one referencing `Array#forEach`. The callback is invoked with three arguments (the element value, the element index, and the array being traversed). If the `doSomething` function can take multiple arguments (e.g. `parseInt`) but you only want to pass in the value then you have to go through a second function.
They're ok. But just make sure you keep them short and to the point. I try keep the paragraphs in my comments to around 20 lines because you don't wanna, like, overdo it. If I need to write more (which somehow seems to be case most of the time), I'll usually add a few hard returns in between.
you need more hard returns in this comment (see my tip here: http://www.reddit.com/r/javascript/comments/2ox4i9/well_written_code_doesnt_need_comments/cna5mrj)
The alarming thing is that most of my co-workers didn't even know about functions like queryselector, because they always just use a library...
Instead of basing your custom Number class off of javascript's builtin Number obj, maybe you should make a getMilliseconds() method that accepts a number and returns the number in milliseconds? require(["number-utils"], function(NumberUtils) { console.log(NumberUtils.getMilliseconds(5)); }); It's better not to pollute the native Number classes' prototype (in case it ever changes in the future) and making it a method gives you more flexibility and control over the returned value. 
does it also need a scrolling marquee? :)
One man's ugly is another man's sexy. No need to feel sorry for anyone.
Did you make that account just to post in this thread? Funky, man. Real funky.
It should of course be new Other(a) . Thanks this is exactly what I was looking for. One more thing: why shouldn't I use the 'new' keyword? Is there a functional difference?
The fact that there are around 200 event emitter implementations on npm is indicative of the problem at hand. the availability of GitHub/npm is perhaps a unique factor that distinguishes the JS generation from the authors "halcyon" days. I have no doubt the task of establishing a "gold standard" of packages would benefit the community greatly. many of the packages on npm are arguably the result of learning exercises, which is no bad thing. It can, however, make the shelves of npm a confusing mix of "branded", high quality projects, and the sundry sketches and flotsam of community pet projects. The key factor seems to be the transition to npm from GitHub, should *all* these projects be published? Many of us need to spend time honing our skills before we can make meaningful contributions to big projects, and it arguably provides less satisfaction than crafting our own from scratch (which is why we do it right?). It's only at a certain point in your trajectory as a developer that you dare to approach the big ticket projects. In terms of (absence of) craftsmanship, I believe that is a direct result of unsustainable business practices, not an absence of desire. Craftspeople exist in the JS community, but are rarely given the time to design a solution. Agile is touted as the holy grail, but I've noticed several agile projects end up with "coral reef" architecture, slowly growing outward from the initial commit. Architecture considerations tend to get lost in the mad rush for an end of sprint demo. I feel this is partly because the businesses we work for (if not a hip dev led startup) cannot understand our domain, and so tend to express their will via the design arm of the organisation, and expect us to produce working UI at the same speed. Poker planning and peer pressure encourage us to lowball our estimates (especially in male dominated environments) and so we inevitably rush to get features committed. I've witnessed this same phenomenon in three separate orgs. I was discussing this with a colleague recently, and posed the question "is it worth attempting to make projects with longevity in mind?". I've yet to see a project that doesn't descend into chaos once it comes out of greenfield into contact with the business owners/ux team... Perhaps we should just suck up the cost of a bi-annual rewrite?
Considering the success and popularity of the JVM and .NET ecosystems, I'm not entirely sure I'd call that a failure.
I must admit, I'm not too sure on the spec anyway. [NaN].includes(NaN) === true; [NaN].indexOf(NaN) === -1? I think the correct approach is [NaN].some(Number.isNaN)
Even so, `new String` does not create a string, it creates a `String` object wrapping a string value. You're not adding a method to the string, you're adding it to the object wrapping it: var str = new String('test'); typeof str === 'object'; // true str.lol = 'wtf'; str.lol; // 'wtf' var s = str.valueOf(); typeof s === 'string'; // true s.lol; // undefined Actual strings are practically singletons (only one exists for each possible value, cross-context trickery notwithstanding) and they don't have configurable properties. `String` objects OTOH are plain old objects: var s = 'wtf'; var str1 = new String(s); var str2 = new String(s); str1 === str2; // false The only use of `String` objects is to wrap strings when they are treated as an object, e.g.: var s = 'hello'; (function () { console.log( typeof this, // 'object' this === s, // false this.valueOf() === s, // true this instanceof String // true ); }.call(s)); 
Object is a function constructor(you can write new Object() ) but object literals aren't instance of Function. ({}) instanceof Function //false
JS functions count as both functions and objects. The language spec is that all objects are instances of `Object`, and all functions are instances of `Function` (which inherits from `Object`). `Object instanceof Function` is true because there's an `Object()` constructor built into the language. Note that `Object instanceof Object` is true not because it's the same constructor, but because all constructors are (also) Objects. `SomeOtherConstructor instanceof SomeOtherConstructor` would be false, because any given function only has `Function` and `Object` in its prototype chain. (Don't confuse the `prototype` property of a constructor function with the actual prototype of a constructed object -- they're not the same thing.)
No
What is the problem? What are you struggling with?
My few cents - I'd implement some XmlHttpRequest into that bookmarklet which would fetch some JSON/text data from an URL. I'm not sure if bookmarklet is allowed to open local files.
 var snoo = {foo:5} snoo.bar = snoo.foo+10 
Well, the situation is as follows: I have a page with three buttons, each button can invoke a modal with ajax-loaded content (using foundation). The captcha is within this modal. Usually captchas are rendered when the page is loaded, but I want to render it after the modal is loaded. Currently I use the following Javascript to achieve this effect (its called in the 'modal opened' callback function): Recaptcha.create("XXX", 'captchaContainer', { tabindex: 1, theme: "clean", callback: Recaptcha.focus_response_field }); But I can't find out if that is valid for the new captcha system. There doesn't seem to be any documentation for using AJAX with this new captcha system.
Are you following the documentation ? It seems to have just what you are looking for: https://developers.google.com/recaptcha/docs/display Also, look at this: http://stackoverflow.com/questions/7261436/how-can-i-load-a-recaptcha-form-using-jquery-ajax-while-leaving-the-recaptcha-sc
Wonder if r/JavaScript could gather the resources to create a site for this purpose?
That is indeed exactly what I was looking for, how could I have missed that? Yesterday, when trying to find a solution all I could find were references to the old api. This is perfect, thanks!
You're very welcome :)
Stuff like this happens all the time just look at why they couldn't call the next version of windows windows 9
I've seen bitshifting used with simple multiplications but this is crazy awesome.
but mootools was totally relevant 7 years ago!!! Oh them joomla days and hating life..
I have an egghead io subscription and the videos are great. Most of the content is angular and react, for es6 many videos are free. 
Functions *are* objects in JS.
MDN and the latest edition of JavaScript: The Definitive Guide are pretty good canonical references that read a little easier than the spec...
I think what you are referring to was a joke. Edit: [this image](http://www.extremetech.com/wp-content/uploads/2014/10/windows-10-skipped-9-reddit-95.jpg) is what I'm thinking of. 
No it wasn't 
sass is your friend
Ah, much rebuttal.
Thanks for pointing it out. Fixed!
Nope, functors! :)
Thank you for your feedback. I will make sure to define things more explicitly in future pieces.
You could have your bookmarklet create a script tag and attach it to the DOM in order to include jQuery/anything you want. Then you can write any remaining code in your preferred way. [example](https://gist.github.com/cou929/587995)
It's so you can more easily compose things together programmatically. Consider a program that needs to filter out data matching certain criteria and perform operations on it. Here's a simple implementation of a program that sums all numbers smaller or greater than a certain number: var sumSmallerThan3 = function (smallerThan, data) { var sum = 0; data.forEach(function addIfSmaller (number) { if (number &lt; smallerThan) { sum += number; } }); return sum; }; var sumGreaterThan = function (greaterThan, data) { var sum = 0; data.forEach(function addIfGreater (number) { if (number &gt; greaterThan) { sum += number; } }); return sum; }; var data = [1,2,1,5,6,4,3,1,2,3,4,1]; console.log(sumSmallerThan(3, data)); &gt;&gt; 8 console.log(sumGreaterThan(3, data)); &gt;&gt; 19 As you can see, the summing up part is duplicated. But the code that actually changed was only the function used inside of the `forEach` loop. That means that we can refactor this: var sumOf = function (filterFunction) { return function (data) { var sum = 0; data.forEach(function (number) { if (filterFunction(number)) { sum += number; } }); return sum; }; }; var smallerThan = function (limit) { return function isSmallerThan (number) { return number &lt; limit; }; }; var greaterThan = function (limit) { return function isGreaterThan (number) { return number &gt; limit; }; }; var sumSmallerThan3 = sumOf(smallerThan(3)); var sumGreaterThan3 = sumOf(greaterThan(3)); var data = [1,2,1,5,6,4,3,1,2,3,4,1]; console.log(sumSmallerThan3(data)); &gt;&gt; 8 console.log(sumGreaterThan3(data)); &gt;&gt; 19 You can see that we're already getting much better building blocks for expressing the intent of the code. Let's see if we can refactor it some more. var compose = function () { var functions = Array.prototype.slice.call(arguments).reverse(); return function (input) { return functions.reduce(function (intermediateResult, fn) { return fn(intermediateResult); }, input); }; }; var sum = function (a, b) { return a + b; }; var sumOf = function (data) { return data.reduce(sum, 0); }; var filter = function (condition) { return function (data) { return data.filter(condition); }; }; var smallerThan = function (limit) { return function isSmallerThan (number) { return number &lt; limit; }; }; var greaterThan = function (limit) { return function isGreaterThan (number) { return number &gt; limit; }; }; var sumOfFiltered = function (filterFn) { return compose(sumOf, filter(filterFn)); }; var sumSmallerThan3 = sumOfFiltered(smallerThan(3)); var sumGreaterThan3 = sumOfFiltered(greaterThan(3)); var data = [1,2,1,5,6,4,3,1,2,3,4,1]; console.log(sumSmallerThan3(data)); // &gt;&gt; 8 console.log(sumGreaterThan3(data)); // &gt;&gt; 19 You might say that the code got more complicated, but it's also much more modular. It's very easy now to add additional requirements by changing how the data is processed. var all = function () { var functions = Array.prototype.slice.call(arguments); return function (input) { return functions.every(function (fn) { return fn(input); }); }; }; var inbetween = function (lowerBound, upperBound) { return all(smallerThan(upperBound), greaterThan(lowerBound)); }; var inbetween2and4 = inbetween(2, 4); var inbetween1and6 = inbetween(1, 6); console.log(sumOfFiltered(inbetween2and4)(data)); // &gt;&gt; 6 console.log(sumOfFiltered(inbetween1and6)(data)); // &gt;&gt; 23 There is a lot of value in being able to programmatically specify in what way data is transformed instead of writing specialized code for every case. 
There's not much to say. The truth is still the truth no matter what you believe.
You haven't proven that it's the truth. I'm pretty sure you saw a joke post and thought it was real.
+1
Simple answer: no. You can't access the filesystem from javascript. You could however store the values somewhere like in the localstorage and fetch them from there.
There's nothing in that article but conjecture. I assume /u/CalvinR doesn't know a parody when he sees one: http://www.extremetech.com/wp-content/uploads/2014/10/windows-10-skipped-9-reddit-95.jpg On top of that, [Windows version numbers don't return "Windows 95"](http://dontbreakthebuild.blogspot.com/2011/11/environment-osversionversionstrings.html) they return things like "Microsoft Windows NT 5.1.2600.0" -- Windows 95 is _NOT_ a kernel version, it's a name. 
Unfortunately those most people haven't looked at larger more realistic examples of coffescript from real projects. Staring at coffeescript for six months made me want to kill myself.
Actually, isn't (a major part of) coffeescript's existence based on the idea that JavaScript is ugly or inelegant? I think it's quite appropriate to call it out for being ugly and unreadable!
Just because the truth is ridiculous doesn't mean its not true. I've even run into websites that assumed Firefox version 10 or IE 10 are version one of the respective software. Or how about games that games that require 32 megs of ram state that eight gigs is not enough because they are just looking at the number and not the amount.
&gt; On top of that, Windows version numbers don't return "Windows 95"[3] they return things like "Microsoft Windows NT 5.1.2600.0" -- Windows 95 is NOT a kernel version, it's a name. In case you missed my edit. Dude just give up, you saw something that you thought was real that wasn't. Admit it and move on. &gt; truth What truth is that again? You haven't shown anything, just keep insisting you are right. At least /u/PlNG tried. &gt; websites... games Not even remotely relevant. 
Many (if not all) current browsers prevent programmatic triggering of `click` events on `&lt;input type="file"&gt;` elements for security reasons. So I don't think your first suggestion will necessarily work.
I've worked on enough enterprise code that just does a regex check for Windows 9 to check to see if its windows 9x And it's totally relevant it shows that Deva love taking stupid shortcuts without understanding how things actually work.
k whatever, your conjecture about the naming of Windows 10 is right because you think you're right and nothing else
No I'm right because its the truth it has nothing to so with what I think.
Hahaha. That's Our Javascript! In this case, Object and Function are both constructors. They are both functions, constructors are just functions. And in Javascript, functions are simply objects that can be called. Functions are a subset of objects. instanceof is an operator that takes an object on the left side, and a function on the right side. It returns whether any object in the prototype chain has a constructor equal to the function on the right hand side. Function is a function, and since functions are objects, Function descends from Object.prototype. Object.prototype's constructor is Object. So "Function instanceof Object" is true. Object is a function, so it descends from Function.prototype. Function.prototype's constructor is Function. So "Object instanceof Function" is true.
Jesus you keep insisting you are right and keep failing to deliver anything remotely like evidence. Just give up, you look silly. 
What evidence have you provided other then your opinion. I don't feel the need to price I'm right, the truth is the truth.
The onus of proof lies with the affirmative. All I'm doing is asking for your proof. Since you can't provide that, it's clear you're just assuming you're right AKA guessing. This is also known as [Hitchen's Razor](http://thinkwithoutlimits.files.wordpress.com/2013/09/hitchens-razor.jpg?w=700). 
I'm an experienced programmer who would like to work on non-profit projects is there a way to see what project are available?
and Object is a constructor, hence, a function.
I'm not assuming anything its patently obvious. https://searchcode.com/?q=if%28version%2Cstartswith%28%22windows+9%22%29
whoa dude, that's deep!
Yeah I'm sure MSFT is really concerned about what's going on in Java code. They usually seem soooo concerned about making Java devs happy. Did anyone at MSFT do that search before they decided what to name the next version? It's just as likely that MSFT named it Windows 10 because their marketing dept decided they needed to keep up with Mac OS. 
No it was originally named windows 9 then they changed it and you'd be surprised how much they care about java devs since java is used in enterprise software a lot and enterprise companies are there bread and butter.
Right, was thinking of a function assignment to a property, sorry to anyone who was confused by my mistake. 
My God give up. You have no proof that MSFT checked in on Java libraries before naming their product. YOU ARE JUST GUESSING. ADMIT IT. LIKE AN ADULT WOULD. I'm done, here, have the last word on this thread: 
At least I'm not throwing a tantrum like a child.
I like how you're getting downvoted even though the only "proof" literally says it's a rumor itself.
CalvinR is just using the "downvote = disagree" button. Anytime someone is asked for evidence and they say it's "patently obvious" they're admitting they have no evidence of any kind. 
No, you actually are. Sitting there saying "no I'm right and you're wrong" over and over is pretty much a tantrum. You have no solid evidence, get the fuck over it and admit that you have no clue why it's called Windows 10.
I thought I was supposed to get the last word in here?
I have absolutely no idea why you posted this.
"Millions of Americans can and should learn how to code" WRONG
I know that's the "right" answer, but being a Chrome app greatly reduces compatibility headaches with any future methods, and I so like the readability of hacking it onto the prototype. There probably just isn't a better way to do it wrong :)
Maybe if they wished each other a happy new year it would have been apropos
Why? I think learning to code is a great exercise for people and can lead to a new hobby... it's not saying they should become paid programmers...
Other commenters are correct. I think the best way to achieve your goal is set to up a local server (IIS, for instance, if you're on Windows - it's like 2 clicks). Then make an AJAX request to localhost to grab the file. A text file will be easy to parse, but it's going to be tricky to read into an Excel file at this point (certainly *possible*, but probably not worth the effort unless some library for this already exists).
Try the &lt;marquee&gt; tag
can you recommend any good resources for learning bitwise operations? reading the specs just confuses the shit out of me.
But that's not what you said earlier
what really boggles me about this stuff is that these people are clearly doing it because they're bored with regular common sense javascript and are desperate for new challenges to keep them stimulated. *As if there arent enough real programming challenges out there for them to tackle.* I mean shit, our industry is still struggling to find a good way to sync data with the DOM. We have webGL becoming supported which opens up entirely new realms of 3D mind-fucks that your average javascripter has never before contemplated. *But no!* Let's devote our efforts to finding new ways to iterate through arrays. Let's reinvent the wheel in a really weird way that doesnt do much except make us feel smarter. Bah. get off my lawn.
So essentially you are admitting you are a liar, therefore I'm correct. See that wasn't so hard.
You should look for a paid internship.
This is how web development works, you are free to use a library coded by a 15yo without formal education or you can gather a bunch of computer science graduates and build your own library. Why bother about how other people code?
I totally am. 
What are your goals?
Where are you located?
Word
:)
I would kill for an internship, but haven't had any luck finding one. I'm located in San Francisco where there are plenty of opportunities, I just haven't found mine yet. My goals are to think like a developer and quit second guessing myself. I want coding in js to come as naturally as speaking. Articulating my ideas is a weak point of mine right now and I know I don't always express them as a developer. I want to try working for a start up and my end goal isn't necessarily to be a freelancer, but if it happens I'd welcome it.
follow the link and copy the code from the gist and run it ...it actually works ... It basically demonstrates inheritance in JavaScript and also you will notice when you try to call the method it almost sounds like plain English I have no idea why I was down voted on this one .. It not showing up on the sub anymore :(
And I just wanted to be the first to say to all of you for this coming new year: FUCK YOU!
Do you like long walks on the beach?
Nice work! 
Hi, I replied to everybody :)
Why not?
lol good luck with this guy he's so stubborn he makes Dick Cheney seem agreeable
I think you misspelled /r/circlejerk 
Show up to meetups and show off the stuff you've made and I'm sure that can lead to an internship/entry level job
The short answer is "sort of, yes". The real answer: Stop thinking in OOP and classical inheritance. You don't need it in JavaScript, and the `new` keyword and constructor functions are code smell. They break call(), apply() and bind() for no other reason than to make Java and C# fans feel more comfortable. Use factory functions and Object.create() instead. JavaScript side, classical inheritance is a dangerous toy in all languages. It gives you more than enough rope to hang yourself with. Avoid when possible. 
It even works beautifully on mobile! Great job!
Have you checked out guru.com?
Not at all. You can easily organize your project in a different manner, regardless of language.
Obviously simple programs don't need this level of abstraction. These patterns become very useful once you build big dynamic applications. You can more easily specify behavior declaratively, making code easy to understand. You'll be able to reuse a lot of your data processing code, and probably will use a library like `lodash` for all the FP tools needed (although sadly they messed up the order of arguments). Let's say you are writing a service that allows users to configure certain data processing tasks following an interface like this: var taskDefs = { 'sumGT3': { operation: 'sum', filter: { name: 'greaterThan', args: [3] } }, 'sumST3': { operation: 'sum', filter: { name: 'smallerThan', args: [3] } }, 'productInBetween2and5': { operation: 'product', filter: { name: 'inBetween', args: [2, 5] } } }; That gets really trivial if you have nicely composable functions, and it's not a lot more code than the simple example from the beginning: var _ = require('lodash'); var operations = { sum: _.partialRight(_.reduce, function sum (a, b) { return a + b; }, 0), product: _.partialRight(_.reduce, function sum (a, b) { return a * b; }, 1) }; var filters = _.mapValues({ smallerThan: function smallerThan (upperBound, number) { return number &lt; upperBound; }, greaterThan: function greaterThan (lowerBound, number) { return number &gt; lowerBound; }, inBetween: function inBetween (lowerBound, upperBound, number) { var gt = filters.greaterThan(lowerBound, number); var st = filters.smallerThan(upperBound, number); return st &amp;&amp; gt; } }, _.curry); var processingChain = function (processingFn, filterFn) { return _.compose(processingFn, _.partialRight(_.filter, filterFn)); }; var tasks = _.mapValues(taskDefs, function (task) { var filter = filters[task.filter.name]; var processingFn = operations[task.operation]; var filterFn = filter.apply(null, task.filter.args); return processingChain(processingFn, filterFn); }); var data = [1,2,1,5,6,4,3,1,2,3,4,1]; console.log(tasks.sumST3(data)); // &gt;&gt; 8 console.log(tasks.sumGT3(data)); // &gt;&gt; 19 console.log(tasks.productInBetween2and5(data)); // &gt;&gt; 144
Quite enjoyed that. But now I also wish I wasn't a ham fisted retard. 
Couldn't you just check each time you make a new random number that it's not already in your list of random numbers? 
By storing them, perhaps in an array and checking during each iteration
Right, for that do I need to have two different arrays?
 n=5; //number of random numbers r=[]; //output of n random numbers for(i=0;i&lt;n;i++) { t=Math.floor(Math.random()*(25-i)+1); for(j&lt;1;j&lt;I;j++) { if(t&gt;r[j]) t++; } r.push(t); } I haven't tested this, but it should work.
How random do the numbers have to be? Could you simply fill an array with a linear amount of numbers (1..25) and shuffle? Otherwise check out some GUID algorithms. 
Reddit is no place for truth.
It depends if you are concerned about issues like the number of users, scalability, elastic scaling, security, etc. If it was a real service then you should be concerned about these issues and it would take more than the few hours that a basic Node.JS/JS chat room would take to create.
Perfect opportunity for a [set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set).
Worst case: O(∞)
Hey thanks for the help. I just saw your comment but this is exactly how I did it to figure it out! I'll definitely go to /r/learnjavascript next time but I really had a great experience over here. Thanks a lot to everyone in this thread!
...? Really? You can go ahead and style it better with a few variables if you want. It is a better solution and I explained it verbally, couldn't even have written the code. Edit: it is also the fastest solution by far.
i'm curious what you are using these for and why you need them to be uinque?
This thread makes me want to cry. 
[here you go](http://jsfiddle.net/neuroflux/c5sf8o9u/) I think that's what you need...?
Why are the worst solutions up voted in this thread while the optimal ones such as yours down voted?
Yup, some of these answers are just bonkers... :/
Wish I could give you more up votes. 
Good call on scenario #1 :) But I'll cast away scenario #2 as 'practically impossible' :P
Because the same numbers could be generated over and over and thus, it would never stop.
To what scale does the app have to be? (How many users?). How many features does it have? Is it pure text, formatted text, emoticons? Is there an assumption of a front end? Does it have to work in a single app only or generically on the web? Is it possible to use cloud services or needs to be all on premise? Are there chat rooms and matchmaking or just one single room or is it a person to person chat? Your question is kind of open ended as it's not specific enough to provide any kind of estimate. 
This is much worse than "doesn't have the best performance". Also, your arr.length &lt; 26 check is unnecessary.
Don't do this, either.
You can. Just create or buy more accounts
with node.js : 1. setup your nodejs workflow and modules and hook it up with mongodb and look up some tutorials on how to use nodejs and node packages like express and mongoose. (1 day to set up everything maybe more if first time) 2. create a login passport.js system for authentication. (a few hours to a day depending on how much of you want to understand and scale) here is the workflow tutorial for it : https://scotch.io/tutorials/easy-node-authentication-setup-and-local 3. start adding database schemas for different rooms and users (a few hours - a few days depending on experience) 4. create your backbone.js models and views and database routes for user profiles and chat rooms with their own chat history stored in the db. create a collection for a list of chat rooms and logged users. (several days to make sure everything is perfect) 5. use socket.io to fetch all that data from the server and update the backbone view. (a few days) (you want to update chat room list, maybe that list will have rooms with each their own the frontend will probably take much longer than then backend unless you decide to write some chat bots or add more advanced data. here is a tutorial on how your backend/frontend workflow should look like https://www.youtube.com/watch?v=2BDGBJUtAmo this will get you started and then you can work from there to increase complexity you can use this tutorial to figure out how to sync data between the backend and frontend in realtime http://socket.io/get-started/chat/ i would say it could take 1 - 3 weeks to make it worth using (and maybe even more if you have 0 experience with nodejs because you will be pausing and trying to understand the tutorials). Hello world nodejs websocket chat is not really applicable or scalable. You wanna make sure you set everything up so that you can add more functionality later on and have a good modular workflow if you want it to be successful later on. 
Seriously, that is a terrible idea. Even for 25 numbers, getting the last one might need more than 17 tries 50% of the times. So OP decides to increase the range to 10000 and boom.
&gt; You need to think about the problem correctly. You aren't looking for 25 unique random numbers. You know exactly what numbers you're going to have: all of the integers from 1 to 25. This is not true in general. It's only true for n = 25. For small n, discarding duplicates can be faster, since you don't need to construct the whole array. But I think using a shuffle is perfectly fine here, even if it is a little slower.
&gt; Edit: it is also the fastest solution by far. Fisher-Yates shuffling is much faster. Removing an array element is O(n).
Yeah but the "worst case" would only happen with probability zero for a true random number generator, and with any actual Math.random implementation, it's impossible. Such a worst case is not a concern here.
Yes, it is, you hadn't posted your solution when I said that. Yet, notice your solution is just paying for the complexity on the array buildup. You are, too, doing 25 splices right there, so you have a O(n^2 ) construction.
I still see a bunch of random shit not related to jobs I wouldn't want in *my* feed
The best advice: create something very simple, trivial even, something that takes less than half an hour. Then try something harder.
Use the console and debugger tabs of the browsers' built in developer tools to mess around. The console tab let's you execute methods and inspect variables at any time. The debugger tab lets you step through code execution.
You are a gentleman and a scholar. Thanks for the lesson :)
There are no native tools to render gifs while altering their framerate and playback. That was the point. He didn't make his components just to display gifs, he did it to play gifs in new ways.
Correct! My solution using `splice()` is also not optimal, but it at least avoids the possible long loops of checking if a number was previously generated.
&gt; your code has a small bug since you aren't taking in account the fact the array becomes smaller as your loop unfolds. You are always accessing indexes on the 0-24 range. Oops, you're exactly right! This what I get for commenting before coffee. Fixed!
I can't believe after all this time that browsers still don't allow you control animated gif playback.
&gt;and not guaranteed to ever terminate. Wait, what?!? What kind of sort are they doing that wouldn't terminate, regardless of what answers the comparator gave back?
working solution http://jsfiddle.net/bn9dpdLm/
In practice they do terminate, but that's not specified behavior. The spec, if I recall correctly, says that the browser can do whatever it wants if the comparator is unstable.
Learn the basics, what the different data types are, what can be done with Javascript, and the syntax, and then build something ASAP with the knowledge you've accrued. If you don't use it, you'll forget it really quickly. Once you get a good handle on the fundamentals, I recommend Javascript: The Good Parts by Douglas Crockford. Best programming book I've read, but I wouldn't recommend trying to use it as a novice, might just be frustrating, especially if you don't have experience programming in other languages.
Off-topic, but I think the marketing around this thing is just silly. All they're saying is "Sometimes we're pretty sure a captcha isn't necessary so now it doesn't show up in those cases", but they wrap it up as some sort of dramatic re-imagining of the whole system. Don't get me wrong, I love the improvement and I especially love that Google's improving it with the techniques Google is so great at (analysis of many signals). It's just, that freaking marketing department...
I have never tried react, and as someone that has never tried react it looks a little intimidating, and resources can be thought to follow, so maybe he didn't find the right way to do it.
"Framework ADHD" - Lol, but it's real!
... optimal? This is never optimal, and in most cases not even close.
The concern isn't that it hits infinity, but that it takes much longer than it should.
Well, it's complicated. And the usual disclaimer: I'm a beginner myself. Firstly, the examples you've named are not different kinds of JavaScript. JavaScript itself is a programming language, that mostly runs in browsers. The underlying convention/standard is called [ECMAScript](http://en.wikipedia.org/wiki/ECMAScript). This brings us to node.js, which is a JavaScript engine that runs outside of browsers. This means you can run JavaScript directly on your PC or on a server as a back-end language. Many other things you are thinking of are either frameworks or libraries. Libraries are sets of tools that include many JavaScript functions that fulfill specific tasks. Most popular example: JQuery. Frameworks on the other hand are more than just collections of tools. They are more of an environment which you use to fulfill certain tasks. angular.js is a framework, for example. I'm a bit hazy on the details, but this definition seems to make sense: &gt; The way I like to think of it is that a framework is something you build on (decides structure) and a library is something you build with (has little influence on structure). http://modernjavascript.blogspot.de/2013/04/a-library-or-framework.html
Alright, I'll bite. These aren't different javascripts. These are different javascript libraries/frameworks. Different javascripts doesn't really even make sense with respect to your phrasing. Javascript is derived from ECMAScript, which is the scripting language that forms the basis of JavaScript. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources Now javascript has engines that process and interpret the code, in turn it performs the logic specified in your javascript files. There are many javascript engines, but the most popular ones are: * SpiderMonkey - the JavaScript engine used in Firefox * Rhino - the JavaScript engine written in Java * V8 - an open source JavaScript engine developed by Google for the Google Chrome web browser. (This is also the engine used for node). There are also a lot of other ones. Each one of these engines should work relatively the same with some exceptions on how they're actually performing the management of the code behind the scene. The idea being that each engine provides a similar, but different way of adhering to the specification of the ECMAScript, while making it so that javascript the language itself works as expected by the developer. Now then. With regard to your question. Node.js is not really a framework so much as it's a server side environment to run javascript. However it does come with pre-built library functionality that is provided by default. These are considered the core node library modules. You can read more about it here: http://nodejs.org/api/ I've not used processing.js so I can't really speak to what it's for. Angular.js is a Model View Control (MVC) framework created by google in order to help push web technology forward for things called single page web applications. This is a whole branch of web dev that's become very popular within the last few years because of how the web has evolved. Whether this is the right paradigm for you is up for you to decide. There are a lot of benefits programming in this fashion, but it's very opinionated meaning that you're coding to conventions established by the developers of the library and straying from those conventions can be a source of pain points. Lastly, one of reasons that javascript is so popular is that it has a low barrier of entry, with a surprising amount depth that you won't really be aware of until you have more experience as a developer. There are things that it provides, like first class functions, anonymous functions, prototypical inheritance, as well as many other features that really let it shine. Especially if you're trying to be a more functional programmer instead of an imperative programer. There is no benefit over imperative vs functional, it's all in how you use it. I hope this has helped give at least a little bit more information to help guide you with javascript. If not please let me know what else I can provide. Learning any language is great. Javascript especially because it's so versatile. That said, it is one of my least favorite languages... This is because I don't enjoy its dynamic typing. But hey, just because I don't love it doesn't mean I can't respect it. Happy new year. Also if there's been anything incorrect with what I've communicated I would love to hear what I stated incorrectly.
People in the JavaScript community got in the habit of naming their tools with words that end in ".js". That doesn't mean they are "other kinds of JavaScript." Try to get in the habit of looking up things you don't understand on Wikipedia. There will be a much more comprehensive explanation there than anything you'll get here. Do this for any technical term you don't recognize. 
The sound in the background. It's annoying.
Your Ajax library (jQuery, Prototype, Angular, whatever) can almost certainly catch errors depending on the status code received. When the request times out, your web server is likely sending an HTTP status code in the 500 range. It's a good idea to always have this error handling in place on the client side anyway, so it's a good place to start before tackling the issue on the server side. 
Currently using jQuery. I'll check into the returned status code and see what I can come up with. Thanks for the suggestion. The error code returned is coming as a status 200, the same as an accepted return. Not looking good.
learn Lisp
Not sure anymore who is trolling and who is actually trying to answer the question ...
First of all, don't have the client or server wait. Each side should be polling. The client polling the server, the server polling whatever you're trying to pull from. Second, you aren't really clear about what the client is requesting or the server is looking for. Short answer: Use a key value store for client polling, to put a placeholder and eventually the real data for the client. Use a queue for the server polling, with reinsertion on error (if appropriate). 
I'm looking to count the number of rows matching a query and return that number back to the client when it varies from the number the client passed to the server. That's confusing. My client has an integer representing the number of unread notifications. It passes this number to the server using an AJAX request. The server then checks the database, counts the number of rows, and compares the result to the number the client sent. If the number is different, it sends it, otherwise it waits 5 seconds and tries again. Once the client has received a response, it utilises the data, then starts the process again. If you could outline a better implementation for this kind of activity, I'd glady take it, but this appears to be the way most modern sites handle this kind of check (at least from my research). The issue arises when the server takes too long before finding new relevant data. If it continues to process up to the 30 second cap, I get this error (as expected): Fatal error: Maximum execution time of 30 seconds exceeded The problem is that the error is them sent to the client as a successful string. Since it's a fatal error, I do believe that you can't catch it. I'm backed into a corner with my limited knowledge on this one.
Roadmap for learning javascript: It largely depends on what you want to do but first and foremost you must learn the language. As for libraries I'll split it into two major sides: Front-end and BackEnd: **Front-end:** On the front end, the only library that there is no excuse for not knowing how to use is **jQuery**. jQuery is the de facto library every developer uses for dom manipulation and selecting elements on the page. jQuery Selectors are exactly like CSS selectiors. for example if I want access to the body or footer tag i just type $('body') or $('footer') if i want all the elements with the class "smart" $('.smart') After jQuery an optional library to learn (but almost as important as jQuery is) **underscore.js** its a utility library that makes your life a lot easier to do things. For example instead of figuring out what for loop to use for your object you can use _.each and will use the right one for you all the time. I would then learn about **templates** Handlebars Mustach templates {{ }} and underscore templates are the two most common style of templates. dont spend too much time on this just to get a feel for what they are and how they work. Next I would learn **any MVC framework** currently the big two that are used is *Angularjs* and *BackboneJs* (I suggest using backbone with Marionette). I would wait on learning AngularJs its about to make a big change and would not be worth putting in the effort to learn it if it changes in two weeks. Backbone is vary bare an a lot of people use a library on top of it to make it easier to work with. there are a bunch more MVC frameworks here: http://www.infoq.com/research/top-javascript-mvc-frameworks I'd reccomend any of the top 4 on the list, but in the end it always depends on your application and problem your solving. Be sure to investigate the community size and sustainability of any of the frameworks you decide to use. Finally, I'd learn how to use **Any Asynchronous Module Definition (AMD)** it allows you to manage dependencies of various files and only download the ones that you need. *RequireJs* is a very popular one with *Browserfy* slowly taking the lead because its similar to NodeJs's dependency management. (Also don't forget about CommonJs...but in the end look at which one works best for you...requirejs is a bit complicated to set up but once you get past that its a dream to work with) **Backend** Learn *NodeJs* what it is how to set up a basic server. After that learn ExpressJs as it will make creating RESTful webservices a lot easier. (3-4 lines of code to make a fully running server) Learn how to use NodeJs's package manager **NPM** and create your own package.json files (you dont have to write them by hand the commandline commands could fill them out for you npm init and npm install --save are your friends) Npm is like Ruby Gems and Package.json is the same thing as your Gemfile. NodeJs has a LOT of libraries to work with, so if you have a problem look on github for an NPM library that you can sync down into your project. Learn how to use **Bower** as your frontend package manager. While you can use NPM to get some of your front end libraries, its much more common for projects to use bower. Bower uses a Bower.json file which is like your package.json file. It defines all the dependencies (like JQuery and angular) that your website needs. **Learn how to work with build scripts** NodeJs has two major build systems for your frontend code *Gruntjs* and *Gulpjs* personally I think Gulp is easier to configure however Grunt has a larger following and libraries found in one will almost always be found in the other. **Why would you use them you may ask?** You could have them do literally all the bitch work you dont want to do. Tired of constantly manually minifying your code for production? Use a build script. Tired of concatenating all your code? Use a build script. Want to automatically optimize your images to improve your site load time? Use a build script! 
It shows IFrame youtube videos within the app similar to [this example] (http://jsfiddle.net/Masau/7WRHM/) (on mobile).
Care to explain? Other than the copy - which can be easily changed to in place - what is "never" optimal about this? Would it be better in a larger file to not require a library inline? Sure. But that doesn't change the execution time it's more a maintenance thing and obviously this is an example (that works) on reddit versus actual checked in code. 
I get this is important for new users to know but there are a thousand tutorials already which already explain == vs ===. This provides nothing no new information and no new way of trying to approach the topic.
Looks like the swapped ease-in and ease-out...
A little off-topic, but how about a JS dev trying to learn RoR?
More JS Animation libraries eh...?
If you want a compact intro to JavaScript for programmers, check out “Speaking JavaScript”. Its complete contents are online: http://speakingjs.com/es5/ The book focuses on the language; the [last chapter](http://speakingjs.com/es5/ch33.html) contains tips for what to explore next (reddit should be in that list, but you are already aware of it). Some of the items are: * Free ebooks on web development: http://jsbooks.revolunet.com/ * Resources for frontend development: http://uptodate.frontendrescue.org/ * JavaScript news: http://www.echojs.com/ * JavaScript user groups: http://communityjs.org/ * JavaScript conferences: http://lanyrd.com/topics/javascript/ * A forum where you can ask questions: https://groups.google.com/forum/#!forum/jsmentors * To stay up to date, I also find Twitter highly useful. Many important JavaScript developers are active there. [Disclaimer: I’m the author of “Speaking JavaScript”]
I can't say much, I've only looked at it very briefly. One thing about Prove-It is that messages seem to be embedded in the code. This makes it quite useless if i18n is a requirement. Not only i18n, if your company has some policy on user messages (particular wording or style or whatever) it will be difficult to use this. If you can, I would suggest investing some time in pulling the messages out so that they can be easily replaced, or even better add some way to select different message sets.
I will give it a shot and try back. Thanks for the reply! 
The classic Rails book is "Agile Web Development with Rails", there is a version for Rails 4: https://pragprog.com/book/rails4/agile-web-development-with-rails-4 if you check Amazon Marketplace, you can find cheaper ones for older versions. The basics should be quite similar.
Thanks, I think I'm going to try egghead pro.
[**@JavaScriptTalk**](https://twitter.com/JavaScriptTalk): &gt;[2015-01-02 14:28:26 UTC](https://twitter.com/JavaScriptTalk/status/551022209666678784) &gt;Principles of writing consistent, idiomatic JavaScript: [*github.com*](https://github.com/rwaldron/idiomatic.js) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2r3qt5%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
It's pretty common: http://mikehadlow.blogspot.com/2014/12/the-lava-layer-anti-pattern.html Also, the JS universe seems to favor smaller libraries that fill specific roles, rather than huge frameworks that cover everything. This makes the lava layer anti-pattern harder to defend yourself against. The project I've inherited uses jQuery, Backbone, Marionette, Underscore, Handlebars, Mustache, Karma, Mocha, Chai, D3, and Moment. This is just the frontend. The backend is written in Grails and has a giant tangle of Java dependencies that makes the frontend look simple.
This is partially correct--OP wants n unique random numbers, not 25. This will be easier to read and less error-prone if you just use a library, like Underscore which is pretty standard. Here is a full implementation that returns n unique random numbers: function randomNumbers(n) { return _.sample(_.range(1,26), n); }; Under the hood, _.sample(n) does a Fisher-Yates shuffle and then slices the array by n.
Whoa. The `.then` method *really* should accept a callback, not a plain object. It should also just be a promise. If the author doesn't want to use a promise, then he should rename the chaining method to something else. A lot of people detect whether something is a promise or not by checking whether there is a `.then` method on the returned object or not. Also, using `.then` just goes against convention set in the industry 
You could stay on the JavaScript technology stack and go with node.js, but in terms of employment it probably limits you. From what I've seen it is every bit as hard to learn the server side way of doing JavaScript as it is to learn the syntax and best practices of the mainline server languages: PHP, Ruby &amp; Python. PHP probably has the biggest employment opportunity but you are more likely to inherit legacy code that makes you want to tear your hair out.
This is an inefficient solution too. It's fast only for the tiny range of 1 to 25, but becomes very slow when the range is significantly larger than the number of random numbers you want.
HTML5 is your friend. Here's the first article on Google when searching for "html5 microphone": http://www.html5rocks.com/en/tutorials/getusermedia/intro/.
Exactly the type of feedback I was looking for. This is actually a concern for myself as well. I will try to come up with a way to make messages external. I think that the messages should be generated based on the test name by default (ie: lowercase has failed), with an optional json config to override error messages. This way there is no messages in the code, and the library is more lightweight. Also people could easily share config files for the default validators. As far as allowing for languages, do you have any suggestions? Perhaps just allowing an object with language abbreviations? Or is there a better way?
Typically you use a decimal type, rather than floating point. Unfortunately, JavaScript doesn't have a decimal type. It [was proposed](http://intertwingly.net/blog/2008/07/11/Decimal-in-ECMAScript) in 2008 for ECMAScript 5, but [didn't get enough support](http://developers.slashdot.org/story/09/12/08/1416202/ecmascript-version-5-approved).
And where do you determine which language set is going to be used? I'm more talking about client side at the moment. I don't personally have much experience working with production multilingual apps.
Ah ic. Well I will certainly try to incorporate this in the next release. The best way I can think of is config files which can be loaded based on the browser preferences, or multiple if needed. Likely I'll get this done during the weekend, if it doesn't work for your project let me know and ill try to make it as flexable as possible.
If your first goal is employment, keep at PHP for now. Ruby has been on a downward trend for a while. Python never really made much of an impact on the server-side (as far as the web goes) and suffers from a host of issues that rival even the most cynical critique of PHP, which may explain why it's stalled. I don't expect either Ruby or Python to surpass PHP on the backend any time soon, if ever.
i have chosen python/django and javascript
Wow, the competition must be thick down there. The best option would be to find an internship. I went to career fairs, applied to multiple places, only heard back from a couple. I ended up a state away in a shitty chicken farm of a business building an internal website. I then found an AMAZING internship through a friend. Just keep looking and interviewing. This is hard, but once you find a good one, everything will fall into place. Plus, you can keep coding on the side. I suggest making a portfolio webpage with examples of things you can do, show you have a passion for it outside of work. How many interviews have you had in the last few months? You gotta be persistent and annoying to these employers, but i have no idea how much you have tried and I'm from the Midwest. 
Hi /u/jstuartmill, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `jowanza.com`. Thanks for your consideration!
Hi /u/stubc, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Please link to the original source when possible; in this case, [idiomatic.js](https://github.com/rwaldron/idiomatic.js).
/thread
Seems simple on the surface. Splicing an array is an expensive operation. It costs n operations where n is the size of the array. Thus your solution comes out to n squared complexity versus n for the shuffle. 
Fair enough. As I said I agree the copies are unnecessary but at most add only a coefficient to the complexity so not that big of a deal (versus the n squared solutions being proposed). As for choosing n of m I would agree with you at a general level although that was not what OP asked for. 
you can also try out `debug` https://www.npmjs.com/package/debug https://raw.githubusercontent.com/visionmedia/debug/master/dist/debug.js
My current favorite is Hogan.
Lodash/underscore is my favorite. And you get a bunch of other good utility functions as well.
&gt; I know you like the way I'm freaking it. I talk with slang and I'ma never stop speaking it.
Neither of these are template engines
Wow, I just thought it was me! Do you still suggest using it as a resource?
Whilst not dedicated templating engine, underscore does have templating options. http://underscorejs.org/#template
Lots of good comments here, but honestly if the best search result you could Google before posting to reddit is 'top 15 best...' you may be in for a new and wonderful adventure in JS! Above all else, clearly identify what problem you are trying to solve. Can you mostly solve the problem without templating through replacing html text or does the layout depend on templating? For the latter, mustache or handlebars are your best friends! They are very well documented and battle hardened. Best of luck on your project! Edit: punctuation
ಠ_ಠ
Really cool! I had been thinking of doing a game on the same theme of ants and pheromone tracks, where you could give "abilities" to your ants. A kind of automation game like Factorio, but with building agents intead of static assets. The difficulty that I couldn't solve in terms of gameplay is how to make this digestable by the player, since behavior of inter-dependant agents liek this are really hard to predict, so you would end up in a kind of mad scientist mode where you try stuff and see what happens. Which could be fun actually, just not my type of game.
It'd be awesome to see food vs time charted out. Being able to tweak parameters in the ant's AI like probability of turning or following a trail and see what works best would be cool. I wonder if the 180 degree turn after finding food is not enough to bias the trails towards short food paths given the frequency that the ants turn anyway. It also seems like perhaps the home needs a special pheromone around it that tells the ants to not leave the area if they have food. I also wonder if ants try to avoid pheromone trails that they've recently added too. Do pheromone trails fade away over time? 
The Web is build once, run everywhere... They said.
Yes!
Very cool but the logic can be tweaked. I think something should be done with whether ants carry food or not. Now wandering ants looking for food leave a mess of trails that confuse the other ants. Also strength of the trail should encode how far the ant has walked since last leaving the nest, then anytime it crosses a trail it should adopt the value of strongest of the two trails, so encoding the 'cost' of each section. Then when returning for food ants pick the strongest trail back (if this is gradual it will also point the right way back instead of further away)
I am an idiot. 
I see the client backfire repo has been deleted from npm so I can't seem to fire up the app
That was my issue since they are mostly autonomous I'm leaning towards it being a sandbox type game maybe adding some power ups of some kids you can get if you lay pheromone down to lead them to. Also want to add a barrier and trail eraser tool( maybe a toggle on those two existing tool buttons) and finally probably an initial screen that lets you adjust everything like turn probability, food scarcity, colony food stock, initial population, etc.
No, you're not! 
I was trying to use as close to real ants as I could, I'm sure they probably use some other factors like the sun and maybe visual memory they use though. Right now the data for the trails is all stored in the canvas as pixels with the alpha being the strength. As they move, they use 4 pixel points, two from each side of their head to check the trail strength. Now that I am thinking about it, I could have them start out with a higher alpha value and fade it out with the distance they have walked from the nest. Maybe boosting as well when they find food making those two end points stronger. Overall, all the numbers need tweaking, it is just starting to get complex enough that it's hard to know which parameters to adjust and by how much. But that can be part of the "game", having a screen to adjust all the numbers and trying for a better outcome.
Nice article. In the next chapters it would be nice to know what exactly happens when you use `this` in the global scope, inside a parent function and inside a child function, and how you can actually bind the context by passing an extra parameter. I have a lot of code that declares `var self=this;` before a child function, or before a jQuery listener, just because I'm not sure how to force the context when that listener gets called.
You could use different channels in the pheromone image to encode information, like it were different compounds in the pheromone excretion (and it would look cool maybe) Also you can do stuff then two ants meet: real ants 'talk' with their feelers when they meet, so it'd be in-simulation to transfers some information: for example an ant that doesn't carry food can backtrack one that does. Or how far each one has walked or whatever.
For profiling: http://discover-devtools.codeschool.com/ https://developer.chrome.com/devtools &gt; Drawing a circle of food into my array might prove a headache at first where canvas provides an easy way to add the data via drawing shapes. For sure. But as you've seen `getImageData` is very costly, and (assuming a square canvas) I'm going to guess that its cost scales quadratically with the width/height of the canvas. I.e. larger canvas equals slower execution. Regardless of whether or not there's any food on the canvas at all. Whereas some other method would be much less expensive, and would likely scale linearly with the number of food pellets on the canvas. I'm sure it's going to be a bit of a pain to do, but it's a great feeling to see something like this go from ~80% CPU load (where it's at right now) to... maybe ~10-20% (where I suspect this could get to). Your users will appreciate it too :). Also, as I mentioned before, the way you have it now makes the game logic pretty tightly coupled to the display method. It probably won't ever be an issue, but if you wanted to change the way this is displayed (e.g. you want to draw everything with divs, so it works on IE8), then suddenly your game logic is broken. While in this case it probably won't matter, thinking about things like this, and keeping all the different pieces modular is a good habit to get into. Anyway, I hope I don't come off as discouraging. There's room for improvement here, but it looks like a great start. Keep it up!
**If you want to find a job easily**, that order should be: Java -&gt; Java -&gt; Java -&gt; C++ -&gt; PHP -&gt; Python -&gt; .NET -&gt; Ruby [Source](http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html) Other source: I am a backend dev at a 50 person web service company. We were bought by a 650 person web service company. All we use is Java and all we hire is Java. Python/R is for R&amp;D, Javascript/ActionScript is front-end. Javascript is **not** a requirement to be a backend dev, but it helps. Java is often taught as the default language in colleges for a reason. Sorry if this is too blunt.
page.js is a simple routing library. There's nothing stopping you from using Hebrew characters in the urls. Any valid Unicode characters should be supported I imagine. 
That is not what I meant, it's just that in the example they don't use hash, they just use regular URL that send me to 404 page, so where exactly is the routing in there?
Why do you need a template engine to insert HTML?
Seems reddit, lately, has become nothing but an index for stackoverflow.
Here's around 30 minutes running with my initial version of trails being stronger from the nest and from food. Seems to be a bit less random trails. Need to tweak the numbers some more thought. [Screenshot](http://imgur.com/lhEBRAG)
First step I think is best would be Code Academy/Code school JS course. http://jstherightway.org/ [JavaScript: The Good Parts](https://www.youtube.com/watch?v=hQVTIJBZook) and other Dugglas Crockford JS lectures. Find a source to keep up with the comunity such as http://dailyjs.com/ and r/javascript But most importanly - a lot of independent practice, and a lot of googling and stack overflwoing 
Eventually I want to add parameters you can adjust to see how long they will sustain on their own, but it's fun to help direct them by drawing extra trails to food, and they run away from your cursor so you can try to "push" them to go somewhere as well.
Sure, but if you don't know any of these languages, it's a good way to figure out which one you should choose first. Learning languages after a while get's pretty easy; just applying the same concepts to a different way of writing. But if you're looking for a job, some of the libraries each language comes with are important to know. Take Spring for example. That's where I spend most of my time learning new languages, is figuring out what's already been done.
then js is bad as a first language to learn.
The language, no, the libraries, undoubtedly. But it's also the best language to learn for front-end development. Have you tried GWT? Java compiled to JavaScript. It's awful. If you know what kind of dev you want to be, you should aim for the technologies that will work for you in the future. Server-side, I'd stick with the list above. Client-side, I'd stick with JS (or ActionScript because IMO, it's still ahead of JS; but you may not get to use it).
Personally, I hate when people throw around that comment: "Angular is slow after 2000 data bindings". I've never seen any data to back it up that 2000 is the number. Sure I can understand that more watches is less performance. But, stop being an idiot and don't bind 2000 items. Realistically, you'll only achieve that number if you have ng-repeats on lists of 100+ items. Which in that case, you won't even be able to render them all on the page. You're effectively rendering 100 DOM elements that don't even show up half the time. That's why there is [ngInfiniteScroll](http://binarymuse.github.io/ngInfiniteScroll/). And I don't agree with the `ngCloak` comment. You're supposed to put source Javascript references at the end of the file, and it will load last. There's nothing wrong with setting templates to `display: none` with CSS (what ng-cloak does) before angular loads. You're just hiding portions of the template till it's ready. If you don't agree with that, then put all data bindings into template files and have angular load them after angular is initialized. No offense to the author, but this article really just seems like a shit-fest on all the overly-complicated parts of Angular, that any well payed developer would have figured out by looking through the docs.
That Stackoverflow link is a year old so it's not really relevant anymore. http://caniuse.com/#feat=object-observe
Hi /u/findtuts, please read reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. In short, you should post from a variety of sources, and not just `findtuts.com`. **Consider this your only warning.** Continued posting of only a single source will force us to take action. Thanks for your understanding.
Using `new` with a constructor sets the prototype of an object, and runs the constructor in such a way that `this` refers to that object. I don't think I can explain how the `this` bit works better than [this Stack Overflow answer](http://stackoverflow.com/a/1646957/445398). I'm a bit confused by what you mean by JavaScript 'doing it for you' and 'getting confused', can you elaborate on what you mean by that?
This is pretty cool!
I just tried this approach but it did not work. I can see the values get updated when I used Chrome's JavaScript console but for some reason they do no actually stick. It seems like a hard refresh to the iframe is all that works. Might be something to do with the specific lwip tcp/ip stack I am using with my microcontroller but I don't really know.
This is a clever workaround to that restriction. While you can't directly say "Hey, other window, do this" or even know if the IS another window/tab open, you can set a variable in local storage and other windows with pages from that domain can watch for those changes. It creates an indirect form of messaging/control that is localized to windows that have shared access to local storage. Edit: We use something like this where I work to update pages based on user preference changes and such, as well as to cache certain things in the frontend. Sometimes you may not want that kind of shared data storage, so session storage can be used instead - it's exactly like local storage but limited to that browser window/tab, yet still will persist across page refreshes. Very handy sometimes.
Pretty cool, but why wouldn't you just use [`window.postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/window.postMessage)?
As I find that trick quite handy, let's give it a second shot at sharing. Regarding assigning multiline html to a variable with easy variable replacement, it is possible to achieve it with something like this: var Template = { multiline: function(fn) { // return the text that is between multiline comment blocks `/* [string] */` return fn.toString().match(/[\s\S]*\/\*([\s\S]*)\*\/[\s\S]*/)[1]; }, replace : function(str, data) { // For each key in data, replace any instance of {{key}} in the string, with the key value in the data object. (Object.keys(data) || []).forEach(function(key) { str = str.replace(new RegExp('{{' + key + '}}', 'gi'), data[key]); }); return str; } }; Usage in vanillajs: var componentTemplate = Template.multiline(function() { /* &lt;h1&gt;Items&lt;/h1&gt; &lt;ul&gt; &lt;/ul&gt; */}); var itemRenderer = Template.multiline(function() { /* &lt;li&gt;Item: {{text}}&lt;/li&gt; */}); var node = document.createElement('div'); node.innerHTML = componentTemplate; var li = [{ text: 'one'}, {text: 'two'}, {text: 'three'}].map(function(item) { return Template.replace(itemRenderer, item); }); node.querySelector('ul').innerHTML = li; Proceed with caution as this use of Function.prototype.toString() is a bit of a hack. However, according to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString it is supported across all browsers and will continue to be supported in Ecmascript6. If you need to include some code logic into your renderer, you can always rewrite Template replace to use Jonh Resig's microtemplating solution - http://ejohn.org/blog/javascript-micro-templating/. I would however recommend against. The all point of this approach is to avoid to have to move some of your code logic into an html template (where code is hard to debug and hard to test). 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**SimAnt**](https://en.wikipedia.org/wiki/SimAnt): [](#sfw) --- &gt; &gt;___SimAnt: The Electronic Ant Colony___ is a [1991](https://en.wikipedia.org/wiki/1991_in_video_gaming) [life simulation](https://en.wikipedia.org/wiki/Life_simulation_game) [video game](https://en.wikipedia.org/wiki/Video_game) by [Maxis](https://en.wikipedia.org/wiki/Maxis) and Maxis' Third Product, focusing on [ants](https://en.wikipedia.org/wiki/Ant). It was [designed](https://en.wikipedia.org/wiki/Game_designer) by [Will Wright](https://en.wikipedia.org/wiki/Will_Wright_(game_designer\)), maker of other 'Sim' games such as *[SimCity](https://en.wikipedia.org/wiki/SimCity_(1989_video_game\))* and *[The Sims](https://en.wikipedia.org/wiki/The_Sims)*. In 1992, it was named "Best Simulation Program" at the [Software Publisher Association](https://en.wikipedia.org/wiki/Software_Publisher_Association)'s [CODiE Awards](https://en.wikipedia.org/wiki/CODiE_Awards). &gt;==== &gt;[**Image**](https://i.imgur.com/nXW0ekY.png) [^(i)](https://en.wikipedia.org/wiki/File:SimAnt_Coverart.png) --- ^Interesting: [^Will ^Wright ^\(game ^designer)](https://en.wikipedia.org/wiki/Will_Wright_\(game_designer\)) ^| [^Sim ^Brick](https://en.wikipedia.org/wiki/Sim_Brick) ^| [^SNES ^Mouse](https://en.wikipedia.org/wiki/SNES_Mouse) ^| [^List ^of ^Sim ^video ^games](https://en.wikipedia.org/wiki/List_of_Sim_video_games) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cndlbxu) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cndlbxu)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Still does not explain why not?
You need a reference to the other window for that to work. Using localStorage, any window sharing that store can be broadcast to - or even windows loaded later on. If I open 4 links from google from the same domain in different tabs, those windows have no way of knowing that there are other instances of that site open, let alone have references to their window object. The method in the article posted above (or just simply setting a variable in localStorage and watching for that change in all open windows) gets around that issue.
Localstorage doesn't auto-update across all windows. If you have 2 windows open, and modify localstorage on one, the change won't appear on the other until refreshed.
No, you don't "need" to. Do you want a job? DEPENDS ON THE JOB.
Don't get me wrong, I know it's possible for some things to accrue a lot of bindings. But as developers, we should all be hesitant that one thing can change in 12 different ways or trigger 12 watches. That's just a maintenance nightmare and I'd seriously advise against overly-complicated binding schemes. I'm still going to take that 2000 number with a grain of salt. The comment came about a year and a half ago, when Angular was on the 1.0.X series. A lot of [performance enhancements, bind once, &amp; watchGroup](https://github.com/angular/angular.js/blob/master/CHANGELOG.md) have come along and whenever I've encountered a performance issue with a lot of bindings, it would have been equally caused by how many DOM items were on the page. 
You should use proper serialization. XML,YAML,JSON something at least. Or a format: CSV,TSV,Key-value pairs etc. Failing that regexes or exploding are all you can do. Either way its impossible to help without information on why your data isn't serialized or even formatted or what it comprises of.
Basically I want to read `/var/lib/dhcp/dhcpd.leases', but the data is listed like lease 192.168.1.67 { starts 0 2015/01/04 03:46:15; ends 1 2015/01/05 03:46:15; cltt 0 2015/01/04 03:46:15; binding state active; next binding state free; rewind binding state free; hardware ethernet **:**:**:**:**; uid "randomstring"; client-hostname "RandomPersons-iPhone"; } and theres a bunch of them all with this same format I basically want to read the file, which I know how to do, format the data into an object, and send it as json to the client side to be displayed on a local webapp to see who has leases on the network I was just wondering best methods to create my own way to parse the information out of this file to prepare it into an object.
Interesting. I didn't know about this. Is this commonly used?
Polling, &gt; setTimeout(function() { &gt; eventIsRunning = false; &gt; }, 10); As far as I know there's no way of registering events for localStorage changes.
You can do your routing clientside with html5 pushstate, falling back to hashbang for older browsers. I'm not certain of a router for backbone that does this, but Angular's UI-Router does exactly that.
If you play something in one tab on Soundcloud, it will pause all Soundcloud players in other tabs. Really neat feature.
If you have a function or something that initiates the calls, you could always invoke it from within the rejection function.
It's actually enjoyable to read.
You can probably cobble something together quickly with regex and the Date constructor that will work fine. If you want to be rigorous, the dhcpd.leases file is meant to be parsed with a recursive descent parser, so you can probably look up the grammar for the file and then use a JS rd parser lib to process it. Or you could just send the raw file as text and let the human looking at the web app figure it out...
I think the best way would be to check if the file exists, then either read or create+read. A promise is just a better/different way of doing callbacks, think of how you would handle this in that case.
Please reformat that. And use a live page so we can this in action and better help you
Who the fuck writes code like this?: https://gist.github.com/gdi2290/bec4889e0a5785cae2a9#file-functional-shared-js
That's correct, I only need one-way events for the application I'm working on, so the solution suits me perfectly :)
I'll be honest here, I didn't think about postMessage. At first I thought that solution needs to run in an older version of Chrome where postMessage would not be supported - I can see now that [caniuse](http://caniuse.com) tells me otherwise.
It worked for me. Slow on a high-end laptop with a high-end GPU. There are much better ( and faster ) ways to get text onto the GPU than yet-another-very-average-snippet-of-javascript-dressing-itself-up-like-the-hottest-girl-in-school. I really don't mean to sound negative, but this is a very solid "who cares". MODS: Could we have a bit less of this sort of junk? Sometimes I feel like /r/javascript is becoming /r/lookwhaticando.
Thank you!
As /u/Collinhead mentioned, right now the t variable is being shared across all elements -- this needs to be stored somewhere on a per-element basis. You've got another problem though -- after a while you'll get an error `too much recursion`... also the element lookup is kind of slow and can be cached.... most of those parameters are actually static and won't change during each call so there's no need to pass them. Aaaand also, like /u/J-Ro says, using `.animate` is a recipe for slowness... and actually, if you can avoid using jQuery altogether (i.e. data like /u/Collinhead used) it will be just that much faster... if you already have a css3 version it's already leaps and bounds over the fastest that this one can run. Take a look at this version: http://jsfiddle.net/an81t5rg/11/
Check. Vanilla JS is quite enjoyable. I'll consider vanilla node.
That's also vanilla. Sucks if you have to support IE8 though (I don't).
I had a nightmare about this question last night.
The AddThis WordPress plugin should be including itself at the appropriate time in PHP with wp_enqueue_script(). If you have to include it in your all.js file you can either create a new script element in the DOM or call it asynchronously with jQuery.getScript(). New DOM Element: var imported = document.createElement('script'); imported.src = '/path/to/imported/script'; document.head.appendChild(imported); jQuery.getScript: $.getScript('/path/to/imported/script.js', function() { // script is now loaded and executed. // put your dependent JS here. }); Examples from: http://stackoverflow.com/questions/4634644/how-to-include-js-file-in-another-js-file
I like the syntax, but what's the advantage of this over moment.js?
For point 3: If you're using a Mac I can recommend using 'homebrew'/'brew' to manage your installed packages including nodejs. It will keep all the installations in one place and you can easily delete or update it later. 
Keep in mind that a promise is not a callback, it is a **value** which will eventually resolve *or* reject. * The `.then` method creates a new promise which acts like the promise returned from the passed function *if the initial promise has resolved*. * The `.catch` method creates a new promise which acts like the promise returned from the passed function *if the initial promise has rejected*. For example, given a promise wrapper around `fs.readFile`: function readFile(path) { return new Promise(function (resolve, reject) { fs.readFile(path, function (err, contents) { if (err) { reject(err); } else { resolve(contents); } }) }) } We can get a promise which represents the contents of `file-a.txt` var fileAPromise = readFile('file-a.txt'); And if we want to get a promise which represents the contents of `file-a.txt` or some other action, we can do: var fileAOrBPromise = fileAPromise.catch(function () { return readFile('file-b.txt'); }); Using these values gives us the main cases: fileAPromise.then(function (contents) { // called if 'file-a.txt' exists }); fileAPromise.catch(function (contents) { // called if 'file-a.txt' fails to read }); fileAOrBPromise.then(function (contents) { // called if 'file-a.txt' exists *or* 'file-b.txt' exists }); fileAOrBPromise.catch(function (err) { // called if both 'file-a.txt' fails to read *and* 'file-b.txt' fails to read }); If instead of returning `readFile('file-b.txt');`, you could attempt to re-read the same file by returning the action which created the promise: `readFile('file-a.txt');`. *edited for formatting*
Amazing project, I ever wanted to do something similar but I never had the time. 
Very simply, no. That is one of the central rules of promise. Once a promise is rejected or fulfilled, it cannot be 'run' again. That said, it sounds like all you need to do is catch the rejected promise and then do your createFile in there. I only really know q.js, when.js and Angular's $q, so this may not work for you, but if you return another promise in your promise.catch() handler, you can continue your entire logical chain without missing a beat: MyFS.getFile() .catch(function (err) { if (err === 'Error: the file does not exist') { // this will return another promise return MyFS.createFile(); } // Well, I guess this is 'uncaught' throw new Error('some other error happened'); }) .then(function () { // If getFile() worked you will arrive here after the file was read // and if createFile() worked you will arrive here after the file was created }) .catch(function () { // You will get here if: // a) getFile() threw an 'uncaught' exception // b) createFile() threw any exception // c) createFile() returned a promise it later rejected // d) something in the 'then()' above threw an exception // e) something in 'then()' returned a promise it later rejected }); You can see that then() and catch() are very close in behaviour to the regular try {} catch() {} flow control in JS except that it handles both exceptions and rejected promises. Also, you can .then() after a .catch() and even .catch() after a .catch(). Promises verge on a type of flow-control.
I don't know how they do it now, but you could do this in Flash via LocalConnection.
It's hyperbole. 
Is that anything like the Superbole? My point is, we were all coding without that method for many years without issue.
It's a good article, but can we find something to demonstrate it on other than the recursive fibonacci function? For whatever reason I see this example a lot, and there are MUCH better ways to improve fibonacci functions, such as not making them recursive.
Sure, but this can be resolved with one simple origin check rather than an insane abuse of local storage. Regardless of PostMessage being correct or not, if people start using local storage to send messages between the same origin, clearly this is a sign that the spec groups missed the memo on needing a safe, local "broadcast" alternative as well. 
Misko's 2000 number is about UI feasibility and human capabilities, not about AngularJS capabilities. In the same post, he links to an app with 10,000 watches and said the performance difference on modern browsers is negligible.
I completely agree.
Interesting and simple problem :) http://jsfiddle.net/LeaaLbov/1/
If Jenn Schiffer keeps writing like this, I may have to withdraw my JavaScript books from the market, they will be obsolete.
Do you have a suggestion? It has to be generally known, simple, short to implement, cpu intensive, and have the same output for any input. Oh, and you want it to be something that isn't easy to optimize outside of memorization. I'm fine with fib because I know it's just a stand in for what ever crazy ass business logic I'd need memorization to speed up. 
The one thing I dislike about memorization in JavaScript is the memory leak when caching. And I don't like solving that with a limit on the cache size because that causes a leaky abstraction (the calling code needs to know how the abstraction is implemented). Then weak maps were added in ES6. They work similarly to the object coaching method, except keys are dropped when the garbage collector needs memory. You should add weak maps to your page as a "coming soon". 
Would an `Object.observe` implementation work to trigger events? http://www.codediesel.com/javascript/sharing-messages-and-data-across-windows-using-localstorage/ http://stackoverflow.com/questions/14290316/observe-non-ember-globals 
Promises are a lot more readable (and code is more reusable!) if you name your functions. Utility methods for manipulating higher-order functions should make the code even easier to understand. // returns promise function readOrCreate(file, fallbackContents) { var read = promisifyAndBind(fs.readFile, file), write = promisifyAndBind(fs.writeFile, file, fallbackContents); return read().catch(seq(write, read)); } // utility function to "promisify" a node library method and bind arguments // equivalent to Q.nbind function promisifyAndBind(fn) { var boundArgs = [].slice.call(arguments, 1); return function() { return new Promise(function (resolve, reject) { fn.apply(this, boundArgs.concat([function (err, contents) { if (err) { reject(err); } else { resolve(contents); } }])); }); } } // utility function to sequence two functions // equivalent to _.seq (underscore or lodash) function seq(first, second) { return function() { return second.call(this, first.apply(this, arguments)); } }
The triggers go well beyond system events. But in any case, IFTTT is entirely replaceable with Tasker on android, just as Express is entirely replaceable with any other web framework on any platform. I guess I just stepped in to recommend against IFTTT. The computer in your pocket doesn't need a web service to do automated tasks. Tasker is also relevant to /r/javascript in that there is a javascript API for tasks -- so middleware to plug your Express app *without* IFTTT.com
I agree that weak maps are useful for this, but I am unsure what you mean when you say that if I implement my own cache strategy for memoizing something, that the calling code needs to know how the abstraction is implemented. Can I not write a function like: function memoized (fn) { // ... } And from there on in, people can do things like: var factorial = memoized(function factorial (n) { // ... }); ???
thanks a lot :)
I like Tasker, but what takes me 2 minutes to create in IFTTT would take 2 hours in Tasker.
This was probably done to prevent you from doing what you're doing. You can pull the full html file and parse it w/ a DOM-based application, but more manually.
Reddit's effect on my attention span in full display as I fail to catch on until reading the article twice.
Really? No built-in javascript way? would Regexp on **document** find the part in the inner &lt;html&gt;?
Ahh, I somehow had missed that. You are correct, I was mistaken!
When would this be clearer than using promises or async.js? - `chain.wait` automatically calls `chain.next` when it's done waiting? - Neither the docs nor source gave me any indication of how `some` is supposed to behave - What's the purpose of `final`? - The docs don't even mention handling errors or exceptions. This is the real beauty of promises Compare: var Chain = require('chainjs') Chain(function (chain) { console.log('initialize'); chain.next('none'); }) .some(function (chain) { chain.wait(300, 'then go to next') }, function (chain) { chain.wait(200, 'then go to next') }, function (chain) { chain.wait(100, 'then go to next') }) .then(function (chain, data) { console.log(data); // --&gt; then go to next chain.next('say hello'); }) .final(function (chain, data) { console.log(data); // --&gt; say hello }); ---- var q = require('q'); q.try(function() { console.log('initialize'); }).then(function() { return q.all([ q.delay(300), q.delay(200), q.delay(100) ]).thenResolve('then go to next'); }).then(function(data) { console.log(data); return 'say hello'; }).done(function(data) { console.log(data); });
The part where 2 and 3 are changed (arbitrarily) to 19 and 4 in order for addition to appear like concatenation, and lamenting how much code is required to concatenate numbers, yeah it's a joke, satire even.
[JSONP](http://en.wikipedia.org/wiki/JSONP) is the normal way to get around same-origin issues that vioframno mentions. The example at the top of the Wikipedia page shows how to use - the apiStatus function will normally receive a Javascript object, so no need to parse the JSON string.
Oh man, I was totally kidding with my reply to you! Yes, it's a joke. And yes, I was joking when I replied! I'm sorry that didn't come across as a parody of the kinds of things pompous people say about art. My mistake entirely.
Ah. No harm, no foul.
This is so badass. Looking forward to playing with this.
tl;dw: Object.create(null) (Not sure why a video was needed to communicate 19 characters of text.)
I forked your solution into my own: http://jsfiddle.net/uhmdefce/
+1 for "just send the raw file as text and let the human looking at the web app figure it out"
I can do that!
&gt; Can I not write a function like I think [you](https://leanpub.com/javascript-allonge/read#memoize) can.
~~The code works with the same interface. 'this' refers to the object left of the dot at call time which in 'var person'~~
This is a very interesting topic. I myself have spent a bit of time redesigning a few functions to take advantage of memoization. Very few of them have noticeable changes, but no matter how little the change, if it's consistent then it's still gain. I read [an article by Addy Osmany](http://addyosmani.com/blog/faster-javascript-memoization/) a few months ago where he compared the implementation of memoization in underscore (this is the one I use most), which takes the original function as a parameter and returns a memoizing function, against the implementation of Thomas Fuchs (zepto.js) which extends the Function's object prototype with a memoization method. Then again, he adds his own memoization method to the benchmark. It seems as if the speed gain depends almost exclusively in the algorithm to compute the hash given the array of arguments. 
I used memoization to save a few API calls when reverse geocoding coordinates and addresses against Google Maps API. I was sending address objects and coordinate pairs looking forward to retrieve their country, state and county. It turns out I was asking over and over for the same places. I had to change the default function definition of [node-googlemaps](https://github.com/moshen/node-googlemaps/) to accept an object as its only parameter instead of N optional address components. 
~~'this' refers to the object left of the dot at call time which in 'var person'~~ yup, it was window
Uh. No. It's trying to use `this` when calling `makePerson()` which is called directly. So, sorry, that doesn't work.
Hi /u/cyrilf, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `requiremind.com`. Thanks for your consideration!
Can someone ELI5 why I'd want to do this? 
if you have any questions/issues tweet me at @gdi2290 or submit a comment on gist.github or here
You know, seeing the various problems with these code snippets, it's a bit sad reading you tell someone he doesn't know how `this` works. I don't mean to sound rude, but... well, that comment sounds rather unfortunate.
I don't get it. It looks satirical but I don't get what's a satire of. Perhaps I lack the meta knowledge to grab insider jokes.
Well, \#3 won't help much. You will need to do #1 or #2. Thanks! edit: to clarify, #3 is the preferred option when you're not sure beforehand. Sorry about that.
Um. How about just using node.js. The stuff that's on the internet nowadays is getting ridiculous.
It is useful in functional programming, especially when passing a function as an argument. You can supply the function some of it arguments and you get a new function which only needs the remaining arguments. So here is a simple example var add = curry(function(a, b) { return a + b; }); var add1 = add(1); // add1 now adds 1 to anything; var numbers = [1, 2, 3, 4, 5, 6, 7].map(add1); // numbers is now [2, 3, 4, 5, 6, 7, 8] It is basically transforming a function that takes multiple parameters to one that only takes one which might be reused on many different arguments. The reason why? It might help in creating reusable code.
It allows code that looks like this. Not that you should ever write this. function test() { return function() { this.foo = 'bar' } } var result = new (new test) console.log(result.foo) //prints 'bar' 
That's an interesting solution, but as always pure Regex is good at spot searching/replacing, not parsing. Taking the first word out of each line doesn't work as several parameter names consist of 2+ words. http://linux.die.net/man/5/dhcpd.leases
So it does call a instance of node.js to work trough the code on each call? So basically all what made node.js great in first place is replaced? But well, i can see this beeing used, so why not.
what does this get you: document.documentElement.innerHTML;
I agree, the some and then APIs aren't that intuitive.
I have come to adopt a slightly different format, shown at https://gist.github.com/widged/a000c723065d05659a3d. In short, the main difference is that rather than return the public interface as an object `return { method1: doThis, method2: doThat }`, I attach the methods to an alias of the this object object and return that alias. var self = this; self.doThis = function() {}; self.doThat = function() {}; The main reason to favour the instance approach to the object one was benchmarks - http://jsperf.com/js-public-private/4. When writing tests that include both object creation and object use, then returning an object seems to perform slightly better than returning `this`. However they both perform far worse than object created from prototypes. This tells you that whenever you need to generate a huge number of objects of the same type, a prototype or an object pool pattern are the way to go. However, such benchmarks only really matters when you expect to create huge number of objects of the same type over the lifetime of an application. If you expect to generate only a limited number of instances (rarely more than 5) then, the benefit of tighter encapsulation through the availability of private methods and properties might matter more. But if you expect to access the instances a lot over the lifetime of an application, then be aware that access seems to be faster when the public interface is attached to the `this` object rather than returned as a separate Object. There are probably other factors to take into consideration, like the potential for memory leaks. http://awardwinningfjords.com/2014/04/21/functional-programming-in-javascript-equals-garbage.html. Anybody with an opinion on whether a closure-based object factory is much more likely to give way to leaks than a prototype-based object factory? 
There's an object oriented design pattern known as the Builder Pattern, where if you have a fairly long list of parameters for a constructor, you refactor to have an object that houses all of those parameters, and then pass that object into the constructor. You see this with jQuery widgets, where you'll see `$('#id').someWidget({ param1: 1, param2: 2 })` Currying in the functional world is similar, where in a curried function is one where the parameters to the final call can be supplied individually. So that, if your function call is `F(a, b, c, d, e);`, you can call it `curry(F)(a)(b)(c)(d)(e);` Why this is useful is because you can have one thing supply some parameters, save the intermediate function, and then have a different thing supply the remaining parameters. Mind you, this is an ELI5, and i've performed a [Lie To A Child](http://en.wikipedia.org/wiki/Lie-to-children). Comparing curry and builders is probably wrong.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Lie-to-children**](https://en.wikipedia.org/wiki/Lie-to-children): [](#sfw) --- &gt; &gt;A __lie-to-children__ is a simplified explanation of technical or complex subjects as a teaching method for children and [laypeople](https://en.wikipedia.org/wiki/Layperson), first described by science writers [Jack Cohen](https://en.wikipedia.org/wiki/Jack_Cohen_(scientist\)) and [Ian Stewart](https://en.wikipedia.org/wiki/Ian_Stewart_(mathematician\)). The word "children" should not be taken literally, but as encompassing anyone in the process of learning about a given topic regardless of age. It is itself a simplification of certain [concepts](https://en.wikipedia.org/wiki/Concept) in the [philosophy of science](https://en.wikipedia.org/wiki/Philosophy_of_science). &gt;Because some topics can be extremely difficult to understand without [experience](https://en.wikipedia.org/wiki/Experience), introducing a full level of complexity to a student or child all at once can be overwhelming. Hence elementary explanations are simplified in a way that makes the [lesson](https://en.wikipedia.org/wiki/Lesson) more understandable, though technically wrong. A lie-to-children is meant to be eventually replaced with a more sophisticated explanation which is closer to the truth. &gt;Such statements are not usually intended as deceptions, and may in fact be true as a [first approximation](https://en.wikipedia.org/wiki/Orders_of_approximation) or within certain contexts. For example, [Newtonian mechanics](https://en.wikipedia.org/wiki/Newtonian_mechanics) is less accurate than the [theory of relativity](https://en.wikipedia.org/wiki/Theory_of_relativity) at high speeds and [quantum mechanics](https://en.wikipedia.org/wiki/Quantum_mechanics) on small scales, but it is still a valid approximation to those theories in many situations. &gt; --- ^Interesting: [^Lie](https://en.wikipedia.org/wiki/Lie) ^| [^Lied ^Discovery ^Children's ^Museum](https://en.wikipedia.org/wiki/Lied_Discovery_Children%27s_Museum) ^| [^Neurathian ^bootstrap](https://en.wikipedia.org/wiki/Neurathian_bootstrap) ^| [^Age ^appropriateness](https://en.wikipedia.org/wiki/Age_appropriateness) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cnemoob) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cnemoob)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Keep in mind that the nexus 5 has a quad core krait @ 2.26GHz while the nexus 10 has a dual core A15 @ 1.7GHz. There are also differences in memory performance as well. The nexus 10 is a lot faster than a lot of tablets selling at your local walmart which may not even have an A9. Performance is a serious problem to get right. React makes this easy (it's performant by default and only gets better with immutable data structures) while angular makes reasoning about performance hard. It takes months to learn not to make mistakes that simply don't exist in react. Teaching angular takes months while react takes days. 
Yeah if it lost its popularity companies like Netflix, Tumblr, Walmart and others wouldn't be building frameworks surrounding it..
The `then` method of the Promises spec implements both the `fmap` and `bind` interface, satisfying the Functor and Monad laws. Functor Laws (In Haskell) fmap id == id fmap (f . g) == fmap f . fmap g In Javascript Q.when(x).map(id) == Q.when(x) Q.when(x).map((n) =&gt; f(g(n))) == Q.when(x).map(g).map(f) Monad Laws (In Haskell) return a &gt;&gt;= k == k a m &gt;&gt;= return == m m &gt;&gt;= (\x -&gt; k x &gt;&gt;= h) == (m &gt;&gt;= k) &gt;&gt;= h In Javascript Q.when(a).then(k) == k(a) m.then( (x) =&gt; Q.when(x) ) == m m.then( (x) =&gt; k(x).then(h) ) == m.then(k).then(h) 
I recommend [Eloquent Javascript](http://eloquentjavascript.net). It's not necessarily UI-specific but it's a good introduction to Javascript nonetheless. D3 is super useful and awesome but utilizes lots of Javascript nuances like anonymous functions, method chaining, etc so for it to make much sense it would be good to learn some of details of Javascript as a language before you dive in. In my opinion you don't really need to know much about HTML - everything you need to know is discussed in the "DOM" chapter of Eloquent Javascript. CSS is a little more particular, but honestly if you're just using D3.js you only need to know the bits that apply to SVG elements, and those are pretty straightforward. 
Damn, not a single one of these answers is eli5. Javascript promises allow you to group commands together and treat their success/failure as a single item. Many commands, linked together, single success/failure. It's really that easy. Here's more information: http://www.html5rocks.com/en/tutorials/es6/promises/
I make no claims of performance, any actual performance improvements achieved with my solution is simply coincidental.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Poe's law**](https://en.wikipedia.org/wiki/Poe's%20law): [](#sfw) --- &gt; &gt;__Poe's law__, named after its author Nathan Poe, is an Internet [adage](https://en.wikipedia.org/wiki/Adage) reflecting the idea that, without a clear indication of the author's intent, it is difficult or impossible to tell the difference between an expression of sincere [extremism](https://en.wikipedia.org/wiki/Extremism) and a parody of extremism. &gt; --- ^Interesting: [^UFO ^Phil](https://en.wikipedia.org/wiki/UFO_Phil) ^| [^Christwire](https://en.wikipedia.org/wiki/Christwire) ^| [^Landover ^Baptist ^Church](https://en.wikipedia.org/wiki/Landover_Baptist_Church) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cneq3vk) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cneq3vk)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
sorry, it's my fault, the api docs is not clearly. &gt; chain.wait automatically calls chain.next when it's done waiting? *chain.wait()* just a shortcut for setTimeout(function(){ chain.next() }, delay) It use in my project case. ---------------------------------------------- &gt; Neither the docs nor source gave me any indication of how some is supposed to behave *some* method use for calling multiple functions parallel in the some time, but need only call chain.next() in each function to goto next step. And **then** method like **q.all()**, it need each function of that step call chain.next() then done for next step. ---------------------------------------------- &gt; What's the purpose of final? &gt; The docs don't even mention handling errors or exceptions chainjs has no *try*,*catch*, it just need to deal with any data or error in the final function, like a regular node callback function: .then(function (chain) { ajax.get(url, function (data) { chain.next(null, data) }, function (err) { chain.next(err) }) }) .final(function (chain, err, data) { if (err) { // deal with error ... } else { // done success ... } }) ---------------------------------------------- &gt; This is the real beauty of promises Promise flow control need each step is a promise, some times, those methods only async callbacks. Such as: var user = { getEmail: function () { var p = new Promise(function (resolve, reject) { ... resolve() }) }, getName: function () { var p = new Promise(function (resolve, reject) { ... resolve() }) }, ... } user.getEmail() .then(function (email) { return user.getName }).don(function (email) { response(email) }, function (err) { response(err) }) **Compare to chainjs:** Chain(function (chain) { user.getEmail(chain.next) }).then(function (chain, err, data) { user.getName(chain.next) }).final(function (chain, err, data) { if (err) return response(err) response(data) }) 
Exactly. This looks interesting to me because my host doesn't as yet allow node.js but I do have full CGI. I've been using PHP all this time just because it's available and gets the job done but I'd much rather be using Node. If this allows me to then I'm happy. 
It could be helpful with templating engines as well, or a method to get a template and wait for data to render with it. Let's say you have a decision somewhere that determines what template to load for a profile page. Both templates use the same data but display it in a different form. If you gave the user a choice on which template to load you could create a function that accepts the template and the data and renders it. Now, if you curry that method passing the template as the first param, you can get a function that already has the user template selected and all you have to do is give it the updated data.
Did you intend on calling `naiveCurry` in your "better implementation"?
Like you're five? You know when your buddy says he's going to lend you a video game and you say you will give him back his baseball glove when he does? That's how JavaScript promises work. When your buddy fulfills his promise, you proceed with giving back his baseball glove. Meanwhile, you proceed with your life as your buddy is left to fulfill his promise. 
Even more fun: AssignmentExpression : LeftHandSideExpression = AssignmentExpression ... LeftHandSideExpression : NewExpression Yes, that means that `new Foo = 'asdf'` is legal, according to the bnf. If I remember correctly, there is a later rule which clarifies on this point, but it does make parsing JS an even bigger pain in the ass than it already is.
You need node to run this. How does this change anything?
You need to be able to run node to run this so how does that change anything? Makes no sense at all.
I just had kind of a wacky idea. You can freely ignore it since the other method is probably easier. But here it is: It is a static build server that responds to "webhook" calls from firebase. When the webhook for a model being added is fired, it generates the appropriate directory and index.html for you and syncs them to S3. It still requires having a VPS but now the VPS isn't responding to all traffic, it is only responding to the webhook calls. This has the benefit of being easy to integrate with a CDN. (easier than the nginx proxy and a CDN because the nginx proxy might require you redoing how you link assets within your app, which might or might not be a chore) edit: I realized that the static build server method would require an interceptor(or whatever backbone's router calls it) that checks the url and redirects to the root with appropriate arguments using JS. So each method probably requires modifying your app a little.
Any function that returns ~~any object~~ anything is usable as a constructor.
It *invokes* code that looks like that. `new new` should be an error anywhere else.
Thank you to everybody who commented! I've gotten some great feedback.
&gt;so you can run node on really cheap shared hosting yeah but why? 
yeah, `new x` will work as long as `x` is a function. If you look at your example like this: x = new (new Foo); is equivalent to x = new (new function Foo() { return function foo() {} }); which is the same as x = new function foo() {}; 
I'm sure there is really cheap node hosting out there somewhere.
So, I can see you fixed the two misplaced .call(this) after reading other comments pointing the same issue. So far for the "you don't understand how 'this' keyword works." That's actually one of the top 1 mistake I have to underline when reviewing code from new interns. For the other points, well, in the abstract field of programming, using the right words to describe what your doing is important, and shows that you have a good understanding of the concepts you apply. Your "functional-shared" is an attempt at the "factory function + mixin", or "object augmentation", but a poorly implemented one that nobody would use in production code. And the "prototypal" is not actually a pattern in use, just a way to strip away the "new" of the "pseudoclassical" one. All patterns that qualify as "inheritance" in javascript are prototypal, that's why for me naming one as such is irrelevant. Plus, using poorly implemented code to make comparisons is also irrelevant. And last, using code length as comparison instead of "fitting in the language concepts", "allowing good composition" or whatever useful metric, is, again, irrelevant. But at least, your answer to my comment made me laugh, a good way to start a Monday morning, so thanks for that.
This is an argument for not using bind() on a function of unknown provenance but I think it's perfectly fine to use on a function you define and control yourself (and much more elegant than _this).
It's more complicated than that. See the discussion at https://gist.github.com/briancavalier/3296186 Conceptually, they're definitely very monad-like. They're definitely functors, but Promises/A+ complicates things.
That's very useful to know, thank you.
I actually ran across stojg's class while researching how to best develop this concept. Unfortunately, the PHP implementation is too limiting, as many shared servers don't have imagemagick installed, and without doing the final cropping on the client-side, it can at best provide adaptive image sets. Before I wrote jQuery.smartCrop, I reimplemented the basic functionality of stojg's solution in PHP/GD2, with a few tweaks. You can see that code here: https://github.com/gschoppe/PHP-Smart-Crop Eventually I intend to merge the two into a combined solution where the focal point is pre-calculated using PHP, and the end cropping is handled by jQuery.
[mother of code](http://fc06.deviantart.net/fs70/i/2013/129/5/e/mother_of_god_in_hd_by_lemmino-d64ndao.png)
Quick fix for Firefox which doesn't expose the API as a Promise: if (typeof navigator.getBattery == 'undefined') { navigator.getBattery = function () { return new Promise(function (resolve, reject) { if (navigator.battery) { resolve(navigator.battery); } else { reject(new Error('Battery API not implemented.')); } }); } }
I am doing this with several projects, not with node but with Sinatra or Rails projects. Using apache i usually dont gain much performance in opposite to stand alone hosting. A good configured nginx proxy can save a lot of bandwidth and resources tho. So i basically just do this because i want something to run on port 80 on a box where there is already a webserver.
True... but when you're paying like $5 a month for the past 6 years or so and have never have had any problem with your host it's not *quite* as straightforward :) 
It is up voted because people are a fan of my satire and also the article is not dumb and I forgive you. -jennmoneydollar$
Is there also a `getBatteries` method? To get all batteries? Or can you only get the first? Or are all batteries merged into one virtual?
What devices take separate batteries? I would venture a guess that any device with such a capability would still report one virtual battery for the purpose of reporting back an overall status. 
TIL! I wonder how long this has been around. Nice to see it is agnostic to whether you're on a mobile device or laptop. I hope this becomes a standard as it would be useful information to allow sites to offer a low impact version for users with limited battery life. 
Interesting! So when comparing against your browser's battery stats are you finding that the API returns a single "virtual" battery stat, or is it only pulling one of the two batteries?
I just checked with 100 % and 94 % and it shows me 97 %. This matches the information from qgustavor. It's displayed as charging, but the chargingTime and dischargingTime are both infinity (even tho it's charging right now). This Lenovo has an internal battery and one external that can be replaced. So you can replace an empty battery without turning off your computer. A real work machine. :-)
github: https://github.com/mgechev/angular-webrtc tutorial: http://blog.mgechev.com/2014/12/26/multi-user-video-conference-webrtc-angularjs-yeoman/
So let's use this one and see how it goes https://mgechev-webrtc.herokuapp.com/#/room/638
You could use an onclick toggleClass, that's what I do at least. Something like this with jQuery: $('#element').onclick(function() { $('#elementToToggle').toggleClass('class'); }) Then in your CSS something along these lines: .class { border: solid 2px #00ff00; } Working JSFiddle: http://jsfiddle.net/1ovd94aw/ There is most likely a much better way to do this, do some research on your own perhaps. But this works for me just fine.
Sorry for the latency there, holidays occurred and brain cells were lost. Issue created.
This is the way to go. Hide the checkbox, style the label. Use HTML and CSS for what they were designed for and skip the JavaScript.
Unfortunately, it seems that the spec goes in the direction of "merge" - https://bugzilla.mozilla.org/show_bug.cgi?id=1050752 . I'm currently working on some UX features for battery management for Firefox OS and would love to have an API that provides me separate data and estimations :( Maybe one day.
Yup, surprisingly, Firefox on Android does the estimations well. I don't know why it doesn't work in Chrome.
I got something similar a while ago, just nowhere near as direct. http://i.imgur.com/0BtY0id.jpg 
Using promises for image loading can lead to some pretty clean code. Some other examples, using Bluebird: https://gist.github.com/mattdesl/36f898b34f06b48dd9ce https://github.com/mattdesl/frontend-npm-goodies/blob/master/image/preloader-es6.js 
For those out there that are reading this and like me are not programmers, java does not equal JavaScript. Ten seconds with Google would have been all the time the writer would have needed to not look stupid. I'll stop now before I sound as stupid as whoever wrote that job description. 
brb going to break internet
This is the problem with the people in HR writing the job descriptions and handling the whole hiring process. They are basically lay people when it comes to computing technology. Wonder if this person also thinks C, C++, and C# are all the same language.
True story: a coworker of mine needed to put together some UML diagrams for a big meeting that was coming up, so he asked the boss for a copy of Visio. The boss kind of looked at him funny, asked him why he needed it, and of course my coworker said "to make the diagrams for the meeting". After a few days, IT never showed up with the Visio disk to install it, so he went back to the boss to find out what was up. "It's coming, it's coming." Finally, the day of the meeting, an *easel* showed up. The boss literally thought by "Visio" my coworker had said "easel".
It is unsupported in Safari. Due to Apple restrictions, Chrome on iOS is essentially a Safari wrapper, not truly Chrome.
Wow that's comedy. "Candidates needs to Angular JS experience in most recent project". Also "If Canadidate doesn't have Angular JS the Strong Jquery experience is needed." what?
I hate recruiting companies for that reason alone. Always mailing me for Java jobs.
Compensation type: Skittles Aw yiss
I thought the original "Aw yiss" was a pigeon or some other bird? Compensation type: Bread crumbs Aw yiss!
"Java and JavaScript are as related as 'car' and 'carnival' are"
That's why everyone is looking for a "Rock Star" programmer. No one wants the chump that can only play major cords.
Do "Java developers" have a higher salary than "JavaScript developers"?
My eyes are bleeding.
Yes.
Yeah, but I don't think the language has much relevance there.
Immediately thought of this: http://tracks.ranea.org/post/56897315376/dear-recruiter
You've listed high cost of living cities, so the salaries will be higher. Beyond that, the finance world has much higher salaries than other industries, but is *much* harder to break into without luck/networking.
I find it rare that there's no link to [Effective JavaScript](http://effectivejs.com/).
JobZone? 
The optimist in me interprets that as "We're using jQuery now, but are planning on using AngularJS in future endeavors". The realist in me would smack said optimist upside the head for even considering it. It does make me chuckle every time I get one of these though. :)
Were they Eastern European? (I'm trying to sound out Visio in different accents to try to figure out what sounds close to easel...)
I thought that was the only reason to go to a wedding as a single guy...
I think most "rock" chords are major, G F and C to be exact: http://www.hooktheory.com/blog/i-analyzed-the-chords-of-1300-popular-songs-for-patterns-this-is-what-i-found/ [disclaimer] I'm really bad a music theory and it's possible that a C guitar chord is not the same as a C major chord.
where do the assignments come from? 
You might want to include some more information about your project/the problem you are facing. The details you are giving are so vague that it would be impossible to help.
I think the issue is that your javascript is not loading. On the test page you linked to I get a 404 for "http://www.parking.ufl.edu/subpages/gator_lift_form/time-limit-js.js" which is where I assume the above javascript is.
Heh, no, just stupid. And I don't mean "all bosses are stupid". I've had good bosses before. This guy was just universally stupid in all areas.
Not that correcting that helped. I had such high hopes. ;)
Yeah I know......
&gt; Of course, it's probably difficult to find a financial software development job if you want to code in JavaScript. Not necessarily - for example, I have a couple clients who are currently moving big chunks of functionality out of their big WebSphere Java application and into node. You typically won't see them moving their complex business rules into node, but that has as much to do with those being something you would avoid changing than it has to do with the language (though I do think Java is generally better fit). Whatever the software, people often choose a web-panel for managing it; writing that takes JS skills.
I think we all assumed this is a JS position, but after reading to the bottom I'm honestly not sure what language this job requires. Knowledge of JSPs and EJBs (and to a lesser extent, Eclipse) all suggest that this is, in fact, a Java position.
Alright so I want to have a script that will, log into my account go to the class I am enrolled in and tell me any assignments that are due. My problem is that I don't know how to write a script. I have knowledge in Javascript. 
Sounds like it worked out well for him in the end. I'd much rather have an easel.
findaweddingtogoto.com
Salaries don't depend much on the programming language but mostly in the industry and experience. I code JS in healthcare and, I hope, we get paid above the average in other industries.
I haven't used Angular before. Why is this optimistic?
...for a headhunter
The checkboxes that let the user select the day(s) for their ride have the id="Pickup1Days_0" with the 1 being the ride (there can be 8 for this form) and the 0 being the day of the week. I wanted to simplify and use the Pickup portion of the id since they all have this in common. My Googling led me to believe that using * was no good and that I could just leave it like that. Is there a way to have all the id's with "Pickup" at the beginning looked at by the function? Or will I need to write this out repeatedly?
It's a great way to learn, and get exposure to a community. E.g.— I'm a guitarist, but subscribed to /r/bass a month before I bought a bass.
I actually have not much at all programming experience (I do know sql, did learn vb, vba and vbs, and know html + css and a tiny bit of javascript, though I haven't really practiced all that much since I learned that stuff) but I find the stuff people make in programming subreddits to usually be interesting. It's also why I'm subscribed to /r/coolgithubprojects 
Ahh, going for a true Java developer I see ;)
I'm just as bad at music theory so I believe you. Maybe "the chump that can only play major scales".
http://jsfiddle.net/jdeese88/89bszouL/ this may help you out some
An unwise decision, but do whatever you want.
*natural chords
I always imagined Iowa has none of those. Just flat corn fields.
I'm confident in my decision, the only time you post to /r/javascript is when you're trying to pimp your own projects.
You can when it's your then-fiancée's friend's wedding. That's right, I'm a meet-him-at-a-wedding-and-get-solid-career-advice kinda guy.
I want to know how the owner reacted?
Compensation type: resume 
This is actually profound 
The truth of the matter is they are using $(ng-angular);
lol yeah web tools not medical equipment. I hear your point, but is kinda similar to what I meant, like a bank can't just hire a random JS developer that just graduated out of GA, they have to find a professional developer that is more strict and experienced and then the salary will end up being higher, but yeah you're right on that many programming languages are associated with a specific type of industry so it seems that the salaries related to them is higher.
That's impressive. 
Just about anytime a chord is referenced without indicating its a minor it can be assumed to be major.
http://wifflegif.com/gifs/400607-goose-aww-yiss-motha-fuckin-breadcrumbs-gif
Thank you very much! I really like Music theory but never really got a chance to study it. What little I know is from when I tried to teach myself guitar (I played trumpet growing up and never wrote music, so I never really needed to learn chords/triads).
I almost never read subs. I read down through whatever shows up on the front page. I might get several hundred posts into Reddit before I start reading programming stuff. I'm awfully glad other people follow subs and vote though. If everyone just read down through the front page like I do, there would be no front page. I'm kind of surprised that there are people that just read the subs that they like. I got RES because I understand blocking out subs a lot more then I understand subscribing to subs. 
what is this notation? (x) =&gt; Q.when(x) .... i'm unclear on what looks like a =&gt; operator???
My university's Web Programming course says they teach us "JAVA script ".
You rang?
It's good sometimes, but the majority of the posts are too much like AdviceAnimals, so, meh. 
I recently came across a job posting that, in short, looked like this: Title: PHP Developer Required skills: HTML, CSS, jQuery, Photoshop Required education: Designer
Microsoft Viseo. So much hurt in my brain right now. I think that job posting actually made me dumber... 
It's lambda notation from ES6. val add = (x,y) =&gt; x + y Would expand to function add(x,y){ return x + y; }
You realize headhunter is just a fancy name for recruiter, right? They are basically Human Resources people, not developers.
A few reasons to be afraid of that: 1. They have a huge, unwieldy, nasty Angular project and need somebody to take it on and add features. 1. They have someone who's decided that Angular is The One True Way and that this project has to be done using it. 1. They don't know the difference (as [/u/pokingpenguins said](http://www.reddit.com/r/javascript/comments/2rew9w/javascript_also_known_as_java_for_short/cnfgfc8)). The optimistic interpretation would be that they are looking for someone who can help them move in a new technical direction.
Migrating to Angular JS 2.0! Fighting cyborgs in neo-tokyo! Installing Node.js on Windows 17! It's the exciting adventure of the time-travelling web developer!
Dependencies changing under your feet is a nightmare that no package manager should allow. One of the reasons I've moved mostly to npm. 
Also good: the Groupon recruiter who [tried to recruit DHH](https://gist.github.com/dhh/1285068).
C, short for C#, C++, and PasCal, allows people to write code for computers...
I love this one.
You need to update hours every time you try to cycle the image.
well swash my buckle i've never seen that
Hi! Seth is a nice library. We had the same idea: representing sets as functions http://gcanti.github.io/tcomb/ 
C and Cmaj are major chords. C# is a note, but if notated as such would be a C# major chord. The same goes for Cb, except a C♭ is actually a B.
Job listing sites/search should have ratings/up-down-votes for posts. When ever something is completely stupid it should be down voted and start to disappear from searches. Or if the company is evil/corrupt. There should also be a filter to get rid of posts by job hunting firms.
Origin: http://knowyourmeme.com/memes/aww-yiss
Yea that was a bad example. 
This guy's a rock star. Actually I really wish Steven Tyler would learn to code.
Sounds like they want both, and maybe a side of "can you reset my email password?"
&gt; Edit: lol autocorrect mixolydian to mixologist ... though the Mixologist scale can often be heard in after-hours streetlight renditions of popular drinking songs.
Any scale can be the mixologist scale, as long as you're properly sloshed.
https://twitter.com/mikko/status/310449370157948928
Java: Java != Javascript JavaScript: Java !== JavaScript Not freaking equal.
Great, it's working, thank you!
Interesting. The operations create a lot of garbage which wouldn't be good for games and 3D scene graphs. I like the functional approach, though I'd be curious to see how it performs next to gl-matrix and other libraries. Have you seen [gl-mat4](https://www.npmjs.com/package/gl-mat4)? It tends to be my go-to for npm matrix ops nowadays (like [mat4-interpolate](https://www.npmjs.com/package/mat4-interpolate)). 
I was just being lazy on my phone. Yes, the DOM could technically be generated and manipulated server side. It's just not really what is done and given the OP's post, I was keeping the reply simple, though admittedly inaccurate and perhaps misleading.
Im a novice programmer learning Java in my schools' APCS class and for a second there I thought the game had changed.
Compensation type: Trident Layers
All joking aside, though, it IS the one true way...
In my CS degree we did have a summer speed course on .NET, HTML, and CSS. So she isn't entirely wrong. And considering I ended up becoming a web developer...who knows. Also you can have Java backend web applications. Not all that rare.
Typically yes. It is a lower level language, requires quite a bit more knowledge, and is capable of doing much more than Javascript.
I had a recruiter *demand* that they would only look at candidates with CSS-P experience. I mentioned maybe she needed CSS3 "instead." She outright refused and I wished her best of luck in her search.
The only problem is that competitors will downvote competitive companies, just to up their rankings. In fact that is the only people I would really see doing this.
Damn I wasn't thinking this through.
Heh, the two contextually mean the same thing, but the first one is Java, the second one is JavaScript. I'll try to explain like I'm 9... (ELI5 would be hard). This rabbit hole goes pretty deep. == means things are equal. != means they are not equal. In Java, != is strict. `Object X` will only equal `Object X`. For primitives (numbers/boolean), we compare by value instead, `2` will always equal `2`. The number `2` would never equal the string `"2"`. In JavaScript, != is a bit more relaxed. The number `2` would actually equal the string `"2"`. That's why most people use the !== operator which is similar to the Java version. The example from before just goes to show, that the two languages are wildly different in how they work. Since you looked it up though, if your interested in why JavaScript has this, [here is a better answer](http://stackoverflow.com/a/359509/1243162). Douglas Crockford, a JavaScript evangelist, calls JavaScript's versions of `!=` &amp; `==` **evil**, if that's any consolation.
I grew up in michigan. I left michigan. Florida has great weather and zero state income tax... Plenty of programming jobs... just thought i would throw that out there.
Qualifications: Any Degree
&gt; You typically won't see them moving their complex business rules into node You'd be surprised. 
While visiting family this Christmas I was telling my uncle who's an hydrologist about p = np and the knapsack problem. He was super dismissive, "Oh it's just an optimization problem? I could solve that with like 20 lines of Fortran. Just let it run for 500 iterations." I just changed the subject.
Recruiters are the used car salesmen of human resources.
Matt doesn't use nested arrays internally. For convenience you may pass a nested array but then it is flattened out into a simple array. I've looks at Google's V8 compiler and just using simple arrays provide much greater benefits than either nested arrays or nd-arrays could. Such optimization.
That's the key, you got it. This page is useful for seeing how it works in D3: http://bost.ocks.org/mike/selection/#data (the whole page is interesting but the data binding part is the second half) Essentially, D3.js takes arrays of data (numbers, objects with properties, etc) and pairs them up with elements on the page (div elements, rectangles, circles). How each element of the data array maps to a property of a page element is left to the user. One nice thing is that you almost never need to use for-loops in D3.js. D3.js assumes you have an array of data and assumes you want to map it to a set of objects on a webpage (elements of the DOM). Once you understand that part, the approach makes much more sense.
Thanks for the /r/coolgithubprojects link. Didn't know about that one.
Ahh I see I overlooked that. So at most you'll only have the row and column dimensions. Gotcha. ndarray uses the same concept. But instead has a shape array property that represents - columns, rows, 3rd dimension, 4th, etc.
If you overlap the two +'s, it looks like # :)
Heh. *Edit* I laughed, then frowned a bit.
Compensation: anal
Bower lost. No, you don't need it.