&gt; Just say no to the single line if statement. It's not nearly as cute as Chase believes it is. It's as absolutely adorable as it is concise and readable. Geldan, are you against everything short and sweet -- like inline conditionals?
According to http://andrew.hedges.name/experiments/in/, hasOwnProperty is actually slightly faster, but checking a properties existence using typeof is ~twice as fast.
Hmm... I don't think any of us to the prototype chain into account. Thanks for your explanation. :) According to http://andrew.hedges.name/experiments/in/, using typeof is actually faster than both hasOwnProperty and in. Any reason not to use if (typeof actions[action] !== 'undefined') ? I believe typeof still looks at the prototype chain.
*Faster does not mean better. Over-optimization has productivity-crushing side-effects that are to be feared.* Using typeof for anything other than the intended use, which is to determine the type of an object, is both hackey and wrong. Even if it is faster, it's not wise to hackily take advantage of implementation quirks like this. V8 could have a patch tomorrow that makes hasOwnProperty rightfully faster than typeof in this situation. `hasOwnProperty` is faster than `in` because it does not look all the way up the prototype chain. *And that is totally fine. Use `in`.* ***The important thing,*** is that this mindset of micro-optimization is harmful to your productivity, and leads you to miss the big picture of optimization. If you want to pay mind to optimization, do so when it really matters. Cleverly compress your images in half, reduce the number of HTTP requests, minify your scripts -- you will have accomplished more optimization in a half hour than if you had made a thousand micro-adjustments on the scale of this typeof crap. Only in the most extreme cases of performance optimization, will you have to concern yourself with the little things like this. Just cache your jQuery sets, and use your mind to think about how much work you're putting the processor through. Think in broader strokes than so line-by-line.
This isn't about extreme performance optimization. It's about creating the best possible code, a balance between what's best for the programmer, and what's best for the machine. In this situation, extreme optimization is unneeded. The machine doesn't care at this point, so just pick what looks best for the programmer. If we were in a situation where we did need to save milliseconds, it would be appropriate to sacrifice readability in the name of optimization. *I recently switched my websites from MySQL to SQLite drivers.* Why? Definitely not because SQLite is faster, more powerful, or can support more traffic. Quite the opposite! I chose SQLite because it's incredibly portable and easy to set up (the database is just a local file, so I can just duplicate a whole website and move it across servers freely with no re-setup). SQLite's performance is simply *good enough,* and the portability is far too valuable to pass up. When one of these websites starts seeing hundreds of thousands of hits a week, I'll have to switch it back to MySQL to handle it. I'm very happy about the change. 
For what it's worth from a self-taught limited skill code newbie, this is pretty sweet. It works well enough on my iphone 5s. I could see using this as a widget on a site I'm building at work. Is it possible to display a label relative to each pinging marker? Possible to manipulate it via clickable elements in a list? IE click on Nagasaki in a list and it orients the globe to that location? Pause/resume rotation?
Whenever you (and especially if others use your scripts) explicitly don't want to use your constructor once at a time, otherwise you can use a singleton instead.
If you want someone experienced with Kendoui mobile vs AngularJS, I can say without a shadow of a doubt that KendoUi pales in comparison. The codebase of KendoUi takes liberties that are very hard to justify, in any way other than sloppiness. For example many components inject style attributes and other nasty things into component declarations. They also heavily overuse !important in CSS. The framework is completely lacking test coverage, and so there are numerous bugs, and the support forums are a joke in comparison with the AngularJS community. In comparison with smaller components, ie. Knockout, I would recommend going with a assemble your own framework of well tested (eg. Knockout) parts than the overly ambitious and flawed kitchen sink of Kendo. FYI I wasted a lot of time trying to get Kendo working how I needed it to, and built three Angular apps in less time. For frameworks like this, I would now certainly consider it a mistake to go with closed source. But the lack of test coverage and shitty support are the real shockers. Edit: Telerik also seem to spend more money on "Evangelists" and astroturfing than they do on building a decent product. I feel a bit sorry for them that all these fantastic MVC frameworks have been released as OSS, but frankly to not see that coming is a bit stupid too. Full disclosure I did not choose to work with Kendo, it was initially stipulated by my client. We went with Angular for the other apps they required.
Just a heads up - that reads like you have asthma with all the unnecessary commas.
MEAN uses Angular, for a beginner in JS, I think it's a bit overkill. Using Mongo + Node (with express) is fine, but I would consider other options for client framework/library: * [Knockout](http://knockoutjs.com) * [backbone](http://backbonejs.org) * [riotjs](https://moot.it/blog/technology/riotjs-the-1kb-mvp-framework.html) * Using simply jQuery if it's not a big project * Going vanilla with raw JS [Angular](http://angularjs.org) and [Ember](http://emberjs.com) are pretty good, but I wouldn't recommend them as a starting point for beginners.
http://scotch.io/tutorials/javascript/easy-node-authentication-setup-and-local The first in of a few part tutorial detailing node authentication using passport.
&gt; Thing is we are required to use the stuff we were taught ~~So, you weren't listening...?~~ So, I misunderstood - I get it :(
You could do either conway's game of life or a mandelbrot set, both basically are a loop over a comparison (you call it selection, but that is easily mixed up with DOM selections).
Just throwing a friendly comment out to say it runs pretty smooth on my Galaxy Note 3 inside an iframe (reddit app) so that's good! Though my phone is pretty powerful specs wise so take that with a grain of salt. Also, x-post this over to /r/webdev We enjoy this kinda stuff over there (: (and the JS sub is pretty small)
I you have a basic understanding of JavaScript then this would be the best place to start when wanting to lean how to build a full application. 
You could create a text box for user input that checks for bad words. Store the words that aren't allowed in an array and loop the input text through the list to check that none of the words are being used and then alert the user upon success or failure of this test. Simple.
Should be able to do something really simple. The bigger and more complex the idea, you'll probably get better marks or are more likely. Something really simple is a guess the number game. Randomize a number between 1-20 for example. Have the user type in a number. If it's higher than the guessed number, tell the user "too high", if it's lower "too low". And keep going until they guess the right number. Can limit tries and stuff as well.
what is it with you PHP developers and the need for 4-letter acronyms of all your stacks ;) 
great resource dude/tte thanks
&gt;...working in one language rather than having to learn and think in the best practices of several languages. This applies to the MEAN stack, or any stack, too. I'm in my 10th year owning a web development firm and this is the first I've heard of this. Which should tell you something about the value of this. It's a stack of cards that will collapse if you are unhappy with any of the components.
Build something you are interested in, it will allow you to invest more time and thought into it.
The .js files in the app folder are the ones you are supposed to get passing, yes. She gives you an empty function (e.g in arrays.js `indexOf`) and you have to figure out what the test is trying to get, and then implement the code for it. Some of them are tough, others a bit easier.
There is NOTHING in the world more frustrating than spending a lot of time on something and not being able to get it to work. I HATE to hear that this was your experience with Kendo UI. I've started off on the wrong foot with frameworks myself and ended up completely jaded. To the original question, Kendo UI vs AngularJS or any other open source MV* library is sort of an apples to oranges comparison. While Kendo UI does provide the sort of complete application framework that these projects provide, it's first and foremost a comprehensive suite of UI controls. That being the case, we think you should use Kendo UI for your entire application OR use whichever framework makes you the happiest. The Kendo UI widgets should work right along- side your "framework of choice". This is why we created the open source projects [Angular Kendo UI](http://kendo-labs.github.com/angular-kendo), [Knockout Kendo UI](http://kendo-labs.github.io/knockout-kendo/) and [others](http://labs.kendoui.com). Kendo UI is meant to be comprehensive, but it's modular as well, so use only what you need when you need it where you need it. If you are trying to evaluate Kendo UI, the best place to do it is in the interactive [Kendo UI Dojo](http://try.kendoui.com). This experience is designed to let you learn Kendo UI in your browser at your own pace. Full Disclosure: I'm one of the evangelists that Telerik spends it's money on. :)
ITT: JavaScript
As a programmer trying to get into JavaScript, this was a very helpful article. Two remarks (I'm assuming you're the author of the article): * Some more practical use cases on closures would be interesting (in what real-life scenario would I,use this?). The current AngularJS example isn't really clear (where is the added value of closure?), however, other code examples are really clear. * You hint about JavaScript design patterns in the last section. Maybe it would be helpful to point to some resources about more JavaScript design patterns?
&gt; I've put together some very simple websites using Javascript, CSS and HTML (I think I made some user accounts with PHP as well at one point) that's why i make joke
Thanks! The pings plugin doesn't support labels, but that's an interesting idea for a plugin. The hardest part would probably be converting the earth coordinates to canvas x/y values and ensuring the labels don't overlap. You can rotate and zoom a globe via it's projection property, which is just a D3 geo projection, so you should be able to spin it to point to a location of your choice. See [this D3 demo](http://bl.ocks.org/mbostock/4183330) for some ideas. The rotation in each of the examples was built using a custom plugin, which you can see in the source below the demo; if you decide to use that one, there are pause() and resume() methods you can use to stop and start the rotation.
Very interesting--it runs super well on my phone inside the Reddit app as well (even zoom/drag), but opening it in Chrome destroys the performance. =\ I'll give this an x-post, thanks for the suggestion!
This doesn't work with `instanceof`.
Ok, cool. :)
Reduce is commonly used to factor an array of values down to a single value. It achieves this by iterating through the array left to right and calling the callback function. The calls to the reduce callback function will be: acc = Hello, World! , curr = d acc = &lt;d&gt;Hello, World!&lt;/d&gt; , curr = c acc = &lt;c&gt;&lt;d&gt;Hello, World!&lt;/d&gt;&lt;/c&gt; , curr = b acc = &lt;b&gt;&lt;c&gt;&lt;d&gt;Hello, World!&lt;/d&gt;&lt;/c&gt;&lt;/b&gt; , curr = a In other words, with each successive call, the first parameter is the result of the last call. It effectively reduces the array down to a single value, but allowing you to control how the reduction happens. reverse() is necessary because we want to run right to left, however this is equivalent: ['a','b','c','d'].reduceRight(function (acc, curr) { return ('&lt;' + curr + '&gt;' + acc + '&lt;\/' + curr + '&gt;'); }, 'Hello, World!'); see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
Makes sense. Thanks.
That demo is exactly what I had in mind. Beautiful. 
No its not, its Java. Anyways, you should be able to psuedo code through it at least and get something along the lines of: Employee Income: Salary: 1400.00 Tax Deduction: 70 Net Pay: 1330 --------------------------------------------------------
I don't know what language that is but its certainly not JavaScript. JavaScript doesnt have classes or type declaration. I want to say its Java but it seems to use a syntax that doesnt fit Java.
Its been a long time since I used Java. Could you always extend using a colon?
I am afraid you might be in over your head :( Look at this line and you should be able to work your way through it: Employee emp1 = new Clerk();
I developed quite a few enterprise apps with Angular yeah- If all your projects would be in Angular, then it most certainly makes sense to try and make a library of directives you need often. Angular is so good in encapsulating the functionality of any widget, no matter how complicated it might be. That is one of Angular's biggest strengths. VERY important for you would be to at least have the same module system. Nobody is gonna use your standart components, when they will have problems even loading it. So stick to one-browserify is awesome, require.js if you are old school. Also I would recommend you to use grunt.js for building the standart library. Grunt.js is the best JS build tool. Nothing else comes even close.
That's pure Java, not JavaScript. No wonder you're confused at what it's doing. The syntax is vaguely the same but the keywords and runtime environment are vastly different. For one there is no DOM =) The Java class block is like the robust version of what JavaScript does when you create a function with a constructor and fill it with properties. The virtual parts are what JavaScript would put into the prototype. Simply put what this is doing is defining the idea of what an Employee is (the abstract block) and afterwards defining what a Clerk is by saying "this is kind of like an Employee but using Clerk stuff if anyone asks." The main function simply creates a new Clerk and starts doing the asking, then spits out the answers it got. Summary: you need a Java tutorial or book. I like the Head First series because I like reading offline, but I'm sure that you'll get many online references from other answers here, too.
Yep. Without a doubt C#. Not sure if this was a joke gone wrong, but there's no java(script) in that code.
Not in java. The get/set notation should also be a big tipoff that it's C#, along with the naming conventions (attribute and method capitalization). edit: the virtual keyword doesn't exist in java either :). 
That's Java, not Javascript, and as johnnyboyct stated, the two is very different and actually has nothing to do with each other. &gt;please explain what this is asking for and how to go about it? The question is what would be displayed on the console when you run the application. Since that is a pretty basic question, I suggest you look for easy to follow tutorials to try and get a handle on things. Something like [this](http://www.apekshit.com/Object-Oriented-Programming-Concepts/c/12) maybe? I'm sure if you have more specific questions the people over at /r/java will be happy to help. To sum it up, they basically gave you two classes, the abstract class Employee, and the Clerk class which extends the Employee class. When the program instantiates the Clerk class, it calls methods to compute the salary and the tax deduction for that employee and proceeds to write it to the console. 
I agree. I think Angular seems like the all-around best choice.
[This talk](http://vimeo.com/69255635) gives an interesting perspective on inheritance in javascript. In short, classical inheritance is meh if you're already in a prototypical inheritance based system.
Absolutely. This is how Facebook does things and it's great from a product dev speed perspective (reuse your code) quality perspective (ie same grid units everywhere) and performance (download one stylesheet and cache it). We've made this work across both our php and our react stack n
It seems browserify allows use of require() without a callback function. i.e., you don't have to do this: require(['jquery', 'underscore'], function($, _) { ... }); Seems you can just do this, instead (am I wrong?): $ = require('jquery'); _ = require('underscore'); How the heck does that work without an asynchronous callback for when these dependencies are loaded? Does it require that the project always be "built" (browserify main.js -o bundle.js), even in development mode?
Here's a simple one, but might be cool and would definitely use all of the above! Create a Hangman style game. You'll use if/else statements for when a user guesses a letter. You can then add on a timer per guess via a loop. It should be very doable, educational, and get you an A.
This is a fine example of instrumentation I'd really like to see RUNTIMES provide. Having to mangle your code-base to see how it runs isn't the best. A runtime that can help with this kind of omniscient debugging, that understands what it itself is doing and can report on that, is highly desirable.
Astroturfing at it's finest
Yes, with browserify you always have build step. We use grunt-watch, so if your workstation is quick enough, you should not even notice it. Besides, using grunt-watch with it's livereload feature is so addicting, that I would not want to develop without it. Browserify also builds sourcemap, so that you can debug absolutely the same as if you were running from the source itself. And asynchronous loading of JS files is just a pain in the arse, what is it actually good for? Nothing. Just to causes headaches and pains.
Seems like you'd need another piece of software like [beefy](http://didact.us/beefy/) or [grunt-browserify](https://github.com/jmreidy/grunt-browserify) compiling stufff as you go along.
I think it is definitely better to learn in MEAN stack than in LAMP/WAMP stack. Just try to solve your problems piece by piece: 1.how do I model my data on the server? 2. how do I get them into browser? 3. How do I display them with angular default directives? 4. How do I manipulate data inside the directive? Keep in mind that with promises, even async code can be beautiful and easy to write, easy to reason about. Promises are built in within angular, in node.js I strongly suggest: https://github.com/petkaantonov/bluebird
This sounds like a bad idea
It depends; what do you mean by "external query?" $scope is the context that your controllers and views share, so in general you'll have to attach *something* to the scope. It's common to write a service, inject it into one or more controllers, and then attach that service to those controllers' $scopes so its data can be used in the view for each of those controllers.
I suggest you to try Phaser.io : http://phaser.io/ Updating some properties on a sprite (gravity, bouncing value, mass, and many others) can be done with only one line of js.
I think its important to understand how scope, variable hoisting &amp; the prototype chain work. There is a cool [quiz]( http://davidshariff.com/quiz/) about the topic (you have to answer the css &amp; html questions first) Another important topic is module packaging for the client &amp; the server using npm or bower. In the future [ECMA script 6](https://developer.mozilla.org/en-US/docs/Web/JavaScript/ECMAScript_6_support_in_Mozilla) and [web components](http://css-tricks.com/modular-future-web-components/) will be very useful.
I personally would not have enjoyed learning how to program with JavaScript. It's a complicated language which has a lot of misinformation on the internet, and teasing apart the good from the bad is difficult. I would learn how to program with C#, Ruby, or Python. They are great languages with excellent learning resources. Then come back to JS later.
I'm programming JavaScript for many years. What really annoyed myself a long time was a lack of knowledge for architecture and structuring code, especially for bigger applications that require a lot more than just jQuery snippets one after another. Also, I nowadays I prefer knockout/backbone and mvvm paradigm in favour of cleaner code, using inheritance and reusable structures/template.
Hi. Seems like you're not clear on what astroturfing actually means. From Wikipedia: "Astroturfing is the practice of masking the sponsors of a message (e.g. political, advertising, or public relations) to give the appearance of it coming from a disinterested, grassroots participant." roblauer, like myself, works at Telerik and he made sure to mention that in his response. It's hard to understand how you could accuse him of astroturfing when a clear disclosure message has been posted.
1) Scope and closures. Once I learned about the elegance and expression that comes with nesting functions I stopped using objects entirely except to store small collections of data. If they become extremely intimate with this concept they can stop wasting their time with the unnecessary overhead of the object model, constructors, *new*, and so forth. 2) Any approach that is a shortcut or convenience is likely to dirty up the code at maintenance time. If their primary goal in writing code is the quickness of initial authoring time they probably lack the maturity to be making important design decisions without substantial mentoring. If they do it the right way the first time and every time they reduce maintenance efforts over the life of a product substantially. I did learn this lesson the hard way. 3) Frameworks are trends that come and go. If the code is going to be around for a while be careful about getting too cozy with their favorite pet framework. This is a very expensive mistake to learn the hard way. 4) Copious amounts of documentation are very important. This is not for them, but for their teammates. It communicates edge case problems not evident in the code and other decisions necessary from testing the code and fixing bugs. This said proper naming of variables is less important than many developers would suggest and may even invite a false sense of understanding to the deeper inner-workings of the code. 5) Learn the DOM as an external API from the very beginning. A strong understanding of the DOM results in faster and more elegant code and it destroys most of the (unnecessary) value offered by many common frameworks. 6) Never stop learning. I often think there are two separate and unrelated audiences who work with these technologies: engineering types and marketing types. Marketing types are most primarily concerned with getting their product into production as fast as possible so they can evangelize around it. Engineering types tend to be less concerned with the *how* and more concerned with the *why* of what's going on under the hood. **Never** let implementation decisions be governed by the interests of marketing types and **never** let the perfection of the engineering types govern the timelines and expectations of the marketing types. Ensure your students understand the decisions behind why code is written in certain ways before simply releasing a disaster with a 1000 dependencies for all the world to see. If the primary concern of any technical effort is *how* instead of *why* then you are not ready to move forward. I had to learn this lesson the hard way as well.
Oh I'm sorry, silly me.
I would also recommend egghead.
&gt; 2) Any approach that is a shortcut or convenience is likely to dirty up the code at maintenance time. If their primary goal in writing code is the quickness of initial authoring time they probably lack the maturity to be making important design decisions without substantial mentoring. If they do it the right way the first time and every time they reduce maintenance efforts over the life of a product substantially. I did learn this lesson the hard way. Maybe I misunderstand what you mean, but I feel that long as a programmer is disciplined enough to regularly clean up the mess they make, quick &amp; dirty is a very valid approach with a number of benefits over "getting it right the first time". Make it work, make it right, make it fast.
In retrospect, I wish I had started using Unit Tests sooner.
I assume since s/he mentioned Angular, they want to use that framework and not Meteor.
This is actually a great one I wasn't even thinking of. We should have some assignments which aren't set up as "I'll mark it to tell you how well it works", rather "write some tests, get your program to pass it, and I'll mark you on how well your test cases cover the assignment's requirements"
For more detail on that see my point number 6. Ultimately, its all about risk management. As a younger and less mature developer I **knew** that and still did sloppy crap anyways, because even though I knew I owned those risks I did not have the experience see the aggregate costs resultant for those mistakes as a collective over time. Further more, I might have been willing to accept those risks, but I am not usually coding only for myself, which means the risks are never really mine to own. I am laying risks upon the organization when I had no business doing so, and this lack of vision was the heart of my immaturity.
The [real reasons for using unobtrusive JavaScript](http://lpar.ath0.com/2012/03/19/the-whys-of-unobtrusive-javascript/), and why the methodology of choice is [the revealing module pattern](http://lpar.ath0.com/2012/03/22/javascript-module-patterns-and-code-size/). (I didn't use RMP for well over a year, because all the advocacy I saw was based on arguments that didn't hold up. So when I finally convinced myself, I wrote those articles.)
Thanks. I'm studying your code.
I consider myself to be a beginner in Javascript and in programming in general. I am self-taught HTML &amp; CSS, but failed miserably at Javascript on my own. So I did a beginning JS course at college last year, and a course on object-oriented JS at university last semester. My Christmas break has been spent on trying to consolidate the things I've learned (and wish I'd understood before turning in last semester's project.) It may just be the way my slowing mind works (I'm in my 50s), but I can't get a good understanding from just one book. I have "Javascript: The Definitive Guide" (6th Edition) by David Flanagan, and it's been helpful, but feels more like a reference book than a tutorial book to me. I also have Nicholas C Zakas's "Professional Javascript for Web Developers" (3rd Edition). That one is slightly more tutorialish to me; hope that makes sense. It's easier to learn from, is what I guess I'm trying to say. Everyone says get Crockford's "Good Parts" (so I did.) It does have some good parts, but I can't understand those damn diagrams to save my life. I just got "Effective Javascript: 68 Specific Ways to Harness the Power of Javascript" by David Herman, and although I am only about halfway through it, it seems to cover many of the same topics as "Good Parts" does, but in a much more (at least to me) understandable way. And it has to say something when the inventor of the language writes the preface to the book... I also just bought John Resig's "Secrets of the Javascript Ninja." I'm hoping it'll give me a better understanding of callbacks. Those are the main print books I have. Also have several ebooks... I have started working my way through "Beginning Javascript: 4th Edition" by Paul Wilton/ Jeremy McPeak. Eric Elliot's "Programming Javascript Applications" seems to be good, although I'm having a hard time following all the testing.. which has led me to turn my focus to TDD; (try getting a 54-YO brain around THAT); most of my other ebooks are on that. HTH. 
KendoUI/Devexpress/etc are all suites of controls from the old school asp.net way of thought (packaging up opaque, poorly tested and poorly coded components without thoughts as to integration in other toolsets) which lead to some atrocities when it comes to having to work around limitations/poorly thought out use cases. Avoid them at all costs; hell use backbone + bootstrap if you have to; it at least allows you room to breathe.
The first one utilizes the jQuery library. So if you're using jQuery, you're using jQuery bindings
+1 for pointing out the problems that code in markup can cause for minification
Second this. Angular and Ember have a steep learning curve and you have to buy into the way they do things (because they both do a lot of things for you automatically/behind the scenes - this can be really good, if you know what you are doing or it can cause a lot of headache if you are unfamiliar). If the goal is to develop your long term coding chops, you will have to learn raw JS and jQuery anyway, so I would start there and migrate to Backbone or Knockout (depending on your requirements) and then if you need, look for a full fledged framework.
Whoa! This is pretty awesome. The more I read about React and experiment with it the more I like it. I started building my own stateful UI management library only to realize that react was doing the same thing but better and scalable. This kind of tooling will make debugging way easier!
You can get up and running with Angular pretty quickly with a basic overview of the fundamentals; the learning curve ramps up when you dig into making your own directives, understanding how the Angular DI (dependency injection) scheme works and how to test your application. I did a [screencast series](http://www.youtube.com/user/vidjadavemo/videos) along with code on github that walks you through the basics, a few intermediate topics and testing and security, let me know if it helps you out: - [Introduction to AngularJS](http://www.youtube.com/watch?v=8ILQOFAgaXE) - [End to End with AngularJS](http://www.youtube.com/watch?v=hqAyiqUs93c) - [Security with AngularJS](http://www.youtube.com/watch?v=18ifoT-Id54) - [Frontend Workflows with Grunt and AngularJS](http://www.youtube.com/watch?v=fSAgFxjFSqY) - [Testing Strategies for AngularJS](http://www.youtube.com/watch?v=UYVcY9EJcRs)
I'm not sure if I follow. You should be able to use the function again regardless of what it returns unless you redefine the currently executing function. What happens to the button that you can't use it again?
I probably could've been a bit more descriptive. This is what's happening: I have a form and instead of &lt;input type='submit'&gt;, I'm using &lt;button type='submit'&gt;. The form has 'onSubmit="return validateStep1()"'. When the function runs, it checks the username field then returns false if the field is empty. Even if it's not empty, it'll return false and stop me from using the button again. function validateStep1() { var u = document.forms['getting-started']['user'].value; var p = document.forms['getting-started']['pass'].value; var pc = document.forms['getting-started']['pass_conf'].value; if(p==null || p=="") { document.getElementById('forUser').innerHTML = "Username empty"; return false; } } That's the code for the function so far.
Because you're checking for p, which is the password, not the username.
God dammit.
 function validateStep1() { var form = document.forms['getting-started'], username = form['user'].value, password = form['pass'].value, passconf = form['pass_conf'].value; if (!username) { document.getElementById('forUser').innerHTML = "Username empty"; return false; } }
Lol, it happens to the best of us.
Some tips: - Don't use `onsubmit` - use event listeners instead. - Don't return false - use `preventDefault` instead. - Save expensive lookups (document.forms.whatever.something) by caching references. Did a bit of cleanup @ http://jsfiddle.net/Sue89/ - it's not ideal (passing the event around around is a bit unfortunate) but it's a few steps closer.
Holy shit, that's like 4 times shorter than my code.
I've watched these before, they're great.
Aren't p== null and p=="" equivalent? You shouldn't have to check both unless you are using the triple equal sign comparison correct? And this is a question from someone who is about 1 day into a JavaScript book so I'm sure I'm wrong but would love to hear why I am. 
Teach them about automatic semicolon insertion. Then teach them about the special circle of Hell reserved for people who don't terminate their statements with semicolons. (That's not something I wish I learned; I always did it. But please, teach the students well...) Scope was already mentioned, but be specific about exactly what `this` will refer to based on invocation context. I should have had a firm grasp on that much sooner than I did.
I wish someone would have shown me this video immediately after I learned constructors: http://www.youtube.com/watch?v=PMfcsYzj-9M And then have introduced me to factory functions as well.
It's probably too short/intermediate a course to cover this too much, though I do agree that's a really important one to get your head around. Going from PHP -&gt; JS with jQuery, this behaved similarly to what I was used to in PHP, but it's really quite different
Please do! I'm super hungry for this. (Love your work)
Please don't do this. Please don't do that thing bad teachers do where you confuse the subject and give credit for things that should be unrelated. Please don't teach unit testing off an assignment like that, that kind of mechanical unit testing only catches bugs the programmer has already thought of and has no educational value in a tiny system which will never change. 
That the "solutions" to some problems that have been adopted are worse than the things the supposedly cure. For example wrapping things in functions and immediately calling them leads to such ugly horrible looking code it's worse than the scoping problems that it supposedly is a fix for. Readable, elegant code *matters* so think about what you actually NEED in the code. That just because something is commonly written about on websites as beign the right way to do it, you shouldn't believe it without thinking about it yourself.
I don't see the problem. This will teach the students what are test units and how to use them. They won't know when to use them, or how to write good unit tests, but that's something that will come later.
Cool! At least two of these were made during the Ludum Dare competition. Jameson was made a few weeks ago for LD28 (theme: you only get one) and qbqbqb was made a number of months ago for LD25 (theme: minimalism). It's nice to see the great increase of html5 games in those competitions. It means people are experimenting with it and seeing them on indiegamestand shows it is relatively successful.
http://www.reddit.com/r/javascript/comments/1tcqgl/browserify_and_synchronous_require_for_development/ I made this. It could definitely be improved, but I've been using it for a while now and haven't had any problems. You'd never use it for production, but for development it's great, and then you just build with browserify when you're ready to deploy.
Right. They won't know when to use them or how to write good unit tests. So what will they have actually learnt? That's just empty knowledge, there's no point in teaching people without teaching the understanding. And there's no room/place for that in a beginner's javascript course.
Hi Paul! This would be very helpful, especially when combined with the JS profile &amp; heap snapshots. 
Someone tell them that their EFF links are broken. ;-)
Wow, great news. I wonder if there's has been any thought given around some of the "possible enhancements" mentioned at the bottom of the project page? For example, dynamic autocompletion, or being able to execute code the proper scope without setting breakpoints?
This website crashed my entire Google Chrome. Not just the tab, the entire browser crashed.
Looks like they're just using a setTimeout to increment the zoom level little by little: // This function, combined with zoomHome() above, will change the view of a time machine gracefully, since // just calling setNewView(), even with the animation flag set, will update the view too quickly. function zoomGracefully(view) { if ((newZoom != 0 &amp;&amp; newZoom &gt;= view.zoom) || (newZoom == 0 &amp;&amp; view.zoom &lt;= 10)) { var doWarp = false; timelapse.setNewView(view,doWarp); view.zoom += 0.5; setTimeout(function() { zoomGracefully(view); }, 150); } else { if (doPlay) timelapse.play(); } } The timelapse thing is probably the animation once it's done zooming in.
Recently had to do this for a game in SVG. Needed a flexible way of loading a ton of SVG assets in a parallel manner, being able to use a single callback once they were all done. This is sort of an abstract from that project: https://gist.github.com/seutje/8237468
I've done some tinkering in the same area a few months ago, and I wasn't very successful... At least, *I* wasn't too happy with the result. I do remember seeing a post on StackOverflow, with code doing exactly that: with a timeout, increasing the zoom level 1 at a time. But I can't seem to find it right now...
Sorry but what? Why not just make a generic walker that takes a filter function - it would be just as easy to implement but be much more useful. var filesPromise = walk(".", function(fileName, stat) { return stat.size &lt; 1024; });
I'm more of a design/user experience kind of person.. So for me, it would have to be "Jank" (or rather, to write code to prevent jank) http://jankfree.org/ I recently learned about Jank (aka visual browser lag), and it's helped the way I code tremendously. Most of it involves CSS based adjustments. However, it definitely makes you much more aware of DOM based JS functions/methods, and how you should write / stack them.
that code explains why the animation is so janky he should set each timeout based on 1000/60 and set the view.zoom increment based on how long its been since the last update.
Maps API V3 does not support animated zoom and you will have to implement it yourself with timeouts/interval setting each time a different zoomlevel. You may want to run it into a requestAnimationFrame callback to ease it up on slower machines
You can use TweenLite to handle the timeout for you; it can tween arbitrary properties on any object. This way you'll also get easing with your programmatic zooms.
&gt; This way you'll also get easing with your programmatic zooms. I doubt that will work, setting a minor change in zoom will make Google Maps do an animation itself (one that cannot be changed or removed, if i'm correct).
I was referring to the zoom animation, not the photo timelapse.
1. Mutual binding between getters / setters on two object properties.. it's.. so useful... and so under used in javascript. 2. Before you learn to code, learn a good documentation system that automatically spits out documentation and unit tests for your code. (yuidoc isn't bad) 3. Very clear distinction between syncing between models, creating custom events and updating user interfaces in the DOM. No libraries, no frameworks. Very important concept. 4. Maintenance and scalability, every 5 cents of effort put into these pays back 10x its value later. 5. The memory and cpu impact of using prototype/new and creating a on-the-fly object. Most can't tell the difference, and most of the time it doesn't matter. But when it does about 1 in every 1000 javascript developers could say why. 6. Using CSS/HTML is your friend, when NOT to use javascript for specific layout/animation is pretty key. 7. Use document fragments to pull in html templates. No need for mustaches. 8. Impact of changing parameters in the DOM too much. Lesson: Reuse views, don't discard and rebuild. 9. Why/when to use a function vs. a method vs. a (get/set) property vs. asynchronous, vs. synchronous vs. promises vs. queues/messages vs. callbacks.. Very few can say why you'd use one paradigm vs. another. 10. Workers/postMessage/onmessage, when to use them 11. Namespace pollution, whether through closures and scope or simple naming this is useful. 12. Don't reinvent the wheel. I watched a programmer trying to recreate timezone/date calculations because they didn't like the built in object. 13. You can overload basic prototypes such as String.prototype, may/may not be a good idea. 14. The value of using the DOM as a model, it's in the name. 15. Rendering contexts, this is so often ignored its spawned libraries that try and work around an issue that's simply a matter of mixing rendering contexts. 16. Avoid (if at all possible): explicit positioning in CSS, overflow:hidden or masks, css filters, transparency when possible, css transformations, canvas objects, too many video elements, 3d perspective transforms, playing with zindexes. These each create an entire new renderlayer in webkit and can cause a simple html page to take up upwards of 100~150MB of GPU memory. 
Take a look at the Effective Javascript TOC and then, only then, consider using jQuery to teach javascript.
Dude this is really bothering me, it is 'standard' with a 'd' not 'standart' with a 't'. 
How can something like this be sold? Like, seriously; if it's JavaScript, then how can it be compiled? Is it compiled into some sort of Node.js thing (I've heard people say that that's somehow doable).
FYI there is also /r/AngularJS.
FYI there is also /r/AngularJS.
"...the number one programming language in the world, the language of the web, of mobile hybrid apps (like PhoneGap or Appcelerator), of the server side (like NodeJS or Wakanda) and has many other implementations..." *cringe*
https://github.com/rogerwang/node-webkit One glorious example of a game that made a big success using it would be GamedevTycoon http://www.greenheartgames.com/app/game-dev-tycoon/
Holy shit, that game is made in HTML5/JS/Node.js? AMAZING! I love this game so much! Thank you!
I would recommend you have a look at OpenLayers which is a mapping framework for js. It does zoom by default and it can use Google as a mapserver for handling the tiling. Also it will let you use Yahoo, Bing, etc. or your own MapServer. Here's a quick example that calls OpenLayers via cdn and uses Google Maps (couldn't figure out how to include this into jsfiddle) &lt;!DOCTYPE html&gt; &lt;html lang='en'&gt; &lt;head&gt; &lt;meta charset='utf-8' /&gt; &lt;title&gt;My OpenLayers Map&lt;/title&gt; &lt;script type='text/javascript' src='http://openlayers.org/api/OpenLayers.js'&gt;&lt;/script&gt; &lt;script src="http://maps.google.com/maps/api/js?sensor=false"&gt;&lt;/script&gt; &lt;script type='text/javascript'&gt; var map; function init() { map = new OpenLayers.Map('map_element', {}); var google_map_layer = new OpenLayers.Layer.Google( 'Google Map Layer', {type: google.maps.MapTypeId.TERRAIN} ); map.addLayer(google_map_layer); if(!map.getCenter()){ map.zoomToMaxExtent(); } } &lt;/script&gt; &lt;/head&gt; &lt;body onload='init();'&gt; &lt;div id='map_element' style='width: 500px; height: 500px;'&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;
To add a bit more, there is a great book on this called OpenLayers 2.10 Beginner's Guide by E. Hazzard. OpenLayers is very mature and can handle whatever additional data you want to display and lets you be independent of Google if you want. Check out www.flightaware.com and look at a live airport map to see OpenLayers with animated aircraft in a live setting.
This would be good if there was any explanation. &gt; 5 – Create an object constructor ...why?
LosTechies has had an awesome tutorial series over the past month or so on Angular. Here's a link to the most recent part that also has an index of previous posts. http://lostechies.com/gabrielschenker/2013/12/30/angularjspart-8-more-choice-when-testing/
&gt; React equivalent to Angular's Batarang Chrome extension Links appreciated.
My apologies, I never actually built the extension; that said, it seems as though [the React Team has added a chrome extension to their site](http://facebook.github.io/react/blog/2014/01/02/react-chrome-developer-tools.html). Here's to hoping the ReactPerf timing code is added soon (:
12 Doesn't actually work. It's dependent of on the implementation of sort(). Best to use fisher-yates shuffle 
Agreed, this series was pretty good.
Not sure how far you've gotten into Angular, but you could try this tutorial: http://www.youtube.com/watch?v=i9MHigUZKEM. Bit of a shorter, all round introduction.
Love this list - It's a fairly short course, so I'd like to centre it all around managing results returned in a big JSON object. If I could just get them to use every one of those against the JSON, I think they will have learned something useful.
 Statistically, we're actually one of the fastest growing, highest paid, most in-demand jobs there is. I know of the kind of employers you're thinking of, and there's definitely a lot of old money that pats themselves on the back for all their brilliant ideas, and think they just need a 'code monkey' to sort out the 'technical details'. Those businesses are dropping like flies. The successful ones out there put the software people at the top (or are founded by them), because success in software isn't about meeting a set of rigidly defined requirements, but about actually doing quality work. 
This is a site I have been working on to help people learn about writing responsive javascript, will add more examples soon
Cool site - never seen it before, but this is definitely my philosophy too. I work with a few design firms (though my firm also provides design services, print designers often have good leads to companies who are starting to develop web strategies), and your average designer loads their pages with jank at levels your average developer wouldn't think possible. Some of these websites look like they're sitting their rendering themselves for a full 5 seconds after the HTML + images have downloaded. Misuse of TypeKit is probably the biggest offender in my book - you get a page with their fallback font loaded first (which they usually just set as the default 'serif' or 'sans serif', so it looks crummy), then 2 seconds later the whole site shifts around like mad as the TypeKit JS starts getting responses and including them in the page. Also, they put many images in places where you expect them to display instantly (e.g. replace a product's image with the image for the thumbnail you're hovering) and they look great on local demo servers, then terrible after you deploy.
I disagree about the importance of the proper naming of variables. I feel there is no such thing as "self-documenting" code, and that external documentation should exist, however, in what case is something like var text = document.getElementById('username').value; equivalent to var username = document.getElementById('username').value; I feel that any developer worth their salt would understand that something this simple doesn't provide a deep understanding of the code, but it does indicate what the variable represents, which is important.
Post the rest of your code.
We can't tell from this fragment of code, but it is possible that the update is happening too quickly to see. Try putting your complete code in a jsfiddle or plunker and we might be able to help more.
This is all of my code. I'm just running it from the console. First I do run(); and it draws it just like I want. Then I do update(); and want to watch the screen update as the array gets sorted (I know it's not efficient, I am still learning). var unsortedList = new Array(); function run(){ createArray(); shuffleArray(); displayArray(); } function update(){ for(x=0;x&lt;1000;x++){ sortArray(); displayArray(); } } function createArray(){ for(var i=0;i&lt;1000;i++){ unsortedList[i]=i+1; } } function shuffleArray(){ for(var i=0;i&lt;1000;i++){ var arrayLocationA=Math.floor(Math.random()*999); var arrayLocationB=Math.floor(Math.random()*999); var placeHolder=unsortedList[arrayLocationA]; unsortedList[arrayLocationA]=unsortedList[arrayLocationB]; unsortedList[arrayLocationB]=placeHolder; } } function displayArray(){ var c=document.getElementById("myCanvas"); var ctx=c.getContext("2d"); ctx.clearRect ( 0 , 0 , 1000 , 1000 ); for(var i=0;i&lt;1000;i++){ ctx.beginPath(); ctx.moveTo(i,1000) ctx.lineTo(i,1000-unsortedList[i]); ctx.stroke(); } } function sortArray(){ var placeholder=0; for(i=0;i&lt;999;i++){ if(unsortedList[i]&gt;unsortedList[i+1]){ placeholder=unsortedList[i]; unsortedList[i]=unsortedList[i+1]; unsortedList[i+1]=placeholder; } } }
Something that still trips me up occasionally with JavaScript is asynchrony and how the event stack and "concurrency" works in a single-threaded environment. For some reason pthreads is easier for me to grasp. I believe the knowledge of when event handlers will be called and how to guarantee idempotence and prevent "race conditions" is invaluable.
the post above is the entire code. I'm running the individual functions from the console.
I added alert(); between the sort and display functions. Once I prevent the page from launching more windows it redraws each time and "animates" just like I was hoping. Any ideas on why this works? What could I put there to make it work without launching a window?
That is actually why I didn't want to answer the question. People need to RTFM and his code was a clear indication that he did not.
They are not. `p == null` or `p == undefined` both desugar to `p === null || p === undefined` (ie. it's true if and only if p is null or undefined) whereas p == "" goes through crazy string coercion codepaths and has completely different semantics. I think this is pretty clear [in the spec](http://es5.github.io/#x11.9.3), and spec reading is a great skill to teach a new programmer!
alert(); stops the execution of your code. Execution resumes when the alert is closed. Easy solution for your problem would be something like setInterval(function() { sortArray(); displayArray(); }, 1000); It sorts your array and displays it every 1000 milliseconds. Search for more information about javascript execution model and event loop. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/EventLoop This might be helpful. (First Google result) 
http://jsbin.com/UJaREVi/2/edit output: http://jsbin.com/UJaREVi/2/ That should get you started. You need to modify your sortArray method with some kind of check to see if the array is sorted so that don't call clearRect in the update function when the array is in the correct order. This way once the array has been sorted you will just animate the sorted list over and over again. The key is using requestAnimationFrame. https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame
Cool thanks!
In my opinion, responsive design should be left to CSS media queries, however I do find it useful to listen to window resize events and modify the height of containers that need to scroll.
In the context of that example *username* is more descriptive than *text* and both are more descriptive than *a* but less descriptive than *clientUsername*. The point is that naming schemes are highly subjective and there is no limit to the descriptive depths of specificity. Ultimately, though, you can always determine what a variable is by examining its point of assignment. The longer the name of a variable the more challenging the code is to read. This suggests ideal names need to be only specific enough to separate their intentioned use from other variables of the same scope. The usefulness of this is ultimately shallow and becomes more so in the depths of algorithmic complexity. If naming is essential to the representational understanding of the code there is likely much that is not accounted for or passed on. More useful, however, are deterministic qualities and design factors that determined the code. I have learned from experience even the best applied names only marginally improve code understandability.
I completely agree, the design aspects should be left to CSS media queries, but they can't perform functionality changes, for example a modal windows works great on large viewports but on smaller viewports it might provide a better experience to allow the users to go to another page to view the content, with responsive javascript you can provide the best experience regardless of device
"The benefit of this being that we can use the same media queries in the javascript as we have used in our javascript." Javascriptception.
For that situation, I would probably keep the modal, but make it full screen like a normal page and a close button, this would all be possible with media queries to restyle from a popup to a full width/height div. But I agree, for situations where you need to switch between different JS logic paths based on screen width, it's needed.
Start by learning javascript the language first.
It's useful for things where you want slightly different behaviour on mobile and you need it to align with breakpoints rather than an arbitrary isMobile variable.
Ok, then read this: https://github.com/angular/angular.js/tree/master/src
"Are their libraries" 
Also if your using something like SimpleStateManager you can get it to automatically handle stuff like determining if your on a mobile device and which javascript needs to be run (like does equal height columns need to be setup etc), its about making writing this responsive javascript simpler I have been writing responsive javascript for a while on projects for big clients, and in that time I realised that I was repeating myself a lot which is why I wrote SimpleStateManager
"What are the API's?"
Nice work putting this together. You're lacking a favicon, though. ;)
You can also use [enquire.js](http://wicky.nillia.ms/enquire.js/)
This is a very cool one -&gt; https://stackedit.io/
Thanks for definitions, will continue to improve upon the [code](http://jsfiddle.net/QUHBU/30/).
Love it! I was just looking for some digestible JavaScript code to buff up my reading skills and this is certainly digestible ;) Did you keep the `_events` property public intentionally? My only suggestion would be to consider enforcing privacy on that, and returning an object literal from your constructor with closures over a local `events` variable. This is probably more of a design choice though anyway.
http://jsbin.com/UJaREVi/7/edit?js,output Colors stay with values, oddness in canvas addressed, reenabled shuffled values.
This was a terrible read.
Thank you very much!
7 was a good idea, but using closures for privacy is now redundant with ECMAscripts let blocks for privacy
Unfortunately The site is currently down. Reddit Hug victim.
Does array.forEach() get around that?
Nice man!
Seems kind of broken to be hacking apart media queries only to run on a window resize event. None of your logic would be available on page load.
Change the color line to: color: 'rgb(' + Math.floor(i * (255/ size)) + ',0,' + Math.floor((size - i) * (255/ size)) + ')' for a [blue to red shift](http://jsbin.com/UJaREVi/9/edit) which makes it easier to watch the sort.
Funny. Just finished up the same thing. You can also lift the router out of express and run it in the browser with just a couple of changes, but what is the fun in that. Nice job though.
Thanks for finding the bug. Went ahead and fixed it!
responsivejavascript.com went down? its hosted on github so that would be quite odd if it did
SimpleStateManager allows you to add your logic and then fires the correct logic on resize and on page load
I just checked out Simple State Manager. It's very similar to something I implemented at work. I noticed you were the top contributor, so I figured I'd just ask here. Why do you use resize events when you could use matchMedia? I understand you would have to polyfill with the debounced resize for like ie &lt;= 8, but resize, even when debounced, is such a pain.
all - they can be easily found over the internet in the original (not packaged) form - http://hotlinetrail.rezoner.net/
It is subjective, but I believe a certain level of specificity could be agreed upon in a project. Using your example, if the programmer was concerned with the fact that the username is related to a client, a better representation of that data would be client.username = ... where "client" is an object of some sort. If "clientUsername" clarifies the intent of a variable in the same scope as a variable "serverUsername," then both of these are better than variables akin to "username1" and "username2." Variable names become doubly important if you consider that the originating inputs should also follow some naming guidelines. var text = document.getElementById('text').value; What is "text?" How do I know the programmers intent behind this input and variable? Can I look for the input and check the &lt;label&gt;&lt;/label&gt; text? Maybe, but is it a waste of time to have to figure out how specifics in every piece of code works because of badly named variables? If I can't determine its intent through somewhat arbitrary contexts, how can I sanitize this data? In a succinct algorithm, more generic variables are probably acceptable, but even they can provide useful information on the intent of a variable. function sort(list) {...} function pow(base, exp) {...} function quadratic(a,b,c) {...} Your last paragraph mentions deterministic qualities of variables and related design factors. This sounds partly like duck typing, if I'm not mistaken. This works fine in JavaScript, and is a pretty common paradigm. Correct me if I am misunderstanding. In a language like C#, where methods can have multiple overloads based on their argument types and positions, I believe that appropriate names are even more important. This example is a bit contrived. public bool verify(Server server, List&lt;Rules&gt; rules){} public bool verify(Client client, List&lt;Rules&gt; rules){} There are two methods that accept either a Server object or a Client object, and both accept a List of Rules. Client, Server, List, and Rules are all reasonable class names. Imagine now that the signatures use single-letters. public bool verify(S s, List&lt;R&gt; r){} public bool verify(C c, List&lt;R&gt; r){} I feel this makes the intent of the methods much less clear, not to mention requiring programmers to sift through classes to determine which signature they need to call. For me, useful variable names provide a context around what certain bits of code are doing, or at least the intent of the programmer. Paired with documentation, it's even better. In short, success equates to succinct code that is human-readable, paired with documentation and well thought-out architecture. It doesn't need to be one or the other.
I disagree. Dirty code tends to get left in because a) it works and b) you have new features to implement. Dirty code is good for prototyping and working out a problem, but shouldn't get into production. Unfortunately, commercial deadlines tend to prohibit clean code...
There are lots of difficulties in this kind of project. It's expensive to do right so there has to be buy-in to divert appropriate levels of resources. Making it completely framework agnostic is probably not a viable objective without extensive build tooling (i.e swapping in ng tags...). The hardest part IME is getting design teams to accept the limitations that this kind of project imposes. I think it's definitely worthwhile, but it needs commitment at several levels.
I'd be up for it, if you can handle the didn't-sleep-last-night kind of thing. PM me if you are up for it!
Pm me
Array.forEach isn't cross browser right? 
I can't decide if I wish I had learned more about prototypal inheritance sooner or not -- if anything, it mainly taught me a lot about JS differences from other languages. +1 to closures. That one took a while to pick up on too. However, for beginners, `debugger;` in chrome is amazing (and helps you more deeply understand `this`), and it would've been cool to see some common JS idioms explained earlier (ex `= obj || {}`, `something(function(x) {} );`)
Still awake?
it works in every browser except IE8 and lower https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
Yup. Is there a number I can call? Or Skype or Google hangouts?
I think you just click this: http://jsfiddle.net/SZKJh/304/#&amp;togetherjs=FBS8L4MDka 
Thanks for the correction. Much appreciated
Not sure if I agree with the premise that you need ***at least*** ES6 modules. Should be totally doable to make a wrapper that uses Traceur or whatever at runtime to convert a bunch of code to ES5. Hell, there are a shitload of AltJS testers and playgrounds out there that do this.
Yup, but at my friends place right now, how about tomorrow? what timezone are you in?
I think I recall mails between McCarthy and his students discussing the errors caused by dynamic scoping dated from even before ALGOL release. But according to wikipedia this wasn't full lexical scoping but only an approximation.
God dammit IE, get your shit together.
lol, i just saw this post. You'll be unhappy to notice that Windows 8.1 extends the support lifecycle to 2023. &gt;Windows 8.1 will remain under the same lifecycle policy as Windows 8 with support ending 1/10/2023. Windows 8 customers will have 24 months to move to Windows 8.1 after the General Availability of the Windows 8.1 update in order to remain supported. See the Windows 8.1 FAQ for more information.
You can use TypeScript and be [mostly] ES6 compatible now.
No mention of requirejs in the entire article?
As much as I love /u/SubStack's awesome work on browserify, I'm not sure how that would help here, since it's the transpiling down to ES5 that seems important WRT using ES6 features sooner rather than later. Is there a browserify transform to hook in traceur or something that would accomplish that? Apologies if I'm completely missing something obvious to others. :)
Is that true? I assume it's true for traceur, but TypeScript, at least as of 0.9.5, seems to lack any support for generators, promises, etc, so I don't see how it would help in terms of using those features since it doesn't seem like it would transpile such code down to ES5 AFAICT? The lack of something like C#'s async/await and iterator blocks in TypeScript when ES6 native has them with 'yield' is very frustrating (especially with Anders' involvement). Unfortunately, I don't see an obvious way of trying to combine it and traceur (or similar) to get those ES6 features and keep TypeScript's type checking. :(
You are absolutely right, it is not parallax. Without effect "demo page" it looked quite boring, anyway, most of people still liked it. I can make a button that will turn it off ;]
The point I tried to make in the article is that browsers should focus on modules before other features of ES6. One thing I don't like about commonjs modules is that they require packaging up your app into one js file. With the module loader built into the language and runtime you can lazy load modules at any time, similar to the way require js does it (but without the anonymous function wrapping). As long as you are making small applications you can bundle everything into one JS file, but as your application grows you will need to load modules later on. Hopefully lazy loading modules will get more popular as it gets easier with the built in module system.
I'll mention it here :) With the module system you can load both native modules and requirejs/commonjs modules, since the translate method can convert them into native modules. This way you can use existing AMD modules in your new ES6 application using client side translation.
Yup, it is a (fancy) polyfill. Another way you could do this is to use the resolve hook instead. This is the one that translates a module name into a url. It could do feature detection and decide on which pre-compiled module to load. So if it runs in a browser with generators, it will resolve to `/es6/myLibrary.js`, but if it runs in a browser without generators it will resolve to `/es5/myLibrary.js`, which has been compiled using the Regenerator compiler. This way you can have polyfills without compiling them on the client.
Last time I looked at TypeScript the module syntax was different from the ES6 module syntax. Has this been changed (or will it be changed in the future)? 
You could accomplish the same with a quick feature check and dynamic script load couldn't you? Even with modules implemented this approach seems acceptable, and it also works today.
It hasn't changed. It is on the post 1.0 roadmap however.
These strike me as "validating" properties rather than "strongly typed." But an excellent concept! It's very similar to what Aspect-Oriented programmers call "guard advice." Update: Or "guard clause:" http://c2.com/cgi/wiki?GuardClause
This should save littering my code with parseInt()
See [es6ify](https://github.com/thlorenz/es6ify).
Angular is now on 1.2.7. This article is based on 1.0.7 which is quite old by now. Angular is quite new and it changes quite frequently so if anyone is interested I would recommend finding a more modern tutorial if possible. **First flaw I noticed:** &lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js" type="text/javascript"&gt;&lt;/script&gt; **This should be:** &lt;script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.7/angular.min.js"&gt;&lt;/script&gt; [Source](https://developers.google.com/speed/libraries/devguide#angularjs) The rest of the tutorial seems good at a glance though.
Why is your code littered with parseInt?? And how will this solve that?
&gt; type="text/javascript" yes, "type="text/javascript"" is no longer valid HTML5 mark-up. Keep an eye for more, up to date AngularJS tutorials. 
If it works with Browersify, why wouldn't someone just use the built-in node,js events module?
There's a lot of stuff missing in Chrome and Firefox too. Don't expect to use ES6 on the public Internet for at least a few years, even assuming all users go to IE12. They're still selling Android 2.3 phones for God's sake and those don't even implement ES5 completely.
Also the http part. 2 slashes allows the browser to determine http or https.
Perfect! Thanks!
When I clicked it right before posting, yes it was down. I've seen Github go down before, and it's possible it was only down for a short amount of time, I only tried once or twice before closing the page.
My thoughts exactly
Check your link. You used localhost.
Going through [thinkster.io](http://thinkster.io) takes a few hours and that, imo, is the bare minimum to get going on anything serious in angular.
Exactly! I have been working on a ~10KLOC angular app for half a year now and can't still say that I'm 100% comfortable with directives. You can definitely grasp the basics in an hour or two, but the learning curve is much steeper after that.
Good question. The Browserified version of EventEmitter is much larger. I've also now included a standalone version installable via Bower for user in the browser without Browserify.
You should never write inline javascript. Also, unobtrusive javascript does not mean no inline javascript.
So, *zero* tolerance for inline? Also, how can Javascript be inline *and* unobstrusive?
I want this to get popular just because of that fact.
Firstly, thank you! And yes, indeed it looks like the "guard clause" described in the link, which I've resorted to before. But then again, I think some guard clauses are there because there's a lack of strong typing.
Good to know! I knew of the potential slow down (just not how bad it could be), that's why my library has the option to turn the whole checking off without altering the code.
Yes, it could, but the question is what do you want to avoid? Having "magic" is usually a source of errors in itself.
&gt;The Web Standards Project describes four benefits of unobtrusive DOM scripting in their JavaScript Manifesto. &gt; * Usability: An unobtrusive DOM script does not draw the attention of the user - visitors use it without thinking about it. &gt; * Graceful degradation: Unobtrusive DOM scripts never generate error messages, in any browser, even when they fail. If features cannot be presented properly, they silently disappear. &gt; * Accessibility: If any script fails, the page still delivers its core functions and information via the markup, stylesheets and/or server-side scripting. &gt; * Separation: For the benefit of other and future web developers, all JavaScript code is maintained separately, without impacting other files of script, markup or code. The way I think of it is that you shouldn't have to edit an html file to change a function.
right. inline javascript (imo) should be eradicated. unobtrusive !== inline. unobtrusive = !inline &amp;&amp; other good things
Did you post this question to StackOverflow? If so, use SO to answer your question. If you didn't post this question to SO, why would you post it here in /r/javascript?.
 function parseLinks() { var links = document.getElementsByTagName("link"), i, url, ret = []; for(i=0;i&lt;links.length;i++) { url = links[i].textContent || links[i].innerText; if (url) { ret.push('&lt;li&gt;&lt;a href="' + url + '"&gt;This is a link&lt;/a&gt;&lt;/li&gt;'); } } return "&lt;ul&gt;" + ret.join("\n") + "&lt;/ul&gt;"; }
Ah! So you could write dynamically "inline" JavaScript through innerHTML or similar elements like so: &gt;`document.getElementById('somediv').innerHTML+="&amp;lt;button onclick="+"'alert("+"'Hello, world!'"+")'&gt;Click me&amp;lt;/button&gt;";` Thanks for helping me work this out. I'll obviously never use code like this, it was more of a bluesky question.
Have you tried typescript? It will help you witty compile time checks and leave you with regular JavaScript
A ploy for more exposure.
&gt; acts just like a normal variable, but you have to opportunity to inspect the value. What was that supposed to say?
You could, but it's better to generate the element and then add an event listener. 
However it is superfluous. 
Obtrusiveness has nothing to do with inline or not inline. You should never write inline js. Ever. Unobtrusive code is code that isn't integral to the functioning of your site. Meaning if a person were to disable javascript, the site would remain fully functional. For example, don't rely on JS to show or hide navigational items (that's what CSS hover and CSS animations are for), or don't use AJAX only for form submission, forms should still submit with or without JS and JS just intercepts and enhances form responses. You should also use ARIA for any content added via AJAX to ensure accessibility. Again, this isn't about where you put your code, but how your Site functions both with and without javascript. 
Inline javascript requires global variables, which are just bad practice in general (and moreso in javascript due to how scope works). Unobtrusive javascript means a website degrades gracefully, progressively enhances the page, and improves usability. You can do these things with or without inline javascript--but you should avoid inline javascript for *many* other reasons, the least of which is it being frowned upon in this day and age.
I really liked this tutorial, but they don't have any screenshots of the code, which is something I enjoy.
This is the kind of stuff I wish I could write man...
I think it's correct as-is. "It's a normal variable, but when you try to set it, you can inspect the value to make sure it's of a legal type."
The owner of this account has requested this content be removed by /u/GoodbyeWorldBot Visit /r/GoodbyeWorld for more information. GoodbyeWorldBot_v1.2
This is like when someone emails me a link and it begins with "file://"
With attachEvent fallback for IE versions 8 and below. Is this still good practice or not so necessary? EDIT: WHO THE FUCK DOWNVOTED ME FOR ASKING A SIMPLE FUCKING QUESTION?
Nice catch! I will update this soon.
lolcalhost
I recently switched from Q to Bluebird. That [last link](http://spion.github.io/posts/why-i-am-switching-to-promises.html) you've posted was what did it for me. Performance-wise (that's speed AND memory usage efficiency) Bluebird + generators is just about as good using raw callbacks. Q doesn't even come close.
Did anyone else expect their keyboard to make loud clicky sounds when directing the turtle?
Usually when I see problems like this, they are only talking about the windows version that's no longer developed. Does the actively maintained mac version really carry the same performance deficits? D:
[This is what he meant to link](http://eviltrout.com/2014/01/04/hiding-offscreen-ember.html) , for the curious.
What percentage of users have ie8 and older?
Still too big to ignore :(
lolcathost
*never*? I dunno about *never*. I'm sure there must exist a case for it. I mean hell, even the google home page has inline js.
Ah, thanks, that's more clear. "to opportunity" isn't correct grammar, and was throwing me off.
My bad. "the opportunity" it should say.
Not sure what you mean? For the videos all the code is directly below the video. Edit: looking back I can see where my confusion may be coming from... I just noticed they added another tutorial, while that's great I meant to link to the "[A better way to learn Angular](http://www.thinkster.io/pick/51d287681e4b9c9098000013/a-better-way-to-learn-angularjs)" article. 
You wouldn't be tempted to prompt users into updating their browser? I'm a big fan of graceful degradation, but at what point does one say "enough".
Using localhost is a good way to hide offscreen content, I agree. ;-)
Maybe those will be added post 1.0.
Depends on what audience. To be honest, if they buy stuff, it's all good.
Suppose as long as the extra time and money in coding for obsolete browsers reflects sales.
I think the ability to call a function like darker() or lighter() to mathematically darken/lighten any color. maybe the ability to animate color changes. Maybe the ability to call invert() or complement() or analogous(). 
Hey! I've been trying out various color libraries lately. I tend to use HSL as much as possible, and many color libraries only seem to support RGB and hex. So here are my suggestions: * HSL support. * Alpha support (HSLA, RGBA). * Conversion (ex. HSL &amp;harr; RGB &amp;harr; hex) * Some basic manipulation methods (ex. lighten, darken, saturate, spin, etc.) * Color blending methods The color manipulation in [LESS](http://lesscss.org/#reference) does a lot of this stuff. I see that your library supports some of these things, so I'll give it a shot! 
After reading the code, all my suggestions were there! Cool! 
If you're familiar with jQuery, it's fairly simple function parseLinks(xmlData){ var xml = $.parseXML(xmlData); var links = xml.find('link').text(); return "&lt;ul&gt;\n&lt;li&gt;"+ links.join("&lt;/li&gt;\n&lt;li&gt;") +"&lt;/li&gt;&lt;/ul&gt;"; } EDIT: forgot a closing &lt;/li&gt; tag EDIT: forgot to actually use the `xml` variable. FYI - don't code on your phone.
I'm not sure how useful it is, but a `color1.blend(color2)` function would be neat, since you support alpha. Basically it would blend `color1` on top of `color2`, returning the result. You could also extend this to the various color blending functions, like add, subtract, multiply, etc. Basically all of the Photoshop blending options. :-) If you do this, though, make it modular! Your library is fairly lightweight right now. You could even make extending the prototype a public API, something like `Spectra.extend({foo: ...})`. --- I was also thinking of a neat idea the other day: negating an image while preserving the hues. Basically, invert the luminosity while keeping everything else. This would allow for a sort of night-mode color scheme without the colors becoming freaky.
When you can throw a few million engineering dollars at a problem on a whim, then you can evaluate whether or not inline javascript is reasonable for a given problem.
I'd like to see colour harmonies: http://www.tigercolor.com/color-lab/color-theory/color-harmonies.htm I'd be happy to contribute too 
I do a little of this as it is, by using the `mix()` function. I'll look into adding more, though!
I missed that! Is looks like it's not in the docs.
I'm always looking for people who want to help out. Feel free to fork and submit a pull request; I'll accept it if it works and has tests written!
Oops; I fixed that.
LAB color support. Any Lighten / Darken functions done in the RGB color space will be horrible, due to the RGB color space being a cube. Even HSL is just a re-mapping of the RGB color space, so it has the same problems. You could have RGB &gt; Lab and Lab &gt; RGB functions, but Lab isn't very useful in JavaScript / Web applications. But it would be useful to have a flag on your conversion functions to use Lab color space. It would involve converting a RGB color to Lab, doing the lightening / darkening, then converting it back to RGB. The maths aren't that hard, I pasted a quick JSFiddle here: [http://jsfiddle.net/tUJh3/](http://jsfiddle.net/tUJh3/) Source: I am a color nerd: [http://mattlag.com/hslab/](http://mattlag.com/hslab/)
Interesting. I'll look into implementing this, thanks for the functions!
[Obligatory Bob Harper Rant](http://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/). The above is a bit of a joke, but so is adding a few "if/throw" clauses to a a setter and calling it "strongly typed." A real type system helps you statically check properties of your code before it is ever run. Javascript is pretty far from that.
I made a [sample MEAN stack application](https://github.com/tforbus/mean-todo) using Angular. It might help tie some things together for someone who has a little experience with Angular already.
For a given color, output x number of analogous, monochromatic, triadic, complementary, compound, or shades (see for example kuler.adobe.com). $hex_color = "00FF48"; $number_of_colors = 8; get_compounds($hex_color, $number_of_colors);
[This](https://gist.github.com/StevenBlack/960189) &lt;- [More info here](http://24ways.org/2010/calculating-color-contrast) It calculates whether it's best to have white or black text on top of a colour.
Depends on the player and if it raises any events you can catch. Or, if you can can place an event trigger on a button or something. 
Well the player turns on when I stream from my computer so I can't have it trigger from like a player button
I wrote a JS library for color conversions some time ago, called [Pheasant](https://github.com/bfontaine/Pheasant.js). It supports all CSS color types (e.g. names, hex (3 and 6), hsl, hsla, rgb, rgba).
I don't have a clue why they removed that. You're stuck now with a set animation effect which sometimes does and sometimes does not take place. A smooth zoom in is impossible now, it's a series of little zooms.
Yeah a lot of stuff got removed, i'm still hoping for a new API tailored for the webgl version... In the meantime, for picky clients, i advocate for osm/leaflet
I'm actually working on implementing that right now. In fact, it's in the repository now.
 is this how it's supposed to look? function parseLinks(xmlData){ var xml = $.parseXML(xmlData); var links = $.find('link').text(); return "&lt;ul&gt;\n&lt;li&gt;"+ links.join("&lt;/li&gt;\n&lt;li&gt;") +"&lt;/li&gt;&lt;/ul&gt;";}
First, let me know if it worked, then we can talk about why it worked ;) Here's the documentation to get you started http://api.jquery.com/find/
Ok so I put it in [JSfiddle](http://jsfiddle.net/) and I'm not sure if im inputting it correctly.
I've submitted a pull request for supporting the 17 predefined colors. Thanks for this, I learned a bit about unit testing, why grunt is useful, some more git(hub) stuff. Also, I'd like to see random colors based on a base color and a range. Say, you're making a game with rain. To give the rain a cool feeling to it, you decide that you want each raindrop to have a slightly different blue color. ex var rainBlue = Spectra('blue'); randomColorRange(rainBlue, -10, 10); // It could be up to 10% darker or lighter.
There's new `isDark()` and `isLight()` functions that'll be in the next release. I just pushed them. You should be able to use them to decide whether to use white or black text. I might be able to do some more complex analysis but it could be a while before I get to it. You should consider forking and contributing! Thanks for the input.
I opened an issue about this - would you like to implement it?
Great library! Another use case is finding colors with right contrast or checking if the contrast is right. Something like getContrast(color1, color2) might be nice.
I will look into it later, since we can use the `lighter()` and `darker()` functions, it shouldn't be too hard.
You can read the tl;dr if you're not interested about my concerns. I would really like to know about your experience with Angular, that's the point of my rather long article. Also, hope you won't think I am bashing Angular, I would love to love it, but atm I cannot and you can help me :)
Ah - good idea.
couldn not find any modules.
+1 - this is far closer to 'statically' typing your code as it will get checked during build/dev time and will not impact performance negatively. The type checking only occurs at dev time, and does not occur in browser. Another alternative is the Google Closure compiler -&gt; https://developers.google.com/closure/compiler/. It can also do this sort of static type checking for you, and it doesn't alter language at all but uses JSDoc style documentation tags to infer types. EDIT: spelling
Just added a tiny pull request to add a toString() method to spectra objects, so they can be directly assigned to CSS properties: red = Spectra("#FF0000"); document.body.style.backgroundColor = red;
Don't forget your test cases. Thanks for helping out!
Oops yes sorry about that. I'll add a few tomorrow
Oh, don't get me wrong, I think Lab should be used everywhere. I just meant, since its a web context, at the end of the day your color has to be specified in RGB... for, you know, screen stuff. Lab isn't tied to a specific context like RGB or CMYK are, but its still the best color space to do conversions in.
The owner of this account has requested this content be removed by /u/GoodbyeWorldBot Visit /r/GoodbyeWorld for more information. GoodbyeWorldBot_v1.2
AngularJS does allow people to write crappy code. I am 100% in agreement here. BUT it doesn't have to. Good developers can easily spot issue with certain pattern while writing AngularJS code. $rootScope doesn't have to be used, for example. But a junior developers can easily make this mistake, just like if they do global var anyways. So good developers can discipline themselves. What's nice about AngularJS is ease of wiring and view management. I guess you would debate that with Backbone/Marionette/Handlebars, they can do the same. I agree there as well but wouldn't you think it's kinda "bloated" for a lot of simple stuffs (i.e. automatic two-way binding). AngularJS has its own $digest cycle which I think somewhat an intelligent way for efficient binding without firing millions of events unnecessary. My take is that if you guys are so deep into Backbone, stick with it. You won't see much benefit with AngularJS unless you start from scratch with a new project and high speed of agility required.
For a large project, you better have something of your own; customized, combined and tweaked to your own needs. It takes some time; but is always the right thing to do. Frameworks are good for small projects and especially, for prototyping.
Not smart to do this using Javascript, since it is client side: - How would you know which number are being selected ? The client need to send that back to the server (you) to be stored. - How would you know if these numbers are ligimate and not done by hacking? The answer is: to this server-side (using php for example) 
Linear RGB.
Dude it's a homework assignment.
Sounds like the worst possible advice so far.
Also, angular isn't exactly amazing at doing it, you still have to look out for order of source files and module declarations, which can become a source of errors in larger projects.
what is the point of this specific idiom ? EDIT: oh wait you meant two examples, and missing something after "ex"? not a specific expression corresponding to ex = obj || {} , something(function(x) {}); which is valid javascript. 
asm.js is just a subset of javascript, even IE6 can execute asm.js code just fine, just without the optimisation-benefit that firefox will / should receive. The current implementation where I want to use it for is the A* path finding algorithm, probably want to use it for moving units as well but that isn't as necessary.
If you're teaching jquery then: $.Deferred() and QUnit. I think async programming in javascript is a very important topic for beginners. Callbacks and async code can become very confusing and quickly lead to messy code. Teaching them about promises would also explain topics like callbacks and scope. jquery has an implementation of promises so that could be a good start. The other thing is unit tests, writing tests before code would be a very good habit to pick up right from the very beginning, especially in a dynamic language like javascript. QUnit can be a good start for that. I wish I started using promises (or a library such as async) and writing tests before code from the beginning.
I've been waiting for something like gulp. Grunt's json configuration files can become hard to understand very quickly.
/* DOCUMENTATION TO BE UPDATED LATER */
I thought that might be the case. Wasn't sure if what you already had would get you half way there or if they were completely separate problems. 
Fair enough. The main reason I'm asking for asm.js is because I have zero experience with it yet keep hearing impressive (though selective) stories about it. So I figured it's time to gather some intell and may play around with it myself. I'm a bit warry about web-workers... it would require giving a lot of info to the worker. Not difficult but possibly more expensive than the gains :/
"fixing" a broken test /* function mytest(){ } */
The subtle way to "fix" tests and drive developers insane. I have come across this in production code I have to maintain. /// Detailed documentation of test case function descriptiveTestNane() { return true; // Test broken, fixed it. [Comment added by me] /* The actual test, catches introduced bug */ } 
When I refactoring, I ususally comment out the function I'm going to refactor and simply rewrite it, using the original function as guideline. Then, of course, I make sure it all works great. Followed by general 'cleaning up' the code. The last step, then, is to remove the old code that's still commented out. I still have to do that last step for *quite* some scripts...
Very nice! However, I would like to be able to use the 'var' keyword... my first try was var x = new Turtle(); which didn't do anything, it didn't even throw an exception. :(
I am too lazy to take var declarations out of loop for (var i = 0; i &lt; this.items.length; i++) { var item = this.items[i]; } nvm I guess - http://jsperf.com/declaring-variable-inside-vs-outside-loop 
Well... that didn't explain much :/
Personally, I tolerate 'init code' or 'bootstrap code' for inline JS. For me, this basicly calls a module loader I wrote with the required dependencies. The reason for this is that, using this method, I only include my module loader script, and directly call it inline, so different modules are loaded depending on what page you are. This usually results in a single 10-ish line function at the bottom of the page.
Nicely done. You could have also used `reduceRight` instead of `reduce`, to eliminate the need for `reverse`.
Concatenating dozens of files that all start like this (rather than using a proper framework): $(function(){ var ele = $('#elementIwant'); if (!ele.length) { return; } // continue on to do the stuff I want on the page that has this thing
Regarding Web Workers, you might want to look at Transferables. If what you're doing is parallelizable, then Web Workers can help and Transferables can lower the overhead of moving data: https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers 
Don't forget the ever related //Figure out why this works....
Thanks! The thing is, I iterate over all objects in the `window` scope, and if it's a Turtle, I have it drawn, but I think declaring a turtle with `var` doesn't declare it as an object of that scope. If you know how to fix that, please tell me! About exception throwing... if I don't know the Turtle exists, I can't throw an exception that I don't know that a Turtle exists.
asm.js is good, but only has performance boosts in a couple of browsers right now. Firefox console will let you know if everything compiled correctly. The main difficulty you'll have is producing legible and logical code. If you're comfortable with C, it could work out OK. As a JS developer it just felt out of place. Another thing: even when it's working alongside regular JS, you have to call asm.js functions with typed parameters. So weird typed variables end up oozing back into your regular JS.
Are you the only one developing in that code base? I have a colleague that uses something similar as version controll. That is he commits once in a blue moon and keeps his local revison as comments. I avidly remove all code that is commented out. Needless to say there is no traceability in our common projects.
I do this to on occasion. When scripts grow large I get confused by 30+ rows of var declarations that I declare them at point of use. 
Using the 'var' keyword creates the variable in the current scope, which *could* (but probably isn't) the window. You could run the contents of the textarea in it's own function scope, that way you don't even have to iterate over anything, because the variable is already pointing to a turtle.
I'm not certain I understand this. What is the end goal? 
Love it when I find comments like this. Most often in old C code.
Since I mainly target Firefox I don't think it's much a problem, I'm a bit more worried about readability and maintainability but won't know how that'll work out unitill I try it, right? I've worked with C++ once... that's as 'comfortable with C' as I can get so far :P However, I since it's mainly going to be number-crunching I doubt it would matter *too* much... I guess I'll have to see :)
Thanks, I'll take a look at that :)
&gt; asm.js sort of works great side-by-side with regular JS. I disagree. It is really difficult to write asm.js by hand because it was not designed for that. It's also difficult to write a component in C, use emscripten to compile to asm.js, and make that work with the rest of your vanilla JS code. [I would love to rewrite this in asm.js](https://github.com/blaise-io/xssnake/blob/master/shared/shape_pixels.js), but I don't see how that would work, even though this class is really straight-forward and doesn't have any dependencies. And LLJS is more of a pleasure to write manually, but: &gt; No way interface with normal javascript code 
Why not use [Array.forEach](http://mdn.io/array.foreach)? Be warned, it's [not available in IE7/8, but it is everywhere else](http://kangax.github.io/es5-compat-table/#Array.prototype.forEach).
I hope you're using automated testing to make sure it all works great after refactoring. The true value of testing really shines through when refactoring, and when you have tests, you can refactor without fear. See [lazd/wellTested](http://github.com/lazd/wellTested) to see some great automated testing frameworks in action.
I do - sometimes - if a loop is not called on each frame. However I rather avoid spawning anonymous functions.
Very nice. Already on my bookmarks so i can keep track of new plugins
Like I said, it requires discipline on the part of the developer. The problem with trying to get it right the first time is that chances are you didn't think it through well enough and you spend a lot of time getting the perfect solution for the wrong problem.
You could make the Turtle method register the new object in a Turtle.all array and iterate over that instead. 
You could probably polyfill it for IE though.
You should probably use `isNaN()` instead.
I was already using the developer tools, but mostly for HTML/CSS. I didn't know about JS. Thanks a lot, I think you just saved me a lot of future time :)
only problem is console.log breaks on (some versions?) it IE.. I always have a log function that checks for this
The company I work for supports IE8. I personally do not. I don't test it and won't bother unless someone from QA catches it. Usually that doesn't happen. I think someone pokes around with IE8 once every few weeks.
I also use the unary `+` for dates to get a Unix timestamp, an old habit that predates `Date.now()`. I'm also not afraid to throw in some `!!`'s to coerce a bool, even though they're dead simple for me to understand they seem to throw everyone else for a loop.
Not a problem, it's illegible. Even I have to think about it when I come across it, and I usually write it myself. 
Presumably resulting in one JS file for all pages that iterates through code for every page element, only applying ones that exist on the current page.
Programmer will surely deliver!
I want to give you the benefit of the doubt, and say that certain extremely large projects should roll their own. But then you say "[it] is always the right thing to do" and I can't take you seriously. 
I like the promises push, but the code leaves a lot to be desired for an educational piece. * formatting is inconsistent, e.g. braces don't line up (like in the 5th and 6th samples) * formatting is overall silly (10 spaces for indentation, really?) * What's up with this block? The 2nd and 3rd lines are indented as if they're in a block, but they're really not, so it appears as though `this.element = ...` will create a global variable... var Progress = function(){}; var elem = this.element = document.createElement("DIV"); elem.className = "waitingAnimation"; * This sets off alarm bells: `var cache = Cache()` * I know it's example code, but `promiseTheWillBeFinishedAfterPopulatingAllShops` is a little extreme. It's also apparently got a grammatical error -- should probably be `promiseThatWillBeFinishedAfterPopulatingAllShops`.
In a fit of madness I would write for-loops in an utterly convoluted fashion. I am ashamed: var i = 2*10; for (;i;i &gt;&gt;= 1) { console.log(i); // Logs: 20,10,5,2,1 }
/r/AngularJS
Hah, in a similar vein I'll throw in some bit-checking for zebra-striping (there's a ton of ways to do this)... var zebraStripe = i &amp; 1 ? 'odd' : 'even';
Why not? asm.js can handle array collections, I do not know about type checking but it seems to just check wether something exists in an array, I expect this to be possible in asm.js
Global variables, global variables everywhere.
See the [General Promise Resources page on the Q wiki](https://github.com/kriskowal/q/wiki/General-Promise-Resources) for presentations, blog posts, and more on the general subject of promises. A great beginner-friendly resources is Domenic's and Michael Jackson's presentation ["Redemption from Callback Hell"](https://speakerdeck.com/mjijackson/redemption-from-callback-hell, which also comes with a [video](http://www.youtube.com/watch?v=hf1T_AONQJU). Also check out Domenic's great article, [You're Missing the Point of Promises](http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/) for a great rundown on promises and error handling. If you're like me and want to explore promises from an implementation perspective, check out [Pinky](http://lazd.github.io/Pinky/), a well-commented and well-documented academic example of a Promises/A+ implementation.
As always, [the MDN article comes with a nice polyfill](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Polyfill), should you need it. You can always rely on [es5-shim](https://github.com/es-shims/es5-shim) to give you the whole shebang, as well. 
That's like a JS antihero.
I don't use semicolons. Sorry. I've heard whatever argument you have that I should be using them (many times over), and I think you're wrong. But at this point I've learned that I'm never going to convince anyone that I'm not an idiot, so I just keep quiet about it. :)
Be careful, you can never know how your scripts are interpreted!
Love this. Is it possible for the globe to be static and rotate on a ping?
`$('div').empty().append("&lt;p&gt;Lorem Ipsum and Something else in the placeholder&lt;/p&gt;")` Sue me!
I'm a comma-first guy because of IE. Does that count? var commaLast = { there are, three errors, here, } var commaFirst = { we , all , know , the , pain }; 
As long as your test covers every scenario...in many cases people are quite lazy and only test "green" code.
The only array type allowed are the ArrayBufferViews of the heap. Yea, the typeof statements are what I'm talking about. The only allowed input to an asm.js function are numeric, the same goes for their return values. See [the asm.js spec](http://asmjs.org/spec/latest/) for more info. I think there might be some gain by using native array functions though: each: function(callback) { var self = this; function doRows (rows, y) { rows.forEach(function(val){callback(val, y))}, self); } this.pixels.forEach(doRows); },
There's a special place in hell for you and half my team.
You would fit in great with the offshore part of my team
I called those courtesy commas before I checked IE. Now I too comma first.
What are you talking about?
Imagine if someone removes line breaks, or an interpreter that does so automatically to save memory.
Oh I meant on my own code, naturally. Of course I follow the style conventions of whatever team I work on, even if I disagree with them.
It's arguably "clever", which many would consider bad practice as a virtue of being clever. It's not _bad_ as in it has unintended side-effects, but in that it's an an idiom that is rare outside of JS and it confuses newbies. It can also be tricky to search for. As I said, it makes perfect sense to me, but it's [clearly](http://stackoverflow.com/questions/784929/what-is-the-not-not-operator-in-javascript) the [source](http://stackoverflow.com/questions/4686583/can-someone-explain-this-double-negative-trick) of a lot of [confusion](http://stackoverflow.com/questions/2174297/how-to-use-the-double-not-operator-in-javascript) to those new to the language.
Is this really fair? In JavaScript of all languages? Edit: Can't spell obviously...
Yeah why not: $('div').html("&lt;p&gt;Lorem Ipsum and Something else in the placeholder&lt;/p&gt;") Or is that your point? 
What if I tell you that my offshore team had a erroneous code on production for 2 years? I am in India. The dev who coded the method is still in the company even after company fired number of guys who are quite famous in tech industry. 
So, a broken interpreter, written by someone who doesn't understand Javascript. How about an interpreter that truncates all variable names to 4 characters automatically, to save memory? Such a thing could be written in theory. Are you going to start limiting your variable names to 4 characters now?
Ugh. Cannot stand that.
awesome. 
Then don't. var iterator = function(each) { /* do something with each */}; anArray.forEach(iterator); 
If the app is sufficiently small jquery will "work". And frankly, 15 days, it would have to be a miniscule app.
It supports them, but they're not really useful, but I guess the same could be said for JS. Come to think of it, I don't really use them anymore at all.. there's rarely a need to, unless you're working with 3rd party code that expects them. I rarely (if ever) do strict bool checks in my own code, so it's completely unnecessary to pass proper bools.
&gt; because of IE Just use a linter. If you use a plugin, you'll get that squiggly line right away.
Yeah, but why? You still have to correct the errors. With a comma-first style you don't make the mistake in the first place -- with the rare exception that you might be changing the *first* property of an object. It doesn't take long to get used to the visual aspect of the style.
I would watch out for clients making unreasonable scheduling demands.
Such a thing has been written, and is in massive widespread use. minify and/or uglify. It will rename variables to single characters where possible, and will strip all whitespace.
You are setting yourself up for failure. 
This is just a little project of mine, which is far from done! If you have any ideas what I should add, remove or fix, please say so! **Current ToDo:** * random function * rework coordinate-system * zoom * save home coordinates
It is at the "PoC works, convince the bean-counters that we can have a presentable product" stage. I have been promised a post-release overhaul (!). The PoC had the 3K lines of HTML + jQuery code. It is, otherwise, a small app - with ~8 models 3 levels deep, and corresponding screens. I will also take a look at CanJS and DurandalJS in next few days.
You should absolutely read "Single Page Web Applications: JavaScript end-to-end". It'll give you a solid understanding on how to roll your own, along with a lot of the pitfalls and pros as you learn. It's completely framework-less (beyond jQuery) and is frankly one of the best code books I've ever read, period.
https://github.com/aakpat6/spectra/issues/9 Is this what you were looking for?
Could you give some more information (maybe a link) about what you'd want to see in this feature, and information on how it works?
&gt; will strip all whitespace. There is no minifier in widespread use that mindlessly strips out whitespace, but I know you obviously didn't mean that (because "var a" would be come "vara"). So I'm not sure how that's important. I minify my code all the time. [This one](http://marijnhaverbeke.nl/uglifyjs), for example, handles missing semicolons just fine. Have you ever heard of one that doesn't? And anyway, I'm the only one minifying my own code. So this can't be a case of me "not knowing my script will be interpreted".
A good rule of thumb, though obviously not set in stone: If you can't understand someone else's solution, you may not understand the problem well enough to architect your own. People don't usually make their solutions complex "for fun".
&gt; However, once you start number crunching for logic, javascripts flexible and dynamic nature starts getting in the way of performance. Many such claims are outdated, so I recommend not assuming that they're correct unless you've verified it yourself. You might be surprised at how fast modern Javascript interpreters are. I write Javascript games and number crunching has never been a bottleneck for me. I suspect that if you're just "messing around" with Javascript games, you'll get all the performance you need without using asm.js. Having said that, if you want to look into it just for fun, go for it.
To be fair, it seems like OP's organization set OP up for failure.
I guess "contrast" is one way of looking at it. I was trying to think of "similarity" (linear distance between two colors in a given N-dimensional color space). Two colors may not have much contrast, but still be more dissimilar than other two colors (green and red vs green and blue). There may be accepted ways of calculating color similarity, I am just not aware of any accepted methods besides my guess of just finding a distance btween two points in a given color space. Maybe a specific solor space like LAB is known to be best for this purpose?
 window.isNaN = function () { return true } Where's your god now?
This is not a client but my own company - we are a small company providing ITES products. I blew up the first time I saw the project status too. I had a heated discussion about needing more time. I think I will attack the deadline again and bargain for "SPA" to be put into the post-release work and get a polished "classic" web app out of the door first. /u/biscuits thanks for the heads-up. Bought it. Also: http://addyosmani.github.io/backbone-fundamentals/ to go again at Backbone.
It's really hard to recommend anything without knowing more about the project, but EmberJS uses Handlebars, JQuery internally, and has a top notch router. It's pretty comprehensive, so it would be the only thing you have to learn, but it's pretty comprehensive, so there's a lot of surface area, and would be difficult to learn well in 15 days, much less learn well and build your whole app. That said, you're probably in some trouble no matter which way you go, if the app isn't trivial, so you should probably think about what's best for it longer term. If you do decide to go with Ember, you can get a bunch of instant help on their IRC channel (chat.freenode.net #emberjs). If you mention my handle there (Dafe), or just send me a PM, it'll ping me and I'd be happy to help you get oriented, or just go over your requirements and talk about feasibility, and possible alternatives, since Ember can be overkill for a lot of things. I'm trying to spend less time on reddit, so YMMV if you reply to this instead.
Ok, if it's 30% done and you have to have the whole thing done (read: do 70% more work) in 15 days, you should stick with what you have, because time spent swapping in a framework (whether it's SPA or not) should be better used completing the app. That said, check out durandal for a nice integrated SPA. If you are doing a .Net background, also check out Hot Towel, it wraps some more stuff. I would advocate **NOT** going to SPA now.
&gt; even IE6 can execute asm.js code just fine Without typed arrays? You need IE10+ for that.
Thanks for the lead, the asm.js benchmarks are far superior to box2dweb!
Angularrrrrr. You can't go too far from the beaten path using it. (I've done jQuery, templating, Handlebars, jQuery History). I just started using Angular for a few projects and so far I just cannot stop raving about it. jQuery+jQuery History is just wrong from the start.. it gets more and more complex as you go along. Using Angular, you can just create a layout (index.html) and then a controller and view for each of your pages... you'll fall in love instantly :D http://yeoman.io/ - "yo angular" and you won't go wrong IMO
Remember you're writing code that runs on other people's machines. You're not running code so that you and only you can run it. You have no control over how the user runs it. It is in your best interest to make sure it runs properly in most circumstances. I'm not sure about this but running it in strict mode might break it. 
My God is not so easy to defeat! document.body.appendChild(document.createElement('iframe')); window.isNaN = window.frames[window.frames.length - 1].window.window.isNaN;
&gt;It's pretty much for this reason that Mozilla started working on asm.js and Google started development of Dart. Dart and asm.js are completely different things. Dart enables larger teams to write larger web applications. Asm.js allows you to get existing C libraries and applications (ideally games) onto the web. The Google technology which competes with asm.js is pNaCl. It's sandboxed LLVM IR bytecode in the browser. Native Dart does have an advantage when it comes to number crunching though. The VM supports SIMD. In the future, JavaScript will support SIMD, too.
My code does run properly. I've never seen a single place where it doesn't. &gt; I'm not sure about this but running it in strict mode might break it. No it doesn't. I use strict mode sometimes (though I want to start doing it more).
IMO the majority of Bootstrap's JS is programming sin I like Bootstrap a lot, I use it all the time, however look at the source code. It's not what they write (what they write is quite elegant and nice), it's the way that it's written that just kills me
All I can really say is good luck...15 days for a deliverable SPA that is currently @ 30% completion? I think you have been setup for failure...as for real advice, I would generally strongly encourage you away from roll-your-own. However you have 15 days...you should now be in a do-it-as-fast-as-possible-and-screw-everything-else line of thinking...which means it doesn't matter what anyone says...use what will get you to the finish line first (what you already know / what you already have experience with).
http://i.imgur.com/KiBQh.gif
Angular seems to be king for SPAs, especially if you need to crank something out in 15 days.
 git commit -message ""
Don't rewrite unless you can get a large extension on the deadline. It sounds like you're proposing that you rewrite the 30% that's already done, so you'd really be starting at almost 0, with two weeks to finish it. Chances are you'll miss the deadline no matter what you do, but if you try to start over and learn/build a new framework at the same time, you'll probably _really_ miss the deadline, on an embarrassing scale. In your other comments you say it's a PoC, but also imply that this might actually be launched. This seems like a contradiction. Hopefully it is a PoC and not meant to be production-ready. When you only have two weeks left for a PoC, you should be in get-it-done-by-any-means-necessary mode. Refactor when you _need_ to untangle some spagetti order to get something done, but you should assume the code will be thrown away, so don't undertake any large refactoring unless you absolutely need to. If you already know AMD/Require.js, Handlebars, etc _well_, then by all means use them, but only if it saves you time. If you kill three days setting up Require.js and converting all the existing code, then you're screwing yourself. Negotiate more time if you can. Negotiate away unessential features. But don't start over. Save that for a rewrite _after_ you've convinced the stakeholders that the PoC is viable. Be sure you vocalize _repeatedly_ that the code is not production ready and will need to be refactored before ever going to production. Hopefully you can minimize the chance that they think it's "done" and can be launched. Remember that a PoC is meant to be a learning exercise. When it's done, you can say, "We didn't know when we started that this would be a SPA, but now we know it is, and we should investigate choosing a suitable SPA framework when we build the _real_ product." State it as if it's a given that the app will be rewritten. Don't ask for permission. Tell them the way it is. Either way, you're fucked, but you can try to get fucked gently.
Bootstrap is a mess though, this poor quality is expected from them. Have you seen the state of the CSS?!
Does phaser.io use pixi.js as it's renderer? I haven't looked at their source, but the speeds that they're getting it almost has to be.
&lt;a href='javascript:;' onclick="javascript:document.getElementById('filterType').value='owner';document.getElementById('filterForm').submit();"&gt; 
Ha ha. I was one of the people that shamed you. :)
Requirements to contribute: &gt; Knowledge in **CoffeeScript**, or a desire to learn. Most of our code is in this language. If you're a fan of Ruby or Python, you'll feel right at home. **It's just JavaScript, but with a nicer syntax.** "Nicer" is a relative thing I guess.
Yeah... what can we say? We really enjoy coding in CS. I can imagine why that wouldn't go over as well in this subreddit though...
Use the tools you know, pause, and plan in detail before writing any more code. You don't have time to make mistakes. "Slow is smooth. Smooth is fast."
I used jQuery with AngularJS.
Yes. It uses Pixi.js internally for fast 2D Canvas and WebGL rendering.
http://ryanflorence.com/2011/case-against-coffeescript/ ... A fair and balanced article about why you probably shouldn't use CoffeeScript. ... Which I'm sure CS fans will claim isn't fair or balanced... (BONUS Features: Article comes complete with moronic comparisons between JavaScript and ASM by people who clearly never used ASM!!)
If the player is something like an `&lt;audio&gt;` tag, you will be able to bind event handlers. If it's not, and it's some custom technology, then there should still be a way to bind event handlers.
Really useful. It's also extremely useful to know your debugging tool and it's capabilities well. For a web developer, this means Chrome, IE and Firefox at a minimum. Find one tool you prefer and master it. Debugging can get a lot easier when you learn how to combine network profiling, conditional breakpoints, memory analysis, etc.
I inline my scripts for performance gains. In `debug` mode, I load scripts like this: &lt;script src="walrus/walrus-script.js"&gt;&lt;/script&gt; In `production` mode, I load scripts like this: &lt;script&gt;&lt;?php echo file_get_contents('walrus/walrus.min.js'); ?&gt;&lt;/script&gt; That is, for production, I inline scripts to eliminate external HTTP Requests. In debug mode, I load the scripts in externally, because the javascript console cannot provide accurate traces for inline scripts -- in order to see a debug trace, the script must be an externally loaded resource.
I have no specific opinion on the article except this nugget of gold: &gt; To put a debugger statement in JavaScript code, simply do: debugger; Never realised this works. But it does. Awesome!
SPA: single page application (in case you were confused like me).
how we manage our db (obviously cleaned out): var construct = function(varA) { construct.dbConn = function(obj) { // saves obj to the db } var foo = function(input) { foo.validate = function(varB) { // not actually this stupid, just for example if (varA &lt; varB) { throw new Error(); } } foo.normalize = function(varB) { // again, for example if (varB &lt; 0) { varB = 0; } } var bar = function(varB) { foo.validate(varB); foo.normalize(varB); this.data = varB; }; bar.prototype.save = function() { // saves teh data somehow construct.dbConn(this); }; return new bar(input); } return foo; } // usage var schema = construct({..some schema definition..}); var instance = schema({..object that should follow schema definition..}); instance.save(); // saves clean and normalized data
Yeah, most of the 'speed issues' with JavaScript are mostly compared to compiled code. I only run into issues when work with high-polygon 3d models, so far I have not gotten the fluid results needed for it to be usefull. Of course, I am not using WebGL nor any other forms of optimalisation so it's not really a suprise. Using WebGl would probably solve most of the performance issues without requiring asm.js, but having a bit of extra knowledge about it wouldn't hurt :)
Don't they fall back to normal arrays? If not, that's an easy fix.
...and just when I started to grasp Grunt.
I've always loved my self executing recursive anonymous function that makes use of setTimeout. var images = document.getElementById("slideshow").getElementsByTagName("img"); var i = 0; (function(i){ var originalFunction = arguments.callee; setTimeout(function() { images[i].style.opacity = 0; var nextImageIndex = i + 1 &lt; images.length ? i + 1 : 0; images[nextImageIndex].style.opacity = 1; originalFunction(nextImageIndex); }, 6000); })(i);
It hasn't dethroned Grunt yet. I'm still going to use Grunt since I have my configuration files to my liking already. This is probably better for people who hasn't used Grunt at all.
You must be new to this. https://npmjs.org/package/uglify-js Over a million downloads this month alone.
i really like this. i feel much more comfortable using 'imperative' scripts versus 'declarative' config files for most things. 
I would read up on using the actual debugger and how to use breakpoints. https://developers.google.com/chrome-developer-tools/docs/javascript-debugging It will save you so much time.
Gulp is nice, but if I read it correctly OP did just now discover browserify? That does not reflect very positive about OP's community awareness.
Don't you get an extra null at the end of the array?
Why no Firefox
[Element.insertAdjacentHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element.insertAdjacentHTML) works since IE 4.0, Chrome 1.0, Opera 7,0, Safari 4.0, Firefox 8.0.
I used to do this as well until I started using PHP -- there it's a syntax error to not have a semicolon. Now I'm in the habit of always using them. 
It's open source. In what way is it a black box?
I've used Grunt in nearly all of my projects, and contributed to popular plugins such as [grunt-contrib-handlebars](https://github.com/gruntjs/grunt-contrib-handlebars) and [grunt-benchmark](https://github.com/shama/grunt-benchmark). Having been an avid Grunt user and contributor, when I saw gulp, I was eager to see what it had to offer. After setting up a sample project and [writing a few plugins](https://npmjs.org/~lazd) as well as contributing to the project itself, I found gulp faster to setup and run, as well as easier to author plugins for. **gulp is**, arguably, more flexible and faster by design due to minimalistic plugin design and in-built task concurrency. With these changes in ideology, some additional complexity is added to deal with asynchronous and dependent tasks, and implementors need to understand this to use the tool correctly. The project is *very* young, however, and I had to spend quite some time in IRC asking questions as well as authoring [the wiki](https://github.com/gulpjs/gulp/wiki) and [the readme](https://github.com/gulpjs/gulp#gulp---) to gain and document a clear understanding of how it all works. **Grunt is**, however, easier to understand -- no knowledge of streams, promises, concurrency, or asynchronous tasks is required. Grunt also has a *huge* community with plugins for nearly everything. As such, it's not accurate to make statements such as "Grunt is out.". **Grunt and gulp are** two different beasts with their own strengths and weaknesses. To back this up, I saw Ben Alman (Grunt's author) in the gulp IRC channel on freenode praising gulp's ideologies and chattering about similar changes being brainstormed in the context of Grunt (even before gulp came to be). In contrast, I've personally [ran into shortcomings](https://github.com/lazd/gulp-karma/issues/3) in gulp's ideology that make it harder to use for certain tasks. **The bottom line is** that the authors behind these projects have the same end-goal: To provide great software for the JavaScript community, and they're doing great work in that regard. Rather than following the latest trends as they emerge, I encourage you to play with both and find the one that fits your project the best.
I'd say CS fans could probably skip arguing about fair and balanced and just point to his update where he says after using it he has changed his mind and likes it a lot.
Gulp looks very promising, I usually go into an enraged state whenever it comes to complex Grunt configuration. The concept of piping makes sense to me, and it feels bearable to write plugins for, since stuff is handled on a file-by-file basis in any case. Will try that out on a non-critical project soon. (Btw, the amount of plugins is already incredible, feels like someone spent a few days cherrypicking the best Grunt tasks and transposed them onto Gulp. [https://github.com/sindresorhus/](https://github.com/sindresorhus/) has been doing a great job - works well for templating you own.)
I'm actually the opposite.
Having worked with and contributed to both Grunt and gulp, I don't agree that gulp is better for those who haven't used Grunt. I feel gulp is better for power users that want speed out of their build system, fully understand concepts such as streams, promises, and concurrency, and don't mind reading documentation and piping together multiple plugins (or writing their own) to create a build process that does everything they could ever want fast as hell. I feel Grunt is better for users who want a straight-forward, easy to understand build system with a huge community that can do anything they need without having to understand complex concepts or pipe together multiple plugins to get a job done.
There is nothing black or boxy about that. Angular is documented reasonably, if you can spare the time to check out the source or just have a cursory read of ng-book or ANY Angular book, you will understand the core features just like you can easily understand MVC-strategies or ruby's ActiveRecord or Typo3 plugin conventions. There is no magic about declarative coding, it just is not imperative. If that seems outworldish to you, give it a try on a side project. The moment you get scope, directives, the digest loop and transclusion, you won't look back. That or you might complain some more, but about different things!
What is the difference between bower+requirejs and npm+browserify? For large javascript browser apps with lots of nested and shared dependencies.
I've read all the books and all the tutorials. This one is the best one. http://addyosmani.github.io/backbone-fundamentals/
Makes sense, his argument was so baseless. I don't use CS, but none of those sounded particularly convincing. All but the compiling, and the whole image none sense all tied back to don't write shitty code, and is applicable to any language. 
Thanks for your detailed answer.
I will likely never understand the appeal of frameworks. Most of them seem to be crutches (Grunt wasn't too bad though) for those not familiar with the language.
This article strikes me as extraordinarily immature, almost as though it were written by a teenager with better than average writing abilities. Here is what I gleamed from the article: * Some guy who has a popular blog mentions a technology so therefore the future is predicted. * Somebody who wrote a book praised it a lot * Somebody wrote a tutorial about it This means...... nothing. This is why you don't let marketing personalities dictate implementation. Trends (popularity) are not the technology and because one tech is praised by **3 people** does not mean some other technology is dead (or will be in a matter of weeks). If this is how you qualify serious technology decisions then perhaps you need a mentor.
That demo is certainly not giving me 60fps on a 2013 MBP...
A firm understanding of the core principals of the language is always preferable to package-powered masking tape, though leveraging community-proven code is advantageous in a good deal of working situations. I personally weigh up one or more of the following: - Does the code make sense? - It is implemented in a similar fashion to the way I would implement it? - Is my employer or client fine with the license? - Do I have time to do it myself and would I benefit from having done so? The appeal of frameworks should simply that they mitigate some of the more redundant and repetitive tasks - they should solve the problems that have been conclusively solved, not take care of the bits the programmer can't do.
Well, I mean 59.7fps http://cl.ly/image/431R060V2D2V
Am I the only person who thinks that promises are just adding another layer of complexity on top of an already-complex issue (event-driven everything)?
This doesn't make any sense. _If his code is syntactically valid ES3_, it will run on all ES3 targets. If it fails in a certain JS engine, that engine has not implemented the spec properly. Likewise, if a code minifier ends up turning valid ES3 into invalid ES3, it's a _bad code minifier_. There are gotchas if you choose to omit semicolons — certain constructs where ASI won't happen even though you expect it to — but those gotchas are the same from machine to machine, so they'd be caught during code authoring.
I don't think "anonymous" is the crux of rezoner's problem. You're still putting a new frame on the stack for each element in the array. 
Frankly, once you get the hang of JS, if you're disciplined with writing Clean Code, it's really not that hard to read and understand. Initially when I first started learning JS, I considered learning CS instead, but decided to just stick with JS for the sake of being able to read other JS library code, and I'm glad I did. I feel like I'm a better programmer for it.
&gt; `onclick="javascript:…"` o.O
The problem with the A part means you are using angular and writing JavaScript the angular way will make it very difficult to write JavaScript applications without it. I'd recommend something lighter such as Backbone or even no framework at all before diving into Angular.
You need to make a few decisions: 1) Ask for an extension for a date way far in advance. 2) Break the features down into accomplishable deliverables. If you have to choose between partial completeness but functioning, and buggy hot mess, always choose the former. I would go #2. Quality of features over quantity of features. Now, if you can get the feature set itemized and prioritized, you can make an informed decision: 1) Refactor existing code to work with the new feature set 2) Rewrite the entire code base in a way you think you will move faster / be easier to maintain. I would do #2 again, but only because I am familiar with all of the aforementioned frameworks. IMHO I would go towards angular, but understand you will be frontloading your work by selecting to rewrite. Big commitment upfront often yields a larger return down the road.
To be fair, supposedly JSMin can make a mistake if you start a line with `!` but don't terminate the previous line with a semicolon. I think this is a failing of JSMin, but I wouldn't call it a _bad_ minifier overall. And in case you're worried, it wouldn't happen to me. The only punctuation I start a line with is `(` and `[`, and I prepend a semicolon when I do.
It's harder to debug, that alone is a big problem. I personally don't mind it, but I write better code than what it outputs and it doesn't make me more productive... So I have no reason to use it.
Unending. That's some stuff right there.
Nope, getting more like 21fps, also on a 2013 MBP. At first I thought it was because I was in Safari, but even Chrome (with the FPS counter on) fluctuates between 20–24fps.
No kidding. TIL
I've been writing JavaScript for over a decade and still need to lookup basic API methods; str.substring?, array.splice?, date.format? is it switch or select? Native vs jquery/underscore/WebKit only? They just don't stick like they do in do for other language?
And people wonder why I never use these things. Here today. Gone tomorrow. Give me a *nix/BSD box and I'll script it all in 90 seconds or less (I might be exaggerating). In fact, I did. Years ago.
Sindre Sorhus was used in the article as ammunition, so it's fair to link up his post totally agreeing here with [lazd](http://www.reddit.com/r/javascript/comments/1uk7we/and_just_like_that_grunt_is_out_its_all_about/cej29ig): https://plus.google.com/+sindresorhus/posts/BvPrVz5fbcz &gt; Things aren't purely black and white. It's actually more vivid. Gulp isn't intended to replace Grunt. They can happily coexist serving different needs, preferences and competency levels. Please stop trying to fit a &gt; operator between them. &gt; Diversity is good for innovation! Try out both and pick your poison :)
Good to know, though, my computer is a 2012 MBP, weird thing.
It's a framework to help build javascript applications. You probably don't need it.
That's still an anonymous function...
I wrote a post about learning JavaScript concepts via the Backbone.js source code. It will help you understand some concepts used in Backbone: http://chrisawren.com/posts/Learning-Advanced-JavaScript-via-the-Backbone-js-source-code
 &gt;&gt;&gt; ['a','b',] ["a", "b"] &gt;&gt;&gt; ['a','b',].length 2 With IE8 and below, you get ["a", "b", undefined]. And a trailing comma in array literals produces a parser error, I think.
Bower is used primarily for managing client-side JavaScript dependencies whereas NPM is for managing Node.js based server-side libraries and command line utilities. RequireJS and Browserify are both for client-side scripts and are attempting to solve the problem Node.js has already addressed by using Common JS modules. RequireJS and Browserify are both solving the same problem but in different ways, and that is dependency and module management. Browserify lets you use Node.js style CommonJS modules with the exports statement whereas RequireJS requires you two write a bunch of extra code for declaring dependencies and defining modules.
SVG is great as long as you don't plan to do anything much with text. The major browsers will all render text slightly differently even when using the same webfont. There are many problems with SVG and webfonts, rendering borders offset from the font, etc, etc. It's not fun.
I'm still stuck on using bash scripts. Shorter, simpler and faster for me than Grunt. This example does make Gulp look a bit easier to understand than Grunt though. (I mean using it, not writing plugins.) But I think declarative is better in general. if you could just make Grunt lighter-weight to install, and slightly simpler options for plugins. And make it use plain YAML files. And get rid of some of the boilerplate. Like you could just automatically require taskthing-whatever based on whatever property name in the YAML or something. - coffee: files: src/*.coffee out: lib - uglify: files: public/js/*.js out: public/js/min.js I just went ahead and made another one. https://github.com/ithkuil/bild
Dammit, why is it always coffeescript. :(
I work on a large J2EE app and over the last few months introduced Grunt as a tool for front end developers to automate and streamline their workflow (starting with my own). It's been awesome and I've been working on advocating for it within my company. Gulp looks great. I've done a little bit of experimentation with it over the last few days and (like others) I'm really impressed with how fast its sprung up and created an ecosystem. But I'm not ready to jump over yet. In addition to the benefits you pointed out above, I think that the shallower learning curve with Grunt makes it easier, at least for now, to popularize within teams of developers with varying degrees of experience. It also means that as other developers on the team are ready to start improving our tasks and usage, there will be less variation in how they accomplish it, because Grunt just doesn't give you as much room to improvise. If I was starting a solo project I'd probably start with Gulp, though, just to give it a more thorough test drive.
I have made something very similar in node js. I wanted to create a synchronous for-loop and ended up doing something very similar to this.
To this day I don't know for certain. The only reason I can think of is beacause I could.
To many special cases. For me it helps to always use ES5-shim. Then I try to write as much native code as possible.
In languages that support annotations, you can often do this: [Skip] // Essential test follows...
RequireJS can work in the browser without any build step. Browserify cannot.
A lot of people where I work just use a ticket number in the commit. Thanks, I love copying and pasting just to find out what the hell you did that for.
I do this all the time and I've learned not to feel bad about it. I know those functions exist so I know they're there for me to use at appropriate times. I don't feel bad about spending 30 seconds to peek at the instruction manual for the ones that I only use occasionally.
Execution isn't necessarily free--browser reflows, document.write (if you're using it... and you really, really shouldn't) and whatnot can cause issues. The point is that there's a reason why you should not necessarily eliminate an HTTP request by sticking your code into the page.
"I prefer the minimalist aesthetic" yeah no, I'll take best practice over that any day
Yes the key here being: &gt; obvious to me However the first time I saw it I had no idea what it meant. So it's universaly obvious. 
I use Grunt. Any time I go to set up a new plugin, I start shaving yaks. I stopped mucking around with plugins. Now I use grunt-contrib-watch, and it runs a bash script for me. That bash script requires much less fucking around to get it doing what I want, and is way more flexible.
I read this totally expecting to chuckle at the end when gulp didn't live up to the title of the post. I was wrong. I got gulp running so fast I practically forgot grunt existed...
I think that was the point of the article 
Knockout is just about the simplest, fastest, easiest way to code a SPA app on a tight schedule. Which leads me to a few thoughts: 1. If you're having trouble with Knockout, you'll have trouble with your custom solution. 2. Why *are* you having trouble with Knockout? It's really, really simple. 3. Your deadline is super unrealistic if the app is anything other than very trivial. I can't outright tell you "hey, this is a terrible mistake" because you've left out tons of details (like, what *is* the app, what does it do, which 30% is done, etc.). But having a fair bit of experience doing exactly what you're doing, this sounds dangerous. I **STRONGLY** advise you to objectively estimate what it would take to finish the app using the existing architecture, using Knockout, and using your custom solution. I have a feeling that you will find it breaks down to something like 4 weeks for the existing architecture (but with super ugly code), 6 weeks for Knockout, and 8 weeks for your custom solution. And if your client wants this in three weeks, then you probably need to break down and just extend the existing code base; it almost has to be faster. Yes, it'll be ugly, yes it'll offend your professional pride, but you know what's super professional? Making deadlines. And a rewrite is a classic, classic mistake. And as for "rewriting it with my own custom framework"...yeah. NIHS is an ugly, ugly thing. I could write a custom framework because I have years of experience with the existing frameworks, but if you aren't "getting" Backbone or Knockout I guarantee you your custom framework is going to have massive problems.
Because writing everything from scratch and trying to reinvent the wheel is impossible in a commercial environment. There are whole teams of people who are constantly developing these frameworks so you can focus on creating your product. It's a bit like saying "I don't understand the appeal of C, its just a crutch for people who don't know assembly." As developers, we have concerns on different levels. It is important to know and understand how these systems work (that's what school is for), but there comes a time, out in the real world, where I defer to the framework so I can get on with delivering my product.
True, I came across the same issues when I was working on the article. When I first started trying out Snap.svg, I imaginged I could do a whole responsive web layout with SVG, but things being the way they are, that would be very unwise.
Ive used angular for some time and the love stopped quite fast once we got to more advanced components and composition, React is just so much nicer to work with and its just plain JS instead of the, imho, bad design decisions that makes angular code feel foreign. 
If you don't know Angular, it'll take most of those 15 days just to learn it. It's a powerful framework, but it's not really intuitive for people coming from basic jQuery apps. And if he's struggling with *Knockout*, well...
As a developer and a gamer I always wanted to make games, but I never actually did it. To change that I threw myself a public challenge: build a new game every week in html5 using Phaser (a javascript framework). The games are quite simple for now, but that's because I'm still learning. Let me know if you have any feedback, so I can increase the quality of my games over time. And if you don't want to miss my next games, make sure to register to my mailing list :-)
Thanks abramz for pointing it out, mea culpa, I removed the reference to W3Fools
It's a single instance regardless of assignment anyway. I'm surprised nobody pointed that out. :p function iterator (each) {} makes no odds either way.
I also think inline javascript expressions, the kind that are actually embedded as HTML attributes, like `&lt;li onclick="displayItem(this)"&gt;`, have few legitimate purposes.
Nice job! Keep it up!
Are you trying to use custom events? If so, you can follow what's explained in [MDN — Creating and triggering events](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events)
Thanks a lot! :-) To be notified when I release a new game, you should register to my newsletter. I also plan to write some articles on it (tutorials, etc.).
yes. Something like that. I just want to call the event **onstring** when the writes **string** as a parameter 
Cool. The box game is really brilliant. Good job!
Try to throw some touch-functionality in there. One of the best parts of HTML5 games is that they support practically all devices. Unfortunately, you can't tap space bar while on your phone. Either way, great job so far!
Yes, you are definitely right. I plan to do this in the next few weeks.
Great job dude. Jump the squares, simple, yet very satisfying and fun to play. My biggest reaction to this post was, great, we're gonna get some half-assed mediocre games since they're pushed out so quick but was honestly surprised. Again, kudos. :)
I was having so much fun with #3 Good job :) +1 for minimalism and colors 
"Validate your assumptions" I like it! I can only assume this is on the Gardner family crest. 
jump the squares is really something! 
I never totally understood what these systems were used for? Are they just a task runner? What do they offer over just writing some bash scripts to setup your environment?
Thank you. Good article BTW, I have been looking at Snap.svg for a project and this was helpful to read.
Bash is not cross-platform though so I hope you only do this for your private projects.
Does bash work on windows? Does it have externals dependencies not found on `npm`? Does it have convenient wrappers and utils to build more complex build scripts? Nope.
what about onmouseover? If the user writes **mouseover** , on that div should be called the event onmouseover() and so on. EDIT: This is exactly what I was looking at. Where can I access all the events, so I know all the available valid events?
Very inspiring. Thanks for sharing!
nice! I've been wanting to remake an old Atari game from scratch using on html5(via canvas) and JS. Was going to try doing it without a framework but I know nothing about making a game. However I found [this blog](http://codeincomplete.com/games/) of a guy who has built quite a few games from scratch, he's got some very useful information in it.
I do, but on a temporary url so I'm not ready to link it to the world just yet. I have no problem sending a PM with the link if you're interested, though :) It's a simple 3d viewer that tries to render a high-polygon leopard tank. Results vary; sometimes it goes 0.&lt;something&gt; frames per second, sometimes it crashes the browser (firefox). Models with much less polygons work fine.
Haha. Yeah I don't get it at all. 
Your call, I can look at it if you want. You'll probably get better feedback if you wait to post it to the subreddit, though.
If you so easily dismiss it with "just a build system" then you'll never discover why it is so insanely popular.
You will get much better responses if you actually try and code up what you're trying to do, and share that with us. Even if it doesn't work, we can build on what you've done or show you where you went wrong. The way it stands now, it's like a homework question that you don't know how to answer.
Uh. 1) Yes. 2) Yes. Whether you have to worry about them depends on how you're installing bash. 3) Are you kidding? How about every shell tool you've ever used, including the exact same functionality as most other languages, including JavaScript?
There are a lot of things to fix before it's ready to be released. Once I do, I'll probably submit it to reddit and see what ppl think. The main problem is that it's my portfolio site, which seems to be in a constant state of being 'not done yet' :P
Why would I use external dependencies like bash to do node.js work? What do I need another layer of hackery for to get my work done on windows? I see a whole office here running grunt on windows from vanilla cmd.exe with zero problems as long as nobody (upstream) tries to be clever using shell stuff.
Wow, that input delay makes these games unplayable. Is that the framework's fault?
What is piping and where does it come from/what does it do? From looking at the sample gulpfile.js, piping looks like JS chaining.
im afraid i might be spamming
What OS/browser are you using? It's supposed to be super reactive. 
Yep. To be fair to those we like to think of as Neanderthals, in many cases the reason why IT departments are loathe to part with IE 8 is the same reason they were stuck on 6 so long--they have legacy Intranet software that can only run in those versions and it's going to be expensive and challenging to upgrade or replace it. Not excusing the sins of the past here, but in many cases it's more than just general curmudgeondy that's holding people back. I'm really glad that more companies are becoming vocal about dropping support for 8 and even 9, though--that's the right message to send. Sooner or later these guys will have to bite the bullet. 
Appears that I broke #3, I enter every level in jump mode and fall right away, which apparently means i instantly pass! http://imgur.com/wpJOX1m
This is an awesome link! Another great distraction while I'm at work...
Yeah.. i think you missed some slight sarcasm on the authors behalf in the article...
Windows 7 / Chrome I didn't expect that to be the problem, but you're right. It's very responsive on Firefox. Interesting.
Not an original idea, though
The main difference is requirejs uses AMD modules, whereas node uses commonjs(-like) modules. This [video](https://www.youtube.com/watch?v=PAGpMagiabM) show the differences nicely. Best explanation on the differences come from requirejs themself (methinks) [AMD vs CJS](http://requirejs.org/docs/whyamd.html)
Same thing happened to me. Not sure how I caused it, but it might have been by holding Space when the level started.
I would argue that they have no legitimate purpose. Anything you can do with inline javascript, you can do with non-inline javascript.
I prefer building a repository of templates for various recurring tasks. It solves the problem just as well.
&gt; they should solve the problems that have been conclusively solved, not take care of the bits the programmer can't do. Very well said there. I have no objections to this. I've just seen too many cases of the latter. 
Thanks for reporting that, I'll look into it!
[check this out too](http://www.atari.com/arcade/developers/building-atari-createjs), I just found it
I think it's not theirs, just one they used: [CreateJS](http://www.createjs.com/#!/CreateJS) It's a suite of JS tools of making games
I wouldn't consider your example obscure. It'd give me a moment of *huh*, wondering why you'd do that, but since the only thing that would ever be true for would be `NaN`, it becomes obvious. Personally I'd still write it as: if (+someVar !== +someVar) { // NaN? 
Good stuff!
Probably.
This is a really really neat idea! I love the color schemes and simple art style too. I'm planning on pitching an HTML5 game development course idea at the college I teach at, I'll be sure to use your site in my pitch! I think the incremental development and learning is fantastic.
Thanks. And that sounds awesome! :-)
SOLUTION: load = function () { inita = function () { document.getElementById('hexa').className='wave'; }; initb = function () { document.getElementById('hexb').className='wave'; }; var nodeone = document.getElementById('hexa'); var nodetwo = document.getElementById('hexb'); document.getElementById('hexa').className='transtart burna'; document.getElementById('hexb').className='transtart burnb'; nodeone.addEventListener('animationend', inita, false); nodeone.addEventListener('webkitAnimationEnd', inita, false); nodetwo.addEventListener('animationend', initb, false); nodetwo.addEventListener('webkitAnimationEnd', initb, false); }; document.addEventListener('DOMContentLoaded', load, false);
I'd like to just offer my support. Good for you! Can't stop won't stop, brother. 
Ha! I'm actually trying to do the same. I wanted to improve my JS skills and I thought that building mini-games in the html5 canvas at the same time will make it more interesting. So I'm writing just a simple Tetris, without any library for now, I want to focus more in the nature of the language. The box game turns addictive very quickly, nice mechanic-
I thought this was about a new date picker. 
Game #3 was really good fun. I did it but died 235 times on the way :(
Great game idea, but it needs some expansion. I found by just spamming the left click you effectively become immune to dieing, but its a great idea
Unless you can run a server configured to send CORS headers, you can't. This is the whole point of CORS.
It's okay for a start but need more detailed tips, a lot of what you talk about would be covered if you were using TDD
Call me old fashioned, but I've never needed anything other than Make. Browserify however, is an incredibly useful tool and I recommend everyone take a look. It's really simplified my front-end development, and allowed me to reuse code between node and the browser.
Phaser looks like a nice framework. I haven't seen it before now, but already it's way better than what I've been toying with.
sorry should have said javascript. 
Hey well done. Short and pretty much future proof. 
This is nice! Just to let you know: I'm following your code and the first example grasp '#remote' file.js Doesn't do anything. I'm on Windows, latest version of Node. I tried to remove the hash, doing grasp 'remote' file.js And this effectively highlights the 'remote' string, the one that you beware against changing in your example. So I figured I had to keep the hash and get rid of the quotes grasp #remote file.js Works as intended in your example. You might want to look into that. I'm just now following the tutorial so I don't know if there are any other issues. I don't know how through is the tutorial so I have to ask, sorry if I come across as dismissing: I use IntelliJ (PhpStorm, actually) and it's refactoring tool is nothing short of fantastic. The best I've seen in any IDE, on par with VisualStudio. It is aware of the code, aware of the context, and, additionally, the action-&gt;preview-&gt;refactoring cycle is quicker and visually. It also changes the reference in all files that reference your module, variable or function, when applicable. So the question is: this tool is clearly very useful, but maybe it's more targeted toward users without an IDE?
Hmm. I don't use Windows. I thought node worked similarly everywhere, but I guess I'll have to test separately. I use Linux: the command line is my IDE. In general, I think it is more flexible than using an integrated IDE. Grasp can also be integrated with other editors; there is a sublime text plugin.
Fair enough. I can definitely see how somebody could benefit from this if they are not using an IDE with good refactoring features. I don't really know if Node works different in Windows than on Linux. It shouldn't. I'm just pointing it out because if all other things are equal, maybe that's the difference. Just to be clear, your program *does* work, but I had to remove the quotes from the identifier. If I leave the quotes, it matches nothing, but if I take out the hash and leave the quotes, it matches strings in the code (i.e. it matches the first argument of the function in the first line of your code). To match the identifier I had to remove the quotes and leave the hash
Thanks for the bug report! There is definitely something going on with regards to how quotes are treated on Windows.
Not to be pedantic but class names can't have a space, trying to call add with a class with a space raises the following error : InvalidCharacterError: String contains an invalid character
Yep you're 100% right. That's what I get for only testing className and not classList. Will edit my response.
I'm new to javascript frameworks so I'm sorry if this isn't a good suggestion, but give knockout.js a look. I'm on my phone, so I can't really view your website in detail. But I built a single page app using knockout.js, and while the learning curve was a bit much, I'm happy with the framework and will definitely be using it again. 
I think it's just a shell difference. It will probably work with double quotes. To illustrate, on windows: &gt; cat testargs.js console.log(process.argv.slice(2)); &gt; node testargs.js 'hello world' [ '\'hello', 'world\'' ] &gt; node testargs.js "hello world" [ 'hello world' ] 
In javascript you can use window.setInterval (https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval) to execute code after every X amount of time. So you could use this and then change the image and/or text of an element. 
While nice in theory (and I *do* understand the various benefits of the trailing comma), using a technique like this will almost certainly get you in trouble down the road. At some point — unless you only ever work on your own code and always have complete control over the build process — you will eventually run into a situation where knowing how to write correct and *compatible* JS is a requirement. I think that you are much better off including a [linter like JSHint](http://jshint.com/) in your build process, and training yourself to catch and fix these typos in your source files.
Nice :) fun games, too. But, would you set up an RSS feed please? (Or Atom or whatever) I want to see the new games but not use email for notifications.
&gt; you will eventually run into a situation where knowing how to write correct and compatible JS is a requirement While I agree with your statement in general, I don't agree regarding the trailing comma. That problem is going away, not many IEs left not supporting it. So I'd argue that writing trailing commas in code and removing them just for compatibility code actually *is* the correct and comapible way.
Was that a Google+ link on reddit? Also: _[relevant pastry box article](https://the-pastry-box-project.net/ed-finkler/2014-january-6)_ &gt; Refuse to participate in tribalism. We are social animals, and being part of a group gives us confidence, but warring over technology choices distracts us from doing good work and practicing empathy. Build communities with what we have in common, and embrace the diversity that makes each of us unique. Make them safe places for anyone who is interested in participating.
Knockout is probably easier still, FWIW.
Site is bookmarked! Great work :) Game Feedback: Gradius 0 - Keep giving power ups past three lasers. The disappointment when I collected the fourth power-up and did not receive 4 lasers was unbearable. Game #3: Jump the Squares - Something happened where my block fell beneath the ground line and kept repeating what appeared to be a fall. Credit was given for completing the level every time the block fell off the bottom of the screen. I was unable to replicate. I think it happened on level 8.
That's pretty hardcore man. Good work and keep it up! You should do a [super hexagon](http://www.youtube.com/watch?v=2sz0mI_6tLQ) type game. Also, how is phaser? I'm trying to decide between that and Cocos 2d for an upcoming project.
Personally, I'm done with thinking about trailing commas. It's a great way to define your browser support cut off. It works flawlessly in Node and all browsers you theoretically should care about. If you have a special client project that must work in IE 6, sorry champ you're now in the minority.
I found this useful: "A JavaScript pattern and antipattern collection that covers function patterns, jQuery patterns, jQuery plugin patterns, design patterns, general patterns, literals and constructor patterns, object creation patterns, code reuse patterns, DOM and browser patterns" http://shichuan.github.io/javascript-patterns/ The references mentioned on that page are also great: References The Essentials of Writing High Quality JavaScript: http://net.tutsplus.com/tutorials/javascript-ajax/the-essentials-of-writing-high-quality-javascript/ JSPatterns: http://www.jspatterns.com/ jQuery Anti-Patterns for Performance &amp; Compression: http://paulirish.com/2009/perf/ How DRY Affects JavaScript Performance: http://velocityconf.com/velocityeu/public/schedule/detail/21634 Object Oriented JavaScript: http://www.packtpub.com/object-oriented-javascript/book JavaScript Patterns: http://shop.oreilly.com/product/9780596806767.do JavaScript: The Good Parts: http://shop.oreilly.com/product/9780596517748.do Pro JavaScript Design Patterns: http://jsdesignpatterns.com/ Essential JavaScript Design Patterns For Beginners, Volume 1.: http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/ Eloquent JavaScript: http://eloquentjavascript.net/
I get it, it's simple, but hey, how about at least a *little* documentation, maybe 1 line? &gt; **console.disable()** to disable logging, **console.enable()** to enable it. ;)
What's Windows? Is that this new operating system that all the kids keep telling me about?
How long are you planning on doing this? I think you should give yourself more time as you get better. Say the first month or two is on week, then two, then three etc.
Better to use [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame). An example is provided in the link to using this cross-browser, although one should fallback to setInterval for older browsers.
To be honest, you'll need a medium level understanding of javascript to make this work, plus a bit of basic math. Unless you're doing this for a learning experience, I'd recommend using an existing image rotator library. There are LOTS!!!! * https://github.com/jsor/jcarousel * http://splashmagazine.com/2012/12/jquery-carousel-plugin/ * https://github.com/search?l=JavaScript&amp;o=desc&amp;q=carousel&amp;ref=advsearch&amp;s=stars&amp;type=Repositories 
Same thing with me on Jump the Squares, fell through the ground and won the game.
I tried the same thing a year ago. A game/weekend, with the mission to learn, and develop a framework for myself. I stopped about 4 weeks in, because I started a much too complicated one. Anyways, just wanted to say good job so far and keep it up.
Thanks for the great feedback! :-) Make so to subscribe to the newsletter to not miss my next game www.lessmilk.com 
I stayed up way too late and it's still not perfect but I made a random level generator for the square jumping game. I'm going to paste it right here. Just load game #3, fresh, wait for it to finish loading (should only take a second) and then either paste the following into the developer console OR paste the following directly into the address bar. Both versions (minified, and unminified) are entirely self executing. After you hit enter you should be able to just start playing. NOTE: Chrome (at least) will strip off the beginning 'javascript:' from this code when you paste it so you'll need to TYPE javascript: and then paste this and hit enter. Here we go! javascript:var Game=Game||{};Game.Mod=Game.Mod||{};Game.Mod.Randomizer=function(e){};Game.Mod.Randomizer.prototype={numLevels:20,elementsAtLastLevel:5,firstPossibleElementLocation:2,MAP_LENGTH:22,setup:function(e,t,n){e=Math.max(1,e);t=Math.max(1,t);n=Math.max(0,n);this.numLevels=e;this.elementsAtLastLevel=t;this.firstPossibleElementLocation=n},getNumberElementsForLevel:function(e){var t=this.numLevels/this.elementsAtLastLevel;return Math.min(Math.ceil(e/t)+1,this.elementsAtLastLevel)},getRandomNumberInRange:function(e,t){return Math.floor(Math.random()*(t-e+1))+e},tryPlaceBlock:function(e,t,n){if(n&gt;8&amp;&amp;this.getRandomNumberInRange(1,50)&gt;=10){if(this.getRandomNumberInRange(1,10)&gt;=5){e[t-1]=1;e[t]=this.getRandomNumberInRange(1,5);e[t+1]=this.getRandomNumberInRange(1,3)}else{e[t-1]=2;e[t]=this.getRandomNumberInRange(1,3);e[t+1]=this.getRandomNumberInRange(1,2)}return true}else{if(n&gt;6){e[t]=this.getRandomNumberInRange(2,5);return true}else{e[t]=this.getRandomNumberInRange(1,2)&gt;1?this.getRandomNumberInRange(1,2):5;return true}return false}},findClosestBlocks:function(e,t){var n=0;var r=0;var i=0;for(r=t-1;r&gt;=Math.max(0,this.firstPossibleElementLocation);r--){i++;n++;if(e[r]!==0){break}}var s=0;for(r=t+1;r&lt;e.length;r++){s++;if(e[r]!==0){break}}n=s&lt;n?s:n;return{overall:n,left:i,right:s}},getRandomMap:function(e){var t=this.getNumberElementsForLevel(e);var n=e/this.numLevels;var r=[];var i=0;while(++i&lt;this.MAP_LENGTH){r.push(0)}if(n&gt;=.25&amp;&amp;Math.random()&gt;=.5){r[this.firstPossibleElementLocation]=this.getRandomNumberInRange(1,2);t--}var s=255;var o=-1;while(++o&lt;=s&amp;&amp;t&gt;0){var u=this.getRandomNumberInRange(this.firstPossibleElementLocation,r.length-1);if(r[u]==0){var a=this.findClosestBlocks(r,u);if(a.left&lt;5||a.right&lt;5){continue}if(this.tryPlaceBlock(r,u,a.overall)){t--;o=-1}}}if(t&gt;0){console.log("On Level #"+e+", I wasn't able to place "+t+" requested block(s)...")}return r},create:function(){map=[];for(var e=1;e&lt;=this.numLevels;e++){map.push(this.getRandomMap(e))}game.state.start("Reset")}};Game.Reset=function(e){};Game.Reset.prototype={create:function(){game.sound.stopAll();game.state.states["Play"].shutdown.call(game.state.states["Play"]);game.state.start("Load")}};(startRandomizer=function(e,t,n){if(game.state.states["Reset"]==null){game.state.add("Reset",Game.Reset)}if(game.state.states["RandomizerMod"]==null){game.state.add("RandomizerMod",Game.Mod.Randomizer)}game.state.states["RandomizerMod"].__proto__.setup(e,t,n);game.state.start("RandomizerMod")})(20,5,2); Below is the minified AND unminified. You can also paste THIS into the developer console (f12), but not into the address bar. It was a lot less sloppy to begin with BUT it was more frustrating than I initially thought to generate levels well. Anyway, [===HERE===](http://pastebin.com/DfzgaTsX) is the minified version. [===HERE===](http://pastebin.com/BcwL50vd) is the non-minified commented version. Feel free to edit it all you want, but if you do I'd like to see the changes you make out of curiosity (anyone.) I have no idea what this phaser thing is but I tried to fit it's design style, instead of my own. Also, @lessmilk, thanks for the original inspiration. Fun stuff! 
Damn Reddit won't let me add friggen whitespace between these paragraphs. It originally had it before I edited it slightly and now it just looks like crap. =( 
You need to use a different method to prevent default in older versions of IE. http://javascript.info/tutorial/default-browser-action
This is pretty cool. I wonder if it could be used for a bit of lisp style metaprogramming. I'll have a play later
I don't tend to use it much in code I write to use myself, but when I'm writing libraries or code intended to be used be others I this this is a must. I also write mostly coffeescript, so the syntax to use it, with checking if the function is available at all (since it's ES5) is fairly straight-forward: `Object.freeze? this`
Doesn't seem to scale all that well, when changing the iterator from 5 to 50, it becomes extremely choppy and after the scrolling is done, the elements will keep morphing for a while. http://codepen.io/anon/pen/Kugvr
Thanks for the feedback. The next three parts go into more detail. Part 2 will be released Feb 10th.
Game changer.
In Windows, don't use single quotes. Use double quotes instead (or none, if there are no spaces). Single quotes are for Linux.
oh my... just no.
Strongly agree with Pyro979. Unless you are building a kiosk type app? But it sounds like you are targeting web users. In that case, please don't do it. But if you do make sure to put blinky text and pop-up ads everywhere. Users love those too. 
&gt; I thought node worked similarly everywhere The difference is in the command line, not in "node".
It has test coverage. LOL.
 ;; ;; ;;;;;; ;; ;;;; ;;;;;; ;; ;; ;;;; ;; ;; ;; ;;;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;; ;;;;;; ;; ;;;;;; ;; ;;;; ;; 
;
Are you going to make a semicolon reddit bot now? One that adds semicolons to any post not ending with semicolon?
Why do you want to annoy your users so much? Whenever I get a request to implement stuff like this at work, I push hard to make the request go away. If it looks like a link, I expect it to act like a link - and when it doesn't, I get annoyed. 
I can confirm. PHP is better than CSS, but not CSS3.
&gt; Issues: add minified version
It goes without saying not to use this in a production environment yet. It has only been released a couple of hours and should be considered to be in alpha stage. Also, the lack of documentation for this is appalling.
OUTRAGEOUS https://github.com/dchest/semicolon-js/pull/4
looks like a program in brainfuck: ++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++ ..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;. http://en.wikipedia.org/wiki/Brainfuck
Should have gone with Angular. You will regret using Backbone in the long run.
lol wtf dude
Recently, JavaScript community is blowing my mind with all the cool tools and techniques. 
Your text is more nonsense than lorem ipsilum.
Note that there are [negative performance implications](http://jsperf.com/object-freeze) with `Object.freeze`. It also won't complain if you attempt to add a property to an object unless you're in a strict-mode context: // 1: var f = Object.freeze({}); f.bar = 10; // =&gt; 10 f.bar // =&gt; undefined // 2: var f = (function() { "use strict"; return Object.freeze({}); }()); f.bar = 10; // =&gt; 10 f.bar // =&gt; undefined // 3: (function() { "use strict"; var f = Object.freeze({}); f.bar = 10; }); // =&gt; TypeError: Can't add property bar, object is not extensible That's not to say you shouldn't use it, but it may not be as awesome as you think it is.
I understand that it wont throw an error when not in strict but I can't think of a time when I have never not being using 'use strict' also from looking at the jsPref I don't see why someone would use freeze like that, the use I had in mind was to prevent write actions on the object. 
Using Object.freeze() is 99% slower on my machine on Chrome 31.0.1650.63 on Linux 64-bit. Why would I ever use Object.freeze()?
I fail to see why this is better than the "broken" JS prototype system. The characteristics of the go-struct are almost identical to a constructed object, but slower and less idoimatic.
Gleaned* Also, I think you should read my earlier comment. Quit accusing everyone of being sheep who are infatuated by a few tweets.
I almost popped a vein before realizing it was a joke. Good job!
I was going to say you don't even *need* a semicolon, which is just when I realized how advanced level this is. Well played.
Ooh, sounds like a winner, this one. Or, to retain just the spirit of the thing, it could add points instead. Handy for when people don't properly mark the end of their sentences
Not sure why you get a down vote but here's an up vote. I don't mind when people debate the finer technical points of a framework being discussed; I just get so annoyed when these threads ALWAYS turn into a debate about frameworks at a much higher level. That's not what this post is about. If you don't like frameworks in general then this post wasn't for you in the first place. I see sooooo many parallels between how these discussions derail so quickly and how our congress here in the states can't ever accomplish anything. They waste time "bike shedding" (debating and discussing straw man arguments, e.g. What color to paint the bike shed) because they don't have anything specific or intelligent to say about the actual issue itself.
The performance impact of using `Object.freeze` isn't significant. Sure, it's a hundred times slower, but the operation in the example still takes less than a millionth of a second to execute.
Thanks
Thanks guys
.
Thank you.
I can hardly see any benefit from this
yes it was slower because of what it was being used for, from what I understand freeze would be used for locking an object to prevent changes e.g. `var bla = {a:'a'}; Object.freeze(bla); ` Now `bla` is locked and when in strict more and error will get thrown. in the jsPref an error should have been thrown, this is to tell other devs that the var should not be changed. 
take a look at [window.opener](https://developer.mozilla.org/en-US/docs/Web/API/Window.opener)
The consensus seems to be overwhelmingly against doing this. However, just so you understand the context (as if that would make breaking middle click a sane choice), the purpose is as follows. First, a quick background: * I am using MadCap Flare to write documentation. * Flare's HTML5 output has a per-link option to specify links to open a modal popup. This is mostly for "related topics," and things of that nature. * Middle-clicking any links (popup or otherwise) opens the topic in a new tab, without all of the navigation and search widgets. I wanted to make it so middle clicking a link would open the modal popup, to give the reader a quick way to peer into a link without losing context. As you mentioned, even this clashes with the user's expectation, so I do not think I would use it, even if I could get it to work in IE. However, I would still be interested in capturing middle clicks and opening the link in a new window (as expected), but with the navigation and search widgets. Would you say that is a bad choice from a UX perspective, as well?
In my latest projects I use it all the time (mixed with non-writable locked properties): it is great to catch bugs. It relates to 'immutable' in other languages.
As I mentioned in my reply to Pyro979, it is for help documentation. I was most interested in knowing if it can be done; I am now convinced that even in my case, it is not a huge loss that it cannot. Still, middle-clicking the links opens them in a new tab without the navigation pane and search widgets, so being able to augment the middle-click handling might have a legitimate use. [Here](http://files.zend.com/help/Zend-Studio/zend-studio.htm) is a good example of Flare's output. Middle-click on any of those links, and you get a new tab without any the navigation, search, or header.
I was mostly concerned with finding out if it was possible. I explained my reasoning in [another comment](http://www.reddit.com/r/javascript/comments/1updcs/is_it_possible_to_prevent_a_middleclick_from/cekii83). I certainly would not implement it now, but I sometimes get a 'feature' idea and want to see if it will work.
Isn't this similar (but more limited) then `Jake`? And what about cross platform support?
Thank you, but unfortunately, it only works on click in IE, not on middle-click.
It might be better to use closures instead. A function like function createFoo() { var a = 'a', var b = 'b'; return { getA : function() { return a; }, getB : function() { return b; } } } This is a great way to protect private variables or in your case allow read-only access to data.
Ah, that makes more sense. Yeah, ideally the software should work like that (opening the same exact content, just in a new window/tab). Also note there are other ways to open new window/tab (ctrl+click, or from a context menu, etc) 
Looks like a problem that doesn't need to be fixed, and would add extra bloat and bandwidth. Considering browsers, such as Chrome, are now starting to preload/prerender pages, this seems really unnecessary.
"Cargo cult programming" is my new favorite term.
Incoming wave of task runners! Most people are going to stick to the most widely used ones, such as grunt.
https://github.com/madrobby/semicolon.js is a couple of years old, and has similar ... design goals
“preload/prerender”. Are you talking about something else than &lt;link rel=prerender&gt;?
Wow, I misread and thought it was about making a point after semi-colons *at the end* of lines. Actually, this semi-colon is here for good reason, it is because it avoids bugs when you’re writing without the optional semicolons at the end of lines: http://mislav.uniqpath.com/2010/05/semicolons/
GOOD REASON? That's exactly why Semicolon.js exists! If you're going to concatenate files (with or without semicolons), what stops you from concatenating them *with semicolons inbetween*? cat file1.js semicolon.js file2.js semicolon.js &gt; out.js (See the [test case](https://github.com/dchest/semicolon-js/tree/master/test)). Good reason. Yeah.
Simpsons did it! But my version comes with ideology. Also, with a more permissive license.
A comparison between this and [UI Bootstrap](https://github.com/angular-ui/bootstrap) would be nice...
It’s not about concatening files, it’s about **not** concatenating them; when you write before the lib, your last semicolonless line is going to otherwise include the lib’s first line at the end: not good. Edit: Okay, I understood just now that your message was a joke.
Is this like geo texting?
I didn't understand your reply, and my message wasn't a joke. Can you elaborate? What does "when you write before the lib" mean?
While that is a factor, the main issue is that if I used email for notifications about everything I want to eventually see, I'd never get to see any other email in the flood. Mail is for communications, feeds are for notifications :). But twitter is ok, I guess, thanks, there must be some twitter2rss services out there.
:[
Erf, sure. When you have this in your .js file, after pasting a semicolon-started library: &gt; YourSemicolonlessCode &gt; &gt; ;(TheLib = function(){ … Removing the colon at start of the library would cause your last line to be interpreted as: &gt; YourSemicolonlessCode(TheLib = function(){ … If that still doesn’t make sense, see “The only real pitfall when coding without semicolons” at the end of the article I linked to.
&gt; when you’re writing without the optional semicolons at the end of lines Erm, just don't do that.
We're very welcoming to new contributors. Although the core is implemented in D, the project also contains quite a bit of JavaScript code you can hack on - or you can contribute new modules written in JavaScript. Other potential ways to contribute are to try out the project and send us bug reports, thoughts, etc. Or just come hang out in #higgsjs with us and talk. Feel free to PM me on reddit if you have any questions.
You could open a chat at your current location. When you click on an existing chat on the front page you join the conversation. A new chat is yellow, the more replies it has, the more the color changes to red. The color desaturates when nobody replies. EDIT: i've deactivated email registration, so it's anonymous now :)
Are you making sure all images are loaded before calling masonry? I've never successfully implemented masonry without calling it after a decent delay making sure everything is loaded and rendered first.
It might be better to write a script as part of the content template to re-add the navigation if it's not present. As the topic content sits in an iframe, this [stackoverflow answer](http://stackoverflow.com/questions/326069/how-to-identify-if-a-webpage-is-being-loaded-inside-an-iframe-or-directly-into-t) is relevant to you. Detect the lack of iframe, redirect as required.
Sounds like a pretty useful tool for testing.
That is a clever solution. I will try it out. Thanks! **Edit:** It worked great. I ended up using the following to break apart the URL and format it: if ( window.self === window.top ) { var loc = window.location.href, re = /^(.+)\/Content\/(.+)$/, source = re.exec(loc)[1], page = re.exec(loc)[2]; window.location.href = source + "/default.html#" + page; }
Heady combination of dangerous and awesome.
So actually, there's a reason I just remembered why you wouldn't want to inline your javascript file in the page: cacheability. An inline javascript file can't be independently cached, and thus will cause *every* request to increase in size--rather than just the first request.
Ok, so it looks like I am supposed to insert; _kiq.push(['options', { bottom: 20 }]); But I am not sure where to insert it, can anyone help?
Sounds like your boss should hire a developer who knows what they're doing.
So here's the deal, in order to use the JavaScript API you'll need a Node.js server up and running that you can route requests through. This Node.js server will need to be on the same domain as your regular webserver, in order to prevent browsers from stopping your AJAX requests from working. There's a better solution though, the folks at EverNote have created APIs for many different languages. I'd figure out what language your server is built on, then use the api for that language. This way you don't need to get a Node.js server up and running, instead you leverage the server you already have. You can find the various APIs here: http://dev.evernote.com/doc/ 
Also spelling and grammar checking? Let the bot take the heat for correcting people. 
On the contrary, this particular semi-colon has been used inside Google for years. It's well tested. It's just been made available in library form recently. 
Why is this a thing? The semicolon is one of the little things that make JS better than Ruby IMHO. While correct tabulation is a good thing so that multiple programmers can easily understand the code, the semi-colon can allows us to minimize js files in order to load them faster on the browser.
And how does that compare to ruby?
No, just that. Seems this is doing something similar to jQuery Mobile, where it ajax loads new pages in rather than the browser navigating to a new page. I get the uses and benefits, but I can also see a lot of problems.
All we need now is gulp-semicolon 
Are you the author of this?
Ruby does not have line terminators and relies only on blank space to tell the compiler where a line ends and what parts of code are nested with a function. If you get the spacings wrong, then your code won't compile, this is something that is not as easy to spot as a missing semi-colon.
really? No one tried it? Not even the OP? =( I only got 1.5 hours of sleep last night because I wouldn't stop tweaking it.
 I... what is this? ^/r/shittyprogramming
looks promising
ELI5 the difference between a function and a macro
Node isn't in Chrome, rather both Chrome and Node use the V8 Javascript engine. Node does not run in a browser, rather you generally run it from the command line. To clarify: when running JS code in a browser, the native APIs that are available to you are specified by the W3C, and pretty well documented by [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript) (among others): e.g. XMLHTTPRequest, the DOM API, the canvas element API, etc. When running JS in Node, you use the Node APIs, which are documented [here](http://nodejs.org/api/). What they're saying in the Evernote docs is that when you use XMLHTTPRequest (i.e. make requests in the context of a browser) it can be a pain in the ass to deal with CORS (cross origin resource sharing) limitations. Those limitations do not apply to Node, as you would use the Node APIs (or more likely a library like [request](https://github.com/mikeal/request)).
Functions (at least in JavaScript, but I'm pretty sure in almost all languages) have a specific syntax that is part of the language. Macros allow you to create your own syntax (which is then replaced with the JavaScript code that you've defined in the macro). So, as is one of the examples in the linked page (slightly modified), you could never use syntax like this var a = 5; var b = 7; swap(a, b); // Now a is 7 and b is 5 to accomplish what it does (swap the values in the variables) because of how primitive values (numbers, in this case) are passed to functions. You could (with the right macro definition) even do something that would be complete nonsense in standard JavaScript like this (again, a slight modification of the 'swap' example): swap a b; This is not only meaningless to a JS engine (it's just three identifiers in a row) and syntacticly incorrect (unexpected identifier), but with macros, you can define your own match pattern rules that defy any regular language syntax and transform it into actionable JavaScript. I had never come across this before, and while I'm not *fully* sure of why or how it can be useful, even with just the examples on the page, I can see the appeal.
I could see that hygiene may be especially dangerous, and that there could be significant differences in implementations that would lead to terrible edge cases. However, I would *love* to see this included officially in *some* future version of JavaScript.
You could do it from the browser. Just proxy the Evernote api through your own server. 
You missed an opportunity to call it "semicoln".
I like the use of contextual clues to predict behaviour: after hover comes click.
In modern browser environments, the [MutationObserver API](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) provides equivalent functionality.
grunt-contrib-concat has a config option where you can insert a ';' as a file separator. 
If you're never heard of "Cargo Cult X" before I highly recommend reading the wiki on its origins, it's quite facinating: [Cargo Cult](http://en.wikipedia.org/wiki/Cargo_cult)
Haven't you heard? Grunt is old hat, Gulp is the new king.
Rather than waiting for your build process to lint your files, do it live or on demand with a competent text editor that supports the various linter plugins available.
I skimmed several of those links and am in the process of reading eloquent javascript now, but I did not find any that (for example) went into detail about how applying a distinction between sort types would benefit my code, or how the difference between arrays, linked lists, and dictionaries could apply to everyday javascript. Did I overlook it?
[Here you go](http://lmgtfy.com/?q=jquery+todo+list)
Correct me if I'm wrong, but this seems like a great way to make your code less accessible and harder to maintain. It doesn't seem to *solve* any problems--just exchange more shorthand for less legibility.
read code, write code, repeat.
I exercise what I learn by creating small but useful projects. Just reading something is only so you "recall" where to relook it up when you need it. Using something a few times is what makes you remember it and using it a ton is what makes you memorize it. Practice makes perfect is the old saying.
So what you're saying is you can double my monthly bandwidth charge without actually showing new content to my users? Incredible!
Can you give me a few practical examples of where I would use this in a real application or module?
Welcome to JS! ----- 1. From what you're saying, it sounds like The Library and Shelf objects could just be arrays, so the library is an array of arrays each containing books. Have a go at implementing it, then come back and ask us if you get stuck. 2. TodoMVC is site which shows todo lists made with loads of different JS frameworks, and they're all open source for comparison. [Here is the jQuery one.](http://todomvc.com/architecture-examples/jquery/)
I developed this recently while building my [Node client for the Heroku API](https://github.com/jclem/node-heroku-client). Essentially, given an array of endpoints for an API, path-proxy attaches a network of proxy object constructors for those endpoints to a given constructor's prototype: var pathProxy = require('path-proxy'); function Client() {} pathProxy.proxy(Client, [ "/apps", "/apps/{app_id}", "/apps/{app_id}/collaborators" ]); var client = new Client(); client.apps(); client.apps('my-app'); client.apps('my-app').collaborators(); I also [wrote a little blog post about it](http://jclem.net/2014/01/08/path-proxy-generating-an-api-client-at-runtime.html).
lol 
thanks alot!
http://www.youtube.com/watch?v=jo_B4LTHi3I This should give you the basics of what node.js is and isn't, and a good idea of some of the basic patterns you'll be using if you decide to use it. It's very, very fun to work with and really opens up a lot of possibilities.
I own this book, along with the CLRS Algorithms book. I like it a lot.
This is what I have so far...How would I go about "unshelfing" a book. This seems to involve using a method that would remove the element from the array. Someone plz help! function book (title) { this.title = title; this.unshelf = function () { } } var shelf = { shelfone: shelf1, shelftwo: shelf2, shelfthree: shelf3 }; var harrypotter = new book("Harry Potter"); var lotr = new book("LOTR"); var twilight = new book ("Twilight"); shelf1 = [lotr]; shelf2 = [harrypotter]; shelf3 = [twilight]; function library () { for (var i = 0; i &lt; shelf1.length; i ++) { console.log(shelf1[i]); for ( var j = 0; i &lt;shelf2.length; i++) { console.log(shelf2[i]); for (var k = 0; i &lt; shelf3.length; i++) { console.log(shelf3[i]); } } } } console.log(shelf.shelftwo)
.
For dynamic code generation, why not something like T4 templates or CodeSmith?
I actually already discussed in this thread the caching consequences of inlining, and why in some cases it is very worth it. (hint: ajax sites)
I consider this library horribly flawed until my PR is accepted https://github.com/dchest/semicolon-js/pull/7/files
Cool, but a more or less obvious example of how to make use of Backbone events. Instead of defining a success callback inline with your save(), you wait for a change:property event. Although while 'success' may be not as "nice", the point being driven home here is that a defined success method does not allow the user to take advantage of the Model's events, which is not true. A change/change:property is fired for changed properties (regardless) at a invocation of save() irrespective of the results of save(). This approach is cleaner but not always best because of its irrespective-ness. Perhaps something goes awry during save(), and you're out of sync. It's not always best to rely on change/change:property. Don't pass this off as a simple misnomer, as it could cause further issues and inaccuracies. Instead, take advantage of the promises from calls like save(), and update your DOM when you're sure changes are locked in.
people are slowly awaking to meta programming in javascript, the other day I saw a post which explained dynamic method dispatch on here as well. Now to answer your question, the writing of macros allows you to embed DSLs' into your system which could lead to a lot of user power, here instead of having to rely on a generator phase in building, you could give the power to even "eval" some code given a specific sandbox and the macro correctly loaded, moving closer to LISP like programming. All of these (and some more) could allow you to leverage the full blown power of meta programming, but with it comes a cost of course in that any developers have to grok wtf is going on. 
I think you misunderstood my message. Semicolons to terminate statements are good: var x = 1; return x; A semicolon before the code to ensure that people who can't concatenate files won't break your code is a useless piece of shit: ;var x = 1; return x; ^ Yes, some people write like this. (Updated the FAQ).
Learning and memorizing are different things (like physically different in your brain). I once struggled with similar feelings right out of college. I found that rather than trying to learn a lot quickly, working to understand what I was learning allowed me to retain the knowledge longer and more accurately. For instance, if a concept is new don't just retype some code and run it... attempt to write the same code from scratch without looking, only looking if it doesn't work. You will get to a point where you can absorb books with minimal coding.
Thanks for the feedback! I didn't know topcoat, it looks way better. I'll try to take a look at it and maybe replace jqMobile (which i don't really like too, but thought it was the quickest way to try this) Which browser/device are you using? We had similar issues with Safari and some mobile browsers on Android. I think it might even be a problem of jqMobile. What do you see, when you click on the 'stats' button?
The replies so far are too complex. As simple as can be: function do_stuff(foo) { // code }; do_stuff(3 + 4); // function gets value 7 macro do_stuff(foo) { // code }; do_stuff(3 + 4); // macro gets value 3 + 4 (unsure how this is passed though) Example in real life: while(a &lt; 3) { .. } // while gets a &lt; 3, not True or False Macros are common in Lisp and Scheme, so look there for more information.
Yes.
I used defmacro in common lisp when I coded in that language a couple of years ago. Once you've gotten used to the idea of macros in a language you will forever feel like you've lost a leg when you no longer have them. Macros are truly a thing of beauty and can make for some very readable code when used properly. However they _can_ be a pain to debug when the bugs actually occur. But my experience was that you could save more time by using macros and occasionally having to do a slightly more painful debug session on one of the macros than not using macros at all - so the net total was in the favour of macros (at least for me). I would be all in favour of including macros in the ecmascript standard, that would truly make me a happy camper. In the meantime sweet.js is now offically on the shortlist of libraries/frameworks I have to try out.
well.. what more than [esprima](http://esprima.org/) / [falafel](https://github.com/substack/node-falafel) do you really need for LISPiness? Mechanisms for more modularity maybe...
A macro is a function that is intended to be run at compile time, rather than at runtime. Almost always, the output of a macro is the source code to actually run during runtime. Think of it as writing a program A which produces a program B, and it's program B that you actually want to run.
Also, the shelf object doesn't seem to do anything, and uses the shelf arrays before they've been assigned.
Thank you all for the replies.
You can create var shelf = []; And then shelf[i] = [array of books on that shelf]; Then you're not limited to how many books are on the shelf. You can also use an object for a book, so that it contains the title, author, year it was first published etc... Example: {title: 'Lord of the rings', author: 'JRR Tolkien'} You can then put that object into an array: [{title: 'Lord of the rings'.author: 'JRR ToLkien'},{title: 'Slaughterhouse five'}] So here, you can get an idea of how to insert an object into an array. So what can you do with this? Well, I would ask the question; Can I sanitize the data and make it symetrical? What data am I missing? Can I get a database query to fill the gap? Now you will envariably encounter the Ajax limitation of getting data from another source. So, you will have to serve javascript from a matching domain to create the variables that you need to create the complete data. Then you are seeking a javascript object that you can use to retreive data. For example, I collect data from a domain: x.com/javascript-containing the data that i require.js This can be built for example... So that you can collect data from other data sources that are not unique to yours.
you might want to look into spaced repetition learning (wiki http://en.m.wikipedia.org/wiki/Spaced_repetition). In particular the tool http://ankisrs.net/ , some have had success with it. hope this helps.
*Excerpt from linked Wikipedia article about* [***Spaced repetition***](http://en.wikipedia.org/wiki/Spaced_repetition) : --- &gt;**Spaced repetition** is a learning technique that incorporates increasing intervals of time between subsequent review of previously learned material in order to exploit the psychological spacing effect. Alternative names include spaced rehearsal, expanding rehearsal, graduated intervals, repetition spacing, repetition scheduling, spaced retrieval and expanded retrieval. --- [^(about)](http://www.reddit.com/r/autowikibot/wiki/index) ^| *^(/u/jorda0mega can reply with 'delete' if required. Also deletes if comment's score is -1 or less.)* ^| [^(flag for glitch)](http://www.reddit.com/message/compose?to=acini&amp;subject=bot%20glitch&amp;message=%0Acontext:http://www.reddit.com/r/javascript/comments/1urpey/best_way_to_remember_what_you_have_learned/cel8xds)
So, you want us to do your homework for you?
Non-snark answer: 1. Consider whether http://reddit.com/r/LearnJavascript is a more appropriate place to ask your questions. Sometimes, a more general forum like this doesn't work because the community is energized around discussing new ideas or trends in the language rather than discussing design or implementation choices for a specific problem. 2. Focus on solving one problem at a time. From your question, it is not clear whether you are experienced with OOP but new to the specific mechanisms and widely-used practices of JavaScript, whether you are experienced with non-OO JavaScript but new to writing OO code, or possibly even new to OO programming in general and new to JS. Making this clear in your question would help people know where to begin when answering it. 3. As a follow-up to the point above, if you are new to both OO and to JS, then you are trying to accomplish too much with this question. I don't know if it's a challenge you've set for yourself or whether it's homework from a course of some kind, but if you're trying to model a public library with three entities and you don't know where to begin, sure you can find answers, but you really need to back up and work on something much, MUCH simpler, perhaps starting with just one object. 4. Now that I've said all that, why do your books have `.shelf` and `.unshelf` methods? This does not seem like the responsibility of a book at all. This is like having an array `var numbers = []`, and writing `42.addTo(numbers)`. The larger issue here is that you're trying to enforce one-to-many relationships, and the best answer might be to model the relationship directly.
Have you not just described a compiler?
In his example of: rand x; Would this not be redundant as the macros would be run when compiling? So your script would be compiled to always use the same random number `x`? He explains it, but I don't really understand, would you be able to expand?
groovy has some interesting tools for debugging its dsl's allowing you to view the ast for debugging. 
You can think of a macro as a very tiny compiler, yes. In the example in the article, the author writes a compiler/macro that transforms a program written in JavaScript-plus-the-define-keyword, to plain-old-JavaScript.
Yeah, I used to hate javascript and am finding recently that it's BY FAR one of the most interesting languages I've ever used. It just keeps getting deeper and deeper with the things you can do with it. On top of that, they are usually things I would have never expected. That error message I actually printed intentionally, I'm surprised you didn't get it on on most levels. I calculate a maximum number of blocks to be able to place per level based on a maximum number when you're on the last level. It then TRIES to place that many, but it also won't place them if they are too close together, after trying for so long it gives up and prints that error out telling me how many it wasn't able to print. I kind of left it in mostly as a signal for people to know the code was doing SOMETHING and thus loaded. I probably should have just printed out something like "Loaded..." though, eh? ;-) I'm actually doing something for your Galaga game right now. I code professionally these days but I haven't been able to be interesting in coding outside of work until you made the original post. It's just a lot of work to start from scratch, but at the same time I've been dying to do SOMETHING. So, yeah, hopefully you don't mind. I'll keep you updated on stuff.
OK awesome. Yeah method-combinators reminds me of youaredachef, and I was going to ask if you were familiar with it but I just googled it again and it looks like you made that too? Or wait a minute, I mean raganwald made both youaredachef and method-combinators. I think I used youaredachef in a project a year ago or so. So method-combinators is an improvement on that I guess? Allong.es looks interesting although I avoid JavaScript if I can because CoffeeScript is easier for me. But allong.es reminds me of some stuff you can do with LiveScript I think. Are you familiar with http://livescript.net/? I have played with it a little. To me seems like the next language for me to learn if not Go.
Method combinators and YouAreDaChef both do the same thing, but with different design tradeoffs. Method Combinators is more functional, you change a method's function and that's that. Fewer moving parts. YouAreDaChef is more OO and AOP: You can specific things to change with regular expressions, and most critically, it respects inheritance hierarchies. You can do things like put before advice in a superclass, and the subclasses will inherit the advice alongside their own advice as well as their overrides (if any) of the base method. Or you can put some advice in a subclass without overriding the superclass's method, and you don't have to worry that you're mutating the method for all subclasses.
Nice try NSA
I was in Chrome 31.0.1650.63 on Mac OS X, which explains why stats was saying "Accuracy not sufficient (22000m vs 500m)". If this is the reason why chats aren't showing up, you should notify the user directly with a modal or alert message.
Another option: https://github.com/auduno/headtrackr
How does this work with asyncronous data? client.apps('my-app').collaborators(); Shouldn't this receive a callback or return a promise? 
I'm getting this alert: License warning You don't have a valid license for visage|SDK FaceTrack. Please contact your sales representative. (Error code 0x00000010)
Ugh. Seriously, what's the point of lists like these? I did click out of curiosity and was quickly overwhelmed by just the sheer number. I mean, 60 random bits of functionality, with no focus what-so-ever? At least when people post things like "10 CSS productivity tools every web developer should know about," it's specific to CSS. If you're interested in CSS productivity, then it might be useful to you. This? I feel like I just received 5lbs of junk mail. If I ever need the functionality these sorts of plugins provide, I'll either write it myself, or search Google for "color swatch jQuery plugin." There is no way in HELL I will remember anything on this list, and I'm sure as hell not going to bookmark it, along with the thousands of other similar lists. Got a jQuery plugin you fell in love with, and you want to tell the world how you used it? Fine, great, that's awesome and useful information. You (whoever wrote the post) are just spamming us with this crap. Context is important. This is the equivalent of your narcissistic friends interrupting the conversation to tell us about their new makeup mirror.
One of the more robust html5 sound players: http://www.schillmania.com/projects/soundmanager2/
Hmm. I was just getting "camera access denied" alerts as I don't have a web cam. I'm assuming you have a web cam and my post is probably a lost cause (have to license something for the demos). C'est la vie... Thanks for checking it out and posting your results.
can confirm this alert. it appears that visage technologies didn't pay visage technologies to use their visage technology ;)
If Grunt works for you and if you're happy with it, other task managers has nothing that can convince you. Bud is for people who think Grunt is terrible. Personally I can't even stand looking at Gruntfiles. They're written for machines instead of people. Besides, they require plugins unnecessarily. It's just ridiculous to write plugins that are already available as libraries or commands.
Yep, I'm on an iMac, I can see the webcam feed on the page. I get the alert when i hit the "start" button. I do see stuff when i click the results element though.
Yeah, that was just an example. Note that `client.apps('my-app').collaborators()` isn't an API call—it returns a proxy object to the `/apps/my-app/collaborators` endpoint. In the actual Heroku API client for example, you'd GET that endpoint like so: herokuClient.apps('my-app').collaborators().list(); The Heroku API client for Node does something more or less like this: var constructor = pathProxy.pathProxy(Heroku, "/apps/{app_id_or_name}/collaborators"); constructor.prototype.list = function(callback) { return request.get(this.path, callback); }; See [this function](https://github.com/jclem/node-heroku-client/blob/v1.0.0/lib/resourceBuilder.js#L19-L50) for exactly what it does. It creates functions that accept a callback and also return a Q.js promise, so either of those async methods can be used.
Enforcing privacy using a closure would result in 4 functions and 1 closure remaining on the heap for *every* instance of the event emitter. This, although acceptable if you *must* enforce data-hiding, isn't really necessary in this case. To borrow a commonly used notion from Python: &gt; We're all consenting adults here. If it starts with an underscore, don't mess with it. When using methods on the prototype (as it is done currently), the methods are not re-declared, they're delegated to. That is, every instance uses the same `on()` method from its prototype chain, called within the context of the instance so `this` is correct. Furthermore, this approach would preclude using this as a mixin. Mixins aren't afforded the luxury of constructors, so they can't rely on things that are declared during construction time.
The reason there are so many X to JS compilers is because many of us want to develop for the web in the language of our choice **instead** of JS but we can't. So we go looking for compromises. I can see many reasons why one would want to use another language, such as static typing, better integration with the server side by sharing code (just like some people want to run JS on the server because they already run it on the client, others want to do the opposite) or even sticking to a set of development tools and workflow they know and like. That macro stuff gives more flexibility to the folks who want to use plain JS. So I think it addresses a different crowd. I'm sure there's overlap but by and large I think it's different groups.
Nope, it doesn't "fix" this. Try the following code in your console: var arr = [1,2,3,4]; // Remove all values &gt; 2 from the array arr.forEach(function(value, index) { if (value &gt; 2) { arr.splice(index, 1); } }); console.assert(arr.indexOf(3) === -1, '3 should not be in the array'); console.assert(arr.indexOf(4) === -1, '4 should not be in the array'); You'll have to note that the array's length and all indices after the splice have changed.
Promises can be chained, so this code: promise.then(function() { // code to run when promise is fulfilled otherPromise.then(function() { // code to run when otherPromise is fulfilled }) }) Can be flattened: promise .then(function() { return otherPromise; // code to run when promise is fulfilled }) .then(function() { // code to run when otherPromise is fulfilled }) And yes, promises are standardized ([Promises/A+](http://promises-aplus.github.io/promises-spec/)).
I have no problem with innovation, just pointing out that the dynamic holds for task runners. And if we take the comic at face value, if there were 14 competing standards, there wouldn't be "a" standard there either. `Bud` is *a* standard, in the sense that it's touted as a standard way to do things. It isn't *the* standard yet, but who knows? Best of luck!
Wrote this to solve an issue I was having last night with my express app. I'm still pretty new to node, so I'm not totally sure if this library even has a purpose :) Looking for some feedback.
This. Get this crap post outta here.
Indeed, it is somewhat trivial, but I've seen the bad example too many times in the wild (with unintended consequences). You are right about the success callback/promise being a good way to know if your save was successful, but you'll still need to make sure that any other views representing the current model are updated properly.
Thanks. :)
It's pretty inaccessible for a javascript demo. Why isn't it just a page somewhere we can visit?
nice list, I've found a pair or three that will be useful to my projects.
I wrote simon says in javascript a few years ago, it was fun. But I've never heard of Bop-it. What is that? Should be a fun project.
I can't say for sure, but unless you're compiling your macros live (when you serve them) with node, this appears to be *exactly* the case (a one-time random at compile-time). That was a *terrible* example to have in an intro to a technology. They could just as easily have had something which actually expanded to include `Math.random()` in it. Why they chose what they did is beyond me.
You have the power. You can make it happen.
Yes I got a few of these messages, now I get it. Send me a PM when you complete your mod, I'm really curious at what you can come up with! :-)
These are some good tips, but as pointed out at the beginning they're &gt;7 years old. I feel obliged to point out: * `.bind()` is now a standard method on function objects. You don't need to write your own. * Chrome has a nicer debugger than Firebug, IMO. Chrome didn't even exist when this was written.
I updated it today with examples
Fair enough, I guess. Although I have to believe there could be a better example than a one-time random generator.
It tells me my browser (Chrome latest, Mac OS) doesn't support WebGL
With great power comes great responsibility. 
Have a look [here](http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options). It's a feature of streams in node. I only recently finally wrapped my head around streams. I highly recommend trying out the [stream-adventure](https://github.com/substack/stream-adventure) app. Helped me a ton.
WebGL is a graphics hardware spec
I haven't built anything with superfluous, but the ideas it implements are good ones and I don't think there's anything in open-source that attempts to tackle them right now.
Have a look at [this article](http://www.html5rocks.com/en/tutorials/es6/promises/) and [this talk](http://www.youtube.com/watch?v=V2Q13hzTGmA). 
&gt;WebGL (Web Graphics Library) is a JavaScript API for rendering interactive 3D graphics and 2D graphics within any compatible web browser http://en.wikipedia.org/wiki/WebGL
Sounds cool, but not working for me. I choose something from the drop down, and a bunch of green-lined masks appear over my face then disappear for a bit. Then that stops and I'm just stuck looking at my face. Chrome Win 7
Go to `chrome://gpu` and see what it says. I'm on Linux and have Intel graphics. Chrome reported acceleration was disabled due to driver instability. I decided to temporarily disable the driver blacklist (run `google-chrome --disable-gpu-blacklist`) to see if it worked. (It did. And I was sufficiently disturbed by the result.) You might try the same, but don't be surprised if you encounter crashes or graphical bugs.
The usual example of a counter uses a closure: function makeCounter () { var i = 0; return function () { return i++; }; } But what is horrible about making `i` a property of the function? It seems to me that depending on the implementation, there might be some memory advantages to avoiding a closure.
I must be confusing it with something else...
First time poster here! Thought I share some of the things I learned during my last project with the community. What do you think?
For your slides about Functional Iterators, why didn't you use the functional syntax of Lo-Dash? _([1,2,3,4]).map(function(i){ return i + 1 })
Thanks for the explanation. I realized the redundancy problem of storing duplicate methods after I thought more about how privacy enforcement would have to be implemented, but I did not think of the mixin issue
I think this would typically be solved by explicit promise chaining. If I have a situation where N operations may be called in quick succession and they have to be called sequentially, I usually will put a promise somewhere and just do `promise = promise.then(function() { return operation(); });` (where operation also returns a promise if it's asynchronous).
&gt; String Concatenation vs. Array.join As noted the article is 7 years old and the advice about concat vs join isn't relevant anymore (infact it's the opposite of what they advise). See http://jsperf.com/2string-concat-vs-array-join for more
While the list is long and varied, I did find a couple I think I can use. 
Tried it on my mobile and it was okay, then went over to the desktop and realized how cool this actually is. I love the responsiveness to my facial gestures http://i.stack.imgur.com/INS8w.png
Apparently I'm going to age well. Sean Connery mask looks great.
Could something like CoffeeScript classes be implemented with macros? I was actually thinking that being able to do something [like this](http://emberscript.com/) but just by using macros would be awesome. 
This library isn't so much about controlling the *order* of asynchronous operations, but simply preventing two from happening at the same time. Two promise chains can execute simultaneously, so I'm not totally sure how that would solve the problem.
What's the use-case? AFAIK, copyright shouldn't be automated. It's something that shows which year(s) something was produced (and therefore copyrighted). E.g., if I had a blog, and I wrote content 2005-2008, nothing in 2009, and then 2010-2012, it would say: Copyright(c) 2005-2008, 2010-2012 thismonthsusername This is done to show which year the copyright would expire (depending on laws, country, and content type). This could be anything between 20-70 years or whatever. Not trying to be a dick or anything, that's just my understanding of it.
A lot of people seem to dislike directives, they find it goes backwards, using javascript in the dom. They equate ng-click to the old onclick. Personally I like directives, it shortens the amount of code. I took the time to learn Angular and really like it, but I have zero experience with any other FE frameworks, so I am biased.
You're thinking of OpenGL, over which WebGL is essentially a thin API layer. And even OpenGL isn't really a hardware specification.
In the promise scheme above, the then blocks do not execute simultaneously. When a promise is resolved, it's then handler is invoked. IF that then handler returns a promise, subsequent then handlers are not called until *that* promise resolves. Furthermore, if you attach a then handler to an already resolved promise, the then handler is immediately invoked. It's like an asynchronous queue. That said, the only real reason to prefer promises over your library is that promises will be baked into the language soon, but otherwise it seems useful. 
I don't have anything against it, other than mobile performance. Every time I play with an Angular app on my phone it tends to be just a tad slow.
I don't like how it destroys the separation between js/html/css. I consider it a hack (which Google essentially admits). They tried to turn the web into something its not- a noble but awkward endeavor. Then obviously the usual complains about documentation. There are plenty of articles on this topic. That said I think its easy to start using angular, and is probably easier for a non-web developer to pick up. This is in comparison to other frameworks where its smarter to have a thorough knowledge of the entire framework in order for it to be most useful.
Came here to say this... browsers actually optimize for string concatenation these days.
I think I'm going insane... I was about to say that without framework `typeof $ === 'undefined'` ... but it's not! Is this a new (or old) feature of ECMAScript that I've completely missed until now? In most cases jQuery will assign itself to `$` -- without any framework I was expecting it to go unused, but I'm getting : function $() return window.document.getElementById.apply(window.document, arguments); } also, function $$() { return window.document.querySelectorAll.apply(window.document, arguments); } What is this wizardry?! Well that's it, I'm basically done with jQuery ... it's got a lot of cool features &amp; all, but really all I'm after is a shortcut to getElementById or querySelectorAll. *edit* this is only available in various developer consoles, see replies.
I'm not a huge fan of monolithic frameworks. Like if I want to use React like all the cool kids, how does that fit in with all the other stuff Angular provides besides data binding? Seems to me it often makes more sense to use more self-contained libraries.
It keeps thinking there's a face in one of the shelves on my book case... I'm thoroughly creeped out.
http://auduno.github.io/clmtrackr/examples/facesubstitution.html
Right, I have some decent experience with promises through my library, cleaver: https://github.com/jdan/cleaver This library solves a different problem, though. Promises help you control the flow of asynchronous operations, while this library *prevents* a resource from being accessed by two asynchronous operations simultaneously. One use case is a database where we need to 1) get the data 2) change it and 3) store it. Between steps 2 and 3, another event could come through and also fetch the data - which will be out of date at this time. It's sort of like a mutex, only in a single-threaded world.
 &gt; The ffmpeg.js file is around 24 MB or so. It ends up being around 6MB transferred if it is gzipped. The original version before optimizations was around 50MB. How do you even edit that file or do you just hope it works?
It's talking about [prototypejs](http://api.prototypejs.org/dom/dollar/) which was the thang before jQuery arrived in 2006. The reason jQuery has `jQuery.noConflict()` is because it needed to coexist with prototypejs which had already "claimed" `$`, at least until jQuery became popular.
http://i.imgur.com/6wlrRQL.gif so cool how demos only possible in c++ are moving to js one-by-one.
I am against Angular JS when you get brought into a project that has set up everything completely insane and you are wondering why you even bother doing web development anymore. When it's set up in a sane way with reasonable design decisions, it's just like any other libraries that assist with rendering and application modeling.
I'll preface this by stating that I do not know angular, or have any time with it. But... What a lot of people don't realize is that cult following a framework is just as dangerous on a project as a roll your own framework. They won't do everything for you and will likely get in your way when it comes down to the brass tax of writing the logic that matters to your app. It always happens 40% of the way into a project. You've taken advantage of all the wonderful features you have learned from that todo-list sample app tutorial and then you encounter an app requirement which doesn't jive. Suddenly the [framework]-way of doing things won't solve your problem and you're faced with the reality of working AROUND a framework now versus IN IT. Here is where 'hax' are born or plugins added in. Its all baggage now. This is the catch and caveat to the great [framework]-way. I think angular is great. Its moving the web forward. But I feel it assumes too much, looks WAY to involved, and I haven't seen it used in a variety of ways that makes me confident enough to add it in my toolbox.
Author of a very large enterprise webapp here. If you plan your structure in advance and properly handle your memory management and separate your concerns then it keeps flying even in very large apps. Angular is really good at running as a large app while being a bunch of small apps at the same time. If you break up your sections into drop-in-able modules then each one will load in and load out as the user moves throughout the app.
Looks like it should work perfectly, but the face shape keeps moving to the left hand side. Anyone experiencing this?
ahhh yes, that's better... `ReferenceError: $ is not defined`
I did it with the embedded firefox console, tried it in IE and I got the same thing... I guess everyone is on the same page these days; it's nice to see.
Some of these **aren't even jQuery plugins.** This poor excuse for a post is nothing more than copy-pasted descriptions of 30 random JS projects. It's spam designed generate impressions of the 6 ads you see the second you load it. I already reported it to the mods. OP, please kindly avoid posting content like this in the future.
Thanks for the interest. There are plenty of examples where companies opt for simple copyright format. See [github.com](https://github.com/). I don't intend copyright.js to server every single copyright scenarios. Your use of copyright actually rare. Imagine managing several dozen pages that includes copyright text in several dozen places. It would be convenient if the year incremented as the new year comes.
It's actually talking about the library Prototype which was a thing back when jQuery was just gaining traction. I'm sure it's still in use somewhere, but it's definitely not ubiquitous enough these days to justify a mention.
&gt;brass tacks 
You probably shouldn't rely on the client's date for your copyright. If my PC clock was set to 1970, this could even raise legal issues.
I haven't used it yet, but it really looks as if they intentionally chose an orthogonal way to all the current HTML standards. 1. Attributes with `ng-` instead of `data-` (I know about `data-ng-` but that's way too verbose). 2. Elements ('directives') without hyphen in the name, which is a currently required for true [custom elements](http://www.w3.org/TR/custom-elements/).
I just don't like mixing `data-` behavior attributes in my HTML. I prefer templated HTML with something like Handlebars.
I myself have been using AngularJS for two months now, and here are my top 3 + 1 complaints so far: - Many libraries cannot be used with AngularJS out of the box and need AngularJS adapters. Adapters for some popular libraries exist and for other libraries you have to write them by yourself. This in turn decreases developer productivity, at least in the short term. You find yourself spending a good time writing AngularJS directives, etc. rather than implementing app logic. - The *digest loop* looks like an ugly hack to me. To quote the [documentation](http://docs.angularjs.org/guide/scope): &gt; Angular enters the $digest loop. The loop is made up of two smaller loops which process $evalAsync queue and the $watch list. The $digest loop keeps iterating until the model stabilizes, which means that the $evalAsync queue is empty and the $watch list does not detect any changes. - AngularJS, despite being a large library by itself, cannot handle some common patterns in Web apps outside the box (e.g. *nested views*). You have to depend on yet another [AngularJS library](https://github.com/angular-ui/ui-router/wiki/Nested-States-%26-Nested-Views) to implement these patterns. I will continue using and learning more about AngularJS in the current year, but I am afraid it might turn out to be yet another short-lived over-hyped framework.
I don't like the vague errors and stacktraces from deep within angular. I find setting up modules, services, resource providers and controllers quite a chore. I really hate having to provide strings for the names of those components. It feels like I'm writing a java-esque architecture in the most loosely typed (stringly typed) way possible, combining the worst of java and javascript. I don't understand why I must specify the dependencies between components, between modules and load all files in the right order (I must be doing something wrong). But the biggest gripe I have is that it totally removes your freedom to architect your app the way you want it. It really dictates your app's structure much more than any other framework. This might in principle be a good thing but I find it f***ing irritating. That being said.. It is very powerful. It lets me do a lot of things with very little code (I just realized I haven't written any event handlers yet in the app I 'be been writing for a few weeks). I love the binding code you write right in the html, and it doesn't violate seperation of concerns because you're only allowed to write simple view logic (ng-options I love you!). And the best thing: it brings componentized development to (Angular's enriched version of) HTML. But for all that developer power it's a surprisingly irritating framework. I probably will choose it again if it fits the project. But I'm happy enough not to use it when I don't need it. 
Being 40% into the project, suddenly having to work around the framework and starting to implement ugly hacks pretty much sums up my first and very painful experience with EmberJS.
you don't, emscripten builds it and you link to it. the custom code will not be in the large ffmpeg.js file its much like regular programming, you build a library and can then talk to that library from other code
Im not against Angular but my least favorite is how sometimes I'll find myself in situations where the template loads before its parsed and will show a bunch of brackets all over my UI. I've also had issues with ajax content loading and shifting the UI which hits the user right in the eyes.
&gt; I don't understand why I must specify the dependencies between components, between modules and load all files in the right order (I must be doing something wrong). It's because Angular's modules are just a module system, not a module loader. They leave [that up to you](http://docs.angularjs.org/tutorial/step_07#multiple-views,-routing-and-layout-template_a-note-about-di,-injector-and-providers). 
[ngCloak]( http://docs.angularjs.org/api/ng.directive:ngCloak) might solve some of those display issues for you.
I don't like loop and other ng- attributes inside the my HTML markup, i prefere handlebars. Then React.js is more future-proof than angularjs http://www.youtube.com/watch?v=DgVS-zXgMTk
The digest cycle is a pain, but it was the right choice. Dirty checking is what allows Angular models to be POJO (plain old JavaScript objects) where Ember needs a custom object. Dirty checking can have performance issues, but the core team can/will start using Object.observe as ES6/harmony matures. As JS grows, a lot of Angular downsides will stop being relevant (assuming you're willing to drop support for IE8). For example, who cares about embers computed properties when you can use Object.defineProperty to define a getter the right way?
At that point in time Ember, Knockout and others will obviously join the party.
&gt; I don't like how it destroys the separation between js/html/~~css~~. With other frameworks, you do a lot of DOM traversal. That's actually a bit worse. Anyhow, you have to spot-weld the JS and markup somewhere. Otherwise those two parts can't interact with each other. Angular does it this particular way because it makes testing easier. Testing is their primary focus.
No question. I'm not as familiar with knockout, but Angular definitely places a much higher emphasis on "it just works" two way data binding than Ember. That means things look a little janky in places right now (no universal access) but only temporarily. 
There will never be a standard attribute with a dash. A collision won't occur.
Same here with Backbone. Oh, you'll need Marionette. Spine might be useful as well.
It didn't change. Validators will complain. Browsers don't care though.
Exactly my point. Angular is not built to handle state, memory management, or modularization out of the box. This leaves you writing a lot more boilerplate code than you will with something like Ember. If you are writing large enterprise web apps, as I am, I encourage you to at least TRY Ember.
This issue of working around a framework rather than having it work for you always comes up with any framework. The other side of this is that Angular's DI system makes sure your app isn't leaking DOM nodes and events all over the place. It's testable and it's reasonably fast. It's not impossible to do the same with a less opinionated framework like Backbone, but so many devs made mistakes and produced messy apps. Not every application is best written in a framework, but I'd certainly argue that frameworks are far more appropriate in the browser than on the server. 
[Disclosure](http://tlv1.fm/episodes/2013/12/02/disclosures-soulful-track-and-aeroplanes-remixes-mayer-hawthorne-the-selection/)! 
OpenGL is more like an abstracting API spec. It allows people to use different graphics hardware using the same software. [wikipedia](http://en.wikipedia.org/wiki/OpenGL)
&gt; I know you like MVC so I put MVC in your view so you can control some models while you view some controller Or for a book: &gt; JS frameworks, MVC all the way down.
how is it meaningless?
Of course it works in browsers -- no one would use it otherwise. But other frameworks (e.g. Knockout) demonstrate that standards can be followed without sacrificing functionality. I do not like the sentiment "let's just ignore the standard completely". It sends a wrong message.
You can use data attributes if you want.
If something doesn't work out of the box using "the angular way", it's a lot more code and head-scratching to fix it than coding from scratch would have been
excactly my thoughts... why not just use event delegation?
&gt; I don't like how it destroys the separation between js/html/css 100% this, long ago clever people pointed out the need for a separation of concerns on the web and we've spent many years refining unobtrusive Javascript techniques to enable this, Angular just threw all that out the window, I hate putting JS expressions in my mark up feels bad man. 
This is why I've switched to react from facebook, I'm much happier writing JS that renders mark up than mark up that contains JS. 
I ran into this when I had to support IE8 and IE7 browsers newer than that cab support it just fine
I wouldn't say against. I just prefer most other frameworks over it. I did a serious evaluation of Angular a few weeks ago and it was a mix between fun, neat, and hacks. When I think of a SPA framework I don't want to reload the page (which a lot of Angular apps do, look for yourself). Between that, hacking, and I mean REALLY hacking in layout support with and without UI router, it was a pain. Scopes / Services with DI were far too easy to mismanage and become a giant mess. I'm not even going to go on about using HTML for templates because that's a totally different beast. The only thing Angular does right in my opinion is two way data binding. Everything Angular does I feel that I can do better and cleaner with Ember. Not everyone will have that opinion and it's not a blanket statement, it's just from my experience.
Ember.js core team member here, pardon the bias: I really like Angular, particularly that it has solid testability primitives built right into the framework/toolset/whatever Misko calls it. I also really dig the concept of directives, and how multiple directives can be applied to a single element, vs the typical approach of having a single view object maintain a DOM element. The biggest issue I have with it though is that you very very quickly reach the end of what Angular can do for you when it comes to structuring applications, at which point the community fragments as to best practices, and the few people that have figured out how to write large-scale Angular apps all do it in a different way, which greatly limits the battle-testing for any particular approach and I think ultimately explains why there are so few large Angular apps their in spite of its relatively large mindshare. I also feel that once you get over certain challenging conceptual hurdles with learning Angular (like dependency injection, or how scope works and how you have fine grain control of the behavior of scope within directives), it starts to make you feel very good about making poor decisions, particularly since there's no suggested application structure in Angular. So, many folk end up spaghetti-injecting services into directives where they do not belong because 1) Angular makes it ridiculously easy to inject anything anywhere and 2) overcoming the conceptual hurdle of DI makes many folk feel that if you're using DI, you _must_ be doing something right.
It's so opinionated? I mean ... you have to do everything THE Angular way ... rewrite everything to use the directives .... Any one used Backbone.js will know what I mean
It's a framework, of course it's opinionated. Frameworks change how the structure of your application will be, every single framework in existence does that, even the ones that are not for web development. Just look at Rails, Django, XNA, Qt, Struts, or any other. Criticizing AngularJS for being opinionated is like criticizing IDE's for handling projects.
Reading a lot of these comments has been like a breath of fresh air. I thought I was the only one on the entire Internet that was skeptical of Angular.
Backbone isn't opinionated. It lets you do everything your way and if you want some help it will provide it. 
As many have pointed out my main issue with it is that you have to do stuff "the Angular way" this does not float my boat. I must admit that I like Angular, but only when I treat as it Angular development and not web development. It feels awkward to apply my skills as a web developer to Angular, it doesn't feel wrong just awkward. I don't get the same feeling whilst using knockout. So it's not an MVVM thing. I will get back to you when I can pinpoint the exact issue.
Sure, I have covered that in my original comment.
I wouldn't say I'm against it per se, more that I prefer other things. I'm more of a build up from bare-bones type of developer. I prefer minimalistic frameworks that I can piece together instead of full-stack stuff. A take what you need mentality. I've built my main stack of requirejs, backbone, transparencyjs, messageformat, and a few other libraries.
This guy is, at least in some cases: [Frameworkless JavaScript](https://moot.it/blog/technology/frameworkless-javascript.html)
This diverges from the thread's topic, but how about Backbone.js? I realize it's more a library than a true framework, but does it worry you at all to see it dominating the limelight right now? I was hesitant to really dive into it because for as powerful and minimalistic as it is, it seems like that would give rise to a lot of conflicting best practices and spaghetti code later on down the road.
What kinds of ugly hacks are you finding necessary with EmberJS?
I can understand where the root of this concern comes from. The days of &lt;a href="#" on-click="javaScriptFunction()"&gt; were not the best, and seeing Angular templates can feel like a step back in some ways. The thing with Angular though that makes it different, is how those things are scoped and where the code for things live. Recently in some other apps that I've worked on - I get into the trap of - "When I do X on the screen, something odd happens", and then the cycle of trying to figure out 'Where/what is actually binding this event' can be messy. An overly simplified example might be &lt;div class='someClass'&gt;Do something with &lt;span class='someOtherClass'&gt;this&lt;/span&gt;&lt;/div&gt; And then I need to go rooting through a bunch of JS files to see what is binding/unbinding events. Maybe someone wrote an overly-eager selector that is sucking up someOtherClass and binding events to it. When I look at the mark up - I have no idea what is going on with it, or why. But, in Angular, when I see &lt;div class='someClass'&gt;Do something with &lt;span class='someOtherClass' data-ng-click='doSomething()'&gt;this&lt;/span&gt;&lt;/div&gt; and I know the controller that is responsible for this mark up - I instantly know where to go to start working with it. This is a very simple example, but I've generally found things easier to debug/track down sources of issues/knowing explicitly what is going on with my HTML &amp; JS. That said, I do think that you can get very abusive with you put into your templates. Angular does let you get into the bad practice of being able to modify the model from the view directly by doing things like &lt;span data-ng-click='something.property=something'&gt; --- which is generally a bad idea. I don't do this myself, and if I see other developers on my team doing things like that I'll get them to change it. The two-way binding between the model and the view is nice and has saved me many headaches, and I've generally enjoyed the flexibility of the Angular templates over using Razor views (I work in a .NET shop). So many of the typical use-cases/scenarios that I need to do daily that were a chore/pain to do (not hard, just tedious) are now brain-dead simple and fast to do with Angular. While I do understand the source of concern - I think there is enough going on with Angular, and how they handle it - combined with controllers/routing/services/etc that is is different and the pay off is worth it. 
I like it too. Especially because you can take a quick glance at the HTML of an Angular app and instantly have a pretty good idea of what is going on and where to find the JS code you need to change. It's no problem if you made the page yourself but if you jump around a lot between pages made by other people it's a pain to try and guess where the bindings might be hiding, especially if the project does not have a very strict structure.
When I was playing around with various frameworks before deciding on Angular, I tried building a few smaller things in EmberJS. It always seemed like I would 'code myself into a corner' that I couldn't really get out of w/o simply re-doing things from scratch in a different way. I've never really felt that 'backed into a corner' with Angular, and have generally found it really easy to refactor things/shift things around without it being a 're-write'. I find that Angular is rather un-opinionated about most things, which lends to a little more flexibility with how you approach building stuff. Although I have heard people argue that the lacking of an idomatic 'angular way' of handling some things is a downside though. The only real time where it felt like I was 'fighting the frame work' is when I was wanting to do nested views / named views / etc and have a small section of the screen change based on a URL change without having the entire controller/view get destroyed and re-created, but this is solved with the ui-router and hasn't been an issue any more. 
http://customelements.io has a bunch of web components.
Don't get me wrong, I am a rather rabid adherent to writing JS with a functional style, and this example is poorly articulated. I suspect we agree on a great many things. I just don't want to give the impression that functions using their own properties for state is a horrible practice. I believe it has some places where it is appropriate. Your thoughts on [this example of a function that maintains state in its own properties](http://www.reddit.com/r/javascript/comments/1uunmp/flavourizejs_function_advice/) would be appreciated.
I wish this article was about native web components, not using the polymer polyfill. I want to see what web components will eventually be like, not how to get them to work using a framework today.
Exactly. This article isn't telling you how to use the web components standard; it's telling you how to use Polymer.
iframes are a specific tag that allow you to sandbox your own markup or pull in content from another site. Web components allow you to encapsulate and reuse your own tags with arbitrary functionality. Your question is kind of like asking what's the difference between a normal HTML element and an iframe. The linked article does an excellent job of explaining what web components are. You should read it.
Agreed... I have had success using directives to clean up all the ng-clicks and ng-ifs... its a lot easier to look at the markup, find a directive &lt;mycooldirective&gt;&lt;/mycooldirective&gt;, then say travel to a directives/mycooldirective.js than to try and see where a possible ng-click, ng-if or whatever is buried. Angular is awesome for getting something up and running really quick though, and ng-click, if, etc. are a part of the reason. It's nice how few lines it takes to get something that can impress.
I got hurt bad on my first Backbone project, to the point where I found myself really resenting the 'sell' presented by the documentation. (Something that Backbone is less guilty of than either Ember or Angular, I now realize). There's just enough view support for a naive developer to think there's actually view support.
Angular provides a lot more than just data-binding. Are you using the routing as well? I'm in a .NET shop and just pushed us to start using knockout.js for data-binding and then using MVC for routing.
You should x-post to /r/learnjavascript 
While I'm not a huge fan of Angular, this is one of the things I agree with. Look at the following code and tell me what events are attached to the element, and in which JavaScript files I can find the event handlers: &lt;a href="#something"&gt;Hover me&lt;/a&gt; Now look at the following: &lt;div ng-controller="MyController"&gt; &lt;a href="#something" ng-click="go('somewhere')"&gt;Hover me&lt;/a&gt; &lt;/div&gt; Having `onclick` is actually a really good idea, as it makes it very easy to find out what an element is supposed to do.
Most libraries have simple ways to map keypress events to functions. You should probably start by researching that.
Meh, they're trying to demo static variables, _not_ how to make the world's best counter function, and I think the example serves that purpose. If someone blindly copies code from the net and throws it into their codebase, that's their bad. This is just an example, not an archetype.
You don't have to do everything in the Angular way. You don't need to use templates, you don't need to use $http or $resource, you don't need even to use modules. People use all of those to have a modularized and organized project structure, something that JS by itself is terrible in providing.
The smaller the library/toolset/framework/whatever, the 1) larger the adoption and 2) the larger the fragmentation as to how to build large scale apps, but then again, 3) the higher average of percentage of the API surface that's actually used in any given app. The somewhat negative points 1 and 2 are always at odds with 3. The average Backbone app probably uses 95% of Backbone's API surface. The average Angular app, maybe 80%. The average Ember app, I dunno, 70%? Less? To some, it seems crazy that you'd load a heavyweight framework like Ember into your app if the chances are you'll use less than 4/5's of its API surface, but then the flipside is: 99% of Backbone apps that do nontrivial things need additional structuring from another lib/framework, or they need to write it themselves without (or with much less) community battle-testing, and most Angular apps, well, are mostly small to medium scale (I don't think there's a lib that provides additional structure... is there?), and I've never heard of anyone needing additional structure for scaling Ember applications. So anyway, none of this stuff worries me; everyone wins from the various libs/toolsets pursuing their various philosophies. I'll go to whatever scales. I just don't see anyone trying to solve the application structure problem to the degree that Ember does. 
I'm a big angular user. I created [Plunker](http://plnkr.co), which is 100% written in Angular.js as a part of my learning experience of the framework. My biggest gripe is the challenge of server-side rendering. I would like a mechanism to deliver pre-rendered markup to the client side and have that markup then 'taken over' and cached by angular as a template. I'm sure there is some tricky way to put this together, but for the time being I have not seen a clean solution.
Nice, I'll check it out.
Just to address your last point: &gt;AngularJS, despite being a large library by itself, cannot handle some common patterns in Web apps outside the box (e.g. nested views). You have to depend on yet another AngularJS library[2] to implement these patterns. ui-router is about to be integrated into the main Angular distribution. 
I think it's interesting, but I'm not sure if it's interesting in the "oh this could be fun" way, or interesting in the "this could be really useful" way; I make the distinction because many things that are _fun_ aren't practical for real-world codebases (too clever, etc.). This looks like it could be too clever unless your team is fairly mature; but at the same time, given an adequately-skilled team, it could be immensely powerful. It _sort of_ reminds of jQuery's `$.Callbacks()`, but I think just because it is a sort of function queue, which seemingly can be interrupted by any individual function. It also vaguely reminds me of AoP, which I'm not really that versed in but which I find interesting. Curious if you worry at all about the de-optimization effects of using `arguments`?
Using it for much more than just data binding. If I was only using it for the data-binding, then there are other frameworks that would be a better fit (like knockout). 
&gt;When I think of a SPA framework I don't want to reload the page (which a lot of Angular apps do, look for yourself). They're doing it, so, so wrong then. You don't even need to use the ui-router to do this.
Gotcha, was wondering what other things it was buying you. Our shop is old-school. Most of the devs have been here for over a decade and started off in Delphi. They weren't given any specific training on anything and therefore I feel like there's a lot of blind leading the blind.
Interesting, I looked at Ember a while back when the documentation was nearly non-existent (or at least not at the level it is at now). But could you give some concrete examples of where people thought: "yeah I am using DI so everything is smooth sailing" where that was not the case? And maybe show how Ember offers a better solution than Angular?
Seconded (thirded?) about the separation, but I also find it to still be in the fad stage. I read a good analogy somewhere about the web being in the middle of a Cambrian explosion right now with client-side frameworks. I'll wait for the shakeout to end. Also, coming back to the whole separation thing, I've taken great pains to make sure all calculation and processing happens on the server and then is passed off to the view (html page) so that I can have non-coding designers contribute without having to bastardize/understand technical concepts.
While some of your observations are correct, they are heavily biased by your POV. &gt; It’s not a proper foundation Nowadays, knowing JavaScript/HTML/CSS and maybe a NoSQL DB is *all* you need for a full webstack. So it can be a proper foundation after all. &gt; [It] is a poor example of Object Oriented Programming Just because the prototypal Object orientation in JavaScript is not your classical model of inheritance doesn't mean there's anything wrong with it. It gives the developer enough freedom to have an OO approach when needed and doesn't get in the way otherwise. It's a good example of the freedom to choose OO (or else), something that seems to clash with every known instinct of any Java dev. &gt; everyone “knows” JavaScript This is very much the same for PHP. A low entry level will yield a lot of beginners. This is a problem for HR (which can be easily solved by including a good developer in the hiring process), but not for the language itself. If a company is too inept at spotting talented devs, it's probably the wrong choice for your career anyway. So your choice should be based on where you want to take your career. If you want to spend your time developing by committee, depending heavily on your IDE and tools to get anything done and work with constraints, go get yourself some serious Java knowledge before you even touch JavaScript. In any other case, a language like JavaScript (maybe also Ruby or Python) might not be too bad a choice to start your career.
This looks like a troll to me. All his reasons are vague value laden judgements. What does he mean by a "proper foundation", and why does he consider it a "poor example of Object Oriented programming"? I have no idea what the author is talking about referring to these concepts which he failed to articulate, nor do I understand why they should even matter in the first place.
It is definitely in the same family as Aspect-Oriented Programming. You can get similar separation of before- and after- responsibilities from core behaviour in a more functional way (e.g. with functional decorators and combinators), but the "OO" approach is reflective: You can inspect the queues. This pays off if you are into inheritance hierarchies. You might, for example, write a bunch or assertions and implement them as functions you unshift (to check preconditions) or push (to check postconditions). If `PaidUser` is a subclass of `User`, and `User` implements `initialize`, and `PaidUser` overrides the body of `initialize`, you want `PaidUser.initialize` to inherit all of `User`'s preconditions and postconditions. This kind of thing is rather heavyweight for most JavaScript.
Right now our shop has a crazy mix of apps - started in classic ASP/Oracle, then WebForms and SQL, then moved to ASP.NET MVC - we have are largely a .NET shop, and have Win Form apps, WebForms, MVC.NET, services, workflow foundation and a frankenstein of things being used. Currently have a mini-app/screen built using Angular in production that is living inside of a pretty standard MVC.NET application. It's an invoice-reallocation screen that is rather complex - dynamic columns, grouping rules, validation rules, sorting, calculations, etc. At the start, everything was just in one big file/controller, which let the initial prototype get done quickly. Then, started to break out things into their own services - there was quite a bit of complex logic needed for validations, calculations, grouping data, manipulating/transforming data. Those got broken out into a few services, and since those things didn't care about the DOM at all, and had minimal dependencies on other things - they then became super easy to write unit tests against, and was able to complete a great deal of functionality/verify it before even hooking it up to the screen. The requirements for the project were changing rapidly - new features, existing ones needing changed, etc. I've found with Angular, it was really easy to break things out into smaller reusable bits. Eventually one of the requirements became 'this grid, needs to be repeated many times for many invoices on the same screen' - and converting that screen/controller into a directive that I could stick inside of a ng-repeat was shockingly easy. It was something that when I first got the request had a 'dread in my gut i need to re-do everything' feeling, and was able to get it done in about an hour with minimal changes. I have had to build similar things before using standard JavaScript/jQuery/whatever - but the speed, ease and test-ability of building it with Angular was pretty awesome. If I had been trying to do it w/o Angular, I don't doubt it would have taken me much longer to do, not be as fast/stable and also be harder to maintain. We have another application that we are building that is new from the ground up using Angular, and making use of the full set of things. The out of the box routing with Angular isn't the best for complex apps, so we've recently started using the ui-router which is pretty sweet. It's been one of those 'ah-hah' moments that has changed how view/think about building apps/pages. Nested states, named/multiple views, state inheritance, etc. Opens up a rather new way of approaching things. Yes, I could roll all of this my own/in house, or cobble together other various things to do it for me - but I've found that Angular(+ui-router) to be a rather complete/stable package that helps me get things done faster. I get paid to build software, not frameworks - and for the most part I've found Angular to be a huge benefit. It still has it's faults, and the learning curve can be a bit wonky (sort of goes from super easy, to 'omg,wtf?! I hate you!', to being reasonable again), and i find that directives/scope can feel more confusing that it needs to be at times - but all around I like it quite a bit. 
Exactly - you can do it both ways. You can even start off with ng-click etc., then move on to a directive if it becomes too bloated. Which is not too much of a hassle, considering you don't actually spend any time "developing" an ng-click. I've recently jumped into a huge webapp that I need to help develop, made entirely in jQuery. It's not structured well enough, since it started off as a bit experimental. Now, every time I have to find a binding among the thousands of files the app consists off, I have to do a "search in all files" and wait for it to find something I can use.
Show me where JS claims to be OO? It's not - nor does it claim to be. It's prototypical. 
It's funny, because your story sounds so similar to ours. We had the requirement for a super quick release (that, of course, didn't get used anyway) for a full app. Without knockout.js we wouldn't have been able to do any of it. We simply wouldn't have been ble to turn it around. Now, a week after the release and I have significant UI improvements that haven't impacted the viewmodel or model at all. It's nice to know my crap just works and all I'm doing is working on is the UI. I used to be so scared of web work until knockout. I would like to spend time with angular, because it seems that some of those features you have aren't handled supremely well with knockout. Like validation.
Been using it since 2.0.0 - what's new?
Javascript is the best tool for many jobs, but only a sadist would recommend it for a first language. If someone is still trying to wrap their mind around variables and functions do you really want to subject them to hoisting, 'this' ambiguity, and a 'truthy/falsey' boolean system? 
It's not for me to come in and say that something's not smooth sailing if it demonstrably works, but if something's not working / not scaling in an Angular app and there's some jQuery spaghetti-ness that's starting to come back into it, the ease of DI anything anywhere is often a culprit. Any Angular directive can pull in a service that, say, does an Ajax for data, so it's very tempting, particularly in a situation involving deep nesting, to want to throw in some directive that DIs an ajaxy service to grab the data it needs to display, but what happens if the ajax query fails? Who's going to handle the errors? Is it the directive's responsibility to also broadcast an error event? If you go this route, can you really say this directive is single-focus and easily testable? The DI-anything or $rootScope approaches are made very very accessible, very enticing, but is hard to say no to these less testable, less scalable approaches unless you maintain a sensei level of discipline. Ember offers dependency injection but the decisions for what you ought to inject are made for you, and if you really want to take the inject-whatever approach, you've got to dig into some more advanced features. So for instance, you have a Router, which assembles data to provide to controllers. Controllers don't really know about the router but can bubble events up to it, which enforces a testable level of separation between the router as an application state navigator and controllers as application state managers. Controllers can access each other via DI by specifying a `needs` property which is easily stubbable whilst testing. Components, which are reusable, composable, self-contained, isolated managers of DOM/templates achieve DI by only having access to what is explicitly passed into them at render time. You _can_ break the rules and do something crazy like inject the router into a component, but the framework makes you feel really gross about doing it, and if you're thinking "there must be a more Ember-y way of accomplishing this", you're probably right. 
[This](http://vpictu.re/8lft5g.png) image is saved in my References Bookmarks folder for a reason. It's very useful indeed. I recommend you take a look to find the IDs of the keys you'd like to bind. I usually use the [jQuery](http://jquery.com) library when writing JavaScript, so a key binding looks like this: $(document).keydown(function(e){ switch (e.keyCode) { case 87: console.log("w key pressed"); break; case 65: console.log("a key pressed"); break; } });
It will round the last digit if necessary, so you should be good. No problem! :D
Unfortunately, that didn't do it :(
.toFixed returns a string. Did you do anything with the string before displaying it?
Change line 192 to var rowTotal = (numPallets * multiplier).toFixed(2); JavaScript uses floating point math which isn't always the best when it comes to decimals... try adding .1 + .2 to see what I mean.
Please don't take my word for it if this is an actual business application. But this should solve your problem as long as you are only operating with whole numbered quantities. Just do the calculations in cents. total_price = ((price_per_unit * 100) * number_of_units) / 100 But don't take my word for it. I've never worked with calculating with money but I do know there are a lot of pitfalls because of floating number errors.
Thank you thank you thank you! That fixed my problem. I really appreciate it.
try Math.round(8.499999 * 100) / 100
I'm using at work for a new CMS. I like it (although the learning curve for me has been huge, coming from a jQuery background) but I would never use it for anything user-facing or frontend. What I mean by that is that we're building a back-office tool used by probably less than 1000 people who are all on high-end devices with modern browsers. I'd never want to put it in front of our real users (80m uniques / mo). The fact that it doesn't work in older browsers and seems to be essentially impossible to build with using progressive enhancement puts me right off. Also, tiny errors can sometimes cause catastrophic browser memory leaks: once I removed a "name" attribute from a form tag which caused my console to spam 4000+ errors in a few seconds until the browser tab ran out of memory and crashed. Obviously this is my coding error but it's not an isolated problem and has happened a fair few times. I can't imagine that happening to an end-user's machine. EDIT: I hate complaining about downvotes, but I'd genuinely love to know what was wrong with this comment.
I think it would be advisable to not get any rounding errors when dealing with money. I think this makes the most sense(cents) :D .. 
Honestly I dont like that angular uses POJOs...it makes a violation of the UAP (uniform access principle) and just feels dirty...theres too much 'magicery' involved with POJOs and dirty tracking. And the decision to go with dirty tracking also has dome negative side effects itself that I am not particularly fond of.
And yet people don't explain how it is *too much* opinionated. It's not fanboyism of my part, I don't know *that much* about AngularJS to be able to defend it. But frameworks are frameworks, and they MUST provide opinions on how your project should be, otherwise they're something else.
1. Terrible promise implementation. Thrown exceptions trigger a state where a promise is rejected but handling the rejection is impossible: you can add in an error handler but the outer promise will stay rejected. 2. Terrible promise implementation, part 2. Promises are rejected with things like Http response objects. Good bye, unified error handling and reporting. I was trying to log error.message/.stack when locking into an unexpected rejection. Was fun to discover why nothing was logged. 3. Templates that force you to write "scope-aware" markup. Things like the magic bindings for collections (auto-update) breaking for `someCollection` but working for `someField.someCollection`. Mind you, it will render it quite fine the first time around, it will just silently not sync what it rendered. Unnecessary nesting levels of "&lt;div&gt;&lt;div&gt;&lt;div&gt;" fit into the same category. 4. Performance of or not-existing conditional rendering. We got ten form fields and scrolling started to stutter - because it was rendering and busy checking whole parts of the page that were not remotely necessary to check or render. We hacked our way through it by using switch-statements for boolean conditionals. 5. The directives-system which invents ~1000 options, none of which are cleanly and clearly documented 6. Breaking everything else on the page. You want to use angular.js with anything that is not angular.js? Tough luck, it will outright block any event handling that is not done by angular 7. Needing to look up and no real documentation about how to make pushState and hash work, depending on browser capabilities 8. The order and logic by which httpBackend.&lt;handle pending stuff&gt; and scope.&lt;apply&gt; need to be called in tests. It's terrible, way to complicated for what it does. That's from the top of my head. Currently moving a bigger app off angular.js because of those issues.
We're 100% in concordance on the example.
Correct. How do I have it process the initial load function for the menu only one time? I need it to read is sessvars.FirstLineHorizontal is undefined. If it is, then assign a value to FirstLineHorizontal of 0. If it is not undefined, then process either vertical or horizontal, depending upon the value of what it is. That is where I am having the trouble.
Doesn't knockout do the exam same thing?
I'd add that the expression "fully-featured Object-Oriented programming language" is treacherous in almost every context. Unless a language is packing a meta-object protocol of some sort (like CLOS or Smalltalk), it's hard to see the the "full" in "fully-featured." In JavaScript's case, I'd say it goes the other way. At the time this post was written, JavaScript was more of a "minimal Object-Oriented programming language." And I mean that in a good way.
This is a very interesting concept. It provides a nice interface for composing functions. **Practically:** The names are a bit funny. As previously stated "mixin" or "mixable" might be a better name. The method names are also a bit off. "push" and "unshift" make sense in the context of a single queue, but you have "befores" and "afters" queues. A fluid interface might be nice and provide more flexibility in the queues: &gt; flavored.before.unshift() &gt; &gt; flavored.before.push() &gt; &gt; flavored.after.unshift() &gt; &gt; flavored.after.push() **Philisophically:** My only concern is that the function itself maintains state instead of returning a new version of the function with the additional state appended. We often expect objects to maintain state, but we don't often expect this from functions. Used improperly it could cause some very strange bugs.
While the menu is outdated of sorts, it does work for the most part. The part that I am writing is just the switch between the two. There are going to be multiple pages with different menus so I wanted to have the reload function in the form of a button. I would write a full menu but the project I am working on doesn't have that much time for the deadline. Is there anyway you could show sample code of even the bad way? Interested in seeing where I am fumbling. Thanks much for the replies thus far.
Additional thought, it would be nice if methods returned the flavored function so I could do something like this: &gt; flavored.before.push(beforeFunc).after.push(afterFunc);
The menu system is dynamically built either horizontally or vertically given a static variable, which is called FirstLineHorizontal. If it is set to 0, it is vertical. If it is set to 1, it is horizontal. I would like a button to be able to change between horizontal and vertical which requires a page refresh for the menu to know which it needs to be and to be rebuilt. I am storing the variable into a session variable using the window name so sessvars.FirstLineHorizontal is not lost and I can read that even after a page refresh.
"it" may not claim to be, but plenty of people claim that it is.
yes. because the ultimate power that it's truthy falsey system gives you is overshadowed by the few seconds it takes to explain it.
Ah sorry, I didn't realize that he didn't post it (I got here through a link he made to it in a different thread). As for "function advice", you have to admit that's a terribly ambiguous term given the context (and the lack of context in the article). I _am_ familiar with 'advice' in the CS sense, but considering the setup for the post, that's not the connotation that immediately came to mind. So, now I feel a little silly, since you really weren't asking what I thought about the function...
Thanks, I actually find a use for this a lot! You're right that exceptions do bad things now. You could update the lock function to call cb for both the normal and error callbacks and I think it would work.
If you are working with money it's adviced to use some library that provides arbitrary precision. Floats are just for approximations and if you need better precision, use a better tool.
If you are going to be doing any order handling with actual money, you're probably going to want to not just grab random scripts off the of the internet and ask random people to fix it for you.
I am so stealing that analogy!