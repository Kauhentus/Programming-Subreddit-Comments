Obviously, first either learn or make sure you already know Javascript. Get [Greasemonkey](https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/) (for Firefox), Chrome (which supports the same functionality out of the box) or [the equivalent for your favourite browser](http://en.wikipedia.org/wiki/Greasemonkey#Equivalents_for_other_browsers). Then Google for a tutorial on how to create user-scripts for your browser - I found [this](http://www.howtogeek.com/howto/24790/beginner-guide-for-greasemonkey-scripts-in-google-chrome/) for Chrome and [this](http://www.webmonkey.com/2010/02/get_started_with_greasemonkey/) and [this](http://www.techradar.com/news/internet/the-beginner-s-guide-to-greasemonkey-scripting-598247) for Firefox in about three seconds on Google. Then head over to [userscripts.org](http://userscripts.org/) and look at all the other scripts people have written for ideas and examples.
&gt; I am attempting to use a form to stop them from having to refresh the page every time. Forms are for submitting data. How is using a form going to make them not need to refresh? &gt; If the user wants to change the start and/or destination, they currently have to refresh the page. How is it currently set up so that it requires a refresh to input more data? That sounds pretty screwed up. It would help if you could explain more about that.
Sudoku for programmers
Such a disappointment for a really good MVC.
**TL;DR:** There is an [impedance mismatch](http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch) between documentation and comments. Good comments should be about "Why?" in order to enlighten developers reading your coding and thinking, "What the hell was this idiot thinking when he did this?" Good documentation should start with "What?" to ensure that a developer finding your project can quickly determine "Is this for me?" Then documentation should focus on "How?" so that a developer can quickly get down to using your project. Almost no code comments should ever have a "What?" in them and very few should ever explain "How?" because this clutters your code. It puts physical distance between functions requiring more scrolling and navigating. Worse are those DSLs that have been developed to "help" document code because now one is required to do mental *context switching* just to read the bloody comments! So using automatic document generation tools is literally shooting yourself in the foot twice: First, because your resulting documentation will always suck and once again because your code will be a huge messy jumble of code interspersed by large blocks of comments.
repost when they add more languages
Well, that's where the sensible naming of functions comes in. If the convention is done from top to bottom (in terms of abstraction), a sense of the why builds up quite well. At least, that's my experience.
 function fn() { return this; } `fn()` returns the global object. This is because `this` defaults to the global object (in your browser, this is the window object. In other environments, it might be something else, or even null). var obj = {}; obj.method = fn; `obj.method()` returns `obj`. When you invoke a function as a method with this syntax, `this` is bound to the object you're invoking the method on. `fn.call(obj, fn)` is the another way of calling `fn`, where you pass in the object to be bound to `this` inside of `fn` as the first parameter. So, that's one part of scoping. The semantics of `this`. Those are separate from lexical scope (`var`). First and most important to notice is that at compilation time, all `var` statements are "hoisted" to the top of the function they appear in. For instance, function something() { var foo = 1; for (var i = 0; i &lt; 5; i++) { var str = "Hello, " + fn().toString(); var fn = function () { var v = i + 1; return v.toString(); } } } is semantically equivalent to this: function something() { var foo, i, str, fn; foo = 1; for (i = 0; i &lt; 5; i++) { str = "Hello, " + fn().toString(); fn = function () { var v; v = i + 1; return v.toString(); } } } That's sort of a lousy example, and won't even work (because `fn()` will be called before it has a value), but it illustrates the "hoisting" at least. The next thing to know is that when you're in the "global" scope (not in any function), declaring variables is exactly the same as assigning properties to the global object. There's no "lookahead" going on. `function` statements (where you're declaring a function) get hoisted up to the top of their scopes the same way that `var` statements do. Importantly, function *assignments* (`foo = function() {}`) do not get hoisted, they happen at the same time as other assignments. I don't know if any of that helped. I hope so. Feel free to ask for clarification :)
I am attempting to understand what you want clarification on. function foo() {var x = 1; this.x = 2; return x;} When this is run, we have two scopes: [foo's scope : x = 1] -&gt; [window's scope : x = 2] So foo's *x* hides window's *x*. var y = 1; When this is run in window's scope there is only: [window's scope : y = 1] So when the next statement is run: this.y = 2; You wind up just (re)setting the same variable in the same scope - there is no reference hiding: [window's scope : y = 2] Your last example is all about *variable hoisting*. Since *x* is labeled with a *var* inside the function (anywhere in the function), it is placed into the local (temporary) scope. The place to which variables are bound is determined when the function is first parsed and there can be only one! So the "var" is effectively *hoisted* to the top of the function. 
OP?
Not really worth it for just Webkit. I guess it could be a nice aesthetic addition, but for a jQuery plugin, I would expect Javascript to handle the animation in other browsers.
I think what got me confused was assuming there wasn't really a global scope. I was thinking there was the window scope which we were calling global, but that window was actually a child of something else.
No. Just no.
Original poster : )
This should probably put in the description, but this is mainly targeted at apps written using PhoneGap for iOS devices. While it can be used on the web, it is not the ideal use case.
I find that the more logically structured and elegant code is, the less edge cases there are to deal with. Sometimes getting something slightly "wrong" in one place will result in lots of edge cases in all other places. Not saying my code doesn't have edge cases, they are unavoidable. It's just much nicer to be able to find data representations, frameworks and algorithms that allow you to minimize the number of them.
This has nothing to do with scope. This is set by the caller when the function is actually called. For more information see [this post](http://www.reddit.com/r/javascript/comments/j2j8b/the_this_keyword_is_extremely_simple_and_doesnt/).
Upboated for actually giving (useful) content and information rather than being pedatic.
"this" is a scope though, is it not?
It's an awesome idea, and the admin is really responsive in addressing the bugs on his/her parser - word from the wise: dangling implicit else blocks don't work well yet, neither do some recursive constructs. That said, it's a fun way to test/practice your basic cs skills!
Hmm I'm not getting the email to validate my act :? I want to plaaay.
I agree completely. I endeavor always to have as few edge cases as possible, but as long as browsers use different us and rendering engines there will always be unexpected bugs to work around. 
&gt; CODE THAT NEEDS COMMENTS TO EXPLAIN IT IS BADLY WRITTEN AND NEEDS TO BE REWRITTEN SO IT DOESN'T NEED COMMENTS. This is absolutely not true. If it is for you, you've only ever dealt with trivial, isolated code (like in an academic setting).
Original post, which includes a link to the project if you would like to take a look. http://www.reddit.com/r/javascript/comments/m1j1d/a_little_project_ive_been_working_on/
Original post, which includes a link to the project if you would like to take a look. http://www.reddit.com/r/javascript/comments/m1j1d/a_little_project_ive_been_working_on/
You're using IIFEs everywhere. E.g.: collectionStub.js (function() { "use strict"; define([ 'underscore', 'backbone' ], function(_, Backbone) { return Backbone.Collection.extend({ initialize : function() { } }); } ); })(); Which could be also written like: define([ 'underscore', 'backbone' ], function(_, Backbone) { "use strict"; return Backbone.Collection.extend({ initialize : function() { } }); } ); Is there a reason for not doing it that way?
If you've already got a framework up and running that does what you need it to do there is little reason to break or change it. What you do gain by using any of these available MVC'ish frameworks is the chance that future hires may be more familiar with one of them and therefore come up to speed faster. Another thing you gain is that there are lots of people working to improve these frameworks constantly, thats more time for you to get stuff done and less time for you writing / maintaining your own framework. If you've got something in place and it works you're unlikely to improve things by switching for a project especially if you don't have decent test coverage. You will forget something during the porting process and without those tests you'll probably burn a ton of time figuring out what. I've just completed a decent sized project in backbone and I generally like it. What got in the way for me was that I was connecting to a legacy webservice and backbone really only plays nice with a RESTful one. Would I roll my own framework for my next project? Definitely not. It's one less piece of code that I have to fully maintain.
You could add an onclick event handler onto the button during creation, passing this into it so you can reference it within the function you use for event handling. http://www.w3schools.com/tags/tag_button.asp http://www.htmlcodetutorial.com/forms/_INPUT_onClick.html Hope this helps!
Youd need to give your button an ID to reference it by. &lt;button id="*some_id*"&gt; Then you can reference it like so: $('#*some_id*'); This way you can "query" for your button using jquery and then do whatever is necessary with it - attach events, change its attributes, etc.
The 'this' keyword certainly *has* a scope. Variables in javascript have lexical scope, which basically means you can look at the source at their point of definition / use and determine who can access them. this on the other hand is a keyword that behaves like a variable with dynamic scope -- so you have to understand the call chain to determine what this is pointing to at any given point. 
I've just been getting into templating with require and underscore. Would any one happen to know if there was a best practice for template file:view mapping? Should they be 1:1 or is it common to have several templates in a single file.
 &lt;span class="youtube"&gt;&lt;a href="#" data-youtube="34209asj"&gt;show me the youtubes&lt;/a&gt;&lt;/span&gt; .youtube a:after { content: url('playbutton.png'); } $(".youtube a").click(function(e) { var youtubeCode = $(this).data('youtube'); var youtube = '&lt;embed&gt;the youtube embed code&lt;/embed&gt;'; jQuery(this).closest('.youtube').appendChild(youtube); }); or you could try mimicking reddit's code. it imagine it looks like that. EDIT: you should either add in a little logic to either toggle/destroy the embed on the second click or unbind the click event after adding the embed. 
circle.find("button").click( );
Come on, all you whippersnappers! I must be twice the average age of you lot, yet I'm ranked first at present (user Bokkeman) - though no doubt that will change when the other frontrunners start completing the new challenges that have been posted... I can see I'm going to have to submit some challenges of my own to garner additional points!
Sphinx really is excellent. But it would be nice if there was a js version of autodoc, either using Sphinx tags or converting JSDoc on the fly. Also, it misses a bunch of concepts like events and mixins, which are often useful documentary tool in javascript.
There's nothing to stop you from using this purely as a development strategy, and then when deploying consolidate your templates into script tags/etc
Flotr2 is a fork of the popular javascript graph libraries flotr / flot. Main additions / changes include: * library agnostic (no more dependence on Prototype / jQuery) * mobile / touch event support * extensible with new charts and plugins * code base refactored, testable and buildable * new live examples * 15k - 25k depending on build Happy to answer any questions about the library, the changes and the process of updating it. Edit: will be hanging in [#r.javascript](http://webchat.freenode.net/?channels=#r.javascript) for the afternoon. 
thanks dude. profiling was a big part of the changes as well, but I didn't list it because I'm still hoping to make it faster.
You can actually do something very similar in Java, though it's a bit more difficult. If I remember you can use the Class class to dynamically load classes. And I understand that this example may not be the most efficient way of explaining what you're talking about, but the another big things is that often times the design pattern is still better practice when considering scaling.
This looks very good. I'll be using it in a project as it seems exactly what I needed. Thank you for this awesome library!
You just made my day.
Let me know what. I'll be adding a list of people using it in the wild :-)
Frickin' awesome!
They're you too
He could also do the opposite - use more specific selectors for the css of the master page.
Hey! Author of Finch here, I'm open to questions if anyone has any.
I'm waiting 'till Proxies come out in most JS engines. Then the Models can have much nicer interfaces while still hooking property changes. Until then I'm just using custom solutions.
cool stuff! i have 2 notes: - colors could use some documentation - some more default themes would be nice
How is support for printing? I had to give up on flot when I found there was no good way to print.
No svg?
&gt; Basically, there is no "var scope". var is a keyword that means, "declare this variable at the current scope". this is a handy alias for the current scope. I don't think this is accurate. Just look at the first line of code in my post. Var is obviously different than this.
Nope, all canvas. There are fundamental differences between the two and I have reasons for needing canvas. I am tinkering with an SVG graphing lib as well, but nothing is open source yet.
I don't own a printer but it's my understanding that printing canvas elements works fine. That won't be the case for a user on older versions of IE using FlashCanvas and I'm not sure about excanvas / vml.
I would fix it to clear the data. Is there a reason that would be difficult if you've actually created this thing yourself?
Yup, I managed to build this after some time of learning. Thank you to my Algebra 2 teacher for the mathematics formula help!
The download sample seems to be broken in Chrome 16.
Glad to help! Anywho, yes, the text also get's inlined: [Here in the documentation](http://requirejs.org/docs/download.html#plugins), it says "The text strings can be inlined in an optimized build when the optimizer is used."
That explains why I have twins. ;-)
Wow Thanks.. this may be perfect... and easy.
Nice. I used the previous flotr version for a local web app displaying some gene expression/sequencing data. We are planning to write a new web app if we receive some grant money. I'll definitely keep this library in mind.
If you do use it, let me know! I'll put you on a list of users. If it isn't protected information, pm me a link to a screen of what you've done before. I'm curious about your axes.
I don't know, but It will be awesome
No problem. It will take a bit more work to make the link a toggle (like andytuba said), but this will get you started.
This guy states a lot of opinions about Node, a lot of personal language preferences and doesn't back up any claims with statistics or tests. * V8 is plenty fast. Hardware is cheap, good developers cost more. * Node scales across as many servers/cores/threads as you want with [cluster](http://learnboost.github.com/cluster/) * Dependency injection and modularization are not problems for the language, rather the developer. Thus Javascript allows you to come up with your own solution that works best for your task and your team. At best, this is a bad attempt at trolling. At worst, this is an obnoxious rant by someone who's stuck up on a single language (it appears Java/Scala in this case) and is too head strong to become multilingual. 
I don't use Node for any of the reasons he thinks I do. I use it when I need applications to be asynchronous, real time, or streaming. It's also very good for sharing small amounts of state between requests without needing an external data store, and for passing around data in JSON. There are problems for which Node is a good fit.
If you're telling lots of people they're "doing life wrong", you might be "doing life wrong" yourself. As with much other technologies, the popularity of Node.js speaks for itself (hint: it fulfills a need that actually exists).
HAHA LISTEN TO ME IM SO RIGHT
He's also generalizing node as only used for making web servers, as if that's the only thing you can do with it...
Lul, yeah this is probably easier than rewriting the CSS programatically.
Thank you. This definitely looks promising.
You could at least put the effort into formatting it correctly or posting it somewhere else where it's correctly formatted. :|
Great talk. I liked those icons and the execution in general. The editing was a bit jumpy in spots. Sometimes it felt like a couple of minutes were skipped entirely. A lavalier microphone would have been nice, but the audio wasn't that bad. The content is perhaps a tad too complicated for a talk, but I think you managed to provide a pretty good overview in that fairly short time span. I'm really looking forward to Backbone Fundamentals. Looks really great so far. By the way, the "writingmodularjs" link 404s. The correct link is: http://addyosmani.com/writing-modular-js/ [Vimeo is damn slow these days. Took me almost 4 hours from the first "play" click to the last second. :/]
Like picket ninja said, mouseover doesn't exist in mobile Safari. You can simulate this with touch events [listed here](https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW22) by adding touchstart and touchmove handlers to elements and calling the preventDefault() function of the event. Edit: You might have to add the handlers to the whole page and detect if the element you're looking to act on is the target, otherwise the browser's default scrolling behavior will take over.
If I'm not mistaken, I believe iOS plays nicer with css's :hover attribute. Instead of using javascript to show your menu, set the visibility property with css using the :hover attribute. That should translate to a click event in iOS.
You could implement a css 'toggle' trick instead [http://lab.simurai.com/css/toggle/](http://lab.simurai.com/css/toggle/)
I was unaware he was sick.
Great to see a js tool that doesnt depend on an existing framework
Probably the best solution here is to remove the link from the top level item. Having them serve dual purpose (open menu + link) can make the intent of their activation ambiguous, plus I'd bet they already don't work with keyboard if you're relying on mouse events. Many major sites have started making this sort of transition as well (e.g. Google's "More" link, Facebook's signout dropdown). I'm pretty sure if you remove that link, then using the "click" event will work as intended.
I take you have already downloaded and or reference jquery in your code. But ya as pocket said, "there is no such thing as mouseover" but as an event handler. It is a jquery event. This should take care of the problem for calling the menu to open. **$(selector).bind("mouseenter mouseleave", handlerInOut);** As for the menu_timer you may need to create a new class or id for it and then call it after you open the menu. (not sure what exactly you want to do with the timer). Heres a few jquery plugins and info along the lines of what you want to do. [http://api.jquery.com/bind/](http://api.jquery.com/bind/) [http://api.jquery.com/hover/](http://api.jquery.com/hover/) [http://api.jquery.com/mouseover/](http://api.jquery.com/mouseover/) 
Do you need proof that it's my site and my project? 
Not an answer to your question, but FYI, there is no "type" CSS property. Remove that from your CSS. "type" is an HTML attribute, not a CSS property.
I couldn't find a code tag. I didn't realise the line breaks would disappear.
I don't really understand why Jaxer can't be a framework on top of node.js. It would easily be one of the best frameworks (because that landscape is atrociously bad right now) right out of the box! In my opinion, Jaxer's major problem is it being dependent on Rhino, the slow and red-headed stepchild JavaScript engine of Mozilla's.
Ah, you should try debugging it using Firebug, then. You are not putting something into markerArray for every single i.
&gt;I've just been getting into templating with require and underscore. I highly recommend to take a look at [Handlebars](http://handlebarsjs.com/). From my point of view, it's hands down the best templating option. It's a variation of Mustache. The big twist is that you can register your own helper functions (which can be reused in every template). This really helps a lot with keeping your templates clean and readable. Additionally, you can compile your templates ahead of time, which make your templates as fast as possible. This also cuts the download size, since the parser isn't needed anymore.
Tap the parent nab two times and it follows the link.
Example: https://texasarchitects.org/
I don't want every I put into markerArray. I only want it grabbing data for legs &gt;50 miles.
I never really liked the way it organized code, inside a html document and tagged for server or client execution. What did impress me was the seamless integration of client/server side code. 
It was my first javascript server-side experience, I will always remember him...
I've been using Jaxer for a couple of years, to render canvas on a server (using Fabric.js). Then replaced it with Node few months ago and never looked back. Much faster, better integration, less quirks and problems to deal with. Yes, Jaxer has been dead for a while now; that was another reason we had to switch from it.
part 3 got really interesting, actually inspired me for a solution for one of my projects wherein im creating a treeview applying the composite pattern and having it interact with other treeviews wherein each one has their own rules for multi draggability and droppability. much thanks :)
Thanks for the downvote, just need a tip of advice..as you see the majority is done.. just missing something fundamental
Hey this is where i am at now, it seems my array is adding extra blank names every time i populate it http://jsfiddle.net/CmqU3/1/
nice! any blog post on it?
Why this instead of Zepto or XUI?
Not that I saw.
They teach JavaScript in school? Somehow this (obvious) fact is blowing my mind.
Looks great.
[Best I could find](https://github.com/alexmic/filtrr)
By the way, your question has nothing to do with the JIT. The behavior is the same whether there is a JIT or not.
Hey thanks!
Take a look at popcorn.js it does exactly what you want. It only requires that the browser supports html5.
This would be way neater if 1\. it didn't look like something that could be hard coded in less than 1K without procedural generation or 2\. it actually leveraged procedural generation to generate a different rose each time.
How do you figure it could be hard-coded? The generated image is 84K with maximum PNG compression.
No, unfortunately it didn't. I am using an &lt;input&gt; on a separate HTML page so the user can ad names to the student object. If you look at the code I use above on my "update" you'll see that the array takes the input, but erasing the previous names in the array. the first name you put in works, then the second name you put in expects that input, but then re writes over the first array element (doubling the name). I hope this makes sense.
If you used Firebug, you'd be able to set breakpoints and see the values that are being put into variables, instead of having to wait hours or days for people to debug your program for you. It takes minutes to install and start using...
&gt; fn() returns the global object. This is because this defaults to the global object Also, code in strict mode ("use strict") will *not* coerce `undefined` to `window` or `global`: function fn() { 'use strict'; return this; } fn(); // undefined
This is awesome, but I still love the Christmas tree he did the best, that thing was so amazing.
Thanks much. We'll be going with jquery mobile so we'll need to load core jquery as well - though Zepto is indeed awesome.
nice! Works well: http://jsfiddle.net/cesutherland/fB8W5/9/
I've been using Mustache for a few weeks now, and it's quite nice. Handlebars is a superset of Mustache with a lot more niceness added on top. I'll probably start using Handlebars at some point.
thank you, i just installed it 
Do you have any more details you can give? What kind of project? What kind of creativity are you looking for? What are you wanting polished?
I don't understand why you would choose a language you are unfamiliar with on such a tight deadline.
It's a beautiful site, but sluggish as hell.
I also get the impression that they had no proper systems. committing generated code instead of using a build server, thats the point in the interview where I go, sorry, this job is maybe not for you.
CoffeeScript is more like a macro-preprocessor than an unrelated language.
I hate to break it to you, but that code isn't doing what you think it's doing. Your array will only ever contain one student, because 'length' is always 0. What's more, if you change length to array_student.length (which is probably what you meant to do) then it still 'looks' like it's working, but really it's creating blank table rows (because after creating the first row it sets the value of the elements to an empty string, so the next rows are empty.) You're also still storing references to the form elements in your student objects, so you're clobbering all the historical data... 
Sammy.js isn't an MVC framework though. It's routing, events, and... a plugin system. I guess you could use it to create your own MVC framework on top, but that's probably not what you have in mind.
that's pretty slick...when my browser window is too narrow (900px or something) it readjusts the text wrap though...some words switch lines...kinda messes with the smoothness of it. edit: i'm using chrome.
I see you're using jQuery. Look into the jQuery [blur](http://api.jquery.com/blur/) event.
The information on this is out-dated and not very useful.
can we see some example maps? this looks really cool. i'm actually in the middle of designing a game with Processing.js for my Web Development class and am looking into some map formats.
I don't see anything in that code that would obviously submit your form. The code that triggers submission probably lies elsewhere.
if you don't supply anything else the "this" will be the return element i believe so at least :D
try changing your object definition to this. function A (pattern) { this.r = new RegExp(pattern); } 
As to the why, which was your question. Your attempt creating a class A is actually creating an instance of an anonymous class stored in variable A. You cannot use new on an instance variable to create a new instance of an anonymous class. I am not sure how copy construction works with javascript yet as I have only been tinkering but trying to learn more. I figured lurking here and helping solve some problems might enhance my knowledge, this has helped. thank you.
I meant to include a statement like this. return this; This would not be executed with the way you defined the class. 
Never played MineCraft. Always meant to check it out, but just have never found the time.
I can put together some sample maps, but if you use the builder it'll make one for you really quickly (use the presets).
I wish I could upvote you more.
Very Cool. Are you using Cellular Automata to create the land masses? When I made my JS world builder erosion and rivers were really hard to get right. How are you doing your rivers? Here is my world builder: http://jimdoescode.github.com/jenysis/
Doesn't look good in Opera :-(
Ya sorry about that. Opera was not one of the browsers I checked. Safari and Chrome seem to be the best with a close third for Firefox. If enough people like this and use it, I'll continue to improve it.
Wow. Yours seems pretty advanced. I have no idea what 'Cellular Automata' is (although I suppose I could Google it). I have no real formal training in either programming or terrain building. I just did it how it seemed logical to me. First it randomly picks the locations of the mountain tops (within the land areas checked by the user), then for each level below, it looks up a level to see if there's land above. If there is, it randomly plots land according to factors set by the user. Rivers are done by first selecting a point of origin (within a pre-set elevation boundary), then just following the contours of the land. Doing the curves for the rivers and hill ranges was pretty tough. Larger maps tend to yield more realistic features. My favorites are the random sand bars (something I didn't expect). Cool temperature setting on yours - I thought about adding a user-defined climate which would mildly change the terrain, but it just seemed like a bit too much work. I'll probably add that in some time.
Thanks! Recursive lava flows? That doesn't sound good. If you can replicate it, please let me know. I like stamping out annoying bugs like that. If the land formations are too blobby, put in a lower 'Land Mass Uniformity'. I had good luck with 20-30. I was going for a certain degree of realism. One of the biggest points for that was getting mountain ranges and hill ranges to curve correctly.
That was done on purpose. If you look closely, it was done that was to optimize the resulting code (Replace some variables with numeric constants and to apply some factors against multiple channels in one pass rather than re-running the function for every color channel.). TL;DR It JITs itself as an optimization, not for readability. For something "newbish" it definitely runs almost as fast as a nearest-neighbor algorithm...
Well, you can still access a.r., and do things like 'myAwesomeString'.match(a.r) ... Firebug console has its own proprietary string type coercion. I wouldn't worry about it too much... 
What's the point of that UUID library? Same effect: var id = (function () { var d = +new Date, c = 0; return function () { return d + '-' + (c++); }; }()); console.log(id()); // 1328682401555-0 console.log(id()); // 1328682401555-1 console.log(id()); // 1328682401555-2 Thing is, using `Math.random()` is the same as using the current date, scrambling it around a bit, and then moving on from there. The generated UUID is as "unique" as the current timestamp (i.e. not very). **Edit:** Use jQuery for DOM manipulation, CSS, events, etc. You're already loading that lib. Use it.
Why not just use a counter, no need for the timestamp, a incremented counter will always be unique. Store the current counter to localStorage so its available on page reload. Backbone does this for its cid property.
The guy brags about his product for several paragraphs then trails off talking about how coffeescript is just kind of underwhelming. No consistency to this article, hard to follow, still unconvinced in coffeescript.
30 minutes? That's far too generous.
That's right, when you do new on a function, the function instance is returned. If you simply execute a function without new, undefined is returned unless you explicitly return something. a is definitely not undefined: var A = function(pattern) { } a = new A("A"); a instanceof A prints true
This irks me a lot if (!!console &amp;&amp; !!console.error) { console.error("Namespace.insert(namespace, module): Attempting to insert module with path '" + namespace + "' where a module already exists. Module failed to be inserted."); } First, why the double bang? Why not if(console &amp;&amp; console.error), it's more readable. If console doesn't exist, it will be undefined which is a falsy value and fail the if condition preventing a javascript error when you call console.error. Also, you do this if check multiple times in your code. Why not have a log module with an error function that does this check inside so then you only need to call log.error("blah") instead of checking every time if console.error exists. Also, you use _i for a local counter variable. underscore prefix for a variable should be reserved for private variables accessible in the entire module, not a local function scope. I also don't like this "context[name] === void 0". I assume you are trying to work around the case where undefined might have been overwritten? If that is a real concern, pass in undefined into the outer module so you have a true copy of it (never understood the paranoia around this) Readability is key for future maintainability, avoid hackiness for cool points or performance, usually the gains are hardly noticed.
Yea, that would work, too. Well, what I was trying to point out: If your inputs are just the start date plus the number of iterations, then that's all the uniqueness there is. Scrambling that data around can only make it *less* unique, because different inputs may lead to the same result.
From the comments in here, it sounds like you are cobbling together code from here, online, and your friends constantly tweaking to try and get the correct result. Try instead starting over, writing the code from scratch and truly understanding what the purpose of the assignment is. This will pay off immensely in your future especially when you are in the job market. With that said here is my solution albeit completely not OO or organized: http://jsfiddle.net/Ex2aY/ 
The annoying thing about phantom pdf generated files is that they are just images, none of the text is selectable.
I get it, but I don't like it. Have you tried coding your audio resampler any other way than generated functions? Are you sure this really gives you the huge performance boost you claim it does? I'd love to see a comparison. I mean, if it's a difference between 0.5% and 1%, the sacrifice of clean code isn't worth it. I think your claim warrants some proof. And the claim about 5x speed up on the emulator doesn't mean very much, there are many ways to optimize performance without resorting to what you're doing with building functions out of strings. It seems overkill and bad practice.
It used to not be generated on demand (the audio function that is). It used to take 5% of my CPU to process the 262 khz stereo audio. By doing function generation, I was able to combine the left and right audio channel interpolation passes into one, saving an extra pass for the second channel. By doing so, it also allowed for sequential array access upon resampling, so V8 optimizes it even further than if each interleaved channel was processed separately. It's the non-seen optimizations by the JS JIT that really made me keep it as screwy code spew. Edit: Here's what it was like before the generation change: https://raw.github.com/grantgalitz/XAudioJS/f69b0c5e285ce58d35f294190d21591e9d2e9507/resampler.js You've got that extra loop and non-sequential array accesses going on in there. Then again, it wasn't too slow there, just relatively slower than what it is now. Edit 2: I should note that these algorithms are not linear or bilinear algorithms at all. Rather, they weight the samples as if they're not infinitely small points, but rather area that has shape. The image resampler will look like a bi-linear resampler when you downscale, and kind of like a nearest-neighbor resampler when you upscale (Though it DOES take multiple samples into consideration when determining each pixel (Hence the lack of aliasing for the columns and rows, and you'll see some gradient pixels there as well. It's just the concept that the pixels exist over an area, rather than just at a point (Don't gradient between points, rather do a special mix when "areas" share a boundary), that causes the algo change. :) )). Edit 3: You can see the image resampler in my JS GBC emulator at http://www.grantgalitz.org/gameboy/ by clicking settings, then by clicking on resize directly in javascript. Yeah, I know it's slow, but nearest neighbor wasn't much faster anyhow (It had nearest-neighbor when forced to scale in js before I wrote this new algo). Edit 4: This should be turned into a shader.
Thanks for the review. It helped point out some weak decisions on my part. I should note that the Namespace.js script is transpiled from CoffeeScript, whereas Compiler.js was written in plain Javascript. So unfortunately, as to _i and void 0 being present in Namespace.js, these are CoffeeScript transpiling nuances I have to roll with. I agree with the recommendation of creating a console module instead of doing multiple checks and will be adding that in. In regards to the double bang, I copied the idea from what I saw in the Modernizr codebase. It performs a type conversion to Boolean. But you are right. I think I was trying to be too tricky, and this is not a good use case. 
You should cross post this over at [/r/worldbuilding](/r/worldbuilding).
Because that is pointless.
The uuid string is intended to mimic that of a Google Tasks object, which I'm currently working on integrating. Once the API is connected, the uuid lib will become irrelevant and be removed. As for the jquery, it's only there as a safety net and my goal was to work with the DOM directly. Seeing as I'm not using it for much (if anything at all), I'll likely drop it in the next update.
I notice you used document.getElementById rather than the jQuery selector, is there a particular reason why? 
What about using the [midpoint displacement algorithm](http://gameprogrammer.com/fractal.html) for generating rivers?
Nice! I did the same type of thing to mess around with localStorage: http://noted.jongala.com/
lawl
Well, you could use it for all DOM/CSS/event stuff. This would have been a lot easier. Plus, your app would have worked in all somewhat recent browsers right off the bat. If you don't want to use jQuery, fine. However, you should at least write your own utility methods to make it somewhat less repetitive and less hideous. The somewhat new `querySelectorAll` function is almost perfect, for example. The only thing that's missing are real arrays, but that's something which can be easily added: var qsa = function (selector) { return Array.prototype.slice.call(document.querySelectorAll(selector)); }; qsa('.md').forEach(function (el) { console.log(el); }); If there are no matches, an empty array is returned, which means it's not necessary to guard the `forEach` call. By the way, if you don't want to use jQuery for size reasons... well, it's just 33kb. You can easily make room for that with minification and compression. Additionally, using a base library usually makes the code drastically shorter. It also means that you don't have to write *and test* that base library yourself. Alternatively, you could take a look at Zepto or XUI.
Thanks for your code, I will check it out and try and figure it out. My only thing is I need it to load from an external javascript file. But that shouldn't be too hard to rearrange
JSPerf it?
So.. still not *useful* for anything. Gotcha.
A wrapper function is in the works for DOM object manipulation. I don't need all of the functions provided in jquery, so I wrote one myself. The function's name was originally going to be π(), but then I thought hey, why not zoidberg()?
Okay here's the long explanation for why everything's geared towards Webkit/JS vs Compat/JQ. I applied for a front-end web dev position way back in July. After getting kicked out of my parents' house for not having a job, I got a call while living with a friend (where I'm still living). The first interview went well, as did the second. They sent me a few coding challenges - one focused on PHP/MySQL and the other was a PSD-to-HTML conversion - I finished them and sent them in, and they liked my work. Set up a third interview, that went well. Then they flew me to New York. Being a young kid from rural Minnesnowda, this was a big deal. Had the day-long interview, spent the weekend in the Big Apple, then went home. Then I got a call from the recruiter. He said they were very impressed with my work so far, my portfolio, and liked me during the interviews. *However, they didn't think my JavaScript skills were quite ready.* Here's what they did: I was given two books, [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) and [JavaScript Web Applications](http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X/ref=pd_sim_b_3). They wanted me to take three months to study and learn on my own, then make a project and present it to them to show them my progress. So I did. This is the project I sent them. I actually got a call yesterday, and the recruiter said the dev team really liked my work and asked for references. **TL;DR - This is for a job opportunity and they wanted me to work without JQuery and target Webkit.** The next update will be compatible with Firefox and Opera (kinda), and be integrated with Google Tasks. 
You're right.. I think that it is submitting as it is an "input type=image" for some reason. Is there a way to disable this particular element, input type=image from submitting a form?
I'm not getting the same results you are; it always says b was passed. var a = +0; var b = -0; a/0&gt;0 // false b/0&gt;0 // false
Someone relatively famous said that was a somewhat unnecessary concern because any time you consent to run any code on your computer you are essentially allowing anything that eval could do anyway.
Its the identity of the object. I wasn't saying you'd use the ID to store the create date. That would still be in a separate property. I was just staying there is benefit to using more complex IDs.
onclick="return false;" Why use an input if you don't want it to post your form?
You should've posted some code, but I'll take a guess. You can bind a simple handler to the mouse events on the element, which blocks its default behavior. element.click = function(e) { e.preventDefault(); } eventObject.preventDefault(); makes it so links don't navigate, submit buttons don't submit, etc.
Chrome says: +0 === -0; // true 0/0; // NaN
so? You have to teach them the basics before the advanced practices.
Yes, do not use eval in any language. It is a terrible practice. It enables lots of neat tricks, but so does juggling flaming chainsaws and a baby.
Come think of it.. you are probably right.. It WAS however featured in the [The Top 10 Javascript MVC Frameworks Reviewed](http://codebrief.com/2012/01/the-top-10-javascript-mvc-frameworks-reviewed/), which as far as I know, is one of the few online articles listing and comparing javascript MVC frameworks.
eval is not "perfectly fine" in most cases, regardless of security. For performance and readability reasons, it should be avoided unless absolutely necessary.
Why would you use a function unless it was necessary? It's not like they're going to do eval("x=1");
Do you own the rights to the graphics you use in map generating? I am in the process of building a 2D RPG engine/game in my free time, and spontaneous map generation sounds useful.
Nah. Truthfully, I borrowed a bunch of graphics from the old Ultima games (3, 4 &amp; 5). I did create one or two, but I'm not worried about the rights or ownership on those. One of my goals for this software was to allow a user to alter the graphics for his or her own project (haven't the time to implement that yet).
Nothing is "always" wrong in computer science. It's only wrong to use `eval` if there's another way you could've done the exact same thing.
you were still on easy mode, http://i.imgur.com/Y1p0N.png
It's a misused feature in most cases. E.g. beginners like to pass strings to `setInterval` or `setTimeout`. Or they don't know about arrays and think it would be a good idea to construct new variables via `eval`. A big issue with `eval` is that it prevents minification and - to make matters worse - it also prevents optimizations by the VM. Like `with`, `eval` should be avoided in general. Underscore's template compiler is an interesting use of `eval`, but it also illustrates how much of a mind-fuck `eval` can be: _.template = function(str, data) { var c = _.templateSettings; var tmpl = 'var __p=[],print=function(){__p.push.apply(__p,arguments);};' + 'with(obj||{}){__p.push(\'' + str.replace(/\\/g, '\\\\') .replace(/'/g, "\\'") .replace(c.escape || noMatch, function(match, code) { return "',_.escape(" + unescape(code) + "),'"; }) .replace(c.interpolate || noMatch, function(match, code) { return "'," + unescape(code) + ",'"; }) .replace(c.evaluate || noMatch, function(match, code) { return "');" + unescape(code).replace(/[\r\n\t]/g, ' ') + ";__p.push('"; }) .replace(/\r/g, '\\r') .replace(/\n/g, '\\n') .replace(/\t/g, '\\t') + "');}return __p.join('');"; var func = new Function('obj', '_', tmpl); if (data) return func(data, _); return function(data) { return func.call(this, data, _); }; }; How many times do you have to read this until you can vaguely tell how it works?
In the relevant handler: event.preventDefault();
Your code doesn't work. How you can actually differentiate between +0 and -0: &gt;&gt;&gt; 1/0 Infinity &gt;&gt;&gt; 1/-0 -Infinity
Duplicate of post in /r/programming [LINK](http://www.reddit.com/r/programming/comments/pgi5t/amazing_ascii_interactive_fluid_animation)
that is the basics
If someone is aware of x['item' + i], they shouldn't be worried about micro-optimization anyway. Ignorance doesn't justify promoting the stigma that nobody should use eval() ever. There are many perfectly justified places for using it. That's kinda like saying we shouldn't use for (x in y) because some people use it instead of for(;;) for numeric keys. Why not just say that you can and should use eval()? The disclaimer for it doesn't seem necessary, since there is no disclaimer for every other function ever. The stigma it gets from causing security leaks is unjust once the security leaks are addressed.
For rivers, I again went with the natural approach. For example, when an origin point for a river is plotted, the program analyzes all tiles around it to determine if there's any adjacent lower elevation. If it finds one, it flows the river in that direction. If it finds no adjacent lower elevation from the point of origin, it picks a random direction along the same elevation (it won't flow up hill). Once in motion, for every new tile the river touches, the program looks in the adjacent tiles for a lower elevation. If it finds a lower elevation, the river runs that direction (as it would in nature). If it finds no lower elevation, the program relies on the 'river curviness' factor set by the user. I did it this way to preserve a sense of momentum. So finding no lower elevation, the program picks by weighted random chance whether the river will go straight or turn 45 degrees to the right or left. Took some time to work that out.
for some people is a little distracting… that's why it looks like that with my own colorscheme. I've tested it with solarized, ir_black and railscasts and doesn't look like a "clown" :-D 
Different subreddit, therefore it's a cross post and acceptable. 
I remember in my early days writing javascript, I would use eval(), because I just didn't know another way to do something. As I've become more experienced in the language, I simply have never found myself in a situation where I even think about it. Not only is it generally bad practice, I find it's just not necessary at all. I'd recommend trying to avoid it, and eventually, you'll find you'll never need it.
I like this developer :)
The old "pretend it doesn't exist" trick that forces you to figure out better ways of doing things.
image inputs are just submit inputs with a button image. Please use the HTML5 range input type and an appropriate fallback or a custom widget replacement script. I'm not trying to be rude. This is considered a best practice by many.
Lists of jQuery plugins are not very useful programming information unless resources and explanations to how they work are provided.
Nice work. But... why is it so???
8 and counting. On the 9th pass I finally figured out that c.escape, c.interpolate, and c.evaluate were the strings that enabled `&lt;% code %&gt;` interpolation. Whoever came up with that is either insane or insanely smart, and it's not clear which of the two it is.
This is a good step forward. What would be awesome would be type inferred JavaScript that infers algebraic data types. function encode(o) { if(typeof(o) == "number") return o.toString() else if(typeof(o) == "string") return; /* Do string escaping */ } It would infer: compose:: (number + string) -&gt; string
And even then. If the exact same thing could have been done another way, but it would have required you to write a thousand more lines of code, it is not necessarily a good tradeoff.
It looks like it's parsing comments for types, why not just use JavaDoc description "tags" for typing? First Example: @param num_arr &lt;Array&gt; This is an array of numbers. @return &lt;Number&gt; This returns a number. Second Example: @param obj &lt;{name:String, valid:Boolean}&gt; This accepts an object containing name and valid specifiers @return &lt;Boolean&gt; This returns a Boolean value. Any JavaDoc parser would interpret the "type" as just a description. IDEs with JavaDoc parsers would automatically code hint the description for you...
I really enjoyed this display; I'm going to enjoy dissecting the implementation of this and peeking at the referenced PDF sometime very soon. Also loved the choice of the Abelson/Sussman Quote!
So... there's no way to see this without an iPhone?
Nothing seems to be happening in Firefox or Chrome - just getting a bunch of white space up top.
but ... I am getting it fine :(
IC, so I didn't realize until some googling turned up this was meant to be treated as a constructor. It more read as a class factory function.
First off, extreme kudos to the original developer. I'm curious how the display seems to be able to maintain a sense of a gridspace inside of a single text "p" tag. I need to look into that a bit more. Secondly, I couldn't resist playing around with this a bit. I added a few UI components - allowing the user to change the ascii characters used, the color of the text, removes the dialog box after a period of time, and binding the clear feature to the space bar. All of which I felt like made it a little more fun for me to play with in full-screen mode. Here is a link to my modified version for fun: http://www.johnmick.net/fluids/ 
is that an accepted best practice?
This should be basic knowledge for any js developer. I tried to teach this to 2 new developers, sadly only one of them really got it. Read it and understand everything. Edit:maybe I'm too demanding. 
That's pretty damn impressive
[I think this may be it](http://benlog.com/articles/2012/02/09/a-simpler-webbier-approach-to-web-intents-or-activities/).
Or: var callback = this.init; ... success: callback ... 
https://github.com/olegp/mcms
Also, just to be thorough, this can be done in JavaScript without jQuery by using the [Function.prototype.bind method](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind), but it is fairly new so you will have to polyfill it for most browsers (see the linked page for instructions on that as well).
Yep. My mistake. Thanx. This will: var me = this; ... success: me.init ... And that too: $.ajax({ type: 'get', url: ruleFilePath, context: this, //see: http://api.jquery.com/jQuery.ajax/ success: this.init })
 var that = this; … context: that, success: this.init …
I love using jsTree... worked wonders for my application.
Or another option ([if you have a recent version of javascript](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind)): success: this.init.bind(this) Or: var self = this; ... success: function () { self.init(); }
Sorry, I've only tested this on an iPhone. I don't have an Android phone, so I don't know how it would work, but maybe there's a chance it will. I believe touch events in javascript are universal.
Oops I wasn't really thinking that through. I fixed it.
Thanks, but I'm not sure why that works. I'm not clear on what I'm doing wrong.
I feel like I'm very close to understanding what's going on. Where I'm still confused though, is that when I run the following code: rules = new Rules ("somefile"); the constructor is executed and inside that constructor, this.init is defined and this points to "rules" therefore, $.ajax is called with a pointer to the correct function, rules.init So, why doesn't it work the way I have it? What happens under the hood that results in me having to use the call method?
JavaScript is a bit odd. It uses some odd concept called "late binding". Members are resolved at runtime. Many other so called "scripting languages" behave the same (PHP, Ruby, Perl, Python, etc.). So, that "this" thing inside that function isn't resolved when you assign that function to that "success" property. It's resolved when the interpreter/VM finally hits that line where it's used. More: https://developer.mozilla.org/en/JavaScript/Reference/Operators/this
Having a basic understanding of your tools is so last century.
ok. When does the interpreter hit that line? Obviously, not when the constructor is actually called.
context: this also appears to work. As x-skeww explained to me, what that does is to tell jQuery to run init.call() with that context. I can fix my code now, so I thank you, but I'm still trying to understand why the original didn't work.
When the "success" callback is executed.
&gt;context: this &gt;works because "this" points to rules' "this" scope. The "this" is resolved right there, because it is accessed right there. &gt;why doesn't &gt;success: this.init &gt;work? The "this" *inside* `init` is resolved when that `init` function is executed. Well, I recommend to read some articles about that topic (or get a book). I'm probably not the best person for explaining the finer details of JavaScript.
using eval() is like hitting your children: it is always wrong, except for when it isn't - at which time you'd better be able to explain yourself.
The other day I read an interesting bit about how the mobile Gmail team managed to save some resources by lazy-parsing JS code. They download all the app's code in one go, but some of it is commented out. When features that depend on commented code are needed, they get the text comment, strip out the comment tags and eval() it, thus saving a non-trivial amount of execution time in the app's loading stage.
Ok, I'll bite. Making a tool where I can edit and run code in my own or someone else's site. For instance, I run a bookmarklet that opens my javascript snippet editor, and I can then edit, run and save little snippets of code to do any number of things, for instance, bypass the New York Times thing that blocks you after viewing 50 pages. For development purposes, it is really nice to be able to modify and test little chunks of code without reloading the page. There are other ways (appending script tags dynamically which pull in newly edited javascript files, etc), but they are essentially eval'ing anyway. 
First one: no, second one: yes.
what the hell did i just play? I got 6100 on my 3rd try.
It seems very Haskell inspired. In fact, this seems reminiscent of Haskell's Quick Check, but for JS. It seems logical to use the same syntax for typing.
It's a limited benefit for sure. The benefit is that it would prompt your code to be more "*correct*." The idea is that if you have to express the type of your functions and are held to it, you'll be less likely to write bugs. While you haven't tested specific manipulations, you know with decent certainty that checked functions will produce correctly typed output given correctly typed input because you've thrown it a lot of potential variations. Yes, you're still going to write bugs, but at least this can help you avoid writing bugs related to this kind of inconsistency. I haven't seen empirical evidence either way on this, and on one hand, it seems like a plausible benefit, but on the other, it seems like what tons of coders do every day, managing to write zillions of bugs when in Java, C, or the like. I'm planning on giving it a try, but we'll see how much it actually helps.
I got 7642. I'm not sure if it got harder or if I got tired of moving the mouse around...
As long as they provide a seed to reproduce the same set of tests randomness doesn't have to be a problem. 
I think every javascript programmer should look into this article to improve his efficiency :)
Python was just implemented to their site!
I thought they append them as script tags?
Thank you... glad you liked it :)
`diff` TypedJS [Closure](http://code.google.com/closure/compiler/docs/js-for-compiler.html)
&gt; There is nothing anonymous about this function, or is Javascript even more insane than I thought? Yes; no. A function is given a name as follows: function a_shiny_name (argument_1, argument_2, etc) {} This name is unique and final to this function. Assigning this function to a variable does not change its name. There now is just a variable with a name having as value this function with its own name. If you do not name a function, it is anonymous. Assigning it to a variable or two does not change its namelessness.
&gt; Last Updated Date: March 7, 2006 I bet most of this article is still relevant, but surely there must be a more up-to-date source on this stuff. Browsers have come a long way since 2006.
Usually you do this kind of logic in a server-language like php, python or ruby, php is known to be user-friendly and good to make small site and toys. most experienced developers shun php though but it might be a good place to start.
you are welcome! and don't forget to post your projects for all of us to see when you are done! :)
Please read [this](https://developer.mozilla.org/en/JavaScript/A_re-introduction_to_JavaScript#Custom_objects), it will be very helpful for this situation.
Create a separate css file to apply style for the html and include the file on each of the band's page. That way you can have separate html pages for each band but a single css file for all of them. You can do the same for the javascript. Mixing html presentation with styling and functionality is not a good design practice. If you're a beginner use this [google html/css/javascript tutorial](http://code.google.com/edu/submissions/html-css-javascript/) page to give it a shot.
people shun php? lol I have never heard people say bad stuff about it before. I do front end stuff mostly though but I never thought that people didnt like php. is there a reason why? what do they prefer instead? .net stuff? where I work they make us use cold fusion sometimes because the IT guys insist on using outdated slow crap because they are to lazy to learn new technologies. we use php for some sites but they keep pushing coldfusion on us :( 
&gt; most experienced developers shun php Everything you said was fine up until this part. This is simply not true. PHP is used as the backend for a lot of world class sites (we may not *like* facebook, but it is easily one of the world's busiest), not to mention arguably the best open source CMS out there (Drupal). Python and ruby are great and all, but they're more challenging to find support for on most lower budget web hosts, and ruby its own host of issues that may or may not be worth trading off for its "pretty" syntax.
What you're trying to do is called "templating". While it's true that it's usually done on the server-side, I don't find it shocking to do it through JavaScript. One of the downsides of this is that some crawlers might not parse the javascript data, which might hurt the site"s referencing on google. jQuery has a templating engine: http://api.jquery.com/category/plugins/templates/ knockout.js is a bigger framework that handles templating (their tutorial is incredibly well done too, check it out): http://knockoutjs.com/ It might be overkill for what you're doing though. backbone.js is also pretty popular right now but I don't know much about it. As for the data form, json seems the obvious choice if you're parsing it with javascript.
Language specific evangelists will shun php, people who use php won't.
there is a whole sub-reddit dedicated to making fun of the flaws of php at http://www.reddit.com/r/lolphp 
&gt; most experienced developers shun php though I'd strongly disagree. maybe if you said 'classically trained' instead of experienced, I could get behind your statement. PHP is a very powerful server side language, and you can do a whole tonne of things, including using it as a backend to power large sites, not just small sites and toys.
It is one of the best summaries of the javascript language. Most browser progress was made in the DOM ,css and performance, the language itself did not change very much. 
Some misinformed people shun it because of its original programming style. It was made as a scripting language with very loose variable typing. This caused Java developers especially to scoff at it because it wasn't object oriented and they believed it was too easy to incorrectly convert a double value to an int (or something like that). PHP has changed a lot since its scripting language days. It has object oriented properties, it's much faster than it used to be, and PHP 5 has type hinting (a loose typing method). The strengths of PHP, as you may be aware, are in its flexible nature and speed of development (these may go hand-in-hand). Many large companies use PHP over other languages, such as [Facebook](http://blog.facebook.com/blog.php?post=2356432130) and [Yahoo](http://www.internetnews.com/dev-news/article.php/1491221/Yahoo+Goes+PHP+in+Open+Source+Embrace.htm). There are also many templates, blog sites, ecommerce solutions, and other systems built with PHP that are free to use (Wordpress, Drupal, OSCommerce, etc.). This is just a small example of some negative aspects of the past and positive aspects of PHP. It's not a complete or definitive list. Others may add their own experiences, I would love to hear them myself.
Php is pretty slow which makes it ok on small sites but really bad on bigger sites. You see php in a lot of places though because it's easy to learn but also because of hip hop. That turns php code into c++ which makes it a lot faster. Another reason people shun it is because since its so popular they see a lot more poorly written code out there and just assume its because the language is bad. 
Rails is the sexy new thing.
&gt; people shun php? lol I have never heard people say bad stuff about it before. Take a trip to /r/programming. The main reason people dislike PHP is because there isn't really a lot of order and structure to it- just a ton of functions. As for alternatives, the favourite these days is Ruby.
that would be lazy-loading, not lazy parsing. Lazy parsing requires either eval(), or dynamically appending a script tag with no contents, then setting the innerText of the tag to the javascript source. The latter one is technically not eval(), but it has all of the downsides of eval() (just as other things do, like using setTimeout() with a string), so you might as well use eval().
&gt;dynamically appending a script tag with no contents, then setting the innerText of the tag to the javascript source That's what I meant. &gt;it has all of the dangers of eval Not all the dangers. For instance, you don't need to worry about scoping.
Use a templating language to take an object and apply it to an HTML outline of your choosing. jQuery templates might be simple enough - if you want to spring for something nicer go for mustache (via hogan.js)
You could use Math functions of javascript (Math.pow) to get the sqaure or the cube of the current number (use would be Math.pow(number, exponent)) but i, i*i, i*i*i will also do. For the output as a table it probably easiest to build the table while you go trough your loop so you would output a string that looks like this "&lt;tr&gt;&lt;td&gt;"+i+"&lt;/td&gt;&lt;td&gt;"+i*i+"&lt;/td&gt;&lt;td&gt;"+i*i*i+"&lt;/td&gt;&lt;/tr&gt;" The head (start of the the table element, and the first row), as well as the closing tag have to be outside (before/after) the loop.
Putting it into the table was the most confusing to me. you explained it well :3 Off topic of my original question, Is it normal to use Javascript to create tables?
9134 on first attempt. I kind of get it.
Yes and no. Most people will use a DOM query library like jQuery.
if this is all there is to it, your code is correct; you shouldn't be getting this error. works fine for me in the safari/chrome inspector, firefox console.
http://tbranyen.com/post/amdrequirejs-shim-plugin-for-loading-incompatible-javascript Further describes the reason why it exists.
Here's [my solution](http://jsbin.com/ijayib/5/edit). I simply implemented a couple of generators and rendered them to a table via jQuery (got a bit lazy there). Might want to study that to see one possible way to do this.
Some advice, people tend to use for loops for this kind of stuff. It is just more readable. for(var i=0; i&lt;11; i++) { // do stuff } is the same as var i = 0; while (i &lt; 11) { // do stuff i++; }
http://jsfiddle.net/DUSnN/1/ A better playground for you to experiment in.
[This is a used and successful testing technique.](http://en.wikipedia.org/wiki/QuickCheck) It forces you to test by specifying your contracts/invariants rather than by hit-and-miss examples. [Here's a JS framework.](https://bitbucket.org/darrint/qc.js/)
wtf is AMD aside from the chip manufacturer?
I dunno. I have been able to write nearly any algorithmic expression just fine without these additions. I can't help but think these additions exist to make Java programmers feel more at home opposed to doing anything to actually move JavaScript programmers forward. If this had anything to do with actual JavaScript programmers it would focus more on performance assistance and less on expression. JavaScript programmers tend to already be happy with the level of expressive capability provided.
I think [Douglas Crockford's JSON-js](http://github.com/douglascrockford/JSON-js) is already pretty minimal... and has lots of formatting options.
As someone who is just learning javascript and been eyeing up jquery, that is a beautifully elegant piece of code right there.
Thanks. You might as well just dive straight in to jquery as far as I can tell.
Wow, believe it or not, you just gave me the idea that solved my issue. Was just a matter of how i was checking, and your idea on skipping midpoint if it already has a value, or in my case, -1 worked perfect :).
It is possible to write in a style that is not open to hoisting, such as using a single var keyword per function at the top of the function, so it is about style. Lexical scoping will not prevent function hoisting so it does not fully address that problem anyways.
I pasted some JSON that contained SVG in some of the properties, and the browser rendered the SVG. Kind of cool, but also kind of not.. would rather if the JSON were shown as all JSON and not with SVG rendered. It would likely be the same if I embedded HTML inside the JSON, I'd want to see the HTML code and not the rendered HTML.
Glad to hear it.
I did take inspiration from Haskell, and Quick Check in particular. Still thinking over over various possibilities for typing syntax.
This actually does the job really well too. If only it wasn't just for Firefox.
[plain old javascript](http://jsbin.com/axejuw/2/edit#javascript,html,live) Seriously people? jQuery is handy and all, but it's just plain overkill for things like this. jQuery is the last thing we should be bringing up to people still trying to grasp the basics.
Your attempt is one of the most succinct expressions of what is wrong with certain jQuery users. ✓ Using a 31kb library to simplify virtually nothing. ✓ Reselecting the same element repeatedly. ✓ Reinventing table elements, badly. 
That's true. Nice and simple. :)
First, good luck and have fun with your future JS endeavours, and kudos for learning a new language. :) There's already been a valid answer by grafilicious, but since I got some free time at my hands, let me do a small self-reply series with some hints on how to restructure your code for doing what you want. I hope you don't mind, but I noticed some unrelated things that may result in problems later on the road, so I will be a bit pedantic (hoping that you and others will profit from this). In every step I will add something, until your code is what I personally like (always keep in mind that that's a personal opinion, of course feel free to find your own style!).
See my comment above, but give me some time (30 mins ...)
(2) Don't repeat yourself! Whenever you're doing something like myVar0, myVar1 (numeric index in variable name), you're hardcoding an index that should be in a loop or function parameter. Watch the code shrink: var myArray = [[]]; myArray[0][0] = "testing text"; myArray[0][1] = "\nnext line"; myArray[0][2] = "\nanother line"; myArray[1][0] = "second array test"; myArray[1][1] = "\na further line of text"; myArray[1][2] = "\nblah blah blah"; function choice(index) { if (document.getElementById("checkbox" + index).checked) { document.getElementById("textBox").value=document.getElementById ("textBox").value + myArray[index] } else if (document.getElementById("checkbox" + index).checked==false) { document.getElementById("textBox").value=document.getElementById ("textBox").value - myArray[index] } } 
(4) OK, let's address your bug (finally ^^) You tried to use the '+' and '-' operators with strings/arrays, which is not correct. Instead, we'll use grafilicious' proposed strategy: Everytime a checkbox is used, we put together the desired content of the text field, then set the value of the text field to the new content. I restructured the nested text arrays to a single array. var texts = [ "testing text \nnext line \nanother line", "second array test \na further line of text \nblah blah blah" ]; function choice() { var textContent = ''; var checkbox = document.getElementById("checkbox0"); if (checkbox.checked) { textContent += texts[0]; } checkbox = document.getElementById("checkbox1"); if (checkbox.checked) { textContent += texts[1]; } document.getElementById("textBox").value = textContent; } @edit: "textBox" + index was wrong
So, what this does is basically: - bind choice() to the onclick of every checkbox - we start with an empty string (textContent = '') - we loop over each checkbox (found via the html id "checkbox" + index): if the checkbox is checked, we add it's string (array position found via texts[index]) to textContent. If not, do nothing. - finally, we set the text content of the textarea to the new content. (I haven't tested out the code I wrote, but this should point you into the right direction :))
I'm glad--but many of your peers are. I'll claim later that many of the 12-year-olds in this country have hair....some don't, but of course the vast majority do. My only point was that younger coders tend to miss important programming concepts, and they also tend to gravitate towards PHP. To be fair, they also gravitate towards Flash, but I really couldn't care less about that.
In the case of JS, it's the [let keyword](https://developer.mozilla.org/en/JavaScript/Reference/Statements/let).
Nice work ;)
I'm not sure what's worse - you bloating what should be a few lines into something like 20 lines, or people using jQuery for something easily done in a few lines with plain javascript. :|
Yeah. Got a bit carried away. Generators are a powerful concept, though. They provide a nice separation of concerns and fit well into a functional toolkit.
Excellent question. Apparently Harmony will be finished by the end of 2013. I guess Chrome and FF will pick it up first. Probably going to be a messy couple of years. We'll see how that goes... Fortunately JS is pretty powerful as it is. As you can see writing generators yourself isn't that hard. It's easy to mimic some other features as well (properties come to mind). If you are willing to use a precompiler such as [JSShaper](http://jsshaper.org/) you can do some more advanced things even. I implemented [operator overloading](http://nixtu.blogspot.com/2011/05/using-jsshaper-to-provide-operator.html) this way. Here's a [native, fake solution](http://www.2ality.com/2011/12/fake-operator-overloading.html). Sadly JSShaper doesn't make it possible to extend the syntax making it semi-useful in practice.
I started with this book but it is pretty basic. http://domscripting.com/book/
EloquentJS is solid: http://eloquentjavascript.net/
Douglas Crockford has been essential to keeping my sanity while learning to work with JavaScript. You can find some of his articles on [Crockford's JavaScript site](http://javascript.crockford.com/), and he's done some [great lecture series](http://yuiblog.com/crockford/) as well. YUI Theater has that and other great stuff (much of which isn't YUI-specific, despite the name), but unfortunately, YUI Blog and YUI Theater seem to have restructured all their content in such a way that broke all the inbound links. I think you can still find all the videos on youtube if you look around a little.
Well, thanks, but I'd prefer personal recommendations as I did buy a book, but I bought the wrong one for my learning level. I'd like one written for people with a technical background that teaches you all the fundamentals and lists all the functions of javascript. The one I bought was from O'Reilly, so i thought it would be enough, but it was a "cookbook" of solutions to common problems. Maybe one that also covers some of jQuery, but jQuery seems to have good documentation.
Wish I had more upvotes to give, but yes. a million times this. I didn't really understand how js worked until I read this book. Also, not really a book, but try stepping through parts of jquery and see if you can understand how it's working. parsing out the init function in jQuery taught me more about js than writing it for 2 years did.
 * [Mozilla Docs](https://developer.mozilla.org/en/JavaScript/A_re-introduction_to_JavaScript) * [w3schools](http://www.w3schools.com) * [Eloquent JavaScript](http://eloquentjavascript.net)
http://yuilibrary.com/theater/ http://www.youtube.com/user/yuilibrary/search?query=javascript --Robert
[30 days to learn jquery on nettuts.](http://tutsplus.com/course/30-days-to-learn-jquery/) Yes it's jquery, but jquery is javascript. Yes it's a library and not the nuts and bolts. But for the first time in over a year of trying to learn js/jquery it's all starting to make sense. Worth a look. 
 if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i))) {window.location = 'mobile.html';} That's gonna make it more difficult... lol I was honestly hoping it would be previewable in a desktop browser. edit: just tested it on my 2.2.1 android. It gets stuck with the 'add to home' overlay. oh well :) 
I found and fixed the bug, so now the URL you posted works. It was an uncaught exception due to concatenating a string and nil.
Ha, yes I did link to it. I basically linked to the combo of resources I'm using right now to learn. It's funny, when I'm stuck on eloquent, I'll switch to something else and on and on. But usually when I'm stuck on code academy I'll google something and so far it's always eloquent that has the answer for me.
http://www.codecademy.com
Consider spritesheet animations, or possibly the canvas element. I don't think either will be easy.
This looks interesting, but I'm having a bit of trouble really understanding what it is. I'd love to see an example along the lines of "here's some code without using Hydra.js, and here's a version made simpler thanks to Hydra.js".
[Codecademy.](http://www.codecademy.com) It's pretty big news in the industry right now, they are running a year-long javascript class/tutorial, learn at your own pace.
The Definitive Guide by Flanagan and JavaScript the Good Parts by Crockford. Also, read through Crockford's stuff on his site - Crockford.com. Remember, there is a lot of bad JS out there on the web; avoid W3Schools like the plague and embrace Mozilla's web dev wiki. Some top JS people: Doug Crockford, John Resig, Nicholas Zakas, Paul Irish, David Flannagan. 
Dude, try JavaScript Enlightenment; that will help you a lot! Coming from the same background as you.
No!! Avoid w3schools at all costs. Visit w3fools.com for more info. Use Mozilla's web dev wiki for accurate information.
Canvas
Even faster to consume than his book are the various number of talks he's given, which are freely available on the interwebs. These cover essentially the same content as the good parts. [http://yuiblog.com/crockford/](http://yuiblog.com/crockford/)
&gt;it seems like it introduces a lot of complexity for a very simple operation that really boils down to if( --ops_left === 0 ){ runCode(); } Well, that's close to [what I started with](http://www.reddit.com/r/coffeescript/comments/pkk7u/delayedop_five_handy_tiny_lines_of_coffeescript/), except with `ops_left` being counted automatically. There was some discussion about the difficulty of debugging if your calls get unbalanced though, which I found compelling. Most of the added complexity is for error reporting and debugging, and I think it's well worth it. &gt; How often do you run into the case where you don't know beforehand how many asynchronous calls you need to wait for? Fairly rarely, but making the counting implicit makes your code less fragile. If you're counting your calls by hand, then that's obviously fragile. But even if the calls happen to correspond to a loop, like with the [Underscore.js example](http://documentcloud.github.com/underscore/#after), you might later add a separate asynchronous call inside that loop, or decide to skip some elements, etc. Suddenly, calculating the op count is a lot more complicated. But with implicit counting, it's easy. Also, although my original version did not have this, I think adding the callback at the end is a lot more readable than adding it at the beginning.
Why don't you make a div that is over the image, and add a character every X seconds to the div via JS? I would think that a GIF or canvas is overkill for something so simple.
..how do you lose?
Once you're familiar with the basics, you might like this - http://shichuan.github.com/javascript-patterns/
You can see it working in: * http://www.softonic.com * http://byveo.com I get the compromise of add more self explaining examples.
* JS The good parts, Douglas Crockford. * Secrets of the JavaScript Ninja, John Resig ( The guy behind jQuery) * Mozilla developer wiki * ! w3schools.com - prefer w3fools.com * yui theater videos * The 6 + 2 part JavaScript lecture by Douglas Crockford
Don't know why I didn't think of this...I'm a dumbass. I think that's what I will do.
That is correct, I want it too look like someone is writing over top of the image.
&gt;Keep in my he is quite controversial, and there are even some significant portions of JS:TGPs I flat out disagree with. Out of curiosity, what parts are controversial and what parts do you flat out disagree with?
Real men make their own jquery
&gt;You can do much better with Scala and its a much nicer language, to boot. Color me convinced.
I wouldn't say underscore isn't well known but I find it extremely useful. 
I use a few micro libraries pretty regularly. * [Underscore.js](http://documentcloud.github.com/underscore/) A popular functional utility belt. * [bean.js](https://github.com/fat/bean) A small dom / custom events library. * [smoosh](https://github.com/fat/smoosh) Asset management utility / library (comes with a command line version and a js API). I use this for building js projects. * [yepnope](http://yepnopejs.com/) An asynchronous js loader I use for development of js projects. Combine, minify and compress your production assets but during development, it is useful for debugging to include individual files. Yepnope gives me one place to define those includes. * [js-imagediff](https://github.com/HumbleSoftware/js-imagediff/) I wrote this one myself. It's a javascript image difference library. I do a lot of canvas work, and regression testing is important. This, combined with some cool jasmine matchers, lets me automate regression tests for canvas.
Thanks. I added a "Copy to clipboard" button, and I see your point about the fading textarea. I assumed editing the JSON a lot wouldn't really be a use-case, mostly just copy/paste. I did remove the fading nonetheless. 
I use Underscore and have heard of yepnope. Quick question - is there a reason you chose smoosh/yepnope over require.js, or was it familiarity/first-past-the-post?
I like [es5-shim](https://github.com/kriskowal/es5-shim) — it polyfills a few useful utilities that aren’t yet supported in every browser, like `(function(){}).bind()` and `[].filter()`.
His module pattern is often not preferred because each object gets its own copy of a function. There are ways to work around that, but in general the fully public but more performant prototype approach is better, despite its drawbacks. I also really disagree with declaring all variables at the top of the scope. Yes, JavaScript variables are only function scoped and yes this can trip you up. But it's never gotten me in any major way and declaring variables as needed makes the code significantly more readable, which is more important IMO. Understanding how the language works prevents this problem far better than just blindly declaring all variables at the top. I also think some of his other stances are a bit extreme or even silly: like never using ++. Again, understanding how ++ works and using it intelligently is better than just blindly absconding from it just because it might bite you in some edge cases. Crockford himself also has a rather strong personality and tends to rub people the wrong way a lot.
I just checked out Session.js. Bookmarked. Whole thread: worth it, if just for that.
Smoosh does combining, linting and minification so I use that at build time, after testing. I started doing this before I started using asynchronous loading. Between yepnope and require.js: first out the gate. Since I don't use it for heavy lifting I just needed something quickly and the examples were at the top of the home page.
I've been using [javascriptmvc](http://javascriptmvc.com). It's built on top of jquery and recently they released a version that supports zeptojs. It has a build/package/dependancy manager called steal.js which is really nice, uses google closure (or your own choice of js minify/lint) to build projects. Has a command line code generator tool, a testing tool (funcunit), integrates a couple of js template engines (I use EJS) and has built in fixtures. I haven't used it on a small app and probably wouldn't (overkill).
require.js is geared towards AMD modules, yepnope is more for polyfill/feature detection. Modernizr.load === yepnope too (Modernizr is another great library). 
I've read again and again from very knowledgeable js experts to avoid crypto functions in js at all costs because they are not secure due to a lack of a CSPRNG in javascript.
I recently wrote up my [own date picker](http://chipersoft.github.com/Kalendae/) library. I absolutely could not have done it without [moment.js](http://momentjs.com/). Small enough that I could embed it into my own lib (smaller than date.js), featured enough to make date handling significantly easier.
TIL real men don't work at Google.
ITT: must-have js for hipster webdevs.
Some cool stuff in there, bookmarked for future investigation
A CSPRNG mainly matters for generating a unique and secure salt. As long as you don't leave that part to JS, you're mostly fine. That also provides some interesting possibilities. For example: Let's say you have a system with millions of users, and attackers with unlimited proxies. By doing a simple brute force attack, each time posting a different username and different password through a different proxy to your server, they will eventually almost certainly take a bunch of accounts if some of your users lack sufficiently strong passwords. You can make this a fair bit harder by sending a random string word with a random salt when someone tries to log in, and requiring the result of a fairly large number of iterations as a response before checking if the password is valid. Like this: * User fills in username and password, clicks submit button. * JS intercepts the submit, posts only the username. * The server adds the attempted username to the session as well as a quick random string and a secure salt, and sends the string and salt back to the user. * The user's browser is instructed to run a bunch of iterations of a crypto function on the random string using the salt in question, and then post that back. * The server receives the response, processes the string and salt itself, and sees if it matches the response. * If there's a match, the server takes the original credentials and checks them - the normal login process. So what's the advantage? Simple: each attempt to log in requires a few seconds of computation, which can slow down the attack immensely. This isn't a very likely scenario and there are some significant downsides, but the concept of attaching a computational cost to transactions like login attempts can be quite useful. Combine it with a decent captcha, and it quickly becomes a big pain in the ass for attackers without massive resources.
Clever things like this are useless on the web. What hacker with an unlimited bot net is going to use a browser with javascript enabled? Client side protections and prevention are **not** the way to be secure. One last thing. What is the bloody point of implementing a complicated solution to have the client calculate a crypto function *just to delay multiple login attempts*? Just have your server software allow one or two logins from ip/session per minute, or cut them off when they've made too many attempts (i.e., brute forcing). With that, each bot in their botnet only gets a few shots at guessing an entire username/password combination--which is a hell of a lot less likely of being brute forced than just guessing passwords of a known account.
I use TaffyDB (http://taffydb.com) for most projects. I did write it though. 
Ha! I actually used Taffy a while ago, back when the documentation wasn't as pretty as it is now. I actually think I was still learning JS when I came across it.
I don't know what system you're thinking of, man, but it isn't jQuery Mobile. jQM has always been a plugin library / html framework that sits alongside jQuery standard. You can see it right here on [the first public alpha's release page](http://jquerymobile.com/blog/2010/10/16/jquery-mobile-alpha-1-released/) (scroll down to the downloads and look at the snippet). jQTouch also sits alongside jQuery. Maybe you're thinking about how Sencha Touch re-implements ExtJS? 
Thank you. This sounds like a good start.
Huh. I guess you're right. Now I'm bloody confused as to where the hell I got that idea from...
Wow. Thanks for this. I'll definitely read it later.
Ahhh... Sorry about that. I'll put it in the correct place.
- [Amplify](http://amplifyjs.com/) - [gRaphael](http://g.raphaeljs.com/) - ~~[Pretty Date](http://ejohn.org/blog/javascript-pretty-date/)~~ - sorry, John but I think Moment.js has superseded this ditty. - [Spin.js](http://fgnass.github.com/spin.js/) - [Davis](http://davisjs.com/)
A lot of people have that misconception that jquery mobile is some kind of stripped down version optimised for mobile. It's not. 
Mootools, as it can do almost everything the rest of these frameworks can do (just not all out of the box), and in almost the same footprint. Note emphasis on the word framework, not plugin, or script.
Good work you did there. I didn't know you were still supporting it (at some point taffydb.com gave me a 404). I made something similar, [meelo-store.js](http://rudasn.github.com/meelo-store/)
crypto.getRandomValues() is supported in Chrome and Firefox now. 
I haven't heard of moment.js; I'll have to check it out. [This page](http://code.google.com/p/datejs/) seemed to have the best docs for Date.JS that I could find.
I just opened it in TextWrangler and parsed it out line by line trying to figure out what they were doing.
Yes. 
In the browser? Currently yes it's guaranteed to be single threaded. Outside the browser? No. Rhino supports multithreading.
JavaScript doesn't have pointers! *walks off giggling* EDIT: OK, fine. I don't use try/catch at all. I'm usually just careful to be sure that everything I'm using in the code actually exists, and is the right type.
I use them in my code. I wrote up a small function that will post to the server when an error occurs on client side with whatever information i can get from the error and a stacktrace (though that's less useful in IE with their awesome error messages).
No, I specifically exclude non-free browsers and ones that are unlikely to be used. Hence, I only need to test on Firefox. If I get a bug report elsewhere, I can deal with it then. Besides, the only benefit a try/catch would give would be a slightly less ugly error page, right? Well, if something is wrong, I'd much rather the user call me in a tiff about it than possibly let it slide.
&gt; the only benefit a try/catch would give would be a slightly less ugly error page No, uncaught exceptions can halt a web application. I suppose you might be developing with another user in mind. For my applications, the blocks are necessary. There are plenty examples where you cannot rely on expectations (server errors, various network related issues). Even IE 'unexpected errors' crop up. You can even create memory leaks fairly easily without proper regression testing. Edit: take a look at a web application like Gmail - check the source, you will notice plenty of try catch blocks.
I was thinking of submitting to this years competition. So I went looking at past winners, demos. etc. Then I saw [this](http://js1k.com/2010-first/demo/750) This guy DIDN'T EVEN WIN. 
&gt; which are really slow Do you have some performance stats on that? I'd be curious to investigate...
Holy crap.
Not sure but it seems that first example is more costly in terms of memory. Because each time you are instantiating a Car, it will recreate the functions, while with the seconds constructor you're defining a method in the prototype attributes of the class, which is not gonna be called on each instantiation. So second example should be better in terms of memory usage
The first one will create a new `toString` method on every new `Car` object you instantiate. The second one creates just one `toString` method on the `prototype`. When JavaScript looks up a method or attribute on an object, it first looks on the object and then up the prototype chain. In the first example the method will be found immediately on the object. In the second example, it will not be on the object, so JS will look at the first object in the prototype chain -- Car.prototype. The first one can be useful if you are trying to do information hiding or encapsulation of a variable that you don't want to be public. The second one is more memory friendly. **Edit**: [here's some further reading on the prototype chain](https://developer.mozilla.org/en/JavaScript/Guide/Inheritance_and_the_prototype_chain). It may or may not be helpful in understanding how JS looks up attributes.
The second method uses prototypal inheritance while the first one does not. The difference is that the toString method in the second case is only constructed once, but is still available to every instance of Car via the prototype chain. In the first case, a new toString method is created per instance, which means that this method will be slightly slower and use more memory, something that might be important if you have many instances of Car in your application.
Also worth mentioning that the first example will make the `toString` function iterable via a for in loop even with a hasOwnProperty check. While the second one will not pass hasOwnProperty.
I actually had my first legitimate use of try/catch last week. I was using a 3rd party lib to parse a templating language, and the lib throws exceptions when there is a syntax error in the templates. So I use try/catch to detect syntax errors and give the user a nicely styled "fuck you"
You're pretty close here :) I would like to comment on some things rather than try to fix your example. One thing I did notice was that you said "we create a closure because we use the return statement" I don't want you to think that just because you returned a function inside another function that you created a closure. You're doing a couple of functional things here, one of them is currying the function. Kind of neat that it's thrown in there but it makes me wonder how confused about this stuff you are or how much you know what is going on! I'll assume for now you meant to Curry your function. back to the return statement.... what is going on here is that you're return a function from a function. This function that you return is anonymous meaning that it has no direct name to call the function. The compiler stores this code somewhere when you call that function, and then evaluates the returned function when you call qq(10); If you are trying to create a function inside of another function that has a NEW scope within... and DOES NOT share the scope of its parent... all you need to do is put the word "new" in front of your returned function. you can do it a few ways, you can NOT curry your function and just do this.innerFunction = new function(){ }; or simply as you have it curried return new function() {}; just by simply running a function you created a new place for javascript to score variables in. this is the scope of that function, and a top level function will have access to all of the global variables defined. so they can change or access something from the outside. The way I like to show people how this works is by making a basic test... just declare a "global variable" outside any functions with the var keyword... then create a new function which we use to test. in this function you have two methods, one method is created by just doing function(){} and the other uses new function(){} as you can see with this code, only the function that DOESNT use the keyword "new" has access to the global variable! var myGlobal = "test"; alert("outer global: " + myGlobal); function outer(A) { var innerVar; this.inner = function (B) { myGlobal = "boobs"; alert("inner global: " + myGlobal); } this.inner2 = new function (C) { myGlobal = "didnt change"; } } var o = new outer("test"); o.inner("woo"); alert("inner gobal: " + myGlobal); o.inner2("woo2"); alert("inner2 global: " + myGlobal); There are a few other ways in JavaScript to create closures of this type. the one you will see everybody using is a neat trick (function(myArg){}){}; basically, just like we said a new function will create a new scope, so does this line. we're calling an anonymous function from the result of the expression inside (){}; so basically, javascript is calling that expression inside that anon function, and inside that anon function we have out OWN SCOPE to work with!!! this is a trick lots of people use to create their own namespace for their library or other things that they don't want to conflict with global variables okay i've written a crap ton for now, feel free to ask questions and hopefully this helps :)
On another note, if your anonymous inner function declared `var x`, then it would no longer have access to foo's x. That's because it would create an `x` which is scoped to that function. Here's an example: function foo(x) { var y = 4; var a = 100; function bar(z) { var a = 1; // bar's x is a different variable than foo's x, because it is locally scoped to bar now return a + x + y + z; // returns 5 + foo's argument + bar's argument; } } &gt; baz = foo(2); function bar // Now baz is a function named bar, with these variables: // a = 1 (local) -- not 100! // z = parameter (local, not defined until baz is called) // x = 2 (from closure) // y = 4 (from closure) &gt; baz(8) 15 // a + x + y + z // = 1 + 2 + 4 + 8 // = 15
I have read a ton of articles and a chapter from my book about javascript closures. Every time i get something different!!! Although i see how the process works most of the time, i just seem miss the point. I understand function scopes and i see how an inner function can be accessed from outside. But, i'm not quite satisfied with the image i get in my head. It's like something is missing! E.g i'm not sure how i could use closures in my code and what makes them so great.
ah! amazing question my friend. being that specific about what you're missing can lead to exact answers! Say I am making a website for a client, and on that website I have decided to use two JavaScript libraries written by 3rd party people. My two libraries for example could be jQuery and Dojo Tool Kit (http://dojotoolkit.org/) When I go to write JavaScript on this website, I might want to use a common variable like the letter "i" or maybe the variable "imageCount" If either of my two javascript libraries that i have included use those variables in their code... there is a chance that my global variables and the libraries global variables will conflict! If me and the library BOTH use the "imageCount" variable for a different count of images... well you can see how that might mess up our code a bit depending on how it's used. So what you do to avoid this is something that some languages have built in natively using keywords or other things. You create a "name space" for your code to live in... you can have ANY name you want in your scope and nobodies code will ever change your variables. This is kind of like using a "private" variable or something of the sort... except that it doesn't work exactly the way private does because private blocks you from modifying it where as javascript might allow you to pass the data back and forth _when you want to_. The scope of your project is a useful tool to you, for not only naming things but for also controling what data goes where and who has access to what data. In the "real world" projects will often have sensitive data or things that you just REALLY can't let the client muck with. So the solution to this problem in javascript is to hide your code behind a closure and have a free happy namespace for you to work in
The first one allows for encapsulation, and the second one uses less memory. Basically, you can have private class variables if you use method 1, but cannot if you use method 2.
TYPO!!! *process* I wanted to display my thoughts through a diagram :D
YAY! I kinda see what you mean. I need to work on the different situations where i can use closures. Thnx!
Ah. AOK. Well, I hope the other comments answered your question, unlike my purely selfish one :)
thank you for that; I was wondering exactly what eightbithero meant by &gt;information hiding or encapsulation of a variable that you don't want to be public
&gt; Besides, the only benefit a try/catch would give would be a slightly less ugly error page, right? No way! If you catch an exception, you can continue doing other things after handling it. Not catching it means the current thread is aborted.
Very good answer. Just want to point out both can hide information equally and the only real difference is that the first technique will have access to all variables in the constructor.
I throw an error in a constructor if it doesn't have valid inputs, so I need to catch those and warn the user to re-input those values, if the object is being created from user input. I typically throw some kind of string that will possibly eventually be displayed to the user. finally blocks are good, even if you don't have a catch, for ensuring that specific code runs after the try (and maybe catch) block. Ensuring that B happens after A even if A throws some exception is something I find actually comes up with some frequency.
Since a lot of people here defined javascript closures to you, I'll try to write a practical example of when it would be useful. Check out this [example](http://jsfiddle.net/vnkuZ/). It helped me a lot to see it in action and to see an example of when it could potentially be used. Good luck! 
Dude, respect. That was a great explanation.
if you expect json, or xml and load it there will be.
I thought that might not be that self explanatory, sorry! A good reason to use the first method is if you want to make getters/setters for certain variables and ensure that outside forces can't mess with them. If you have a constructor like so: function Car(model, year, miles){ var _model = model; this.setModel = function(newModel) { _model = newModel }; this.getModel = function() { return _model; }; ... } this allows you setup validators on your `setModel` method and ensure that nobody can do `car.model = 'Buick LeSabre'` and bypass whatever validation you might have in your setter. The reason this works is because [JavaScript has first class closure support](https://developer.mozilla.org/en/JavaScript/Guide/Closures). If this is still confusing, feel free to ask for clarification, I'm happy to try to make this as clear as possible.
This is assuming that you're creating &gt;1 Car, of course. At my job, the codebase is littered with the first style (this.methodName = function()) for "private" variables/functions via closure. It makes me twitch every time I see it; but since all of these objects are only ever instantiated once per run, I can't justify switching to a prototype approach. OP: The relevant bit for you is that, as el_chief/eightbithero/thedevguy say, you can set up private variables with method 1.
Yes, i was just analyzing the thought process behind it, to see if i got it right :-)
This looks good, but I think his earlier articles on BackBone will be more useful: http://coenraets.org/blog/2011/12/backbone-js-wine-cellar-tutorial-part-1-getting-started/
&gt; JavaScript programmers tend to already be happy with the level of expressive capability provided. True, but ... have you read or grokked "The Innovator's Dilemma" by Clayton Christiansen? Dedicating yourselt to making existing customers happy, even super happy, may not necessarily be the right thing. These changes will advance the language in signficant ways. Compare this to the jump between Java 1.4 and Java 1.5 or Java 5 and Java 6... this is much bigger. It sure seems like the main goal of these changes is for JS to do much more than UI animation in HTML-driven web pages. JS will be a fully-capable general purpose language, and will be used everywhere. 
His loadTemplates helper really needs to be using jQuery deferreds. Would save a bunch of code.
use phantomjs: http://pielmeier.blogspot.com/2011/02/headless-html-page-rendering-with.html
I've never been bitten by variable hoisting, i don't understand why it's such a problem.
i've no clue what that blue squiggly is doing
is the underscored var name a common convention for private variables in JS?
It's typically used for variables you shouldn't be touching. Some of Google's library code uses `root_` and attaches it to the object, but all the documentation says not to use it. There is a definite performance loss for using private variables in JS, so libraries with an eye to performance will typically attach "private" variables to the object and tell you not to touch.
This is exactly how I feel when I roll my own library with [Ender JS](http://ender.no.de/). Feels good to have a jQuery stand-in that comes in at 7k.
No one has mentioned [Ender](http://ender.no.de/) yet! I've recently started using my own custom-rolled Ender libraries in place of jQuery. Imagine for a project you know you're only ever going to use simple events, and simple id or class based selectors - you can roll your own JS library (that looks *very* similar in syntax to jQuery) that comes in at 5K or 6K minified as opposed to jQuery's 31K. "In the browser - small, loosely coupled modules are the future and large, tightly-bound monolithic libraries are the past!"
I was actually planning to dive into Ender with my next project. I keep hearing great things about it and I 100% agree with that quote. When the call went out for jQuery 2.0 feature deprecation, I was excited that we'd finally be able to crop out a lot of the legacy junk and niche-use functionality; sadly, it won't hit for a while yet, so it seems like Ender's the way to go.
The function isn't really being created every time, it's read once, then a pointer to it is assigned to the variable in every new Car instance. The memory and performance difference comes from the function being declared within the Car constructor's scope, with access to it's variables, which means a new context has to be created with pointers to the variables for every new instance of Car.
I don't see any Java in the github repo, but PHP is a perfectly acceptable language for writing APIs in. Hell, he even used Slim which makes building REST APIs dead simple.
It look pretty interesting, but why I can't pause the videos?
The performance is only worse for object creation/deletion. Local var access, property access, and prototype property access are all pretty equal in my experiments. I wouldn't worry about closure performance unless it was in something like a Point2D constructor, where many would be created and forgotten often. OTOH, an audio processing node is seldom created and often accessed so a closure would be fine.
Member functions are needed when they access local variables in the constructor, i.e. private vars. Avoiding member functions typically means changing locals into properties so they can be accessed by prototype functions. If you want to simulate private vars with a closure then member functions result.
Are you talking about an animated interactive background? Something like the background of vimeo.com? I recently saw a library that does that - https://github.com/stolksdorf/Parallaxjs
Good point - though I don't see it that way; however, if you are not finding the help you need, setup a (free) Stackoverflow.com account. That is the best resource ever. You can also try Quora.com. 
sorry buddy but you need to take a second to understand how reddit works. the people who are helpful aren't constantly watching this subreddit 24/7 ya know... sometimes the unhelpful people are the only one who see your post sometimes a spambot will downvote your shit, sometimes people don't like how you coded something and give it a 0 so it never gets out the door its reddit try to understand whats going on here before complaining also... just ask your damn question again lol
As long as the "this" keyword is being used, both techniques will make the variables and methods public. To make them private, you need to use the "var" keyword.
All these subreddits are the same, like php, ruby, jquery. If you want assistance then you'd be much better off with Stack Overflow, then when your project is finished, show it off. Bear in mind that what might be a huge source of pride for you, could just as easily be 'meh' for someone else. Set up a specific js help subreddit yourself, the way there is /r/CSS but also /r/csshelp.
This was a great explanation, thank you.
Would you be able to explain how a function-scoped variable ("private") affects performance? I have never heard of this before, didn't know.
Don't worry about me asking the question another time and getting nowhere with unhelpful responses, I checked out W3Schools and they got me all squared away!
[This](http://isthatclear.com/jquery/canimate/) might be the kind of thing you're looking for...
Is there somewhere that says this subreddit is for helping people learn javascript? Just being on reddit doesn't automatically mean that people are going to help you do things.
This is not a help desk. If you ask an interesting question then it will be upvoted. General "please help me with my homework/job" questions are not appreciated. There are better places to get technical help. You'd be better off using those.
I came to reddit looking for resources as google was getting me nowhere...Turns out, what I thought was the problem wasn't, and it took someone actually looking over my code to figure that out. I would have never known that had I looked in a book... If you look at my questions, I never ask anyone to do it for me, I ask them to point me in the right direction, and I can go from there...
No, but it also doesn't state that this isn't a subreddit for learning. Just being on reddit means that you are surrounded by like-minded people, which is usually the best resource for figuring out solutions to problems.
i'm kind of proud you ran my code in that many browsers. not sure if i should be flattered or worried. you're 100% correct though i confused what the new keyword is doing from another language i was using while i was quickly writing this up i made a huge mistake in there... here is the correct code var myGlobal = "test"; alert("outer global: " + myGlobal); function outer(A) { var innerVar; this.inner = function (B) { myGlobal = "boobs"; } this.inner2 = function (C) { return function (D) { myGlobal = "didnt change"; } } } var o = new outer("test"); o.inner("woo"); alert("inner gobal: " + myGlobal); o.inner2("woo2"); alert("inner2 global: " + myGlobal); 
http://stackoverflow.com/questions/9120590/i-need-help-getting-around-having-people-refresh-my-website-if-they-want-to-reus And there you go, sir. Already got my answer, but thanks for playing.
Property access via `this._private` is a very quick, native-code optimized call that deals directly with the variable. By hiding it and using getters/setters, you have to invoke the overhead of a function call on each access as well as create a new function to close over the private variable (with a little extra memory required to maintain closure scope). You have to create new getter functions for each object, which is significantly more memory used per function than deferring to a single function on an object's `prototype`. For a few objects with properties that you access only a few times, it's not a big deal, but if you're doing lots of calls or lots of object creation, it can easily drop performance by 10%-20% or increase memory usage (by some value determined largely by the number of objects created and the number of getter/setters). Using getters on the prototype (via `obj.prototype.get = function(){ return this._private; };`) also incurs the overhead on access, but it can be avoided by going directly to `this._private`. The difference is that internal functions don't need to use the getter to access the property, which is where the performance penalty would have happened. **Short version**: straight property access uses optimized native code, hidden variables require creating new functions to close over the hidden vars (more memory) and require a function call on access through javascript. It occurs to me that part of the confusion may have been that my original post suggested that using private variables was bad for performance. The private variables themselves aren't bad for performance, it's the support structure of getter/setters that incurs a penalty.
cool
That's the point. Go to Stackoverflow to get help on specific problems: there are lots and lots of people willing to help you over there. But you'll quickly notice that SO is **not** the place to talk *about* JavaScript and learn about new experiments and tools: that's what `/r/javascript` is all about. `/r/programming` is great, too, as well as HN. Use the right tool for the job and you'll go a long way.
You know, but you do it anyway. Cool story bro.
NICE! That might do it. Thank you!!
ooo...looks pretty sweet. thanks so much for the good referral! 
It says &gt;Stack Overflow - For noobie questions Sorry that I didn't view this as a 'noobie' question...
Then why not highlight that in the description? Saying &gt;All about the JavaScript programming language. doesn't mean that you can't ask questions or get help. "All about" means anything, no matter what, can be discussed here, even getting assistance on code/projects.
I asked when I was stuck. Nowhere did I ask for someone to teach me the language, except for asking for resources that could help. I didn't even get a "Check out the sidebar" and I only got "You might have better luck posting to StackOverflow" on the most recent post. I'm not asking any reddit user to teach me the language. I'm asking for assistance in learning, since most every subscriber knows the language and has had to use a resource at some time or another, so they know the best ones and the worst. I'm never asked for hand-holding, I asked for guidance.
Because not everything must be spelled out. Because this place, like most subreddits, is a free form community: the rules change over time and are not written in stone. Maybe the person who created this place wanted an all-encompassing subreddit but it didn't evolve exactly that way. The users decide what it becomes and they/we decided it's not the best place for getting help. You should learn to use the right tool for the job: want to talk about general/specific concepts/trends/tools? Here is the right place. Want someone to explain to you how to clone a DOM element? Go to Stackoverflow. That's very simple, clean and obvious if you take even a distracted look at `/r/javascript`'s front page. Reddit is a condensed version of the best and the worst of the internet. You should have taken some time to observe this place and make yourself an idea on it and how it works before taking the plunge. I don't (want to) know your age or how long you have been using the internet or how long you have been learning JS but you probably need to grow a second skin and learn the black art of "reading between the lines". And how the hell would you come here from a google search? JS-related queries are always flooded by SO answers.
Then you need to get over your high opinion of yourself. Your problem was very easy to find by opening the console and checking for errors, and the actual issue was as simple as you not using an array right, and ending up with 'undefined' entries. The solution you chose was also terrible, because it relies on the 'in' keyword which is meant for objects. A better solution would be checking for undefined before attempting to access the setMap function The best solution would be to change `markerArray[i] = marker;` to `markerArray.push(marker);` and use the loop you had initially
Apparently this subreddit does give help, because you've told me something different than StackOverflow. If this subreddit is better than StackOverflow for code assistance, I will use your answer, but since everyone is telling me StackOverflow is better, then why are you trying to help me here instead of helping me over there?
How about a sidebar entry reading something like: &gt; Looking for Javascript Assistance? Try /r/javascripthelp That way, users don't clog up your news sources with assistance requests...
you can't pause the videos because the music is broadcasted to everyone in the world connected to the channel. imagine that it's like a radio, but a visual one with music videos. if you like the video currently playing and want to say something, you can chat with other music lovers in that channel with the live chat function. you can also add the song into your playlist to playback later anytime you want. :) most of these features are still pretty experimental, if you have any ideas do let us know!
I am not asking for you to, nor am I asking for you to do other people's work for them. All I'm asking is for constructive comments to be made instead of "STFU noob and go ask your question elsewhere...we're too elite for helping out!"
Just use a print stylesheet, you can hide any blocks you dont want printed with display: none;
Looks great, very impressive. You can probably speed up the initial load / initialization quite a bit by minifying and concatenating your JS files. For me it took ~30 seconds to load (though, that's also probably because I'm saturating my shitty comcast connection). 
Unfortunately not everyone else is so motivated. **edit** If you know of a question that wasn't answered, feel free to link to it, and I'd gladly tell you why I didn't answer it. Things that make me not care about helping certain people or answering certain questions include: * too lazy to google something trivial * too lazy or stupid to follow simple instructions like, "debug it with firebug by setting a breakpoint at line 75" and other reasons
This is amazing! I feel like viewing youtube (as well as other sites) in a graph form would be much better than linear links. Definitely a project to watch.
var will scope the variable to the current function (see lexical scope). I wouldn't say they make things private as much as they don't make them global. Global variables are bad.
Yeah, it would lose all the CSS that is attached to the main document. Maybe you could search the main document for style tags and append them to the new document?
I'm not at all surprised that you don't think reddit is a helpful place when you have an attitude like that.
So far all I've seen is you acting like a total cunt in this thread. Why would anyone give you any constructive comments? I guess the whole world owes you?
People get plenty of help here, just not the ones that act like total douches.
&gt; I've noticed that this subreddit is a place to find news about javascript and not about helping people learn javascript. What gives? This place is what the userbase makes of it. We have no problem or rules against people asking javascript questions here, but the community as a whole doesn't seem to like it. this is probably because Reddit as a general rule is a place for news and insight and discussion (well, it used to be, anyhow)... Sites that have already been mentioned in here exist *specifically* for you to go get help, and are the best places to go in my opinion. StackOverflow is awesome for that. A big reason StackOverflow is better than Reddit as a place to ask for help is that the people who go visit StackOverflow are *specifically going there for only two purposes: to give and receive help!* Coming to a place where people are here for all sorts of purposes means that your purposes/hopes may be in the minority and that's just kinda the way it goes. I'd like to see people be a little less negative here, but I can't control the community and it's not my intent to do so.
That would be awesome - a bit like jquery of addons. As you say, RES is due for a refresh, so why not do it for the hell of it anyway?
because the time commitment to documentation is huge... so if it's not going to get used by a decent number of people it doesn't seem worth the effort :-)
Sounds great. I'd def. be interested.
Loading the page with the [Disconnect](https://chrome.google.com/webstore/detail/jeoacafpbcihiomhlakheieifhpjdfeo) plugin enabled shows **363 Facebook scripts/API calls** blocked!! I've never seen this in double-digits before, much less triple. What in the hell are you trying to do?!?
The boilerplate would be awesome - I somewhat have one that I use for chrome extensions, and I'd be happy to add a pull request to add the basics for that.
Animated GIFs v 2.0
Used it for a maps application and worked like a charm. Also good for tracking impressions for products. Fire a beacon after the page loads.
Is there not a simple javascript include available which tends for all the little weird things certain browsers do. Surely that would be a better idea for a development project. No knowledge required - a lot of people would get behind something like that
You mean that your production server is the same as your development server? Even if it is, there are ways to automatically compile scripts and then serve it depending on some kind of flag (ie. a query string with dev=true makes the page serve unminified code). Anyway, great job, the app is looking awesome!
There should only be 1 Facebook script calling (Facebook API, standard stuff)... the API calls should be the Socket.IO trying to get connected to your client to send data over such as the current video and time syncing and all, and if you blocked it, it'll just try to do it again and again and again. It should only appear as that if your client or ISP doesn't support Websockets and it fell back to xhr long-polling as a transport. Ouch. :( Can you try using https://www.attictv.com instead? :) 
Because there are only 3 of us in the office, we can only test so much, so we are relying on the crowd to send in error reports whenever window.onerror so that we know what problems various browsers and clients are facing at the moment so we can fix them, lol. We'll need a better way to do this, definitely... :( Thanks for the compliment! I hope you liked it! :D 
It still has a bug.
You've got to refresh after it's visible. Throw a break point on the line with the refresh and you'll see that it reaches that breakpoint before the other editor is shown.
hmmm, I did a setTimeout...that seemed to do the trick, I'll have to test it with Twitter Bootstrap 1.4. I could have sworn I tried this yesterday and it didn't work. Thanks for the tip! EDIT: Setting a millisecond delay worked fine, and there is only a slight flash, but it works perfectly!
&gt; It would of course be on github and be FOSS... about time damnit! ;D nah seriously RES should be there. regarding this I would probably use it, I do most script for FF but I've starting using Ch elsewhere and I'm getting to the point where some are FF's and others not, this should fix that and I should use it because there's no way I'll do cross-browser myself. +1
&gt; about time damnit! ;D nah seriously RES should be there. RES is there, dude. check the /r/Enhancement sidebar. :-)
If you've ever used Adobe SiteCatalyst/Omniture then you'll recognize that this is exactly what those applications do. The real product they're selling is the non-programmer application that actually gathers stats and reports.
I use the following to write Greasemonkey scripts which can be used as-is in both Greasemonkey and Chrome, and also included in a Chrome extension's prefs.html, so I can also use the same preference management code with [prefs.html](https://github.com/insin/greasemonkey/blob/master/UIL/prefs.html) and a [near](https://github.com/insin/greasemonkey/blob/master/UIL/prefs.html#L8-11)-[identical](https://github.com/insin/greasemonkey/blob/master/rllmukuserignorelist.prefs.html#L8) HTML document bundled as a [data: URI](https://github.com/insin/greasemonkey/blob/master/rllmukuserignorelist.user.js#L698) and [injected into an iframe](https://github.com/insin/greasemonkey/blob/master/rllmukuserignorelist.user.js#L723-740) with Greasemonkey: https://gist.github.com/886877 I'd be interested in a more feature-complete cross-browser userscript library which allows me to support more browsers, sure. Would be happy to contribute to it too, if required.
ahh, perfect. I'll clean up the code when I'm back at work tomorrow.
Thanks! I understand you, I was just complimenting your &lt;img&gt; tag idea. =P We're coming from different area's I think, I wondered if I'd gain anything. In Java web development mapping URIs isn't really overhead, it's extremely common so for me it's half dozen of one six of another but I do see your point using PHP. It may be a teeny bit more setup client side the first time, but luckily we reuse code and just change the uri variable. You also don't have the ugly X or have to interrupt your UI flow at all. I like it, they both have uses in different places and for different people.
fantastic
Done. Thank you :)!
Thank you for your nice words! I'm also watching for your feedback :).
I'd actually be more interested in hearing about your experiences with your chosen technology stack -- considering the sub we're in and all ;) What all do you use, what works, what didn't, and why/why not? Were there any surprises or other non-obvious factors? Overall, was it faster, easier to develop, and safer when compared with the 'traditional' stack? Any problems scaling, and what do you see as your bottlenecks? I don't necessarily expect an answer right off, those types of topics are usually full blog posts -- but I am curious!
Awesome! We'll work on a blog post about our tech stack soon, I will keep you updated! :D 
It's hard to distinguish between that and French.
Great question! Somehow creating a native DOM image element is a bit less resource intensive than an XHR object. I got the info from Nicholas Zakas' book "High Performance Javascript" Quote: Beacons are the fastest and most efficient way to send data back to the server. The server doesn’t have to send back any response body at all, so you don’t have to worry about downloading data to the client. The only downside is that it you are limited in the type of responses you can receive. If you need to pass large amounts of data back to the client, use XHR. If you only care about sending data to the server (with possibly a very simple response), use image beacons. Zakas, Nicholas C. (2010-03-11). High Performance JavaScript (p. 134). Yahoo Press. Kindle Edition. 
Consider the CSS sprites method, if that could apply to you: http://css-tricks.com/css-sprites/ Otherwise, you'll want to use a variation on this method: http://www.mediacollege.com/internet/javascript/image/preload.html
If you hold the left key it messes everything up
&gt;Please bear in mind that I have never done Javascript before &gt;I'm trying to make a paint style application using html5 canvas and javascript. You should start off with something easier than that if you're just now learning javascript. Go through some beginner/intermediate javascript tutorials first. Pre-loading images is probably one of the easiest parts of this tutorial to complete.
I believe you are looking for [Zepto](http://zeptojs.com)
jQuery is a library that simplifies some common javascript tasks. The $ is simply shorthand for the library. So: jQuery('#mydiv').hide(); and $('#mydiv').hide(); are actually the same thing.
This takes me back to my roots. Thank you for reminding me.
Gahhhh! The guy doesn't even know how to write javascript yet and you're trying to force jquery on him... and just to RUN A SCRIPT ON LOAD! What's wrong with you people? My advice to you would be learn javascript, understand how it works, then - if you feel you need to - learn how to use jquery. Including a whole library like jquery just to run a script on load is NOT good practice. No way! Edit: Sorry, you're just the metaphorical straw that broke my camel's back... I read stuff like this every day. I just hate to see people being baptized into a religion before they're old enough to make an informed choice. - metaphor-o-rama.
Can someone explain how to get this to work &amp; how to get started using this? I know javascript, but this is a bit confusing.
I don't agree. I know that questioning jQuery is taboo, and I expect that before I've finished typing this an armed swat team will burst through my office door and take me away to be 're-educated' but... I don't believe that it -or (probably more accurately) the people who evangelise it - promotes good practice and beginners become to abstracted from what the code they're writing is actually doing. I'm sick of seeing questions on here and stack overflow - from people who're trying to learn - asking straightforward questions which are answered with: "download jquery and use $('my_element')" or similar. ...here they come.
OK, now I've had some sleep I know what's going on. This function is actually pretty much the same as the one suggested by Recoil42 below. Unfortunately this doesn't do what I need (unless I am just doing it wrong somewhere along the line). My problem is that my program tries to do a drawImage before the image has loaded, resulting in the images not being displayed at all. The CSS solution however works very well, so I may well stick with this for now, the only thing I find a bit clumsy about it is having to store the image urls in my html document and in the script, but it works fine. this is the bit of code that draws my menu: var i = 0; for (i=0; i&lt;menuImg.length; i++) { if (menuImg[i]) { var imageOb = new Image(); imageOb.src = menuImg[i]; mctx.drawImage(imageOb, i*menuSize, cmenuHeight*menuSize); } } menuImg is an array containing the urls of the images I wish to draw. This works just fine when the images have been loaded via CSS or browser refreshing. I think the confusion (which has been causing me trouble in my googling) is that I need a function that preloads the images, and won't let anything else happen until they have loaded. Not just a function to kickstart the loading of the images when the page is loaded.
See if this works for you &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;p&gt;First paragraph&lt;/p&gt; &lt;p&gt;&lt;script&gt;document.write("Second paragraph");&lt;/script&gt;&lt;/p&gt; &lt;p&gt;Third paragraph&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;
Calling document.write after the page has loaded will overwrite the page every time. This is why most sane people do not use it. The only way around this I see is to actually override document.write: document.write = function(string) { document.body.innerHTML += string; };
Haha I agree most sane people would not do this, but this is for a class assignment. My opinion the teacher is teaching unconventional practice by doing it this way. I may just let it fly this way and the teacher can deal with it. Thanks!
I see. With document.write(), you can't write to the document after the page has been fully loaded. It will just create a new page and write to it. The only way document.write() writes to a specific place in your document is when you invoke it at that place during loading. This is why the use of document.write() is discouraged, among other reasons. Do you have to use that button? Otherwise you could just call the show_confirm() function during loading.
I just wanted to list one of the many options of getting this done. If in the process he learns about jQuery too, how is that a bad thing? Unbunch your panties, sir.
Maybe he's trying to prove a point or challenge you to come up with a solution. If not I would probably take what he says with a grain of salt from now on.
[This is how you'll stop me from reading your blog.](http://i.imgur.com/gblTj.png) &amp;#3232;\_&amp;#3232;
Cool idea. Why did you undertake this? Might wanna specify which VB (i.e vb6).
More likely he's operating out of a Teach Yourself DHTML In 24 Hours book, circa 1998.
Yes. it's VB6. Because while I am learning JavaScript, been at it for a few years now on and off, I think that for a lot of the functions, the VB syntax is just better. simpler, easier to remember, and fuck camel case. I've been using VB for 15+ years now. I'm sure the JavaScript purists will scoff, but there's not much difference between using my vb.js and using say, jquery or dojo. It's just a different syntax for the same things. 
Done. Good idea. 
Have to agree with this truthfully :D, Just looking at some VB code now made me reel in horror, All that uppercase wording: Thing as Integer...
Thanks for your input, unfortunately your suggestion doesn't seem to work, and in fact breaks the rest of the code. I have tried various permutations of onload (the l should be lower case), with no success. I don't quite understand why this doesn't work, but it doesn't. I think it may have something to do with the temporary nature of the imageOb variable. I think I need something to actually wait until the image has loaded, and not to execute any code in between. In the mean time, the CSS method works very well, so I will be sticking with that for the time being. Thanks for your help anyway.
Despite your anti-JS comment in here, I think this is actually a great way to *learn* Javascript. You've got RegEx's, less-commonly-used standard methods (``fromCharCode``, ``lastIndexOf``, etc), ``===``, and so on. But how will this help you do your work faster? There's the familiarity of your old language, but as you implement this experiment, you will become more familiar with the new language. Libraries should be about solving things you do often, like parsing particular kinds of data, generating graphs, and so on. A second layer on top of Javascript to change the syntax, like CoffeeScript, will just make it more difficult for you to debug your program, because you can't be sure if the bug is in your thinking (high-level requirements), your code (VB6-style JS), or your wrapper library (for instance your date function doesn't work at the moment). The best outcome, I think, is that you become more of a polyglot programmer, and get the advantages each programming style gives you. JS is good and bad for this, because you can write in imperative, functional, or object-oriented style (and mix the three significantly).
Ehh, you're comparing apples and oranges there, a little. Sure, there's no trim() function but you could quite easily do: String.prototype.trim = function() { return this.replace(/^\s+|\s+$/g,"")} And then just run stringToTrim.trim(); Which makes a ton more sense than trim(stringToTrim) because it's kept within the confines of strings. A generic function called trim() would have to handle each and every data type.
The Good Parts is excellent and has been extremely helpful to me. But I wouldn't recommend it to someone starting with the basics, unless they had a lot of programming experience and had cleared the first few hurdles using the DOM.
Now that would be a true shame. I disagree with the premise of the project, but you (and others with a similar mindset) ought to be allowed to experiment and learn without fear of vandalism.
One thing I've learned in my time learning JavaScript is that there are as many ways to do a particular task as there are programmers using JavaScript. 
Javascript Cookbook http://shop.oreilly.com/product/9780596806149.do or JavaScript: The Definitive Guide http://shop.oreilly.com/product/9780596805531.do
Now [implement x86 assembly in JavaScript](http://timhatch.com/projects/jsassembly/). I kid, I kid. Good work this (and shame on you at the same time)!
It actually returns ``"helko"``. It makes sense from the perspective that most of the time you want the ``replace`` function to replace the (usually single) instance of the string and then immediately return, rather than go through the entire string finding all instances to replace, this way it uses less CPU time to do the job. If you want more advanced string manipulation, regular expressions were *designed* for that, so it makes sense to switch over the RegEx engine. Just because it's different doesn't mean it's bad. Tradeoffs were made because of the environment it was designed for (VB can be compiled, JS cannot, so that alone can affect the desirable APIs).
&gt; This leads me to believe you are a Java programmer who either seriously misunderstands JavaScript or fails to understand its internals. No... JS is not a fully capable general purpose language. It's been a tactical language that evolved accidentally and specifically to address the needs of browser-based UI automation. It has improved but there is a long way to go. The widespread adoption of modern browsers means many many people are investing in the language, learning it, improving the engines. and that leads to the desire to use the language and engines in non-browser environments; Node.js is just the start. This is what I mean by "fully capable". JS isn't now. It is getting there. &gt; With JavaScript I have been able to do a better job of pretty-printing JSLT code than anything ever written in Java. That you used "pretty printing" in a browser as evidence that Javascript is a general purpose programming language.... sort of illustrates your disposition. I am not talking about pretty printing here, or anything having to do with browsers. I am talking about general purpose computing. But I think maybe you didn't really think "pretty printing" is the proof. I think maybe you just want to toss out your personal projects for exposure. Which is great, your enthusiasm is commendable. But we all know that UI management is not the beginning and end of computing. I am talking about a degree of generality that approaches and exceeds that of the C programming language. Javascript has that potential. 
spotted a bug on a quick skim: function date(){ var now = new Date(); return now(); } 
Not a book, but I found this helpful: http://bonsaiden.github.com/JavaScript-Garden/
Hello, Firstly thank you very much for your help, secondly i am currently using jquery anyway! but had no idea it had this function built in if i was to use $(this).id would that return the clicked div's id? once again thank you for your time and effort. then i can make it change a form's value to that id for the selected item! :)
`$(this).attr('id')` will work for you.
If you were good at coding you could make vb6 have object inheritance and also you could maintain a very "object oriented" like style code... there were some major things you couldnt support naively but references, pointers, low level assembly, libraries, dll extensions, directx and opengl support... do i need to keep going? You didn't know how to use vb6 very well just like the majority of people in the world
This is why i said that The Good Parts is good for people that instinctively learn javascript through jquery (I started 'javascript' originally by using a lot of jquery). It's very healthy for those people to read this book.
Cool.
&gt; That you used "pretty printing" in a browser as evidence that Javascript is a general purpose programming language.... sort of illustrates your disposition. Not really, because the file can be executed outside a browser. A server-side API is written and available, though no longer maintained. As such, it can be used as a service no different than JSP. &gt; I am talking about general purpose computing. I believe you are talking about a stand alone compiled application as opposed to an interpreted application that must be in proximity to an interpreter. Adobe created a compiler for web code to operate independent of an interpreter or parser, which I believe was called Air. &gt; But I think maybe you didn't really think "pretty printing" is the proof. I think maybe you just want to toss out your personal projects for exposure. No, I was very serious in what I said. I have never seen any other pretty-printer that formally conserves white space tokens as nodes of data, provided a structured data form, primed for lexical parsing in a node collection where such nodes offer a compounded syntax. By compound syntax I mean something to the effect: &lt;c:out value="&lt;strong&gt;my text&lt;/strong&gt;"/&gt; If I honestly believed that any other such tool existed fitting the implied requirements for XML parsing and the extended syntax supplied by JSTL I would not have demonstrated this tool here at all. I honestly believe a tool written in JavaScript performs a better job of pretty printing a formalized Java grammar than comparable tools written in Java. I could be wrong, but so far I have no reason to believe so.
Can you use Transparency to render JSON objects with unknown keys? With this I mean a structure like this: { "ProHaxxor": { "score": "99999", "name": "ProHaxxor", "level": "79" }, "n00bie": { "score": "3", "name": "n00bie", "level": "1" } } So if I don't know the player names, is it possible for me to render their names, levels and scores? 
^^^ listen to this man especially about the page loading thing - only a synchronous script can call document.write - everything else is destructive, document.write writes in-place. After the page has already loaded, calling it will just overwrite the entire page
Is there an Option Explicit thing?
I thought it was a good way to learn both, so maybe someone looking into Backbone or RequireJS will benefit from it. It doesn't use Backbone collections, as there wasn't really a need for them.
The controls at the bottom do nothing in Firefox 7.0.1, OS X Lion.
Hmm... I tested with a couple versions of Firefox. Firefox 10 and an older one (forget which exactly). I'll have to check it out later. Edit: Just had a friend test in Firefox 7.0.1 on Snow Leopard and it seemed to work fine.
Not a problem! Let me know if you get it working. I've started and given up on a ton of browser-based RPGs!
You can use the Web Developer Console as a javascript console.
:)
Bzzt, both wrong. String#trim is part of ES5: http://es5.github.com/#x15.5.4.20 :P 
 function obj(object, keys) { for (var i = 0, n = keys.length, scope = object; i &lt; n; ++i) scope = (scope[keys[i]] || (scope[keys[i]] = {})); return scope; } obj(x={}, [1,3,5,1]); x = {1:{3:{5:{1:{}}}} This almost gives your second request for free (`obj(x,[1,3,5])[1] = 'blah'`), but it shouldn't be too hard to adapt to get exactly what you want.
 function f(o,a,v){ var e = a.shift(); return a.length?f(o[e]=o[e]||{},a,v):o[e]=v;} var obj = {}; f(obj,[1,3,5,1],"blah"); // obj.1.3.5.1 === "blah" It's a fairly weird thing to do though. 
whoa, it's the legendary jashkenas! :D i have sent you an email to your gmail, hear from you soon! thanks so much!! 
I'm [still in college](http://adam.reineke.me/resume) but knowing jobs like this exist make me very excited to graduate someday. I know these questions regard the desirable traits, not the requirements, but I'm curious: * Is the Node experience just for API familiarity? Or is there something else you want to draw from a candidate's experience? * Why Flash experience if you're building a JS powered UI? * Why mobile SDK experence? Again, just for API familiarity? Awesome position, hope you're hiring more in December next year! 
* It's important to have experience with JavaScript outside of HTML/DOM. * First of all, JS and ActionScript are close cousins. Second, our JS platform draws some parallels to Flash's scene structure. * Again, this is to do with being comfortable with development beyond the browser. I hire interns every year for the same sort of role/work. Feel free to email me a resume for 2013.
+1 just for function name 
The YSlow source looks like it will be an interesting read on this topic: https://github.com/marcelduran/yslow
Apply to those positions anyways, if you are interested. Remember that in a lot of cases these job postings are written by a human resource or recruitment department, not necessarily by the people most qualified to describe a technical role. Also as you can imagine, it acts as a filter for positions where they expect a lot of applicants. It's sad, because they skip over a bunch of qualified applicants, but what can you do. Interviews are very expensive (time consuming) to conduct. 
Hey guys. This is still very much a work in progress, but if you have any thoughts on entries that should be changed, can be improved or just a typo correction I'd really appreciate you submitting a new issue here: https://github.com/addyosmani/essential-js-design-patterns. Translating classical design patterns to JS can be a tricky art at times and I'm more interested in this project being accurate than anything. Feel free to correct me if anything looks out of place. Cheers! Addy
For me, it's not that I don't think I'd get the job if I applied, or anything like that. I don't apply for them because having something like that listed as a 'requirement' in your official job spec tells me a fair bit about the culture inside the company.
I just thought that I'd point out that the headline on this post could be perceived as sexual.
Can you recommend a sample video you know works well across devices?
There sadly is none that works for all devices, since all devices support their own kind of data. I usually stick to WebM [vp8, vorbis], since that works in both recent Firefox and Chrome. WebM however is not accepted by iOS devices, who crave MP4 [H.264, mp3].
I knew you were going to say that.
Just calling the css() method by itself on an object will return that specified CSS attribute! Like so: var current_bg_color = $("#charbox-5").css("background"); Try it! 
This looks pretty amazing and exactly what I need to read. Now, I just need to bite the bullet and do it.
For now, I added some code that defaults to the quicktime player on iPads and iPhones. I think the issue might be related to dynamically wrapping the video element in a div.
As an experienced Java developer suddenly diving into the world of JavaScript, I can't begin to describe how helpful your guides and presentations have been. Your writing strikes the perfect balance between reminding the reader that "there's more than one way to do it," while also providing enough concrete material to wrap the mind around. Without these guides, I'd be lost in a sea of conflicting snippets of Stack Overflow code. Thank you!
Could you use something like this? **MAINPAGE.HTML** &lt;html&gt; &lt;head&gt; &lt;script src="jquery-1.7.1.js"&gt;&lt;/script&gt; &lt;script src="javascript.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="contact_form"&gt; &lt;form name="contact" method="post" action=""&gt; Name&lt;input type="text" name="name" id="name" value="" /&gt;&lt;BR&gt; Return Email&lt;input type="text" name="email" id="email" value="" /&gt;&lt;BR&gt; Return Phone&lt;input type="text" name="phone" id="phone" value="" /&gt;&lt;BR&gt; &lt;input type="submit" name="submit" class="button" id="submit_btn" value="Send" /&gt; &lt;/form&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; ---------- **JAVASCRIPT.JS** $(function() { $(".button").click(function() { var name = $("input#name").val(); var email = $("input#email").val(); var phone = $("input#phone").val(); var dataString = 'name='+ name + '&amp;email=' + email + '&amp;phone=' + phone; $.ajax({ type: "POST", url: "DoStuffInHere.php", data: dataString, success: function() { $('#contact_form').html("&lt;div id='message'&gt;&lt;/div&gt;"); $('#message').html("&lt;h2&gt;Contact Form Submitted!&lt;/h2&gt;") .hide() .fadeIn(1500, function() { }); } }); return false; }); }); 
This has been done. See http://bellard.org/jslinux/ Pretty damned amazing, actually. Also, props to Alacritous. Yeah, VB is horrible and all that, but working on it paid the bills for a while for a lot of us. Which isn't so bad. 
It would be unheard of to not require a CS degree. You should think of it as a norm, and just clarify your experience if they give you a call. Most of the jobs I applied for required a degree, but I have none. I opted instead to join the US Army and I was in the Signal Corp (Communications). With that said, if somebody has zero experience, I really appreciate when they hire from Georgia Tech (in town) as those kids really do have their ducks in order in what it takes to learn on the job. 
It's due to the magic of hoisting. (This is also the motif behind JSLint's one var rule.) Basically, your code is identical to this: function foo() { var scope; document.writeln("scope = " + scope); scope = "Local"; document.writeln("scope = " + scope); } If you declare all of your vars at the very top of their respective innermost function, the observed behavior and the expected behavior will be identical.
I ran this and I got the same results. I then removed the "var" keyword from the "scope" assignment to "Local". It then ran as expected. Evidently using the "var" keyword in a global scope and then in the function scope causes javascript to err on the side of the function scope. &lt;html&gt; &lt;body&gt; &lt;script&gt; var scope = "Global"; function foo() { document.writeln("scope = " + scope); scope = "Local"; document.writeln("scope = " + scope); } foo(); document.writeln("scope = " + scope); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
&gt;i was just tried &gt;tried &gt;**tried** wat
So this really needs to be broken up in multiple pages to be digestible, even if it is done through client side trickery. 
However, since WebM respects your freedom and the cabel that controls the patent pool surrounding h.264 does not, the choice of which codec and thus browsers to emphasize is obvious!
It's right result. When interpreter parse the code, and before code excution, the variable object of global scope is {scope: undefined, foo: reference foo function}. Before code execution of foo(), foo's variable object(active object) is {scope: undefined}. After code execution, the value of var is assigned "Local" at var scope = "Local". the reference is http://dmitrysoshnikov.com/notes/note-4-two-words-about-hoisting/ sorry about my poor english :)
also try posting to /r/php instead ? this is the javascript subreddit :p
&gt; I think I need something to actually wait until the image has loaded, and not to execute any code in between. Here's a pure JavaScript solution based on that requirement: function mainScript() { alert('images are preloaded, you can now execute the rest of your code.'); } function preloadImages(images) { var imageObjects = []; var loaded = 0; var imageCount = images.length; function checkStatus() { loaded++; if (loaded === imageCount) { callback(); } } for (var i=0; i &lt; imageCount; i++) { imageObjects.push(new Image()); imageObjects[i].onload = function () { checkStatus(); }; imageObjects[i].onerror = function () { checkStatus(); }; imageObjects[i].src = images[i]; } return { defer: function(fn) { callback = fn || function(){}; } } } preloadImages(['image1.jpg', 'image2.jpg', 'image3.jpg']).defer(mainScript); Basically when you call preloadImages(arrayOfImages).defer(mainScript), it preloads all the images and calls mainScript() only after it's finished. Keep in mind, the interpreter will continue loading the rest of the page and any other scripts that follow, so you've got to encapsulate the code that requires these images within the mainScript() function, or whatever you want to call it.
And links to a demo or code?
sorry, no demos/code yet. still to early on in development and my home connection can't handle a demo :( I can try to answer questions or address comments related to the map generator
I believe you need to return 'this' from the render method to allow chaining. See my pull request ;)
The dungeon looks great. I'm not sure why, but it really makes you want to raid it with a vorpal sword in hand.
What algorithm are you using to generate the dungeons? I poked at random dungeon generation a little while back, but didn't come up with anything that I really loved. Yours looks quite nice.
Yeah, it looks like it's originally meant to be used with RPG Maker (though they also allow people to use it with their own game code).
Totally thought this was going to be a post about a Disney character. *disappointed*
I'm working on a tile based game in javascript too. Are you using perlin noise to generate the maps? What are you using to handle rendering and physics? [Imgur](http://i.imgur.com/d43zo)
Hi. I'm the author of the book. The above code snippet you referenced (the one you're having a problem with) actually has a casing issue I need to correct. (function(Mediator).. =&gt; (function(mediator).. which then gets used and I should probably rename the 'mediator' at the tail end just to demonstrate it could be called something else. btw, earlier in that section I mention that the publish() and subscribe() methods are usually exposed as a part of the mediator for certain use cases. In the same way you *could* store values on the mediator. It'a an anti-pattern in ways, but I could just as easily have stored them separately. I think I'll revise this example to avoid further confusion.
I'm glad someone got a kick out of that line. Didn't know if many would get the double entendre :)
The dungeon is generated using 3 things: First, a maze is created using the javascript maze algorithm found at [Rosetta Code](http://rosettacode.org/wiki/Maze) Second, each non-wall maze entry is filled with a 'Room' and an opening is made on sides where there will be an adjoining room (according to the maze) Third I offset all the rooms to their final location and paint corridors between room openings
Thanks, I had already stumbled across a couple of those tile sets and am actually using a few of the tiles already. But its nice to have a link to the full set. My 'artist' skills are quite lacking and I will need to scavange as many tiles as I can find. I have created a few myself and modified some existing ones but I'm trying to pawn that task off on siblings :P (with no luck so far)
Here's a direct link to an example: http://easypo.com/edit/4f4065907b351e0127001071
Be careful with scavenging. Many sets are licensed in a fairly restrictive manner, which means that using things you find online without a clear license can be illegal to use for your specific purpose. For example, many of the tilesets on other sites aren't allowed to be used with other software than RPG Maker, often because they were created using RPG Maker resources as a base. The FSM tilesets are a great resource in large part because they are original works and the license explicitly allows for them to be used for pretty much any game you want to make, as long as you give them credit and retain their copyright notice.
They were indeed originally created for an RPG Maker game ("Material Quest") and closely follow the familiar RPG Maker style, but they're original works with a rather permissive license. In other words: if you're making your own RPG, it's a veritable treasure trove.
I have a preference for processing or just straight canvas. 
Please add some background?
If you wait long enough an image appears.
The "one var rule" is dumb and unneeded. Some languages have no scopes so all variables are global, other languages have scopes in every {...} block, javascript has scopes only within function blocks. Relevant example: var funcs = []; for (var i=0; i&lt;10; i++) { // this block does not create a new scope for var's (function(){ // this block creates a new scope for var's var i2=i; funcs.push(function(){ return {i:i, i2:i2}; }); })(); } alert(funcs[0]()); // returns {i:10, i2:0} alert(funcs[1]()); // returns {i:10, i2:1} alert(funcs[5]()); // returns {i:10, i2:5} i = 99; alert(funcs[5]()); // returns {i:99, i2:5} The future 'let' keyword will make all blocks have a new scope (not: this is untested and may be inaccurate as this feature is still pending): var funcs = []; for (let i=0; i&lt;10; i++) { // this block DOES create a new scope for let's funcs.push(function(){ return {i:i}; }); } alert(funcs[0]()); // returns {i:0} alert(funcs[1]()); // returns {i:1} alert(funcs[5]()); // returns {i:5} i = 99; alert(funcs[5]()); // returns {i:5} 
javascripts, as in java scripts...
Hey legacye, thanks for the quick response, I se you already updated the example! As zacharyburt points out, there is still an issue wih the closure hiding both function, but your changes made it clear enough for me to understand how the example is meant. 
Ex employee here. The Micro Center I worked at had "Getting Started With IE 4" in their clearance section. This was just one month ago... 
I bet they sell those extra serial port ISA cards too.
Stocked right next to those Jaz disks??
&amp;#3232;\_&amp;#3232;
The language is just called JavaScript, without an "s". It's like finding the section on C++ and seeing "C++s", which is a bit harder to do, and more of a tongue-twister, but you get the idea. I feel the same weirdness when I see "maths", although that's a legitimate use (a difference between American and British English?).
If you use straight canvas, is there a major difference between the major browsers?
If you assign `this.foo = 0` in your constructor, then you can access `this.foo` in your prototype functions. If you do `var bar = 1` in your constructor, then `bar`'s scope is limited to your constructor (and any functions defined inside it that closure). However, that `bar` will not be available in any of your prototype functions. If you do `var self = this` inside a prototype function, then that `self` will be available to any anonymous functions created inside that prototype function, which is what you want to do (per adam41's fiddle).
IMO three.js seems to be the best at the moment - it has decent documentation, demo's and is being actively developed. Although, I still don't think browsers are up to scratch yet (in terms of performance) to handle anything more than very basic 3D scenes.
Don't be bashing on Microcenter. That place is fantastic if you want to pop into a physical store for some computer hardware. The one near me price matches newegg as well.
I prefer using bind (underscore) to pass scope of choice instead of big anonymous functions and a reference to this.
My personal favorite is [WebGLU](https://github.com/OneGeek/WebGLU), but I'm biased as I wrote it. Unfortunately I've been unable to put much time into it lately.
I have used ImpactJS. We used it for Startup Weekend Omaha back in September of last year. None of us had any previous game experience. Impact worked really well and did allow us to get a basic level of a game out during the one weekend event. See http://startupweekend.org/2011/10/06/play-startup-weekend-the-game/ to play. Impact comes with Weltmeister, a html5 level editor, which made it really easy to construct the level and place the design tiles. Impact uses a flavor of John Resig's class inheritance http://ejohn.org/blog/simple-javascript-inheritance/ so extending all of the impact built in objects. Overall, there was very little I didn't like about impact. It made it possible for us novice game developers to get up and running in just an hour or two, and we've enjoyed working with it since.
Depending on what your requirements are, I think you're after either: document.addEventListener('DOMContentLoaded', function () {...}) or window.addEventListener('load', function () {...}) Consult [this](http://stackoverflow.com/questions/1795089/need-help-with-jquery-to-javascript/1795167#1795167) for IE compatibility. ProTip: use $(function () {...}) if you want to continue drinking the koolaid in minimalist fashion.
Looks good! I'd like to suggest the ability to vary the speed ie total duration of playback. One thing I've found about easing is that it has a very different "feel" depending on the total duration of the easing as well as on the distance travelled. For example, when an animation is really short (&lt;=200ms) a simpler easing may look better and when an animation is long (&gt;=800ms) it also changes the feel. Another cool feature may be to be able to specify a custom easing as a Javascript expression, but that's probably a lot more work. :)
Hmm, I can't see the issue. If you have "Clear on update" disabled and press "Clear Canvas," it'll look a little strange until the loop completes again. I'd like to implement a better approach that will show the full path at all times, but that'll take a little more legwork (what I have now only took about a day).
Learning a second language is always easier by virtue of knowing the first. In this case, the languages are similar at a very basic level but differ greatly once you go beyond the simplest tasks. In reality, it's a solid understanding of the basics of computer programming (what is a function? a variable? a loop? etc) that will truly be the best preparation for learning one of the other languages. Specifically, though: First, consider the syntax: These languages all LOOK similar at first glance. They all use curly braces and many common expressions look nearly identical. Next, consider the sequential flow as your program executes: They all execute in somewhat the same linear fashion: going from line to line in the code, calling into functions, passing parameters, returning results and keeping track of variables along the way. Now, move on to the structure: This is where they really start to differ. Javascript has "objects" as its core primitive, as does C#. C, however, has no inherent notion of objects. Javascript and C# are both considered object-oriented languages, but differ substantially in the ways they require you to accomplish object orientation. (JS is prototypal inheritance, and C# is class based.) Also, consider memory management: In Javascript, except in very specific cases, you don't really have to know about this at all. In C#, you do need to understand memory allocation a bit more but, thanks to the Garbage Collector, you don't need to focus on it too often while programming. In C, however, you need to understand memory management very thoroughly. A C programmer should always be fully aware of what's happening in memory. In C# and JS, not as much. Error handling is quite a bit different too: In Javascript, if an exception is thrown, it's seldom the end of the world. In fact, an unhandled exception is usually caught by the browser and the page keeps on running. In C#, you need to be more responsible with error handling as an uncaught exception will cause the process to crash. In C, you don't even have exceptions. You are required to know when to check error codes and, when you forget, things will crash in bizarre ways that can be very difficult to track down. In short, much more diligence is required when moving from JavaScript to C# and then from C# to C. Finally, consider the platform: Javascript runs primarily in a browser. You attach code to different events and your code is called when that event fires (e.g. a user clicks the button). The browser is handling the majority of the background work and transferring control to your code when events are raised. However, in C# and (especially) in C, your code is usually the main act. You're in control of the process from start to finish. There are frameworks to do a lot for you, but in general, you need to be a lot more aware of how the program is running as a whole. 
everything you'll need --&gt; http://c.learncodethehardway.org/ 
Thanks! :)
Microcenter rules. You suck.
He did that too. He covers the JQuery plugin pattern, some module patterns, and Object.create. It's not his fault that modern javascript drifted toward MVC, mediators, observers, decorators and the rest. That's just how things work IRL.
Javascript is to Java what a Car is to Carpet.
Don't you mean X-Code and Objective-C?
Aw, shucks
Don't get me started. I'm still pissed that they've got the old yellow one back!
Good to see someone else putting Robert Penner's equations to use. I'm starting to see his stuff everywhere.
I always use $(function(){//code}) (someone else mentioned it was the same as .ready). You want to do it when the DOM is ready.
Very nice!
In [this](http://www.renownedmedia.com/blog/why-node-js-is-awesome-a-short-history-of-web-applications/) link, I found this quote: &gt;"These are all awkward solutions for modern web application development. Why do we even need a web server anyway? All it does is take a request from a browser, figure out what file to grab or code to run, and return the result. &gt;This is where Node.js got it right from the start. Why would someone need to keep the web server separate from the application code and keep a heterogeneous file system / url schema? D" It seems to me that separating the web server from application code is a VERY desirable architecture. The intent of the two are fundamentally different. I think server-side Javascript is a terrific idea, but Im still not sold on the web server part of this.
sounds like you should only masonize after all the images have loaded. 
Thanks for this info. I recently just met Node, and of course am very interested in the concept. Just trying to shake the concerns. We;ve all been doing things a certain way for so long. The common believe these days is "scale out if you need. RAM is cheap!". So, I dunno. But I am really liking javascript as a unified web language.
Javascript as the unified language is also one of the big benefits people are looking at. Right now you may have a team of front end developers handling your HTML and CSS, some Javascript guys for behaviors, some database guys, then some guys with whatever server side language you're using, be it PHP, ASP, Python, Ruby, Java, etc. Node brings this together so your server side guys are all familiar with Javascript. Technically your front end developers, with some Javascript knowledge, would be able to jump in and do some changes if they needed to, and vice versa. Add MongoDB onto the stack, and suddenly everyone knows how to transform and utilize the database as well. It represents a potentially huge shift in how we hire and build our teams. It largely represents a social experiment to see if Javascript can be "the" go-to language for the Internet. It's an interesting time, and a great time to get more familiar with JS. Personally I think node.js, in conjunction with sockets.io, is pure heaven. However, it isn't necessary for all projects. And hell, you'll probably want some light server for sending static files which require no processing, such as lightttpd or nginx. But even THEY might benefit from a new approach to threading. We'll see :)
any chance you could github it up?
Caveat: Asked 2 years ago. Much may have changed since then. Still an interesting read, I'm sure, but take the answers and their descriptions with a grain of salt. EDIT for clarity: The specific linked answer is recent. The rest of the answers, however, are as much as 2 years old.
yes, that particular answer. the *question* was still asked 2 years ago... readers MAY read other/all answers for curiosity's sake. it wasn't a crime to point that out, but thanks for the downvote anyway.
And... poof, there is now a custom easing editor. It's a little wonky still, but it's live and it works.
Im going to poke around with it. I get a feeling that we wont see the end of this any time soon, and in fact, it may actually develop into something much greater over time. But yeah, these kinds of things are hard to ignore for the time being.
Could you provide some inputs and expected outputs?
Some things I've noticed form.shutter.value = "1/" + **(** Math.round ((1/(x/y))*(iso)*1000)/1024 **)** + " th sec"; else {form.shutter.value = **(** Math.round (x/y*10)/10*(iso) **)** + " sec"; Values from input controls are strings, so you have to convert them, if ( **parseInt(** form.shutter.value **, 10)** &lt;=1) x = Math.pow(**parseInt(** form.aperture.value **, 10)**,2); y = Math.pow(2,**parseInt(** form.EV.value **, 10)**); iso = **parseInt**(document.form.iso.options[document.form.iso.selectedIndex].value**, 10**);
here the whole page with inputs: http://pastebin.com/JbbCR2Kh EV (integer from 1 to 15) is the expected input and shutter speed the output, which can be anything from full seconds to fractions of a second i.e. 1/2, 1/4, 1/8, 1/15, 1/30, 1/60, 1/125, 1/250, 1/500, 1/750, 1/1000, 1/2000 problem with aperture and shutter sometimes being arbitrary numbers
Ctrl+R Ctrl+R Ctrl+R ... just to be sure
FYI, CSS is not cached when secured via SSL (HTTPS). I'd venture to guess Javascript is the same way.
Personally, I like just writing a custom shell script if my build requirements aren't too crazy. For example: https://github.com/jeremyckahn/rekapi/blob/master/build.sh Node scripts are really good for this sort of thing too. Miller Medeiros (https://github.com/millermedeiros) wrote a more complex Node script for another project: https://github.com/jeremyckahn/shifty/blob/master/build.js Clearly writing build scripts like this isn't for everyone. I just like to minimize the dependencies in open source projects.
Why is this downvoted? This is a nice little MIT licensed .js
&gt; Although one potentially loses a lot of your single-thread advantage there [nginx](http://nginx.org/en/) and [HAProxy](http://haproxy.1wt.eu/), the most common front-end web servers with node.js, are both event-driven, as well, which will maintain a lot of the benefits. (At least the C10k/simultaneous client benefits.) Using a threaded server like Apache with mod_proxy would, however, be a pretty bad way to do it.
That's HTTP-level caching though, not whether it's reparsed every time.
I wrote my own a while back, it works, although it doesn't work perfectly. http://pastebin.com/0mqMm75m
we use closure so on our CI (Jenkins) box we have the following steps 1. Lint (--strict) 2. compile templates 3. run tests using phantom_js 4. concat + minify config files 5. resolve dependencies. 6. compile (-advanced mode) Selenium runs on top of our dev build at this stage (i have a meeting in 30 minutes where we are going to discuss getting it to run on our production build with closures aggressive renaming), will see what comes of that. We have some scripts we wrote in ruby to wrap the python deps calculator + the compilers, that we wrap with ant and that is wrapped with maven (so it can form part of our pipeline between environments) the reason we wrap it in ant is legacy at this stage. 
In most cases, I prefer [Function.call](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call) or [Function.apply](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply), over [Function.bind](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind), as it is easier to see what is happening when following a stack trace. However, *call* or *apply* does not remove the need for references to *this* However, I wouldn't necessarily call this "best practice". Re-assigning *this*, particularly using *bind* can be problematic if you need to retain the default value of *this*.
You should avoid attaching events using this method: element.on[action] = function() {}; It will wipe out any listeners previously attached using the same method and is a prime cause for memory leaks, especially in older IEs.
http://bostinno.com/wp-content/uploads/2011/08/I-dont-always-test-my-code-but-when-I-do-I-do-it-in-production.jpg
So is ಠ_ಠ.
Your title has the same demonic-looking qualities as [that one SO post about regex for HTML](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags).
This what I managed to get so far: http://jsbin.com/eyatir/edit#html The problem is that the shutter speed has discontinuities in its powers of 2 scale where it goes from 1/8 -&gt; 1/15 and then again at 1/60 -&gt; 1/125. While what I have works for many of the values, there are still places it gives the wrong numbers. The solution is either: Use a table (since there are only about a dozen or so shutter speeds that need to be accounted for) and then fetch from the array based on aperture and EV. Or play with the exceptions and rounding rules a bit more so that they work for all input values (I got pretty close).
Every time I see one of those weird bits of writing, I think "whuuuut?" and then inexplicably, I forget about them completely.
"Trun.js can add beautiful transition...." &amp;#3232;\_&amp;#3232; A typo in the very first line? C'mon. Beautifully done script, btw.
Is there any consensus about how well `var π = Math.PI;` works cross-browser? If modern browsers use it (hell, I'll even include IE down to 7), I'm totally going to use that, plus `var ಠ_ಠ = eval;` and `var λ = function() {};`, in my personal JS library.
Then you're in luck, as computer science has an innumerable (incomputable) number of things left to become known.
These are not the variables you are looking for 
kind of neat, but doesn't exactly fail "gracefully" in IE8... no, I don't *use* ie8, but I have to support it in the vast majority of my projects.
Dumb question: how do you use it?
I wrote my own build system as an HTA. It takes a bunch of JS files and concats them together to make both a user script and an HTA. It gives me a build number (automatic) and version number (manual), as well as has the ability to FTP the files up to a remove server and build versions file. I had technical reasons for making things one file rather than making a multi file HTA or user script. The whole thing works like a charm. Simplistic, but self contantined.
I'm surprised Zalgo hasn't gotten more meme build up, he is supposed to a̕pp҉ea͝r ̛i̛n̵ 2̧0̨12̷. ͟
or also given xml like this: &lt;root&gt; &lt;childElement1&gt; &lt;grandChild&gt;whoosh&lt;/grandChild&gt; &lt;/childElement1&gt; &lt;/root&gt; To get the grandchild nodes, you can use this jquery $(xml).find('root &gt; childElelment &gt; grandChild').each(function(elt) { ... }); 
Has anyone compared [tcorral's Design Patterns index](http://tcorral.github.com/Design-Patterns-in-Javascript/) to [Addy Osmani's Design Patterns index](https://github.com/addyosmani/essential-js-design-patterns) ?
Looks like $.autogrow() and it modifies all &lt;textarea&gt;s.
To be completely honest, I may actually start doing stuff like that for any easter-egg (non-essential) functions in my code if it's for a personal project. If nothing else, it'll be *very* easy to tell if someone's stealing my code. Kinda like my little signature.
Hrmm, think you can improve upon the ['99 bottles of beer'](http://99-bottles-of-beer.net/language-javascript-1948.html)? Perl has a [good one too](http://99-bottles-of-beer.net/language-perl-737.html).
Using Ant. Does everything I need, including running the Require JS miifier, tests, etc
lol, so you wrote observer pattern and made a whole project out of it? Kid's stuff.
This could potentially create some interesting obfuscation techniques...
For the entire day I wondered why you were spamming reddit with a bunch of null squares in your title, then I came home and saw that you wrote Hͫ̆̒̐ͣ̊̄ͯ͗͏̵̗̻̰̠̬͝ͅE̴̷̬͎̱̘͇͍̾ͦ͊͒͊̓̓̐_̫̠̱̩̭̤͈̑̎̋ͮͩ̒͑̾͋͘Ç̳͕̯̭̱̲̣̠̜͋̍O̴̦̗̯̹̼ͭ̐ͨ̊̈͘͠M̶̝̠̭̭̤̻͓͑̓̊ͣͤ̎͟͠E̢̞̮̹͍̞̳̣ͣͪ͐̈T̡̯̳̭̜̠͕͌̈́̽̿ͤ̿̅̑Ḧ̱̱̺̰̳̹̘̰́̏ͪ̂̽͂̀͠ and was thoroughly impressed that Linux had that built in.
Gimme about five minutes to load up a JS minifier and set it to not actually minify, your code will be plenty unobfuscated.
Fifth world JS?
I just added a new feature: There's now a toggle-able path output. This replaces the flakey clearing functionality.
Sadly, [`_̴ı̴̴̡̡̡ ̡͌l̡̡̡ ̡͌l̡*̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲▫̲͡ ̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ ̲|̡̡̡ ̡ ̴̡ı̴̡̡ ̡͌l̡̡̡` is an invalid identifier](http://mothereff.in/js-variables#%5f%CC%B4%C4%B1%CC%B4%CC%B4%CC%A1%CC%A1%CC%A1%20%CC%A1%CD%8Cl%CC%A1%CC%A1%CC%A1%20%CC%A1%CD%8Cl%CC%A1%2a%CC%A1%CC%A1%20%CC%B4%CC%A1%C4%B1%CC%B4%CC%B4%CC%A1%20%CC%A1%CC%A1%CD%A1%7C%CC%B2%CC%B2%CC%B2%CD%A1%CD%A1%CD%A1%20%CC%B2%E2%96%AB%CC%B2%CD%A1%20%CC%B2%CC%B2%CC%B2%CD%A1%CD%A1%CF%80%CC%B2%CC%B2%CD%A1%CD%A1%20%CC%B2%CC%B2%CD%A1%E2%96%AB%CC%B2%CC%B2%CD%A1%CD%A1%20%CC%B2%7C%CC%A1%CC%A1%CC%A1%20%CC%A1%20%CC%B4%CC%A1%C4%B1%CC%B4%CC%A1%CC%A1%20%CC%A1%CD%8Cl%CC%A1%CC%A1%CC%A1). So is [`▓▒░`](http://mothereff.in/js-variables#%E2%96%93%E2%96%92%E2%96%91). Your other examples are perfectly fine, though!
Those all seem to work reliably. The most common cross-browser problems when it comes to JavaScript identifiers are related to Unicode (i.e., the engine doesn’t use Unicode 6.1.0 category mappings yet), and the ZWJ and ZWNJ characters (e.g. [`var a\u200c\u200d;`](http://mothereff.in/js-variables#a%5Cu200c%5Cu200d)).
Using a bigger font size, `ൠ` kinda looks like the Reddit alien.
Yeah, that’s what the linked article is all about.
Why not JSON? JSON is relatively new and enterprises apps still do not know about JSON. JSON is more prevalent in web apps or things mostly related to web. I am not implying that other systems dont use JSON. 
I'd always push for making a web service between the enterprise app and the client-side JS. If the organization doesn't understand that then you probably have much bigger troubles.
$.parseXML is also nice in this situation http://api.jquery.com/jQuery.parseXML/
We occasionally mention invoking Zalgo at my workplace every time someone tries to use an inappropriate tool for a job (similar to the original, canonical "regexps and HTML" example), but yeah - I was surprised he never caught on. I nominate him as the patron dark deity of ignorant developer "when all you've got is a hammer..." incompetence.
Thank you, kind Sir.
The Wink of Disapproval™ is missing! `ರ_ಠ` (Okay, I just made that up.)
&amp;#3232;\_&amp;#3232; 
I thought it might have been because it's a repost. But it turns out it was [posted to r/programming](http://www.reddit.com/r/programming/comments/pcts3/turnjs_the_page_flip_effect_for_html5/) 16 days ago. Is probably because it was posted by coderbay to a useless article on their blog.
I'm a bit biased since I wrote 2/3 of these, but check out these: * http://github.com/substack/node-browserify * https://github.com/mishoo/UglifyJS browserify is a build step that lets you organize your code with node.js-style require()s. It's super easy to pipe the browserify bundle through uglify-js for minification to generate the final bundle. You can get both browserify and uglify-js with [npm](http://npmjs.org) by doing: npm install -g browserify uglify-js * [testling](http://testling.com) Run your browser tests hosted in [all the browsers](http://testling.com/browsers/)! The test harness syntax is really similar to [node-tap](https://github.com/isaacs/node-tap) but you can always [roll your own test harness](http://substack.net/posts/1db3bb/roll-your-own-test-runner-for-testling) easily enough.
I can definitely see some positives in this area. I guess alot of it depends on perspective. Im continuing to work with it and will see how it goes. Thanks for the feedback.
&gt; JSON is relatively new and ~~enterprises~~ MS apps still do not know about JSON. At least that's the way I read it. I've been trying to do some stuff with HAR captures lately, which the spec defines as JSON and which every browser spits out JSON .har's.....well, [except one](http://groups.google.com/group/http-archive-specification/browse_frm/thread/d396f784a932061f/814e396e800e2697?lnk=gst&amp;q=ie9#814e396e800e2697). Fucking Microsoft.
Its just an example. :-)
Of course, I will amend the post. Though I can not recall why didn't I use it.
At our workplace, we hear that Google and MS do what they want to.
my solution: var obj={}; for (var i=arr.length-1; i&gt;=0; i++) { var tmp = {}; tmp[arr[i]] = obj; obj = tmp; }
But what if you *do* care that some things **must** be served via SSL, while others could be done either way. With Node.js and Express, it's fairly simple to write a route handler that blocks non-SSL requests on pages that should only be SSL, while allowing SSL or non-SSL for the others, and just prepend your page logic with a reference to that function. The power of joining the web application and web server in Node.js (and to be perfectly clear, this advantage is also the case with an Apache Tomcat-based Java web application) is that you have full control over the actual end-user behavior of your application using your application's own language and internal logic (because you can easily abstract the need into a reusable function). That's not to say that you can't do it with regular Apache, but now some of your application logic sits in Apache .conf files, and those .conf files also have configuration settings specific to the machine you're working on, so you make your code harder to read and deployment to different machines more difficult. If your deployment process is copying a virtual machine into Amazon AWS, then perhaps it's not too bad, but there are usually differences between dev, where you expose data that shouldn't normally be exposed, and production, where you compress your JS/CSS/HTML, eliminate HTTP headers, etc. You can tie all of these differences into a single ``mode: "dev"`` or ``mode: "prod"`` configuration variable (or command-line argument to a deployment script, or the name of the branch it was checked out of by ``git``, or however you want) with the integrated app/server design.
What advantages does this have over jQuery Cycle? http://www.malsup.com/jquery/cycle/
I'm pretty sure it's smaller.
Interesting, I'll take a closer look. I know that much of the size of jQuery Cycle is in the fancy transitions, so I always trim out the transitions I'm not using.
[jake](https://github.com/280north/jake) is wicked fast and written in JavaScript. It works best on a Mac, though.
I played around with how far you could take this approach. http://fingswotidun.com/notanos/ Ultimately you can get everything down to var s=localStorage["bootstrap"]; if (s) {eval(s);} else { show a link to fill localStorage } 
And add sproutcore and everything is javascript :)
That was beautiful!
jquery is the answer, specifically toggle() http://api.jquery.com/toggle/
Yes.
Once your program starts getting bigger, global variables get dangerous. But in this case, don’t worry about it, it’s not a hack. You’re right that there’s a better way to handle it than the hidden div — but I think you’re already sitting on the answer. You can set variables to things other than strings (numbers, arrays, objects…). What if you set `previous_id` to `null` when there was no visible div? var previous_id = null; Is there a way that you could make the program only try to hide something when `previous_id` is not `null`?
1. Separate your behavior (JavaScript) from your design (HTML and CSS) This means you need to learn how event listeners work in JavaScript. 2. Avoid ids in general unless absolutely needed. Instead, you can target elements with classes just as easily. Simple way to understand it: an id is an identifier (think unique), so there can only be one of it in the entire application (only one footer or sidebar). Class represents a class or cadre of elements (a set of links to remove divs or a class of dive to hold user comments) 3. Use http://jsfiddle.net You can thank me later. I will take your thanks in the form of code samples. 
jQuery is **a** answer, but not the answer, and not a good answer, especially if this is the only thing he's doing. Dropping in a large framework to do such a simple task is overkill and in the end will just make it harder to write good JS.
I think the reason you're being downvoted is because many people see jQuery as a crutch that prevents you from really understanding JavaScript. It's fine to use, but starting out learning, I think the OP is going about it the right way: learning about the underlying DOM methods that can be used to get access to an element rather than just using $("#whatever").toggle() which, in the end, teaches him/her very little about JavaScript other than how to use jQuery. Again, I don't think using jQuery is bad, but I think it can encourage bad habits and a lack of understanding without proper grounding in the fundamentals.
This seems to work. var previous_id = null; function showDiv(id){ if (previous_id === id &amp;&amp; previous_id != null){ document.getElementById(previous_id).style.display = 'none'; previous_id = null; } else { if (previous_id != null){ document.getElementById(precious_id).style.display = 'none'; } document.getElementById(id).style.display = 'block'; previous_id = id; } } EDIT: edited with code that works. 
Yep. That is the point at which an appropriate JavaScript library helps you out. Dojo and jquery have helper methods which can search for a neighboring element which matches a particular criterion (an attribute or a class or an element type or a combination of these three) and perform operations on it. Plain JavaScript cannot do this that easily. The other advantage of using classes vs ids is that you can define a behavior for a range of elements in one location and thereby reduce the number of lines of code you write. That also helps reduce places you have to search for bugs. 
Competition is generally a good thing, no? jsFiddle is great but there is definitely room for more apps out there. Besides that, having an open-source version is nice as it means anyone can contribute features or host their own instance (e.g. a company could host one behind the corporate firewall).
&amp;#3232;\_&amp;#3232; Not sure if sarcastic... 
I agree with you here. I love MooTools, but I hate the fact that most of the time to get what I want for a small script I need to include a 40kb library.
It's not even a good blog. There are letters missing, colors are all messed up (first letter sometimes included in the link...) Sentences are poorly structured at times and they have a very broken flow. eg: "JavaScript has become very popular with the immensely growing technology that is diversifying each day." WTF is that supposed to be saying?
Every kb counts. And if you don't know that you obviously aren't a professional, and therefore shouldn't be giving out advice.
Sometimes you do want to use IDs. They're much more efficient lookups, if your DOM tree is large. They're very good for partitioning portions of your DOM to that effect. Typical search for a given element with a class is breadth-first and very expensive. When you preface it with an ID, it cuts out a large portion of the DOM from the search space.
It's nice but it crashed chrome on Linux several times for me. It also doesn't seem to be GPU-enabled, or at least there's no difference with GPU acceleration on or off, or maybe Chrome doesn't play well with AMD and nothing's GPU accelerated on my system.
Which is where my point about absolutely necessary comes in. I should probably add "and where it makes sense to have an ID". I just happen to maintain code which has code like this: id="link_001". id="link_002" ... id="link_021" It just seems like something that can be unlearned early in the learning process 
Finally got to my computer (Had been working on my phone all this while) http://jsfiddle.net/nZL2e/3/ Here's a fully working example. It uses jQuery. EDIT: http://jsfiddle.net/nZL2e/4/ In this example, we add a little bit of animation.
Precisely. As someone who moved to web from client/server development, the lack of hacks required to get something working is sometimes insane. But I imagine this will be worked out somehow, in the future. Maybe browsers can become more consistent and support more 'desktop' like functionality.
JQuery and similar tools were made because this kind of stuff gets messy real quick without them. http://jsfiddle.net/5YR7n/2/
Wordpress? I don't use it but it seems like it's what you're looking for.
I don't think that there is much value in attacking the motives of the author. Keep in mind that he has: * Spent his free time making something that he probably enjoyed making * Been generous enough to open-source the project * Probably **enjoyed the project for its own sake** I think that your comment only serves to discourage experimentation. Often imitation is the first step in innovation. OP: Very nice interface. Good job on the project, I like it.
To make it even faster, I would suggest consulting Google's Page Speed tool for ways to speed up the app. Right now, its getting a 15/100 rating. Its likely that some middleware, build step and/or reorganization would allow you to really boost the speed / shrink the pagesize. https://developers.google.com/pagespeed/#url=tinker.io&amp;mobile=false
Thanks...i just put up WP on my server, will extend it via jQuery.
Add CoffeeScript / Compass support and you would be my best friend. I will use the app for a while, and will edit this post if I come up with any more requests. edit: More flexible panels, allowing more than 4 open at once.
code like that could be easily justified.
challenge !== discourage
First impressions are everything. If the first time your page loads its slow, that will color the experience of the user. And relying on the cache should be secondary when talking about page load.
I should mention that I didn't build this - it was done by a colleague of mine and I just thought it was a sweet project worth spreading around. As I've said before, jsFiddle is great - but it can be painfully slow at times as they try to scale to meet their popularity and add ever more features. There is room for a quicker, more nimble implementation and the fact that it has been open sourced and is open for community contributions differentiates this enough for me. I hear more features are coming soon, so feel free to bookmark it and check back :)
A couple things to keep in mind: * Avoid using variables to store state -- base behavior on the actual state of the page. Want to know if your div is visible? $(object).is(":visible") is a clean way to do it. * Try using a framework (jquery!) -- half the web sites on the Internet use it. It just makes things better. My version of your code: http://jsfiddle.net/ttX9w/
I like that. I've been looking for something similar for a while now. Thank you.
Really cool project!
Just a side-note... did you mean to say "hoisting" or "hosting" on your homepage?
Even the best product/service has to be effectively marketed if it's ever going to catch on, and marketing doesn't necessarily mean writing up press releases and buying ads -- just tell me why I should use it. Word-of-mouth can only do so much. That's all I'm looking for. As a busy developer, I'm not going to go and test every single feature and see how it stacks up with others; likewise, perhaps the OP has perceived shortcomings in the original jsFiddle, and has improved upon those? I don't think anyone sets out to make a strait-up copycat site, and so it would help me tremendously if I could read in a few lines of text _what the selling points are_. It's all constructive criticism, just minus the ass-kissing.
I don't see how what you said follows from what I've said. All these links were given ids because they had associated behaviors. I feel it's a better pattern to use classes instead of ids to achieve the same task. Besides, if using classes, event delegation would simplify things in the event listeners. Light weight, loads faster, etc. 
Let me clarify, **not sarcastic**. That link **is useless blogspam**, and poorly constructed at that! You got the upvote for stating it faster. :)
Apparently coffeescript, sass and less aren't too far away. 
https://developer.mozilla.org/en/window.setInterval
Looks like enter works a bit funny in Firefox, at least for me. Pressing enter seems to first jump down one line and properly indent, and then jump down an extra line without any indentation at all. This makes it rather painful to use. (That said, I'm also having issues with jsfiddle &amp; jsbin when it comes to indentation... maybe it's just me.)
Who the fuck in [/r/javascript](/r/javascript) cares how CoffeeScript class modeling works? We come here to read about javascript, not coffeescript. this article belongs in r/coffeescript 
Define animation? If you want, with JQuery you can define a set of css states and use .animate() to move between them - and when they complete, move onto the next state. Alternatively, you can use a setTimeOut and keep calling it to change a property and use that property to change some other animation state, so as margin-left etc
Am I missing something, because I don't see how this can work? YouTube isn't publishing their data with JSONP and it isn't CORS friendly, so you could never embed this .js file on a website in a different domain and successfully make the XMLHttpRequest to the YouTube API. I just tested this in IE9: * Open IE9 * Go to http://www.microcenter.com * Paste this into the script console: var x = new XMLHttpRequest(); x.open("GET", "http://gdata.youtube.com/feeds/api/videos", true); x.onreadystatechange = function () { if (x.readyState === 4) { console.log("Done. Status: " + x.status); } }; x.send(null); * Hit enter. BAM: Access denied. Doesn't work in Chrome, either.
dep1 and dep2 will only get loaded once this module is required by something else. So you're asserting that dep1 and dep2 are loaded just run running your code snip? You must be doing something wrong. :/ - a user of requirejs
Outside of cases where the file is being generated or edited in the browser, is there some use case for this that isn't better suited to the caching a browser does anyway?
I find jsFiddle slow. Great app though, thanks.
I think doing it completely transparently is pretty much impossibru. But the idea the guy gave you where you take over document.appendChild is probably the right direction. You can keep some kind of hash, or maybe inline a special attribute on those script tags to allow them to recognize how they were inserted. 
It looks like Almond is just using r.js to consolidate which came from requirejs. http://requirejs.org/docs/optimization.html But yes, it looks like Almond is a lightweight variant of requirejs.
Parameter to the script url when calling loadScript. Function to detect can pull out src to determine.
It's unnecessary to include a 31k JavaScript library to accomplish this task which can be done with a half dozen lines of vanilla JavaScript. At some point it may be useful to take advantage of jQuery, it's a great library. But it comes with a performance (especially on mobile devices) and bandwidth cost. I would also recommend getting proficient with vanilla JavaScript before adding to that knowledge with frameworks. Otherwise you risk siloing your skill set with a jQuery dependence.
Read Javascript: the definitive guide. Its long, but read it. It is very good.
You're doing it wrong. 
it's only in beta, and i am currently working on more in depth backbone examples, at the moment it's more the infrastructure and modular side of things i would like feedback on. Also the build process
I started with javasript for dummies. It's actually quite good.
no I.E. hate?
Absolutely. You don't use them /for performance/, but they have /performance implications/.
Run a spellchecker. On the homepage you have 5 typos: Alternativly, practises, enviroment (x2), ambigious. 
I believe WordPress includes jQuery
Thanks lol
It looks to me like you're seeing the effects of [traversing the scope chain for identifier resolution](http://jibbering.com/faq/notes/closures/#clIdRes); the more scopes it has to go through to find your var, the slower it will be.
&gt; Javascript does not have block-level scope, only function level scope. You're correct insofar as ECMA-262 3rd ed. is concerned. However, ECMA-262 5th ed. (which I think most current-gen browsers implement on some level) includes support for block scope with the `let` keyword.
Well, Javascript actually can have block-level scope if you use the "with" keyword.
That makes sense, but that would not support Crockford's suggestion on declaring vars at the beginning of scope. (IE: It would improve some readability at the detriment of performance.)
No, each function is a new scope; as long as you stay within the function, no scope traversal is required. So Crockford is right in that regards -- it doesn't matter where _in the function_ you declare them, as long as they are declared within the actual function that they're used in. This changes slightly with "[let](http://www.reddit.com/r/javascript/comments/q40ga/scope_in_forloop_and_browser_performance_can/c3ukrt7)", though.
That is exactly what I wanted to test and the results don't actually show that effect. When I was the only tester the results where very different - Chrome would perform better in the examples with multiple functions rather than the first two cases. That was why I was so surprised with the results. Apparently it was just me.
git clone http://github.com/backboneboilerplate ^ does not work :P * should be? git clone https://github.com/thomasdavis/backboneboilerplate.git
You and I may know how to use this pattern but not everyone does. The pipe method is also unique and is not child's play.
This smells to me like a premature optimization. Write your engine in standard JavaScript and then, once everything is working, try replacing some hot loops with fixed-point math. Only then can you tell if it is truly faster for your particular case.
Perhaps it is premature indeed. I will probably need to compute position updates and transformation matrices for each moving object in a given frame, which, depending on how active the game is, might not be that much of an issue. The main performance hog will probably be collision detection, but I intend to keep that fairly simple as well.
If all you want to do is keep from creating tons of global variables, you can create an object to store the state of your application. function appManager ( element ) { // Store the specified DIV inside the object // so you don't pollute the global scope. this.element = element; this.toggleVisible = function ( ) { if ( 'none' === this.element.style.display ) { this.element.style.display = 'block'; } else { this.element.style.display = 'none'; } } } app = new appManager( document.getElementById('div-id') ); Then just call **app.toggleElement()** whenever you want to show or hide your element. Now you can store as many things as you want in your appManager, and add whatever functionality you want, and you still only have one global variable. Of course, you can create more objects and add compose them to appManager to break up functionality as your app gets bigger. (**appManager.uikit.toggle()**). This is probably the best solution to your problem that doesn't require a custom framework or particularly advanced knowledge of closures.
no, fixed point math is probably not going to make any difference. Keep in mind, with vertex and fragment shaders doing most of the processing, you shouldn't be doing much math in plain javascript anyways.
Before you worry about it too much, run some benchmarks to calculate the number of floating point operations you can do vs the number of fixed point operations you can do. Seriously though, you are wasting something more important than cpu cycles. You're wasting your development time worrying about something that hasn't yet showed up in profiling as a problem. In WebGL, until you've optimized your program down to the barest minimum number of GL calls possible and then eliminated as much overdraw as possible, anything else you're worried about is pointless.
Nice. One of the things to keep in mind, is that the time you save with a cleaner implementation will allow you to put more time towards more important features, including other performance improvements in the future.
Author here, I'd be happy to answer any questions you guys have!
The fact is that worrying about choosing the right data structures for the job will pay far greater dividends than worrying about micro-optimization like fixed point math, faster square roots, and the like.
So far I'm thinking of going with simple rooms separated/connected by portals, with everything in the room being stored in a simple list. I might separate static geometry from dynamic objects. My initial goal is to get a (very basic) game prototype working within 2 weeks or so of starting my development. Everything will be indoors and kept very minimalist at first.
That's an issue as well, but it seems to rarely be the case that you'd actually want to test two floating-point numbers for equality. In practice, I find the kinds of tests you want to make rely on &gt; and &lt; type comparisons.
Thanks! This answers my question completely.
 &lt;script type="text/javascript"&gt; var pics = [ ["ap.jpg", "", "AP"], ["tc.jpg", "", "TC"], ["sr.jpg", "", "SR"] ]; // PRELOAD IMAGES ImageArray = []; var go = 0; for ( go = 0; go &lt; pics.length; go++ ) { ImageArray[go] = new Image(); ImageArray[go].src = pics[go][0]; } var index = 0; var max = pics.length - 1; var dt = new Date(); var cs = dt.getTime(); function switchPhoto() { //if ( !index ) { } index++; if ( index &gt; max ) { index = 0; } document.getElementById('picimg').src = pics[index][0]; document.getElementById('picimg').alt = pics[index][1]; document.getElementById('piccaption').innerHTML = pics[index][2]; //timer = "switchPhoto()"; //window.setInterval(timer, 5000); //alert("index = "+ index +"\nmax = "+ max); //document.write(index); }; setInterval(switchPhoto, 5000); &lt;/script&gt; &lt;div id="picbar"&gt; &lt;p id="picbarPhoto"&gt;&lt;img src="ap.jpg" id="picimg" alt=""&gt;&lt;br&gt;&lt;span id="piccaption"&gt;AP&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; ---- Works perfectly, thanks! I obviously rather suck at JavaScript.
Is my hate of js anyway skewing my view of the irony of the infinite scroll? (try scrolling to the top, you never get there). I hate js. (more to the point, people's needless use of it)
The important question is what's better for *readability*, not miniscule performance gains.
You don't really have a choice, Numbers in JavaScript are double precision float, that's that.
 $('body').append( '&lt;script id="random98012-script" language="javascript"&gt;'+ajaxData+'&lt;/script&gt;' );
Problem is, I have to call it to provide some specific parameters, so auto-executing is unfortunately not an option. Edit: unless I could provide that function some scoped variables
&gt;How big is an int and float in javascript? It's always an IEEE 754 double thingy. Well, the largest integer it can store is 2^53 (9 quadrillion, a 9 with 15 zeros) and the smallest one is -2^53 . &gt;&gt;&gt; x=Math.pow(2,53) 9007199254740992 &gt;&gt;&gt; ++x 9007199254740992 // didn't do anything &gt;&gt;&gt; --x 9007199254740991 // worked fine So, that loop above would continue forever, since it gets stuck at 9007199254740992. In other languages like Java, which do offer integers, something like this would eventually stop, because ints just wrap around: bsh % int x=Integer.MAX_VALUE; bsh % print(x); 2147483647 bsh % print(++x); -2147483648 
Then when it's added to the page, it will get run in *most* browsers. You should be able to call your func normally. Ideally, you should probably return a JSON object from your AJAX call with your HTML as one element and your JS as another. Then you can append in the order you want to. I tend to use this method to create &lt;script&gt; tags since some browsers can be funky about appending them with other DOM (shakes a fist at IE). var scrAdd = document.createElement( 'script' ); scrAdd.src = 'foo.js'; document.getElementsByTagName( 'body' )[0].appendChild( scrAdd ); Mind you, you'll have to make sure &lt;body&gt; is done but this method works across lots of browsers. [edit: I forgot to mention that this method also lets you attach events to the script tag (such as detecting load) since you've got it isolated.]
I need to provide some parameters, so unfortunately I have to call a function. Having a JSON object would be the easiest solution, but right now I'm looking for a way to implement it with plain HTML :(
Not sure what you're asking, but JSONP seems relevant.
Thank you for your reply :) I have edited my post as I have found an easier way to deal with my problem, but thanks for the time you took to help me!
ES5 does not contain a `let` declaration; it's still an upcoming feature. (However, ES5 does *reserve* `let` as a keyword within strict-mode code.) If ES5 had `let`, I'd be using it all over the place.
jsonp?
Cheers, I'd missed that one. I came across flotr, but wasn't that won over by it, I'll have a look at flotr2. Still needs excanvas for IE8 support I assume? I don't currently use any JS frameworks on my site, so it might have been the prototype dependency and it's associated bulk that put me off flotr. (Flotr2 drops that dependency). The examples leave me a bit cold too, they look very businesslike. I don't want my charts to look like this (bit TOO glitzy), but in your experience is flotr2 powerful/flexible enough that a chart like this could be made?: http://raphaeljs.com/analytics.html
Highcharts and Protovis.
Highcharts might be out actually, just realised what I have counts as a "web application" rather than a website under their terms, so I'd have to pay $360 rather than $80, which is too steep for me.
Ive had luck with jqplot.
Since you asked what I wouldn't use, I wouldn't use a drawing library for this. I'd use a charting library. Charts are very complicated and there's a lot of nuances to them. Your initial needs might be simple, but what if your needs change? It could be the difference between just invoking some additional properties/methods in a library versus finding yourself being forced to write a full fledged charting library from the ground up.
The followup post is useful, but your statement that jquery is using xpath is wrong. &gt; jQuery allows you to use XPath. For uninformed, XPath is a simpler way to query nodes in an XML document. [Xpath is a query language standardized by W3C](http://www.w3.org/TR/xpath/) for selecting nodes and attributes from an XML document. It uses slashes to separate node names in a hierarchy and it uses square-brackets to specify additional predicates, for example as a way to select all nodes with an attribute value of "foo". jQuery includes [an alternative query language, borrowed from CSS](http://api.jquery.com/category/selectors/) for selecting nodes; it is similar in intent to xpath, but this language is specifically designed for HTML. Like xpath, it uses square brackets to delineate additional predicates, but jquery's selector uses *angle brackets* to separate the nodes in a hierarchy. There are other differences, but this is the one that shows most obviously that the code in your post is not xpath. I think what you mean to say in your post is that jquery can be applied to an XML document - this is true and you demonstrated that. But the selector language is still jquery's langauge. It is not xpath. My "or also" post above was intended to show how you can reach down into the hierarchy with a single selection, a single "find" on the xml document. 
Point taken, and appreciated. It does seem if I want charts that will work in IE8 *and* android 2/3, then highcharts is the only real option. And their android support sounds patchy at best, as they have a separate canvas renderer just for that, so it understandably gets less loving than the SVG side of things. I really like d3 from what I've seen of it, but it doesn't support canvas or VML at all, pure SVG. I fear that while there's all of these incredibly clever libraries out there... there's still no real answer if you want to support IE8 &amp; have good mobile coverage. Short of paying $360 that is..
I have done exactly that Slojack, emailed them earlier. Fingers crossed :)
You make a good suggestion. IE8 is obviously on the way out. Currently 12% of my visitors are IE8. Am I right in thinking that you can only get IE9 on Vista, so anyone on XP is stuck with IE8 if they want/need to stick to microsoft offerings? Still, it will fade quickly enough. Can't be many XP boxes left which aren't in dire need of throwing away :) Keeping the current solution for IE8 honestly hadn't occurred to me at all, thanks! I couldn't bear to have to code a new solution for a shrinking 12.5%, which is why I was looking for a do-it-all setup, but this definitely gives me more options.
$600, so no, not really :(
You're attempting to use the = sign for comparison. A single = sign is for assigning, use == for comparison. You are also not wrapping strings in quotes, you must do that to specify that it is a string and not a variable. You will also run into the two lower/upper case issues. I'd recommend converting both myInput and the strings you are comparing them to to lower case (look up toLowerCase()) if (myInput == 'Seattle') { //Alert here } Another way to do this would to build an array or object, you could make the key the city, and the message the value. Loop through, if myInput is equal to the key, then alert the value. But as this is for a class, I'm not sure if you learned arrays, JSON(javascript object notation), or loops for that matter but I would recommend looking into it before your professor teaches you as it will become infinitely easier if you somewhat know what you're talking about/looking at before they try to teach you. There are further methods in which you can eliminate loops, and have functions that call themselves. This is more advanced and there are many free online books written about javascript design patterns. I recommend googling, Eloquent Javascript by Marijn Haverbeke, and Essential Javascript Design Patterns by Addy Osmani.
I have used d3 to create interactive charts with pretty much all the features you're looking for. I gave up on trying to make it work with IE, although I'll admit I didn't try very hard. 
Serve Flash for IE8 and lower and HTML5 for everything else. Trying to support them both using one method is going to be a mess.
Also, while we're at it there's no need for a lot of the html you've put in there these days. We now live in a simpler world, where the below is perfectly acceptable and correct. Rejoice in less typing and less bandwidth! &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Where do you live?&lt;/title&gt; &lt;script&gt; //your scripty stuff here - too lazy to type it out &lt;/script&gt; &lt;/head&gt; &lt;/html&gt;
Well I have an iPhone for testing the Apple platform, and I assume I can rely on an iPad behaving pretty similarly? Android I'm really worried less about... foolishly maybe. I appreciate the advice though. Can I now admit that up until now the idea of using pure CSS hadn't even occured to me. I keep on seeing these demos of the power of CSS (people drawing Homer Simpson with it, etc etc), but I think of them as just being quirky tests rather than something that could end up actually having a real use... So can I just clarify that that's what you're suggesting? that I draw lines using rotated height=1px divs, etc? It seems a bit of a bodge, but maybe I just need to come around to this way of thinking!
An iPhone4s is going to be close to an iPad2. If it runs fast enough on the phone it will be smooth on the iPad. CSS3 animations and transitions is what you're looking for. You would be using it to rotate, skew, change position, fade, glow, etc. It's the only way to get any kind of decent animation speed on mobile devices. Android has more market share than iOS right now. It would be foolish to not be concerned about it. Honestly you should be more concerned about Android instead of IE8.
Does it? On my site I currently see: iPhone 10.7% Android 4.1% iPad: 3.4% iPod: 1.7% * Two months ago it was 8.1/3.1/2.7/1.4 * Four months ago it was 8.3/3.9/1.8/1.4 * Six months ago it was 6.5/3.0/1.4/1.3 * Twelve months ago... 5.7/1.2/1.1/0.9 Maybe the story's different in the US, but in the UK i think Apple's definitely winning at the moment. So while those numbers show that android is growing, I'm not convinced it's going to come close to iOS any time soon. But I agree, I should get hold of a device to test on. Ah well, tax-deductable at least!
Also, to be clear, are you talking about using CSS3 animations on SVG elements, or on &lt;div&gt;s etc? Confused.
Standard HTML elements. I've never done it with SVG and you would want to avoid SVG due to Android issues. Canvas or CSS3 with HTML elements is the way to go.
He should have used `===`, actually.
input type=number If the browser is any good, you'll even get a streamlined on-screen keyboard. **Edit:** This is a save thing to do, by the way. If type=number (or whatever) isn't supported, it falls back to type=text.
IE8 is not on mobile devices. Pre Mango it was a variant of IE7, post it is a variant of IE9. 
One more thing. Never, ever use Notepad. Ever. Even `data:text/html,&lt;pre contenteditable&gt; &lt;/pre&gt;` is better.
This guy has it right, join the HTML5 bandwagon and live the simpler life of web development.
Eh, that's not really necessary for this case.
Node applications bootstrap once and run continuously. Applications running on apache bootstrap for every request. This means that instead of programming for a single request your application must be designed to handle all requests. A node server never stops running.
I've just html5-ified my own site. Was very satisfying stripping out all of the extraneous "text/javascript" etc. I was one of those people who went all xhtml as well, complete with insisting on " /" in every self-closing tag, so it felt oddly satisfying to get rid of those! I was especially pleased to find that action="" is not allowed on form elements. Much more sensible than the previous spec which said you HAD to have an action attribute... even if you were just going to leave it blank.
So just to clarify... again... are you actually suggesting I do something like this...? http://jsfiddle.net/codemunky/cv9pa/ I'm torn. I both like it for its simplicity, and hate it for using elements non-semantically for something they were never designed to be. (don't bother picking holes in my use of css/javascript, it's just a fiddle! -webkit prefixes, so don't bother looking in firefox etc)
Well a div was never really "meant" to be anything, it's a general container. The only thing that's somewhat hacky is the line but still it will render on everything and animate quickly. The only other real option is using a canvas and drawing that way but canvas is slooow on Android.
The only reason I use the action tag is for PHP purposes, I don't see any reason for it other than that.
How do you mean? Obviously it's useful if you want/need to submit a form to a different URL than the one that it resides on, but I always tend to code in such a way that forms submit to themselves, and then forward on if the submission was successful.
You got that the wrong way around. `==` is not necessary. You see, `==` is the *way* more complicated and slower option. With `==` you get type coercion. I haven't memorized that big coercion table (and I don't intend to). Did you? In this case, a straightforward comparison of two strings is all I want. It also makes it clear that `myInput` should be a string.
I mostly use forms for login/register type of situations and I like to go through that process in a separate file, so the action attribute helps redirect that data quickly and easily.
Developers will always have different ideas of doing their work, that is why no two applications/programs are the same.
This tldr, will have to boot up laptop.
Well, I was under impression that it's XPath, let me go through the links, will modify the post as well.
Mess with border radius or look into drawing with canvas. I'd personally go with canvas.
raphaeljs, graphael...do not forget about graphael.
There's others!?
I'm guessing you could do something like if(window.debugger){debugger;} of course, I'm just guessing
*Might*? How will I sleep tonight not knowing whether or not you went??
It's a lot easier if you pretend that `==` and `!=` don't exist. JSLint disallows both operators by default, because they are hard to reason about. I believe that your code should convey your intentions as closely as possible. With `==` and `!=` it's often unclear what your intentions were. It also might have been a typo, which means it requires a comment (just like an *intentional* fall-through in a `switch`). It's also the reason why beginners often write things like `foo == null` when they actually meant `foo === undefined`. Their code works, because their two mistakes cancel each other out. However, the quality of the code (and its maintainability) was heavily degraded. Plus, they might have introduced a third bug: If `foo` is a number and if `0` is a valid value, their code won't handle that value properly. As you can now hopefully see, `==` and `!=` do indeed make things a lot more complicated.
JSLint complains about debugger statements. Typically, you'll remove them a few minutes after you've added them. If they are in your code, it's usually because you forgot to remove them.
&gt;boss: true, debug:true Why would you do that? It's stupid.
if you want to use it and not get jshint bitching about it in dev, you delete it in the production deployment script. edit: also (boss:true) i fucking know when i need my single equals.
ok, :-/ 
or just do whatever feels like, press the vendors and innovate.
A quick google search turned up those as first hits: http://code.google.com/p/upload-at-click/ http://code.google.com/p/ocupload/ If you want not to upload the file, but access/read it: yes, it's forbidden - this is the JavaScript sandbox approach. You, e.g. a third party website, are not allowed to directly access the client's file system. Otherwise, it might be used as a way to "break out" of the aforementioned sandbox.
My world has changed, thank you kind sir.
"console.log" will throw errors in IE if the debugger tool isn't open. Gotta make sure debug code doesn't end up in production.
One of the most frustrating things when you first encounter it. Of course the first thing anyone does to figure out why the script breaks is open the console.
What if the JS engine doesn't know what to do with it? I suppose then you could check simply for it in the global scope? e.g. if(debugger) ?
It's not that I underestimate stupid, but in the example you outlined they could just as easily have a big red button that says "ERROR: Click here to load dependency." If someone is stupid to fall for a dialog opening automatically, then they don't have much chance against a normal button. In fact, a normal button might even give them a false sense of confidence that they're doing something "right" by clicking the error button. Especially if it turns green after the proper file is uploaded. There is really a level of stupid past which we can do nothing by shake our heads, and wait for them to show up in the darwin awards. Otherwise we'll spend our entire lives pursuing an impossible goal; after all, you should never underestimate stupid.
In most browsers, it will only break if the debugger is open. But generally, yeah you shouldn't be leaving debugger statements in your code. jslint/jshint will catch them.
Why on earth would you leave it in production code? That's what dev and stage servers are for. 
When stuff happens automatically, its harder to tell what is causing that to happen, it could be the computer or it could be the browser. Where as your button example its obviously the browser. Also since the file dialog is a part of the OS, it looks even more like an OS function and not a website function.
No, see x-skeww's response. It means it uses media queries to provide views for devices based on window width. ie, mobile device support.
This.
Reminds me of `(debug)` in Emacs Lisp. Are there other languages that allow this kind of debugger statement? 
Ah, good one ;) 
Ah so basically backbone does no communicating with the database etc. Regarding Node, I want to build an app using it but I'm not sure whether node is a good fit for a business directory for where I live. I'm having a meeting with the local chamber of commerce soon as they need an updated online business directory. Do you think it would be neat to build this using node+backbone?
&gt; The problem with this is that I still don't completely get the whole purpose of node.js. I haven't used Backbone but I have used node.js with the Express framework quite a bit for the last few months so I feel like I might be able to help with this question. I am going to purposefully avoid the whole *asynchronous* and *non-blocking* red-herring that many people use to justify node.js. First, what is the purpose of Ruby? Why would you use Ruby on a server over, say, PHP? Whatever your answer, node.js has the exact same purpose. The reason node.js came about was that certain people, like myself, prefer JavaScript *the language* to many other languages. JS lets you be very expressive and has many advanced patterns that most people never use. Once you start to using JS *functionally*, solving problems in the *JS-way* becomes second nature. It does help somewhat that with the backing of the V8 engine node.js is built on top of one of the fastest dynamic languages available right now. Ruby is still slower and PHP is just a joke with regards to performance. The last time I used Rails, it seemed much like a religion: trying to enforce an unquestionable philosophy and structure while being shrouded in auto-magical whatsits. JavaScript frees you from the everything-is-a-class prison that many other languages force you into. With node.js there is shockingly little boilerplate necessary. Since functions are first-class citizens and nearly everything accepts functions as parameters, you get a powerful, terse, and extensible run-time that feels like it still leaves you to do whatever you want - all without any magic being necessary.
If this is news to you, I highly recommend you take the time to read through this: http://fixingthesejquery.com/#slide1
Is this an elaborate April fools joke? Scheduled Events 10:30-11:00 Speaker TBA Presentation topic TBA 11:30-12:00 Speaker TBA Presentation topic TBA 2:00-2:30 Speaker TBA Presentation topic TBA 3:00-3:30 Speaker TBA Presentation topic TBA 4:00-4:30 Speaker TBA Presentation topic TBA 
It is safe to use in production code - if the debugger isn't already open then the statement should have no effect.
Huh. How about if you turn on `about:debug` first?
Thanks a lot for the detailed answer! Do you think node would be a good choice for a simple application like a business directory for my country? Because I've read at [nodeguide.com](http://nodeguide.com/convincing_the_boss.html) that I should try to stay away from node if it's going to be a simple crud application serving html pages. What do you think?
Except it crashes the android browser, and almost certainly IE.
Even if that works, it would break in the wrong script.
I know, but the alternative can prevent the script from even loading.
Apart from that caveat, yeah.
It's not the file dialog specifically, but most file io that is forbidden (short of file uploads). For one, users shouldn't have to worry about websites being able to read and write to their file system. If you are careful, the web can be pretty safe. Javascript IO would mean any website good or bad would be able modify your files. In addition, while Javascript is a powerful language, the fact that in the browser it loads clientside means that anyone can change the javascript code in transit and introduce malicious code. A common technique people use is to inject harmful javascript into form submissions so that when other people load that data, the javascript is executed (which is why it's important to sanitize inputs and html encode output). But if io was allowed and someone managed to inject javascript into a page, they can essentially insert any file into the targets system and potentitally take full control of the computer. tldr; it's the file dialog itself, but io in general that is bad. You don't want any website to be able to write/read your files when browsing the web. Also, it opens up another door for malicious programmers to mess with users.
Just added preliminary support for clipboard on Windows (intend to add other platforms). This allows for settings keybinds for copy/paste and advanced/multi-format copying and pasting. One cool thing is you can copy and paste objects between contexts. In theory you could copy between instances of node but this causes V8 to crash. =X
&gt; If you are careful, the web can be pretty safe. Most of the white papers released by Symantec and McAfee over the 3 or 4 years disagree with you.
ok, well I was being very general. But the idea is still the same, giving javascript access to the file system would only cause more problems and open up another avenue for an entirely new series of vulnerability attacks.
I don't know, is that possible to do on android?
Yeah, but it doesn't do much: * enables you to see console output (log, warn, debug) * enables an input field which lets you execute JavaScript on the fly. It's a bitch and a half to type into, though, even on a tablet with Hacker Keyboard. * enables two options on context menu: Dump V8 counters (for the JS engine) and .. uh ... crap, I can't reach my phone. You just enter it into the URL to toggle it.
this brought a tear to mine eye
Take popular sites apart piece by piece. In notepad. On Windows 98. Without a keyboard. Or monitor. Or computer. In all seriousness, just the first sentence.
Works in Webkit browsers as well; I think this feature was adapted from webkit's inspector.
After working with JavaScript code of other developers at my company, i have come to the realization that most developers don't understand the concepts of functional programing languages. If you are using node.js. It probably better that up have more the 7 month experience as a developer before you attempt to tackle a project of this importance. Let's face it learning any new technology, you are going to make mistakes in architecture because you don't have the experience. If you have already been working with ruby, stick with it for releases until you feel as comfortable with closure and curring as you feel with OO.
FWIW, I'm currently experimenting with Backbone Everywhere (https://github.com/Morriz/backbone-everywhere) for running Backbone on the client AND on node.js
It's always worked fine for IE as long as I can remember (unless you already have IE set up for debugging and are running the script in "debugging mode", IE traditionally just ignored the whole statement) . The android browser crash seems to be a limited, platform- or browser-specific bug. It's been in the javascript spec [since v1.0](https://developer.mozilla.org/en/JavaScript/Reference/Statements/debugger).
True about using learning node properly first. I'll create some other apps first before I do a node project for money :p
&gt;but those are memorizable tricks that you can get by without fully understanding. Then you are a shitty programmer, if you honestly subscribe to this. A monkey can type away at a keyboard too and I am sure you can teach it some memorizational tricks, but that doesn't mean it can write JavaScript. Part of using a tool for development is the use of the tools features. To effectively write JavaScript code you need to understand (not just memorize) the patterns of a language. The why, should be more important to the developer then the how. If not, they will never grow past Jr developer skill level, even if they fool some managers to grow their title. 
Etherpad doesn't use backbone.js but I heard that the backbone.js guys are working on integrating it.. Not sure on the current status though..
I used to use little BASH scripts. I used [node-ams](https://github.com/kof/node-ams) for my last Node.js project though and it worked out really well. 
What about Backbone vs. Spine?
Yeah, I'm aware of that bug. I haven't quite figured out how to decide which headline to focus on when multiple are in view. Any suggestions?
I wouldn't worry about the TOC updating as you scroll, but I would definitely utilize the `:target` pseudo-class to draw attention to the headline that was clicked, like how [Wikipedia does for their footnotes.](http://en.wikipedia.org/wiki/Reddit#cite_note-0) The nice thing about this is that you won't need to use any additional JavaScript, just CSS. The downside is that you will need to either modify your JavaScript to apply the ID directly to the heading (as opposed to inserting a blank span like you do now) or get clever with your CSS selectors, such as using the [adjacent sibling selector](http://reference.sitepoint.com/css/adjacentsiblingselector): :target + h2 { color: red; }
You just need to specify the window name. In a standard html link (a href) you can use the 'target' attribute (target="windowName"). If you're opening a window with window.open, you can specify that name as the optional second parameter (window.open('url', 'windowName'). The complete window.open syntax is available at http://www.w3schools.com/jsref/met_win_open.asp . 
I thought about that, but I was trying to be as unobtrusive as possible and not modify any existing code. I'll think about this some more because I really like that treatment.
You could avoid making any changes to your code at all and instead just throw that bit of CSS in with the documentation as a suggestion or with one of the examples that demonstrates what the plugin does. Great work, by the way! I'm definitely going to consider using this the next time I need a table of contents.
Well, that's pretty cool.
Thanks a bunch!
There is nothing about node.js that makes it inherently bad at simple CRUD applications but I would warn against using node.js in this particular case for two reasons: 1. Hosting node.js is still not that easy and you have to really understand the whole ecosystem around node.js. For instance, if you are hosting it at some place, will they let you have a port just for node? If not, do you know how to setup a proxy in front of node? Node can't be as easily run like a CGI application. 2. You previously stated that you are not too experienced in programming (starting just some months ago?). Node requires a pretty thorough understanding of JavaScript. I wouldn't start with node until you are pretty good at client-side JavaScript first (no, jQuery doesn't count!). 3. Starting a new semi-serious project in a language you aren't too familiar with on a platform that is still in beta and is not at all easy-to-use is a recipe for disaster. A failure of that magnitude may cloud your whole view of node and do more harm than good in the long run. EDIT: Oops! I guess that is 3 reasons..
You are about learning javascript first. I've been goign through some books of js and will continue to do so. Regarding hosting, i'll figure that part out because it can be hosted on heroku as well which i have a lot of experience with for hosting websites. Since I'm setting up my own vps very soon at linode.com for all my websites, I will be setting it up in order to host node apps as well :) 
This isn't common knowledge? 
Would having two equal signs (so it appears as looping == true) help this?
You may be having a closure problem. Instead, maybe you should use: $("img.slideshow").click(function() { window.looping = true; }); // code code code // ... if(window.looping === true) { This is better for 2 reasons. 1) You're using the looping property of the window object, which is a global variable (and unless overridden, will be the same in any scope). 2) You're using the strict comparison operator, which will help ensure you write better code. When you do ==, you're more likely to confuse it with the assignment operator =, and the type also gets converted in a sloppy and unpredictable-unless-you're-actually-a-master way. 
&gt;setTimeout ("loopTwo()", ...) That's `eval`. Don't pass strings to `setTimeout` or `setInterval`. Write it like this: `setTimeout(loopTwo, 5000)`
Yep, but you probably want to forget == exists and stick to === until you are comfortable with JS. (In short, == allows many unexpected things to be equal but saves time in some rare circumstances, while === usually does exactly what you'd expect).
I'm fine with JavaScript not having any file access (read or write, as I would not feel safe browsing the internet otherwise) The thing I've never understood is that JavaScript does not need to have file system access to be able to open a popup window. All JavaScript would have to do is open the dialog natively using existing api's (from that point on, its the OS in control). I'm still not seeing the security risks here. The current solution of butchering file input's to make them behave as desired is less than ideal. Is there some other security issues I am not aware of?
I highly advise against putting something in global scope to solve scope issues - it's always the wrong way to approach the problem and can create issues if used w/ external scripts (I saw adserved code today that defined a global set_cookie - not cool man)
When is it the *right time* to use a global variable?
If you're going to have an anonymous function, at least have strict mode on.
I'm not saying that functional programming techniques aren't worth learning... I'm just not sure that it's always the best next step for a given person. Like most programming tools, FP can take certain classes of problems and make them way, WAY easier. But if you haven't run up against a problem for which alternate approaches end up being kind of clunky, then it throws a lot of cognitive overhead into every time you have to look back over your code. When the cognitive overhead is less than that of a similar solution using programming styles you're more familiar with, then you've outgrown your current toolset, and it's time to expand. I'm just not sure I see a reason to reach for this particular tool to solve the problem the OP is asking about, and I've seen (and had to un-fuck) plenty of code that came about when someone (frequently, a younger me) was using an overly complicated solution that they wanted to learn more about, instead of a simpler solution that would have been every bit as clear then as now. That said, I wouldn't know what I do now if I hadn't written some unnecessary round-peg-to-square-hole adapters in my day, so perhaps my advice isn't quite dialectically appropriate.
What license are you releasing this under?
When defining your namespace :p
Not very constructive, but all I could think of when reading the source was James Brown in a French accent. Le Funk.
Should probably include the "design" part next to responsive to avoid confusion.
When feeling particularly masochistic, I have used that evil switch fall-through for functions with an optional callback and a varying number of arguments before the callback: function a_func(handle, option_a, option_b, fn){ var default_handle = "default_handle"; var default_option_a = "default_a"; var default_option_b = "default_b"; var default_function = "default_function"; switch(arguments.length) { case 0: handle = default_function; case 1: option_a = handle; handle = default_handle; case 2: option_b = option_a; option_a = default_option_a; case 3: fn = option_b; option_b = default_option_b; } console.log(handle, " - ", option_a, " - ", option_b, " - ", fn); } Output: a_func() -&gt; default_handle - default_a - default_b - default_function a_func("new_function") -&gt; default_handle - default_a - default_b - new_function a_func("new_handle", "new_function") -&gt; new_handle - default_a - default_b - new_function a_func("new_handle", "new_a", "new_function") -&gt; new_handle - new_a - default_b - new_function a_func("new_handle", "new_a", "new_b", "new_function") -&gt; new_handle - new_a - new_b - new_function
If you're using RequireJS, you can prevent caching by including this in your main.js: require.config({ urlArgs:"v=" + (new Date()).getTime() }); This will append a unique ID to the end of each request, ensuring that the browser never matches a cached version. Of course you'd want to remove this in production.
One error is that you didn't close the &lt;img/&gt; tag
Fixed that thanks! Still getting a syntax error :( "Error: why are you learning JS at 25 years old? You looney, 13 year olds can code this shit better than you! Give up and go home!" Seems about right don't you think :D
Don't be too hard on yourself and don't get discouraged. You have to start somewhere and better late than never. You made a great choice. Here's a couple tips: in HTML, you don't put the HTML tags (I'm talking about the input button in this case) inside of &lt;script&gt; - isolate your scripts, preferably in a separate '.js' file. OnClick is all lowercase and you're missing an equal sign between type and button. buttonClick parameter is not necessary in this simple case. An example where you would need a parameter would be: You have many images, and when you click the button you tell the function which image you want to change. Good luck!
`instanceof` is kinda crappy, since it doesn't work with literal strings and numbers and booleans. I did do something similar to what you're saying though, comparing against each argument's `constructor` to figure out what things are. https://github.com/brian-c/patterned-function
I agree that my button will be quite obvious to any person that understands the first thing about how a browser works. However, I would venture that any such person would also understand that a file dialog that opens as soon as you navigate to a new site, and blocks the site in question is not particularly trustworthy. Likewise, while I have no doubt that an auto-dialog could trick a user who falls for those fake "You have a virus" error dialogs, that's exactly the type of person that would also fall for the button example. This is especially true if the file they need to upload requires some instructions to find; in this case they are falling for practically the same attack as the button example (Read instructions, then automatically trigger a dialog, finally find the file). Essentially, I am trying to say that the number of people that *would* fall for an automated file dialog, but *would not* fall for a page tailored to look like an OS "error window" is practically zero. You either have the bit of common sense to know that a browser will not be throwing up OS UI elements, or you don't.
Mission accomplished. [edit] I'm building out the documentation website for this and I think I'll use a french James Brown as the mascot. Thanks for the idea!
didnt see the replies already....awkward.
This is exactly what I am asking. So far no one has been able to provide any sort reasonable answer except, "A total idiot might see and file dialog chose to upload all of his secret files," which doesn't really fly with me for a whole lot of reasons. (Mainly the fact that someone that stupid will fall for much more obvious attacks first.) Another possibility is the fact that a file dialog tends to block the underlying program, so it might be a way of effectively DDoSing a browser, but even that could be fixed by preventing the API from being called too often.
I had no idea this existed! Thanks. It will help me out tremendously to compare. One thing I noticed is Resig's doesn't discriminate against types, which actually defeats the purpose of leFunc. That is, to abstract argument checking away.
I considered implementing this or some sort of schema validation. I figured it would be too costly though.
This is a good start. One thing to note, while W3C *recommends* attributes (like "onclick") be lowercase, it can be any case and there are no hard rules about this. Really, any tag/attribute can be any combination of upper/lower-case characters.
Well, if you use leFunc.js, you won't have to worry about it ;)
No gotcha here. JavaScript's Date() constructor is just really flexible (in some browsers). For example, in Firefox you can ask for the 44th of May: new Date('2012/5/44'); // returns Wed Jun 13 2012 00:00:00 GMT+0200 (CEST) In Chrome this will just return an Invalid Date error. I used to use this behavior to [check for date validity](http://www.mennovanslooten.nl/blog/post/8).
Upvoted for the name. :)
to go inside the module try to double click on the label "Go Inside"... and only the input and output modules cant be placed at the top level 
It wasn't that he forgot the "/" when closing the &lt;img /&gt;, it was that he forgot the "/&gt;" entirely.
Yes, and what i was trying to say, is that before you can use a technology in production, you should understand the strength and weakness of the technology, and know how to use them. I am not saying that FP is the end all solution, but it is at the core of JavaScript. Hence unless you fully understand prototypical inheritance, and closure, you should probably not be planning to build production software in it. At the end of the day, it isn't as simple as here is an imperative solution and here is a functional solution, they intertwine. Oh and by the way, i am not saying the OP shouldn't touch nodejs or i am just suggesting to stay on the safe side and use techs he already knows and fully understands for production code. We do all learn by writing plenty of bad code first.
Code is on github https://github.com/anvaka/VivaGraphJS
MongoDB (database) Redis (background jobs) CoffeeScript Stylus Jasmine (tests) holy flavor of the month overloads batman (seriously though, mongo as default datastore? &amp;#3232;\_&amp;#3232;) 
Nice, this looks great!
This is a great introduction to JavaScript programming: http://eloquentjavascript.net/
/r/javascript
My daily reading constitutes of browsing through this: [http://www.reddit.com/r/webdev+webdesign+php+javascript+rails/new/](http://www.reddit.com/r/webdev+webdesign+php+javascript+rails/new/)
Thanks again I will try to figure it out based on this snippet.
allows conditional breakpoints.
*sigh* coffeescript. Really interested until I saw that.
Just including the words "MIT License" in a comment, near your copyright assertion, is not enough to protect source code with the MIT license. Normally, a developer would include a file with the name License.txt in a release of software. This file should contain the full text of the applicable license, and then each source module can point to that License.txt file. In the case of a one-file release such as jquery.toc.js, the full text of the license should be included in the source code itself. You can also say, in the source code, "Released under the MIT license" - but that itself is not a legally binding statement. That is simply a convenience, a bit of advice to readers. If they believe your statement, they might wish to skip reading the full text of the actual license text. But in a legal sense, the actual license text is the only part that matters. You may want to review [this](http://www.oss-watch.ac.uk/resources/opensourceyourcode.xml#body.1_div.3) . 
Consider me a doofus, thank you for pointing that out.
This'll be perfect for Giles Bowkett.
Although he's more all-purpose front-end, I usually follow http://paulirish.com/
OpenGL uses floats everywhere internally, and Java uses floats everywhere internally. So even if fixed point computation would be faster in some JavaScript engines, you'd probably lose any slight benefit when you hit the WebGL API.
&gt; Separate your behavior (JavaScript) from your design (HTML and CSS) CSS and HTML also define behavior. Consider A elements in HTML and :hover in CSS. I find this aversion to invoking JavaScript behavior from HTML very curious. Surely it's better to have invocation explicit, rather than hiding it away so that someone editing the HTML can break the JavaScript because they fail to realize they're changing an element which it hooks onto?
Mostly for minification and obfuscation in enterprise coding. It's good practice to follow in general as well. Think closure compilation and refactoring. 
It's not always convenient to construct an object for parameters. You may not know the names of the keys. So, when building an api, I like to provide multiple ways someone can call a function. Additionally, you may want to run varying code depending on the arguments that come in.
I closure-compile and minify my code that's invoked with onclick. And obviously, I keep it in a separate file. What I don't get is why people have this religious belief that you should never use onclick and similar attributes to invoke script.
Mostly because that's what the [YUI guidelines](http://developer.yahoo.com/performance/rules.html) said. And it's good practice in general. However, special cases do exist. Google for example used to keep their page download speeds optimal by inlining javascript. This is fine. However, if you were to do this in an enterprise application, you'd have a hard time getting it past code reviews by colleagues. So, if someone's getting used to JavaScript, and ask me a question, I usually recommend separating out the JS behavior from the HTML. On a personal note, I detest seeing onclicks in HTML mostly because I've seen people doing this: &lt;a href='mylink.com' onclick='doSomething(event, this);launch_popup(event, this.innerHTML);return false;"&gt;Click me!&lt;/a&gt; When you see this strewn throughout your application of 400 files, it becomes a point of hate. EDIT: Oh yes, how could I forget? Javascript gets cached; HTML might not be when it's generated in the back-end (struts/jsp/php etc). So keeping the size of the html small by moving javascript logic out makes page loading that much faster. Besides, if you need to load a separate file for handling logic on a different medium for example a mobile phone, inline javascript usually becomes a pain-point.
The general case for PHP is a traditional database such as MySQL. With node.js I would say that the general case is more often than not, some sort of no-sql option, such as MongoDB or CouchDB (or any other number of nosql solutions, take your pick). The bigger problem here for me is that Node.Js apps are generally not written using coffeescript so I can't see this framework getting significant traction such as the likes of Express.
Could you add a configuration to choose the direction of scroll when using the mouse wheel? Also, when scrolling through images of varying heights, the navigation buttons jump across the screen. The alternative UI design is to have the nav button area be the full height of the scrollable container. Maybe another configurable option.
Why do you need to save to the cookie and then display in the table? Can't you read the form, parse it and then render the table immediately? What's the requirement?
Oh, sure, inlining code in the onclick attribute is horrible. But a single method call is fine, I think. And the size difference from moving onclicks out of the HTML is unlikely to be significant once your HTML is gzipped, I suspect. If the events you handle are different for different browsers, then yeah, that's a good reason to use DOM walking and JavaScript to add handlers. But still, that's a special case, and not really a reason to _never_ put method calls in the HTML. Basically, removing from the HTML all trace of the fact that an element will cause some code elsewhere to be executed, seems to me like the reinvention of the COMEFROM statement. I'm still not convinced it's a good idea unless there's a good special-case reason for it.
&gt; unlikely to be significant once your HTML is gzipped Yep. In my experience, it isn't for single page loads. However, if you're serving a huge application to millions of users, every bit counts. The static/dynamic HTML content that we serve comes from our servers and the JS/CSS/assets come(s) from CDNs. So there is a requirement that we impose separation of concerns in our case. &gt; Basically, removing from the HTML all trace of the fact that an element will cause some code elsewhere to be executed, seems to me like the reinvention of the COMEFROM statement. I'm still not convinced it's a good idea unless there's a good special-case reason for it. Again, in my experience: I've worked with a UI designer (and for some reason, the company hired this person only to work on the CSS/design/HTML/look-and-feel) who likes to have complete control over the HTML. When this is the case, we agreed on a basic set of elements that the designer would give me and I'd work on a class of elements in my JavaScript regardless of the structure and there is no controller logic tied into the markup. It was quite a good experience developing that way because it prevented accidental removal/omission of javascript calls in the markup. Besides, if I am going to define generic behavior across the application, I shouldn't have to have that in the markup. I can see where it gets called and executed in the JS environment. Makes for easy to parse stacktraces in Firebug or Chrome or IE developer. Speeds up my work. So, knowing how JavaScript works is one part of the deal; actual implementation, I'm sure everyone has their justifications for why they code in a particular way. I am comfortable with mine because I've sped up my development process. I feel it's a good thing to teach others this technique to save them the time. So they can learn from my mistakes.
Unfortunate timing really. I can tell you though, it is a real event. I work for one of the companies sponsoring it.
http://jsfiddle.net/ebzEn/ I've used jquery, but that's because I'm comfortable with it. I am not exactly using the best encapsulation techniques, but I hope you get the idea.
&gt; Again, it's about passing functions. If you don't know how functions work in JavaScript, you should fix that. I don't think you understood either what I wrote or the difference between passing references versus executing functions.
You say: "One of the other things that we need to do is to make sure that we aren’t dividing by 0." But you never *use* division anywhere in the entire problem. The modulus operator isn't division and you don't have to worry about divide-by-zero with modulus. That said, I had a chuckle when I saw this... for (var i=1; i&lt;=iterations; i++){ if (i != 0 &amp;&amp; (i % num1 == 0 || i % num2 == 0)){ Why do worry about **i** being zero (0) in the first place if *you* initialize it to one (1) and then proceed to only perform *post-increment* on **i**? Do you not trust some 4000-odd years of arithmetic? Do you doubt your own intuition and logic?
I have noticed that r/programming is *very* anti-JavaScript. Create a string completion library in JavaScript and it gets down-voted below 0 immediately. Create a string completion library in Haskell and it gets 200 upvotes. 400 if you work the word "tries" into your title. r/programming is quickly becoming a CS circle-jerk.
It's not based in Javascript so you'll have to translate from C to JS but [this](http://www.ai-junkie.com/) is a pretty good resource. If anything, it should be a good primer.
Simple: var i, s; for (i = 1; i &lt;= 100; i++) { s = ''; if (!(i % 3)) { s += 'Fizz'; } if (!(i % 5)) { s += 'Buzz'; } if (!s) { s += i; } console.log(s); } For the lulz (94 chars): var i=0,s;while(i&lt;100){s='';if(!(++i%3))s='Fizz';if(!(i%5))s+='Buzz';if(!s)s=i;console.log(s)}
I was just discussing this with the author of [f_underscore](http://krisjordan.github.com/f_underscore/) yesterday. It's a nifty little functional helper library for underscore. His last solution to it the problem went something like this : var isFizz = f_().mod(3).eq(0), isBuzz = f_().mod(5).eq(0), notFizzBuzz = f_.neither(isFizz, isBuzz); _.map(_.range(1,101), f_.concat( '', f_.ternary(notFizzBuzz, _.identity, ''), f_.ternary(isFizz, 'Fizz', ''), f_.ternary(isBuzz, 'Buzz', '') ) ); I quite dig that solution. Wrapping it in a web page as the author suggested just seems like busy work though. I often find myself using something like bootstrap even on simple test programs though, because i just can't abide by unstyled markup. I have to stop myself because I know i'm just wasting time when i get like that though. 
84 Chars. :p for(var i=0,s;100&gt;i;)s="",++i%3||(s="Fizz"),i%5||(s+="Buzz"),s||(s=i),console.log(s)
Cookies are fine for what I'm doing, but I will definitely keep that in mind for future projects. :)
68 Chars: for(i=0;++i&lt;101;)console.log(i%3?i%5?i:"Buzz":i%5?"Fizz":"FizzBuzz") Technically qualifies as ternary-operator-abuse in 30 of the 50 states. EDIT: Okay I'm having too much fun doing this; I don't think I can get it any smaller though, I'm too deep into the microbrews. I thought I had a trick with 0's, but nope, I think this is it. 64 chars: for(i=0;++i&lt;101;)console.log((i%3?'':'Fizz')+(i%5?'':'Buzz')||i)
Mouse wheel should zoom out the thing. And you can grab the canvas with left mouse button to pan.
Props! That's some impressive js compression!
D3 has a lot more features than my library. In terms of graph rendering we've chosen slightly different approaches for repulsive forces calculation. D3 uses constraint relaxation approach which makes it look faster to converge. Whereas I perform standard repulsive forces calculation, which makes it look slower to converge (depends on simulation parameters), but (IMO) gives more natural look. In terms of actual performance we both stuck at SVG rendering speed. Anyway, here is a small demo that I wrote to render D3 standard graph: [D3](http://mbostock.github.com/d3/ex/force.html) and [VivaGraph.JS](http://dl.dropbox.com/u/5313583/Stuff/js/Test/d3sampleTest.html)
I've always been partial to this kind of structure function(required_1, required_2, options) Where options is an object, then just define defaults at the top with function(required_1, required_2, options) { option.x = option.x || 'default'; } What's the benefit of required params last?
This has essentially replaced the rest of reddit for me: http://www.reddit.com/r/javascript+python+web_design+webdesign+django+webdev+programming+c_language+c_programming+vim
This post actually shows a number of other issues that fizzbuzz can point out, which are traps the OP fell into. First, most of this wasn't asked for. I've seen lots of developers in real life build large libraries where only a small section ever gets used. It's a huge trap that people build in extra functionality, that simply never gets used. Next it instinctively reaches for HTML5 Boilerplate and jQuery. There is nothing wrong with using libraries, both of these rock, and I use both myself. However it is a really bad sign to use dependencies when you only need a very small subset, and considering how simple the problem is, I would have just used pure-JS. A pure-JS solution would probably be around the same length, whilst showing knowledge of the underlining DOM. It's amazing how many web developers have no experience with working without jQuery. Could have also just tested it in the Chrome console, or Firebug, and that would have avoided writing the HTML page (which is most of the code). Finally the solution mixes behaviour and display logic. Does this mean if the OP were asked to query and display results from a DB, he would interleave the SQL queries with the HTML? That would make the code a mess, and difficult to maintain, and is why lots of web devs avoid it with things like MVC. What if I wanted to build a unit test to test just the behaviour logic? What if I wanted to generate the numbers, and wrap them in divs or place them into a text area? What if I want to use fizzbuzz as a part of another maths library? What if I wanted to display the first 5 values a second time as a part of the title or sub-heading? If either of the fizzbuzz or HTML code need to be changed, then I need to update them both when I make this change. In short, keep fizzbuzz short and sweet: work out values, return them, done. Keep display logic simple and separate: call fizzbuzz, iterate over the values, concatenate the list tags, set to the HTML, done.
I hope this comes in useful. My thanks go out to Ben Alman and Jörn Zaefferer for their previous work in this area as it was very helpful as further reference. Remember that Backbone Fundamentals (backbonefundamentals.com) also has a section on testing with Jasmine in case you would prefer that.
I'll just leave this here: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind#Currying
Came here to see if someone had already posted this. A phenomenal resource and makes for some very fun/productive fridays!
So here's a couple things I'm not sure about, and a few things that I know are problematic. 1. Instead of using the document.forms["x"].elements["y"] the standard way to access form elements is document.getElementById("y"). That makes it simpler. 2. I'm not sure how the child page is going to handle the global variable "(PopForm)". You could do something like, using a closure to create the variable in there to be sure, but that sounds like it might be overcomplicating your solution. 3. Setting the onload event from the parent can be... finicky I've found. I think a better solution would be to put an oload event in your child that calls your method form the parent, and grab the data you want from the parent, I think that will be less confusing. You just need to make sure that the function in the parent will be accessible to the child. var title = document.title; var url = window.location.href; var popForm; function get_elements() { popForm.document.getElementById("id_title").value = title; popForm.document.getElementById("id_url").value = url; } function bookmark() { popForm = window.open("form.html","aWindow","height=500,width=400"); popForm.window.onload=get_elements } window.get_elements_accessor = get_elements; Now on you inner page set it up like this. &lt;header&gt; &lt;script language="javascript"&gt; function get_parent_elements(){ window.opener.get_elements_accessor(); } &lt;/script&gt; &lt;/header&gt; &lt;body onload="get_parent_elements"&gt; &lt;form id="link_form" name="link_form"&gt; Title:&lt;/br&gt; &lt;input id="id_title" type="text" name="title" maxlength="50" value="" /&gt; &lt;/p&gt; Description:&lt;/br&gt; &lt;textarea id="id_descrip" rows="10" cols="40" name="descrip"&gt;&lt;/textarea&gt; &lt;/p&gt; Url: &lt;input id="id_url" type="text" name="url" maxlength="100" title="" /&gt; &lt;/p&gt; &lt;input type="submit" value="Submit" /&gt; &lt;/form&gt; &lt;/body&gt; I think it's more clear what's going on if you do it this way than trying to to use global variables from the opener in the opened window. Give it a shot, I haven't tested the code there though, so let me know where I made the eventual mistakes ;).
You don't pass that function itself. There isn't such a thing. You still just pass a reference to a function which happened to be defined on the spot.