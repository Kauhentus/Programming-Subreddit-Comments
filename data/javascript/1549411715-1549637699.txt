I don't use axios anymore, but there _are_, in fact reasons - monitoring progress - cancel requests - CSRF protection - defaults - interceptors It just happens that none of them is actually useful to me, most of the time
God bandersnatch sucked.
The talk with the facebook push team was pretty cool. Showed how they did their deployments etc. 
It returns a promise because HTTP responses are streams, it has to wait for the whole body to download before it can attempt to parse it. It's a convenience method for consuming the stream and parsing it in one call.
Just rename it awesome engineering blogs to fit the true GitHub listicle format
I can't thank you enough RickD! Works just the way I want it to. Thank you!
&gt;Result: const obj = { } will be copied to clipboard. Paste it into your text editor. Actually just the obj will be copied to the clipboard. So in this case \`{}\` would be copied, not the whole declaration. 
it's an expandable tree of the object. Console.table produces a nice table of the keys and their values, too,
Awesome tips 
Hey those are really clean, I like them. Also it looks like you have a lot of bases covered. 
So is the idea you have a notion config file in source control, and so a new dev can get up and running asap? That's an interesting idea. In my consulting days it could have been handy. It's it scoped to a directory or something? 
And get added to the awesome list of awesome lists repo. 
I mean netlify is a thing
I think maybe you're missing that I use the second argument in a bunch of places? https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects
&gt;the argument was made that it is easier to grok for people that struggle with classes You might be overfocusing on one small part of the messaging. It's common I guess. I was confused when Hooks were on HN the first time, and everybody focused on "classes are confusing" when it was the last argument out of several. I do encourage you to re-read both the docs and my follow-up (https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889) to get a sense of the problems they solve.
Maybe you'll like this shortcut ``` function useLatest(value) { const ref = useRef(value) useEffect(() =&gt; { ref.current = value; }, [value]); return () =&gt; ref.current; } ``` ``` function Foo(someProp) { const [x, setX] = useState(0) const getLatestX = useLatest(x) const getLatestSomeProp = useLatest(someProp) // ... you can call getLatestX() anywhere } ``` At this point I don't find it that valuable an abstraction though and would just hardcode it when I need it.
Yeah that's pretty much the intended takeaway! If you think class is understandable I encourage to implement this example with a class: https://overreacted.io/making-setinterval-declarative-with-react-hooks/#bonus-fun-demo I'd like to see how it looks.
In general in React it's not advisable to mutate things in render. React might abort rendering of a tree midway and not commit the result. 
Thanks for the reply. It makes sense. I think I just understood useEffect a bit better. Am I right in assuming they are actually called post render? 
I don't remember what lib was affected, but some times ago, a malicious actor took requested and obtained the maintenance of a JS library and surreptitiously added some obfuscated code to pilfer bitcoin wallets on the hard drives of developers. Surreptitiously because the offending code was added through a point update to a sub-dependency that was only published on NPM, not on github (there was some code on GH, but not the malicious version).
Thanks! But I switched to Firefox. Just think google has gone too far.
Thanks for the insight. I’m definitely down with giving hooks a whirl. If I had to reflect, I would guess that my class vs hooks question is probably tinted by the original HN discussion as well. 
This seems relevant: https://andrewchen.co/the-law-of-shitty-clickthroughs/ The abuse of channels like this is probably one of the reasons they become less effective. Of course, seeing push notifications as a 'channel' rather than as an enabler of vital functionality is the main problem in this instance.
I'm going to tell everyone to ridicule you. It will be fun. 
Tabs are most certainly not better than spaces.
Yea I misunderstood, when reading the docs I actually thought that it behaved differently, I thought it still ran the effect and tore it down on every render but it would basically memoize it or something with the second argument. It makes sense to me now, I was misunderstanding the ready docs. Great write-up.
next you'll be telling us mark zuckerberg is human.
What exactly are you trying to achieve with this code?
It ends too early, we need to know.
Well why not?
Being honest, I'm not sure, this framework is a mess. I think it gets the session of the current user. (window\[URL\] is a variable filled in other part of the app with something similar to window\[URL\] = {id: 456789, ...})
gud keep it up
# U+2001 This message brought to you by the Em sQuad. _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
Thanks )
Strap in this is a good one [how Apple makes fluid interfaces](https://developer.apple.com/videos/play/wwdc2018/803/)
How old? Promise old
Seems like the point is to make a new Receptacle asynchronously. Remove everything inside the promise except resolve(new Receptacle(window[URL])) delete window[URL] 
Does this mean you have neither the numbers nor the suppirtive statements?
Either. There are lots of resources on the internet for learning JavaScript for free. You can also play with it using nothing more than your browser and the console. If you find that you learn better in a structured classroom environment, go for the class. It all depends on how you learn but JavaScript is pretty easy to learn. 
Would you start writing Java without studying the language? What about C++? Ruby? The biggest historical issue with JS was C or Java devs saying "it looks familiar" only to become frustrated because looks aren't everything. The core ideas in JS (object literals and higher-order functions/lambdas) are **not** present in either of those languages. The functional approach used in most serious codebases looks nothing like what you would do in Python or Java. You're in luck though. The best ways of learning JS are all **free**. Here's some of my favorites. [https://eloquentjavascript.net/](https://eloquentjavascript.net/) -- Learn JS [https://leanpub.com/javascriptallongesix/read](https://leanpub.com/javascriptallongesix/read) -- Learn Functional LS [https://github.com/getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS) -- Learn all the little details about JS over a few books. If you like these book and are able, please don't forget to support the author. It takes a lot of time to write quality books. All of these books together would cost less than most any **one** textbook I bought when I was at university.
Thank you. 
Thank you. 
Because [this](https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/) 
Senior JS dev here, never took one programming course of any kind and learned literally everything I know from YouTube videos and other free internet resources including the above cited links. 
Little different, but one of my favorite videos I keep going back to. Basically just the idea of rapid prototyping and in this context using Node.js. [https://www.youtube.com/watch?v=IDHRu1BJK-o&amp;list=PLEq2h2D9ESkaonBAtI8IjrlYsJGPnVVMb&amp;index=10&amp;t=0s](https://www.youtube.com/watch?v=IDHRu1BJK-o&amp;list=PLEq2h2D9ESkaonBAtI8IjrlYsJGPnVVMb&amp;index=10&amp;t=0s) 
I used Ember in the last year for about 10 months. Every day I used it, I had to revisit their docs to learn how to iterate through arrays, scan through code to remember where a particular component got imported from, and I never fully enjoyed working with Handlebar templates. The entire framework was very restrictive and too opinionated for me. &amp;#x200B; I was talking with an intern who wanted to get into JS. I originally tried teaching Ember since we used that, but I for the life of me could not explain it simply and she got very confused. I showed her the docs, and even tried to give her some sample work, but it was too difficult to learn. We could barely get her ramped up in the first few months because the overhead was so large. &amp;#x200B; I understand if you can get over the learning curve, you could be productive with Ember. But I spent less than a few days learning Vue and maybe hit the docs once every few months. Having a light and clear API goes a long way, and I think that's why many people enjoy Vue / React / Svelte. &amp;#x200B; &amp;#x200B;
Reddit architecture- https://youtu.be/nUcO7n4hek4 Netflix - https://youtu.be/CZ3wIuvmHeM Micro services - https://youtu.be/j6ow-UemzBc
I think I couldn't convey what I wanted to ask properly. &amp;#x200B; I wanted to ask, **as I know basics of programming from the java and python courses - will picking the syntax would be enough to learn JS?** **or do I need to take a online MOOC course or YouTube course or any sort of course to learn it?** 
Hi /u/anonymous-humanoid, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/HyFiveGuy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Ok. Sorry for misunderstanding 
Amen! It’s not like people
Please do. My IQ is higher than you can ever compete with. I’m basically like that guy from death note except instead of killing people by writing in a book I kill their karma by typing on Reddit. 
I'm not asking what `#` is in classes, I know what they do and why they are there. I'm wondering why they keep reaching for the `#` character instead of realizing that doing this is a strong sign that they are overcomplicating syntax purely for the sake of satisfying some obscure academic concern. The perf thing isn't actually a thing since conceptually [they're more-or-less the same as closures](https://news.ycombinator.com/item?id=926140) and modern JS engines have no trouble whatsoever w/ variable shadowing in closures. The shadowing itself is fatally flawed design-wise though since then you can't access the public field from an internal context. Of course, after all this talk about true privates and whatnot, `protected` is still left cold in the dust, which just goes to show that pragmatism in ecmascript proposal discussions got thrown out the window long time ago.
/r/iamverybadass
I'm in the "be consistent and follow your style guide if applicable" camp. I don't give a shit, as long as I don't have to switch all the time. Even better, include an `.editorconfig`.
Hi /u/wild_howl, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/yanohueleamiao, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Too bad javascript is dead now thanks to typescript j/k
It's like I've struck gold! Great resource, thanks! 
https://i.redd.it/522kp7j5rli01.png (j/k)
Who in the hell is using both? What possible argument could there be for that?
https://plot.ly/create/?fid=AlexanderDreith:1&amp;fid=AlexanderDreith:0
If you delete the first row it's easier to see that growth has actually slowed down for the last 100K.
Thanks! I just knew there would be a site just for this, but couldn't find one. Wolfram Alpha wanted me to go pro :(
To double your salary of course
I’m the opposite I hate typescript
Based on a true story.
You'll need to define safe. Crypto-js is a mess in general. I don't have time to do a full write up but: - kdf is weak - CBC mode with no HMAC is a nono 
Tabs are most certainly better than spaces. First it’s literally the semantic character for indentation. Second you don’t want to force everyone to use the same indentation space as some may have a difficult time seeing 2 spaces and need more like 4. With tabs you can just set that preference in your editor and off ya go without code changes. Spaces should only be used for alignment. Also: I love flame wars :) let’s do this!!! 
Yeah, thanks - that was explained [here](https://www.reddit.com/r/javascript/comments/an94xq/axios_needs_maintainers/efsdjrk/) too :)
If you use Yarn, you can selectively override dependency resolution (even in transitive cases): https://yarnpkg.com/lang/en/docs/selective-version-resolutions/ Also this problem exists in other platform too (e.g. [C++](https://docs.conan.io/en/latest/using_packages/conanfile_txt.html#overriding-requirements)). Unless you know the code, you cannot assume which behavior is correct. 
I was referring to this: https://github.com/mitranim/simple-pjax
Is there a reason you use useEffect? I have done this before: const [state] = useState(0) const ref = useRef() ref.current = state // ... Is it wrong or can this break?
The only people I know who don't like Typescript/Flow (including myself in the recent past) are people who have never worked in a codebase that used them
You can change the background colors inside the css. The chart colors in the other hand are defined inside var options object colors.
🔥
I wanted to join the flame but you said exactly what i wanted
No, React Fire is totally different. That's the effort to slim down and modernize ReactDOM. (Not to be confused with the tasks codenamed "Fiber", "Fusion", and various other words starting with 'F'...) :) 
Well, you got me there.
nice blog
Tabs over spaces? Downvoted! (Jk, great work!)
🎣
Happy Hooks Day everybody!
I also would like to weigh in on the war and say that imo the best solution is: Setting up your IDE to use spaces, but make them display and behave like tabs when working with. (VSCode does it really well).
What here is beautiful?
whoah. this shit is awesome. &amp;#x200B;
&gt; You don’t have to learn Hooks right now. YES YOU TOTALLY HAVE !!!
I think the beautiful one is the Gmail one
is there any youtube or wtv vids that can be more simplier to understand how to work with this?
If you don’t, you might as well remove React from your CV.
[Gary Simon](https://youtu.be/WogfLKQHi1A) released a video yesterday
I wish my team had the time and money to talk about the cool stuff we do
I have read this excuse a billion times. Sure you press tab once and get four spaces. But when you press delete/backspace, does it remove four spaces? Do you click in the middle of a 4-space "soft-tab" and select the starting point or endpoint? Or do you get your cursor inside the limbo that is inside that thing you call "tab"? Tabs indent, spaces separate words.
The fellow confirms! :-)
I don’t have time for that, I’m refactoring my shit in preparation for the upcoming lifecycle changes
sorry but we need at least 7 years of experience with React Hooks
Weird to read the code is tightly coupled to security assumptions. The way I learned it, code is coupled to some other code. Has "tightly coupled" come to mean "bad" in general?
Arrrr ahoy, matey! Would you like to push Hooks to prod today?
Not entirely sure this isn't a joke... in case it's not, you can just open developer tools in your browser of choice and see the CSS there. Or [check this quick one](https://jsfiddle.net/p3q0jL5k/). Though Gmail is using divs, you can style fieldset and legend if you would like.
Great news! I've been reading and studying Hooks for months, but refrained from using them in Production. I now have a little work to do. 
Use material css
Do you know which flag? I can't get it to work on electron. I'm using electron version 1.8.7
Do they though? If it's a news site, then they shouldn't need to.
This guy must be trolling, or he has been under a rock since 2009. jQuery UI? What universe are you from sir?
It will be released to production in a few weeks. So far I've had good experience with it - complete type safety, single source of truth for DTO's, server-side streaming, standardized error handling.. Having that said, I would prefer to use GraphQL + Relay which IMHO is state-of-the-art at the moment.
Time to add Hooks to your app's next production release, fellow pirates! (or most likely, you've already had them added on the side for months but now is finally the time to merge them to master)
Reddit its self needs to renew the website &amp; using the patch hooks :D
1.8.7 might be too old, but look for something like "experimentalFeatures" as an option to `BrowserWindow`. 
Anyone know of jest support?
Yes editors do that for you
Been out of the react game for half a year, what's the benefits of using pure functions over classes? Less boilerplate? More performance?
If people want to read the last thread: https://www.reddit.com/r/javascript/comments/aewlec/animejs_300_released/?st=jrt9tuoo&amp;sh=f3e76bb4
no probs in my project. Rewrite components for `useMemo`, `useState`, `useEffect` and tests passed
Yes, something is wrong, but not at the HTTP layer. Your HTTP request completed fine, it got a response from the server. Therefore your HTTP layer shouldn't be throwing an exception
What framework?
HTTP is the application layer. Of course it’s considered an error. The request completing fine is because of TCP/IP. God there are so many people without proper CS degrees here.
Both.
Many thanks :)
Great job!
&gt; God there are so many people without proper CS degrees here. Ouch, that hurt! :'( If your HTTP layer and your domain layer are the same thing then you have a very poor understanding of [separation of concerns](https://softwareengineering.stackexchange.com/q/32581). If you try to make an HTTP request, and that request is completed correctly, why is that **exception**al behaviour? There wasn't an error completing the HTTP request at all. God there are so many people without proper CS degrees here. EDIT: Just looked at your post history. I have better things to do than teach the SOLID principles to a racist, sexist bigot. Have a nice day!
Looks lovely! Great work
Arrggghh! Ahoy matey, ye olde hooks is out fer ya!
Can you set VSCode to use two spaces for indentation but display four spaces?
Here's a visual representation: [https://twitter.com/prchdk/status/1056960391543062528](https://twitter.com/prchdk/status/1056960391543062528) With hooks a component doesn't expose lifecycles any longer into which the host calls, the component itself "hooks" into the host for whatever functionality it needs. This allows you to group, re-use and compose responsibilities. It gets more interesting when you start feeding one hook into another. I think [this example](https://codesandbox.io/embed/26mjowzpr) is a good demonstration of how powerful hooks can be. Previously this would be an awkward net of implicit component layers, one wrapping over another, responsibilities spread all over.
Wow, I really like the direction React has gone in. That demo was awesome but took a few minutes for me to wrap my head around. I can't wait to get stuck into using hooks but it's definitely going to take a cognitive shift.
Hi /u/Fairy_Malik, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/igkkc97, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board). Thanks for your understanding.
Hi /u/masgbox, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/Senerman, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Why? It has absolutely nothing to do with JS that I can see.
I thought this was gonna be some weeb shit, but this is the best I've ever seen.
if you're being serious..then it uses the translate css property i have implemented my version of this on every site if mine which requires user input.. and it's super easy to do with a css transform
Hi /u/Vitamin_C_is_awesome, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I see. Since you know the basics of programming, I don’t believe you’ll need anything resembling a “course” to be able to pick up and quickly master JavaScript. Though there are some non-syntax differences (paradigm differences) you’ll grasp those simply with experience and hopping on stackoverflow once in a while to solve problems.
Hi /u/masgbox, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Sharing one instance of Electron across multiple apps, though, should alleviate most of the concerns with it. At that point, each app is no heavier than a Chrome tab.
What's the problem with that?
How bout Nutflix?
Well, nowadays most of the back-end is done in JS anyway. Even if you are using something else, it's kind of mandatory to know basic HTML/CSS/JS... Never heard about senior back-end dev who doesn't understand front-end.
From what I have done in the past, catch handles the promise rejections of await. However, if you need prom2 to fire before prom1, why wouldn't you await prom2 then prom1? Having awaits as such is like chaining promises if I remember correctly.
... except for the people that weren't already running an Alpha version of React in production just so they could start using hooks the moment they were announced ;) (And no I didn't do that, but I've seen enough fanatic fan boys/early adopters of tech to know that at least five devs out there must have done this.)
Well, you really only need them for an app you're maintaining and improving. All Reddit does is make things worse with new redesigns, and you don't need hooks to implement those ;) P.S I still &lt;3 you Reddit!
Moving out from vue to react cuz this beauty thing called hooks
I would imagine that switching to hooks would have virtually no impact on your tests, unless you're using Enzyme to directly test lifecycle methods or something.
Have you considered generating a component for each icon, so that bundles/minifiers can remove unused icon data? Right now, the JSON file which holds all of the icons is 578 KB (122 KB gzipped), which is a pretty huge cost if you're only going to use a handful of icons. I think you could adapt the scripts in the "build" folder to generate a \`.vue\` file for each SVG. Another idea is to split up the single JSON file into multiple (one for each category), then have a Vue component for each one.
&gt; Have you considered generating a component for each icon, so that bundles/minifiers can remove unused icon data? &gt; &gt; Right now, the JSON file which holds all of the icons is 578 KB (122 KB gzipped), which is a pretty huge cost if you're only going to use a handful of icons. &gt; &gt; I think you could adapt the scripts in the "build" folder to generate a `.vue` file for each SVG. &gt; &gt; Another idea is to split up the single JSON file into multiple (one for each category), then have a Vue component for each one. I'm sitting at my laptop and doing exactly what you described))
Great to hear!
Just gave a quick presentation with my team on Hooks and looking to upgrade our codebase and start implementing them! A great way to celebrate Hooks day ☺️
This has nothing to do with anime :(
I have written about 20 components in hooks on the alpha, I just think it's betrer, it's easier to write testable components, and to break your logic out into very easy to read and understand encapsulation. Performance is a bit of an unknown at the moment but if you properly memoize I doubt it will be worse, however if you start using prepack functional components allow for component folding in your build process which should give you perf gains in the long run as prepack gets optimized.
How about performance wise? Is it worth rewriting old clases for a boost?
AES is the common offline encryption used for file formats (e.g. zip file, MS Word) For runtime, you can store the user-provided password in OS's password storage mechanism: * Credential vault on Windows * macOS Keychain * Linux libsecret There are some node library around that can do this. 
I would have personally gone with [https://addyosmani.com/largescalejavascript/](https://addyosmani.com/largescalejavascript/)approach. I wanted to mainly suggest to have a module for a functionality i.e code that you have written in Main Script could have been wrapped in module. [https://alexatnet.com/model-view-controller-mvc-in-javascript/](https://alexatnet.com/model-view-controller-mvc-in-javascript/) could also be a potentially good read which is MVC in native JS. you could potentially break individual module to follow MVC pattern. 
You have two options from what I can see. Assuming both promise calls are completely independent of each other, you can use `await Promise.all([createPromise(), createPromise])` (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) which will wrap your promises into a single promise which handles multiple failure (first rejection will be the actual rejection, other rejections will be ignored). If they are dependent then you can move the promise creation to the right-hand side of your await e.g. `await createPromise()` which means you can keep to a single try-catch block. There is a third case where you want to create your promises upfront, don't care about your return values but must await them in serial (i.e. the literal explanation of your first example). This is a rather niche edge case and I cannot think of a realistic situation but the solution to this could be building a custom function which essentially has the ignoring behaviour of Promise.all but serial waiting rather than parallel waiting.
The problem is not what I thought. I believe it is that... The first one fails because the Promise rejects outside of the the try catch (only 1ms sleep). The second one succeeds because the timer is 500ms allowing it to get inside of the try/catch before the error. I was under the impression that an error would only be thrown when await is called, which appears to not be the case. This can be seen by running a single line script of "Promise.reject()".
what is component folding?
the definition of not testing impl detail. 👍
Looking over it now. Thanks for the suggestion.
My professional path was very different from that, I indeed started with what is called today "Full stack", but as I became more specialized, most of my work was done on Data Analytics/API side. There is almost none Javascript on Data Analytics/Machine Learning, most of my time was spent in *Scala* and *Python*. I agree to learn Javascript is a good skill but certainly not mandatory for a lot of professionals out there. 
Yeah what is this
You could try using a prettifier to make the code more readable.
when is it coming to react-native?
I haven't noticed any difference.
Thanks, from what I've been able to gather is that it's not really necessary to rewrite old code but don't quote me on that yet. Seems like a new better way to actually write new code. Although, I will still need to use classes when using something like react-redux's connect or react-router-dom's withRouter higher order components, right?
`npm install url-parse`
When you said back-end, I assumed that you meant back-end for websites. I there's no front-end interface connected to your back-end directly, then there is no need to learn JS. Anyway, basic knowledge of front-end is always recommended and if you have experience in Scala and Python, JS won't be hard to master for you 😊
&gt; Your browser is blocking some features of this website. Please follow the instructions at http://support.heateor.com/browser-blocking-social-features/ to unblock these. No. Downvoted and tab closed.
Hahaha yeah I know what you mean! Those people are brave.
I can split it up into two parts with pastebin. Here: https://pastebin.com/ZMQPE5Uf first 9k lines, last bit: https://pastebin.com/dJbrhrCU
 function createPromise() { return new Promise((resolve, reject) =&gt; setTimeout(reject, 1)); } async function run() { let prom1, prom2; try { prom1 = await createPromise(); prom2 = await createPromise(); } catch (err) { console.log('the error has been caught'); } } run(); try / catch isn't really "syntactical sugar" around `promise.catch()` but moreso the other way around. `promise.catch()` is syntactical sugar around try / catch. If you want to truly await your promises and catch their errors, you should define them inside of your try/catch, not outside of it and then attempt to await them later.
[removed]
This is really helpful, thank you. &amp;#x200B; What I really want to do is: \- Execute 10 promises in parallel \- If 9 succeed and 1 fails, then i want to keep the results from the 9. (partial results) \- Wait for all 10 to either succeed or fail. &amp;#x200B; What I was trying to do was: \- Create the promises in parallel. \- Await them serially. (like a Thread.join in Java, perhaps) &amp;#x200B; I have been going in circles for hours on this and I am likely not approaching it correctly. &amp;#x200B;
No, a higher order component can generally accept both class and function components as its input. Specifically in the case of `connect`, it's always supported wrapping both classes and functions.
There's a source map defined at the end of the file, did they leave that on the server by any chance? If so, that would have the original, more readable source code. Otherwise, yeah, run through a prettifier, figure out which parts of the code are relevant (a lot of it are imported modules, like React and the encryption stuff), then you can focus on the important part, maybe set some breakpoints and run it through the debugger in Chrome. Most of these attempts to obfuscate with encryption are pretty easy to bypass, since you can just see the original data in the debugger once you step through the decryption part. Good luck!
The "fusion" / Prepack stuff that Dominic and Sebastian had been working on, like this: const Child = () =&gt; &lt;div&gt;Child&lt;/div&gt;; const Parent = (props) =&gt; ( &lt;div&gt; Parent: {props.name} &lt;Child /&gt; &lt;/div&gt; ) // gets merged into a single component, flattening the tree const Parent = (props) =&gt; ( &lt;div&gt; Parent: {props.name} &lt;div&gt;Child&lt;/div&gt; &lt;/div&gt; )
By no means an expert in this, but I think this PR kind of explains it: https://github.com/facebook/react/issues/7323
Are you expecting similar results back from all 10 promises? or are they 10 completely different data sets?
You're right, that's interesting. Not sure why they do that, but I'd guess the design encourages you to parse the response in a separate `.then`, before trying to do anything with the data?
Thanks for answering!
Unexpected Mari Kondo reference.
Hi digibioburden, Yes the goals of that project are very similar. &amp;#x200B; From what i can see, it lacks the following: \- Automatic Google Analytics PageView Tracking when switching pages or clicking on links which switch pages. \- Ability to preload pages \- Ability to modify the html of the page prior to rendering \- A function to manually call urls via ajax and inject them into an specific element with a callback Thanks!
If you can declutter up to 40% of your code and leave out the parts that Spark Joy, then thats Kondo'ing for sure!
JavaScript never sparks joy, only dread.
React Hooks won't probably help you :DD
You can use `Error.captureStackTrace` to add a stack trace to an arbitrary object. However, it's still not a oneliner that way.
All of this will change, you won't use hocs and renderprops any longer. Here's an example with react-router-dom for instance: https://codesandbox.io/embed/jp1wr1867w (useRouter still isn't official, but it will be soon).
You do what?
I guess I will get it started: &amp;#x200B; [code base](https://github.com/chrisYoder/libraryApp) [app](https://chrisyoder.github.io/libraryApp/)
Consider something like this - custom errors extending original Error class: https://medium.com/@xjamundx/custom-javascript-errors-in-es6-aa891b173f87
&gt; would I be able to use NPM to report a security issue A library leaking its dependencies is not generally a security issue unless you can prove that it's exploitable by a third party. The programmer using the library is ultimately the one in charge, accidentally leaking some internals to them is no issue since they are fully trusted to do the right thing.
Adobe XD is completely free to use 
See this roadmap issue I recently wrote: [React-Redux Roadmap: v6, Context, Subscription, and Hooks](https://github.com/reduxjs/react-redux/issues/1177)
You also watched Coding Train didn’t you? ;)
I would say the benefits become clearer when you use it on older projects. If you doing a small one off project, there is very little benefit other than conforming to dependency interfaces right off the bat. &amp;#x200B; I think the key benefits are testing, documentation, and refactoring. The static typing really eliminates the need for a very large class of simple unit tests. Obviously have type definitions is really a form of required documentation. Finally and probably the biggest one refactoring. You're linter can only track local variables and module level exports, it has no idea what you might pass into any function or what it might return. So lets say that you have some function were you original do something like this const foo = (param) =&gt; { setting = param.property || 10 // some default } lets say latter for some reason you don't want to support a default any more. So now you have a bunch of call sites that might have depended on being able to default .property. and you'll likely only find them in through testing. If this was typed the compile would immediately tell the 10 call sites that no longer conform to the interface and you can fix it immediately. &amp;#x200B;
just let it sink guys: most of the backend in this guys world is done in JS :))) hahaha
Yes! You got me ;)
Have you ever used a text editor that isn't a piece of shit?
In the readme, don't describe why you did something, just provide what the project does, images, how it works, API documentation, etc. The readme doesn't tell me any of that so there's no incentive for me to use the project. You have `addBook` inside of `Book`, but `Book` should be a representation of a single book and know nothing of the data structure, or that there's more than one Book. It can certainly have `updateBook`, or `deleteBook` because those methods are of a single purpose, but `addBook` 
So the readme should be something like "A simple app that allows the user to add and remove books, and filter the books based on title, author, or owner." &amp;#x200B; Having a BookList class makes a lot of sense and I will be making that update. &amp;#x200B; It makes a lot of sense to have the books array as a global object instead of parsing and re-parsing it. &amp;#x200B; I will have to take a deeper look into the URL.search object but it could be a pretty powerful tool. &amp;#x200B; Thank you for the feedback.
My memory is fuzzy but IIRC it's a compile time concept of optimizing code by determining constant values and inlining them instead of computing them at runtime. [Prepack](https://github.com/facebook/prepack) has (experimental?) support for React, and component folding is basically precomputing the parts of components that won't change.
Sure, you can even call it a "playground webpage to add and remove books" to prevent people from thinking it's a full-scale app. the question then becomes what if you want to build this out, then you need to remove the "playground" part, but that's not so hard. Don't make the books array a global object, you are making a BookList class and the array belongs there. For terminology, the BookList has an *instance variable* called `books`. Instance variables are ones which live inside an instantiated class. Global variables live in the Javascript window object. Classes also have static variables which don't need the class instantiated to use.
&gt;Hooks From the React docs: **React Native will support Hooks in the** [**0.59 release**](https://github.com/react-native-community/react-native-releases/issues/79#issuecomment-457735214)**.** It's coming on 0.59 [https://github.com/react-native-community/react-native-releases/issues/79](https://github.com/react-native-community/react-native-releases/issues/79)
I would like to read MDN on my mobile phone, but with a dark background and better text formatting. &amp;#x200B; This is the only app I found in the store: [https://kapeli.com/dash\_ios](https://kapeli.com/dash_ios) but has no dark-mode.
I've been using anime.is for nearly all of my animation. Really maintainable and usable.
ah. cool! wonder how much perf this unlocks.
i mean this kind of thing is.. what, 3ms faster? will we feel it?
great link! thank you. Seb is always years ahead of the rest of us.
Hi /u/as092298, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/b4b4j1, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/lexda45, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/amirshk, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/JavascriptFanboy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
You have to make a test comp to wrap your hooks and it can be a bit of a pain. I wrote a library to make it a bit easier [test-react-hooks](https://www.npmjs.com/package/test-react-hooks). 
Hi /u/spdaly, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/TuckerMcInnes, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I wrote this myself without review, if someone is interested: [https://github.com/theogravity/version-bump](https://github.com/theogravity/version-bump)
Hi /u/KaizenLionNinja007, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/miran80, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ImaginaryEscapism, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
great site
Well I think a big piece of it is on a large app your render tree can get very large, and the larger it gets the longer re-renders take. If you do this on a large app, not only would it shorten your render tree, but it would reduce your bundle size as it is saving code. I mean its not like react is slow, I think getting more performance out of it at this point is going to be in small steps rather than large gains.
This is not a qustion, it is a guide. I think the howto in the beginning was misleading.
I'm getting this error "Extension host terminated unexpectedly." on Mac
Sorry, I hit the wrong button.
Hi /u/amirshk, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
VS Code is leaving Atom in the dust. I'm curious to know what will happen to Atom now that Microsoft owns Github, because they're both Github projects now and both running on Electron.
Looking forward to certain colleagues freaking out when they begin seeing Hooks everywhere and they don't understand it because they're lazy about keeping up with new APIs.
Atom has been irrelevant for at least a couple years.
Nice thanks, I will take a look.
Same here, I ended up just reverting back to the previous update. 
Hey, I had a thought about this, are you guys considering a hooks library for adding built in nice to have hooks like this for react, but thy would be imported as separate includes so it wouldn't add to the react bundle size(code splitting)? Since something like this is really nice to have but shouldn't be added to the main react bundle.
Results would be similar. (like different instances of the same object)
The velocity of vscode is incredible, what do you think the primary reason is? The language, platform, team, open source status, or something else?
Die-hards will use it, it will stop being supported, vscode will take over. It will be the new vim.
&gt;VS Code is leaving Atom in the dust. when I adopted VS Code last March it was alredy lightyears ahead of Atom by speed alone, not even talking about the ecosystem and the features...
Id argue Typescript helps, but its most likely just a better project structure &amp; more optimized code?
But it wasn't about learning javascript. I was asking for a dark-background mobile app that lets me read documentations:) It was a product advice at best. I don't need help learning, just wanted the ability to read the documentations from my phone when I have a few minutes of time, what better way to spend it than to check a new function every now and then. I cant read MDN because its poorly formatted and too bright. 
For £5 a month you can use webstorm and it's set up better from the get go imo
Live Server extension v5.4.0 fixes this. Try manually updating with the vsix binary [here](https://github.com/ritwickdey/vscode-live-server/releases/tag/5.4.0).
Makes sense, haven't though about bailout, hope this comes in one way or another. State hooks would be the cherry on top. Too bad this would have worked with 5.0 subscriptions, though.
I came here for 2d girls. 
Excellent extension support really got it rolling. Backed by Microsoft which has a lot more resources to devote to this. Coded in a language they created. Definitely the most experienced TypeScript developers working on the project. Also Microsoft created and has maintained Visual Studio for decades now, so once again more experience.
VS Code is starting to resemble bloatware. Does it really need this continuous torrent of features?
er, most of the headline features on this release focus on improving existing functionality. There are very few new features interested, and certainly not a torrent of them. Please provide examples of some meaningless or pointless additions?
I still don't think it's really appropriate, sorry.
The frequency and size of the updates of VS Code is staggering!
Yeah, but 5.0 had issues anyway. It did update checks in `cWRP`, which gives warnings in `&lt;StrictMode&gt;`, so we would have had to change it long-term anyway. Our attempt to fix that collapsed under complexity and perf issues, which is what led us to work on v6 as a better solution. And it is, in a lot of ways! It's just that context isn't quite what we'd hoped in terms of perf.
When I first started learning programming a bit over a year ago I had to switch from Atom to VSCode cause Atom ran terribly. Not a single flaw with VSCode for me so far.
A bit of everything. While it's free I bet it generates Microsoft a ton of money from pushing TypeScript and giving them good recognition in dev world, something they've missed for years, which results in Azure sales. So the team is big enough, well funded, can do whatever they want as direct profit is not relevant so their goal is pleasing users only. Add to that open source contributions from crowd who knows how to contribute and you've got the velocity you're looking for. Obviously none of that would have been possible without amazing PMs of VS Code and I guess Satya Nadella and - I'm not sure - Scott Guthrie?
Both are great tools and I wouldn't dare to call either better. It's mostly preference, plus they are slightly different in scope.
I always liked working with Vue. 
Do any of added features slow you down?
Vue is great compared to react.
I made this [tool](https://travispence.github.io/us-states-svg-to-png-with-legend/#/) to experiment with VueJs and editing an SVG dynamically. [https://github.com/travispence/us-states-svg-to-png-with-legend](https://github.com/travispence/us-states-svg-to-png-with-legend)
could you do something like function createPromise() { const isSuccessful = Math.random() &gt;= 0.1; if (isSuccessful) { return new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve({data: 'true'}), 1)); } else { return new Promise((resolve, reject) =&gt; setTimeout(reject, 1)); } } async function run() { const results = []; for (let i = 0; i &lt; 10; i++) { try { results.push(await createPromise()); } catch (e) { } } console.log(results); // Do stuff with successful data stored in results } run(); I did a random failure rate on `createPromise` to simulate failures. It seems to capture all the successes while still capturing the failures so you can do anything with the failed ones in the catch statement if you want to. 
I've not used GraphQL, but how do you even know what fields to ask for if you don't touch the database? If you do touch the database, don't you know actual *S*QL?
I noticed that it uses `qrcode-terminal`. I had a like-idea last year, but ran into issues if the URL string happened to be pretty large where the code couldn't properly render if the size of the terminal wasn't long enough. It is still a great idea, however.
I'm just glad that you don't need to reload the program when you install an extension now. Great work VS Code!
Yup! React and JavaScript are embracing functional programming. It'll be easier to think about react like Haskell or Clojure than like Java. I for one love this.
Yes, I do. It's made up of functions and doesn't depend on JavaScript's psuedo classes. It'll be easier to start writing a functional stateless component, and then add in state or lifecycles if needed. I think this is amazing.
Yeah! I just whipped up something really quick. That library is honestly really cool. You can change the size of the QR code with a string with \`qrcode-terminal\`. That isn't implemented in my plugin however. If you want it, let me know! I can add that feature in quick :). &amp;#x200B; Part of me wanted to reverse engineer it, but I just saw this and it fit my use case.
Hi /u/amirshk, This post was removed, and [I'm not going to warn you again](https://www.reddit.com/r/javascript/comments/anv1ni/howto_debug_unload_and_beforeunload_events_in/efwdrqv/).
Okay. Thanks. 
Thanks. 
I never thought I'd love anything made by Microsoft this much. I WAS WRONG.
Can I see the template you use to implement this ? I would love to have this in my projects too, it is so beautiful.
THANK YOU THANK YOU THANK YOU ! I really appreciate this, I really LOVE this framing and thank you so much ! 
GSAP Greensock was significantly faster then anime.js, is this still the case for this new version 3 ?
So i’m curious. What does microsoft benifit from this? I love VScode and all these updates constantly but i always wonder how it makes them money. 
I’m a bit shocked that was listed as the top feature. How often are you installing extensions? 
That's actually quite simple, and looks more natural than with Tween.js: [https://jsfiddle.net/58n34mxv/](https://jsfiddle.net/58n34mxv/)
Lol -19 for my opinion vs gag much
Doesn't matter how often one does. What matters is that the obligatory restarting of the application is gone for good. 
So I haven't hopped on the train yet and am still using Sublime Text 3 themed up and with my favorite plugins (linter, prettifier, etc.). Are there some killer features I'm missing out on?
Maybe I’m thinking of something else, clicking the little “reload” button? Don’t get me wrong, it’s better that it is automatic, but it’s such a minor issue (for me at least) that I was surprised it was their most requested issue.
It *does* slow me down. It's taking too long to start. That's why I'm using Sublime Text again.
New VIM? Doubtful. Maybe the new Sublime. Or maybe Im confused or biased about the adoption rate. 
Why the surprise tho. I personally would have requested that feature.
Has anyone had any problems with prettier or beautify after this update? My js file formatters are jacked up after installing it 
It brings them goodwill in the community which I’m sure in the long term converts to Azure and other Microsoft service income. VSCode and Windows Subsystem for Linux are the two plays to get developers using Microsoft tools. For the first time in my career I’ve considered switching to Windows for development and these tools make it possible. I’m not quite there yet but in the next year or two I think I will be
- Microsoft has tens of thousands of developers. Giving them a good alternative to Visual Studio alone is worth the investment. - Good karma. The fact that open source devs are warming up to Microsoft is invaluable. Devs are much more likely to use other Microsoft products now. - Integrations with Azure. The money is in the cloud now. - By leading the effort on LSP and DAP, it is becoming the target editor for many languages. Vscode is now one of the most popular editors for Typescript, JavaScript, Python, Go, Rust, .Net Core, even C++. This keeps them in the lead, amplifying the above benefits (not that I'm complaining. All editors and languages are benefiting from this effort)
Seems odd but node.js is pushing hard as fuck
Microsoft really damaged their image with Windows millennium, Vista, and 8. It compounded itself throughout that period with their total fiasco know as Internet Exploder. But they're really pumping out some impressive software lately. For the first time since I started web design and development in 2003 I feel Microsoft isn't working against me. But even during those messes periods, anyone familiar with Microsoft's developer ecosystem will admit they've been light years ahead of SM/Oracle for a good while.
Webstorm is definitely more polished. I use it at work. But they're feeling the heart from VS Code, which is decent for a free IDE 
In what way are they different in scope?
It's interesting seeing Microsoft's fresh division come up with engaging stuff inside OneNote, VS Code, Azure etc while the rest of microsoft is buoying it up with legacy Windows and Office shite.
Because you can turn them on and off too without restart
Oh, goody, another thing to learn to stay employable, just to write websites that are functionality identical to how they were with my old code. I hate our industry sometimes.
I use a combination of VSCode and SublimeText. I code mostly in Python. When I’m working on larger projects, the git stuff and debugging is what stands out for me. If I’m just trying stuff out outside of a project (especially if I’m not using any libs) Sublime (and its internal interpreter) is enough. If I’m doing some data visualization I like to work with Jupyter notebooks, and recently VSCode got an interactive python runtime (like a frontend for Jupyter notebooks), so I might rely less on Sublime. I also use Sublime as a scratchpad for quick notes and doing some fast editing of text I copied from the web, for example. In the end, I don’t think you need to ditch one for the other. 
If your technology demands that you slavishly follow its blog for API updates, it has ceased to be your tool and has become your master instead. Maybe rather than being “lazy”, your colleagues are taking the perfectly reasonable position that one shouldn’t have to burden oneself with a new technology until there is a tangible and urgent benefit?
I'm a hardcore IntelliJ IDEA (or all JetBrains products for the most part). Is there any extensions/etc that I can use to get similar indexing features, and similar searching features, and a solid vim mode? They're the only thing holding me back from converting over to VSC at the moment.
That's great and all but the number of help requests here is too damn high.
And this happens the exact same day I switched from the Insiders build because the extensions host kept crashing, best day 😂
Man, there are almost MAX\_SAFE\_INTEGER of them
This makes it simpler though.
The only people I know who like typescript are those who were born after it’s invention. 
The ConPTY support rolling in is very much welcome. The integrated terminal on windows is in serious need of help and hopefully that is the key. 
Could break in concurrent mode.
No reloading after installing Extension. Yes!
Their dev tools have always been top notch.
prettier broke this week for me too, but it was before the vscode upgrade (and still broke after)
Yeah I had to reinstall a previous version to fix it
I was hardcore in the Sublime camp last year. Even finally got around to purchasing a license. But someone forced me to give VSCode a try and I haven't looked back since. All the plugins I used have compatible VSCode counterparts, there's even ones to make it more like Sublime. I don't know about any killer features per se but there's just a ton of lifestyle features that make it really pleasant to work in. It's got all the customization and features I loved about Sublime but it's just in a highly polished package. Oh also it gets updated. I guess you could call that a killer feature that Sublime is lacking 😉
Eventually they will likely stop developing it. But when MS Github, they promised to keep it around for now at least.
Yes
Lol, mine starts in less than 10 seconds. You should be happy you weren't a programmer in 1980.
You're comparing an editor with an IDE. 
As the person responsible for actioning 99% of them, I 100% agree. I recently updated the self-post submission text, to be more forceful that support requests do not belong. We're also looking at bringing additional mods on soon™, but in the meantime, know that reporting them actually helps us a lot!
 MAX_SAFE_INTEGER &gt; VM241:1 Uncaught ReferenceError: MAX_SAFE_INTEGER is not defined Number.MAX_SAFE_INTEGER &gt; 9007199254740991 Sorry, couldn't resist :)
Really interesting, thank you!
I guess “most requested” doesn’t mean the feature people cared about the most, just that it was a thing everyone noticed could be better. Glad to have it, but tomorrow won’t feel any different because of it.
Is not only about installing. Sometimes is about juggling extensions that may overlap. Moreover, an update to an extension can happen without having to restart the IDE as well. Overall I like this and I don’t consider it minor. I was recently developing an extension for IntelliJ and for some reason the tester IDE for the extension would crash. The only way to really test the extension in full was to install it as a plugin. It was a very painful process as a consequence because it required me to restart the ide. 
use webstorm myself, VSC is still 10-20 extensions away from being as good as a stock webstorm install, but its free.
Good demo and nice work !
Using VS Code was a series of "huh, that's kinda neat". This just keeps getting better.
You can do `Object.defineProperty(window, { set (newCustomEvent) {...} })` To catch any attempt to set the property and handle how you'd like. If you can inject this in before the other script changes it, you should be able to prevent it. 
I was using Atom for a while at my last job. I could sit and watch my battery percentage drop. It would absolutely **destroy** my laptop battery. It was so poor. 
That's the problem. I cannot preempt the change. My script is injected in the page later. I was hoping that I would be able to access the default browser implementation by doing something like: `window.prototype.CustomEvent`
An issue I can think of is if you’re in the middle of working and you need an extension, restarting means no undo. 
Have you ever run vim, emacs or sublime? They are made with native tech rather thsn electron. They are fast. Vscode is OK but does the job :)
How does TypeScript generate revenue?
The editor becomes an ode when u have tons of extensions (and that's most likely to be the case for anybody)
I get all JetBrains products free through work anyways, but i'm not a fan of the high memory usage (although understand why it needs to use that much). It's fine on my desktop at home but gets the fans spinning on the old macbook.
I never knew VSCode has interactive Python, may I ask what is it name?
Im just getting started with twilio...If I make any progress I will let you know...
Very powerful tools that take many hours to become proficient enough in to code with any sort of efficiency. Sublime is probably the "industry standard" but it's still not free and you have to read docs to enable syntax highlighting... 
VScodes integrated terminal is what really sealed the deal for me
I use vim nowadays but used to be a sublime maniac. Is sublime still a thing these days? 
Is vsc better than IntelliJ ? I’m currently using IntelliJ and pretty happy about it
Same here. I use IntelliJ + ideavim for both java and Javascript. I’m pretty happy about it. 
# Please don't make Visual Studio Code a full-featured IDE, we already have Visual Studio.
https://www.reddit.com/r/typescript/comments/afcdso/how_does_typescript_make_money/
Vim is supported. 
Beginner just try this https://youtu.be/xgid7y1snke
How can you revert? They screwed up the colors in my theme, and would love to roll back until that's patched.
&gt; there's even ones to make it more like Sublime Link please?
[Here you go ](https://code.visualstudio.com/updates/v1_30) 
I'd rather have a free IDE that I'm able to use on Linux.
I think it comes with the main Python extension by Microsoft. You need to select a "Python interpreter" and then it should be available under "Python: Show Python interactive window". It's neat, although very lacking in auto-complete functionality and other stuff. [Here's what it looks like.](https://i.imgur.com/myYtWaF.png) 
Thanks!
No problem! 
In editor debugger.
Microsoft has made statements that there are no plans of abandoning Atom, and that work on it will continue like before.
UX
I can see your side of the story. I ran sublime for 2 years as my primary javascript IDE, I begrudgingly switched to vscode for a week to appease a coworker about a year and a half ago, my opinion quickly spun a 180. The memory footprint is actually generally smaller than other native apps I run (looking at you xcode), 100-200MB depending on what extensions I'm running and how many simultaneous projects I'm working on (typically around 3), there is nothing slow about vscode. Sublime changed my expectations from a development environment, then vscode fulfilled and surpassed all of them, truly the best development experience I've encountered in about 15 years
 We understand the google requirements regarding to build effective and successful [seo campaign that deliver results](http://buyseosolutions.com/seo-campaigns-that-deliver-results/) get top reach in business search result 
Really? The most annoying part is where you have your dev server running in the built in terminal and want to enable or disable a plugin. Let's say you have a back end and a front end dev server, this quickly becomes annoying. To the point of having your dev servers run in a separate terminal
Just release 1.1.0 Now you can use only necessary icons ``` import Vue from 'vue' import App from './App.vue' import Unicon from 'vue-unicons' import { uniConstructor, uniChat } from 'vue-unicons/src/icons' Unicon.add([uniConstructor, uniChat]) Vue.use(Unicon) new Vue({ render: h =&gt; h(App) }).$mount('#app') ```
[https://marketplace.visualstudio.com/items?itemName=ms-vscode.sublime-keybindings](https://marketplace.visualstudio.com/items?itemName=ms-vscode.sublime-keybindings) &amp;#x200B; Here's the one I'm using
Thanks, appreciate it!
He means: VS Code will be the new Vim, in terms of dominance in this space.
\++ changes the value of the variable. + 1 does not unless you are reassigning it to TableSize
Heuheuheu chujcie toobchodzi in polish community translators. Classic.
I love microsoft's keyboard, mice and xbox. These are one of the best in their categories. VSCode is getting there too (in my book).
Apologies, I misunderstood what you meant by posting a new link. Is the content not correct for this forum? or the way I submit it is wrong. &amp;#x200B; I don't have any intention to annoy you or breaking the community rules
Yea I'm involved in JS meetups regularly. We've done many things but I think it's important to answer a few questions first: &amp;#x200B; What's the skill level of the group? If we're talking about beginner to intermediate, it's more productive to go over core concepts (data types, functions, prototypal inheritance, context...etc) and then maybe do pair programming and/or whiteboarding. &amp;#x200B; What's everyone's motivation for coming? If they're in the job market then they might want to work on mock interviews. If it's social, well you can talk about collaborating on an app, starting from the absolute floor (doesn't have to be anything crazy but maybe touch on a tech that the group is unfamiliar with so everyone has to do research, for instance React Hooks or [Socket.io](https://Socket.io)) . It's also important to not have any expectations of anyone doing work but as long as you do some then you can go over that and get everyone caught up. &amp;#x200B; Do you have a nucleus of consistent people and if not can you work on getting that? I think that seems to be part of the formula of the meetups I attend is a certain amount of people reliably showing up. Also having a natural leader steer the group is good as well. &amp;#x200B; The most important part is I think to keep it fun and be flexible. Get a temperature of the room and see if you can move in a positive direction. &amp;#x200B; Good luck! PM if you want more input.
I checked the content and it's fine. As for the 'new link' thing, see [here](https://www.reddit.com/r/javascript/comments/acrwqt/an_article_about_private_fields/edb40up) for more info. Thanks! 
Wiiiee... Yaayyyy... \*Fireworks\*
Just realised I hadn't subscribed myself... Changed that now :D
Sublime is not the industry standard. 
I have my atom install modded to hell with what I want just as atom started to become "irrelevant". Hard to move over but I'm working on it
Updates too I guess. Haven't updated yet
Probably javascript in 30 seconds but you usually learn a lot more building things.
1. First learn basic from w3schools website. at this site you can practice also your code.
A coworker of mine was lauding atom a few years ago, so I gave it a try. My first impression was that it was incredibly slow. I went back to Code pretty quickly. Interesting thing - many portable applications, including VSCode and Atom, run in an environment called "Electron." Electron was developed as the runtime environment for Atom, or the "Atom shell." Atom shell = Electron.
Visual Studio has a free edition, and it's available on Linux I believe. It's available on Mac.
Really? Running `code .` is inconceivably fast on all of my machines, from an old Mac Mini to a Gen10 ProLiant.
In modern browsers: `var [a, b] = SomeString.split(',');` 
Thanks Alot!
The reason is presumably because that allows you to chain async and non-async methods. As someone else responded, the reason `.json()` returns a Promise is presumably because only the headers have arrived when `fetch()` resolves, and `.json()` actually waits for the body to be delivered as well.
You could try freecodecamp or comments but building something real would help you grasp concepts in a much better way
If you want to finally learn Vim, the Vim extension is excellent and, being an extension, it's easy to fall back to your older habits for the parts you haven't mastered yet.
Not having used IDEA I'm not sure what indexing and searching features you're looking for, but VSCode's Vim mode is excellent.
Nope to either. You can use a Windows-based VS to do remote development on linux now (including hooking on to GDB), but no native support. And VS Mac is just a rebranded MonoDevelop.
Am i the only one who finds Google bitter-sweet? Sure they're evil, but they do some awesome stuff as well
Ah i guess this is very particular and Hard to find. The app you found is open source you can commit a dark mode ;)
* Good PR * Advertisement for TypeScript * Cross editor for .net core, hopefully helping .net core * VSCode is well used internally, as far as I can tell (we have some MS consultants running about) It also fits into the greater scheme of moving away from selling individual products and instead selling a service. In Office we see that with Office365. In the devtools-branch it's azure. Releasing the full Visual Studio for free would have been madness. But making a smaller but really good editor / semi-IDE can help them get developers into their ecosystem too. 
The Visual Studio for mac is not the same as the visual studio for Windows. It's a rebranded Xamarin Studio. Also, the community edition leaves our some features you might find *really* useful in bigger projects. 
Yes, he said that in an AMA 8 month ago. &gt;#I’m Nat Friedman, future CEO of GitHub. AMA. &gt;Developers are really particular about their setup, and choosing an editor is one of the most personal decisions a developer makes. Languages change, jobs change, you often get a new computer or upgrade your OS, but you usually pick an editor and grow with it for years. The last thing I would want to do is take that decision away from Atom users. &gt;Atom is a fantastic editor with a healthy community, adoring fans, excellent design, and a promising foray into real-time collaboration. At Microsoft, we already use every editor from Atom to VS Code to Sublime to Vim, and we want developers to use any editor they prefer with GitHub. &gt;So we will continue to develop and support both Atom and VS Code going forward. [permalink](https://www.reddit.com/r/AMA/comments/8pc8mf/im_nat_friedman_future_ceo_of_github_ama/e0a2b2e/) 
Do you find you run into many bugs with the vim plugin? I often have issues with it freezing vscode for me, and the rest of the time it feels very sluggish.
Wow, this is some amazing junior tier information. I can’t help seeing this as blog spam and nothing more. 
So first I'll admit to a little bias I really like Node/JavaScript as my primary programming language shortly followed by python. As for the article it appears focused on building a web app from the ground up including the web server, I would advise against this if you are new because it's a way bigger head ache than is necessary. I would focus in this instance on PHP and/or JavaScript as Web servers for both are easy to get and set up either looking at xampp or express for example, both should have easy tutorials to setup after some quick googling. The primary benefit to these languages is there's tons of resources to learn both, java, c/c++ and python I would advise coming back to especially python as Django is a thing (python web server), c/c++ and java for a web app side I'd avoid but that's more because I've not seen a good and easy web server for either. All in all I'd say the article is probably a bit further on the line than you'd want to think as a beginner I'd advise learning the languages before thinking business logic and business applications as they have needs you won't, Having said that the article itself appears well written and mostly un-biased and well worth a quick read, so overview its a good, quick article but aimed at people thinking business logic not people wanting to learn though it's points are still valid if less important.
Thank you very much for a detailed explaination. Your viewpoint really helps me.
Certainly you can't paint an entire organisation with the same brush, different products can be made relatively independently with different motives by different people. Definitely don't think you're alone in that opinion
That's what tmux is used for.
No, I don't, not sure why that's the case for you.
&gt;Certainly you can't paint an entire organisation with the same brush, different products can be made relatively independently with different motives by different people. I was talking more about the people in charge - they make both immoral decisions, but they also try to make the internet a better place, but i understand your point. Also the people actually building the products definitely [aren't happy](http://fortune.com/2018/11/03/google-employees-walkout-demands/) with the way Google operates atm. They're definitely not the ones to blame
I never heard of this person, but I am wary of listening to you slander him/her without evidence, I think it sets a bad precedent.
AFAIK not really. The "basic" code navigation, debugging, etc. are great, but there is no near as good support for refactorings, code insights, etc.
That's a really cool naming scheme, is there such thing as proton? 
Hey there! Sorry about that. I have written it for beginners who are starting out in JavaScript. 
Hi team! Would be really grateful to everyone who could help to improve the next article [https://2muchcoffee.com/blog/top-43-angular-blogs-websites-influencers/](https://2muchcoffee.com/blog/top-43-angular-blogs-websites-influencers/) The main idea of it is to collect all possible blogs, forums, and influencers who can give detailed information and keep updated not only new Angular followers but professional developers as well. I have just found [https://github.com/avatsaev/angular-learning-resources](https://github.com/avatsaev/angular-learning-resources) this source and it should be added. &amp;#x200B; Maybe you can recommend some more? Just be able to collect like Angular alphabet A....Z &amp;#x200B;
Also please let me know how I can improve for the future posts. 
The timing of this is uncanny! Just what I was looking for a way to explain an application architecture to my peers but struggled with finding a good way to present the options between rendering patterns.
My guess would be that document.getElementById("table-size").value is of the type String, in which case + 1 will just add the string '1' to the end of TableSize. Using ++ before the loop casts the type to number before increasing it, thats what ++ does.
&gt;In the readme, don't describe why you did something "Why?" can belong in a readme, it might be the same "why" that others are looking to solve or don't yet know they need to solve. But there should be at least some "what?" first. \&gt; API documentation, etc. That is sometimes overkill, though a short worked example or few plus a link to fuller documentation is a good idea.
* Atom - [10-20 commits per week](https://github.com/atom/atom/graphs/commit-activity) * Vscode - [200-300 commits per week](https://github.com/Microsoft/vscode/graphs/commit-activity) So, Atom just die slowly.
I still like it and use it 😊
Sounds like you don't even use VSCode 
Get a SSD, they're cheaper nowadays.
Number of commits does not tell full story
Find out how the script code overrides the `CustomEvent`. If you're lucky, you might still be able to get the reference. Can you post the script somewhere? e.g. to pastebin.
`var++` is not exactly same as `var + 1`. `var + 1` adds `1` to `var` and that is the result of that expression. The value of `var` is not changed after the expression is evaluated. `var++` use `var` as the result of the expression, **then** increment `var` by `1`. `var` is changed after the expression is evaluated. So, if `var` is `3`, `var + 1` expression evaluates to `4` and `var` would still be `3` after that. `var++` expression evaluates to `3` and `var` would be `4` after that.
ITT pattern * Microsoft good now * Atom dead * VSC the pinnacle of text editing * Electron is awful Then there's the 1% that says feature x of update y is good/bad for reason z. Also people like me who make counterproductive arguments. 
This was posted 9 days ago [https://www.reddit.com/r/javascript/comments/aksoff/lets\_make\_this\_game\_with\_javascript/](https://www.reddit.com/r/javascript/comments/aksoff/lets_make_this_game_with_javascript/)
Talk is cheap (c).
I use vscode as well. Just saying that vscode can't just be called fast compared to almost any other tool that has existed before electron.
How do I even google such a thing? "Text editor that treats space as tabs"? You're basically every stack overflow answer that reply with "change your entire workflow, libraries and IDE to solve this array problem" Here's a simple solution: Want tab behaviour? Use tabs. And if coworkers use space you can either convert on save or just accept you're not getting the tab behaviour.
That’s called depression 
Im a novice, and every new language i learn the first 2 programs i try to code to apply learning is always - 1) calculator without using eval functions 2) snake game. Definitely gets the juices flowing :) and i also dont rage quit because they aren't impossible either :)
Welcome to the world of JavaScript and web development. Be prepared for some WTF moments, but it'll be fun in the end. For practical JavaScript, I would recommend the JavaScript 30 course by Wes Bos - https://javascript30.com/. If you are new to OS X / Linus, I would recommend going through his command line power user course - https://commandlinepoweruser.com/. I cannot recommend the "You Don't Know JavaScript" series of books by @getify enough - https://github.com/getify/You-Dont-Know-JS - for in depth knowledge on JS topics. Getting a Frontendmasters.com and/or egghead.io subscription will be very good, if you can afford it. They have good courses on beginner and advanced topics and frameworks. Testing JavaScript course by Kent C Dodds is a great course to understand how to text JS applications - https://testingjavascript.com/ As a Front end Dev, you would also want to learn CSS, at least enough to store web apps. And just start building some stuff as soon as you can, it might not be the best quality or most performance, but that is the best way to learn. Hope this helps, and good luck on your learning journey.
If you want to just know whether numbers are all prime, `every` method on array prototype should work. If you, for example, have a function called `isPrime` that returns `true` if a number is prime, this could look like this: const numbers = [1, 6, 13] const areAllNumbersPrime = numbers.every(isPrime) There are a number of useful methods on array prototype, [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array} is usually the reference I use for documentation.
Stockholm Syndrome. 
Just use arrow syntax, friend, You need not bind your class methods if you just do \`method = () =&gt; { ... }\` instead of \`method() { ... }\`. 
Check a few comments up. Arrow functions create a new anonymous function which is bound to the specified scope. Same result as using .bind(this). It’s not the syntax that I have a problem with.
I'm going to assume that you have an `isPrime(num)` function which takes a number and returns either `true` or `false` depending on whether the number is or isn't prime. I'd recommend taking a look at array iteration methods ([MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Methods_2)) as there are a few different methods that will all do slightly different things, depending on the result you want. Here's a few examples: const numbers = [1, 2, 3, 4, 5]; // Iterates over each item in the array, replacing it with true/false if it is/isn't prime const newArray = numbers.map(isPrime); // Returns [false, true, true, false, true] // Checks to see if each item in the array passes the test (isPrime). Returns true if they all do const allPrime = numbers.every(isPrime); // Returns false // Similar to .every, but returns true if any of the items in the array pass the test const somePrime = numbers.some(isPrime); // Returns true 
Beat me to it with a very similar answer! I'll leave mine up for now.
It isn't. Rust is by far my favorite language, followed by Lisp. But JavaScript still is useful to me.
"web-based-business-applications" has a catchier, more commonly-used name: SASS. Software-as-a-service. Also, there really isn't a magic set of 'five best languages' for solving business problems. 
You definitely should leave it up, it's more in depth and explains syntax that could trip people up.
Hey guys, I just wanted to share my first React app i've built a couple months ago
It's not an issue with React, it doesn't do anything special, it's how JavaScript classes work. And you don't need to bind every class method, only ones that will be called as a callback. I work a lot with React, and never have to bind class methods if I put event listeners and callbacks into arrow functions.
I'm going to be assuming this article is meant for beginners. The use of English is rather weird. It's still easily understood, so it's fine though. Not everyone has English as their first language. But there's already a major error in your first line. There is no such function called `Array.push`. It should be `Array.prototype.push`. Secondly, clearly ES2015 is being used already, so why suggest an obsolete way of using push in the example `myHobbies.push.call(myHobbies, oldHobbies)`? Either use `[...myHobbies, ...oldHobbies]` or myHobbies.push(...oldHobbies). 
Because it has many frameworks based on java script.(JS). Angular, React, Vue, Ember, today. And I personally loved apps development based on these frameworks. Nice to ask my typo. 
lol okay
Impressive 
Versatility. 
Thanks alot for reviewing, I really appreciate it. This was really helpful. I will make the correction you suggested. I'll also add the line about the ES2015, I didn't thought about it. 
Flexibility.
It definitely can be called fast compared to any *comparable* tool. VS Code edges IDE territory. PhpStorm uses 1.5GB+ on my machine right now on a moderately small project. If you're talking about sluggishness, Vim gets just as sluggish once you start adding in linter, git gutter and integration, language servers and other various plugins to make it as featured as an IDE. Don't get me wrong I love Vim and hate the high memory usage of Electron apps, but if there's one Electron app that made it right, it's VS Code.
I'd say Elixir is my true favorite, but I don't get to do much with that. I really do enjoy JavaScript, particularly the dynamicness (which, I know, a lot of people are not fans of.)
Additionally, I think that [this](https://developers.google.com/maps/documentation/maps-static/intro) may be my best bet, as it automatically generates a .png image. I just can't yet figure out how to have my excel coordinates passed on to call it correctly.
Thanks :D It's a pretty simple app but has some good dev practices
`el.getBoundingClientRect().top + window.pageYOffset`
Did anyone else have issues with Live Server after the update?
Javascript is weird. It is weird because people try to rationalize it as an object oriented language, and it does support writing code that way, but its not really. Most languages that support functions as first class objects don't usually a \`this\` keyword. The crossover between OOP style and functional/procedural stlye code is strong in Javascript. Its not a bad thing. Just a different way of doing things. &amp;#x200B; consider this function: function introduceYourself() { console.log('Hi, my name is %s', [this.name](https://this.name)); } &amp;#x200B; \`introduceYourself\` has the this keyword but it wasn't defined inside a class, and its not even a function constructor. So how can it use the \`this\` keyword? its because the function's \`this\` is what object it is called against. If we call it as is it would be called against the window or the global object. But we can call it against other objects, without necessarily even defining that function on that object. &amp;#x200B; const double07 = { name: "James Bond" }; [introduceYourself.call](https://introduceYourself.call)(double07); // outputs Hi, my name is James Bond &amp;#x200B; and that is equivalent to having written: &amp;#x200B; double07.introduceYourself = introduceYourself; double07.introduceYourself(); &amp;#x200B; except that now our double07 object keeps a reference to that function. And that is all that is. a reference to a function. Because methods don't really exist in the classical OOP sense in javascript. There are object, and functions, and objects contain references to functions. &amp;#x200B; double07.introduceYourself === introduceYourself // true &amp;#x200B; So the reason in react or in javascript code that uses classes, you need to bind functions defined in the class is because you often will want to pass methods around to child components to be executed against your component. &amp;#x200B; class MyComponent extends Component { myAction() {...} render() { &lt;Child onClick={this.myAction} /&gt; } } &amp;#x200B; but here \`this.myAction\` is just a reference to the function myAction that is just a function that is references in MyComponents prototype. So what we passed to the Child is just a function. not a method. not anything special. just a plain old function. so when the child uses it, if it just calls it, its not going to be called against the MyComponent instance. Just the plain old window object. So the solution is to bind it. Its essentially assigning the function to a closure where it will always be called against the object you are binding it with. &amp;#x200B; And voila when you can pass it around and it will always be called against the object you want. &amp;#x200B; And its less wasteful than doing this: &lt;Child onClick={() =&gt; this.myAction()} /&gt; &amp;#x200B; Because although that works because the myAction function is always being executed by the \`this\` you want, captured in that closure, every time react rerenders the component it needs to create a new anonymous function to pass to the onClick property. Instead of just reusing the bound function. &amp;#x200B; You don't want to have class "methods" automatically bound to the instance. Because then you lose something in javascripts versatile nature. &amp;#x200B; Plus I have found once you undertand the relationship between objects, functions, and \`this\` then it doesn't bother you and you can use it your advantage. &amp;#x200B; Javascript is definitely weird. But its also really cool. Peace out. 
&gt;myHobbies.push(...oldHobbies). I have updated it! Let me know what you think now. 
This is a good ass answer. Although what you wrote might not be entirely relevant (hopefully!) in a few years, as - for example, v8 engine supports classes.
[https://developer.mozilla.org/en-US/docs/Web](https://developer.mozilla.org/en-US/docs/Web)
It won't really though. If it does in that way then it's not the same language. If it does, then it's just some syntax that wraps over these principles. But these concepts will still be at the root of understanding JavaScript well.
I've found vscode formats lines to 160 on save regardless of prettier printwidth config or editor.wraplinelength Related?
I fixed it by downloading an older version of vs code and then updating that version to the most recent 🤷🏻‍♂️
Not that there's anything wrong with that.
alternative var [a, b] = [...id.match(/\d+/g)]
[removed]
&gt; If your technology demands that you slavishly follow its blog for API updates, it has ceased to be your tool and has become your master instead. Welcome to Web development. &gt; Similarly: what on earth are you doing committing code to a common repository that you know your colleagues won’t be able to understand? That’s tantamount to misconduct. That could probably be said for ES6 and some of pre-Hooks React as well. Also, CSS. Are you a developer, or a student? 
With Typescript: Structural typing, tooling, ease of library use and how much documentation and examples it has. Debugging, once set up, is easy and you can do complex operations in the console while execution is paused. Protoing is really simple and fast. Program execution is not slow. Client "apps" don't require any installation from users.
This can only be a homework assignment.
&gt; I would focus in this instance on PHP PHP? 2019? LOL.
Because I like the web. So I like to be able to just open dev tools and start hacking. And it's the first programming language I learned, so there's that.
I have asked developers this question while interviewing them.
Are there two arrays or only one array?
It's not, I just have to use it. TypeScript makes it a lot more bearable. 
instant gratification 
I got 3 screens. 144hz on the main one. If i add a youtube video on on secondary screen, the main windows (where the editor is focused) starts lagging. Noticed when sceolling etc. gtx 1060 and i7 4.2gz. not my fault. At all.
Typescript ftw
It’s not because I actually like the language. It’s because of the ecosystem and the fact that you are forced to use it in the browser. There’s also very active development in the language with new features every year. But the language itself is atrocious. 
It's very easy to create dictionaries but hard to loop over them. Laugh if you want, but after coming from python and writing against APIs where people just started making eye-bleeding five dictionary deep structures for everything, it's a breath of fresh air. It's a little worse now with ES6 destructuring, but that's useful enough that people can just tell juniors not to make lines like `let things = {}` and we'll be ok.
Object literals
Because of my job honestly. We use VueJS (i love vuejs), but i only love it because im using it every day. i used to be a hard core C++/Rust/C# fan, i just dont use it anymore. 
There is actually a lot of truth in this :(
It's more like an arranged marriage that turned out really well.
There was a PR that supposedly fixed this but apparently didn't... https://github.com/axios/axios/pull/1395 AFAIK the only choice is to pass the headers on each request or to pass the headers when creating the instance. https://github.com/axios/axios/issues/1664
I’ve heard JavaScript described as expressive. I would agree with that to the extent that you have choices in how to accomplish a task. It has flexibility more than many other language. If I want to Promisify my library I can allow people to choose async/await syntax or .then() chains and the result will be largely the same for them. Dealing with dynamic content is much easier in JS due to loose typing as compared to something like Golang which has a hard time of a table has an unexpected column JS does a lot of things very well, and people complaining about it would even admit that. For its shortcomings there a other languages to handle those problems, courses for horses.
Wait what are the upcoming lifecycle changes?
Agreed. It's nice and adaptable too. I really like the keyframes control. Will play with this. Thanks 
I'm a senior developer with over six years' experience writing JavaScript applications, including high-performance WebVR programs powered by WebGL, low-latency ad trading systems, Node microservices, content sites with 1000ms time-to-glass rendering targets, 'classic' isomorphic TypeScript React apps, Knockout-based SPAs for use in ancient IE6-powered industrial environments and a wealth of Electron desktop apps using a combination of multithreaded JS and native code. I think I probably know a fair bit about JavaScript.
The fact that I can program both frontend and backend with it with the help of Node.js and Express as well as Vuejs. I also really enjoy it's syntax, even if some of the things that are done within the language itself are a little fucky. I'd like to think that I can still be good at C# after all this time of not really using it; however I feel like I'd just be kidding myself. &amp;#x200B;
&gt; high-performance WebVR programs powered by WebGL GitHub link?
Cuz it's so bad
Weird. I also have three screens on an i5-6300u laptop with integrated graphics at work, and also listen a bunch of YouTube videos all day long, no particular problems with lag.
It gets me a paycheck.
I love Verilog and hates JavaScript to an extent
I keep waiting for microbundle to be better. Might try this too
It's not, Js has a lot of problems. But I do love frontend. 
One answer : I love her &amp; love is blind
I'm so sorry people hurt you like that, I'm primarily a python developer (and I love it), but if people started doing that on me, I would not be a happy camper
Thanks for reading. It will be up in three days.
IKR?! It should be `const things = {}`!
Lol
I genuinely see no use for this tool. The author must not be familiar with nvm, yarn, and docker. Pieces that contribute not only what Notion seems to, but also so much more.
Well, i didnt day code was bad, i use it... It happenswhen i have the video with movement on the secondary display.
- Instant gratification - Can do UI and logic work with Chrome, Nodejs, and Electron. - Dont have to waste time writing types till my design is solidified, I can just write code as it flows out my mind and reactor only as patterns arise, not write the patterns and if I choose wrong end up doing a ton of work rewriting. Then I can go back and add types and get all those benefits with JSDocs later. - I only have to use classes when they are an emergent property of the code. "OOP to create data, functionalism to pipe and process it". - Anything "super difficult", I can just find a script online or npm install the solution. - I can write code that litterally looks like a series of haiku.
Because JavaScript is very easy for rookie.
It's my favorite language that runs in browsers.
It's like that Swiss army knife you bought in Chinatown. It has all the bells and whistles. However, it'll break the very moment you begin using it.
It does show level of interest and commitment to a project. You could argue commits don't mean much for a mature project with relatively few bugs and a feature set that has an answer to everything (albeit some less than ideal)... But that isn't Atom.
It's expressive the way Minecraft is expressive, because you can make anything out of cubes if you zoom out enough. Same reason why people say Lisp is expressive. It's quite loose, but you can fight that with brute force. Thanks to toolsets like TypeScript, I don't have to be so "expressive" every day though. So all is fine.
I can F12 and experiment OR demonstrate to other people examples/ideas in the browser. NPM support Idea of Backend and front end speaking same language Spacing is up to me (aesthetics). Compared to python, say where spacing is not up to me Versatile for better and for worse is like a fun edge to dance on and break shit 
Just the fact that I don’t need to build or work in a special IDE, that I can open text edit and just type and most importantly that in can run in a flipping browser and do almost anything I want it to do especially with so many libraries out there!!!!
Surprisingly most do. Arranged marriages have the same success rate (in terms of stuff like how many divorce) as Western-style "romantic" marriages. Kinda boggles my mind but that's what the statistics show.
It is very versatile. 
Its the only one with vibrant community and no evil company behind it.
I don't know any others well enough to be productive 😅. I also chose to learn this because as someone already mentioned it is very versatile and can allow me to explore several fields of development(web, mobile, AR, sometimes machine learning) with one language. I'll be learning python this year though as I'd like to get deeper into machine learning concepts and data analysis. 
I respect all languages and users. This is just "valid" for me: 80% code is trivial. JavaScript reigns supreme when writing trivial code. It's simple and doesn't waste any of my cognitive effort on the simple parts. ES6, reasonable naming conventions and being VERY restrictive towards using the freedom JS offers, there is little doubt that JS leads to simple code even in the face of complex problems. PHP is simple and accessibly as well, but i did enjoy JS more because of it's better integration of asynchronous code. C# is fantastic for OP and has great utility (&lt;3 linq), but i enjoyed the (chaotic but quickly evolving) ecosystem of NPM more than the slow moving c# toolbelt. VisualStudio is not a very nice UI for leisure time coding. Java is hell. I enjoyed stream API and the recent (2016/17?) functional programming foray, but i have no idea how anybody can cope with the reduction in productivity or the lifetime learning of somewhat antiquated architectural patterns required to write Java without wasting time. Python/Ruby are fun. Would swap if not for the economy of scale effects that the JS ecosphere has to offer. Typescript is a good step forward. I use it actively and will continue to do so. But the tooling and even the much hyped IDE Integrations are (after long time use) not as good in reality as they look on paper. An out of date *d.ts or "creative" use of Higher-Order-Functions will wreak havoc on productivity. Especially with npm and its (fantastic!) diversity in patterns used. I love to code. 
&gt; Have you ever considered that developers are people too and that these tools often make their lives far easier? Yes. That's why we have things like Java and WinForms and mono and XML based design languages. But things like Electron, while a good abstraction, are far too inefficient. &gt; Also - modern operating systems are well equipped to swap that supposedly excess RAM to DISK without the end user ever noticing... This is beyond false. This is how you get reddit's silly redesign taking up 3 times the resources.
Check out this. https://glom.readthedocs.io/en/latest/
So I don't know the exact numbers but I would imagine that in cultures with arranged marriages the social cost of divorce is much higher than in Western culture.
`Array.prototype.filter` returns a new array, containing elements that the callback function returned `true` for. You could use `Array.prototype.map`, and in the callback, remove the property you don't want.
Change the first two .filter 's to .map 's
I second the recommendation for looking at Wes courses, And if you want something purely fun to “level up” your JavaScript https://codecombat.com/ is great. For more specific react, TypeScript guide, Packt has a book &gt;Learn React with TypeScript 3 Start developing modern day component based web apps using React 16, Redux and TypeScript 3 with this easy to follow guide filled with practical examples
The main significant drawback of javascript,to me, is the quasi impossibility to handle local files on a windows machine. Setting up a local server is an overkill and still not satisfactory.Really..
I started with (GW) BASIC, then went to QBASIC, Visual Basic (4 and 6), Python, PHP, Java, and then (J)Ruby. Somewhere in there I learned Javascript, and I've also messed around with CoffeeScript and TypeScript. I &lt;3 Javascript over Java because of dynamic typing. If you've ever done serious Java development you know that everything needs a class (and/or interface), and OOP reins supreme so Java codebases often wind up with giant hard to work with class hierarchies. Both new development and maintenance goes faster in JS in my experience because you don't have all that overhead. Python vs. Javascript ... well I do really like Python, and if there was a web-based version (CoffeeScript tried to be this) I might have ditched JS awhile back. But then again, Javascript does have some neat advantages. Rerecurse said a big one: &gt;It's very easy to create dictionaries but hard to loop over them. Laugh if you want, but after coming from python and writing against APIs where people just started making eye-bleeding five dictionary deep structures for everything, it's a breath of fresh air. There's some other stuff too. In many ways Python is more elegant than JS, but when you actually use both on a daily basis you'll be surprised that JS actually makes a lot of things easier. Ruby is terrible language inspired by Perl, another terrible language. But for what it's worth Rails is (or was, when I used it) awesome. Downvote me all you want, but that's just how I feel: I almost prefer VB6 to Ruby, so to me not just JS but almost any other modern language is better. As for PHP and BASIC-derived languages , do I even have to explain? ;) At the end of the day there are more elegant languages, but when it comes to getting shit done I get more shit done with JS than I do in any other language.
because it's everywhere!
The freedom to make it work using some shitty code, that takes 0 effort to write, and have it work. I’ll interfaces after that and have a go at some more idiomatic code. Also coercion does allow you to be more idiomatic sometimes, for example null and false or null and 0 checks are just a if (variable){}. Typescript is a must imo though 
You know how many times do I launch VS Code a day? Less than once on average (i.e. I often keep it running over multiple days). Even if I lose few seconds there I'll recover it elsewhere.
 for (var i in description) { var map = description[i]; for (var j in map['restrictions']['users']) { if (map['restrictions']['users'][j] == 30) map['restrictions']['users'].splice(j, 1); } } Could probably be more efficient than, but it's pretty simple
For web development I guess they aren't that different - as it doesn't require much. My thinking is that JetBrains products are definitely IDEs while VS Code is maybe-IDE.
I think rather than 'offsetTop is not that great\` it should really be 'don't use offsetTop in situations it wasn't designed for', as honestly the only issues that arise from the property that I've seen have stemmed from a misunderstanding of how it works. There are many situations where offsetTop is exactly what you want, it's just rare that people actually understand what the value represents, so they end up using it erroneously. 
It's easy, flexible, and fast to build. I have worked in 6 languages professionally and I've learned probably a dozen. I enjoy others far more for some tasks and I'd say most of the other languages are "better," but JS is just easy to throw shit together that can actually be used in production. I'd say it's similar to PHP in this regard. Sometimes when I am doing a C#/.NET/ASP API for a client I have to wrestle with so much shit to get something basic done. In PHP/Laravel I just imagine how something **should** work and it just kinda does. We knock out PHP/Laravel APIs far faster in general than any of our C#/.NET/ASP ones. That's the beauty of scripting languages. 
This is the real reason. Really it's my favorite because it's in the browser and on every device. It used to be awful but revisions like ES6 and on have made it much nicer to use along with more modern tooling.
As for grunt/gulp they are mostly “legacy” now, webpack (or parcel, roll up) combined with Babel and friends are common for new projects. But you should automate any thing you don’t want to keep typing out, like keeping tests running as you code. You should use npm (or yarn) to get packages and frameworks like react versioned and consistent, bower is also legacy/deprecated https://codesandbox.io/ Will let you test out different set ups (“templates”) online without cluttering up your own machine so poke around there
JSON
What evil company is behind Python? Google hired Guido awhile back but I'm pretty sure he left years ago.
Its impossible to get a divorce. I could be working in a different language but at the end of the day I'd have to return to reading Javascript browser APIs. So you can get some action on the side but you might as well fuck your wife too since you are stuck paying for her debt one way or another.
At it's core, instant gratification, familiar syntax, flexibility to design patterns any way you want. You can get started right away with just a simple text editor because it's baked into the browser already. Java, PHP etc all require runtime environments and overhead to deploy. The opposite is true with JS - it's just there, although, the market has recently bastardized this concept with the over emphasis on build processes and tools. People bash on JavaScript all the time and I never understood it. it's a fine language that has improved greatly over time.
if you are sure that 30 can only occur once per permissions list, you could `break;` after the splice to gain a lil bit of speed.
Ironically, TypeScript. JS is a nice dynamic language, and incredibly useful for its ubiquity, but there's definitely some messy parts, and like many dynamic languages it can get painful for larger codebases. TS solves this spectacularly, in a way that imo is better than either purely dynamic or statically typed languages. You can still think in standard JS ways, and quickly write things as dynamic code, but then you can describe your JS's implicit types to TypeScript on top, to double check it's all correct (and to get tighter editor integrations, etc etc). It's amazing, and once I got other the initial hump, I've found it both faster and safer to write than JS or anything else I've used.
this return `[10, 20]` But actually i want the whole object intto the `newArr` (without the permission 30) not only the permissions array. &amp;#x200B;
I am a fan of the general idea. Shark-tank me says that I can already do this using my phone or computer based email clients... and that my existing clients are more convenient and feature rich. If you end up connecting this service to, say, gmail, one 'new' feature would be using voice to select recipient email addresses... my phone doesn't accept audio input when focused in the "to:, cc:, or bcc:" fields. Also, if connected as an app or extension to existing clients, the convenience of "reply" and "forward" would return. Hope you have fun with this thing and learn a lot while building it. 
I'll take a bit of a different approach and say why I *don't* like the ones you listed: - C/C++: It's hard. It's very easy to make mistakes in C++ that lead to segfaults, non-descript error messages, or going out of bounds with pointers without actually erroring out. It's not very developer friendly. I could "git gud" at it, but I also don't really need to. - C#/Java: These actually aren't that bad and I use Java at my current job, but they just so verbose. Java 9+ and C# has type inference with `var` but the strict OOP patterns we follow with these languages with factory methods and such are just so much code to write. - Ruby: It's fine, but I personally don't like the syntax of ending loops and ifs with `end` every time. A bit verbose for me. - PHP: Never used it, but it seems fine. The `-&gt;` C pointer style calls and `$` for variables is a bit weird. Also the ternary expression evaluating is different from every other language. - Python: I actually quite like Python. I use if I need to do a lot of list/array manipulations since the built-in functions are so nice. If it's not a web-based thing I'm doing I usually reach for Python instead.
&gt; The author must not be familiar with nvm, yarn, and docker. The author is [David Herman](https://twitter.com/littlecalculist), a member of TC39 (the technical committee that defines JS), founder of Mozilla Research, and author of Effective JavaScript. I think he's probably pretty familiar with the JS ecosystem already. There is some interesting discussion from him on how and why this is useful over here though: https://twitter.com/littlecalculist/status/1092866261111922688?s=19 In short: it's faster, gives you more portable scripting (compared to npm scripts), works more reliably cross-platform, and automatically switches between environments by project. I haven't test it out much myself yet, but I'd be cautious of dismissing it as useless.
It's not
That's why I try to avoid making promises
Just a friendly reminder: getBoundingClientRect can lead to some serious performance issues. The same applies to offsets :).
Thanks for asking this question. It made me question why I am subscribed to this sub. See ya later.
It has most of the things we want and few of the things we don't. Want: * lambdas * hashmap literal syntax (with serialization format) * REPL (JIT compilation) * fast (fastest interpreted language ever created, including Lua) * dynamic typing * popular module system providing libraries for everything * native UI library (DOM) that runs on every platform * sandboxed VM model (security from the start) * processes &gt; threads About the only thing not on this list is a proper number system (numeric tower). Don't: * static compilation * static typing * classes and other OO garbage * complex syntax with special cases denoted by punctuation marks But now, thanks to tireless efforts of those who believe programming should only be done by programmers; who believe that proprietary, long-running software is the only kind of software; who want to cram features into the language so they can take credit for having crammed a feature in the language; who have exiled true experts from the community for political reasons; who believe that only programmers should program, but that programmers other than themselves aren't really any good either and need frameworks for everything... most of this victory has been clawed back to defeat.
thats because in countries like india where arrange marriages are popular there is a stigma around divorces. People just remain in loveless marriages. In abusive marriages. Those stats are rigged.
VSCode is amazing!
Because it was super easy to learn, is super easy to write, and my coworkers all think I do magic when I use it.
Because I hate it
Thanks for the ideas for adding recipients email and other things. and yes, i learned a lot while building this though this is the first time i used web speech api. This is just the start. Lots of development yet to be done to make it more feature rich app.
This. If it wasn't for Vue (and to some extent React) on the front-end and Express/Koa on the backend, there's no way I'd be doing that much JavaScript. I like the libraries and the ecosystem much more than the language itself.
Nice
Because it's fun. No formal definition for fun, it just is to me. Java was my first language and ever since I got into graphics that's been a personal favorite. I really like combining something concrete like a UI or whatever and something abstract to make something that does something cool. JS coupled with HTML and CSS excels at that. Also, because the web is extremely versatile and in constant progress, being in the scene helps you pick up a lot of fun stuff, notably WASM and the like.
framworks man, lots of frameworks. its super robust that you can stick around this language for a while.
What nonsense is this? Haha
I love Vue for what it is - a front-end framework that makes sense for my back-end brain - but the language... it has its quirks, I guess? My current job being PHP/Python + Vue, I do miss proper typing...
- Because I enjoy it. - I do my discord bots in it. - Dont have to care about types which Im really - happy about. - Its easy to understand/read. Those are my take on it. 
And as you might have guessed from the announcement notes, there is a lot of love for VS Code as the go to editor /ide for web work. https://code.visualstudio.com/ As soon as you have got to grips with the basics of plain js, and want to have projects and dependencies, with tests and builds running, it is “a must” Since Microsoft sort of likes type script, it offers excellent support for that as well. And while it mostly “just works”, there are plugins to make it suit just your workflow even better (docker? Azure? GitHub pull request reviews? ...)
Not sure, but I really want to learn it now. Even more so than Python. It seems very versatile. It’s amazing how you can even make multi platform Desktop applications like with ElectronJS. Everything is pretty much web based now, so I think it’s essential to learn. I am curious about Web Assembly though and how that might affect JS.
A sync I see what you did there 
Emacs has an option where you can start an Emacs Daemon and everytime you open Emacs it pretty much starts instantaneously even after closing it (if you ever end up closing it that is)
&gt;A recent study of relationship outcomes among Indian-American couples married either through free-choice or arranged marriages for about a decade found absolutely no differences. Those in arranged marriages were just as satisfied with their marriage and loved their partner as intensely as those who wed through free-choice. Other studies have found similar results. Despite criticisms of self-selection and small sample sizes leveled against some of these studies, this is the best available evidence and it suggests that Indian arranged marriages are at least as successful as free-choice ones. https://www.psychologytoday.com/us/blog/the-science-behind-behavior/201511/why-are-so-many-indian-arranged-marriages-successful
Easy to get going and actually *build* something, whether that's frontend, backend, or whatever.
Divorce is just one metric: &gt;A recent study of relationship outcomes among Indian-American couples married either through free-choice or arranged marriages for about a decade found absolutely no differences. Those in arranged marriages were just as satisfied with their marriage and loved their partner as intensely as those who wed through free-choice. Other studies have found similar results. Despite criticisms of self-selection and small sample sizes leveled against some of these studies, this is the best available evidence and it suggests that Indian arranged marriages are at least as successful as free-choice ones. https://www.psychologytoday.com/us/blog/the-science-behind-behavior/201511/why-are-so-many-indian-arranged-marriages-successful
I can do anything with it and its on every personal computer in existence. Its instant and visual. Just using it connects you with other Javascript developers because the tools you use to learn it are written in it. Everything is open source. I can see something and find out how its done without having to go through any extra steps. It improves at a faster rate than languages like C++. It's the best language on the planet. Fight me if you disagree.
i love JS. Cant get into TS at all though. It seems like it is part of a consipiracy to make JS more like JAVA. I dont find JAVA bearbale as well. JS allows me to do prototypal inheritence along with functional programming. I dont really see the appeal of making it more OO based
To keep my promises
[removed]
Hi /u/gguth, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/AbbasSarfraz, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/old_wise, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/danger355, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Chi_Kang, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Basically the same as "Why is English your favourite language?". Because: * I already speak it. * Everyone else already speaks it * No matter where I go or what I do, I can use English to get by, or even sometimes, it's the only language you can use 
``` let newAr = restrictions.map(restriction =&gt; ({ ...restriction, users: restriction.users.map(user =&gt; ({ ...user, permissions: user.permissions.filter(permission =&gt; permission !== 30), })), })); ```
Familiarity, ubiquity, and a certain level of catharsis(?) from seeing the language improve so rapidly (for the most part) in the last ten years.
Hi /u/shado00110001_001100, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
i doubt that arrange marriages are just as satisfactory. Most indians tend to think that love isnt that important in a marriage and marriage is more about bringing up a family, taking care of in-laws. I guess if you have that low expectation from marriage then sure you can be satisfied. Indian society doesnt look kindly on divorcees. Can a woman living in such places file for divorce, get a divorce, and then lead a happy life? India is a place where widows were (and in some places still are) segregated from society.
This is amazing
Typescript has nothing to do with OO.
Is not a function.
Interesting! I really like the simplicity of this, I'll check it out.
This is what node is for.
How'd you attach the live demo like that?
Why?
On a locked down machine, reloading can cause issues for certain extensions 
Uh, why? Who commits vendor libraries to the repository when you have npm and node_modules?
I was kinda forced into learning JavaScript I wanted to learn how to build websites and without asking me first someone designed JavaScript. But, cant complain too much it's turned out really well i suppose 
 JSON != JavaScript, any language can read and create JSON documents.
Type safe php is a thing
Familiarity, ubiquity, HTML/CSS is my favorite GUI framework, and it's easy to start up a project by myself. This is also why it's my favorite first language for teaching people; I don't need to walk them through a lot of "class Foo { public static void main(args) {" boilerplate or setting up a compiler, we can just fire up a web browser and say "Hello World!" or do Fizzbuzz.
Pretty much everything you said applies to many other languages, like Ruby or Python.
This is the only community which asks if project is dead if it isn't rewritten using Alpha versions of framework. That's the spirit. And Im dead serious, I check my company package json everyday and im always disappointed if there is nothing to update.
Python is a exception. Its horrible because of syntax and deployment process, though. And people sticking to 15 years old versions of language, JavaScript community is borderline hostile if you arent up to date and that's how it should be.
You have a function called `sumTotal(values)` and you expect that that is an array of numbers. Want to ensure that another developer doesn't use your method incorrectly? Just add a type. `sumTotal(values: number[])` Now your Typescript compiler will get angry with you if you accidentally pass it an array of strings or array of objects, anything your function wasn't expecting. &amp;#x200B;
Oh how I wish to say goodbye to IE...
it is just superior /s
I am serious when i am saying that i couldn't imagine writing a single page application without typescript, as it is a mess with typescript already and typescript helps so much with keeping it from being a mess.
It's not. TypeScript is, though.
Typescript is just JS with types. It doesn't make the language lean any more towards OO or functional programming than it did before.
Code sharing. I wouldn't care if any other languages could manipulate DOM and work on the BE with the same utility functions 
JavaScript has low-hanging fruit, yeah. Truly understanding and becoming advanced in JS is not necessarily "easy for a rookie".
Exactly, vendoring is nasty :-). The article is talking about using webpack to _avoid_ committing vendor libraries to the repository, for scripts that aren't available on npm.
[removed]
[removed]
It works for updates too, for plugins I use these is at least one update every 2-3 days
wat
Ok, so what is? 
&gt; i couldn't imagine writing a single page application without typescript, as it is a mess with typescript already and typescript helps so much with keeping it from being a mess. This says a lot more about you than it does about Javascript or Typescript.
Amazing how so much of this thread boils down to "I don't like to think about what I'm doing until it's done."
It's insane how much resistance I get at work using TypeScript. I've proven my case about why it's best for collaborative team applications so that our API's don't get all out of whack, but management seems to think that we won't be able to find developers who can use it. I thought that was a bullshit excuse, then they went ahead and hired a team of 20 in Bangalore who are completely incapable of using TypeScript. Like the entire idea of a compiler confuses them. It's insane. They keep sending me code, blaming TypeScript for it not working. Then I look at it and it's got misplaced brackets all over the fucking place. I'm like... these people can't even write JavaScript in the first place, and they're using TS as a scapegoat because it's actually reporting their errors, instead of the browser simply ignoring them and failing silently. GAH. I'm about ready to give up on this battle. What does that say about the company that we're not willing to hire developers who are willing to learn new technologies?
I freaking love the single threaded asynchronous programming model. I love that the code runs everywhere, including a browser.
typescript can be written like c# or almost like f# it can do both function style (altough not purely functional) and oo
Are you talking about the readme file of the repository?
It's not a conspiracy, the point of TS is to give JS some static typing. It's not that this makes it more OOP (JS is arguably the most OOP language), but it does make it more Java style OOP. I'm personally opposed to that style of OOP, so I'm with you. I love JS because my team can establish our own style guide without running into limitations of the language. Everyone is relatively happy, especially vs Java. But in a large organization where it's expected that hundreds of developers will touch a codebase of any success, bespoke style guides are an anti-pattern. Java is widely successful in those orgs because there is 1 Java style guide, and most popular frameworks append their own style guide.
This is it. Not that I personally need the expressibility of JS, but I can work on a team that prefers a functional style of coding while another team can use more traditional OOP, and there's no problems about integration or learning new languages, etc. There's plenty of expressions I wish JS allowed, but overall it is the peak of expressibility. Plenty of other reasons (npm + highly accessible libraries, easy prototyping and scripting, JS Arrays, etc.), but expressibility is king.
I adore the npm ecosystem. Standing up a project is as easy as npm init. npm install whatever you need. want a web server? npm install express --save. then it's as easy as: const express = require('express') const app = express() app.get('/hello', (req, res) =&gt; { ... }) I've yet to use a development environment as easy and streamlined as what npm provides. ES6 modules are my favorite module system in any language I've used. JS lambda syntax is my favorite lambda syntax. JS is pretty to read and feels good to write to me. I think promises provide a great way to handle network logic. JS has built-in async/await. 
It's not my favorite language, but I love the ubiquity of it and that many, many devices run it.
Being able to start and fulfill my small projects is the main reason, Any other more cumbersome language would mean abandoning all projects hallfway. plus the web/react-native is just so convenient for personal projects or to share with friends and family. I usually develop little helper tools for the game I am obsessed with at the moment and share them with my friends.
Can't you use this? Let x = await somethingElse(); // Do something with x
It looks cool, but for this use case it's like having a powerwasher ready in case someone poops on the floor.
It makes classes more Java-like with private, protected, and public keywords though
Make the query selector more specific. You can use IDs. 
In all reality I really doubt they care at all, as long as it's not easily searchable. If you use the project linked here, it puts the name of the challenge kyu and a lot of stuff easily accessible which is what I'm guessing they really don't want. People should earn their points not just google them.
The most straightforward answer: it pays my bills. But also because it's the one I've been exposed to the most.
Not sure if this will work for your use case, but you could get the CustomEvent from an iframe. var iframe = document.createElement('iframe'); iframe.style = 'display:none;'; iframe.src = 'about:blank'; document.body.appendChild(iframe); iframe.contentWindow.CustomEvent; 
The surprise here for me is that randomly meeting people at a time in your life when you don't know what the fuck you're doing works just as well as older wiser people setting things up for you. Seems like that shouldn't be the case.
Is this satire? 
There's no conspiracy (and if there were, it would be C#). Java does have types, which *is* a big part of TypeScript. But TS has a much stronger type system than Java (with very few exceptions), and it's less intrusive, too. TS doesn't remove any feature from JS. Prototype all you want. JS is already more object oriented than Java. Java doesn't even have a literal syntax for objects.
Technically speaking, I love love love object literals, and I find that Javascript isn't very wordy in general, which appeals to me. &amp;#x200B; From the business/product side of things, there's a huge ecosystem to draw upon and plenty to do. Sharing javascript is easy. Sharing products made with Javascript is easy, and getting easier. Finally, what I can accomplish with JS keeps expanding and expanding as more API's that utilize native hardware becomes available.
That's only in classes though, which exists (as sugar) in JS anyway
By proper (for me) I mean not at runtime.
Only language that can directly run in the browser without transpiling
why not?
Don't kill me but loose typing. Most of the time, it's nice to not have to know, esp if I'm consuming an API. Is something undefined or null or 0 or empty string? I don't care, I just want to know if I have a piece of data or not. Does this make my code more brittle? I guess. Does it introduce cases where sometimes I want to keep a 0 ? Sometimes, but usually I already know that anyway. JS is meant to be a flexible scripting language. When people complain about stuff like loose typing, it makes me think that they started out in some other language and aren't really familiar with the JS idiom. Also, it runs everywhere. It's great for quickly prototyping ideas.
I care
&gt; Dont have to waste time writing types till my design is solidified Yes! Hmmm...maybe this would be better as an array. Okay, now it's an array. Also, the ability to create flexible arguments in functions, which can take in an array or a string of arrays, for example. Sounds crazy to some, but it's so useful when trying to integrate different systems and just take in data and be flexible with it, instead of having to create middleware that does the same thing.
Succinct.
&gt; Dealing with dynamic content is much easier in JS due to loose typing as compared to something like Golang which has a hard time of a table has an unexpected column Yes! And since a lot of JS is used to API consumption, that is a real benefit, imo.
\- every reasonably usable computer on earth has js runtime and dev tools already installed on it \- usually works with css/html which makes it one of the simplest and most powerful tools to build UIs \- it's so extendable and malleable that it is more like a metalanguage - you like it vanilla? Sure. Typed? Here's you options. You like objective approach? No problem. Functional? Be my guest. While it may not be perfect in some of these regards, you get the point \- It's being developed in a very interesting way by people who are competent and seem to keep the dialogue open about the shape of the future versions &amp;#x200B;
I didn’t say JSON == Javascript
Really???? 100k for blocking nonfree JavaScript in web pages... They should better give those 100k as charity to starving children. 
&gt; let things = {} What don't you like about this? The block scoping of an empty object? Why is that bad in &amp; of itself?
Python/Ruby * - cant make websites * - isnt on every computer in existence * + IS instant * - is not inherently visual * - isnt used to make a tool that teaches other people about python * + is open source as far as I know * - cant find out how its done without using another tool * + not sure about update rate but its also not a language like 3/8... yeah that is pretty much applies to those languages. Oh wait not it doesn't. 
This is one of those things I've discussed with other developers about education. I went to a university to learn computing science, and learned how to write software and the concepts of programming and got a degree in computing science. I know other people who have just gone and received a diploma for 2 years and all they learned was how to code in C#. While that may get them by, it also leads to the problem you experienced. They only know the one language and don't understand the concepts. A good programmer/developer should be able to learn the basics of a new language in a day. Becoming fluent in that languages patterns and best practices will take more time, but you should be able to write functional code in a day.
Eh bot.
Think of the refresh token as a way to keep a user logged in after their existing access token expires (Spotify sets this to 1 hour or 3600ms in the response). You can send the refresh token which asks for a new access token in exchange, invalidating the old one and giving them access with the new one. Hope this helps. 
The hypothetical programmer is preparing an object to contain a collection of items. It's the wrong data structure for the job.
Made me chuckle
Ah, I see what you mean.
There are scripts not available on npm? Can you give examples?
Yeah, reading through the GNU sites on the issue, I see that gaining very little traction.
No typing
It’s my favourite language to write stuff for web browsers
JavaScript classes are as much sugar as classes in languages such as Java, C#, and python are.
Vue seems fine enough to me but has some opinions in it that remind me of Angular which has some awful mouth feel. I prefer React, and I definitely dislike TypeScript.
So I know by default it's set to 3600, but after I exchange the code for the first access token, it goes back to the redirect\_uri as it should. But what I don't understand next is, if my callback uri is [http://localhost:3000/success](http://localhost:3000/success), is that where the user will make all requests from my application? Because once I refresh that whole page, it says "invalid token".
Tried and it just broke the whole thing... [https://pastebin.com/JT5PrcRd](https://pastebin.com/JT5PrcRd) Here's a part of the code. Can't see anything wrong 
Because VBscript in the browser never really caught on. Actually, I wouldn’t even say JS is my favorite language. But I do enjoy it and the paychecks that come with its practice.
It was the first I learned. I've been using it so long, it's like a second language to me. I can speak JavaScript much the way people speak English or Spanish. When I think of accomplishing a programming task, my thoughts are to use data structures, algorithms, and patterns as supported by JavaScript. I imagine this is similarly true for people who prefer Java or C++. Those were the languages they first learned in college. Those are the languages they are the best at and most comfortable using. Anyone can state the benefits of languages. "I like the asynchronous nature. I like the versatility." Of course you like things about the language you use, and of course you think it outweighs the cons. If you didn't, you wouldn't use it. I don't think this question should be "What are the benefits of JavaScript?" Those are easy to find. I think the core reason behind why a language is someone's favorite is because _it's the one they are best at_. Most experienced, most comfortable. The benefits of JavaScript, you can Google. But really I use JavaScript because it was my first language. I got damn good at it, and I am comfortable tackling any project with it.
&gt; JavaScript classes are as much sugar as classes in languages such as Java, C#, and python are. Not really. JavaScript has constructor functions for instantiating objects and has prototypal inheritence. JAVA is verbose when it comes to defining your classes and extedning your classes 
There is a reason to the madness here maybe. Its either a bug in the logic or it is done on purpose. The caller of foo will always expect a promise that will resolve undefined, but will expect the side-effect of called this.someMethod() to be done by the time the promise resolves. somethingElse().then(...) is not awaited or returned so its fire and forget. Using the \`then\` is the only way to manipulate this promise and create a new one, because if you were to await it to get the value of x and then play with that, the behaviour would be different. the call to foo would wait for both promises to be done before resolving. &amp;#x200B; That is why in this case the two aren't equivalent and using then is appropriate if that is the behaviour you want. That being said this is not the cleanest style to code in. And the somethingElse().then() needs a catch block is you are going to use this fire and forget style. You don't want to have unhandledPromiseRejections throughout your app. &amp;#x200B; Anyways. hope that helps.
I like javascript because its not typescript.
You’ll want to store the user’s token in the browser either via cookie, local storage, or session storage, and pass that long with their reiquests to your server to make calls on their behalf, or allow them to make the calls directly in the browser to the Spotify API (for endpoints that support this type of feature). 
But doesn't the server know what the token is once the user is logged in? 
The thing with places like bangalore is that most people writing codes for a living do that because they forced themselves to get a CS degree. There are a good deal of proficient coders in india but most people working in outsourcing software mills are plain incompetent. The work culture is pretty toxic too. Managers tend to think the more people they can throw at a problem the better it will be. 2D thining all around. My point being that even though most coders in bangalore suck india has its share of good coders as well
Quick and easy
When I saw the headline I thought it referred to managing dependencies, which seems like a solved problem. But now that I see this is a publishing tool I am interested!
It's rare to use .then inside an async function, since that's what async/await is there to let you not have to do anymore. If you're seeing that often, it suggests to me the people who wrote the code didn't fully understand how to use promises and async/await. The one case i can think of where i've deliberately done that is when i have some things i want some parts of the code to wait for, but other parts not to wait for. For example, suppose i started with something like this: async foo() { const importantResult = await doTheImportantWork(); const temp = await doSecondThing(); doSomeAnalytics(temp); // returns a promise, but i'm not awaiting it return importantResult; } I've got some main piece of work that i'm doing (in doTheImportantWork), and then when its done i'm doing some side work for analytics. The caller of foo doesn't care about this side task, and it doesn't impact the outcome, so i'm not bothering to await it, thus letting me return the relevant result sooner. But since the analytics code depends on doSecondThing, i did have to await doSecondThing, and as a result i delay foo from resolving by however long it takes doSecondThing to do its work. So, one way i could avoid this would be to use .then: async foo() { const importantResult = await doTheImportantWork(); doSecondThing().then(temp =&gt; doSomeAnalytics(temp)); return importantResult; } But at that point, i'm probably better off extracting the combination of doSecondThing and doSomeAnalytics into a helper method. That way the helper method can use await just fine internally, and as long as i don't await the combined response, foo can continue on as i want it to: async helper() { const temp = await doSecondThing(); await doSomeAnalytics(temp); } async foo() { const importantResult = await doTheImportantWork(); helper(); return importantResult; }
I would think of it this way: every time you want to make a purchase, you have to run a card or give the cashier money, but they don’t know what you have until you give it to them. The access token works the same way, you send it along and in return you get the data you’re requesting. Until the token is sent for access, the server won’t be able to return the valid request- since the Spotify API doesn’t see a valid access token. 
So every time I want to make an API GET request, I need a new access token? Or do I just use the same one? Because the access token changes every time I refresh the page where the data was loaded, but when I go back to the /login route to authorize everything again, it works but I still get a new access/refresh token. I'm pretty sure that's now how its supposed to work, right? I should be able to refresh a page and still be able to use the same access token as before.
Its staggering openness. It's like the GNU license on pragmatic steroids. View source on ALL the things.
In my case, paddle.js is the motivating example: https://paddle.com/docs/paddle-checkout-web/. It's not that uncommon though: orgs who aren't that familiar with JS and provide an SDK as a plain script you can download, orgs who want to ensure you keep up to date with the latest release, older scripts from before npm was the dominant target, small scripts where the author has posted them somewhere but hasn't bothered to formally publish to npm... It's annoying, but it definitely exists. Even Google analytics does this. There's npm modules that will do the loading for you, but afaict under the hood they all pull it from https://www.google-analytics.com/analytics.js at runtime.
Nope, this is where storing the token in the client and sending it as part of the request comes in. If they don’t have a valid token, you have three options: 1) Tell then to login 2) Tell them to login again, store previous request and trigger it again. 3) Use their refresh token on their behalf to get a new access token and keep them logged in, make the request on their behalf for data once again. Regardless, you _have_ to store their token somewhere for it to be used outside of a single instance, or you get access every single time. 
This circlejerk about JavaScript being objectively worse than other languages is retarded. It's imperfect to a similar degree that most other popular languages are. 
You realize JavaScript will be getting private soon, right?
No, but with no explanation you cited "JSON" as the reason JavaScript is your favorite language. I might as well say Python is my favorite language because "XML". 
&gt; My point being that even though most coders in bangalore suck india has its share of good coders as well Oh no doubt, I hope my post didn't come off as racist or nationalist. I've seen plenty of Indians do wonders with code. I just think my company decided that number of man-hours per dollar suddenly became the most important metric ever, and is intentionally hiring sub-par developers because they think that they can just solve everything with brute force. 
So if I understand correctly, this works the same way like a session/cookie, right? The front-end logins in, and a session/cookie is passed to the backend and stored, so now the backend knows who logged in. So the way Spotify's API works, I need to 1) Have the user allow access to my app, 2) Once access is granted, make a POST request with the code in the query param to get an access token, and then 3) Give that access token to the user? I just don't understand why Spotify's API needs authorization and isn't like those other API's where you can just make REST operations and get simple data. And there are no guides and their docs are terrible.
It's the wrong data structure for _which_ job? 
That code works for me. Set a breakpoint in devtools and step through the code. 
Your list is nonsense. You're talking about a *web browser*, not JavaScript. As far as **languages** go, &gt; - cant make websites Any language can make a website; Ruby and Python are *great* languages for building websites, and both are very popular for that exact purpose. &gt; - isnt on every computer in existence Neither is Node, but Ruby and Python come preinstalled on every Macbook and the vast majority of Linux machines, at roughly the same rate as Node &gt; + is instant Ruby and Python (and any dynamic language) are exactly as "instant" as JavaScript, whatever that means. &gt; - is not inherently visual This is nonsense. "inherently visual" has no meaning. JavaScript is a text-based language, identical in that respect to Ruby and Python and virtually every other language &gt; - isnt used to make a tool that teaches other people about python No, actually, tons of Ruby on Rails tutorial websites are written in Rails, ditto Python/Django. &gt; - cant find out how its done without using another tool What does this even mean? You can use Ruby to debug a Ruby program, allowing you to find out exactly "how its done". 
Found the senior dev
What part seems like satire?
That sounds about right. They restrict their API so people don’t abuse the system, which is a very common practice to protect data and their systems. As far as the documentation goes, their info on auth flows is fairly consice. [Auth flow docs](https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow) Over all, their api docs make sense once you’ve acquainted you’re self with them. I’ll keep helping as best I can. 
This is what I love most about JS. Need to know what effect this change has? Press F12 and put it in right away. My coworker first has to change his C# code, recompile the solution, start it in debug mode and see whether it works. I press ctrl+S and the changes are already done.
Malleability! Jack of all trades master of none! It's everywhere!
Remember that you can roll stuff like Vue and Express/Koa yourself. Koa is really lean. The fact that this stuff exists tells me its possible to create proper vanilla JS applications. Github does it for example.
Unfortunately modern JavaScript is completely different at runtime than the actual source code. After transpiled and minified, production JavaScript isn't particularly transparent.
Fast to write.
&gt; Even if you’re writing JavaScript, this plugin will use TypeScript to automatically generate type definitions from your JavaScript &amp; JSDoc! This is pretty cool
You're talking more about the ecosystem than the language itself.
If "no typing" is the thing you think is best about JavaScript, you should try some more dynamic languages: https://en.wikipedia.org/wiki/Dynamic_programming_language#Examples JavaScript's type system is actually really confusing and poorly thought out, and modern JavaScript is still paying the price of decisions made decades ago. There are *way* more enjoyable dynamic languages.
&gt; intentionally hiring sub-par developers because they think that they can just solve everything with brute force. i know the feeling. Sub par developers will always sink the project.
So in order for my Spotify App to work properly, I guess I need to integrate some kind of log-in system? 
&gt; your web browser isn't "JavaScript" There is no other language that runs in main stream browsers so JavaScript is the browser as far as I'm concerned &gt; Any language can make a website; Ruby and Python are great languages for building websites, and both are very popular for that exact purpose. No. Any language can make a server that serves webpages. You cannot interact with the DOM using Python without going through JavaScript &gt; Neither is Node, but Ruby and Python come preinstalled on every Macbook and the vast majority of Linux machines, at roughly the same rate as Node Browsers are on every personal computer &gt; Ruby and Python (and any dynamic language) are exactly as "instant" as JavaScript, whatever that means. Thats what I said. I'm referring to no compile step. &gt; This is nonsense. "Inherently visual" has no meaning. JavaScript is a text-based language, identical in that respect to Ruby and Python and virtually every other language. If you want an inherently visual language, try Scratch, a language for children. JavaScript is inherently visual because its primary use is in the browser where it is closely intertwined with the Canvas API and the DOM API. &gt; I've idea what you're talking about, but tons of Ruby on Rails tutorial websites are written in Rails, ditto Python/Django, and learning Ruby is often done by using Ruby and its REPL. Again, no. The pages are in JavaScript/HTML/CSS. They are served potentially by a Python/Ruby server. &gt; What does this even mean? You can use Ruby to debug a Ruby program, allowing you to find out exactly "how its done" I'm not familiar with Ruby programs but in JavaScript I can inspect the code in chrome at the click of a button. If I wanted to do something like that with Python or Ruby then I would have to get a separate debugger or open the files separately in a text editor.
node built in path module...
Yup, that would be correct. There’s a library called Spotify-connect that can help if you want more full features sdk type support, or you can implement your own. Either way, you’ll need to set something up for login and storage. 
Hmm I wasn't aware of that. I like Python. I think one of JavaScript coolest features though is type coercion, == / ===. Lots of shenanigans can be had coercing values into other ones.
Maybe technically but since there are no competitors in the browser, the browser "ecosystem" is part of JavaScript.
I think JS provides a low barrier to entry for new programmers that lets them see in real time how their application is working. Unlike other languages where is compiled and fairly difficult to build a UI JavaScript allows people to make something happen quickly and that's really rewarding. Another thing is that there is so much depth to JavaScript with UI frameworks like react and backend libraries like express. Lastly so many people use JS that almost any problem you have can be found because someone else had it before and there is so many learning resources.
All right, makes more sense to me then!
This is all so ridiculous. JavaScript is not the DOM, or the browser, or the Canvas API. You can *draw things on a screen* using virtually any language. If you want to persist in this idea that "JavaScript is the browser", then just... continue being wrong, I guess.
&gt; and has prototypal inheritence [So does Python.](https://i.imgur.com/p9Kw815.png)
It is not.
I haven't really done much in other languages. A little bit of C# and Python and that's it. I don't particularly like JS, I'm just familiar with it. And I didn't really choose the language, I chose web dev and JS just happens to be the most important language for that.
Alright. I guess that's really all I have to ask. Thanks for you help.
The comparison is pretty cool. Might have to look into this, cheers.
Hi /u/Thomasan1999, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Your username really says it all here. How many Indian families do you know? How many Indian American families do you know? How many people in arranged marriages do you know? I'm guessing the answer to all those questions is few to none. You're speaking out assumption and ignorance and fear, not from a place of authority or knowledge.
Dynamic Type Asynchronous Programming 
You have no idea what you're talking about. Sometimes a class is a runtime, memory-consuming object. Python, Ruby, Smalltalk, PHP, (and JavaScript) classes are in this category. Also Java and C#. 
In India, the marriage is carefully weighted -education, status, values, background, wealth and income levels. There is no dream eyed, love stuck marriage that results in kids who are on their own in a year or two when the parents are looking for their next catch. The expectations around romance is low, reality is high. Which is why both parties know that it needs work to make a marriage work. In the West, there are unrealistic expectations without even looking at a person carefully. Hence more than 50% end in divorce and more and more kids are coming from broken homes. Result-a fractured society with no parental guidance or role models.
Yes, the infamous \`#\` syntax.. point still stands. It encourages writing classes more than current JS (private fields is not in the language yet, also no protected keyword) since they feel more like real classes in terms of data privacy &amp; encapsulation. Therefore, TS is more encouraging of using classes and traditional OOP than JS is. I actually think the new private syntax is good for library authors in terms of hiding implementation details which is only possible with a closure currently (a little problematic with regards to memory usage).
chill I am an indian citizen living in the US. I DO know what i am talking about. If youre an indian i find your argument disingenuous. Do you not think devorce is a taboo in India?
No strong typed nonsense. It's lean, elegant, and beautiful to look at. It gives you a ton of freedom to configure JS they way you see fit. You can use Babel, polyfills, and all the future features are unlocked right there! You can work in the browser, you can work Node.js in the backend, you can even work with React Native and create native apps. As for the strong typing thing... that is: Until you run into people who think TypeScript is actually a benefit. [Which it isn't](https://medium.com/javascript-scene/the-typescript-tax-132ff4cb175b). Then you're suddenly stuck in a team where people strong type everything for no apparent reason other than: &gt; "But now refactoring is so easy!" As if that's all they ever do. &gt; "Well I get less bugs!" No, you don't. And even if you do: marginally so. Not worth the insane amount of time you spend trying to neatly make everything strong typed. &gt; "Less typos in my code!" As if any decent IDE wouldn't point out typos right away. As if any decent transpiler wouldn't pop an error in your face right away. As if you don't have hot reloading in your freaking browser telling you the second you alt+tab to it that you done goofed. &gt; "Less unit tests to write!" You were writing the wrong kind of unit tests, then. And you still need to write tests anyway. --- I hate TS. I love JS.
I agree with most of that; but &gt; much of this victory has been clawed back to defeat. can you explain some of the losses as you see it? I think the "class" syntax could have been done better. failing when "new" isnt used with a constructor is dumb, imo. What other issues have you seen ? 
For anyone interested in checking out the subscriber velocity: [https://subredditstats.com/r/javascript](https://subredditstats.com/r/javascript) Is the increased subscriber velocity due to Reddit's new signup flow or something? 
Almost all of it is sour grapes from non-JS devs who have witnessed the rise of JavaScript's ubiquity. The rest of it is a cargo cult of that mentality.
**In the past:** because it didn't require compilation, and it ran on the Web **Currently:** because everything under the sun has a JavaScript runtime
I read through the article and am slightly confused what they want... do they want to be able to have access to the source Javascript that ANY site runs? Basically saying that it should be freeware?
Just make them login again? I can't currently think of any non super hacky solution.
Then you have to also extrapolate that it encourages writing functions more than current JS, as parameters can be statically enforced. Oh, and it also encourages writing object literals more than current JS since you can use duck typing. Etc etc. My point is that expands on all aspects of JS, oop not any more than others.
The only way to handle this is asynchronously
People do that everywhere 
What I'm worried about is them forgetting and not using the same account. I have like 5 google accounts :-P 
I like the strategy of "the user is drunk" for onramping so asking them to do anything is fraught with errors.
I really wish js had a way to either like with php arrays like so: ```php foreach($array as $key =&gt; $val) { doStuff() } ``` Php arrays are basically like js objects.
Well, you certainly defied my expectations :) Guess you never know whose behind the keyboard. But again, I agree that divorce is handled differently (eg. is far more stigmatized) in India. But I was just giving divorce rates as one example in my original post. The larger point was that studies have shown that arranged marriages are roughly comparable in satisfaction, and those studies did not just rely on divorce rates as their only source of data.
Succulent
So if someone buys software to run on their free site, GNU wants to block it? Am I getting this right? I couldn't give a crap if someone bought code, I care what that code is doing.
If you go to your site to sign up for some service which then forces me to download some desktop app there is NO way I would forget that I just signed up for the same service. You're talking about people with dementia here. If you were that concerned just allow a single sign-up per IP address per day/week/whatever.
Is not, but if you want to webdev is not like you have a choice 
And there are plenty of people in the field with a 4-year CS degree who haven't learned anything new in a decade, and others just graduating with a 4-year degree that think they already know everything. There are also people with 2-year associate's degrees or even 3-month bootcamp certificates that actively seek to continue learning and those who can do so rapidly. The ability and willingness to learn is relative to the individual developer, not necessarily their education. Your anecdotes just have some kind of weirdly misguided sense of educational elitism to them. 
&gt; You're talking about people with dementia here. Have you done any onboarding before? Your literally optimizing it for absolutely zero margin of error. Every potential bump in the funnel can screw you over. Plus asking the user to login twice? Not a good initial user experience.
They are totally identical. My advice would be, pick one for your project and stick to that one.
I can make any working cross platform basic app I want (sometimes with the help of rails if it’s online) in 5 days
It doesn't matter, unless you want to escape one of them. For example if your string as a ' in it, you'll use a " to delimit the string
That's what I got out of it. Part of it was confusing to me as well.
development speed is pretty high
&gt; Have you done any onboarding before? Yes, quite clearly you haven't with a comment like that. Check out my projects dude. &gt; Plus asking the user to login twice? Not a good initial user experience. Then consider why are using an desktop app. Why not keep the app in the browser? (Electron is just a glorified browser anyway). The extension CAN log your browser in to your site.
&gt;The ability and willingness to learn is relative to the individual developer, not necessarily their education. I agree with this. My point wasn't about how my 4 year degree is better than the someone who chooses to do less education. My point was about how the focus of peoples learning is often focused on the wrong thing, a specific language, instead of understanding the concepts.
To understand the issue, it's important to understand the [free software](https://en.wikipedia.org/wiki/Free_software) ideology and how it's related to more widely known open source. The main idea is that the user will only run JavaScript that's licensed under a free software license. This includes many widely used open source libraries. To accomplish this, the source code should include [a machine readable license](https://www.gnu.org/software/librejs/free-your-javascript.html). So the issue is not about accessing source code but allowing the user to decide what code to run on their computer.
Vue is webscale. 
The general community convention (in terms of defaults for formatters and linters and such) seems to be for `'` to be the default, and for that reason alone I'd recommend it between the two. Personally however I'm really trying to get into the habit of using template strings `\`` by default. They're identical to `'` or `"`, except that they can't be used in a few special places (eg. import lines). But otherwise they're always a "superset" of regular quotes, and then if you wind up needing their templating capabilities you don't have to bother replacing the quote characters.
&gt; Instant gratification This is a big one for me. Means I can test and iterate much faster than other languages I've used and I can toy around with it in browser.
Thanks for the hint ...I am using nodes basically with python scripting .Never thought about it when js scripting... I will check it out.
Object.entries(obj).forEach([k, v] =&gt; console.log(k, v)); Or Object.keys if you only need keys or Object.values if you only need values.
"because its a toy language"? /s
Yo check out all the stockholm syndrome in this thread. I don't know if you guys understand what free software as the GNU Project understands it is about, but speaking in terms of privacy and freedom this is actually an important issue. And I'm speaking as a JS fanboy here. Nowadays it's possible, and most importantly really easy, to run your full desktop on 100% free, copyleft licensed software. As more and more of our infrastructure is going towards SAAS-like applications, this is the part where it is currently hardest to make sure you're running trustworthy software. Your whole OS might be auditable by you, but as soon as you open up a website you're losing that ability instantly. Not just that, but by the very nature of the web you might be served different software every time you visit it. Is it malicious? Is it spying on you? You have no clue, and have no way of knowing without somehow beautifying and then reverse-engineering the code you're served, every time you open up a site. On top of that, very few companies actually include/show the licenses of the OSS software libraries they use in the JS they distribute, meaning there are massive license breaches going on. Give back love to the people who's hard work makes your beautiful products possible! At the very least include their license and send back a PR with some fixes every once in a while.
Damn, I didn't even check that site because awhile back they stopped updating., so thanks for sharing because that's the kind of graphs I was looking for. Guess they had a major redesign in-progress.
I’m doing this, I’m just wondering if this somehow makes it easier JIT?
I am familiar with the syntax!
It's not. It's smarter to know it than to not. 
Ya i know, but would be nice to have some syntactic sugar over something so frequently used. Is there any es proposal currently for this?
Because its the only one i know
This is not the best solution for performance! (My opinion...)
I dont believe so, not 100% sure, what kind of syntax would you like to see? I don't see imperative for loops as often these days.
[They're getting rid of the `componentWill*` methods](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html) which I'm not a big fan of, but that may be due to the fact I haven't had a chance to grasp the reasoning behind that change yet. What I know though is that I have shitloads of side-effects in `componentWillReceiveProps` which I really hope I'll be able to refactor with a global replace.
Haha yeah. Completely agree.
It's simultaneously my most and least favourite language. Whenever I go back to doing something in C# I find myself missing it's flexibility. At the same time, I wish there was a new web language on the horizon that was broadly similar but without all of the infamous flaws.
Cool username btw.
it isn't. it's a crappy language by default that requires serious effort to use a good subset of in a sane way. I use it because there are no alternatives for browser-embedded scripting. I think it's insane that people want to use it on the server. 
Its not
Something similar to php's foreach would work fine. Would also be useful if we could directly use higher order array functions on objects. So like `obj.map((k, v) =&gt; ({ k: v + 1}))` Idk these are just convenience things
Instant UI updates.
I think you have very limited experience with programming anything besides web page scripting 
But `` doesn’t work in internet explorer ;(
noble effort but a waste of your time. you seem to be talking to someone with minimal experience and a huge stubborn streak and possibly also a chip on his shoulder. 
In a way, the whole concept of modern SPAs is based on clientside state, so you're basically halfway there just by building an SPA with modern frontend tooling. The commonly-used modern equivalent to your idea of an "in-memory database" would be state containers like [Redux](https://github.com/reduxjs/redux), [MobX](https://github.com/mobxjs/mobx), [Vuex](https://github.com/vuejs/vuex), and so on. These act as a central location you can put all of your state into (provided it's state that actually matters to more than one place in your application, of course), and then "query" wherever you need it. That being said, while centralized state management (and clientside state in general) is very much a common thing these days, I'm not so sure about preemptively fetching *thousands* of records just so you never need to ask your backend for more data. It seems like an extremely excessive solution (think of the sheer size of that payload...) when you consider that stuff like searching, filtering, pagination, etc. should really be near-instant even if you do need a round-trip to the server to do it, as long as your app is well-written.
agreed.
You seriously have my condolences. Reddit is quick in judging things and doing quick extreme guesses, but still i have to say, that i would at least search for a place that is capable of teaching me something new, instead of making me manage people who are clearly worse than i am.
It isn't
Yes. I tried something like this and it worked for me. Thanks. Usually the window source may matter, but I can imagine the Event object itself should not need a context.
When putting together pieces of HTML, I like to use ' because the " character appears within the HTML. &amp;#x200B; I generally go for single quotes, also preferring not having to press shift.
That particular code did not keep a ref to the original function around :( Solution proposed by /u/iamlage89 does the trick. 
What *does* TS have to do with? I know it's not type safety, 'cause it's not enforced at runtime. Now you say it's not OOP either. Where does that leave it?
HTML IS A PROGRAMMING LANGUAGE
Not that i disagree with you, but it is fucking obnoxious and detrimental to the cause when OSS advocates act like people who don’t see eye-to-eye with their ideology are being victimized by the existence of proprietary software.
Hi /u/fPEq1Witc1aOJ8QRkd53, This is not a support forum. I suggest you post an issue to NPM's issue tracker. Thanks.
tyvm!
Hi /u/Lossanw, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
Hi /u/bigmantana, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/appyofficial, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Posts must directly relate to JavaScript, and content regarding CSS, HTML, general programming, etc. should be posted elsewhere. Thanks for your understanding.
Hi /u/Play__Fair, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
I’ve another question, I decided to use Passport Spotify and it seems like since Passport always ensures a user account is in a MongoDB database, that means we would store the access and refresh tokens with the user as an entry in the collection?
Well there might be some people that act like that, but I haven't seen too many of them. Usually it's more of a "it's your problem if you run proprietary software". The problem with JS today is that if you /do/ care, you run into the issues I listed, which is why I welcome the $100k to the GNU Project.
Translation: just discount those things which make this unscientific and then you too will come to the same findings.
"Free" in this context doesn't refer to "free of charge", but free as in freedom. You can read more about it here: https://www.gnu.org/philosophy/free-sw.en.html Most free-as-in-freedom software is free of charge too, but it's not a requirement, and fundamentally not what the free software movement is about.
I think the idea is that the people doing the arranging generally try to find compatible partners. It's not just 'smash these two random people together and hope they don't hate each other'.
I started learning how to program last Spring. I'm lazy and writing code in JavaScript is so much easier than C++ or C#. PHP seems like ancient tech. Ruby seems cool, but isn't that popular anymore. I also program some in Python, which is another really easy syntax programming language for me.
I love this language because of undefined.
This just doesn't make any rational sense.
Or, bear with me, you could write ```myFunc = a =&gt; a.reduce((x, s) =&gt; s + x), 0);```, and write a couple of unit tests describing your particular use case for it. And if people call it with arrays of numbers that's cool, but it's also cool if they call it with arrays of strings, and if someone calls it with something that doesn't have a reduce property you have good handling of exceptions in your code anyway, right? Now let's see, flexible reusable code, unit tests, and robust exception handling, versus "let's drop a type hint and pretend it solves everything".
How do I know which color I am? Can you scale the view a little bit so I can play while I'm at work and don't have my browser maximized?
&gt; Dont have to waste time writing types till my design is solidified, I can just write code as it flows out my mind and reactor only as patterns arise, not write the patterns and if I choose wrong end up doing a ton of work rewriting. Then I can go back and add types and get all those benefits with JSDocs later. This reads to me like you don't think about the problems you're trying to solve fully before writing code. While this is probably fine for smaller, personal projects, it probably isn't the best strategy for large projects that will be worked on by many people.
Because I get paid to write it. Also why C# is my favorite language. 
use an \`indexDB\` wrapper, but this (pulling the world into your client) is in general not a best practice. 
I can copy paste…
You literally opened your argument by poisoning the well for discussion by accusing anyone who doesn’t agree with you of being a sufferer of Stockholm syndrome. You are one of the “some people” you claim not to see many of. It’s all well and good to care about the proliferation of OSS, but people like you leave a really bad taste in the mouths of the very people who need convincing.
Yes it is useful😇
Runtime type erasure is commonplace among statically-typed languages. As long as your code isn't stuffed with `any` types everywhere, it doesn't make sense to double-check type data because it was already enforced during compilation. And that's what TypeScript has to do with: compile-time checks that make sure that you're not doing something dumb, like adding strings and numbers, which JavaScript will do for you without warning or complaint. The lack of a real type system is my #1 complaint in JavaScript. Unfortunately TypeScript is ugly. Fortunately it gets the job done. But IMO Elm is easier to learn than TypeScript and does a much better job, but it's not caught on as much as I would have hoped.
\+html does not apply to javascript! I mean pure html, not DOM!
`sumTotal` was a trivial example. My question to you is why do you want to waste time writing robust exception handling when a type system can enforce that you are given what the function expects? Think of something that requires a complex object that has 3 specific property names. With Typescript it won't even compile if you give it an object that doesn't have those. Failing at compilation is a way better trade off than failing at run time when someone called your method incorrectly and you forgot to add a unit test and handle that one scenario for that one property with your exception handling.
Hi /u/Ryoku92, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Please do!
Data can also come from outside your code, at runtime. And consuming external APIs is a pretty common scenario with JavaScript. Not to mention the roughly 1m third-party libraries currently being used by your app.
Well the other two top level comments include "I couldn't give a crap" and "Really????", so I thought I'd start closer to that level of conversation and then end on a high note.
Does this support spdy/http2?
&gt; Data can also come from outside your code, at runtime ¯\\\_(ツ)_/¯ &gt; Not to mention the roughly 1m third-party libraries currently being used by your app. ¯\\\_(ツ)_/¯ Both of these points boil down to the same thing: TypeScript is imperfect. But the argument that a marginal increase in type safety (*your* code being type safe even if library code isn't) is somehow less advantageous than no increase in type safety isn't very convincing to me. I mean, it's like tautologically false if long as you assume type safety is valuable. An improvement is an improvement, even if it's not perfect.
Exception handling is not optional. Neither are unit tests. If you write apps without them and pat yourself on the back for using TypeScript, you don't really have a robust app. The type "safety" is not really enforcing anything, but reduces code flexibility and reuse and promoting bad practices. I value type hinters in JavaScript for their code linting features, but I don't let them dictate how I should write code. When you can't write perfectly good code because TS doesn't like it, or can't use a library you need because of outdated .ts, you have a problem. And I mean, seriously, if you also want a function that concatenates the strings in an array do you write the exact same code twice just so you can say string[] instead of number[]? And what if I have a bunch of objects that all support .reduce()? What if I want to take generic variables, decorate them with .reduce(), .moo() and .lickMyBum() properties and write a few functions that put those props to good use and presto, I've created a mini custom meta language for data transformations. Because I had a problem and I solved it instead of wondering if I'm allowed to. Meanwhile, TypeScript can't even begin to express the concept.
Ecosystem and flexibility. The flexibility does become a negative in large projects, but that's where i slap typescript on top.
In the last few months I've really taken to TypeScript. I've noticed that my TypeScript code starts to look a lot like my C# code, which gives me less whiplash when I'm jumping between projects.
Not that I'm aware of, but that would definitely be a cool name for an OSS project. 
I never said you shouldn't do exception handling or unit tests. But writing exception handling to check whether you provided a string or not when I want to call a string specific function is asinine. You should be able to have confidence that you were given a string, and plain Javascript does not provide that. You do know that Typescript allows for variables to have multiple types or you can just let it figure the type out for you? Type inference still allows you to write generically but be protected in circumstances where one of the types might not support the action you are trying to do, preventing bugs.
I'm not, I'm using it. A useful tool is a useful tool. But I'm using Flow as a linter, for those squiggly red lines in the IDE. It has no saying in what or how code can run.
Limp
The only explanation I think right now is the songID is undefined when calling the request. Double check every place if songid be set to undefined for some reason 
I know nothing of your circumstances, so please don't take this as some internet fool trying to armchair quarterback your life, but... Give serious consideration to changing the place that you work. When you find an outfit that doesn't think putting more mothers in the room with the pregnant lady will surely speed things up, you will wonder why you didn't pull the trigger on the toxic environment sooner.
could the shifting of magnetic north be causing issues? 
Family pressure to have them “suceed” is also much higher 
The most obvious would be to just use an array restructuring in a for...in loop.
I had checked if songID is defined in the index function of BookmarksService and it is defined. But it seems when axios is building the query string it doesn't bother sending the songId. strange
That's not what you write exception handling for. You write it because not having it is like stepping into the elevator without checking it's really there. &gt; You do know that Typescript allows for variables to have multiple types or you can just let it figure the type out for you? At which point it's no longer "enforcing" anything, is it. So what's even the point. JsDoc can do that with zero overhead and lets me write actual JavaScript code instead of another language. &gt; plain Javascript does not provide that. May I suggest using a language that does, then? 
I can, I’m just trying to get a better sense of how bad this code is, and how urgent it is to go through and make those changes.
Sounds right to me. I haven’t used Passport at all, so I can’t really speak to it. 
It does if you use Babel :)
It isn't. The fact that you can define a function in 10 different ways tells you everything you need to know about Javascript. Javascript and Perl both get honorable mentions for "language where users write the most completely unreadable code", but Perl at least has an excuse - the syntax is ridiculous to begin with. Javascript's excuse is "well I evolved over time but I kept my useless appendages for backwards compatibility". 
It's a scripting language that does what it needs to do, even if I don't like many parts of it. I can write Javascript and get native performance with AssemblyScript. https://github.com/assemblyscript/assemblyscript I can spin up a web server and run my business with a single language, and everyone on the team uses the same language. The world is a scary place and code is unsafe no matter where it runs, if you wrote it, or you downloaded it anywhere. Javascript is no exception. Despite this, I actually can see what runs when I download it. When I can choose between the devil I know VS the devil I don't, I choose the devil I know. I wouldnt say Javascript is my favorite language. It's definitely the language I use most often, and I wouldn't have it any other way. 
anyone can open a text editor and start fiddling around, no need for scary compilers or something you have to install, it just works. even on your grandmas pc. to me, that was amazing in the beginning. &amp;#x200B; and also ofc, debugging &lt;3
Darn, I don't usually jump to conclusions so I'm not sure why I did here. Thanks for the correction.
We use google maps at work, and no I can't say that I have noticed this myself. it's usually within a few feet Do you get a better result if you try \`navigator.getCurrentPosition()\`
Hey, um what's npm?
It does! If you provide a key and certificate it will start an H2 server, which makes everything even faster.
Wow. I don’t get to meet many programmers who started learning with JavaScript.
Feel free to point out where I'm wrong.
yea it's definitely in there. I nested it in the initMap() function in order to get an address automatically from coordinates. should be at line 70 of the github. &amp;#x200B; I should probably mention it uses the free API so maybe that's why I can't get it down to less than a 1000ft
I ran into a similar conundrum and ended up deciding to parse it on the back end. It allows an extra step (outside of the frontend upload field) of ensuring what the user uploaded is indeed the file type/format that you want. It also allows for flexibility if the file you’re parsing is very large and may cause the browser to hang if you were to parse it client side.
This is fascinating. Some of it was over my head, but it's cool to get a glimpse of how the bad guys do what they do. 
When I was a new programmer I made an awesome Python script to help with some work stuff (I wasn't a dev yet) and no one could figure out how to use it. That made me hate Python.
Right! I thought there was something like that, I was looking up for...of instead though. If you really really want imperative syntax than this is the way to go.
&gt; JavaScript is not the DOM, or the browser, or the Canvas API. You can draw things on a screen using virtually any language. I did not say they were the same things I said they were closely intertwined. Just drawing things on the screen isn't the great. Thats why I mentioned the DOM AND the Canvas API's. Feel free to mention a Python or Ruby native package that is as robust, developed and powerful as the DOM. &gt; A "website" is not JavaScript, you can create a large complex site in Ruby without writing a single line of JavaScript. Yeah and it'll either be an awful user experience or a not complex website. Find me a complex website that doesn't use JavaScript because I can find you TONS that don't use Python or Ruby you probably can't because thats not what those langauges are good for. &gt; That's completely silly distinction. I could argue that these pages aren't written in JavaScript, they're written in HTML and CSS, therefore JavaScript can't produce websites. You might as well argue that C++ can't make running programs, because running programs are really written in machine code, therefore machine code is the best language. If you want to persist in this idea that "JavaScript is the browser", then just... continue being wrong, I guess. Its not a silly distinction. Those are the only languages you can run in a browser. Also why include CSS? CSS can't make websites alone either. C++ compiles down to byte code which is not something anyone realistically writes. Why would you even make that point why wouldn't you just argue that JavaScript gets transformed into byte code by the engine? Do you have any actual arguments as to why JavaScript isn't the best? All you've given is the argument "there are some languages that can kinda do what JavaScript does technically but not really". I know there exists good arguments against JavaScript which makes it all the more embarrassing that you can't even bring up 1.
If I have minimal experience then you should have no problem creating strong counter points to anything I bring up. Also what kind of pathetic stance is that? "Don't debate anything with him because hes inexperienced". A broken clock is right twice a day. How about you try addressing the the ideas at hand instead of making weak ad hominem attacks like a dick?
JavaScript is not my favorite language (I love Kotlin and Java and SQL is my mistress, sorry). Now before you downvote me to hell, let me explain. I like JS because it's what the end user "sees". It's how they interact it's how your site, app, etc. interact with the user. It's a very powerful tool that needs to be done right. But JS was stagnant for so long. 1999 - 2000 - Let's go for interactive menus and navigation. All of that was cool as hell trying to figure out just what we could do just because we can. CSS wasn't as powerful as it is today and we had to come up with some pretty awesome stuff to outdo the next guy. 2007-2008 - I worked on a closed captioning application that took Video and output from a Lucene index and highlighted / displayed what was being said when there was no CC option available on internet video. The data was always there if you recorded the video correctly in the metadata. This might have been the most complex app that I've ever written and a lot of fun. Today - I took 4-5 years off of the front end and missed a lot of the JS madness / framework of the week. Probably saved some of my sanity. But diving back into JS with AngularJS and now React, JS is awesome again to interact and do awesome things for the user. Creating a user experience is everything that JS needs to be and do. &amp;#x200B; Where JS still needs to improve is its deficiencies. Math and floating point hopefully will be addressed in upcoming releases. Until JS can handle this, it will NEVER be taken seriously as a server side business logic tool. Yes, it can route your API. But if you are dealing with any money, math, etc. it's not there yet. NPM needs to get their shit together. The failings of NPM over the last 2 years should not be acceptable whatsoever. NPM should also not be a copy and paste of stack overflow answers.
First class functions
The tests look awefully inadequate for such a library
Pythons indenting system is gross. Blocks of code should always have some kind of smybol at the begining and end even if it is if, endif
Source maps. 
I work on a project that already uses Rollup. I like the idea of reducing configuration, but @pika/pack isn't quite as minimal as Parcel, for example. Parcel automatically finds its plugins in your `devDependencies`, so you don't need to write any configuration. If a Parcel plugin does need configuration, it goes in a standard location like ".babelrc" for the Babel plugin. I'm not sure if I will use this in my own projects. If I'm going to write build config anyhow, it might as well be rollup.config.js (which is pretty simple as it is). I find that code-quality tools are way more complicated than build tools, actually. Setting up flow + prettier + eslint + import-sort + lint-staged with all their various plugins and precommit hooks is way harder than setting up Rollup. If there were a tool to automate that, I would be much more excited.
This is the correct answer. There's nothing inherently superior about the language. It's got some things that are nice, and some things that are idiotic, but mostly it's the lingua franca of the internet.
&gt; The best laid schemes of mice and men, go often askew, and leave us nothing but grief and pain. When working on a large project it commonly will have constantly changing and possibly conflicting requirements that need to all be realized. Its common to have an architecture for one part of the codebase and it need to interface with another part that in the initial design and architecture did not have that connection. Personal experience also showing that especially on large projects with over 20 people, and another department designing the product in some way create stuff that just doesnt work the way they assume in the code as the design and some major change needed on a deadline. Waterfall planning, planning at all, code quality, etc are not allowances for all business models. 
Wow it’s very cool to see it unravel . 
&gt; • I can write code that litterally looks like a series of haiku poems. /r/ProgrammingCirclejerk 
Their issue is one of licencing and the freedoms bestowed upon the user by virtue of that license. Currently, if you wish to use software, generally speaking you're able to view the licence and/or terms prior to downloading it and/or installing it. With websites increasingly becoming web applications, you don't get that opportunity. Suppose a JS dev diligently applies a licence header to their served JS indicating it's either proprietary or under a permissive license. You still need to have visited the site, downloaded that JS file, and most importantly by-default ran that code. If you wish to go about your life using FOSS software, you can go and get libreboot/coreboot, a permissive OS, a permissive browser, etc. But the moment you use that browser, you're kinda stuck. There exists no real mechanism to convey the freedom your site offers. Generally most of the web is likely to operate under a proprietary form, and that's fine! But if you're a FOSS advocate, supporter, etc, it'd be neat to have a technological mechanism to convey that fact. Imagine something like the DNT (Do Not Track) Header you set in your browser, it sends that along with every request. It'd be neat if there were an established mechanism either on the Request side to say "Hey, I'd only like 'free' software" or on the Response side to send a header saying "Hey this asset is GPLv3/MIT/BSD/Proprietary licenced"
java its a toy m3n, for example....
I know a library called LiteDB for .net maybe there is a node.js fork? 
On mobile sorry. When you initially attempt to get the bank balance, you need to use .getAttribute("value") in the span tag. The .value returns undefined on the span element. To update it use the element's setAtttibute method.
I'm surprised AMEX does not have referrer checks on their confirmation pages. This can be used to only display a confirmation if your coming from one of their owned domains. Also why is it so common for financial instituions to have so many domains vs. using subdomains. I saw `amexmessages.com`, and my first thought was plausible. If I saw `googlemessages.com` it would immediately be a huge red flag. Amex already has domains `amextravel.com`, `amexgiftcard.com`, `amexoffers.com`, and non amex branded sites `serve.com` and `membershiprewards.com`.
What an absolute joke. Totally unrealistic expectations. If you don't want to risk executing non-free JS, your only practical solution is to disable JavaScript by default and selectively enable it for sites you trust. But the whole idea is absurd. In order to do what they're suggesting to modify or replace scripts in a page, they are in fact doing what they claim they are restricted from doing anyway, thius proving that they are not in-fact restricted in practice. There's a reason the JavaScript community has largely settled on free, non-copyleft licences like MIT and BSD. It's rare to find GPL-licenced packages and virtually no-one uses those that are and many companies have fairly strict policies against using GPL'd libraries.in their web apps. Commercial software is a fact of life. Get over it.
I completely agree. I think that's what piqued my interest at first as well - amexmessages would *totally* be a legit domain. Apparently Google thinks that as well - they let it through their spam filter!
You can do those in C#, probably other languages too. 
It's not, I like C# better.
&gt;I should probably mention it uses the free API so maybe that's why I can't get it down to less than a 1000ft I know they limit this in a number of ways, you should be able to login to the API console and see your usage and if you are hitting limits.
Wow, that was a really interesting read. Great detective work (if OP is the writer)!
Whichever ESLint says. Generally, it's single quotes.
oh boy...
Why do you like the single threaded asynchronous programming model so much?
This is a good answer. Also, anyone who is not a native english speaker thinks english is a shit language...and they're not wrong.
Then you are going to love neon. 
There are so many reasons, but I'm sure someone else will mention the others, so I'm going to go off the board and say ASI. 
Reminds me of Hacknet! but really, this was a great read, thanks for taking the time to put it all together.
You could have just skimped all of that instead of reacting to them honestly, it just waters down your point and makes you look as childish as those commenters. 
I read the article and as a newbie self-thought coder, I was completely oblivious to such movement and frankly I don't understand it. Isn't it this taking it a bit too far and is very anti-business? Besides even obfuscated code can still be analysed and made pretty with enough time investment so a nonfree JS doesn't really exist then? Someone help me understand this if I am wrong here. How would users reject only certain JS files if there are dependencies between them? Why should users be encouraged to run own JS files with the websites they visit? The article reads like a political pamphlet and not a good one. 
Dealing with multithreaded approaches to asynchronous problems deals with a lot of race conditions and resource locking stuff, and is super hard to debug. In JavaScript, you are guaranteed that only one command is executing at a time and it eliminates all of those issues. I know other modern languages do this as well (C#) but compared to all programming I've done before JavaScript, hooking up inputs to outputs and operating on the data is a breath of fresh air.
i dont have an answer for you, but I doubt anyone will if you dont format your code. Ever tried reading someone elses code that isnt indented? Its a nightmare
lol, sounds sketchy. what are you doing with it? 
yea I'm well within the limits. only usage is in local testing 
Yes. Single quotes. That way the quoted attributes in HTML will be in double quotes.
The problem is on line 22.
Use StackOverflow, not Reddit you dumb fuck
Microsoft is producing VS code for Microsoft. That you and I can benefit are just a side effect. Want language bindings for the Foo language? Better hope MS is using Foo, or you are writing your own bindings. And those bindings better be congruent with their view of the world, or you are hosed.
what the hell dude ...
The gnu foundation is pretty ridiculous sometimes and the obsession with "non-free javascript " is one of those instances
XML is turing complete :)
I'm sure they referred to companies that bundle set of JavaScript libraries and issue commercial license e.g jQuery is free and JavaScript is core of it but here comes companies selling developer subscription based on free software likes of many or could be the hidden business logic of Lambdas in IBM or GCP cloud functions on Node.js I'm just trying to understand better what am I buying with Telerik Vue Library they JavaScript ?
I'm a little confused about how this is 'Reactive'... I'm not seeing any subscription api
Why not redirect them to the app with your login token. (Assuming you can redirect to an electron app and pull our your token, like how is done with Android app installs)
XLSX are zips of XML and binaries, so the server will have a greater variety of support for binary formats. But if you wanted to do it on the client it might be tempting to use a Web Worker to but just be aware that the XMLDOM libraries aren't available in workers :(
Yup! [Even in C++](https://github.com/Jeff-Mott-OR/javascript-cpp-rosetta-stone#objects), in fact, once we realize that an "object" in JavaScript is really a hash/map/dictionary.
Does TypeScript count? But seriously, I like that it reflects how I think about problems. I've been writing a lot of Python and C++ lately and each is a unique struggle in getting my intent into the code "correctly" (the right language conventions). With JavaScript, I just write it and it works and I can structure the code whatever dumb way I desire. 
Thanks for your feedback, I understand that. So if I post it with /help flair, would it be acceptable or I'do need to post it as a link?
I basically use TypeScript as a Babel replacement (for modern JS like classes and modules) and the best intellisense available to you. It takes a little work to set up, but it's so worth it in the long run.
This was a fascinating read! Great job on decrypting all that and figuring out all the details. Very impressive. Does Amex compensate you like a bug bounty if something like this is discovered??
That makes sense. My concern is that I need to do a lot of validation on each row of the file, so if I have N number of rows it is probably safest to do at the server side, so the browser doesn’t crash. 
No, because this isn't really a flaw in their system. This is just someone pretending to be them to phish you. I did report it to them - hopefully they can take real action and make people safer!
Try lazlodb. There is a library called lazlo-node &amp; it will fit your needs. NPM : npm install lazlo-node
And lazlo-node does not require you to install lazlodb. It works independently.
Wouldn't this be executing the promises serially? 
So I just install the cli and velocirender while I provide the url? What if this is hosted in gcp? Google cloud platform? How do I get the node env there to run the cli?
It keeps evolving 
Here's a couple of pure js db's that have a subset of the mongo api...and i think both are before mongo api 2.0... [https://github.com/louischatriot/nedb](https://github.com/louischatriot/nedb) [https://github.com/kanryu/puremongo](https://github.com/kanryu/puremongo) [https://github.com/sergeyksv/tingodb](https://github.com/sergeyksv/tingodb) Id like something myself as I want to learn mongodb on an online scratchpad and dont wanna setup mongodb anywhere. Have no idea if any or which is best as I dont know mongo. 
Unless it's a github link, you _must_ use the "submit a new link" option. 
Sounds like you could use a dynamic import, it's part of the ECMA standard import("path/to/your/module") it returns a promise and the resolve is an object containing the exports &amp;#x200B; Example: async function someFunc() { const module = await import('../../utils/saveExcel.js') const saveExcel = module.default saveExcel() } &amp;#x200B;
1. Is unfortunately the only language that works with frontend web technologies natively. 2. Unlike other languages, Javascript to me still has the best debugging experience (chrome dev tools, f12 tools, you name it, heck even slack, VSCODE can be debugged). 3. I feel like the language doesn't force you to do a lot of ceremony; unlike Java. It leaves it up to the developer and the team for that. 4. Is the only language that you can get away with and qualify yourself as a "Full stack developer". 5. Yet ironically, when I want to get shit done, despite its quirkiness, I just use JavaScript. 
Use the ‘externals’ config in webpack to tell it which modules should not be bundled.
Really? I find that interesting..
Check out this repo and go from there. https://github.com/BretFisher/node-docker-good-defaults Since you simply mount your local volume to keep your files in sync I don't believe there is anything you will need to worry about related to Babel being in the mix. It's what I've been setting up for the last couple days with express js while also using Windows Subsystem for Linux which has been the only reason I've had to do any troubleshooting. 
Enjoyed reading this, thanks!
Perfect, thanks for the explanation and help!!
Just use dynamic import
I like js a lot, but i was it was a typed language so we didnt have to shoehorn it in via flow or typescript
Single quotes are better because they use fewer pixels, allowing you to use those pixels elsewhere in your code.
I'd like to point out that they also want the executed javascript readable. Meaning you can't even minify your code. Enjoy serving JS bundles in their original size to mobile users. I'm sure they will be happy about that.
HAHA JAVA MAKES PEOPLE QUIT BEING PROGRAMMERS
Why bother staying when he learnt java in 30 minutes? 
Yep, it slows things down considerably. You might want to try the other popular one (amVim), it doesn't have as many features, but bare basics are there
He left to become a professor, teaching java in which he learned in 30 min. 
you just hit them directly without caching ? what happens if they rate lint you?
One of my favorite psychology study is one by Arthur Aron, where they had random people ask each other a specific list of 36 questions while looking into each other eyes. It was just to show if getting to know someone else better but they found out that in a lot of cases people ended up dating or even getting married At first glance, it's a bit depressing: if you just have to exchange a couple questions about your parents and your hopes and your regrets to feel that way, maybe love is overrated? But on the other hand, I think it's a very positive message: that each and every one of us is, deep inside, so beautiful, that anybody who sees so deep inside can't help but fall in love. And I think it's wonderful. And I truly, truly think that if you put two people to start living with each other, to see each other during happy times, sad times, weak times, sick times, sleepy times, childish times, random times, they will *definitely* fall in love with each other*
A very interesting lecture, where can I deepen the arguments of this article? 
It's versatile enough to build websites, mobile apps and servers. 
I have no clue what I'm doing and how this whole dates thing works, let alone dividing and adding and subtracting them. Good lord please help me
Universities HATE him for this ONE WEIRD TRICK
We cache Sygic and Booking, (and still hit the rate limit), have reached a special agreement with Foursquare for caching, and have Mapbox doesn't have a rateimit but pay per amount of calls. We're on Sygic's Enterprise plan and on Foursquare's startup Plan. 
Derek banas!!!
What happens to my setup is that debugger would not attach, I will look into to your repo thanks.
\*plays on monitor\* "Another JS data type is a text string...." &amp;#x200B; "Another data type? Oh FUCK THIS SHIT!!!"
I don't think it will because of the parenthesis you have around the exported object. Without testing it out, I think each script that imports that object will get a new instance of it due to the parenthesis around what you're exporting. &amp;#x200B; Instead try just creating the object and then exporting it: `let obj = {` `names: [],` `values: [],` `initializeValues() {` `this.values = this.names.map(x =&gt; ({` `name: x` `}));` `},` `getValues(name) {` `return this.values.find(x =&gt; {` `if (`[`x.name`](https://x.name) `=== name) console.log('x was found!')` `else return` `}` `}` `};` `export obj;` &amp;#x200B; Let me know what you find out.
You missed your opportunity to give your 2.0000000001 cents.
Java != JS
Congrats to the man who realized classes were a waste of time and money
Gzip &gt;&gt; minifying. &gt;Original: 28,781 bytes Minified: 22,242 bytes Gzipped: 6,969 bytes Min+Gzip: 5,990 bytes https://stackoverflow.com/questions/807119/gzip-versus-minify/874449#874449
And you're still figuring out that Java and JavaScript are two different things !
You're right \[typescript is a conspiracy\]([https://medium.com/@lonniebiz/typescipt-is-just-another-effort-by-anders-hejlsberg-to-statically-type-a-dynamic-world-324e4320e13a](https://medium.com/@lonniebiz/typescipt-is-just-another-effort-by-anders-hejlsberg-to-statically-type-a-dynamic-world-324e4320e13a)). Few people know the real reasons behind it.
I prefer JS !== Java
Your wrong, buddy.
Don't waste your time reading this article. It is just another (paranoid) guy who thinks writing types is wasted time. Just one of these guys who has to write more code to become convinced that he was wrong when he wrote this... 
Ecmascript already provides all you need to manage big projects: ES Modules. Typescript is totally anal and unneeded.
Fucking waste of a read. Don't even both. He's systematically incorrect.
Is this another paid Microsoft troll or effeminate fan boy? You be the judge.
You remind me of TempleOS dude.
Pretty sure the article is just shitty satire, but there’s genuinely a lot of “anti types” JS devs lately as TS is gaining market share. Often just comes across as “this is hard and I don’t want to learn it”. It’s strange. If you’re more productive with dynamic typing then good for you, why are you writing an article about it? My life is a lot better with typescript and ocaml and some dude on medium telling me how much easier it is to slap garbage together unrestricted isn’t very convincing.
Look, don't take this personal, but you are an ignorant idiot, "dude".
Learning javascript is easy to start. A couple of years ago I taught C ++ ... I didn’t get further "Hello world"
At least someone gets it! Thank you.
firebase? lol....
You need a '}' between 'bar' and )
yeah. i missed that but after fixing it, my syntax is correct and in api. php i have $\_GET\['foo'\]?
Ts is statically typed.
Because of memes. &amp;#x200B;
There is actually a reason to do this, though if the code didn't make a comment about it, it probably is not intended Code can use this as a mechanism to have "blocking async" and "non-blocking async" component. * If downstream user `await`, they will only await for the "blocking" component, the "non-blocking" part will continue to run after downstream user gets back control. * If downstream user doesn't `awit` then both components will be async. Basically they don't care about waiting for completion at all. 
Okay we have resolved the issue, you are right. We have a node server which initializes the values and then we have another file which, is a script that continues to listen to an event and calls getValues. When the script file calls it is empty since the values were only initialized on the node server side. What we've done is call the initializeValues on the script file as well. It works, if it is within the same file.
My best guess would be that they had legacy tech set up on the primary domain, and they didn't want to faff around with that before starting a new project? I can't see any good reason for it.
Try using $\_POST\['foo'\]
``` for (const [key, value] of arr.entries()) { ... } ``` ?
Paid Microsoft troll or hopeless fanboy? You be the judge.
Thanks for sharing John and great job in reporting this to Amex.
I'd suggest using `"` (double quote) and the primary quote, and `'` (single quote) as alternative. Mainly because JSON requires double quotes for quoting key names as well as string values.
Hmm I'll give you that, but I'm going to stand by it now.
Interesting read. Thank you.
&gt; Besides even obfuscated code can still be analysed and made pretty with enough time investment so a nonfree client-side JS doesn't really exist then? Someone help me understand this if I am wrong here. Free code is about the license of the code not whether it can be read/modified or not. They believe that code that has patents, that is not licensed as FOSS or that breaks the freedoms of the users as defined by them, is something "bad" and they probably don't want it running on their computers because it infringes with their "freedoms" as users. 
First, get the reference to the element which contains the balance amount. e.g. var ele = document.getElementById("balance"); The text contents of that element is accessible in its `textContent` property. So, to change it to e.g. `$99`... ele.textContent = "$99"; If the amount is from a variable, then simply construct the string like below. ele.textContent = "$" + balance; Keep in mind the details though... since I notice that your HTML structure is setup like below. &lt;h2&gt;Balance:&lt;span id="balance" value="100"&gt; $100.00&lt;/span&gt; i.e. the space is located in the `balance` element, instead of between the `Balance:` text and the `balance` element. So, the text contents of the `balance` element must always be prefixed with a space. You'll see why if you use the above script.
&gt;I know it's not type safety, 'cause it's not enforced at runtime. The point of type safety is that you don't have to enforce it at runtime, since you've already validated it. &gt;Now you say it's not OOP either. Where does that leave it? Typescript is just JavaScript with compile time type checking. It's no more or less OO than pure JavaScript. 
&gt; Data can also come from outside your code Yes, but only an idiot would trust unsanitised data. 
Classes in JS are sugar over functions. Consider: &gt; class Test {} &gt; typeof Test &gt; "function" Classes in Java, C# etc are actually classes and have the concept of class vs instance for example.
It depends on what that "specific name" is, and what exactly is that "list". Without these kind of details, even if someone gives a code, it's guaranteed will not work with the web page.
What the fuck is this gibberish? If it’s supposed to be a joke it’s well short of the mark, if it’s not the author should probably seek professional help. 
I have never seen in any of my projects, a list being rendered like that. One after another. Why is it so? To me, it comes off as if the demo is made slow on purpose. 
Using character assassination to affirm the superiorirty of your tech choices seem a bit childish to me. I also think writing types is wasted time, it's just a fad brought in by "enterprise" devs from Java / .NET as they move into the JS world. Nothing to do with paranoia
No thanks
Good, we need some sanity with Promises, particularly race which is pretty daft
Your articles are great, and you write a tonne of them. Thanks for your work. 
It varies between implementation. Most use xorshift128+ nowadays, at least.
You could try LowDB
There’s no guarantee for anything. If you want to be sure, include your own pseudo-random number generator like [mersenne twister](https://www.npmjs.com/package/mersenne-twister) and seed it with Math.random.
Traditional is an LCG. But I am not convinced that they still use that.
Compressing isn't a pure gain, though, because the unzip on the other side has its own penalty. Also, aren't their js engines which are trying to start interpreting stuff before it's all the way downloaded? Can't do that with gzip either.
A random algorithm gets picked every time, for maximum randomness! /s
&gt; There’s no guarantee for anything. If you want to be sure, include your own pseudo-random number generator like &gt; mersenne twister &gt; and seed it with Math.random. If you seed it with Math.random, aren't you just always going to get the same results as if you'd just used Math.random anyhow? Mersenne always produces the same results for the same input seed. The one you linked to seeds itself, and it looks like you should only override that if you want to have a repeatable sequence.
*Hey just noticed..* it's your **3rd Cakeday** BehindTheMath! ^(hug)
Well, if you assume that Math.random is [implemented like this](https://xkcd.com/221/) you’re right, but usually that’s not the case. It seeds itself by using the current timestamp, which is just as valid as Math.random. The timestamp does have some issues in that regard in general, though.
Tech certificates have always been worth exactly $0 IMO...that goes TRIPPLE for programming because its an industry that REQUIRES constant training and self-teaching. A cert like this is pointless and useless...I might actually see it as a bad thing on a resume to be honest.
Not enough context to even warrant attempting this. Advice: Learn JS and stop asking for people to write sketchy things for you.
The first two requires converting dates to timestamps, doing some calculations on them, and turning them back to a string form. To get a timestamp of eg. today's date, you can do Date.now().getTime(). To convert it back, you can do "new Date(timestamp)". The third one is just simple arithmetic, if a number is divisable by 4, 100, and 400, it's a leap year. You can use the % operator to check if a number is divisable by another.
Why? What’s wrong with Firebase? Genuinely curious 
Just don't like it. Kinda like watermelon juice. Just not a fan. I honestly thought no one actually used it seriously....
What algorithm is used to pick the random algorithm? /s
A random one each time.
Except the referer thing, that is a flaw
Math.random()
Novice here but the pseudo code i would use (can be coded in either php or JS since its executed either ways) is - (is this the approach you have taken?? is there code associated with that Next button for page 1 and subsequent pages that changes the content of the modal window dynamically??) 1. Starting trigger - pops up the modal window, 2. Loop that repeats/ recursion { 3. Display content in the modal window + innerHTML code that 1. Generates/displays a link/button like a next button, each time // each window can have common IDs but a tracker variable is updated 2. Has code for - 1. onclick attribute and function calls for that button, each time 2. JS for execution if that next button is clicked (move to next step and update the innerHTML with next step contents+button code), each time 4. } &amp;#x200B;
I think the point is the core source of entropy is insecure, timestamp can be guessed. Doesn't matter if you run it through a couple dozen deterministic algorithms. If the attacker knows which algorithms then you've lost that layer of security.
Security through obscurity is not a real thing. 
It's Math.random() all the way to Math.floor()
Hi /u/katembers, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/sicilian_najdorf, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Kopikoblack, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/maddywiggy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/maddywiggy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Rigbyyyyyyyyyy, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Ashi360_YT, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/_CodeIt_, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/steniowagner, this post has been removed. Do not use all-caps in your title. Thanks.
Hi /u/Fresons, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Impressive_Web, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/Cromahn, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/dohpaz42, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/LollipopPredator, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/boki345, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Well, if your attacker controls your runtime to such an extent, all bets are off anyways.
is there plans to add support for custom validators? is there plans for remote validation?
What about [Crypto.getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) **?**
While this is totally important to someone's understanding of JavaScript especially if you are trying to pursue a more advanced understanding of JavaScript this is definitely not any beginner's kind of resource for my fellow readers.
This could work as well, depending on what you exactly want.
Aha, I see what you did there
Well, they do.
yes it would. I suppose if you want all the promises run in parallel you could do something like function createPromise() { const isSuccessful = Math.random() &gt;= 0.1; if (isSuccessful) { return new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve({data: 'true'}), 1)); } else { return new Promise((resolve, reject) =&gt; setTimeout(reject, 1)); } } async function run() { const promises= []; for (let i = 0; i &lt; 10; i++) { promises.push(createPromise().catch(error =&gt; error)); } try { const results = await Promise.all(promises); console.log(results); } catch (e) { } } run(); which `results` will be an array of all the returned values, even the error ones. You can then go on to filter them if you only want the successful ones.