To be honest I think you will learn from the book. I have several years of experience and still learned a few tricks.
Sorry for being so dense. I see it now. I was looking at it wrong. Thanks for your help.
Yep. You are right. I was looking at it wrong. Thanks for your help.
Thanks a lot
Here is my versions: function parser(json) { try { return JSON.parse(json); } catch (e) { console.error(e.message); return null; } } 
It is.
Oh wow! Thanks! Indent-rainbow is very helpful! 
There isn't one set of numbers because different languages optimise in different ways. One problem may just be slightly better suited to one language than another. But compiled languages are always going to be at least a bit faster because they can do some of the work during compilation rather than execution. On another note, can you name any high performance computing projects done in JavaScript?
No need for the added bit of hostility. 
It doesn't work very well with light themes though - not an issue for everyone but it is for me.
If it's e-commerce I can understand. I was talking mostly about my app sites that do not run a profit.
I usually use something like this const randColor = () =&gt; '#' + (0xffffff * Math.random() | 0).toString(16).padStart(6, '0')
I'm glad this encouraged you! Your comment encourages me to write a blog post to describe the journey from a dirty script to a full npm package 😊
Great link, thanks
Hello, we have two problems here: 1. The first one, the problem known as 'the source of thruth' 2. The second one, is known as 'invalid the cach' Let's trying to understand and to fix each one separated : 1. Source of thruth (WRITE side): we can reformulate it as 'from where and how my data has been modified ?'. The problem with shared data, is not on the 'read'. It is on the 'write'. A common solution is to provide **a SINGLE manner to mutate the 'data'** (said 'setState((prevState) =&gt; nextState)'). If you can modify the data where and how you want, you will finish with a 'unpredictable state of your data'. And unpredictable state finish on unpredictable behavior. 2. Invalid the cach (or rerender your view) (READ side): The problem with the cach is to 'know when to invalidate it'. Or for the view, when to rerender. This the 'read' problem. A common solution is to provide **a SINGLE manner to read the 'data'** (said 'getState()'). Each time you call getState, you get your data. But the question, is when do you call 'getState()' ? In a game/canvas/frame base interface, is in an infinite loop `while (true) getState();` easy. But in a wep app, when do you call 'getState()' each second ? each millisecond ? The pattern that resolve this problem (when to read the new state) is known as 'Observer/Observable pattern'. _Note : All solution of state management are base on this pattern. Why ? Because this is the only one that resolve this problem._ So, what is the pattern : we can reduce it as : 'I have many *Obervers* that _observe_ (listen) an 'Observable'. Each 'observer' will be _uptated_ when 'observabable is updated'. Done. Resume : * Store.observe : (observer) =&gt; Store.observers.push(observer) * Store.getState : () =&gt; Store.state * Store.setState : (nextState) =&gt; Store.state = nextState; Store.update(); * Store.update : () =&gt; Store.observers.forEach((observer) =&gt; **observer.update()**); Note: observer.update is the **contract** that link Observer and observable. Link [wikipedia](https://en.wikipedia.org/wiki/Observer_pattern) Have fun, Cheers !
The amount or ternary if-statement abuse and oneliner hyperfocus is terrifying.
Lookbehinds are not supported in node.
*how it went
I'm no wordsmith myself, but the typos and grammar mistakes make this pretty hard to take seriously :/
One possible middle ground would be to increase the client's view to display an extra like, then disable the element (visually speaking - fade it out, greyscale, whatever), and then 're-enable' it when the server confirms the value has updated and also reflect the 'like count' to display the result from the server too. This leads to clear indication of user intention, confirming they have clicked the button, and ensures that the data displayed is correct once that has been confirmed with an interim figure being displayed indicating 'psuedo-truth' (essentially an assumed truth until actual truth is confirmed).
They left out JS-Beautify. I have found that hitting a file with Beautify and then Prettier can do a better job than Prettier alone. 
I wouldn't use them in production for at least a couple of years.
I use [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer).
If by real world you mean manipulating hardware, then I will give you an example. The reason I first got into the web development business was because of the work I was doing with my raspberry pi. I built a robot, and wanted a way to control the robots movement using the accelerometers in my smart phone. So I learned html, css, and javascript to create a webpage which collects the accelerometer data from the clients device and sends it over wifi to my raspberry pi to control the motors. This is of course a bit more advanced than simply using javascript, but I just wanted you to know that it is possible to do things like this if you teach yourself a few extra things like python and IOT. It is pretty "real world" to me. But for the most part, I agree with ejfrodo. Just build something. Even if it means creating your own version of other peoples applications for practice.
You do other eli5 on request?
Lol. I teach web development for a living, so I can eli5 those concepts, but ask me to explain anything else and you’ll be sorely ~disappointed~ confused as hell.
Man, thank you. I'll have to spend quite some time going through all of this, but this is exactly what I was after. Just out of curiosity, do you have a lot of experience in traditional OO languages? Seems to be that those who do and then get into JS have a much better grasp of how these things work.
Escape the parentheses. They aren't valid URL characters.
Sorry, should have said that I've tried %28 and %29, still no dice.
Testcase failed: * valueParser(JSON.stringify("\u2028\u2029")); * valueParser('3.2e14');
I was repeating Sean's statement, not asserting that myself, but I'd agree with him it's unlikely the plugin system will need to be changed drastically again in the future. 
Have you tried `encodeURIComponent(url)` (as opposed to using the hard-coded characters)? It should at least allow us or yourself to narrow down whether this is a URL issue or something else.
I have no experience whatsoever in classic OO languages like Java/C++. I do have previous experience in Python which has classes but they're not as critical to how Python works as in traditional OO languages. What did help with understanding things like `new.target`, `super()` and other such weirdness is that Python is absolutely full of them. Ridiculous amounts of things can be changed in Python at runtime by using various "magic methods" (e.g. `__init_subclass__`, `__getattribute__` and so on). In comparison JavaScript contains really only a few meta-programming things like `new.target`/`Proxy`/`Reflect` and some sort've special `Symbol` methods (like `Symbol.iterator`/`Symbol.hasInstance`). But for the most part there's not a lot of meta-programming stuff to learn in JavaScript. Unlike Python, JavaScript has a lot of historical baggage (as it's never been successfully versioned, if JavaScript code worked years ago it needs to still work now). For example JavaScript is full of weird and strange things like `typeof null === "object"`, `Symbol.unscopables`, "thenables", "wrapped primitives", two different parsing goals, `__proto__`, "exotic objects", most of [Annex B](https://tc39.github.io/ecma262/#sec-additional-ecmascript-features-for-web-browsers), amongst others. I've found the best way to understand many parts of JavaScript is to simply read [the specification](https://tc39.github.io/ecma262/), it does take quite a bit of getting used to. But often-times there's inadequate detail in blogs, MDN or stackoverflow that sometimes it's easiest to just check what exactly the specification says it does. Unfortunately unlike Python where the documentation is almost the same thing as the specification in a lot of ways, the JavaScript (ECMAScript formally) specification is quite difficult to read (especially the first time you see it, it'll probably look like nonsense (it's also not very easy to navigate)). The specification is very authoritative though, so if it says something works a specific way, it works that way. For example without any prior knowledge of what `super()` does we could've derived it from [the definition](https://tc39.github.io/ecma262/#sec-super-keyword-runtime-semantics-evaluation). Which basically outline the steps I mentioned (get `new.target`, do `[[Construct]]` on the SuperClass, create the `this` value inside the class, return it). In fact just reading that part of the spec I learned something new, and that's that `super()` also returns the current value of `this` so `super() === this` is true. Pretty pointless really, I can't see why you'd need to use it when `this` is available anyway, but it's mildly interesting.
&gt; We need to remember though, that all the work is done by prototypes under the hood. It means that ES6 classes act just as syntactic sugar. Why is this *so important*, exactly? Prototypes are definitely not the only "under the hood" thing happening when you run your code.
Will have to try that out, thanks!
Would you mind posting your code? I think it'd be much more helpful to show you what's wrong with what you've written than just give you a working example.
Second.
That's fair. I'll adjust. :) Thanks for the feedback.
I don't want to be negative or discourage you from continuing to create new tools that help you and all, but there's really no reason anyone should ever use this. Even the motto is false. You still have to store the timer in a variable. This library is just a convoluted way of accomplishing nothing.
Well, as soon as they are in Node you can use them in production there...
Yes, I was thinking on browser-side.
is a great skill to be able to eli5 some concepts. what is your site / academy to check you out?
Agreed. I use solarized and the first brackets are basically invisible. 
In the end, it all boils down to being more precise with the expression "share data with other parts". And what I mean by this is that there are _many_ (at least a handful) different ways to do that, depending on a number of factors/goals. There isn't just one "best" way for all situations. This, making some large decision based on the needs and goals of the development, is what we call architecture. So, the question, better formulated, could be something like: **What typical mechanisms and structures are there to fulfil the _general_ goal of "sharing data"? What are the strengths, risks, and weaknesses of each one?** I'll surely forget some, but here are a few and how to think about them: ### Global scope storage (i.e. global variables) This is the most basic one. It does have, at least, one strength: Simplicity. Implementing it requires little to no additional code or structures; it is a feature of the language itself and so it requires no additional development to obtain it. This makes it **quite cheap**. Of course it's also, _probably_, the most risky solution. _Using_ it generally requires constant attention and very careful naming and synchronization. It _sort of_ works for very small developments, with only one person involved. But in any other cases, the risks of conflict and collisions grows much too quickly and soon the cost of development (that constant attention mentioned) surpasses any savings you may have obtained. Also, it provides no management services, so any piece of code is free to access (read, write, modify, delete) the data. ### Nested tree-like scoped storage This is, in some aspects, a variation on the above. Instead of throwing everything on the _global_ scope, you create a _nested_, tree-like structure of scopes and store data "as high as needed, but as low as possible". Try to search through the [source code of some of prettydiff's parts](https://github.com/prettydiff/prettydiff/tree/master/lib) for a particularly strict version of this. The idea is that of nesting functions and putting data in the lowest scope that is shared by all the parts that will need to access it. This is, again, _quite cheap_ to implement. It is still a language feature and so it requires no development to obtain it. It improves on using the global context in that it does allow _some_ access control. Inside each context, lower components are all still able to access the data without any sort of management, but at least other pieces of code outside the context cannot access it. So you _limit the reach of sharing_. On the other hand it does introduce additional development complexities. You need to carefully consider the nesting of the various parts, and it requires that, to some extent at least, you group together otherwise separate parts just to be able to share the data among them (which, in turn, tends to create huge pieces of code). There's also a limitation in that the _scope tree_ cannot have loops, so if one particular piece of code needs access to two otherwise separated scopes, you're now forced to merge those scopes (or abandon this whole approach). ### Direct data requiring and management In this approach, a piece of code is the sole owner of its data and provides a mean for other components to _ask_ for it. This is the first step towards _componentization_. Each component owns its data, as I said, and it has some access API (it may be as simple as single a function/method) other components can call. This is mostly your `getData`/`setData` example, though it may be more general. I'm not completely in agreement with your evaluation. I don't think this is the same as _global state_. There is, at least, some data and access management that is performed (or at least **can** be performed) by the data module. Also, not all data has to live together. You can have different modules that own different pieces of data. The actual risks and weaknesses of this approach are that you need direct access to the module and you need to know _which_ module owns which data. There are also other risks, such as needing careful thought of the design for who owns which data, which is sometimes easy but sometimes not. **Note: The above three options only concern themselves with data storage and access, but they do not offer anything in the way of _change notification_**. **Note also that the _following_ approaches are not always mutually exclusive and most can (and sometimes should) be used together.** ### Owned Events / Full Components This is what you referred as using `EventEmitter` but more generally known as using Events and Observers. Here a Component, not only is the owner of its data (i.e. the only one responsible for generating valid content for that piece of data) but also takes the responsibility of _notifying_ those interested in knowing about changes to that piece of data. Again, I think your evaluation is somewhat confusing. You point out some risks but I don't think they're very precisely identified. You mention _a_ risk but it is not _intrinsic_ to the approach. That is, you mention consumers of the notifications storing the data received as its own and that "Data is now being stored in, say, 8 places around the application". But this is not totally correct, at least not conceptually. The emitting component is still the only _owner_ of the data. It is only _stored_ there. A consumer receiving a change notification is not automatically transformed into a trusted source of storage for that piece of data. At most it can store it _internally_ and the effect of this is generally manageable. But then again, if you wanted to be strict, consumers do not _store_ the data locally, what they may store is their own data derived from the notification received. This approach works quite well for a lot of scenarios. It can be improved if the _events_ are wrapped into _streams_ because that makes more explicit the idea of _derivation of state from change notifications_. The main limitation it has is that consumers _have to know_ the producer. They need direct access to _one certain producer_ to subscribe to its notifications. This in many cases is perfectly reasonable, but in others more decoupling and anonymization would be preferable. ### Centralized Messages / Message buses / Anonymous events When the limitation above of consumers having to know/care about the producers becomes a _coupling_ problem, you may introduce a message bus. Any interested parties subscribe to the message bus itself, and anyone my post anonymous, omnidirectional messages to the bus. You will generally have channels on the bus so that interested parties subscribe only to certain _types of notifications_. This has the advantage of de-coupling producers from consumers, but this should not be considered a total advantage over direct Observers. More generally, a message bus is used _in conjunction_ with Observers, serving different purposes and cases. The first risk is that the bus is omnidirectional and, while you _can_ implement access restrictions, it's generally not worth it. But the _main_ risk is that it provides _very strong de-coupling_, and this _may_ make it very hard to follow the flow of the actions in the whole application. You may _may_ lose sight of the big picture and have difficulty debugging weird cases. The main strengths of both Observers and Message buses are de-coupling and de-centralization (note that while the message bus is _one_, centralized entity, the bus is **neutral** to the flow of data through it, so the _flow of data_ becomes decentralized). This makes a good fit for component-based structures, and teams of people working more or less independently. It does need some shared, common agreements and understandings for stuff like message formats or channel names and organization. ### Managed storage, unidirectional data-flows This is the idea behind Redux. The above event based (both Observables and Message bus) flows have the characteristic of being decentralized and omnidirectional. They also do not actually manage _data_ but _data flow_ or notifications. This other approach proposes a different idea: it both _manages the data_ and makes the data flow unidirectional. This means that there _is_ a sort of globally-scoped data storage but that it is _managed_. You cannot access (read, write) it in just any uncontrolled fashion. Instead it manages how it can be written and how it is read. And in doing so, it also manages how the data flows. It does so by requiring that you write your "consumers" and "producers" in a particular way. So, there's what could be called its main weakness -that it requires a certain structure in (most of) your whole application- and so it may or may not _be worth it_ to use Redux. There are some variations on Redux, particularly where the scope is concerned. That is, some variations do away with the idea of a _unique_, central storage scope and instead lean towards having separated/scoped storages. ---- Two more things: One, as I said, no single solution is "always better" than the rest, despite what some people would tell you. Two, I had to write this in a bit of a hurry, so I'm sure I've left out interesting stuff. Sorry.
Two reasons here why it is useful to use. First, it keeps your code cleaner you should not declare a global variable if callback is not in the same scope. Second, you may clear a timer from any place (module). Yes, for multiple instances you have only FIRST point :)
&gt; you should not declare a global variable if callback is not in the same scope Look, either you're making the `setInterval` return value global, or you're making the `SetInterval` instance global. It makes no difference. Your arguments simply don't hold water. I don't want to get into a long argument about this, but I challenge you to try to come up with one single example of where this library results in cleaner code. I can almost guarantee you you will be unable to.
&gt; Now that's now all, super() also tells the super-class (Array) what it's creating a sub-class for (MyArray) so that it knows that the array it creates when .slice is called on this instance it should create a new MyArray instead of an Array. Hence new MyArray().slice(0, 5) will still be a MyArray. Huh, that's really strange behavior. How does that work? If I define my own class, its methods will either _always_ return instances of the subclass, or never return instances of the subclass: function TestClass(wrappedValue) { this.wrappedValue = wrappedValue } TestClass.prototype.getConstSuper = function() { return this.constructor } TestClass.prototype.duplicate = function() { return new this.constructor(this.wrappedValue) } class SubTestClassSuper extends TestClass { constructor(...args) { super(...args) } getConstSub() { return this.constructor } } function SubTestClassPrototype(...args) { TestClass.call(this, ...args) } SubTestClassPrototype.prototype.getConstSub = function() { return this.constructor } Object.setPrototypeOf(SubTestClassPrototype.prototype, TestClass.prototype) let subTestClassSuper = new SubTestClassSuper(2) console.log("subTestClassSuper =&gt;", subTestClassSuper) // Object { wrappedValue: 2 } console.log("subTestClassSuper.wrappedValue =&gt;", subTestClassSuper.wrappedValue) // 2 console.log("subTestClassSuper.getConstSuper() =&gt;", subTestClassSuper.getConstSuper()) // function SubTestClassSuper() console.log("subTestClassSuper.getConstSub() =&gt;", subTestClassSuper.getConstSub()) // function SubTestClassSuper() console.log("subTestClassSuper.duplicate() instanceof TestClass =&gt;", subTestClassSuper.duplicate() instanceof TestClass) // true console.log("subTestClassSuper.duplicate() instanceof SubTestClassSuper =&gt;", subTestClassSuper.duplicate() instanceof SubTestClassSuper) // true console.log("") let subTestClassPrototype = new SubTestClassPrototype(3) console.log("subTestClassPrototype =&gt;", subTestClassPrototype) // Object { wrappedValue: 3 } console.log("subTestClassPrototype.wrappedValue =&gt;", subTestClassPrototype.wrappedValue) // 3 console.log("subTestClassPrototype.getConstSuper() =&gt;", subTestClassPrototype.getConstSuper()) // function SubTestClassPrototype() console.log("subTestClassPrototype.getConstSub() =&gt;", subTestClassPrototype.getConstSub()) // function SubTestClassPrototype() console.log("subTestClassPrototype.duplicate() instanceof TestClass =&gt;", subTestClassPrototype.duplicate() instanceof TestClass) // true console.log("subTestClassPrototype.duplicate() instanceof SubTestClassPrototype =&gt;", subTestClassPrototype.duplicate() instanceof SubTestClassPrototype) // true console.log("") ([Try in JSFiddle](https://jsfiddle.net/Ajedi32/aq34oodq/28/)) How do you define a class whose methods have different behavior depending on whether it was constructed with `super()` or `superclass.call(this, ...args)`?
I second BenjiSponge. This API is really questionable. There is no good reason to avoid variables, if your code runs in global scope you need to IIFE it anyway.
Yes, when you set an interval you can clear it from any place of your code (module) and it works only for one instance. Should find a way how to return a new instance for each import (sth like that) Yes, for multiple instances you can not clear them anywhere. Good points! Thanks!
THANKS! how would I make it so that there is only 1 &lt;script&gt; source? (and get rid of the link)
Considering it still hasn't been corrected, I would say it was needed, OP simply hasn't bothered to heed the message. Go figure.
Agree. This is UMD package, so it is in IIFE
huh, I thought this was already a thing. At least I can remember using lookaheads sometime last year...
X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block The page has these headers that the other page doesn't. I'm guessing they're attempting to prevent all kinds of things, and that is interfering with your attempts. It may or may not actually be these headers. It might be something on their server instead.
At your stage, you should be reading a book a week. They don't all have to be great, the important thing is getting multiple perspectives and deriving your own personal style.
Arrow functions have at least one more useful feature, which is that they throw when called with `new`.
Promises Imagine I promise you a present when I come back from my business trip but you being a big boy want to know 1. What you can do with the present 2. Want to know what's gonna happen if you don't like the present. So I write on a piece of paper one side what you can do with present this side called fulfillment on the other side of write what you can do if you don't like the present this side called the rejection . The paper called the promise and its going to be rejected or fulfilled in an unknown time in the future Arrow function Same as regular function but written differently when you are older ask me about the difference again. 
This finally explains why vscode was taking 1+ GB. I disabled it too now. Thanks for the heads up! 
&gt; Btw, I also don't like GraphQL because it's overhead for small projects dealing with REST is certainly an overhead you can skip while using logux or GraphQL. For me GraphQL wins hands down. Typesafety all the way from the backend to the frontend. Logus only seems like someone is trying to make Redux work for client-server communication. Logux is a joke compared to GraphQL.
One thing that I'm thinking is to store intervals in hash table way. It will work for multiple instances. ``` SetInterval.start(callback, 1000, 'inter_1') SetInterval.start(callback, 1000, 'inter_2') ``` ``` SetInterval.clear('inter_1') SetInterval.clear('inter_2') ```
from the context I think "real world" just means "at the level of industry standards" or "in production", nothing about it really implies physical manipulation of hardware was part of the question
Scratch you own itch. Find something in your every day life that you would like to see improved. Make a plan how can you improve it with Javascript in one week. If you can't, find the second thing you would like to see improved and so on until there is something that you 1. You would like to use 2. You can build in one week
Yeah, sorry. It started as a two-parter and we merged it into one. Nope, Chatkit is a hosted API. You send chat data from the client through Chatkit, and Chatkit will broadcast it to other clients in real-time. It works with Node on the server, but also with Go, PHP, or any back-end language that can make HTTP requests. On the client, there are SDKs for JavaScript, Android, and iOS. 
Thanks for the links. I did see this earlier, but didn't get it in simple terms. Let me try it again. 
&gt; Dealing with REST is certainly an **overhead** And u say to use GraphQL lul Why something _simple_ is always considered as a _joke_ compared to something huge? I don't understand this position. Simplicity is a core measure for me because development should become easier, not harder. With GraphQL we should learn its syntax, best practices, learn Relay. With logux you just dispatch actions like it was before and do no huge work more. Of course, I don't say that GraphQL is bad. But _joke_, wtf dude And yeah that "someone" _who's trying to make Redux work for client-server communication_ is author of PostCSS and Autoprefixer. 
The main goal is to clear interval anywhere and do not use a variable.
Haha. :)
&gt; And u say to use GraphQL lul I didn't mean performance overhead. I meant mental overhead where you map your API methods to HTTP and where you map your errors to HTTP error codes. Logux is simple, I agree with that. Just too simple for my taste-I can't imagine building even just a slightly more complex api.
Not web apps per se, but examples in FP using JS as blog posts https://glebbahmutov.com/blog/tags/functional/
I'd recommend reading that and coming here with a more specific question about what you don't understand. You asked people to explain two broad things which each would need a short article to cover. Here's some videos that you might find useful if those docs don't help https://youtu.be/2d7s3spWAzo https://youtu.be/6sQDTgOqh-I
Thanks !
Honestly, I have a very hard time wrapping my brain why people would not want to use Typescript for anything moderately complex. It just pays off so quickly in terms of stopping bugs and ensuring a basic level of correctness, and once one understands the type system the code is so much easier to read. 
Oh awesome, thanks!
Originally we wrote this as a two\-parter than condensed it into one tutorial. I do agree it's too long! Chatkit is a hosted API meaning chat data is sent from clients to Chatkit and then broadcasted in real\-time to subscribed clients. Behind the scenes Chatkit uses sockets \(and everything happens in real\-time\) but that is intentionally hidden. With Chatkit, you should never have to worry about web sockets or infrastructure, just building an awesome app! In this tutorial, we use Node but there are also server libraries for Go, Ruby, etc. On the client, there are libraries for JavaScript, Swift and Kotlin. You can even use them together \(for example, if you're building an Android and iOS version of your app\)
I've been using redux-saga for the last year and I still don't get what the benefit of using generator functions is. Why not just do the same thing with normal functions or async functions?
Gotcha. Looks very well written. Thanks :)
-- Mac only Why? Good job on the project but you can probably make it cross platform without much hassle
I use a combination of promise and async await because i hate that i have to write await only in an async function.
Sorry about that. People are working on it, I simply didn't have any device to build these other executables. Unless I missed the fact I can make it cross-platform when only running macOS? Thanks
Are there any good resources for learning machine learning using JavaScript ? From what I've have seen, most of them use python...
very cool article and presented in a really interesting way
HTML and CSS are not programming languages.
Makes a lot more sense now! thanks
It's because generator functions are pausable, and the code that's calling the generator can "inject" values: const iterator = someGeneratorFunction(); iterator.next(someValue); This allows a saga function to return _descriptions_ of the side effects it wants executed, like making an AJAX call, and the `redux-saga` middleware can handle the actual work and resume the saga function when the effect is complete. I'd suggest reading through this great [three-part series on how generator functions and `redux-saga` work](http://formidable.com/blog/2017/javascript-power-tools-redux-saga/).
I should also mention that the form works well on Chrome, but when trying to submit your information with Safari / Firefox, nothing happens when clicking the button. 
Ok cool, I'll have another look too
Using generators to control async logic gives a lot of power and flexibility. It lets you create logic that can act like "background threads" that can be started and canceled. As a similar example, see the [`co` async flow control library](https://github.com/tj/co).
I've always assumed that the most knowledgeable people are those who go as close to the source for their knowledge as possible. Rather than looking at random bog posts (which can sometimes be really useful) better to look at the specs, official docs etc. I'll be honest, it's going to look incomprehensible to me for a while, but thanks for giving me the motivation to try and start working through it :)
I feel like you deliberately made the promise and callback version extra long. This works as well and is about 10x faster than yours since it runs in parallel. const promises = [] for (let i = 1; i &lt;= 10; i++) { promises.push(slowDouble(i)); } Promise.all(promises).then(results =&gt; { let answer = 0; results.forEach(x =&gt; answer += x); console.log(answer); }) If you actually meant to make an example where the promises needed the result of the previous calculation, then it could also be written a lot shorter. Such as let promise = Promise.resolve(1); for (let i = 1; i &lt;= 10; i++) { promise = promise.then(x =&gt; slowDouble(x)); } promise.then(x =&gt; console.log(x)); I am not saying async await isn't great. I love it in C#, but I feel promises work very well in JS.
I tend to follow the pattern of take an action, do something, dispatch another action. My experience has been that anything more complex quickly becomes an unpredictable tangle of imperative spaghetti. Maybe I'm just doing it wrong, but I don't see why the majority of web apps would need the sort of power you describe.
I'm probably going to get a pile of downvotes for my troubles, but here goes. . . **Question 1:** When was the last time you used, practically speaking, `setTimeout()`? &gt; But it's just a place holder. I get that, truly. It is, however, an impractical placeholder. **Question 2:** When was the last time you used, practically speaking, a database call, or an event listener, or node `fs.readfile`? There's a bajillion examples on the web that use `setTimeout()` as an example in this context. The lack of practicality makes the examples a couple of steps removed from reality, making it more difficult to understand. I've had a hell of a time trying to get my head wrapped around callback &gt; promises &gt; async/await. And I've seen dozens of blogposts exactly like this and none of them helped. I did finally get something working, but it came from a the practical examples from Stack Exchange, reddit posts, and [this page](https://developers.google.com/web/fundamentals/primers/promises#promises_arrive_in_javascript). And I'm still not quite sure of it. My main point is that lessons like this hit better with a ground-up explanation and practical examples.
Yes, you are right. However in my exmaple, i assumed that they are not running in parallel which i didn't state. Sorry for about that:(
I figured as much, but as you can see from my second example that can actually be shortened even more than my first example.
Yes, I get that it's simple. My point is that using, say, an eventListener example is no more complex, but is also actually useful.
Made with Electron, yet Mac only? There's something definitely missing here. 
I never said that "the majority of web apps" would need sagas. I'm just explaining how they work and why they're useful. In our app, we do have some very complex async logic that needs to be triggered based on certain dispatched actions, respond to actions that were dispatched when data was received from the server, and cancel active "threads" when certain conditions are met. Sagas are great for that use case. I'd suggest reading through some of the tutorials and articles on sagas 8 have listed in the [Redux Side Effects](https://github.com/markerikson/react-redux-links/blob/master/redux-side-effects.md) section of my React/Redux links list , as well as the articles in that section comparing different side effects approaches. 
not sure what you mean, it's already only 1 script, and I don't see any link
&gt; I can't imagine building even just a slightly more complex api What do you think may become a problem? It's just like you don't need to do API requests at all
Very random, but: https://pakastin.github.io/shebangs/ 😄🎶
Everyone should click through and scroll down a bit just to see how Vez updates the globes with examples of the creation process. Awesome!
A practical real world example is always better than an abstract example. You can sit in class all day watching film and talking about the abstracts of driving a car or interviewing for a job. But nothing substitutes for seeing it in use. An example that used an eventListener will absolutely pop back into mind when seeing or needing to use one. 
I love async/await and promises as much as the next guy. However, showing the tired example pyramid of doom as a prime reason of why we should not use callbacks is silly. Every time I see the pyramid of doom I role my eyes. Nobody I know codes like that. We all use named functions whenever we use callbacks (admittedly rare these days). 
Specific IDE for a framework and restricted to 1 OS? :\ Why not just make an Atom plugin or something?
Why Flow instead of TypeScript?
I'm in the same boat here. I like the idea, but it would be way better as a plugin for something like VSCode. Still good work though.
It's a nice editor. Absolutely amazing documentation. Only con: it's sitting on jQuery. So if anyone uses React, Vue or something else, it pulls in bunch of extra dependencies.
It's just a hobby project. He said in the article he just didn't have a PC or linux machine kicking around to test it on.
To be fair it's a hobby project. It would probably work on something else, he said he just didn't have anything to test windows/linux with.
Use `document.querySelectorAll` to make it less likely that a website defines the same function, which I have seen before
You are right, he is a moron.
I don't think you were wrong, however, one thing to keep in mind is that when you interview, every question and answer has to be viewed through the lens of the potential employer. Just like you should tailor your resume _on a per-employer basis_, you should also tailor your interview responses based on what you know about their business. That is to say, if it's a company of 15 people, and all they do is simple little 'homepages' for mom &amp; pop bookstores, then they're probably going to agree with you that jQuery still has a use. However, if you interviewed at Facebook, or most any other large corporate shop, they'd probably laugh at the suggestion of not using a framework -- the larger the company, the more inclined they are to use a framework. And while it's a bit crazy to say take _"using a framework is essential for any kind of website"_ at face value, it's probably meant to be taken in the context of what they do at that company.
&gt; Only con: it's sitting on jQuery. So if anyone uses React, Vue or something else, it pulls in bunch of extra dependencies. pretty big con in my book, big enough to not use it IMO.
The more relevant situation in which to use jQuery is when you need to support ancient browsers. Most browsers are standards-compliant nowadays, but a tiny fraction are still on IE10 and below, and a few team leaders insist on supporting them - which would be done most easily with jQuery. If there *isn't* a need to support ancient browsers, and the site isn't using frameworks that are themselves dependent on jQuery, I don't think there's much reason to use it. DOM manipulation can be done just as easily in vanilla JS without introducing a heavyweight dependency. &gt;using a framework is essential for any kind of website. For larger sites, sure, but I don't think that's the case for smaller ones. You *can* use a framework wherever, if you want, but I think they're more helpful in larger projects than in smaller ones.
&gt;Both $$ and querySelectorAll seems to behave the same for the most part Huh? $$ (which, to the interpreter, is just "a possible variable name") would only be defined if a particular script on your page aliases $$. Always use qSA, or explicitly alias $$ to qSA before using $$.
I would also like to mention [Redux-Logic](https://github.com/jeffbski/redux-logic) as an alternative. It supports the generators of Redux-Saga as well as the Observables of Redux-Observables. Maybe it will help some of you.
Unless his mac is over 12 years old, that same hardware will run Windows and Linux. But I get hobby projects. I certainly wouldn't care to make things work outside of Linux for a hobby project.
I will probably publish more material on machine learning in JavaScript in the near future. This might include an introduction similar to my Machine Learning From Scratch series, but with JS code examples.
At least in my circles, most JS devs use Mac
Not too sure about the double dollar sign, but know that the single dollar sign alias works. https://developers.google.com/web/tools/chrome-devtools/console/command-line-reference#queryselector
Wow, some serious work went into this, well done! Do you have any insights into translating some canvas mapping service like mapboxgl onto a 2d/3d sphere when very far zoomed out?
Amazing! This shows power of JS, I really like these interactive documents, I wish to see more of these type of articles. 
Dude, that second example. It's amazing, I had no idea you could do that.
Other than legacy codebases, prototyping, and tool familiarity reasons, there aren't many cases where it makes much sense to use jQuery over something else. But this is not the same as saying frameworks are _essential_. The question of whether there's a reason to use jQuery in 2018 isn't binary between jQuery and frameworks. There are many other tools in between that contribute to making jQuery less relevant. So I think the interviewer was a bit shortsighted if they explicitly said that frameworks are _essential_. With that said, for an junior position interview, if you're going to claim "there's nothing wrong w/ using jQuery", you're going to have to make an extraordinary case for why you said that, because the industry as a whole does think that there is something wrong w/ using jQuery (i.e. it does not lend itself to very maintainable UI code) I wouldn't actually blame the interviewer for getting a bad signal from you if you enumerated a reason for _not_ using a framework - and a weak reason at that - but mentioned no downsides for choosing jquery/vanilla, and no upsides for frameworks. Next time, you'll want to elaborate on both as much as you can.
See now if you had put the amount of effort you just put into that comment into something productive instead, like the top comment in the thread, none of this would have happened. 
well thank you. been working with js and promises full time lately and had to use this pattern to chain a varying amount of xhr requests
It's on github, how hard can it be to build it yourself? If anything instead of complaining go and support it by offering windows/linux builds.
Well, the things about Bit is that the shared code doesn't actually live in it's own repo, and no other services are coupled to that repo or its development. Instead, you can think of it as "manged copy-pasting" - where you can keep multiple instances of the code in different services, while Bit will track and sync changes between them (depending on your own update strategy). So- no coupling between services and they are not tied to an external library.
New API has been added. No variables, clear interval anywhere you want, single, multiple instances :) Check it out - https://github.com/shystruk/SetIntervalJS
Biggest con to me is the pricing, 99$ for a hobby project. If they made it free for hobby projects/learning people might try to get it into their organizations.
Oh if you wouldn't care then just make a build for your platform then. Job done.
Typo: A sequece containing only zeroes is always graphic.
wow, so helpful, much downvote.
I'm normally a fan of Fun Fun Function but this was very odd, they took neat readable async/await code and turned into a promise-based mess, then claimed the new code was better. Is this some sort of a test? Or are they going down the clickbait route that the title implies?
So where would the while(true){ } go in this existing code?
VanillaJs, my favorite framework!
really great library , I don't even think whether to use it or not http://vanilla-js.com/ 
Those are excellent resources, thanks!
In browser consoles (or at least in Chrome's console), [there's `$$` function](https://developers.google.com/web/tools/chrome-devtools/console/command-line-reference#queryselectorall) for convenience.
The globe is spinning the wrong way. It should be spinning eastwards. You know this because the UK experiences midnight before the states.
Was gonna post something similar, but I like your code better.
Hi /u/league143, For javascript help, please visit /r/LearnJavascript. Thank you!
Got it, should I delete this then?
Nah, it's filtered anyways.
You can name your ready function then pass that in to the complete handler in the last animate call: $(document).ready( function animateGlow(){ // ... $(".glow").animate({ top: "-=141px", }, 1500, animateGlow ); This way, when the last animation step completes, it re-calls the function that started the animation causing it to start over again. Not sure if you'll get what you want, though, since you're animating each right bottom left and top, subtracting from all of them. You'll end up with an infinitely growing box rather than something that looks to be repeating.
I used setTimeout and fs.readfile today, actually...
Love the article, but I have to ask: Isn't `.website` the most redundant TLD ever? What's next, `.www` so that someone can have `www.www.www`?
Well done. Thanks.
how did you use setTimeout? just curions. 
Posting data to a different domain is generally not preferred. So, let the form be posted to your own server side script (e.g. PHP), and let the PHP script make the actual registration to the MailChimp server.
Some parts are for backwards compatibility but it's more so that if you add additional methods to subclasses when using Array methods you get instances of the subclass back. For example: class ElementCollection extends Array { constructor(selector) { if (typeof selector === 'number') { // Called this way via methods like .map // .filter, etc super(selector) } else { super(0) } for (const element of document.querySelectorAll(selector)) { this.push(element) } } find(innerSelector) { const result = ElementCollection.of(/* Empty initially */) for (const elem of this) { for (const found of elem.querySelectorAll(elem)) { result.push(found) } } return result } } const elems = new ElementCollection(".someClass") // ElementCollection of all elements that match ".someClass .someOtherClass" elems.find(".someOtherClass") // And regular Array operators continue to work elems.map(elem =&gt; elem.parentElement) Now the machinery that makes this work is [ArraySpeciesCreate](https://tc39.github.io/ecma262/#sec-arrayspeciescreate) which effectively just checks if the current `this` value is an "Array exotic object" (Step 3. IsArray(originalArray)). If it is it grabs the `.constructor` property (e.g. `[].constructor === Array`, `new ElementCollection(0).constructor === ElementCollection`) and simply uses `new` on it. Once that's done methods like `.map`/`.filter`/etc simply copy over whatever values they need onto the newly created instance. A good question is why does `.map` need to check if the `this` value was created via `Array` or a subclass? Well that's where some legacy issues come in, in the past there's been code that uses `Array.prototype` methods on "Array-like" objects (e.g. `Array.prototype.slice.call(arguments, 0, 3)`). Even though most uses of that are long gone now, there's plenty of code that will never be changed that depends on it. As such the only safe thing to do when using `.map`/`.slice`/etc on an unknown object is to check if it's really an "Array" or not before returning instances of the subclass.
I'm afraid I don't know how to do that just yet, but I'll ask Google around. Thanks for the answer, it's a starting point.
Thank you!!!
Pardon me, I think I don't understand. Isn't the coupling still there, yet implicit, now you have to sync between services? Also, could this possibly introduce merging issues when two services are changed at the same time?
I know this is controversial, but there's absolutely use cases for jquery. The number one off the top of my head is with Bootstrap, which ships a number of interactive components out of the box that are built using jquery. So, if you're building a simple static site (no fancy backend work or user customization) and you want to use bootstrap, and you want its dropdowns to work, you'll need jquery. and if your interviewer is dropping trick questions, they're either not a very good interviewer or it's not a very good company to work for - or possibly both. they probably value group thinking and obscure technical details over context &amp; curiosity to find out why things are the way they are. 
Sure, give each slider the *same* change listener, and have that change listener query the values of each slider and come up with a result, and populate the element with the result.
Can I file the first bug? ;-) it should be “react-lego”, there is no “s” when pluralizing LEGO.
&gt; if you interviewed at Facebook oh man Facebook is not just any corporate job, They certainly don't ask questions such as these. They couldn't care less about your opinion on jQuery. So long as you know your algos and CS.
Fortunately an interview goes both ways. Factor that experience into whether you think the company would be a good place to work.
_Boilerplates and starters are not a part of this conversation_. We're talking about pure webpack vs pure parcel. Though it doesn't seem like this conversation's going anywhere, so I'm done with you.
TypeScript support is built in, no extension required
I completely disagree with the premise of your article. Mocking dependencies to a module is a perfectly legitimate way to practice TDD. It can help influence the design of the module making the code cleaner and also. The only principal that should probably be upheld is [don't mock what you don't own](https://github.com/testdouble/contributing-tests/wiki/Don%27t-mock-what-you-don%27t-own). This does come with the caveat that you do have to be aware that you are trading regression safety for tests having a large positive influence on the design of your code. To mitigate against this the solution is not types as you suggested but to have a good end to end test coverage with something like nightwatch.js.
Definitely! Mentioned at the very end.
Yeah, that's bullshit because usually if an interviewer wants to know if I can use jQuery it's because the company's website (or one website that I'll be working on) is a legacy codebase that has it peppered all over the place and they want to know that I can use it. This probably isn't a good person to work for, and on the plus side you know what kind of person they are now.
I'm curious to understand your opinion as well. Could you please explain the advantages of using callbacks with error first callbacks vs async/await with try catch blocks? I'm asking partly because your only reasoning was that it's a 'bastardization of the language' and only a 'feature requested by someone who doesn't write javascript often', which are both very subjective, and partly because I really want to understand :)
In point of fact, `setTimeout()` is very useful in test code, if you're mocking an async operation and need to defer the execution of an assertion until the next event loop. If you're in Node, `process.nextTick()` probably has cleaner semantics than `setTimeout()` with no delay, but the concept remains the same: jest.mock(someAsyncCall) .mockReturnValue(new Promise(resolve =&gt; { process.nextTick(() =&gt; resolve(someMockedData)); })) This approach is advantageous in situations like integration tests, where there's value in running your data through the same code paths your app does.
I think the idea is that in JS we don't have the concept of private variables. We have functional scope. So people turn to closures and wrapping functions around things as a way to isolate code and keep it from colliding with other code.
What do they have you doing as a JS dev? Just curious.
React
Wait, why can’t I use Jquery, Twitter Bootstrap and ASP.Net to make a web application in 2018?
If we wanted to do this a bit more functionally, (ie without mutation): ``` const promises = [...Array(5).keys()].map(slowDouble); Promise.all(promises) .then(results =&gt; results.reduce((acc, n) =&gt; acc + n)) .then(n =&gt; console.log(n)); ``` or ``` [...Array(5).keys()].reduce((acc, n =&gt; acc.then(acc =&gt; acc + n), Promise.resolve(0)) .then(n =&gt; console.log(n)); ```
[removed]
Dick question. jQuery is still incredibly popular, used in tons of applications, and for simple dom manipulation or for prototyping, is often a very competent, popular library.
Great point... And your pseudo-code shows a ***practical*** use of setTimeout(), as opposed to just throwing it into an abstract. Your example is more relatable than the severe abstractions in the blog post.
Yes. See here for a recent discussion: https://www.reddit.com/r/javascript/comments/85ldne/are_there_reasons_to_use_jquery_in_2018/ It's very widely used in older codebases - odds are high you *will* come across a situation in which you need to know it. That said, it's not something you should *use* in a new project unless you're deliberately trying to support extremely ancient browsers.
I would recommend Clean Code by Robert C Martin. It's Java based but it it easily applies to all other languages as Java is only used for the sake of example. He doesn't go into Java specific features. 
In questo video tutorial di javascript ES6 vedremo come utilizzare async await in combinazione con le API fetch
Yep. But first, understand why you need the library you are going to use. 
I do not know yet. I’m only learning any and everything that might help me get a job.
That's what I meant, TypeScript already works great, why would you use Flow instead? Well, maybe for React, but I didn't see any React plugins in the list either.
Then try to not jump into jQuery or any library just because. Read online about what jQuery offers and consider if you actually need it for what you want to archieve. If you do not have any personal problem to play with the library in, it might get trickier. IMO use vanilla JS until you consider you need some 'power ups'.
You couldn't use the 2D Canvas API to do this, but it would be fairly straightforward using WebGL. You can find tutorials online on how to create a sphere using an image as a texture. Instead of using an image as a texture it's very easy to just use the Canvas that mapbox-gl-js draws to as a texture for the sphere. You end up having two Canvases, one that you draw the sphere to, and one that mapbox-gl-js draws to that you use as the texture for the sphere. Using a library like https://www.babylonjs.com/ I'm sure you could get this working very easily. 
Do you mind if I ask how big your screen is? Are there any errors in your console? 
Working on an Electron app, and for some reason the preloaded js needed a timeout to properly read the DOM.
Anytime you introduce promises you lose the chance of executing synchronously. I’m speaking purely in terms of Nodejs right now. Using error first callbacks you leave the chance of a synchronous execution, ( same callstack ). Whereas if you use promises / async await then you’re pushing that callback into a different part of the event loop. Promises are still not quite as performant in Nodejs as well. I also write my code in a very functional way, which removes this appearance of callback hell and difficult to read code. So for me, people saying Async is easier to read is similarly subjective and shielding people from simply improving the code they write.
Thanks a lot Robby. If you can help with the linux version that would be really nice. Others can still help with design changes and optimization. Please let me know
First thing I tried was dragging the image in the editor on [this page](https://www.froala.com/wysiwyg-editor). Behaviour is flakey, and different to every free WYSIWGY I've used.
Very nicely done, some solid 3d and map / globe calcs in there too. Getting this stuff working nicely is HARD. Source: tried and failed to make anything this neat a couple of times. ;) 
Personally I feel there’s little reason to use jQuery, only because it doesn’t offer us much when it comes to modern browsers. But if you’re building something for a legacy browser then sure, jQuery could be a good option, rather than including polyfills for everything and dealing with inconsistencies. Saying that all sites need a framework is just stupid.
"react-lego" is taken on npm I would assume.
Depending on what tracking you look at, jQuery is used at from 80% to 90% of web sites today. About 30% of the web alone is Wordpress, and that has its own "framework" via themes and other server-side code. jQuery fills the client-side gaps in Wordpress themes. It's similar with other CMS systems like Drupal, they tend to be server-heavy and you don't want to fight them with client-heavy frameworks. So if you are working on just about any web site today you'd probably use jQuery because it's already being used. If you are starting from scratch and writing a "web app" that is state-heavy with a complex UI, jQuery is definitely *not* the right solution. Choose a modern JS framework. If you're writing a mostly-document web site that doesn't have anything more complex than a "Contact Us" form, you can use bare JavaScript or hey, splurge and use jQuery. 
Daniel Shiffman has a great YouTube channel called The Coding Train where he does a lot of JavaScript including a good series on neural networks. Highly recommended.
 const domElement= document.body domElement.style.background = 'url(https://i.imgur.com/yZxWDTL.gif)'
This question gets asked all the time, and this is always the answer. If you were using IE8 in 2017, you'll be using it in 2018, and you'll probably be using it until we've all got quantum computers implanted into our buttocks, at which point the architecture won't support it. The reason for this is to ensure that web devs can't have nice things.
Thanks for sharing this.
I made my first PWA! For players of the board game Vast: the crystal caverns, a reference tool. https://vast.seiyria.com
There are lots of egoistic developers out there, and your interviewer is one of them. You wouldn't want to work there if that is their opinion about jquery. 
We have a dev team consisting almost entirely of back-end developers. Leaving jQuery in the mix increases productivity and makes things much easier for everyone, as it's well understood by most. We use it as a time saving tool more than anything. Interestingly, I just asked this question in an set of interviews and was looking for exactly the answer you gave. 
Not really, certainly just delve into vanilla JS because if you know vanilla JS, chances are it'll take you several minutes to get into jQuery -- several hours/days to few weeks to get into frameworks. Seriously, vanilla JS is the most secure way of improving yourself in web development. Because from there you can easily branch into other superscripts and frameworks.
There's US Navy software contracts, in 2018, that are required to run just the same as it does on Chrome... on IE7. In those instances, jQuery is a godsend.
yes, or just rewrite slowDouble
 Sucks you got cornered on that one, dogma like that is a good warning sign to keep looking. &gt; using a large framework which always requires installing a lot of additional packages. there are lightweight frameworks (libraries), but thats a bit off topic I guess. crazy how touchy people are about Jquery and how many options there are available to meet the same goal. 
That guy is an idiot. There are use cases for jQuery. 1. Legacy codebases/old browsers. Lots of corporations and government orgs are still on ancient versions of IE. 2. Prototyping. 3. Projects where the client picked cheap and fast. jQuery is a time saver, and you can throw the junior devs and designers on it. 4. CMS land (where I dwell). Most use jQuery for their JS frameworks. Most sites with a server-side heavy CMS just need basic DOM manipulations and a few AJAX calls. jQuery is perfectly adequate for that. Horses for courses. Not everything needs a sexy new JS framework.
&gt;you will come across a situation in which you need to know it. This is true and happened to me. however, I had strong fundamentals in javascript and understanding what JQuery did was much easier for me to pick up because of that. learned what I needed to on the job and didnt cause me any grief.
I just skipped content-type and let fetch do that for me, worked like a charm
 Uncaught ReferenceError: codeHS is not defined
Definitely worth learning at least basics because as you said it is used all over the place but will you need it will depend if your job/project will require you to use it. For example I used it in a project 2 years ago then I switched to React.js and now it looks obsolete-ish.
In all seriousness, Im almost certain nobody knows what that is. as for resources... freeCodeCamp.org is excellent and where I got my start wesbos.com has some solid free courses Kyle Simpson has his you dont know JS series on github for free Eloquent Javascript can be had for free online as well ##youtube is also your friend with channels like funfunfunction codingtrain traversy media 
If you're just learning right now, get vanilla JS down first before worrying about libraries and frameworks. As far as employment is concerned, it depends. What do you want to work on? If you want to make JS apps, then don't bother. If you want to work on CMS-based websites then definitely learn jQuery. Pretty much every PHP-based CMS uses jQuery, and most of the popular CMS options use PHP.
How do you get those npm version, license MIT coloured boxes at the top?
One of the video comments says it for me: &gt;This video can be renamed to "how to get things worse by using &gt;promises instead of async/await". I still use callback pyramids. I have no problem with it, I find it easy to read and maintain vs promises. Promises don't eliminate async functions they just make them look "better" and it can be a real mess.
Actually I want to work with either C# or Python for the back end. I’d like to be a full stack developer.
Ha ha ha... No NZ
I agree with op. There is no need to overbloat the site with unnecessary libs and frameworks in some use cases.
It's invalid HTML to have 2 identical ids on the page. Name your second search box something different and then set up a second Autocomplete listener for that box.
Thank you. Fixed it.
http://vez.website/a/articles/Making%20the%20World%20From%20Scratch%20Assets/places.js warning: missing NZ lol
Just look at the raw version of the readme 
It’s integrated, infancy every test made with optimize will be show inside the experiments tab
I can also vouch for https://www.freecodecamp.org/
Screen is a retina 5K iMac; there's nothing in the javascript console.
Well it's obviously open source, the code is publicly accessible.
This is great thanks! 
It's just another framework. No need to specialise in it. Better to develop a wider knowledge about implementing frameworks/API's/libraries in general.
jQuery is so helpful and needfull does not matter you use a framework or not. First what came to my mind is domReady, triggering, events. I use jQuery with React for window events and I did not find the better solution than that. Check it out - https://github.com/shystruk/create-react-redux-app-structure/blob/master/app/helpers/domReady.js Why it is good you may find here - https://hackernoon.com/do-you-still-register-window-event-listeners-in-each-component-react-in-example-31a4b1f6f1c8
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [shystruk/create-react-redux-app-structure/.../**domReady.js** (master → 99f2982)](https://github.com/shystruk/create-react-redux-app-structure/blob/99f29827277cd789a3b9948a98e4c35c0b3a2498/app/helpers/domReady.js) ---- 
Sorry I must have written poorly I was replying to the person complaining that you had not. I think it's smart of you not to build and release your app on platforms you cannot test. I am looking forward to trying out your project! It seems awesome.
No problem
jQuery can definitely still be useful. It might not be as necessary as it used to be, but there are definitely a lot of nice abstractions compared to vanilla. I recently refactored some of my vanilla JS code after the team added jQuery to the site. I was able to remove a lot of code and I'd say the solution is easier to understand now. 
In my circles they use Macbook because running Ubuntu isn't a stable option(when going to clients, and stuff). Anything to avoid Windows, really.
Yeeeeeah, JQuery has definitely not disappeared! Plus if you get a job where you handle legacy code at all, chances are you will encounter JQuery somewhere along the way. 
Yeah, same here. A few of my coworkers use Linux, but they all have some super hacky stuff going on. For most people, MacBooks are perfect. I think the only people here using Windows are the sales guys.
Just call the async function without awaiting it? 
It's got it's uses as it's very generic, just like .xyz and .online. Everything other than .com being first choice for everything commercial or not is finally over.
You can use https://img.shields.io
I haven't had much time to try other things but for my 3D web app, jquery does wonders. All I need is a sidebar with some buttons, sliders and dropdown menues. Is there really any advantage for me to use something other than jquery? (and jquery-ui) Maybe one more use case I have are 3D annotations. I use html elements instead of WebGL in this case, because html allows me to easily interact with the annotations, define click callbacks, and add hover-descriptions with images and links. Jquery is perfect for me here. Would any framework be better than using jquery? Honestly curious because I'm not a web dev, even though I spend most of my time with javascript.
It is certainly worth knowing generally, if not in intimate detail, if only because of its ubiquity: in many jobs you will be touching older code that uses jQuery. For new projects it is less useful unless you have specific needs like supporting very old/odd browsers easily or your are already very familiar with it. I would suggest learning modern JS and DOM techniques without anything else (i.e. Vanilla JS) should be your first priority. That core knowledge can be applied to any other framework making them easier to learn and making it possible for you to see understand their relative merits (i.e. which frameworks might be optimal or problematical for what sort of project). Having at least a rudimentary understanding of the most common libraries and frameworks will be very useful too, though you don't need to know them all in detail. Nor do you generally need to go into the latest lib/framework you see talked about everywhere: there will be another one or few next month. Because of this churn "most talked about right now" often doesn't result in "used a lot in the future" or indeed "useful for the real jobs you are applying for" so only chase the bleeding edge if you need to for a specific project or opportunity. The churn means that there are lot of options out there in common use and a lot more you might touch in specific circumstances which makes a good understanding of the core they are built upon even more valuable: it will enhance your ability to learn any given framework quickly, old or new, when you need to.
I don't know either so I'm safe.
I think you need to enable your browser's location services. What browser are you using?
You'll get a biased answer about jQuery now, Why you don't need jQuery? jQuery was useful back in the days when browsers aren't that capable and JS not that powerful as compare to now. But over the years Javascript has evolved soo much with ES6,7,8 use of jQuery is getting obsolete(not completely yet). Another reason people says that relying more on jQuery makes your JS skills weak because you become soo comfortable with jQuerys easy and short syntax without knowing that what jQuery is doing and why you needed jQuery, that you can't even perform a simple task without using jQuery. Can you do that same thing with vanilla JS without importing jQuery? YES! You can check this website that explains why you don't need jQuery in your project http://youmightnotneedjquery.com/ Now, why you need to know jQuery? jQuery is so popular that it's been used in a majority of the web. Things like CMS(WordPress), landing websites and some web apps that even if you don't want to learn jQuery you're gonna encounter it whether at your office or your clients project, knowing jQuery will be helpful to work with legacy code. So just learn the jQuery for your own knowledge but try to minimize its use in your future projects.
Chrome 65.0.3325.162. At first it asked me for the location service (I accepted) and it worked fine, but after going offline via the Devtools it broke.
Weird I just tested it with same browser as yours, and it works fine on my end. Maybe you have rouge browser extensions?
Even after clearing storage under the Application tab I get nothing. Firefox 59 still works fine. I'm getting a `Failed to load resource: net::ERR_BLOCKED_BY_CLIENT` in Chrome though.
Could be! But disabling uBlock Origin on that page does nothing and my other extensions don't block anything, AFAIK.
God bless that poor soul
You don’t need to import as an object or create a mock in a __mocks__ directory. That was a lot of code that can be accomplished with: import { getWinner } from ‘./thing’; jest.mock(‘./thing’); // in your test getWinner.mockReturnValue(myResult);
I am also using uBlock Origin and it doesn't break the site so it is more likely that one of your other extensions is the culprit. And I don't have any errors on the console, just a note about geolocation request which is a UX improvement tip from Google.
J'ai de gros soucis de formattage des codes de l'article sur mon navigateur :/
Lol, I did not know this site existed. Yeah, VanillaJS is an awesome framewok.
You're right, IMO. The interviewer is a bozo.
If you're getting started, I say go vanilla, and make sure you use http://polyfill.io 
All the code looks like this : [url=https://www.noelshack.com/2018-12-2-1521542464-screenshot-from-2018-03-20-11-40-11.png][img]https://image.noelshack.com/minis/2018/12/2/1521542464-screenshot-from-2018-03-20-11-40-11.png[/img][/url]
Seems odd that a more opinion oriented interview question would have a predefined correct answer. Doesn't sound like a healthy culture imho. As an interviewer, I'd use this question to judge your reasoning and gauge your actual real world experience. Not to see if you already drank the kool-aid we've all been drinking. 
&gt; I like jQuery as a helper library (but prefer lodash) Apples and oranges
Useless unless you can read Chinese
"Comedy" page
Will fix right away, may I ask what browser you were using? Thank you for taking a look! 
The interviewer didn't pass the interview
I looked into webRTC for a direct connection, but it doesn't expose direct IP-port connection. Socket.io and WebSockets seem to allow IP-port connection, but only to a listening webstocket (ws://) server, which can't be hosted in the browser.
Google Translate FTW
var that = this;? I know why you'd do it, but I don't know why you'd do it in 2018. At least explain that.
Don't know python, so for me in order to learn ml I would have to learn python first and then ml. Learning new language is already a lot, just to get started with ml, but if there are no js alternatives, maybe I'll go that way...
Cool, I want to try that for my JS ray tracing project which is singlethreaded currently: https://rkibria.github.io/multiray.js/ I"ve been wondering how I might use workers but the message thing would be very annoying if you have to rely on strings. Transferring arrays like that sounds far more appropriate.
So many interesting technologies, so little time...
If you can Javascript then Python is the easiest language ever, especially compared to ML concepts and theory.
What kind of employer was it? Web agency? IT department in a company? Startup?
There are a lot of those projects. You just need to stand up for your product and quality requirements and for your professionality as a software engineer.
May want to check out some anger management as well. 
And the point of this article was..?
&gt; There are more than 200 company using this Data Visualization library created by Ant Financial. Users including aliyun, alipay, taobao, tmall, fliggy, ... Seriously?
A snippet from the readme, demonstrating setting a deeply nested value ('a3'). // without MuState state = { a: { ...state.a, a1: { ...state.a.a1, a2: { ...state.a.a1.a2, a3: 10 } } } }; // with MuState let muState = new MuState(state); muState.a.a1.a2.a3 = 10;
One reason is when there is a library/widget you really want to use that depends on it. Though these days most of those have viable vanilla (or React, etc.) alternatives.
Cross your fingers.
https://english.stackexchange.com/questions/10839/what-is-the-correct-plural-form-of-lego-lego-or-legos Just as watches made by Rolex are “Rolexes”, Apple computers are “Macs”, shoes made by Puma are “Pumas”, cars made by Audi are “Audis”, portable video games made by Nintendo are “Game Boys”, by the same process toys made by Lego are “Legos”. [...] `Please always refer to our products as “LEGO bricks or toys” and not “LEGOS.” By doing so, you will be helping to protect and preserve a brand of which we are very proud, and that stands for quality the world over”` Of course everyone is free to comply with these corporate demands, but the Lego Group has no authority over the English language to regulate it in this way. So if you want to feel guilty about using “Legos”, understand that the only thing you are guilty of is not obeying the demands of a Danish corporation, not for violating the rules of English grammar.
And you aren't forced into pyramids using callbacks if you don't inline everything. Callbacks aren't as bad as everyone thinks. But having a single catch-all error handler for an asynchronous chain is one nice thing about promises.
Hi /u/edenftp, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/st3dy, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
You can use the bind method, arrow functions, or call or apply if the function needs to be executed in addition to being bound. In this example though in particular I would've used an arrow funxtion Sorry for the brief answer, if you need more elaborations I can do that when I get to a desktop, but there are tons of resources for how to wrangle this in react. I'm sure the react docs have plenty of Good examples too.
How about web-scraping? I'm a React fan but I would use jQuery for web-scraping: client-side or server-side (with cheerio.js that has a similar syntax to jQuery) The beauty of jQuery is it's syntax: very familiar to a lot of people and easy to use. Coupled with functional-programming you can write very elegant code that extracts and transform data from external website Imagine if you need to scrape data with Java+Jsoup for example, Jsoup itself tries to emulate jQuery's syntax but you still get the overhead for writing typed domain classes and maybe you'd need to use hacks like generics and type-casting to handle nodes that has multiple types of content. This is probably more of java vs javascript problem but I guess jQuery is powerful because it lives in the javascript ecosystem which is very readily accessible. You'd be able to easily test your scraping program on chrome console, develop very quickly and there is a lot of tutorials out there that can help as you go along
Since machine learning is all the rage these days, [here's](https://raw.githubusercontent.com/blackhole89/graphicdepictions/master/screenshots/boltzmann.png) an example of a simple [Restricted Boltzmann Machine](https://en.wikipedia.org/wiki/Restricted_Boltzmann_machine) sampler/trainer implemented in it. The source can be sort of gleamed from the [raw file](https://github.com/blackhole89/graphicdepictions/blob/master/examples/boltzmann.txt), though it it is interleaved with the graph data and therefore much more legible if you open it in the tool proper. The github README.md combines a number of (older) screenshots with documentation. There are no OSX binaries because I have no idea how to cross-compile for it, but the Windows build should work well in Wine.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [blackhole89/graphicdepictions/.../**boltzmann.txt** (master → 8a857d6)](https://github.com/blackhole89/graphicdepictions/blob/8a857d6b79a08aaf6c6f40f59dd394aceecf8940/examples/boltzmann.txt) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dvzpm29.)
I did not expect it to be compatible with WebGL, that's great news ! 
Was it possible to move around ImageData between workers and the main thread?
To get us to look at the adds
Arrow functions: var that = this; ()=&gt;{ console.log(that === this); } If ES6 isn't available I still wouldn't call it `that`, call it `component`or whatever the object is. 
Hey, for some reason i can't get it to work. The sliders are generated dynamically based on a query from a database. Then each one is using a function in javascript in order to update the price. But the problem is when i change the first slider the price is update but when i change the second slider the updated price is not taken into account and updated. If that makes sense? 
You don't have to rely on strings when passing messages between master and workers: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm
I’d suggest stating that is used proxy’s because those are non-polyfillable. Therefore, you’re library won’t work on any browsers that don’t Support proxies.
I would add a fallback so you don't get any unhandled exceptions while accessing deeply nested properties. For example `muState.a.z.z` will result in an exception that might break the code. You could take a look at this library which safely handles null pointers. https://github.com/chrissrogers/maybe Shameless plug: I'm also working on a library with a similar goal to yours. https://github.com/millsky/lenscrafter
What I was trying to say was, your frustration should come from trying to solve the ML problems, not from learning how to use the language. Python was never designed for ML. People just wrote a bunch of libraries for it.
Agreed, I used to use "that" a lot, as now I get more compofort with bind, call, apply as well as arrow functions, I think it's a more concise way of preserving "this" word. Maybe sometimes people are prone to do things in their "old ways", as I still sometimes use "this" in my codebase.
/r/MapsWithoutNZ/
Aren't researchers and computer scientists people? I'm fine with learning the libraries and learning how to glue them together. I was saying Python can be frustrating.
 const numToGuess = "3"; while (true) { const guessedNum = prompt("Guess a number..."); // if the guess is equal to the number they're supposed to guess if (guessedNum === numToGuess) { alert("Yep, it was " + guessedNum + "!"); //break to stop the loop from running break; } } 
https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate &gt;This method is used to break up long running operations and run a callback function immediately after the browser has completed other operations such as events and display updates. Sounds like it waits for the browser to finish everything else before returning.
By the time a CSS LINK element's `load` event is fired, any element which is styled by that CSS, have already been applied. AFAIK, when `DOMContentLoaded` is fired, all statically linked CSS have already been loaded. So, this event can be used as the `CSSready` event. A `CSSready` event can be emitted when `DOMContentLoaded` is fired, but IMO, it'll only waste resources.
&gt; How can I make it so that it continues to loop until the person guesses the number correctly ? Issue the `break` statement when `value === guess`. i.e. after notifying the player that the guess is correct. However, won't that defeat the purpose of the `numberCorrect` variable? &gt; I also want it to show a prompt at the end telling the person how many tries it took for them to guess correctly once they finally guess correctly. Just call `alert()` again with a message which include the `numberOfTries` variable. Just like you did when `value === guess`, except without the `numberCorrect` variable.
setImmediate() will resolve the promise in the next task, while Promise.resolve() will resolve it in the next microtask. 
You may want to learn how to contribute to topics instead of just tearing people down. But I doubt you'll ever rise above being worthless trash.
Yes, but not draw images. I used to use png.js on a worker to convert the images to png, but recently I discovered that the png export function of canvas is several orders of magnitude faster and creates much smaller pngs (better compression), so it doesn’t make sense to use that library even though I could parallelize it that way.
anyone used svelte much?
Could someone explain like I'm 5?
Up to this point, any operation on a `&lt;canvas&gt;` had to be done on the main thread, which leads to performance issues since that thread is also responsible for processing user input and drawing on the screen. Now you can use a web worker thread to draw on a canvas, then render that to a bitmap and send it via postMessage to the main thread so it can be drawn. No jank!
Amen
It would seem from your logic that you don't actually need to do anything special. It doesn't seem as though the effects of the Promises would affect the other Promises. If that is incorrect then perhapse you want to look into [async/await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await)
Ads? What Ads? :^)
So basically... Promise.resolve(['strA','strB',strC']) .then(list =&gt; { list.forEach((value, index) =&gt; { callToApiReturnPromise(value) .then(isApiDataGood) .then(callTpAnotherApiReturnPromise) .catch(continueToNextElementAction) })}
So what code would I use for that? 
Do you (or the server) care about the order of api calls? If you do, then doing an [Array#reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) is going to be the right thing, and will look something like: ``` ['string', 'values', 'here'] .reduce((promise, stringValue) =&gt; { return promise .then(() =&gt; { return someAjaxThing(url, somethingWith(stringValue)) .then(jsonArray =&gt; { if (jsonArray.indexOf(stringValue) &gt;= 0) { // ??? } }) }) }, Promise.resolve()) ``` If the order doesn't matter, you could maybe use [Promise#all](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all). You'd probably need to also use an [Array#map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to transform your strings into urls for the api. If your step 2a is the same api call, regardless of the string value array element, maybe do that call first, and not in an array. I think ultimately, you need to show us the code you've tried, and explain what these loops/promises actually mean.
Does this also apply if you have large background-image in your CSS ?
An easier way than sendFile is to declare a [static folder](https://expressjs.com/en/starter/static-files.html). sendFile is really when you want to manage the route.
I think most people who omit semicolons do it as a style preference, not really just for cleaner diffs.
But what's the difference? Is it seconds? Or milliseconds (which could obviously still be seconds, but i hpoe my intent is implied here)? That's what I'm wondering. I don't, but I haven't really looked for it. Plus, everyone has always said "Do that in Python!" so nobody was doing it in JS. It doesn't mean JS is worse; it just means it hasn't been done, which is why I was wondering what the actual comparisons look like in regards to time for heavy computational algorithms.
Your last code example contains the following "problem" `this.state.posts = posts;`. It should instead be `this.setState({ posts })`.
If you export to PNG, why not do whatever you do server side instead?
This is a fairly broad question so forgive me for answering broadly. Vue has key modifiers that allow for more specific event listeners. If you want to watch for ctrl-click, for instance, and have a different behavior for shift-click and regular click, you can do the following: &lt;template&gt; &lt;div class="app"&gt; &lt;button @click.exact="onClick" @click.ctrl="onCtrlClick" @click.alt="onAltClick" @click.shift="onShiftClick"&gt; Click me &lt;/button&gt; &lt;/div&gt; &lt;/template&gt; This is much cleaner than watching for keydowns globally. As far as modifying actions depending on what fields are selected, there are many different ways of handling this kind of thing so you'd have to be more specific about what your app does, etc. If provide more information, I'd be happy to give more specific suggestions.
We're discussing going that. The main issue is that those dynamic images are about 3MB, and you need them quickly, because they’re streamed to a remote viewer webapp using WebRTC that has to be able to see your changes as soon as possible. That remote viewer is supposed to be on the same computer or at least the same LAN, so transferring them locally is much faster. I even thought about transferring the uncompressed images, but shrinking them down is probably still faster.
Ah cool! They are just images, I thought github did it for you automatically somehow
that was a close one
We're going to need a lot more information (using vanilla JS/jQuery/framework??), and probably the code you have so far. 
so you're saying we need PPWA
Fucking dope.
&gt;ambitious but easy Pick one.
Are there any specific learning/quiz apps you can recommend or any. Thanks!
I'd definitely try it as a challenge to test out what makes Ember different from Angular or React as I've noticed Apple using it for their new website. If you've got some free time, why not?
What is their stack? Likely they wanted to measure how fast/well you can learn new things. That's the part of the job description. Especially if they know that your resume does not have Ember. I think you can learn Ember in 3 full days from a udemy course with project building, and build the test project as you go along. Would take you 3-6 days in total. 
Multiplayer games could vary in ambition from turn based games (perhaps using post data) like tic-tac-toe to checkers and chess all the way to real time games (perhaps using websockets) like a free for all adaption of asteroids or even a competitive version of Tetris.
&gt; so you're saying we need PPWA Not familiar with PPWAs. I meant the progressive enhancement ideas of PWAs such as feature flags, fallbacks and all that. &gt; I'd react differently if it was objectively true I'd like to think so myself but it is hard to gauge objectively these kind of things and in time you grow tired of constantly switching it up, especially when you have other things going on in your life.
Ironically, someone in my development team linked this article earlier today. I think this article is what it says it is, a rant, and aside from complaining about common misconceptions are the usage of `const` I find very little useful convincing information in this article. Points 1-3 are what I just said, seemingly an outburst of frustration about misconception, and it's good to understand these. Point 4 is, well, not a point. Point 5 is seemingly the only argument he makes against using `const`, and to me doesn't make any sense. I want to emphasize this is how I personally work, but I use `const` **a lot** more than `let` and I don't ever "change all the `let` that we didn't mutate to `const`. I start off with a const, and change it to let if I need to - which is very rare, I'd say `const` is more than 10 times more common than `let` in our code at work. When I see a const I *assume* people don't reassign it, and when I see a let I *assume* people do. In most scenarios this helps contribute to the purpose of the variable. (I share OP's opinion in point 5) Point 6 I agree with. We used the UPPER_SNAKE_CASE notation for our application constants, such as api keys, request urls, route identifiers, never inside functions, always at top scope. And as mentioned when using let, we use it in a function. We don't have strict rules about this, this is just how it ends up being. I do think the article is an interesting read, but don't think it should diminish usage of const over let for whatever little reasoning is provided in the article.
Honest question: how is this better than just doing: state.a.a1.a2.a3 = 10; 
But do you think it's a good future proof investment? I'm currently at a shop where we use vanilla js. I don't know if vanilla js &gt; ember.js on a resume.
If you have any of the non-tested platform. Can you try to run: npx pidtree And let me know if everything works as expected? Many thanks.
They use a Node/Mongo backend. I thought they were a react shop since they were asking me so many questions about it. At the end I asked if they used React or Angular they were like "nope, we use ember". I thought that would be the last I ever heard from them. Thanks for the input. I have a week to submit my test.
I’ve actually always wanted to make an app for remembering the reactions in organic chemistry and my peers and I had a lot of problems with those. I may do something with that. Thanks!!
finally! I am really happy to see these kind of changes on the web. Even though we cannot use many of them in production yet there is a hope for efficent web.
Yeah I can do something with that and have a high score table as a client side technology thanks!!
You apparently didn't just literally attend [Ember Conf](https://emberconf.com/)
yea, I want affect the "sizeChange()" function, in order to controll the size of the queares being imitted to the canvas. 
holy IE 7 lol bless that guy x 100
That looks like it could be plausible assuming that `callToApiReturnPromise`, `isApiDataGood`, `callToAnotherApiReturnPromise` and `continueToNextElementAction` are not required to be finished before the `forEach` goes on to the next element. Promises are asynchronous and the `forEach` will not, by default, wait for them to resolve/reject before moving onto the next element. Another option is too look into [Promise.all()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) which takes an array of Promises and only resolves when they have all resolved. To turn your array of values into an array of Promises I would look into `Array.map`.
You could even make a mobile version with react native and make it available in the app store. If people find it useful, it will look good in your portfolio. 
You might want to pick up a framework, whether it be Angular/React/Vue or even ember. Frameworks are becoming a must-know in order to future proof.
A interactive map showing orders represented with geo location dots (long,lat) + order time and order value for our web shop in “real time” mapped out all across Europe. This was a really fun project because it involved a lot of moving parts. I completed a server in node js that served the data from Google Analytics and a client with the map that would then display the data. All data was stored early each morning in a JSON object and then the server would query the object each minute of the day and returned orders would then appear in “real time” on the map using the latitude and longitude coordinates . Since data is delayed by 4-6 hours from google analytics we had to map yesterday’s data. If we had more than one order we did it so that the orders would appear randomly with those 60 seconds, so eg. 5 orders would not appear with 12 seconds apart (that would not make it as realistic to look at in my opinion). To top it all off I divided the 24 hours of the day into 6 hour cycles and gave orders within each period a different color. So orders from 00-06 was black, 06-12 was green etc. This gave you as a user an idea of when orders were placed in the different market/countries across Europe. User could then zoom in and display order data for any area of the map. This was a good learning exercise for as it involved everything from nodejs, socket.io, leaflet maps and jQuery. 
Ember is pretty legit, a few companies in London using it at least. If it’s not something you’re happy to invest time learning then just pick up React or Angular for a safe bet.
Yeah, my hobby projects are all in React as I'm also learning Java for backend. Area I live in is mostly Java/C# companies. So that's another reason I'm not sure if I want to invest my time and move into another company that might not help me in the long run.
It depends what is criteria for bloatedness. For instance, uncompressed angular js file is aprox. 5 times bigger than jquery.
Well it depends. Are there two bots communicating? Or just one answering to user input? But with WebSockets it's really easy. You have a method in the users JS that listens to new messages and one to send them. Same thing on the server side.
Do note that using inline event handlers is bad practice and results in poorly factored, hard-to-manage code. Seriously consider attaching your events with JavaScript, instead, eg: https://developer.mozilla.org/en/DOM/element.addEventListener
Post data and websockets both qualify as client side techniques to communicate with a server which maintains shared game data between players. Your client will play their game and have a score computed, displayed, and sent to a server. The server then maintains a persistent table that records the posted scores and whenever the high score list is requested it ranks them and sends it out. 
We default to "const" at work, and use "let" only when the variable will be changed later in the function. We also code in Scala and there use use "val" whenever we can, and we use "var" only when the variable in being changed.
I’ve seen some big names on Twitter say they ditched const because it isn’t actually a constant. I’ve got to disagree. Sure they could have named it bind or something to make clear it’s about reference binding and not immutability, but it’s still far safer to use const over let 99% of the time. It gets a bit confusing for people who think const means constant and then see someone, say, amending properties to a const object or pushing to a const array. Still worth it over let IMO.
&gt; Not familiar with PPWAs I was just busting your balls about suggesting progressive progressive web apps
Doesn't seem to work for me; latest chrome.
There is also a Medium article for those who cannot watch a video at work! https://blog.matters.tech/10-redux-tips-from-the-trenches-55e06ed1c0a8
Hi /u/stefyy47, For javascript help, please visit /r/LearnJavascript. Thank you!
Doesn't work in Firefox, either.
Ok thanks, this is just for the sake of quickly showing how to make Ajax calls in React. Also I'm just learning myself. 
I think you mean projects = dataset.map(function (d) { return d.map(function (p) { return p.y; }); }).smoosh();
Look at http://www.oodesign.com/observer-pattern.html and http://www.oodesign.com/command-pattern.html These may help you. If it's a small enough app, you may just want a lookup table of functions matching shortcut to function.
This isn't a meme though.. This is just a terrible post.
Just curious - why haven't you tried using a WebGL pixel shader for this? Or even compiling from another language to asm / wasm. Either would probably be faster than spawning workers to offload the work.
Is it just me or are your standards for “terrible” a lot higher than most?
Well then just boo him because all he does is link drop
 /^https:\/\/([^\.]+\.)?example.com/
This is a pretty bad misuse of `map`.
`projects` being simply an array of arrays, wouldn't it be reasonable to just do .reduce(function(a, elt) { return a.concat(elt); }); 
You can do *anything* with a `reduce` if you're brave enough. Personally, I find using specialized functions like `.flatten` to be more readable. Even the `.push` variant I find more readable than your version, but it doesn't really matter much.
Holy formatting Batman. Put 4 spaces in front if that shit
I'm not mutating actually. the 'dataset' is being mapped while 'projects' is being mutated. Although I agree this is not the best way. A simple for would do. Anyways im done with it for the night. Its 4 30 am. So Goodnight 🙃
[Did you really?](https://i.imgur.com/YR2mqHC.png)
 /^https:\/\/([^\.]+\.)?example\.com\/$/ Looks like a problem with your phone or with reddit's serving mechanism - try it on a standards browser and it should look fine
There are plenty of frameworks to create Chatbots with JavaScript like https://github.com/hubotio/hubot (which was written in CoffeeScript but can be used with JS). 
It's fixed now 
There's a bunch of little keebler elves running inside your browser. The main guy, the one who does all the business is stuck with drawing things on the monitor when the canvas "tag" is used. Offscreen canvas lets that keebler elf delegate some of that responsibility to whichever keebler elf he doesn't like. The new guy is now stuck drawing every single picture while the main guy can go take a nap then post the image as if he drew it himself.
Tried it but it isn't working. Just to be clear I want to match all subdomains from `example.com` except `abc.example.com`.
I'm not from a graphics background and just learning about ray tracing from a book, and decided to try to implement this stuff in JS on a whim. I know it's not really a good choice for numbercrunchy stuff but I wanted to see how far I get!
If you simply want to check to see if the subdomain matches `abc`, you could avoid regex entirely and use `!url.includes('abc.example.com')` - or, if not, what else do you want the regex for?
I learned about the future of TypeScript. It have a bright future.
 /^https:\/\/((?!abc)[^\.]+\.)?example\.com\// https://jsfiddle.net/mhykz1ba/
Sorry, I'm not sure how else to explain it: client to client connection as you said (using webRTC) but without a server for the initial handshake since the IP and Port of the clients are known in the local network. Alternatively it would also work if one client acted as the server to initiate the handshake. Overall, browser-to-browser (client-to-client) is the goal, but with the potential to work on LAN only (no intetnet connection) without a dedicated signalling server. :C
Unfortunately that's just not how the internet is/was designed. You're always going to need a server as the Central point of access :(
I'm happy people are catching up to this. It was a huge amount of work (both by us and FF) and it will soon be launched. :)
Thanks, that seems to work! Just one question if you know: If I want to match for example whatever is in between `123` and `abc` in a string 123randomabc (so want to match `random`) instead of just matching `abc` in the above regex how could I do that?
Hi /u/strutterfifs, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
Mostly because I've never heard of either of those things! Lol. Will read up on them, thanks :)
btw, if anyone has questions about OffscreenCanvas, feel free to ask. :)
I know this isn't much help but I felt the exact same out of college. It wasn't until I had to start using it at work that anything stuck. Yes, that's a sort of chicken before the egg scenario. Regardless, it was necessity that motivated me to learn in the first place. If I spent my whole life in college it wouldn't have taught me anywhere near as much as one year in a web dev job.
You need to build things. No course is going to make up for experience. Just build things. It doesn't have to be anything fancy or new. Just find a website or app that you think looks nice and rebuild it without just copying the code.
OK. I will spend my free time doing that once I graduate. 
Wouldn't you be better server by finding a better PNG compression algorithm? Also, did you use base64 strings to send the png back from the worker?
That actually looks very similar. I think they accomplish the same goals, with just a slightly different API. 
I 100% agree with that rant and I've been using [this](https://www.npmjs.com/package/eslint-plugin-prefer-let) ESLint plugin lately. &gt; Things being basically equal, code should speak to humans first, and computers second. As such, JavaScript codebases should follow the long-standing conventions set forth by both formal symbolic logic and the practice of functional programming. &gt; Usage of the const keyword to bind an intermediate value of a computation places emphasis on the compiler and and its role in ensuring that a reference never changes. By contrast using let in the same situation reads, in plain English, the programmer's intent to declare a name value binding. &gt; &gt; It is this plugin's opinion that preventing reassignment of let bindings is better accomplished as a linting rule. &gt; &gt; const bindings are allowed at the top-level of a module's scope so that it can represent a value that is a true, dependency-free constant such as π, ℯ, etc...
Glad it isn't just me. Did you have all the built-in functions memorized? I don't. I wish I had a list of everything I really needed to know and memorize. How did you get through the interviews?
For Python I wouldn't bother learning jQuery, React or Angular would be good choices, really any library/framework that works well with REST. I don't know how common jQuery use is among .NET devs these days (I'm a LAMP dev, so not very familiar with .NET). You could try checking out [http://www.csharpforums.net/](http://www.csharpforums.net/) and [https://www.microsoft.com/net/community](https://www.microsoft.com/net/community) to get in touch with .NET developers. 
If you just mutate the state directly, then the objects which contain the value that changed maintain the same object reference. That means that you could not use object reference equality to determine if changes had been made to an object or it's children. 
I find it very helpful to see that a variable is a \`const\` and know that it won't change. Makes it a lot easier for me to parse logic when reading code, so for this reason I always use \`const\` unless doing so would result in an error.
&gt;Wouldn't you be better server by finding a better PNG compression algorithm? There's only so much you can do with png compression. The canvas export in Chrome and Firefox is already quite good. &gt;Also, did you use base64 strings to send the png back from the worker? No, I used [Transferable](https://developer.mozilla.org/en-US/docs/Web/API/Transferable) [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)s, so it was zero copy.
I hope this doesn't sound negative toward you personally, but how in the hell are they getting away with graduating BS in web dev to people they haven't taught how to web dev?
Don't worry about memorizing things. Most of the stuff you need to know off the top of your head will come with experience and building things on your own; the rest you can look up as needed. Just know where to go, for example [MDN](https://developer.mozilla.org/en-US/) is pretty much the standard reference for the JavaScript API, so that's a good one to have handy (or when googling to include "mdn" in the search). Just about anything else you find on stack overflow. I'd also suggest starting a project that interests you because it helps keep you motivated. I've done some game related projects that have been pretty fun such as interactive maps for games and extensions for websites. I probably would have quit those projects early if they weren't as fun as they were to make.
&gt; bachelors in web development wait up &gt; bachelors ... &gt; in web development You mean, like, a Bachelors of Science? From an accredited university? In web development?
Ha! So true. I can count on my fingers how many decided spending a little more or waiting a little longer would be a good idea. The cheap and fast people get theirs later though. Like when they need some crazy plugin written for WordPress that costs a fortune to develop, or need to start over from scratch. Would've been cheaper in the long run to choose something more suitable at the beginning.
I disagree, relying on a linting rule depends on the developer and isn't clear to anyone reading the code. That's not how `let` works and it's the exact purpose of `const` keyword, I don't think you should rely on a editor plugin to define the behaviour of code. I would argue that it's much more human-friendly to explicitly declare that a reference won't change, and you can be confident that it won't.
European Bachelor's Degree, yes it's accredited.
Study data structures and algorithms, then apply javascript to that conceptual knowledge. *** Learn your environment / API's. For example if you using a browser obviously it has a `window` object https://developer.mozilla.org/en-US/docs/Web/API In contrast nodeJS doesn't have a window object, but it has other globals that a browser doesn't. https://nodejs.org/dist/latest-v8.x/docs/api/ *** Understand the execution lifecycle (sync vs async) of your chosen environment, take a look at the following : https://www.youtube.com/watch?v=OyKHD4NGCQo *** Also it's rather cliche but depending on what you're doing i'd recommend familiarising yourself with a framework. React is probably a safe bet for web stuff at the moment, otherwise vueJS. For other utility / generic libraries, underscore, lodash or ramda are decent choices. Why? Because it lets you go faster. *** I'd also recommend reading the following https://github.com/getify/You-Dont-Know-JS
No, of course not. Sure I have basic DOM traversal, writing functions, loops, etc. But I still find myself looking stuff up daily. There's no shame in looking stuff up. The skill is in knowing what to look up, i.e. how to solve the problem. No web developer knows it all. Anyone who says they do is full of shit. My origin story is pretty lame lol. I didn't start in development, I started in elearning as a "graphic designer". A more accurate title would have been "Flash template jockey". I worked my way laterally into a front end development job over a few years. When I said I had no degree in the interview, the hiring manager in the room looked at me like I just shot someone. I asked him to let my work/portfolio speak for itself. I'm sure the interview would have ended right there if there weren't more open-minded people in the room. I showed them my portfolio, which makes me ill to look at now, though at the time I thought I was hot shit lol. I got the call saying I got the job about 2 weeks later.
I'm not sure exactly what behavior you would expect in those cases, but running that code does not create any errors. If you want to try it out, you could fork the repo and add test cases, or setup a demo project and install MuState from NPM. 
This is my question to. I'm currently in my last semester of an AS degree in web dev. I specifically chose it because I couldn't find any universities that offered bachelors degrees in web development. It seemed stupid to get a CS degree and then learn Web dev on my own. 
I'm just in awe that such a thing exists. I could see a B.S. in Information Technology, or Computer Science, or some other field that contains "web development" as a discipline or focus. It's magnitudes more helpful to fully understand the underlaying core fundamentals, rather than memorizing a bunch of APIs and framework-of-the-season. Like if you had a course on WANs in general, that covered how TCP works, you could figure out how to diagnose a slow website and keep your initial assets under 14KB or so due to slow-start. Things like that. If you covered 5 or 6 languages like Python, Ruby, Java, then picking up one more shouldn't become a burden; you've learned how to learn. For language-learning tools I like code-challenge sites like codewars, projecteuler, etc.
Thanks for the tip. I've added a note to the project readme.
Could you share specific topics that you covered, what you're already good at, and what you need help with? Closures? Asynchronous execution? Performance topics? Specific framework methodologies? Type coercion? Events, bubbling, and delegation? Network latency/server-side topics? The more specific you are the better we can help.
Unless you're writing 100+ line functions, which is a whole other issue, it should be very clear if a `let` binding is mutated before it goes out of scope. If another developer comes along and sees a `const` reference, yes they can immediately see that that reference won't change, but there's really nothing telling them *why* it can't/shouldn't change, and nothing stopping them from just making it a `let` and mutating it away.
In that scenario, MuState will throw the same exceptions you would get if trying to access properties that don't exist without MuState. For Lenscrafter, do the object keys have to be unique through the entire object structure? 
Been writing it for a decade and feel like I don’t know JavaScript for shit. Be patient and deliberate with your practice. No one ever masters anything, you’ll just get more fluent and slowly realize you’re not having to look up basic syntax or common functionality. Follow talented and driven devs on Twitter and Github. Look at their code and read about their habits. What blogs do they read? Who did _they_ look up to? Always be finding new people to admire. My biggest piece of advice - and others here are saying it too - is to just build shit. I use random side projects as an excuse to learn new tech. Like just the other day I had to write a little webapp for our office manager that scraped a page and displayed some data — I wrote it in Laravel/Vue just so I could see what it’s about (loved both). Think of an idea, original or not, and go for it. The classic example a former CS prof used for VisualBasic was a hotel booking application. You’d have rooms, vacancies, dates, reservations, etc. Lots of good object-oriented friendly ideas to explore and plenty of common events to fire/listen-to. Check out EloquentJavascript (free ebook online) - I’d link you but my gf is finally ready and we’re heading out to get some food. Good luck!
I don't think there's anything wrong with classes, inherently. Though, they do make it somewhat easier to fall into traps (such as fragile inheritance chains) and can be confusing to those from other languages who don't understand prototypal inheritance. But anything you can do wrong with classes, you can also do wrong without using the `class` keyword. The solution isn't to stop using something that provides nice syntax sugar, the solution is to just not write bad code.
I have heard of [Eloquent JavaScript](https://eloquentjavascript.net/) quite a few times and I will read it. Yeah, having to look up syntax and functionality is so frustrating. I thought I would be a wiz by now.
A classes (IMO) and OOP in general are useful for passing state around. Doing it without OOP is hard. Example. A `VideoPlayer` class that creates a video player on the page. At any point you can ask the class instance to pause/play or check the current play state.
/123(.+)?abc/ https://www.regular-expressions.info/tutorial.html
I knew about transferable ArrayBuffers but some mental glitch I forgot they can be used for arbitrary binary data not just for the typed views.
Sometimes it is convenient when you have a library you want to use (i.e. React) and there isn't really another option when using it. But then I would still follow: https://medium.com/@dan_abramov/how-to-use-classes-and-sleep-at-night-9af8de78ccb4
But let doesn't tell you anything at all either. It tells you _less_ than const. You can explain why in a comment, if you need to. Anything important should be commented. Immediately seeing it won't change is a plus. Doesn't matter if it just happens to not change, the point is it won't.
Object oriented programming means binding data to behavior. That doesn't imply classes. *But!* they're an excellent choice. And often, they're easier and more predictable to grok than the alternatives, especially if you're writing code that others will contribute to. Wanna have a data structure and override defaults with custom values? We often use objects for that. What if some of those defaults are actually functions, or behaviors? What if your non-default custom behaviors also want to occasionally delegate or wrap the default behaviors? That sounds an awful lot like methods. What if you don't know if you'll have custom behaviors, but you don't care and you just wanna move on with your day? You can use classes and have the *possibility* of using all those features down the road, if / when the need arises. Too often JS libs reimplement some of classes' semantics in bespoke ways. But in the end this just adds cognitive overhead without benefit. If everyone understands classes, then you have an easy-to-grok out-of-the-box way to model a bunch of common coding patterns. No sense reinventing the wheel. Tooling understands classes well, too. In case tab completion is a thing you care about. Anyway, not saying classes are always the right option, but be wary of advice that tells you to avoid them. They work well for a lot of situations.
A really good time to use classes is if you want high performance, highly polymorphic code. For example, imagine you're writing an ecmascript parser. It typically has a ton of functions to parse various grammar productions, but it also needs to be extensible at arbitrary points of an incredibly complex algorithm to allow parsing arbitrary new syntax proposals without hardcoding them into the core parser. You also want your code to be as fast as possible: you already tackled all the obvious optimizations, and you are now in the territory of trying to avoid deopts from non-monomorphic calls, unnecessary stack allocations on function calls, unnecessary memory usage from closures, etc. What do you do? You [write](https://github.com/babel/babylon/blob/1b612148bfee190cc05b0eb78d4c2b3537655c1c/src/parser/statement.js) [a](https://github.com/jquery/esprima/blob/512ce40c276c53adadb5f87e992c91b94bad614d/src/parser.ts#L63) [class](https://github.com/cherow/cherow/blob/84cf807f4d30c6c239005af9c60dc3346763e8f6/src/parser.ts#L64)
A fun trick is to stop reading anything Eric Elliott writes 
Yes, because in order to load the image in the first place, the background image style for an element need to be applied first. The browser won't load background image files based only on CSS rules. There has to be at least one element which is styled with a background image, in order for the browser to load the background image. i.e. [CSS loaded] | V [element added into DOM] | V [CSS rule] | V [background-image style applied] | | V V [render element] [load background image] | . V . [render element] . | . V . [render element] [background image loaded] But in this case, when a background image is loaded, it won't trigger any event. If you want to be notified when all background images applied to all elements have been loaded, you'll have to use `MutationObserver` to monitor all elements. One an element with background image style is found, create an invisible or off-screen (but not with `display:none` style) image element with that background image, and check its `readyState` property. If it's still loading, listen to its `load` event. This should be done at the very first SCRIPT element. The `MutationObserver` should be stopped once `DOMContentLoaded` event is fired. IMO, a "CSSready" event name doesn't seem right to represent that all background images have been loaded. It should be something like "BackgroundImagesLoaded" instead. And optionally "BackgroundImageLoaded" (without the "s") for per element event.
&gt; Immediately seeing that it won't change is a plus, doesn't matter if it just happens to not change, the point is it won't. I assume you mean
I think I may not have typed that as clearly as I wanted to: In this hypothetical scenario, I want to make an async call, wait until it completes, then perform some action that depends on that call being complete. However, I also want to continue executing code that does *not* depend on the call being complete. This would likely be considered a bad practice in app code - I'm not disputing that. However, consider this code snippet for integration testing a Redux action/reducer, where the action creator is async: let state = store.getState() // assert store initial state dispatch(someAsyncActionCreator()).then(() =&gt; { state = store.getState() // assert final state done(); }); state = store.getState() // assert intermediate state With async/await, you'd either have to define a separate function to dispatch the action creator and assert the final state, or lose the ability to assert the intermediate state. Granted, I can see why you may prefer those semantics, even at the cost of initializing a new function, since initial =&gt; final =&gt; intermediate isn't the most logical thing to read. So that becomes: let state; async function testAsyncAction() { await dispatch(someAsyncActionCreator()) state = store.getState(); // assert final state done(); }; state = store.getState(); // assert initial state testAsyncAction(); state = store.getState(); // assert intermediate state; 
Can't wait to use it for WebVR! 
Hi /u/UntouchedDruid4, For javascript help, please visit /r/LearnJavascript. Thank you!
As others have said, the best way to learn is to actually make things. Check out [JavaScript 30](https://javascript30.com/).
But there's definitely a level of irrationality involved in preferring `let`. 🤷🏼‍♀️ Our code *feels* more pleasant to read and write, `let` is two characters shorter (not a huge issue but still) and feels more natural than typing `const` all the time.
dunning kruger effect
I know this is a demo, but its worth noting that this is unnecessary because Reddit has a REST-ish API.
You don't like jQuery and Angular? That's fine. There are plenty of jobs between React and Vue. You already know jQuery and Angular? Even better. It will be easier to learn React and Vue, and potential employers will think it's great if you're truly competent in all of the above.
Yes that's what I mean, which is not misleading. We know that's what it means, and we know how objects/arrays behave. Still, it's useful to know that the reference won't be changing.
Debatable, definitely something you get used to and autocomplete negates the typing difference. I find tighter logic more beautiful than slightly shorter keyword.
I like jQuery, but not Angular, just to be clear. jQuery has a very special place in my heart and I am very used to it. It made my time after I did 100% vanilla JS a bliss. Looking at Angular, I miss the way I could program by simple events without ever touching the basic DOM...
In your example I'd just use the first example. I don't know what bad practice that is but I'd say the second example would be the bad practice. All async functions return Promises if they are not awaited BTW. So you can just string a `.then()` off them. I'm not how dispatch is relevant in that code either so here's how I'd write it without the dispatch. async function someAsyncActionCreator() { //does work asynchronously }; let state = store.getState() someAsyncActionCreator().then(() =&gt; { state = store.getState() done(); }); state = store.getState() Also I'm not sure why you'd get the state initially because the async function will not run until the current code is run. So basically you are getting the state twice. Basically what your code is saying is: let state = store.getState() doTheSomeAsyncActionCreatorWorkLaterAfterTheCurrentExecutingContextFinishes state = store.getState() Which boils down to: let state = store.getState() state = store.getState() nowDoTheSomeAsyncActionCreatorWorkIQueuedUpEarlier 
[The guy who proposed `const` be added to JavaScript says it was a mistake](https://twitter.com/littlecalculist/status/917875241891676160)
https://twitter.com/littlecalculist/status/917875241891676160
Don't wait that long. Part of being a coder is just working on hobby projects on the side, even if they are small. It helps build your skillset and keeps you interested.
But if we spend years learning Java and Python and Ruby then how can we also spend years learning CSS, HTML, Bootstrap, PHP, WordPress, JavaScript, APIs, UML diagrams, React, relational databases, Google Developer tools, etc etc etc? Not to mention that knowing basic Photoshop/Gimp is also needed for a lot of us, along with some UX/UI. Web Development definitely needs to be it's own thing IMO. Granted it would have been easier to learn JavaScript if I had already learned Python or Java.
Any plunkr or equivalent to highlight the problem before and then the solution after?
oh. I don't think it will work like this. There are cases when people can replace Canvas with OffscreenCanvas and get a bit of performance gain (like when you are using a canvas to draw to another canvas or to a WebGL texture). But the big win here will be the ability to do all the canvas rendering (2D or WebGL) from Workers, which means the main thread of the page will be free. This allows for smoother experience, no hanging while loading textures/etc. It will also allow for modern native apps that are converted (compiled?) to WebAssembly to run in a "continuous loop" model, much like games do.
I'd second /u/rollickingrube and say you should have a look at React and Vue. While I'm not super familiar with Vue, React is very friendly to functional programming styles, and component based architectures (all major frameworks at this point, including Angular) make re-usability and unit testing so much nicer to work with.
&gt; Did you have all the built-in functions memorized? I've been coding JavaScript since the late 90's. No. I know a lot of stuff without needing to google, but there'll be times when I haven't use a specific function in a long time. &gt; How did you get through the interviews? You don't get through all of them. Some of them are practice, and you'll use those to learn how to interview, and what sort of things people throw at you. You will almost certainly leave more than one office with your tail between your legs, kicking yourself for missing something. Own it. Use those as studying points for your next interview. Fill in the holes in your knowledge exposed by those experiences. Personality is also a huge part of it, smiling, being positive, making eye contact, taking the impetus to stand up and use a white board to help you explain something, show them that despite your junior status and the fact that you'll be learning as you go, you're a good communicator and someone with potential return on investment. 
You should avoid parsing dates like the plague. You end up with garbage data if you forget to account for timezones or if you accidentally mix mm-dd with dd-mm or any of other dozens of problems. Prefer timestamps.
Completely agree. "let" should be a signal to look for reassignment later
you know shit called Mozilla Development Network ! shit's free mate! You know shit called Eloquent Javascript ? shit's free too mate. You know what else is free your creativity! You wanna learn JS, then build shit....make a button clickable - consult docs. fetch an element's innerText - consult the docs. fuck the tutorials. Use resources like web bos etc just to learn new tricks but 1st and last build shit. If you were about to drown, only option is to swim. I.e learn as you go. Welcome to life. Also don't learn cz you wanna pass job interviews - fuxk a job - learn coz you wanna build useful shit even if it's useful to you, your cat your grandma as long it's useful. JS so huge, you'll never know enough so take one day at a time. You'll never know everything about JS unless you're the creator or some shit like that. Now go grab life by the balls or let it grab you. Couldn't find any gender neutral terms my bad. 
They give bachelor's degrees in web development?! What "college" or "university" is this?
I agree that you can input the year, month (0-11) and then date as parameters to the Date constructor but if you just want to change the format of the string from YYYY-MM-DD to MM/DD/YYYY you can use something like the following: new Date(strYYYYMMDD.replace(/(....)-(..)-(..)/, '$2/$3/$1'))
You won't be a programmer. You'll only be a coder. A technician, never an engineer.
Oh, the `dispatch` there is a redux-thunk-ism. An action creator returns a function; it doesn't actually dispatch any actions itself. And the initial state assertion is more a sanity check than an actual useful test; you could easily omit it.
I think OP wants to parse a date. 
A few tips: 1. Javascript date handling is awful, use a date library and make your life easier. 2. Work with UTC timezones when passing them around, and apply the timezone shift when displaying it. Timezone is a visualization concern. 3. I find it easier to pass unix timestamps around rather than relying on ambiguous date formats.
Perhaps contemplate paying for a subscription to http://egghead.io. It doesn't solve the problems of having real project to work on, but it did really help me get up to speed with the current javascript ecosystem.
New grads never know JS for shit, but it doesn’t matter. You’ll get a job and learn so much while you’re working.
A whole industry of trainers built their careers around teaching us JavaScripts crazy prototype inheritance and they are reluctant to give it up, since classes came in I've stopped worrying about it (even though it's just syntactic sugar.) Just keep your class inheritance very simple and enjoy the new simpler syntax, ignore those telling you to embrace the power of JavaScript's _this_ keyword and use the latest language features rather than getting lost in a world of bind, apply and call.
The recent [Stack Overflow survey](https://insights.stackoverflow.com/survey/2018/#development-environments-and-tools) gave ~50% of all developers use Windows.
The posts saying "build" something are 100% correct, but I'd also recommend taking one or more online code tests, such as one of the many listed here: https://www.interviewmocha.com/pre-employment-testing/javascript The main benefit of doing this is that it will help you hone in on the specific pieces of Javascript that you don't understand well. However, because these tests can also be used to impress employers you'll also be helping your job hunt. But then, as everyone keeps repeating, once the test(s) let you know what you don't know, go build something that involves using the things you don't know well. I'd actually advise against copying a site though; building a site about something you like, even something stupid, will make you more engaged, which means you'll learn better.
I've run into this same thing, and my fix was to simply add a blank timestamp after the date, which seems to change the timezone from UTC to the current one: new Date( queryDate + " 00:00:00" ); 
Sounds like jQuery is in your comfort zone. You can definitely find places that rely on jQuery but there’s probably more opportunities elsewhere. One thing to remember is that libraries/frameworks come and go. The important part is understanding the fundamentals of JS. Also, allowing yourself out of that comfort zone, jQuery won’t be around forever. I would take a look at React along with a state management library such as Redux. Once you get over that learning curve you’ll realize the beauty of what a framework can do for you. I can’t speak on the side of Angular as I have not developed with it. 
Lol, you think a piece of paper is the be-all-end-all for engineering talent? That it most assuredly not the case.
&gt; What is going to happen to jQuery? Especially with the rise of Vue taking up the seat for smaller apps, I don't know anyone who *wants* to use jQuery/Handlebars anymore. It's too difficult to manage once a site gets large. There are and will continue to be plenty of places that still use it &gt; I feel what I have learned so far is irreverent. Welcome to web development. Everything you learned has to be scrapped every 2 years or so. Often less. &gt; and that I won't be able the program by events (functions) like I did in the past Not true. While many "actions" indeed are split up now, they're still tethered to events -- you just don't write the event in one go (as perhaps you already did) because multiple UI elements will call the same function. It's all about re-usability so your codebase doesn't explode as your front-end app expands in size. Out of curiosity, what version of Angluar did you use? A lot of people have moved to Angular2 or even A4, which is drastically different from Angular1, and much more similar to Vue and React.
Same boat before graduating. Idk if I know anything for shit and I'm not sure if I would even be any useful in the industry. When I got my job that's where I learned a lot of stuff. Bottomline? Just keep building. Try to start your own side project, a project that isn't posted on some tutorial site that you have to go through from start to finish. I meant a real side project, that came from idea/feature/functionality and then you will build it from scratch. I swear to you, even after this one project you'd be pretty comfortable and accomplished after.
Yes, [toBlob](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob). Note that Edge has its own prefixed implementation that behaves differently (synchronous, doesn’t use a promise).
Well, no. I mean, your example "works", but they don't behave the same. My example lets you write, for example: chainP(['filename', promisify(fs.readFile), console.log]) The first item in the list is an arbitrary value that gets passed as input to the next function in the list, but it could equally be a promise. Your example would require the first item to be a function, which would receive `undefined`. The equivalent example would be: sequence([() =&gt; 'filename', promisify(fs.readFile), console.log]) Really all any of this does is allow you to abstract the need to call `.then` between functions, which is a form of function composition called [Kliesli composition](https://medium.com/@luijar/kliesli-compositions-in-javascript-7e1a7218f0c4) It may also be worth pointing out that the approach I used of operating on the head of the list, and the rest of the body seprately, is sometimes called "cons"ing a list, from the lisp function `cons`.
&gt; I started reading Eric Elliotts posts re: classes, and he takes a similar view to many prominent and well respected thinkers in the community - kyle simpson, kent c dodds, MPJ among others. His position is quite simple - we shouldn't use classes. They've cut their teeth, written their books, and shot their videos when classes weren't available, and spent all this time explaining how JavaScript is so much better than other languages, because prototypes are so much better and classes are all wrong. So what did you expect the "prominent thinkers" to do? Double down on their existing opinions, of course. Meanwhile, the less prominent thinkers, you know the people working on actual large projects will most likely factor most of their code as classes and quietly turn out excellent products. &gt; My question is, what is (if indeed there is one) a good use case for classes in JS? When is using a class the optimal solution? A module/class is a primitive designed to simplify, clarify and optimize the most common way in which prototypes were already used by most people. All a class does is remove the noise, the boilerplate, so you can focus on the code. It also helps the compiler, and will aid your editor with a more robust, simpler static analysis of your code (great for autocompletion, error detection etc.). So when the prototype or object you're write looks like a class, which usually it will - you can write it as a class. And when it doesn't, you still have all of the rest of the JavaScript arsenal at your disposal. 
I work with Javascript at a unicorn. We lint against not using classes.
Or some ducks? :) https://cooking.nytimes.com/recipes/1015833-roast-duck-with-orange-and-ginger https://github.com/erikras/ducks-modular-redux
Are you talking about classes vs constructor functions or classes vs functional programming?
Mithril.js is where you should go.
I would suggest that never use "proposed feature" unless everyone working with such code base know what happening. Since Object Rest/Spread Properties is still in stage 4, reader should be warned to think twice before using this feature.
This guy has the answer. I felt the same way when I graduated about C#. I decided to determine something I wanted and built it on my own. Over time I've built some really interesting (and stupid) apps just to try new things. I learned that school gives a great overview, but there's just too much to master everything. Focus on what you want to excel at and go for it!
Agree 100%, I've followed many tutorials on many different topics and after each and everyone I don't remember anything and getting stucked solving problems (even the things which were in the tutorial). So I selected React (as my main framework to master) and started building things. Now I can confidently say I'm good in React ( learning Redux atm, but now I can get shit done :) ). 
I appreciate the reply! I didn't keep the property of allowing the first item in the array to be any type because I thought it didn't provide enough value. Of course this is debatable and now I'm starting to see how it can be useful.
I'm still an undergraduate and I'm also having the same problem. Practicing make them bit memorable but still I google all the time. Any even Ruby on Rails creator says no one needs to memorize the stuff on his [twitter](https://twitter.com/dhh/status/834146806594433025)
You can use: let date = new Date(); date.toLocaleDateString();
If you can’t think of anything at first go find a cool api related to something you’re interested in and make something that consumes and displays it in an interesting way - you’re gonna have fun!
You’re really annoying 
There are some good suggestions, here. Also, check out the sidebar links of r/learnjavascript – more of the same, really. It does get easier with practice. That doesn't mean you have to dedicate your entire life to programming, but you should plan time to develop your skills. There are a lot of directions you can go with JavaScript, so look at the kind of tasks you think might be relevant. Do you need I've been playing and working with JavaScript since 1997. I don't have it all memorized. I'm sure I would miss some methods on the Array prototype if you asked me to name them. I use MDN a several times a week. Sometimes several times a day. I can't tell you if `substr` or `substring` takes a length rather than an ending index. I don't use that enough to memorize it, but I know where to look it up (MDN). Knowing where to get documentation for the libraries and frameworks you use is important. I tell new developers on my team to browse through the docs for our libraries. I don't expect them to memorize everything, but looking can give you a vague recollection that says, "Hey, I think there's something to help me with this kind of problem..." There's too much to know it all. I started my current job with no practical experience on the main framework we use, so I read over the docs. I have them linked, and refer to them weekly. I use the same method of "I think there's something for this..." that I recommend to others. When people ask me questions about the framework, I open the docs if I'm not certain, and I send them the link when I find the answer. When we interview, we always ask developers to talk through their thought process. Even if you don't remember the syntax to solve a problem, you can show how you would break the problem down or what steps you would take. Ask questions. Be interactive. Admit when you don't know something. The people in that interview are going to be your coworkers, and they probably don't know everything, either. And don't forget to breathe.
Heck i Google the same function at least once a week. And i've been a full time JS dev for over a year now. Noone remembers every built in function. Sure if you use it several times a day maybe but the reality is that us devs google everything.
I read somewhere that out of the three; Angular, React, Vue -- Angular is the least liked in spite of being arguably the most popular. While I haven't tried Angular, I'm not surprised why you hate it. But Vue also uses conditionals and loops inside the DOM tho
Build things. That's it.
&gt; "The `class` keyword is now the most harmful feature in JavaScript" -Eric Elliot I'd suggest to just ignore everything Eric Elliot and Douglas Crockford rant about. Classes are very usefull to bundle a set of attributes and related functions, and ES6 classes do that in a much more readable way than before. Inheritance can be a source of issues at times but it's a usefull tool in the shed, if you don't overdo it. 
Nice work!
На уровне: хотите полететь в космос - будьте космонавтом
Oh! Blobs are PNG encoded! I saw the examples and just thought it was some pixel raw type tagged internally so JS knew to draw it when sent to a IMG tag.
I’d take it with a pinch of salt rather than disregard. I remember reading one of his articles about everything a developer should know in 2017 (many things I’ve not even heard of) and then at the end he pitches his $400 course lol. Just seems a bit cynical but I could be wrong. 
Exactly, cheap and fast is just myopic and bad business -- the long-term cost of ownership will outstrip what it would have cost to do it right in the first place
His views are extremely opinionated, but not necessarily wrong
I believe Kyle Simpson’s take on ES6 classes is still: only use them or don’t use them, just don’t mix them. Seems like solid advice to me. Any “this new thing is terrible and never use it” style advice is generally suspect (on any topic). React uses them everywhere, for example, so you can have stateful components. It seems to work for that paradigm because everything is a class or a pure function. 
Highly recommend Wes.
I think no degree will be sufficient to make someone a programmer, by your definition. Also there's nothing wrong with being a technician.
Curious, how is my position on this known? My comments here? Just wondering... To answer your question: don't stress about it, you don't need to use classes if they don't feel right to you. The TypeScript compilethinking r is built without a single class despite many people TypeScript makes you use classes more than JS does :)
Indeed, but if you still want to mess with global state and struggle with Redux and its boilerplate you can try my simple state management library: https://github.com/deamme/laco.
Yeah, all you have to do is to add `.json` to the last path, like this: https://www.reddit.com/r/javascript/comments/85xtpl/scraping_data_from_reddit_with_cheerio/.json
I feel this way too. I've followed InfernoJS for years now and the maintainers are still rocking it. 
He's usually right, but he makes a lot of enemies. He's most well known for being against OOP which annoys people who've spent years learning it as Best Practice.
No, blobs are just generic binary data. You can specify what type of image you want as the second parameter. What you might be thinking about is URL.createObjectURL(), which does what you described, using a URL as the tag (which is only valid until you destroy it again using URL.revokeObjectURL() or the page is destroyed).
Any character that isn't "{" will cause an instant return so yes, ternaries will immediately return
I agree about permormance and polymorphism, but a parser is a very bad example since it's one of the areas where functional programming exceeds.
http://www.codewars.com
It will be more helpful to think about composition vs inheritance or functional programming vs OOP. Think what suits better for the product / app you are building. Once you decide on that, pick functions or class and stick to it throughout the app without mixing.
Douchebag move to name it very similarly to the original rimraf! A simple type will end up in your repo to be installed instead of the popular rimraf package. 
This is the case with a lot of voices in the web space. I think people should be more cogniscent of it.
he's known because of his bombastic views, not because of the merit of what he says. he says stuff to get attention to his blog and the stuff he says is usually... dumb. it's not like "that is so wrong we need to silence this guy," it's just... dumb. it's like the evilness of banal - he says dumb stuff that isn't so dumb that it's worthwhile to write all these takedown pieces, but it's just dumb enough to be dangerous.
Did the course of instruction include computer science? One would think it should. 
For some reason /r/javascript really loathes the guy. I don't mind him, he is not one of the guys whose work I really admire but he does come up with interesting stuff now and then. Although I must admit, the Jesus hair grates
&gt; then at the end he pitches his $400 course lol. ...just like a whole load of others who make a living out of courses. That in itself is nothing wrong
Basically == is testing *equivalence* and === is more truly testing *equality* which it what you actually want in most cases (and the same for their negative partners). === and !== also perform slightly faster then ==/!== - though you'll probably only notice the difference in very tight loops so this is not the primary reason for using them.
Is it generally better practice to stick to the === operator and explicitly convert types before comparing them, or should we make more frequent use of == instead?
I think he meant her limited/closed mindset will never make her engineer rather than paper. But that doesn't necessary have to be true, she indeed made some points, but everything wrong about her comment is very common mindset among newbies. 
You are terrible person obsessed with tools rather than skill.
Yes read it, it helped me become professional programmer without high-school degree
I work with rails, and I find it's a really nice syntax for representing a database and it's behaviours. Objection.js uses classes for this purpose and from what I've hear it's been very successful
Just because I voice my opinion on a public forum doesn’t mean I’m a terrible person. The fact you would call me a terrible person is rather rude, especially when you don’t know the context in which I speak. I have you know that I didn’t get angry or make the junior feel inept or stupid for not knowing something, I took the time to teach them, educate them and helped them understand. This doesn’t mean it didn’t annoy me slightly that these developers didn’t enter a role with efficient enough knowledge. The fact you just took a shot at me, really was a cunt move on your behalf. Before you jump the gun in the future read the comment more thoroughly you unwarranted and unwanted cumshot. Lastly, go fuck your self. 
&gt; I'm starting my career as a freelance multimedia integrator (part of that is being a full stack web dev). Then you *must* learn React. It's more likely to find a job with React than with any other framework. Fortunately for you, it's very different from Angular.
You can, just specify more targets.
Dont forget to restart your project at least 3 times before release, and never get to the point you actually release it. 
This is reddit, opinions are hardly welcome
lolz 
Without such training, it is unlikely you will get the indepth knowledge and training on your own that won't give you gaps in your knowledge. Some people manage to do so but most people don't.
&gt; I am finishing up a bachelors in web development and I feel woefully bad at JavaScript. Those two things are not mutually exclusive. I find most recent college grads aren't prepared for real-world work as JS devs; the problem is that while a CS degree gives you a lot of things you need to know to *optimize* code, it doesn't really give you a whole lot on how to organize or design good code, the skills a person really needs in order to "know" a language like JS. Still, you can do a FizzBuzz, yes? Then the best way to learn is to do something you don't know how to do yet (and google and hack.) I went through a code camp and the #1 lesson I took away from it was that you shouldn't be afraid of doing something without knowing exactly how to do it yet. You should be able to be confident enough to say: "In order to do X, we need to A, B, and C. A is done by foo, which I know. I know that in order to do B, you need to do bar, though I don't know how to do bar, and I don't know what you need to do in order to do C - but I'll start googling and see what we turn up. I'll get you an estimate in two days and then we can start sprint planning." That kind of confidence only comes over time when you take on projects that are *currently beyond your skill level* when you start them, and *at the edge of your skill level* when you finish them. Do you know how to use callbacks for asynchronous functions? Yes? Good. No? Do that... then... Do you know how to convert callbacks to promises? Yes? Good. No? Do that... then... Do you know how to incorporate data from a 3rd party API into an application using AJAX? Yes? Good. No? Do that, then... Do you know how to set up a server for a webpage using Node.JS? Yes? Good. No? Do that... then... Do you know how to interact with a NoSQL database like Mongo? Yes? Good. No? Do that... then... Do you know how to create an API that reads and writes to that database based on AJAX calls made by the front-end to the server? YGNDTT. Do you know how to create data visualizations for that data in D3? YGNDTT. Do you know how to bundle your front-end JS files using Webpack? YGNDTT. Do you know how to use a framework like React/Vue/Angular to provide state management and interactivity tools? YGNDTT. Along the way, you'll pick up new techniques - new building blocks - that you will use over and over again, cause you'll see other people using them and you'll see how they can be useful. 
It’s a terrible time to be new to JavaScript unit testing lol. 
This is an amateur's comment. It is the training and information you receive that is valuable, not any piece of paper which you won't receive without the training and information. Some people can succeed on their own. Most do not.
Memorize? Hahahah! I'm a Sr. Engineer, and last week, I forgot how to write a for-loop in JS and had to google it. (Granted, that's mostly because I almost always use .forEach, .map, and .reduce instead...) 
How much are you paying?
Definitely get in the habit of always using ===, it may not make a difference most of the time since as you're coding you'll keep track of your types pretty closely, but once in a while you'll find it auto casting your Numbers or Strings wrong or some odd return from an API will get caught, and then it'll click.
Happy to be of help! The thing to remember always is "simpler" does not always mean "better." Often it can mean "confusing." Yes you could just target tags, but classes allow you to write some descriptor that will help someone else who has to update your code understand what they're looking at. You will in a professional environment hand code off to others or receive code from others very often, and the clearer it's written, the better. Coders must be very strong and very patient *communicators* to be successful.
I'm confused. This is "how to get a job 101" and has nothing really to do with getting started in remote work.
haha, thanks! the source is here: https://github.com/pakastin/shebangs/blob/master/index.html ;)
This exact question was asked yesterday - concluding that this is basically advertising at this point.
I'm asking this again because no one has replied to my post. I'm sorry if you thought otherwise.
lhorie, hi thank you for your reply. Could you elaborate on this? Do you mean we should replace &gt; hXXp://domain.com?date=2018-03-22 with &gt; hXXp://domain.com?date=1521691200000 Did i understand this correctly?
&gt; Since Object Rest/Spread Properties is still in stage 4 That literally means it's guaranteed to be included in the language. What are readers supposed to think twice about? 
Yea, so lenscrafter flattens the object and relies on the keys being unique globally in the object. The use case I imagined was picking up objects from local-storage into their respective state-slices. As the app progresses you need to ensure it loads correctly for all versions released. For example, in the first version you had a reducer that returned `{ request: {} }` but later modified it to `{ container: { request: {} } }` lenscrafter would ensure both objects could be parsed and updated correctly. 
We use `const` but we also started with the AirBnb style guide (like many others). TBH I don't think it's a big deal one way or another. It is a matter of style preference. The thing I worry about is almost exactly what was laid out in the rant. When looking at someone else's code what does `const` imply to them? Does it mean this thing should be immutable (although it truly is not)? Or does it mean something closer to the spec? `Object#freeze` is shallow which only gets us part of the way there. I think we need a true constant variable keyword. `const` is used in a lot of other languages to convey that (which I think is the other issue). `Object.immutable` anyone?
I use wappalyzer, although sometimes I feel like it's not entirely accurate, it gives a decent idea.
Type conversation
Coding is a profession and not always a hobby. Some of the best engineers I know don't code in their off time.
If you say so. Mom: Go get some pancake mix from the store Me: I don't wanna Mom: Okay I'll do it later Me: Wow you're a push over Mom: Rude Me: Rude
Hey guys, [GIF progress](https://imgur.com/a/qO6u5) I'm working on it for one month now and got the following work done: - Instanced rendering - Shadow mapping - Water (reflections, refractions) - Bounding boxes (AABB, OBB) - Vertical fog - Skybox - Textures - Ray casting (mouse picking) - Free camera - Calculations done within webassembly - Shareable meshes and textures - Billboarding (render 2d sprites in a 3d world) - Basic simplex-noise based terrain generation - Supported model file formats: wavefront, collada TODO: - Horizontal fog - Lens flares - God rays - Basic filtering (bloom etc.) - Skeletal animations - Multi-threading (but SharedArrayBuffer got disabled..)
Webpack is an over-engineered, masturbatory piece of shit. I have seen Triple-A games that have less compile time bullshit than a medium complexity fucking web app. Everyone who is working on this project is clearly trying to blow themselves.
Hi /u/ogmedusa, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
I think they wanted to get it it out so other module maintainers could update while they finished adding some polish to the docs. From the end-user perspective though it does seem an odd choice
Looks cool. Would love some developer insights, maybe blogs or some tutorials. Keep us posted on your progress!
You use Jest to unit test Mocha, then vice versa /s
Of the best engineers I know, not all of them code in their free time. But Of all the people I know who code in their free time, they are all the best engineers I know.
This is going to boil down to personal preference. The equivalence can be very convenient for things like DOM manipulation and loop design. Equivalence allows us to do things like this: int dec = arr.length; // ... while (dec--) { } Instead of having to type out while (dec-- !== 0) Equivalence is supreme when it comes to checking if parameters have content as well. if (!str) { throw RangeError('We dun goofed.'); If I want to do the same thing in Java, I have to do something like this: if (str == null || str.isEmpty()) { throw new IllegalArgumentException("Man this is ugly."); } Equivalence opens the door for nasty bugs if we're not careful, but when used correctly it doesn't impact run-time and it can allow for more elegant code. 
Well, this isn't Java. So, you don't have to put everything into classes. It's perfectly fine if your module only contains a few top-level functions and constants. Classes are great if you want to create lots of instances. Classes do this quickly and are straightforward to use. Now the problem are deep inheritance trees. They are just unwieldy and hard to change. This is where "prefer composition over inheritance" comes into play. Object composition means that your instances own other instances. Other languages also have traits or mixins to deal with this. There are ways to emulate that kind of thing in JS, but there is no native (declarative) support for it yet.
To add on to what everyone else said, I became a much better developer once I started building applications I found interesting on a near-daily basis.
He got class inheritance and object composition wrong, was shown how he was wrong, and never conceded. Instead he blocked the guy and doubled down. Moreover he maintains this guru persona with his ultra-strong opinions which aren't up for debate, only for clarification, and his "agent" and whatnot. It's just not worth the time. There's plenty of approachable, kind, willing to learn from others, and talented people to follow in JS these days.
I read that in Obi Wan's voice.
Yes this is totally a nice feature and is useful for checking if variables aren't null and numbers aren't 0, but if you're trying to compare to a specific value, I don't see why you should ever use ==. It's across the board less of a headache and better practice to just explicitly do your conversions and use === imo if (foo) {} perfectly fine if (foo == bar) {} bad idea I personally disallow == and != in my eslint config, but still use the style of equivalence checking you're talking about.
i don't really get the negativity here. if you don't like it, there's plenty of other good bundlers out there like parcel and browserify for smaller code-bases. webpack is really only as complex as you need it. in fact, the latest release doesn't even require a user-config by default. personally i find webpacks complexity and configurability incredibly useful, just for things like code-splitting, multithreaded sass-compilation, bundling and minification and the list goes on. moving from gulp to webpack it sure felt over-engineered at first but over time it's saved my team a lot of hassle (and time).
If your language supports functional primitive optimizations (e.g. Haskell) and you know the full grammar in advance, yes. Javascript is not such a language and ecmascript is somewhat unique in that it's generally expected that the grammar must be extendable outside of the scope of the core parser library (because of things like JSX and TC39 proposals). I've tried experimenting with parser combinators and they are way slower compared to what you can do with classes and procedural parsing. Javascript doesn't support pattern matching, so no dice there either. Also, it's worth noting that extending the grammar outside of the scope of the library is not really that straightforward with static pattern-matching based code, compared to the built-in polymorphic features of classes.
I wouldn't go as far as to make == a linting operator, but I agree most places we use == that === would be a better choice. As we've just covered, almost all the times that equivalence is superior it can be done behind the scenes. Now that I think about it, the only time I really use equivalence directly is when I'm working with numbers encoded as either Numbers or Strings. And in that particular scenario, it would probably be clearer to explicitly cast before usage.
Great! Thanks so much for the guidance!
&gt; Equivalence is supreme when it comes to checking if parameters have content as well. Unless you get a `NaN` from somewhere, and you will spend two sprints looking for it.
Do you mean ==/!= when comparing those operators to === and !==?
How have I never seen this before..
This seriously made me chuckle. Thanks! 
&gt; Did i understand this correctly Yes &gt; we will need to account for timestamp difference Yes, just multiply seconds by 1000 to get milliseconds 
When are they going to publish an official upgrade guide?
That sounds like it would be a terrible bug, but you can reduce the chances of that happening. For example, structuring your math like this will make NaNs irrelevant, because they will be treated like any other falsey value: /** * @param {Number} a * @param {Number} b */ function absMultiply(a, b) { if (!a) { return b ? Math.abs(b) : 0; } if (!b) { return a ? Math.abs(a) : 0; } return Math.abs(a * b); } 
Its not really. Forget about the testing frameworks for a minute. Lets assume you are working on a redux reducer, but frankly any pure function will do. All you have to do is to feed some input, and check if the output is what you expect. Just import your function, call it and make a big scary warning if the result isnt as planned. The test frameworks basically do that in a fancy way, or on a larger scale. 
Now, I'm not advocating for this, because I like webpack and the biggest thing that I like about it is the file watching and babel integration, which are pretty standard as far as these bundler-things go. But, you could just write vanilla JavaScript and include it in a script tag. No one is making all of us make these crazy single page web applications. I've seen medium-sized web apps, 50-60k lines, in a single source file, with simple, easy-to-read code. It can be done. Just minify it and serve it up. Again, I'm not saying there isn't use for webpack. But the negativity toward it is actually a little understandable.
Someone very wise once said: "docs or it ain't done"
You should avoid comparing values of different types. This extends beyond just `===` and `==`. `while (dec--) {}` for example will not do what you want if you get NaN from some calculation upstream. Polymorphic checks often have bugs due to forgetting to account for `0` and empty string. Etc, etc. The only time it makes sense to compared with a different type is when comparing to null or undefined. This is also the only time `==` can be useful since `x == null` means `x === null || x === undefined`. Always be explicit. Future you will thank you
&gt; And Node.js is your choice for the front-end. Uh, really?
They forget things they learned but a self-learner is more likely to never have learned what they're missing at all.
i don't really get the negativity here. if you don't like it, there's plenty of other good digging tools out there like trowels and spades for smaller gardens.
WTF.
God damn it, the thread title got me so excited only for me to see this two seconds later. Seriously, what fucking bonehead decided to release WP4 WEEKS ahead of having the docs finished? All I had to do is swap CommonsChunkPlugin out for this new splitChunks config, and I did, but it's absolutely absurd that I had to dig through several random gists, Medium posts, and hidden draft docs just to figure out how do it!
License no longer an issue. Facebook's app problems have nothing to do with react. 
That's what I was wondering. Last I remember there was an issue with Facebook claiming stake to React IP.
React no longer uses the "BSD + PATENTS" license - it was relicensed under the MIT last year. Regardless of what you think about the rest of Facebook, React is a fantastic technology, it's open source, and it's been widely adopted throughout the industry. I see no reason why React would be affected at all. 
Got any of those resources handy? :)
&gt; But, you could just write vanilla JavaScript and include it in a script tag. No one is making all of us make these crazy single page web applications ... I'm not saying there isn't use for webpack. But the negativity toward it is actually a little understandable. Which is why it's pretty silly people get so upset over Webpack *existing* new versions releasing. If you don't want a fancy build process, don't set it up. Browsers still eat plain JavaScript you serve to them, you can use a single file or run many in global scope if that works best for you and your team. But while you are free to do so, you should understand there's a *reason* many developers *want* to use tools like Webpack instead. People complaining about the complexity often take it at face value, instead of looking into what value that provides. Here's a few things I want 1. I want to write code in modules, so there is an explicit mechanism for exposing functions and values from one file to another without scoping issues. 2. I want to import all kinds of assets as I need them and know they'll be included and cache-busted appropriately, be it SVG, PNG, JSON, XML, TTF, SCSS or whatever. 3. I want types and linting for my code, so I will maintain consistent style, follow organization conventions, make less mistakes and give my editor better awareness of what I'm doing. 4. I want most cross-browser differences handled automatically so I can just follow the specification. Be it JavaScript syntax support or some style prefixing stuff. 5. I want to immediately see the changes I make without losing application state and I want unit tests to automatically run in the background. So far Webpack has provided me with all that good stuff. Hell yeah I've spent time and money configuring it in multiple projects, at multiple clients, and sometimes there's problems with it. But I absolutely stand behind the decision to use it and believe the quality of the software and pace of delivery would suffer without it.
Interesting read. Wasn’t exiting a dive into the c implementation. :)
Currently doing this. Highly recommend.
Thanks for the writeup. 
I'm a self taught developer but hold a 2 Bachelor Degrees in other fields of study outside of software engineering. These said degrees lay dormant because I rather code at the moment. I am not forgetting how much speciality knowledge is involved and required, please don't think that I am neglecting the uphill battle that juniors are facing, I'm not. My argument merely states that millennial developers and newcomers to the industry are not coherently understanding what they are learning and failing to comprehend the basic fundamentals. I don't expect a junior to understand the inner working of the virtual dom or know of the latest framework but I expect them to adapt at a sufficient level. If you don't understand BEM then use google, learn it and adapt. If you don't understand what an asset bundler does then use google, read the documentation, learn it and adapt. In theory you would expect juniors and newcomers to understand what they are learning but from what I observe they don't seem to consume and comprehend what they are learning. These universities are sending them off with basic knowledge at best and it's reflecting in their work. Yeah, sure they understand CSS (as an example) but having them get their head around a grid system is like teaching arithmetic to a 7 year old in some cases. It's just like a developer understanding jQuery but not having a clue how to code Vanilla JavaScript, that shit is not cochère and the issue is not their willingness to learn, it's that fact they are not understanding what they are learning because the industry is moving to fast for them. The industry is now overflowing with juniors but the lack mid-level and senior devs is abundant. 
I don't get it. &gt; webpack does not require a configuration file &gt; here's the simplest example of an entry configuration
To be clear, `===` will be faster for sure for functions that don't run very often (but they don't run often, so it's not super important). For ones that do, the JIT will analyze the types and optimize `==` into `===`. The real issue for me is accidental coercion.
lol what is this, 2017?
What it *does* is pretty simple - you can give it a name, and it'll return a function that takes a `location` parameter and returns the string. In ES5: function bankStatement(name) { return function(location) { return `Hello ${name}! Welcome to the bank of ${location}.`; } } As to how it could be useful... I suppose, imagine a function that might have to be called many times with a similar parameter, like `add(num1, num2)` where you always had to add 4 to some other number. Then, keeping with the principles of DRY, you could turn the adder function into a function that *returns* an adder function for some specific number. function addTo(num1) { return function(num2) { return num1 + num2; } } const addTo4 = addTo(4); addTo4(1); addTo4(7); addTo4(5);
It's no help for colors but Google fonts is excellent for finding aesthetically complimentary font pairs. 
I believe it will be a problem since react has no way of knowing that your state has updated and thus will not re-render, you could get lucky that something else triggers the re-render but I'd rather be sure than depend on luck.
A touch of basic Garbage collection is in order here. Basically, the garbage collector starts at your root object(s) and marks them as usable. It then marks all of their children as usable (and their children, etc). Once this has been done, everything that isn't marked usable is deleted. Consider our function from before function madd(a, b, c) { var result = a * b + c; return result; } When we call the function (eg `madd(1, 2, 3)`) we create one of those closure objects for this particular time we called it. At the end of the function, we return a value. There is a pointer from this closure to the parent `__closure__`( which is the global scope in this case), but not one the other way. When the GC (garbage collector) starts running, it marks the parent as usable, but never sees this closure object, so it is deleted. Let's modify this to make one that sticks around. function madd(a, b, c) { var result = a * b + c; return function getAnswer() { return result; }; } var answerGetter = madd(1, 2, 3); var answer = answerGetter(); Now we have three closure objects (including global) that will be created //madd closure object { a: getParam(0), b: getParam(1), c: getParam(2), result: undefined, //assigned to a * b + c later returnVal: undefined, //assigned to our inner function later __closure__: &lt;ptr to global scope&gt;, arguments: &lt;much weirdness in pseudo-array object&gt;, } //getAnswer closure object { returnVal: undefined, __closure__: &lt;ptr to madd scope&gt;, arguments: &lt;much weirdness in pseudo-array object&gt;, } //global closure object { madd: &lt;our madd function&gt;, answerGetter: undefined, //assigned to result of function call later answer: undefined, __closure__: null, //a ton of other things go here } NOTE: `madd` is assigned immediately because it is a function statement (not `var madd = &lt;stuff&gt;`) As we begin running, we create the global scope which will always be available (will never be garbage collected). When we get to the assignment for `answerGetter` we create a closure object instance for `madd`. When `madd` returns we create another closure object for `getAnswer`. Now, we run the GC. The global scope is usable. `answerGetter` has access to the `getAnswer` closure as part of that function. That closure object (via the `__closure__`) has access to the `madd` closure object. So nothing is collected. Let's say we run `answerGetter`. When we do, it attempts to access `result`, but that isn't in its closure, so it tries again in its parent `__closure__` (the one for `madd`) and finds it. It then returns that value which is assigned to `answer`. Now, what would happen if we added another line at the bottom like `answerGetter = 'abc';`? We would lose our access to the `getAnswer` closure. On the next GC cycle, the global would be marked available (along with 'abc', pointer to the `madd` function -- NOT the old instance) and the value of answer (which would be `5`). The two closure objects would no longer be accessible, so they would be deleted.
Here are my 2 cents: Personally I also avoid classes. And I can tell you two reasons why. But first I have to say, opinions like "don't use classes, ever" actually do have their reason to exist. The people behind them are just very bad at explaining the "what" and "why". At first I was also like "What? Why shouldn't I use classes? I don't get it. Are they crazy?" But after some reading and thinking I slowly understood what those people were talking about. *1. Class constructors lock you in.* There are several different ways to create objects: constructors, factories, serving precreated objects from a cache queue (forgot its name, but that's very common in e. g. games). Possibly even more. If you use a classical constructor you not only specify your own implementation (the constructor method) but also your user's implementation (`new Animal()`). If you ever wish to change your object creation to a different pattern you not only have to update your own code, but also your users have to, because `new Animal()` is tightly coupled to the constructor pattern. If you develop a library this would be a big breaking change. If instead you provide a simple function (`Animal.create()` or `createAnimal()`) you can do whatever you want. Your users will never need to change their code. This is also what Eric tried to explain but I wasn't able to get the message by reading his blog post. I hope this explanation is more clear. This is also why I always love to see if a programming language implements classes without the `new` keyword and use something like `MyClass.new()` instead. ("Your users" can be different people, but it could also be yourself.) *2. Binding logic to data is just an artificial limitation.* This is more my own opinion or experience. If I can write a function to work with data from any source, why should I put some artificial limitation on it? Best example is `Array.prototype.slice()`. It's tied to the `Array` class, but it works with any array-like collection like `NodeList`. This coupling forces us to do funny stuff like: Array.prototype.slice.call(document.querySelectorAll('div')) Imagine there was a simple method `Collection.slice()` or even just `slice()`... That would be awesome! This also reflects in the way I use TypeScript: Usually I declare some Interfaces that define what my pure data objects should look like. And my modules just export a collection of functions. If I need nothing but function `foo()` I can import nothing but just function `foo()`. Classes (which contain data and methods) on the other hand force you to import everything all the time. They totally defeat the flexibility of the `import { funcA, funcD, IInterfaceX } from './myModule'` syntax. (if `myModule` is used in a similar way as a class) This is why I also avaid classes. So, do I use classes? Yes, if a framework forces me to do (e.g. React). Do I complain? No, because the way classes are used here is a completely different story. Did I expect this comment to be that long? No... not at all :D
Unless you care about performance in which case classes are great because they will all map to the same compiled type under the hood, that's easy to break when using POJO
A higher order function is just a function which returns another function. In your example you pass in a name and get back a function which takes a location as its only argument. The benefit is that you don't need to have both name and location at the same time.
How long are the sessions? Also, I feel like that last Q in the FAQ might be referencing something that's not there...
Let's take on your function now and discuss currying. const bankStatement = name =&gt; location =&gt; `Hello ${name}! Welcome to the bank of ${location}.`; We can re-write this in a different way. const bankStatement = function (name) { return function (location) { return `Hello ${name}! Welcome to the bank of ${location}.`; } } You should recognize this as very similar to what we had before. //anonymomous function 1 { name: getParam(0), returnVal: undefined, __closure__: &lt;ptr to global scope&gt; } //anonymomous function 2 { location: getParam(0), returnVal: undefined, __closure__: &lt;ptr to anonymous function 1&gt;, } //global scope { bankStatement: undefined, __closure__: null, //lots of other stuff } When you call `bankStatement` you get a function back rather than a value. When you call that function with the location, you get back your final answer. var johnStmt = bankStatement('John Doe'); //we get back a function var finalString = johnStmt('New York'); //=&gt; "Hello John Doe! Welcome to the bank of New York." You could do this with only one function like you asked. The real question is why would you use two functions where one would suffice? The answer is ease of use. Which looks easier? var statements = [ bankStatement('John Doe', 'New York'), bankStatement('John Doe', 'San Francisco'), bankStatement('John Doe', 'New Orleans'), bankStatement('John Doe', 'Austin'), bankStatement('John Doe', 'Atlanta'), ] //far less repeating var johnStmt = bankStatement('John Doe'); var statements = [ johnStmt('New York'), johnStmt('San Francisco'), johnStmt('New Orleans'), johnStmt('Austin'), johnStmt('Atlanta'), ] //almost no repeating var statements = ['New York', 'San Francisco' 'New Orleans', 'Austin', 'Atlanta'].map(city =&gt; johnStmt(city)); What if there were several people? var cities = ['New York', 'San Francisco' 'New Orleans', 'Austin', 'Atlanta']; var people = ['John Doe', 'Jane Doe', 'Mr. T', 'Chuck Norris']; var statements = people.map(person =&gt; { var stmtCreator = bankStatement(person); //create custom funcction return cities.map(stmtCreator); //pass function to cities }); That's pure magic. We described everything without going into great detail or caring that much about the details. It's a very long topic in and of itself, but the ability to compose a bunch of functions relies heavily on this ability. If you want to learn more, I recommend these two books (in this order). https://leanpub.com/javascriptallongesix/read https://github.com/MostlyAdequate/mostly-adequate-guide
So what real-world use case benefits so much from having the same compiled type under the hood that using classes is necessary?
So don't use a casper and simply make the request manually. I mean first check how it looks via the Network panel in devtools and then repeat it via fetch/request/axios with right headers and data. "The right way" ;) If you want stick to casper double check libs which is depending on. Docs stand that it requires phantomjs (which is now deprecated, kind of) or slimmer (which runs best with ff 57+) - those are *headless browsers*, so they should let you simulate that auto-filling form. Especially the second one. If still no you can try to move code for puppeteer (library based on chrome). Maybe that will help.
&gt; Each session will last anywhere from 1 to 2 hours, depending on how much we need to build/cover From the FAQ. Not sure it was there when you asked.
Hi, thank you for the response. Apologies if you didn't want your name used in this, I found a comment you wrote on reddit in response to someone saying classes are 'fake' and considering your position i thought it was relevant! I can amend the post if you'd like? In regards to what feels right to me, well I'm fairly new (~1.5yrs) to the language so it's more a case of not wanting to form bad habits than anything else :)
Games for example
Perhaps we're looking at different pages? Here is the FAQ verbatim right now: &gt; FAQS Are there any pre-reqs? Experience with the web platform (HTML, CSS, JavaScript) will help, but if you're coming from a different programming language, it isn't required. If you're a complete beginner, you may struggle, but it's free so you're welcome to try it out. Will the recordings be available? Yes. We'll email them to you when the bootcamp is complete. Can I ask questions during the live stream? If you're a TylerMcGinnis.com subscriber you can 👀. I registered. What's next? We'll send you a reminder and any material you need each day before the live stream starts. But why male models? FAQs always remind me of this quote from Zoolander so I saw my chance and ran with it.
I'd also add these three links https://leanpub.com/javascriptallongesix/read https://github.com/getify/You-Dont-Know-JS https://github.com/MostlyAdequate/mostly-adequate-guide
https://color.adobe.com/create/color-wheel/
If you can get hold of React.js Fundamentals and Advanced LiveLessons videos by Charles Crawford, maybe through your local public library like I did. His explanations are clear and to the point. https://www.safaribooksonline.com/library/view/reactjs-fundamentals-and/9780134688671/
A lot of them are for individual functions from the same package. For example, there are 89 lines of lodash functions.
Oh, no, it's fine! I was just surprised to see my name listed with those others ;) I say try both! You can also check out code bases of similar projects to see how they solve problems. From what I've seen it's highly variable whether oop-ish class code or functional code clicks more, and either is honestly just fine in most cases. People just like being pedantic :)
Nice, though surprised to not see some basic Redux.
I saw your comment and added added a new item to the FAQ. Which is why the other two comments think you didn't read. 🙃
You shouldn't be. React does plenty fine without Redux. 
Yeah I had that. I tried so many different things to no avail. I put it back at the top and I'm still getting the same results. I'm also trying sinon fakeServer too.
Are you using jest+enzyme?
Yes! 
here is what I found that worked. var instruments = app.get.clone(app.get.currPairs()); var scanCandles = function(){ return app.get.candlesForInstrument(instruments.shift()).then(result =&gt; { if (app.get.isOandaInstrumentHistoryObject(result)) { app.echo(result); return scanCandles(); } else { return ''; } }) }; scanCandles() .then(callback) .catch(callback); 
Functional composition can look daring but it's a very powerful concept. In React it's mostly used to extend existing components. For instance, let's create a HOC that gives each component it wraps the ability to hide when you pass the `hidden` prop: const CanHide = Wrapper =&gt; props =&gt; ( &lt;div style={{ display: props.hidden ? 'none' : 'block' }}&gt; &lt;Wrapper {...props} /&gt; &lt;/div&gt; ) const A = () =&gt; &lt;div&gt;hello&lt;/div&gt; const ACanHide = CanHide(A) &lt;ACanHide hidden /&gt;
That's not an actual answer By which I mean, what are the numbers that show that using classes for game dev for instance is *necessary*? That you save so and so many micro or milliseconds with so many objects when working with classes versus when using plain JavaScript objects? Because otherwise it just sounds like premature optimization
I still think unit testing is a giant prank.
You should demand your money back
Sure, but component state shouldn't manage what should be managed in a central store.
Refactor `handleNewNoteSubmission` into it's own separate file then write test without having to create component, simulate click, etc, etc...
Yeah, thought so. But you can never be quite sure sometimes on Reddit lol
That also includes all of the dev dependencies. Just webpack accounts for ~350 of the modules.
I am using React.
I can give you a very brief summary but would recommend to google for JavaScript DOM interaction. Essentially it comes down to this: &lt;div id="game-screen"&gt;&lt;/div&gt; First you capture the element from the DOM (HTML) in JavaScript: element = document.getElementById("game-screen"); And then you are able to manipulate its attributes and change the content or style: element.innerHTML = "You can manipulate this element to write"; Now we have updated the text in the HTML using JavaScript. On the other hand, to go from the DOM to JavaScript you will need to use event handlers. Here we add a "click" event that calls a function when the element is clicked and updates the text again. We are still using the same element we captured previously: element.addEventListener("click", updateText); function updateText() { element.innerHTML = "The element was clicked."; } By the way, it is easier to use console.log() instead of alert(). You will find the output in your browser window.
Without a doubt, Fuchsia Comic Sans my friend.
&lt;p id="domElement"&gt;&lt;/p&gt; &lt;script&gt; var element = document.getElementById('domElement'); element.innerHTML = 'Hello World!'; setTimeout(function() { element.innerHTML = 'Hello Again!'; }, 5000); &lt;/script&gt;
Work out what each bit of that does and you'll have a better idea of the basics. Find a HTML boilerplate to paste it in to and run it, it should work though I did write it on my phone! There are loads of beginner courses online of you're still unsure. 
Okay, so I extract the actual api call into its own function. Then just stub out that function in under this test? Is that what you're suggesting? I can see that making it easier for sure. How else would I write this test if I dont simulate clicks? I try to test for behavior. The behavior I want is that a new note is rendered when you fill out the form and click "submit". 
These are the main two I wound up referring to the most. Official sources, but clearly incomplete (from a full documentation perspective). Should be enough to get you started, at least. * [Old alpha changelog](https://github.com/webpack/webpack/issues/6357) (scroll down to the CommonsChunkPlugin section) * [Gist from the founder giving an overview of the new optimization configs](https://gist.github.com/sokra/1522d586b8e5c0f5072d7565c2bee693)
What type of shadow technique did you use and how did you implement it from scratch? I've written my own graphics "engines" a lot when making games from scratch, but I always hit a brick wall when it comes to shadows. I've honestly never seen a good implementation of volumetric shadows, and every efficient shadow mapping implementation I've seen looks like poop.
They only get 400k funding a year, give them a break.
So if * Alice Bob, and Carol are the best engineers you know, * Alice and Bob code in their free time, Carol does not. * Alice, Bob, and Dave are all the people you know who code in their free time, * Alice and Bob are the best engineers, and Dave is not... I'm having trouble parsing this. 
What's wrong and what isn't is subjective, but the thing to realize is that the objectivity of his free advice is now in conflict with his financial interests. Another problem with Eric Elliott is that like many other "prominent voices" he tends to heavily rely on emotion, oversimplification and exaggeration to make his point, and the tendency is to recommend silver bullet solutions because those sound appealing to people looking to learn. Who would you rather learn from. Some boring guy tediously giving you the real pros/cons of every option under the sky, you know, the way engineers deal with problems. Or would you rather have some guy tell you "Wow 99% of all this stuff is just terrible, everybody knows that! You should do everything the X way".
Hi /u/luisvinicius167, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
[As I explained here](https://www.reddit.com/r/javascript/comments/85xt7m/when_if_ever_should_we_use_classes/dw2nkog/) I find that's not the case. Being extremely opinionated is in direct conflict to giving good advice.
He chose an OOP language where he can proclaim he's against OOP. Yeah, I'm not sure how you can see this as "right".
Instantiating a class also produces a "POJO". An object is an object.
Extract from the list ... @storybook/react-simple-di @storybook/react-stubber @storybook/ui @types/base16 @types/bugsnag .... in other words - nothing to see here, OP is overreacting [clicks on downvote button]
&gt; If you're not using inheritance (and you really shouldn't be, honestly, composition is far better) Most JavaScript developers don't even know what "composition" means, and that's precisely due to folks like Eric Elliott who have decided to give the term a new meaning. Composition is not a synonym to mixins. They are two distinct techniques. But because of that confusion in the JS community I don't even know which type of composition you're referring to.
It's a real answer for those who've bothered to do their research and have seen [the benchmarks](https://jsperf.com/prototype-vs-this). You're trying to get the people in this thread to chew your food for you, by repeatedly insulting them and annoying them into giving you more information. Enough is enough. The difference between creating an object from scratch vs. using a prototype is not relevant if you'll create a few dozen objects in your page and stop there, no. But if you'll have complicated set-ups with short-lived objects, like thousands of elements in particle systems as can be seen in games, or complicated state-keeping with tens of thousand of entities and value objects as can be seen in modern event-driven applications, then it does matter. And it doesn't just matter for performance, it matters for battery life, when you app runs on a mobile device. If you want your mobile performance and energy use to be shit, then keep your wasteful practices. It's your loss.
Do you have a benchmark with an _object literal_ (not using this inside a function) vs class syntax/the new keyword? 
Honestly, maybe some don't *need* Redux, but sometimes it's just so much more convenient. The whole prop-kebab game of passing down data 5 layers down gets old pretty fast. May not need Redux, but just having some kind of global store for shared state is in a lot of cases such a better development experience. Doesn't mean everything should end up in the global store. If no other part of your app needs some data, it's just totally useless to dump it there, and only creates a bunch of useless boilerplate. I use local state a lot for, say, component level UI state.
And you could have simply asked instead of bloviating, but I'll go ahead and answer the unasked question by saying I'm referring to *has_a* versus *is_a* relationships. 
Docs? People read them?
&gt; Ok, so when I hear people saying that JS doesn't have "real" classes, this isn't a distinction i should pay much attention to? There's no difference between JS prototypes and classes. Prototypes are runtime-bound dynamically typed implementation of classes, but this is because pretty much everything in JavaScript is runtime-bound and dynamically typed. However there are many other languages where classes are dynamic, and people still call them "classes" regardless, like Objective-C, where you can change the class of an object, or add/remove methods to a class long after they're created. This particular snobbery of the JS community that "prototypes are totally different than classes", or that "classes in JS are actually not *real* classes, they're prototypes" comes from years and years of developers mocking JavaScript as an inferior and dinky little language that was designed in 10 days to add some basic interactivity to browser pages. As a counterreaction to this mockery, the JavaScript community decided everyone is wrong and actually prototypes *are much better* than classic OOP primitives and actually everyone who criticizes them *just doesn't "get it"*. So naturally as JavaScript evolves and is adding primitives to make what's already in JS more syntactically and semantically accessible to programmers, these folks who've spent years nagging everyone how prototypes are totally different and better increasingly find themselves cornered and having to twist themselves into a pretzel about how JS isn't evolving to be more like other languages, but it's all a facade, a charade done to dupe the class-lovers into using JS. So uhmm... I got carrier away a little with my explanations... but tl;dr is yeah: don't pay much attention when JS folks rant about "real classes" or "classes vs. prototypes". It's all bikeshedding.
Thankfully, the new context API in React 16.3 will make it less likely you'll need to reach for Redux. It's got built\-in providers and consumers that you can use to access a context \(think Redux store\) without prop\-drilling all the way down to whatever component is way down there of your DOM tree. Similar to what we've been doing with Redux all along without needing to set up actions, reducers and higher\-order container components.
Wow an object is an object, who would've thought? And no, instantiating a class (in particular, a class that inherits from another class) does not in fact always also produce a POJO. That's the point of the *Plain* in Plain Old (Language) Object - they're objects of (super)type Object or the language equivalent. And in JavaScript you can create plain objects via literals, hence using classes becomes rather unnecessary.
If you don't care about performance, mobile device battery life and types (i.e. `instanceof`) then classes are unnecessary.
Since I've seen multiple JavaScript developers describe mixin composition as a *has_a* relationship (which is wrong) I still don't know what you're referring to.
...itself built with React. Nice!
Do you know how I found the first benchmark I linked? With Google. Try it sometime.
Do you know how I found the first benchmark I linked? With Google. Try it sometime. https://coderwall.com/p/jj6fwa/the-prototype-is-your-friend-if-you-care-about-perf 
I understood WASM as something you go to from other languages like C# or C++. Is that what's happening here? Or are you compiling javascript to WASM?
What issues are you having?
The whole engine is written in JavaScript and only the performance critical tasks are written in C and then compiled to WASM.
Professor wants us to “define a function called ‘rprint’ that takes three parameters and prints them out to the following order, 1) middle, 2) last, 3) first” 
Sadly it's still: 0. Setup appcache anyway because safari.
So what have you tried?
welp.. there goes my stylish nightmode css preset
It's basic shadow mapping with PCF and only takes ~0.4ms to pass
&gt; I use local state a lot for, say, component level UI state. Which how it should be. Even Dan Abramov said that. You don't need to put all state in the global store.
You can say that about any modern language that has closures and objects. So I gess C++ is multi-paradigm. Java is. C# is. Objective-C is. Swift is. And so on. But JS is first and foremost an imperative, object-oriented language, with a strong focus on mutable rather than immutable state. Look also at all the APIs built for it by browsers. Functional? No. Mutable objects. If it truly supported the functional paradigm, we'd have concept like lazy evaluation, memoization and the ability to declare semantically pure functions guaranteed by the compiler/runtime.
So if JavaScript was multi paradigm it would force us to write in a functional paradigm?
The expressions [].filter or Array.prototype.filter refer to the filter method in the Array prototype (the first creates a new empty array for that). The filter method, like many other methods can operate on anything that * allows indexed access * has a length property Both conditions are true, so you can use [].filter.call("apple", () =&gt; true) to invoke the filter method of the array prototype with a string as "this". The filter will call your predicate callback with the result of every character in the string, all of which are kept in the newly produced result array leading to the ['a', 'p', 'p', 'l', 'e'] output. new Array("apple") however creates an Array object containing one string object and the following filter will receive only that string object thus resulting in a new array with the same content.
Oh you mean the one where when you scroll to the bottom the author admits that performance is about the same if you run a fair benchmark? Try again
Well you can continue to be obtuse, or you can think what the difference is between a relationship and a construct
Yea. That can be done without redux for basic apps though 
This is the work I've done so far: function rprint(a,b,c) { console.log("1)" + process.argv[3]); console.log("2)" + process.argv[4]); console.log("3)" + process.argv[2]); } 
So do you actually have battery life measurements and such that demonstrate a significant impact from the use of object literals over the `new` keyword and constructors, or are you just repeating folk wisdom? Also `instanceof` is not particularly necessary to "care about types", my guy
Something with browsers whose versions aren't literally half the current would be lovely, thanks
I'm done chewing food for you. Time to discover Google. However: spoiler alert, prototypes are still faster (and most likely always will be, because it's simply less work to refer to existing functions than stupidly creating them over and over).
On the bright side of things, Service Workers [have been implemented](https://webkit.org/status/#specification-service-workers) in Safari Preview. Plus, Web App Manifest is [in development](https://webkit.org/status/#specification-web-app-manifest). While Apple has been reluctant, it seems that they're coming around to these Web standards, and so hopefully it shouldn't be too long now before they're fully implemented and available. It's also nice that developers don't need to do anything special to support Safari in the future, given that Service Workers can be implemented in a 'progressive' manner from the ground up today.
Using setTimeout() is one way to achieve this. What did you learn prior to this?
Do you want me also to wipe your ass, in case you can't? You gotta give me credit, I spent a lot of time teaching you stuff, despite I knew you're remain just as arrogant and ignorant as I found you. But everything has an ending, I guess. See ya.
If we weren't in /r/javascript/ I wouldn't even raise the question, because in other communities people know what object composition is. But since we are here, so I am.
https://repl.it/@mackness/TimelySelfreliantOolanguage
For example, to learn React, I built a pokedex with the public API (original 151 of course) these mini API projects are great for learning JS the is used in applications and frameworks
but why should I spend $50 on a good shovel when I can use a free plastic spoon to dig?
Admittedly my knowledge of Wasm is still limited - I've only poked around with emscripten so far. However, I wasn't aware you could use JavaScript and wasm together. Is there some kind of API for calling wasm code from JavaScript? How have you done this?
you’re close. try: function rprint(a,b,c) { console.log( "1) " + b + ", 2) " + c + ", 3) " + a ); }
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [maierfelix/wasm-particles/.../**compile.wasm.js#L15** (master → bf0e798)](https://github.com/maierfelix/wasm-particles/blob/bf0e798804c9c6a295cec2f9d3ad5be64d6ae06d/rollup/compile.wasm.js#L15) ---- 
The minute I finish learning React, a new framework will become more popular, just so that I never have the latest valuable skillset.
Node modules should lean on compatibility not readability
Can you give an example or link to such a video?
people were saying that same thing in 2015. 
Cryptichas has it. When inside a function, you can refer to items passed to the function by using the names listed between its parentheses (called the function's parameters). Your current code is right except that it's using process.argv[someIndex] instead of the parameter names. process.argv is more advanced and you don't usually need it - it lets you access the options that were passed into the program itself at the command line (so if you were in Command Prompt and typed "node myFile.js someOption", process.argv[0] would be myFile.js, and process.argv[1] would be "someOption".
As hardware and current methods stand right now you can't do that in real time.
I've seen demos of it running at 60 fps in webgl. Do you mean you can't do it in real time at all, or you can't do it in real time in a sufficiently complex scene?
Tyler's courses are so good! 
I saw that today. It looks and operates much better than before.
Open Sans or Raleway any day my friend.
For what? A web page or a text editor?
Sure why not
I’d advise reading the OP 
Yes, of course. 
I was hired for a position that uses a CMS written in PHP. The apps are written in JavaScript. I'd never learn these languages for any other reason. They're ugly and clunky, but I don't have the option of "just sticking with js" as the OP says. 
`global` is another feature in stage 4, but it seems far from included into the language.
It's not a bug when [the operator is defined that way in the language spec](http://www.ecma-international.org/ecma-262/8.0/index.html#sec-typeof-operator), as mentioned in the article. If `typeof null` is *not* "object" then the interpreter has a bug and is out of spec. I'm not convinced it was ever a bug; `null`-is-an-object makes sense in the context of Java (`null` is used in place of object references) so the type tag for object matching the `null` value might have been intentional. Why else would you make the object tag 0x00?
https://pigment.shapefactory.co is a great resource for color schemes, the shades it gives (when you open a color) are useful for UI tints like buttons and stuff https://www.typewolf.com is my favorite for trending/classic for pairs
Omfg. READ THE OP. He was hired for a job that require BOTH languages. Are you suggesting he walks in on day 1 and demands that his company stops using PHP?
good answer 
that's a good point too. javascript fatigue isn't really a thing anymore.
You can learn anything simultaneously, depends on your time and capacity. They're both C-like which is a plus. Make a little forum or something.
I've always wanted to make a forum. Any fundamental concepts or ideas one should know before diving into forums? 
User management is probably the trickiest part, it's good practice on both sides though. You could make a reddit clone.
I'd say must if you're working on a team.
There's one useful thing: `thing == null` is exactly equivalent to `thing === null || typeof thing === 'undefined'`, but much prettier and less error-prone. Therefore I configure eslint to allow comparing to `null` with `==`
holy potato, u got the skills my dude. would love a small fraction of the mindset, let alone the knowledge. Keep going!!
...Said Golang programmer
It's open\-source, they don't owe you nothing. Nonetheless I understand you anger.
The code for the filter method looks something like this: function filter (predicate) { var result = []; for (var i = 0; i &lt; this.length; i++) { if (predicate(this[i])) { result.push(this[i]); } } return result; } Imagine calling that with `this` being an array. The predicate gets applied to each entry. Then imagine calling it with `this` being a string. The predicate gets applied to each character. The first argument to `.call` is used as the value for `this`. `new Array("Apple")` is the same as `["apple"]`. In your first call filter is invoked with `this` as `"apple"`, a string, so you get characters. In your second call filter is invoked with `this` being `["apple"]`, an array with a single entry, so you just get that entry.
Actually, the term "relation" doesn't refer to relationships or to joins, but to collection of tuples. A . Yes, it's a misleading term: https://en.wikipedia.org/wiki/Relation_(database)
I would start vanilla.
Because string is technically an array of characters. Array(str) returns an actual array with str as its only element. 
*May* cause the phone to launch the dialer. I'm pretty sure a lot of newer phones are pickier about what they'll redirect to, especially Apple devices.
I did, yes. Now corrected.
/u/tyler-mcginnis is there a possebility to have vods? As european I can't stay up that late while working
Higher order function is a function, that RETURNS another function. So, that means: when you invoke this function, and assign the result to a variable; that variable is assigned the new, returned function. The higher order function's baby, so to say. The advantage is this: "Closure". Even after the higher order function is cleared off memory, the baby has access to the variables in the scope that it was "declared" in. function higherOrderFunction () { const secretData = '123'; return function(someNumber) { return secretData * someNumber; } } const newFunction = higherOrderFunction() ; this means: const newFunction = function(someNumber) { return secretData * someNumber; } Secret Data is in the scope that the baby was declared in, so the baby has "closure" over that scope. You can chain as many higher order functions as you want, and call like this to return the final baby: higherOrder()()()()()(someOptionalArg)()()(); 9 nested returns there. const newString = bankStatement(name)(location) const functionThatReturnsNewString = bankStatement(name); (newString === functionThatReturnsNewString(location)) &lt;- true 
&gt; const addTo4 = addTo(4); &gt; addTo4(1); So this is an example for currying as well right ?
Thanks. I got it.
I always find it confusing about HOC. anyway, this made it clear. Thanks a lot
Do not do this automatically, just provide a link or button they can click to initiate the phone call. &lt;a href=“tel:1235556789”&gt;Call Pizza 🍕 Palace&lt;/a&gt;
My five cents: automated / crowdsourced / otherwise not-by-my-hand translations is a no-starter. I'm not trusting the face of my project to an outside tool.
That is a really stupid idea. Do not waste your time.
If you start searching in Mobile Firefox it duplicates what you have already typed after every key press ha. VVuVVueVuV
Unfortunately, Babylon.js is not mentioned here, and is so worth mentioning. 
Recursion. 
FWIW, this is now implemented. Thank you again for the feedback!
It's definitely an improvement.
Try `fetch` https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
I suppose if you wanted to do something more modern, you could use the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) in conjunction with [DOMParser](https://developer.mozilla.org/en-US/docs/Web/API/DOMParser) to do something similar to jQuery.load. DOMParser can return a Document, from which you can just querySelector part of it to insert into your document. Fetch returns a Promise so everything can be chained nicely as well. 
Sure, that’s entirely optional and for specific use cases. We still believe that more than half of an app’s translations could be crowd-sourced as most strings are very short strings.
Wrong sub..
The FAQ states that the recordings will be available after the sessions. Fingers crossed!
The FAQ state that the recordings will be available after the sessions, fingers crossed!
Oh, didn't see that! Thanks for the answer
What would be the use case for this?
Pretty cool, def going to use this on my open source projects
Looks like they're using CSS variables, so maybe it's not too bad?
Lato is a great font
/u/tyler-mcginnis Is there any source code or anything I should have pre-installed before the camp? 
Good point! I agree that the definition in the current spec means that any other behavior would be incorrect. I think it's important to distinguish between the code in the initial implementation that originally created this behavior and behavior in an interpreter that deviates from the modern spec. That's a great point that `null` as an object could make sense in the context of Java. If `null`'s job is to be a reference to an object and we don't have an object, should it be clear it was still supposed to be referencing an object? I think that would make sense! In proposals about the language, I've seen Brendan Eich [refer to it as a bug](https://web.archive.org/web/20170111171239/http://wiki.ecmascript.org/doku.php?id=discussion:typeof), and while I'm inclined to trust his perspective on his earlier work, I could definitely see why that decision would make sense in the moment, especially given the short timeframe he had to write it! 
Actually for pure JavaScript code is useless. The internal v8 profiler is far better than this to track performances for instance. This tool starts being useful when your code starts spawning processes and you want to know the overall impact of your code on the system.
Text editor for programming. Probably should have specified that.
JavaScript doesn't really use classes like proper OOP, which can feel bewildering, but its kinda cool, because you eventually realize you don't need them. You should google the revealing module pattern. Usually a SPA and a backend communicate via JSON exchanged through HTTP. That is basically a RESTful API, which is an annoying term to me, but you are just call-and-response-ing JSON to URLs that are sorta like methods.
My point of view is that one not-quite-right / offensive translation can ruin the reputation of whole business. Additionally, my projects usually are huge and long term, so maybe "shotgun" developers rapidly producing many small apps / sites might be a better fit for your product. I "grew up" with the I18n solution of ruby/rails - `t('some.nested.key')` or implicit `t('.key')` helpers in place of text in source code, and am using same type of tools in JS now. It's not the fastest-for-developers way, but it trains you to think about translations from day one in a project, and it's easy to setup test failures for missing translations. The pain point I'm experiencing with this approach is pruning unused translations.
Yeah, don't use alerts, they are annoying. You want to be able to append text to a box in your page. JavaScript gets at the HTML in a dynamic way through the DOM API. [Here is a simple example.](https://codepen.io/anon/pen/qomGod)
Maybe I misunderstood the question, but doesn't this work? function rprint(a,b,c) { setTimeout(() =&gt; { console.log(c); }, 100) setTimeout(() =&gt; { console.log(a); }, 200) setTimeout(() =&gt; { console.log(b); }, 300) }
Hi /u/speedstarau, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/kavincat100, For javascript help, please visit /r/LearnJavascript. Thank you!
Anyone have any idea about the sparkline component they use?
&gt; the operator is defined that way in the language spec Dunno, with the blog's explanation, it seems to me that this part of the spec was influenced by the existing implementation, so more like a bug turning into a feature. It would be interesting to know if there's any real use case for `typeof null == "object"`, since it looks like people don't expect this behavior before reading the spec.
Please. No more. 
I'm happy for feedback on how I could make this more useful!
Yeah, you’re right. You’re probably not our main target, at least not short-term, though. Especially with this feature. Tbh we only created this website to try and validate that there is indeed a need. 😄 Thank you again.
I'm of the opinion that specifications can have bugs. The first ECMAScript spec didn't describe an idealized JavaScript. Instead, it was (largely at Microsoft's request) written to describe the JavaScript engines that existed at the end of 1996 and the beginning of 1997. Browser vendors never had to choose between complying with the spec and breaking the web. I can't say whether that decision was right or wrong, but my eyebrows sure went up when I learned about it.
Yeah golang, it is too far for you
How does this deal with browser cache?
Draw a table. It would be easier.
Forget the other person. Your solution is interesting but can be solved with 3 consecutive console.log calls unless you really wanted the effect of delayed logging. if you did want the delay, Ideally you would want to use the callback to trigger the next setTimeout. this way you can use all the same interval of 100 milliseconds.
Thanks for the response. I don't know why I was making the answer way more complicated than it had to be.
i hope for your sake that you just posted a random screenshot of a frameset, and aren't actually being forced to support Internet Explorer 5
`elem` is a new variable with the same value as the respective element in the array. If you change it's value, you're only changing the value that `elem` has, not what's in the array. If you want to change what's in the array, then you need to use the format `array[index] = value`. In the forEach loop, that would look like: test.forEach( function( elem, index, arr ){ arr[index] += 100; } );
It seems pretty neat actually but that's almost too much for just 12 weeks. I mean you could learn it but not fully understand everything in 12 weeks. It's cool though I like it
&gt; elem, index, arr Bro, It worked. :)
It’s all good! It’s because you’re human. I can’t tell you how many times i’ve done something in a more complex way when an easier way works just as well - usually it’s a matter of thinking through a few possibilities when instead I run with the first solution that comes to mind :)
While the other answer works, I think what you're trying to acheive is better served by the `map` function which explicitly changes that value: test = test.map(elem =&gt; elem + 100); Just remember that `map` returns a brand new array instead of modifying the old one.
Woohoo! BTW, if you want to be like all the cool kids, you'd use `map` which creates a new array. Sometimes code can get sketchy when you start changing values in objects (like `test`) that might be used in other places, so instead people will make new objects to prevent that from happening. var testPlus100 = test.map( function( elem, index, arr ){ return elem + 100; } );
Awesome ! I ll make sure I use Map. Every time :)
[OOP is dead](https://www.youtube.com/watch?v=RdE-d_EhzmA)
I'm missing a topic, "writing tests &amp; testable code". Looks quite promising though, looking forward to seeing the finished curriculum.
Some of the feedback seems to contradict the premise of "we're not assessing your design skills". But anyway, a small tip: if there is something one should **always** do is write a nice README. It's low effort and it really gives a much better impression. Not only that, actually for this type of exercise, the README works a lot in your favour. It is the place where you can present what you did and why... and sometimes more importantly, what you left out. As an example, if you write a good README and you explicitly put there that you intentionally left out implementing a handler for 4xx/5xx errors and that "in a real scenario of course you would do it", then they are forced to _-at least partly-_ not evaluate you on that or not count that against you so much.
Agreed and you are right in the sense of how the curriculum is laid. So it will be in phased manner after 16th weeks. 16 weeks will build up everything that is required to work as an entry to mid level engineer. After that, the rest can be spread out along with the work/internship as continuing education. Also as this is a work in progress expect some changes as it evolves. 
I could see it being somewhat useful for discovering and isolating memory leaks, though it would be better if it could track memory usage over time rather than just spitting out one aggregation report at the end.
for those that are interested, create-react-app is just as good for starting out with a modern stack all setup. https://github.com/facebook/create-react-app
Awesome! Learn-in-place is a fantastic way to do it. 
I don't think there will be. If that changes, you'll get an email about it. 
I didn't bother because if I did it would only say: ``` npm install and then npm start ``` I didn't think of anything else I'd put there so I just left the CRA one in there. We were supposed to have a call about my solution on monday where I would demo it so I didn't think about explaining every technical decision made. The excercise was supposed to take 3 hours and I already spent enough time on it before I even got to think about some readme. 
Article marred by bad English writing. 
https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2
Seems odd to skip over the benefits of ImmutableJS like the lightning quick dif to detect changes, and ability to update one value in a huge object much quicker. That's the only reason I use it over simply not mutating vanilla objects.
Use immer you'll not look back. 
&gt; JavaScript does not contain native support for classes. There, I said it. ... these break down under to hood to... functions and objects. ... It is a lie. Have I given you my Python/Ruby spiel yet? JavaScript's classes are more real and more normal than a lot of us think. In other languages, such as Python or Ruby or Smalltalk, for example, a class is itself an object, and inheritance is implemented with delegation. An instance delegates to a class object, the class object delegates to a superclass object, and so on down a chain of objects -- just like in JavaScript. This means, in Python for example, that we can [monkey patch classes](https://repl.it/repls/DevotedSuspiciousBighornedsheep), and already-existing instances will immediately reflect that patched behavior. JavaScript's classes are just as real/fake as Python's, Ruby's, and Smalltalk's classes are real/fake. And while you're stewing on that, also don't forget that JavaScript's [objects](https://github.com/Jeff-Mott-OR/javascript-cpp-rosetta-stone#objects) and [arrays](https://github.com/Jeff-Mott-OR/javascript-cpp-rosetta-stone#arrays) and [functions](https://github.com/Jeff-Mott-OR/javascript-cpp-rosetta-stone#function-objects) are also a "lie" -- that is, not implemented like their Java or C++ counterpart. JavaScript's objects, for example, are hash tables. JavaScript's arrays are actually also hash tables. And JavaScript's functions, callable hash tables. So if you want to avoid language features that are a "lie", then you'll have to avoid the whole language.
React 16.3’a revamped Context API will solve the issue of messy chains of props, until then there are some simple patterns you can use to automatically pass props down components.
I use seamless-immutable. All it does is provide the structural sharing and prevents mutations on normal js primitives and reference types. Then, when you build for production, all the restrictions and tests are removed, making it as high of a performing structure as you can have while doing structural sharing.
Great read! Goes to show thorough user testing is key to great UX.
Could you describe a scenario where you would want to do this? I don’t think I understand what this is providing. Thanks in advance.
How much quicker can it be than reference equality and mapStateToProps though? All a generic redux connected component needs to do is check against the state its interested in. Also updating values through shallow copies is very fast, they're almost no-ops. I've tried immutable before, but i can't figure out what even the slightest benefit of it would actually be. It's usually slower, when used naively very slow, makes a big thing out of something that's natural to javascript, and once it's in charge the entire codebase around is affected. That at least was my experience, would be great to hear what made it worth your while.
Finally! That was the only thing I missed from w3schools (don't kill me) 
Oh, I totally understand and I'm really annoyed when people expect you to put in a full day or even two. So I'm all for taking advantage of them saying you shouldn't do more than three hours :) I suggested the README thing mainly because it's very little effort for a quite nice return. Note, though, that I wasn't suggesting explaining _every detail_. Just the general decisions or approaches. Maybe mentioning the 404 wasn't the best example, so I'll say it more generally: Take advantage of the README to state that _intentional_ omissions are actually intentional. Like: "The project uses this and that and makes this or that assumption. Finally such and such isn't implemented for this exercise."
Technically the inner implementation already allows that. But build a reactive UI it's a bit trickier.
One of my old projects I breathed some life back into recently: https://github.com/Keyframes/Keyframes
&gt; Be aware that our formatName() is in react-tree.js AND redux-tree.js So, if changes need to be made, they need to be made in 3 places. I noticed this comment in your tests. Usually, this indicates that the function should be defined in a single place and imported into each file. That way there's a single source of truth.
I don't know what E6S6 is, but I googled https://www.google.com/search?q=how+to+es6 and found links like 2ality.com/2015/08/getting-started-es6.html https://learn.co/lessons/introduction-to-es6
Thanks for the mention! A better starting point than the 2ality link is the following book on ES6 (free online): http://exploringjs.com/es6/
There isn’t any standard for how you document your progress and results. Do what you need to do.
I used a combination of `opn`, SSE and D3 to show a visualization in a browser for a [recent project of mine](https://github.com/lhorie/bundle-analyzer). Maybe you could do something similar.
`=` is assignment. If you want comparison, use `===`. Also, with classList, if you want to check to see if there's a class on the element: https://developer.mozilla.org/en-US/docs/Web/API/Element/classList use `.contains`. If you want to add an event listener to the outerDiv, then add it to the outerDiv, not to document.body. (Using trustworthy DOM methods like `.appendChild` and `.createElement` will help a lot, since then you'll have references to the variables already - I'd generally avoid `.innerHTML`)
This is great. :D 
Well first, when you're mutating your state there is a lot of broiler plate to update nested values. setting for example state.sub.sub.sub.x = 2 requires you to deep copy the entire state, then change the one value, then return the result. With immutable you go : return state.setIn(['sub', 'sub', 'sub', 'x'], 2); So there is a win there, especially if state is large, its faster than any cloning available in vanilla JS. Then when you're writing selectors, such as for mapStateToProps, the change to see if anything is essentially instant, because they just compare hashes, not just refs. Also, imagine the case where you set sub.sub.sub.x to 2 when the value is already 2. With ref comparison you have a new reference, so it re-renders, where as since your actually comparing values with immutable you don't get the erroneous re-render.
What do you mean? You don’t know how to document what you’re finding or are you worried about the documentation you will find?
sorry, I mean I don't know how to document in terms of formatting, organization, etc I never did documentation for anything, just code :P
It's still as I said: &gt;If you want to add an event listener to the outerDiv, then add it to the outerDiv, not to document.body and it will work. https://jsfiddle.net/q8a1zhuu/
Yup, create-react-app is another option for this. But between c-r-a and NextJS I would still recommend getting started with the latter as NextJS supports server-side-rendering out of the box. Not something one thinks about when getting started but its good to have. Moreover, NextJS is production ready and recommended by c-r-a guys as an alternative in their repo – again not something one thinks at this point but its a huge advantage :-)
It allows you to change the way certain core operators work on your class, like how you can override `__getitem__` in python or the `[]` operator in ruby to change the way attribute access works. It also lets you override the `apply` operator so you can make it into a function object, or overriding the `getPrototype` operator so JavaScript will think it's a subclass of some other class.
No, I'm just asking how I should start to learn it, rather than what to read. Also, yes, link were lacking because I'm a dinosaur. I need ES6 explained like I'm 5. I've been learning the old school way for way too long. =/
The thing is, you will be learning constantly throughout your career. There will always be new technologies, tools, and paradigms. There won't ever be a time when you can sit back and say, I've learned everything I need to, now I can just work. Well, not unless you'll be spending your career maintaining legacy Cobol and Java codebases. I think GP was getting at the fact that it's best to learn what's out there and how to approach learning new things. You just need to know what's possible, then you can learn the details of any given thing on demand. You can't be expected to know the details of many different technologies from day one.
&gt;I'm just asking how I should start to learn it, rather than what to read. You should start to learn it by reading what the ES6 features are, which can be found on any search engine...? If you want, feel free to go to a bookstore and buy a modern book that looks like it'll teach you what you're looking for, I guess...
Oh wow I was on the rotate3d() docs earlier and wondered since when they have the interactive examples. Really helpful.
Sure you can, just add the listener *after* the element inserted, of course
Appears to be mostly working to me: https://imgur.com/a/wwSTG I'm unsure of what exactly is supposed to be where `undefined` is showing, If I did guess I would guess it was supposed to be `xenial`, the codename for Ubuntu 16.04.
My main focus is on the CLI but building a tool like that would be really cool! Maybe if the project gets some interest we can think about it.
jeez - having taken another look ive messed this up badly! what your saying is totally right. thanks :)
Unfortunately Notepad++ is there best there is.
Huh, I haven't tried this. I was just talking about Visual C# when I mentioned those features. Thanks! I'll give it a go!
I'd say [VS Code](https://code.visualstudio.com/). It uses the typescript compiler to infer types inside your JS application used for auto completion and hover widgets. It displays the JsDoc of variables. Easy integration of ESLint. Nice debugger functionality (which finally works now with experimental modules). Nice git support.
I use webstorm personally but all my colleagues use vs code. Seems extremely powerful.
&gt;I've tried using Sublime Text also but I'm not a big fan with how the code folding works, and since I'm usually working with large files it's an important feature to me. That's usually what modules are for
I think interaction design you arrived at is immediately useful to users upon arriving on a page with examples. It has been a great resource to me in the last few months
The question is what “real classes” actually means, given almost every language implements them differently. Classes are basically better syntax for _constructor functions_, which set up so-called _protoype chains_ – chains of objects whose _properties_ (fields) are inherited by the first object of the chain. However, you can usually pretend they are lightweight, flexible “real” classes. A key advantage of JS is that you can use objects for many things where you’d need classes in other languages.
Odd, In these exact cases my benchmarks sped up substantially. I saw the biggest advantage on the equality checks for my selectors, (mapStateToProps in React.) &gt; Atomics will resolve true if they're the same (2 === 2) Yes but perhaps I'm misunderstanding you, generally your not diffing atomic values, you're diffing objects. IE a = { a: 1, b: 2} c = {...a, b: 2} a === c // false despite same values
Not all relevant, but for a more professional-looking page, you might consider: * packing all of your Javascript into one file and serving that, rather than serving some 15 separate .js * having such a build process will allow you to write using the latest language features and transpile into ugly ES5 later * Are you *sure* you need jQuery? It's a somewhat-heavyweight library, and is known to be frequently overused by some people * Having a linting process (any linting process) will make your code more readable, which is both useful for you, and better than the alternative if potential employers look at your source. Consistent indentation is *good*. * You have a lot of this: `TweenMax.from("#parallaxContainer #bg", ...`, but there can (or *should*) only ever be one element with a particular ID in a document. I don't know much about TweenMax, but if that's meant to be a selector string, you should just use `'#bg'`. * I see `myEmail.innerHTML=linktext;`. Unless you're specifically inserting HTML markup, you should probably use `.textContent` instead.
Maybe full calendar? FullCalendar.io
In mSTP you'd normally only select state that can and should re-render the component. If it reads from an object, it should render when the object changes internally, if it's just interested in an atomic, for instance the objects name, it won't render unless the name changes. To make this really performant though has downsides, you need a somewhat normalized state shape. Maybe that's explains it. I guess for both one could use them not in the most efficient way which then would hit performance, for instance calling immutables toJSON in mSTP, or using nested, non-normalized state in plain redux where every mutation renders collection/listing components.
This is probably a dumb question but how are they running React in their game engine?
Why not follow what other sites do? There’s a wide variety of methods and styles, you can just pick one and replicate it. If you’re documenting code you language may have something that is more common, like JSDoc for JavaScript or Docblock more generically.
I'd guess an embedded browser and/or javascript engine.
Its there in the curruculum but not yet updated ad by default all code is test driven for the most initial part. But I will update it. There are couple of updates that will happen in the next week or so. 
On mobile right now so I can’t check the code, but why would you need React or Redux for this? I feel like a 10-minute plain JS script could spoil this up.
It was just a fun little project to practice organizing code using the same stack I use at work. It reality would prob be better done with canvas or something else. If you follow the heroku link in the README it should run on your phone
Though pretty neat, for a AAA game title the menu content loads very slowly. Also some of the menu design choices make navigating a bit tedious, but thats more of a design choice than anything 
Yea. I have experienced this before. Ended up using `onclick` at the element
You do you, but the less build process the better imo.
N++ have vim bindings yet?
You're animating a lot of stuff using the ```top``` and ```left``` properties, which changes the layout. The problem with doing this is that changing these properties will make the browser relcalculate the page layout every time you update them, which is slow. To make this even worse, changing the positions is causing Chrome to repaint the entire background image underneath the animated stuff, which is where most of the pauses are coming from (you can see this in the "performance" tab of the Chrome devtools). Firefox appears to be doing something similar, although their devtools are a bit harder to understand. The way to fix this is to use the [transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) property to animate your elements instead. This has two major benefits: * The page layout doesn't have to be recalculated every time the animated elements move. * The animated elements will be drawn separately from the rest of the page, meaning that updating their position doesn't cause the entire background to be redrawn. For example, this animation on your site: ``` @keyframes bounce { from { bottom: 3px; } to { bottom: 10px; } } ``` Would become this: ``` @keyframes bounce { from { transform: translateY(0) } to { transform: translateY(-7px) } } You would need to do something similar for all of the other animations. This article has a more detailed explanation of this: https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/
Yep it will say Xenial but I haven’t implemented that yet. Is that the correct name of your terminal? Some of the info in my VM seemed a bit off to me and I wanted to see what it looked like in a real setup. 
Definitely VSCode. Period. It can't be beaten or won't be soon. Atom has some more way to walk. Main thing is that it is pretty slow, at least for me (but not only). I know that my main problem is my 4GB ram and using Chrome, but yea, still.
Sweeeeeeeeeet!
Hmmm I’ll explore piping those three commands. Also, would you prefer it to say `Terminal: tmux` when it’s running instead of your actual term program name? How about something like `Terminal: Terminator (tmux)`
Hahahaha! Gooood! Pretty creative look! :D
Thanks for the feedback. I'll let you know when I have it working. 
Pardon my absolute ignorance, but don't frameworks like React specifically aim to promote client side rendering?
another article just for making ab article about ts, nothing new and nothing interesting.
My first choice is vs code, second web storm, third atom, fourth brackets
They are using custom react renderer.
It's cool. I love it.
Oh ya! Just shared what I've learned. And not each word is copy pasted!
If you have a strong knowledge of es5, maybe this page can show you what es6 is capable of : http://es6-features.org/ Then if you need to just Google some tutorials for the obscure part, or search for the MDN section for a complete reference.
But why though?
You can head over to codenjoy.tv and ask the author of it just that ;)
Finally a good way to browse version list
Yeah EA seems to experiment with at least few technologies, their websites and BF1 uses Polymer (2.5 so quite recent one) on them. The overlay in the game probably has some problems, not sure if it was a game update or a driver issue but i have almost 3s lag after any element is clicked.
That's [Autodesk's Scaleform](https://www.youtube.com/watch?v=Ot469EwnGyQ) and I bet that it's still used in some games today
This is awesome! Maybe we could have a dialog _inside_ the README where we collaboratively discuss these concepts and, in the end, produce a document that satisfies both parties – that would _totally_ highlight the nature of what Open Source is all about. 
Looks like the product was ended: &gt; On July 12, 2017, Autodesk removed Scaleform, Beast, HumanIK and Navigation from their online store, and announced the ending of support for the products. &gt; via https://en.wikipedia.org/wiki/Autodesk_Gameware#cite_note-3
still-I bet game devs who bought it last year are still using it for games to come in the next months.
React is made of three parts: * the "react" package, contains basic definitions and the component api. * the [reconciler](https://github.com/facebook/react/tree/master/packages/react-reconciler), which is an interface that configures a renderer. * The renderer itself. The renderer take a vdom tree and renders it to the target platform, for instance the dom, or a game engine.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [facebook/react/.../**react-reconciler** (master → cafee5c)](https://github.com/facebook/react/tree/cafee5cb2f28431f130ab1a755f47c1ec9c9cc9c/packages/react-reconciler) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dw5hh51.)
WebStorm. Occasionally I try VSCode but only to find that I still prefer WebStorm. Try both on and off - there is no reason to get attached to only one particular product! Neither one will live for eternity, and to have some perspective is a good thing.
I’m getting a 404. Was the page removed?
nope, probably just github having a bad day
Alternately const rprint = (a, b, c) =&gt; { console.log(`1) ${b} 2) ${c} 3) ${a}`); }
Oh sorry. I've been out of the loop for a few days. Here's my code: &lt;! DOCTYPE HTML&gt; &lt;HTML&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;/head&gt; &lt;body&gt; &lt;button onclick="flip('Rock')"&gt;Rock&lt;/button&gt; &lt;button onclick="flip('Paper')"&gt;Papez&lt;/button&gt; &lt;button onclick="flip('Scissor')"&gt;Scissor&lt;/button&gt; &lt;p id="output"&gt;&lt;/p&gt; &lt;img style="width: 300px;" id="image" src="stein.png"&gt; &lt;/body&gt; &lt;/html&gt; // I had variables and functions but removed them in frustration. I can try and dig those up as well.
The article doesn't state if that 42kb figure for the primitives SVG is as-is or compressed. If that is the save of the full SVG text then the technique could be much more "competitive" once compression of the HTTP stream is considered.
FANTASTIC! Could we have touch events for mobile?
Certainly not too advanced. Rather there is absolutely no need to use a settimeout. It serves no purpose and is arguably detrimental to tell someone who is just learning that it’s necessary. I apologize for being harsh. But please, don’t position yourself as an expert to someone who is new if you aren’t truly an expert. Anything beyond 3 “console.log”s here is wrong. 
How does the renderer communicate with the reconciler, especially if it's written in a language other than JS?
Mostly native node bindings from what i've seen so far, react-native-gtk for instance uses [node-gir](https://github.com/creationix/node-gir), otherwise a bride, like they did with react-native.
This explains lot of things
Yup as of es2015 I believe, But as OP is a beginner I figured template literals might create more questions than were answered, especially since the professor is teaching rudimentary string manipulation.
You're probably right. String interpolation is easier to understand and use, however.
Nice one. Good job. Continue please. Feature request : save to local storage the state of the app ;)
Usually the shift starts from using ajax callbacks to Promises. I would say start from learning Promises
Also looks like draft spec is at https://wicg.github.io/shape-detection-api/
Thanks for the comment, I'll be sure to bring it up with the team. 
Thank you! The local storage was one of the planned stretch features so will do.
Nope, don't think React aims to promote client side rendering. Its just a view layer that promotes their idea how to design app views. How you use this layer totally depends on your setup, you can use this on the client only or have it rendered on the server. Initially it was loaded on the client side but soon people started making complete websites using it and ran into SEO problems which was overcome by server side rendering (I guess this is the history). Using it with server side rendering you take out the dependency on any other templating language. Hope this answer your question :-) 
Honestly a basic calendar is not hard to do with a tiny bit of css and a loop 
Haha yea that one is legit!
xhr headers is supported. Check it out - https://github.com/shystruk/no-internet
Thanks for the reply. Very informative
As a general rule of thumb the two things you should stick to when animating/transitioning elements are `transform` and `opacity`. Avoid everything else if you can. And to be fair, there is a LOT you can do with just those two properties.
Oh stop! Dates in JavaScript is hard enough as it is. Saying "a basic calendar is not hard", in the context of JS could easy be qualified as foolhardy.
"Regular expressions are not only important in JS but also they are hardly readable and not easy-to-understand. There are libraries with different approaches to resolving this issues. For instance, https://www.npmjs.com/package/readable-regex. By using methods and properties you can write the necessary regex. Moreover, now they added named groups in JS (http://2ality.com/2017/05/regexp-named-capture-groups.html). This will make managing regex easier."
Thanks for the link. The related section of that page is pointing me in the right direction
thumbsup.gif
"Fun" fact - for a while, PUBG used an embedded browser over unencrypted HTTP.
I'm reasonably sure it's EAWebkit, a reluctantly open sourced (I mean, it's kinda forced by GPL) WebKit fork they made that is (somewhat) easier to embed in a game engine, and has all JIT JS compilation stripped out so it can be certified for use on consoles. It also makes it slow as balls, which is fine, you just gotta program it like it's a mobile website from 2003. I've had the, erm, "pleasure", of working with it not long ago.
Pretty sure both main menu + in game use web tech. Except main menu loads over the network (last I checked). 
Atom.io with ternjs and eslint.
Step 1: Nothing to do with Vue LOL
Seems like a weird spec. There is all sorts of verbiage about inputs, but the action performed is almost completely implementation defined. Seems like a compat nightmare.
seamless-immutable does not have structural sharing.
Just use Angular1. There won't be any breaking changes anymore 😄
This is great. I'd love to get some comments on my latest repo. https://github.com/snappyjs/node-request-queue 
I think you should uphold the integrity of the codebase in most cases. 
Great library! Does it works both on browser (client) and on node? (assuming Last version of both)
This is awesome. Brings back alot of memories. Thanks! 
Yeah building the API is the fun part for me, I have everything done on that side. But front-end building is starting to stress me out. I'm guessing I should maybe try something more lean like Vue.js? I can't get someone to do the recoding because one of my companies is already working without any investment except time, we have 6 people working on it and none of them coders. I am the one working on the platform, and even though it works and sells, it could be way better, I'm the one wanting to recode it. I just don't know in what haha
Of course no one should have to try to read the long ugly code that gets served to the browser in the final step - that's why you should have the source readily available in Github or such. Seeing someone skip the build process entirely probably isn't all that reassuring.
I'm in love with atom.io. I spent days getting all the plugins and layout the way I wanted, the sense of accomplishment and ease of coding when it's just right is awesome. 
&gt; I'm guessing I should maybe try something more lean like Vue.js? +1 -- you can include one file and you're off and running
Thanks, I'll give it a shot!
Not sure why you're getting downvotes. Is this running at all? I like to add alerts to my Adobe scripts so I can see how far along they get
[removed]
Thanks! Glad you like it!!
I am with you, I only do my own projects in pure vanilla JS. The only real downside would be if you build an MVP and try to hand it off.
Feels great, doesn’t it?
What is your MVP written in? Something like Rails? I ask because the guy who created Rails recently released a minimalist JS framework for pages that are mostly HTML-focused but just need a sprinkling of JavaScript: https://github.com/stimulusjs/stimulus
I am seriously curious - what compels people to write these kinds of blog posts? There are SO MANY OF THEM ALREADY. Is this saying anything new? Is it saying something old in a newer, more-interesting way? No - it's just like a rearranged madlib of every other "javascript fatigue" article. 
So you’ve got JavaScript fatigue fatigue? Have you considered writing an article?
Depends, some stuff on django, some on .net core and some even on php.
Yeah, from what I gather that's the best part of frameworks. But at least where I'm from, I find that exclusive front-end developers don't exist or are graphic designers that know html / css and barely any js, to teach them how to use npm would be extremely time consuming and back-end developers have 0 issue understanding a custom made minimalist router in vanilla JS
I'm compiling overplayed memes and gifs as we speak!
Complaining about people complaining about JavaScript fatigue fatigue is it's own meme.
People want attention, for people to know their name, to have something of a "presence" on the internet possibly to propel their own aspirations. It's annoying, but I think ultimately that's the reason. What's funny is if I was ever hiring someone or looking to work with someone, and I discovered they'd put out a tired, completely unoriginal piece like this, it wouldn't be a good look. 
Oh not that it stops me, just that I had no issues building one of my own that works pretty well. It's not like I build one for every app. I already use my own vanilla JS framework you could say, that is extremely minimalistic, a simple router and how to organize code. What I want to know is if this approach is OK or if I should get up to date even if it costs me dev time.
I don't know Tyler McGinnis course but I took Mac's and Wes Boss React course and they are both amazing!
I think you’d be surprised at the gains you can get out of some of the frameworks out there. Sure you’re likely going to have a larger bundle size, but performance gains can be huge. React for instance maintains a virtual DOM which it compares the proposed next state to, so it only re-renders what is absolutely necessary. Also I work in the innovation dept of a large corporation, so we’re basically running funded start ups and I have to disagree with the other poster than your new hires will rewrite everything. One thing we’ve learned is that a total rewrite of any of your apps can kill the business outright. Whether it’s bugs with the new app or the time sink it creates, it’s a real danger to undertake a task like that at such an early stage. Following, I would stress the importance of using a solution that will be future-proof and something that you can hire for. You don’t want to waste precious time by making every new hire have to learn a new framework.
Hi new, my suggestion is learn basic syntax. Depending on your programming skill level as I suggest these projects: Absolute Beginner: Hello world calculator Bounce a rectangle with lowering height each time it bounces. A Form that when the user clicks a button it shows the info they gave in a alert box. Intermediate: I would look into js.p5 its good graphics library. There is really good youtuber called the "Coding Train" that talks from larger topics such as machine learning to simple stuff. It will help you learn topics as a whole better, while also learning JavaScript. Advanced: Look for topics that are related to your field. For example, I am teaching myself web assembly and webgl since I am a graphics programmer. 
maybe it's a warning for devs 
I don't think league of legends uses react, I've been watching it package content and i wouldn't be surprised if it uses angular2
Fun thing is that I actually know about Promises! I've been using them without knowing they were a feature of ES6. They are amazing.
Coherent ui
Thanks for the input! If you had to go with one, which would you choose? Also, is Mac's course the Max's one I listed above? Thanks!
You just described everything ever done.
I have a friend working for X-Team which helped Riot in development of the web client and I think he mentioned React, but I might be mistaken
+1 for Wes Bos. His courses are fantastic.
`npm install whine`
awesome, thanks for your input! 
For me it feels like everyone is saying how you have to use front-end frameworks like Angular and you do and find out they completely suck and you'd have been way better off using nothing and you wonder, "Is it me? Am I missing something?" And the truth is no, you aren't crazy: front-end frameworks are the absolutely worst unless you are a beginner and haven't used anything else and wouldn't know better. It's crazy out there because angular, react, etc. are so hyped right now but you want to point and shout "The emperor has no clothes! Front-end frameworks are bad! You're all complicit in the lie!"
You're likely gonna get downvoted to hell for saying this, but I've been in this industry for 25 years, 20 of it doing almost exclusively web development, and I for one have been screaming the same thing for years now because it is so very, very true.
They sure are, I like that he gets to the point without wasting much time, and tells you the best way to write the code without having to refactor it later what others do. However, most of his courses got a big price tag on them and I don't like the 2 packages prices thing he got going on 
Use r/LearnJavascript. It's dedicated to that and should have resources for you.
What a pointless read. Medium has become trash
Have you even read the article or docs? It stands that's wrapped around XHR and fetch (so it does in browser), and in adapter-fetch docs you can find &gt; We use node-fetch as polyfill for Node.js
I just don't get really — really — what causes someone to write a comment like this? This website is FULL OF THEM. Is there anything novel? Has it at least taken an old idea and put it in a new light? No — it's nothing more than a special snowflake-tinged tweet out in the universe.
To get a job/promotion you have to be considered a “thought leader”, to be considered a “thought leader” you have to write a bunch of blog posts...
I have seen it recommended as a way to boost your resume. I guess recruiters see this as a big plus or something.
So you're going to roll your own JS that is transpilable to a mobile app?
Yes, and it seems to get the full course with authentication and hosting is the more expensive one. 
Thanks for the suggestion! 
Okay 
I think you've worked for the wrong companies.
I had fun writing this and thought I'd share with one of my most frequented subs. I'm sorry it was not to your taste. 
Just so you know React is A client side framework and authentications are done in that courses with something called Firebase a google service that is free to start using as the 'backend' but if you web app starting to get traffic you will have to pay for that service and same goes for hosting. You will need to learn Full-stack React developement that is basicly use Node.js/Express/MongoDB/React together to get some real authentication setup and I'm looking for a while now and there is not really any good course that learn to use all this together, that is not outdated or just overall bad. Hope the course Wes Bos is working on will cover that part of development.
That's why I switched to Clojure.
&gt; So you're going to roll your own JS that is transpilable to a mobile app? Yea! Who would use anything that doesn't "transpile" to at least one other completely unrelated arch?!?! Ha! Fucking nerds!
Do webhooks fit into the piece anywhere? this api let's me subscribe to methods via webhooks but that's more server to server. I'm not sure how i'd use those to have it appear on client's browser 
I'm already writing a post about javascript fatigue fatigue fatigue fatigue. Gotta stay a head of the curve, I expect to be hailed as a genius with massive forethought in about a year. 
Tools are tools. People want to bitch about something because they don't want the world to change and they want to stick with what they know. I've used many front end frameworks and I love writing in vanilla JavaScript and I see them all for what they are. Tools. React is fantastic. Do I need it to build a site? No, but its a tool I choose to use much like I prefer using a table saw rather than using a handsaw for some work, or kicking the board because i'm too stubborn to learn how to use a table saw. I find people that complain about frameworks tend to be the ones doing the least interesting work.
Sorry for my harsh tone, I did not realize you were the author. I should mention that there are many things I did like about the article: - I appreciated the links throughout the article, like the typeof null article - I thought the stockholm syndrome framing device, with the subheads as the symptoms, was funny and well-executed But this is just one person's opinion. Don't let jerks like me get you down. As others have pointed out, complaining-about-people-complaining-about-javascript is its own trope. 
salty people gonna be salt, dw bout it bruh
What's even worse: [Don't use arrow functions for instance methods](https://vuejs.org/v2/guide/instance.html#Data-and-Methods)
Hehe. It's an acceptable answer to say it doesn't matter. I was just trying to get all the facts for the case.
Oh, I don’t work for companies that believe that, but that doesn’t mean there aren’t a lot of them out there. 
Oh so that's why it sucks
Hahahahaha I feel bad for laughing at that but I have seen that mentality so much
No worries man. I appreciate both the positive and negative feedback. :)
Any reasons for doing that?
Tyler. Imho he is the best as in his course you can learn basics of es6, babel, webpack and redux. 
How many layers of javascript fatigue are you on? 
`Number.MAX_SAFE_INTEGER`
More memes than content I'd say it's a quality shitpost if it wasn't serious
We should let this guy know that he ruined the entire platform.
It wasn't meant to be serious. I should probably work on my tone to make that clearer next time. 
Evidence? From seamless-immutable’s docs: “Whenever you deeply clone large nested objects, it should typically go much faster with Immutable data structures. This is because the library reuses the existing nested objects rather than instantiating new ones.”
The You Don't Know JS series is very good, IMO ($FREE.99!). I would start by reading and then doing. https://github.com/getify/You-Dont-Know-JS/tree/master/up%20%26%20going http://www.codepen.io is a great place to test out code, and also look at others code. I've always had success at learning using the pattern of "bug the better dev." Find a mentor or mentors in other words. You can certainly find many knowledgable folks on reddit and the net in general. But finding someone who you can work on something with, and who's willing to help you along is a wonderful thing for your learning journey. Good luck! 
&gt; If money was no issue, I'd do all of them. Tyler is doing a free online React bootcamp in a couple of weeks, so...
Websockets - you can have the server broadcast to the client, rather than having the client ask the server
 hooks: { before ({ payload, next }) { const token = localStorage.getItem('token') next(withToken(token, payload)) } } I'm confused about the syntax here. What is "before"? A function declaration? I don't see a colon indicating it is a key, an arrow or function keyword. So I'm confused. Also, what is the Ramda assoc function? It's generating a function from the array it was passed somehow? I looked at the docs and it didn't make much sense.
create-react-app has zero lock-in. It is probably easy enough to port what you built in cra over to next.js within seconds. I would expect that from next.js (with a few tweaks here and there), they are catering to individuals / companies who have built react apps but need SSR, optimization support. Those advanced features are great but the increase in complexity takes away from learning the fundamentals for a beginner (thinking in components, component state / props and data flow / management). 
\*puts another piece of tape over my built-in camera\*
You know, I once read a book on Stockholm Syndrome. At first I didn't care for it but I started to really like it by the end.
Thanks!!
It's too late man. He caught you. 
Thanks for the feedback! I see no harm in adding comments throughout the entire source. I'll ensure they are removed at compilation time.
Try from a node repl
As soon as there's support for Typescript I'm in!
To clarify: the trend you are seeing is a migration from server-side rendering to client-side rendering. In both cases HTML and CSS are still used for layout and styling. The advantages of client-side rendering include: * Faster loading (after a, potentially, slower initial load) * If your backend is built in Node.js, you only need one language (and can share libraries) across the front end and backend. The disadvantages include: * Slower initial load * Some search crawlers still have trouble with client-side content * Can't take advantage of server-side caching (aside from API requests) Client-side rendering isn't right for all projects, but it can improve others.
10k characters is nothing. 
Start the project/s you want to build. Do the basic parts first and add your complexity as you go. Refactor if you have to. No reason to dwell on courses if you have a clear idea of want you want to do. It'll be better to tackle specific hurdles rather than letting a course teach you a bunch of stuff that might not help you get those projects done anyway.
He's not wrong, dates are hard but you can use date-fns or momentjs. The rest isn't that difficult 
Preach it man That's why I switched to scratch. 
Migration of technology is one, allows build in place of compontents, and then eventually swap out the framework of the website. 
What is this post supposed to be contributing? As *everyone* has mentioned, this is old. JS is what it is. It's not perfect, but it's a decent-enough tool for the very many jobs that it can handle adequately.
You could add it yourself.
Have you consider making an NPM Package for it ?
Wait, what? Whyyy?!
I just went through 7 JS calendar scripts, half re-wrote 1 because it was so sloppy with loose equalities and missing braces, started converting another 1 from jQuery to vanilla. Now I am trying one that seems to be working but is documented in Chinese. All this, just trying to add an array of dates to a calendar. Please miss me with the "it's not difficult" bit.
What kind of projects do you want to build in the long term?
I've parsed 1000X that amount, easily. It's not the length.
I work with json files with over 10MB each. Browsers and node.js can parse it just fine (it takes a while, but the job gets done). Where are you trying to parse it? If you can, share the json file so we can take a look. 
Polymer 3 is the tide breaking. go Polymer 3!
Give it a try I suggest, and if you do not like OOP, it has also facilities for prototype based programming, which should be better than what is possible with plain JS. And if you have any questions, I am happy to help.
I think they are using ember.js. ([source](https://engineering.riotgames.com/news/architecture-league-client-update))
Ugly af
Don’t change. It was fun to read; gave me some smiles; and made me feel better. Thanks!
I think he just wanted to write something. Not all content on the internet has to provide groundbreaking insight. 
This deserves gold.
Since I'm posting a critique on the above approach, I thought I'd also add an alternative I use. Instead of putting more states at a single layer of the application, I nest concern layers like Russian dolls: transport(service(domain(request))) Each of those layers individually has only two outcomes: success and failure, which matches existing promise semantics. But the failure of each layer has a different semantic meaning: - The domain failing covers application-level concerns like bad input, business rules prevent the request from going through (say ordering something that's out of stock). Or basically, think 4xx class HTTP errors. - The service failing means an internal problem with the remote service, probably a hardware issue or a software bug etc. or basically think 5xx HTTP errors. - The transport failing means corrupted response, or timed out response, the request being unable to reach its destination etc. Now why is this better? Because when you separate the concerns in layers, you no longer have to deal with three distinct error states in every API call. You can build *corresponding client-side layers to process each type of error, in increasingly generic way*. For example instead of processing 5xx type internal errors at every API call, I deal with this in my wrapper that does all API calls. It can resend a request, fallback to another service etc. And the client domain logic just cares for domain errors. It's much simpler this way. Much less repetitive code going on, not to mention we get to keep using promises which support only two states: success/failure.
We need a webscale platform built on object oriented nomads and a quantum blockchain.