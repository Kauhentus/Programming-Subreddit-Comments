Pasting plaintext placeholders is a feature that could be certainly added to this guide. As well as support for autocompletion. I [opened a ticket for that](https://github.com/ckeditor/ckeditor5/issues/1629) to not forget it. Regarding styling tables, it's possible to easily add support for `&lt;figure class="table *"&gt;`. It's also possible to add it directly to `&lt;table&gt;`, but the former would be easier and allowed more styling options. Regarding the UI, with a bit more work it will be possible to create an identical UI as for images. We plan to ship both things in Q2-Q3 this year, but I'm quite sure people did that already in their projects too.
* Downloading it behind a corporate proxy * Installing it in CI * Inability to intercept fetch * Dark magic with automatic awaits
I updated the JSC core in our app a few months ago and it was a nice performance bump. Don’t have any fancy profiles for ya, but it was solid. 
Hi /u/mudza100, this post was removed because your title included a URL. Please use the `submit a new link` option with a descriptive title. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The update is really great - a complete reshoot. If you gain some experience with a frontend framework such as React or Vue, there is a great section about REST apis which you can build on with your framework of choice. &amp;#x200B; The new edition is much clearer, has better code standards and in imo great content. I'd definitely turn to Mead now as the primary source for learning Node. 
What's the problem with "Downloading it behind a corporate proxy"? It's just the initial downloading? Or using it behind the proxy? And the CI? What are the problems? Thank you @Reashu.
Thanks for the pointers! I was using codeacademy until my 7 day trial ran out. Did you pay to sub to codeacademy? 
Title felt a bit clickbaity, but I do respect the heads up on some of these use cases. Especially the `moment(undefined)` behavior with the typo example! I like that there is a decent smattering of libraries examples and opinions with your reasoning behind them. Good for folks whether they use moment.js or one of the other libraries! BTW, the undefined issue I mentioned before, were you able to see if that example worked the same with any of the other competing libraries or the native Date?
I'm like 65% through Max's node course. It's good, it's even very good - but it handles too many topic imo and just scracthes surface of them, then you jump to another subject etc. so if you want to remember what were you doing, you got to dig deeper by yourself and practice it few times on your own. I grabbed today Mead's node course, since I was very happy with his vanilla JS course - If anyone is interested, I can share my thoughts after getting my hands on it. Both instructors are great, both have different approach. IMO you should get both of them, since they are only like 10$ &amp;#x200B;
[removed]
Just the initial downloading, which either didn't seem to respect any proxy settings, or was unable to use them correctly. This might be fixed by now, or perhaps be a user error. CI installation issues were caused by us saving node_modules between build steps, but not the Cypress binary. Just another bit of configuration we had to do which wasn't well documented. 
All right, thanks for taking the time to reply. Different folks, different strokes, I guess.
It's worth noting that "callback style" is not Node specific. That's how JS works and how it's always worked. I highly recommend learning it and promises. It's not as hard as it seems. It's going to restrict you a lot to avoid it, even in other languages.
The mutability thing is big for me. I like to code in a functional way, and it's harder to work with moment in a side effect free way.
I know that title may be little clickbaity, but since there is a true content behind it I don't have no remorse about that. &amp;#x200B; &gt;BTW, the undefined issue I mentioned before, were you able to see if that example worked the same with any of the other competing libraries or the native Date? &amp;#x200B; That's good question. Day.js behaves exactly like moment.js in that matter. Date-Fns &amp; Native API do not throw an error, but returned object is Date(Invalid Date), which is better solution, for sure. Last but not least, only Luxon and JS-Joda throw an error so you are immediately aware that something is wrong.
I agree. Moreover, it returns and mutates at the same time, so you may be not aware that you just mutated your date.
great lib, thanks for share
is there any way how to use timezones in day.js? I don't need them at front-end but it'd be nice to use to use the same library for both front-end and back-end
For anyone listening, I figured out how to do it. Results here: \[[https://codesandbox.io/s/p74614jz7m](https://codesandbox.io/s/p74614jz7m)\]([https://codesandbox.io/s/p74614jz7m](https://codesandbox.io/s/p74614jz7m)) &amp;#x200B; It turns out the \`pose\` prop can take an array of poses. So I split out the location poses from the z index poses and gave the z index ones a transition duration of 0. That way the z index can transition instantaneously, and the margins can transition over the desired 300ms.
Probably @Baryn mean when user focused on e.g. textarea
 moment().format() // &gt; 2019-02-08T17:07:22+01:00 moment(undefined).format() // &gt; 2019-02-08T17:07:22+01:00 o rly? 
As I wrote in article, there is pull request with timezones support [https://github.com/iamkun/dayjs/pull/325](https://github.com/iamkun/dayjs/pull/325), but that's all I'm aware of. If you need tz and looking for something good both on FE &amp; BE I'd probably choose Luxon.
Yup. Even Native API returns `Invalid Date` for `undefined`. Treating `undefined` as a lack of argument is naive and error-prone.
But if you have `moment()` there is no way not to have `moment(undefined)`.
thanks for the recommendation but I'll try day.js anyway because it's smaller and it has the same syntax as moment.js so I can use them more or less interchangeably but if I'd need timezones at front-end I'd give Luxon a try
ES5 ``` function betterMoment() { if (arguments.length === 0) return moment.now() else if (arguments[0] === undefined) throw new Error('Undefined is not valid date.') else moment.apply(this, arguments) } ```
Actually, they could easily distinguish between \`moment()\` and \`moment(undefined)\` by doing something like \`if (arguments.length === 0)\` (like pointed out here: [https://github.com/moment/moment/issues/1639#issuecomment-69281975](https://github.com/moment/moment/issues/1639#issuecomment-69281975)), so these are two different cases. ;)
&gt; ugly constructions That's a subjective opinion on language syntax &gt; it's not declarative at all. It is an array declaration in a Promise call, just like your code has a `new` declaration then a `.call()` There are direct analogous between both implementations. * Class declaration = function declaration * Class initialization = array declaration
Guys I have started learning js last week and i was trying to do this- [https://imgur.com/QNhwtdp](https://imgur.com/QNhwtdp) How do i make it so that the rule isn't applied on symbols and how do i get user input (do i use window.prompt or something?) This is my code- &lt;html&gt; &lt;head&gt; &lt;title&gt;swedes&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!--consonants doubled and o in between--&gt; &lt;script&gt; 'use strict'; function swedify(str) { const words = str.split(' ').map(word =&gt; { const letters = word.split('').map(letter =&gt; { if (letter === 'a' || letter === 'A') { return letter; } else if (letter === 'e' || letter === 'E') { return letter; } else if (letter === 'i' || letter === 'I') { return letter; } else if (letter === 'o' || letter === 'O') { return letter; } else if (letter === 'u' || letter === 'U') { return letter; } else { return letter + 'o' + letter; } }); return letters.join(''); }); return words.join(' '); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
Hi /u/ashish_feels, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/meatinyourmouth225, this post was removed. Well, this is awkward. This subreddit is for **javascript**, which is different than **Java**. In other words, `javascript !== java`. Maybe try one of these instead: * /r/Java * /r/JavaHelp * /r/LearnJava Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/NickEmpetvee, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bubbler63, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kevinisathought, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/EvoNext, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/vzaidman, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yuri_s, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yuri_s, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/NB_29, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/williewodka, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Careerier, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; This is totally fair offer I don't think you are being completely objective. Hopefully your business is going well.
expanding on this, it also allows maintainers to compile/transpile their codebases into a dist/ folder and maintain their "working" files in a src/ folder (or whatever someone would like to call it) &amp;#x200B; When people use your lib they will then get access to \`/dist\`, and when you work on your lib you will work in /src and build to /dist using 'npm run build'
I leave this here, is case some of us fancy a challenge, and a challenge it is : putting JavaScript onto the rails of an encyclopedic format could seem an endeavour akin to teaching [cats](https://hooktube.com/watch?v=4rrXR6n0RTY) to march in step ;-)
We use date-fns for everything these days.
Yes, and jQuery is several times slower than querySelectorAll. But they do different things, so I expect that. 
What do you mean by "different things"? moment("2017-01-13T10:04:15.569Z").format() // "2017-01-13T11:04:15+01:00" moment(new Date("2017-01-13T10:04:15.569Z")).format() // "2017-01-13T11:04:15+01:00"
Their documentation needs a big bold disclaimer stating this. Can't tell you how many hours I've wasted due to this reason. 
Sorta? The native Date using `undefined` that way is one of the reasons ECMA is working on new Date functions; it’s pretty unexpected and should have never happened but it can’t be simply fixed due to backward compatibility. You _should_ treat `undefined` as a lack of arguments. 
Don't you have any timezone-related issues?
This appears to be an assignment, so I won't give you the answer straight up. My suggestions are twofold. First, check out HTML inputs, and how you can attach functions using onchange https://www.w3schools.com/jsref/event_onchange.asp After you've processed the output, you'll probably want to throw it back up on the page somewhere, so possibly also add a DIV tag for that, and change its value using document.querySelector().innerText Second, you might want to check out String. prototype.replace . You can pass in a regular expression to this function -- read up on regex , and you should be able to figure out a way to omit symbols
Why do you think that? What are advantages of such an approach?
Its amazing how fucking complicated everything is in JS
Intuitiveness. `undefined` isn’t `null`, it’s meant to show something is simply not defined. So why should an API care if someone attempted to pass in something not defined? It shouldn’t. Most JS APIs work this way and the ECMA folks largely agree (some of them found the native Date handling both amusing and sad the last time I saw it brought up). 
Yes, thank god Java is just a total paragon of how to do dates right /s
No, our applications are rather regional and record when things happen on certain job sites, so it doesn't make sense to show the user a date based on another locale.
Why is that a response? I don't get it.
You mean how many badly written libraries there are? I don’t understand why people rely on them so much in the first place. Most of the time it is simpler to write your own function.
Well, I mostly agree, but don't you think that quite error-prone? &amp;#x200B; Most of the time, we operate on object's properties and IDE won't inform you that such key doesn't exist in your object. Pointing to non-existing key means you'll get \`undefined\`. You were trying to pass data to the function, but you ended up with undefined, which is treated by function as no arguments... but that's not that you were trying to achieve and it's obvious since you were passing an argument. You explicitly pass an argument, but function pretend that no argument has been passed.
You’re trying to find a way to fix other people’s mistakes. Don’t. It’s a can of worms that will not end well. There may be plenty of times where you want to pass something in or accept default behavior, I can’t imagine that being a “100%” mistake. `undefined` is literally just that, something that is not defined. Handling it any other way, like the old Date API, is a mistake (and a well established mistake at that within ECMA). Also note that accessing the `arguments` object prevents some optimizations and is usually a bad practice unless absolutely, absolutely necessary. 
Something I'm actually busy debugging right now- Keep in mind: We are in the process of migrating to graphql so all of our API's go to \`/graphql\`. Our cypress tests rely heavily on \`.wait('endpointName').then(() =&gt; keepDoingStuff())\` Problem Area: After the creation of an asset we make two requests to graphql simultaneously- The first is to update the parent of the new asset, the second is to fetch the new asset from the api. So in our cypress test were we say \`\`\` Cypress // create asset .wait(getNewAsset) .then(data =&gt; // wrap data so we can use the id later ) \`\`\`\` There no longer is any guarentee of what \`data\` is- it is either the parent or the asset, whichever finished first :(
Because if you don't like weirdness in javascript, then one, you think java is perfect and two, you're totes mcgoats saying every other language is perfect. 
That's a bad idea. Unless you can handle all the edge cases, then you should use a library. 
Finally. 64bit support :D
I guess parent hasn't heard of JodaTime
As the other person said, this functionality is only for people interested in modifying or contributing to your library, not people looking to only use it.
Depends on what you are doing. Most of the time it’s stuff that is dead simple to do in ES6 but people are just being careless and lazy.
I would argue that it's careless to try to reinvent the wheel, especially with anything involving time and time zones. 
I've been using Flutter for the past two months and I love it. So much better than the cluster that is React Native. 
Btw. JS-Joda "is inspired by Joda-Time, having similar concepts and the same author."
A function that can take many different formats like `moment()` does is going to be slower than a function that can take fewer formats.
I didn't know they made v5. I'll evaluate it, thank you.
This is something I don’t like with `Array.prototype.sort` and `Array.prototype.reverse`. They both return and mutate while most of the other methods don’t.
We use moment a lot in our codebase, and if it wasn't around I don't know how much other bugs we probably would have had if we had to implement our own date handling code at the time. And I mean, the fact that the momentjs people are developing a modern competitor to momentjs (luxon) probably means that they agree that moment isn't the greatest option around nowadays.
Yup, but in both cases we are using the same function called `moment`. In first example we are using ISO 8601, in second Date object that already consumed same ISO 8601 string. In different words: It's not moment() vs date(), it's moment() vs moment(date()). &amp;#x200B; Anyway, my point isn't that this is magic. My question is: isn't it a proof that there is something wrong with its design? Do we really need such a complex function all-in-one? And even if so, why doesn't it detect ISO8601 (like day.js do) before using complex and slow regex? &amp;#x200B;
The problem is, I haven't found anything even remotely close if you need full localization and internationalization support.
You’re a good person
Well, I don't "shit on moment". I'm full of respect to them. They did amazing job. I'm just trying to tell the people something that I learned on my own, mine own thoughts supported by the data and research.
It's not even *so* slow if the benchmark can be trusted.
we were all noobs once
Man that scroll progress bar at the top is actually pretty cool.
You're not the only one who would say that, but it really comes down to what you're used to. I code in Python as well, which doesn't use semicolons. And while I used semicolons in JS for years when I started, I've found that it's no trouble at all to get rid of them, only using them where you really need to. And it's very readable. 
Did you ask those questions the momentjs team?
Thank you! 💜
This is an extremely narrow and pedantic argument you're making. `moment()` accepts a more wide variation of input parameters than `new Date()` does, and thus does more, and thus does it slower as well, since it must figure out which type of parameter you've passed in to begin with.
That’s fair. I was in a hurry and on mobile when I typed that out. What I meant was this: The complexity here is not necessarily with JS but with the concept of dates. No language has gotten it to the point where everyone is 100% happy with how it works and every language seems to have various libraries to correct these deficiencies. Sorry for the cranky and snarky response. I hadn’t had my coffee yet and my little one was kicking me in her sleep all night. 
I don't see what the problem is. `undefined` is functionally identical to a lack of an argument. Perhaps you wanted to use `null` instead?
Yeah sorry for the early morning snark. I’m better than that. 
Day.js also accepts wide variation of input parameters (it has same API) and parses ISO 8601 string 18 times faster than moment.js
If you believe that, then why not stick with the standard JS Date Object? Yeah, dates can be complex, but displaying them isn’t. Seriously, printing something like “tomorrow” is not hard.
I think a more appropriate comparison would be: jQuery('&lt;p&gt;&lt;/p&gt;') jQuery(document.createElement('p')) You'll get the same results with each, but passing a native object vs parsing arbitrary text are understandably handled much differently.
Isn't it possible to just use UTC everywhere and let the translation from UTC to locale handle these?
I don't care? That's not the argument you were making.
Tl; Dr: it's big and has too much mutability
&gt; The complexity here is not necessarily with JS but with the concept of dates Agreed. There's a great old article about the complexities of date/time here: https://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time
Feels pretty easy to explain, since if you first check wether you're just receiving a date you get to skip all the auto-parsing.
ITT: butthurt moment.js fans defending the crappy moment.js design and performance like its infallible for some reason.
Well, I store UTC (ISO 8601), but there are situations that require dealing with timezones. Example: Your clients company works both in America and Asia. You're creating calendar and you'd like to allow user to choose if dates should be displayed in his/her local tz or company branch tz. Local seems to be simple since browser knows your local tz offset. However 2nd scenario requires more complex transformation since offset depends on many various things like DST. It can get tricky.
Well, it is. You are saying that wide variation of input parameters is the reason that moment.js is slow in that matter. I'm giving you counter-example that there is library that mimic moment.js API and also accepts wide variation of input parameters and still is way faster. I've pointed that in article (with link to the exact line of code that makes it faster)
Dropped this )
I'm not arguing to use any specific library. I'm arguing that the mindset of "it seems simple enough. I'll just write it myself" is short-sighted and very dangerous. Anything related to dates is hard, just trust people who do date stuff for a living to know more than you.
Well duh, `moment(new Date(ISO8601_DATE_HERE)` would produce a syntax error. 😉
jQuery will always rest in my heart
Infinitely slower actually. `moment(new Date(ISO8601_DATE_HERE)` would produce a syntax error. 😉
Oops! Thank you, updated!
I don't feel like any of these are *shouldn't* ... in the sense that they're deal breakers. I don't like some of it, but I'm not sure I'd move a whole system off moment.js just for what is listed. Personally I think it is a big of a beast, and I've never gotten a good feel for how i should use it (that kinda relates to the debug issue), so I avoid it for that reason.
`date-fns` can't parse dates with a custom format though
In this thread chain, they actually didn't make an argument. They just stated that passing a Date object is 7 times faster than passing a string.
I think the problem is with accidents, not deliberate undefined. moment(data.myDate) versus moment(data.myDAte)
Use TypeScript.
Of course the latter is slower. It has to parse time from a string, as opposed to converting it from an object that already represents time.
I’ve never needed to do that. And if I did, I’d probably write that glue code myself.
Not just "functional", mutable basically means you have to clone it when receiving as argument or returning it, as any modification w/o cloning is likely a bug.
Are you trying to finess your way around addressing the problem at hand or saying that moment should only be used by TypeScript packages?
From the Cypress team: \- [https://on.cypress.io/trade-offs](http://on.cypress.io/trade-offs) and what we see from the issues reported by the users: \- running Cypress in a network locked down by the corporate proxies. A large pull request is landing soon that improves external proxy support in Cypress [https://github.com/cypress-io/cypress/pull/3531](https://github.com/cypress-io/cypress/pull/3531) \- iframes in the application, especially when they come from other domains \- shadow DOM (there are some user space solutions, we just did not have time to add the support to the core) \- \`fetch\` is not proxied, which makes stubbing things like GraphQL requests difficult. There are work arounds and user space solutions, and the work to rewrite network proxying is ongoing \- lack of native events (WIP) \- no cross-browser (WIP) \- random crashes and time outs - we are working on test retries, plus chasing the bugs in Cypress every day I invite you to see the official Cypress roadmap at [https://on.cypress.io/roadmap](https://on.cypress.io/roadmap) which kind of shows the areas where users have difficulties
If you are so worried about mistyping variables and causing runtime errors, I suggest you use a language that doesn't allow you to promote mistyped variables into runtime errors. Demanding libraries begin to treat undefined in a way contrary to how the maintainers of the language envisioned simply because of your butterfinger problem is rather silly.
You could hide everything in css @media print { * { display: none; } }
Just handle the translation at display time and have a mapping object for the offset based on selection. It takes all of 20m to implement.
I'm not having a display issue. All I want to do is in the print dialogue. Once you press print, I want to close the current tab. Onafterprint function works in chrome but not in IE.
I'm not having a display issue. All I want to do is in the print dialogue. Once you press print, I want to close the current tab. Onafterprint function works in chrome but not in IE.
I would push back on the requirements...
And canvas is a simple version of it
Switched to Luxon last year and haven't looked back. We aggressively removed moment from our dependency tree.
For some reason it wouldn't let me.
Yea it is definitely not this easy. The only people who think "time/timezones are easy" are people who haven't written a system to actually deal with them.
We make international b2b tools. That's what we do in production. Never had a complaint.
THANK YOU SO MUCH!!
A PR should be merged soon that will fix proxy issues for most use cases: https://github.com/cypress-io/cypress/pull/3531
agreed... this is a ridiculous request.
Thanks for this. This is litterally what i am doing for my job right now our CSS and javascript is littered with unused stuff and I've been looking for a way to help make weeding them out easier.
But that’s dumb. Obviously I’m talking about this particular library, or similar practically useless ones. I’m not saying roll your own crypto or date library. Who would want to fo that? What do you think is more common in the JS world, writing your own stuff or pulling a library off the shelf? You’re arguing a strawman. And no, formatting a date for printing, which is what this library is doing, is not hard.
Yeah I know, but threads like this often devolve quickly
Until you need to parse dates in 2 custom formats. Now you're editing that glue code. And oops, the user is delimiting things differently, now you have to modify the glue code again. `Moment.js` just handles all of that for you out of the box.
Might be helpful if you showed your code, according to the docs it should work ok in both.
Sounds like a good use for it, then. As I said, I've never had this requirement.
Luxon works so nicely. The immutability is clutch.
Or native APIs which have been around for the better part of this decade (largely inspired by JodaTime).
&gt; Did you know that moment(new Date(ISO8601_DATE_HERE)) is 7 times faster than just moment(ISO8601_DATE_HERE)? And how often does that actually matter? That's not even one order of magnitude difference, and you're talking about new'ing up dates.. When's the last time you had an app that new'd up bunches of dates in a tight loop?
&gt; like we are doing with jQuery. I've disparaged jQuery because I watched it hold people back from becoming better at JavaScript, while simultaneously empowering them. This has completely ruined applications in myriad ways.
This is handy, thanks. What we really need is a non-crap datetime API in JavaScript. Every time I've used the built-in `Date`, I've regretted it deeply.
I use moment because I literally spent hours trying to figure out the native way to do it and I could not. I got moment working in 15 seconds
&gt; like we are doing with jQuery. I don't really see that happening. I DO see devs who use jQuery getting upset that the rest of the world seems to have moved on though.
The article should be retitled **Why Moment.js is not always the best library to use." Otherwise it's a nice enough article. But the headline is misleading because using moment.js is 100x better than using Javascript native data library which has a LOT of bugs. For example, I was able to parse a date in Chrome but not Safari. If you're starting out and just working with basic time stamps anda dates, then it's fine to get started with moment. I tried using date-fns but some features were lacking so I went to moment.js. 
https://www.youtube.com/watch?v=-5wpm-gesOY
For 99% of implementations, time zones are over implemented. Most software uses time for literally no reason. All you need is an age most of the time, which UTC is perfectly acceptable for. Adding the time stamp is something almost no user ever looks at. At most, they look at the date. If you need to sort some crap by creation time? You still don't need to show it. Just give them that option and handle it with UTC. So people are usually implementing all of this edge case handling just to pat themselves on the back, when a little forethought and design would've fixed the issue with very little effort in the vast majority of cases For the 1% of times where you NEED to know the exact minute, for an exact time zone at an exact date in the past, ok... Sure. 
I'm glad we agree.
I'm not sure why you are being downvoted. If the application cares only about UTC and the client handles the offset, what is the problem? 
That's not the reason why 99% of people use Moment, though.
My opinion is only use a library/module when - Complexity is more. - when there is no native function available for what you are trying to do.
In that case you can still be doing UTC and showing the locale. You already know the target TZ and converting local to UTC before sending to your backend eliminates your backend having to deal with that. I'm still not convinced this is an actual issue. If you have issues converting from remote to UTC to local just always use UTC behind the scenes and only allow to modify based on the local TZ. Then display with the timezone offset for the user to verify.
The only people who think sentences beginning with „the only people who...“ have a point never had to deal with someone who has a point.
&gt; If you need to sort some crap by creation time? You still don't need to show it. Just give them that option and handle it with UTC. This works really well with relative date time... until you hit 300 files that all say "modified 3 days ago". OK. What time 3 days ago? I know I modified a file I'm looking for at about 10AM. But without the *actual timestamp* I get to start at the top of the list and make my way down until I find it, now having to read through every file name.. &gt;So people are usually implementing all of this edge case handling just to pat themselves on the back OR... just maybe.. possibly.. someone had an actual use case for it and it wasn't just an exercise of the mind. &gt; I've literally never needed to display a full time stamp on a product. Cool. Some of us do.
You shouldn't use js.
yes this is javascript, but what is the actual code? is this obfuscated?
Moved to it when I saw the insane size moment took in my app. Sadly it can't tree shake the languages I didn't need. 
[https://github.com/gcdurastanti/js-extract](https://github.com/gcdurastanti/js-extract) Would love some feedback!
I'm sure there's a lot going on here but I don't know what.
Yup, that is definitely obfuscated code, which is used either for decreasing the size of the file, or to protect the script so that others can't copy the code. They may have used a site like this to convert their JavaScript code to this form: [https://obfuscator.io](https://obfuscator.io)
btw this is only relevant if you code runs on V8 for devices like iOS, TVs, etc or if you want security for memory.
It is obviously obfuscated few times, probably more than twice
&gt;Well, it is. You are saying that wide variation of input parameters is the reason that moment.js is slow in that matter. I'm giving you counter-example that there is library that mimic moment.js API and also accepts wide variation of input parameters and still is way faster. Yep. This is called a _straw man_ argument. 
Where did you find this? The array in the beginning is just weird. There is obfuscation on top of obfuscation. The rest are similar. The array values are in hex, which you can decode to characters by their ASCII values. Once you decode that, you get a string in base64 encoding. You decode that and it's even more giberrish with some funny emojis. I got bored of looking at it afterwards, but this is what the array decodes to string wise: Loop for(var n in _0x71ab) { try { console.log(Buffer.from(_0x71ab[n], 'base64').toString()); } catch { console.log("skipping") } } Results vFAQe FODqu ZSTWo NbuYp gCcgB LFtgq EKoxd SOfmN hacGp string oPsFp counter NvHqW Kpujn OLfnr length WtVoY nmYxM uOMdk spcDw gCTtZ qqhEf EtLYz WdxKj dSSTX yMdAP hDiZg lJFcQ lyUaB iCHpx QUWhS xlXbn aHyWk CfgUk bTXzB UkQqn kqwao GQJoQ cysCH ueRmI LEuJw LzPLy TSCab ivghC jZWaR EOvNc ZTXlP TRtTF call action \+\+ *(?:_0x(?:[a-f0-9]){4,6}|(?:\b|\d)[a-z0-9]{1,4}(?:\b|\d)) GAJmm HBgGF rneQt ULBRd SKEWE oSiaL LZTXM glHeS QXiXL WrygG GWdlu adLSI uyvNz HcMoK tZhAb UvAAK nSjsP FIYiC JJdgI vfbLE erjIM mNFsE &lt;img src="images/cat.gif"&gt; JxaSs NOMSW === 0 0 === lDIsF \ -- / zgXWl | | CMDNc \ || || / LrfMP \_oo__oo_/#######o sNFaO MJHma BRAKK EYPEb function *\( *\) bXJBr init test gJlAg chain mCwWa input IQNin POJcr uGEGu PfelT KtTuf apply ykuYI JaLtv SZWnY EgezP OPDoT haGec uFfzP WxwbQ FmWdw constructor while (true) {} fbuse bpNjw KNjqf log /\__/\ /` '\ html nRgxd debu tItXJ gger kXwZs stateObject eWslC gWmoy blVej 
My "strawman" is based on what you literally said &gt; You mean how many badly written libraries there are? I don’t understand why people rely on them so much in the first place. Most of the time it is simpler to write your own function. How can you read that comment in a discussion about various libraries handling time and not read it as "I don't understand why people rely on time libraries in the first place. Most of the time it is simpler to write your own function"?
Reminder the source has a history of exaggerating information, such as the claims they made about the ZipSlip vulnerability. For example, increases of X by Y percent can sound scary, but you have to consider the original ratio of vulnerabilities to...something. packages? System size? Who knows. But, if we say there was a birth defect rate of 0.005 percent and now it's 0.01 percent, that's still an increase of 100%.
No I just did all the courses in the 7 days :P But the courses on their own aren't good enough. They are fairly easy to do given the instructions but unless you practice them on your own you wouldn't really learn much.
Ironic
Pretty cool, would definitely use but no type safety is no bueno:(
Thanks everyone for giving your feedback and for trying the game. What started as a little project for me ended up being a learning experience. I have upgraded the security a little since the previous version. Hopefully it won't be as easy to ruin the leader-board now (fingers crossed). Let me know what you guys think!
It seems to me like all you're doing is adding a weirder selector syntax to _.pick, and then masking it behind your own weird curried function? I don't really get it. 
Yes it’s indeed ironic how a post stating facts (not mine) gets downvoted when a post simply yelling crap gets upvoted. But I’m not surprised of this in this sub.
It's unfortunate that we don't have a standard built-in date tool, but date and time are appallingly complex. I've never seen a language that handles dates easily.
sounds like you should disparage the people then. cause plenty of people cut their teeth on jQuery, used it when it was appropriate, and have now moved on.
Wow this is such a good comment, I'm so glad I've read it.. you are so funny. ha ha ha ha ha
Is there any way I can do something like the following with date-fns? const isValid = nowMoment.isSameOrBefore(expiryDateMoment, "month");
Fortunately, the people responsible for Luxon and Moment are participating in TC39 and proposing better APIs like https://github.com/tc39/proposal-temporal .
I created a little NPM library for a function that iterates over an array, with a timeout between each call, and returns a promise. That promise resolves to a new array with a function you call on each element. https://github.com/SPDUK/iterateWithTimeout 
You’re not wrong! This stemmed from some work I did with GraphQl. I liked the idea of picking this way because i can create small “models” from large blobs. Ideally I wouldn’t rely on lodash and in the future I may take that out. The currying is for expansion. I plan on adding things like ‘where’ and ‘flatten’ as well as a way in the selector to elevate and alias keys. 
``` // Prepare the stub with our mock data const someClassMock = { getSomeData: () =&gt; SomeClassMocks.getSomeData("success") }; ``` I don't see how that code is any better than just making the mock. Sure you are generating a fixture for your test, which is nice, but seems quite over-engineered for that. Why not go all the way and make it a class factory that can take a replay script and literally pass back a fully functional mock?
Agreed, luxon is quite good. 
That's why i love how Ruby mark their mutating methods with a bang character (!) such as : Array#sort vs Array#sort! 
Sorry, just a bad joke
Even local time is tricky. The user's computer could be out-of-date; he could be using a pirate Windows or even a XP that has no updates anymore. 
Ok great. So as it is, it feels heavy and silly, but if you can get it to that kind of future state I could see it being handy. 
I am aware of that, although I didn't know the Moment folks were involved!
&gt; sounds like you should disparage the people then And I do, liberally!
[https://javascript30.com/](https://javascript30.com/)
I kinda feel this would be too easy to write as: for (let i = 0; i &lt; things.length; ++i) { await delay(500) a.push(f(things[i])) } All you need is a tiny Promisified delay function. Also, why is it `iterateWithTimeout` instead of `mapWithTimeout`, since it appears you're doing the equivalent as `map`. A more interesting thing might be to return a cancellable promise, so the loop of timeouts could be cancelled as you can with `clearTimeout`.
\*Disclaimer:\* I am a member of the TinyMCE team. Congrats to the CK team on the release! As @Piotrek mentions, TinyMCE V5 has an architecture similar to CKEditor V4 that leverages the Browser DOM. As a result, it is probably an easier, less risky migration from CKEditor V4 to TinyMCE V5 than it is from CKEditor V4 to CKEditor V5. The TinyMCE approach uses the browser's built-in capabilities to better handle arbitrary HTML and this is useful in many situations. For example, editing an email or content that was created elsewhere. Data portability is important for many use cases. TinyMCE 5 also lets you edit the HTML source. CKEditor 5 has a more tightly controlled data model that has its benefits, but makes it tougher to support all of the edge cases that HTML has without work. Each approach has its pros and cons ¯\\\_(ツ)\_/¯ Architectural comparisons aside, TinyMCE V5 represents a lot of modernization work from the past couple of years. For starters, there is an entirely new UI layer and related UI APIs. The core project has also been ported to TypeScript. It is great to see both projects thriving and getting investment! &amp;#x200B;
I've only spent a couple hours working with React but does it suffer the same problem? I'm complaining about people accidentally making and binding new instances of the same function-- I don't mind anonymous functions on their own much (though I think it's almost always easier to break them into function expressions 95% of the time) or if they are higher order functions or something. Thanks for the callout!
Really? &amp;#x200B; X = accepts a lot of arguments Y = is slow Z = !Y = is fast &amp;#x200B; moment: X =&gt; Y dayjs: X =&gt; Z &lt;==&gt; X =&gt; !Y &amp;#x200B; Pointing inconsistency in logical reasoning by giving counter-argument is not new. I really can't understand why its so hard to accept &amp;#x200B;
Did you read an article? I said there about clients project. We had there a lot (i mean really a lot) of date operations and had to do some optimization because of that. This simple trick give us a lot.
Is it wrong for me to look at the graph and lean towards ISO8601 being the problem, and a better solution is to stick with epochs?
Hi /u/congolomera, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/imaginethrowaway, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/srg_scs, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jyourman24, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This article is not about moment.js vs native date api, because in such a comparison winner is obvious (ofc moment is 100x better than native api). But can't we do better than this? I mean, our expetations should be higher than just "better" than native api.
You're right. If your system has to deal with a lot of datetime operations and you can migrate from datetime strings to epoch integer then I think it's great idea.
Yes really. Some incredibly poor propositional logic won't change that.
It’s a method on a prototype. It would be strange if it wouldn’t use its instance. Furthermore because it’s using its instance, it can be more optimised and will use less memory as compared to creating a new array and copying all values there. However, I do agree with you that the Ecmascript spec and Tc39 committee don’t really try to make it a more side effect free or functional language. Concepts like currying or passing data as last argument is something that would be great to write more composable software AND let people get familiar with this way of programming, thus resulting in even more and better composable libraries (like for example ramda.js)
With WASM, no reason not to use Go time objects!
You don't need to handle timezones when converting from user's timezone to UTC, the browser can do that on its own. You don't need to handle timezones when converting from UTC to user's timezone, the browser can do that too. You don't even need to handle timezones when converting from UTC to a fixed offset, like +3 or -8, because that's just simple math. However, when you need to convert UTC to some unknown offset based on an arbitary timezone name, like "Europe/Stockholm", that's when you need that timezone data, i.e. moment-timezone or similar. Users don't typically know what all the offsets might be around the world at a given time, so the app might have to handle that based on just the location. 
Lol... u must be a new lead or not a lead at all
I use my own code. Basically checks how long ago the date is and either writes it as X days/hours/minutes ago or the date in YYYY-MM-DD format (mouse over either to get the date+time stamp). I only support english sites. Do I need a lib? If so why?
but jQuery abstracts you too far from the realities of javascript and it thrashes the DOM to shit. Prototype was a better JS library in my opinion.
I like TypeScript but many people prefer prototypal inheritance/compositional (OLOO) over classical object orientation which is what TypeScript encourages.
Hmm yeah, it would be easier to just have an await delay. Honestly I didn't care much about the naming, I just made it to try out making a quick random NPM module 😅
`(new Date).toISOString().replace('T','').split(':').join('').split('.').shift();` Nailed it.
&gt; classical object orientation which is what TypeScript encourages It does not, in any sense, do that. TypeScript is more in common with F# than C# these days. It's one of the most powerful functional programming languages out there.
On the bright side, the `Intl` APIs are [slowly but surely getting better at that](https://github.com/tc39/proposals/blob/master/ecma402/README.md).
[A five-line function to convert a date to another timezone](https://flems.io/#0=N4IgtglgJlA2CmIBcBWADAOgBwDYA0IAZhAgM7IDaoAdgIZiJIgYAWALmLCAQMYD21NvEHIQAHhYBmAHwBhAK4AnRcLYACNhAZqI1JGID0U6QB1qZsQAdT1NWrGlLtatM0MAWgPhJ7Bx85s7E3F-W2gAXmC3eE9qeGDpQ1DTEAsDawsM23tkqFohABUtb19kszsHJzCoSJA8wuKEpKqbQyzuEFJ4BB5NAXImAEY0JDQQAF88GnpGZgArcl4BIREmAwAqdfL1tVkBADd4RXU2Fng1UnlLS1gIeCg1evO2PjVnPlOjjWKALy9ttQAAScinoamAABF8vBxo8AcDaKCwODSGxFLoAOaw6KxeK2dYGMzwAAelj4xzUhHk1F6EAEj2h0QAktQigw-nE1AAKKB4b4eLwASnBZhMbH41FRFzRanCjwwLwAMnweLQEABlNGYrkUADkwgAtKrdQBdPnAHFePksPhKQYAJh8hDVXXGgtFbAMBjUKkusHU8AxPl19rQgywBsGgwNaEkfMGABZRiM0GhdR6JVKKE8+dETbLpYoMI5bmwubq8LrBRgwLRLFzSLLpBcFeiwFzBe7zOL+uoKABPeCIvlgZYsPl5fv5uVPYs3CBl3UGqs1utcgBy8jAACMjl2xZm+zalCPdPIhHyuhKoNP+fA56Xy0gV7X65ud3uPSo2EpbMBB8OaijoI44Mv21q2oop7UOe8CXvA17jGYSHmNQXpqAAosS9A3PApBIGY6EAIIMOiqoGMqpAAPpEdQGLdHhahEaQEC0AYABCzgYgA1nw3GYUofCWPABgkaiRx5MiLJQKxaEALJqjJhyNgACrQPAQMQPAGAAEgIfCwPIhlqGpGlaQYBS0CwC4QIR3rsGwlj4V6wgYAA7hA3EQMJMm0Bg5IYgYHleRREColRfCEFRbA-FR9S0NutBdNFxRURyeFmIeGg-AWurSbJBgKbASl4em1AACTwOWlpxCuQjEmweyCKoBYxaKaHegA4vAJxnGoPBKCogh3m8UBzPI4kPC8GgsPkd7pZlvaPOoM6MsULJsvA6VcnEblqFCQgdrmPxdpV5ZPJtdUko1ywtXKABS6oAPLrsWWp0Zp-Y8mwfIwbAsB8gm+7UFSNJ9LYlXctAwrAOUPo9b+jwqluqgYPRbAYQgDCCOx-ZMlAXLQ8hZgdF0PTgwMICDAA7Eg9pYBMUwgHQDCiBgPCkIsIASisbCiNufBQP2IrZIQywGs6kCwP2PikM4pAGl06KEAA3HDYuCIrEA-CUgw4JYxJq9QKFmAAxBdxQi3YbnWUIitODwJSWCoRsoaTDG0v0ohYKMEwmuMQA). No extra libraries. Tell me all the reasons why this is a bad idea.
👍
&lt;3 u js community - try to get along!
i'm really curious what makes you say this. perhaps my expectations are just higher than most, but i definitely have the experience that you're questioning with your haughty "lol". i was a team lead/senior full-stack dev for 6 years, and then 2 years ago i left to start my own company, where i obviously also lead my team. do you really not expect \_intermediate level\_ devs to not know some of this stuff?—to be fair, saying that intermediate devs should 100% know all of those things might be a bit of an exaggeration, but they should definitely know most of them. in addition, maybe our idea of an intermediate dev is different. in your mind, how many years of experience does an intermediate dev have?
Ok, moment is a thing of the past, let's get the nice modern libs. I need to parse/format/timezone this. Modern lib can't. Ok. Back to moment.
This is the concept of truthy/falsy in JavaScript and it can trip people up if you're not careful. My opinion is you almost never want to check \`if (foo !== undefined)\` because null, NaN, false, 0, and '' (empty string) are not strictly equal to undefined. This tends to cause bugs where the developer thinks they were being safe but is checking against only one of the possible falsy values. I would recommend you do \`if (foo)\` . If you have a program that relies on checks for undefined, it feels like maybe something is going wrong. I would be interested to see a few examples of why you're using !== undefined.
To add onto this, if using webpack you can specify the options from babel.config.js onto webpack.config.js, removing the need of a separate babel file. 
Checking `thing &amp;&amp; thing.foo` will work in most cases, but if you have `thing.foo` evaluating to a "falsey" value, such as `false`, `null`, etc. checking for`thing.foo` may not be what you want. An explicit `undefined` check will determine if the variable is defined at all, though again this isn't always true if you explictly set the value to `undefined`. The same is true for an `if(foo)` check - if `foo` is explicitly false, null, `''`, `0`, or any other falsey value, this won't be true, but a truthy value like an object, string, positive number, etc. will evaluate true. Falsey values include `false`, `0`, `''` (empty string), `null`, `undefined` and `NaN`. There is a proposal that makes this deep property checking a little nicer, so you could do `thing?.foo?.bar` etc. that's currently stage 1: https://github.com/tc39/proposal-optional-chaining. There's also a [babel plugin](https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining) that implements this proposal.
It's easy to slap something together to handle different timezones, but it's difficult if you want it to work correctly. I've written software for billing and and scheduling across multiple timezones, and it's always been a hassle to deal with. 
&gt; if you do not know if the object exists, you can do if(thing &amp;&amp; thing.foo) A defined object, in this case "thing", is truthy. However, the above is not safe as the primitive value stored in thing's property, "foo", may not be truthy, yet still be defined. The following primitive values are falsy: false, null, undefined, 0, NaN, '', "", \`\`. e.g. the snippet below will not print anything, even though foo is defined as 0. var thing = {foo: 0}; if(thing &amp;&amp; thing.foo){ console.log('foo exists!'); } Instead you should use if(thing &amp;&amp; thing.foo !== undefined), in which case "foo exists" is printed: var thing = {foo: 0}; if(thing &amp;&amp; thing.foo !== undefined){ console.log('foo exists!'); } &amp;#x200B; &gt; can you also do if (foo) Yes you can, but as mentioned above it is not necessarily safe for all primitive types. Using if (foo !== undefined) is safer. &amp;#x200B; &gt; Is this good practice? When checking if objects exist, yes. When handling other primitive types it is better to be explicit and use (foo !== undefined). 
I'm writing a game engine over here: [https://github.com/codymikol/game-kiln](https://github.com/codymikol/game-kiln) You can pull the repo and run the demo under the examples folder for a really rough example of what I'm gearing towards. Eventually I want to wrap everything in a graphical editor, but I have a few features / bugs I want to finish up before that. I got a little bit of good feedback during showcase Saturday and I'd love to hear thoughts / critique from anyone and everyone :D If anyone is interested in contributing, please issues and PRs are very welcome :)
 const isValid = dateFns.differenceInCalendarMonths(date1, date2) &lt;= 0; 
It's sad that people are this way. For context, even Jimi Hendrix shredding Voodoo Child has down votes on YouTube. :(
Hey, very cool that you wrote this! You could bring that badboy down to one line and return a Date object if you did something like `new Date(Date().toLocaleString("en-US", {timeZone: "Indian/Maldives"}));`
I swear these articles must be autogenerated by bots. It's the same shit every time. It's slow (at parsing 10,000 dates at a time?!?!?!?!?), its heavy (about the same size as a single png, which are all over my app), and the article uses the same clickbait bullshit headline which the FIRST SENTENCE always softens to a less sensational claim. I'm glad there are people out there questioning the "standard" libraries and running benchmarks, but in my day-to-day;development career, these articles give me absolutely nothing. They are designed to get message board dorks arguing with one another and the author to feel like a medium.com thinkfluencer. Moment.js is worth it because everyone has used it and I don't have to spend more than 10 seconds explaining it to new devs and to convert a timestamp returned by my API.
That there is a local maximum, time to fall back into a valley so you can search for a new peak.
I loved the prototype! But ... sadly it never seemed to catch on. It really got me to think about prototypical inheritence, I re-implemented the "klass" thing myself in various ways, to better understand what they were doing. (I even attempted multiple inheritence, but I don't recall that going all to well)
Still great information if you are constrained in one direction or another!
Huh! Yeah I guess you could. Yours is better since it just relies on the built-in de/serialization of the date locale string. Mine relies on an assumed format (for something that is explicitly documented as being inconsistent...)
jQuery was amazing when every browser had different features and slightly different implementations of features. It polyfilled and provided a common interface when there wasn't one. It's less relevant now, but everything moves on. 
That doesn't help of you're doing severside rendering. 
Day.js has similar essentials moment's interface but it's very small
Why not, Intl is not exclusive to web browsers, it's part of JS runtime. Do I miss anything?
Node [supports it](https://nodejs.org/api/intl.html#intl_internationalization_support), but you need a special build for locale support.
Sorry for the delay! Feel free to repost the survey.
Only if you're dealing with displays. If you need to set a date to 3 pm in a specific time zone on a specific day you need more than UTC.
&gt; But can't we do better than this? [Sure](https://github.com/tc39/proposal-temporal).
[https://github.com/mmontag/chip-player-js](https://github.com/mmontag/chip-player-js) what disgusts you the **most**?
iOS will never run V8...
It’s not that bad of an article actually, although the title is definitely clickbaity.. The tree traversal attacks are what scare me the most here. Why are those packages unable to work with paths is beyond me.
because of prohibited memory access, that's what this release is for.
I'd just say you need to keep the offsets and use UTC as the underlying date and when you modify you're modifying the UTC value which displays to the locale of choice, rather than the convert from and to UTC which could cause problems.
in that case you shouldn't give a shit
I see. But regardless of removing JIT, V8 could only be used for running JS not related to web content, no? Like for running Node.
[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Object/hasOwnProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)
You should also list the browsers you're targeting with [browserslist](https://babeljs.io/docs/en/babel-preset-env#browserslist-integration), otherwise you might be pulling in polyfills you don't need. 
They didn’t mention web. :/
Javascript. The only language were it’s acceptable to say “These days”
Apple’s restriction is that code that is downloaded at runtime can only be ran by the internal JavaScriptCore interpreter which already has a JIT-less mode. V8 in this new mode could be used given that the JavaScript code is packaged into the app bundle and can only be updated through the App Store. 
Yeah, I didn't mean to focus on the "it's clickbait" part. What I failed to articulate was I appreciated the "twist". I expected the title to be a "lets bash Moment.js" kind of thing, and then got a respectable article outlining not just potential pitfalls and issues, but also ways to work around them even if you continue to use Moment.js. Anywho, that aside, thanks for the update! Any chance of adding it as an addendum in the article at all? Just for folks like me who might be curious about the Valid-Invalid-Undef behaviors in the libraries. :)
&gt; OR... just maybe.. possibly.. someone had an actual use case for it and it wasn't just an exercise of the mind. [Yup](https://stackoverflow.com/questions/6841333/why-is-subtracting-these-two-times-in-1927-giving-a-strange-result). It can and will happen. 
Yeah, that was pretty neat! Any particular module/script you used for that? :)
&gt; and use UTC as the underlying date That's great, but how did you get the UTC date to store? Who calculated what 3pm was in a specific time zone (that may or may not be the time zone of the user/browser) and then converted that back to UTC? If you need 3pm in the time zone of the user/browser, easy: ``` new Date('2019-03-13T15:00:00') ``` Same thing if you want 3pm in UTC. Easy enough, just slap a `Z` on it. ``` new Date('2019-03-13T15:00:00Z') ``` But what if you need 3pm in US/Eastern? Well US/Eastern is `-04:00`, so you could use that. Or was it `-05:00` due to DST? And where does your program come up with that offset number in the first place? --- I agree that you don't need moment / luxon / whatever for most date manipulation. But when you _do_ need it, it's very helpful.
Prototype's made several mistakes: 1. `$$` vs `$` for DOM ID vs all other CSS selectors; jQuery used `$` for everything 2. `$` could returned `null`, `jQuery` always returns the jQuery object While I can see one arguing this is better and does not lead to subtle bugs, it made for a more cumbersome API. 3. `$$` returned an array, which one then had to iterate over to apply the desired method: $$('.foo').each(function(e) { e.addClassName('bar') }); vs $('.foo').addClass('bar')); 4. Prototype monkey patched core DOM classes Of course, hindsight is 20/20. I was/am a fan too. 
&gt; EDIT: also ... ... $A $H $R $w (wasn't this similar to a perl thing?) Only `$w`. Note `qw` (**q**uote **w**ords): ~/code/java &gt;perl -E'say for qw(foo bar baz)' foo bar baz 
They should just abolish timeZones
You need to specify your requirements better, but something like: const data = [ { label: 'foo', id: 123, }, { label: 'bar', id: 456, } ] const filterData = (query) =&gt; data.filter(item =&gt; item.label === query) filterData('foo') // [{ label: 'foo', id: 123 }]
Philip Walton has a great article on polyfilling right here https://philipwalton.com/articles/loading-polyfills-only-when-needed/
I just use day.js
Well I don’t mind the fact that it does mutate the instance. It’s just that there are several inconsistencies when mapping arrays with chained methods: ``` const arr = ['a', 'd', 'c', 'f', 'b', 'e']; const newArr = arr .sort((a, b) =&gt; a &gt; b ? 1 : a &lt; b ? -1 : 0) .slice(0, 3) .map(value =&gt; ({ value }); ``` One would think that `arr` has kept its original state, but the sort method will mutate it (unlike `filter`, `slice`, `map` etc).
&gt;SomeClassMocks.getSomeData("success") Hi, I wrote the medium post and part of the team who created Mockshot. The data from the mock (returned by getSomeDate) is the most important part, the rest is just boilerplate and depends on how your class would look. But, Mockshot can also generate a full mock+spy, which is what you asked for. Once you have the raw data, it is just a matter of how you wanna use it. 
I like to note that once you drop IE support, you'd be surprised how few polyfills you actually need.
If you're a bank, for example, not giving a shit could potentially mean legal issues
Your post title definitely does not give off that vibe
Yup 👍
Yup, I only mentioned browserslist and didn't include it's configuration to keep the post about Babel 👍
Don't scrape! Use their a[API](https://developer.oxforddictionaries.com)!
You can yes 👍 I prefer my configuration for various tooling in their own files but you can do either 👌
I mean a program that could use their API. 
I just released v1 of thed little library that I've been working on for a while that allows you to enhance any function execution with hooks. Maybe some of you'll find it interesting :)
Date libraries do a lot more than just format output. They parse date and time strings, convert utc &lt;=&gt; local, deal with timezones and DST. The last one in particular is a major reason to use moment since moment-timezone contains an up-to-date TZ database. I have better things to do than write a (bad) moment clone every time I start on a new project.
terrible article... &gt;Why I like CSS-in-JS: Primarily, **CSS-in-JS boosts my confidence**. &amp;#x200B; &amp;#x200B; &amp;#x200B;
Dates and times are inherently confusing, especially when time zones and offsets and DST get involved. In the JavaScript universe, the Date object is a car crash anyway (Month 1 == February?!) and with immutability thankfully coming back into fashion, moment.js is a minefield of its own. Then there is browser compatibility. If you need to support IE, you can't just move to Luxon. In fact you have to cross the compatibility matrix for other browsers too due to spotty support for some features. Plus it doesn't have structures for date only, time only, etc. There isn't a library I've ever been completely happy with. The closest is js-joda, but I haven't used it with zones before and it makes some things unnecessarily complicated. I'm still hoping the temporal proposal gets some more traction as it looks ideal.
the whole point about fp/view=function(state) is that it's deterministic and that you can be confident about the result given the same state or input.
You need to use &lt;noscript&gt;&lt;/noscript&gt; tag. Put any HTML tag inside it and it will only show for the browsers with js disabled.
If the computer isn’t working properly there isn’t much you can do and you can’t be blamed for that 
thanks 
another passive method is to overload the &lt;body&gt; with a "nojs" class, and remove this class from JavaScript &lt;body class="nojs"&gt; &lt;script&gt; document.body.classList.remove('nojs'); &lt;/script&gt; &lt;style&gt; body.nojs::before { display:block; content "Please enable JavaScript"; } &lt;/style&gt; 
Genuinely interested why you would use this approach over the built in html tags?
It can be useful if you want to extend the support to javascript-less clients without maintaining static contents inside &lt;noscript&gt;, and without colliding with the existing CSS. Of course if all you need to do is tell the user to enable JS, it's not better or worse than the &lt;noscript&gt; approach.
Why?
Screw that. Just code for Chrome and Firefox and you're all set!
What an awesome world that would be 😍 Unfortunately I work on as many internal apps as external and browser stats we get show people still use IE quite alot... More so on internal apps (enterprise 😞) but also public ones
An add-on (adBlocker for example) can block certain scripts from execution. In that case &lt;noscript&gt;s don't get rendered.
Hi /u/StackDev_, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
[Here you can get your answer.](https://stackdev.io/)
Primarily because I'm also working on a functional web components library where you define your components like functional react components. Other than that: Because I like the pattern. Why not?
Riddle me this: why prettier over `eslint —fix`? I can configure it to run every time I save. 
I don't think in this way. Who has some concern about timezone, probably has some product. This user will end up in your support.
Prettier can do much more than eslint formatting-wise. You can also use it for many more file formats than just javascript.
I’ve run into this issue a few times while developing JS libraries. Sometimes you want your API to accommodate a flexible set of inputs (for ease of use a.k.a. “developer experience”). You might require the developer to define objects and have your algorithm check for certain properties to perform certain operations. If any of those checked properties might be set to `undefined` for a valid reason, then you might run into problems. Obviously, the best way to avoid this is to make your API relatively declarative and opinionated. Basically force the developer into using a pre-defined object with predefined properties. Make the API less flexible, and separate data properties (where `undefined` property values tend to be more common) from behavior properties (where `undefined ` values tend to mean they weren’t given a value in the first place). But if you *must* check an object for *intentional* and *unintentional* `undefined` values, then you could initialize the object by setting each property to your own custom ‘type’, so to speak. IMO, the best way to do this is with ES6 symbols. ``` const __myDataTypes__ = { notDefined = Symbol(“notDefined”), validObject = Symbol(“validObject”), } let objA = { prop1: __myDataTypes__.notDefined, prop2: __myDataTypes__.notDefined, __valid__: __myDataTypes.validObject } console.log(prop1 === undefined) l; // false console.log(prop1 === prop2); // true console.log(prop1 === Symbol(“notDefined”)); // false function validateObject(x) { return (x.__valid__ &amp;&amp; x.__valid__ === __myDataTypes__.validObject); } validateObject(objA); // true; ``` Essentially, you can pass a reference to any custom value you want. And you can set a specific reference to represent moments when a value has *not been set*. It works great for building API’s as well as parsing dynamically created objects whose contents may vary. Also, if your targeted browser doesn’t support symbols, you can just set the custom `__myDataTypes__` properties to empty objects. As long as you maintain the references to those objects (by keeping them in scope), you can compare any property values to those object references, and it should achieve roughly the same thing. But to reiterate, it’s best to structure your data so that you don’t need these type-checks in the first place.
If you include `eslint-config-prettier` you can benefit from your eslint rules as well as prettier's formatting.
I agree. Temporal proposal looks really nice and I'd love to just forgot about all external libs and stick to good &amp; well tested native solution. Fingers crossed!
Mobile has an increasingly large userbase so apps can be marketed to a lot more people. There's more value in that so that explains the higher salary. Whether you should move to mobile dev is a decision you should make for yourself. If you want to build native mobile apps you'll need to master Java for Android and Swift/Objective-C for iOS. Only you can decide whether you're up for that. The middle ground is where you stick to JS and use JS tooling to build for both web and mobile, ie. React Native, NativeScript, Ionic, etc.
Medium + 'why you need' = self promotion I'll pass. 
Don't switch just because of salary. Do what you like better. I'm front end, but in a React Native job right now. Mobile bugs the shit out of me because I can't update whenever I want -everything has to be perfect before it goes out and you can't fix bugs immediately. Also, Apple can be a bitch sometimes and will decide to reject you at just the wrong time. I think salary can vary. Try it out and see if you like it better. React Native can be a good inbetween that uses your current skills. I have a feeling it's going to be a specialty that will be very high in demand too (I mean, it is already, but I see it growing). 
I cringe whenever I see non-Prettier formatted code now, e.g. Preact's codebase or anything @getify creates. Just looks so amateurish even if they're clearly capable.
There's no support for optional chaining which is a deal breaker for me. Not keen on the lack of options either. 
&gt;optional chaining What's that?
I've still noticed differences between browsers/engines/versions. If I render with V8, the client browser may render slightly differently (perhaps it doesn't implement the spec fully, or the language settings are slightly different). So you get a flash where the dates change slightly on load.
Have you looked into using codepush or a similar service for OTA deployments?
I've tried Nativescript (it's similar to what React native is), to be honest - didn't liked it too much, everything felt like a workaround, then tried to build a catalogue app natively using swift - it was 100 times more pleasure to develop. But JS is universal today, you can make web / backend / hybrid apps / desktop applications, so i can't decide. Being good at JS &amp; swift is impossible at the same time, one stack would be behind anyway.
Also the formatting of template strings sucks super hardcore
Don't worry there are those of us in Asia who code for IE9. 
If choosing between RN, NS and Ionic, i would pick ionic, because there's not a big gap in performance if compare ionic 4 vs RN/NS, but a lot easier to develop. Maybe it's just me, but RN/NS markup feels like a big workaround for me, after trying out swift and ios natively.
🏅
That has nothing to do with prettier.
 I'm doing just that and planning on jumping ship to work with Flutter next year.
Hi /u/woahdotcom, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
You mean, you're switching from JS to a Dart / Flutter? Well, Flutter is best cross platform as of today.
Yep, Dart is not that much different from Typescript. The real challenge for me is moving from CSS to the flutter styling system. 
So the intent is to just block anyone using an ad-blocker? good luck with that then.
I see more and more projects that swat both with react-native and react-native-web, where they're basically writing applications that can be run native on mobile and on the web. [devhub](https://devhubapp.com/) for instance is written that way. And i believe ... twitter? There seems also something going on with expo going into cross platform: [https://twitter.com/brunolemos/status/1105493974285017090](https://twitter.com/brunolemos/status/1105493974285017090)
Which is why it should be titled something else. The title insinuates that moment should never be used. 
&gt; Not keen on the lack of options either. it’s a direct criticism of prettier.
It's the dream....
&gt; Mobile has an increasingly large userbase so apps can be marketed to a lot more people. There's more value in that so that explains the higher salary. I think this is true for larger businesses putting out a mobile presence, but smaller developers have a hard time making good money off the app store/play store these days. 
Author: we didn’t bother to hire anyone who knows CSS competently, so we just write highly repetitive JavaScript instead. 
[https://github.com/prettier/prettier/pull/2572](https://github.com/prettier/prettier/pull/2572) It was attempted but ultimately failed due to so many nuances of the proposal. I guess it's not so high on the priority list due to still being a stage 1. 
Author: Use a global theme. Also Autuor: all of my css is in js files to avoid global conflicts and defects. 
*Kotlin for Android.
iOS devs become butthurt when informed of the fact that PWAs and Google's Flutter will lead the way. But do what rocks your boat. 
Hi /u/avxkim, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ValuecoderOffical, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Halfahafaha, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/w3docs, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Wait until you have an asshole teammate who doesn't follow formatting and keeps telling the management that you have to stop changing his code.
Hi /u/arronjames, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/arunap2509, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hswolff, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Inner_Cod, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
So for most of its history, GraphQL was developed by Facebook, and is now under the care of the Linux foundation. So I’m not sure which “small company” you are referring to. 
Thanks, that sounds really good! Will definitely pick them both up when I come back to Node :) And I'm learning React right now so I'll definitely try to mix the two. One more question if you don't mind - do you remember which sections specifically have been added to Andrew's course? I can't actually remember just by looking at the curriculum. Pretty sure he expanded pre-express sections and file uploads/sending emails sections weren't there. Anything else?
i cringe when i read comments like this. you're judging the quality and value of a library's code cause it's not formatted like yours. "i mean sure, React is good and everything I guess, but it uses spaces and that just *seems* so amateurish, even if the library works fine."
It's `vue2-loading-bar` — you can check the code of our website here: (link in particular to the BlogPost view) [https://github.com/InventiStudio/portfolio/blob/master/src/pages/BlogPost/BlogPost.vue#L3](https://github.com/InventiStudio/portfolio/blob/master/src/pages/BlogPost/BlogPost.vue#L3)
I like it, trying to think of something to contribute. I was a big fan of the 1k assembly challenges in the old days. I have 20 characters left and I'm sure I need a reducer pattern, harder than it looks :) &amp;#x200B; class My140CharacterDemo extends React.Component { constructor(props) { super(props); this.state = { value: null, }; } }
[https://github.com/tc39/proposal-optional-chaining](https://github.com/tc39/proposal-optional-chaining)
140 characters is way too small :/
Very interesting! How can Prettier have support for this though? It seems like it's a very early stage proposal
They tried adding support but it was trickier that’s anticipated so it’s been shelved for now. Presumably they will try again when it’s further along than stage 1 
Fingers crossed!
Prettier is for people that dont know how to format code. Come on people, its not that hard
That's the point, it's a challenge!
Why not Jwitter?
Last time I tried using Cypress, it was not possible to run tests in parallel, and that was a big negative for me.
Sure. I've experimented with this configuration. The problem is, prettier is _way less_ opinionated than something like the AirBnB eslint config. It still leaves way more ambiguity than I would like. And if you drop in `eslint-config-prettier` you replace _every_ formatting rule in the AirBnB guide.
Yeah. I did. And it doesn't address my question. Neither did you really. Like, I guess if I needed languages eslint doesn't support? But I don't. Also, what can prettier do that an opinionated ESlint config like AirBnB can't? In my experience prettier does way _less_, not more.
We've all met that guy. The one who uses a mix of tabs and spaces for indentation, and has his editor set to 3 spaces per tab... ^((I use a mix, but for different reasons: tabs for block indentation, spaces within lines when I want things aligned between lines or otherwise want to space things out for clarity))
You can override all of the airbnb rules, but you can't do that with prettier (to a large extent), which is what makes prettier more opinionated. People will most often use different eslint configs/rulesets across projects and sometimes create custom rulesets, which is where the inconsistency comes in. Prettier tries to solve this problem by providing one formatting ruleset to rule them all. No pun intended.
You've gotta find the right number, though. This argument ("it's a challenge!") would apply if the character limit were 3 characters, but I think you'd agree that would be a pretty meaningless and uninteresting challenge. Personally I think 1k is a good number that balances challenge with capability. I don't think 140 characters is going to be enough to do very many interesting things. 
Try converting them to JS date objects. The date class has a lot of functions to help out. One thing I've used is toIsoString
I looked at it more and I just realized that the site provides single letter helper functions and canvas. Makes it a little easier.
Hi /u/U4-EA, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ggtech21, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I know this isn't a "serious" (?) implementation, but you don't need the constructor here and could instead set the initial state value directly in the class to make it significantly shorter.
It's really neat. I'm awful at math. Those are all math. I won't ever contribute.
You and I have a different definition of "opinionated". The AirBnB guide has more rules than prettier, therefore it has more opinions, therefore it is more opinionated. The reason this matters to me is because every time there isn't a rule, a team of four developers will do the same thing six different ways. In my (brief) experience with prettier, it left way more ambiguities like that than the AirBnB guide. What you are saying is that prettier is (mostly) not configurable. While I can see why that is a selling point, I don't see why that offers an advantage over just saying to my team "We are using the AirBnB style guide and we aren't modifying it." That's what I have done, and it has was enough to end the style discussions. Which is the goal of not having prettier be configurable yes?
Great job! A few comments: 1. In your constructor for `Reformer`, you can set the settings much easier: ``` this.settings = { keepUnlisted: false, async: false, sequential: false, ...opts }; ``` 2. In `Reformer.prototype.compile`, is there a reason to not use an arrow function so you can access `this` instead of having to assign it to `self`? 3. You've used `let` for variable declaration in a few places. Can some of these be turned into `const`? I generally use `const` for everything that I will not reassign. It signals intent to anyone reading your code. For example, in `Reformer.prototype.compile`, if you do decide to keep `self`, could that be changed to `const self = this;`? Also, in `Reformer.prototype.promiseSwitch`, could `let retVal = {};` use `const`? Remember, `const` means you can't reassign but you can mutate them (e.g. `array.push` or `object[foo] = 'bar'`) Congrats on your first publish!
ReDOS vulnerabilities were even affecting Node.js core with a security release last year, so those we are probably gonna keep seeing. &amp;#x200B; Path Traversal - it's important to note that many of these packages are for local development web servers, yet still that's indeed an incredible number and shows that whether dev or not, security knowledge is lacking.
I guess if you use JSX, HTML in JavaScript sounds good. If you use Node, a browser engine running JS on the server sounds good. If you use GraphQL, inverting APIs sounds good. So, sure, go do it.
If you can't work in a team, you should be fired.
Some people think you should run a mile. What does running a hundred meters prove? Every measurement has a best of.
Wow, thank you for the corrections. I’ve learned a lot from them. Could you please give me an explaination why arrow function can access this, but function cannot? As I wrote this, I thought they mean the same thing. By the third point, does that mean: as long as the variable points to the same place memory, we can use const ? If this is correct, I can understand why array.push works, but what about object[foo]=„bar“ ? How can the memory allocation ensure there are always enough place for new attributes of this object? Thank you
The problem is that people have way different opinions on how to format code. Reading code that you never know how it will read introduces a lot of mental overhead compared to code that looks exactly the same everywhere.
Maybe this clarifies things a bit? https://github.com/prettier/prettier-eslint/issues/101
I love the click bait title only to reveal the true title in the first paragraph move.. slick way to get dem clicks and also deny the title of the article.
Though technically that's not part of the standard and still only a [proposal](https://github.com/tc39/proposal-class-fields).
That's definitely a good point. On the flip side, I think anybody using React will be happy to add the appropriate plugin in their build config.
Yeah, I've seen that example. It's a nifty trick. I kind of wish they would add it as a plugin to ESLint or something. I don't know what the complete list of formatting prettier can do that ESLint can't, but in my real-world experience, prettier was not really auto-formatting much more than ESLint. I suppose maybe I was using it wrong. I am already in the habit of writing code that is mostly correct, and the purpose of prettier is to "forgot about" styling. Honestly though, I am not sure I would ever just start hammering away with massive completely unstyled 200 character lines. That seems to be the scenario where prettier shines.
I'd recommend reading through the documentation on [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions). Basically, when you use `function`, you're creating a new scope which can affect how `this` works. When you use an arrow function, you're basically allowing the value of `this` to pass through into the function. Something that helped me understand this is using [babel](https://babeljs.io/repl) and use both `function` and an arrow function with the keyword `this` and see how it transforms it. Regarding `let` and `const` -- the chief distinction is assignment. `let` can be reassigned, `const` cannot. I wouldn't worry too much about how the memory allocation side of things works. All that matters is that your variable you are declaring cannot be reassigned to a different place in memory. You're welcome!
I believe the hashtag is only ugly because no other language ever used it to define private variables. People probably wouldn't complain that much about it if it was seen already in some other language. I don't like it either but I guess you'll get used to it after some time. &amp;#x200B; Regarding the globalThis, sure it's not the best name but the TC39 has to come up with some ideas to please everybody to not break anything somehow. It's certainly hard if there are bazillion websites out there who have all different naming schemes for everything. Imo I don't find the name too bad, it's a bit weird but again probably something you'll get used to and nobody really ever going to complain when it's established. &amp;#x200B; I still remember when I had to switch from var to let and const, I hated the new declarations but now I'm going to riot if anybody is going to expect me to write var lol
Well, are you sure that nobody uses globalThis in his code?
have you seen https://github.com/franciscop/umbrella ?
I concede that it's not very obvious.
If JavaScript is very good in an absolute sense, not merely a "you'll get used to it over time" sense, then you end up with devs abandoning the language, as they did in the pre-ES6 days with CoffeeScript (and even now, sorta-kinda, with TypeScript). The general consensus around `let` and `const` is that these were good parts, even if you may not have liked them at first. If the general consensus is not positive, however, that is a bad addition to the language.
I guess I'm a few hours late buuuuuut.. I've been creating a really simple JS library to animate elements when scroll down a page. I've just created a v0.1 and would love some feedback on the readme etc. Demo: [https://alexfox.dev/laxxx/](https://alexfox.dev/laxxx/) GitHub: [https://github.com/alexfoxy/laxxx](https://github.com/alexfoxy/laxxx)
It's probably more likely that someone uses an inane name like `foo` before the absolute loveshow that is `globalThis`.
This is why we have so many npm packages. Could import an entire website.
[Previously](https://www.reddit.com/r/javascript/comments/9nvdkz/dwitter_see_what_you_can_create_with_140/)
TC39 heavily favors backwards compatibility. I agree with them. If you don't, you're gonna have a bad time. I mean, globalThis is the tip of the iceberg if you think about things that could be improved in JS by breaking backwards compatibility.
Obviously the idea was that -at the moment- it was a piece of code you could fit in Twitter in one twit. As for the rest, well, there's lots of junk and lots of remixes/variations on a theme, but have a look at the "top" section. Some of the stuff there is, frankly, amazing.
Thanks, I also removed the 'extends React.Component' , didn't seem to be doing much except wasting space, getting there :)
I think the word you are looking for is "Awesome"
We're comparing two different tools that are aimed at doing two different jobs. The job of eslint is to lint your code to help prevent potential bugs. The job of prettier is to auto-format code according to a predefined style. Prettier won't lint code which is probably why you find it "lacking". While eslint does contain some formatting rules, also covered by prettier. If the airbnb ruleset is sufficient for you and your team, that's completely fine but you've then essentially replaced a style formatting tool with a linter. I prefer to use both.
In what way is CSS-in-JSS more repetitive than alternatives? How does writing it not require CSS competence?
Hi /u/rcc0088, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The RXJS one was a little onerous but I agree
This is super ugly, NO DOUBT. Nonetheless, if hashes are for private properties, what will be used to express protected properties?
First, I would recommend removing your client id and secret from this post :)
`title is not defined` Should be `this.title(_title);` just like the remaining of the block: this.desc(_desc); this.picture(_picture); this.githubLink(_ghLink); this.uploadDate(_upload);
Lol i got banned for embedding a youtube video
Combining Index Types and Lookup Types can allow you to create insanely robust interfaces for custom APIs and the like.
Because this thread is about moment.js...
I dont understand any of the code but i like the visuals
In your polyfill, const global = globalThis;
 I'd say the only other new concept/ technology would be data pagination. But as I said, the way things are explained and built is completely revised. Not being an expert in the field by no means, but I think the way mead build up the applications is superior to max. 
I feel like I'm just scratching the surface of ts features too - it's way more flexible than I initially realised.
Too bad we can't polyfill `#` with `private`.
I started using this notation recently, it can be very useful when a function parameter or return type changes according to the value of another parameter. Another example to show that you can make this work without defining an enum : interface Payloads { start: StartPayload; kill: KillPayload; } function subscribe&lt;K extends keyof Payloads&gt;(key: K, callback: (payload: Payloads[K]) =&gt; void): void { // send messages } subscribe('kill', (payload: KillPayload) =&gt; { console.log(payload); }); Result : &amp;#x200B;
babel plugin it
That's absolutely true, but I've noticed that some of the features can easily become pitfalls for inexperienced developers - such as non-null assertion operator or type assertions in general.
You should absolutely remove your client id and secret from this post. &amp;#x200B; To answer your question, to call the `set title()` function in your constructor, you need to use it just like a property: `this.title = _title;` &amp;#x200B;
That wont work either, JS getters and setters are used like if they were a property. &amp;#x200B; To call the getter : `const title = this.title;` To call the setter : `this.title = _title;`
That seems like a really good practice with no potential pitfalls.
Yes, there are many alternatives, also [https://github.com/vladocar/nanoJS](https://github.com/vladocar/nanoJS)
I'm just talking about the formatting rules when I compare AirBnB-fueled ESLint to prettier. As you have said, I can configure ESLint to lint my code for bugs, but defer to prettier on formatting. My problem with that arrangement is that prettier seems far more permissive on formatting, so I lose "opionation" in that deal. Prettier perhaps is a more powerful formatting utility, but that isn't worth much to me if it leaves ambiguities for my team to debate over.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
question mark
It's an awesome method I think. My reasons for purely using enums is simply so that no value supplied to the emit function can be invalid at compile time. It's working great so far!
Very nice! 140 character definetly a challenge. Gonna try it Now let’s think of something...
\&gt; Let's name it something so stupid, no developer in history will have already used it. &amp;#x200B; That's the exact reason. Everything TC39 decides must be backwards compatible, for like the entirety of the internets existence. Let me know when you think of a variable name for this situation that doesn't cause backwards compatible issues, across any browser, across any environment. I'll wait.
&gt;(and even now, sorta-kinda, with TypeScript). TS aligns with ECMAScript, so this isn't valid.
but what about my micro interactions?
Thoonks!
Thanks for your reminder, as you can see all my projects have a MIT license. FYI in the package.json file there is the license field. Anyway I'll provide a license as soon as possible
Hi /u/jbanks101, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
(I know it is a bot, I was speaking to a possible human reader)
hence the "sorta-kinda" because TS is still serves developers in ways that JS is insufficient
Thanks for the advice, really appreciate it!
MIT license just added
There are so many ways to fix this, with a bit of cunning.
Not all features of future JavaScript need be available to all applications by default.
I would offer an opinion but feel you would just Straw Man me as well. It would be a pointless exercise.
Honestly I don't really get the idea why you'd have to use CoffeeScript over regular js. Every professional developer should know the language by heart they're using and all its problems and flaws. Unfortunately js is not the best designed language as you said but you can avoid 99% of it's downfalls if you just follow guidelines and best practices.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Why even bother to comment then? 
&gt; femtoJS is [...] 0.9kB compressed and gzipped. &gt; nanoJS is [...] 0.8 Kb compressed Am I missing something here?
Thank you, didn’t realize it was there.
Thank you! Didn’t see it there.
What, so now I'm not allowed to post on the internet. 
You're welcome!
W3schools html -&gt; css -&gt; then javacript and study hard. Things won't make sence at first but you will eventually get it ;) Maybe check out [codepen.io](https://codepen.io) at some point, there are many cool and inspiring examples you can try to recreate.
Hi /u/ForsakenM45, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ultra_mind, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/-LetterToTheRedditor, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/amuletswrath, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I'd recommend moving the dependencies to devDependencies since you likely don't need them to run your library!
I also work in a team of many different people. We have no issues reading eachothers code. I really dont get the need for libraries like these, if you know how to indent and name your variables
I can't think of any good use cases for doing CSS styling in the JS unless you're computing a dynamic value on the fly and need to update it inline. That's a very rare scenario. Usually you can get away with adding and removing CSS classes as needed. HTML, CSS and JS should be in separate files. If the 3 form a component, logically group them together in a directory. Have some generic theme for the site at the root level of the project in a /css directory which styles the base inputs, fonts etc. I think you would be stuck with all-in-one developers maintaining your projects. An independent designer would have no chance working on your projects.
Oh my fucking god, I can now browse reddit at work no seriously, EPIC work dude!
Ok. So how does that comment not mean write moment.js yourself? Also the article, assuming you read it, is about more than just moment. 
It's the _JS way™_.
Why not `selfGlobalThisMe`? I think it's brilliant
If anything, it requires an even more selective skill set and competency level. 
As fan of berserk i would be totally cool with a name change 
This isn’t part of the language specs yet and is usually done via babel plugins no? 
At this rate we just have to accept that javascript is the new assembly and move on to the new high level languages.
Thank you!
Hi /u/Gedanke, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The graph is created by setting each tool to be one node and two nodes are joined by an edge if they are used simultaneously by a company - edge weight corresponds to how often tools are used together. Graph visualisation is done in Gephi 0.92. Node size corresponds to the amount of companies using a tool. If two tool are often used together then they will be closer together in the visualisation. Data can be found @ [Github](https://github.com/LeviBorodenko/StackData)
These aren't so bad imo. globalThis looks absolutely terrible, but still. I think the one where they screwed up most is web components, which are completely asinine to modern requirements. Crazy they didn't see it coming that that delivering a naked dom node masked in a shadow-root isn't actually solving anything. They've spent so much effort on hammering this through by brute force. I hope this will be their last stab at high level abstractions, so that we can finally get back to low level standards as the extensible web manifest calls for.
lol yeah I was wondering at first “is that 140 characters excluding external libraries?” 
Cool! Instead of putting a Symbol in Array.prototype, why not just make it a function? So instead of: const { asyncSerialForEach, } = require('asynchronousforeach'); const delay = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms)); const array = [1, 2, 3, 4, 5]; (async() =&gt; { await array[asyncSerialForEach](async v =&gt; (await delay(1000), console.log(v))); console.log('done'); })(); It could be: const { asyncSerialForEach, } = require('asynchronousforeach'); const delay = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms)); const array = [1, 2, 3, 4, 5]; (async() =&gt; { await asyncSerialForEach(array, async v =&gt; (await delay(1000), console.log(v)); console.log('done'); })(); I figure the reason to put something on the prototype is to have it always available, but if it's a symbol you need to import something anyway, so a plain function import might be simpler.
A coding standard already solves the whole "different opinions" thing entirely. Prettier brings nothing to the table for developers who can write standards-compliant code as they develop, which _should_ be all of us. In practice, though, lots of devs just don't pay attention to what they're writing and, frankly, have no vested interest in how their code looks compared to how it works. That's fine. Those devs can struggle against the linter all day until they learn how to write nice code as they develop (and by "nice" I just mean whatever your team has decided code should look like).
I think what you _really_ mean to say is that, as a function, you are then able to use the [bind operator :D](https://github.com/tc39/proposal-bind-operator). await array::asyncSerialForEach(async v =&gt; (await delay(1000), console.log(v));
it should at least, also, be a consensus within the team to use prettier. I had the other way, that one guy who was forcing it onto us, and that was horrid. Not so much for the style, but his PRs became unreadable because of the noise from prettier...
&gt; All the JavaScript tools don't just exist because someone thinks it's cool to write them, they exist because they each solve a problem. Mmmm... well, they all start because someone thinks it's cool to write them. Then people use them because they are new and shiny. Then they trend, and that snowballs, because people feel they must use all the trendy tools. Also, they frequently do not solve problems, in actual implementations. 
I do prefer the object.method() style so I used symbols to extend a native 😄
Correct, it's currently Stage 3. You can view the proposal in one of the above comments.
Neato!
I agree. Out of all this was the most difficult 
And at this point we can officially announce that template literals went berserk. It's time to stahp. Strings aren't code. And no regexp parsing doesn't make it one.
Except that web components have absolutely nothing to do with TC39. They are a W3C project.
&gt; I believe the hashtag is only ugly because no other language ever used it to define private variables. I think that's a good point. There was a time, for example, where I thought `$` to define variables was ugly -- like in PHP. But if you use it for long enough, it starts to feel familiar and normal.
*Ok, this is epic.* It's your **5th Cakeday** l0gicgate! ^(hug)
As the human reader, thanks!
Because if there’s one extra space, or a trailing comma the code becomes unreadable, unmaintainable, and crash hard drives. /s
Or you could use SVG and have high quality at any scale. 
It’s simple, but I think I did a good job: https://www.dwitter.net/d/12754
If you use map instead of forEach, even with void callbacks, you can achieve your `asyncParallelForEach` with a simple Promise.all: &amp;#x200B; `(async() =&gt; {` `await Promise.all(array.map(async v =&gt; (await delay(1000), console.log(v))))` `console.log('done');` `})();` 
i like it alot -jim carry
You could make it a functional component! const My140CharacterDemo = () =&gt; { const [value, setValue] = useState(null) return null }
Or use a function with state hook
PI to the 27th digit
For anyone wondering why `globalThis` was chosen: https://github.com/tc39/proposal-global/blob/master/NAMING.md
newGlobalWhoDis
I got 7th :DD
website is ridden with popups and ads, fastest back I've ever pressed.
&gt; the justifications don't matter when we may need to live with the unfavorable conclusions for decades from now. Yea, that's not really how that works. Breaking the web is not an option. You too like auto-updating evergreen browsers, don't you? Do you miss the IE6 days where companies didn't upgrade the browsers for over a decade? I certainly don't. Browsers can only move forward if they don't break existing stuff.
Can anyone weigh in on what this might mean in practice for javascript and javascript developers, if anything?
Who cares what you think? As the creator of a library I should format the codebase to my needs not yours. It's fine if you like to use prettier for your projects. I won't ever use it though, because I find it's rules make the code less readable.
Twijster
I’m thinking we’ll finally get some much needed standardization, in-depth documentation, and for the love of all that is good in this world hopefully some badass interoperability and integrations between huge JS libraries/tools like jquery, Webpack, dojo, and node. Biggest thing I’m hoping for is an overhaul on Webpack implementation and condors so it’s easier to use like npm manifest or Babel configs!!! 🙏🏻🙏🏻🙏🏻
Cool
Asking advice on what skillset is best to develop is considered a job-post?
True.
Alternatively, you might try in /r/LearnJavascript.
Very cool!
Try to explain to code illiterate management that code formatting is not just being petty about details that don't really make a difference. You'll be the one branded as not being a team player, rather than the asshole who doesn't follow team rules.
Then it should've been a priority to decide on a formatting tool that the whole team should follow. (Also, there's diff tools that can hide or ignore whitespace changes, that might help.)
You might not have issues reading each other’s code, but how do your merge and diff tools fare?
I visited this site few months back. Confidence: -500 
By using the `keyof` operator in the example above, you have the equivalent of an enum, but as a string literal instead. Well, technically a (string|number|symbol), but only if the interface Payload defined number/symbol indexes :p
Yes, HTML and CSS are stale tech.
Find an error getElementById(('app')); Its working now but still showing an error in console: react-dom.development.js:500 Warning: Invalid DOM property \`classname\`. Did you mean \`className\`? in div (created by App) in App
They should've just made it a function `Object.getGlobal()` (as part of standard library) like `Object.keys()` etc. It only commonly used in libraries/utilities, so we don't need a language level reserved word. 
Then we'll never get an Elvis operator
Well that’s an easy one...change classname to className on line 17
Why not use underscores? Seems pretty simple, _private and _global seem like they’d work perfect, does that break something else?
I think the whole idea of strictly-enforced "private field" is bad. These days a lot of bugs are arose out of "unexpected hidden state" in applications. Private fields basically encourage that. In addition, what's better than "private state"? Being stateless!!! Application should strive to be stateless, and move their states to select areas (state management, caching layer, etc)
It breaks all projects that have some class members with that name... 
I'm not downloading a flash file, but if you're just looking for the distance between two points: const distance = (a, b) =&gt; { const sqrMagnitude = (b.x - a.x) ** 2 + (b.y - a.y) ** 2 return Math.sqrt(sqrMagnitude) } &amp;#x200B;
We already have a way to handle breaking backward compatibility; the use strict pragma. Let’s make a stricter mode (use 2020?) and make those much needed breaking changes. 
The problem is, that many devs don't seem to think about the reasons for these results, the, just complain about "this is ugly" Private fields are the perfect example. The starting point is, that private fields should never ever alter the public Interface of a thing. Since setting a new property from the outside could be part of the public Interface, normal properties must not live in the same namespace like private ones. And now you need an identifier that could not be used in existing Code. 
I mean like _private foo; or _global.foo = 1;
Hi /u/bathtub-pancake, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The game is great
Thats because "render" function tried to find the element with id "app" but it failed to.
thanks
I'm not sure how I'd design that with all the functionalities. If you want you can fork the repo and work on it :) 
I'm not at all good with SVG. Would love some help if you can :) 
This has been patched since yesterday. POST route is no longer exposed and certain security features have been added to discourage cheating. 
No, but it's extra noise in git. And still, most style preferences are not about such small differences.
But *why* format manually when we have tools that can do it for us? I find that offloading all monotonous tasks helps me concentrate on the important stuff much better.
Oh, I see now. I guess I didn't notice that because I was always trying to get under them in order to maximize my hits.
&gt;Browsers can only move forward if they don't break existing stuff. Except for the things they already broke &amp;#x200B;
Like?
Nice! great work on this
please help me the diff between JS Foundation and ES(tc39) :(
I’d settle for observables in the upcoming ES roadmap...
Hi /u/ZachariaairahcaZ, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
We already have `Symbol` for this. E.g. `Symbol.global` would be the best fit. But I think this raises a chicken egg problem. You could prefix `Symbol` with a reference to the global object. So you get: `Symbol.global.Symbol.global`. But now you have the same problem again. If we use import we could import the global object directly: import { global } from 'stdlib' Then there's no need for `Object` or `Symbol` here.
It's stockholm syndrome.
We won't anyway. The currently proposed syntax for its feature equivalent (nullish coalescing operator) is `??`. :D
I know, but it is more obscure 😆
Either way, it's still in all browsers now, no one needed it, no one asked for it, no one is using it.
And it has one big advantage: You can write functions named `$if` and `$for`. This currently is a big problem for the block param proposal.
`_private foo` wouldn't change anything over `private foo`. `_global` https://github.com/tc39/proposal-global/blob/master/NAMING.md Here's a document about the naming process of `globalThis`. It says they want to avoid using underscores in general. Even `__proto__` is a legacy naming.
Real creative name mate
As far as I understood this (unexpected hidden state) is one of the reasons why the `#` prefix was chosen over `private foo`.
As far as I understand ECMA creates standards and JavaScript conforms to (some of) the standards. Where as the JS Foundation supports JavaScript projects.
ES is trying to be modern by being bad, because the good ways are old-fashioned.
Yes they do. No one can control what browsers people use to access their sites and pragmas like 'use strict' if they were to be devised for this: - will not ensure backwards compatibility as older browsers will just ignore them - will likely get us into python 2/3 waters The obvious solution is if it bothers you, transpile from a language you'd be OK with. Internet and TC39 is not your private army. 
Nice work :)
From what I know protected properties aren't likely to ever become a thing in ES
Hi /u/takahiro_t, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
ES logical or shortcircuits so no "Elvis" operator is needed. ?. is the very likely null coalesce operator (borrowed from C#, already supported in Babel) and plain ? could find other uses such as "option coalesce" if proper Result|Option|Maybe types are introduced. 
&gt;If JavaScript is not very good in an absolute sense, but merely a "you'll get used to it over time" sense, then you end up with devs abandoning the language, as they did in the pre-ES6 days with CoffeeScript (and even now, sorta-kinda, with TypeScript). The language is a pile of shit. People still use it. People that obsess over syntax bikeshedding have a tendency to think everyone obsesses over it. However the steamrolling rocket rise of Python clearly proves otherwise (I've never met a Java dev that didn't bitch about significant whitespace yet many jumped ship to chase lucrative and interesting Python dominated areas). People care about productivity and comfort and that is rising in ES with every move TC39 makes. You and everyone else will get over both of these issues so fast you'll make whooshing noises. 
I actually had no idea it existed, but PostgreSQL does actually have some pubsub functionality. [https://blog.andyet.com/2015/04/06/postgres-pubsub-with-json/](https://blog.andyet.com/2015/04/06/postgres-pubsub-with-json/)
[D3 circle packing](https://www.google.com/search?q=d3+circle+packing)
private fields will introduce more problems than they try to solve
Initially femtoJS was 0.3 kb.
Since you are using Postgres you can maybe use something like Hasura's GraphQL engine, which has subscriptions iirc.
This makes me want to use python more and more I love JS but stuff like that just gets to me
Do you mean something like this? var map; function initMap() { var uluru = {lat: 100.000000, lng: 100.000000}; map = new google.maps.Map(document.getElementById('map'), { zoom: 11 ... } } function anotherFunction(){ map.setZoom(12); } [https://stackoverflow.com/a/12458494](https://stackoverflow.com/a/12458494)
Browsers no longer allow synchronous http requests Google Chrome removing their proprietary filesystem API, and in turn breaking sites who use that api to detect incognito windows File con-catting is no longer safe in javascript, when it was fine in the early days Google Chrome no longer supporting autoplay by default (Only by user interaction (I think they changed it in some update to automatically detect how much a user interacts with a site )) Firefox suddenly no longer allowing unsecure resources over an secure connection Browsers removing support for the Java plugin &amp;#x200B; &amp;#x200B;
Does thegreatcoursesplus allow this kind of access?
It's not directly related to the topic since I don't know what idea you really need; the thing is I think you are the one who knows the best, since you know your own needs. I wrote an article some time ago about some methods to generate ideas efficiently: [https://web-techno.net/programming-project-ideas-personal-generation/](https://web-techno.net/programming-project-ideas-personal-generation/) Hope it can help!
I think it does. There's [this github](https://github.com/atako/GreatCoursesPlusVideoDownloader) project that promises the same kind of thing but now it's not working
This will lead to more confusion than it actually helps. Constructors are meant to initialize an instance of a class and return the instance of the class, not a promise which resolves an instance of the class, which may never resolve it at all. If the public constructor of class A is supposed to return an object of type A, it must return an object of type A and not an object of type Promise. Better use something like the factory pattern.
\`\`\` &lt;input *type*="range" *min*="0" *max*="16" *step*="1" on*change*="changeZoom()" /&gt; const changeZoom = evt =&gt; { map.setZoom(evt.target.value) } \`\`\`
Kyle Simpson's You Don't Know JS free series of books. Start with Up and Going. Sign up to Microsoft Dev Essentials and you'll get a free month pass to Pluralsight, the you can watch Beginning JavaScript by Kyle Simpson and other JS video series he has. Watchandcode Practical JavaScript is free and an awesome course. Traversy Media is great on YouTube. Microsoft also have a free learning JavaScript course. https://mva.microsoft.com/en-us/training-courses/javascript-fundamentals-for-absolute-beginners-14194 There's more but that's enough to keep you going.
&gt; Browsers no longer allow synchronous http requests It has been deprecated about 5 years ago, but it still works. You get a deprecation message in the console if you use it in the UI thread. Using it in a worker is still totally fine. &gt; Google Chrome removing their proprietary filesystem API Experimental stuff is experimental. &gt; File con-catting is no longer safe in javascript Doesn't affect backwards compatibility. &gt; Google Chrome no longer supporting autoplay by default https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#new-behaviors It's similar to popup blocking. &gt; Firefox suddenly no longer allowing unsecure resources over an secure connection If you ignored the mixed content warnings for a decade, it's kinda your fault. I mean, seriously, mixed content always has been a bad thing. &gt; Browsers removing support for the Java plugin There was a long deprecation phase with click-to-activate. The plugin has been a huge security nightmare. It had to go.
This is probably a better question for a python or django subreddit/forum. &amp;#x200B; You'll need support on the django server to set up Postgres NOTIFY/LISTEN stuff. This will be exposed on an endpoint that uses websockets, probably. &amp;#x200B; The client-side javascript will then need to establish a websocket with the server.
Nowhere is safe from you hasura shills Btw postgraphile is infinitely better
A new developed frontend framework: [ScarletsFrame](https://github.com/ScarletsFiction/ScarletsFrame) The main purpose of this framework is to help developer to simplicity their code by building their code in a structured way and avoid declaring variable in global scope. This framework comes with: * [VirtualScroll](https://playcode.io/224164?tabs=model.js&amp;output): Scroll through huge list without sacrificing performance. It's also working on dynamic list/height. * [Model and View binding](https://jsbin.com/liluhul/edit?js,console,output): Any changes to model property will also changes the related DOM element value. And have feature to listen new/updated/deleted array list. * [Components](https://jsbin.com/guwevis/edit?html,js,console,output): Define template and model, and you can easily create new element without conflicting other element/model. * [Content Loader](https://playcode.io/134963?tabs=console&amp;model.js&amp;output): Useful for creating preloader for your website * [Some Security](https://www.npmjs.com/package/scarletsframe#model--template-feature): Avoid text that have HTML content to be parsed when inserted into DOM * [Router](https://anisics.stream/album): This may not useful if not being used with [Scarlets](https://github.com/ScarletsFiction/Scarlets) backend and possible being changed. It's somewhat [more faster](https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html) than Angular or Vue on non-keyed test, and have lower memory usage. So it can perform better on any small devices. Every script can be separated to maintain project code structure, and when finished you can just concat every script without compiling/transpiling/webpack (if you written the code in ES5). The above technique will finish less than 1 second (it's perfect with `gulp watch`). In my case, it's saved my time because I no longer need to wait TypeScript to be compiled, or waiting Webpack to be finished and start being productive in a short time. &amp;#x200B; And yet, the documentation haven't finished and may have some bugs on some condition. I welcome every contributor for posting new issue or pull request to make this framework being better.
https://javascript.info
I'm really new to web dev and only found Hasura a couple of days ago, but it seemed pretty nice. I've heard about PostGraphile, but never used it (why is it better?). Apparently Prisma is pretty good as well, thoughts?
Have you tried twilio video? Works perfectly
That is all what came to my mind [xkcd 927](https://imgs.xkcd.com/comics/standards.png)
Look, I get that you're just trying to be antagonistic because you think I'm saying that everyone should write everything themselves, but what I'm saying is that the trend in the JS community is to use a library for everything, even simple tasks where it is unnecessary. As far as moment itself, it depends on what you are doing with it. Do you believe that everyone who uses moment.js is using it because they absolutely have to? A lot of what it does is easily done with the Date object itself. If you are more comfortable with learning a library and using that, then go for it. Or just continue downvoting me lol. :)
You don't need to "use strict" because you already have a organic separation between old and new JavaScript: modules.
&gt; private fields will introduce more problems than they are trying to solve Classes are falling out of vogue anyway, and this only accelerates their demise.
I know what I'm looking at, I know how it works and what it does but I'm missing the scenario in which this is useful. Please elaborate a bit. 
I'd recommend looking into SVG animation using GSAP or anime.js. Check out blog posts and talks by Sarah Drasner and Sara Soueidan, they both really know their stuff.
Thanks for the reply. I'll check them out.
The problem is still that 1. Modules predate these changes by a decent margin; 2. Not everyone agrees it's ok for modules to be a separation between "old" and "new" JS, they're just cementing a separtaion between "quirks" and "strict" mode that already existed with the pragma for over a decade and it's hardly possible TC39 members could/would agree where to draw the line. Besides what is the name for the super-global in the non-module loaded scripts in browsers in that case? 3. There's a reason that votes of anonymous lurkers on Github count much less than those of people with seats in TC39 -- who are makers of runtimes, browsers and tooling. That reason is meritocracy. It's a well established rule in FLOSS community -- code speaks. The only thing I could personally get behind is `globalThis` being an ugly (but not necessarily poor) choice for a superglobal and core language construct. But I've already decided that IDGFA.
Hi /u/django_noob, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/akhilvarma01, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DwDckQo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/eatyourkibble, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/gate18, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/shreeshkatyayan, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Dnlgrwd, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/enimeeze, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/scifi-please, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/santypk4, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks 
`literallyThis`
&gt; Or just continue downvoting me lol. :) I've been downvoting because I'm asked very point blank questions that you refuse to answer. That's called not contributing to a conversation, which is the point of downvotes. &gt; As far as moment itself, it depends on what you are doing with it. Do you believe that everyone who uses moment.js is using it because they absolutely have to? You're still only talking about moment, which shows to me that you didn't read the article. &gt; Look, I get that you're just trying to be antagonistic because you think I'm saying that everyone should write everything themselves I didn't say everyone or everything. I quoted you and asked you what you meant to which you avoided answering the question. To me, it appears you're deliberately avoiding answering simple questions. &gt; what I'm saying is that the trend in the JS community is to use a library for everything, even simple tasks where it is unnecessary. Have you ever heard of this thing called DRY? Yeah. It's a lot easier to import a library that lots of people use because there's a higher chance someone has come across the edge case you're about to do, reported it, and then fixed it. That's why we use libraries. 
I don't know what frameworks you use normally, but with the ones I work with I would consider this anti-pattern. Classes should be singleton (components/services), state keepers (models), or self-contained utilities. * Model should never self-hydrate over the wire * Component has better life-cycle hooks for initialization * Services should be stateless or be triggered to initialize by it's initializer * Utils should be stateless
No you didn't really understand his qualm. Private member regardless of being available or not promotes the "naive" OOP concept of hidden internal state in the class instance (or static class). The issue is not with polluting the consumer's namespace, but the fact that such state makes debugging difficult because it's hard to track state of the entire application (and the changes of that state) across method calls because they are not referentially transparent (the proper term is "pure" but that term is cringe inducing for me). Which is why he advocates full statelessness. While I don't agree with entire philosophy of "functional" JS, I do agree that data objects should be data objects, and that any methods they would eventually have should be presentational in nature i.e. return transformed copies but never alter the object's own state. In practice I personally avoid writing OO hierarchies over data anyway.
Hi /u/ayaz786amd, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; Modules predate these changes by a decent margin; `global` would not break any applications that use modules today, because few such applications even exist. &gt;Not everyone agrees it's ok for modules to be a separation between "old" and "new" JS That's fine. &gt;There's a reason that votes of anonymous lurkers on Github count much less than those of people with seats in TC39 You're probably more arrogant on behalf of TC39 than the members of TC39.
&gt; To me, it appears you're deliberately avoiding answering simple questions. That’s what happens when you keep trying to strawman someone. If you want to continue misrepresenting what I’m saying and then attacking that, then you’re going to have to play that game on your own. &gt; Have you ever heard of this thing called DRY? Yeah. It's a lot easier to import a library that lots of people use because there's a higher chance someone has come across the edge case you're about to do, reported it, and then fixed it. That's why we use libraries. No lol, never heard of it. Actually, would you mind explaining what JavaScript is while you’re at it? Also, I’d like to know what a variable is if you have time. 
&gt; That’s what happens when you keep trying to strawman someone. Where was the strawman? I quoted you. Are you trying to say that you're a strawman since I literally quoted what you said? &gt; No lol, never heard of it. Actually, would you mind explaining what JavaScript is while you’re at it? Also, I’d like to know what a variable is if you have time. I felt the need to explain since this is a fairly trivial concept that you don't seem to understand. 
[https://www.httpvshttps.com/](https://www.httpvshttps.com/)
&gt; You're probably more arrogant on behalf of TC39 than the members of TC39. This has nothing to do with arrogance but I understand why it could be percieved as such. Which is why FLOSS projects and open committees like TC39 go to great lengths to avoid framing things like this. There are myriad dragons in implementing JS engines, and supporting the "existing" web that are commonly beyond the grasp of people not working on these inplementations (myself included). You started this off pretty arrogantly yourself: &gt; Yes, they have published justifications for these things, but the justifications don't matter when we may need to live with the unfavorable conclusions for decades from now. You don't accept the justifications of implementers that need to jump through hoops to satisfy you and thousands of others like you while not breaking the web and not stalling the progress of development so that the bikeshedding can finally be over. This kind of stuff is precisely the reason why open source governance is as it is: everyone's input is considered, but the code speaks.
Personally, I avoid `class` altogether. I see little benefit to classes vs functional composition patterns. Your example here could be easily handled by a single function encapsulating the data. ``` function dataService() { const data = Promise.resolve({ a: 'a' }); return async function getData() { return await data; } } const getData = dataService(); const data = await getData(); console.log(data); ``` This avoids all use of `new` or `this` which can lead to unexpected behaviour in JS. Simple closure based encapsulation. If you really want properties getters/setters you can do that by constructing and returning an object instead of a function, but for your example nothing more complex was required. My current JS code is ES6 modules that only return functions. If those functions create more complex services then they tend to return functions. A more complex example might be: ``` import serviceA from './service_a'; import serviceB from './service_b'; export function serviceC(serviceA, serviceB) { return function execute(arg1, arg2) { return { a: serviceA(arg1), b: serviceB(arg2) }; } } export default serviceC(serviceA, serviceB); ``` My default export represents the fully constructed serviceB ready for usages with resolved dependencies. The named export `serviceC` is unconstructed and can be easily used and mocked in a test like so: ``` import { test, stub, assert } from 'testing' import { serviceC } from './service_c' test('works', () =&gt; { const serviceA = stub(); const serviceB = stub(); const serviceA.returns('a'); const serviceB.returns('b'); const subject = serviceC(serviceA, serviceB); const result = subject('arg1', 'arg2'); assert(serviceA.calledWith('arg1')); assert(serviceB.calledWith('arg2')); assert(result.a === 'a'); assert(result.b === 'b'); }) ``` Apologies if the example is a bit contrived, I'm in a hurry. The advantage of this pattern is it always works and testing is trivial, repeatable and easy. Curious what others think. I realize I've kind of digressed from the OPs original discussion here. Also, ye,s I am aware that closures some a slight performance penalty vs classes in V8, though I'm not sure if that would have much impact on the fairly simple functional compositions I am typically writing. I have not done a performance comparison.
I dont think its usefull, i just like to play around and try stuff. And i was asking myself how a async constructor could look like. I mostly try out stuff which is "unusual", so yea thats one of them. Sure that can be handled differently ^^
enum? Are these examples TypeScript?
Are there any advantages of using XMLHttpRequest over Fetch or Axios?
Aligns? No. Superset? Yes. TS does so much weird shit it's strange to think someone feels it aligns. const a = () =&gt; { b:true } This above code works differently in TS than JS.
Yep.
I do something like this, which seems like a middle ground: ``` class AsyncThing { constructior() { this._ready = this._init(); } async ready() { await this._ready; } async _init() { ...async construction } } ``` The big advantage to this is you have to use promises to know the state of the async work, and international, you can call `await this._ready` for async functions that need to wait for construction. 
 $('.mdl-menu__item').eq(1).attr("data-selected", "true"); componentHandler.upgradeAllRegistered(); getmdlSelect.init('#test'); [https://github.com/CreativeIT/getmdl-select](https://github.com/CreativeIT/getmdl-select) Dynamically usage For dynamically usage, you must add getmdlSelect.init(cssSelector) in javascript code, (where cssSelector, for example, is ".getmdl-select" or "#mySelect"), after new item is created or any new element added to existing list.
And, before that, in JavaScript Weekly ;-)
&gt; You don't accept the justifications of implementers Correct; if a solution is not found to be agreeable by the general population, then it's okay to start over and find a better one. There is no language feature so important that we need to ship a sub-optimal implementation.
I see you're still weaseling around the only actual technical question I raised. Ah well.
Nah, I answered it in an edit.
The non-module environment is legacy and won't exist in modern JS codebases.
Says who? Script tag without type=module is not legacy and isn't going anywhere.
Did you test it? Because I tested this code and it didn't work, here is the new fiddle. [https://jsfiddle.net/hL6r4osy/](https://jsfiddle.net/hL6r4osy/)
What is the point of this? I get what you are doing but I don't get why I would ever want to do this.
If you have some array of arrays of cells - let's call it `field` - and some pair indices, say `i` and `j`, that identify a cell in `field` (i.e. `field[i][j]` ), the set of adjacent cells can be encoded as an array of pairs of indices given by const neighbors = [[i-1, j], [i+1, j], [i, j-1], [i, j+1]].filter(isValidCell) where const isValidCell = ([i, j]) =&gt; i&gt;=0 &amp;&amp; i&lt;field.length &amp;&amp; j&gt;=0 &amp;&amp; j&lt;field[0].length;
Yeah, I did. Notice that I said I gave the div an id. You've got an id on the UL and you're trying to use it instead. I didn't note it, but I also changed your data call because it wasn't adding the attribute to the element. https://jsfiddle.net/ngc8mhfa/
 Y [m - 1] [n-1, n, n + 1] Y [m ] [n-1, n, n + 1] Y [m + 1] [n-1, n, n + 1] Assuming you have an array of rows with an array of columns in each row, m is your current row index and n is your column index. Be careful that n-1 and m-1 are not &lt; 0 and that n+1 and m+1 are not out of their array bounds.
Ok, have fun jerking yourself off here. Glue your libraries together until your app is a bloated mess and call it adhering to the DRY principle lol. Whatever floats your boat. I'll stick to using libraries where it makes sense and not using them where the standard tools provided by the language are sufficient. Have a good day. :)
I still don't get why you had to argue so hard that what you said isn't what you said. But whatever. 
I guess Strict Mode is also optional, but that didn't stop it from becoming the de facto default environment. If the goal is to be consistent between clientside and Node, this fits nicely as modern clientside code will likely be assuming a module-only approach like Node.
\&gt; How can you read that comment in a discussion about various libraries handling time and not read it as "I don't understand why people rely on time libraries in the first place. Most of the time it is simpler to write your own function"? Did I say people shouldn't rely on time libraries at all? All I said was that many libraries are badly written or bloated and you don't need to rely on them all the time when writing a simple function would do. You are the one transforming that into me suggesting that you should always write your own code, even when dealing with critical things like time. You quoting me and then proceeding to suggest that I said something that I did not because you couldn't interpret it in any other way is **precisely** what a strawman is. Anyway, get over yourself. I notice there's always some weird dude like you jumping in to bring "the common wisdom" to the poor, misguided person who might have a different opinion than you. Like I said, if you love using a library, go for it! There's millions of them out there because people don't adhere to your idea of DRY.
&gt; Anyway, get over yourself. I notice there's always some weird dude like you jumping in to bring "the common wisdom" to the poor, misguided person who might have a different opinion than you. Basic engineering concepts are only represented by some weird dude. Also your main comment is downvoted to hell. I imagine I'm not the only one who thinks you're wrong. Have fun arguing the most nonsensical argument I've seen lol. 
I'm not surprised. This forum is largely filled with scripting noobs who wouldn't be able to write their own libraries anyway, and consider doing something like a time or crypto library to be scary.
My reason for CSS not being in Javascript is very very simple. &amp;#x200B; Someone else can work on the CSS file, while I work on the javascript file.
google search? And I mean, literally, google search, not "why didn't you search for this on google? https://i.imgur.com/wjufRr4.png
So, Google?
Because Im specifically looking for examples of words/phrases used in literary texts, like books and poems and such. Whereas a google search will only show me the 10 most popular searches that other people have made with that phrase.
First: Keep your tiles in a single array, rather than using a two-dimensional array. In other words, for a 10x10 playfield, you'd have an array that looked like this: bombs = [ 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0 ] (1 being "there's a bomb here", 0 being "no bomb"). Let's say the user clicks on the second element of the third row, you'd be getting the specific index through something like this (let the first row be zero-indexed, and likewise for the first column on each row) let idx = y_pos * playfield_width + x_pos; For the third row, and the second column, this would be: 2 * 5 + 1 = 11. You should now be checking the following cells: 5 6 7 10 11 12 15 16 17 For the row above: `idx - width` , and `idx - width +-1`. For the row with the click: `idx+-1` and for the row below `idx + width +-1`. You then need to take some care when on the screen edges: 1. If idx &lt; width, you are on the first row, and skip the checking for the row above 2. If idx &gt; bombs.length - width and you skip checking the row below 3. If idx%width ===0 you are on the leftmost column, and skip checking the -1 values 4. If idx%width === width-1, you are on the rightmost column, and skip checking the +1 values. Side note: Since minesweeper is a tile-based game, typically also without animation, I probably would not use canvas to implement it, rather just opting creating a set of DOM nodes instead. It makes event handling all that much simpler.
Solution: be the boss. 
Do you look at definitions on definitelytyped? It's for old version, but maybe still valuable.
I didn't see one. Got a link? Maybe I got distracted and didn't actually look for it.
Nvm, I was trying to do \`nwjs\` not \`nw.js\`. Thanks!
What you are looking for is called a corpus ([wikipedia](https://en.m.wikipedia.org/wiki/Text_corpus)). Here's a link to an American English corpus: [https://www.english-corpora.org/coca/](https://www.english-corpora.org/coca/)
Desktop link: https://en.wikipedia.org/wiki/Text_corpus *** ^^/r/HelperBot_ ^^Downvote ^^to ^^remove. ^^Counter: ^^244449
OMG this is perfect! Thank you.
I honestly have no clue what TS brings to the table here. Should have used vanilla JS.
Just for fun - a modern ES6 version with async &amp; `fetch` const key = ''; //get from https://console.developers.google.com/apis/credentials async function getVideos(channelId, maxResults) { // YouTube Search API full parameter list: https://developers.google.com/youtube/v3/docs/search/list const params = { part: 'snippet,id', order: "date", key, channelId, maxResults }; const url = new URL('https://www.googleapis.com/youtube/v3/search'); for (const key of Object.keys(params)) { url.searchParams.append(key, params[key]); } return fetch(url).then(r =&gt; r.json()); } // test it! console.log(await getVideos('UCLTZddgA_La9H4Ngg99t_QQ', 20)); 
Is it anything like an objection (function + object)?
I'm a big fan of Nock, especially in Node APIs that tie together external systems. I honestly would be at a loss for testing functions that rely on other APIs without it. 
Wow this is the first time I'm hearing this. What exactly are these differences? Are they noted some where? I know the TS spec is outdated and not valid in certain instances.
Thanks, steve! Using slots for this scenario worked out perfectly.
types )
The functor example here is a bit off. export class Wizard { ... map = (func: (name: any) =&gt; any) =&gt; { return new Wizard({ name: func(this.name), house: this.house, spells: this.spells, }); }; } A functor needs to be _parametrically polymorphic_, meaning it needs to not care about the type that's inside. For example, you can store anything in a List, Maybe, Promise, etc. I think the [fp-ts](https://gcanti.github.io/fp-ts/) library is a great way to learn about these abstractions, although, admittedly, it could do with some more beginner-friendly guides. In fp-ts, if you can construct an object that implements the `Functor` typeclass (a little different than an interface) for your class, then your type is a functor! For example, here's a (paraphrased) version of the `Functor` typeclass for `Option` from fp-ts: const option: Functor1 = { map: (fa: Option&lt;A&gt;, f: (a: A) =&gt; B): Option&lt;B&gt; =&gt; { if(fa.isSome()){ return some(f(fa.value)); } else { return none; } } } 
Except that your own link says he has a plan for it. But it doesn't matter. Unless you've got a problem with the code, there's no different between code that was just written today and code that was written 2 years ago. In fact, 2 year old code without major bugs has already stood up on its own for a while, which is a great sign.
fwiw, the way I deal w/these is to leave it csv(or tsv) as it will be smaller, and load it into a 2d array as it will take up a lot less memory that way. I also have a meta object that enumerates the header row automatically so I can use it to refer to the columns by name (or just create one if you don't have a header row), and add type and whatnot if appropriate, or compute it. Then just loop or map/filter/reduce to your hearts content. 
We switched over to Immer and have been very happy!
Thanks! This is helpful! I’ve learned on my own that “this does this” and “that does that”, but when it comes to actual structure I’m kind of clueless as a somewhat beginner! This will help once I go through more!
I think that's how a lot of us learn. I've been writing JS professionally for over a decade, and I still learned things and clarified some of my mental models while prepping this talk :)
&gt;Javascript/CSS For Content Management System Thank you for suggesting an alternative that is a more appropriate fit for my specific question. &amp;#x200B; Since posts like mine are not permitted, it may be worth updating the guidelines. It is not intuitive reading the guidelines that asking what javascript skillset is necessary/best for some task would have fallen under the category of being a job-related post. 
Ikke bruk norske variabel og funksjonsnavn i produksjons koden du evt skriver i fremtiden? Vær så snill?
That many, huh?
Typescript is basically JS for .net developers.
Whats wrong with RxJS?
Nothing at all. Just wishing we could call it vanilla JS!
Ooph harsh dude.
Er fort for en pertentlig IT2 lærer
[You think I'm joking, but I'm not :D](https://msdn.microsoft.com/en-us/magazine/jj883955.aspx)
Ja, man sparer jo n^2 tid på å ikke bruke 1 minutt på å Google en oversettelse om man ikke husker hva det heter på engelsk.
If I were you, I'd convert csv to json. Then use map/filter/reduce as @steveob42 said. It'll be easiest, I think.
Thanks, been diving deep into JS recently. Really hooked on [custom web components](https://developer.mozilla.org/en-US/docs/Web/Web_Components) right now, so this helps a lot!
What does it do differently? That code compiles as expected. But the code looks wrong to begin with. You want to wrap the object in parentheses: \`const a = () =&gt; ({ b: true })\`.
You're not really wrong. Anders Hejlsberg is the architect of C# and deep into TypeScript now. I think it shows. Going from TS to C# (a bit unusual, I know) was pretty easy. TS is just JS in a C# mould.
Yeah, I have a C# buddy that is trying to get into JS. I think the lack of types is really bothering him.
The author of fp-ts has recently started a series of [getting started blog posts](https://github.com/gcanti/fp-ts#blog-posts). He's thus far covered Setoid, Ord, and Semigroup. The articles are good for dummies like me that have trouble keeping all these terms straight. I really _really_ wish these things were named differently. Mappable is a lot more understandable than Functor, etc...
Push him towards TS. He will feel much more at home. Sure, there's a bit of a learning curve but it's so much nicer than JS without types. The syntax seems heavily inspired by C#.
!remindme 10 hours
I will be messaging you on [**2019-03-16 08:22:15 UTC**](http://www.wolframalpha.com/input/?i=2019-03-16 08:22:15 UTC To Local Time) to remind you of [**this link.**](/r/javascript/comments/b1dtx6/what_the_functor/eimf0uj/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[/r/javascript/comments/b1dtx6/what_the_functor/eimf0uj/]%0A%0ARemindMe! 10 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! eimf2lh) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Ha! I said the same thing November 2016: [https://github.com/immutable-js/immutable-js/issues/1012](https://github.com/immutable-js/immutable-js/issues/1012) I think it's just a slow-moving project. Which is fine, because it's pretty stable.
[http://square.github.io/crossfilter/](http://square.github.io/crossfilter/)
Regardless of whether it has enough mainteiners or not, I sugges moving over to Immer
&gt;Typescript is basically JS for .net developers. It is if you build a billion `class`es and slap on an IoC container to build a monolithic API on Node. The incremental (and value adding) strategy is simply to add static types to your ES6 modules. Let the tools infer as much types as possible— only explicitly add types when they're needed. Functional Typescript is amazing.
Have you tried [Eloquent JavaScript 3rd Edition](https://eloquentjavascript.net)?
a function is technically an object.
If you want to do this, it's better to not modify the object prototype.
How?
[http://exploringjs.com/es6.html](http://exploringjs.com/es6.html) is good, too
Hi /u/MissyingOut, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/fromflanneltolace, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Better encapsulation to just create a class
The point is to have pipe on all objects.
Being able to use interfaces while piping/composing functions is absolutely amazing. Knowing the shape of my data through intellisense makes the cognitive load so much smaller. I know when something is a promise and it wasn't resolved or when it's an array and I forgot to map it before apllying a function. The red squiggles are fantastic.
Hi /u/Moonlit_Tragedy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Tom_SA, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Akseliak, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/deadtree123, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ns_helloworld, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
You're iterating over the same collection of things to draw three times each pass, that's probably not why it progressively slows down, but it's not good.
Hi /u/jetthoughts, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/fanmixco, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/harijsdev, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hunterloftis, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
How is this code-filled exploration of JavaScript Objects any different from these top-ranked /r/javascript articles? - https://www.matthewgerstman.com/what-the-functor/ - https://itnext.io/nock-it-out-of-the-park-http-mocking-for-react-42ec927f83e0 - https://enmascript.com/articles/2019/03/09/diving-into-the-great-observer-pattern-in-javascript
Yes! One can use the standard \`map\`, \`reduce\` etc. and it looks exactly the same (*mostly* no added types), and then you get compiler to show you if you misuse a variable because of typing problems. Plus auto-suggest.
Yeah, the names are tough to get used to and not at all intuitive. I wish had more advice than it just takes time :/ 
holyshit
Noted
Which is fine and valid JavaScript if that's what you're wanting to do. Just understand that it's also why we had the entire debate/controversy over Array.prototype.flatten / Array.prototype.smoosh / Array.prototype.flat, because somebody decided it would be a good idea to modify the prototype of "fundemental" JavaScript objects, used it in production, and it got popular for a time. Developers tend to treat the base prototypes as sacred and try not to modify them, as you never know what you'll be working with in the future. 
I think that's what's so annoying about typescript. It's like training wheels for javascript I don't want or need an ide second guessing everything I write. The headaches of babysitting typescript and cluttering up code with useless types is pure baggage. Ts is js for weak programmers.
Is `Wizard` not parametrically polymorphic? Sure, we'd expect a wizard's name to be stringy, but the code doesn't actually specify this. Looks like `Wizard.name` can be any type. Maybe not the best choice of example, but the code looks correct.
completely agreed &amp;#x200B; But, because this project is so much cooler than anything I've built, I must attack it... ... it's... it's Nazi propaganda!!!
I suppose so, but I'd expect the type of name to be pulled into a type parameter. Also, further down, the article includes snippets like: wizard.map(joinGryffindor).map(learnExpelliarmous); Which I can't really make sense of, if they only map over the 'name' attribute. 
Yikes, I didn't read that far. That's pretty bad. I don't think that even compiles...
As soon as Google uses something newer than chrome 41 to index stuff it'll be so much better 
you spin me right round, baby, right round...
Its a prototype to object. 
What is bind() supposed to do? Is it the [system call on BSD](https://www.unix.com/man-page/netbsd/2/bind/)?
`const bind = (f, ctx, ...partials) =&gt; (...args) =&gt; f.call(ctx, ...[...partials, ...args])`
Holy shit why didn't we do this. We have precedence for standard lib packages now. import global from 'std:global' And with import maps, backwards compatibility is ensured. Seems like a big oversight.
Has JS become brainfuck?
Yeah this is amazing
I thought bind() was for scoping issues. 
http://vanilla-js.com/
RemindMe! 3 days
I will be messaging you on [**2019-03-19 06:02:27 UTC**](http://www.wolframalpha.com/input/?i=2019-03-19 06:02:27 UTC To Local Time) to remind you of [**this link.**](/r/javascript/comments/b1p348/which_is_the_coolest_javascript_library_you_have/ein9fe4/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[/r/javascript/comments/b1p348/which_is_the_coolest_javascript_library_you_have/ein9fe4/]%0A%0ARemindMe! 3 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
I already learned React, quite extensively actually. It's complicated garbage mixing JS and HTML together, lots of abstraction. Vue.js is a bit nicer but I still don't like binding things by embedding attributes in the HTML.
is this a meme lol?
It’s an existing JS function. I guess OP is wondering how you’d re-implement it, as a kind of learning experience
`...`, the spread operator, is incredibly useful and it becomes easy to read after a few examples.
so Immutable.js is immutable?
https://animejs.com/
Yes
[pts.js](https://ptsjs.org/)
Pretty cool
Hold that downvote real quick
They're white and gold
KILL IT WITH FIRE
Yes, versioning would solve all these stupid issues, but instead lets pile the bricks higher. It is just painful to wait for the pipeline operator. Having pipe on the Object prototype would be a fine small addition and people can get used to it. The idea that prototypes should be frozen is crazy. Even Swift people understand that extensions to the core language is a good thing. Also they do versioning the right way.
[https://www.chartjs.org/](https://www.chartjs.org/) is dead simple to set-up and use and comes built in with animations. Its a very useful tool.
*OwO, what's this? * It's your **4th Cakeday** our_best_friend! ^(hug)
There is absolutely no reason for either of these methods. Both of them are exactly equivalent to just calling the function with your object. They do not do anything uniquely useful to justify being on the object prototype. I'd argue they also make code harder to read. If `a.method(f)` is the same as `f(a)`, shouldn't you just write the latter?
The p5 library
&gt; If a.method(f) is the same as f(a), shouldn't you just write the latter? So if a |&gt; f is the same as f(a) why have a pipeline operator in the first place? This is not Python where should be only one way to do things. &gt; code harder to read Piping is the natural way to compose little understandable programs/functions.
am i the only one on this planet that thinks animations in charts are extremely annoying, distracting, and terrible UX?
Hi /u/c-harmander241, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
thanks!
 [https://github.com/angular/angular.js/](https://github.com/angular/angular.js/) /s /s /s /s /s /s /s /s
[https://github.com/fual/nagibabel.js](https://github.com/fual/nagibabel.js) this one is really awesome
RemindMe! 3 days
https://d3js.org https://vuejs.org
I have had good value out of https://plainjs.com/
Assuming this only works on desktop 
Webgl is supported by Chrome and Firefox mobile. Will depend on your gpu tho
I stumbled upon https://roughjs.com/ and think it would be nice to incorporate in UIs/games.
I think I will get downvoted to hell but it was jQuery. When every browser had it's slightly different API, something worked on IE6 but not on IE7, worked again on IE8.. jQuery ***was*** the coolest library that solved all my problems. Now, in 2019 I wouldn't use it, obviously, but like 10 years ago it was great to be able to develop one codebase that worked everywhere. Today I would say React, Animejs, D3 and Phaser.
May I add mofowebsite to this? https://motherfuckingwebsite.com
I think animations in charts can be good UI Design if it represents a live change. Because it makes it somewhat easier to see what is changing.
RemindMe 3 days
I found this, thanks. To lurkers, visit the one above first. ^ [http://bettermotherfuckingwebsite.com/](http://bettermotherfuckingwebsite.com/) 
RemindMe! 3 days
http://tholman.com/elevator.js/
NativeScript’s runtimes, surely the most ambitious of all JavaScript projects: * [iOS](https://github.com/NativeScript/ios-runtime). * [Android](https://github.com/NativeScript/android-runtime) * [Windows](https://github.com/NativeScript/windows-runtime) These libraries allow you to access **any** native API using JavaScript. I give example snippets [here](https://github.com/shirakaba/nativescript-grimoire), showing how to do things like toggle the torch, make a SpriteKit game, tokenise text, play music, run text-to-speech, access the accelerometer, and so on. Happy to answer any questions about this black magic.
[Kefir.js](https://kefirjs.github.io/kefir/) - FRP library that turns handling of compound data flows into pure joy!
LOL! :D
I think that is due to the wasd-controls.
I think almost every front-end developer that was around when jQuery made its debut was deeply impressed by its simplicity. It's shat on now because it's been irrelevant for a long time now, and the go-to hammer for inexperienced developers to looking for nails. Back in the day though, it blew my mind.
I prefer [HTML9 Responsive Boilerstrap JS](https://html9responsiveboilerstrapjs.com/)
I've worked with AngularJS for about 5 years, and despite its obvious flaws, I quite enjoyed it. When it was released it was actually a pretty good framework for making enterprise-size font-end apps. The last 2 years of using it was attempting to migrate to Angular 2+ though, that was a less fun experience. We had to do it using the hybrid strategy (AngularJS + Angular glued together with ngUpgrade), so that was a bit of a pain in the ass. Fully converted now to Angular 7, and it's loads better. 
What about lodash?
Wat?
It's for context issues
__Its a prototype to object.__
`...[...partials, ...args]` can simply be `...partials, ...args`. const bind = (f, ctx, ...partials) =&gt; (...args) =&gt; f.call(ctx, ...partials, ...args)
This works on my mobile, though colours are shit. And had to turn temporal AA off
As a new developer what is used today instead of jQ?
This is misleading. It's not an illusion at all! The image is of rotating black squares against a blue background for a few rotations, then the IMAGE literally switches to show blue squares rotating against a black background. It's not your eyes doing a switch, like in the case of an illusion. The image literally changes. This is not an illusion whatsoever. Just an animation.
I use chart.js in GIS development and all of our users love the animated charts every time they perform a new query.
React.js https://reactjs.org
Oh. Oh! Thanks! I couldn't tell before. :)
Agreed - for example when you add an additional dataset, you want to know how that dataset affects the scale of the entire chart and that's much easier to comprehend if that change occurs slowly over time.
Hi /u/gambhirpulkit4, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
For simple manipulation of elements on the page, just plain JavaScript. The `document.querySelector()` addition replaced a lot of jQuery functionality, there's vastly less browser inconsistencies nowadays in JS implementation, and stuff like AJAX requests is very easy now with `fetch()`. 
It's success is what made it irrelevant imho... Some/core features of the things It did great became a standard (QuerySelector, fetch) and with babel, not to talk about react. And css animations, the world is just moved beyond jq. I do miss it though. 
Thanks for the info.
Css, babel/es6 
Thanks.
[Raphael.js](http://raphaeljs.com/) \- an SVG library for canvas allowed me to do some really cool things easily a while back. It's been some time since I used it so there maybe better things now, but it's probably still worth a look. A port to Javascript, and not really a library in the usual sense as they're more development environments, (although i have built and deployed applications on websites with it) is the superb [Processing](https://processing.org/). Processing itself is Java, but the javascript ports [p5.js](https://p5js.org/) and the now deprecated [processing.js](http://processingjs.org/) run almost as fast and are just as capable. If you're looking to develop graphically stunning eye candy Processing is always a good place to start.
+1. Changed my whole thinking on how to write good JavaScript (ie. very functional)
If you already know React and coming from the React world - you'll also know that it can be complicated to setup your development environment to handle a static site generation workflow. Gatsby makes this "easier" and there are a lot of plugins and boilerplates that you can take advantage of. Their documentation and website is also amazing. [https://www.gatsbyjs.org/](https://www.gatsbyjs.org/) &amp;#x200B; So maybe the popularity is actually the ability to use React since the ecosystem is huge and reusable components is awesome! &amp;#x200B; Comparing it to Next - Gatsby is built specifically targeting static file generation while Next also has that ability but it's not only built for that. &amp;#x200B; I'll also shamelessly plug my Gatsby, Prismic and Netlify series that I just started here: [https://www.youtube.com/watch?v=9eCOcJZR578&amp;list=PLy3RjrA8UIYJZ08w6bmSDNX10ysI8JuDk](https://www.youtube.com/watch?v=9eCOcJZR578&amp;list=PLy3RjrA8UIYJZ08w6bmSDNX10ysI8JuDk)
RemindMe! 3 days
And this one as well. https://evenbettermotherfucking.website/
&gt;Gatsby seems much more complicated and yet also pretty much limited to just blogs. There's absolutely nothing that limits Gatsby to being used with blogs, or hell, even optimizes it for that particular usecase. It's just that a lot of people build blogs with Gatsby because it's an easy project, and, well, lots of people need blogs. (It also helps that we're in a period where lots of people are switching from platforms like Medium back to self-hosted blogs.) &gt;I'd love to see somebody compare Jekyll, Hugo, Next, Hexo, Eleventy or any of the other static site generators to Gatsby. Gatsby has a few main things over most other static site generators: - It's built on top of React, meaning you can do anything on a Gatsby site that you can do in React/JavaScript, like use component libraries, CSS-in-JS, etc. - It has an extremely powerful data layer that lets you pull in data from pretty much any data source, and then query it in an easy and consistent way. It also already has source plugins for tons of CMSs, datastores and external services, so chances are you won't even need to do any work to plug your data into Gatsby. - It has a clientside JavaScript layer that hydrates your app and makes it even (subjectively) faster than it would be with a traditional static site generator. This gives you stuff like prefetching pages before you even navigate to them, lazy-loading images, navigation between pages without a full page reload, and so on.
That got it working for me, but, again, movement I'm not sure about on mobile. 
Working for a company that supports back to IE8, jQuery is still pretty nice. 
Pro-tip: Since most APIs use radians, using turns is way more convenient than messing around with degrees. First, define TAU (unless you're using Python): const TAU = Math.PI * 2; And then you just write code like this: angle = 0.25 * TAU; // a quarter turn = 90° Instead of: angle = Math.PI / 180 * 90 https://en.wikipedia.org/wiki/Turn_(geometry) Pi Is (still) Wrong. (Vihart) https://www.youtube.com/watch?v=jG7vhMMXagQ
I was ready to defend the optical illusion until I went back and looked. You are right. Still cool though.
&gt;**Final size:** 0 bytes uncompressed, 25 bytes gzipped. lol &amp;#x200B;
This is great!
Looks pretty good on safari in read mode 
Threejs [https://threejs.org/](https://threejs.org/) is really awesome!
Good doc and examples at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_objects/Function/bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind) 
Meh. You work with the hand you've got. JavaScript has a vastly different set of requirements in its development than Swift, or any other language does. As such it _can't_ try to be like other languages. 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Not something you new kids will remember, but I was big on Prototype back in the day. It was a competitor to jQuery back in the day, and I really liked its programming model at the time. I built some pretty good shit in Prototype. Probably the first real JS application I ever made, like 2003 or so. 
Codetrain shill right here 
Highly prefer Highcharts, less verbose to setup and more possibilities, but less visually appealing. 
A blog is the obligatory project when playing with new tech which is why you see a lot of Gatsby blogs.. you can use it to build anything.
It's actually 3 libraries but I came across them and used them in a project and found it interesting and fun for website analytics and data visualization of those analytics. The site is keen.io Intro is here [keen](github.com/keen/keen-js/blob/master/README.md)
RemindMe! 3 days
Emberjs /s 🤮
[Downshift](https://github.com/downshift-js/downshift). It's the only dropdown component I've used that doesn't seem to insist on getting in my way.
A day. 
[DataLoader](https://github.com/facebook/dataloader) \- If you have to make many requests to the same endpoint or run queries against the same collection/table over an over, you can use DataLoader to batch them together for you. What makes this library so cool is that you can write your code as if you are making the requests serially one at a time but under the cover it uses your batch function to make just one request or query (or just a few depending on the batch size you set). &amp;#x200B; A coworker created an endpoint where a consumer can post to it an entity id and then it will go out and update that entity for you. There are a lot of foreign keys so it has to go out and make a fair number of requests and do calculations to update the entity. I was tasked to make it so that this endpoint would accept and array of entity ids and update all the entities. I could have just updated each entity one at a time but that would have left me doing a lot of additional fetches, a lot of which would be duplicates. I could have refactored the code to figure out what fetches I needed to make beforehand and cache stuff but there are a lot of order of operations that make this difficult. Instead, I used DataLoader to batch the requests. The code looks completely serial but in reality it's only making one request per foreign key property.
The animejs website turns my laptop into a heater. But damn it is some of the prettiest stuff I've seen!
Huh
That codetrain guy has great enthusiasm. 
Phasor.io - making games couldn't be much easier.
When I first saw the effect I did not notice the moment of the transition (until I really concentrated on what's happening). To me it's an illusion of one continuous movement, whereas in reality there are two independent movements. But since your post is getting upvoted, I'll have to reword the text.
True, I enjoy watching him. 
Agreed. In this case, however, it would ruin my statistics by increasing the number of lines of code by 4%... :)
-5 points for activating a sound on my mobile while I browse reddit in the bathroom
I mean, it’s a joke. Are joke and meme just synonyms now?
Man I wish i had known about this when i was evaluating react/redux. I went with Vue because i preferred the mutation style of vuex over the pseudo immutable approach of redux. This may have changed my mind.
You got me there, not gonna lie.
I just started learning JS and many solutions to my day-to-day problems with JS has some implementation of jQuery somehow. For me, at my level learning jQuery is kinda a must, because I'm unable to code as good in vanilla JS. 
Not using it.
https://mithril.js.org Hands down my favorite library. It is an MVC with everything you need and nothing you don’t. It’s fast. The API is lightweight and easy to pick up. Every time I get to build a site with Mithril.js is a treat. 
It would be nice if he can cover other JS libraries instead of just one. I like his style.
You could save a line by using an IIFE: (function loop() { ... requestAnimationFrame(loop); })(); By the way, you could also switch around every 90° instead of every 180°. Is there a reason why you use sin/cos to calculate the position of the vertices instead of just drawing a transformed rectangle?
...any static, headless thing. Its not really intended for stateful web apps with databases.
Hi /u/LLCoolioVanillaIceT, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Thomasan1999, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/mafarsus, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/iTyris, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/hellotudu, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
They can also be used to demonstrate to the user that the chart is interactive — but obviously they shouldn’t be overdone. Big fan of ChartJS as well!
People already know what you’re doing in there.
you mean like this? context.rotate(degrees) context.fillRect context.rotate(-degrees) If so, i think they're both great ideas!
I would love to quantify how much time lodash has saved me by not having to write my own utilities to process arrays and collections. Big fan of lodash and will continue to be until JS adds more of this functionality natively.
Been using this one since 1995. Hands down the ONLY JavaScript library worth learning. [http://vanilla-js.com/](http://vanilla-js.com/)
Super silly, but one of the libraries that has made my life much easier is react-icons. Need an icon to represent something? It's probably there and it's insanely simple to drop in. I remember the days of searching around for icons or making them or having a designer grab or make an icon set. Those days are pretty much gone!
Nothing cooler than JavaScript &amp; Robotics: [http://johnny-five.io/](http://johnny-five.io/)
“Above all, animation should be meaningful. While it may be visually impressive for bars to fly around the screen during transitions, animation should only be used when it enhances understanding. Transitions between unrelated datasets or dimensions (e.g., from temperature to stock price) should use a simpler cross-fade or cut rather than gratuitous, nonsensical movement.” https://bost.ocks.org/mike/constancy/
React is quite cool! It was refreshing after using jQuery for years. :)
It depends. If you are targeting modern, ever-green browser, then you do not need Babel. Rollup is only for bonding. However, in that case, you may not even need rollup. You could just directly import your JavaScript modules into the browser by designating the script as type "module": &gt;&lt;script type='module' src="/app.js"&gt;&lt;/script&gt;
+1 for lodash. This library really helped me out when I was learning about functional programming as a JavaScript developer.
In the last days, I implemented [Easy-Attach](https://github.com/hediet/easy-attach), a helper tool that makes launching the debugger to step through obscure js scripts (e.g. webpack configurations) extremely easy. While \`debugger;\` just pauses any attaced debuggers, easy-attach pauses the running application, launches the debugger for you and waits with the \`debugger;\` statement until the debugger is fully connected. I helped me a lot to debug a webpack configuration. There is also an [extension for VS Code](https://marketplace.visualstudio.com/items?itemName=hediet.vscode-rpc-server) so that you can easily attach VS Code to your node application.
I’ve had two developer jobs since I started in 2016 and I’ve used at least some jQuery in both. It’s not trendy anymore but people are kidding themselves if they think it’s not used anymore. There’s a lot of existing code out there and not many companies, especially large ones, are going to say, “Oh, is jQuery not cool anymore? Better rewrite our code!”
The link doesn't work (last link)
I am working on implementing some approximation of algebraic effects for js. It is not feature complete yet. I'd love some feedback about the api, the implementation, etc. Also, prs are welcome! [https://github.com/phenax/algebraic-effects](https://github.com/phenax/algebraic-effects)
jquery 🤷‍♂️
Async is baller. https://github.com/caolan/async
Chrome / Firefox and the files are pretty big so let them load.
You can save/restore (push/pop) transformations. Here is that thing with TAU, an integer for phase, and calculated rows/columns: https://jsfiddle.net/e4u1zLf9/
Do you have an example? IMO a good way to learn JS is to try to reimplement some jQuery functions you use with Vanilla JS. I’m not trying to talk you out of jQuery though. If it works for you, keep using it.
For two main reasons: 1. Prettier is opinionated, which is great, but offers pretty limited say into that opinion, which is not great. The point of using an auto-formatting tool is to save you from the infamous "write code, lint it, fix it" loop, changing it instead to a more efficient "write code, auto-format it" loop. But configuration of the formatting rules doesn't conflict with that _at all_. The upfront cost of configuration is amortized over the life of your team/app. 2. Formatting manually _in real time_ teaches you to be a more meticulous developer. Tools like Prettier desensitize you to small imperfections in what you write. If you don't already have a solid foundation of manual formatting (i.e. you're one of those "don't care what it looks like" developers), leaning on auto-formatting and other similar tools actually inhibits your growth. Your code will have more defects (not talking about formatting here), and it will take you longer on average to find and fix those sort of defects. In simpler terms, Prettier is an attention-to-detail crutch that has further-reaching effects on your code than how pretty it is.
awesome!!! i'll update my blog and credit you when i get a chance.
https://github.com/neurosnap/cofx A node and javascript library that helps developers describe side-effects as data in a declarative, flexible API.
[Mapbox GL JS](https://docs.mapbox.com/mapbox-gl-js/api) \- a library for customizable WebGL-based vector maps - with 3D buildings option and much more!
Check out plotly for more advanced stuff! https://plot.ly/javascript/
So I am a Brand New Coder , I'm still in my first year of learning Coding! I just learned how to use git and command line! So i decided i wanted to make a Brick Breaker Clone and see if using Web References , and the P5 library i could do it! I'm still not the cleanest coder. and there are probably ALOT of ( Not best Practices). But i'm Really proud of my first project so far! &amp;#x200B; [https://github.com/miaklwalker/BrickBreaker](https://github.com/miaklwalker/BrickBreaker)
Somewhere out there, I'm sure someone found a use case for it :D
lodash/fp for life baby
If your between the ages of 18 and 30 yeah
I hate the unnecessarily wide body margins on mobile, and the lowered contrast text. I already have my screen contrast adjusted for black on white for every other site, and every participant in usability testing over 45 complains if we go below #EEE And 1.8 is too loose. Whitespace is important but so is information density. 
Good to know, thanks
I would say it's a bit of a meme. The whole JS library/dependency/preprocessor madness has become a bit of a running joke and/or reference.
Heading to the vue conf this month, can't wait
That's fair. I think vanilla-js precedes the madness of react/vue/webpack and all that, though. I remember seeing it years ago. And I mean it mentions MooTools, Dojo and YUI which is some old-ass shit
&gt; old ass-shit *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
What does this do? It’s not really clear
Three.js
[Redux Saga](https://github.com/redux-saga/redux-saga). It's fundamentally changed the way I write asynchronous code in JavaScript.
This is a a more abstract way to manage side effects. The library heavily borrows from effects systems from languages like Eff and Koka. With this you write effects in terms of their operation signatures instead of their behaviour. I guess I should add some more details in the Readme itself. For now, you can find more information here -&gt; [https://phenax.github.io/algebraic-effects/#faq](https://phenax.github.io/algebraic-effects/#faq)
https://www.amcharts.com it's pretty cool and my favorite one chart library.
Looks nice but the samples don’t work on iOS. 😭
[https://github.com/mlubovac/sarcasmjs](https://github.com/mlubovac/sarcasmjs)
(Three.js)[https://threejs.org] powerful, and opens a website to so many possibilities.
Making 2D* games 
Definitely https://p5js.org
*,Phaser
can you call resume more than once?
YESS, WEB CRAWLER. It is given a webpage to start and keeps crawling the web, it also has UI to display the network to see what pages are connected. https://github.com/AlexParra03/spiderbot HELP wanted, There is a bug that I couldn't fix. It stated on issues in github.
But then he wouldn't be a shill anymore...
Not right now as implementing that in javascript requires calling the set of operations again so it could lead to unexpected results. Currently i am looking for suggestions for if there is an alternate way to do it. If not, it is in my todo list to document the lack of this feature.
Yeah seriously, I forget how TS people get on this sub sometimes.
Do you see this replacing React Native in the near future?
I often use tap when I need to compute a value and use it multiple times when rendering a react component, but lodash's tap works fine for me: {tap(compute(...), computed =&gt; ( &lt;div&gt; Total: {computed.lengh} {computed.map(c =&gt; ...)} &lt;/div&gt; )} 
https://github.com/mweststrate/immer Im a simple person. When someone simplifies something that was once complicated, I become smitten.
Omg matter js is magic
Eloquent.js Jews.js Freetommyrobinson.js
There are two alternatives, either memoize and replay from beginning, or a transpiler. There is a transpiler actually (mine) where you can embed algebraic effects and even not use generators syntax (optionally) [EffectfulJS](https://github.com/awto/effectfuljs) . It rely on monadic interface, alg effects can be based either on free monad or delimited continuations [@effectful/cc](https://github.com/awto/effectfuljs/tree/master/packages/cc) . It does more than Eff, it can rearrange operations to run in parallel.
That looks amazing! Why did I not find this before! Definitely gonna give that a go.
Is there a babel plugin for this? That would make it easier to integrate with existing projects
I’m looking forward. Please feel free to ask anything, I’ll be happy to help.
Thanks, really cool stuff. I’ve got some learning to do!
yes, a babel plugin and babel-plugin-macros macro to integrate into zero config tools like CRA.
Thanos js. Try it. https://thanosjs.org
[Brain.js](https://github.com/BrainJS/brain.js)
I will include A-frame (: great library in a higher level 
I've started learning React recently, and my first thoughts is that JSX isn't very... elegant. But I guess I just need to get used to it.
I'm a new developer but I've been out of college for a decade and semi-switched careers recently from pure GIS to GIS Development after teaching myself coding for about 4 years at home. I've used some jQuery with my project at work, not a lot but some, so I wasn't sure if I was missing something important. Definitely good to know though. 
That being said, I wouldn’t worry too much about it. It’s simple to learn the basics and I imagine that you’ll see it less and less as time goes on. It’s just important to remember that legacy code doesn’t go away as soon as the dev world decides they don’t like it anymore. I had to work on some very rusty old Visual Basic code not long ago. I’m not going to go studying VB in my spare time, but it was helpful to know the basics at least.
When inside an arrow function `() =&gt; { ... }` , the value of the `this` keyword do not change compared to outside the function body. But when inside a function declared with the `function` keyword, the scope in which the function is executed changes and `this` will not have the same value as outside the function. &amp;#x200B; You can simply fix your code by using an arrow function with a body : this.heroService.getHeroes().subscribe( (heroes) =&gt; { return this.heroes = heroes; }); &amp;#x200B; Another possibility is to keep a reference to the value of this outside the function to reuse it inside the function : &amp;#x200B; const self = this; this.heroService.getHeroes().subscribe( function(heroes) { return self.heroes = heroes; }); This is a tricky part of JS. This article explains some of the specifics : [https://hackernoon.com/javascript-es6-arrow-functions-and-lexical-this-f2a3e2a5e8c4](https://hackernoon.com/javascript-es6-arrow-functions-and-lexical-this-f2a3e2a5e8c4)
Ramda
Maybe try to observe changes, and only send changed values to the server. Assuming, not all names are new / changed.
TwoJs is also kind of cool, but it's annoyingly missing certain features that would have been great to have. 
I'm sorry for not answering your question directly but I'm very curious: what are you doing that you have a form with anything close to a million values? Part of programming is knowing how to abstract things correctly so maybe we can work out a better model for your data (like sending an image or binary blob). Anyways, a million values is very close to javascript memory limits so maybe that's what is happening: the browser cannot allocate enough memory to handle your data and crashes.
I prefer https://two.js.org for SVG canvas-like projects. I used p5 for a long time and found some pitfalls, like how it operates horribly on mobile. TwoJS is really cool, but it's missing a few features that it would be really nice to have
Have you ever thought you could have a design problem??? 
For me it was the animation APIs. Before CSS3 animations (or when you still had to support older browsers), jQuery's many animation functions were excellent.
Thanks for the response! The form is responsible for creating a "User Group". I currently get around this issue by making 10 groups of around 100k users each but this doesn't seem to be a sustainable option as the user base keeps growing...
Not that this changes the design problem, but I'm not necessarily displaying a million fields haha. But it does have a field that holds an array of a million users which is inputted by a CSV.
GSAP. Best animation library hands down. https://greensock.com/ 
It's been a while since I've tried it out, just a few years ago it was a lot slower - noticeably slow even with their first-party demos. Rather than rebuild a UI engine their approach was to simulate CSS &amp; the DOM. Overall it just didn't seem like the right approach if you want a truly native feeling user experience.
Yea this was very helpful as someone who is just starting out. 
Animation and home-heating, the best 2 for 1 deal around! 
Fetch?! I must google.
I believe it's the other way around. React Native replaced NativeScript, which is a year older than RN
Separate your requests by a maximum amount of users and implement a loading screen to document the progress of the sequential update. For example: sending 100k users at a time so that if you have 1M users to update it will send 10 separate requests. 
If it's just a CSV you want to upload then zip it or split it into chunks and upload it. Then you can do the heavy things on the server side. After this send just the necessary data back to the user.
Hi /u/everestimated, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I disagree, I think jsx is very elegant.
I'm jealous.
Hi /u/lksMisty, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
This is why Vue is the truth. Vue single file components are more legible and understandable than React or other frontend frameworks.
Hi /u/exceptionally_noob, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Only one problem with GSAP is the g zipped size of 500kb...
Hi /u/akif2702, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
[https://momentjs.com/](https://momentjs.com/) of course [https://www.chartjs.org/](https://www.chartjs.org/) Canvas based charts work better than SVG for sending the resulting image to the server. [https://www.npmjs.com/package/zipcelx](https://www.npmjs.com/package/zipcelx) small lib but I use it everywhere to create excel downloads from page data. [https://paramquery.com/](https://paramquery.com/) Excel-like web interface (paid). Was great when I started using it but needs a jQuery free re-build.
Cool! Don't sweat best practices early on in your learning. There are a lot of ways to do things in JavaScript and you'll make mistakes and form opinions as you go. 
CSS-in-JS doesn't require styles to be colocated with components -- you can still import a separate JS file that contains component styles.
&gt;Hi exceptional noob coder here, &gt; &gt;I have a form with over a million values, and when I try to submit it in a PUT request the browser just crashes. I'm using redux-form where the submit looks like this: &gt; &gt;onSubmit: values =&gt; axios.put(\`server\_endpoint\`, values), &gt; &gt;the "values" object has over a field with over a million usernames and I think that is what is crashing the page. Everything else on the page works fine it just completely breaks when it I try to submit it. &gt; &gt;I've been trying to look up a solution to maybe send it as a stream? But I can't find any good examples, wondering if I'm thinking about this all wrong entirely... &gt; &gt;Any help/thoughts would be appreciated! Thank you, sorry about that
[feathers](https://feathersjs.com/) is the best way to spin up a backend or an API layer. It has DB adapters for most popular DBs that let it wrap your DB in a dead-simple REST endpoint, so everything comes in as arrays of objects. Also wires up websockets so you can subscribe to queries and get realtime updates from any DB. I love using feathers with the [NeDB](https://github.com/louischatriot/nedb) adapter, because it's fully NPM-installable.
Recently returned to backbone after 2 years of exclusively using react. Sorry to all the contrarian types but react is just strait up better than backbone, in every way that matters.
[vue.js](https://vuejs.org/) [cms.js](https://chrisdiana.dev/cms.js) [three.js](https://threejs.org/) [hyperapp](https://github.com/jorgebucaran/hyperapp) [clippy.js](http://www.smore.com/clippy-js) [brain.js](http://brain.js.org)
&gt;clippy.js everyone needs a lil clippy
It really has the best of both worlds. The simplicity of React and the functional props from Angular.
A simple promise error wrapper called await-to-js. It makes code look so much cleaner than try/catch blocks!
three.js is pretty cool https://threejs.org/ There's also some offshoots of it that are more geared toward game dev (Babylon JS, etc.) 
We're getting downvoted for expressing these opinions - why am I not surprised?
Finished [Manchego (GitHub) CLI Tool](https://github.com/luketeaford/manchego) which is a lightweight and straightforward tool for turning \`process.argv\` into a format that's easy to work with. It has no dependencies, no defaults, and it does not invent any new syntax or convert any types.
Corporate shills, essentially, who haven’t even tried Vue. smh
Let's go over it quickly. &gt;const yoMama = &lt;h1 onclick={this.props.thingsToDo}&gt;{this.props.textToShow}&lt;/h1&gt; I'm just so used to ES conventions, I guess I'm getting triggered by some things. For me, I would have preferred something like &gt;const yoMama = r.h1({onClick:this.props.thingsToDo,text:this.props.textToShow}); But yes, the React way of "spelling" is indeed more legible, although kinda throws off my expectations of what ES usually looks like.
This actually looks like a perfect solution to a pain point with one of my current projects. I will be investigating deeper, thank you for sharing!
Care to explain why you don't like Ember?
d3 is the tits
Vue is really, really good software. Powerful, flexible, readable, and well-documented. It's just a pleasure to use, and it's one of the most "professional" tools I've used in my (admittedly short) webdev career.
jQuery vs Prototype vs MooTools was the React vs Angular vs Vue of the early noughties!!
Just a bad experience. My professor is forcing the entire class who have never used Ember to build our project with it. It's really opinionated (which I understand is good for large applications and experienced developers) and has proven to be incredibly difficult to debug as error messages often give no context. 
Hi /u/webpapayaaa, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Damn this is an awesome learning tool
finally I finished a jscast about deploying a nodejs app on ubuntu server by using shipit.js (with mongodb) - [https://youtu.be/8PpBySjkWEM](https://youtu.be/8PpBySjkWEM)
Many thanks for your answer. Ideed this is little weird 
Thanks for explaining! You should totally join the Ember discord. People are usually very supportive over there. Personally I really like Ember. I've been using it for a year and it's my favorite way to build web apps now now. The Octane edition that's being worked on right now is going to modernize the developer experience as well! I agree that the error messages are not very clear sometimes which is frustrating, especially when you are new to the framework. People in the discord are happy to help tough!
Thanks for explaining! You should totally join the Ember discord. People are usually very supportive over there. Personally I really like Ember. I've been using it for a year and it's my favorite way to build web apps now now. The Octane edition that's being worked on right now is going to modernize the developer experience as well! I agree that the error messages are not very clear sometimes which is frustrating, especially when you are new to the framework. People in the discord are happy to help tough!
I've had good luck with marked.js, it exposes the parser [https://marked.js.org/#/USING\_PRO.md#parser](https://marked.js.org/#/USING_PRO.md#parser)
Thank you so much for posting this and bringing it to my attention. I have payment implementation due Monday in my react app project, and I was struggling figuring out how to make Stripe work.
No, not this one at least.
What is SvgNest for? It is very cool, but is it also usefu?
Glad this could be of use for you, if you run into trouble getting started you can find help in the Square Slack community at https://squ.re/slack
Backbone is just... barebones. It's really it, you'll have to write your own framework over it to get productive. It's just a backbone for a MVC app. 
https://www.react-spring.io/ and [react-with-gesture](https://github.com/react-spring/react-with-gesture). I used them both to make an animation I found on dribbble, and both libraries made it super easy.
Do you have a package.json?
React is barebones as well. But the programming paradigm used by React is far superior to the one used by Backbone, in the context of both libraries' intended purpose.
use `require`
Wtf
yeah, have just googled that as well, but still having issues with it https://i.imgur.com/5YqQyrc.png
Nope. I guess it's mandatory? Could you please share an example of how it should look?
Site is down for me :/
NSFW JS https://github.com/infinitered/nsfwjs
Just fucking don't. 
Do npm init -y before npm i rxjs
A further -5 points for doing the same to me 
Hi dude, many thanks for mentioning *require* anyways!!! `rxjs-compat` is what I was lacking. I think I've just got it working [https://i.imgur.com/bRc8zRy.png](https://i.imgur.com/bRc8zRy.png) Thank you very much indeed!
Finally got it working [https://i.imgur.com/bRc8zRy.png](https://i.imgur.com/bRc8zRy.png). rxjs-compat was lacking. Thanks anyway!
React sells itself as a library, backbone calls itself a framework. I said that backbone doesn't have enough to be a framework, as you have a lot of work getting it to do something meaningful. 
I've seen "Corporate shills" a couple of times recently. What is happening? I'm very new to the whole React/Angular/LibrariesUsedByTechStartups thing, only ever done "traditional" JS.
same question
Nope. * A hell of a lot of devs know React, and you’ll always get the best React library from Facebook themselves; there’s also a bigger community by the same logic. * The NativeScript team is simply far smaller; they can’t keep up with community needs. * Telerik are sort of making NativeScript for their own purposes. They hire out themselves as cross-platform consultants. So it’s always going to focus on what their use cases are, and they’ll always cheat if they have to (because they’ll know and accept its limitations). * Some people don’t want their JS executed on the main (UI) thread. I love it, though! * NativeScript UI tooling is far, far behind. Their flexbox implementation isn’t even compliant. * You need to be an absolute genius to get a cross-platform TypeScript ‘plugin’ working * RN is bringing out Fabric and gradually planning to strip out the coupling to React. This will chomp on NativeScript’s heels... but they’ll still never have a UI thread full-platform runtime ;) * People just don’t seem to care about what NativeScript offers. I don’t know why. Just the cult around RN is too strong. However, I’m cheering for it all the way!
I don’t see why you wouldn’t have one. But good you got it working :)
Buy all books of kyle simpson Read at least 2-3 you dont know js Then at last read his functional programming book. And you are good to go
Word is being thrown around too easily. Migrating means you are switching implementations. In case of TypeScript you don't "switch". You add things to existing base.
https://datatables.net having an out of the box library parse a dense table into a JSON object that lets me write my own filters and handles all of pagination plus search.... WIN
It hasn't been updated a while, but [js-data](https://www.js-data.io/) was amazing when I used it on a project a while back.
Animejs is such a good library. I came here just to post a link to it, but I see someone was faster lololo
i just learned Javascript 
What's react table?? 
I agree that their UI approach is bad. I hate their XML format which lacks both documentation and IDE support, along with their bespoke lifecycle and poorly-documented bindings between variables and files. If that were all overhauled, NativeScript would be far healthier. I don't know the dev experience of the Angular and Vue ports, but I'd love to produce React-NativeScript if I had the time and expertise. As for performance, here are some old demo metrics: https://github.com/NativeScript/sample-iOS-Profiling/tree/performance-tests ... And if you go through [my Twitter feed](https://twitter.com/LinguaBrowse), I've been posting plenty of fun NativeScript videos – it's plenty fast. For example: * Injecting a native SpriteKit game into the app at run-time – [video](https://twitter.com/LinguaBrowse/status/1104461351869661185) * Accessing the accelerometer – [video](https://twitter.com/LinguaBrowse/status/1102272013845057536) * Synchronising text-to-speech with text highlighting – [video](https://twitter.com/LinguaBrowse/status/1102202042620223488)
Ember is fantastic. Steeper learning curve but when a team got used to is just productivity,
Laser cutters, plasma cutters, and other CNC machines.
[http://johnny-five.io](http://johnny-five.io) [https://brain.js.org](https://brain.js.org) [https://trackingjs.com](https://trackingjs.com) [https://storybook.js.org](https://storybook.js.org) I’m not building killer robots, I swear
I really love elevator saga. Never had time to accomplish it though. Now have an idea to make a hackathon within the team: who's algorithm will solve the most number of stages. [https://play.elevatorsaga.com/](https://play.elevatorsaga.com/)
 I wasn't going to say it, but I so wanted to say it ;-) &amp;#x200B;
Don't forget [https://thebestmotherfucking.website](https://thebestmotherfucking.website) 
Ramda is my love &lt;3
Is there any significant differences between Kefir and something like Ramda?
I'll host it in git also, give me a minute.
[https://github.com/ridhwaans/homehost](https://github.com/ridhwaans/homehost) React webapp to manage a media collection
Ramda is so good that it makes me wish I was consuming shittier apis so I had more data to transform...
how is that different from promises and bluebird js?
Done, there's an alternative link on the readme page now
wtf
Well done, nostalgic of the great 2004 ROCK PAPER SCISSORS Grand Master tournament. Thanks for sharing 
I was pretty proficient in React for about a year--using both class and stateless functional components. "Closure" wasn't even in my vocabulary. Then I started using the new Hooks API. Now I can't swing a dead cat without hitting one.
No, planet animations are fun!
&gt;!I knew what you meant I was kidding.!&lt;
Angular RxJs - this one definitely deserves a separate mention
I went from a mid sized company where we used jQuery for almost all DOM manipulation to a Fortune 50 company where all new projects are done in React, and older ones get refactored. Haven't used it in over a year now.
Generator functions.
https://github.com/tannerlinsley/react-table/blob/v6/README.md Link is to v6 documentation, v7 is still alpha. It's a really powerful table component with a pretty great API for customization and hooks/event handling. Makes it super easy to drop in paginated tables with resizable columns anywhere needed. I use it extensively in admin dashboards. Not nearly as useful (IMO) on end user-facing stuff or marketing pages but it's great for utility stuff.
This right here 
Not exactly an expert but all the stuffs used to forge and manipulate ajax requests are things that I buried behind an intelligible class and will never touch again.
Prototype inheritance. Largely because I try to avoid all inheritance like the plague, so I've never used to it enough for the knowledge to bed in. 
I feel you bro. 
To this day, I recommend reading the code of jQuery see how clean self documenting code looks like. It's a masterpiece 
Just a few, there are many many more: [] == ![] true NaN === NaN false !![] true [] == true false Number.MIN_VALUE &gt; 0 true &lt;!== I'm a valid JS comment 
The event loop and callback queue of the browser got me losing marbles until I read a blog recently. 
[This talk](https://www.youtube.com/watch?v=8aGhZQkoFbQ) cleared up a lot of things for me.
Observables. (Not observers, observables.) I get what they’re good for, and I’m on board. But RxJS has like four dozen operators, and until recently I was relying on their official documentation for help. [Rx Marbles](https://rxmarbles.com) has been super helpful, and I’m slowly getting through [“The introduction to Reactive Programming you've been missing”](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754). It helps to build momentum, you know?
Yes. Kefir is a utility library for creating and modifying observables, which makes it closer to libraries of the RxJS and Bacon.js family (aka “FRP” - Functional Reactive Programming libs). Libraries such as Ramda and Lodash (/fp) can be used in conjunction with Kefir, but they are essentially different. 