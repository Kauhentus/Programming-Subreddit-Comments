Thank for reporting that. I know that there's a lot of things that need to be improved. It was just a quick experiment to use on local JavaScript meetup.
Sorry for that, it's in very early phase - it was just experiment for local meetup.
But...warrant canaries are flat text
 function isString(obj) { return Object.prototype.toString.call(obj) === '[object String]'; } OR function isString(obj) { return typeof obj === 'string' || obj instanceof String; } OR $.type(obj) === 'string' OR duck typing function isString(obj) { return obj.charAt !== void 0; } OR i misunderstood your problem completely :D
I tried both mean.io and meanjs Not used the fullstack one. I liked the way the resources generator builds modules around a mongoose model. Along with the shared module this is quite a nice structure. Need more time to tinker though before I am sold.
Array literals have nothing to do with the comma operator.
Please elaborate.
It's not this. See the article. It's a rarelly used syntax where you can say: var x = 0; var y = (x++, 5);
&gt; I'm a delicate little flower. I'm with you.
In for-loops. for (a = ..., b = ...; ...; a++, b /= 2) {...} Like, once a year or so. Some minifiers use it extensively.
I wouldn't because it would make code less readable.
This is not the comma operator.
In one-line reducers: [1,2,3].reduce(function(s,a) { return s[a]=a,s; }, {})
That's what I think as well. But I'm looking for valid reasons why would someone use it in a day job (i.e not in an contest, or personal project)
In the var statement, no (well, kinda, but not really). In the for-loop, yes, definitely.
hm.. nope. this is not the comma operator. read the article.
Did *you* read the first article? It explicitly says so in the [Description](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator#Description): &gt; The most common usage of this operator is to supply multiple parameters in a for loop. 
Post some code.
Yes, it also states: &gt; Note that the comma in the var statement is *not* the comma operator
Coworker: "What are you doing?!" Me: "Learning AngularJS" Coworker: "Oh.. carry on" 
It should be clarified somewhere that the game itself is not written in Angular. Still a nice job wiring those together. That would be an interesting read if you documented your experience and thought process. Either way, thanks for the open source.
Thanks for the reply. The jsfiddle link is... http://jsfiddle.net/j0k5w79w/ It does not run properly in js fiddle. I have pasted in however the html, css, and javascrip as I have them in sublime text. An image directory is missing so it can not run properly in jsfiddle. I'm using a javascript sequencer listed here... https://github.com/ertdfgcvb/Sequencer/ and the sequencer/ canvas should run something like this example http://ertdfgcvb.ch/p2/sm/play/test_canvas_async 
Here's my latest little project. It was developed out of frustration of having to do my own modal boxes for errors, and the fact that there were no plugins out there that I liked. :-) Feel free to contribute: https://github.com/t4t5/sweetalert
Okay, I retract my statement, because I misread the code as var firstValue = 1, secondValue = 2, i, len, ...; for (i = 0, len = arr.length; i &lt; len; i++) { ... } *That* is the comma operator in use.
Yup, pretty much. It also indicates there is not a memory leak. Memory leaks look like stairs 
Yeah I figure reposts are okay if you're OP lol
Might do. You'd have to send in quite a few parameters to make it good though, like placeholder text, input type, input width... etc. I'll think about it! :)
why? i want the user to be able to drag and drop the start and end markers, and those should move word by word. Those markers will only be visible when the user enters in "edit mode"
Looks nice :)
You die? You don't learn AngularJs!
Thank you! You're awesome. I wasn't quite sure whether or not I needed to wrap it in a fuction.
Crockford suggests the following for simple for-loop iteration: for (var i = 0, len = someArray.length; i &lt; len; i += 1) { ... } as opposed to for (var i = 0; i &lt; someArray.length; i += 1) { ... } The advantage being that the runtime doesn't have to calculate the length for each iteration. That being said, there are now better ways to iterate through an array, like `.forEach()`. EDIT: Forgot my `var`s
jQuery dependency :(
21 day old account and only at -100 comment karma? Apparently you're a sub-par troll as well.
Crockford sure as fuck doesn't suggest to use "for (var ...". "for (let ...", however, would be perfectly fine.
That's true. He would suggest `let` as opposed to `var`. As would I, when it becomes supported by everybody (for all I know it is, and I just haven't bothered to check up on it recently). EDIT: I just checked. It's supported by Chrome/FF, and IE11+, but not Safari. So close! EDIT EDIT: Chrome only with the experimental flag enabled
npm install myGlob creates node_modules/myGlob/server.js and node_modules/myGlob/client.js. Note that you should never rely on the position of these files, as npm can optimize and remove duplicate modules (if the versions match sufficiently). &gt;Does NPM have any way to place a client.js file in the public/js directory you see in express applications? You can create a public folder which has a js folder in your module. Your client.js can then be placed to node_modules/myGlob/public/js/client.js You can't tell npm to install the client.js to somewhere else (e.g. to ./public/js), it must be in node_modules/package_name/. You can, however, to handle the problem in various other ways..
$0.1 million. Almost enough to cover the legal fees fighting unhappy clients.
Interesting. I was beginning to blame Angular for locking up my browser after hitting a question block, having the scores for jumping on a creature all in the wrong place and the general lack of context for all the intruction panels... for instance: $scope.$apply() automatically calls $rootScope.$digest() Yeah, thanks for explaining what `$rootScope.$digest()` was before throwing that one out there.
Very nice! Would love one without the jQuery dependency though, maybe it's an idea to write it in vanillaJS and unlock jQuery api based on feature detection?
I'm not going to get into all the details, but the general steps should be something like: - get the SVG from wikipedia - open it in Illustrator or similar program - delete all the stuff you don't want, ungroup everything, combine paths so that its just simple shapes - optionally name all the countries in the layers panel (so its easier to read later) - Save as a new SVG - open it in a text editor, you should see a bunch of &lt;path&gt;s which have an attribute `d="M203 30 L 340"` that will be really long. Thats the path data in SVG speak, and thats what you need for each shape. - if you named the paths in the layers panel, it should have made that into IDs on the paths so you can tell what is what. Then you just copy those d path strings into a your mapael config, like the examples show. - map it up!
Thanks! Should be pretty easy to convert to plain JS since the animations are CSS-based.
That is wrong. A growing sawteeth pattern indicates memory leak.
Looks Solid, Thanks! The easing is a nice touch
this is really cool, good work.
Very hard to read page. Looks like all the content except code snippets are set to opacity: 0.5.
Thanks man, I'll check it out! :)
That is *also* the comma operator, agreed. So is my example. If it isn't please explain why. It isn't an array- or object-separator, and despite appearing in the initialisation section of the for-loop, which may be the source of the confusion, it isn't part of any var statement.
I will try to implement these thank you.
Very nice. Looks a little off in landscape on iPhone 5 when a button is included bc the popup is filling the whole screen vertically.
you are right
You are right, I will add that info. Thanks!
Douglas Crockford doesn't use for-loops at all anymore: http://www.youtube.com/watch?v=bo36MrBfTk4#t=1295[1] 
There is a small error in the example in the landing page: `alert(Oops... Something went wrong!");` Notice the missing ".
Its deeper than that. Its the same point as the article. Its not just a presentation problem. It involves database relationships, queries, validation, engineering and sales resources and even sourcing concerns.
&gt; Chrome won't allow me to switch Tabs while an alert dialog is open. But that only applies to Chrome. And it seems like a poor UX choice anyway. It would be no different from a desktop application refusing to let you switch to another application until you've dealt with it.
If you want to use vanilla JavaScript: http://jsfiddle.net/zowtmtfv/3/
"plain JS" should be the default, not the exception.
&gt;&gt;Chrome won't allow me to switch Tabs while an alert dialog is open. &gt; But that only applies to Chrome. Nope, IE (11) too. &gt;And it seems like a poor UX choice anyway. I agree with that though.
Very beautiful looking. Would be cool if the Esc key worked to close the dialogs. Edit: And the Tab (and Shift+Tab and the arrow keys) key to switch between "OK" and "Cancel" buttons in confirm dialogs. The Return/Enter key doesn't work either.
Looks very sweet. I wish there were a little more padding on the bottom of the boxes, though. Currently, they feel a little cramped, there.
Very, very nice. I've got a project that I'm going to start using this on right away. 
Same reason I used SCSS for the stylesheets. It's faster to code (at least for me).
The equivalent of scss in javascript is coffescript not jquery because you don't make people use scss but you make people use jQuery. but other than this it's a great project and I hope you would make this without jquery :)
Mac Chrome 38.0.2125.77 beta lets me switch Tabs with an Alert dialog open. 
Good point. I completely overlooked keyboard shortcuts. I'll put it in the next release!
Try "debugger;" instead.
Not that useful, use your browser's debugger over alerts when possible.
Well 37 on Windows 8.1 does not.
Yuppppppp And this subreddit is full of these too. Is it faster to call Array#forEach a million times, or a for loop? Herp a derpity doo! Then you say "try reading the code of the frameworks &amp; libraries you use every single day" and it's rabble rabble rabble
AngularJS is a client-side application framework. Jquery is just a dom manip library.
So, what does it really mean? "client-side application framework"? That you don't need anything other than maybe: mysql + angular to create dynamic sites/apps? 
It's not about "hating" jQuery. I happen to like jQuery. The project we're currently developing is built on Angular and doesn't include jQuery (because we don't need it, just as this one doesn't). 
I think that might not be an instance of the comma operator. Like I think in variable definition blocks or object/array literals it's not acting as the comma operator in those contexts. I think. Maybe.
Yeah thats what I was thinking.... OP - fill us in?
It looks nice. I ask if this really needs a dependency on jQuery. Looking through the code, I don't see anything that can't be replaced by a call to the vanilla DOM API (assuming oh, say IE9+).
AngularJS is not a superset of jQuery. AngularJS is a MVC*-framework utilizing two-way databinding and declarative templating directly in the HTML. AngularJS itself utilizes jQuery if it's present on the page. If it's not, AngularJS uses/implements a minimal set of jQuery features, mainly for DOM manipulation. AngularJS "reimplements" some jQuery features as somewhat similar AngularJS services. For example, you can use AngularJS's $http instead of jQuery.ajax. Of course, the AngularJS services are not direct copies of similar functions from jQuery. Just to give a few alternatives (I'm not recommending these alternatives per se, I'm just clarifying that they're in different classes). Instead of AngularJS you could use Ember or Knockout. Instead of jQuery you could use Zepto.js. *AngularJS likes to use the term MV-Whatever, but I think MVC is close enough here
Reading the top comments here reminds me of why I stopped posting any of my own creations in this sub. Might as well be /r/demotivational, lol. For what it's worth I think it looks great and I can see myself utilizing it in quite a few scenarios. Good job :)
This is cool, but could be even better if it had support for Promises.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for The 3 parts are expressions. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator &gt; You can use the comma operator when you want to include multiple expressions in a location that requires a single expression. The most common usage of this operator is to supply multiple parameters in a `for` loop.
You can do that kind of thing with PhantomJS. "PhantomJS is a headless WebKit scriptable with a JavaScript API." http://phantomjs.org/
Nothing in that thread answered my question, except maybe the top voted one, which wasn't really an answer at all.
In &lt;a href="javascript:..."&gt; links, if the expression returned anything other than undefined, the browser would replace the current page with the return value. When I still used "javascript:" links too much, and before I knew about the void() function, I would add ",undefined" to the end to ensure that the return value was always undefined.
Do web designers not know of adjectives other than "*beautiful*"?
on the default alert I also have the "OK" button focused, so I can just hit enter an continue.
Pressing &lt;Enter&gt; closes the standard one. Sweet one doesn't. Fail at keyboard handling.
/u/nawitus I wrote the same and i was downvoted too, it seems people like type coercion too much :)
you forgot "professional"
In your confirm button example you might want to use a SweetAlert instead of an alert since you are calling it a replacement.
That success check animation is awesome
Because it's not his problem. The code is out there, make it work for you and release it to others that care. Or, just be ungrateful and don't use it, jeez. 
And remember to set focus back to previous element.
Do they have to be? My thought with this module was that, rather than it being a matter of taking down a page of text (which can be saved by an attacker and restored in a defacement), a warrant canary can be a matter of satisfying a cryptographic challenge: submit a message every so often signed by a certain key. Many of the canaries I've seen already sign messages so they are readily verifiable by a cautious user. The idea here is that, if you want to void an instance of this canary, you destroy all copies (ideally: the *only* copy) of the signing key, making it impossible to produce a false message for the next time period.
Angular is a fantastic framework that is getting better, but the learning curve is not exaggerated. This is especially so with those who are not familiar with MVC patterns. I would not recommend it if you have concerns with junior devs getting up to speed quickly.
Much oblidged. :)
It allows me to switch tabs without a problem, the alert box is just carried over to the new tab. 
yep, PhantomJS to scrape the site, then the fs node API to save it to disk
Wow cool! I was considering moving some PaperJS animations into gif form, but had no idea where to start.... looks like with this I could export each frame of the canvas into a png and then load them up into a gif... Tumblr here I come
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Associative array**](https://en.wikipedia.org/wiki/Associative%20array): [](#sfw) --- &gt; &gt;In [computer science](https://en.wikipedia.org/wiki/Computer_science), an __associative array__, __map__, __symbol table__, or __dictionary__ is an [abstract data type](https://en.wikipedia.org/wiki/Abstract_data_type) composed of a [collection](https://en.wikipedia.org/wiki/Collection_(computing\)) of pairs, such that each possible key appears at most once in the collection. &gt;Operations associated with this data type allow: &gt; &gt;* the addition of pairs to the collection &gt;* the removal of pairs from the collection &gt;* the modification of the values of existing pairs &gt;* the lookup of the value associated with a particular key &gt;The __dictionary problem__ is a classic computer science problem. The task of designing a [data structure](https://en.wikipedia.org/wiki/Data_structure) that maintains a set of data during 'search' 'delete' and 'insert' operations. A standard solution to the dictionary problem is a [hash table](https://en.wikipedia.org/wiki/Hash_table); in some cases it is also possible to solve the problem using directly addressed [arrays](https://en.wikipedia.org/wiki/Array_data_structure), [binary search trees](https://en.wikipedia.org/wiki/Binary_search_tree), or other more specialized structures. &gt;Many programming languages include associative arrays as [primitive data types](https://en.wikipedia.org/wiki/Primitive_data_type), and they are available in [software libraries](https://en.wikipedia.org/wiki/Software_library) for many others. [Content-addressable memory](https://en.wikipedia.org/wiki/Content-addressable_memory) is a form of direct hardware-level support for associative arrays. &gt;Associative arrays have many applications including such fundamental [programming patterns](https://en.wikipedia.org/wiki/Programming_pattern) as [memoization](https://en.wikipedia.org/wiki/Memoization) and the [decorator pattern](https://en.wikipedia.org/wiki/Decorator_pattern). &gt; --- ^Interesting: [^Hash ^table](https://en.wikipedia.org/wiki/Hash_table) ^| [^Array ^data ^structure](https://en.wikipedia.org/wiki/Array_data_structure) ^| [^Data ^structure](https://en.wikipedia.org/wiki/Data_structure) ^| [^Ruby ^\(programming ^language)](https://en.wikipedia.org/wiki/Ruby_\(programming_language\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ckwwx4p) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ckwwx4p)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Also, where's the CoffeeScript files?
Dear /u/autowikibot creator, would you please mind the spam? Bots can be great, but this one isn't one of them.
Touche! that's certainly the only time i use it
They're most likely lower than that, reddit capped it at -100 as a sort of troll deterrent
Something like [plato](https://github.com/es-analysis/plato) ?
Ha ha. Brilliant.
The most useful web app I use is a productivity timer that uses prompts to block other tabs until you confirm you are finished with x block of time. It's been abused historically, but I'll be disappointed if / when they they remove that feature
It looks really slick, and with a little more functionality it could really help to give those who abuse alerts in their UI something a little more friendly to show to their user. However, I am having a hard time with the readability on your site. Maybe it's just my old programmer eyes, but it's pretty painful. You might want to up the contrast between your text and background/ text and buttons a few shades. :)
Good job! One minor thing: on Windows, the "cancel" and "confirm" buttons should be inverted: that is, "ok" on the left, "cancel" on the right. [Example from MDN](http://i.imgur.com/EsNhdrC.png)
https://github.com/t4t5/sweetalert/pull/2
https://github.com/t4t5/sweetalert/pull/2
I disagree. It's just a decision. Plenty of sites use jQuery, and they will use this. 
right. but it'd be useful =c)
 x = { name: value, blah: function() {} }
It looks really good. It would be nice if the focus stayed on the alert while it was up, currently you can tab out of the alert and be focused on something in the background. 
There could be a popup in a specific tab, blocking it but not other tabs. Doesn't have to be an OS popup. It really is ridiculous. Also, you can just forward events. How do you think mouseclicks are handled? And the forwarding goes both ways.
Is this a thing now where buttons are supposed to look like they are disabled, but aren't?
ie8+ ha? :)
i see lots in that thread that implicitly addresses your question. It's a discussion about people's thoughts about, and experiences of, various frameworks in various contexts. You can take those and think about how they apply to your specific situation. No-one else knows your situation like you do, so any *direct* suggestions people made might turn out to be unsuitable. But if you read through that thread, you can say to yourself "Well, hmm, people dislike Backbone because of [whatever], but that doesn't really apply in my situation, because [etc]", or "People like AngularJS because [whatever], and that is at least partially relevant to my situation, because [etc]" For example, you say " learning curve needs to be taken into consideration as I am working with some junior devs". Well, here's a quote from one comment in that thread, regarding Backbone: "Learning curve is not steep. It doesn't do everything for you which means there isn't as much documentation to learn. Additionally, you can learn Backbone without Marionette and then, once comfortable, easily convert to Marionette." Which directly speaks to part of your question. But still, when it comes to programming, there's no 'objective' measure of 'ease-of-learning', and "junior devs" aren't all identical. One "junior dev" might have no programming experience outside of what they've learned at uni, whilst another might not have any formal qualifications, but has fixed bugs in several FOSS projects written in several different programming languages over the last couple of years. So a JS framework that one of these devs finds 'obvious' or 'intuitive' might feel unnecessarily complex to the other. Maybe Backbone will indeed be easy for your particular junior devs to learn, but maybe not - you are the person best placed to determine that.
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
Wonder why they do. Is it because all these sorta plugins depend upon it?
Although writing document.getElementById gets old REALLY fast
Amazing!
browser extensions tho I made one for image scraping that grabbed them all and zipped them up just fine. Also javascript is just my language of choice so
Consider using a single obj instead of a bunch of params, the key-value pairs will make it more readable.
 if( value === 1 ) { value = "Ace"; } else if ( value === 11) { value = "Jack"; } Seems weird that you're overwriting your condition value with a string based on the Numerical value. Maybe you should stick them in an array or an object. Also, if you're doing more than a few of these if statements, maybe a switch would be better for you switch(value) { case 1: value = "Ace"; break; case 11: value = "Jack"; break; } Also, your toString calls there arn't doing what you think they're doing. Just assign it to a value like I've done above. And always include {} in your if statements so it's clear where they start and stop. if's can get a bit funny if you forget to include them in some cases. 
Yep. I would like to remove all the bullshit polyfills and go IE9+ though. 
Nice hack! I made a bookmark out of it. Works great! (had to put a 100ms wait in while jQuery loaded but all good) javascript: (function(){var a=document.createElement("script");a.src="//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js",document.getElementsByTagName("head")[0].appendChild(a),setTimeout(function(){$("ul").html($("li").filter(function(){return parseInt($(this).find(".w").text().replace(",",""),10)&gt;100}).sort(function(a,b){return parseInt($(b).find(".w").text().replace(",",""),10)-parseInt($(a).find(".w").text().replace(",",""),10)}))},100)})();
For years, every project started with: var $ = function (id) { return document.getElementById(id); }; var $$ = function (selector) { return Array.prototype.slice.call(document.querySelectorAll(selector)); } If I didn't use React now, I'd probably still be doing that.
can you make it an addon? 
I'm guessing no.
Nope!
Thanks, that's a good point. On the other hand, for a single-page-app, there will not be a successive page load, and so the benefits are nullified there.
Thanks, this is what I was looking for.
Fair question :) Because it clutters the discussion. Now there's a 500px tall post that describes something that's only relevant to the ones in the discussion (about associative arrays), but it's on everyone's screen.
 Number(".25") === Number("0.25") works too
Bower file maybe? It feels so odd to manually download plugins and include them in a project :O
Bootstrap without js and maybe mootools? You're right though. No legitimagmate compitition.
If this is a one-time operation, I'd use a recursive [wget](http://www.gnu.org/software/wget/manual/wget.html#Recursive-Download) to make a local copy of the article pages and then use something like [hxselect](http://www.w3.org/Tools/HTML-XML-utils/man1/hxselect.html) to separate the article text from the HTML files. If this is something I'd need to do regularly, then I'd just make a bash script of the above. In either case, I don't think JavaScript is a practical tool for this job.
That didn't work on firefox, so I took the liberty of improving it a bit: http://jsfiddle.net/zowtmtfv/4/
Not really like plato at all. Plato seems to be doing Complexity analysis - which IS static analysis - but it aims to answer a totally different set of questions. I am thinking more like a library which exposes enough api's that you can write things like plato much easily on top.
And you're posting this here because...?
While I agree with the general sentiment, like with any cool JS feature, you should be aware when better not to use it. For example, if you rely on the scope/this outside of the array, a normal for-loop is going to make your life easier and do the job faster than forEach. Also, you should know when you are going to need shims/fallbacks.
jQuery dependency has been removed now, since so many people were bitching about it. :P
That's a cool trick but I wouldn't recommend any one doing this because of how obscure it looks.
From what I understand, Esprima (http://esprima.org) does most of what you're asking about.
Always remember underscore.js. http://underscorejs.org/ it provides all of this for the browsers that do not support it
every and some are awesome. find and findIndex however are ES 6 and unuseable without a polyfill. They're only supported by Firefox 25+ and Safari 7.1+. (Yes, not even Chrome).
Not really. **Esprima is something that I am going to be using**. Its just a parser which converts your Javascript code to an Abstract Syntax Tree representation. It does not allow you to ask questions about the code base : For example - You cannot ask questions like -&gt; This function foo() here .. show me the places in the other parts of this codebase where it is called from. 
Thanks for the merge /u/t4t5! Hopefully I can work with you to clean up my work a bit.
Underscore has these too, but if you feel like using them directly on the arrays while still supporting older browsers (e.g. IE8), you can use something like es5-shim (https://github.com/es-shims/es5-shim). It's good for other useful functions like bind and trim.
That's pretty funny, but you gotta at least give him credit for rolling his own.
I think it's just a constructive criticism. No one forces you to take it seriously or take it any way you don't like, including to decide not posting any works on this subreddit. I find I learn a lot about details while reading critics. It makes me more observant of my own mistakes. Also this is a discussion forum not a competition, we're all in this together not against each other.
This is a Windows desktop standard for forms. It applies only to certain shapes. Otherwise the rightmost button can be continue.
I hate using functions that are not supported by older browsers, especially when IE8 is one of them. 
You're missing the point, if you're making an app, or a website and do not need, or do not care about old browser support, then there's no reason to use a library for these functions. Just use native JS.
Pure curiosity, fun, maybe there is someone who knows more and come with new information. I really like varia-javascript stuff 
You should also use slice to remove array objects.
This looks awesome, thanks for open sourcing it!
All of the array higher order functions accept a `thisArg` that allows you to pass whatever you want as the context with which to call the iterator... I've never run into a case where scoping made using higher order functions more difficult. In your case it sounds like you just need to pass `this` as the context: someArray.forEach(someIterator, this); When using native for loops you have to deal with throwaway index variables and JS's lack of block scope, which is more likely to give you issues.
I also wrote a [little intro](http://mattdesl.svbtle.com/array-slinging) on map/reduce/etc. It seems like frontend devs are the hardest to convince, since many have strange misconceptions about browser support and performance (e.g. needlessly optimizing for loops for non-critical code). Using Underscore for map/reduce/etc is ok, but IMHO it's cleaner just to stick with native methods and then polyfill them in as needed for old IE.
Uhh.. why? You can write cleaner and smaller codebases and then polyfill them in as needed. 
You can use bind or thisArg to deal with scope. And performance always comes up with these discussions, but most of the time we aren't dealing with hot code. Even if you're operating on hundreds of thousands of entries, you still probably won't see any *measurable* increase in performance by switching to a for loop, simply because it's so unlikely to be a bottleneck in your application. In other words; you shouldn't be designing your code around premature optimization. Write clean and simple code, and *then* benchmark it and optimize if needed. When you start doing this, you'll see that most of the time, even if you're writing games/etc, it is not needed.
 var cards = { 1: "Ace", 11: "Jack" }; return cards[value]; 
If you can use any framework (frontend and back) and learning curve is a consideration (or even if not), I recommend taking a look at [Meteor](https://www.meteor.com/). My reasons for using it are various: * It has a great workflow that lets me work on my *application*, not my *build chain*. I don't have to micromanage build tasks or set up AutoReload or anything. It just automatically gives me file watching with whatever precompilers I need, does autoreload with live CSS injection both for development *and* production (i.e. built-in hot reloads), and has a simple file loading order that can be overridden and customized to your needs by separating your app into packages. - It has a developer friendly API that is largely identical on the client *and* server code. It is very easy to create an isomorphic file that will be completely or partially run on both environments, reducing code repetition. Client code can simulate server code while it is waiting for a response, so that the browser appears to update instantly (latency compensation). * It has a declarative event/helper system that doesn't force me to litter all my output html tags with framework binding attributes. I can use a Handlebars-style syntax or Jade. The templating system works well with jQuery, because templates are updated with a fine grained approach, updating only the necessary parts of elements such as an individual attribute or even individual class name. The Tracker dependency tracking system is ridiculously simple and is easier for me to wrap my head around than promises and the like. * There is simply no easier solution for real-time collaborative apps, which I am working with a lot these days. What would take me a couple weeks to set up with Express takes me minutes with Meteor. * I also use SVG a lot, and Meteor's templating engine has built-in SVG support. So creating interactive, animated vector graphics on websites is incredibly simple and intuitive. * It has a drop-in (but fully customizable), dead simple secure authentication system, with drop-in packages for all the various popular third party OAuth login services. This is something that I just don't like to have to think about. Meteor makes it very easy to create a beautiful, real time login system without having to know a damn thing about SRP.
a lot of good examples! 
That's besides the point. If there is no clear advantage to using it, why add it as a dependency?
I hate **natively** using functions that are not supported by older browsers. This is why libraries like jQuery, Underscore (and its better replacement Lodash) exist.
I've writen large pieces of software in Node.js and excessive use of FP stuff like map/filter/reduce unfortunately leads to a pretty big drop in readability. It's occasionally useful to do things like this, for sure, but coming from a background in Haskell, I wanted to do everything like this and, as it turns out, it's not the best idea. Definitely good to keep in mind, but don't overuse.
Ha you are right. I didn't even notice that.
i had a suspicion that tidesdk was abandoned for paid product, tidekit.
I suppose it is possible the author doesn't actually understand less.js and livereload--and more importantly, it may be useful to others to point this out--but I find it unlikely, and something about the spirit of this gets to me. Sniping each other's blog sources is a bit too much. Colin Toh's [article list](http://colintoh.com/blog) on this platform consists of this article, and one about the [difficulties of finding energy to roll his own blog](http://colintoh.com/blog/why-i-stopped-bloggin), but wanting to move away from Medium. It's nice to think of dev blogs as a sort of portfolio and showcase of skill, but that is judging the carpenter for their house. It might be different if we were criticizing their side projects intended for true public use and distribution, but we're being invited into a workspace to discuss the topics. No need to sneer at the tools cluttered on the workbench.
A sawtooth pattern shows memory allocation, followed by successful dereferencing, which gas been garbage collected. A "growing sawtooth" is another way of saying stairs / steps... [A sawtooth](http://archimedesbooks.files.wordpress.com/2010/06/saw1.jpg) ["steps"](http://support.sas.com/documentation/cdl/en/statug/66859/HTML/default/images/powe2b.png) (still sawtooth like. But not a classic sawtooth. A jagged staircase, sharks teeth etc.. The fact they ascend is the important bit.)
In Chrome, both are behind the "enable experiemental javascript" flag. Most es6 features are, AFAIK.
Right, but that's effectivly the same as not available when someone determines whether to use or not to use a feature. Chrome 38 is planned to bring a lot of features without the flag. For some of those features (e.g. Map and Set) they'll be the last browser, so slowly one can think about using them with a polyfill. (In the most cutting edge environments)
Last month I watch this talks with Brian Lonsdorf and was blown away and make me exited to give FP a shot, [video1](http://www.youtube.com/watch?v=AvgwKjTPMmM), [video2](http://www.youtube.com/watch?v=0wgDGTgOPds), and now I am learning [Elm](http://elm-lang.org/) and [Mercury](https://github.com/Raynos/mercury) and everythings feels like I learning programming for the first time again :D
Stop supporting it, please
[Five minutes of work](http://codepen.io/handyCAPS/pen/pmDCs)
[Ramda](http://ramdajs.com/) is better.
Correct me if I am wrong but, doesn't readability make you more productivity?
Hadn't considered that. This is probably best way. Let's you use the browsers way of handle the DOM.
Oh I don't deny that and if I really want some actionable feedback I wouldn't be opposed to weathering the shitstorm to find the nuggets of helpful criticism. Though I do think a ton of the feedback in developer subreddits can be extremely pedantic rather than constructive and can sometimes give you the wrong idea about your own work, even when by most standards it could be a success. I just don't post things if I already feel good about it and simply want to share my excitement. Sharing excitement never goes over well. Ever.
Have a look at this video to see why this is cool: https://www.youtube.com/watch?v=m3svKOdZijA
Stop supporting older browsers.
Map is great, but remember that it passes 3 arguments to the callback: the current element, the current index, and the whole array. This can cause tricky bugs when you try to map functions like parseInt that take optional 2nd args. So `arr.map(parseInt)` will parse the first element in base 10, but then it will crap out on you because it's trying to parse the second element in base 1, which doesn't work. Then again, you shouldn't use parseInt without explicitly providing a base, because without a base, it parses numbers with leading zeros as octal.
It's SO easy to shim these for older browsers. I can't understand why they're so lightly used. I wrote [two](http://nickbottomley.com/2014/06/25/leveraging-array-prototype/) [posts](http://nickbottomley.com/2014/07/28/choosing-an-iteration-method/) on using these methods to approach a wide variety of use cases.
I knew I couldn't hide this ugly secret for too long.. Will dig around kirby to find out how to exclude for production environment. Thanks!
Thanks /u/Switche for understanding. I blame my laziness and lack of knowledge in Kirby CMS.
I can't even imagine programming without them.
Interesting, like a lower level keenio. 
Cant agree more with this. We need to move forward not muck things up with all kinds of exceptions and bloat to support old browsers. 
I wholly reject the idea that an entire application must be structured to run asynchronously. The idea behind event-driven I/O is a solid one, but the implementation doesn't need to pollute the entire language itself. You can have asynchronous I/O but still build procedural applications using Fibers (node.js). You can block your procedures without blocking the I/O. Unblocking I/O does not mean you have to write event-driven everything.
It's not quite problem in people but in number of people. There are loads of different opinions and viewpoints here and I see those pedantic comments as a progression of comments since the topic started. First there are some obvious remarks, two or three comments tops. After that people get in details just because those three were already asked and there's no point of making more of such comments. So I see it just as a product of the sheer number of redditors and so little nice things to say while there are tons of details to be pedantic on the other side. You shouldn't take it personal even though it can be hurtful at times. After all, this is just one forum where people check links and write comments. Next day everything starts from beginning.
What exactly leads to a drop in readability? I would have thought using functions that are explicit in their use would make it easier to quickly gauge what is going on? If the type of looping I need to do doesn't fit the intended functionality of the Array functions I'll just stick with a standard for loop, but otherwise I find it improves readability.
Overall I like the article. However, the explanation of reduce and the example use case is overly difficult. I think the MDN example (below) gives a much more likely and clearer scenario. var total = [0, 1, 2, 3].reduce(function(a, b) { return a + b; }); // total == 6 
I would if it was my decision.
Yes.
Thanks for the very detailed explanation!! Much appreciated. What kind of web app have you created with it?
If you're just gonna use the native methods you're probably better off using a polyfill because it's smaller and it doesn't require people to learn a new library. Underscore does have a bunch of cool stuff in it that doesn't exist natively so using it might be a good idea anyway. 
Lodash is better. Modular builds (AMD/CJS, cli build by functions/categories) better performance, more features. 
i love the new array methods, especially using them on non array objects, like the result of a call to querySelector, lately i find myself doing stuff like this a lot: Array.prototype.forEach.call(document.querySelector('.myClass'),function(){.....}); i feel stupid for not using the filter method until now, it is awesome, i'm definitely gonna use it a lot from now on. edit:typo
A useful way to "demethodize" array methods so that they can be generically used on a variety of objects (strings, jQuery collections, NodeList/HTMLCollection, etc.): var map = Function.prototype.call.bind( Array.prototype.map ); This can be shortened to var map = Function.call.bind( [].map ); Then you can do things like map(document.querySelectorAll('div'), function(div) { return div.id; // or whatever }); If you're using these a lot it saves a ton of keystrokes. EDIT: Simple implementation of a demethodize function: function demethodize (method) { return Function.call.bind(method); } var map = demethodize([].map); var each = demethodize([].forEach); // etc 
I've found the opposite. The only time it gets close to unreadable is with deeply "composed" function calls. It reads better if you use Underscore or Lodash's chain function to avoid the inversion so one can read left to right, top to bottom. 
Perhaps you aren't aware that Angular comes with its own version of jQuery? You're using jQuery and You don't even know it. And you're getting upvoted for ignorance? WTF /r/javascript? Sometimes this subreddit makes me want to fucking scream.
yeah, i watched that same video too, he also mentions other interesting stuff like never using "this" again. even if i don't use all the stuff he recommends on my projects i always pay a lot of attention to what he says, the guy is the ultimate javascript guru
[Full list of JavaScript Array methods and standards](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)
I've been programming javascript since it was first released in netscape. I saw the rise of jQuery and protested against it - so loudly that j.ressig himself banned me from this subreddit long ago (under a different username). I've been downvoted to oblivion for stating the same obvious thing you are now being upvoted for. WTF /r/javascript? Seriously, you're all a bunch of fucktards, I don't even know why I come here anymore. The sad fact is that jQuery is used on a vast majority of websites now, like it or not. 
Note that those methods are valid ONLY for `Array` object, they are not valid for `HTMLCollection`s, such as those returned by `document.getElementsByTagName()`. Hopefully, with ECMAScript 6 we will have `for … of`, list comprehensions, iterators, generators… And these will work with HTMLCollections too.
You seem like a very angry person. Perhaps you should take a break from the internet? It can't be good for your blood pressure. :(
Sorry I don't think it was as clear as it should've been. I have an html page with some text input-mini, and currently it doesn't work if they input .xx instead of 0.xx. The javascript page uses for example BatchVol = parseFloat($('#BatchVol').val()), Not sure how I would use the above comment in this instance. 
I like that way because it's shorter, but everything else doesn't really apply. []'s prototype is still Array.prototype, its constructor is still Array. If you mess with Array.prototype.filter you mess with [].filter too. Try it.
Nice nice
when argument signature is a problem I like to do something like so (to ensure only the array item gets passed in): var mapOne = function (arr, cb) { return [].map.call(arr, function (item) { return cb(item); } }
It gives you an Array instead of a live NodeList, so you can do things like `$$().map`.
Oh. I read your post as wanting to write the parser and analysis bits as the API, not just the analysis part.
Looks great but why with jQuery, was that hard to made it non-jquery library?
I like the idea of point-free JavaScript. I'm learning Haskell and currying is one of my favorite features.
I doubt you'll find many who disagree with you. I think the crux of the article is that if one wants to take full advantage of the JavaScript ecosystem, one needs to fully understand async programming, and it's tough to dispute that since the ecosystem has so many async libraries.
Try `BatchVol = Number($('#BatchVol').val())` `$('#BatchVol').val()` will give you a string like `".78"`, which can be plugged into `Number` as /u/AverageMarcus said.
You don't deserve this, you need to be more happy and relaxed so... kill your boss as I did with mine :).
If I understand your question correctly, you might be better off doing something like this: myObject.prototype.updateMyObject = function () { this.newData = makeCallToGetData(); } The main reason you'd want to use 'this' within the object is to ensure that if you create a new instance of 'myObject' the function 'updateMyObject' will always update the new instance you've created...rather than updating 'myObject' so: var newObject = new myObject; newObject.updateMyObject(); //data will be assigned to newObject because you used 'this' secondly, if your intention was to use myObject kinda like a class (because classes don't exist in js ;p) that contains related functions and properties, you should assign the returned data to a property of myObject. If not, then it's probably better to just write something like this. myObject = getData(); function getData(){...} Hope this helps.
You don't need to add these function to the prototype. Adding functions to a prototype means every instance of an object that uses that prototype will get those methods. E.g. var Car = function(make, model) { this.make = make; this.model = model; }; Car.prototype.honk = function() { console.log(this.make, this.model); }; var alicesCar = new Car('nissan', 'altima'); var bobsCar = new Car('honda', 'civic'); alicesCar.honk(); // nissan, altima bobsCar.honk(); // honda, civic In your example you can't make an instance of myObject; it's a single object. What you want is: myObject = { data: {}, updateMyObject: function() { .. }, logSomeGoods = function() { .. }, doAnotherThing: function() { .. } }; The call you're going to make to your web server is probably going to be asynchronous, so you'll need to update the data once it finishes: var myObject = { data: {}, updateMyObject: function() { // assuming a library with promise support is being used makeCallToGetData().then(function(newData) { this.data = newData; }.bind(this)); } ... }; Alternatively: var makeAnObject = function() { var data = {}; return { updateMyObject: function() { makeCallToGetData().then(function(newData) { data = newData; }); }, logSomeGoods = function() { .. }, doAnotherThing: function() { .. } }; }; var myObject = makeAnObject();
If you're using it to try and block a user from leaving or switching tabs with an alert, then you are definitely doing it wrong - in the early 00s this was the technique spammy websites were using to try and coerce you into staying on their pages. Now modern browsers actually give the user an option to disable the alerts on a page if they become intrusive. The function of an alert is a message delivery system, and should only be used as such.
Enter a value in that field (ex `.78`) and tell us what the output is if you run this in the console: $('#BatchVol').val() Then run this: Number($('#BatchVol').val())
Waiting for class to start, don't have access to it atm. Might be able to do it between my next two classes (in an hour and a half ish). Otherwise I'll take a look tonight and see what the output is. 
Okay, because if you pass `Number()` or `parseFloat()` a string like `".78"`, it should return a number. Does for me in Chrome, at least.
Thanks. I think I'm getting this. So would it be appropriate to use prototype if I was making a constructor instead of a single object?
in es6 you could : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from Array.from(document.querySelectorAll('.products li')).filter( function(e) { return e.dataset.price &gt; 200; } ); or Array.from(document.querySelectorAll('.products li')).filter(e =&gt; e.dataset.price &gt; 200); 
If you're being really paranoid, create an iframe and grab that iframe's Array :P
JavaScript Allonge calls this method "unary". I recommend Allonge.
Nice - much cleaner than Array.prototype.split.call(mynodelist)
And that's why I said it's not exactly a replacement for alerts
Purescript looks promising as well. 
[lodash is often faster](http://jsperf.com/native-for-loop-vs-array-foreach-and-array-map-vs-lodas) than the native methods. Honestly that rarely matters, but sometimes it does (games for example)
The colloquial understanding of reduce is: takes an array to iterate over, a memoization parameter which is your accumulator that's returned (your singled **reduce**d value) and a function that takes the memo and working item in the original array. Below is an example for sum-ing an array of numbers using those terms: &gt;&gt; a = [1,2,3,4,5] [1, 2, 3, 4, 5] &gt;&gt; a.reduce(function(memo, current){ return memo + current; }, 0) 15 ..it's important to remember the return value of the function is the new value stored in memo, and the returned value of `&lt;array&gt;.reduce(...)` is the last value stored in memo. Consider: &gt;&gt; a.reduce(function(memo, current){ return current; }, 0) 5 ..which is a function that doesn't consider the previous value and simply returns the last value of the array.
Understood. Thanks.
Async await will be in ES7, which will make task.spawn and similar utilities somewhat redundant. I can't wait!
Just confirmed, JS apparently does accept it. The calculator still doesn't accept it though, might be a problem with the html side of it then. &lt;div class="control-group"&gt; &lt;label class="control-label" for="Gabs"&gt;Grain Absorption&lt;/label&gt; &lt;div class="controls"&gt; &lt;input type="text" class="input-mini" id="Gabs" name="Gabs" value="0.08" required&gt; Gallons/Lb &lt;/div&gt; &lt;/div&gt; I inputed .125 into one of the cells variable name "Gabs", opened the console and $('#Gabs').val() = ".125" Moreover, parseFloat($('#Gabs').val()) = "0.125" So now I have NO idea what's going on. 
Pretty sweet, succinct article on dat sexy functional JS 
 someArray.forEach(function() { //... //... //... }, this); Looks fine to me... It is common JavaScript syntax to have a parameter after the callback argument: setTimeout(function() { //... //... //... }, 3000); I just personally don't like dealing with more variables than I have to, and every time I find myself using an index variable I realize there is a reusable higher order function (in native ES or underscore/lodash/lazyjs) that abstracts whatever task I'm doing. All I'm saying is it's a stylistic preference. Both ways can be used to solve the same problems, but one uses a procedural/imperative style (native loops) and one uses a more functional/declarative style (higher order functions).
I think the next version should include "findAllIndexes()", I'm wondering why that hasn't made it in yet.
This is a fantastic write-up. Especially the composable functions at the end with the reducers and predicates are a clearer example of using higher order functions than I've seen in other JS-focused write-ups.
Going to prepend a zero onto the string, but can't get that to work either. Fiddled with it for almost two hours. Grrrr. 
Yes, sound like you're getting it!
Looks quite interesting - very similar to monadic 'do' notation used in functional programming languages. This is pretty much how you consume promises in i.e. Scala or Haskell. I'd be keen to see this modified to support the general case of any monad, not just a few hardcoded cases. Could be a nice addition to Javascript via Sweet.js, and much nicer than the underwhelming 'yield' notation
array.forEach is a clean implementation but far slower than a normal for loop. Stay away from these if you're trying to squeeze performance when iterating large arrays. http://jsperf.com/array-foreach-vs-for-loop/5
is this the same level of paranoia that suggests `var undefined = (function(){})();`?
Yeah, just go ahead and downvote me when you can't get your way. That's really nice of you. Not passive aggressive at all. 
Did you try on stack overflow ?
Are you still talking?
That's because lodash is using a while loop to loop through arrays, and browsers have supported while loops since forever and as so, have optimized them pretty heavily while Array.forEach is also relatively new to the field. Also, as I understand it, Array.forEach is doing alot more under the hood then a while, or for loop is. all that being said, unless you need micro-second response times for your web app, you can get away with using Array.forEach
I'm working on a visualization, but I fail basic math; ~~but maybe this visualization will help you out ;)~~ [so let's try that again](http://gfycat.com/JollyRepulsiveAmericanblackvulture) ;)
All the code is available at https://github.com/pricelessbrewing/Pricelessbrewing.github.io In particular I'm working on the index.html and the PricelessCalc-Imperial.js Should I perhaps post this in html instead? as I think that might be the problem instead as from as far as I can tell the js values seem to be functional. 
wow /u/agdcoa, I'm going to update the article with this. Any idea why after demethodizing, the map function can see objects such as strings as array?
Are you still trolling?
Thank YOU good sir for your contributions! :)
This is my first publicly shared project and I just knocked it together this evening. I just follow a lot of youtubers who make multiple series and I only want to follow one of their series, or only their one-offs, or want to see all-but one of their series, but YouTube doesn't offer this level of feed filtering (heck even the 'Hide These Videos' link that should be called 'Hide This Video' is only sporadically available) so I decided to make something to reduce the clutter myself.
Closure compiler does not only compile js into js, it obvioously calculates a call graph (does tons of static analysis) and even allow conformence phases. Added to which you can easily write your own compiler plugin (really very trivial) to output a call graph if you want. I realise you might not want a depedeny on the jvm, but that is where I would start. 
I had a quick look and it looks like its the form validating bit of your code. Right now its using a regex that looks like this /^\d+(\.\d+)?/ which is saying at least one digit followed by a dot followed by at least one digit. try changing it to /^\d*(\.\d+)?/ which is saying 0 or more digits followed by a dot followed by at least one digit. I suck at regex but that should work. 
It's meant to be a divulgative article, so I'm really happy you find it clear and accessible. If you have any suggestion to improve its "readability" I'll be pleased to update the article.
Thanks a lot! We're on it, will let you know the progress we make!
We've been working on it a bit, this is the current result: http://jsfiddle.net/cwkq4753/5/ Now when you deselect a checkbox it goes to 'select geen x' which means 'dont select x', this is what we want. However, if the checkbox is deselected, you can still change the dropdowns afterwards. We're trying to figure out a way to disable the dropdowns after it got deselected, like in the example shown before: http://gamingdutchman.nl/test/index.html
As a side note, the upcoming JavaScript standard (es6) does in fact include tail call optimization, although no browsers have implemented this at the moment. 
here's a good starting point http://mean.io/#!/ MEAN is a collection of widely used technolgies that are reasonably easy to get your head around. Try a few of the tutorials. One thing that is important to make note of is which library is doing what. e.g. which parts of the stack is angular taking care of? what is express doing? That way if you need to use them independently you will know which tool to use.
/agrees with what everyone else has said Just an interesting trick I like to use with prototypes and all for future reference: var Player = (function(){ var $Player = function(name, stats){ this.stats = stats; this.name = name; this.hp = stats.hp; }; $Player.prototype.attack = function(enemy){ enemy.hp -= this.stats.attack; output(this.name + " attacked " + enemy.name); } $Player.prototype.incMaxHp = function(plusHp){ this.stats.hp += plusHp; output(this.name + "'s max hp increased by " + plusHp); } return $Player; })(); just a random example, but I find it much more convenient to make them self-containing.
Why do you feel it's relevant to mention you're a woman before asking for advice? 
www.meanjs.org is the better choice. Created by a couple of guys who broke off from the mean.io project due to their discontent for the direction of the project. They took everything they loved about mean.io and improved upon the things they didnt like. The difference was definitely noticeable to me.
If you want to be full stack with just JS you'll need to start learning Node.js also!
try this tutorial: http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/ it's beginner friendly and will introduce you to nodejs, express, and mongodb - popular back-end technologies. the follow up tutorial discusses "REST" which is an essential concept to grasp as a full stack developer. I highly recommend doing both tutorials. link to the follow up: http://cwbuecheler.com/web/tutorials/2014/restful-web-app-node-express-mongodb/
I came here to post this. Please OP start here. 
Reddit's *+1* function is to actually just upvote something.
The benefit of using lodash is actually the method chaining. With the es6 lambda syntax it makes things highly concise. 
piggybacking, but this got me curious what people think about the articles i wrote for a HOF JS library of mine: * https://github.com/roman-neuhauser/zeta/blob/master/docs/examples-ref-minmax.rest * https://github.com/roman-neuhauser/zeta/blob/master/docs/examples-ref-unique.rest * https://github.com/roman-neuhauser/zeta/blob/master/docs/examples-ref-composex.rest 
&gt; Function calls, however, work on what is referred to as the "call stack", much as in most languages. ...most of the time that is. The times when that is not the case are when closures are involved. For example: function sayHi(name) { var msg = "Hi " + name; console.log(msg); } Here 'msg' can simply be placed on the stack like normal. But consider: function makeSayHi(name) { var msg = "Hi " + name; return function() { console.log(msg); } } In this case 'msg' will be placed on the heap. It needs to survive after function makeSayHi() has returned because the function/closure defined with in needs it and will live longer than the function which created it. 
I'm so excited for ES6 you have no idea.
I also second this. Start by learn javascript propertly. Then doing some basic NodeJs would be a good next step. Create a basic webservice, send some request from the client, consume the request and try to understand what is happening. What did I send, what did I recive at the server and what did I respond. 
Maybe because it actually conveys some human element of the person sitting behind the keyboard to the other person sitting behind the keyboard. It says more about you that you came *only* to point that out and not actually offer any advice than it does about her, who is asking a genuine question in a relevant sub.
I actually think your gender should be left out of the question it really makes no difference whether you're a [CIS/TRANS]-[MALE/FEMALE]. 
Why do you feel the need to comment on it? How about you just answer her very simple question. She's just trying to give a bit of context probably and you latching onto that.
As mentioned by others, the easiest path for you is to go with Node.js and a non relational document store like Mongo, Couchbase, or Elastic Search. Good luck!
I recommend: http://nodeschool.io/ It's a great resource for actually learning node or well getting started in node.js. It introduces you to the module system and how node works at a deeper level. I would recommend going through it probably before you do /u/pablq_ links. But after /u/Jim-Y link. Once you understand how the backend works in node, you can start learning all the various frameworks out there but I tend to favor the MEAN stack as a few others have mentioned here. 
No it just comes off as "oh my god, look at me, I'm a girl". If someone posted: "I am a boy (ok a man) who wants to become a JS developer" you'd be like wtf 
Agreed, also I doubt you'd see this reaction to "I'm a guy who wants to learn ...". Both the OP's mention and virgol's comment are totally off topic, and strangely it's the most upvoted on thread.
Third this! You should focus on becoming a competent developer in the language of JavaScript. Everything else is written in it (obviously) and having the base of understanding will make it easier to pick up the Node frameworks mentioned as well as any front-end focused MV* frameworks. Another good (and free!) resource to start with is [Eloquent JS](http://eloquentjavascript.net/?utm_source=javascriptweekly&amp;utm_medium=email). Once you understand the basics, [this](https://github.com/sindresorhus/awesome-nodejs?utm_source=nodeweekly&amp;utm_medium=email#mad-science) is a pretty comprehensive list of libraries and resources for Nodeland. You don't have to learn them all, but at least understand what they generally do and make note of what's out there. For browserland, I would suggest digging into at least one of the big frameworks (Angular, Ember, Backbone, etc.). [This](https://frontendmasters.com/courses/javascript-frameworks-showdown/) course gives a pretty good rundown of them all, building a to-do list in each so you can get a feel for them. It's not free but paying for one month at the site I think is worth it since there are a ton of other good videos. 
Thanks everyone. A lot being said about node. Any ideas on middle ware and frameworks? To those pointing out the mention of my gender as others pointed out its just providing context about the person behind the screen sheeeeshh relax!
Meteor is woman friendly, just joking xD but Meteor is what I'm trying to learn, I'm a boy (man). www.meteor.com
You're shattering his illusion that not all programmers are men. 
Perfect. You're the best. 
&gt; "oh my god, look at me, I'm a girl" wtf 
Reinforcing the notion that some people expect special treatment or recognition based on their gender alone.
Ignore them. I start all my posts with "I'm a man," as a way to get respect. I'm sure it's the same kinda thing. :p
Roadmap is simple. - Come up with a fun idea - Figure out what you need to learn to build it - Build it - Figure what you did wrong - Repeat
As you already know some JS I'd recommend learning about modules and using tools like Gulp and Browserify. There should be a nice crossover there with your node.js learnings. Also build some confidence coding some small JS-heavy apps without relying on frameworks before diving in to that world.
Mighty presumptuous of you there. I don't see where she was expecting any special treatment. She was just looking for some advice. Chill.
/u/THEtheChad you are awesome! Any resources I can read up for demethodizing in detail?
&gt;I doubt you'd see this reaction to "I'm a guy who wants to learn ...". That's just the point! If that was the phrase no one would be jumping on the OP for including their gender in their post. But for some reason because that gender was female everyone feels ok to confront her about it. I really feel weird about this community right now. You can't look at this and say that it's an isolated thought. It's clearly an opinion that runs deep here.
There's no presumption required. When a girl (okay woman) announces her gender before even asking her question, there's an intent. I hope her career in development is defined by more than her inherent biology.
Also check out meanjs.org for powerful tools to use with these technologies. AngularJS is your friend.
Why do you feel it's relevant to jump on her about it? A post beginning "I'm a guy who..." would be passed over in silence. Are you going to provide help and tips or not? Is it because you feel threatened by women moving into the tech field where historically men have been privileged and advantaged over equally-qualified women? I can tell you without a doubt, **yes**, this is a component of your thinking. I have, in my career and education, online and in real life, had way too much experience in this industry to pretend that what's happening here, isn't what's happening here. Kindly re-evaluate your thoughts and attitudes towards women in the industry, and ask yourself why you feel it's relevant to her question to ask her why she introduced herself as who she is.
Spent $25 and go through code schools courses in a month. They're pretty informing. Also, build a basic node blog site in express, sails, and any other framework you find interesting or popular. Try to build a basic blog site without using a framework. Write about the pros and cons of each. Build an npm module that does something and publish it to the registry. Get familiar with grunt and gulp. Get familiar with bower. Get familiar with yeoman. Spending a good month or four on those tasks (depending on your overall programming/cs proficiency) should get you enough working knowledge and demos to advertise your skills as an entry level node dev and maybe a few clients.
Thanks! 
Slick and Sleek, much nicer looking that lightbox imo
Why the hell is gender relevant ever...? Just ask your damn question and leave the gender topic alone so you don't get these pointless arguments. If a guy said "I'm a guy and I want to learn x.." I would question him too.. it's irrelevant information no matter the gender; and regardless of whether someone thinks there was intent behind it. 
whoa relax!
Yes I agree with you, I already said it's irrelevant and it annoys me. What annoys me more is that people are upvoting this entire thread derail instead of the actual content. Comments like this can be resolved by PMing?
i answered my own question, i was playing around with objects on w3school. thanks anyway
I've worked for a lot of different shops, agencies, and corporations of varying size. In my years of experience being involved in the hiring process of developers, those decisions have never once been based on anything besides skill and experience. Living in an imaginary world where you believe gender matters as much as you apparently think it does is how we end up with "I'm a girl and here's my question." Your assumptions are the problem.
Maybe to stop you from asking "hey *dude*, why is your name 'yo-inderalla'?"
Presumptious to assume that everyone has the same experiences work/home/etc. Maybe in your experience my statement is reinforcing some kind of gender bias. Like I said the statament is just about the person behind the screen. 
Introducing myself, my choice.
Could be cool but I couldn't get past how terrible that website is.
I tried playing the game (http://54.77.31.219/), but I just get this whenever I click something (Chrome 38): http://i.imgur.com/7Y8ZvmT.png And I can't log in (just get a white page).
I'm sorry you're having a bad day.
I never assumed everyone has had the same experiences, I'm not sure what you mean by that. Your personal story isn't relevant when asking for development advice, and if you're upset that it's being discussed you should remember who brought it up.
This is because of a server check error and you are not registered. Can be because the api times out because of having too many players. The game is too resource intensive for the server :/
Enjoy your vitriol crackers :)
Right. Exactly. I can introduce myself as a blue eyed humanoid if I so choose also.. but unless I'm introducing myself to a member of the blue man group it's still irrelevant.
I see you had valuable info on the actual topic, everything else is just pushing your agenda onto me.
I haven't looked at the details, but going by the demonstration on the site I think I'd like it to close the lightbox if I click on the original picture or on anything that isn't associated with a different strip. 
Sounds like a plan kind of what I needed thanks 
&gt; plus I learned about sets and some mathy stuff! this is what makes me really happy, thanks!
I'll keep that in mind for an option, thanks.
yep, and if a web layout website has a terrible website itself it pretty much puts me off the product itself.
Me too. I clicked away from the "strip" and was like "oh..".
And escape to close as well please.
I realize I forgot to mention the tools to actually *do* all this: - Understand terminals and the console / command line / shell: first word is the command name (by filename or looked up in the PATH variable), further arguments separated by spaces, enter to run a command, CTRL+C to stop it, up-arrow history, tab completion, basic stuff like that. As a web developer it's possible you're not familiar with this- I don't really know a good place to explain it, but it's pretty straightforward. - Know Git. The book Pro Git is a pretty good reference to learn it, and it's available as part of the official Git website. - Have a GitHub account. Being a developer without a GitHub account is kind of like being a filmmaker without a YouTube account. - Get an environment with Git and Node.JS. I recommend https://c9.io -it's pretty much the only thing I use. It's a web-based IDE that gives you both file-tree/editor and console access to a virtual Linux machine it creates for your project. - Get a free account on Heroku to deploy your apps to. Here's how I do projects on Cloud9: - Create a repo for the project on GitHub, initialized with a README, the .gitignore for Node, and the MIT license. - Run these commands: npm init npm install --save express jade envigor &lt;etc for other modules...&gt; heroku apps:create &lt;name goes here&gt; # if you omit the name you'll get a random # app name like boiling-lake-1632 git add package.json # ... code code code, save save save ... git add &lt;your app files...&gt; git commit -am 'Initial content' # publish to GitHub git push # deploy app to Heroku git push heroku master Anyway, I've got a shitton of notes on all this stuff that's involved in doing web apps, you can check them out and shoot me any feedback where things are missing or unclear: https://trello.com/b/fg95RUZH/overview-start-here The specific board that covers tools like this (not npm though): https://trello.com/b/2E3wJeUH/development-workspace
I never found a better explanation of the event loop than that video. It's pretty good.
There aren't enough women in the STEM fields, and being professional doesn't mean you can't acknowledge your gender - that is just utterly ridiculous. If you stop being "professional" because you happen mention which sex you belong to through a medium which anonomises as a default male, then there is something wrong with the definition of professional and not you. If I were you, I would see anyone that tries to bring you down because of that as a filtering system. You don't need those people, and you can just assume they're an idiot.
Very cool, but as others said: Escape would be great, and clicking outside the gallery should close it. Edit: Left+Right arrows are not working on: Chrome 38.0.2125.77 beta
https://github.com/WolframHempel/goldenlayout edit: I just realized that's actually the repo for the site (and not the lib); but, it also has the [source for the lib](https://github.com/WolframHempel/goldenlayout/tree/master/files) as well.
This here is your answer. People can recommend resources and books, videos and courses until they're blue in the face. Some will work for you, and others will not. It's the act of building something, I personally believe (of course this is just one opinion), you will gain the most from. The step by step process of coming up with an idea, researching approaches and methods to execute your implementation and then the build itself. It doesn't have to be a huge undertaking, nor anything beautiful. Just enough to challenge you that little more to get you thinking and scratching your head. When you've finished, that's the time to read up and review. You'll look back to even just the start of project with a new understanding and will think "wow, I wouldn't have done it that way!" What ever path suits you best ultimately. I wish you the very best of luck. 
I do see a few usability issues here. The one you can most easily correct is that it's not keyboard navigable. Left/right arrow keys and escape can be supported with just a few lines of code. The other issue is that the left arrow is always moving if the images are of different widths so it's incredibly frustrating to go back to an image a few images ago. Technically that also applies to the close button, but it's less of an issue since it's not a task that would be repeated. One option you might want to consider is adding small arrows for navigation at the bottom the screen in a fixed location. It will admittedly not look quite as clean/sleek as a result, but I think the improvement in usability might be worth the tradeoff with this particular design. The other thing (that others have mentioned) is that clicking outside of it should probably close it. I've written a js lightbox replacement in the past as well, so I know it's a bit tricky to deal with content of various aspect ratios and sizes well. Good luck with the project!
I don't like to take design inspiration from Tumblr.
[I think I might have broken something...](http://imgur.com/7KEirpa)
I am not pushing anything... what are you talking about? I'm not saying you were wrong... say what you want. Anyone can say what they want.. But male or female is irrelevant to learning how to code. Do you disagree? If so.. then we're disagreeing. If not.. we're not.
Absolutely, if you click anywhere that isn't the 'big image', it should close the lightbox. Apart from that UX issue, it's really nice. Good job :)
This site gives me very confused feelings, it's some sort of blend of web design elements from between 1998 and 2003, but then there's some 2009+ design elements mixed in. So weird. 
If I was you, I would sign up for assembly.com and join the various product teams, contributing everything I could while learning to do more. I'm @alhenaworks there and would happily mentor you, we need more women startup hackers there.
I guess my first message may have come off a little attackish but I apologize, I didn't intend it that way. My point is that there is a bunch of unneeded drama in here and no matter which way you look at it.. it's pointless. You're a girl, cool. Now we know more about you. Now the male chauvinists can come out and assume you said that with intent. Now the feminist militants can attack them. Then someone can come in and try to bring some logic to the conversation and get attacked too. We can have a war, yay. Screw all of that. Let's learn to code.
About [Memory management](https://www.youtube.com/watch?v=LaxbdIyBkL0). Have you read [Effective Javascript](http://effectivejs.com/) by Dave Herman or [SpeakingJS](http://speakingjs.com/) by Axel Rauschmayer? Those are the most complete in advanced topics afaik.
angular (front-end) + node.js (back-end) = full stack js. Master those and you will be unstoppable.
This has the feels of one of those fake "desktop environments" made in flash around 2004-2008... It might be a good library, but it needs a good demo to convince people.
Captain's log - October 2014 - "People are still hyped about lightboxes." ps: I would sell it on [codecanyon.net](http://codecanyon.net/)
Really? 99.00£ per domain for this?
Most of those aren't Javascript features, they're actually browser/VM features that either implement JS, or expose an API to it in some form. I'll try to clarify as best I can, and anyone please correct if needed. But first I'd like to suggest [How Browsers Work](http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/) ([video](http://vimeo.com/44182484)), which I think is a tremendous resource. It's not an exhaustive source, but it does a very good job of covering just about everything a browser does. They also include ample references to their sources for further reading. One thing I think that article is missing though, is a mention of [JS engines](http://en.wikipedia.org/wiki/List_of_ECMAScript_engines); while it does mention rendering engines (Trident, webkit, etc.), it should probably also say the same about the JS runtimes. Anyways, now you know about them at least. In a nutshell, the w3c creates the [HTML](http://www.w3.org/TR/html5/) (and some [web API](http://www.w3.org/TR/html5/webappapis.html)) standards, which the browsers implement as rendering engines (or interfaces if an API), whereas ECMA creates the [standards for JS](http://es5.github.io/), which in turn govern how the JS engines behave. I'm explaining all of this because it took me awhile to realize how it all fits together; basically, for these various components (JS engine, rendering engine, API's, etc.), the vendors -- like Chrome, FF, IE -- take the standards as a spec and create their browser. It's very similar to giving a programming assignment to a handful of different devs: they're all going to create roughly the same thing, but using possibly very different approaches. Some will be better than others, and some buggier than others. This is why I sometimes say there's actually very few, if any, true "javascript bugs"; rather, they're browser/vm bugs....either in that browser's JS engine, rendering engine, or whatever, but the standards themselves are not the source of bugs, though ambiguous standards can be problematic. More details on your questions: &gt; * "Memory" management This is an implementation detail left to each JS engine. JS itself has little to do with this, other than formal rules for things like object lifetimes (as it pertains to closures, etc.). &gt; * Event loop, message queue A message queue is a feature of an event loop, and I believe the event loops are an [HTML5 spec](http://www.w3.org/TR/html5/webappapis.html#event-loops), so each rendering engine will have a similarly-behaving yet different implementation. This [SO answer](http://stackoverflow.com/a/20154568/84473) has some good information as well. &gt; * Web APIs Not entirely clear which you may be referring to; do you mean, web API's in general, or the ones [formally defined](http://www.w3.org/TR/html5/webappapis.html)? Also, each browser can implement their own _web API's_ as they see fit, one example being [WebGL](https://www.khronos.org/webgl/) (which is not a w3c nor an ECMA standard). Another would be `ActiveX`, which only MS chose to implement. &gt; * How the browser interprets the JS code This is directly related both to the ECMA standard, and the particular engine you're concerned with (see previous links regarding JS engines above); the standard is the theory, and the engine is the practice. &gt; * CPU/GPU related stuff See info regarding WebGL above. Not sure about CPU related stuff, other than the fact that any interaction with the CPU is going to be implementation-specific for each vendor.
Yeah, there's no sexism in the tech industry and hiring, promotions, investment, etc... are done entirely on merit, of course... I think you're the one living in an imaginary world where gender *doesn't* matter as much as it *actual does* - but of course, this isn't surprising given the fact that you are a male tech-field redditor. The odds are *extremely high* given these groups of belonging that you would have non-constructive responses - arrogant and ignorant in equal measure - to challenges put to you on this question. I'm done responding to you now, since it's clear you not only aren't interested in reevaluating your prejudices and naive assumptions, but you are completely unwilling to even hear the point of view of women and allies in the industry. Goodbye.
No event loop in javascript? (See referenced video from op or myriad of other canonical javascript references on the subject that a Google search will turn up). Also, javascript is single threaded and allows asynchronous operations...
The script isn't released under GPL. It has licenses for commercial use and may only be used under GPL for non-commercial use, see http://stripjs.com/license
I really appreciated the "Exercises" section Howard added; here's my solutions as a gist: https://gist.github.com/davemo/cb6ce0344371f1a122d7 I'd be interested to see other peoples solutions as well, feel free to fork :)
This should be top comment already. This is the absolute best way to learn and really internalize those lessons.
How many people actually navigate with their keyboard? When I see a site that is focused on keyboard navigation, everyone bitches about it. When I see a site that is focused on touch or mouse, people bitch about keyboard navigation.
Usually when you get a new job - everyone assume that you know what you're doing - and you are given a meaningful task in a real project. Of course you have no idea what to do at first - and then - after a week you totally feel like a part of this project and have learned so many things that you consider yourself from week ago a lame apprentice. The point is - imagine some project that you would like to do - and start doing it instead of fighting imaginary problems with theoretical approaches.
I can see Apple quickly changing their mind the first time a developer misuses this, so I would be very hesitant on relying on this.
This isn't anything new. They've allowed javascript to run via a webkit widget for at least a year now. Great for phonegap/cordova and friends.
&gt;How many people actually navigate with their keyboard? A lot. Especially for things like slideshows. &gt;When I see a site that is focused on keyboard navigation, everyone bitches about it. When I see a site that is focused on touch or mouse, people bitch about keyboard navigation. There's no reason why a site can't support both. I can't think of any sites which don't support touch/mouse except for those which simulate terminals.
We have to make it to where we click the text for it to change color and not a button, it also has to change the background color of the next paragraph following this heading. Though I need the button later on so thats helpful :) any help with this first problem would be awesome!
OP really has trouble with the word "variables"... other than that, really good information!
I've added keyboard navigation in 1.0.1, clicking outside and pressing escape will now also close Strip as you'd expect. Thanks for the feedback everyone, appreciate it!
If you like set theory or would like to learn about it more through programming, check out Seth.js (https://github.com/andrejewski/seth). It uses functions just like the article goes about it, adding common set operations to the mix too.
jQuery.... &lt;h1 id='myh1'&gt;Title here&lt;/h1&gt; &lt;script...&gt; $('#myh1').on('click', function(evt){ evt.preventDefault(); $(this).css('color', '#000000'); }); Javascript in your html is bad. Name the element, wire it up in a script element. Much cleaner that way.
That's not really what I was saying. Sorry if I offended you.
I wish the formatting of the examples were better, so much spaces and the curly's arent lined up!
Thanks, I like the idea of static navigation, especially for a back button. I might add that if I figure out a way to make it look nice. For now I've made it so you can keep pressing next to cycle through.
You can use `window.event.target` inside the handler function to reference the `onclick` target.
Dont inline your event hander into the element like that. It's nearly universally scorned and will get you run the fuck out of buildings where web developers congregate.
I'm a black man who enjoys statically typed functional languages like Haskell.
 &lt;h1 onclick="this.style.color='red'"&gt;Title Here&lt;/h1&gt; Go ahead and deride me for not creating a separate script and five functions. Also I changed the color to red because #000000 is black which is the default when loaded. Do with this what you will.
I'm a full blown FP fanatic after seeing how simple clean and elegant codebases become when you minimize side effects and express everything as successive transformations of data. I love the feeling of 'flow' and motion of data as a unidirectional stream through pipes of map/reduce/filter/etc operations, contrasted with the uneasy feeling I get with little object instances scattered all over the place, mutating each other in non-obvious ways, leading to subtle bugs everywhere I could see how users of other FP languages become so radicalized; the mindset you get from learning FP makes a lot of shit rediculously easy, and it becomes frustrating to see OO proponents having to come up with gigantic books of patterns to fix problems that simply shouldn't exist
yet another lightbox no complaints about this one though
&gt; is now Promises/A+ conformant. Curious, had it previously returned non-conforming promises?
I loved it, haha.
That's not how the GPL works. Go read it. You could just charge for the GPL licence, you know.
Try this: http://jsfiddle.net/cao7f105/9/
Hi OP here. Will take note of that! And thanks!
I joined programming from a mathematical/stats background. FP just makes so much sense to me. OOP on the other hand feels alien at times. It only makes sense using it when dealing with lots of repetitive instances. And even then I'm still wary of using it. 
I would have to agree with most here that it's like most things in life.. practice, practice, practice. Having said that, I would recommend you look into version control/git as that is essential. Definitely get into that. It's usefulness will become immediately apparent as you use it on personal projects. you say you know a bit of JS, but want to become full stack js. Maybe take things one step at a time and get to know more than a bit of JS.. for example start learning/working with various Design Patterns, Closures, NameSpacing, Best Practices, Inheritance, ect. Knowing these things will help in the long run of understanding the underlying language and in job interviews; showing that you can actually talk about the language. Even if you don't know the nitty gritty of each, you'll be able to explain the concepts and why they are useful. 
Downvoters are JS hipsters that live near Dolores
/u/agdcoa and /u/THEtheChad updated the article with the demethodizer section. credits to you guys! 
looks like row is column and column is row in the example section of the site. 
what?! somebody actually went to w3school and learned the correct way of doing something?! Show the code, i'm curious now...
Higher Order Functions, i thought that would be obvious given the context (and the submission title in particular).
Here's a [link](http://np.reddit.com/r/node/comments/2i6f40/franc_detect_168_natural_languages/) to the referenced post.
Awesome! Thank you very much! From looking at what you did it is alot more simple that I was trying to make it. You are awesome!
Perfect thank you! You both did exactly what I was trying to do. Thank you very much!
That's actually really nice. Thanks for posting!
[No](http://shouldiuseacarousel.com)
You forgot to actually add in the difference, so the code you present does nothing. (Well, at least given that we're working within the ASCII range.) Also, consider what happens when the difference is a number like 981 or -12309. Finally, given that you're working on plain text it might be nicer to limit the range from 32 to 126 so you don't get control characters in the output.
Ceaser *cypher* You would never use this to encrypt anything.
Please no. If you plow ahead anyway please have a prominent "ok, please stop this idiotic thing" button.
You can't please everybody. I actually didn't mind the spaces at all. Gave me time to process.
Still accurate. Since you never need a carousel, this is the *last* one you'd *ever* need!
[Are carousels effective?](http://ux.stackexchange.com/questions/10312/are-carousels-effective)
Ah but of course, *facepalm* Changing this : ElectricCar = function(arr, capacity) { // Here it's not working, this is wrong! Car.apply(this, arr, capacity); }; to this : ElectricCar = function(arr, capacity) { // yay, it's working :-) var passArray = [arr, capacity]; Car.apply(this, passArray); }; Thank you :-)
Anyone know where I can find the penultimate carousel? I'm not quite ready to commit to the last carousel at this time.
Ok, I have this site for an animation and illustration studio. They'd like to show their portafolio. You say that an image slider for the samples in their albums is not a good interface? 
Sorry, english isn't my native language. Where can I edit the title? :3
`apply` sends an array to the function. If you are passing parameters directly you should use `Blah.call(this, arg1, arg2)`. Also your inherits looks a little funky. Most commonly: child.prototype = Object.create(parent.prototype) child.prototype.constructor = child You should also never use `new Number()`, or String or Boolean etc. Just use the primitive type literals instead, e.g. `0` or `""`. I guess this is just an exercise for you, but you don't really gain much by trying to do all this OOP stuff. And [using options](https://gcanti.github.io/2014/09/25/six-reasons-to-define-constructors-with-only-one-argument.html) will clean up your constructors a lot. Example: https://gist.github.com/mattdesl/7ffebe03e36378f3c367
Fixed it :) I finished the code after putting on Reddit. I really suck at some things lol
And, I don't mind the control characters.
Thanks for the feedback. Yeah it is just an exercise. But I don't see why not bring OO concepts into writing JS... ? And what's wrong with declaring new Number() ? It's just a wrapper to be set later...?
Very subversive.... Onu request: move quotes from atop the ice cream button. Consider implementing trustafarian white dude hustling rum coconuts from the back of his maroon 86 ford Aerostar. That is all.
JS is a prototypical language, so you can leverage prototypes and mixins instead of trying to shove a "square peg in a round hole" with OO. But in this case, and in many cases you will run into, you don't actually gain much (except extra code complexity) by using OO, so why bother? As for `new Number/String/etc`, it will break `typeof` which a lot of libraries use. Instead you should use literals or convert like so: var n = Number(foo) //converts to primitive number type var s = String(s) //converts to primitive string type
I'd say it might be mildly effective. Lazy loading might be better. This is a perfect use case for A/B testing.
Carousel - not going to use it Requires jQuery - definitely not going to use it Works on Windows phone - at least there's that.
Simply changing `apply` to `call` would have a been suitable solution too.
 ElectricCar = function(arr, capacity) { // you can also do this to make it shorter :-)! Car.apply(this, [arr, capacity]); };
A grid of images is better. You can scan through them quickly, you don't get distracted from other content by the movement and people will notice more than just the first image.
Tested a simple french phrase, it didnt work. Said lithuanian
Looks pretty good, I'd add cursor:pointer to the clickable things to make sure that people get that they are clickable.
This is really cool! I didn't figure out that using the mouse did stuff for a long time, but when I did it was awesome! Is it just a web experiment or a web based music video?
Pretty cool but two things off the bat: 1) Double clicking to show/hide the source is not intuitive - just show the source on load. Keep the show/hide on panel resize though. 2) The collapse arrows were a bit weird - they should be pointing right for collapsed and pointing down for expanded. Currently you have pointing up for collapsed and pointing right for expanded. I haven't tested it with real data but could see myself using this in the future.
This is really cool, but it feels like the language detection response should be async (since it could take a while for long texts), so how about using the $q promise?
Seems like a decent idea, surprised it doesn't already exist. Some thoughts: * You might want to place any expandable keys at the bottom of that level, would help readability. * There's no need for the tutorial on the side to be there all the time taking up screen space. * Also, small bug: the expand/contract arrows are rendering weirdly on chrome 37. Seems like an aliasing issue. Theyre also not particularly intuitive as expand/contract icons imo.
Yes, the call stack remains the same in both scenarios. In the implementation of many languages (especially compiled ones), the same stack in memory is used to track the call stack, *and* it is used for quick allocation of the local variables used during the execution of the functions. When closures are in play the call stack part remains the same but the local variables have to go to the heap. 
Didn't work for any english phrases I entered either.
cool! I agree with some of the other feedback, but nice work
There are a tonne of these things knocking around. Somebody seems to have reviewed a few of them here: http://www.w3resource.com/JSON/online-JSON-viewer.php I agree with AngryDolphinGuy's comments. Yours looks pretty enough, but I wouldn't be convinced to use it over other options as of yet. One thing that only some of them do, and I've had need of before, is displaying the indices of array elements. 
Good stuff! I do think that it should close the box if you click again on the original picture. Currently clicking on the original picture seems to actually break the "click outside to close" functionality, so that's probably a bug
You can also do this: ElectricCar = function() { Car.apply(this, arguments); };
It definitely could have mentioned the mouse. The mouse doesn't so anything when you first start so I gave up on it. Who made the site? There doesn't seem to be anything about the site itself, just the source of the assets. 
None at all, it used callbacks.
No worries. Unfortunately i dont think you can edit a title in reddit. 
Interesting idea. However, using a promise doesn’t make it run faster. Franc would still take the same amount of total time to complete (or longer if multiple ticks are used, although you’d be able to do other things while waiting). Right?
Franc is really good at longer passages of text. It’s a trade-off I made. If you’re sure only a hand-full of languages are used, it’d be possible to get better results with either a fork or another project. If you have no clue what language is used, franc is there to make the best decision.
Right. Not blocking the process simply allows you to use it better (IMO).
The movement you are implying is the carousel on auto play? or just to have the items moving page to page?
Or even shorter! ElectricCar = function(arr, capacity) { // you can also do this to make it shorter :-)! Car.call(this, arr, capacity); };
https://reddit.com/r/loljs
I can't replicate that. Which browser/version are you using?
Great website, very minimal. 
The inconsistencies between implementations.
Be mindful that this solution uses a for... in loop (line 10) over an array, which is a bad practice in JavaScript: http://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea Short answer: for...in *enumerates properties* of an object, the standard for should *iterate over a range* . It may not be a problem in other languages (in fact, the reverse is true in Objective-C) but it can bite you if you're not careful in JS.
I think this is simply misunderstanding of intent. Sure you can embed a webkit view in your app and have that view pull some javascript/whatever from a remote source, but it is not intended to be the entire function of the app. What happens if the user isn't connected to the internet? What happens if your web server crashes? The purpose of this exception is to allow for a webkit view to access internet content, not provide a full app experience.
Is there something very unpleasant about jQuery that I should be aware of?
this.
Looks great. One thing that is missing is a "tidy" or "pretty" button that will pretty the source json text.
Removed, please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I will add new content.
The inability to use most new features in production code until several years after they're released... I can't even use ES6 stuff in node in a project because a client refuses to use the v0.11x branch of node (fair enough, it's officially an "unstable" branch, but where the hell is 0.12???).
No block scope
&gt; I'm faced with an "undefined" problem Step #1: define your problem ---- Actual answer is to re-structure your code to assign stages after object creation. Something like this: var beginning = new place( ... ); var spaceship = new place( ... ); beginning.setStages( spaceship, dead ); spaceship.setStages( beginning, dead ); or... your last example should work fine, you just need to change how you reference the stages: stages[ this.stage1 ]; // should yield spaceship object from beginning object
Check this out: http://tech.pro/blog/2097/clever-way-to-demethodize-native-js-methods If you really want to twist your brain into knots, tease this thing apart (from that article) var demethodize = Function.prototype.bind.bind(Function.prototype.call); I also threw together a tiny NPM module that'll do this for you, along with some benchmarks for a number of ways to implement this: https://github.com/nickb1080/demethodize
Allonge is great. I also like Ramda. It provides 'unary' and 'binary' functions for this
In OS X, where the arrows come from (they're actually called "disclosure triangles"), they toggle between left and down, but do not animate. Though I like the animation; it's a nice touch.
ERR_NAME_NOT_RESOLVED
fixed in ES6
Chrome 37.0.2062.120 (64-bit) Firefox 32.0.3 So we're clear ... This works as expected: Click on girl with gold dress -&gt; strip opens -&gt; click on "Demonstrations" text -&gt; strip closes This does not work: Click on girl with gold dress -&gt; strip opens -&gt; Click on girl with gold dress -&gt; click on "Demonstrations" text -&gt; strip stays open And I'm also suggesting that strip should close on the second click anyway. edit: I'm not clicking inside the lightbox on any of those clicks
 ==
Lol, until now i read the title as *favorite thing*, not *least favorite* :D Btw i think initially there were no "least" word in it..
&gt; the last &lt;whatever&gt; you'll ever need Unless you want to do something different, or you don't want to use the library it uses, or you want to customize it in some way it doesn't support, or the developer stops updating, or...
I don't have problems with `this`. I understand it quite well. It is just my least favorite thing about JavaScript.
Now imagine how you would feel if you worked with ES6 stuff back in 2009...
This is brilliant, I have to communicate JSON structure ideas to clients of mine and this is ideal. Nice work.
Actually, in 2009 I was working at Google and was on the TC39 committee. I've been thinking about and working with this for a long time ;) Granted, it wasn't ES6 at the time, but a lot of the features that were proposed then have just made it into spec recently.
You're confusing a viewer with something that lets you share JSON.
The resize can be dragged too far to the left. The separator goes behind the source view and become inaccessible. Cool site tho.
Ah yes, I see it now, nice find. I know what the bug is, thanks! edit: fixed in 1.0.5
Agreed, except that it isn't a javascript library.
oh, right I see. I missed the point altogether!
Classes will probably replace `this` as my least favorite thing and may end JavaScript for me. I don't need any maintenance of `this`, because I nearly never use it. I use a subset of the language that utilizes the power of scoping rules and functional programming features. Adding classes will probably push this mildly unpopular way of programming in JavaScript to the fringes. I think JavaScript has also a problem of too many features/paradigms. Due to the language being forced on everyone working with the web, different developers choose different, sometimes incompatible subsets: good-parts, bad-parts, magic-parts, parts-I-read-on-some-blog, parts-I'm-an-enterprise-blub-developer-and-where-are-my-classes. Adding more features/paradigms may add even more confusion.
I'm curious: I guess you were writing JS code with ES6 features back then. What were you running it on? I doubt it was Rhino / [RingoJS](http://ringojs.org/).
Feature: ability to http GET/POST some external API via a CORS proxy 
The JSON needs to be in a fixed width font, but otherwise thats pretty cool
Mostly because most people only load it to use about 1% of its features. So it's better to actually make the function yourself. 
oh.. all the source etc available if you get to end of the clip.. http://somethingnothing.net/about/ 
The carousel on auto play.
Oh sorry, missed that! I've reinstated the post.
This is pretty cool! any thoughts on extending it to serve bits of JSON?
No static typing
Sometimes it feels a bit... designed by committee. OO features seem tacked on to make people who know Java more comfortable; functional/prototypical paradigm code tends to preform a ton better and behave more expectedly, but they keep moving in a direction to accommodate those who dislike this model.
Awesome work, logo is hideous
Looks like a handy resource! If you're interested in collecting bug reports, 1) Source text can become selected when resizing the column 2) The source textarea can be resized with browser controls, which breaks the automatic resizing when resizing the column 3) The column can be resized "too small". [Video](http://gfycat.com/PlumpFearfulFirebelliedtoad). Chrome on OS X.
Nobody wants to hire just a Javascript developer, they want someone proficient in this framework and that library and etc. Not that you can't talk your way into some jobs as long as you can prove that you can pick up the framework, I just wish that there weren't super specific job postings because it's so hard to have experience in that company's exact technology stack.
im very new to javascript, have only read about it in articles and some tutorials, but never used it. Today at work I had my first interaction with it, I spent an hour because I spelled something wrong, and another half hour because I used [] instead of (). We have to use eclipse so maybe other IDES will catch these simple errors, maybe not..but that was annoying, lol. 
Personally I'd say Chrome, but I'm not sure there is a lot in it these days. Firefox has caught up a lot recently.
Chrome
I think at this point it's mostly a matter of preference. I prefer Chrome because I know where everything is, but they have about the same feature set these days. The fact that browser vendors are competing on dev tools (even IE is stepping up its game) is great for all of us :)
I prefer firebug's console, but chrome lets you refresh code view which ff lacks, so I switch between them to suit the task at hand.
If you're running it as a node.js module, you could spawn off a new process. If you're running it in a browser, you could spawn off a new Web Worker. Even though it is blocking, there are usually ways around it.
They all have different strengths and you should learn them all to be maximally effective. For example, FireFox has a font inspector, JSON formatter, and 3D view for z-index debugging. IE has a less flaky debugger, CSS diff tool, profiler with call trees. Chrome has DOM event/xhr breakpoints, edit and continue for script code. I could name another 15 things that are exclusive to each browser. Learn them all and you'll be a much better developer!
Firebug is my favourite. Based on the fact that when you write some Javascript to the Console and press ENTER, it goes to a new line instead of submitting it... annoys me big time.
Thanks. I wish someone would write a long post documenting all the advantages of each.
it would block the Franc process obviously, but not the process which queried it (if it is accessed in an async manner). And I didn't downvote anything, I only replied...
IE Dev Tools said nobody ever.
Chrome, hands down. Paul Irish has some great videos about them. You can check framerate, watching load speed, editting cs and js in the browser (and then saving to desktop), showing paint rectangles, the console has default variables to interact with the DOM easier, you can check heap/stack usage over time, profile http requests in the loadtime... just everything. Every time I go looking around the chrome tools or look them up, I find something new... just realized you can emulate mobile devices in the desktop browser. Firefox is a distant runner up. You can do some cool things, but nothing on Chrome's level.
I'm a fairly big proponent of functional programming, and there's a few things that would make Javascript usable as an FP language if we could fix. - Lack of decent persistent/immutable data structures a part of a standard library There's a few third party libraries for this, but they aren't terribly performant and add a few hundred kb to your bundle size. They also aren't standard, so you'll have to convert them if you want to call any external code - Lack of do-notation You don't need to know much about Monads to find do-notation helpful. The most obvious benefit - Futures/Promises are great. But they are even better when you can use do-notation to get rid of all the messy .then() callbacks. - Lack of type safety Considering how good type-inference is in, say, OCaml, it'd be entirely plausible to define a very slightly modified dialect of Javascript that provides completely inferred type-safety with no syntactical changes. If you want to argue this point, go learn OCaml and then tell me you still prefer dynamic typing. - Lack of tail call optimization. You can work around this fairly easily with trampolining, but this incurs a substantial performance overhead. Tail call optimization would provide a pretty decent performance boost for a lot of code. - Lack of a decent module system Browserify and RequireJS are both still incredibly painful to use compared with pretty much any other language I've ever used. Hopefully ES6 will fix this once and for all. Edit: Bonus gripe - undefined is not a function". At least tell me the fucking function that isn't defined.
The feature I miss most in firebug is the ability to inspect :before/:after elements. The developer tools in chrome sometimes truncate the sources so debugging is impossible, but since that happens rarely, I haven't even filed a bug report.
Yeah and for us browserify users, Chrome has this lame bug:https://code.google.com/p/chromium/issues/detail?id=357958&amp;q=Error.stack&amp;colspec=ID%20Pri%20M%20Iteration%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified
If it's any help, I replaced livereload with browsersync. I swear it's amazing, you should give it a go. 
It’s an interesting idea. But it’s not a high priority for me. I’d say spawning a process or worker is easily implemented by an end-user!
I'll definitely give it a try, thanks.
IE 11's "F12" tools are rather good and I use them daily. Even better is that IE now has a Developer Channel with improvements to the tools and the browser writ large.
Saved.
I updated my Question, Could you please check it?
I updated my Question, Could you please check it?
Chrome Canary usually has a few more features than Chrome (eg bandwidth throttling).
The poor tooling, the lack of block scope (pre ES6), the way `this` works, the lack of type annotations, type coercion, monkey patching, pseudo arrays (arguments, NodeList, etc), and so forth. Basically, that it's not Dart.
It looks good. However, it doesn't handle large JSONs very well. I found that one to be a lot faster: http://jsonviewer.stack.hu/ My suggestions: * Performance * Querying/searching
And here's Mr. Nobody! ---^ How clueless can one get? Now we know!
Moved from a .NET shop to a full-stack JavaScript company, got a few comments of "why? JavaScript is awful - I only put up with it on the front end because I have to".
this seems simple, until this is no longer what you think it is. While there are ways around it - binding, 'var self=this', etc - it is an easily misused thing, and can cause errors - especially when an inexperienced person jumps into the code and starts mucking it up.
It's tricky - When I was giving interviews and reviewing candidates for a project using Angular, I'd hear a recruiter say stuff like "they have experience with node, backbone, knockout, javascript, X framework - but not Angular, so I'm not sure if they are a good fit" - and it's like "I don't care if they know Angular or not (it's a bonus, but not a must-have) - just strong JavaScript developers - and more than just 'sprinkling a little jQuery on top" 
The Firefox api is much nicer, so as a user I vastly prefer it. As a dev there's not much in it.
Thanks a lot for this comment. Just installed, and it's so much easier than other alternatives.
Recently did the same, it's a bit more to setup on some projects, but having every view synced up at the same time is amazing.
I use IE Dev Chanel, and find the dev tools solid; The other UI devs in my org use Chrome and FF with Firebug.
&gt;The other UI devs in my org use Chrome and FF with Firebug. Which should tell you something.
Doesn't look like anyone mentioned that chrome has workspaces which allow you to map resources back to the file on your file system. This works for both css and sass files (with sourcemaps). So, if you are setting up color scheme and use the color picker, or are scrolling up a number in a box shadow, etc in devtools, the change is immediately saved back to your css/sass file. Never edit another style in vim again! Afaik, no other dev tools has anything close and I've basically switched to doing all of my styles right there in dev tools whener possible (LESS was not supported last time I checked)
&gt;Have you even used the tools Of course. That's why I don't use them, except when I need to fix IE. &gt;Still prefer Chrome dev tools So do most people. That and Firefox's. &gt;the "IE sucks herp derp" circlejerk is getting a little old. The opposite would be to praise it. So it will continue till that changes.
Awesome dude!
Same here. I found that livereload ate up too much memory after a few reloads.
The style inspector in Firefox devtools allows you to edit LESS and SASS directly and have all changes be applied live in the browser. IIRC there is also sourcemap support, but changing styles from the inspector window won't have any effect on the source files.
http://comments.gmane.org/gmane.comp.lang.javascript.ecmascript4.general/29599 check out this conversation for an idea of just how semantic these sorts off arguments are when you really break it down. Does the standardized ecmapscript language embed the event loop in the language? No, and I agree with separating the language from apis like the dom. However, we have to be pragmatic here and actually build things in the real world, where building anything in any mainstream platform that runs javascript requires a fundamental understanding of the event loop. To pretend like the world operates in any other way is plain harmful to people who havent groked it yet. Side note for /u/aikah who I will point here: the webworkers spec does not enforce the idea of threads anywhere and the opera implementation is indeed single threaded (or was in semi recent history) interesting approaches to accommodate it too. 
People constantly bitching about it.
See reply to ns0. tl;dr yeah, well given the spec inherently suggests single threaded architecture I'd call it a yak shave. The level of symbiosis is actually pretty interesting. Add real multithreading support to the language spec and break every mainstream ecosystem, create a true multithreaded ecosystem for it to run in and nothing happens, there are no language constructs.
&gt; Firefox is a distant runner up. You can do some cool things, but nothing on Chrome's level. I'd agree to some degree, but not exactly in the areas you've mentioned. From the above list, Firefox only lacks live js editing (coming soon, apparently) and proper heap analysis tools. Chrome's biggest advantage isn't necessarily the extensive feature list, but the abundance of eminently practical features. Yes, the webGL shader editor and web audio editor in Firefox devtools have their uses, but as a developer mobile emulation, websocket debugging and superior sourcemap support rank are far more significant. Unfortunately, only Chrome possesses said tools. :( That said, the other devtools teams lack an evangelist on the level of Paul Irish. His contributions are absolutely mind-boggling.
If you use lodash or underscore this is a utility method. 
The linked page has a bunch of references, which is nice, but I'm missing where the actual source is made available?
Why can't you use onkeypress/onkeydown/onkeyup? AFAIK, they're your only option for keypress event handling.
Well its of course executing as css, so there must be source map support if you can direclty edit LESS/SASS. That is great and I'm excited to hear FF has this now, as saving the changes isn't a big leap to make and I think that is becoming a pretty common workflow. Even IE is stepping things up a bit. I hope safari gets on the bandwagon so I don't have to dread using their devtools every time I have to debug safari running on an ipad. 
If you want very good cross-browser compatibility, and especially if you're already loading jQuery on your page, then use this: http://api.jquery.com/keypress/. Otherwise, have a look at: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener and https://developer.mozilla.org/en-US/docs/Web/Events and https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent `addEventListener` doesn't work on &lt;IE9, but it's not too difficult to write a shim for it.
For debugging on ios, [this](https://hacks.mozilla.org/2014/09/firefox-tools-adapter/) and [this](https://github.com/google/ios-webkit-debug-proxy) might be worth checking out. Safari appears to be the only browser NOT making huge strides on the devtools front.
Web Inspector is awful, in my (albeit limited) experience.
It's not for debugging it's for messaging to users. Still not my cup of tea but they have their place.
Thanks for the answer. I will read the articles ;)
Thanks. I've read Speaking JS, i liked it very much, also i'm following 2ality blog for a while. Effective JS is not new to me, but i was not able to read it yet, but i made an eye on the ToC, and the topics are not new to me. But after all i will read it, someone already commended it to me. 
Another reason to know them all is that often bugs will appear only in one browser. I'm just glad they all have debuggers now. 
Thanks
https://news.ycombinator.com/item?id=8410322
I ran into this problem a couple times where I needed to have some styling junk in my scripts (e.g. colors when using [ChartJS](http://www.chartjs.org/), which is canvas-rendered). So I wrote this to give access to LESS variables, to remove duplication of style constants. Still a bleeding edge release. Let me know what you think!
My team has been using the [Closure compiler](https://developers.google.com/closure/compiler/docs/js-for-compiler#types) for that. It's not perfect, but it has saved some headaches.
Lol^2, until now i read the title as favorite thing, not least favorite :D Btw i think initially there were no "least" word in it..
I built a live-coding web app for the Oculus Rift where you code in JavaScript using Three.js and watch the world change around you in real-time. It's quite a niche application since you need to have an Oculus Rift (DK2), be a JavaScript programmer, be sufficiently familiar with Three.js *and* you need to be able to touch-type but it's a surprisingly engaging experience! If happen to have a Rift DK2 and you want to try it out yourself, download the Windows or OS X or dev build of Firefox that includes the WebVR APIs from http://blog.bitops.com/blog/2014/08/20/updated-firefox-vr-builds/ and visit http://brianpeiris.github.io/RiftSketch with your Rift hooked up. The code's messy but it's up on GitHub: https://github.com/brianpeiris/RiftSketch
Heh, I uttered the words "I don't mind JavaScript" in my last company. Spent next year only programming in it because no one else wanted to touch it.
That's insane. A new definition to being immersed in code. I wonder if this has any practical usage... 
Just a word to the wise, your site totally breaks with small windows and your main content div isn't centered in the page (Chrome 37).
Well, this is mostly just a fun application of WebVR. As far as practical usage, assuming VR takes off and improves considerably, I can see things like this being used for teaching code since it's interactive and engaging. In the future I fully expect to be coding inside VR for my usual development work. Just imagine being able to have unlimited virtual screens. I can't wait.
"unlimited virtual screens" - Now were talking.
It doesn't look like it's intended to center, and it's using the 960px fixed-width system, so all he needs to do is add a width or min-width that matches his max-width since scaling clobbers the content otherwise.
Rather than go with `browserify`, I chose `component(1)`. I am still happy with it, but moving to `browserify` should be pretty straightforward as well. It's just that `component(1)` also makes `css` and `html` part of the build process. It's one of those internal debates on whether I'm using the right tool for the job that keeps me up at night. Mainly the issue is that the sourcemap implementation in `component(1)` at v0.19.x is a little kludgy according to me - no separate file gets generated. Instead, TJ Hollowaychuck chose the function string literal trick to push the code into the "sourcemap-like" result in browsers. Works great for debugging, but is not elegant enough for me. Also, IE doesn't seem to play well with it.
Oh applications of VR in general. Yeah, there are tons. You should come hang out in /r/oculus if you're interested.
I can't speak to his intentions, [but it does look awfully unbalanced](http://i.imgur.com/Ni5xkLd.png) without some kind of sidebar balancing it out. From a design perspective this would be something to avoid unless the white space was in some way adding to or framing the content.
Actually, you're correct. the nav element is hidden for some reason - It sits on the right side of the page
No coroutine? 
I really appreciate all the responses and feedback in regards to this post, I have found this very useful. 
I think lots of people also don't really know where to draw the line between "front end designer/web designer" and "front end developer" - and lots of people are still stuck in the mindset of thinking that anything to do with client-side is a front-end designer. 
IIRC isn't component being deprecated in favor of Duo? 
One thing to remember about those implementations, they use '===' for comparison. When encountering object types, they typically won't work unless you use the pluck clause. So the following does not work as some might expect: &gt; var y = [{x: 1}, {x: 1}]; &gt; console.log(_.unique(y).length); &gt; 2 // Not 1. Similarly, '==' comparison does not work either because it's not coercive: &gt; var x = new Date(); &gt; var y = new Date(x); &gt; y == x &gt; false But a good solution to these issues, implement 'valueOf' on the object, and you could use a coercive equals (y &lt;= x &amp;&amp; y &gt;= x): &gt; var x = new Date(); &gt; var y = new Date(x); &gt; y &lt;= x &amp;&amp; y &gt;= x &gt; true
The Ocrad.js that you are linking to is a Javascript port from LLVM-bytecode to Javascript. You would have better luck modifying the original Ocrad code, originally written in C/C++, and then reporting it to Javascript through the same method as described by the author. Tesseract might be a better OCR option for you. However, like almost all OCR packages out there, it was not originally written in Javascript. What makes Tesseract different from Ocrad and GOCR is that it can learn to read any language and symbol you want provided that you train Tesseract to actually read the symbol. The data resulting from this training would likely become a massive overhead when trying to distribute the source code (as part of a JavaScript library), which would be prohibitive to have as a client-side OCR tool. You'd be better off just creating a server-side web service to take in images and return symbols.
This is my dream.
Lexical scoping. There's only one declaration of the variable i. We push some functions on to the event queue to run later, and at that time the parent function has finished executing. Therefore, i = 4.
That's another way to do it, but I'm telling the developer that the function can make those assumptions.
The ecosystem. It's tedious to keep up with the many libraries that come and go. Even something 'simple' like module loading has various implementations. I can live with the language quirks and actually enjoy JavaScript as a language. 
It was. But a few other developers decided to take it over and bring it to v1.0. It is under active development again. Also duo is no where close to being released or production ready. 
This is the matrix being born 
Appreciate the help. I will look into tesseract. I see that it is a GUI based OCR system, is there any way to create my custom settings and have tesseract give me back a list of coordinates where the symbol is found in the image via the command line?
I am only vaguely familiar with how tesseract accomplishes OCR. I am not familiar with its internal workings. Also, I don't recall it being a GUI-based system. I learned about tesseract a few years ago, so things might have progressed with the system since then. At that time, though, it was a command-line based system.
Very nice!
Recap: browserify, gulp, livereload, transpilers
Can I just say that if you had the Unity environment in there, this would be the greatest possible way of making games. I'm floored, this looks like so much fun!
Great build up!
This isn't a packaging solution though, it's a replacement for the webview used by packaging solutions like PG.
[GitHub](https://github.com/TGOlson/react-d3-visuals)
This is really cool. Now I really have the desire to pick up three.js and buy the oculus rift. As a side note - if you want your videos to be even more powerful, code BIG things. The wave field of cubes was really interesting to look at, but in the beginning you just had one huge cube. When you looked up towards this huge cube it really got to me, it just struck a powerful chord.
It's often a balancing act. The differences in readability have to do with how used to the reader is at looking at various patterns. I have introduced patterns into my jsgui codebase that would make it harder to read for someone who does not know the abstractions, but easier for those who do, as more information gets expressed within the same space. Also, there are different requirements for code in different situations. While developing, longer variable names make it clear what the code does. However, when it's deployed is a different case. I'm currently using browserify and minifyjs, but I know there is more compression that can be done by keeping more of the modules within the same closure, and referring to the same local variables, which get given shortened names. I use the for loops with the cached results to optimize for time, and for optimizing for space or readability I use the jsgui 'each' function.
What's the music in the video?
That's a really good observation! I'll have to work on improve my "VR live-coding performances" for sure. (Right now I'm just giddy that I can even say that sentence :P)
Oh it's just one of the royalty-free tracks from YouTube's audio library: https://www.youtube.com/audiolibrary_download?vid=2545f834238bcd11
Its a cool idea, maybe a little too long. I got bored with scrolling about halfway through. Maybe change more than the skateboarder's pants color? Also I would recommend fixing grammar, punctuation and capitalization. For instance, you had a lowercase i for the personal pronoun I. You spelled it Javascript instead of JavaScript. 'Rocknroll' is probably more commonly spelled Rock 'N' Roll. There were a few cases of missing commas. Not trying to nitpick, just anytime I've interviewed or evaluated candidates for frontend, one of the top most criteria has be accuracy in communication.
Not many people can touch type, it would be awesome if you added a virtual keyboard below the code. With that addition touch typing would taught indirectly. 
Good idea. I'll add it to my todo list!
Really fucking amazing. It looks like so much fun. Whenever I see stuff like this I get a bittersweet feeling of awe/joy/jealousy/stupidity. I love it, but I'm jealous that I didn't or can't make something this cool. It seems like there should be a German word for this.
Thanks for review! will work on scroll.
I've got a DK1, would that suffice?
Damn duuuuuuuuuuuude, that's sick! I loved watching you make that.... thing.
In addition to what others have said, I think your word spacing is a little wide - it prevents the text from being ready smoothly; instead I found myself reading one word at a time. Edit: Also just noticed a minor bug. If Fancy Pants is about to eat something, but then you scroll back to the left, his mouth remains open.
Caveat: I work on the Internet Explorer team, and I also run @F12DevTools (personal account) on twitter. I believe the question should be "Which has the best tool for what I'm doing right this moment," as the tools themselves in each browser have distinct advantages over one another. Internet Explorer and Firefox both have a feature during debugging that keeps you out of library/3rd-party code, and in your own. In IE this is called "Just My Code," while in Firefox it's called "Code Blackboxing". Chrome only recently added a similar feature. Firefox has a 3D view that shows the nesting of elements in the document. It's not enormously helpful, but it can assist you in identifying element relationships you didn't expect to exist. Neither Chrome nor Internet Explorer have this. Internet Explorer has a small heads-up performance display (Ctrl+Shift+U). This gives you stats on page memory usage, and more. Neither Chrome nor Firefox have a comparable feature. Firefox is presently working on a new Performance tool, which will record numerous events over the life-cycle of a page, and allow you to study frames of data to debug/optimize your application. Internet Explorer and Chrome have had this feature for some time now. Chrome, Firefox, and Internet Explorer all support source-maps. Only Internet Explorer and Chrome presently support arbitrarily adding a source map for a given script. I don't believe Firefox has shipped a comparable feature yet. Internet Explorer's Memory profiler pro-actively identifies detached DOM nodes and other items that may lead to memory leaks. To my knowledge, neither Chrome nor Firefox do this (or at least not as clearly as IE does). Advantages even exist in the smaller details. For instance, Firefox and Internet Explorer both have great color picker / eye-dropper tools. However, Internet Explorer is the only one to allow color-selections outside of the browser-window. Use the tools in each browser; learn them intimately. Even though I work for Microsoft, I usually have at least two browsers up, and two sets of tools opened, when I'm debugging sites and building demos. I bounce between tool suites naturally. One great thing I like about all of these options is that they each have active representatives on twitter. If you have a problem with Chrome's tools, you can reach out to @paul_irish. If you run into some issues in Firefox, people like @patrickbrosset are very helpful. And if you are looking for some direction in Internet Explorer, myself (@jonathansampson), and/or the developer tools' PM himself @AndySterland is available. The Internet Explorer team recently launched a new UserVoice for feature-requests (http://uservoice.modern.ie). On there is a category for F12 Developer Tools. I know that Andy and the rest of the F12 team would be happy to hear what you'd like to see shipped next.
Minor correction: the 3D view is for HTML nesting, not z-index debugging. I was recently discussing this with one of Firefox's developers on twitter: https://twitter.com/patrickbrosset/status/518482165827657729.
I didn't say programmers :-)
I'm curious why you feel IE's debugger is so inferior. It supports source-maps, event breakpoints, event tracepoints (no other browser supports those IIRC), code black-boxing (Chrome only recently added support), arbitrary source-map designation, pretty-print, asynchronous call-stacks, collapsing library-code frames in the call-stack, and more. I work for the Internet Explorer team at Microsoft, but I'm projecting as little bias as possible when I say (as a developer) Internet Explorer doesn't have a bad debugger; it has a pretty good one. If there are ways we can improve it, I certainly would love to know. We recently launched a UserVoice to hear and discuss your ideas: https://wpdev.uservoice.com/forums/257854-internet-explorer-platform/category/84475-f12-developer-tools.
fair. Although it sounds like to get this set up you may need to be a decent programmer hah. But long term thinking, I hear ya :p
Nothing that I've decided to put online yet. I'm planning on making using the CMS part of the framework to host a website explaining how the whole thing works, but that CMS part is not ready yet. Any simple example that you would like to see in particular? Maybe I should make a ToDo MVC example using it.
Totally, something like that with sample code was the first thing I looked for.
this is a really awesome idea! i'm going to work on this this week. thanks man!
I think it's really cool. It's not my personal style, but I'm sure it's yours, and that's going to pay off when people are looking at it. Couple notes: definitely a little wordy for how it's laid out. Maybe try to condense it into a tweet size chunk or to. Or possibly have alternative text for mobile. I couldn't click the GitHub link at the end of the words on mobile.
I think this is really neat. I'm thinking how cool this would be to have a mock ticketing system, source-control, and condel pipeline in place... e.g. the new "employee" will log into the ticket system, find and review their tickets, and then work the one that's the most appropriate (attempting to work the "wrong" ticket will eventually lead them to a realization that it's not possible, and that they should work a different issue first). Have them commit the code, have condel run various tests to validate the work, as well as critique the code from a static analysis POV. Perhaps after all the condel tests pass, another "developer" (which is actually just an automatic commit triggered off the condel pass) makes a commit to add a new feature, which ends up introducing a new issue (such as a compatibility or performance problem), which you have to debug and fix. Hrmm, the possibilities...
It tough to really debug it without diving into the code, but it seems like the conditions in your while loop are not working. In particular, I think this `blackjack.credits &lt;= 0` is opposite of what you want. Doesn't that mean that the credits are below or equal to zero? If I'm reading the while loop correctly you only want to have conditions where the game should continue. Also, I don't see any logic relating how the game would end after `blackjack.win` has been called. It logs the message, but doesn't set any properties to alert other functions they need to do something else. Other quickies: line 23 is redundant based on the conditions in the while loop. The if statement on line 33 should have a closing bracket. So, that maybe doesn't solve your problem, but as to your second question - a really good thing to do is focus on creating modular code, reusable functions, and keeping specific logic contained to an easy to access/change place. So for example, instead of using blackjack.playerHand[blackjack.playerHand.length-1] in a couple places, maybe you could create a `lastPlayerCard` function that returns the last card, or even better, create a player object that can handle these things: var player = {}; player.lastCard = function() { // this would probably change to player.hand var currentHand = blackjack.playerHand; return currentHand[currentHand.length - 1]; } Then you can clean up your code even more with helpers like `player.currentCount`, `dealer.hand`, `blackjack.hasWinner`, etc. The goal with this would be to make your code easier to follow, and when you do run into bugs like you have with your while loop, you can easily identify points that seem weak - like 'the game isn't ending, I'll debug the `hasWinner` function - instead of just looking at a big block of logic without a great place to start.
Glad to hear that it is inspiring your mind :) My initial idea was far more complex than what I've delivered. I've decided to cut it down mainly for two reasons - to test the core idea - and because straightforward things are more likely to go viral. Ok... I think I am making that up - I just have had one free weekend which is quite a limited time :) 
Its cool indeed, but there could be more "gadgets". When a man sees that kind of page he expects many fireworks. How about jupmping over the barriers in your lifepath?
Great idea! 
My answer on SO: In your dependencies list, you are passing in $stateParams, $location, and Authentication, which may not be needed. CustomersApp.controller('CustomersCreateController', ['$scope', '$stateParams', '$location', 'Authentication', 'Customers', function($scope, Customers ) { Regardless, the order you specify in the dependencies array is the order that they will be passed into your controller. So, in your controller, "$scope" refers to $scope, but "Customers" refers to "$stateParams". You can probably change it to look like this: CustomersApp.controller('CustomersCreateController', ['$scope', 'Customers', function($scope, Customers ) { Or, if you need those services: CustomersApp.controller('CustomersCreateController', ['$scope', '$stateParams', '$location', 'Authentication', 'Customers', function($scope, $stateParams, $location, Authentication, Customers ) {
This thread has been linked to from elsewhere on reddit. - [/r/PinoyProgrammer] [Learn by finishing a game (x-post r/gamedev) : javascript](http://np.reddit.com/r/PinoyProgrammer/comments/2iehb0/learn_by_finishing_a_game_xpost_rgamedev/) *^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)* 
You are right. the x and y values in the function you pointed out are relative to the window. You want x and y values relative to that particular div. You need to offset the x and the y by how much 'paper' is moved from the 0,0 position. you can do something like this: http://jsfiddle.net/ahtnox6w/ I added var offset = document.getElementById('paper').getBoundingClientRect(); and changed what you posted above to: box.view.rect.drag(function(dx,dy,x,y){ box.x = x - offset.left; box.y = y - offset.top; }); 
Can you post what you have? Hard to tell what the problem is without any context.
Hone your understanding of JavaScript's chain of prototypal inheritance. Understanding it allows one to write optimal, efficient code.
thanks! It's obvious when you point it out. I was thinking that Raphael would do all that automagically for me. 
Since the markup isn't identical, you should be able to differentiate them.
http://shop.oreilly.com/product/9780596805531.do Have fun.
Thanks, this helped lend support to my recent journey into JavaScript.
Yep, knew that bug. Thanks for reminding. 
Next iteration mate. Thanks for review 
I edited my question. Please do check.
My misunderstanding, then - javascript alert to me is that crappy dialog box with 'Ok' button, which was used to debug javascript in the previous century :)
Best book on js: http://eloquentjavascript.net/. A bit of more advanced stuff http://ejohn.org/apps/learn/. Things that can trip you up http://bonsaiden.github.io/JavaScript-Garden/. And tips to avoid these issues http://www.ustream.tv/recorded/46640057.
this very much. I hate sifting through incomplete documentations
This is really cool man, thanks for sharing. I'm going to try and make some time to work on it this week.
Alternatively, skip it and go straight to functional programming. Best thing you can do for yourself.
Really good idea I think
Thanks! I'll do that tomorrow. Do I have to delete this post?
thaaaaanks :) .... you are awesomeeeeee !!! I spent hours trying to solve this and I almost gave up! so thanks again
The only problem now, is that it's not linked to the product yet, while the option values are linked to the attributes. For example, the variable 'Cylinder' at the section 'Linkeroog' looks like this in the variable.php: &lt;td class="label"&gt;&lt;label for="model"&gt;Cylinder&lt;/label&gt;&lt;/td&gt; &lt;td class="value"&gt; &lt;select id="pa_cylinder-links" class="kad-select" name="attribute_pa_cylinder-links"&gt; &lt;option value=""&gt;Kies een optie...&lt;/option&gt; &lt;option value="2-25" class="active"&gt;-2.25&lt;/option&gt; &lt;option value="1-75" class="active"&gt;-1.75&lt;/option&gt; &lt;option value="1-25" class="active"&gt;-1.25&lt;/option&gt; &lt;option value="0-75" class="active"&gt;-0.75&lt;/option&gt; &lt;option value="selecteer-geen-cylinder-links"&gt;Selecteer geen cylinder&lt;/option&gt; &lt;/select&gt; &lt;/td&gt; So we need to link the variation_id to the product..
Could you please give me an example?
The best I have is: `(object.property = object.property || []).push(item);` **Edit:** Fixed a bug, [courtesy of mattdesl](http://www.reddit.com/r/javascript/comments/2ifj4n/if_array_in_object_then_push_else/cl1wg1a).
This is good stuff. I usually write if (!(property in object)) { object[property] = []; } object[property].push(item); But yours is compact without sacrificing readability. 
I guess really you could do the same technique with a tutorial. Teach up until the very basics of the game is completed, and then let the user learn as they continue to add on to the completed project. Follow up tutorials could be written to show users how to include specific additions. Most young programmers today will be put into a career where they will sit in front of other people's code (perhaps ancient code) and fix bugs or make additions. So this type of piggyback programming will become much more prevalent. There continues to be more and more free code on the internet to let anyone use as a jumping off point.
For "FiddlerScript"? No. Well, it gives you access to the whole response body as a string. You could use a regex or whatever to inspect it.
Absolutely awesome. I have had this 'problem' many times and I always love to learn by using case studies. Will do this one :-)
* It doesn't look good on my high resolution 2560 x 1440 as everything is stuck to the bottom. * It also doesn't work well on a PC as the scrolling is horrible in terms of functionality. * If you scroll fast enough the icons pass the person. * I have to keep scrolling back and fourth to find information, it's not all there for me to read at a single glance * Its a neat effect but it doesn't show your skill, i have no idea if you are good or not, where are examples of work? experiments? Fiddles? I wouldn't hire/interview based on this as I have nothing to go on. * It looks very childish in terms of style, which makes me think of college student right off the bat. * As a frontend developer, I would have an expectation of some very basic accessibility functionality, you tab indentation works ok (as its all default) but you have no meaningful title attributes, your image has no alt attribute, you have no screen reading information indicating a page will open in a new window. If I tab onto "mail" a screen reader just says "mail link" it has no meaning. Your html tag also has no language identification It is a cool effect, it was awesome on my tablet sliding across, but I wouldnt like it if i was planning to interview/hire or find out your skill. 
I'm still new to Javascript, So how to Javascript to only search for `span id="eow-title"` and `cat`, and ignore the collected Metadata? Please give me a hint.
Did you know you were covered on TheVerge and that Neal Stephenson submitted your project to them?
var oBody = System.Text.Encoding.UTF8.GetString(oSession.responseBodyBytes); That gives you the response body as a string. Use a regular expression or whatever to extract the title of the video.
Hey, I have forked the Repo and submitted a pull request to improve the README file. I have made it support Markdown, which as I have mentioned is generally the standard with Github Readme files :)
Glad to hear that!
Is regex my only choice, any other method to get the title of the video?
Uh. I had no idea. Wow. Thanks so much for telling me.
 (object[property] || (object[property] = []).push(item);
Well, TIL there's a whole bunch of things starting `$`, that are there even when you don't have jQuery.
These examples are obviously not correct: (30).toString(16); // "c" Hexadecimal parseInt("c", 16); // "30" 
Fixed, thanks!
Any written resource on these?:) 
https://developer.chrome.com/devtools/docs/commandline-api https://getfirebug.com/wiki/index.php/Command_Line_API
&gt; Knowing how to do [functional programming instead of prototypal inheritance] in Javascript can make you become an expert in no-time. Nobody is a JavaScript expert without having a finely tuned understanding of JavaScript's prototypal chain of inheritance, and other fundamental language features. Every JavaScript developer needs a complete understanding of the language fundamentals: like what a prototype really is, how to leverage `this`, etc. Doesn't matter if you're programming in spaghetti-land (functional programming) or best-practices land (modularized and object oriented), the point remains the same: if you don't understand some of the key points of the language's fundamental architecture, then you will not create wonderful code, and you will certainly not be an expert.
The primary reason most people use underscore or lodash seems to be (going by what I've seen as a contractor for different teams in different companies and looking at various open source projects) that surprisingly many developers still treat JS as ES3 (e.g. avoid method/property names that are ES3 keywords) even if they don't need to be compatible with oldIE (IE&lt;9) and even where polyfills could fill in the gap. Underscore is the jQuery of array manipulation. Lodash is the Zepto to underscore's jQuery. The lazy.js-inspired parts are how you use underscore/lodash to optimize your array manipulation, but most code out there using those libraries only includes them for `_.map`, `_.filter`, `_.forEach` and `_.extend` (and maybe -- *maybe* -- `_.pluck` or `_.pick`). I'm not saying underscore/lodash are not successful or that they don't have any value, but their success has more to do with ES3 than with their optimizations.
Nice catch Dragory! Somebody pointed out the same problem in the [original gist comments](https://gist.github.com/addyosmani/fd3999ea7fce242756b1#comment-1307755), and also give a solution really imaginative to get the color: Math.random().toString(16).slice(-6)
That's actually really clever! Do you know if the number of decimals Math.random() generates is consistent between different browsers?
The term 'one liner' doesn't mean anything to me anymore. When I see this, which is called a "one-liner": [].forEach.call($$("*"),function(a){a.style.outline="1px solid #"+(~~(Math.random()*(1&lt;&lt;24))).toString(16)}) I see that it actually is supposed to be this: [].forEach.call($$("*"), function(a){ var color = (~~(Math.random()*(1&lt;&lt;24))).toString(16); a.style.outline = "1px solid #" + color; }) I just wish it was an honest-to-goodness three-or-four liner. Why can't we just accept who we really are and what we really have?
`push` returns a number (new length of array) so you probably won't want to assign that to `object.property`
something like: obj.foo = obj.foo || [] obj.foo.push(item) or shorter, less readable: ;(obj.foo = obj.foo||[]).push(item) longer but safer: obj.foo = Array.isArray(obj.foo) ? obj.foo : [] obj.foo.push(item)
Fuck yeah!!
I can make my whole application a 1 liner by taking out all the carriage returns.
No I'm dead serious. Understand prototypes, sure. You'll encounter them in libraries or existing code bases. But if you're starting from scratch, definitely learn how to not worry about inheritance in js and go for object composition and mixins and functional utilities that don't modify the inputs. Makes coding in JavaScript much simpler. Crockford's recent talk is interesting in that regard. http://www.ustream.tv/recorded/46640057 He's gotten rid of prototypal inheritance entirely in his code as well. This eliminates `this` in his code. Sounds like a plan I can get behind. 
You forgot a ')'. (object[property] || (object[property] = []**)**).push(item); You can get rid of a pair of parens if you just flip it around: (object[property] = object[property] || []).push(item);
&gt;bitwise-negation applied twice is a short way of writing parseInt Not quite. ParseInt converts the argument to a string and then tries to parse the string as an integer. Bitwise negation twice goes directly to an integer, as does n&lt;&lt;&lt;0, with no string in between. Math.floor() is the equivalent. As an old school programmer that cares about types, coercing a number to a string and then parsing it bugs me. Casually mentioning it as the canonical way to get the integer part of a float bothers me even more!
I would consider this a one-liner because it's pretty easy to understand what's going one even when it's consolidated to one line. 
Isn't $$ a chrome/WebKit specific API?
 (~~(Math.random()*(1&lt;&lt;24))).toString(16); You forgot the most complex piece of the code :)
Thanks, just started playing with the tech, the code is in full prototype mode so sorry for the mess. 
Oh there's no doubt that parseInt works, and I do understand all of these. It's just that parseInt is wildly inefficient. (but that could be said for a lot of common javascript techniques) Instructions are your way of telling the computer what to so, so you should know what you're telling it. parseInt tells it to (implicitly) convert your number to a string and then convert the string back to a number while ignoring any decimal part. Bitwise negation or left shift tells the computer to convert your number directly from a floating point to an integer representation, without the intermediate string. The end result is the same, but the work done to get there is very different.
Seems like Firebug has it as well. https://getfirebug.com/wiki/index.php/Command_Line_API#.24.24.28selector.29
I hadn't seen it before... It seems like a bad idea to rely on $$ if its browser specific, it looks to be equivalent to document.querySelectorAll.
I believe it's more specific to the dev console, even. Actually, doesn't IE11's console have this too?
Is that needed since the right side is the "pretty" version?
You can't copy and paste from the right side, can you? :)
Good call, I need to update with more vendor prefixes
His stuff looks possible with most web devs as long as your friend is quite clear on what she's looking for. It's a lot easier if she has very specific requests rather than "do something like Raphael"
Firefox's built-in console has had it for a while. As far as I know, since they added their own proper console.
This may be the dumbest thing I have ever seen. I can't believe someone actually wasted time making it. EDIT: LOL... I'll take downvotes. They are just fake internet points. Someone explain to me when you would ever actually use this? I'm willing to bet it's never. It doesn't turn any website into a party... it just turns every website into a useless screen. Good for you for figuring out how to program JS, but that doesn't change the fact that this is useless. What is so awesome about it - that it uses basic css animation and transitions? I must be getting too old for this industry if people think *this* is awesome.
Hm, so it is, cheers! I was wondering whether the solution /u/marquex quoted above is reliable but, like you said, it's a floating point number so it can come up with e.g. `0.294921875` which results in `#0.4b8` which is invalid. (The fact that it can generate e.g. precisely 0.5 sounds so obvious now that you pointed it out, haha)
You actually can do this already. I use it in a ton of my applications. Just POST to http://jsonfiddle.net/api/fiddle and you will get back a fiddle URL to share
 ((0x111111 + 0xeeeeef * Math.random())|0).toString(16) That would work for example. Or you could just left-pad it with zeros. Or you could just use hsl() instead. hsl() is probably the best option since it lets you generate randomized bright or dark colors if you want. https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl%28%29
99.1% Pure Awesome!! 
Indeed, there's actually an hsl solution in the original gist as well: https://gist.github.com/addyosmani/fd3999ea7fce242756b1#tag-specific-layout-debugging-in-82-bytes The `|0` is used to truncate the number like `~~` was in the original snippet, right?
Yea, I'm def. aware of that. I could process on the server and then print out on the client. I like the idea of searching, we were working on a query language for JSON, but lodash seems to do well. I might give an omnibar to lodash on your data at the top.
This is sweet!
there is a even shorter way to achieve that [].forEach.call($$("*"),function(a){ a.style.outline="1px solid #" + (~~((1+Math.random())*(1&lt;&lt;24))).toString(16).slice(-6) })
In the article it says it will only work in browser consoles.
The popups seem to be done with [Opentip](http://www.opentip.org/), which I'm using on a project at work. There is a library out there which does "one-offs": it shows you the tooltip-like hint, which then isn't seen again. Somewhere on [cdnjs](http://www.cdnjs.com) Lots of luck! 
Would something like [this](http://foundation.zurb.com/docs/components/joyride.html) fit the bill? I've run into a couple of these "guided tour" libraries before, but not sure if that's what you're looking for.
what you call wasting, I call living!
I understand the appeal of sticking to only the bare basics of a language, but in working with the rest of the world on JavaScript, I won't be taking on such a radical approach.
I'd recommend doing two courses from Frontend Masters: Crockford's JavaScript the Good Parts: https://frontendmasters.com/courses/javascript-the-good-parts/ Kyle Simpson's Advanced JavaScript: https://frontendmasters.com/courses/advanced-javascript/ Be prepared to actually know JavaScript.
&gt; The |0 is used to truncate the number like ~~ was in the original snippet, right? Yes.
pm'ed
Right, I was amazed. Wanna turn your invention into a commercial venture on assembly.com together?
Functional programming concepts are difficult to understand to begin with. I wouldn't dismiss it as basics. You're absolutely right. For the full JavaScript expertise definitely look at the prototypal inheritance, module based closures etc. They're essential to becoming an expert. OP claims to be an intermediate level programmer with an interest in JavaScript. Steering him/her towards the future of the language that leads to the path of least resistance seemed prudent to me. After the concepts of object composition, functional utilieis and tail call optimization (coming soon to es6) are solidified, then the rest of the concepts have to be learned to work with existing frameworks and implementations. Hope that seems fair. 
You should definitely look at [Moment](http://momentjs.com). It's a very handy library for doing date calculations in Javascript, and learning to use libraries others have written is an important part of learning to write code. This will be much easier to do with Moment than raw Javascript. Another handy coding trick is checking the API reference for the objects you're dealing with. For Javascript, the best place to go is usually MDN; here's their reference on the [Date object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date). Finally, a good way to send code examples back and forth is a tool called [jsfiddle](http://jsfiddle.net). It's a live editor, so you can write code in jsfiddle and also run it, then send it to someone and they can modify it and send it back. A little more useful than pastebin :) Check out a few moment examples and just keep at it; copying/pasting code and figuring things out is the best way to learn.
I remember that it goes along with the $1 $2 etc shortcuts chrome dev tools provides to target last selected element etc. 
I do agree that you should know all about prototypal inheritance before you can claim to be an expert. Having said that I don't think dismissing functional programming in javascript as 'spaghetti-land' and saying OO is the only way to go is fair.
I honestly think I got in over my head here^(scriptkiddie)! I should probably sit down and learn javascript properly. I have something that works, but I guess I can't wrap my head around the problem properly. &gt; tool called jsfiddle This is funny because I have been using w3schools "try it" by plugging in my code and seeing what I get. I was just looking at jsfiddle now, which does indeed look handy. Thanks.
Thanks for that, should be fixed now.
Fortran -&gt; C -&gt; emscripten ?
That's true. But ctrl + opt + f in sublime pretties our JS for us :). I guess the point behind this was to share the URL, not the raw the JSON.
Why not throw in some cobal? 
Must be because JavaScript is awesome?
IMHO, that't because of the lack of demand. Making a quick search on Github, there are [233k C repositories](https://github.com/search?utf8=%E2%9C%93&amp;q=language%3Ac) opposed to [3k FORTRAN repositories](https://github.com/search?utf8=%E2%9C%93&amp;q=language%3Afortran&amp;type=Repositories&amp;ref=searchresults). This indicates there a greater demand to run C programs in the browser, which explain the existence projects such as Emscripten. That isn't the case with FORTRAN.
If future me can't work out a problem I've done before he's an idiot. Sure I have slow days, but really fuck me I write it with comments and proper syntax all nice for a reason. 
If it's just random colors, use hsl: [].forEach.call($$('*'), function(el, i){ el.style.outline = "1px solid hsl(" + (Math.random() * 360) + ", 50%, 50%)";}) This has the advantage of always making a visible color as it's simply adjusting the hue. Or use the forEach index to make rainbows!! [].forEach.call($$('*'), function(el, i){ el.style.outline = "1px solid hsl(" + (i % 360) + ", 50%, 50%)";})
Everything is in documentation... 
Don't put down FORTRANSCRIPT!
The only reason (and I know, because I've written it) people still write FORTRAN is because a) it's killer at winning speed tests and b) it's equal to, if not better than, any other language for vectorization. I was mostly joking, though I think it would be hilarious to create one.
I have tried a lot of them. They are all very similar and you will end up hacking each one a bit to do exactly what you need. That said, I have found this one the best as a solid starting point: https://github.com/jeff-optimizely/Guiders-JS
Technically, the bitwise operators convert the float to a signed 32 bit integer representation. (Or maybe 64 bit on some systems? MDN says bitwise is explicitly 32 bit!) Anyway, it's this implicit conversion to a different internal representation that you're using, only in this case a much faster conversion than to strings and back. Because numbers are otherwise 64 bit floating point, with 53 bits of significand, this means the binary operators will not work to get the integer part with numbers larger than 2**31. Math functions are the right ones to use if you're actually doing math.
Maybe fortran programmers are too busy solving real problems? ;)
Epic! bookmarklets are insane
If you already know your way around the angular landscape, the documentation is fine. If you're new to angular, reading the documentation is like reading Greek. This isn't true for all of it, but a lot of it isn't very well explained for new comers. 
I can't recommend codewars.com strongly enough. Coding challenges for absolute beginners to the highest level experts (one challenge has you implement a compiler). Once you successfully complete a challenge, you can see others' solutions and see which ones the community has voted the best solutions. Additionally, there's a discussion section for each challenge. It's an awesome way to test yourself while providing examples on how to improve. Finally, you can also filter challenges by difficulty and topic (algorithms, arrays, functional programming, etc.).
I would also add that using fs to read the file and then spit the text back out is a bit, odd. Learn to use middleware libs like connect. They're fantastic for such stuff. 
Thank you
there's a similar script for the [harlem shake](http://www.moovweb.com/blog/happy-valentines-day-internet-behold-the-harlem-shake-bookmarklet/).
Firebug is my personal preference, but that's largely flavoured by my job requiring me to frequents inspect XHRs. Firebug is the only tool I've used that does that nicely. Chrome's equivalent is awful and primitive in comparison.
Although I hate to deny the fine users of /r/javascript the opportunity to rake in billions of dollars, I've removed the post because /r/javascript is not a job board.
Fortran is really good at processing numbers. It's written for people who care whether or not their floating point numbers are 32-bit or 64-bit precision. JavaScript has a very squishy concept of math. You'd have a hard time re-implementing precise IEEE floating point in JavaScript. Any translation would probably require a significant re-work of basic concepts like addition and multiplication. That would make math slow. I don't see why anyone would want a Fortran with slow math, since Fortran is used mainly for number crunching.
Even IE11 developer tools has it! 
Definitely took inspiration from that!
Anyhow, the point was that floor()-ing and truncation only looks similar for positive numbers. Typically, truncation is done by casting to an int (or a long) or by using a truncating division operator (if the language offers such a thing). E.g. Python does truncating division with // and Dart does it with ~/. If you're only dealing with positive numbers (positive 0 included), floor() will work fine. With ES6, you can use [Math.trunc()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc).
&gt; Doesn't matter if you're programming in spaghetti-land (functional programming) I think you may have confused _functional_ programming with _procedural_ programming.
Should have contained more than one paragraph for the "injector" part...
Those onChange events work, but you could also access the value of the radio buttons from JS. [Example](http://jsfiddle.net/adhfu2d3/)
[Select2](http://ivaynberg.github.io/select2/)
I (Kyle Simpson) offer paid corporate trainings with an intensive 3-day version of the 1-day course on Frontend Masters. If you're interested, please contact me. @getify on twitter, other contacts: http://getify.me
Kyle Simpson gives excellent presentations, so if you can hire him, I’d recommend doing that.
I improved yours a bit by getting rid of the switch statement and preventing an empty window opening if none of the checkboxes were selected. http://jsfiddle.net/adhfu2d3/3/
Consider the jQuery UI one - http://jqueryui.com/autocomplete/
True, but now we have a benchmark to prove that: http://jsperf.com/web-workers-handling-ajax-calls-optimisation-overkill . My coworker was arguing that webworker approach may be better because it makes JSON.parse asynchronous.
Sencha architect can do that but isnt straight JavaScript its using a framework sencha touch
Data passed between the main page and workers are copied, not shared. Objects are serialized as they're handed to the worker, and subsequently, de-serialized on the other end. The page and worker do not share the same instance, so the end result is that a duplicate is created on each end. Which means that you're not saving yourself any time by doing the `JSON.parse` inside the worker.
You tell him girl!
you will save time if there is a lot of stuff going on in the main page so the JSON.parse will compete with that for resources, you are correct that it will never take less time though.
This demo supports a subset of the (quite large) JSON Schema specification. If someone is interested, can you help me? What are the features of JSON Schema that you'd like to see supported? Supported features: - type: string - enums - minLength - maxLength - pattern - type: number - integer - minimum - exclusiveMinimum - maximum - exclusiveMaximum - type: boolean - type: array - items (tuples) - minItems - maxItems - type: object - required properties - optional properties
But what I'm saying is that when passing the parsed JSON from the worker to the main thread, the worker essentially has to serialize/stringify it before sending it back to the main thread anyway. And the main thread then has to deserialize/parse it again in its own thread. So you're theoretically doubling the amount of work.
good point, though workers use a different algorithm to transfer data (structured cloning) so not necessarily. But yes in general it's of most benefit when you need to filter or do calculation on the data before sending it babck.
Some of the reasons in the article are why my company has never used anything like this or frameworks but this: &gt;if it continues to gain traction next year it will be "What's wrong with Flux, use [new framework]". is what I've been preaching for years. 
This article and these comments make me wonder what kind of code people are writing with Angular. I find it to be excellent for creating components and widgets. I think that making HTML the source of truth for the application plays very well to the browser paradigm. The browser is an HTML engine first and foremost. Angular allows us to quickly and effectively extend native HTML with our own bits and bobs. We can encapsulate complex functionality in our own "shadow DOM" of sorts, represented as nice, neat HTML tags (directives). That's not "what's wrong with Angular", that's exactly the purpose of Angular. The rest of the author's points are, similarly, not wrong, but go against my view of Angular almost totally. No server-side rendering? Nothing prevents you from doing some rendering on your partials prior to serving (and the server isn't the place to render most HTML anyhow). Two-way databinding considered bad? That's exactly what we need in order to extend HTML functionality, e.g. creating new form input types, reacting to user input functional-reactively, etc. And like /u/Conradfr said, it's generally not slow anyhow, and a bit of refactoring can solve most slow-downs. Is Angular perfect? No. It certainly could use continued improvement in dirty checking/digesting, although it's not the horror-show the author claims. The rest of the claims read to me as someone who's using the Angular differently than it's meant for. I use Angular because it gives much-needed power and extensibility to HTML. If you're going to code as if Javascript needs to be the primary driver of the app, Angular is the wrong tool for the job.
Regarding your second point, Jetbrains' Angular plugin works quite well to navigate the codebase, and variable assignation is more obvious if you use the Controller As syntax.
Love it! You should add a way to TinyURL a link with this embedded. That would be fun. Could be the new rickroll!
Thanks for all your help everyone! I greatly appreciate it! You were all super helpful!
What are you doing with Angular that you're running into problems with "global state"?
&gt; people should filter more once and save the data instead of in expression where it's gonna be called too many times this is already fixed in 1.3.0-rc.2 where filters are evaluated only when input changes.
I just switched to purescript and FRP, I will never go back to this mess.
is this your project?
It is very possible to use it for web-component-like apps. Those widget apps should not touch the location or any other elements outside their scope at all and they should have their state stored in themselves. If you run two routers on one page of course it is not going to work. That is no problem with Angular-but rather problem with the guy sitting in your chair.
What was your inspiration for this project, and did you write the components it uses?
Is that used in production anywhere?
I you are on the same domain, or have lifted the Content Security Policy (In your special parser), throw a get request at &gt; http://www.industrynet.com/phone/xxxx and parse the output
cool stuff. Now if you could write a component that produced the json form description file from a json data schema, app developers could design by data, so to speak. I'd be interested in turning such a suite into a startup if you were.
nice!
 $.getScript('//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js', extractPhoneNumbers); function extractPhoneNumbers(){ var ids = [], $phones = $('a[href^="javascript:dispphone"]'); $phones.each(function(){ ids.push(this.href.match(/\d+/)); }); var extractAllData = Promise.all(ids.map(getDataFromId)); return extractAllData.then(function (data){ console.log(data); return data; }); } function getDataFromId(number){ return new Promise(function (resolve, reject){ $.get('/phone/'+number).then(function (html){ var split = html.split(/&lt;\/?strong&gt;(?:[\s\n]+)?/igm); var numbers = split[1].split(/\s+or[\s\n]+/); var company = split[0].split(/Phone\sNumber\sfor\s|\son\sIndustryNet/)[1]; resolve({ company: company, numbers: numbers }); }, reject); }); }
There's one for node I used recently which I used for command line stuff. Nothing fancy https://www.npmjs.org/package/eitrium-auto-complete
&gt; Angular is slow. And with dirty checking and HTML parsing always will be. You can’t fix broken design. It is not slow today, and with Object.observe it can become hard to beat the performance. Listeners/watchers on a fine granular level inside directives minimises the overhead related to rendering, and this design seems inherently better than architectures where application programmers need to reason about listener setup.
https://hgoebl.github.io/mobile-detect.js/
Really? On a page with an Angular app that you have no control over, can you inject another Angular app that plays nice with the old one and is isolated from it? If this is possible I'd like to see it, please.
I always wonder that as well. How much logic are they putting in their HTML? The fact that he references Flux confuses me even further! If he is using React + Flux then literally all of his logic is in the same file as his HTML. I've used both React and Angular in production, they both have their use cases and I like both quite a bit. Further, I don't understand the API issues he discusses. There is this theme around Angular that if you use Angular you're stuck with all of these concepts and APIs, that you're not writing JavaScript applications but angularjs applications. I don't understand it all. In comparison to say jQuery, or Ember, or BackBone you are writing pure JS, long live the POJO type shit. With Ember, Backbone, Knockout, yourFavoriteMVXFramework, you're using their APIs 100%, including their getter/setter nonsense.
as /u/do_u_realize mentioned, Sencha Architect is maybe close to what you're looking for. To clarify a bit, though: - It allows you to use either ExtJS or Sencha Touch - so you can do both desktop and mobile apps with it. - It is indeed built around those frameworks and the components of those frameworks, so it's not meant to drag/drop and layout a bunch of HTML and then you write vanilla javascript - you'd use Sencha's frameworks to build your tooling. Full disclosure: I am a developer on the Sencha Architect team.
Place nice how? Interacts? Depends. If you want the two apps to interact that's super easy, you just add one of the modules as a dependency. Bing bam done. Separate? Just as simple. You have to manually bootstrap the application but that's a single line of code. Not a big deal.
You're writing your code wrong if you can't find the declaration of a service without your IDE. Follow a style guide. Use named functions. Don't use callbacks for any high level modules or even for most tasks. 
JavaScript was my first language, I spent a lot of time learning the functional flavor, when I see class based programming or work with it I kind of don't get the point. Maybe I don't get OOP but functional programming makes more sense to me for dealing with data and GUIs, and I find prototypical inheritance more useful and easy to understand. I've never been able to determine if this is based on a general ignorance of actual OOP/classical inheritance or a legitimate opinion.
Like learning fortran?
That makes sense. While I do agree with you that it's difficult, I feel that this wouldn't be a different story with other frameworks. I feel the problem you're speaking about is rather general: finding a way for a framework that does things X way, to communicate with a separate lib that does things Y way. As an example of a way to accomplish this without "global state," I recently implemented a new angular app into my companies existing RequireJS/backbone application. We found that registering require modules as value providers in angular allowed us to bridge the communication gap between the two applications, without introducing global state. This also has the benefit of making it easy to mock those dependencies from the other app.
STFU LOL
That smile at 30:15 :D FUCK YEAH, I SHOT MY SELF CREATED INVADERS AND EVERYONE SAW!
Like I wrote, I'm not talking about modules. On a page you have no control over you can't rely on the other Angular at all, but you can't affect it either. You know, like a web component. Manual bootstrapping doesn't work as far as I've seen. If there's already an Angular app on the page with automatic boostrapping, loading a new Angular instance conflicts with it. I know this goes beyond what Angular was made for, but it doesn't seem like it should have to be this way.
&gt; Two-way databinding considered bad? It's beautiful within a single component/widget (e.g. linking a slider's value to a text field). It starts to fall apart when applied at the application level. At least that's my experience after working on a large Ember.js application. There's a point at which you just can't keep all the side effects of one value change in your head anymore... That's where Flux and other architectures/ideas come in handy: They make the events explicit.
How about a direct link to the story instead of to your site's summary ? Traffic spam reported.
Yes, two different versions of Angular. I've managed to get two versions to load in separation, but if the page has a ngApp set for its own purposes, the new version automatically tries to bootstrap but of course fails. Unless I've missed some config or trick, that is.
1. Yes, MIT is a good pick. 2. CommonJS has the most momentum and largest tooling around it. Instead of coding everything multiple times, just write it once in CommonJS and (optionally) bundle it for AMD/ES6/whatever. 3. GitHub and npm is all you really need IMHO. But others might suggest Bower, Component.io, [insert-your-fad-package-manager-here]. 4. You can write tests with [tape](http://www.macwright.org/2014/03/11/tape-is-cool.html) (or [prova](https://www.npmjs.org/package/prova)) which works in node and browser. [More info](http://substack.net/how_I_write_tests_for_node_and_the_browser). For automation across browsers, [zuul](https://www.npmjs.org/package/zuul) or testling-ci are useful. You might get some other ideas from my module workflow [here](http://mattdesl.svbtle.com/faster-and-cleaner-modules). 
Very cool - if I was in front of a big crowd and being recorded on video, I'd probably be so afraid of making a mistake or looking stupid that I'd barely be able to code Zork, let alone Space Invaders.
Another suggestion: https://www.npmjs.org/package/user-agent-parser
Thanks! Removed.
Probably broadcasting on rootScope all over the place.
It sounds like you want to use modules as applications. Applications aren't meant for a 'page you have no control over'. I've bootstrapped two applications without a problem. I see no reason you couldn't self-bootstrap another application from within its own script, you'd just need to define an element selector specific to your app. I haven't tried this with nested apps because nesting apps doesn't make sense.
Are you a professional developer? The reason a people focus on workflow is because they eliminate barriers to productivity. If you are dealing with a CSS or javascript preprocessor this stuff matters. It speeds up iteration and everyone knows, especially in CSS, that speed of iteration is probably the most important thing. Why are we using SCSS rather than plain old CSS? Because it is much better organized and more easily maintainable than CSS. I build large scale single-page-applications. If I had to refresh my page every time I made a minor change it would take me a few minutes to recreate the condition I am trying to change. This simply isn't practical and it costs me and my clients time and money. Workflow, environment, and build tools are one of the most important places to invest your time. Not every developer, but every team needs someone investing in these things so the rest of the developers can just worry about writing good code and not dealing with cumbersome processes. I'm not a hipster developer on a fad train, I'm a professional software developer with profits and losses to worry about. A little time setting up a great environment saves me hours every week and lets me make more money.
Nice, I've been thinking about the same thing lately. What about dates? Also workflow seems like the next big step.
 function Account(startingBalance) { this.balance = startingBalance; Account.prototype.deposit = function(amount) { //add to this.balance } Account.prototype.withdraw = function(amount) { //if check if has enough to withdraw from this.balance //subtract //else //return error message } } var account1 = new Account(500); document.write(account1.deposit(50)); //add money (550 balance) document.write(account1.withdraw(500)); //take 500 (50 balance) document.write(account1.withdraw(300)); //error message 
Well, [Bodil Stokke](https://github.com/bodil) is using it to make a game engine for the company she is working on.
&gt; I'd barely be able to code Zork, let alone Space Invaders. That is your problem right there, thinking that Zork is easier to code than Space Invaders. ;)
Why?
correct transferable only cover array buffers and they can take longer to create/unpack then stringifying the object.
Adobe Edge maybe (for animation). I know that this is not JS but worth checking.
I agree with you on everything that you said. I'm not talking about scss/haml/coffescript etc or live refreshing. All of those very valuable. I'm talking about the fact that people invest way too much energy and time into fiddling with their environment these days. They also think how they need to use the very latest tools in order to be relevant. For example command line is all the rage again. So everyone who uses codekit or live reload will be considered a lesser developer. And don't even think about copy pasting a jquery plugin / scss file into the project folder by hand. Doing so is considered "unprofessional", and people are being bullied into using unecessary tools. Who gives a damn if you copy paste something instead of writing "require module xy". Both take like 5 seconds. That's my point. This problem doesn't end with tooling and workflow. People tend to overcomplicate their code aswell. They use angular-js for miniscule projects, because angular is cool. They use insanely modular OOP where 20 lines of jQuery would do just fine. Basically people are acting as if they were building massive complex applications, where in reality they just aren't. In my opinion this kills creativity and makes coding less fun.
Everyone has a right to express their opinion, and maybe this person just needed to vent a bit, but articles that make huge declarations without any justifications really rub me the wrong way. "Object.observe is wrong to use". OK, why? Give me reasons. Otherwise, you're not informing/convincing anyone, just preaching to the choir.
Son of a bitch, this is pretty hard.
This was really fun to watch. And it makes me want to try to do a simple 2D Game with JavaScript. Pong? Asteroids? Arkanoid?
I think pong would be really cool, especially if you used something like node to allow remote play. 
jQuery
She was using Emacs, but I was surprised she wasn't using one of the live coding modes. I wrote one a few years ago called [Skewer](https://github.com/skeeto/skewer-mode). It allows evaluating JavaScript forms (and CSS and HTML) in the context of the browser page entirely from inside an Emacs buffer, so the page never actually needs to be refreshed. 
So like multiplayer Pong with a global chess-style leaderboard and automatic matchmaking? Players pay a monthly fee in bitcoin, top player in leaderboard gets most? Minus our percentage, of course. Let's do it.
Again, I agree. I wasn't talking about top tier developers who work on huge systems. Perhaps I was too harsh and you misunderstood what I was trying to get across. English isn't my native language so sometimes I struggle to find the right words. I work in a two man team (design &amp; front-end / backend &amp; servers), and we're not building massive complex systems by any means. Our databases rarely have over 20 tables. A few dozen templates, and a couple of thousand lines of custom JS. We use a rails stack and everything that should be automated is automated. Cloning and setting up environment for an existing project requires nothing more than: * git clone xy * bundle install (get dependencies) * rake db:migrate (build database) * rails s (fire up the server and start working) Thats it. If you wanna deploy just type "cap deploy" and it's done in half a minute. Rails minifies and concats all js/css by default. We also use haml/scss/coffeescript. Browsersync too. It's a simple stack that is well automated and saves loads of time. This is reasonable and not what I was talking about. I was talking about people who are following trends instead of learning how to program properly. People who read tons of articles on tooling, newest libraries, cool hacks etc. They do TDD and consider people who don't noobs. They have perfect environments and know everything in theory, but when push comes to shove they fail to deliver on time, or at all, and end up with overcomplicated messy code. Basically, I think it sucks when people use something because they read somewhere how it's the **hot** thing right now. Everything has it's purpose and should be used when necessary, not because it's currently cool and hip (I'm looking at you Angular JS). Gah, I don't know how to express what's on my mind right now. I'll just stop raging :3 
In a similar vein, here's one building a game using Reactive Programming. https://www.youtube.com/watch?v=FLSNm7AIBoM&amp;list=PL-0yjdC10QYpmXI3l-PGK1od4kTWOjm_A&amp;index=26
Most impressive part is that she did it all without using any libraries (not even jQuery!). Edit: Yes, I'm aware of more targetted frameworks like Phaser and Pixi.js. I was saying "even jQuery" because jQuery is typically something a new person might use. Also, I've seen a good (Ludum Dare entry) game developed with jQuery it reminded me of: https://www.youtube.com/watch?v=UZZFbtyDAUA&amp;list=PLI8SVtQ-CtqAa4jfz6V3UZ29EkGINctlK
This would be done in a new version of the browser, ergo new UA string.
Looks like it's only for mobile or not. Unfortunately I need more info than that.
Awesome, looks promising. I'll check out the source.
This kind of stuff is really cool to watch. I wish programming live streams were a thing.
Unfortunately you cannot assume that the UA string will change every time a feature changes, especially if it's not something that causes breakages for developers (which would be the case for something like sync delay which is an implementation detail rather than something an app is likely to depend on). It also means the new UA will be in a broken state until you update the site to take it into account, which seems like a lot of work :-P
`Angular.bootstrap( domElement, app )` https://code.angularjs.org/1.2.26/docs/api/ng/function/angular.bootstrap This will bind start an angular app and bind it to the given DOM element, with absolutely no global state whatsoever. You could have 50 apps running concurrently on the same page this way without issue. 
If your entire page is being managed/rendered by one app, then you can't embed another one in it, since the parent app might rerender the whole page and destroy the child. This would be the same in absolutely any framework. React, Ember, Backbone... even manual jQuer or DOM manipulation. It has nothing to do with Angular.
Don't worry, you sound more and more reasonable with each post ;). You write very well in English, better than many native speakers. Ruby/Rails is lucky to have pretty great tooling, that process sounds pretty damn good. The stack I've been working on is much more cumbersome to deal with, and along with it we have strict compliance rules we must follow. Tooling for us has been the difference between a nimble organization and a totally ineffective one. I'm not a big fan of strict TDD but I think testing is essential for anything larger than trivial applications. My codebase has a long shelf life. Long tot he point where we have to invest significantly in server-side logic and testing because we know the server will outlast the client by ten years if we do it right. Every time I catch a bug in production from anything but an edge case I get disappointed that I did not write a test coverage. That's different that true TDD where you write the tests first. There has to be some balance. That said, we usually spend the better part of a few weeks after each major release improving test coverage and cleaning up technical debt. Without those tests, though, our software which is now 6 years old with hundreds of tables and years of new custom setting support and little bug fixes would be impossible to work on. I feel your pain in regards to the whole Angular JS thing and the nature of trends in general. That said, in 2009 people would have called you a trend follower for using a Ruby/Rails stack. I've done some Angular Tutorials and I like a lot of things about it, but I wouldnt want to marry it.
How are you finding Purescript in production - and what FRP tooling are you using? I've been eyeing off Purescript for a while - possibly with React - but would love to find or build a full stack framework built on FRP. 
I'm not sure why she would use jQuery for this. There's very little HTML in the game.
As /u/zobier notes, it creates a `script` node and adds it to the DOM, but a vital detail is that the node is immediately removed. That's why you don't see it in the DOM.
Great link, thanks for posting :) In yet another similar vein, building a game using Functional Reactive Programming (in Elm - which compiles to JavaScript) https://www.youtube.com/watch?v=6PDvHveBtDQ This is an Elm tutorial in a series of 5 videos. Interesting to compare and contrast the code.
17 year old dev Nelson live streams his development of Unturned which is growing in popularity on steam. 
I think you wanted to say Kinetic, Phaser or canvasQuery.
i use https://github.com/ded/bowser
It actually depends on what way you want to go. Anyway, I'd recommend you to go for bootstrap first (Assuming you've already a grasp on jquery) then go for any complete framework (Either Backbone/Angular/Ember). Save Node for the end. 
Was anyone else on here having any issues [getting it to work](https://news.ycombinator.com/item?id=8425456)? It does look great though. 
&gt; as your application grows, two way data bindings will cause issues. Can you elaborate or give an example? I don't consider two way data binding to be the core of AngularJS, since it is implemented in terms of directives that you could easily replace with your own when needed. It is, for example, easy to make a directive that listen to changes more relaxed than ng-model. You don't usually need true two-way-binding when you use ng-model, and you usually don't need to be notified about changes on every keystroke. Would this solve the problems you are thinking of?
Imagine something like an embedded Youtube video, but a widget instead and not in an iframe. It could be destroyed, sure, but in normal operation it should just be easily embeddable and nicely isolated from the rest of the page. It's not an exceptional solution. Web components strive for this functionality and it seems like Angular version 2 will have something like it. jQuery has a noConflict method and has no problem running several instances on the same page.
If there's already an ngApp on the page (used by the other app), you never get to manually bootstrap like this.
&gt; isomorphic javascript Thanks for the correct terminology. The biggest pitfall I see with this approach is that you have to run javascript server side to be able to utilize the pre-rendering the data on the page. In the react demo they use PHP to toss it to express and back to generate the data. If you have many react components on a page, I feel like this would be an issue. Secondly, if I distribute portions of this code as open source, it raises the barrier of entry for anyone hosting it to now have to install multiple web stacks. I am just starting my research on this but it sounds like they need to share the common language (at least with regards to react) in order to generate the correct checksums for react to pick it up and use the virtual dom. 
&gt; What about dates? Added to my TODO list, thanks! &gt; Also workflow seems like the next big step Not sure what you mean, could you explain me?
Yes you can. The presence of ngApp doesn't stop you. The only issue is if you're trying to bootstrap onto a DOM element already owned by another app, at which point it wouldn't work regardless of framework.
&gt; Imagine something like an embedded Youtube video, but a widget instead and not in an iframe. It could be destroyed, sure, but in normal operation it should just be easily embeddable and nicely isolated from the rest of the page. It's not an exceptional solution. Web components strive for this functionality and it seems like Angular version 2 will have something like it. jQuery's noConflict method will make no different whatsoever, since it has no bearing on this scenario. Angular already runs in 'noConflict' mode by default, as does every other such framework I've ever seen. There are no globals. If you have two separate Angular apps on the same page, they will work perfectly fine together. The same goes for React, Ember, Bootstrap - take your pick. If you have an app managing the whole page, and try and insert another app inside an element owned by that page without telling the other app about it, then it will result in undefined behaviour. Even in 'Web Components', since that's not remotely what they are designed to do, nor should they be. You'd need a hook in the app to explicitly allow this.
For now I'm just looking for feedbacks. The underlying libraries are MIT licensed (and they always will be) but I can think of a bunch of great products on top of them if you are interested: - write a generic frontend to interact with all the JSON APIs: it's sufficient to describe the structure of the payloads as a domain model or a JSON Schema, plug it in the generator and you get the UI automatically - use it as an engine for products like form builders - a tool for designers to produce mockups in a breeze - a product for JSON APIs that allows to generate automatically documentation, a default JavaScript client and serverside validation code (Node.js) based on the tcomb library
&gt; Can you elaborate or give an example? The big problem with two-way bindings, specifically as implemented in Angular, is that your application is one big blob of shared mutable state. When you edit something in one component, it can be hard to reason about all the state changes that are really happening. For example - You load a 'Contact' record from the server and bind it to a page. - The user edits this, which modifies the 'Contact' object directly - so you're actually changing a shared reference that might be used elsewhere. Perhaps you've stuck it in a cache somewhere, or bound it to another section of the page? - Maybe there's a child record three levels deep inside the contact that you've bound somewhere that seems completely unrelated during a code review, but in production is accidentally changing details on the parent contact - and then at some point the user goes to that other section of the app immediately after the first, and clicks some button to do something, which then commits the data they just changed without realizing it? In a simple app it's pretty easy to keep track of and add defensive copying where needed, but this complexity increases exponentially with the size of your app, and can very quickly become a nightmare to manage. Combine this with the way Angular encourages the user of 'watch' statements, and you can have events firing you weren't expecting inside another component, which then cause other watches to fire, in a big cascade of updates and race conditions. Consider this - every component on your page is effectively sharing data with something else. If you bind multiple components to the same data via two-way bindings, then you've broken encapsulation - since one component can accidentally directly mutate the internal state of another component. At work, we've found this causes all sorts of weird glitches - i.e. a Date picker than got out of sync with timezone information, because something changed when it wasn't expecting, and two datepickers on the same page that would cascade events back and forth between each other since they both fired events when the date changed. These were mistakes on our part that were easy to work around - but this type of thing is easy to slip through in the Angular model, and becomes exponentially more difficult to fix the larger your app gets. &gt; I don't consider two way data binding to be the core of AngularJS, since it is implemented in terms of directives that you could easily replace with your own when needed. It is, for example, easy to make a directive that listen to changes more relaxed than ng-model. You don't usually need true two-way-binding when you use ng-model, and you usually don't need to be notified about changes on every keystroke. Would this solve the problems you are thinking of? No Using explicit event handlers instead of watches solves a lot of the issues, but you're still stuck with shared mutable references - so you either need to be very anal about defensive copying (Painful, and slow) or you're absolutely going to paint yourself into a corner at some point. The problem isn't specifically two-way data bindings, it's two-way data bindings to a shared mutable reference. If you use purely immutable data structures, you can still have a style of update that looks and feels a lot like two-way bindings, but avoids the shared mutability. This is probably the main selling point of React/Flux. tl;dr Unrestrained shared mutability is almost always a bad idea. No matter what you do to try and make it manageable, it's going to come back and haunt you at some point. Any attempts of 'working around it' are just putting lipstick on a pig. 
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
Just found this post, had a few questions about this. &gt; First you could write your app twice and keep it in sync and manually add the React checksum (it's just a standard adler32 of the markup -- but make sure you get the data-reactid attribute and whitespace right). Do you know how the reactid is calculated? I assume if we are rendering server side we could normalize the output to react by stripping whitespace. Then the adler32 of the markup should be correct? &gt; The better alternative (again, only if you really don't want to run JS) is to cross-compile whatever language you're writing your server side code in to JS. What does this mean? What would you compile, assuming your using PHP from the server-rendering example that you could pick up in JS? If its the views then it would ideally be some sort of template library that can be compiled natively in both. I can't see how that would work with react though?
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
&gt; 17 year old dev Nelson live streams his development of Unturned which is growing in popularity on steam. Here is the link http://www.twitch.tv/dev_nelson 
It was ok - for an absolute beginner I think it is a nice overview of Angular and how its separate pieces fit together. There was not a lot of discussion on how to scaffold a project (this is something I think a lot of beginners could benefit from) and it did not go into much detail about the digest cycle which is one of the more interesting and useful things to know about Angular. Overall a useful read, but not a one stop shop if you ask me.
This is a very bad idea for mobile connections - unless your goal is to waste all your customers' bandwidth on your site so they never come again.
This is just an honest question, but why is this only available to students? What if someone literally just graduated a few months ago? Even regardless of that, what about people trying to learn on their own? Again, I'm not trying to be a buzzkill, I just want to know why.
I'm in! 
Well, of course you'll need a common language between the client and the server if you want to share logic between the two. Since the clientside is pretty much limited to Javascript, you'll need something on the server that is able to execute Javascript. That's the only way you'll be able to render the initial page state on the serverside and let the clientside pick up where the server left off. Passing everything to NodeJS (more specifically express) is only one way of going about solving the "render Javascript logic on the server" problem. In Ruby you could use therubyracer, PHP might have something similar, maybe [this](http://php.net/manual/en/book.v8js.php). As long as you have a piece of software that is able to pipe Javascript to a Javascipt Engine and get back the resulting code, you can do the serverside rendering you require. What makes ReactJS so good for isomorphic Javascript is that it doesn't depend on the actual DOM to render out its views. Other frameworks like Angular do, which makes serverside rendering of an Angular app a lot more complicated. It's probably not impossible, but the way to do it wouldn't be as nice as React's renderComponentToString. Mind you, even with React there's still some work to be done in order to get it all up and running.
http://xkcd.com/936/
[Image](http://imgs.xkcd.com/comics/password_strength.png) **Title:** Password Strength **Title-text:** To anyone who understands information theory and security and is in an infuriating argument with someone who does not (possibly involving mixed case), I sincerely apologize. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=936#Explanation) **Stats:** This comic has been referenced 841 times, representing 2.3201% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cl3ou3o)
Well I'm thinking about a process where the user enters some data, gets a quote that is valid for a few seconds and then chooses to take it or not. They basically need some way of storing state, some token for the quote that they can send back on the accept quote request to complete the process. I've worked on a few web apps that have that sort of process, I think a generated front end will need to be able to handle moving through a sequence of api calls while keeping some token for the state to be useful for more than the most basic use cases. 
I think there's more to it than that, but I agree the article is bad and isomorphic code is not the only part that should be focused on. Meteor has APIs for running specific code within a JavaScript file on particular environments, or for running specific files within a package on different environments. But it also automatically hooks the package files into the build chain. When you add a package that has jade templates, some client template JS, and some server JS, Meteor will add the server file(s) to the server application, precompile the jade files, bundle the compiled jade and template JS in with the client JS bundle, hot reload the server, and hot reload all clients with the new client bundle. If a package is installed that contains only SCSS, LESS, or Stylus code, it will be precompiled and then the resulting CSS is automatically live injected into running client applications without a hot reload. All of those precompilers are implemented with Meteor packages which add build steps for their associated file types. There are also some systems planned for adding custom deploy hooks and centralized docs integration into packages. More importantly, I believe the new package system also focuses on including compiled binaries for packages that depend on them, so that the package manager will download the appropriate binary for your architecture and run it without you having to install a bunch of build dependencies and compile yourself. So I think that it's more appropriate to say that it has more to do with integration into Meteor's build chain and CLI than just integration with Meteor's code style. Though that's certainly a part of it - the fibers style just doesn't mesh all that well with async/callbacks and littering NPM with fibers-specific wrapper packages is unnecessary when you can create a more tightly integrated package ecosystem. In the article, he linked to [a post he made over a year ago](https://github.com/meteor/meteor/pull/516#issuecomment-12919473) that more thoroughly explains the decision to bake their own package manager. Really, the Meteor blog is pretty much always posts that seem to be written for people who have never heard of Meteor. The mailing list and github are where the real discussions happen, and the place you should go if you want to see the actual, sans-PR conversations. Anyway, you're right about the package manager being about creating a fully-integrated solution. I find it silly that some people are saying the package manager has an "ultimate aim of locking you into their platform". *It's a full-stack framework. If you're using it, the decision to use it was made very early in your project's lifecycle, and you've accepted that you're pretty much locked in on both server and client regardless of the package ecosystem it uses.* This decision was probably made because you or your team favored Meteor's minimal configuration and glue code so you could rapidly get your application to market, even if that means you have to live with potentially controversial choices made by the Meteor development team. For some applications, time to market is the difference between success and failure. Honestly, no matter what framework(s) you're using, making a switch halfway through development is going to be very costly, so this decision should not be treated trivially.
It's just a pleasant way of getting them hooked, 'the first one is always free'. Also, it's probably easier to regulate with verified emails and stuff. Can't just let everyone have it or it essentially becomes a free tier
Check out /r/citybound the dev livestreams development
If any of this is set to auto-renew at the full price, then this does more harm than good. It's over $2,700 per month of crap to cancel spread over 15 services. As a student you have the opportunity to learn how to actually deploy your apps and how these services work under the hood. I would recommend you go deeper even if you take advantage of this offer.
love that website background. I've never used PhantomJS before and never really looked into it. Seems pretty cool. I might check it both of these out
Script tags cannot be self-closing, you must include the terminal tag. ``` &lt;script src='confettiSO.js'&gt;&lt;/script&gt; ``` &lt;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&gt;
 $=window.$||document
Learn what you need for the work you want to do. If you're not building something in Javascript already, that's your next step.
Thank you. I fixed that since I posted. Still nothing.
18 bytes? I don't know, that's 18 more bytes than [VanillaJS](http://vanilla-js.com/)
No diy.min.js?
Yes, but it's a manual process. You must remove the spaces around the equals sign. 
Impressive! Too bad many of the features don't work in IE.
How does this compare to tools like CasperJS?
It'll save a lot of bytes down the road though.
Why would I need to use something like Phantom in the first place?
Really fun concept. I like that figuring out one puzzle helps you in the other. I'd love to see a more mobile friendly version.
Yes, I agree, these are the some of the things I envisioned in approaching you, and also things I've tried to replicate in hacky ways (storing everything about an wep page in json and traversing it when a user visits the website to generate the page for him): http://connectwithcontractors.github.io/ If you are interested in buiding this out as a crowd sourced company on http://assembly.com (I'm @AlhenaWorks there), I would join the team to complete bounties, and as the projects creator you would create the bounties and set the reward in app coins (similar to shares in stock) for completing the task requirements for each bounty, allowing you to control divestment in the venture while still allowing others to work with you and get as much equity as you are willing to give up to reward them with.
I've been doing some polymer.js programming lately and their whole architecture really sort of discourages or obsoletes using jQuery. They handle the core issues jQuery solves: Ajax and element selection. So, including jQuery really just let's you use convenience methods like `.style()` or `.animate()`, making me drop jQuery really quickly. The second I dropped jQuery, I realized how much I loved and used convenience methods that did little for me. Like writing `node.style["transition-property"] = "width"` is really obnoxious and so are your own animations. Proved to me you really don't need jQuery on modern browsers, maybe just an Ajax wrapper at most. It's also taught me tons in a short amount of time. JQuery abstracts SO much is insane. Learning with jQuery, you're really learning how to use jQuery more than you are JavaScript. tl;dr doing jQuery will force you to learn real JavaScript. 
So does anyone actually develop web pages without jQuery? That seems to be the statement this guy is trying to make, that you don't need jQuery. 
Thanks! What mobile features would you like to see? A couple that I had in mind was swiping to switch between minesweeper and sudoku as well as the ability to flag in the mobile version.
Nice work! =)
edgy.
You should link to the code so that other people can reproduce the issue and confirm your assumption.
This joke was only funny the first dozen times it has been done.
Yep. Here's a free course on Udemy that goes through enough HTML, CSS, and JavaScript to get you started, along with an introduction to a free game engine designed to be easy for beginners. https://www.udemy.com/free-prep-for-html5-game-development/?dtcode=Vc5S1pQ1DMcP Try this course first, and if you like it, you can look into my second commercial course, which goes into depth on 2D game development in JavaScript. https://www.udemy.com/html5-simple-game-development/?dtcode=sYhDPYN1DMeL PM me for a coupon code if you want to buy the commercial course. I'll give you a big discount for being a redditor.
You actually not always need jQuery Learn to use it only when you need it and not when you are lazy 
Seriously fuck this shit
But why not be lazy? What are the downsides of using it?
Aside from javascript, isn't the underlying language they share just HTML in the DOM? Not specific to React, but couldn't you just rewire the events once the rendered dom hits the page? With ReactJS this is obviously quite the feat since they use a virtual DOM, but the end result is just HTML with some events right? The logic could be something like &lt;div data-component="MyComponent"&gt;&lt;all kinds="of data"&gt;&lt;/all&gt;&lt;/div&gt; and some library picks up on that data-component and re-inits the page. 
AngularJS + Vanilla ES5
It's increase the load time of the page and slow down the code itself. But I don't say it's only bad, it's help you with cross browser compatability and short your code so you should choose if it's worth the load time, for example for my HTML 5 game I don't use jQuery but for my personal site I do 
I bet there's a jQuery plugin out there that does this
Cool, I will think about how to implement it. I just added swiping to change between Sudoku and Minesweeper using angular's default swipe recognition, it doesn't seem that responsive without the actual animation though.
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
Please read up on reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. **Consider this your only warning.** If you continue to post _only_ your site, we'll be forced to take action. Thanks for your understanding.
I actually got a bit excited for 2 seconds when I saw the examples, til I looked at the source. I really, really want something that IS the DOM API as per MDN docs, but works cross browser back to IE7, or even 8. "Just" polyfills and standard methods wrapped for consistency that I can drop into a module in place of window. Anything around? (The use of the word "just" usually implies it'll be a surprisingly large amount of work in my experience.)
Still on the javascript front page, but this was pretty interesting. https://www.reddit.com/r/javascript/comments/2ikxz9/livecoding_a_javascript_game_from_scratch_in/ 
First off, jQuery has saved me hundreds if not thousands of hours in development in the course of my career, and there is no substitute. It's impact on JS cannot be overstated. With that said, one of the largest problems that I've seen, is that it quickly becomes the hammer with which to hit every problem over the head with. How so? All too often I see devs, when faced with implementing a new feature, they rush out to find that perfect jQuery plugin. For simple apps, this is usually not a problem, yet for larger, more complex apps, it can become a huge problem. A little bit down the road, and you now have 20 jQuery plugins, and since there is no package or dependency management system in place, you end up throwing 20 `&lt;script&gt;` tags into your page. This also means that you'll often end up loading plugins that are rarely used, but which still incur a nontrivial runtime penalty due to the downloading and execution of the script file. Things like RequireJS do not really help in this situation; in my experience, RequireJS actually makes it a huge pain, owing to the fact that jQuery plugins are not able to be written in a modular fashion since they all augment the main `$` object. So once you load a plugin, it's there for the duration of the page's lifetime. jQuery also does not work well when you're trying to separate your application logic from the view manipulation, since apps made with only jQuery (and plugins) have no conventions in place to promote a clean separation. In other words, it's a library, and not a framework; further, many devs will use it _in place of_ an actual framework, which will lead to poor code (spaghetti) in the long run. My opinion, but the heyday of fully jQuery-centric apps is gone, replaced with smarter application frameworks like Angular, Ember, Backbone, Meteor, etc. These frameworks may still use jQuery behind the scenes, but they encourage (sometimes forcefully) that you not use it directly yourself. Instead, you use the API and conventions of the framework to write good modular, solid code with a clear separation of concerns.
&gt; works cross browser back to IE7 Do you actually need to support IE7?
This is great and all, and @horsejs predicted this long ago, but what sort of support is there going to be in the future?
No I can log into the site. I just can't bring up any tool or maybe I don't see it? The link for "Explore how these choices..." links to Javascript/void(); 
hmmm odd, works in chrome - what browser are you using?
This is actually funny, it made the post worth existing
Firefox 32.0
I could be wrong because I haven't tested this at all, but your variable "overlay" looks like it might be out of scope. Within clip() you reference the variable "overlay", which is defined outside of the clip() function but within the slide() function. But on line 887 you tell the map to call clip() every time the map moves. The issue is that when the map's event handler calls clip(), it's not within the context of the slide() function, and thus the "overlay" variable isn't defined and so overlay.getContainer() would be null. Once again, I haven't tested this at all and I could be entirely off base.
basically for integration testing your apps - if that's your thing. Lot of folks don't bother, but it helps you sleep at night if you can get some of this stuff automated on a big app
Yeah, what the hell is up with this framework's handling of keyboard events? [It's all over the place depending on your browser](http://www.quirksmode.org/js/keys.html).
It's been my experience that they're half-baked at present; really cool, but not quite fully usable. Combined with the [bug with breakpoints in Chrome](https://code.google.com/p/v8/issues/detail?id=2825), and it can be highly frustrating. I love Chrome's devtools, but these annoyances make it seem like they're not devoting enough resources to maintain them.
Angular mixes in behavior into HTML attributes in a way that some developers find to be even less favorable than imperative jQuery spaghetti.
I think the post lacks examples and links to substantiate what is being said. Also some of the things will be fixed in angular 1.3, which is on RC3. It would more useful and helpful to the community to talk about the concrete difficulties and the concrete problems the author found when trying to use Angular in his applications, instead of talking in so general terms. Where did you try to apply angular, which type of application, what type of screens made it be so slow, some code? That would be much more useful. For the points he made: &gt; App logic and structure expressed in HTML, which is enchanting for beginners but terrible for real development. There is basically no code on the HTML in most templates. For example if on ng-keydown we do ng-keydown="onEnterSendMessage()" we have barely any code on the HTML, only a 'link' to the Js behaviour. With well named functions I don't how this is a problem. Can you provide some examples of what you don't agree with, a badly written template? &gt; Two way databinding is an anti-pattern. In 1.3 one way data binding is provided and improved performance on dirty checking. &gt; It’s slow and brittle and it will consume mobile battery like hungry dog, for no reason Is there any evidence anywhere that Angular significantly consumes more battery? These things whithout measurements are very deceiving. &gt; you should never model app data flow with several events spreaded over x classes In angular you almost don't need a publish subscribe model. each directive observes the model and reacts to it, obliviating in most cases the need for publish/subscribe. Again here an example would come in handy to understand what is being said. &gt; Duplicated app structure with obsolete angular.module I don't understand this part, can you provide more info? &gt; Angular is slow. And with dirty checking and HTML parsing always will be Is it fast enough that a user cannot perceive any lag in 99.9% of applications? The 1.3 improvements will make it faster and there is now one way binding. Object.observe is already in Chrome and should make it fast. &gt; No server side rendering without obscure hacks Do 99.9% of apps need server rendering besides twitter? &gt; Angular is hard to learn Compared to what, React? Hard to say, i learned React after Angular. the lessons in egghead.io are all a beginner needs to become proficient and beyond. &gt; Google does not use Angular in production for their flag apps like Gmail or Gplus Why would they re-write their flagship products, they where there long before. If Facebook replaces React in two years by a next generation , are there any other prominent example besides Facebook? Looking at Gmail, I don't see any reason why it could not be written in Angular. Do you see any reason? &gt; Google does not use Angular in production, they can kill Angular anytime. They don't kill open source projects f this scale of adoption like that, worst case they give it to Apache like GWT. &gt; Will be rewriten entirely soon Do you see that a bad thing? Angular 1.3 will be around and be maintained, it's feature complete. You wont be forced to upgrade. 
Is this still supposed to be funny? 
Thanks! Never knew you could do that in chrome. 
Cool, but can someone explain to me how collisions are resolved? It doesn't seem to be coercive, so is that expected? Or does ES6 have some other way to resolve what a 'key' is? Or is this going to be a [Symbols thing](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)... For instance: &gt; var x = 5, y = 5, z = new Set([x, y]); &gt; undefined &gt; z.size &gt; 1 And then Date, which I'm not sure if it should be of size 1...: &gt; var x = new Date(), y = new Date(x), z = new Set([x, y]); &gt; undefined &gt; z.size &gt; 2 In ES5, you can sort of simulate a set (uses Object.prototype.valueOf): &gt; var x = new Date(), y = new Date(x), z = {}; &gt; undefined &gt; z[x] = x; &gt; Wed Oct 08 2014 18:06:52 GMT-0400 (EDT) &gt; z[y] = y; &gt; Wed Oct 08 2014 18:06:52 GMT-0400 (EDT) &gt; Object.keys(z).length &gt; 1
angular is the shit
Great site and very observant that most of us are just using jquery for IE compatibility. Without IE9, JavaScript is easy.
AngularJS
&gt; What's the oldest version of IE you need to support? &gt; Only IE 8, 9, 10 &gt; http://jquery.com/browser-support/ They should have put other versions of IE there, just to say "alright.. I guess you do need jQuery"
Agreed. I've edited my post to clarify my meaning.
Why do you even need var? Just take the var out since it's going to be global anyways. Actually, it looks like the minifier did that.
Why not tag or branch on git/whatever, and then install that. Not sure why you need to commit builds -- if you're using browserify it should be done at the application level rather than the module level. Or maybe I'm just not understanding what you're trying to do here...
case cannot accept a range like this. Case accepts an expression and if the case matches, it evaluates. It cannot check a boolean (here, checking a range). var foo = 0; switch (foo) { case -1: console.log('negative 1'); break; case 0: // foo is 0 so criteria met here so this block will run console.log(0) // NOTE: the forgotten break would have been here case 1: // no break statement in 'case 0:' so this case will run as well console.log(1); break; // it encounters this break so will not continue into 'case 2:' case 2: console.log(2); break; default: console.log('default'); } is proper code but you are using ranges. Use the if structure like the other code has. Look up how case works here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch
The WebStorm 9 EAP supports JSX: http://blog.jetbrains.com/webstorm/2014/09/webstorm-9-eap-138-2406/
Um, sorry but what is this for? Is this supposed to a joke?
instead of: Math.floor(4.5) =&gt; 4 ~~4.5 =&gt;4 
Unless you are concerned about your code being stolen (you really shouldn't be), then you could safely drop PHP from the list. There is no reason your game couldn't be completely client side with save functionality supported by LocalStorage or IndexedDB. If you wanted to, you could even distribute it as an actual application with [node-webkit](https://github.com/rogerwang/node-webkit). The most difficult problem will be parsing the text the user enters. For your first game, I would recommend going with a strict syntax and generous help files. Focus on learning the program language and less on parsing natural language.
\o/ Thanks for this! The killer feature for me is the ability to blacklist some features. I want to get more es6 into node 0.11--harmony. Generators, let, symbols and a few other things are already supported so I definitely don't want to transpile them. I'm going to try that as soon as possible.
&gt;**Does Angular use the jQuery library?** &gt;*Yes, Angular can use jQuery if it's present in your app when the application is being bootstrapped. If jQuery is not present in your script path, Angular falls back to its own implementation of the subset of jQuery that we call jQLite.* &gt; https://docs.angularjs.org/misc/faq If you're using AngularJS, then you're using jQuery whether you want to or not.
I run my traffic through Fiddler, which is a debugging proxy. With fiddler I have written some scripts (javascript in fact), so that when it sees my minified/uglified code being requested, it builds an uncompressed version and serves it in place of the uglified code. Then any errors show up with the source code instead of the obfuscated code. This works on both development and live environments and gives me the shortest path to fixing a bug, and testing it against production before it gets pushed to production.
It's a feature of the diy way. Once you embrace it, you'll never go back.
I'm mostly curious whether anybody has gotten in to work with their own code. Maybe a different tool than Uglify produces source maps that browsers understand better, but I'm starting to doubt it.
So overusing jQuery isn't the problem, overusing jQuery plugins are? There's no reason you can't using a minification/combination system to avoid all those extra js loads, though it still adds in time to handle the unnecessary code. To me, jQuery is quite different than more modern framework tools like Angular, etc, they deal with different issues. Initializing just jQuery takes an unnoticeable amount of time and with a CDN it has no cost from a bandwidth perspective. The hate on jQuery usage seems more of a "blame the tools instead of the carpenter" issue most of the time
You can't just throw a ! in your second case like that. All your conditions are totally fed up. Google for some working examples.
I believe the mp3 sound file is the cause of that, will fix it after some sleep.
It's a combination of both I think, as I pointed out jQuery provides zero architecture guidance, and so if you're using it as your only tool, then other areas will suffer. In a small project, the cons may be palatable, but in a larger project, you're going to be introducing classes of problems which actual frameworks don't even have if you overuse it. jQuery is also pretty heavy in a mobile environment, since bandwidth and CPU are typically much weaker than they are in desktop settings. Considering the findings around how much of a difference a second or two can make on user impressions, it's not something to discount. Relating to a CDN, there's [evidence suggesting that you're not really gaining anything](http://www.stevesouders.com/blog/2013/03/18/http-archive-jquery/) other than offloading that single file from your server; i.e. the grand premise of _"if most sites use jQuery, we can all share the same copy distributed via CDN!"_ doesn't pan out in the real world, or at least it hasn't thus far. The branch between jQuery 1.x and 2.x will likely only exacerbate the problem as well.
You did that? I did that! http://vimeo.com/105955605
Where? Edit: any way, you should at least destroy the bullets that go off screen, you are iterating in an ever increasing objects array.
Try CYO http://danielstern.github.io/cyo/
Well played... Well played.
And please don't say "Yes".
Nice share and a Good inspiration for working on games. Will hopefully try to explore it
 &gt; var x = 5, y = 5, z = new Set([x, y]); &gt; undefined &gt; z.size &gt; 1 Same as: new Set([5, 5]); &gt; var x = new Date(), y = new Date(x), z = new Set([x, y]); &gt; undefined &gt; z.size &gt; 2 x === y is false. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#Value_equality
Awh you guys! Who down voted him? Should we tell em?
Seems like set equality uses an algorithm similar to Object.is ("NaN and `undefined` can also be stored in a Set"), except without any differentiation between +0 and -0. Edit: subpar English and not enough elaboration. 
The link fails to mention losing any and all executional safety. The right solution is putting a file hash in any element that links. Reject the file if the hash doesn't match. Funny thing is, with a (strong) hash linking becomes possible.
First sentence: "Because each value in the Set has to be unique, the value equality will be checked and is not based on the same algorithm as the one used in the === operator."
jQLite != jquery, it's like 10 methods used only for dom manipulation 
Cross browserness level is under 9000... A polyfill collection would be nice. One that loads only what it needs :) perhaps with php/nodejs/python loading script, that allows a GET parameter to indicate the browser + browser version. Minimalistic, standardized, fun.
This site always keeps me from using jQuery. It is aptly named as well. http://youmightnotneedjquery.com When you want to grab some divs and toss some classes on them, you don't need jQuery. That said, there is still no elegant way to do .each on a NodeList without using Array.prototype.slice.call or a for loop. Once I need Ajax, or I am doing a lot of events (jQuery event delegation is awesome) or I am manipulating element attributes, I then turn to jQuery. 
You don't need jQuery to do event delegation.
Too bad many of the features don't even work in modern browsers. There seems to be blatant inconsistencies between safari and chrome running on recent phones for instance.
I love Sublime Text, it also has a [react plugin](https://github.com/reactjs/sublime-react)
The core issue that jQuery solves is cross-browser compatibility. Polymer does not support older versions of Firefox, Safari, Opera, Konqueror, IE6, IE7, IE8, or even IE9(!). Polymer doesn't discourage or obsolete jQuery. They serve completely different functions.
I feel like this is taking a step backwards. If you can't reject objects from a set that are able to resolve to some similar primitive (like using valueOf), for me it loses a lot of it's appeal. I guess I was kind of expecting a Java-esque equals and hashCode or the Python hash functionality...
npm uses semver. It has nothing to do with whether a package is in a public repository or not. It's about dependency management and compatibility between modules. Why not properly increase the version number? If you add a new feature, increase the middle number, if you patch a bug increase the one on the right, and if you break the API increase the one on the left. It doesn't matter if your version number has 1.6576587.98797 large numbers. It's not a marketing number. But I think you can also use prerelease tags like "1.2.3-alpha.3". The "3" could be incremented at every build or - if your commit IDs are incremental - it could be the commit ID. Or build number or what ever. So you can publish to your registry during development without making an actual release. Check out the [node-semver](https://github.com/npm/node-semver) package. You can use any version compatible with it. **Edit:** Also read about prerelease tags [here](https://www.npmjs.org/doc/misc/semver.html).
Cool! I tried a 5232x3488px picture with a cell size of 10 and my computer broke. It works fine with 100 though. Maybe it needs to adjust the default cell size based on the image size.
Very interesting, thanks for the info and would love to read about it more if you get around to blogging about it. I could see some wrinkles, e.g. if you use a version that is not primed by a large site, or if the cross-section of usage between your site and the priming site(s) are low. I'm glad it's working for you, but I'd still recommend that anyone looking into going this route to do the same as you (as with any performance optimization) and do some real-world profiling so that you can validate that it's working as intended.
If you click the github fork link in the top left, it takes you to the repo: https://github.com/amando96/redditinvaders You're credited there at least :)
Mind.Blown.
Sounds like you've yet to wrap your brain around async control flow. I recommend [async](https://github.com/caolan/async) to make things easier. With node.js you really have to think about the nature of how your application handles requests... Assuming you're using Express (and you probably should be)... for uploading files, I use [busboy](https://github.com/mscdex/busboy) to handle multipart uploads. For myself, I use node.js because the async nature of http requests seems to be a great fit with Javascript and closures/anonymous functions. It just "clicks" for me. Your mileage may vary. P.S. In my experience, investors don't really care what language/platform you build upon. As long as the frontend looks somewhat slick, they couldn't care less. So if PHP works for you, stick with it.
Please provide details and examples of the node flaws. If you're right, this will warn people away. If you're wrong, making some offhand inflammatory comments are not going to help improve your understanding.
See http://inform-fiction.org/. The classics were written to be run by an interpreter. That format has since been reverse engineered. You can compile your own games just like the people at Infocom did. Interpreters are available for many platforms, including JavaScript. If you're not interested in programming, you don't have to learn. Just use the tools that already exist. Of course, if the plan is to learn programming, then the others here probably have plenty of fine suggestions.
minifier
This has been minified and then pretty printed (Chrome does this if you click on the "{}" thingy). Without pretty-printing, all of it would be in a single line. JavaScript is often minified for deployment.
Javascript can look like that. Humans generally don't write Javascript that way so I would guess it is obfuscated or the author wrote the script with a tool that generates Javascript. Its hard to tell what it is doing outside of context. Though if the rest of the script is written this way I don't think I would still be able to figure it out. 
You know what scales really well? Any language you already know. While node might scale on a server, a big javascript codebase is terrible. If you are making something of size, pick an object oriented language.
Minifying code will not only provide an extra layer of security (function names, variables names are gone), the overall `.js` file becomes physically smaller, so loading it from CDNs, or even your own server would be marginally faster, especially for large files.
Works just fine: var s = new Set(['a', 'b', 'c']); [...s].forEach(function(n) { console.log(n); });
That's not how open source works. You can't just have the repos readme state "oh all the code came from another repo". You need to properly attribute the source code and since the code is pretty much 95% the same, you should at least put something in the UI as well and give ronconcoca proper attribution.
Chrome 28 also implements "image-rendering: pixelated", great for scaling canvas games.
JavaScript is an Object Oriented language. It just has a different syntax than Java.
ranting about something without saying what exactly troubles you is trolling. So tell us or STFU.
well, if JavaScript is an object oriented language really depends upon the definition of object oriented. Java though .. well, there is no doubt.
Just an FYI: if ($window.localStorage) is insufficient for checking for localStorage. It's possible for it to be present but throw errors when reading or writing to it due to privacy settings, third-party frames, etc. Also instead of using JSON.parse and JSON.stringify you might prefer angular.toJson and angular.fromJson as they help remove some of the angular cruft that can end up in your data. 
security through obscurity is no real security
Java is definitely the most common object oriented language, but usually Smalltalk is considered one of the earliest object oriented languages. Smalltalk's syntax is very different than Java's but JavaScript's object oriented syntax has a lot in common with Self, a dialect of Smalltalk. JavaScript, C++, Objective C, all have very different syntaxes than Java and usually people complain about using them coming from Java, whereas languages that took inspiration from Java such as C#, PHP or Ruby tend to be better received mostly because of Java's popularity. In short, Java set certain rules for how it felt OO should be done and some languages followed suit, but by no means does this mean this is the only way of doing OO. A language can be different from Java and still be Object Oriented.
The problem isn't that the people who get this wrong are stupid. The issue is that this `this` behavior is so different from other uses of the word. If I start swapping all "Warning! Flammable!" signs with "Warning! [Inflammable](http://en.wikipedia.org/wiki/Flammability#Flammable_vs._inflammable)!", people are going to get confused and it will cause dangerous accidents, even though the sign ends up meaning the same.
Thank you so much! Any CDN plans?
Actually, syntax is one of the few things Java and Javascript have in common.
Okay I got it, after looking at Vanilla JS.
It wasn't all that funny the first few times either
So it does. Thanks. I got it working. EDIT: Say on any given page, if you want to have the confetti effect appear on top of what is already shown on the page triggered by some action like a countdown reaching some value or a button clicked. Is that at all possible with what we've got here?
Does this play nicely with the other libraries? I'm extensively using dui.js, yolo.js and, my personal favourite, aslpls.js
This is around the same featureset as the other localstorage (with fallback) wrappers, but seems neatly written and tested :) Cool stuff. here is another one that approaches things in a interesting way - you could pretty much put a handle to the storage directly in scope if you wanted: https://github.com/gsklee/ngStorage 
Vim works fine. 
IE9 is not the problem, it supports functional es5 methods, html5 video, qsa out of the box. IE8 and below are the real problem browsers
and here I am binding everything. 
Prototypal inheritance is very different from classical inheritance. `this` in JavaScript makes sense if you learn the language. If you ask for a "gift" in Germany you might not be getting the cool present you're expecting. That's not the fault of the German language, just your comprehension of the language.
I think that adding support for some kind of hashCode() would (possibly) break backwards compatibility, which probably why it hasn't been added. You could certainly use this set implementation to make your own which does use a hashCode() method on its keys. Then your keys will need to have hashCode() too, and before you know it everyone has their own mutually incompatible set and hashCode() implementation... :-/ 
great overview, I was writing a bit similar (but more of an overview) blog post yesterday: http://thinkingonthinking.com/javascript-matters-for-prototypes/
sounds great, might be interesting for "embedded" javascript for tessel orArduino Yun too.
Beautifully done, but if you type in "4/3=" the answer is to long to fit in the calculator display. Fork with a quick fix: http://codepen.io/anon/pen/JhoFd 
Neither solution is wrong. But bind always creates a new function, which can be problematic (e.g. when passing a function to `addEventListener`, if you use `.bind` you don't pass the function itself but the bound function, so you can't just pass the same thing to `removeEventListener` unless you keep a reference to the bound function around for that).
For what it's worth, it works the way you want in Dart: main(){ var d1 = new DateTime.now(); var d2 = new DateTime.fromMillisecondsSinceEpoch(d1.millisecondsSinceEpoch); print(d1 == d2); // true var set = new Set.from([d1, d2]); print(set.length); // 1 } Dart has operator overloading. You can define what `==` does. (That "millisecondsSinceEpoch" thing isn't as bad as it looks. There is auto-complete.)
Yes, it's possible. What exactly is the problem? If you google "js inflate" you will find many implementations of INFLATE. All you need to do is to fetch your data as Blob/ArrayBuffer with XHR and run it through. I've used [this one](https://github.com/dankogai/js-deflate/blob/master/rawinflate.js) before and just modified it to take a Uint8Array instead of a string.
As I have stated in my question, I want to utilize the browser's capabilities of loading gzipped content instead of implementing my own solution. Edit: The exact problem is that although a resource loaded from a HTTP server is being inflated automatically when required, Blobs seem to behave differently. The browser does not inflate them.
Oh, okay. I don't believe you can do that. At least not unless you do something very hacky, like storing your data as a PNG and reading the pixel values.