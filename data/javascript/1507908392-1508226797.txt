Save your blacklisted jwts on Reddit and check them. Also put a timestamp on the token of they don't already have and renew them after specific points.
I included the link to the source code. Total number of back-end lines is 87. And, yes, I did use `window.getSelection()`. I didn't test it on anything other than the latest chrome. I would likely include a polyfill (or use more crossbrowser solution than `window.getSelection()`). Would probably set up babel and bundling for production. Also I did it in the evening after finishing 8 hours at my normal job.
&gt; Reddit Redis? :P My problem then is that you've added more moving parts to accommodate a technology that's meant to make your system simpler. I get why JWT is useful in some cases - mainly where there's a lot of microservices that are all accessed by the untrusted "out there", and so need to securely determine what permissions a user has with the minimum number of database calls. However, I've seen and talked to a lot of people who use JWT tokens because they magically make their sessions more secure, they magically make everything webscale, and they magically work faster, and that's not true. I would suspect that, for the vast majority of applications, the costs of implementing a scalable and workable token auth system are far more than the costs of simply optimising your user validation pathway and letting your moving parts touch that.
&gt; The upsetting thing for me is when I get back answers like This suggests that what you're asking for is too domain-specific. Ideally a question should be something where the candidate can arrive at a solution via logical deduction using nothing but fundamentals. For example, if I ask someone to implement curry, a good candidate would typically go ok, I need to write a function, the function needs to recurse, I need an array to hold values, oh, I need to handle some edge case, etc until they arrive at the solution. Like you, I've had candidates throw their hands up on assignments. Generally, when this happens, I also sense that the candidate is feeling pressured and tense. What I usually do in this case is try to reassure them, e.g. I often say things like: "don't worry about making it work, I'm mostly interested in your thought process", "feel free to just talk aloud and jot down what you're thinking", "I know there's a lot of things we can talk about, just pick whatever you're comfortable with and we can delve deeper into that". For coding problems, I also try to nudge them to think outside the box and use more generic problem solving skills. I'll ask things like what's the difficult/time consuming part of the problem? can you explain how you would do it using pseudo-code? can we take a step back and solve a simpler version of this problem? how would you solve this assuming a library with so-and-so API existed? etc If we start drifting from topics I want signal on, then I ask questions or make comments to bring us back to those topics. Not "right-or-wrong" questions. More like, for example, if I'm looking for signal on algorithms and the candidate starts fumbling and writing a wrapper class, I'll say something like "it doesn't need to be robust, let's just keep it simple for now", "feel free to give it some thought first", etc. 
I have over 15, with 2 years of explicit work on TinyMCE internals, and 3 years doing collaborative PDF annotations. I too would have walked out, not because I couldn't accomplish the task, but because it exhibits glaring weaknesses on the company's part. I most certainly could not have finished it in an hour. I don't code like that - I need an hour to really get into any sizeable problem, particularly brand new never thought of problems. I'm also generally not in the right coding mindset after discussing my career history, business acumen and software jeopardy questions - as I *never* think about those things when I'm coding. Whether or not the brain has a cache-warming feature, it sure feels that way when I switch to a live coding exercise mid-interview. That being said, instead of asking for more time, or doing what I can in 1 hour - I'd still say no because I feel this screams multiple problems on the company's end - "We can't discern developers from non-developers at all so here's a really tough task" - "We can't fiscally handle hiring another mediocre dev because [x]" - "We only really care about code, not the dozens of other skills required to implement software." "We don't have enough of a social network on-staff to find a vetted candidate." etc. None of these may be true for the OP/Company but that's what comes across in my mind when I see tests like that. So I would politely refer them to my open source repos and contributions if they'd like to see some complex code and that I'd solve some basic algorithms if they really want to pick my brain. (I get that this speaks volumes about me too ;) The responses OP got from the candidates also seem to scream a low pay-range for the position. However, rational people will say irrational things when they're nervous in an interview and thinking "oh-god they want me to finish this in an hour?!? I'm going to fail!"
It always depends on what type of project you build and the scalability you desire
I agree. While this is really impressive, if someone actually coded this way they would not stay employed very long. I guess either that, or they could _never_ be fired, because no one else understands their code.
I'd probably use AngularJS while writing the code myself, ie no 3rd party modules. &gt; Similarly, you cannot use anything that requires a build step, e.g. the Closure compiler. But surely for production you would concatenate and minify right?
Simply _calling_ another function doesn't inherently allow variable to be accessible inside that function. function bar () { console.log(index) // Nope } function foo (index) { bar() } foo(3) However if the called function was defined _inside_ the other function as well, then it would be a nested scope and then be available. function foo (index) { function bar () { console.log(index) // Yup! } bar() } foo(3)
&gt; `innerText=$+='□■'[v^1023+P&amp;&amp;v&gt;&gt;x&amp;1]` If the author of this is male consider me ["code gay"](https://www.youtube.com/watch?v=R9LTY37lQdU)!
Yeah that sounds like my interviews for my internships. It was tough but I got them. I’ll let you know how it works out when I interview for full time positions. Thanks for being so interested in my life, u/one800higgins
https://www.youtube.com/watch?v=8aGhZQkoFbQ This has been a popular video for a while now so you may have already seen it. I've watched it several times and as most recently as of last week hoping to gain a better insight into node's event loop. Unfortunatley, it's mostly just for the browser's event loop and doesn't cover topics such as setImmediate or process.nextTick.
One suggestion I have for you is to give them the assignment a couple of days before they come in for the interview. Allow them to complete it at home on their own time schedule. Let them submit it to you before they come in so you can look at it and then at the interview, go over the code with them. If you go over the code with them in the interview, you can quickly tell if they know what they are doing by how they talk about their code. What they tried and failed, what they might try if they had time to refactor the code, you can even suggest other ways of doing it, and in a good developer you can see their eyes light up when they realize that you just suggested something they didn't think of. Remember, you are going into this task with all the context. You know what you are looking for as a response. The candidate is coming in cold with zero context of what you are trying to discover. These are the type of interviews I prefer when looking for a job. I've been doing this a long time and I consider myself a pretty senior developer, but I hate the pressure of a time clock. I can produce good code under pressure but is the job regulerly going to ask a dev task to be completed in an hour? Sometimes it takes me an hour just to wrap my head around a problem and understand what you would be looking for. But at least your not whiteboard hazing with on the spot algorithm brain teaser questions you want me to solve while you breath down my neck asking me to walk you through my thought process, so you have that going for you. Those are the worst and a good indicatore that I don't want to work with the interviewer. 
Video linked by /u/defproc: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Silicon Valley: Code gay](https://youtube.com/watch?v=R9LTY37lQdU)|Ducky Duckling|2016-03-11|0:01:23|266+ (98%)|22,889 --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/defproc ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dobgsxw\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
https://images-cdn.9gag.com/photo/4088277_700b_v1.jpg
Can confirm. I got the basic tokenise / find selected text, ensure it's mine, get the selected words etc to work within 10 mins. But then, the requirements of: __only consider first word__ and __find if the selection has started in middle of the word__ vastly complicates things. Took me an extra 30 mins to play with the Selection.modify API to get the correct single token selection. I guess, if somebody gets that far and you're pair programming with them, you can reason and expand on the requirements / functionality and figure if they approach it correctly as well as discover if you're happy to work with them. All in all, an enjoyable task and has helped you weed out undesirable candidates. 
What is a token? Do you mean a word? That's what I assume it means from your examples. Why not just call it word instead of token? Or does token have a meaning in this context that I've never come across before? If so, maybe you should have a brief explanation at the top of what you mean by token. 
Surely you could at least use sane variable names and optimise them down later.
Arrow functions. They just look like equal-to-or-greater-than to me. Why oh why couldn't they have used a word (afunction?) instead of some symbol stolen from another language. 
Have you considered learning functional programming instead?
Or just const. with functional programming and immutable data there is almost no need for let or car anymore. 
I would find another job. Webpack and es6 have simplified and speed up development that working without them is not something I would consider. Push back on these constraints, maintaining that site is going to be painful in 6 months. That is with those constraints how are you going to do any Unit testing or e2e testing?
I know the basics of node---enough to adequately setup webpack, but that's it. On the *backend*, I've used C#, Java, Elxir, Python and PHP.... but never once used Node to setup a server. 10+ years of experience, and I have no time to go hopping on the latest language trend when there's oodles of projects pre-existing in other languages, and decade old well vetted libraries to help you out. 
I'm curious... did the developer actually complete this project themselves? To me, this reeks of prototype planning without anything concrete to narrow down the scope. 
Poking through the code, among many things I've never seen before, I encountered something like this: M = (x) =&gt; x; M`you can do this?`; Results in: [ 'you can do this?' ] Anyone know what's going on here? It appears to be at the center of the program's primary recursive strategy.
Could I do this? Probably.... but not in 1 hour. I'd get about halfway though, because there's no project setup on the backend and at the very least I'd have to use my favourite language, and do a few internet lookups to figure out how to make a flat file to store this information. The frontend bits are easy enough, but I can imagine it'll be a little finicky to replace text with HTML inline, and I'd worry about what happens when you select a piece of text which is already part of another token. So in all.... doable, but if they'd provided some boiler plate and talked about the edge cases, then anyone would feel more confident jumping in. As it is, it's like a 1 or 2 point ticket, written by some stakeholder with no development experience... too vague to just jump right in without speccing it out a bit more. This is my take after *years* of experience, however if you were to ask me to do this while I was still fresh from university, I'd just do it because I never worried about edge cases and writing to flat files is basically university assignments database du jour. 
What does a "full TETRIS game" really consist of? I would expect some colors at least :)
Very nice. I like how it opens a chart of the last month when you click on the badge. Any thoughts on adding the ability to show longer time periods? (6 months / 12 months / ...)
[Tagged template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals)
I only brought up Node because the OP mentioned that was their preferred server of choice. To me, it doesn't matter what the platform is. A front-end dev should be able to bring up a simple server for building POCs.
To be honest, I was surprised so many people in the OP's post brought up Angular and React. Nothing about his assignment made me think "oh I need a single page app framework for this". In fact, because of the heavy dom manipulation this would be alot less straightforward to implement in "pure" React. 
Well shit, I learned something new today. At first I was like "that seems like a pretty niche syntactic sugar", but the more I think about it, the more I can see where this might be useful. Let's see if I can sneak some template literals into my code today.
Yes I am, and I'm not sure right now as I've not put much time into this. It shouldn't be too many, at least for task 1. Then if you build it properly, you should just be able to "mark multiple" for task 2, and then "categorise" in task 3. if you used the data attributes you could css style and use data-tag or something for the differentiation. As for the regex, in PHP I would use preg_match_all, I think there is a similar match flag in javascript, I'd just google to make sure.
still waiting on https://github.com/tc39/proposal-class-fields right now with prototypes you can have default property values while for classes you gotta set them per-instance in the constructor, which is rather inconvenient.
styled components for react uses them. thats the only "more popular" mainstream use of them i know of.
You can check out one example for ORM code with Mongoose here - https://github.com/dotansimha/graphql-code-generator-usage-example/blob/master/src/models/mongoose.ts.schema.handlebars
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [dotansimha/graphql-code-generator-usage-example/.../**mongoose.ts.schema.handlebars** (master → 9e2131a)](https://github.com/dotansimha/graphql-code-generator-usage-example/blob/9e2131ae965176624becb4e2bc868f264ca5eec5/src/models/mongoose.ts.schema.handlebars) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
 /solution .gitignore
I think a guide on website performance beyond Google Insights could be awesome. Even just a breakdown of using dev tools network tab to view performance. I think explaining how multiple js files (especially large inclusions) loading in effect one another, how to ensure dependencies are loaded, or just render block prevention in general. I have been doing research about web performance for the first time recently, and other than google Insights, I don’t feel like I’ve found quality material anywhere. I feel like It’s impossible to prevent render blocking without code splitting. 
Real devs write code that other devs can immediately understand.
We're working on these bugs today. We built React Sight because we wished the react dev tools had this feature! It's an interesting idea to extend the dev tools, we'll look into possibly turning this into a dev tools side panel
Thanks! Should be easy to do that. Added to the list :)
Haha I used this the other day at work and didn’t realize it was so new. That’s cool, haha 😆 
I don't think "Is it doable?" is the right question to ask. I'd focus on "Will this enable me to make the right hire?" I'd explain the role then ask him to come up with his own challenge in his own language.
Thank you. &gt; If there'd be a easy-to-reach checkbox that eliminates all components that don't end up outputting a dom/target element, that would be super useful. I haven't thought about this much but I worry this might be too aggressive. Hm, worth a thought. :) I'll get back to working on DevTools again sometime in the next few weeks and will take a look.
The MSSQL has SQL bindings using literals, it's pretty great.
Riddles are not for bosses you pleb
What would give them as a test to do for 1-2h interview?
Nice - I really like the idea. I can't see anything in my tree below the react-redux provider though. Is react-router 3 supported?
neat. you can get it much smaller with the following build chain: Rollup + Buble + Google Closure Compiler
If you didn't want to actually to touch the selection API, could you think about another way to do it? Two other ways?
well that is the rub, isn't it. There are some who understand things at a fairly low level, and take advantage of it, and some who want the machine to do all the work for them. I'm not sure which one will be out of a job first though.
That's actually pretty sad.
I'd hate if 20 random guys were spending half a day next to me in a quick succession one after another. Plus security and confidentiality concerns. Totally agree on a "make it less stressful for them" point, got to be achieved by some other means though.
Awesome! I appreciate the tip. I'll look into getting that implemented, thanks.
Ooh... If you pull too hard it splits apart and never again merges. That feels super-sad :(
 for (var i = 0; i &lt; 10; i++) { setTimeout(() =&gt; console.log(i), 0); } // -&gt; 10 (outputted 10 times) vs one small change to `let`: for (let i = 0; i &lt; 10; i++) { setTimeout(() =&gt; console.log(i), 0); } // -&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
Might want to look into [Node.js](https://nodejs.org/en/) and its [fs](https://nodejs.org/api/fs.html) module which will let you read and write files. Node will allow you to still use JavaScript but it'll be easier to save and read files. If you want to stick to the browser you could use [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) but there is a small limit of how much data you can store. You can look into the more flexible but more complex [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) or a simplified wrapper like [localForage](https://github.com/localForage/localForage). Either way, I think all of this is probably way beyond your current skill level. I would just keep going through the basics for now, especially if JavaScript is your first programming language.
perfect computer for the ["Bynars"](https://www.youtube.com/watch?v=52_iSQnB6W0) from ST TNG season 1
Even this snippet was written by multiple people. Not all male. ;)
Start as simple as possible, then if there's time you can ask them to add adjustments. The question is overly complicated and will overwhelm everyone just with a quick glance.
Promises I got down pretty quick but I just cannot make async/await versions work. No idea why. I have the same issue with Python's async/await. It's a little embarrassing because aside from that, I'm pretty gosh darn knowledgeable about Javascript. But there's just that one last switch that doesn't wanna click.
Great comment that gets you off the hook. Oh, look how many people contributed. Thank god it's not just one. I'm safe for now..phew
Good code doesn't need commenting. This piece is about how short it can be now about beauty.
if this is called "code golf" then that would be called "code every-other-game-in-the-world"
Using a variable will be optimized out almost all the time, either by the minified or by the optimizing compiler in the js runtime.
Good ole reduce. That one definitely takes a while to figure out where you can use it. But boy, when you can, it's so good.
Random question on how to solve it... Could you parse the text via `split` then for task 1, make them radio buttons and restyle radio buttons to look like text that becomes highlighted, then process a click action to POST to an express server with a simple REST API that stores it somewhere? Task 2, do the same thing but with check boxes? Task 3, build on task 2 but do a couple lines of processing server-side?
Persisting a single value on a server doesn't require a 'full stack' mindset, it requires basic knowledge that i would expect any senior developer to have. It's not like they needed to do it well, there's so many ways this could be done that would work for the interview.
What sport has the highest scores on average? Code basketball maybe?
So which part of the non frontend stuff is hard for you?
Seriously? Pass on the job... The two first points are entirely valid but the rest is like asking someone to build you a house using only a hammer and a handsaw...
Wow, that's a pretty beautiful collaboration!
I can get like a billion points in super mario. super mario is a sport, right?
And that prevents you from knowing how to make a simple backend that gets and sets a single variable? 
I agree although let still a much better alternative than var
https://www.reddit.com/r/javascript/comments/763wud/what_would_you_pick/dobcfn4/
Please tell me that you are yanking our chain and that you at least know of the GameBoy Tetris.... 
https://www.reddit.com/r/javascript/comments/763wud/what_would_you_pick/dobcfn4/
For you, not for me. No Node + Really Fat Paycheck &gt;&gt;&gt; Node + Decent/Fat Paycheck.
Can always use experimental features with Babel - usually if something is beyond stage 1 it to spec.
making browser do all the heavy lifting for you? Sweet :) is it possible to restyle radio buttons so they are not visible and text remains formatted as it used to be before that hack? 
hired !
Yes, AAA is a mandate - no second way about it. Based on the suggestions here, looks like I'm going to recommend Vue and roll with it. I don't have the time to write even a half-decent minimal framework, and my initial impression of Vue is quite positive. Was able to write a Todo (LocalStorage based) quite quickly (wrote it without the router though).
I'm proficient in Django, it's not hard. Start a virtualenv, install Django, start a project, configure sqlite as a database, make a model, migrate the database, make a couple of views that accept and return JSON, turn off CSRF protection, it's trivial. Develop my JS in a single static file so I can easily serve it from the same port without worrying about CORS, or spend a few more minutes to set up some sort of proxying. Fine. But one, that is because I have more backend than frontend experience so I'm not his typical applicant, and two, it would eat up valuable time doing stuff that has nothing to do with the job I applied for.
Ya, I know `let` and `const` are good, but they hardly make a "world of difference".
Thanks, Vue looks like a great contender.
Yes, just like the others have suggested, I'm siding with Vue. Sad that people here can tell me to quit the job, or what is sad and what is not, when I'm really happy with the pay and couldn't care less about the constraints.
Our CI has a few maven goals which takes care of stuff like that (also for CSS optimizing). (It's *not* the popular Maven css/js compressor plugin which uses YUI/Closure behind the scenes, this is a pure Java processor that was written in-house long back, is battle-tested and works well. Simple configuration too.)
Does it have to be a major framework by a tech giant? If not, there are a bunch that work well with ES5, e.g. Vue (with some caveats), Mithril, etc. Responsiveness and progressive enhancement are kinda your job, not really something a framework would do for you (unless you're thinking of something like bootstrap). Many frameworks have opinionated UI libraries (e.g. vue-material, polythene), but it's kinda hard to recommend anything in that area without knowing anything about project requirements.
Sure but that's overkill a single service that has one global variable and get/set endpoints would be enough for the interview question. 
Maybe because English is not my mother tongue but I found the assignment not clear. Though it is not bad : seasoned developer should ask for more precise input early when they feel something is unclear. Also, setting up environnement is time consuming and does'nt say much about dev maturity. Regexp, even when you know how it works precisely are time consuming to write and test. TIP : I would simplify the test with something like [http://tddbin.com/](http://tddbin.com/) : that way you can check if your dev knows how to write pure function to solve each of your cases and to test them completely. 
1. Explain the difference between a linked list and an array, in detail. What are the pros and cons of each? 2. Explain the basics of a hash table. 3. What was the most interesting recent programming project you worked on, and what did you learn in the process? What tripped you up? The first two should be more than enough content to weed out the posers. The more experienced person, the longer they will likely take on the last question, since it is a more conversational question. Plus, they can say, "here, look at it" and you can see for yourself how they work. 1-2 hours is sufficient to weed out bad candidates, but I would want to take at least a day to figure out if a promising candidate would work out.
For me it's the fastest way to do it, my other backend experience is with Struts on Tomcat and with Apache/mod_perl. I'm _guessing_ that you mean to use Node (but I could be wrong), I've never used that and wouldn't expect an applicant for a frontend position to have used it.
I don't know, I haven't read the problem fully. I only had to read a few sentences to know that the task was completely unrealistic for the time given.
Coming from Python, it seems like ES6 and later are making Node more and more Pythonic :) Default Parameters in ES6 Template Literals in ES6 Multi-line Strings in ES6 Destructuring Assignment in ES6 Enhanced Object Literals in ES6 Arrow Functions in ES6 Classes in ES6 Modules in ES6
Back in the days I used to use W3schools for everything :) Long time ago! Try this post if you already know a bit about programming: https://learnxinyminutes.com/docs/javascript/
your point was that OP test was not relevant for a frontend position, and propose to ask about Linked lists? That is even more irrelevant and distant from what frontend devs are doing,don't you think? Don't get me wrong, first 2 questions should be asked, but you based your criticism that dealing with text selection is uncommon. It is even more uncommon to be using linked lists in JS world, yet alone implementing hash maps.
assignment explicitly gives you freedom to use whatever you want.
&gt; This suggests that what you're asking for is too domain-specific. Did you read OP? Whole task is about splitting text to words, selecting and sending them to a server in a POST request. Do we really live in a world where you need a library for it?
Thanks for the gold! And yes it is. &lt;html&gt; &lt;head&gt; &lt;style&gt; input[type="checkbox"] { display: none; } :checked + label { background-color: yellow; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;input type="checkbox" id="word001"&gt; &lt;label for="word001"&gt;Word001&lt;/label&gt; &lt;br&gt; &lt;input type="checkbox" id="word002" checked&gt; &lt;label for="word002"&gt;Word002&lt;/label&gt; &lt;script&gt; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;
Not really, so I've now more or less settled with Vue like you recommended. We don't need any ui libraries though, our org has a fairly mature design standard implemented in plain css (not fully flat, somewhat skeuomorphic) for webapps to use.
Not really, so I've now more or less settled with Vue like you recommended. We don't need any ui libraries though, our org has a fairly mature design standard implemented in plain css (not fully flat, somewhat skeuomorphic) for webapps to use.
&gt;There’s a const now? I extremely don’t care, just name it in all caps and don’t reassign it, come on. You don't care about const. . . yeah. look harder.
I t hink this goes without saying though that this is not the kind of code this programmer is going to write in production. Look as the C obfuscation contests, they make this code look like poetry written in english.
The selecting part definitely sounds too domain-specific. The fact that people ask about googling and libraries supports that argument. My interpretation is that a solution would use something like the Range API, which is obscure (and I say that as someone who's actually used it)
Do you realize, that you just made tens of experienced frontend "engineers" with 20 frameworks under their belt, 5,15,55+ years of industry experience, browser compatibility experts, nodejs lovers, nodejs haters, TinyMCE contributors etc, look like a bunch of moaning pussies?
Fair enough, I meant the second part. If you like your job, good for you.
Did you see this? https://www.reddit.com/r/javascript/comments/75zyrm/this_onsite_coding_assignment_failed_20_frontend/doby18e/
Well it had sprites, but if you really want to go far back, the first tetris written in pascal used two white blocks to make a square, then soon after for compatibility with other systems without the russian font they changed to using square brackets like this ´[] ´. After that a DOS port was made by a friend of Alexy which featured color. Theres only very few black and white tetris games and most of them are because they use a cheap lcd.
Did you number most of your commits?
Just finished watching. The video/dude is amazing and made this kind of coding much clearer. Thanks
It sounds like you're trying to imply I'm an idiot or something. Lol. What's your point exactly? I'm saying that it's not unreasonable that people would misunderstand/overthink the problem or make bad assumptions if given no clear directions and were left to their own devices. A lot of that would've been a non-issue with a tighter feedback loop
compare with https://www.reddit.com/r/javascript/comments/75zyrm/this_onsite_coding_assignment_failed_20_frontend/doby18e/ :)
I wouldn't go that far, it's a solution not without some problems. It creates two nodes per word, which is a lot. But thanks!
I agree. Only difference is I went from heavy JS to pure Python for AWS Lambda. The similarities allowed me to pick up Python really really fast. I'm amazed by the amount of stuff included in the standard library. With Node, welp surely there's a package for that. 😧
It’s the size of the game in bytes in the commit. I was so used to shorten things that I didn’t bother adding 'b'. ;)
Look harder where?
I'm not sure I have the time/energy right now to go through that code commit by commit, but I would read the shit out of a breakdown of that code if you ever have time write one up. ...I'm really curious what you're using the 'Date' function for...
How long did it take you to implement a working solution from scratch?
Are you even a programmer? Or a manager?
See thats the thing, create a new empty console app and look at your main method. Do you see anything the opens a console window?
`new Date` is used as a random number to select the next shape. When the generated date object is cast to a number its `valueOf`is called which returns the seconds since 1970. It’s a neat PRNG as long as you don’t need to generate the numbers in rapid succession.
1. Change "1px solid #BBBBBB"; To "2px solid #BBBBBB"; 2. We can't help unless you share the full code, HTML, and all relevant things. 3. If you can't do it don't be a jerk to Qualtrics who I'm assuming you're not compensating. (You probably could do it if you knew what you were doing and Qualtrics didn't get too tricky, but see my answer to number 2.)
Hi /u/REALDogeyDogs, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
1. Thank-you! 2. That's the issue..I have no idea where to start. When I open the JavaScript for that question it's this: Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); 3. I should have noted that #3 wasn't a critical problem. I was just wondering if there was an answer to that since I've searched it up and saw that people were able to do that. I am on a trial period with them..I am fully aware Qualtrics is the main survey engine so I don't want to discredit them. 
Ha ha. Fair question :) . I'm a programmer.
I'm familiar with the guidelines ... I wrote a very non-official version of Tetris that was ... different. It runs under line-mode on a MUD. You actually type `right` `left` `drop` and it delivers random pieces instead of pieces out of a bag. Unless you are the MUD owner. Then you just got nothing but line pieces.
why not use typescript
I've used them to make pretty schema syntax, kinda like a Ruby DSL (you can have spaces between the tag and the literal).
Ha, of course!
Cool but the actual tetris playing part sucks lol
Cherow now supports "sourceType" as an option to parse module code. Added to be compatible with Acorn and Esprima. Also a few new other options have been added to the list.
Ugh that private syntax. No thanks.
I wouldn’t say that programmers using sensible variable names and useful comments is “the machine doing the work for them”. It’s just being a good engineer, rather than trying to wave your dick around. Maybe that’s just me
A stage 3 proposal is pretty safe to use (via transpilation), see: https://tc39.github.io/process-document/
Bytecounts of written javascript is a silly metric. It's much more interesting to see well documented and written javascript which yields impressively lean and speedy bytecode.
Works just fine on my regular PC speakers...
What blows my mind is that OP has somehow convinced his company that an hour or more per interview to waste on this awful task is a good idea. 
"mostly readable" I would not consider that first commit to be mostly readable lol
I'd like to see list comprehensions next.
Don't mess with Theon Greyjoy!
Trying to prove you're the smartest dick in the room isn't a good plan at work.
&gt; Alas, I’m not aware of a way to intercept arbitrary attribute access. Was gonna mention `Proxy` but I see it was discovered by the end of the post. &gt; takes a list and iterates over its values and their indices &gt; ... &gt; Here’s my attempt at building it in JavaScript. That was probably just for the sake of demonstration, but you can use the same method that was mentioned for `Map`: for (let [i, value] of ['one', 'two', 'three'].entries())
yes
When my employer asked a similar task of me, to create a music album presentation ui, I produced this demo: - https://chasemoskal.github.io/album-demo/ I wanted to provide something which appeared like a finished product, and something coded elehantly I made it an open source github project so that they could inspect the code, and to score the free github pages web hosting — plus if I didn't get the job, the demo would have been a welcome poetfolio addition anyways Good luck, aim high friend
Why do you want to write this to a file rather than using a database? This is exactly the type of thing that a database is intended for.
Agreed. At least use SQLite. http://www.sqlitetutorial.net/sqlite-nodejs/
Sorry I meant speakers / headphones required !
What kind of sorcery is this? (actually though, I have no idea what it's doing)
At my new job, the code base is using const all over the place, for variables I would've previously initialized with var. At first I thought this was a bit weird, but I quickly realized how smart it was: 1) No risk of accidentally using the same variable name twice in the same scope 2) Const != immutable, so you can feel free to use it for all your arrays and objects 3) I could be wrong, but I believe const allows the compiler to make certain optimizations So yeah, const is great. I'm a believer now.
Not trying to be a jerk, but normally if you need help with work, you pay someone. There are plenty of people who would be happy to help in order to get more work experience, and can spare a couple of hours. You can find them in places like craigslist or upwork. Bringing some cash to the table would give people incentive to actually bother looking at your code and helping you. Again, I'm not trying to be a jerk, just trying to give you constructive feedback. Good luck!
Regarding 3), I don't know if people have started using const from native browsers, because my experience so far has been transpiling though Babel. So although I see `const` in my editor, what's in browser is surely `var`.
What are you talking about? I write code like [this](https://github.com/veu/mini-tetris/commit/e47b080a394e98ff22cd996d19709f6141a8f40d) _all_ the time. Totally readable.
No kidding. I wonder if typescript is going to change over or if I'm going to have to teach devs at work why there are now two different options for declaring private class members.
No kidding. I wonder if typescript is going to change over or if I'm going to have to teach devs at work why there are now two different options for declaring private class members.
No kidding. I wonder if typescript is going to change over or if I'm going to have to teach devs at work why there are now two different options for declaring private class members.
No kidding. I wonder if typescript is going to change over or if I'm going to have to teach devs at work why there are now two different options for declaring private class members.
No kidding. I wonder if typescript is going to change over or if I'm going to have to teach devs at work why there are now two different options for declaring private class members.
No kidding. I wonder if typescript is going to change over or if I'm going to have to teach devs at work why there are now two different options for declaring private class members.
No kidding. I wonder if typescript is going to change over or if I'm going to have to teach devs at work why there are now two different options for declaring private class members.
No kidding. I wonder if typescript is going to change over or if I'm going to have to teach devs at work why there are now two different options for declaring private class members.
No kidding. I wonder if typescript is going to change over or if I'm going to have to teach devs at work why there are now two different options for declaring private class members.
No kidding. I wonder if typescript is going to change over, or if I'm going to have to teach devs at work why there are now two ways to declare private class members.
No kidding. I wonder if typescript is going to change over, or if I'm going to have to teach devs at work why there are now two ways to declare private class members.
No kidding. I wonder if typescript is going to change over, or if I'm going to have to teach devs at work why there are now two ways to declare private class members.
No kidding. I wonder if typescript is going to change over, or if I'm going to have to teach devs at work why there are now two ways to declare private class members.
No kidding. I wonder if typescript is going to change over, or if I'm going to have to teach devs at work why there are now two ways to declare private class members.
No kidding. I wonder if typescript is going to change over, or if I'm going to have to teach devs at work why there are now two ways to declare private class members.
No kidding. I wonder if typescript is going to change over, or if I'm going to have to teach devs at work why there are now two ways to declare private class members.
No kidding. I wonder if typescript is going to change over, or if I'm going to have to teach devs at work why there are now two ways to declare private class members.
/r/savedyouaclick
Don't tell that to everyone who went all in on Object.observe (of course, I tend to use the stage 0 preset anyway, but without the assumption that it's safe)
Yea, finding good high quality programmers is very, very hard! I've used much much simpler questions and it was really really hard to find anyone capable of answering them.
What you describe are symptoms of burnout. Almost every developer falls on that same pit, some do many times even. It's not the end of the world and it can be "fixed" - just do some research on it. Also, maybe the job environment isn't helping your self esteem too.
Redux and its siblings Reducers, Store and Observables are too abstract for me.
^^^this stuff right here
Have you considered using a font with programming ligatures? This font may help improve readability for you while you work https://github.com/tonsky/FiraCode
As somebody who is learning JavaScript in the hopes of making it in to a development job, these are encouraging words. Especially when I spend three hours on some problem and still can't solve it.
When you don't fit with your workplace, it can feel like your whole world has gone wrong. It hasn't. 
Your demo has some bugs, clicking randomly between the 2nd and 3rd groups had some issues. Interesting idea though!
You need to find a place that will encourage you, invest in you, and inspire you. You aren’t in that workplace right now. Sit down and analyze the kind of place that you’d like to work. High pressure startups aren’t going to work for you. Nothing wrong with that, it’s totally fine. Once you figure out what you need, go look for it. Look for workplaces that are very different than the current one. Be extra careful. Be picky. It’s not that you are a bad Developer. You aren’t in a place that you can be successful. Find that place and you will find your way! 
I’ve spent literal days on problems, some still unsolved. It’s all good. Just keep moving forward. 
It sounds like you are under bad leadership. I don't mind that some of my devs are not as skilled as others. I assign appropriate tasks and guide and help them along the way as long as they have the willingness to work hard and learn. Every skill level can be valuable to a development team. If this is indeed the case, I'd go look for a different job. 
When stuck on a problem, I usually take a break / work on something else / quit for the day once I've run out of ideas. If I'm trying the same thing twice, or trying random shit for no good reason, I'm either tired or too focused on one piece of the puzzle. Often, once I'm distracted, the solution will pop into my head unexpectedly; other times I return to the problem refreshed / less frustrated and find the answer staring me in the face. For whatever that's worth, as I'm sure it's different for everyone. With experience, the number of problems you can't solve quickly decreases, and most of the time is spent piecing things together from what you already know, stuff you've already written, or stuff that someone else already wrote.
Hi, Remember that IT is not JavaScript development only. There are multiple options out there. It might be that for long time you're working on the position that does not fit your flow. Think of all the tasks that make you excited and those that make you feel like trapped in the cage. Are you excited when there is some styling to be done and you like it when finally it looks really smooth on all kinds of devices? Or maybe you wait for all those new webpack plugins and techniques to make your team's workflow clean and optimized? Or maybe... Find tasks you feel excited about and look for more opportunities in this area. Maybe you'll find yourself more in test automation area? Or maybe compilers optimization? Here's the story of Brian Lonsdorf and he's move from object-oriented programming to functional one: "Yet, after 5 SOLID years of writing object oriented code, I was never quite satisfied with the outcome. It just never worked out well for me. I felt like a lousy programmer. I even lost faith that a simple, flexible codebase of decent scale was possible". We're taking about Prof Frisby! He felt like a lousy programmer just by writing software in the paradigm that doesn't go his way. After moving to one that talks his mind, he became a recognised author and FP master. It took me a long time and switching positions a few times (dev, product designer, BA) to understand where I feel the best. I felt I'm quite a shitty programmer and was really afraid to come back to software development. But I think I found what type of tasks resonates my mind now and I'm getting better and better and starting to feel more and more comfortable as a programmer. Fingers crossed, dude!
I advocate for a 'const' first codebase for those reasons. I personally wish they had gone with 'val' rather than 'const' since the name itself seems to result in most the controversy. 
Seems like when you are doing: $('.nav-build, .nav-design').css("color", "#3a3a3a"); In the three onclicks, you are setting inline css, which is overriding the hover css class. Changing it to simply remove the inline color for the other two seemed to do the trick when I tried: $('.nav-build, .nav-design').css("color", "");
Three letters would have been nice for consistency but 'val' is a terrible option.
Why, it's consistent with some other languages. Scala and kotlin come to mind.
I've definitely found this helpful. It's just, hard to not get obsessed over something and end up with twenty tabs open. I think I need to just put myself in time out when this happens.
AFAIK you dont even see your main method? The method you are probably refering to is the main method of your entry class of the corresponding framework but before your program gets there in run time there is the "first" program that even tells it to run your "MainWindow" class. That first program is called the CLR (Common Language Runtime) which translates your code into machine language at runtime. Admittedly it does perform a little bit of magic behind the scenes which is probably why most people wouldnt be able to explain the execution process of a .Net application. 
Exactly the type of comment, when someone somehow learns one javascript framework claims to be a developer.
To minimize breaking existing code, you don't want to introduce a new keyword into a language unless you have to, much less one that is an extremely commonly used variable name.
There are many reasonably talented programmers who simply don't take well to working in conventional product engineering roles. There's no shame in acknowledging that it isn't a good fit and pivoting to something that works better for you. Your employer may even be open to helping you find something more suitable within the organization. There are a ton of opportunities in engineering-adjacent roles that don't involve writing and shipping production code. Technical writing, developer relations, field support, and release management are some examples.
Whenever I moved jobs, I would always start out feeling inferior just because of lack of codebase knowledge and how the big picture comes together for that particular company. Really try to get involved with your coworkers from a pair programming perspective. Ask to pair program with them on a task they're doing, suggest to them to bounce their ideas off of you, etc. Form positive relationships, build trust with your coworkers, and focus on being a contributing *person* before being a contributing *programmer*. If you feel that your manager isn't providing you with the tools to succeed, tell him. "Hey man, I feel like my understanding of the project we're working isn't up to speed. I didn't quite gel with the onboarding process. Could I take a lighter load for a sprint so I can meet with you and the rest of the team individually to get re-oriented with the codebase and project?" And ultimately, if you feel like you cannot talk to your coworkers or manager about the professional roadblocks you are having, it's not the right workplace for you. A change in scope might help. Try a startup or smaller company if you don't like bigger companies. Or vice versa. 
Bro you don't have to feel bad about yourself.Every individual which comes to this field feels more or less the same.You have to stay focused and results will come later on as you dedicate more time in this field you will feel more attached to this career.
I don't understand why this can trip up that many people.. Especially when you allow them to be alone in the room and willing to extend the time allowed.. With the given requirement it looks like you don't even need DB in the back end and it's only doing selection persistence, throw together a simple server that takes an array of selection location and just shove it in memory or write to disk as json would suffice?
I forgot who I learned this from, but whenever I get stuck I follow this, "Do it ugly, do it right, then do it better." When you get stuck for a long time, just try to solve it the best that you can. You can always refactor after you get it done. The thing about writing ugly code is that it is not always pretty, but solving the answer will give you the little wins to keep moving, you're human you shouldn't kill yourself by being a perfectionist. After you solve it, ask yourself how you can do it better. That's when I start going into research mode and looking at how others would solve that same problem.
Asking a potential hire a question or two that demonstrates bare minimum of understanding of how programming, ALL programming, works, is extremely relevant. I hope you will take note that my suggested questions involve no programming tasks AT ALL. I also say "explain the basics of hash tables", NOT implement them. I was also not asking for an implementation of a linked list (which, incidentally does have a place in large subsets of problems as they form the basis for many other structures like trees). Those two questions are merely to get rid of "script kiddies," as we call them. Compare that to OP having them work on something, with actual programming in-house, that is irrelevant EVEN WITHIN most of front end programming. That is to say, OP is asking for things on the extreme of possible obscurity for front end programmers. My questions are on the other end of the spectrum: stuff so general and so open ended that literally any competent programmer could shine.
sounds like a shitty work environment to me.
Kinda in the same boat. At least your doing Angular. I can’t even get to that level of dev skill yet. Not sure I ever will. You’ve made it this far, so you can probably go further.
If you can solve your problems in 3 hours you’re doing well. I’m often banging my head against the desk for 3 days or worse. Just yesterday: Me: “...so I’m nervous I’m not going to have that working in 6 weeks.” Supervisor: “Don’t be nervous... you won’t.” Me: “Oh you think? But you sent me [that white paper with the algorithm and solution in it.]” Supervisor: “Yes that could help. But he was my student. It took him 6 years to develop that. So I don’t think you will have it working in 6 weeks.” For those who are wondering what might be so frustrating... 3D computational geometry. 🙄🔫
Oh man, I couldn't have related to this more now than ever. this is my throwaway so I can freely say: I'm a self-taught developer having been doing this since 2002 started with QBasic, html/css/javascript and graduated to VB for DoS, FoxPro, PHP, C#, Python and SQL, and have bascially juggled between these languages between job changes. This month I've practically given up on my development career. I've been looking for work since May. My side business isn't bringing in any clients. My resume and experience brings in tons of calls from interested recruiters but I always get the coder challenge interviews where I'm expected to parse binary-trees or create sorting algorithms that are O(1) vs O(n^2 ), etc. things I simply do not know and can't seem to grasp. Ask me to build you something, I'll build it. Ask me to explain how the inner workings work.... :/ I've failed so many interviews and code-challenges due to being self taught that I have no where to go anymore. I don't know what to do. I too have done this for so long I'm at a loss. I know IT is a broad field but unless I want to do helpdesk calls for a 75% paycut from what I've earned in the past... Now knowing reddit, someone here is going to say "Well if you know where you're failing, study up on it and then take the interview" but its just not that easy for an old guy like me. I know the terms, I know the concepts, I can tell you what we need to look up and why but implementing it especially when being watched by the interviewer kills me. I draw blanks each and every time. Also I rely heavily on interactive shells (e.g. IPython, or C#'s line-by-line debugger, PHP-Debug) and using Test-Driven Development. I blame this on my "Working in every language, can't memorize the exact syntax, do a quick look up to remember and then try-run-try-success" type of working. My previous employer outsourced IT in May and we were laid off. I've been looking for work since then, freelancing, going back to previous clients, interviewing like crazy. I even have my linked in with my headline saying "self-taugh; no degree" yet I get to an interview and am told its a requirement. When they say they will accept relevant experience I then get questions like "Implement a linked-list... binary-tree... markov chain...." and I'm like Huh? I never got a chance to go to school for this (primarily becasue they didnt teach web development then) and I have many friends in family in school saying its a "waste of time". Sometimes I wish I could kick them. Sorry for going off on a rant here but I've been holding all of this in. My wife has no clue and thinks the job search is going well. She is a full-time student going for her teaching degree (elementry teacher) but isn't working. We have $40 in our savings which I'll consume for food money next week and I'm not even sure what to say. I just smile and say things are good. I mean I get at least three interviews (primarily phone interviews) a week. I even went as far as going to a retail store with a now hiring job and filling out an application but once they requested a resume (and the hiring manager found me on linkedin) I was denied the job for being over-qualified. When I asked why people say that and don't just give me a job because I need to eat, they say "you're a risk. You may find something better and leave, its a cost to us". And I get it, I respect that, but I can't tell my landlord that I can't pay rent because I'm over qualified for a retail job but don't have the qualifications for a job in my line of work. My last project had me implementing external services between 13 different systems. People on the team with degrees said it was "impossible" and wouldn't work and I did it. Blood sweat and tears (and many many long nights) but I did it. Then they let us go. All my hard work meant nothing to that employer. All my dedication. I busted my ass because I wanted to retire there. I'm older than the 20-somethings at all the start-ups, I can't find aas easily as before when experience was enough. I look at these bootcamps and think to myself I should take one some day, but they teach you how to build apps. I dont think they teach you all the computer science stuff. I already know how to build apps. I'm so lost and confused. I've attempted to sign up to online universities but family life and a full-time job usually got in the way. Now unemployed I have the time but ofcourse no money. And Yes, I know reddit will say "Many people have a family and a full time job and go to school" I understand that, but having to take 2x to 3x (and depending on complexity even longer) than a CS graduate to tackle a problem gets in the way of study time. That is one thing I am proud of though, I may take longer but I always get the job done. Isn't that part of Hacker culture? I mean true hacker not malicious hacker. Isn't the drive to solve the puzzle and the determination to figure it out worth anything anymore? I don't know. All I know is I'm shit out of luck and my entire family (and most my friends) know me as this "successful guy" who will get "the next best thing very soon". But how am i going to eat next week? Funny thing, In my past few tax-returns we've made decent money so I can't qualify for aid. And before Reddit asks "Well why didn't you save money?" I did but we've gone through it like crazy since May. Living costs in Los Angeles are insane. I was just short of six months savings as is usually recommended. I don't know what to do. Sorry for this but I just need to let it all out. TL;DR: life sucks
&gt;I trained empirically Would definitely be difficult to train with *a priori* methods.
It’s not burnout. I had burnout multiples times and never has anyone complained about the quality of my work, even being severely burned out at that moment. Js fatigue is one thing, being fired multiple times as a software developer is something else.
Sorry but this is going to sound rude. I can understand being tired of learning new stuff constantly, (js fatigue and all that) but if you are just simply not good enough after 10 years, you should left software development. I have never seen anyone improve after so much time, you probably don’t try hard enough because I assume you don’t like it, so you never will. And as you said, being fired multiple times is really suspicious... IT it’s a world full of people that aren’t good enough, or good at all, and it’s a real problem because they will suffer a lot of stress and companies will have problems because of their performance. So, you should do a favor to yourself and plan a transition to another career, don’t jump without thinking. You will be much happier, because for this job you need a lot of passion, and if you don’t have it, is better to leave. But the good news is that you have time and an above average paying job,it’s really easy to find something else, so you can keep jumping works while learning something else that interest you more, or while searching for another job. But definitely change careers as soon as you are ready. I have friends in your same position, and they are really struggling with trying to fake skills or not being able to make deadlines, etc. Even passionate people that love software development suffer burnout, so I can’t imagine how bad it is for someone that doesn’t event like it that much...
Definitely this. I've been learning about 7 or 8 months full time and If I get stuck on something for hours, I do anything else for a few hours / days; when I come back I always figure it out. The only problem is that I assume most workplaces won't give me the luxury of removing myself from the problem till I'm focused &amp; motivated enough to solve it... *eeep*
Mate, it's not your fault. You are in poisoning environment. It's like in personal life - if you are surrounded by people that don't like you or don't respect you, you feel bad, because such people usually try to smack down you and your self-esteem. The only solution is to go to another company, but do your homework to research the new company environment.
I kept my response brief, so let me elaborate. I drop a function stub into the editor and provide example unit tests, so there is little room for misunderstanding. The questions themselves are *very* elementary, and fair. The point is to spot quickly if someone lives, eats and breathes code. There are many, many fakers out there. I've shown this approach to many people who are helping with the interview process. Most people start by saying that this is ridiculously easy and a worthless exercise, they are then amazed and shocked to see 50% of candidates cannot answer these simple questions. And that's the problem, our industry is full of fakers. This approach is a really effective way of spotting those fakers quickly. 
Be a tester?
I have 10+ years of experience as a developer. I can help you if I had a better understanding of your work flow. Maybe I can help you debug faster or teach you some tricks to write cleaner code. Just send me a message.
Damn... I can only tell you to keep trying and have hope, there are places where they don’t do the stupid interviews with complex algorithms that you will never use or implement. If I were you I would do specific CVs for each position. Let’s say, if it’s a C# job, create one specific for C#, or Python, etc. Because a lot of times they are searching for someone specialized in one technology more than a generalist. Btw, and I know you did said it, but yes, buy a book about data structures and algorithms and read it. You don’t have to memorize it, just read it a couple times. You will entertain yourself more than you think and learn something interesting. It’s mainly useful for interviews, but knowing how a linked list works is useful for example to understand lists in functional programming. (Because they are usually linked lists) Recommended: http://a.co/584YfoMhttp://a.co/584YfoM 
&gt; sorry for all the duplicate posts. Why don't you delete the duplicate now that you noticed it?
The [spread operator](https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Operators/Spread_operator).
Thanks ! Do you think i should be focusing on algorithms as well ?
Promises, default parameters, template literals, destructuring assignment. Here's a nice list of 10 popular features https://webapplog.com/es6/
Totally agree! You have to find something willing to lose sleep for.
I totally understand where you're at. You could try any or all of the following: 1) Create a website that shows what you can do. 2) Put code samples on codepen or GitHub that play to your strengths 3) Stop focusing on the technology you've used in your CV, start focusing on the problems you've solved and what you brought to projects you've worked on. Show the experience you have in different industries. 4) Stop relying on recruiters. Make contacts and bring yourself to the attention of those who are hiring rather than those who work for those who are hiring 5) Learn new stuff. Take yourself out of your comfort zone. Learn about blockchain, deep learning, data manipulation, ad tech...Anything new. Anything current. Anything exciting that you can talk about with others. 6) Write about your experiences. Tell stories that teach things. And stop looking inward. Good luck
Have you considered that maybe you're trying to please people because you feel inadequate? I know that it often feels best to say "yes" all the time when people ask if something can be done or if you can do it, feeling that if you do some research or bash your head against it long enough you'll figure it out, but this can lead to personal disaster and mental breakdown. Learn to say "I don't know" and "no". And NEVER be afraid to ask someone who knows more than you do. And you may be assuming that this poor reputation is real. Maybe it's you telling yourself it's real. We are often so self-critical that we assume others feel the same, but it's only an assumption. If people are telling you your performance is poor, ask them why? Ask them how you can improve. Put them on the spot. Make them pay for their opinions.
You should listen to Jeffrey Way's Laravel Snippets episode titled "You Will Figure It Out. Everytime." at https://laracasts.simplecast.fm/30.
Dude i been considered top of my game in multiple languages backend and fromtend for ten years... and i seriously just burned hours on a new ORM’s query builder thinking my query was always just slightly off when the whole time the correct data was not getting set in my functional test mocks.
&gt;Reading blog posts is good, but watching video courses is even better because they are more engaging. Yeeeeaahhh, no. I can skip, hop and jump around a blog post very easily. Can't do that with a video.
I don't know about all workplaces, but the ones I've been at usually give you at least 2-3 things to work on over a certain timeframe. So you can work on your other projects if you get stuck on one
I wrote a song instructing you [how to build a 3D physics engine](https://m.youtube.com/watch?v=B0aMwrtEliY) after paralellizing a physics engine with OpenCL for the web and making a game out of it using WebGL. 
And once you've solved a problem once, even if your solution was ugly as hell, you now understand the problem and the wider picture better. Your next pass will be more informed out the gate, are aware of the pitfalls already. I write some awful stuff at work on my first pass.
OK! two things here. FIRST Burnout happens even to those of us who live writing code. I have burst of amazing productivity followed by like a week of can't develop shit. SECOND Close your eyes and imagine what your perfect job is. If its not some type of developer move on. If you are a programmer just because you need a paycheck find something else to do. Being a developer is one of the most exhausting ways of making money for someone who doesn't like doing it; furthermore, if you don't enjoy it you aren't going to be good at it. I can't stress this enough I have worked with a number of people who hated programming but someone told them that's a good way to make money. These people end up being terrible programmers that I have to clean up after. There are other jobs around development that these people can move into. Business Analyst, Product Owner, Project Manager, Scrum Master, Support, UX/UI, and Sales. You can benefit from all of you development experience in these types of position and it will be highly appreciated
That's not really what this discussion is about though.
This has been my go to advice for almost everything ever since I heard it. 
this works for development &amp; also tekken on ps1
Thats weird. In 11 years of this i have yet to have an algo interview. Usually its a take home test similar to what i would be working on or fixing unit tests while pairing. Maybe youre just in the wrong city or need to change your resume to get the right employers. I know a developer in their 50s who commutes to SF every other week from reno ‘cause its cheaper. 
PM me if you're living in LA, I can get you an interview, we generally stick to practical questions.
Don’t forget that you’re in an industry where demand constantly outstrips supply. Take a breath and study something that demand is red hot for so you can choose a better employer. As an example, currently React Native people are hard to find where I am. I’m getting calls from agents every week. Don’t put up with people who don’t treat you with respect. Kia kaha.
Sometimes it is enough to change team. Colleagues is what makes a job great/horrible.
Some options or routes you could take: 1. Go and work for a small agency (5-10 people) where you're the sole developer or at least number 2. This will give you increased responsibility and workload, but at the same time you'll get a lot of control back. You'll feel more rewarded and proud when you see your work coming to life. 2. Use all that you've learned to go solo and freelance / contract into different places. The variety will interest you and if you hit on a job you don't like, you can always leave with no harm done. You'll meet lots of people and learn a great deal. 3. Career change to another aspect of digital. With your real-world development knowledge, you might make a great project manager or UX consultant. You already understand the principles of development very well, so merging that with another career choice will give you an edge that makes you more competitive than others. Good luck!
Here is my first go at what i remember task 1 one. I didn't implement a server side currently, just used localStorage to persist, as its trivial to swap that out with a post / get. https://codepen.io/anon/pen/XePOyp 
https://www.reddit.com/r/sysadmin/comments/6v26zb/i_seem_to_be_failing_upwards_and_am_awaiting_the/dlx7rb0/ Sounds like burnout to me. Switch up your path. Evaluate your strengths, see where you'd like to be. PM me if you'd like some help with this. I have *absolutely no doubt* we can get you into an environment where you'll not only flourish but also be happy and feel valuable.
Yeah, by token he basically just means words. Token is used a lot if you ever read about or study compilers. Another 10 cent word: Tokenize, to break into words. I'm still stuck on blob. Not sure if he's using it in a technical sense or just as an English word. Seriously though, I might code something like this just for my own amusement, but flip this as a 1 hour assignment. I might be old school but the first thing I do when given something like this is take out a piece of paper and start writing stuff down to help me sketch out a solution. What functions will I need? What data structures will be used. That helps me figure out how to proceed. It also shows me where my first ideas aren't the best or will have issues elsewhere. For example, the first function I thought about I called tokenizeStr() to break the string into spans (so I could apply classes to every word and make each selectable). But, thinking about that, what if we extended this to a word processor. Would we want 80,000 span elements for perhaps 100 annotations. So that leads to the question: How long will these text strings be? Then he wanted different displays for different annotations, so I figured use a simple data structure like {A: 'magenta', B:'blue'} for that. But just doing this makes me ask: Do we really want 1000 different colors for 1000 annotations? Maybe he wanted tags that aren't the same as the annotations? Oh, well, I have too much else to do... Sure to some this might appear simple and they just jump into it but I like having a plan. Just jumping into something is how bad decisions get coded.
Try to reconnect with your prev colleagues/bosses. Some path surely will open up n work out well for you. If they know you are a fix-it-all man, they would love to hire you. Pick up that phone now n give a ring to the ones who can possibly help. Life is beautiful. We make a mess out of it ourselves. All the best.
Why radio buttons? If you take the approach of splitting the entire string up, why not just split it into spans? You can then use the click handler on each span to set or unset the 'annotations' (and update whatever database you want) And, you can apply different css classes to the spans to highlight them differently, for example. 
Hi, there. While you have described mainly the psychological-emotional-social side of the problem, I feel like you haven't really gone into the technical/personal part of the problem with enough detail. I point this out because there are many varied reasons that can end up putting you in such a situation and it's important knowing which one it is. Otherwise it can be hard (and sometimes risky) to apply a solution. It may be that you lack education in some concepts; this can be learned. It may be that you don't find it interesting; this may suggest a change in career (big or small). It may be that you focus on learning/doing the wrong things; this can be fixed by focusing on other things. Etc. It may be many different things. You don't mention what is it about your work that gives the impression of not being "such a good developer". Do you write clean, clear code? Do you give good names to your variables and functions? Is your code well structured and organized? Do you write huge blocks of code that are hard to follow? Do you have many bugs in your code? Do you write tests? Are you able to explain what your code does or do you find it hard to go back to it yourself after some months? Do communicate well with other programmers? With product owners? With UX? With business? There's lot's of different options. Make an effort to think about which one or ones apply to your case. You do mention "learning about _new_ technologies and being relevant in this _changing_ industry". Maybe it's just that. Maybe you're focusing too much on chasing the new and trendy. This is easily fixed by... not doing it :) No, really. Most of what you see as new in the JavaScript ecosystem is, let's admit it, hardly new at all. Instead of trying to keep up with that, I would suggest focusing on _more general programming concepts_. Those never (hardly ever) get old. Stop learning about particular implementations of ideas and learn about the ideas themselves, the approaches, and programming _in general_. But in any case, this is just one point. Do think about the previous questions. Do try to find the root of the problem before you decide how to solve it. ---- On the other hand... I rarely tell someone that programming is not for them and hardly that they _can't_ do it. Much less someone I don't really know at all. But having said this, if you do arrive at that conclusion, then that's perfectly fine. Really. It's not the end of the world. Just find something else you actually _want_ to do, and put yourself to it. This can also be a good detail to meditate upon: Do you _really want_ to be a developer? If the answer's "no", don't force yourself to it. Hey, maybe you can make a change that doesn't involve such a big leap. You could turn into design, or UX, or maybe system administration... Or carpentry. Or accounting. Or whatever, really. But the first step is really knowing what you _want_ to do.
My top 5 pics are * Import / Export * Spread / Rest operator * Class declaration syntax * Arrow functions with implicit return * Variable destructuring Honourable mention goes to Array.includes because of how stupid indexOf is and const and let because of the greater security they embed into the language. 
This is not burnout. Has nothing to do with it.
The programming space is very big. You could be a poor Angular programmer but this doesn't mean you wouldn't do well just doing HTML+CSS+jQuery stuff (eg: Wordpress sites). This might not be your dream job but if you still want to work in this world it could be an option. If you have other skills you might want to evaluate other options.
A good step would be to accept that you can be a bad developer, but if you're willing to improve talk to your boss and ask him what areas can you improve short term to help you keep your job. Long term I would focus on areas that you like to work, sometimes being forced into jobs you dont like make you lose confidence and motivation. That's my advice to you, hope you can make it!
Why? For me the spread operator is so simple and used extensively from my subjective view.
Software development is just one of many paths you may follow in your work-life. Your hacking productivity is not your worth, and you don't have to accept that development is your path. It may not be. That's perfectly fine too. I found my career happiness after I shut down my software and hosting company after ten years of stress. I found I liked to work on my feet, utilizing my body and social skills and "getting out in the world". Being tired in bone and muscle has its own rewards.
Awesome conference! I'm planning to visit it again next year!
[Generator functions](http://thejsguy.com/2016/10/15/a-practical-introduction-to-es6-generator-functions.html) change everything. Unfortunately, they are quite difficult to grok if you don't have experience with for example Python. But their power combined with asynchronous operations is tremendous.
Damn, I really feel for you. It sucks sitting down and looking at algorithm fundamentals. I've found doing mock coding interviews through [pramp](pramp.com) helped a lot to solve problems I didn't know how to do, and helped build confidence for me for real interviews.
I know how you feel, man; I spent a ton of time freelancing trying to build experience until I finally found a company; and then the company went into a "reorganisation" and 800 people got fired; my contract was expiring a week later so they let me ride it out. Anyway, after a first initial fail at job searching, I just picked one language and focused everything on it (Javascript in this case). I read lots of "javascript interview questions" articles and those helped loads, especially getting past HR and through the initial stages of the interviews. I, like you, hate coding challenges, so I drilled coding patterns and quick DSA puzzles on sites like hackerrank and coderbyte in my free time (to the point where I got addicted to them). In the end, I got my pick, because keep in mind: the initial HR people doing the screening will rely on tools like hackerrank and "top 10 interview questions in XYZ language" to help them out because they are not necessarily software engineers. And those software engineers that are interviewing you may not have strong people skills and wont know what to ask, so they'll go to these sites also. I've had about 20 interviews and I'd dare to say 15 of them used questions from those sites (the other 5 were for specific AngularJS / Angular Nth jobs). If you're confident you can kill the second half of the interview, I highly recommend using those sites I suggested to get through the initial screening. 
He's been fired multiple times. It's not the environment.
Agree with this. Don’t fight yourself. Do something you’re good at.
Classic. No, no, no. It is just burnout. Get rest, left job and go to another. There are tons of available jobs. Never sit on such place, switch jobs, until you get your good workplace atmosphere.
Yup. The world (not only js one) in last 1-2 years is changed, dramatically.
Yeah I don’t know what this guys thinks they’re doing giving such shitty advice.... literally reddit in a nutshell to attribute every developer woe to “burnout”. What OP described is clearly a far greater issue than simply burning out as it’s plagued him his entire career (by his own admission). Sounds much more like being a dev in a high paced environment is just the wrong fit. There are plenty of places that have a more chilled approach that I’m sure he’d feel more comfortable at.
More like "hey thanks for coming to the interview, i figured since you have 2+ years NodeJS experience you should be able to hack together a trivial http server for this task. i know it's not front-end but your resume, which is the reason we're interviewing you in the first place, says here that you have 2+ years experience with NodeJS and as a senior developer your responsibilities will realistically sometimes stretch outside your comfort zone."
i mean if they're expecting 600 pounds a day they should be able to do 5 pounds worth of work in an hour
Would you be asking for 600 pounds a day? I think it's a relevant factor here. I mean, if you needed this functionality yourself, would you rather pay someone 75 pounds to implement it in an hour or do it yourself in three-four?
I think it will depend on the problem statement. I'd be wary of over-engineering your solution by introducing unnecessary complexity. Keep your code simple and clean by making sure what you write has purpose. If you want to explain your insights beyond your code, then add comments or documentation.
Do you realize that all that "cs stuff" studied at college is the same stuff you can find on any cs book sold on amazon right? During college I literally bought all my books from amazon.
For someone with over 10 years under their belt, that something is often their family.
You shouldn't try to keep up with all new technologies. Just pick a few viable ones. So if you're doing Angular, just do that and its related ecosystem. You need to get competent and effective at one thing first. That is what will make you useful to companies and keep you employed. 
&gt; 20-somethings at all the start-ups Start looking at more boring non-startup places. Insurance companies, banks, government.
How would you put that in a job description ? Senior Front-end with CRUD experience on backend? Do you mention logging on the backend as well? What about bash? Shall that person be able to use grep or not or that's devops job? Problem solving means not living/coding in vacuum. Problem solving pushes you to think. To be able to think creatively and not only apply recipes you find online, forces you to understand the building blocks of your framework. Yes, you are specialised in the 1000 libraries inside your domain and how to gel them together. To solve problems that really matter in the grand scheme of things, requires enough tech acumen to lead the conversation with the designer UX/UI person and also with the backend leads. Without mastery of these you cannot push the limits of what you can do in your own domain and these other people will "eat you alive". If a get/set operation from a backend you have experience with throws you off-guard then you cannot be senior. All the people I've seen mentioned in their CV they had at least 6 month experience with NodeJS (average 2Y+). A contractor with senior front-end developer is a hired gun and should come with the weapons of his choice to get the bloody job done. I do expect this person to know how the browser works and what is the best option out of a set of four, given a set of constraints. 
[removed]
It was mentioned all over this thread that we tried to hire senior/lead front-end developers for 600GBP/day. The invite for the on-site happened only after they submitted their Github profile they demonstrated some good practices.
[removed]
Have you tried something like UpWork? It might at least help you keep some options while being unemployed. I really, really hate that I don't have any further advice than that. 
When I first started programming I would run into these roadblocks a lot. It got better with time. I learned to comment my code better. List of all the steps needed to make your code work and work each list item separately. After all task are complete? Continue to optimize your code.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [veu/mini-tetris/.../**tetris.js** (master → 17194a1)](https://github.com/veu/mini-tetris/blob/17194a13767d90ef1c31fe291e203d18644fae11/src/tetris.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
And anything government. It might be harder to get in, but they won't be firing you once you get in. It's spectacularly hard to be fired from a government job in my experience. 
&gt;my wife has no clue First things first, address this. Your wife deserves to know the truth, and she may surprise you with her help and support. 
You're so right. I have worked for 2 small companies and was always surrounded by sad programmers that were really not that good. I eventually made the move to a medium sized tech company and people really enjoy software. 
I don't get why people hate on npm now that they fixed that dependency issue (looking at you left-pad). Yea it doesn't come outta the box, but once you know what you use to do x, you can use it in all your projects.
I had the same problem 18 month ago... I felt I would prefer working in a Macdo than continue development. Then I discovered Software Craftmanship community. I saw passionate people trying to improve their workplace and people that work in healthy environment. I started to search a company that provide an healthy context for me. It really took me a long time but today I can't imagine doing something else cause our job is really the best. So don't give up, it's really worth and avoid toxic companies that put pressure on their developpers :)
Can you recommend some? Which were the most helpful, especially when it comes to interviews?
I was going to suggest something similar. There are plenty of positions that might work in a dev department that aren't necessarily developers. The positions mentioned above, plus QA/Test Automation, Business Analyst, etc.
Hi folks....I think javascript is not that hard. Sure it has gotchas but that is from evolving for many many years. I've finally reached some level of expertise and am willing to share that. If anytbody has any javasript questions please post and send me a link to it and I'll try to help. "All we have in this world is how we treat other people!" 
Deadlines are cancer... They should not exist. When you work with deadlines you always end up with ugly code cause you won't take time to "make it better" Gone through this several times in my career and I won't work with deadlines anymore cause the objective is to make the thing right, not make it work ;) A lot of employers can't understand that though... but some do
I wasn't hatting on npm. I was comparing Node's standard library to Python's standard library.
My bad
Try Salesforce! It’s amazing easy to use and the demand for Salesforce Developers is so high it would make your head spin. Trailhead is a free place to learn it and prepare for the certification exams. Don’t give up. If you love it then dig deep and keep trying.
Well, it depends, if something has to get out at a certain date (usually marketing or legal reasons) deadlines are needed. The problem is when these deadlines are not reasonable. I would even say that I prefer having deadlines, because if not I can even fall into over optimizing or plain procrastination. But obviously, realistic deadlines only. 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy 
I can second this. I had a team/manager that was toxic. Rumors spread that I wasn't trying and was horrible at my job. I switched teams and one year later I was promoted and added to one of the lead teams in charge of my area. Sometimes change can be a good thing.
Are you asking if my bill rate is more than £75/hr (~$100/hr)? Kind of a personal question, but yes. 
Well, if that thing is your career, you'll be better at it. You can't have it all.
0 is falsy so if you pass it into your if statement it will return false. I would explicitly check for undefined in this case, ie `if(value === undefined)`.
I was in that exact same boat -- took a year off. Try selling your experience with teamwork and soft skills. A lot of the latest tech is covered by kids who go through college and boot camp. The kids who have almost 0 experience working with other people and in the industry. Maybe you're more management material than you know...
If you know a bit of C#/Java (probably true for many enterprise devs) I've found that "Data Structures and Algorithms in Java" by Goodrich et al. is a good practical introduction that links theory with understandable code in the text. Hardcore CS/math guys will refer you to CLRS, but it's way too dense to start with.
Could you please elaborate with an example maybe?
Agreed.. doesn't really sound like burnout.
Well done! Hi5. How many years experience do you have in building text editors and manipulating text in the browser? It is also not fair that you used your brain to come up with a solution rather than trying to find a library that does it for you or someone that had this exact solution.
This should work: function(d){ if ("field" in d) { var value = parseFloat(d.field); return cScale(value); } else { return "rgba(250, 210, 1, 0.7)"; } } 
Mind paying the clean code tricks? I'm always curious what others do.
There's a bit that didn't get too much press: WeakMap/WeakSet, Proxy, Reflect, and better Unicode support. I wrote this up a while ago: https://abstract.properties/exciting-es2015-features.html
That does a very good job of preventing my 0 values from being confused with undefined values, however I can't find a single way to then pass a style value to undefined circles. 
Sorry, I can barely imagine how depressing that must be. In the meantime, maybe you can follow these free courses on algorithms: https://www.khanacademy.org/computing/computer-science/algorithms It's probably not easy to focus with that doom hanging over you, but try. You made it this far, it's time to let go of the imposter syndrome. Learn some of the lingo, and dig into the algorithms. In particular, try futzing with the algorithms, understanding why each step does what it does.
Yes, she signed up for the package deal, and not getting her involved only makes things harder.
ALSO does a swell job preventing 0 values from being passed as undefined, yet fails to pass a value to undefined elements. 
Holy shit, I legit didn't know `.includes()` was added... Thank jeebus 🙏
I have come under the impression that front end development is extremely under appreciated. I have worked as a full stack developer and noticed that for front end development you get comments like "It took you that long to make this little change?!", "Just make a little select that can change how everything works, simple!". However, on the backend people are consistently amazed at the most simplest of modifications. Even other developers! Backend work is much more 'magical' and appreciated, front end work not so much because everyone can see something and project their notions of how hard or simple something is to do. Is this the experience of other developers? 
I've made this game to learn CSS and make my skills better in JQuery :) It's based on the game Peg Solitaire: https://en.wikipedia.org/wiki/Peg_solitaire In the future i plan to include more boards, undo move, and reset board. It works on Chrome and Chrome Mobile. I don't know how it is in other browsers. It seems to work fine, but need a little fixes in CSS. I would post the code on GitHub too but is isn't so well written. I am still struggling with clean code :D I don't know how to write more simply lines like this: https://i.imgur.com/TSnCsuD.jpg For me myself this implementation works fine, but i think for other programmers this kind of programming doesn't make much sense. If you find any Bug's or have ideas for things you think i could programm or games, just wirte a comment ;) Other projects: http://www.noob-programmer.com/piano/ http://www.noob-programmer.com/howtodraw/ 
What city are you in?
thank. you. so. much. Told you it'd be simple haha
You were right to come for advice then. You had twenty candidates that were all deemed capable because of their Github profile but every single one failed your interview. It does say more about the interview than the candidates.
So, I'm going to get out my soapbox for a sec. I've been in software development for over 20 years. I have a BS and MS in Computer Science from an Engineering school. I am in no way surprised that this inquiry comes in this particular sub. The software development industry is flooded with "self-taught" people. I've known some really good ones. A formal degree is not necessary to be a good developer, but a formal education is critical, even if you learn it on your own. I didn't learn languages in school (aside from Pascal, for learning data structures and C for Operating Systems.) I learned information science: data structures, algorithms, graph theory, set math, and all the "stuff" behind the languages. So now, when I want to learn a new language, it takes very little time, because I know how they all work. If you call yourself a software developer and do not (at least) know the terms: Turing Machine, Big O, Binding Time, functional and procedural, you need to hit the books. Too many "self-taught" developers are people who learn things about specific tech, languages, or things like HTML and CSS, but then never learn the underlying engineering principles. So they become irrelevant over time and write bad code when the task is complex or when there is no cut and paste code online. All of the important books are available to purchase. Or for free online. There are free online classes from great universities that teach all these things. You can't learn to drive by reading the manual on a specific car. TLDR; learn computer science, not technology (like JavaScript). If you don't like the science part, do something else. 
&gt; fails to pass a value to undefined elements What do you mean by that?
You can just check if it's `=== 0` or `=== undefined`. By the way, if there is no "field" property, parseFloat will return `NaN`. &gt; parseFloat({}.field) NaN You can use isNaN to check if it's NaN (or if it's NaN when converted to a number).
It stopped the previous behavior, wherein a value of 0.0 yielded a style value of fill: rgba(250, 210, 1, 0.7); . Now a value of 0.0 gets the correct fill style value according to my diverging scale. However, now it doesn't recognize undefined values at all, and passes nothing resulting in a fill style of #000; 
While I think template literals are relatively widely known, I don’t think *tagged* template literals really get the love they deserve. It is an extremely powerful feature. Also, proxies are going to be huge for data binding and many other use cases.
Ah! I thought that was unintended behavior. function(d){ if ("field" in d) { var value = parseFloat(d.field); if (value !== 0) { return cScale(value); } } return "rgba(250, 210, 1, 0.7)"; }
`else if value === undefined ` ?
na, still not fair. i'm sure many people here have resumes with a degree in a non-CS field from years ago. it's not fair to ask people to solve a physics problem on the spot just because it was on their resume. this test might've been acceptable if they had specified 'we're going to have a full-stack code challenge during the interview' beforehand, but then why is it listed as a front-end job?
Nor are popular features
Wouldn't that code stop a value of 0.0 from getting any value? Also, started using parseFloat due to [this issue](https://www.reddit.com/r/javascript/comments/74n0xd/why_am_i_getting_nan_when_trying_to_parseint/). Would number work? 
What did the OP ask then in his last sentence...
Then what did OP ask in the last paragraph...
Tried it, no dice. 
The description is missing at the linked page. Just try `Number()` out in a JS command line. If `value` is 0.0, the last line will be executed – try it out!
This was my first thought too. If you're having problems like this from multiple jobs despite the effort you're putting into it, it sounds like you're either happening to find the worst companies to work for or the companies available to work for aren't the kind you want to be working for. And that could be a consequence of where you live. Might be time for a move.
Note: this project was started in 2014 with a dozen talented JS code-golfers. Last month, the first version received a lot of success after being posted here and on Hacker News. Today, we present you the full version, in less than 256b. It offers a better presentation, as well as more features (floats support, Math functions, localstorage persistence, better cascading, etc.) If you enjoy that, we invite you to discover our other mini-projects [https://gist.github.com/xem/206db44adbdd09bac424](here) ! We're also golfing one project a day for [#golfctober](https://twitter.com/MaximeEuziere/status/914823629006888960) Cheers, The codegolf team
Those were in ES2016 though. I assumed this was about ES2017 or ES2018.
Me either in a 20 year programming career, including 11 years in Los Angeles where OP lives.
You're right, it looks like there is some strange behaviour when deselecting multiselects on mobile, thanks for pointing it out! I'll get that fixed up.
That's what I'm thinking .. sounds like he needs to consider packing up and moving. The cost of living and quality of life in LA just aren't worth it to me IMO.
Maybe you're actually not that good.
This article is talking about the old 2016 version of Javascript! The newest version is 2017, which has lots of cool features like async/await, shared memory &amp; atomics, plus some new Object methods like `values`, `entries`, and `getOwnPropertyDescriptors`.
this is encouraging. thanks
Note: this project was started in 2014 with a dozen talented JS code-golfers. Last month, the first version received a lot of success after being posted here and on Hacker News. Today, we present you the full version, in less than 256b. It offers a better presentation, as well as more features (floats, strings, Math functions, localstorage persistence, better cascading, etc.) If you enjoy that, we invite you to discover our other mini-projects [here](https://gist.github.com/xem/206db44adbdd09bac424) We're also golfing one project a day for [#golfctober](https://twitter.com/MaximeEuziere/status/914823629006888960) Cheers, The codegolf team
On one hand it sounds your place of employment has a rough atmosphere and and out of touch managers, but on the other; if you repeatedly get fired and told you perform you poorly then maybe developing software just isn't for you, it does take a specific mindset and a natural talent for learning new tech quickly. You can most likely still stay in software but switch to a QA role maybe, or if you still haven't given up yet try finding companies with slower evolving stacks like .NET
My team leaves it at "Do it ugly", and then duct tape new requirements to the side.
&gt; it's not fair to ask people to solve a physics problem on the spot just because it was on their resume. But it's fair to ask someone with a physics degree to calculate the time it takes for an object to fall straight to the ground in vacuum given a height and an acceleration constant. That compares to a physics degree like a trivial web server compares to two years of node js experience. &gt; this test might've been acceptable if they had specified 'we're going to have a full-stack code challenge during the interview' I certainly would never have expected in my career of working with back-end software not to touch the front end side of things. I am not sure why the converse is not a given. Certainly I'd expect a senior to be able to hack together a PoC backend just like a back-end senior engineer would churn out a PoC front-end.
The guy can't understand binary trees and you suggest he take up machine learning? Cruel.
Deadlines are a hard reality in corporate programming. The challenge of a corporate developer, in most cases, is not to make it the best it can be if we had all the time in the world, but the best it can be with the time and money available to do it. Once you accept that and stop thrashing about it, you'll find yourself much happier. When deadlines are unreasonable, I find repeating the following mantra helps a lot. * It's not my money being invested in this product, and I'm getting paid to write it either way.
Sorry bro. If it's worth anything, here's my advice: first, as already said, the wife needs to know. Second, third, and fourth are: Network, Network, and Network. It's really hard to evaluate someone from the other side of the table, but if you have a former co-worker whispering into the hiring boss's ear saying "his skills are average, but he's reliable, works well with others, and works his ass off to come through" they're gonna find a spot for ya. Call *each* and *every* co-worker (and vendor) you've worked with in the last 15 years and tell them you're looking for a new gig and see if they know of anything. They may know of openings that haven't even been posted yet. Fifth: you said you networked 13 different systems... assuming at least some of those weren't home grown, have you looked for jobs where you can parlay your expertise with those systems, either with clients or the companies that sell them? Finally, you mentioned TDD, have you considered working as a test engineer? A good one is gold! Good luck man!
Hi /u/novetility, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Hi /u/AutoModerator, For javascript help, please visit /r/LearnJavascript. Thank you!
&gt; Close your eyes and imagine what your perfect job is. Whenever I do this, there is no job, just a large enough balance in my bank account that I never *must* work again.
Thanks I'll check out the java recommendation. I googled it and the first result was the full textbook in PDF format on some schools web server . Also there's a copy on GitHub.. God bless the internet.
Great advice. Data structures classes are the only semipractical takeaway from my compsci degree. As a programmer there's no way you won't find it interesting. Read a book, do the exercises, skip the blogs, you'll get the hang of it.
It's my understanding that he was looking for employees, not contractors. Bill rate is obviously quite higher than salary. What I mean to say is that asking for 75 pounds an hour is a lot. He had applicants that didn't nope the fuck out because they thought the test was stupid that gave it a try, their reasons for failing clearly mostly being related to their lack of experience if the list of BS is anywhere near the truth. If you *won't* do it that's one thing, but if you *can't* do it you frankly shouldn't be asking for 75 pounds in your hand per hour. I agree that the simple backend work, by some stretch, may have been too much for ask for. Doing it in an hour, too, given the nervous circumstances of an interview. But you should get a third of the way there, halfway there or whatever, not "this is data engineering and I'm not doing that".
I can't say this loudly enough, TELL YOUR WIFE. Your big mistake so far was trying to suffer through this on your one, probably you are being too proud and don't want to disappoint people's idealised views of you. TELL YOUR WIFE - ideally yesterday.
never used node as a server but a new .Net mvc project + a single static variable solves the problem, i assume the implementation is equally simple in node.
I absolutely hate whiteboarding during an interview. It is not a good measure of a developer's skill. I can blow away any interview but ask me to write code on a board in the middle of an interview and you would think I had never programmed in my life. I have chose to specialize in Javascript. Been doing only that for about 8-9 years now. I would highly recommend focusing on a single (set) of tech. I never used react or most popular front end frameworks, but I know JavaScript and that's often enough. After my last company went down I took extra time to find a job doing Nodejs. I know very little about databases, networks, etc but that's why people are hired for one position, not many.
Dude, leave asap. Try again. Take it easy, try to grow, better yourself but in the right environment. Focus on finding an environment that's good for you first and foremost. If you wanna stay on this path, you'll make it.
yeah but React heavily uses classes and I want to be able to ace any OO questions that come my way as a developing senior.
Flip to project management or UX is my advice. You know the tech which is a big advantage.
I have the same question. The OP said he didn't like sending the modified text back to the server ( see _poor above and I can understand his point, especially if all the text is being resent) OP did like a solution that used an index position to track the tag. (darrenturn90 who has some great looking code). The issue I see with this is that what if somebody misspelled a word in the text and needs to change it. Now all the index positions change and we have to update them, which is fine. But it creates a dependency where data could change one place and not in the other. I wonder how real word processors deal with annotations. That's definitely something worth looking up/understanding. To me dynamically adding or deleting span tags seems a perfectly acceptable solution. Perhaps I'm wrong.
Tru, tru
That is one of the reasons we chose to adopt Vue.js. 
I'm sorry man.. I would try and look at other companies or places with an IT department. In that case having a wide range of knowledge and being able to figure out how to solve weird and complex problems is a complete asset.
I was fired from my first job as a developer (sad thing was it was a Junior .NET developer position) and at that point I thought I was donewith devolpment. I decided to try one more time. I kept reading and experimenting to learn as much new stuff as I could. Since then I've worked at one medium size company and two fortune 500 companies doing Web, .NET and Data Warehouse development and I love what I do. Keep learning and experimenting with new technology and when you fail, fail fast and fail hard. If your colleagues give you a poor reputation for trying to learn and trying new technology and to be innovative then you need new colleagues. Good companies want developers like that. Try and find a good person to encourage, mentor and teach you. I think everyone on this sub knows that a lot of developers are condescending assholes, and those are the guys you want to stay away from. Best advice I can give you is to chase skills (money follows skills), never stop learning, and be obsessed with finding a better way to do EVERYTHING. Get in touch with some recruiters on LinkedIn and see if they can help you find a company/position that will suit you better. My dad used to tell me that you will never know if love you're job until you strive to be the best at it. Send me a pm if you need some help finding something new. I'd be glad to help. 
I'd be suspicious of anyone whose first instinct was a hack like this. Think of the people using screen readers.
Dude. It sounds like you're feeling depressed and that is likely coming through in your interviews. You CAN get a job. Clearly you should consider other cities or remote work. 1. Remove the self-taught bit from your resume. If you have enough experience, don't bother including an education section. 2. Big O notation is very easy. Most code is normally O(1), a for loop is O(n), nested for loops is O(n*n). If you don't understand it, learn it, it will take a few hours tops. 3. Tell your wife, cry on her shoulder. Pick yourself back up and keep interviewing. Also, how old are you? I've been coding since the 90's and I'm self taught as well. Part of self teaching involves reading and understanding computer science.
I guess you'll enjoy being unemployed then.
If it was burnout his colleagues would know he was already a good dev and was just hitting a tough spot. This is him just not being a good developer and other people are noticing.
elaborate? I mean as much as I love functional programming, I'm trying to imagine using React in a modular extendable way without classes.... and I don't know if Recompose is the correct answer.
This only works if you don't commit the ugly code. One you've put that code in the repository then you most likely will never come back and clean it up. I do agree to an extent with that logic, but do it ugly/right need to be back to back. Doing it right is often treated as something that can be done later and that's nothing more than tech debt. And anyone who's been in this industry long enough knows that tech debt almost never gets taken care of.
Thank you for the reply. I wonder how many front-end JavaScript developers have studied compilers enough to be familiar with token? I've been a developer for 20 years, but I only have a passing familiarity with compilers and have never heard of token. In college I took a number of courses focused on text parsing, but we never used the words token or tokenize. I wonder if this jargon has come into existence more recently. 
Vue.js doesn't use classes like React.js, and that is one of the reasons we chose to adopt it. Perhaps you aren't familiar with Vue. It is another JavaScript view library like angular, React, preact, etc. 
Element screenshotting is **sick**. I am genuinely excited for that. Kinda odd that it's stuck behind the command menu (I think right-click on the DOM tree might have been more intuitive) but that's fine. I just hope it allows you to take screenshots of (partially) off-screen elements, so that you can easily get an image of the whole page. Top-level await probably should be the most interesting feature to developers, but I'm still stuck in the past. Maybe this will make it easier to learn.
I don't think the app itself if useful. What would be useful, but seems to be lacking, is an explanation of the different shortcuts/how the code works at all for those of us that are uninformed. 
Hmmm, tried Number and no values were passed at all. 
Hey man. As a team lead architect I can relate to you. If you'd like to hear what I think feel free to pm. I have guys struggling on my team and have struggled myself. Lots. Software is about fit. You have to figure out if you're wrong or if your teams are wrong and why. Let me know. I'd be happy to help. 
i mean yea, many of us can do this in an afternoon. but that doesn't mean it's fair to have this as the code challenge when no context is given beforehand that it will be full stack. 
What the fuck is binding time lol
They also seemed to interact between the two groups for some reason, I would expect that if there are two different lists they should be scoped independently.
Yeah I understand that. What I'm saying, is are their vue equivalents for life cycle methods? How do you create a component (or a block of some UI) and then extend it intelligently without any class structure?
You might want to add tests to make sure you dont have any regressions!
Your link doesn't work. 
https://en.m.wikibooks.org/wiki/Introduction_to_Programming_Languages/Binding https://en.m.wikipedia.org/wiki/Language_binding In short (and over simplified), it is the point in the program's lifecycle when the data "type" is "bound" to the variable or function. JavaScript has a late binding time because the type of a variable is not "bound" until the moment a command is executed. C is bound at compile time. My point is that if you understand programming language (and compiler or interpreter) theory, this is stuff you know well already. If you don't, and want to be good at software development and you want to remain relevant over the years, learn it. 
It might not be the only way to do it, but you're only giving them an hour for the whole thing. Once they start down that road, they're not going to have time to stop and try something else if it's not working out.
If you are having trouble with computer science basics, there is a book called 'Cracking the Coding Interview'. It's been around for like 10 years now, but it's still a great resource. It goes through a bunch of different computer science interview questions and gives you the answers to them. Beyond being just good for interview practice, it's a great resource to help understand the basics (data structures, binary/boolean logic, search/sort algorithms, etc).
Ugh. Angular. I won't deny that some people just aren't built for web development. But just make sure it's not the places you're working. Trust me I know that feeling intimately.
&gt; Binding Time I had never before now heard the term 'binding time'.
Amen
Cause why reinvent the wheel
As usual, great work for us developers! Thank you devtools team :) I’m happy for the more advanced Cache API debugging capabilities, having delved into PWAs quite a bit lately.
I don't know you. I don't want to insult or offend you or anyone else. Maybe you're a well educated professional who just missed that day at school or maybe you understand the concept well but not the terminology. If you really don't know what it is (after looking it up) I highly recommend learning some things about languages and how compilers, interpreters, and the like actually function. It will help you in the future. 
Well yeah, it's code golf. It's not supposed to be useful. Whoosh... There's a link to the commented source on the linked page: https://github.com/xem/sheet/blob/gh-pages/full-commented.html
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [xem/sheet/.../**full-commented.html** (gh-pages → 926f7fa)](https://github.com/xem/sheet/blob/926f7fae69239f4c3ac88e412d0d4198cc9aa1e3/full-commented.html) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Computer Science is sort of a weird beast. In pretty much every other industry engineers and workers are separate jobs. An engineer will design a building and overseer its construction, and the you have workers doing all the mundane tasks of installing bolts and welding. In computer science, the engineers are also the people doing the work. What people usually want when they hire a dev is an Engineer. Someone who can look at a problem and design a solution that scales and is easy to maintain. As an engineer who has done thousands of interviews, the vast majority of the candidates I have seen aren't actually engineers, they are workers or mechanics. If you ask them to solve a problem they can hack something together, but they don't know how to look at a problem and break it down into an elegantly engineered solution. I wonder if the tech industry could use some benefit from separating the roles out more like they do in other industries. I think part of the reason for this is because if a building falls down its a huge issue, but if a production server breaks the consequences aren't nearly as expensive in most cases.
But but... does it support VBA macros?
It has to do with languages, compilers, and memory allocation. Effectively, binding is how a named variable is linked to a memory address that contains its value or implementation.
Async/await is from ES2017, not ES6 (ES2015). The big thing about modules is that they now actually work in browsers. Firefox and Edge need a flag and Chrome supports it out of the box.
Thanks. I really just mean that I had never heard (or at least, don't remember hearing) the literal phrase 'binding time'. I don't recall it appearing in my compilers class or any of the reading I've done since, nor in conversations with colleagues. I understand it after having looked it up, and connected it to my existing body of knowledge. And of course your original comment is valuable.
I want to reply to this for both you and OP. I've been in the industry over 20 years now and I still write code. Not as much as I used to, but I do. I have Saturday errands I need to get done so ill leave this as a placeholder to come fill in later. 
Whenever I do this I imagine billions of people building a giant pyramid by hand as a gift to me while I sip on tea.
As a manager there's a definite end to how much you can put up with though. The workplace isn't a classroom, if the developer cannot produce solutions to the company's problem in a timely manner and at a sufficient level of quality, that developer needs to go. This is especially true in smaller companies (imo), there may not be little simple tasks that you can give to your developers while they are catching up to an appropriate skill level. Personally in my company, I am not available to do a lot of hands-on guidance (because I simply don't have time), and there's not a lot of tasks available below a certain skill level. We try as much as possible not to hire anyone who isn't ok with this. Sounds like OP is at the wrong company to me, not necessarily the leadership.
We've all been there! Trust me man.
It's possible that being a software developer just isn't the career for you. If you really enjoy that kind of work, then maybe it's just a matter of taking the right kinds of training courses to improve your skills. But if you don't enjoy it, you should at least spend some time thinking about whether there are an other fields that sound more interesting to you (tech support, teaching, smart home technology installer, software sales, etc.). 
You are absolutely correct. I once thought this problem would be solved in the US by lawsuits resulting in insurance requiring degrees and licenses. This didn't turn out. Instead, what we see are literal tests in interviews to see if you know anything, which bear little or not resemblance to reality and are a poor indicator of future job performance. But we can't separate the worker from the thinker here, because the work is the thinking. Typing faster does not make you a good software developer. The person who can come up with the correct solution is the right person: implementation of that solution is part of the thinking. It is best when closer to a master/apprentice set up. Newer developers learning from the more experienced. Consider a great mural on a building: the concept of a single artist; the work done by others but others who are also artists who can understand the master's ideas and make them real. They learn and move on to become masters themselves. 
https://en.wikibooks.org/wiki/Introduction_to_Programming_Languages/Binding
I have to say, I'm a little surprised that it didn't come up in a formal education. You didn't learn of the concept under a different name?
It seems like you're taking positions that may not fit your skillset or personal strengths. Because it's happened before, I believe you may be struggling in certain areas, but this is something you can use to your advantage. Work hard on the things you struggle with, and find a role that allows you more leeway and a company that is willing to invest time into you. You seem to have the work ethic that leads to growth, and you've locked down multiple jobs in the industry so I feel like there's something there that people see. You just need to be put in a position to really grow and gain confidence.
I get that, I was more pointing out that the post and page itself seems to be pushing the actual functionality instead of an explanation of what's really cool about this. 
In regards to Data Structures and Big O and Algorithms they expect you to do for interviews: check out CTCI or Cracking the Coding Interview if a book is helpful. Otherwise Geeks for Geeks can be a helpful resource (I am on mobile. Cant link it currently)
Very possible, but I'm drawing a blank. Unless it was discussed explicitly and I forgot, it may have been discussed implicitly but not referred to as a first-class concept. It's entirely possible to say things like "`x` is bound at runtime, but `Y` is known at compile time" without explicitly invoking a concept called 'binding time'. I think we might be making too much of this...
Neat, thanks for sharing 
Agree 100%. You will never progress past a certain level if you don't understand basic principles of computer science. I also see a lot of people who say they know JavaScript but have deep misunderstandings of how it functions in terms of scoping, order of execution, primitives, etc. Trying to "keep up with the latest tech" imo is a partially useless endeavor, a good developer is able to apply basic principles to whatever environment / language they find themselves working with. Especially in JS there's 10 new frameworks born every week and the language itself is changing, no point in trying to learn new frameworks just to say you know them. The thing is if you are familiar with core concepts of computer science all this stuff is not that hard to pick up as needed. And those core concepts change very slowly. Languages I think it's worthwhile to learn simply to be exposed to different ways of thinking (like you solve problems very differently in functional vs procedural languages). In school our teachers would pick a language per class, so we ended up with a good mixture of OOP, scripting, functional, procedural, etc. I think it's helpful to be exposed to a variety of language types because it helps understand how fundamentals do not change but how language structure can inform solution structure.
We are, at least in terms of total relevance. But you made the point anyway I think: if you learn the concept implicitly, then you know I'm talking about. The fact that you never used the term is accidental. I got my degrees 20 years ago. Back then, compiled languages were by far the norm. These days, interpreted languages are far more common. Some developers may only have seen interpreted languages.
When you say... "my delete or edit _doesn't work_", what does that mean? When asking questions like this, please try to be more specific. "Not working" can mean a lot of different things. Now, I'm going to guess that your delete and edit buttons just don't do anything at all when you click them. This is expected seeing the way you're doing it. When you do... $(".edit_button").click( ... ); ...it works like this: "Select all the elements with class `.edit_button` and attach a click event handler on them". It may not be obvious, but it does *not* mean "Attach the event handler to any `.edit_button` elements that exist now and to those that don't exist now but may be added in the future." You can only attach event handlers (or do anything, really) to things that exist _now_. There _is_ a solution, fortunately. You can read up on "event delegation". It is even mentioned in the [JQuery documentation for `on`](http://api.jquery.com/on/) and it is well explained there so I won't repeat it. The section is called "Direct and Delegated events". That should give you all the information you need to fix your code with something _like_ `$(".class_table").on('cilck', '.edit_button', function() { ... });`
Sounds like you just have a shitty company. Find a new one; you'll be much happier. Or, alternatively, you could find a new career. My brother worked in development for 3 years (web dev, but during the dot com bubble), but decided to become a lawyer after having a particularly shitty boss (wouldn't pay him on time, etc). He got a job as a paralegal and started going to law school. He's been a lawyer for almost 10 years now. TLDR: Try to find your passion. If your passion _is_ development, then find a better job.
I feel like I should make another post to be really clear about a couple of things. OP: I do not want you to think I would discourage you from continuing as a software developer. Instead, I would suggest going back to fundamental computer science principles and either learning them for the first time or relearning things you may have forgotten. Learn another language, if for no other reason than allowing that process to give you better perspective into how to write software in JavaScript itself. You can learn most of what you need for free, it only takes a little time and commitment. I'm sure there are plenty of people here who could refer you to some great resources. Secondly, I did not want to leave the impression that I have a negative opinion about self taught software developers. I have worked with many developers from many different countries with many different educational backgrounds and a self-taught developer can be as good or better than anyone else. I am not concerned with who taught you, I am concerned with what you learned. If your self taught education includes fundamental computer science principles, then I have no issue.
I'm in practically the same boat as you. Nearing 50, self-taught, front-end programmer, been doing this for 20+ years, in LA. I had 4 job offers after about 20 interviews in 2 weeks in my last search a few months ago. If you can't make it as a developer in LA, then something is really wrong. I also come from years of Angular experience, but in my last search I realized that nobody wants Angular anymore - they all want React with ES6. I spent a week frantically learning React and ES6, enough to take some coding challenges at home, and I let employers know I don't know React well but I'm willing to learn on the job. I also don't know a binary tree from a markov chain, and interviews that require that are a red flag because most front-end dev doesn't have anything to do with that, hell not even full-stack. It's also a sign that the interviewer doesn't really know what web development is about and is making you jump through hoops their professors in some overpriced college made them jump through that has nothing to do with web development. Consider those a bullet dodged. In a year or two you will read that those companies folded, probably because they were preoccupied with markov chains when they should have been focusing on actual web development and keeping ahead of their competition. I'm also pretty exhausted by the ever-increasing footprint of developer job requirements and knowledge needed to get these jobs, but I suck it up and push forward and as much as I hate React and working under 30-somethings, I do it anyway because deep down I love programming, and I love getting paid. Change your linked-in, change your resume, take off the crap about being self-taught, embellish, improve, learn React and ES6, reach out to every recruiter that you can. Reach out to companies directly, too. Los Angeles is absolutely rocking with web dev jobs right now, if you can't make it here then you simply aren't trying hard enough, or you are taking the wrong approach. 
Since we're in a JavaScript subreddit of all places, one of the more interesting facts I think developers should know is that the distinction is a bit blurred, especially with modern tech. Traditionally, for example, you'd hear JavaScript called 'interpreted' and Java 'compiled', and end it there. But... which of these runs in a virtual machine, undergoes a transformation from source format to a format that the VM can parse at load time (there's that idea again...), and which of them has an interpreted mode, but can dynamically recompile your code into equivalent but faster forms in order to try to improve performance?
I've suffered the whole "it took you that long?!" thing because I think people don't understand how shit the tools of webdev really are. CSS is a mess, frankly (SASS, too). Many JavaScript frameworks are pretty immature compared to what's available on the backend. On larger projects JavaScript as a language really makes it too easy for developers to write complete clusterfuck code that then takes way too long to modify, as well. I find purely backend devs often write more structured and cleaner code. Also in my experience issues of asynchronous developement can be more of a pain on the frontend than the backend. On the serverside you're more likely to be dealing with pure data and multithreading is more straight-forward to reason about (to me) than event-driven stuff like in JavaScript. The order of execution is more structured. On the other hand I've never had anyone get inappropriately excited about how fast something is done on the backend, just get pissed how slow it is on frontend.
Well said, and I agree. I did have second thoughts about posting in the JavaScript sub, but I did because I think "copy and paste" programming is probably more common in JavaScript than in many other places. If for no other reason, then because of the nature of HTML and the widely available samples to copy. 
Could you be just a bit more specific? Because these 'annotations' have 2 states, do you want to take advantage of the toggle nature of the radio buttons or do you want to take advantage of these buttons being within a form, to later make them easier to submit? Or something else? Thanks.
Its such a shite question that I think you are an inept programmer or that a manager wrote it
Works for me / now.
&gt; Among my colleagues ***I have a reputation for not being such a good developer*** and that makes me feel like I've lost my train and it's time to take a new path. Why ?
In a city in south america where aren't many good companies to work.
To be honest, I think you're right. I tend to care so much about the other people and bashing myself to go further. I need a deep change about it. Thanks
To be honest, I think you're right. I tend to care so much about the other people and bashing myself to go further. I need a deep change about it. Thanks
I saw competent developers appearing to have low performance before because of poorly defined tasks. I think the other developers should let non technical management know there is nothing wrong and you shouldn't estimate development time is the same way you estimate time for panting a wall.
Government almost always requires a 4-year
Thanks for your answer, My main strength is in CSS3, and I consider myself good enough on things like transformations and animations. Usually I work without third party libraries (i.e. Bootstrap, Skeleton, Materialize) and start from scratch writing my own code. In JS I have a good level, and caring to write a clean and comprehensive code following best practices. Usually there are no major bugs in my code and I'm good writing comments on peer reviews. Also I write unit tests with broad coverage. I think you're right about following the latest trends in web development, that's my main weakness and it play against me when I'm compared with my fellow colleagues, I used to work on companies where the 'cool-hunter' dev is more valuable than the skilled dev. I really love to work on development, but sometimes the industry surpasses me
Yeah if they're asking about Markov chains (which I doubt they are, but if they are) then they are expecting too much and the recruiters are interviewing you above your level. 
I'd be interested in generating a side income, is the hourly rate reasonable?
Thanks for your sincere and the not really 'rude' words. I'm very passionate about development (self-taught here) to work on burnout conditions, also I consider myself a good developer aside the concerns exposed in the OP. Maybe the main issue is about my ambition to follow the latest trends on development, it's very exhausting and there's no enough time to catch-up. Also doesn't help to work on a bad managed companies, but locally it's the trend.
Thanks for your encouraging words. Maybe I need to work on my self steem and the things will come. Actually I'm not as bad as the others perceive.
hoping this dude lives in LA and hoping this interview goes through for this dude.
I'm socially awkward and tend to work on my own, this is a pattern related with my anxiety condition
Learning a new language sounds refreshing to me, thanks for the tip
I don't typically work on an hourly rate (I prefer value-based pricing), but my rate is listed as $65/hr since Upwork makes you put something there. The big myth is that you have to compete with everyone in third-world countries that are willing to work for $10/hr, but the people that believe that have the wrong perspective. It's a completely different game once you understand the mechanics of what's going on.
I've been a developer for 20 years now. The first 10 were a lot of fun, the last 10 not so much. I blame agile for ruining the work environment. NOw its all about the numbers and micromanaging dev teams. Plus due to globalization there are very few Americans employed at these companies anymore. I am taking courses on e-commerce as I have realized being self-taught has its expiration timeline. I am tired of learning new frameworks every 2-3 years and never being an expert at anything long enough.
Actually I consider myself good enough to work as a Software Dev, and I enjoy it as much as I enjoy to learn new things (I'm currently working with Angular 4). There are many things that discourages me about continuing this path, but having a broad insight about that helps me to go further. Thanks for your answer 
Sign me up. 9 year (ASP.NET) web dev here, though hoping to drastically improve my front end skills in the next few months.
Shoot me a PM I'll put you on the to-keep-updated list :)
"...and when you fail, fail fast and fail hard" wow, that sounds much like me, and it's nice to see it is a good thing. Thanks a lot for your encouragind words
Im sorry but this is WAY too much for one hour in a stressful environment. You almost certainly had multiple good candidates that you threw away.
Really nice. I love seeing fully functional apps with such short code. I've tried this myself and managed to make a fully functional +-*/ calculator in less than 400 bytes IIRC--I'll have to double-check when I'm not on my phone. I think you can access it at ethproductions.github.io/golf
Oh, well, then... I still don't know you, so always take things with a grain of salt. But I think you're alright. Maybe you just need to detach yourself a bit from the competition of the cool and trendy. As I said, it's _as simple as_ just not doing it. There are many jobs and many companies that don't feel that rush to always be trying new things. In fact, IMO, they tend to be more successful, because they look further in time and focus on the "things that matter". So, don't feel like there's no other option but to keep chasing these new shiny things. There is, for sure :) So, your main strength is CSS. Do you like building user interfaces _more_ than "general JavaScript programming"? Maybe you can focus on being a UI developer and designer. That's a valued skill nowadays. Even more if you sprinkle it with some UX education. Or maybe, if that's what you want, you can focus on getting better at JavaScript. But if you do this, as I said above, try to learn about more _general programming concepts_ rather than focus on specific libraries or frameworks. It's a bit like what you do with CSS. I can imagine you know CSS well, in general. The concepts, the ideas. And then if on some occasion you were to work with an existing project that uses Bootstrap, or Skeleton (or Foundation, or Bulma, or PureCSS, or... any of the hundreds of CSS libraries) you'd think you would be able to just _pick it up_. Because you know the basics, you know the concepts. Right? It's the same idea with JavaScript. It's not even about concepts specific to JavaScript, but more general programming concepts. Whatever you do, whichever route you decide to follow, just don't let "cool" or "trendy" become more important than "correct" and "solid". And as some other people have already commented, maybe you're not in a good work place. Colleagues that put you down, really don't make it sound good.
Since people are worried about you leaving, have you tried specifically looking for contract or freelanc work? 
There are more than enough articles in this topic. 
*If you're being misrepresented by your manager and co-workers...* ...then you probably need to move on to another organization. *If you're burnt out on a specific technology stack (Angular)...* ...then try and see if there's another capacity you can operate in at your current company. If not, then you probably need to move on to another organization. *If you're legitimately underperforming...* ...then do some soul searching and try to determine if it's a problem with training, motivation, or a general deficit in the particular skillset required to be a programmer. Your answer may be to spend some time investing in your own abilities as a programmer, or it may be that you decide to move on to another field. *If you're just flat out burnt out on programming altogether...* ...then make sure you understand the gravity of switching career paths, and have a viable path forward in whatever field you choose. That being said, there's nothing sacred or superior about being a programmer, so if it just happened to be the wrong field for you, then by all means, try to find something that brings you more happiness in your day-to-day work grind. Best of luck to you as you wade through such a big decision!
Not to discount how you're feeling, but you're building negatives up in your mind and it sounds like that might be coming across to potential employers. Also, I'm seeing a lot of complaining from you, the OP and others along the lines of, "I'm a practical guy. I don't do the algorithms and the academic stuff. I just get in there and do what has to be done." When anyone in engineering says that to me, what I hear is, "It's too hard. I don't want to invest in my career and get better. I just want to do what I'm comfortable with." Wrong attitude, particularly if I'm going to pay you $150k+. Check out an algorithms class on iTunes University and learn O notation. If you're not getting it you're overthinking it. It really is as silly and easy as you're thinking. Look up interview questions and just figure out how to do some of these things like binary trees, hashes, sorting algorithms. Go to a coffee shop, grab a cup of joe, and sit down and do some practice code. Understand what you're looking at. Pick a language you're comfortable with, brush up on that, and stick with it in the interview. Memorize the standard library, loops, tricks, whatever. Most interviews I conduct and I've been through, you just have to show something in any language. The interviewer likely doesn't care what language you use; he wants to see how you think and reason problems out. If you don't know the answer to a question, say that. Ask for help. Ask questions. Walk through it together. And by all means ask for the right answer in the end. It shows you can work with people, you aren't too proud to ask for help, and that you're really interested and engaged. An interview is a test designed to stress you out and see how you respond. It's a way for an employer to see if you can be professional and work with the team. But like any test, you need to do your homework, apply yourself, and get in the right frame of mind for success. Be confident and calm. One trick I use is to act like you've already got the job. Helps me relax and take control of the situation. And knowing I've done my prep work really helps too. And tell your wife. You're a team, and she's there to support you. You owe her the truth. 
It stands to reason that perhaps he's suffering burnout because of the vast array of technologies one must experience just to score an interview. So rather than relaxing in something he's comfortable in and exploring the CREATIVE possibilities, he's stuck in a infinite loop of staying on top of the current trends. As a result his motivation and joy is being robbed to meet an ever changing industry requirements.
Love the css grid visualizer! 
Really? What are the current salary consulting rates like?
There can be many reasons why a dev can be fired from their job. 
I'd absolutely be interested in hearing more about this, especially the part about using Upwork in a way that sets you apart from the people willing to work for next to nothing. I do some freelance work already, but not via Upwork, and this is something I'd like to pursue a lot more intensely in the future.
Find a less toxic company to work for. I work with heaps of "old" developers.
I'm also self-taught, been building systems for businesses now for 20yrs. 10yrs ago I decided I hated interviews (and working in offices) so I just decided to call myself a "consultant" and be in charge of myself. When I present to companies I show them what I've done. If you want me to work for you, you don't interview me, we speak and discuss your needs as two professionals. So the advice I'd give you is start your own one-man show, make some business cards and a web site which is NOT a resume - it's your company web site showcasing your work for your previous clients. You are a professional providing a service for your **clients**, not your employers. I know it's a big step and it was terrifying at first, and maybe it won't be something you're happy with, but give it a try. You are obviously confident about your abilities - project that and go out and find clients. If they like you, they'll come back to you for more work, and - as in my exerience - some might become regular, which certainly is satisfying and takes some of the stress out of finding more clients. :) Give it a go, it might turn out to be the most rewarding way to work.
&gt; It’s not that you are a bad Developer. How do you know?
Send me your email in a PM. I'll keep you updated as things progress! 
If he doesn't live in LA, do you do remote? It's a very practical option these days.
For anyone who is not a "strong" developer. There are still other things you can do. QA Some companies need strong QA teams and you can QA by writing integration, unit, regression, functional tests and automating applications. BA If you have good communication skills especially written, you can become a Business Analyst. Gathering requirements &amp; writing requirements. Project Management If you are a people's person and know how to organize. You can do this. DevOps. If you are comfortable with the operating system. A little bit of code can get you to the devops side. Operations today is all about scripting and automating away the infrastructure. Technical Sales. If you can sale, there are companies that need technical sales. If you are selling to engineers, they don't want to see slidedecks. They need someone who can understand the detail. Technical Writer. If you can write very well, you can become a technical writer. There are tons of things to do in the industry that can still keep you very close to development. If you love developing, then keep at it, don't give up, but don't just work at work. Work at home, work on getting better and you will. 
Hey. You seem like a passionate but frustrated person. It must be really exhausting to get discouraged so much despite of having genuine interest. I don't recommend totally abandoning web dev. It would be vastly more difficult to start completely anew. Try finding a new place to work as a developer. If you are as lucky as me, the place will be more encouraging.
Puppeteer, Google's headless chrome browser controller API, supports full page screenshots including off page. If that can do it I would suspect you can do it from the console as well
OK - so get started by not really teaching how to think in TDD and walking you though examples of TDD in different scenarios, like real time data feeds and databases. Also the example has some issue with separation of the test block in code. But that's a personal preference. 
What does all the terminology with golf mean? 
I would love to read such a guide. I’ve tried several times to break into sites like Upwork and haven’t ever been able to make it stick. 
I suppose it depends on if this is a common trend from job to job for OP. Software development most certainly isn't for everyone, either by skill, motivation, interest, or aptitude. I mean if they are this burnt out on development I'd hate to see them push-on just for the sake of habit and not wanting to change. It's hard to tell with so little info but maybe the person might find some other hidden talent or skill that they can use to find a job far more interesting and gratifying. 
I worked in the startup industry for a few years. I hated it. Workplace politics, high stress, long hours....not my cup of tea. I started my own freelance business. Best decision I ever made. I make less money, but I am the happiest I have ever been.
ahh im so stupid. having used `cost inc = x =&gt; (console.log(x) || true) &amp;&amp; x +1;` thanks for the tip :)
Yes, there is the Canvas API for 2D stuff, WebGL for 3D stuff, requestAnimationFrame for properly rescheduling repaints, keyboard &amp; mouse events, and there is even an API for using gamepads. One of the popular open source engines is Phaser: https://phaser.io/
im not sure the other people in line at the wellfare office care enough ;)
&gt;invest a load of time into something that the market doesn't want. Let me guess. Step one of earning your first $1,000 on Upwork is developing a guide to how to earn your first $1,000 on Upwork. Step two is to ask people to pay you $50 to read your guide on how to earn your first $1000 on Upwork.
For sure! Tests are definitely the next portion I plan on adding.
I've jotted down everyone's email that's PM'ed me. Will keep you all in the loop when/if things progress with this. It'll be quite an undertaking, as mastering marketplaces like Upwork isn't as straightforward as most seem to think. Thanks for the moral support, regardless of what happens!
Every initialization is a separate instance. The reason why you saw that was the bug associated with :hover states. Basically, if you clicked a tag on mobile, it would trigger the hover state and then when you clicked elsewhere (i.e. another tag or somewhere else on the page), the focus would shift and it would appear as if the previous tag was changing, but in reality it was just the hover state being removed. All fixed in v0.2.1 now though, so thanks for pointing that out!
Oh derp like early and late binding. Never mind me. 
What percentage of your freelance work is derived from upwork and other sources?
Maybe a better phrasing would be "it's not necessarily that..."
`Symbol.iterator` `Symbol.hasInstance`
You'd be guessing wrong, but thanks for playing. And, for future reference, if someone gave me something that would enable me to make $1000 and asked $50 for it, I'd gladly do so. That's called **positive ROI** Because I am all for being totally transparent: Yes, I would eventually like to charge for the amount of work that I put into creating such a comprehensive guide. But I will only do so once it's been proven to provide the value I promise. Next time please consider providing some useful dialogue to the conversation. Maybe something **helpful** and/or **valuable** instead of pessimistic
Sorry im new at programming. Do I connect it to brackets so I can use it on my website? And where can I learn to do this
I'm a full time freelancer, but currently only bringing in about 30% of my income from Upwork as I'm currently under contract with a large company that eats up about 40 hours a week of my time.
Stumbled upon the nifty `imlazy` library the other day. Lets you define and manipulate lazy ranges (a la Haskell) and is supposedly decently performant. https://github.com/benji6/imlazy/blob/master/README.md
What city if you don't mind me asking? 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [benji6/imlazy/.../**README.md** (master → 501e14a)](https://github.com/benji6/imlazy/blob/501e14adb3c31cc93c0470be17a2967eb91ea342/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
I'm definitely interested in this as well! Thanks for doing this. 
I've been coding as a light hobby since 1988 (heavily since about 1996), and professionally since 2008. Feeling like you can't keep up is never going to go away. It's how you handle that feeling that can shape your personal and professional mood. I'll share some feedback, and I hope it helps. First, working in an environment that isn't supportive of your skill set can have a negative impact on your feelings about your career. For instance, I doubt you lied on your resume. Your manager knew who he/she was hiring and if the response right out of the gate is that you have poor performance... fuck 'em. Go to your HR department and discuss how this feedback has a negative impact on your performance. In most of the field, good software engineers are really hard to come by and companies are more than willing to work with you to improve your situation. Poor and mediocre developers can become great with good management and with a good team fit _as long as they're willing to try_. If, for whatever reason, you feel like you are at that lower set, present the problem to HR so it's documented. Ask for suggestions on how to present a solution to your manager. And go from there. Also ask yourself whether it's something else causing the issues at work. Is it possible that you're depressed and a few sessions of therapy could help? Is your workplace understaffed? If so, you could ask about taking 10% of your time over a few weeks to work on improving automated testing. Is your manager or team always in a bad mood? You could try bringing in donuts on Friday. I had a manager a few years ago, who I thought was a complete jerk and he was always pushing for deadlines and complaining about the team's poor performance. He ended up being my manager again recently, and I think he's great. Turns out, he had a family member dying from cancer back then and he ended up being really supportive of me this year as my mother died from cancer in September. I've interviewed a lot of developers in my career. Probably 300 by now. One guy said he had 10 years of experience. After asking progressively easier questions and him unable to answer any, I ended by asking him to walk me through how he'd put together a fairly simple web application. Turned out he only knew how to point and click around Visual Studio... and he made a living off that for 10 years. I then had another interviewee with 25+ years of experience. He talked through a lot of knowledge around technologies, design, and architecture. He was hired as a Senior Software Engineer. For weeks, he argued that WCF was better than the Web API project we were building. I finally told him to create 2 prototypes and demonstrate a handful of things. He refused to code for a couple weeks, then spent 20 minutes copying and pasting irrelevant examples from the web and passing them as his own. He finally stopped showing up. Were either of those developers bad developers? I wouldn't say so. The first guy could easily have a consultancy in which he creates and hosts web applications for small businesses. The second guy just needed to find a place where he was working with technologies he felt more comfortable with. I'm sure they're both either doing those things now, or working toward it. All that said, I have a degree in management of information systems and I've held senior engineer positions, an architect position, and lead or mentored many engineers. I've suffered from imposter syndrome multiple times. And I've experienced what it's like to work in an unproductive team that's getting heat for being unproductive. That's the worst, and it sounds like what you're going through now. The way out, if you stay in your role with your employer, is to focus on solutions as a team player and leave for another place if they're unwilling to work with you.
&gt;Yes, I would eventually like to charge for the amount of work that I put into creating such a comprehensive guide. Gosh, how surprising. There is so much contribution to javascript via blogs, free guides, and open source development of libraries. Then there's the make-money-fast coding camps preying on the dollar signs in people's eyes. I won't apologize for seeing another iteration of Trump University and trying to ward people away from it. &gt;Next time please consider providing some useful dialogue to the conversation. Don't give this scammer the time of day. There you go, useful. All of the stuff you typed, you could have easily spent that ASCII outlining your process instead. Scummy. 
If his coworkers think he is not good enough, and has been fired multiple times, and maybe soon again, it’s not burnout. And if you try to keep up with all the technologies you end up learning a lot of stuff, so probably people don’t will categorize you as not good.
Idk doing `myFunction.apply(null, myArr)` instead of `myFunction(...myArr)` is turning out to be a hard habit to break. 
The way I see it, the more we all help each other, the better. I personally struggled with getting traction on Upwork for a long time but now that I regularly get well-paying work there, it just makes sense to share the "how to" with others. The world is way too big to have a scarcity mindset.
You might want to learn the language first. Jumping straight into frameworks and libraries doesn't really work that well. /r/learnjavascript Anyhow, I'd recommend to install it via npm and then use VS Code to write your game. Phaser has type definitions available and VS Code is the easiest option to make use of them. There are also tutorials and "getting started" guides on the Phaser website.
**Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year!** \#1: [The Entire JavaScript Language in a Single Image](https://fossbytes.com/wp-content/uploads/2015/09/infographic-the-entire-javascript-language-in-one-single-image-491250-2.jpg) | [29 comments](https://np.reddit.com/r/learnjavascript/comments/675fk4/the_entire_javascript_language_in_a_single_image/) \#2: [This pretty accurately describes my feelings on my JS learning journey so far.](http://imgur.com/zKJt5rb) | [6 comments](https://np.reddit.com/r/learnjavascript/comments/5k71cn/this_pretty_accurately_describes_my_feelings_on/) \#3: [Github Repo with 100+ Free resources to learn Full Stack Web Development.](https://np.reddit.com/r/learnjavascript/comments/5zse5u/github_repo_with_100_free_resources_to_learn_full/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
&gt; I mean I get at least three interviews (primarily phone interviews) a week. You get 3 interviews a week, but haven't been hired? You might need to practice interviews with a trusted friend, you might simply be blowing it in little ways you didn't even realize. &gt; My last project had me implementing external services between 13 different systems. People on the team with degrees said it was "impossible" and wouldn't work and I did it. Blood sweat and tears (and many many long nights) but I did it. Then they let us go. Software engineers know nothing is impossible... I think there was more going on here than you realized, especially considering they then just up and let you go... being one of the core people who understood this new seemingly valuable system. &gt; That is one thing I am proud of though, I may take longer but I always get the job done. Isn't that part of Hacker culture? No, taking longer isn't really a hacker thing. &gt; Living costs in Los Angeles are insane. In California, so is competition. 
the link between code golfing and golf, is that we try to reach our goal with the least (key)strokes possible :)
Yes. I mean no.
Does this sound familiar to you: "Oh you're a web developer? Dope. I have this cool idea for an app. Do you want to build it for me and you can use it for, like, exposure and your portfolio?" Perhaps you can see the irony here....
Oh! Cool! A mini calculator and a mini UTF8 byte counter are good codegolf ideas :) I'll add that to our list We have a slack room where we talk about all these stuff btw, if you wanna join us: http://register.jsgolf.club 
It really depends on the company too, because some companies do interesting things and some simply do not. No one wants to just make 5 "bob's bakery" websites a day. 
There's a difference between knowing about new things, and trying to learn all the new things. With js I mostly do angular1... I could pick up react in a week if I really needed, but it hasn't come up. I just don't see the point in trying to learn every little thing when there isn't any reason to do so. 
&gt; Maybe the main issue is about my ambition to follow the latest trends on development, it's very exhausting and there's no enough time to catch-up. Hm maybe this is indeed the issue with you and JS (if there is one)... I'd consider that actually part of the fun, like that there's always something new popping up everywhere, be it new syntax, supersets, libs as well as native APIs, or actually just ways of thinking. IMHO this should be exciting, not exhausting. So here's a thought... how about having a try at the backend world? Well not nodejs, obviously, but PHP, Java or Python? These languages are evolving at a much steadier pace, and so are their ecosystems; you have plenty of time to get acquainted with a given environment. For example, in PHP you basically have 2 frameworks that are the current state-of-the-art: Laravel being around for around 5 years, Symphony for around 12. There are considerably fewer fads that will vanish as quickly as they appear. Same with CMSs, like you have Wordpress that powers no less than ~25% of all web pages (and still is a hell of a mess, but that's another story I suppose). :-P And being a TYPO3 developer is actually considered a dedicated position in many job postings... so it doesn't even matter which one you choose, but you can confidently specialise on 1 or 2 systems. On the other 2 I can only comment from hearsay, but in Python you have Django, which is around for 12 years as well and still very relevant. And in Java IDK, if the PHP world is moving slowly then the Java world is a disk. :-D TL;DR: True, frontend technologies are coming and going, so you can't really commit yourself to a single technology. Maybe you don't want to be a jack of all trades, but a backend specialist.
As a web developer I am interested
&gt; Maybe the main issue is about my ambition to follow the latest trends on development, it's very exhausting and there's no enough time to catch-up. Hm maybe this is indeed the issue with you and JS (if there is one)... I'd consider that actually part of the fun, like that there's always something new popping up everywhere, be it new syntax, supersets, libs as well as native APIs, or actually just ways of thinking. IMHO this should be exciting, not exhausting. So here's a thought... how about having a try at the backend world? Well not nodejs, obviously, but PHP, Java or Python? These languages are evolving at a much steadier pace, and so are their ecosystems; you have plenty of time to get acquainted with a given environment. For example, in PHP you basically have 2 frameworks that are the current state-of-the-art: Laravel being around for around 5 years, Symphony for around 12. There are considerably fewer fads that will vanish as quickly as they appear. Same with CMSs, like you have Wordpress that powers no less than ~25% of all web pages (and still is a hell of a mess, but that's another story I suppose). :-P And being a TYPO3 developer is actually considered a dedicated position in many job postings... so it doesn't even matter which one you choose, but you can confidently specialise on 1 or 2 systems. On the other 2 I can only comment from hearsay, but in Python you have Django, which is around for 12 years as well and still very relevant. And in Java IDK, if the PHP world is moving slowly then the Java world is a disk. :-D TL;DR: True, frontend technologies are coming and going, so you can't really commit yourself to a single technology. Maybe you don't want to be a frontend jack-of-all-trades, but a backend specialist.
Of course! I have yet to decide if there's enough demand for me to put the necessary work into it. But I'd be more than happy to keep you updated by email. If that works for you, shoot me your email address and I'll put you on the list for updates :)
From what I've seen, a lot of companies are keeping "engineers" in house and trying to hire a bunch of outsourced people as the "workers" that the engineers basically end up babysitting to make sure they don't do it wrong. It goes about as well as I think you'd expect. 
I love the commented code, like [how they shortened a for loop over 254 chars](https://github.com/xem/sheet/blob/gh-pages/full-commented.html#L22-L27). Code golf is fun and at the same time utterly useless. I did many (all?) of the challenges at http://alf.nu/ReturnTrue, I don't think I learned anything I can use while making real code, but it's so satisfying to find the solutions…
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [xem/sheet/.../**full-commented.html#L22-L27** (gh-pages → eadcf19)](https://github.com/xem/sheet/blob/eadcf192891121d96faedd7803d7a2d239ef782f/full-commented.html#L22-L27) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dodcq0j.)^.
Could this extend beyond just as a developer? I’m a project manager with web development experience and interested if anything could also apply. 
At a minimum state an outline. If not it just comes of scammy 
I guess I’ve done similar things before but not really anything as specific as you mentioned. Where is your project based ?
This is actually an awesome release, queryObjects looks great if it isn't limited to objects defined in the window
Can you imagine a development job that you enjoy and doesn’t burn you out? If so, what does that job look like?
Actually, yes. Most of my success on Upwork can be boiled down to non-developer-specific things like: * Understanding basic sales techniques * Proper statement framing * Leading with value * Effective communication * Being attentive * Providing unique perspective * Acting like an adult with common decency * Being human The long and the short of it (since some people here seem to think I'm just a scummy salesman not providing any actionable advice): * Take the time to **truly** understand the **why** of the project. What business problem is the company/individual actually trying to solve? For example, they don't want an "email form with such and such field", they really want "high quality leads with quantifiable tracking metrics to allow them to optimize their sales funnel, which will reduce their overall expenses, making the business more profitable" * Speak to them like normal human beings. 9 out of 10 freelancers on platforms like upwork just come right out of the gate with "I know Node, React, Angular, Greensock, Wordpress, jQuery, Bootstrap, Pug, Laravel, CouchDB...blah blah blah" These people don't give a shit what you know. They care what you can do. They don't care how you build their racecar, they just want a damn racecar that will win the race. * They are selfish. Not in a bad way. They're just there for **them** and **their needs**. They're not interested in **you**. Almost everyone on Upwork is me-focused. "Here's what I know. Here's what I've done. Here's who I am. Here's me me me". For real success, all of your messaging needs to be them-focused. "Here's what I'm able to do **specifically in this situation**." "Here's how you could tweak your idea for additional value (regardless of whether I am brought on to help or not)" "Here's something I've seen work for similar businesses in the past that maybe you could implement" There's a lot more, but I think you get the idea. 
I suppose I can understand that. I just posted such a general-ish outline in response to Kherro's comment :)
I thought includes was ES7, not 6.
Last time I read that modules were still too slow compared to the compiled alternative. Has this improved yet?
I am interested to read that kind of writing from the experienced programmer. I will PM you with my email address.
Tree-shaking etc is of course still a good idea. However, having support for modules means that you can defer all of that build noise until later. Or maybe you just want to prototype something or maybe you just started learning JavaScript. Well, you do need to run a local server, but something like `python3 -m http.server` is good enough.
&gt; Is it possible my problem is that parseFloat returns 0.0 as NaN? Just try it in the console (F12 -&gt; Console). &gt; parseFloat('0.0') 0
Ugh. I just tried assigning a dummy value to undefined fields with this script var value = d.field || 1.005 When I ran it through an if elif statement... the undefined fields got the assigned value, but so did my 0s. 
`undefined` is falsy and so is 0. https://developer.mozilla.org/en-US/docs/Glossary/Falsy
 var s = 'this makes the text go backwards'; for (var i = s.length, o = ''; i &gt; 0; o += s[--i]); 
Huh, didn't know that was an actual term when first posted. Is there a way to avert that behavior? Really inconvenient. I guess I could go and manually edit the dataset, but that would kinda feel dirty. 
That's literally most used way
Source code is at https://github.com/vishaltelangre/elm-tic-tac-toe.
As I mentioned in the other thread, you can differentiate between these values. You can check if some property is `undefined`. You can also check if it's 0 or whatever.
 &gt; [...'foobar'].reverse().join('') "raboof"
Thanks for your post and providing me a deeper insight about the industry. It's unfair after 3 weeks to receive a bad feedback about my performance, even though I worked trying to figure it out how to overcome the project with no support from the managers or the leaders. However I receive that feedback positively as things to improve. The other day the same manager said to me: "you have another performance review the nex week and if your work does not improved at all, you'll be in trouble" as a response for saying him "Hello, how are you". The next day the developer lead tell us that our job is not well done, even when we are a week ahead the planned schedule and the things are going well. Sincerely I've been on a different mood after that, and to me doing the best with tangible results does not worth the effort after all. I'll look forward for the next week's review to take a decision. I need the job and the project is interesting, but those discouraging attitudes does not help me to get the best of me. I think this causes the major part of my concerns.
This is self-promotion and there is nothing related to Javascript. Also, the majority of the comments seem highly suspect - people don't really write like this.
Yeah but we prefer to have new team members in the office for at least the first few months, so they can get to know us in person and feel more like part of the team. We have one person who is full-time remote from Seattle, and myself and several others work remote half or more of the time.
Cool, thanks! I've sent a request :-)
It's not self-promotion. It's education promotion. It's related to Javascript because that's my specialty, so I know how best to guide javascript/web devs to the same goal. As for your comment on the comments, I'm not sure I follow
What is it then?
u/53LFT4U9HTK0D3R I'm serious about this, hoping to hear back from you.
Your function doesnt work if there are characters outside the [bmp](https://www.sttmedia.com/unicode-basiclingualplane) or combining marks: https://mathiasbynens.be/notes/javascript-unicode#reversing-strings
&gt; As for your comment on the comments, I'm not sure I follow The comments seem inauthentic, like they are part of the self-promotion. Maybe if the comments were less formal, a few spelling mistakes and badly formed sentences, then they would be more believable. Also maybe a little bit of snide thrown in too. 
Telecom companies! I work at one and it's actually great, we are doing things that actually make a lot of peoples' lives easier, and we keep up with the latest stuff too, much more than you'd think. React, Redux, MobX, .NET Core, Typescript, Ruby (Rails), CI/CD with a Docker-based pipeline, micro-services (SOA), etc. Not to say experience in all of those is required, we have various team members with different specialties, it's awesome.
Does this sound familiar to you: "Work from home for $500/day! Make money fast working online!"
 Array.from('this version lets you put 💩 in it').reverse().join('');
+1 Using this a lot lately, created a few libraries based on it: * https://github.com/laggingreflex/undb * https://github.com/laggingreflex/hyperchain * https://github.com/laggingreflex/chain-free * https://github.com/laggingreflex/debug-any-level 
It challenges your complete understanding of the language, and browsers. Many times you are trying to train your brain to not get stuck on the current solution and try to think about the problem in the abstract to come up with a "better" (shorter) solution. It's always a pointless product, but a fun challenging task.
Oh, you mean they're fake? Man, if I had the resources or knowledge to fake reddit comments, I sure as hell wouldn't be doing it in this subreddit haha. Honestly though, thanks for looking out. It's people like you that keep reddit valuable and relevant instead of the shitshow it could easily turn into
Sorry if this sounds rude, but why is this posted in /r/javascript? The source code is 0.9% javascript. I know Elm transpiles into JS but that doesn't really feel relevant to this sub
I knew a shitty developer once. He transitioned into a product owner/agile coach job and he has been more content ever since.
What timespan are we looking at to earn that first 1K? 
Good question. Within two weeks of changing my approach to the platform I'd gotten my first contract which was a $3.5k Wordpress site build.
Ok, and how many hours did you work on that project in total?
I honestly feel kind of ready to give up before I've even gotten my first full-time job. I've been searching for about 10 months after graduating from a coding bootcamp (one of the most well-regarded ones). I've applied to over 550 positions, I've had a bunch of internal referrals from college friends, and had a couple of onsites. One at Facebook, where I felt like I did well, but they decided to go with someone else, and another that was the worst interviewing experience I've ever had. I've also emailed or messaged hundreds of recruiters. I know the first thought is, "well, you probably suck or just aren't good enough." That's definitely in my mind; I totally acknowledge that I'm not the best developer ever, and I'm just starting out, but I'm not bad. And I have a good group to compare against, because I was in a class with 25 other people at the bootcamp. At this point, they all have jobs. Some had more trouble than others, but they all were able to find jobs *somewhere*. At this point it just feels insane that in the entire giant are of LA, after over 500 applications, I can't fine **one job**. There have been a few that sound really promising after an initial interview, after the technical screen or coding challenge, but then after a week of silence, I get the "oh thanks for applying but we're going to go with someone else". One company I thought I had locked down, then they decided to acqui-hire another company. It just feels like Silicon Valley (the show) - level insanity at that point. Anyone have any tips, aside from "be a better developer" (which I'm actively trying to do)? I'm working on algorithms and my own personal projects, so I can have a few more things to show and just to improve my skills and keep learning, but I'm honestly just really losing motivation. 
 Most of the methods for Arrays are generically implemented to be used on all that inherits from Object, so you can also use something like this: Array.prototype.map.call(str, (ch, i) =&gt; str[str.length - i - 1]).join(); // or alternatively... [].map.call(str, (ch, i) =&gt; str[str.length - i - 1]).join(); 
I don't like tying my value to an hourly rate, BUT it was somewhere in the range of 40-50 hours over three weeks on my nights and weekends. 
I tried using upwork, but everytime I applied for a position other, more experienced users would obviously be picked over me. What can I do to prove that I have good work when I have no reputation on Upwork?
Oh hey, you just described my job. :)
As someone who are new in programming, can I get in the loop as well? Very interested in learning 
Or NeDB
You're making the assumption that you weren't chosen because of your perceived lack of experience. You're also implying that your profile and approach to proposals was on part with or worse than other submissions. That second part is where you have a real chance to get ahead. Read through my "update" section in the original post and compare it with your existing profile and the proposals you've sent out. I'm willing to bet there's some improvements that can be made that will help you stand out. As for the "experience" factor, there's a portfolio section on Upwork that you should definitely be utilizing. Additionally, it is helpful to maintain your own external portfolio and link out to it early on in your profile.
Of course, shoot me a PM with your email and I'll certainly keep you updated on the progress 
Yes, because let and const are 100% parse-able at compile-time, while var is only parse-able at runtime. Static code analysis vs. dynamic code analysis. For creating a parser or transpiler (or whatever) for let/const, you only have to make sure your code is properly indented and then you can easily parse the scopes based on the indentions - while with var, a lot of complexities are introduced; from context destructuring over .call, over with() statements, over definition scopes over hoisting and asynchronous re-assignments from other scopes - which on the other hand play absolutely no role for let/const. Just use let and const, it simplifies your code for everyone. 
Now with unicode support! str = Array.from("this man 👨‍🏭 builds things"); Array.prototype.map.call(str, (ch, i) =&gt; str[str.length - i - 1]).join('');
So... You're just *giving back* to the community by offering your guide? *no for free*... Am i wrong?
So what you are saying is this may be a nice way to earn some extra cash if you are willing to put in the extra hours? Otherwise, the way I see it, we are looking at two weeks for contract finding, plus 50 hours effort for $3.5k. That will not do it for me.
Wouldn't be as bad if they gave the engineers management level pay...
Ah, let me clarify: the "two weeks" was about 99% waiting. I only spent 10-15 minutes a day submitting proposals to various projects. And if you're turning your nose up at an effective $70/hr rate, I'd like to sign up to learn about whatever you're doing haha :)
I never said I'm trying to get people here to buy it. I DID say (in another comment) that in the future I would like to monetize my work. But I also said in that same comment I would only monetize if I had sufficient data of success from people that had used the information I provide. So, yes, right now I'm just hoping to get enough feedback from people interested in trying to do the same thing I've done for free. A beta version, if you will :)
How much do you make per hour on Upwork work? Including communication etc. For example, if I follow your lead (I’m an experienced web developer) and put in 20-25 hours / week total how much could I expect to make ? 
here's a tip: you sound really salesy and it's turning people off. stop it
Also, what most people don't know: All debugging tools (v8, spidermonkey, mozjs, core etc. pp.) support the `displayName` property. So if you have a prototypical definition library that uses namespaces, where you override the prototype's object instance (to collect all methods together) - you can then just set the displayName property and everything will not be anonymous in the debugging tools anymore. More on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName
That's a loaded question. I don't work on an hourly basis. Nor do I keep careful track of my hours worked. I work on value-based pricing which means I charge based on the value that I believe I bring to each business with my work. For example, The first Wordpress project I took on from the site way back when was a relatively simple site promoting affiliate links. After speaking with the project owner, I discovered a ballpark range that his site was already bringing in per month and how much he'd ideally like to improve it. As it turned out, the price of my work equated to about two months worth of the potential increased revenue my work would provide for his business. Therefore, after I did my work effectively and he ran his business for two months, he'd be reaping pure profit from his investment into me indefinitely (until he decides to change the site again) Long story short: You can make what you decide you want to make. There are developers that are hyper-specialized and charge upwards of $100+/hr. You just have to identify and close the right projects.
65$ is a lot (speaking as a non-american). What do you do and how much experience do you have?
Yeah I'm not the best writer, unfortunately. I tend to want to explain myself too much, which I guess can come off as sales-y. But, you know, at least I'm doing something, putting myself out there, taking risks, trying the best I can with the things I know how to do, and pushing my own boundaries. If sounding really salesy is a byproduct of that....well....I think I'm ok with that. Thanks for your input though.
$65 isn't a lot for any developer (US-based or otherwise) if you understand the value you work can provide to those you're doing work for. I've been a developer for 10+ years but still consider myself a mid-level dev. I never committed the time necessary to truly master any development skills. If I had to be perfectly honest, someone could attend a 6 month dev bootcamp and meet or exceed my actual experience level
Like I said, it may be a nice way to earn some extra cash. If you are making a living this way, you have to take into account the time spent between contracts. Two weeks not billable is no money in your bank account, no matter how little effort you spent acquiring contracts. In my calculation that's 120 hours for 3.5k which does not cut it. To put in perspective. If you are able to regularly acquire longer contracts, which means at least 2 months of work at $70/hr then it becomes realistic. 
Hi /u/ipariah, I've removed this post for being off-topic. Thanks for your understanding.
Ohhhhh. I see what you're getting at now. I had other projects I was working on at the time, so those two weeks weren't technically non-billable. And since then I've been able to close a contract within a couple days of jumping back on to actively pursue gigs. Sure, there's always the potential for a "roller coaster income" but I have found that if you maintain consistency in your approach, you get consistency in your results. Thanks for making a good observation :)
I don't, but thanks for the update
Nothing you've mentioned is specific to JS. Yes, you mentioned some JS tech, but in the context of your post, one could easily substitute virtually any technical term and there'd be no change in meaning.
Includes is ES7, but people generally mean ES6+ when talking about ES6. Also might be the reason they named it as an honorable mention.
I used to work a lot with Lua, which had coroutines, pretty much the same thing as generators. I still had trouble comprehending generators, but I'm just dumb ¯\\\_(ツ)\_/¯
FKA (Formerly Known As): [JavaScript's Promise is Memory Unsafe](https://www.reddit.com/r/javascript/comments/75nibr/javascripts_promise_is_memory_unsafe/)
I suppose. I specifically mentioned that I'm a web developer looking to help other web developers, though, and a critical component of the web in this era is, obviously Javascript. I understand the line was a bit blurry, but that's neither here nor there now anyway since you've gone ahead and done the deed. Enjoy your weekend.
Thanks for the response. Do you find yourself sometimes thinking "Why the hell did it took me so long to finish this little task"?
I was with you until the last sentence, but this: &gt; especially in JavaScript's ecosystem where people are afraid to take on dependencies. doesn't seem to be true at all.
Your stated goal was to gauge interest, and though I cut the time short, I did allow it to stay up for awhile. You should be able to extrapolate from there :)
That's good.
That's very true; you make a valid argument. Thanks for the clear communication and bit of leeway with the ambiguity. Again, have a great weekend :)
I think the point is to show how much functionality is present in such a small file, which is the cool part to me.
Lol yea that must be a joke 
Reminds me of the features that were added in the big Firefox Developer Edition update a little bit ago. Nice.
These are just assertions. Don't get me wrong it's useful but not TDD. TDD boils down to: * Turn your requirements into tests (assertions) via code. * Code a minimal amount to satisfy the test. * Keep reiterating until you get something decent. That's probably somewhat over simplified, and like all methodologies it has it pros and cons.
ES6 yo function reverse(text) { const reversed = [] for (char of text) { reversed.unshift(char) } return reversed.join('') } reverse('this makes the text go backwards')
&gt; At this point it just feels insane that in the entire giant are of LA, after over 500 applications, I can't fine one job. There have been a few that sound really promising after an initial interview, after the technical screen or coding challenge, but then after a week of silence, I get the "oh thanks for applying but we're going to go with someone else". One company I thought I had locked down, then they decided to acqui-hire another company. It just feels like Silicon Valley (the show) - level insanity at that point. &gt; Do you have certified experience in development? In my experience, most companies look only for candidates that have at least 3 years of experience. Try to work as a freelancer or a remote work on another country, then you can do the jump to another company.
came to the comments to read 30 different ways to do this, was not disappointed.
If I understand correctly you expect TCO from a language which don't specify this behaviour.
Shit. I thought it was the least used way.
That's a cool one "..." is the spread operator
My favourite not normal way is using reduce `Array.from('This will be reversed').reduce((x,y) =&gt; {return y+x})`
Alternatively: function reverse(text) { return [...text].reduce((current, rest) =&gt; rest + current); }
I thought you were describing the process of coding for ideal bytecode until that last sentence.
programming is a learned skill. This person might not be right for the place he is in, but could find a place where he could contribute and be happy. Not everyone needs to be a rockstar. I am giving this person the benefit of the doubt. I am assuming that they can learn and apply that knowledge. If they can, they can get there (in most cases) 
I've been messing with a learning project to better understand virtual DOM implementations, how jsx works, etc. I did a rewrite about a month ago after an aha moment and now I just got around to cleaning up the API and adding to the readme. https://github.com/fwilkerson/muve It's by no means complete, it lacks support for svg, keyed elements, and I have not tested edge cases.Writing it really helped me better understand the modern frameworks and I feel comfortable going through most of their source code now. As an aside Jason Miller, the author of Preact, has some of the most enjoyable source code to read.
I suggest using ES6 `const` and `let` instead of `var` ;) spread operator or destructuring can also be handy. besides it's good to know at least very existence of Maps, WeakMaps, Symbols, Proxies... (although use cases for them can be not always obvious). 
The most common way is to use a proxy in Dev mode that forwards the requests. You can read more and read some source in the [create-react-app](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#proxying-api-requests-in-development) project.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [facebookincubator/create-react-app/.../**README.md#proxying-api-requests-in-development** (master → 991b092)](https://github.com/facebookincubator/create-react-app/blob/991b092c893b916e6fd34e408e96a395d47b6008/packages/react-scripts/template/README.md#proxying-api-requests-in-development) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
If he wants full js object support, go with PostgreSQL
Love that the chrome Dev team acknowledged Mozilla by using their css grid website in the demo screens .. we are a far cry away from the Microsoft days of anti-competition. The web is magical.
This will be unpopular, but he just might not have the raw intelligence (IQ) in order to be a good developer. Nobody wants to say that but it could be the case. The fact that he apparently works hard and still fails points to this in my opinion.
Hey! I switched from physics and academia to a pretty successful career in software. Getting that first job was the toughest and I actually was hired as a QA engineer to start where I learned web dev on the job and got rehired as a software developer. Feel free to PM me about anything you're facing right now.
Done you say? There is a JavaScript framework for that. https://donejs.com/
I just don't work for cancer companies that work only with putting pressure on people... I would have quit long time ago if I was wrong ;)
I won't produce low quality products... I can only engage on the next sprint, I can't engage over something due in 6 month with specs changing all the time. When I work on something if I find something not tested or something that can be better expressed I always take time to improve... That's not something people usually do, that's why computer products can't survive after 2 years...
I prefer a client that tells me "that point is our next priority, so we need to get that out as soon as possible" than a client that tell me we need that feature for the next week. I'm the one who know my job and I'm the one who should say when it will be available...
Have they given you an indication that its an implementation test or some kind of multiple choice? And is it on site? If it's at home, exceed the hours by spending time on additional features. You shouldn't need to do this, but as an interviewer -- theres always a couple of guys who do.
&gt; eep your code simple and clean by making sure what you write has purpose. If you want to explain your insights beyond Tests too. It shows some level of respect for production SW.
Yay codegolf! See also: /r/CodeGolf. 
Definitely agree, good point
`[...'Spread and reduce!'].reduce((a, e) =&gt; `${e}${a}`, '')`
If your using something like babel-preset-env with recent browsers -- it could actually be const/let
Thanks, just pm'ed you
True enough. I guess I want to be an optimist when it comes to people and embrace the growth mindset. To each their own. 
Will this split multibyte Unicode characters into multiple code points? I think it does.
Pretty sure this breaks with multibyte Unicode characters
@AllIsWellThatsHaskell Thanks. I am happy that you shared your concerns about polluting this sub-reddit. If I could've implemented the same thing using either Reason, Flow, TypeScript, CoffeeScript or ClojureScript and had shared it in this sub-reddit, what could've been your thoughts? I think JS and Elm are closely related. Many great things like Pipeline operator (https://github.com/tc39/proposal-pipeline-operator) are coming to JavaScript which are already there in Elm. People who doesn't know Elm yet, they can get familiar with it and determine props/cons by looking at such a small codebase. Again, I would like to apologize if you feel I've spammed you unnecessarily.
Since `str` is an `Array` you can just call `map` on it directly.
&gt; polluting this sub-reddit &gt; spammed Woah. That's not what I said at all. I actually like Elm, and I upvoted your post. I just think something like this would be better posted in /r/webdev or some of the other more general subreddits. &gt; If I could've implemented the same thing using either Reason, Flow, TypeScript, CoffeeScript or ClojureScript and had shared it in this sub-reddit, what could've been your thoughts? I actually don't think those belong on /r/javascript either, but I cannot speak for everyone. That's just my opinion
[removed]
True. Updated.
Thanks! That's exactly what I needed, found the details in webpackdevserver's docs
Thanks for the suggestion about /r/webdev. 
Hey man, fuck the age thing, you need to drop that mindset. If you’re smart enough, and enough of an autodidact to have gotten as far as you’ve gotten, you can learn the fundamentals of CS, Big-O, all that bullshit in a few weeks. Then it’s just about setting aside a few hours a week and practicing those dumb coding problems on a site like Coderbyte or Hackranker or whatever, there’s a bunch. That said, as a few people have pointed out, you may need to focus your search on less engineering-intensive dev roles, or focus on frontend gigs and brush up on the latest JS interview questions. 
But without explanation it could just as well be a batch file with the following contents: `@START EXCEL`. 14 bytes. 
yeah that's wack. you better pay for their time to do this
Forget databases for this goal, just put it into a json file or something. And select with `Math.random`.
That's more what I mean by database, I'm more asking how I should do this, I'm pretty new to javascript so I don't know how to access a different file in the javascript
I like that one a lot, shows the raw yet elegant power of ES6. I was able to shave off 2 more chars by using `${e+a}`. Btw, your formatting is a little off, you either need to escape your inner ` or indent the whole thing with 4 spaces.
&gt; Living costs in Los Angeles are insane 
Clever!
in node.js you can easily access other js files. You can do just `var jokes = require('./jokes.js');` And in the file: ```module.exports = ['joke1', 'joke2']; // etc… ```
For me what gets the least attention but which I use a lot, especially with react props: destructuring. Not enough is being said about the awesomeness of that.
Not this again.
That’s not very realistic. If for example the soccer World Cup tells you they need a website before summer to sell tickets and you say that will be delivered whenever you feel like it, probably in September, good luck with that... And a lot of times they really know how long it takes to do something because they have done it multiple times, and if you are just slower or unable to deliver on time they will not hire you. If the date doesn’t make sense you have to tell to the client, but working without deadlines is not realistic. And as someone that does interviews, if a candidate tells me that he refuses to work with deadlines the conversation will end 2 mins later. That just shows that person is inexperienced, unreasonable or not very professional, so it’s a clear no for me.
Multiple times? That’s not common at all. If the companies go broke is not really “being fired” in my opinion, in every other case, is a problem. I only know 2 people that have been fired, and was for extreme incompetence. Really extreme. Normal incompetence is ok for most businesses.
I asked the interviewer if it's gonna be a multiple choice kind of test ,he said no ,he sais probably it will be a pure coding test sent me on email with instructions and potentially a timer . So i think it's either a hackerrank test or a front end react app to develop . So now what îm doing is working on my data structure and algorithms on hackerrank not just for the sake of interviews . Then i will work on some small front react apps. That way i'll hopefully be comfortable whatever they throw at me .
This chat is build with ClusterWS: https://github.com/ClusterWS/ClusterWS 
I can say only one thing. NEVER GIVE UP! Does nor matter what other people say or think NEVER GIVE UP!
Is this different than a browser based test runner? I had setup jasmine on plnkr to accomplish something similar. It is still available here: https://plnkr.co/edit/kY8CHqU2QrsZC4FYE5ir?p=preview
https://zeit.co/pkg Works like a charm and is stupidly easy to use. 
That's a problem, right, I'm the same. Either you work on yourself to get along with the team, or you find a way to work on your own. There isn't a compromise there.
You could make this into a bookmark script too. 
very useful for sure, thanks :)
I expect TCO from a library implementation, not the language, because this can be implemented at the library level and because one reason to go async is to escape the limitations of the call stack. Also, as mentioned [in the article](https://alexn.org/blog/2017/10/11/javascript-promise-leaks-memory.html#4-thats-the-equivalent-of-a-stack-overflow), "proper tail calls" support is coming, having been specified in ECMAScript 6, right now being supported in Safari browsers for MacOS / iOS, so this too will go away.
I didn't mean taking longer was hacker culture it was more about making sure you solved a problem sometimes combining different components to get things to work (e.g. work script in python because I'm quicker at it than with SSIS but the rest of the processing in SQL Server)
This might help a bit https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95 . At least those are questions I ask in a JS interview. You can also google "javascript interview questions". I'm assuming with your experience you will be able to differentiate things that you are familiar with and things you don't know. Some things to look into: * "this" in javascript * functional programming * prototypal inheritance * DOM and DOM manipulation * asynchronous programming ("ajax", promises, async/await) * Testing libs like mocha, jasmine, protractor, webdriverjs * Node.js might be interesting since most JS tools run there I don't really know the requirements of your work so my comment might be useless..
I ordered CTCI from Amazon yesterday. Should be in by today. I have to really consume that book.
Awesome, thanks so much. Yea, I imagine since it's a SDET role, most questions will be geared towards that. These are great areas to look into. 
Yes I've tried to not let depression come through I have had to deal with business owners a lot so I can turn on the cheer factor and smile my way through it. I'm not close to retirement age but not 21 either. I hate to play the age card but a few job interviews I went to in silicon beach I was the older guy (with exception to the c-level guys?) Felt out of place while they referenced pop culture and bragged about Friday night keggers. I wish I liked that stuff but I prefer coffee and an audio book while I unwind on a Friday night haha. I agree in this industry we never stop learning but what should I learn? I have an annual subscription to safaribooksonline and I go through so many books on there I almost feel like I'm getting "learning burnout" I can only seem to store what I need at the moment for that moment but after I use it, it's gone. What Comp-Sci books would you recommend?
Sinonjs might also be interesting for unit tests. https://github.com/DevExpress/testcafe might be interesting for test automation. Also websites like browserstack and saucelabs are often used for cross browser tests.
I struggled to find the best way to tell her. I did say that the interviews aren't being fruitful and that were out of money. She is stressing out but understands. I just hope the stress doesn't affect her at school. She has another year left and as soon as she starts working we've agreed I'm taking time off to go back to school while she takes on the responsibilities. I can work part time or freelance remotely while studying (at least that's the plan)
Yes, you load the sound via xmlHttpRequest/fetch as an arraybuffer, then call audioContext.decodeAudioData on it. You now have a buffer. Then you can play it using audioContext.createBufferSource(). You can control the playback rate (i.e. pitch) and loop it there.
Thanks. I actually really enjoy writing test scripts and fiddling with Jenkins but I usually have it on my local machine for my pw use during development. The past places I've worked at thought it was a waste of time and being corporate environments they always wanted to ship right away. Little did they know that all those damn bugs (though not all of course) could have been caught during the CI phase. Built. New feature? Better make sure it didn't break anything!
I actually spent most of the day updating and testing on upwork. The test results werent horrible. (Even got a couple of top 10% scores) but as a freelancer with no gigs on there I can't offer proposals due to a lot of the projects that I found on there requiring a 90% job success rate. Reminds me of the "you can't hire me because I have no experience, but I have no experience because no one will hire me" predicament I was in during my high school years when I was looking for my first job. Then again it's the weekend. Hopefully people can find me as well while I send proposals.
What does using the iframe give you? (I just tried this here on Reddit, and *man* there's an awful lot of shit floating about ...)
This is really cool. If never heard of pramp before but I signed up. I'll definitely use this. Thanks!
So is this basically just doing the following? const promisify = fn =&gt; (...args) =&gt; new Promise((resolve, reject) =&gt; { fn(...args, (err, result) =&gt; err ? reject(err) : resolve(result)); });
Yeah I agree with you, I would not want to work for you because you tell me that someone that never ever worked in development knows better than me how much time it takes to do something... nonsense What you describe with your soccer team is a V cycle... that never worked... In agile development you start with the minimum required. In that context, I would start an application that allow to buy ticket and I would slice it to get something working in 2 weeks... then I would improve things every 2 weeks. I would not take engagement that the application will do everything by September but instead I would show progression every 2 weeks to the team and ask them what the next priority. That's maybe not realistic for you but that's how I work, and my client understand exactly that in order to get an application that will last more than 10 years, that's the way to go ;) I have 5 years of experience and never got unemployed.
The iframe gives you a fresh window object to compare properties against.
And what makes you think that your client is not a developer? You aren’t able to see the difference between reasonable deadline or milestone against a made up date? Or that a lot of things need to be done for a certain date no matter what, and can have a reasonable deadline? Right now I have a deadline of 3 months for doing something that I have scheduled to do in 1 month. What’s the problem about a deadline like that? Btw, 12 years in development, I can assure you, a lot of times you need deadlines, and doing scrum is not an excuse for not having deadlines. Because deadlines come from planning, and if you have a schedule analyzed and planned, then you should try to stick with it. Being childish and saying “deadlines are cancer” is stupid imho.
Maybe so another issue is the fact that where I had most experience and meaningful work was in healthcare. I may not know a lot about complex algorithms but I can parse x12 EDI 837 files (which if you've ever seen one looks crazy). How did I solve it? Well I had the requirements spec as a guide and it's really just nested loops with weird delimiters So the questions are more difficult? I am totally considering leaving L.A. if I get remote work I can live outside of L.A. for a fraction of the cost of what we pay now for our apartment.
Deleting your old posts makes including them for context pretty pointless...
Use done() or the package jasmine-promise.
I hope you give us an update of your situation in a little while. Genuinely curious...!
[bookmarklet!](javascript:(a=&gt;{const sandboxIframe = document.body.appendChild(document.createElement('iframe')); for (let windowProp in window) { if (typeof sandboxIframe.contentWindow[windowProp] === 'undefined') { console.log(windowProp, window[windowProp]); } }})())
It isn't. But by using the native function you don't have to waste time testing it.
[I did!](https://www.reddit.com/r/javascript/comments/76gqxd/see_all_unique_globals_with_this_snippet/doe7za6/)
Yeah in your actual test code if you give the callback function for `it` a `done` arg then you can test things asynchronously. Eg. ``` it('should resolve', done =&gt; { myTest.then(res =&gt; { expect(res).toEqual(expectedValue); done(); } }); ```
I recommend to drop jasmine for mocha so that you can use async/await
Thanks! I also suspect that we should have written spy like below: &gt; spyOn(window, 'Promise.prototype').and.returnValue(...)
thanks for the suggestion! As this is on a large codebase, we may not plan to switch to mocha.
This is really neat! I did the same thing by making two lists and checking if the "empty page" list contains the property, but this is much cleverer.
The spy was not set correctly, this another major issue I observed. Probably because we invoke Promise with `new` keyword. Hopefully, defining spyOn Promise.prototype object will help.
in general, the way to fix do this in frameworks that don't support `async/await` is to assert in a promise response handler (`then`) on the promise that comes back from your function (`myTest`). In Jasmine specifically, you do this by calling [`done`](https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support) after async operations it("handles asynchronous calls", function(done) { myTest.then(function(randomPromiseResponse) { expect(randomPromiseResponse).toBe(4); done(); }); });
I can probably do it in an hour. I hope I could get 600€/day in Spain though.
cool! Could you also please show how to mock/define a spyOn native JS Promise in Jasmine?
Everyone's converting into an array first, but strings are arraylike enough that you don't need to: Array.prototype.reduce.call('Hello, world!', (a, e) =&gt; (e + a));
had importing! https://developers.google.com/web/updates/2017/08/devtools-release-notes#har-imports
I'm sorry but can you please explain what's happening here? The use it arrow functions is throwing me for a loop... Also, mind sharing some insight on the spread operator? The documentation confuses my poor l little mind.
In college, we had a group project and we split up responsibilities. My job was to analyze binary images that were passed to me. The person passing me the images was supposed to basically read in an image and pass the image to the system. How hard could that be? Well, he read every bit in the file, and wrote a "1" or "0" character to a file, and passed that. I was banging my head on the desk, but whatever, I made it read his input and we finished. The point of this story is that yes, you can "just get it to work"... but it's also about *how* you get it to work because efficiency, maintainability, brittleness, failure recovery, etc all play a role in a real system. For some things you only need it to work once (like that class) so it didn't really matter, but for most work stuff that's not the case. 
Sure thing, that was a bit of a mess. const promisify = fn =&gt; // `args` is an array of arguments (...args) =&gt; new Promise((resolve, reject) =&gt; { // fn(args[0], args[1], ..., args[n], cb) fn( // Spread args into fn's arguments ...args, // Then add our callback as the last argument (err, result) =&gt; err ? reject(err) : resolve(result) ); }); Here's an equivalent that's more explicit function promisify(fn) { return function() { const args = Array.prototype.slice.call(arguments); return new Promise((resolve, reject) =&gt; { const cb = function(err, result) { err ? reject(err) : resolve(result); }; args.push(cb); fn.apply(undefined, args); }); } }
Fair enough. Taking a peek at the source it looks like they handle some edge cases, and actually cache the promisified function too.
Instead of using the *left* property, I believe it's recommended to use *transform* for performance reasons. If you like the current animation, you could set the initial transform style in your css as .goldicon { transform: translateX('-1500px'); } and then animate the transform to 0px with jQuery.
Why are you trying to spy in the first place? Generally you want to do your best to just test the input and output of functions where possible. Excessive spying is usually something to avoid.
I'm kind of surprised that noone has mentioned Map and Set yet. Programming in ES5 without them is a nightmare - people tried to fake it by using objects, but that limits your keys to strings and has subtle bugs and pitfalls.
Thanks, good point! 
TL/DR: yes!
The rest of this should be easy, but if you struggle feel free to PM me.
&gt; For now, what advice do you have to improve my learning? Make mistakes and break things.
Have you heard of math anxiety? It's the idea that anxiety about math and it's difficulty impairs the ability to learn math. It applies to learning in general. Since you've been able to isolate anxiety and stress as the source of your problems, try to reduce outside anxiety while at the boot camp. This can mean prepping everything for the day the night before so you're able to focus on learning while at the camp. Or creating routines that help you get through the stressful parts of your day so you can concentrate more on code.
I dunno why I should promisify any callback I need to call. I prefer [mz](https://www.npmjs.com/package/mz)
you know nothing John Snow
Hi there. I teach at a bootcamp and I see this aaaall the time. Every other day I have a student coming to me privately feeling stressed. It's a difficult thing we do at bootcamp. You're trying to change or kickstart your career in 12-16 weeks, and that's never going to be easy. Talk to your fellow students. I guarantee they are just as stressed as you are, and even some of the high-flyers see themselves at the bottom of the pack. The secret is not to compare yourself to others at all. Everyone learns at their own rate. Ever played Blackjack at a casino? Outsiders think that the people sitting around a Blackjack table are playing against each other, but we're not. We're all playing individual games with the dealer. And we might take an interest in how the others around the table are doing, but really it's just me against the guy in the middle. That's how it is with learning. Everyone in the class is playing at the same time, but everyone is playing their own game. There's no real advantage in being ahead, and no disadvantage in being behind. Ask questions. The instructors are there to help you. If it's a good bootcamp, then they are paid to get you into a job. It's in their interest to see you do well. But first learn how to ask questions. Sometimes just the act of putting a difficult concept into words and sentences is enough for you to see a solution (see [rubber ducking](https://rubberduckdebugging.com/)). And if you're still stuck, asking the right questions will get you to the right answers. For me personally, part of dealing with stress is accepting that it is commonplace. If you start every day with "God I hope I don't feel stress today," you're fucked. Stress is inevitable because life is hard. Coding bootcamps are hard. A better attitude might be, "I know can cope when I get stressed today, because I was stressed yesterday." Accept it, anticipate it, deal with it when it arrives, grow and do better tomorrow.
ok. don't take this the wrong way, because I am truly sympathetic. I too am in a bootcamp. I too have hereditary anxiety, depression, and stress, as well as adult ADD. The difference is I am at the top of the pack, I'm way ahead of the class, and I already got a job in web dev and I'm only halfway through the course. I'm having an absolute BLAST. I cant wait to learn new stuff. Are you seeing a psychiatrist? A real psych. a DOCTOR. not a quack, or a shrink, etc. There are medicines. Medicine gets a bad rap. FWIW im not a doctor. But I have been there. Done that, I get it. 1) I take wellbutrin. 300mg a day for moderate depression. I started taking it 9 years ago. It saved my life. It changed my life. The next day i felt better. Literally. Most people say they need weeks to feel better. I felt better the next day. The medicine for me is cheap, super effective, and i have ZERO side effects. If you arent on any meds, go see a PSYCHIATRIST. Tell him what you are experiencing. They will help you. Most of them arent pill pushers - they legit want you to get better and lead a normal life. 2) breathing, meditation, diet and excersize are a great start. You may need some for of benzo to mellow you out in the mean time until you get yourself under control. See a doctor. I used to take xanax (.25mg, super mild), and then klonopin (.50mg, longer lasting) and then i stopped altogether. Because I got my life under control and managed my stress, breathing exercises etc. 3) I have ADD. If i started taking adderall in 5th grade or earlier my life would have been DRAMATICALLY different. I couldn't pay attention in school, and ADD drugs didnt exist really in the 80s and 90s. I wouldnt have dropped out of community college, I would have gone to a major university, etc etc etc. I'm smart and I know I am. I'm not patting myself on the back, I just was able to (barely) pass high school just by living on my wits. I started taking adderall about 3 years ago. This ALSO changed my life. At first i noticed I stopped losing things. I stopped losing my wallet and my keys and my phone. THen with practice i could focus on stuff. It took time to UNLEARN 30ish years of bad behaviors and bad learned behaviors. 4) Ask your instructor, career counselor or the course manager (we have a student success manager- shes AMAZING) for extra help. The program I am in is LEGIT. They want nothing more than to help you. Everyone takes the course too- the recruiters, the managers, even the guy working the reception desk. EVERYONE is a coder. EVERYONE gets 'it'. I was able to re-enroll in a course - a bootcamp - for the first time in 20 years. It has been a godsend. I'm so glad I did it. TL;DR: dropped out of college, got a job in tech in 1997. Worked my way up, made some big money back in the day. Got laid off in '04, changed careers entirely to do something I WANTED to do, made less than half the salary I did in tech. Never looked back. fast forward 13 years. My 'new' career i found unfulfillinglonger lucrative/zero advancement potential. Decided I was wasting my time in anything other than tech (something my friends have been trying to tell me since 2004) ... Have 10 weeks left in the course. Got a job 2 weeks ago. Gonna take some time to get out of debt. Can't wait to have a disposable income again.
This has been in Bluebird for quite some time. They also have [promisifyAll](http://bluebirdjs.com/docs/api/promise.promisifyall.html) which converts all callback methods on an object to promises. 
Check the annotated source code. The link is on the site.
Ah, thank you! I missed that somehow and now I feel dumb. ¯\\\_(ツ)_/¯
I don’t think there’s anything I can say that will really help you learn programming. Learning this stuff is really challenging, compounded by the fact that even the instructors don’t know what’s going to be relevant in a year, so they have to bombard you with everything. The best advice I can give is try to enjoy it, you’ll never be less experienced than you are right now. When you first start with programming everything feels hard but every success feels like a breakthrough. The first time you visit a site you built; when you get the links to change colors; when you first add a slideshow, etc. It feels like every day you learn something really new and it’s incredible. As you improve, your code gets more solid, but you only feel like your learning once a week, then once a month. The senior developers seem to just know everything and you have no idea what they’re talking about half the time. You feel less and less like you’re making progress, and still every time you have an issue someone can come over and solve it in 10 seconds. Everything you do seems like a mistake. Your code gets torn apart in reviews. You start to doubt why you’re even trying, you’ll never be like the principal engineers on your team, and you haven’t had one of those real breakthroughs in months. Every day you feel like maybe you weren’t cut out for this profession, it comes so easily to everyone else. You page through linkedin, maybe you’d be better suited to driving a backhoe. One day you come into work and you really nail the first task, then the second. You start being able to get these projects more and more. It doesn’t really register at first, but then you get called into your manager and they tell you that they’ve noticed your work has been improving. You don’t need to ask for help on as many items, and when you do, it’s usually a tricky issue. Colleagues start coming to you for help. You’re able to identify the issues they’re having from a mistake you made years ago. New libraries come out and you slowly learn the ideas behind them. You notice words like prototype and monad showing up in conversations. It’s not a breakthrough, the mile markers have stopped, but you’re learning nonetheless. You get promoted to senior engineer, it still feels like you haven’t changed at all, and you still feel baffled when the principal architects talk about some of their problems, but people are asking you to design systems for major applications and make decisions on technologies and strategies. Every now and again you still get the pangs of, ‘what am I even doing here, how did this happen,’ and some nights it feels just like you’re back at the beginning, you haven’t made any progress at all. You made it, but there wasn’t really a sense of finality, there isn’t some certificate or achievement for making it all the way to being a competent developer. But you keep going, you have a career now, and you have a team depending on you. You get put in charge of a business-critical project for a major company. You’re leading a team of 14 brilliant engineers in making a very high complexity application. Everything clicks. You see the whole picture, and you’ve learned from so many mistakes you’ve developed a sense for when they’re going to happen. It’s taken years of patience and practice with hundreds of hours spent just debugging, but you barely need to think about implementation details, you have it all mapped out in your head. You don’t really think about how far you’ve come, this is just your job now. One night you go home and open the folder called ‘bootcamp’ on an old hard drive, and you can pull up some of the first things you did. You remember how proud you felt the first time you got event handlers to work, and how excited you were to get that smooth transition animation. You close the folder and get back to looking over a resource allocation document, your team will need that done before next week. TLDR; Keep going. It gets easier, and practice is the best way to learn. In the meantime, try to really enjoy when you feel like you learned something, it’s an experience you only get to have once.
Clearing the cache with `yarn cache clean` will leave you unable to install anything in offline mode. The docs only suggest it to prove that offline mode doesn't do network requests.
This question makes no sense. You want to buy a "template"? What's a "template"? Are we talking Joomla? Bootstrap? Magneto? Shopify? Are you saying you want to build an application that previews that platform's themes? I'd start with the platform in question. 
Even so... There's "development" and there's "development". There are LOADS of development jobs for which you don't need to be on the cutting edge, and which aren't as demanding as others are. A great example is being an in house dev for a relatively non-technical industry. (More like a webmaster in many respects). Another example are the TONS of devs who just work with customizing Wordpress. (For which there are loads of gigs out there). None of that stuff is particularly demanding or advanced. Nor does it require you to stay on the cutting edge of the latest framework.
Then why do they mention that you should be able to take the offline cache, which is not cleaned, anywhere and install? I find it hard to believe that one would need to carry along the cache that is cleaned for this to succeed...something they do not mention. 
Code is the next step. First you need to check whether it's something that might be useful.
Great point. I haven't gone to those extremes. I have been doing this for more than ten years. I may not have every best practice down but i have learned from peers and books like clean code by uncle Bob. Now where I get a bit concerned is, I may not choose the most efficient data structure all the time due to ignorance and that is what I'm looking to sharpen as a skill... but then again that indeed is your point right? Would your partner have used something efficient then the project would have been completed sooner and at a higher quality. Thanks for the insight!
Don't see it as a big issue. You can write a local cache using localStorage.
Can you comment on what it offers over the function you wrote? I've been using pretty much the exact code you wrote in my projects for a while and it's been working well.
If you clear the cache how would you install anything offline?
If you want to write using async/await it's pretty convenient. async function getData() { const config = JSON.parse(await fs.readFile('./config.json', 'utf8')); } versus async function getData() { const jsonData = await new Promise((resolve, reject) =&gt; fs.readFile('./config.json', 'utf8', (error, result) =&gt; error ? reject(error) : resolve(result)); const config = JSON.parse(jsonData); }
Did you go through a job recruiter? I am a JavaScript dev and they would always try to pair me with Java jobs no matter how many times I explained it's not the same thing.
They just had to go with a clickbait title, so I didn't read it. Would have been more likely to read if it was "You should care about the license of your dependencies".
By my reading of the docs, there are two caches involved. 1. The one assigned by yarn-offline-mirror 2. The cache cleared by “yarn cache clear.” The docs also state that one should be able to take the yarn-offline-mirror cache anywhere and do an install. There is no mention of the need to carry the “yarn cache clear” cache anywhere.
Hi /u/lioialessandro, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
No, we wouldn't have finished sooner... in fact the end result is the exact same, which is why insane solutions can look fine to those who don't know better. The point was that while sometimes just getting something to work is okay, it's more often not enough, especially in regards to your reputation because others have to deal with the solution later on. I see that as the major difference between an engineer and not.
Just arrvied. I read the introduction and I really related to the "Something's wrong" section. Its quite a large book but I'm sure this will keep me busy for the next few weeks. Thanks!
The articles example of `waitAsync` is weird, since nobody should ever write it like that. A vastly saner and more common way would be function waitAsync(time) { return new Promise(resolve =&gt; setTimeout(resolve, time)); } That is, you should never wrap a function to make it satisfy the nodeback interface if your real goal is to make it return a promise. Just wrap it to return a promise. `util.promisify` is great, but really should only be used for functions that already take node-style callbacks.
I know, but having a whole node.js api already promisified is easier to use.
Why do people still use Promises? I don’t get it Observables are the way forward. There are very few problems were the primitive asynchronous abstraction of a Promise is a beneficial. 
Can you use Observables to solve this problem?
You totally can and if you are using caches and have a good workflow for validating/invalidating the cache, that is a better option. Our team didn't have that and I did not want to have to build it just to get what the browser offers for free.
Maybe have a look at some of the JS automated testing frameworks, such as Nightwatch, Nemo, TestCafe... Many are Selenium-based so they will probably sound familiar to you. I'm not suggesting that you learn much about them, not on such a short deadline, of course. Just maybe have a look at them and get to know what's available and a general idea. You may find some interesting info and links in [this list](https://github.com/atinfo/awesome-test-automation/blob/master/javascript-test-automation.md). Not all links will be relevant to your needs, but many may be.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [atinfo/awesome-test-automation/.../**javascript-test-automation.md** (master → 5e0a55a)](https://github.com/atinfo/awesome-test-automation/blob/5e0a55aa3e644b7240a8dc64ae1777e11a998a54/javascript-test-automation.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Originally, yes. Most of my communications since then have been with the company. I tend to feel the same as you, but why not give it a shot. I've been very clear of the distinction and made every attempt to set that expectation so we shall see what happens haha. 
Well, you don't need a book on Big O notation. This article should set you up fine. https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/ I'm not sure how much you know, but I can tell you what you should know. You should know how C works. The difference between pass by value and pass by reference. Pointers, structs etc. You might already know that. Other than that, you should be good to go. I don't think you ought to have much problem getting a job if you just keep looking. Make sure to be open to moving to another state. Sounds like your situation could use a change. Do you know the lower level details of reference types vs value types?
This is awesome!
Don't look at your classmates (especially ones who are ahead) as your competition. Instead look at them as your resources. There probably are coders who already had previous experience or just naturally wired to learn this easier. If you compete against them, it'll be a constant reminder of how much you are failing. And you cannot win that race. Instead, ask them for help or their insight. 9/10 they'll be very much willing to help. It's not only better for your learning experience, you'll be able to attain lasting relationships with them for your future jobs. Do not compete against them. Use them to your advantage.
I think you may have reduced your sample code to a level of abstraction too high. It might be better to explain what you're trying to achieve. [In any case... I don't know if this helps you](https://jsfiddle.net/fovjk29u/4/), otherwise you might try r/learnjavascript
can you make this into a chrome extension? I'm extremely lazy.
1. Type checking 2. Caches the promisified function 3. Copies the prototype of the original function over to the promsified function 4. For node functions whose callbacks get multiple values it will resolve with an object whose properties are the documented names of the corresponding arguments ([example - fs.write](https://github.com/nodejs/node/blob/master/lib/fs.js#L746) + [docs](https://nodejs.org/api/fs.html#fs_fs_write_fd_buffer_offset_length_position_callback)). 6. Where necessary node actually defines custom promsified versions of functions ([example - child_process.exec](https://github.com/nodejs/node/blob/master/lib/child_process.js#L159) + [docs](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)), which are retrieved using `util.promisify` (so it *should* be guaranteed to work for node's functions, I haven't done much digging though). For example: const util = require('util'); const child_process = require('child_process'); const exec = util.promisify(child_process.exec); exec('echo foo').then(result =&gt; { console.log(result.stdout); // 'foo\n' console.log(result.stderr); // '' }); So for promisifying anything from a built-in node module you should probably use `util.promisify`, otherwise there probably won't be much of a difference.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [nodejs/node/.../**fs.js#L746** (master → d43e7f3)](https://github.com/nodejs/node/blob/d43e7f39929846f02dd74a827e4b2269f3e977d9/lib/fs.js#L746) * [nodejs/node/.../**child_process.js#L159** (master → d43e7f3)](https://github.com/nodejs/node/blob/d43e7f39929846f02dd74a827e4b2269f3e977d9/lib/child_process.js#L159) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Use with caution on function that depend on `this` internally. [Example](https://stackoverflow.com/questions/45064380/function-works-but-not-when-util-promisify-used)
Tweet size one-liner: ``` var d=document,w=window,i=d.body.appendChild(d.createElement('iframe'));for(var p in w)if(i.contentWindow[p]===undefined)console.log(p,w[p]) ``` :)
Practice what you’ve learned at home to feel more comfortable with it. There you won’t have to compare your work and progress to that of others, or have your concentration broken by a room full of people. Not everyone’s ideal learning situation is in a classroom, and practice always helps with comprehension. 
Do you have funding?
Personal funding only. I'll use my savings for that.
Why so far out? Seems like an awful lot can and will happen between now and then...
As a fellow bootcamp grad I know anxiety can get in the way of learning. Especially when you first sit down to a new assignment and you feel overwhelmed and your brain puts up a block and you can't remember where to start or what to do. This is very normal, especially if you don't have a lot of previous coding experience. The way to get out of this situation is to ask your instructor questions. Instructors (and TA's if you have them) are there to help you succeed. And when you're stuck DO NOT WORK ALONE. The more you work alone when you're struggling, the farther behind you're going to get. Work with other students, especially ones that are a little above your level. Work with someone that you can learn from with ease, but don't work with the person at the top of the class because they will confuse you because they may be using advanced syntax or methods and you may get more confused and think you're doing worse than you are. Also...read the docs. Seriously, things will start to make sense to you. And lastly, the way bootcamps work, they expect you to be confused about each new concept for about a week and then you will latch on to it and it will eventually become easy. 
Different reasons: - The know how necessary for my current job is not so quickly transferable and I most probably only get a new colleague in ~March 18. - I want to be well prepared - I want to have some sort of proof of concept when I start
why not just wrap all that stuff in object? https://jsfiddle.net/jz2he0wq/
You are not cut out for programming, sorry. Maybe you can get a job cleaning bathrooms or taking out trash. Programming requires intelligence and competence.
I see, so you can define a variable in the parent and give it a value in the child? That's just what I was looking for, thanks
Why not bootstrap the technical aspects and get the platform up and running before quitting your current job? What's your usp?
Man up.
Well yeah, of course. But there are other libraries out there.
I think I will not be able to produce a completely usable system before quitting my job; at least not alone. My usp is that such a solution does not exist yet. I know, you can now say that if nobody has built the platform yet, there cannot be a necessity for it....yes, fair enough. However, I know the requirement to have such a solution (and I talked to other people in similar environments who say the same).
Take the free Coursera course "Learning How to Learn". I've been learning new stuff for decades. Have been programming for the same amount of time. I was surprised how much it helped when I thought I was already a quick learner. You can spend as little as 15m at a time taking the course online. It will start helping within a few days.
It sounds a lot like Jira. Do you know this tool? It focuses on development, but they sell it as a task management tool for companies in general. Anyway, I would love to know more about the project and maybe co-funding if I see real value on it.
Licenses on easy mode: Avoid all the bullshit and what ifs by sticking with dependencies that are MIT, 2/3-clause BSD, Apache 2.0, WTFPL opposed to copyleft and GPLish licenses. Be sure to follow any of the terms of the license that applicable. Usually a quick look on their NPM page or Github repo will tell you before you ever have to download it. Copyleft and GPL type licenses are good if you have a completely open source project and want to ensure it stays that way.
_Preferably_ not in production.
To do it well as a profession it also requires interaction with others in a way that's not degrading, arrogant, or demeaning. You have a lot of room for improvement. 
Dude, visited your account history. Seems like you just go around being a dick. You might want to rethink how you communicate with people. 
Most bootcamp cohorts will have someone attached to your class as mentor/advisor/counselor. They are literally there to have your back in this kind of situation. Anxiety and impostor syndrome are SO common in bootcamps, you are not alone at all! Even if that doesn’t pan out, bugging other staff is not a bad idea either. You might be surprised how many people know your name and have already had discussions about how to help you be more confident/comfortable. You have so many people looking out for you, all you need to do is pipe up and reach out to them!
I still freak out when I think of a project in terms of the Whole Project. You gotta break things down into little tiny pieces. Then actually the opposite happens: you finish some tiny exercise, and get a little rush of positive feelings. 
*A relevant comment in this thread was deleted. You can read it below.* ---- I'm in practically the same boat as you. Nearing 50, self-taught, front-end programmer, been doing this for 20+ years, in LA. I had 4 job offers after about 20 interviews in 2 weeks in my last search a few months ago. If you can't make it as a developer in LA, then something is really wrong. I also come from years of Angular experience, but in my last search I realized that nobody wants Angular anymore - they all want React with ES6. I spent a week frantically learning React and ES6, enough to take some coding challenges at home, and I let employers know I don't know React well but I'm willing to learn on the job. [[Continued...]](https://www.resavr.com/comment/im-almost-done-developer-9695954) ---- *^The ^username ^of ^the ^original ^author ^has ^been ^hidden ^for ^their ^own ^privacy. ^If ^you ^are ^the ^original ^author ^of ^this ^comment ^and ^want ^it ^removed, ^please [^[Send ^this ^PM]](http://np.reddit.com/message/compose?to=resavr_bot&amp;subject=remove&amp;message=9695954)*
Also, depending, I think a book about learning how to learn would be some nice bedtime reading. Don't take it too serious or let it get in the way of sleep and meditation. _Make it stick_ is a good one. Don't try to program for 16 hours a day. Professional programmers suck at this. Diminishing Returns. (If your course is designed to do this, ignore me)
Can we all agree to just stop using PayPal?
You're absolutely free to stop using PayPal. :) This article is actually just about stuff we've open-sourced, that can be used entirely independently of our payments products.
Check out some of the [best Meteor tutorials for beginners](https://reactdom.com/blog/meteor-books).
Thanks :)
Torn between “this guy fucks”, and actually crying. I recognize this pattern from the last career I built, doing it again is tough but I’m inspired, thanks you. I also hope you get the Silicon Valley reference and aren’t insulted by the quote because it’s a high compliment from a megalomaniacal billionaire.
What is this bootcamp? Is it an online thing? Anyway I've never learned a thing from anything else other then by reading it from a book. Expecting someone to teach you programming is a huge mistake in my opinion because there is just too much to do and programming is a very hands on activity. In college all the best programmers were the people that programmed before they got to college and all he bad ones just just sat and class and thought if they did the assignments they'd get good. My advice is to get a great book, (I can't recommend a good JavaScript book I'm working through Mozilla's online tutorial now) and do all the examples and understand everything before you proceed further. People run into programming issues when they don't have a good foundation to start from so master everything you can in the beginning. 
Yea worst case is you continue to transpile existing code for that specific feature until you find time (if ever) to refactor it out.
Awesome! Thanks =)
It seems like you answered your own question. return { ...state, cart: oldState } This statement returns an object. Based off of the STATE argument to the reducer, it seems like the return statement is actually correct. But if you're really trying to only return the cart array, it would be the following: return oldState 
The issue is that your state is an object at every step. The initial value is an object (with one property: `cart`, an array). When you assign `oldState`, you’re reading the `cart` property from `state`, which is an object. And when you’re returning it after your changes, you create an object and give it a property `cart`, which is an array. And finally, if some other action is being processed, you shallow-copy `state` into a new object (this is unnecessary btw) and return it. If you want to change this, each of these needs to be changed. Make your initial state *just* the array, do your operations on it, and don’t return a new object when you’re done with it, just return the array. 
You generally need to be aware of a method's call-time context when writing JS anyway. If you wanted to always be safe in that regard it's not much more effort to mimic `promisifyAll` and assign it back to the object: Bing.search = util.promisify(Bing.web);
Don't think the Op has that kind of deadlines so for me that was out of scope... but anyway even a deadline of 3 month for something that take 1 is not an agile workflow. I'm not childish, I know that my client priorities evolve over time so engaging for 3 month over something that won't be first priority in 3 month is stupid... yeah clients often does not know what they want, and if you don't put limits, they want facebook in 2 weeks &gt;_&lt; That is childish
1. Note how he actually added the buttons. It's a better idea to give a full working example when asking for help, else someone has to come in and provide the foundation you should have added. This guy was really nice and added it for you. 2. All children have access to their parents (more properly said: all inner scopes have access to outer scopes). Access means read and write. Try not to think of it as "oh you can give a variable a value in a child" as that's a bit too simplistic and gives you less understanding of what's possible. 
https://jsfiddle.net/dzguw5w9/5/ - this is more how I would approach the problem. I think the most confusing part is the `genPromises` function, it returns an array of functions that add a progress bar and return a Promise (both the bar &amp; promise will fill/resolve at the same random time in the future), but if anything doesn't make sense ask and I'll do what I can to explain it.
^ When you first start you’ll inevitably fumble your way through, glueing libraries together, writing spaghetti code. But that process is important. Eventually, as you learn more, you start to see the matrix. I cannot describe that feeling, but you’ll know it when you’re there.
 state = {cart: []} `state` is an object. `cart` is an array. `cart` is stored inside `state`. let oldState = [...state.cart] `oldState` is an array, containing all the elements from `cart`. This has a very confusing name. For 1, is is being used as your "new" object. For 2, it contains your `cart`, not your entire `state`. This would be more appropriately named `newCart`. return { ...state, cart: oldState } Here you are returning `state`, destructured from an object into an object, and overriding any `cart` field with a new one. You likely mean something like this: export function reducer (state = {cart: []}, action) { switch (action.type) { case "ADD_TO_CART": let newCart = [...state.cart]; const index = newCart.findIndex(x =&gt; x.name === action.payload.name); newCart[index].quantity++; return { ...state, cart: newCart default: return state; } });
Nah, I like money enough to have PayPal payments up and running. 
awesome - i just recently started using xcomponent and it's been great. what would be great i think it to add some use-case examples to do some common tasks, such as: * click a button "entry point" that loads a full-screen iframe takeover using xcomponent * fluid iframe auto resizing (for an inline xcomponent rather than button entry) * using xcomponent to make a communication channel between paypal checkout and an app / client page 
Wow, thanks! I haven't gotten a chance to actually reason through the code yet but I can see that it works nicely. I'll let you know if I have any questions. Thanks again
Why? Their product has only improved over time. 
Useless clickbait?
Yeah, let's all keep using those friendly credit cards 
Thanks for the suggestions! Can you clarify the last one? The paypal button already uses xcomponent under the hood to do all of its communications.
disregard that last one, just refreshed myself on PayPal's checkout API and the scenario i was trying to solve for is moot now =) i am still having issues with `autoResize` though. when dealing with a component of varying height, there is a small delay between when the prerender (loading spinner) unmounts, and when the height of the iframe is calculated the the contents are revealed. [here is a GIF that might explain it better](https://i.imgur.com/20nQQPA.gifv) is it possible to control the unmounting of the `prerenderTemplate` based on an `postMessage` I can manually specify? then I can send an event from React's lifecycle instead. 
It works well... (using example from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) let longWords = words.filter((word) =&gt; { return word.length &gt; 6; }); 
Amazing. I just got through chapter 5, but could go back and refresh for sure. I'll get on that slack channel.
That's a great suggestion -- can you throw up a github issue for it?
Why the down votes? There's a pretty good reason this sentiment is prevalent. PayPal stole 8k from my account when somebody defrauded them.
You can either extend the component (https://vuejsdevelopers.com/2017/06/11/vue-js-extending-components/) or use mixins (https://vuejs.org/v2/guide/mixins.html). 
Boot camp great here also. My cohort also had someone who was struggling halfway through, and could have been called the very bottom of the pack. This person is a huge inspiration to me though, because she refused to give up! She swallowed her pride, went to the instructional staff, and worked hard as fuck to catch up. She joined our project group a week late, but by then she was totally up to speed, and she was an excellent contributor. I didn't keep in touch with her because she moved away after, but I know she got a great engineering job in her new city. Get your money's worth from the staff when you're stuck, like she did, and it *will* pay off.
I bow to this wisdom
It depends on where you live and what experience you have in Salesforce but anywhere from $80k to $150k is normal. Of course there are always exceptions.
If you only break things local, or in QA, you're not going to get any real feedback. But you roll that shit to prod, and you're going to not only learn exactly how you fucked up, you're going to be given an opportunity to learn the right way to do it, and quickly.
Well you caught me 😀; original title was "Licenses of NPM dependencies". But after first 24 hours, the post didn't got much attention and I changed title to more catchy one for sake of experiment. Guess, it was not a good idea. It's my second blog post, I'm learning. I believe the article itself is much less bullshit then the title. I did a study about licenses to make a knowledge sharing for my team. Information collected from open resources and adapted for Front-end use cases. So if the topic is relevant for your, maybe give it a chance.
Added your comment right to the article title 😀
Hi /u/Bettina88, Thanks for the reply. Sorry for the less information. I will buy a template from wrapbootstrap, upload it to my portal, where I should be able to edit the template for content and images, save the template and download it to local system.
Whatever dude, but you are generalizing about all clients being retarded, changing priorities and not knowing what they want. Something that is not real. Not all clients are equal, the world is not binary. You have a very distorted view of reality. And having a 3 months deadline is because for legal reasons they need it in 3 months, if it’s sooner great. But it has to be on production in 3 months and a team of non developers knows that we have enough time because we have done the same kind of project hundreds of times. So they know is about a month, and we do 2 15 days iterations , or maybe 3 if there is any problem and it’s done, but with a time window of 3 months that doesn’t affect us at all. As you can see, things can be planned in advance with non changing requirements, and even by non developers. And the project that I am updating hasn’t been touched in 7 years, so, it’s not crap that changes all the time either... Pd: Btw the expression “x is cancer” is something that I only hear to 12 years old playing call of duty, so yeah, if you tried to make some kind of point, it sounded childish. And that would explain all the downvotes. 
Maybe a stupid advice but: Think of it as a marathon, not a sprint. I've also struggled hard with learning to program the beginning but it will get easier over time.
Learn from books? Bootcamps are not for everyone. And I would guess many great programmers did not start with (or ever attended) bootcamps.
You know who really cares about licenses of your dependencies? Investors. If you're building a startup on FOSS, investors are going to ask for at least a cursory audit of the licenses of the software you're working with. Last thing they want to do is sink $10 million into your company, only to find that your product is built on a fully GPL base.
Thanks for your efforts and contribution to the community. Despite OP comment, this is appreciated.
A re-implementation of d3 force layout using WebAssembly: https://bl.ocks.org/ColinEberhardt/6ceb7ca74aabac9c8534d7120d31b382 Just a little side-project I've been playing around with recently. It uses AssemblyScript (because it's been &gt;10 years since I last touched C!)
How is it useless? Do they have value? To me these links do, so I would say no...
Thanks, we are starting to use xcomponent in my team, and it's being great so far :D
Hi I just like to join but I already am already work 3 years on JS also node?
That's almost like my own! (Really, though, how could it be much different...?) const promisify = (fn, context) =&gt; (...args) =&gt; Promise.resolve(context ? fn.call(context, ...args) : fn(...args)) .then((err, result) =&gt; err ? Promise.reject(err) : result), promisifyMethods = (obj, ...methods) =&gt; methods.map(m =&gt; promisify(m, obj))
Hey man, had been AFK for a bit. Thanks so much for this! Made things a lot clearer. :D
Yeah whatever... I've worked the way the OP work... and it nearly destroyed my passion for the job. 95% of the job I find are exactly what I described. Today I'm working at company that does not work like that and I know that I'm really lucky to have found it. So I don't expect that someone understand my point of view... When you only knew projects where you have no pressure you can't understand what the OP has been gone through... I don't expect you to understand that and I don't expect 95% of reddit community understand that either. Today I'm a lot happier than I was before, and I really won't return in cancer companies with impossible deadlines. I really don't care about your downvotes, I was just trying to tell that deadline are not the only way to work and if it can help people, then good for them. If you like having your deadlines great for you... but know that's not the way everyone work
don't even need any other files, just put the strings in an array right where you need them and pick a random index.
To get anything you have to click the link, then click through to the actual story. Is this not the very definition of click bait?
The thing is that your experience is not reality, it’s just an opinion. If there are a lot of places with reasonable deadlines your opinion is just not true. Open your mind to possibilities outside your experience.
I work for a government design department--while I do have one, they aren't required. Everything in your portfolio should work as intended, but you can get in. It ALWAYS helps to know someone. Networking is really important, especially when you're burned out at receiving no answers.
https://www.w3schools.com/tags/att_input_value.asp https://developer.mozilla.org/en-US/docs/Web/Events/change Should be everything you need to figure it out.
https://builtwith.com/?http%3a%2f%2fmobile.abc.net.au%2fnews%2f2017-10-16%2fnorth-korea-missile-range-map%2f8880894%3fpfmredir%3dsm Hope that helps
Hi there I’m interested in joining up. Are you all on a study schedule? I am a novice with some background in js but have not studied it for a few years. I think this is a great opportunity for some self improvement. 
Yes, it's possible. In fact, ThePirateBay is doing this instead of showing ads. The visitor doesn't get a cut though. 
Open source?
D3.js The giveaway is in [this file](http://www.abc.net.au/res/sites/news-projects/north-korea-missile-map/1.0.2/index.js), which is minified and is difficult to read because , but it has unusual strings like `"thresholdFreedmanDiaconis"`, `"thresholdSturges"` and `"thresholdScott"` which are all names of functions in the [d3-array](https://github.com/d3/d3-array) module for advanced array processing in D3.
If I were to try and built it, I would probably look first to some sort of parallax/scrolling effect library like: https://github.com/janpaepke/ScrollMagic It's probably not the only thing that's on that page, but could be a good first step.
somebody posted a link to a site just like that a few days ago,can't find right now
If you are asking about how to write an algorithm that can understand the text and label it with a category, you would need to look into machine learning as that is no simple task. If you are just asking how to execute code after a user has entered text into an input field, look into event handler, as others have commented about.
Generally I steer clear of the "this" keyword in JS. It can be confusing and non obvious. With arrow functions and a more functional approach to code there generally isn't ever a good reason to need it. 
Well, for one thing, it's completely irrelevant to a blog post showcasing PayPal's open-source projects. This is /r/javascript, not /r/personalfinance.
[removed]
[removed]
[removed]
_Can_ you? Yes, absolutely. [CoinHive](https://github.com/cazala/coin-hive), which you might've heard of recently, is a cryptocurrency miner that runs entirely in the browser. That being said, it's fairly inefficient. They picked Monero specifically because it's a cryptocurrency where CPU mining is 'only' about 50% slower than GPU mining, but... it's still 50% slower than GPU mining. On top of that, CPU mining in JavaScript and WebAssembly is still only about 65% as efficient as CPU mining in native code. So, if you're okay with a solution where you're mining Monero at about a third of the hashrate you'd get mining Monero using your GPU with a native miner (and that's not even getting into other currencies), CoinHive might be a viable solution for your use case.
coinhive.com
That’s too much, man!
I read that it was fake! 
Mining BTC is just crunching numbers. Huge numbers. It can be done with any Turing-complete language. JS would be fine. You just have to take into account how information is processed afterwards. 
Use [Math.random()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random) and [setInterval()](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval), good luck!
I'll try, but that's not a lot of information xD
That's because I don't want to spoonfeed you your own challenge. Since you're new to JS, I'm pointing you to functions you could use to achieve your goal. Other than that, Google is your friend.
Here's a start. It doesn't constrain movement to the parent, but you can figure that out I'm sure: https://codepen.io/anon/pen/mBQbOM
slimselectjs http://slimselectjs.com/
&gt; http://slimselectjs.com/ Thanks but I'm not looking for a select drop down. I'm looking for a nav like drop down.
p.s. great username
Totally forgot this was a webdev post and was just entranced by the article. 
Bootstrap 3 you can customize and just get the dropdown components. http://getbootstrap.com/docs/3.3/customize/ Not sure if you can do that for 4 though
Does anyone else know if this is possible in 4?
Wow! Thanks for the information... Good to know!
I'm not sure why you find this confusing. The IDE gives text data to the language server, the server returns errors in the text and provides other features (like "Go to definition"), but it's just text data. JS text data is not any different from React text data.
let's hope he removes the borderline unintelligible coefficient example
I tend to agree - writing without `this` is a doable way, it's clearer, and a better functional approach. However, I am getting pretty tired of all these articles explaining `this` over-and-over again. It's not hard to get the concept of it, and once you know how it works, it's not a mystery. I personally haven't misused it lately, even with mixing function/arrow declarations I still find it's context. I'd say tho, that it's easier to use `this` correctly than write `thisless` code :)
Know what else is a smooth, high performance scroll bar? The fucking native ones!
This makes me feel a lot better about when I forget that they are different, and there are a lot of browsers still actively used that don't support the latter.
The page seems to break auto-scrolling (clicking middle mouse for the scrolling "compass"). Is there a reason you're replacing native scrolling?
Is there going to be just one `type` returned `(A)`, or many? If there are many, are they all in `skills` (and 'cycle' is one amongst the keys that `type` can be in) `(B)`, or is `skills` also one of many `(C)`? So, 1st question: what is your data structure here? `(A)`: no need to iterate, just pluck it right out of there with some destructuring. `(B)`: Use a `map` to collate the `types` `(C)`: Use a `reducer` to join multiple `maps`.
I quite like using `lodash/fp` and `flow` to compose functions together for this kind of thing: const doThing = flow( doSomethingUnderscorey, doSomethingElseUnderscorey, etc ); doThing(obj);
The `mixin` with the block body and the return statement is 10x more readable imo.
So what is your question? It looks like you just want cleaner code or what?
I know. I'm just peeved that I wanted to make it better, compulsively, but could only make it worse in another way. It's like whack-a-mole!
I'll edit the object to give a better clarification. Let's say I have const obj = { skils: [{ cycle: { type: 'mountain bike' } }, { }, { }] }
Welcome to Stack Overflow! What have you tried so far?
Hi /u/S1nful_Samurai, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/mdchad, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/treyhuffine, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/zslava88, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Classes specifically reference this https://github.com/ejmurra/ScrollyTeller
I genuinely never find myself needing or wishing for "this" when writing JS nowadays so it's debatable about easier to write. But I'd argue it's almost never easier to maintain. 
I'm just getting confirmation that I'm being OCD about this, and that I should just accept block bodies, variables, and return statements, because there is no better way. At least until the pipe operator gets into the language...
Why not a function like "props" in ramdajs. http://ramdajs.com/docs/#props something like: getObj(["skills", "cycle", "type"], obj) recive an array with the keys you want to "travel" on object
I'll second that. Pick up `ramda` or `lodash/fp` and learn about function composition.
Nice, but you can't easily specify parameters, say: _(obj). chain(x =&gt; x.filter(({ blah }, key) =&gt; blah) .mapObject(({blah }, key) =&gt; ({ val: `${key}.${blah}` }) .flatten()) 
Have you looked at Ramda? I find it vastly superior to Underscore for function composition. 
Yeah, but we're stuck with underscore on this project...
Looks like d3.js to me
Feel free to drop in. Sometimes people get stuck on a concept, and maybe you can help them explain it? Or maybe you can help mentor someone when the inevitable "What should I do next" question comes up. More people = more fun! 
The schedule is currently two chapters a week (this week chapters 4 and 5) but feel free to go on your own pace.
I literally lol'd at this
you only have 1 object in your Array, and that object has 2 additional objects within it (ssm &amp; notSSM). Here is your current structure: globalDiskSpaceParameters[0].ssm.Test.... value2 globalDiskSpaceParameters[0].ssm.Test1...... Value2 globalDiskSpaceParameters[0].notSSM.Testing..... value3 globalDiskSpaceParameters[0].notSSM.Testing1..... value4 
Good, I'm glad you found the humor in it. Now weep, for it is not just funny but also true.
Ah, I see. I presume you want the output collated. If so, how? One of these, maybe? getData(obj) = // [ 'mountain bike', 'ball', 'art' ] // just values // [ 'type', 'juggle', 'painting' ] // just key names // { type: 'mountain bike', juggle: 'ball', painting :'art' } // both // { 'cycle.type': 'mountain bike', juggle: 'ball', painting :'art' } // both, include path // [ ['cycle.type', 'mountain bike'], ['juggle', 'ball'], ['painting', 'art' ] ] // both, include path, use arrays rather than object I'd suggest something like the last two, as you can keep the full information. In that case, I'd use a reducer: const descend = (cont, obj, path=[]) =&gt; { // could use Object.values in new environments, or library function like _.each Object.keys(obj).forEach(k =&gt; { const val = obj[k], newPath = [ ...path, k ]; if (typeof val === 'string') Object.assign(cont, { [newPath.join('.')]: val }); else descend(cont, val, newPath); }); return cont; }, getData = ({ skills }) =&gt; skills.reduce((o, skill) =&gt; descend(o, skill), {}); ills.reduce((o, skill) =&gt; descend(o, skill), {}); getData(obj) // ​​​​​{ 'cycle.type': 'mountain bike',​​​​​ // juggle: 'ball',​​​​​ //​​​​​ painting: 'art' }​​​​​
You would be better off trying to mine in a shader via WebGL, rather than doing in it JS. A quick google produced this: https://bitcointalk.org/index.php?topic=27056.0
Just a general question but were there any unexpected vulnerabilities discovered through developing these tools? I haven't taken a look into the code but from the descriptions of the limitations with iframes and cross-domain windows it seems like your having to hack around the barriers and venture into unsettled territory.
Your search term would be web sockets. In the js world socketio or a lib called "ws" could get you started well!
I've been stuck for hours and finally, I can now use my array values as much as I wanted. Thanks a lot for helping me. :)
Uhm, it seems like you need an account to read whatever is in that page.
In the future you might consider posting to this related sub-reddit /r/LearnJavascript glhf
jQuery [oddysey](https://github.com/abcnews/odyssey) [odyssey-scrollyteller](https://github.com/abcnews/odyssey-scrollyteller) [jQuery Viewport](https://github.com/tuupola/jquery_viewport) - could be dependency of [D3](https://github.com/d3) [jQuery Cookie](https://github.com/carhartl/jquery-cookie)
Install the extension « wappalyser ». It tells all the livrairies a site uses
&gt; Hey look, Facebook's engineers find the difference between walled garden and open web confusing too! FTFY
xD
I was thinking of writing something similar the other day actually
[removed]
working your own side project with technologies you are interested in
You can using lodash/fp curried functions: flow( filter(({ blah }) =&gt; blah), mapObject(({ blah }, key) =&gt; ({ val: `${key}.${blah}` })), flatten )
Nice
There's a few i18n libs that weren't mentioned. We have a neat blog post about localization in JavaScript that mentions two that the OP didn't: https://phraseapp.com/blog/posts/step-step-guide-javascript-localization/ (disclosure: I work for PhraseApp)
I just started a junior position and feel like this everyday. Thanks for this post
All, I haven't had time to fully dig in, but it appears that reddit may have shadowbanned `coinhive.com` URL's -- it's fine if you post it as text, but if you link it to the actual site than your comment will be spammed (and even manually approving it doesn't appear to let it through). So if you link to the site, then your comment isn't going to show up. Just use the address and prevent it from linking.
If its just composition can't we do it using something like this? const compose = (...args) =&gt; { return function (x) { return args.reduceRight((acc, val) =&gt; { return val(acc); }, x); }; };
^^^ /u/rezoner, /u/physics4life
^^^ /u/cruyff8, /u/Comforse
Sounds like you're looking for something to do translation management for you. Take a look here: https://phraseapp.com/blog/posts/step-step-guide-javascript-localization/ (disclosure: I work there)
On a related note, what about the trail on [this one](https://www.canva.com/)? (Desktop only.) (Didn't want to make a separate thread for this.)
I really liked this one: https://www.amazon.com/JavaScript-Absolute-Beginners-Kirupa-Chinnathambi/dp/0789758067 I came from a "dabbler" background where I'd download scripts and tweak as needed, not really knowing what I truly did. This book finally enlightened me on the DOM and how things work. If your book doesn't do you right, then check out that one.
It depends on how you are finding the content. If you enjoy the book keep reading it. Otherwise you can take a look at this list for alternatives: https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books.md#javascript
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [EbookFoundation/free-programming-books/.../**free-programming-books.md#javascript** (master → 7b332f6)](https://github.com/EbookFoundation/free-programming-books/blob/7b332f6e765fd00086f76582f62a386c550901ff/free-programming-books.md#javascript) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
you can but ramda has some baked in optimizations. doesn't really matter tho
Try using React with "this"
I guess it's a good thing I decided to link to the GitHub repo on a whim instead of their website...
It's perfectly possible to use React with little or no use of "this". https://hackernoon.com/react-stateless-functional-components-nine-wins-you-might-have-overlooked-997b0d933dbc I vastly prefer functional style React components to classes. Yes if you need the lifecycle methods you need to convert to a class and start using "this" but that shouldn't be necessary the majority of your components.
Ah, true. I think it's literally just a facebook account you need though. Sometimes you don't notice such things because they always have a cookie set. Apologies. Bug report copied here: &gt; The Javascript SDK uses JS only supported since mid-2016 in Chrome and late 2016 in Firefox. This is the error older browsers would see: &gt; &gt; TypeError: F.forEach is not a function &gt; Stack trace: &gt; w@https://connect.facebook.net/signals/config/102029836881428?v=2.7.23%3A23%3A9276 &gt; aa@https://connect.facebook.net/signals/config/102029836881428?v=2.7.23%3A23%3A9520 &gt; r@https://connect.facebook.net/signals/config/102029836881428?v=2.7.23%3A23%3A10575 &gt; e.exports&lt;/&lt;/&lt;@https://connect.facebook.net/signals/config/102029836881428?v=2.7.23%3A23%3A11058 &gt; it/&lt;@thefilelocationofourminifiedjs.js:1:9561 &gt; &gt; NodeList.forEach is only supported as of Firefox 50: https://developer.mozilla.org/en-US/Firefox/Releases/50#DOM: "The interface NodeList are now iterable and the methods forEach(), values(), NodeList.entries() and NodeList.keys() are now available (bug 1290636)." &gt; &gt; This breaks Facebook connect for older users. We've worked around this by using a polyfill for those methods, but the problem still affects all other sites. &gt; &gt; We started noticing the change around 10/13 ~8 AM (broke Selenium tests that use an older browser). Basically their developer API scripts are throwing errors in a massive number of order browsers that are still widely used (including all versions of IE). Our error rate has jumped from 2% -&gt; 10% or so.
ok thanks ill check them out
It's like Canada doesn't even exist. 
Didn't it get nuked in 1943?
Well, i currently work in healthcare and have no idea what kind of file that is. The jobs are in the high innovation sub-sector of new products vs. integration and maintenence of existing systems. And if youre doing greenfield, you need to know enough node or java, js/typescript and enough frontend (js/android/ios) to communicate or fill in where necessary. Have you worked much in agile ground-up projects, or is most of your work taking the giant parsing problem nobody else wants to tackle? Can you design and build a whole application (backend/fe/database) from the ground up? 
Yeah, as long as your parents pay your electricity bill.
This feels unnatural on a trackpad.
Yeah, actually I wrote the same query on this sub-reddit. Thanks for the advice :)
I just saw that article earlier and was wondering the same thing 
You may search packages on npm ... like this one 'request' : https://www.npmjs.com/package/request
Nope. 
Just started to work on UI/UI backend acceptance tests with Puppeteer and it's absolutely fantastic. The speed of running headless coupled with the ability to run a windowed browser instance and set delays to watch the tests run is perfect. To echo the sentiment of the post, it contains many benefits of Selenium without the hassles. (Selenium is still going to be better for multi-browser testing). I've started using ES classes to make little Page containers for writing tests (kind of like : import { Page } from './page'; export default class DashboardPage extends Page { async searchForRequest({ name, value }) { const page = await this.openPage('/'); const { keyboard } = page; await page.click('.Select-clear'); await page.click('.Select-placeholder'); await keyboard.type(name); await keyboard.press('Enter'); await page.click('.Select-option.is-focused'); await keyboard.type(value); await page.click('.Select-option.is-focused'); await keyboard.press('Enter'); await keyboard.press('Enter'); } } I record all backend requests via Nock so it behaves pretty much identical to the last recording run. This article talks about using Faker data, which I may start using for any endpoints containing sensitive information. Probably won't for most of the APIs since I want to test the app with realistic data.
Sounds like your looking for a framework? It would provide (some) guidance on structuring your app. The good and bad is that there are many, many, many options. If you're new to this landscape you may want to consider React (wildly popular). I mostly use MithrilJs which is pretty small and easy to get started.
This is indeed in the realm of possibilities depending specifically on how the information you desire materializes on the website. The scheduling part could be done with cron (linux based system) or scheduled task (windows based system). Have that schedule opertaion kick off your "program" that extracts the village points and writes it to a database on the desired reoccurring schedule.
I still think Ember.js with Ember CLI is the best offering out there for new team projects trying to get up and running as fast as possible. The speed at which I can setup a project, get basic application styling, routing and templates in place is much higher than I've found I've been able to do with Angular, or some of the React and Vue CLI or project templates. I definitely agree about typescript, it would be a huge bonus for Ember, but lots of linting and ES6 has been nice. I've never been in love with handlebars, especially having used React with JSX more recently, but it handles itself well.
Nice to hear. I already use python scripts and cron successfully on my linux server so that should not be a problem. I guess now the real question is indeed *how* the values I want extracted are really saved in the browser game. All I know so far is that the game is part PHP part javascript and a little bit of some other things but those two are the main parts that are probably relevant. Do you maybe know which subreddit or user I should specifically seek advise from? Also thanks for the information so far, it is helping, really!
I’m excited for the new Glimmer changes to merge into Ember. They haven’t gone to JSX, but are using angle brackets for components, and curly braces for data, which is the only change I really want from handlebars. 
Because prototype needs to die I give you "Extend()" var Person = function(){ //Use this to inherit classes Extend(this,Person_Job); this.firstName = ''; this.lastName = ''; } var Person_Job = function() { this.jobTitle = ''; } function Extend(child, parent) { if (is_function(parent)) { parent.call(child); } else { for (var i in parent) { child[i] = parent[i]; } } } var myPerson = new Person() var myPerson.firstName = 'john'; var myPerson.lastName = 'smith'; var myPerson.jobTitle = 'Programmer'; 
i've just started to look at react actually, but also open to other things. i'm ideally looking for something i can jump right into
The button at the target location probably doesn't have what you are hoping for assigned to its click event.
Ok so I don't know if this may help you or others to answer my questions but apparently, tribalwars is built in PHP back end, with javascript front end. So I guess maybe /r/PHP might be were I should be headed.
[removed]
So I just did like a B- level performance on a really simple coding interview (have a fever which didn’t help and recruiter screwed up by saying tech interview would be next week), and I could tell this kid was like “this guy is an idiot...” but you know what? I don’t care. Because I’m going to do 100 more and keep learning until I get it right. I refuse to be beaten by this nonsense, this broken vetting process, because I really like coding. 
IMHO, options 1 and 3 should be fine. I work for a... rather large company, and my team just hired someone for React development who had never used it as part of a team before. He had some small projects up on GitHub so we could see what his code looks like, he aced technical questions, and he seemed pretty smart and eager to get started. I'm looking forward to working with him.
Hi, I have been through a similar experience. I have frequently been the best dev in some terrible companies. This was how I started my career and it continued. I could never get the jobs that seemed like a step up, because all my existing work was in bad companies with bad tech and uninterested in anything new. Also, when interviewing with these companies which were one step up, they in turn seemed terrible at interviewing. Do you know some obscure piece of knowledge about angular? No? See ya later. The way I ultimately cracked this was to apply for the best companies where I live. I live in a smaller part of the world and we don't have Google etc. I'm talking about the local companies that are highly successful, but not so large and advanced that you DO need to already be an AMAZING dev eg. Google ;) So it turns out that successful medium to large companies generally cannot hire enough people. My current company is one such. We have 32 open mostly dev roles that we cannot fill. This is because the number of devs that are not dickheads and are decent (NOT amazing) is apparently very low. The way we interview involves no esoteric questions. You just get a simple problem and need to architect an OK solution. Companies like ours won't be age/gender/etc biased because we can't afford to be. Also when a company is highly successful it has the luxury of focusing on things like diversity, so difference is actually a plus. In short, aim higher. Apply for good tech companies in your area that look for good devs, not people who have X number of year experience in some technology and know obscure things about it. Cheers
For more articles, check out https://medium.com/gitconnected
In the code provided you do not appear to be calling `printCurrencyMessage` on `convertedCurrency` after it is calculated.
You are working off some assumptions. &gt; First thing I noticed is that "the obsolete JS old timer" is now a thing. Around a bunch of youngster newbs.... absolutely. I have been doing web work for 20 years. I have noticed an interesting phenomenon. With all this experience a love for talking about code best practices interviewing is generally easy and wonderful. I have crap tons of experience with edge cases and niche skills in a field where the average job candidate is grossly incompetent or incredibly young. This makes getting jobs easy. What comes next is meeting and working with your new teammates who likely don't have equivalent experience. In some cases you may have started working before some of your teammates were born. Odds are they have never heard the term *DOM* and cannot imagine a world without jQuery. In this case you need to demonstrate and qualify best practices. Don't cave into popular stupidity because newbs need too much hand holding. Grow a backbone and set the proper example. &gt; Now the default setting is that if you've been doing it so long you are probably obsolete. In the eyes of youngsters... perhaps, but otherwise absolutely not. In web technologies almost nothing ever dies. Nearly all the ancient standards remain relevant. For people who cannot be bothered with technology because they live in imposter syndrome fear hiding behind the abstractions of their favorite framework the actual technologies are a scary mystery. Vanilla JS to many such developers is occult satanism blasphemy, because they need the abstractions to justify their existence and are fearful that they may be exposed for being not quite the expert they claim to be. Again, grow a backbone and double down on best practices. I have been doing this long enough to know that people can come up with all kinds of creative bullshit to justify doing stupid things. At the end the of the day the argument that always wins in technology is product quality. If your position means a less discriminating product with fewer defects creeping into production while executing 10x faster you win. This is particularly true if the opposing argument is some bullshit that boils down to something equivalent to *its too hard*. &gt; In interviews where I got past the first hurdle If you are truly a senior developer old-timer interviews are simple and often pleasant. If you are getting destroyed because you are not fully invested in a framework you aren't likely applying for a senior position. Perhaps the position is labeled as such in the job posting, but once you get hired you will still be a senior in title only. Frameworks are application trends that come and go. Being fully invested in the best code style for articulating a module in your pet framework is a newb thing. Instead double down on things like code architecture, modularity, distribution, encapsulation, and so forth. How to write code and other holy war topics are for beginners. Code theory, making practical decisions, and automation are more senior topics, because knowledge of the newb topics are silently implied. Even if the interview is asking all very beginner level questions you can still supply senior level answers and direct the conversation into something more challenging. This is part of what makes interviewing fun. &gt; My thoughts so far on what my options are: * Never lie. Be extremely honest. If you are not a good fit then don't force yourself into the organization where you will ultimately be miserable. A couple years ago I would start the interview by saying I don't like jQuery (back when jQuery was a universal religion). This would often shock the interviewer, but it never stopped me from getting a job. * If you are not into open source I recommend getting into it. It forces exposure to challenges you will never see in the day job. It also makes you very exposed so that everybody sees how hardworking and personable you are (or consequently how much of a toxic asshole you are). * Open source contributions can be anything from reporting defects, to helping manage issue lists, contributing fixes, or answer questions. Don't create open source projects for any other reason than to solve a problem that you have personally. Odds are many other people have that same problem and would love to help you out. * Yes, go to meetups, but only because you are trying to meet like minded people and talk about code. I don't go very often because I have kids and commute an hour to work. Meetups also give you an opportunity to talk about code in front of people, like a symposium which is huge for boosting your confidence and getting good feedback. --- Just remember that half of working at a job is working with people. If you want to be a senior than **be** a senior. Take responsibility even when it isn't gifted to you and try to mentor the developers around you. Share educational materials with people and write guides to make the basics easier to understand for mere mortals. Identify gaps and help people to fill those gaps with valid solutions, like accessibility and how to improve React modules to be more accessible and semantic.
Your code formatted for clarity: 'use strict'; let money = Number(prompt("How much money do you have?.")), moneyCurrency = prompt("What currency are you using?."), currencysys = prompt("What currency do you want to convert it to? EUR, JPY, GBP, USD, or BRL"), convertedCurrency = convertCurrency(money, currencysys); function convertCurrency(currency, currencySystem) { if (currencySystem === 'JPY' || currencySystem === 'jpy') { return convertJPYtoUSD(currency); } if (currencySystem === 'Eur' || currencySystem === 'eur') { return convertEurtoUSD(currency); } if (currencySystem === 'GBP' || currencySystem === 'gbp') { return convertGBPtoUSD(currency); } if (currencySystem === 'BRL' || currencySystem === 'brl') { return convertBRLtoUSD(currency); } function convertJPYtoUSD(JPY) { return (JPY * 0.91); } function printCurrencyMessage(convertedCurrency, currencysys, round) { if (round === undefined || isNaN(Number(round))) { round = 0; } } console.log("The converted currency is " + currencySystem + "."); }
Truth be told, if you came into a job, said you work with x, y &amp; z and actually can demonstrate you have that experience, then there's no problem telling a little white lie and saying you use it but in actuality you just know it. If you came into a job and kicked absolute ass then told your employer 3 years later: "I have to admit, I didn't know this when I came in on the job... but I knew I could learn it fast so I said my company used it" they wouldn't really be mad, they would be happy. I cut my teeth on this earlier in my career with employers asking if I worked with certain stuff as the litmus whether they should hire me or not, and I would just learn each thing in a couple of days easily. Most employers criteria for hiring is more of a "what do you know" rather than what you can learn easily which is a shame. When you play in the job application game, both the employer and the applicant both play this game. You see this with companies asking for 4-5+ years React / Redux experience when those technologies have barely been out that long
All I see is jQuery on that page and it's obvious that the animations weren't just done with jQuery.
&gt; "I have not enough React experience" and that's that. Sounds like you've been talking to people who just want a cheap code monkey. Look for different role names and different company sizes and put more soft skills on your resume/linkedin (i.e. leadership experience)
Sounds good, thanks &gt; Do you know some obscure piece of knowledge about angular? No? See ya later. I know the feeling - when interviewing for the current job I've had someone asking me a variation of the old `++[[]][+[]]+[+[]]` - I mean it's doable once you know the trick, but what's the bloody point?? 
Sounds good
Yeah the webdevs at the ABC are top notch. Really impressive.
Just Right-click in the browser where the "village points" are and there should be a dialog from the browser to "inspect" or "view source". If you have some kind of html element then that would probably lead you down the path of just "scraping" for that value. 
Lol, I'm nearly certain they didn't use my scrollyteller lib since I hacked on it for a week and never finished it.
Cool, thanks for sharing :)
A nice library that provides this on your own server is FeathersJs. It's like Firebase but you can host it yourself. Another could be Sailsjs
I started reading but the guy gave no reason for me to continue. Ok, you're a random nerd who thinks you're smarter than Facebook's architects ... why should I care what you have to think. Tell me you wrote five books on software architecture, or you were the head of some major app and you transitioned it from Flux to MVC, or that you conducted a study on MVC vs. Flux, or *something*. If you're just a nerd with an opinion your blog better be entertaining right away from the start or else it better justify why your opinions are more relevant than everyone else's.
In my experience that site doesn't work well for news graphics because there's usually so much cruft on the page from cms scripts that get picked up instead.
follow every word of this legend!
Here is the repo for the article: https://github.com/abcnews/north-korea-missile-map 
Hijacking top comment, here is the repo for the article: https://github.com/abcnews/north-korea-missile-map
This may be the dumbest comment I’ve read all month. And I am on Reddit
&gt; JavaScript is in fact a compiled language instead of a "dynamic" or "interpreted" language, like it is described most of the times. ... Remember that since JavaScript is compiled, its Engine first compiles code before it executes, spliting up statements like var a = 2; (VariableDeclaration) into two separate steps? You're describing hoisting, which is not nearly the same thing as compiling. JavaScript is not a compiled language. &gt; Unlike Java or other languages that implement the class/inheritance pattern, JavaScript implements prototypal inheritance. Unlike Java -- sure. But unlike other languages such as Python or Ruby -- nope. In both Python and Ruby, a class is itself an object (a building, not a blueprint), and inheritance is done by delegating down a chain of objects, from instance to class object to superclass object and so on. Just like in JavaScript. &gt; One way you can apply everything about objects and this is to use composition ... Object.assign( ... Mixing objects with `Object.assign` is *not* composition. I see you cited MPJ, but it turns out [MPJ got composition completely wrong](https://www.reddit.com/r/programming/comments/5dxq6i/composition_over_inheritance/da8bplv/), and actual composition never once made an appearance in his video. I see you also cited Eric Elliott, so here's the obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/3x91ac/why_not_to_hire_people_who_like_es6_classes/cy2o6zj/)^3 from Eric Elliott.
"this guy is the guy doing all the fucking, am I right? "
Yeah, realistically you want to wait till a proposal is stage 3+ to be on the mostly-safe side. `Object.observe` was stage 2.
querySelector = (s, c = document) =&gt; Array.from(c.querySelector)
Same here, at this point in time I pretty much instinctively wrap an Array.from around any NodeList that I encounter nowadays. While knowing the operations that can be performed on a NodeList are different than what can be done on an Array, I've never encountered a situation where I couldn't do something with an Array of Nodes vs a NodeList.
Great stuff ABC devs, and trust me - the devs and designers based in Sydney and Brisbane working for your evil competition are just not capable of producing stuff like this. They were, but then I left. :D ;) 
Yes, unless you specify otherwise, React will be bundled alongside your code. You can use [externals](https://webpack.js.org/guides/author-libraries/) in webpack to avoid that. I'd suggest looking on GitHub at the sources of other React component libraries for reference to see exactly what they're doing.
So you'll just read any article by any idiot blindly without caring whether the author knows what they are talking about or not? Good for you I guess ...
Know one knows what they are talking about. 
Format your code properly if you want others to read it. In your second example, `outer` has not been defined yet when you call `addEventListener()`, so it's equivalent to this: document.addEventListener("DOMContentLoaded", undefined, false); You aren't passing the function object as the callback parameter, you're passing `undefined`. As a side note, if you had defined the functions using function declarations instead of function expressions, it would have worked, due to function declarations being hoisted. 
Heh, touche. Still, I highly doubt you're reading every JS blog post, which implies that you're filtering them somehow. Presumably you skip the ones that really don't know what they're talking about, and prioritize the ones that at least seem to have some clue what they're talking about?
&gt; Selenium is still going to be better for multi-browser testing This is what I don't understand. Any production app will be multi-browser.. and I need my tests to work for multi-browsers.. so when would you ever use this for testing besides small side projects where you don't care?
to clarify, you would do function outer(){//whatever}} and function inner(){//whatever}} instead of var outer = function(){//whatever} and var inner = function(){//whatever}
Your arguments are basically appeals to authority and appeals to accomplishment. Judge content by what it actually has to say, not by it's author.
I work full time on a similar cross-domain API. Don't evaluate code or add unescaped markup to your document that has been passed through the PostMessage bridge. Whitelist the domains you expect messages from and check against the source origin. Here's a good lunchtime read on the subject https://labs.detectify.com/2017/02/28/hacking-slack-using-postmessage-and-websocket-reconnect-to-steal-your-precious-token/
Or just do the latter prior to where the functions are first called.
Yeah thanks, I just figured it out. I actually don't think its that it hadn't been defined yet. I think it is because I was making the functions variables. I should have just made them functions. Like: function myFunc(){ } Instead of: var myFunc = function(){ }
Yeah thanks, this was it.
Because most modern browsers behave 99% the same and ui integration testing is at the top of the testing pyramid. Its strength is that it is easy to get up and running and easy to debug. 
1944
The cleanest dropdown solution uses no js at all. It uses a couple of css styles hooked to either checkboxes or radio buttons, and some interesting targeted pseudoselectors in css. http://dabblet.com/gist/1507175
The difference between the two is that a function declaration is hoisted, whereas a function expression used with an assignment statement is not. It has nothing to do with "variables". They are both variables. 
Hi /u/Javascript2017, For javascript help, please visit /r/LearnJavascript. Thank you!
Dude, just do #2. How do you get React expereince on the job without getting a job doing React? It's not just a few companies, it's a lot of companies. And despite your experience, if you say you haven't worked ina professional setting with React, they're going to use that as an opportunity to lowball you. Otherwise, even if you get offered a position doing React, you'll be paid less than a person who has used it professionally before. I think that's BS because the react library is easy as shit to learn. And if youve done shit on your own and have some project up on github for show, you're ahead of 50% of the competition. The interview process is mostly BS anyways. I'm an average to above average coder with very good soft skills and a terrible work ethic. 
Thanks, never heard of "hoisted" before but I now know what you mean.
I do AngularJS and have had no problem landing a job. You're simply not looking in the right places.
Socket io
Good functionality it definitely runs smooth, but it also might be because the ui is lacking in terms of how the modern ui is now a days. Updating ui would make the whole page look much better! But great code work. 
Excellent — this looks extremely attractive, moreso than [intern](https://github.com/theintern/intern) for which I have previous experience, which itself is built on Selenium
While it's Ember-focused, and I currently use Ember myself, this part struck me as hyperbole: &gt; how many times Angular backwards-incompatibly reinvented and renamed itself One - Angular reinvented itself 1 time
Luckily I've been working on internal applications and only support Chrome. If I were writing a multi-browser app, I would probably not use this. I could see it eventually working with other browsers tho.
Legal teams at enterprises care too. Anything I use must be approved. At least it is a pretty harmless process.
"Extraordinary claims require extraordinary evidence." ― Carl Sagan
Exploring JS and then You Don't Know JS. Modular JS seems too ES6 focused Nd Eloquent JS is very remedial.
Then they definitely stole your name :D
Talent is hard to come by. Talent scouts are just as difficult to find, wouldn't you say? &gt; "I have not enough React experience" and that's that. I don't buy it for a second They're either simply correct, and you don't have enough basic react experience, Or you should have convinced them that the detail is trivial; that your broad skillset transcends that which deserves to be found at the end of a google search &gt; 1. Don't read too much into it, it was just a few companies, they all sounded similar because they were all the same type of company (startups gone big). Maybe spend more time targeting different types of companies Perhaps they weren't a fit for you, or perhaps they were ineffective talent scouts. You're in the only position which can judge this, so you must do it honestly. Remain diligent to their needs, strengths, and limitations as an employer. Know that in order to bridge the gap, you may have to compensate for their shortcomings as a talent scout by making your competence, experience, and most importantly, your *direct value*, abundantly obvious. &gt; 2. Just lie. Yes, we use React on every project (who's going to check?), we use to CI and publish to production, etc *Stop it.* &gt; 3. Open source my own React libraries / projects to gain those "React expert" brownie points Absolutely. When you're looking for employment, your github profile page should be a living exemplification of your own idealistic interpretation of perfection in software development best practices Demonstrate that you know the skills which are in demand. Create a react project on github. Host it with github pages. Establish a CI pipeline with Travis. &gt; 4. On the same vein, go to meetups, get more involved "in the scene" to gain some visibility Given the proliferation of this kind of knowledge, places like here on reddit, I think those meetup events are probably a waste of time, which is my primary reason for having never attended one personally (so who am I to say) &gt; 5. Contribute to some existing React based project Now this is the right track. Most importantly, respect the fact that among the continual turbulence of the javascript ecosystem, the "framework de jour" phenomenon if you will — genuine progress really is made, and it is possible to be left behind
```import('./Home/Home').then(module =&gt; module.default)``` You can use ```await``` to cut this down to ```await import('./Home/Home)```. 
You need to look into ```await/async```. By the end of it you could do something like this: ```const [lib1, lib2] = await Promise.all([import('lib1'), import('lib2')])```
Yikes! I'd refuse to manually manage anything like that, sounds nightmarish I use something like [browserify](http://browserify.org/) or [rollup](https://rollupjs.org/) to bundle up my scripts into a single file, automatically skipping any dead unused code If you used one of these tools to bundle your scripts (go with browserify, it's easier, and ideal for working with npm), then there's no more unused code slowing you down
You can make a simple pipe function (like ramda has). That's what I tend to do. Then call it like so: const thing = pipe([ function1, function2, function3 ], data)
Yes, there's a good possibility that the consumer project might run your npm package's code through their own minifier. For this reason, I don't minify my npm package code, I leave it up to the consumer to decide whether they want the code minified. Sometimes it can be immensely useful to be able to effectively debug code in an npm module, when it's author kind left the code unminified
I'll add, that I think it's still considered polite to expose ES5 code in npm packages You can be cutting edge and provide ES6+ code, and expect your consumers to transpile it too, but that's slightly more aggressive than the minification issue
Thanks, now I have a bookmarklet that's called "I did!"
Start learning the latest stuff. Write well thought out articles and blog posts on what you learn about. Screencast and live code. Continuously help others succeed and solve problems. It’s a simple formula regardless of age. 
I am a huge fan of You don’t know JS. Starting with up and going and move on to another book in the series. It’s surprisingly entertaining, and incredibly informative to the point where I only had to read them once. I also recommend Kyle Simpson’s and Brian Holt’s courses on frontendmasters.com. Those guys are doing some good things 
[removed]
But I don't want to rollup everything into one single file. Thats the whole point of code splitting right? I don't want to send js to the browser unless it is needed. Less code, less script execution faster the app loads.
thanks
It's difficult find out what every troll would find entertaining.
lol thanks
I don't agree with /r/ghostfacedcoder , but that doesn't mean you can't also be wrong. It's not an appeal to authority fallacy for them to say they'd not bothered to read an article because they didn't know the author or what achievements they'd made. Time's a finite resource, and it's reasonable to spend more of your time reading reputable authors. You can't possibly read all the content on every blog everywhere and judge it. That said, complaining about your time being too valuable for this author's work, then leaving a long comment about it on reddit, is dumb. 
Exploring and Eloquent gets my vote. 
&gt; Ok, you're a random nerd who thinks &gt; you're smarter than Facebook's architects . I think Xerox guys who invented MVC back in 70's were/are a lot smarter than bunch of twenty-somethings from Facebook. Back in time "Facebook architects" showed than they couldn't do proper MVC in the first place (they became massively criticized by JS community: https://www.reddit.com/r/programming/comments/25nrb5/facebook_mvc_does_not_scale_use_flux_instead/ ). But they managed to push Flux (which is no very different than MVC actually) just because they were from Facebook and many people thought "this must be smart!" But this is all meta-discussion (started by @ghostfacedcoder ). I personally think that both approaches can be worth attention (although both are similar, in Flux there is more emphasize on data-flow, in MVC there is more emphasize on separation of concerns. Besides there are articles which compare MVC vs. Flux side by side: http://voidcanvas.com/flux-vs-mvc/ ).
The writer does not owe you anything and you are entitled to nothing. Furthermore, it is fallacious to think someone's opinion only matters if he, as a person, has some externally validated authority. Experts look at the contents and merits of a proposition, fools look at the experts.
[removed]
I don't know if this is an unpopular opinion but here it is: I think it's better to just use something that handles 99% of the cases with low friction for devs and then handle final multibrowser manually in something like Browserstack. I've done Selenium on Browserstack and frictionless is the last word I'd use to describe that. I don't want to think about running our own device lab.
Because most browser specific issues are CSS related and you can test it better through visual regression testing (with selenium)
I'm always been doubtful of the effectiveness of blogging. I mean it's ok if you are Addy Osmany, but at my level nobody really pays attention. 
Flux itself has been criticised before for essentially defining itself as "MVC not implemented poorly", which I see less as a criticism of flux and more a commentary on how nebulous a concept mvc really is. As far as the approach this author takes, it's definitely worth a good read since their code is well written and clear. In the context of this article, the difference between their MVC and flux is that they're calling controller methods directly instead of dispatching an action that the store subscribed to. Aside from that, components are still the V, and the getters on a store are more or less the M. Personally I'm often updating a few stores, and managing the order they wait for one another on each dispatch, so I like my flux. Seeing it written out in the article, I think both are fine, especially when nearly all my components are stateless anyway. I think the people who really struggle with MVC or flux are the ones managing a dozen different states from it. 
I've made some basic web applications (app that counts vowels for example) Nothing too special
You've basically summed it up neatly. A lot of developers pad their CV. You looked at React at your last employment (You did, you read an article about it once at the very least during lunch) so put it on the CV as React god. To counter what another commenter wrote, never be 100pc honest about anything without assessing the value to you in achieving your goals during the interview. The open source stuff is generally good. Don't necessarily expect anyone to look at the code, but if they do expect them to be pissed if they wasted their time. Also expect questions on it. Expect questions on anything in your CV. The best way to learn is to do, so contributing to a react project may be good, but you might be better starting a new one so you can cover the bases you specifically want to know about. I'd say stop interviewing with dicks, but regardless of industry they get everywhere so you can't really filter them out. Don't worry about writing off a bad interview, don't let it get you down. Make notes as soon after as possible including anything you could and couldn't answer. Revise the coulnd't answer things, reinforce the could answer things. If you're at all squeamish about padding your cv a bit and feel absolute honesty is the best way. Get over it. The company will not be being honest with you. It will be the best place any developer will have ever worked using all the latest technologies in an environment where devs and business coexist in peaceful harmony. None of it will be on fire at all... The important thing is to ensure you can back up what you pad. Know the topic well. Good interviewers (points at self while cackling) can tell when you learned it from a book rather than know how to do it practically. Don't get flustered if you don't know the answer, and definitely don't get defensive and start asking why the hell I'd want to know that. Never answer a question you don't know the answer to with the answer from an unrelated question hoping to score points. Move on, ask for a clue, enjoy yourself as much as possible. The interview process is a game, unfortunately the rules are non standard so you have to be reactive (pun intended). Be positive and affirmative but empathetic too. Do ask why they are hiring, feel free to talk about turn over of staff, team make up, expected duties and so on. 
You can also use for-of instead. If you want an array, [...nodelist] is also an option. You won't need a polyfill for this. 