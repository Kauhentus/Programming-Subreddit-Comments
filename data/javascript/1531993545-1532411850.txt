Same for me. Might be super popular online or in dev talks and github, but in the end I encounter much more backbone or ember projects than vue.
What was their methodology for comiling the list? GitHub treats TypeScript as a separate language to JavaScript, and most Angular libraries are probably written in TypeScript.
“windowing”
Thanks! That helped me find the library I was looking for too :) https://github.com/bvaughn/react-virtualized
that's a great start, thanks!
you would need a regex. You can have a look at it (hard): https://regex101.com/. Or you can search on google for something that would work for you (easier, but you might not learn immediately why). You can do it with javascript, but I am not sure what is your endgoal so I don't know if you want a script to extract to another file (in which case you will need node to run it) or just do that in real time (in which case you could just run the script in the browser). This is an interesting challenge to start coding, and it spans multiple aspects. Be patient, good luck
You can build a great mobile commerce app with Mobigen. They have all the features you have listed above along with shipping API integration, Facebook messenger chatbot, Multiple payment portals, standalone website. Check it out - https://shopygen.com/mobile-commerce-app-builder/
Here are the most copied libraries from a popular CDN. [https://listium.com/@thomasdavis/16783/most-copied-libraries-on-cdnjscom](https://listium.com/@thomasdavis/16783/most-copied-libraries-on-cdnjscom) Angular is number two.
Yes, you're right, I just tested it. That's an interesting behaviour to keep in mind.
&gt; Where is this line gone Ops, I forgot it. Anyway that was not the problem. &gt; Just (async fn)().catch(console.error) should do the trick Yes, you're right, but it was just a quick test implementation
As long as there are not maps or camera interaction, I can recommend Flutter. It's easy to get started and produces x-platform native apps. Dart is not that dissimilar from JS
Github starts - the worst possible indicator.
But it's the most popular "JavaScript projects". How do they decide if a project is a JavaScript project or not? According to the color bar at the top of the Angular Github repo, the code in the repo is 89.5% TypeScript. Maybe it doesn't count as a JavaScript project using their methodology.
Also called infinite scroll virtualization.
Sorry, I replied tot he wrong comment. here is the problem we gave: Given 20 lines of simple JSON data of people, sort by id, filter by haircolour and return a new array with the full names (concatenation first and last name) So the simple solution was filter, sort, and map, but we were fine if ppl didn't use those functions. They just needed to solve the problem in a reasonable way.
Search npm for string parsing libraries. If nothing it will give you ideas for implementation
Don't feel bad. I never have any problems with it since Angular 2. Did you want me to React with a different Vue? Haha. I do plan to do more stuff with React, Vue, Ionic, and Xamarin... Let's play w some code!
Feel like the vanillajs example is a little disingenuous. You could still apply the concepts of a state container without relying on the header tag to maintain your score state. It’d also simplify your voting logic.
Is there a way to demonstrate unit testing as part of a portfolio project? 
The #1 is freeCodeCamp, which implies the numbers are mostly driven by people learning online. React and Vue are popular on forums, amongst newer developers. I thing Angular just appeals to a different fanbase.
Thanks for Sharing helpful Information.
As long as you don't render 3d stuff like games Cordova is good enough and easy to learn. Just try not to develop the UI yourself. Try using a framework for that like OnsenUI, Ionic etc. They will take ALOT of burden from your shoulders.
*crockford, *zakas
Not all libraries all equally likely to be loaded from a CDN rather than being installed from a package manager (or even copied in a project). Looking at npm ranks, Angular isn't doing particularly well at #39 while React is at #6. Neither looking at CDNJS or npm numbers alone is a good indicator of overall usage.
So, using Redux (or a more minimal state-container) or creating your own ad-hoc Redux-like state-container?
Thanks for posting this. Need to brush up on some of the newer JS techs and this is a great start!
People like to shit on Angular for various and mostly unknown reasons, but we use it in our company and we still love it, my boss definitly didn't want to start using React.
Even a simple object to maintain the state would be fine.
I teach Cordova to my students (College). They pick it up and build some great stuff pretty quickly. I have a playlist of tutorials on Cordova that I made and continue to add to. This may help you. https://www.youtube.com/watch?v=CDY1fRZycGk&amp;list=PLyuRouwmQCjkLnfGRHMosenaxPq9PqH0n
Thanks a lot for your answer! &gt; A static type system that automatically creates a runtime type schema which can be used for runtime validation Yes i think so too. &gt; A built-in type that encases the possibility of both `null` and `undefined` Any example? Usage? &gt; Instead of operator overloading, a macro system. Please write an example. My current implementation involves the definition of operators as ordinary methods. Here is an example of a working code: var Vector = { init : $(x, y) { this.x = x; this.y = y }, toString : $() { return "X: " + x + ", Y: " + y; }, "+" : $(vec) { return new Vector(x + vec.x, y + vec.y); }, "*" : $(val) { return new Vector(x * val, y * val); } }; var v1 = new Vector(100, 200); var v2 = new Vector(200, 400); var v3 = v1 + v2; print(v3.toString() + "\n"); var v4 = v1 * 5; print(v4.toString() + "\n"); &gt; Functions support weird names... Yes, done. &gt; Pattern matching Yes, I agree, it must be done. &gt; Tail-Call optimisation To be honest, I do not know how to implement it yet. It is so hard! &gt; Guard operator for null references Cool idea! &gt; A built-in primitive for coordination of concurrency... I have no ideas about syntax of actors ( &gt; A pipeline operator Yes yes yes, must be done! &gt; Built-in currying (with support for placeholders) Syntax?.. &gt; A cascade operator for getting/setting properties of variable neatly in a chain Please give one example! &gt;`try` / `catch` is valid inside an expression How should it look like?
[Like this?](https://i.gyazo.com/a202d5b349fb4fcb1c51b162af96d250.png) I don't see how it simplifies it much, in fact it's more verbose. The main problem is updating the view when the state changes.
ahscanner ("pet" project) - Service which sends email or browser notifications for defined queries on the World of Warcraft auction house. [website](https://ahscanner.bid) [repo](https://gitlab.com/wkrueger/auction-scan)
I was curious if you were on to something so I went to github and searched for angular. https://github.com/search?utf8=%E2%9C%93&amp;q=angular&amp;type= It isn't exactly what you thought. `Angular` is a Typescript project, but `Angular.js` is a Javascript project with 58K stars. Clearly it should be on the list if Github stars of Javascript projects were the sole marker.
The funny thing is that IRL reddit does this a much simpler way by "cheating". The HTML already contains a span with what the score will be if you upvote or downvote. The javascript just needs the change the class on the entry div. &lt;div class="entry unvoted"&gt; &lt;span class="score dislikes" title="7"&gt;7 points&lt;/span&gt; &lt;span class="score unvoted" title="8"&gt;8 points&lt;/span&gt; &lt;span class="score likes" title="9"&gt;9 points&lt;/span&gt; &lt;/div&gt;
Honestly, I thought s/he was being nice towards the Vanilla approach. Introducing a state container is a nice idea, but now you got two places (your container and the DOM) that you are manually responsible for keeping in sync. Going that route would quickly validate why a framework indeed does make sense, IMO.
You're spot on, but the pro-Angular crowd is upset ITT so you've been downvoted hard. I'm thinking this is a full on shitpost by OP.
Cordova feels tacky to me. I highly recommend React Native using Expo. Expo has a couple of nice API's that'll help you with that, it'll be a breeze.
It’s think it’s gains this week.
Personally I've had a bad experience with Cordova and wouldn't recommend it having built and maintained a large enough app a few years ago using [Ionic](https://ionicframework.com/) (built on Cordova). It runs like shit on mid-level phones and below. If you're app is actually simple, native is the way to go. If you really want a cross-platform solution [React Native](https://facebook.github.io/react-native/) is another option, although I haven't used it myself.
vue is similar to react? (student here)
&gt;One of the most common things I see in JavaScript code involves building strings like this: "so i better do something uncommon and unconventional in more lines with more variables, cause functional programming." it's fine to show this as an example of using `reduce` but when the language offers a way to do something conventionally (concatenating strings in loops has seen widespread use since the 60s), it's generally better to do that. this article doesn't say anything like that, and in fact makes it seem like using `reduce` to build a string is the common way to do things day-to-day for most developers.
Hi /u/TheNosferatu, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/el-calde, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Kimput, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/swellrider09, For javascript help, please visit /r/LearnJavascript. Thank you!
He talks about vanilla touching the DOM. Is he saying the others never touch the DOM?
edit: I found [https://www.firsttimersonly.com/](https://www.firsttimersonly.com/) but if anyone has other suggestions i will gladly take them! thanks
GitHub allows you to search globally by keywords and filter projects by language, that could be a great way for you to start exploring projects you’d like. Yes, that’s pretty much it — you can find and open issue, understand the problem, read the contribution guide (if there’s one), make a new branch with your changes, add test cases (highly recommended), and submit a pull request for review. I must say this though: finding open issues is not the only way to contribute, you can also get familiar with the project and submit any improvements you’d think would be good for the project. Good luck!
GitHub has a tag for Issues called "good first issue" that exists to allow amateur open source developers to dip their toes in the water.
What about CXJS? It's should be definitely on this list!
&gt; contribution guide this would usually be in the contribution.md file? what do you mean by add test cases? thanks!
How is this not 'The Sum of All Human Tech Knowledge'.
&gt; &gt; contribution guide &gt; this would usually be in the contribution.md file? Yes, but also look at feedback given on other requests (accepted, declined and commented on). &gt; what do you mean by add test cases? It's worth learning about JavaScript testing libraries if you're not familiar with this.
Saying that the vanilla js example is disingenuous is like saying that the surface of the sun is "warm". No one writes vanilla.js like that in the real world.
we haven't touched testing in the bootcamp yet (but will soon). however good to know in the meantime!
&gt;Both work fine, and one I know. I think that's your answer. One is easier to learn. It's the sort of thing where if you've previously invested all this time to learn Angular and have a background in OOP, you might not realize how unattractive it is to someone who is new. Angular is a monolith that requires a lot of buy-in. There are like 900 something API endpoints. It offers lots of duplicate ways to do things. The docs are super wordy. React is just simpler and more flexible. There's way less API. Less proprietary bells and whistles. A new programmer who is used to working with plain functions and modules probably won't see the utility in "dependency injection" or all the ng template syntax. You can write it off as "the cool thing to do", but even in the case of PHP, there are reasons new programmers don't like it. It can be hard to see if you're already very familiar with the tool.
They abstract away from the dom, *you* never touch it, the abstraction does. 
Is there a specific reason to not calculate the score in the view? Keep the base score unchanged and apply the vote to it in the view.
Hot damn, you're right. That's hilarious. 
You're going to ask a question that's not within the sum of all human tech knowledge?
InterviewMap is project name, because this name will attract more people. But if u read it, you will find that the content of this project is some of detailed knowledge point, not an answer to the interview question.
Find a project you want to support. Take a look at the issue list. Fork the repo, fix the issue and submit a pull request. If your code isn't shit and the maintainers accept it then done.
[approachable.io](https://approachable.io) is targeted at getting people comfortable with their first open source pull request. This is the getting started project repo: [https://github.com/approachable-io/getting-started](https://github.com/approachable-io/getting-started) It's meant for anyone, so that first one could be a little elementary if you've already been through a bootcamp. We also have a site with interview questions if you'd like to make a contribution with HTML: [https://github.com/approachable-io/software-interview-prep](https://github.com/approachable-io/software-interview-prep)
There is a fundamental wrong notion in this article. Not only this kind of functionality doesn't really need a SPA, it is completely unrelated to what makes a SPA a **single page** application (routing). Also, all these frameworks can be used without a SPA. There are cases were SPAs are justified, but a small voting functionality is really a really bad case for explaining or even arguing in favor or SPAs.
last link is perfect to get my feet wet. thank you!
Is... [d3js](https://d3js.org/)! (not even listed in the "article")
Yes. They’re both reactive to state changes 
The reduce version uses fewer lines and fewer variables.
The reduce version uses fewer lines and fewer variables.
There's plenty of Vue around in the UK though. I know of 3 large companies in Manchester that use it, one of which is Money Supermarket which I'd say is considerable. I know of a fair few agencies where it's often used too! You're right that React, at least, is much more popular though. 
D3 is depended on by a lot of these libraries. Ease-of-use is the reason it’s not listed on there.
Why don't you calculate both positive and negative values and then set the right one as label ? In a case like this it greatly simplifies the code (almost like the original reddit code). You do not want to care about the status of the arrows, you just reset them both and activate the one that has been clicked (or do nothing after resetting if clicked on the same arrow that was already active if you want... this is the only if that should be present). Maybe I overly simplifies things, but I hate writing code... I love deleting it :-) 
What are the caveats of ejecting create-react-app and using parcel js?
No but I am going to ask a question not on the map - making the value of the map limited.
Yes. I'm going to ask "What question could I ask that does not involve any data in the sum of all human tech knowledge?" It's a meta-question, something like what Google would ask. /s
These 'I give hard tech interview' stances are inherently pointless. Just get to know your candidate.
I want to ask a question that makes the candidate think to see how they solve a problem they haven’t rote learned the answer to. Because that’s what work involves.
Right. quoted directly from the article: "The difference is, our last example is 8 lines of code, and to make this in reduce, we can express it in a very clean and terse way, with zero local variables needed:"
Is Polymer still trying to be a thing?
I can really recommend Ionic Framework, it's utilizing cordova and angular. You write the apps with typescript, scss and html.
I'm using [amcharts](https://www.amcharts.com) for an year now. It's been really amazing. The look and feel looks great and it has got a well explained documentation. 
damn why is that hate? if don't like, don't use
the real question is should developers learn the DOM and write large applications without a framework before learning a framework? It's the same as "should people learn Rails or JEE before HTTP?", I know for a fact that a lot of people using big back-end frameworks don't understand basic HTTP, how many front-end developers know the DOM? Building a DOM builder is easy, building a virtual DOM with DOM diffing is a little tougher from scratch, and yes ideally there should be no need for framework X or Y or store Z. Maybe it's time to go back to stock MVC. ESnext added plenty of features that make actual vanilla DOM development painless.
vanilla DOM =/= vanillaJS . 
Because it's muddying the water for quality libraries. Also, I tried using it a couple of years ago and it was a painful waste of time and effort. 
they seriously improved it in version 3.0, I recommend you to check it
and true, it was waste of time and efford while ago, but now its neat, at least for me
Sadly, lots of people write vanilla JavaScript like that in the real world. Because they don't $%\^&amp; learn the fundamentals of vanilla JavaScript in the first place. It's like someone who says they "know JavaScript" when what they really meant is that they know jQuery. Or someone who says they're a vegetarian but all they post on social media is their pursuit of meat substitutes – they're not in the spirit of the thing. If that makes sense.
Hey so I wrote this article and 100% transparency - I'm a new writer. I do a lot of front-end work and I'm just trying to post relevant content. I had trouble when I started learning the functional methods within `Array.prototype`. I thought this would be useful to this sub. This seems to fit the subreddit's guidelines and it was downvoted into oblivion. If you downvoted, and don't mind sharing, could you tell me why? I just want to get better, and I'm sort of scratching my head here trying to figure out what went wrong.
Will check them out
If it takes off then it may push web standards forward and we'll get a native solution. So for that reason I'm all for this idea of Web components. One say libraries like React might mainly handle logic and leave presentation and styling to web components.
To me Angular &gt; 2 is a solution looking for a problem. An IoC container in a dynamic language makes absolutely no sense. It's complexity for the sake it. Angular &lt; 2 advantage is that it came with a good testing infrastructure and facilities, and at the time 2 way data binding was all at rage. This isn't the case anymore, it's not harder to set up automated tests for Vue or React apps with or without. On this aspect Angular lost its advantage. And anybody can use Typescript in place of JS with any framework. I was working on a drawing app and an ebook reader the other day, we dumped Angular as it added no value to an app that uses canvas or had to process .epub formats and display them in the browser. It just added a lot of boilerplate to do simple things such as displaying a list of books or a menu with 4 buttons... 
In my anecdotal experience, using the DOM as the ~~single~~ source of truth, as shown in the article, is extremely common in vanilla JS applications.
Wow! I’d love to contribute
&gt; should developers learn the DOM and write large applications without a framework YES. Always know the technology inside-out beneath the framework you use.
Say interview map one more time.
Then here's my point. Whatever issues anyone ever has with touching the DOM, those issues are still relevant with these frameworks. Far too often people talk about using vanilla JS as a problem cause you manipulate the DOM but the only difference is you go through the framework hoops to do the exact same thing. There is no advantage beyond thinking about it, which you only do once, but you have the advantage of not going through the hoops when you use vanilla js.
I'm going to first google keywords relevant for the widget and add the framework I'm using, in case there are widgets made especially for it. Next I will google those keywords with "npm", and finally with "javascript". It doesn't matter where I find the module, whether it's on StackOverflow, GitHub, has its own website etc. I will expect the module to be available through NPM. The project I'm working on will dictate whether it's ok for the module to be free or payed for, and what licensing terms it should have. I'm going to prefer a free, MIT module, of course. Say I found a module. I'm going to have a look at the README.md or the docs, if it has any. I need to get an idea of what features it has and how flexible it is. A "get started" example I can copy/paste and hit the ground running right after "npm install" will be a big help. The ultimate test will of course be actually using the thing. If I can start making progress right away and I can customize it to fit my needs, I'm going to keep on using it. If I hit a crucial missing feature, some errors, or can't figure out how to get it to do what I want, I'll stop and look for something else. Common sense stuff. I do mention particularly nice widgets to other people I work with, we have a slack channel for linking stuff like this, and we curate a wiki page with modules so that next time someone needs something similar they can look there first.
I think you don’t really understand the point of abstractions then. The whole point about you not having to “think about it” is the great advantage that keeps things manageable at larger scale.
a) Finding something for the sake of contributing to open source is a hard approach. The people I know who have contributed to open source either wrote a package cause they had some specialized knowledge in a field and a package didn't exist for it or was using some tool or library where they noticed a quick or got an error (like a single point of failure) and decided to open a pull request to fix these issues. Basically, I'm saying it's serendipitous in some sense and you should really contribute if you find something you can contribute too that helps you in whatever project/goal. b) You really want to keep things simple or if you have an insanely large idea, you should still break it down into small completeable steps. The most important skill is really articulating a problem you run into, so you can google it. Most projects should be within your scope. I don't really understand advanced math, I've never taken anything beyond calculus 1, but if I wanted to do something like build a pokedex kind of feature using machine learning, I could google "open source photo recognition", come across https://www.tensorflow.org/tutorials/images/image_recognition and get something done even if I may not understand all the complexity around it. It may never be production ready, but there should be very few projects beyond your reach. One step at a time 
Go start a tiny hello world project and install something like Mocha and follow a basic guide on TDD. Then add in a coverage tool like Istanbul and get your %s to 100 The earlier you start to associated testing your code's contracts with trusting it the better.
I agree and we do that as well. We do it by having a conversation with the candidate and talking about code from their experience. Then we, as interviewers, can craft something that is somewhat familiar but still a contrived situation and talk about how they would solve it. Or sometimes we talked about how they DID solve a problem.
Crafting a contrived problem for each candidate individually makes it very difficult to objectively rate candidates which lends itself to the ability for unconscious biases against irrelevant personal characteristics to be used instead of actual suitability 
Question about this one. I’ve seen this problem online before. The above solution was the first one I thought of. But my second answer was a while loop that compares the first and last letter in pairs that work their way inward. My thought process was it would work faster on longer inputs, but it didn’t look as “nice” as the above. Which answer would be better for a coding interview?
I did my first one by finding a browser incompatibility in a some code I was using for a larger project. Forked their code on GitHub, made my own bugfix branch, fixed the issue, submitted a pull request for that branch back to the original repo.
Not seeing anything on Babel X. Do you have a link for this?
I was confused like you when I was starting out and to be honest, I never really found anything despite the fact that I tried a lot of the links shared here. That does not mean you won't either, but just don't be bummed if you don't. Nowadays, I've been in the industry for a while and I contributed to some projects, how did I find them ? They are simply libraries that I use every day at my job, when I find something not working, that can be improved or added, I'll open an issue and write a PR. I am a member and contributor in a few libs now and I found this approach to be more organic.
I'm pretty magnanimous or otherwise indifferent to libraries I don't use, but people tend to be tribal in general which is why you see the hate.
Strong typing for all the types and libraries in the ecosystem would be extremely helpful to a beginner - perhaps even more so than to an advanced developer.
This is nice for starters, thanks alot :) 
Nice article
Stop asking dumbass pointless questions in interviews and we'll stop studying for them.
I realized polymer v3 is google version of react. syntax is too similar, almost same. but feels like requires even less work than react
Best way to do it since it won’t reflow the DOM.
Did they merge it?
Beginners don't appreciate that. I already said that. They see the error but they just think it's annoying. And it adds extra thing to be aware on top of learning computer programming. The benefit of learning python or javascript is that no type typing and you are destroying the first promise. 
Thank you, learned something new. Been using axios for a while, but had no idea about the post progress monitoring.
some people want their hands held and others want RAW POWER!
Well, and event handling, templating, lifecycle hooks, design patterns. Lots of reasons to use a SPA.
What exactly is a PR :o
It sounds super interesting. Apps like fx. Hipchat, Slack etc. are just wrapping their web app which is already working most browsers, so I think the “using the already installed browser” is just fine for most of the existing Electron apps. Pretty nice work! Any plans for macOS support?
Server or client side?
the answer is just one google search away 😁 https://www.html5rocks.com/en/tutorials/file/dndfiles/#toc-reading-files 
This is utter shit. Axios is better because it does more magic? Bro... how in the mother fuck is this related to graphql?
There's still a large portion of the world that's illiterate. Here's the part where I politely asked: &gt;No one’s perfect, so if you found any errors or would like to add enhancements, feel free to shoot me a message. I will be sure to include any enhancements and/or correct any issues. Also, GraphQL and RESTful applications require HTTP requests.
Yep, same day even. 
It's a bit of a contrived example, but I'd hope that most developers writing JavaScript would map over the array and then put that together with the other strings. It's definitely not a great use case for reduce, which just makes the intent harder to interpret. ``` const buds = ['James', 'Darien', 'Eric'] const greets = `Greetings friends! ${ buds.map(bud =&gt; `${bud} is my buddy.`).join(' ') } These are all of my buddies!` ```
I've built several apps in both Cordova and React-Native. Hands down Cordova is the better option. They both have all sorts of CLI/tooling issues, but Cordova isn't chalked full of frustrating platform-specific bugs like React-Native is. If you're not planning on supporting multiple platforms, you should probably just write it natively in Swift or Java/Kotlin.
FlapMap, heh
There's no need to abstract the dom, since the entire point of a website is to touch the dom. It's not like you're going to reuse your framework code on a non-dom ui. 
Do you mind if i use it to come up with some questions to interview people instead?
Interview
Map
I understand abstraction better than most. Manipulating the DOM isn't hard. Direct contact with anything will always be faster and better. Anyone can do it.
Working with the DOM isn't hard. Anyone can do it. Manipulating it directly also gives better understanding and control, something far too many people seem willing to give up.
Absolutely, not saying it isn’t, just saying it might not be the best way.
How would this be valuable to you?
One
I double dare you motherfucker! 
Don't get me wrong, I live react, but a simple class with getter and setter methods that update the DOM can be much easier for smaller projects and plenty maintainable.
Textbooks are cheaper than developers. I don't care if you get the right answer, I care how you try.
I wrote this because I don't like how safe object access libraries have used string-based getters. I really like the \`Maybe\`-monad approach to this problem, but also don't like the additional syntactic overhead that adds either. This library uses a Maybe monad under the hood, then uses the new ES6 proxy in order to allow you to wrap an object and access its properties without worry of running into errors. Encountering a nonetype (\`null\` or \`undefined\`) can still be handled however you like though by way of a \`Promise\`-like catch statement and an \`or\` keyword that can set a default for the chain easily.
You don't consider the full picture, it isn't just hard, it is almost impossible for a scaleable app. With the dom alone you don't have re-usable components, you don't have a mechanism that informs views of state changes, you don't have a mechanism that only informs the minimal set of views that should be changed, you don't schedule read/writes which causes layout-thrashing, and the list goes on. Eventually what you do is you hack together a bad React. This is what virtually all big "vanilla" js apps i've seen in the wild do, this is also what todo-mvc/vanilla does.
Just a note, it doesn't always have to be merged into the master to be a good contribution. There's a pull request for a transmission branch that'll never be merged because it's out of the scope of what transmission wants to be, but it provides features that a lot of people want (tagging and magnet links on their web client)
These frameworks make exactly that possible: https://twitter.com/0xca0a/status/1000513216672403456 If your component doesn't specifically rely on div's and span's it can be used everywhere. And there are even abstractions for these very div's and span's that would otherwise kill your x-platform efforts, react-native-web/dom for instance.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Yeah but it's not as mature so it still remains painful to use. I am currently using on my project, and it's fun and all, but I would not go to a bigger project with it.
A pull request
I thought it was fine and I actually added a reduce function to one of my programs after reading it and seeing where it would be applicable. I use map/filter/etc all the time but never really bothered with reduce bc it never clicked with me. If you look at all the stuff on /r/javascript downvoted to zero, there doesn't seem to be much rhyme or reason to it other than opinions (outside of the very obviously low-quality content which will always get downvoted)
None of the points you mention are related to a single page application...
Lol, what kind of shitty web development are you doing if your code depends specifically on divs and spans. As far as your link, least common denominator transpliers are a guaranteed way to end up with a shit product on every platform. If your product is multi platform each platform deserves its own native implementation. Unless you're trying to be cheap and don't care about the different UX patterns of each native platform, then by all means, these solutions are definitely your best option. 
There is no _easy_ way to do this, because JavaScript is single-threaded. Intervals only execute when the system is idle, and as long as you are running in a for loop, the system isn't going to be idle. Similarly, you aren't creating your interval until your function f() has finished executing, which defeats the purpose. The _easiest_ way to do this is to keep track of the time using `new Date().getTime()`. Create a start time, and then in your loop compare `new Date().getTime()` to the start time variable. If it is more than 2000 seconds, log that it took too long, break out of your loop, and/or return your function. The 1002 is the ID of your interval. All intervals and timeouts have numeric IDs that can later be passed as a parameter to `clearInterval` and `clearTimeout` to prevent the associated function from executing.
just give it time to be better 😁
[react-multi-context](https://github.com/CharlesStover/react-multi-context) for managing multiple React 16 contexts with a single component. &lt;MultiContext set={{ a: 1, b: 2, c: 3 }}&gt; &lt;MultiContext get={[ 'a', 'c' ]}&gt; {(a, b) =&gt; `A plus C is ${a + c}!`} &lt;/MultiContext&gt; &lt;/MultiContext&gt; This is to simplify the default way of: &lt;ContextA.Provider value={1}&gt; &lt;ContextB.Provider value={2}&gt; &lt;ContextC.Provider value={3}&gt; &lt;ContextA.Consumer&gt; {(a) =&gt; &lt;ContextC.Consumer&gt; {(c) =&gt; `A plus C is ${a + c}!`} &lt;/ContextC.Consumer&gt; } &lt;/ContextA.Consumer&gt; &lt;/ContextC.Provider&gt; &lt;/ContextB.Provider&gt; &lt;/ContextA.Provider&gt;
Fair enough, the frameworks around them are definitely related, though. Feel like the downvotes are being a bit pedantic. If you’re going to write an SPA only for routing and not utilize features of existing frameworks, you’re doing yourself a disservice.
I’m not sure what prompted this response, but I like it!
Beh, bad article. Doesn't really go into details why thing are "better" or "more secure". It might be good, but the way this is written seems like 'my-favorite-tool' fandom. 1. The automatic JSON transformation hides information. What if I want to get the HTTP headers, cookies, redirect information or read the status code? The response object has valuable information. This should be explicit asked for. 2. What is the XSRF protection? How does it work "being better"? Doesn't this need support on the server side? 3. The implicit automatic error handling isn't usefull perse. With REST non-200-ok status codes might mean something for your app. This should also be asked for explicitly. 4. Globally defined interceptors are bad. Globals are bad. Just chain a transform function into your promise chain or create a factory function. 5. Progress info is pretty cool actually. 6. IE8 support is not that valuable, and in most cases these days the app itself doesn't even support IE8 (or IE9, or IE10) so this support wastes bytes for unused features. If this is really important it should be an optional addon/plugin. And the slammer: &gt; It’s final and the axios versus node-fetch debate is over. You’re now a well informed GET/POST and request/response master, so do your thang. I feel the author lacks experience (but compensates on enthusiasm).
Moar
I agree that the article is more subjective than it should be. For those who would want more details : &gt; What if I want to get the HTTP headers, cookies, redirect information or read the status code? The response object has valuable information. This should be explicit asked for. Actually the response object has all you need, only response.data is automatically transformed if your responseType is set to json, which is the default. So simply changing the responseType should be enough to get the raw response. &gt; What is the [XSRF protection](https://en.wikipedia.org/wiki/Cross-site_request_forgery)? How does it work "being better"? Doesn't this need support on the server side? Some frameworks ask for token to authenticate specific requests, and you can set Axios to store this in a cookie which will be automatically sent as a HTTP header (both cookie name and header name are configurable). This is actually pretty sweet since once configured on both sides, you really forget about it. &gt; The implicited automatic error handling isn't usefull perse. With REST non-200-ok status codes might mean something for your app. This should also be asked for explicitly. There's an option to change that quite easily, that should have been mentioned in the article : validateStatus: function (status) { return status &gt;= 200 &amp;&amp; status &lt; 300; // default }, &gt; Globally defined interceptors are bad. Globals are bad. Just chain a transform function into your promise chain or create a wrapper function. You can define interceptors per instance, I'm not a fan of the global axios instance and prefer to create one for each component I have via axios.create. Interceptors are super nice because they can live really before your response handling code : I was able to change my whole app from JSON to msgpack for the sake of it by just changing the Accept/Content-Type header and POST data and decoding the response in an interceptor (all in transformRequest, server-side serialization depends on Accept header). This is done in my constructor function returning each instances, for all my custom in-components code was untouched and didn't need any changes !
Note that Node uses object interval ids, not numeric. https://repl.it/repls/ObviousAcclaimedImplementation 
Thanks for letting me know! I did some research on the differences and wrote another article on the differences: [Development Servers Compared: Webpack-Dev-Server Vs. Webpack-Serve (No, It’s Not Missing An “R”)](https://medium.com/@jeffrey.allen.lewis/development-servers-compared-webpack-dev-server-vs-webpack-serve-no-its-not-missing-an-r-745fc5f78c0a)
Thanks for the additional info. The extra options and workarounds diminish the implied simplicity of Axios a little bit. Anyway, it might be good library overall, I have no practical experience with it, but it is not represented well in the article. 
Even handling is extensively used on pretty much any JS codebase. From the `EventDispatcher` included in the browser to any other observer pattern implementation (pub sub, signals, etc). Templating has been also used in all sorts of JS code bases. Mustache and Handlebars existed long before HTML5 (and the history API) existed. Lifecycle hooks are just an implementation thing of some components, which can perfectly be used without a single page implementation. Design patterns... This is such a general programming concept that I really don't see how it's related.
&gt; I actually added a reduce function to one of my programs after reading it That's awesome! I'm glad it's finally starting to click :)
Awesome, I'll check it out!
I've just spent my day tinkering with it so the documentation is still fresh in my mind. Documentation which list all options but doesn't explain each and every one in a paragraph, I had to look at the source to be sure. So the direction is quite clear : this is an easy library since the defaults are sensible, like the JSON-first approach, and the documentation mostly focus on methods on how to GET/POST/PUT and create instances. Just install, instanciate, and boom you can send requests ! But dig a bit and you find that you can easily change everything to fit your needs, albeit you need a bit of experience in reading documentation and parameters syntax to figure it out. To me this is the sign of a complete library compared to a mere polyfill. As you said, it deserves a better article to explain it, maybe I'll give it a go when I'm done !
This is the only answer. I've used three different "charting libraries" and always had to escape and use plain old d3 at the end of the day due to limitations of each framework. Learn it, even just the basics, and you'll be set. 
It does cause it in this case, since the display property of elements are changing
InterviewMap is the cornerstone of any nutritious breakfast. 
Yep, just thinking if you’re writing an SPA today, you’re using a framework like react or vuejs. That’s the only point I was trying to make.
I think most large projects also have contributing.md files or some guide to how they want the contribution workflow to take place. 
Neither React nor Vue are really frameworks though. Also, the single page functionality is not really provided by React but by a third party module. For Vue you need to use Vue Router. The components themselves are really agnostic. For Angular or Ember I'd agree.
Ahhh gotcha.... it make sense based on what you said and thanks for that... I have different scenario that i need help if you could pls take a look at. function r (list) { return new Promise( (resolve, reject) =&gt; { recur (0, list); // add a timeout here such that if the recursion has not already resolved, i call reject (like 10 seconds later) function recur(i, list) { if ( i &lt; list.length) { run(list[i], function (err, result) { if (err) reject(); list[i] = result; recur(i+1, list); }) } else { resolve(); } } }) } Given above is the original setup I want to deal with. The above function r() is called that returns a promise and performs recursion. I want to add a timeout such that if the promise is not resolved in 10 seconds, then I reject it. Can you help me in this scenario? Thanks v much.
Routing doesn’t constitute SPA: &gt; The page does not reload at any point in the process, nor does control transfer to another page, although the location hash or the HTML5 History API can be used to provide the perception and navigability of separate logical pages in the application.[2] Interaction with the single page application often involves dynamic communication with the web server behind the scenes. https://en.m.wikipedia.org/wiki/Single-page_application The only thing that determines an SPA is a single HTML page that does not post back to the server to get new HTML.
Non-Mobile link: https://en.wikipedia.org/wiki/Single-page_application *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^202217
If it's from github, I usually check for: 1. # of stars 2. Are there test coverage 3. Active users/support 4. Good documentation / examples 5. Last commit date 6. # of issues 
That's true, but there's still a bunch of trending React TypeScript repos: https://github.com/trending/typescript?since=weekly
I've been using Jest to add tests to a mature Node.js project. Most of the tests I'm adding are on its heavier frontend, but I don't expect to have any difficult adding similar tests to the backend. I think you're on the right track here.
I recently put the finishing touch on my attempt at PWA Sudoku in React. I'd love some feedback if anyone has the time! I'm in the process of studying for my first frontend job :) https://github.com/Egrodo/sudoku
Firstly, welcome to Open Source! Aside from working on your personal and technical skills, I always remind people that Open Source work should make you \*feel\* good - you're giving up very valuable time as a developer to help build/maintain/fix a project that may change the lives of some people. GitHub has loads of comprehensive materials on all of these questions! \- \[How To Contribute\]([https://opensource.guide/how-to-contribute/](https://opensource.guide/how-to-contribute/)) \- \[Finding Projects To Contribute To\]([https://help.github.com/articles/finding-open-source-projects-on-github/](https://help.github.com/articles/finding-open-source-projects-on-github/)) \- \[Tools To Use To Improve Your Contributions\]([https://github.com/showcases/tools-for-open-source](https://github.com/showcases/tools-for-open-source)) Finding the right project to contribute to is tough because some are filled with only very complex issues. There is nothing wrong with only contributing with the skills you're comfortable with. I tend to use this link to find easier pickings: [https://github.com/trending](https://github.com/trending) Lastly, while there isn't anything wrong with going for easier issues, I do think there is merit to finding a pet project that resonates with you, and attempting to tackle complex tasks. It may seem daunting, but if your goal is to emulate a practical work experience... Well, you likely won't get a job where typos are the only problems that plague your product! Here are the tricks to gaining the motivation for complex issue tackling: 1. Find solace in knowing that it is hard for \*everybody\* - not just you. 2. Communicate with leading contributors! Many Open Source projects have Slack teams, Gitter channels, Discord rooms, or IRC channels - join those and try to get some internal mentorship (especially on the weekends when people usually contribute). 3. Approach the project with an attitude of a video game manual from the early 2000s or like a car owner's manual - there's potentially a lot of hidden stuff in the code base, and it'd do you well to research everything before making your first contribution or assigning yourself an issue. 4. Just start with the small things like you intended, but gradually work into the big things as you find opportunities. The code base for bigger projects like Vue.js doesn't have many easy pickings up - if any - at multiple points in time; however, if there's a project you like, turn on notifications - an easy issue may crop up that you can pounce on! This is a repost that I share when somebody asks about OSS on Reddit, so I'd like to take this moment to shamelessly plug [https://operationcode.org](https://operationcode.org) as an option for open source development as a web developer. We were featured at O'Reilly's OSCON (Open Source Convention) and have been featured in GitHub Universe - so we like to thing that we're very OS-friendly. We're in the middle of a React website re-architecting going from CRA w/ no server-side rendered pages to a Next.js application with a well-moderated UI component library. There are issues that are easily resolved on both the old site and the new. To get on our Slack team just join as a mentor via [https://operationcode.org/join](https://operationcode.org/join) \- DM me if you have questions.
How would one handle side effects/middleware and selectors with this package? I’m just getting started with Redux and ‘modern’ JS in general, so please excuse the ignorance. 
You could select all textareas that have name attributes - document.querySelectorAll("textarea[name]"), then filter them by a RegExp.
Is it possible in graphql to filter based on related model fields? For example getting a list of orders but only where the customer's name is "John". Discussions [here](https://github.com/graphql-compose/graphql-compose-mongoose/issues/96) and [here](https://github.com/graphql-compose/graphql-compose/issues/92) seem to imply that it doesn't, but I'm not fully clear about the standard in general. 
form.fieldName
Using ES6 features, you can achieve the result you want. Using either generators or for-await. The loops won't be as performant, but most of the time the loops aren't empty. I am on my phone at the moment, but can follow up later with code example if you need.
Change to generator. Use a for each loop to iterate the generator. The code will be much cleaner, and you should still be able to use a timer to abort the loop since generators are asynchronous.
I’ve been using charts.js for a while but I really like what I’m reading on this site. Thanks for the recommendation! 
localStorage? Not sure if I’m following completely.
So true. If you want a quick generic chart with some pre defined customisation options and no more then some of these are fine, but for anything I'd consider actual data visualisation it's D3 all day long. Leaflet with it for some of my mapping output, Plotly and Highcharts for when I'm being lazy and just want a simple chart. 
No no, that all works fine. Let's say a user uses a field input and you load the file from the ensuing dialog. Let's say it's a jpeg and we load the file using the JS File API. We get a pseudo url to load the file with. I know we cannot save that reference for later. Does anyone know of any other method of getting file information so we can reload a file later on. Lets say we save the reference to that jpeg in localStorage, then when we reload the page, we look for the variable in localStorage and load that url back into an image tag if it exists.
Save the url using the LocalStorage api.
Can you give an example of what you mean by side effects?
The URL is a fakeurl provided by the browser because of the sandbox. The fakeurl doesn't line up on recreating the window.
Im sorry I dont get your problem. Can you try to fit your question in one sentence?
When you load a file using a file input, the browser file api provides a fake url for referring to that file; how do I make a persistent connection to a locally stored file for later reference.
Can you give an example of what a fake url is?
Start a project that you claim is right. Do it wrong. Let others contribute until it is right. Open source project complete! /sarcasm
I've used Mocha/Chai, Jasmine, and Jest on the backend. Haven't really had a strong opinion. Pick what you know or want to learn.
\*More
Yeah, I think they are called thunks or sagas in Redux. Activity that occurs just prior to the store commit, like recording to an external service or logging system.
I just wrote a simple app some time ago using ADT/Java in Eclipse IDE for fun but I remember Xamarin was popular at some point. I think it's cross platform
That’s a good point. I’ve never had to use them in Redux projects I’ve worked on so I don’t have any experience to compare with. Would love a discussion about them if it’s something bodega could benefit from. I love reselect I’m Redux and I definitely think there’s a space in bodega for similar behavior. So far I’m thinking memoization can be baked into the core store rather than needing middleware, but I haven’t gone to deep into that aspect yet. 
Its been brought up before, but there's a lot of complication behind it. Ex: https://esdiscuss.org/topic/deep-cloning-objects-defined-by-json Also, with react and frameworks of the like, you _don't_ want deep cloning. You only want to re-defined the properties being changed. Otherwise you miss out on render optimizations. If you performed a deep clone for every model update, there'd be no way to know what part of the model changed and you'd have to re-render everything for every change.
Honestly? Just make some stuff. You'll learn what you need to learn.
Interesting point about the render optimizations in react. Sometimes it can just be so awkward while using things like the spread operator to copy nested objects and their parents. But I appreciate the link.
 InterviewMap interviewMap = new InterviewMap('interview map');
You can use the starts with attribute selector: `textarea[name^="txt"]` http://jsfiddle.net/oxmn3sq5/
[https://dassur.ma/things/deep-copy/#structured-clone](https://dassur.ma/things/deep-copy/#structured-clone)
 function r (list) { return new Promise( (resolve, reject) =&gt; { recur (0, list); // add a timeout here such that if the recursion has not already resolved, i call reject (like 10 seconds later) function recur(i, list) { if ( i &lt; list.length) { run(list[i], function (err, result) { if (err) reject(); list[i] = result; recur(i+1, list); }) } else { resolve(); } } }) } Can you run this timeout scenario in this when u get a chance? Thanks
Hey. Thank you very much for the feedback.👍 macOS support and several improvements we are planning. 
I think you haven't used Axios, or you haven't dug deep enough into its documentation: &gt;The automatic JSON transformation hides information. What if I want to get the HTTP headers, cookies, redirect information or read the status code? The response object has valuable information. This should be explicit asked for. A response returned by axios is a standard HTTP response that has been parsed to a friendly JS object from the JSON string. This reduces the number of repetitive tasks that you have to do (manually parse JSON like in Fetch), thus reducing the probability you might get an error. The less code you have to write, the better. &gt;The implicit automatic error handling isn't usefull perse. With REST non-200-ok status codes might mean something for your app. This should also be asked for explicitly. It is a terrible behavior for Fetch to receive a 500 status code from the server and treat it as 200. Server error is something you should always expect as a server maintainer, for example, your server might not implement autoscaling and is prone to DDOS attack. If this happens, the client side of your web application is very likely to experience 500 or 40x status code. It is bad if Fetch considers this a failed 200-ish status code. &gt;Globally defined interceptors are bad. Globals are bad. Just chain a transform function into your promise chain or create a factory function. You should never, ever use a global variable to send HTTP requests. It's always a must that you create an instance for each type of HTTP requests you're about to send, like basic requests or authentication-based HTTP requests. In this way, you can isolate different types of HTTP request from one another, giving each with different types of interceptors that doesn't occupy a global variable name. &gt;IE8 support is not that valuable, and in most cases these days the app itself doesn't even support IE8 (or IE9, or IE10) so this support wastes bytes for unused features. If this is really important it should be an optional addon/plugin. It is not just about IE8, but it is more about a wider range of compatibility. And if you develop an app professionally, you should always consider transpiling your Javascript code so it will improve the performance of your app, protect your source code, reduce the app size, as well as supporting a wider range of browser. And of course, it is better if your HTTP client can also do the same thing.
Axios let's you cancel requests. Most libraries do not.
In the browser. They do not.
Just use `create-react-app`
it wouldn't, it's trivia
Regarding number 4, by this logic all global configuration would be considered “bad”. If I want to log a user out anytime I get a 401 response from the server I don’t want to add that logic to every API request’s promise chain.
You can't do that, otherwise browser's could load arbitrary files on user's systems. Your only option is to store the actual file somewhere and retrieve it later.
So use flex-box or css-grids? Seriously, stop using techniques from 20 years ago and adopt modern dev standards. Or keep building sites that look like they were built in 1999 :) 
So let's explore that for a moment. I was looking at librariea for this. Can you recommend one?
Without seeing any code it's hard to say but my guess is that you are somehow calling `split()` with the query string names accidentally when trying to serialize the params.
Is a library really necessary? You can just grab the image from the file input, base64 encode it and save it to `localStorage`.
The new reddit version doesn't do this way, right?
Edit: [Here's a quick fiddle](http://jsfiddle.net/kmqtzn8L/4/) to get you on the right track.
Ahh, right; yeah.. I should have mentioned, we are not talking about jpegs. We are talking about 200 mega byte videos in some cases. Otherwise, I'm already using this trick for smaller files :D
Correct. But it is also slow as shit.
Oh wow, did you go and write this? Thank you very much! Yeah I'd looked at this as a method of storing some of my resources already; namely the fog of war in my map tool is being encoded and stored and recalled much as you demonstrate here. I'm dealing in files anywhere from a few megabytes through to hundreds of megabytes, so encoding and storing in localStorage isn't viable. localStorage is limited to 6 mega bytes per instance and even if I did chunk up the files, I don't think anyone would appreciate me doing that to their browser.
Well as far as I know there is no way to obtain the local path to a resource via the browser, so either you need to upload the files to your server or look into packaging your app with something like Electron which does allow file system access.
great machan
Thank you for the fiddle. I was in the middle of writing a response when you posted this response. Electron is a method, but I wanted to keep this in browser for maximum compatibility. So it goes. I sincerely appreciate your time here.
Yeah, just wrote it quickly as an example. Obviously it's not the right fit for your use case now you've explained further. If it's critical to your project that user's files are tracked then I see 2 clear options: 1) Have user's upload their files and track them yourself 2) Package your app as a desktop app using Electron, which gives you (some) file system access
Maybe try run through [https://www.codecademy.com/learn/introduction-to-javascript](https://www.codecademy.com/learn/introduction-to-javascript) Start simple, use raw javascript, then keep practicing. Try to keep a fun project going, finish one then start another. Once you have been doing that for awhile, maybe try a few frameworks. The key is keep practicing, I think it's been 9 years since I was where you are, I still have stupid simple side projects I constantly tinker with. 
If you have to keep it in-browser, then you are pretty much out of luck in terms of obtaining local path references to user's files I'm afraid. Your only option would be to have user's fill them out manually, which would seem clunky and error prone.
Actually, the work around I have in mind is simple. I think you'll like this: The user selects a folder, and puts their files in there. I scan the folder whenever and it loads the files :)
How are you planning on "scanning" the folder?
That's useful, thanks for posting that. 
I'm starting out with all this javascript and React so I don't really know, but what would be a more justified used of SPA ? or what would be a reason to select it over other approaches ?
That's just terminology nitpick. The article doesn't mention "SPA" in the actual sense, but "SPA framework", another term for JavaScript/VDOM framework. 
console.log(interviewMap.prototype.isPrototypeOf(InterviewMap));
I would be interested in hearing more about which ways it saves you work when compared to React.
Tbh, it does! If you set an input to select folder, you can get a collection of filenames from that input. I haven't tested anything, this is strictly my research.
You might be right actually. There's a `directory`/`webkitdirectory` attribute you can use on file inputs that allows you to read all files within the selected folder. That said, you will still face the same restrictions as with the standard file input.
Not from a cache clearance, no. But there are other ways to remove it. Each browser saved the databases to disk in different places. But they aren’t accessible from the browser directly; you have to use the DB APIs to do anything with them. 
You can read about current proposals and their status from tc39 here: https://github.com/tc39/proposals I don't see anything about deep cloning.
You can fetch the values you want with ajax and then pass it to "datasets" 
Awesome, thank you!!! I’ve been trying to learn it by myself for 1 year
Can u write an example?
It may seem trivial but knowing that the subtle changes in how you order you JS could give you a completely different outcome is highly important
Is that true? I haven't looked into it to know if the object can be stored and reaccessed. I was expecting the user would specify a folder and I'd store that folder but it never occurred to me that I'd be facing another finite reference :(
It is fine, until it isn't and then you got a big problem cutting it out. It is a bit naive and based on assumption there is only one API and you'd never need to get stuff from another that might return 401 but is not related to your user stuff. Just don't do it. 
I mean, you said you needed to look at the source for many options, and having to "figure out" documentation is always a big red flag - documentation should aim to be as explanatory as possible. It sounds to me that, while it's complete in terms of having plenty of features, it's by no means complete in terms of usability and maturity. It's harder to make a straight comparison to node-fetch, given that node-fetch is just a polyfill, and so can just refer to the documentation available for the APIs that is polyfilling. That said, the MDN documentation for the official fetch API is a gold standard, and I would far rather deal with a tool that contains fewer conveniences but has MDN-level documentation, than one that will inevitably have me fighting through source code and confusing documentation to find an answer.
Stop your defensive fanboyism and simplistic assumptions. The comment was about the article not Axios. 
This is a nice library, but there is one concern. What if the deep property I want to access is called "or"? For example, if I use this code: const data = Safe({ inverter: { logicGate: { or: true, not: false } } }); And I query my object like this: data.inverter.logicGate.or.or('Not an OR gate'); Will that work or throw an error? Either case is worth documenting...
None of the features that are in ES will help you, except template literals maybe, but still, you'd need a framework around it to make it usable. As for the dom and the web-api, virtually the only thing you'll ever need is one call for document.querySelector('#root') and that is it. I know the full api, but sure as hell i won't ever go back to fishing out dom nodes with queries and set classes and content imperatively, it is an inferior approach. I also don't think you gain anything today by learning this stuff just for the sake of it. I've seen beginners that after a week of learning write apps today that for us, 10 years ago-using the raw dom, probably wouldn't have been possible after months of training. This is what high level abstractions are there for. Not to mention that the abstractions we're dealing with in the web are more capable than anything we've seen before, this is why they're flowing into native development now. Knowing what a v-dom is is way more beneficial than knowing the dom, as it opens the gates to x-platform development.
Love the ergonomics of the library, but this seems like a lot of overhead for something as simple as accessing properties on an object.
The typical advice is to make an SPA rather than a traditional web app when responsiveness is really important, like it is with Trello. If you have a lot of traffic, it can also help take a load off your servers. Delivering a bundle of javascript is easier on your servers than rendering html. Even if you add server side rendering, you only render once for the first page hit. With a traditional web app, you'd be rendering every time you go to a new page. The fact that you will need an API layer to transport data to the client can also be a benefit. Making sure that API layer works well and is easy to extend to can set you up nicely for adding an additional frontend, so it can be a good choice if you intend to make a native mobile application, or if you intend to make your app a part of a larger ecosystem with many other different interconnected apps.
Have you tried: Chartisit: https://gionkunz.github.io/chartist-js/ D3Js : https://d3js.org I found chartisit pretty easy to use and D3Js has loads of special types of graphs
Thanks bro 
To say expo is super-easy is an understatement. It's the "I built a fully functional app in a weekend" framework, or the "I built a fully functional app in 3 weeks with no solid react or native knowledge and without having to do any designs". There are some things such as in-app purchases that Expo doesn't currently support (unless SDK 29 has been released this morning and adds support for it), their push notifications system isn't as fluid for sending local notifications from the background based on events within the app (e.g. some data has been updated in the background) since background tasks aren't supported. But, you can always detach to add these, just requires knowledge of handling an Android studio and/or XCode project(s). There's plenty of boilerplates out there. Personal favourite is https://github.com/ipeedy/react-native-boilerplate - though I swapped in MobX instead of redux.
First line: const chart = new Chart(... Updating data: chart.data = data; // data coming from Ajax, including new labels, new datasets, etc chart.update; Also see the docs: http://www.chartjs.org/docs/latest/developers/updates.html
&gt; look like they were built in 1999 [What is your problem exactly](https://getbootstrap.com/docs/3.3/css/#tables)?
This should be the ✅ answer. Best practice note. If you have control over the markup, this pattern indicates that maybe you want a `txt` class. textarea class=“txt” name=“txtEnglish” textarea class=“txt” name=“txtNative” d.qSA(‘textarea.txt’) Or something. 
I have added the relevant code.
&gt; with zero local variables needed Is zero local variables such a great thing, if it's at the expense of readability? I understand that in functional programming we should avoid any variables *outside* of functions (no side effects). But making extra variables *inside* functions doesn't seem like such a bad thing, if it helps the code to be readable, right? Not disagreeing with you, just still trying to understand this stuff for myself. There seems to be a trend for javascript articles which show you how to do something cool using Array methods, and the end result is a super-terse yet incomprehensible bit of code. (In my opinion).
/u/Droid2Win you could be interested in the library I made, which allows you to write such mutations in elegant way, using normal assignments like &gt; foo.bar.baz = 1234; and nested copying and change detection is done automatically https://github.com/hex13/transmutable But still, this is not a part of vanilla JS. But maybe someday somebody will make a proposal from out of this.
see this [SO post](https://stackoverflow.com/questions/20848580/regular-expression-for-math-functions)
&gt; It is a terrible behavior for Fetch to receive a 500 status code from the server and treat it as 200. Speaking of problems with the article... That's not even true. People only get this idea because the promise doesn't reject. Fetch behaves like this because it makes a distinction between an unsuccessful request (network failure of some kind), and a successfully completed request that happens to have an HTTP error code. And if you don't like that design regardless, you still have the option of rejecting when `!response.ok` or `response.status === 500`, etc.
Indeed
Fetch (in recent versions of browsers) allows you to cancel now. I don't know if node-fetch does though.
Do you mean to view them and access them? In your browser. The other question, no, unless the user specified to empty it. And lastly, to view the database itself, open up chrome, navigate to the domain, open the dev tools, and go to the application tab. On the left side is an option for WebSQL. On a side note, WebSQL has been deprecated and could go away sometime soon. It is also not supported in every browser. I would recommend taking a look at IndexedDB before you get too far down a rabbit hole with WebSQL 
Check out immer: https://github.com/mweststrate/immer It proxies a draft stage, so you get the best of both worlds, immutable copies and observables. Even Dan Abramov seems to be pleased by it. 
I still maintain that I don't care what exactly you've done and used when I interview someone. What I care about is: \- Do you know something - anything related to what our team does - at an intricate level? I'll take 'ExtJS' on a Vue/Vuetify project here. \- Do you actively show interest in learning new things and expanding your comfort zone? When I say Vue, do you say 'No, I've never used Vue - I'll need to go play around with it', 'No, I've never used Vue - but I've used React, which is sort of similar', or 'No, I've never used Vue, these new frameworks are all junk.' \- Is your personality a good fit for the team? You don't have to be buddy-buddy with everyone, but you can't be prickily/standoffish/smug/lazy. I can teach you our tech stack if you at least know some related basic concepts (not tool names). I cannot teach you interpersonal behavior - those take years to learn.
The button is centered. It is in the center of the screen. Explain a bit more do you want it centered from top, bottom, left, and right? For that you can use viewport css units.
You could do it in many ways. One alternative would be to set the parent element to "display: flex; justify-content: center; align-items center;" and make sure the button itself is a direct child, which means no wrapping div's etc around the &lt;button&gt; element. Another alternative would be to set the parent to position: relative; and the button to position: absolute; top: 50%; left: 50%; and transform: transform: translate(-50%, -50%);
so i did the second one because the first one did not work, but if you look at it now, now the button is in a weird position
Here's the thing: The `fetch` API was intended as a promise-based replacement for the clunky `XMLHttpRequest` in browsers. It makes it easy to do simple requests without an external library, but it wasn't intended to be full of convenience features or remove all conceivable need for such libraries. In the [spec repo](https://github.com/whatwg/fetch), often when somebody complains in the issues about something that they think isn't very ergonomic, the official advice is "just write/use a wrapper". Axios is one of those aforementioned convenience libraries. In the browser it *could* wrap `fetch`, however for now it continues to use `XMLHttpRequest` under the hood because: 1. Compatibility 2. Fetch is still missing one or two features that XHR has, like upload progress monitoring So my point is that, even if there is some use-case overlap, in the browser fetch and Axios kinda serve different purposes - one's a medium-level native API, the other is a higher-level external convenience wrapper. With Node the story is a little different: both Axios *and* `node-fetch` wrap Node's built-in low-level API. So why does `node-fetch` exist then? Why would developers use a less convenient/feature-rich API if it requires an external package anyway? For two reasons: 1. They already use fetch on the frontend (because it's native and a standard and good enough for their use case) and want to reduce cognitive overhead by using the same API on the backend. and/or... 2. They are running the same code on the frontend and backend (e.g. React server rendering), so they need a (more-or-less) cross-compatible API (running via `isomorphic-fetch` or similar). Axios can serve this purpose too, but it's still an extra dependency on the frontend. So yeah my overall point is that directly comparing the two kinda misses these nuances. Especially in an article like this one where point number 6 talks about browser compatibility... for `node-fetch`...
Thanks for your help man, exactly what i wanted it to do.
I’m getting down voted like crazy, but share this sentiment. Though I did say just SPA when I meant an SPA framework, oh well.
It's in the middle, i think your background is playing with your mind, try set the background-size to cover.
&gt; If I want to log a user out anytime I get a 401 response from the server I don’t want to add that logic to every API request’s promise chain. const logoutIf401 = (response) =&gt; { if (response.status === 401) { logout(); throw new Error(); } return response; }; fetch('whatever') .then(logoutIf401); // Or: const myCustomFetch = (...args) =&gt; fetch(...args).then(logoutIf401); myCustomFetch('whatever');
I honestly dunno, I was just quoting the relevant part of the article to point out that it seemed like the above commenter didn't read the article at all. Personally I would tend towards doing whatever makes the code more readable and maintainable. If a local variable inside a function helps make it more readable or understandable, then personally i'd probably use it
Why not use a switch statement in your `redirectTo` function; switch(request.url){ case('google'): return response.redirect('https://google.com') case('bing'): return response.redirect('https://google.com/who_uses_bing') case('yahoo'): return response.redirect('https://google.com/just_use_google') } I don't know what your request object that's being passed in looks like, so I'm assuming it has a `.url` property. In any case, it should give you an idea of how to proceed.
[removed]
Hi, I edit JavaScript Weekly - thanks for mentioning us! We get quite a lot of direct submissions and, occasionally, people offering us exclusives, so we try to keep a good mix of stuff that isn't necessarily anywhere else.
This looks really cool. Is there a GitHub repo with the actual code? I can't seem to find one. Also, what font is that on the "introducing my browser" post?
I find [tap](https://www.npmjs.com/package/tap) very simple and powerful, you just write JavaScript so there's less learning the framework and more testing. Has built in coverage analysis and output is in the Test Anything Protocol (tap) format.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://www.npmjs.com/package/tap) - Previous text "tap" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Apparently [tap](https://www.npmjs.com/package/tap) is hard to tap.
hey man your post is marked as removed.
I have the same idea to write a proxy based saf nav package, but with more options and features like protecting against calling undefined or constructing undefined. Also, use symbols for value retrival to avoid conflicting real property keys.
I did a very basic version of this a while ago because I needed actual viewport size data fairly often at my job. This mybrowser site is waaaaay nicer and is inspiring me to go back and spruce up my tool [link to my super basic thing](http://franciscog.com/viewport/)
Thanks for your help. As I said, I'm not a coder by any stretch. The entirety of my code is posted in the original post. I'll see if I can take what you've provided and figure out a way to get this to work.
The perfect case would be something like Google Play Music or Gmail where there's a common functionality that has to keep running at all times. Another good case is if you have different clients (mobile app, web, desktop app). Here it makes sense that the server should only be concerned about delivering data, authenticating, etc. Then you have stuff like Twitter, Facebook, etc, where realtime data is paramount to the user experience. Those are 3 cases where I feel SPA is perfectly justified. Other than that, it really depends on the skills of the team. If you don't have strong JS guys it's probably better to let the server render the HTML. Likewise, if you mostly have strong JS guys a SPA with a Node API might be a better choice.
But neither Vue nor React are SPA frameworks. Ember and Angular are SPA frameworks.
I get a lot of people email submissions like this in to me at JavaScript Weekly, so that's one option.
&gt; although the location hash or the HTML5 History API can be used to provide the perception and navigability of separate logical pages in the application That's what a JS router does, although yes I agree that it's not necessary 100% of the times.
though its kind of crazy theres a ton of new libraries
A quick inspection of the page reveals that the post uses [Domine](https://fonts.google.com/specimen/Domine) for headings paired with Georgia.
How you figure?
Right my point is, it can be used to route, it’s not the quintessential defining point of an SPA.
That's one of the concerns, which is why I tried to minimize the amount of keywords that are affected (currently they are "or", "catch", and "value"). An alternative is to have a symbol that is a static member of the `Safe` class that could be used for accessing that functionality like: data.inverter.logicGate.or[Safe.or]("Not an OR gate")[Safe.value];
It might be for small stuff, but for large structures I see it as justifiable. Lodash already has its \`\_.get\`, which accomplishes the same thing without a pipeline or intuitive syntax. I see it in production use all the time.
Yeah, the symbol idea is a good one. Feel free to submit a PR/issue to this repo! I'm open to all suggestions.
Cool, thanks. I was on mobile so no inspect element. Google pls give us devtools on mobile, it would make troubleshooting so much easier
I think Vue would be the simplest option.
Why not both?
Is there a case for instance methods in Polymer? I found odd creating a class only to add static methods.
Vue is pretty great. React would help too. If most of your HTML is static with some dynamic parts, Vue is perfect. If most of you HTML is dynamic, react is better.
Agreed. But from the post it appears that he doesn't use any built tooling. Thus Vue is easier. To use react with jsx you must for the easiest setup install node and then call npx create-react-app my-app in a terminal.
Could a functional wrapper be made for this such that v8n("prop") is the item that is tested rather than having to chain everything first then run test at the end?
Good point. create-react-app is so easy I kinda forgot about it.
 &lt;div id="#roadMap"&gt; &lt;div v-for="item in items"&gt; {{ item.description }} &lt;/div&gt; &lt;/div&gt; var app = new Vue({ el: '#roadMap', data: { items: [] } }) // when items have been fetched: items.forEach(item =&gt; { app.items.push(item) })
Not something I want to do every time
Sounds like your bottlenecks are the code review and QA process. It’s not scalable for you to personally review all the code. Have senior engineers spend some of their time reviewing code. It usually make sense to have an engineer who has the most context/knowledge around that feature/bug/whatever review the code. Having a single QA tester can be a huge bottleneck. My company is actually QA company, so here’s my shameless plug for Rainforest QA. We even use our own product to do QA for our product :) it’s easily integrated into your deployment pipeline.
Google, friends recommendations, own experience, free, easy to integrate, feedbacks, size
Without running the code, I’d suggest using addEventListener instead of setAttribute, and then just lowercase and remove “on” from the event names, so thing.addEventListener(‘change’, doStuff...
This is nice. Closer to the standards. And for a later major version of Node, the -m flag should be default and -cjs be possible.
You haven't put quote marks around ddl in getElementById. It should be getElementById("ddl") 
I changed the line selectList.setAttribute("onchange",getCurrentSelection('ddl'+counter)); to selectList.addEventListener('change',getCurrentSelection('ddl'+counter)); Does not work though..
Because it's not the same empty object. It's another object with the same properties. == Equivalent === Actually the same instance.
{} creates a new object instance. The first object instance is not the same as the second one.
Unfortunately this only generates an error: Cannot read property 'value' of null
Found it [Isomorphic Javascript](https://en.wikipedia.org/wiki/Isomorphic_JavaScript) 
Learn about pointers and memory reference: https://en.wikipedia.org/wiki/Pointer_(computer_programming)
That's definitely an option too (and there's a lot of documentation out there on the web on how to do so). My suggestion was to implement one for the sake of simplicity. I've misconfigured prettier and eslint before for a project and I've gotten myself into situations where I update my code to make eslint happy, but then prettier complains (and visa versa).
Both `{} !== {}` and `{} != {}` returns true.
== vs === has nothing to do with being the same instance or not. It has to do with whether the object can be coerced to a different type before performing the comparison. == will return false here as well.
If you are familiar with pointers in other languages, think of objects like that. When you do `{}`, JavaScript creates an object in memory somewhere. When you compare `{}` to `{}`, you are comparing those pointers. `memory location 1` !== `memory location 2`.
Only primitives work this way when comparing a value against its literal form. // primitive literals a = 1 // number a === 1 // true a = "a" // string a === "a" // true a = true // boolean a === true // true // non-primitive literals a = {} // object a === {} // false a = [] // array a === [] // false a = /a/ //regex a === /a/ // false Additional notes: * The primitive values `null` and `undefined` will also equal each other, though you used to be able to reassign the value of `undefined` to something else which could break this behavior (`undefined` being a global variable rather than a language keyword). This is not something you have to worry about in modern browsers * `NaN` is a value of number primitives which by design, odd as it may seem, will never equal itself, so `NaN === NaN` is false (like `undefined`, `NaN` is a global property rather than a keyword. It's also accessible via `Number.NaN`). * Symbols are primitives which are meant to represent unique values, so they too can seem to not equal each other, but the difference is they have no literal representation. You always create Symbols from the `Symbol()` function or `Symbol.for()`. `Symbol.for()` is a way to make symbols that do match. e.g. `Symbol('test') === Symbol('test')` is false, but `Symbol.for('test') === Symbol.for('test')` is true.
your processes seem quite manual, eg "I will gather all of the code that came from the sprint in a build and have the tester go through it" doesn't sound great! With a greater number of devs you should really look at setting up an automated continuous delivery pipeline. If you're using bitbucket then Bamboo (also Atlassian) should integrate nicely. Every time code is merged into master it should automatically trigger a build process which will create your versioned build and deploy it to a test environment which you can then QA against. You can also set this up to work with feature branches so your QA can check branches before they even get merged (only once the PR has received approvals). That way master is always ready to be released since bugs get caught before they're even merged. When you're ready to release it should just be a case of pressing a button in bamboo and you're in prod. It takes a bit of time to set up but well worth it.
cool thanks for those explanations!!
Because a and {} are actually pointers to heap-allocated objects and not actual objects. When you compare them, you actually compare their addresses* and not the objects themselves. {} creates a new object instance so the first one is not the same as the second one.
Chart.js is the best alternative alternative to Google charts
I've had that issue. In VSCode prettier can connect to eslint and use it's rules
ddl is a variable, so you had it right to begin with, just make sure it’s a proper selector though
Check out the "change" event reference on MDN. At the bottom they have an onchange handler. https://developer.mozilla.org/en-US/docs/Web/Events/change function changeEventHandler(event) { // You can use “this” to refer to the selected element. if(!event.target.value) alert('Please Select One'); else alert('You like ' + event.target.value + ' ice cream.'); } Essentially, you do not need to manually query for the dom element inside of the function, since it is passed inside of the event object. 
But it is better like that. You don't have to worry about what client has installed, and you don't force anything for them to install. 100mb is nothing nowadays.
I think it's just general problem with floating point numbers - you should compare not using === but subtract numbers and compare absolute value with epsilon.
The browser is a terrible host anyway. Javascripts future is native come what may, not hybrid or dependent on browsers dom. React can already render on multiple targets like windows, linux and macos, but getting cross platform semantics right is still troublesome. There's something in the making that will likely change everything: https://twitter.com/shergin/status/1018537465257136128
Windows HTA ? since &lt; 2000 .
You got it. You have a typo in one of your comments, though. o.fun().salute() // Anna... ^ That should be `Alice`
There was a project to do something like that for Electron, but I'm not sure how far it got. You can look into .NET Core. 
The distinction between library and framework can be arbitrary. I will agree that some projects could fall into a grey area, but in the case of React vs Ember it's quite obvious that one is a library and the other is a framework, specially in the context of SPAs. React and Vue only care about what's commonly known as components (data binding, component tree, dynamic markup, etc). If you need SPA functionality you either have to use additional libraries (React Router, Vue Router, etc) or implement that yourself. Also, if you're building a single page **application** you are probably going to need to manage central state. Again, you can use other libraries (Redux, Vuex, etc) or code that yourself. Neither React nor Vue care about those things. Ember and Angular are very different beasts and include everything you need to build a SPA. Not only routing and stores, but also architectural patterns, generators, etc. Another aspect is inversion of control. Since neither Vue or React are enough to build a complete application your code is controlling these libraries. When writing an Angular or Ember application the framework is controlling your code. https://martinfowler.com/bliki/InversionOfControl.html https://stackoverflow.com/questions/148747/what-is-the-difference-between-a-framework-and-a-library
My problem isn't really the storage space, it's the memory. Each instance of Electron has its own instance of Chrome and V8, which take up a lot of RAM. 
&gt; The browser is a terrible host anyway for anything other than the web lol what? Web APIs allows 2D,3D raster graphics, vector graphics, video manipulation, sound synthesis, peer to peer, socket programming, database programming, and many many more. Unless you are replicating Avid,Maya or Call Of Duty Black ops in the browser most of its API are sufficient to build the usual LOB apps. 
Thanks! I changed it --
There was something like Electrino or Electrolite. It used Edge's engine though.
I asked about this half a year ago too and tried to keep track of them. - [Electrino](https://github.com/pojala/electrino) - Doesn't support Windows, very early alpha, utilizes the OS-native browser engines for rendering - [nodekit](https://github.com/nodekit-io/nodekit) - Hasn't been touched in 2-3 years - [Neutralino](https://github.com/neutralinojs/neutralinojs) - It actually uses your default browser and a mini-webserver - [proton-native](https://github.com/kusti8/proton-native) / [vuido](https://github.com/mimecorg/vuido) both based on [libui](https://github.com/andlabs/libui) - you'd have node running in the background, but it translates your reactive JS into a native GUI
[ScreenRow's className prop](https://github.com/BLBaylis/react-calculator/blob/master/client/components/screenRow.jsx#L10) is required but it isn't provided in [one case](https://github.com/BLBaylis/react-calculator/blob/master/client/components/screen.jsx#L8).
I haven't come across anything that simplifies this process...but you might want to take a look at the chordpro format. It's a markup for song sheets that's readable in raw form. Think of it as something like what Markdown does for formatted text, without actual Markdown formatting. It's very old, and most google results are for dead apps, but I'm sure there's something out there that's modern. If you use a Mac (which I don't, so I'm just spitballing here), you might find this useful: http://tenbyten.com/software/songsgen/Songs/ 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [BLBaylis/react-calculator/.../**screen.jsx#L8** (master → 7f6f2be)](https://github.com/BLBaylis/react-calculator/blob/7f6f2beb2d458ac72ca4e22ccd4695d4e099bd47/client/components/screen.jsx#L8) * [BLBaylis/react-calculator/.../**screenRow.jsx#L10** (master → 7f6f2be)](https://github.com/BLBaylis/react-calculator/blob/7f6f2beb2d458ac72ca4e22ccd4695d4e099bd47/client/components/screenRow.jsx#L10) ---- 
How is this better than https://github.com/standard-things/esm which has been available for nearly a year and works beautifully?
Why not just round it to like 15 decimals?
Break apart the business into key areas. Each area is managed by a scrum consisting of a BA, a scrum master, a lead developer and couple Sr/Jr/Interns. Not sure what type of business you're in, but you'll need to have multiple teams to accomplish this. At a large company I worked for they had dozens of teams with a similar footprint without any QA's. Use unit testing, end-to-end testing, TDD, CI/CD pipelines to accomplish the QA process. Hire devs that are accountable and can do work with little supervision. If you're going to manage a team this large you'll need to let go of the micromanaging and trust your employees to do work.
Because in some cases, instead of let's say, 50.0000004, it goes to 49.99990001 or something like it. So using less decimal places actually starts to take it further away from the actual number.
Dividing first might improve things slightly
PWAs are coming to the desktop. Then all PWAs share the same browser.
Ah nice spot. I suppose it simply isn't required in this case. Thanks!
I feel like everyone should produce a real js app before being able to truely see the benefits of react.
Create an object with each of the 12 words as property names and a function pointing at what to do for that word, check if the incoming word is one of the 12 names, if so call the function behind the word. For example: \`\`\`js const myFns = { 'a': () =&gt; doAThing(), 'b': () =&gt; doSomethingElse() }; const word = getInputFromSomewhere(); if(myFns\[word\]) { myFns\[word\](); } \`\`\`
I use an object with keys equal to your value. const matcher = { "test": testFunc, // defined elsewhere "apple": appleFunc } const req = await Api.get() matcher[req]()
So you would make 12 individual functions, store them in an object, and run each depending on which word was chosen?
It has its own instance of _Chromium_, which is much smaller than Chrome.
So now you've gone from an SPA being based around routing to something that cares about managing state and a collection of libraries? Somehow an IoC container has entered the mix as well. I really don't appreciate being talked down to, and at this point you're arguing for the sake of arguing. Framework, library, they're used interchangeably, if you want to be incredibly pedantic about the minutiae of what differentiates one from another, go for it, you got me. But even based on your stack overflow post, React could be considered a framework. If your goal is to create a website that drives HTML, both React and Vue would be: &gt;A software framework is a re-usable design for a software system (or subsystem). A software framework may include support programs, code libraries, a scripting language, or other software to help develop and glue together the different components of a software project. Various parts of the framework may be exposed through an API. Moral of the story is, SPA is a very broad and general term. Depending on who you talk to it means different things.
Why not just use a switch? Isent that what its made for? https://www.w3schools.com/js/js_switch.asp
Your complaints about what the DOM lacks is why we have programmers. The DOM doesn't have those things because it's the foundation we build things on. The DOM wasn't created to do things automagically.
But it is a safe web font and default system font on macOS + Windows. And if you're concerned about Linux, Bitstream Charter.
This. It also helps to get to know vanilla js better. It's the same situation with a manual and automatic drive. First manual then automatic.
I actually have this same question - I haven't seen switches used before. Is it bad practice to use them?
&gt; If you want to get away from JS, there's always Qt, Rust, and Java. And .NET Core as well!
Great analogy
No luck in getting this to work yet. Been studying this for hours trying different variations.
It's not bad practice to use a switch, but a lot of people have a lack of interest or care in using all the features of a language appropriately. Go and use the switch and be assured, this is what it's for.
&gt; So now you've gone from an SPA being based around routing to something that cares about managing state and a collection of libraries? Somehow an IoC container has entered the mix as well. Not really. First I was arguing that what constitutes an SPA is not related to the view layer. Second I was arguing about why Vue and React are not frameworks. &gt; I really don't appreciate being talked down to, and at this point you're arguing for the sake of arguing. You may take this in any way you prefer but you asked a question and I answered. &gt; That said, React refers to itself to a library Obviously. And guess why? Because *library* and *framework* are two different things and the terms cannot be "used interchangeably". &gt; Moral of the story is, SPA is a very broad and general term. Depending on who you talk to it means different things. A "single page application" is a very specific thing. I really don't see why someone could be confused about those 3 words.
I learned JS by learning Angular and developed w/ AngularJS and Angular2+ for a couple years before starting to use vanilla js / es6. Would not recommend. I would have saved myself so many headaches by learning standard JS first.
I'd probably just use a switch, to be honest.
`Totals[currency, 'quality']` etcetera is not what you think it is: It's not a 2-dimensional array access, that'd be `Totals[currency]['quality']` or `Totals[currency].quality`. Now, to the fix. Let's say `calcTotals` returns an object. Example output: `{ dollar: { quantity: 10358, cost: 281993 }, euro: { quantity: 8922, cost: 999101 } }`. const calcTotals = () =&gt; { const totals = {}; $('...').each(function() { const currency = $(this).data('currency'); const quantity = parseFloat($(this).data('quantity')); const cost = parseFloat($(this).data('cost')); totals[currency] = totals[currency] || { quantity: 0, cost: 0 }; totals[currency].quantity += quantity; totals[currency].cost += cost; }); return totals; }; Maybe, you want to output a different structure, like an array `[{ currency: 'dollar', quantity: 133, .. }, ..]` or a map `Map { 'dollar': { quantity: .. } }`. That's up to you; just modify my code. Btw, that's one of the worst markdown I've seen in a long time on reddit: For multiline code, indent by 4 spaces, no backticks needed. Also, one of the worst JS code: Local variables should be written in lower case. Finally, what does the comma/sequence operator mean in JS? It's legacy thing from the days of C which let's you sequence expressions. The value of the entire sequence equals the value of the last expression: `(1, 2, 3) === 3`. This means `foo[bar, 'quux']` is equivalent (with some exceptions) to `foo['quux']` or `foo.quux`.
V8 doesn't need a lot of RAM, though.
I like this pattern as well
{} !== {}
There is a way (but I would not recommend it). Not sure how it works, but my tax software relied on IE's javascript engine. And I know it did because I had an old version of IE, the tax software would have a bunch of errors on each page. When I called the company, they said 'update IE' and it worked.
Oh cool, thanks. How can I set it as a fallback font?
It no longer uses jQuery under the hood.
I think switches can be a bit error prone (forgetting a break will fall through to the next case) and more verbose. Switch cases don't get their own scope. Not matching a case will fail silently. A map of keywords to functions seems more intuitive. Heck, you can even write it all inline if you want: ({ 'a': () =&gt; {...}, 'b': () =&gt; {...}, 'c': () =&gt; {...} })[input](); 
You've got it - but I'd like to elaborate on a nuance. When an arrow function is defined in a constructor it is not "bound" in the same way as in late binding. References to `this` in the arrow function refer to the variable `this` in the parent's variable scope. That is standard closure scope: a function can refer to any variable in the parent scope. In other words, `this` is not treated specially by arrow functions; it is treated like any other variable.
It's Proton.
That makes sense - thanks!
 It's radically different from the old JavaScriptMVC, which after all was MVC based. It's been much closer to something like Vue's (MVP) for years. It provides custom elements, live binding, automatic list management, etc. Maybe check it out before pre-judging. A lot changes in 10 years. Maybe the confusion is that it's still about solving the common problems that most developers face: updating HTML, routing, modifying service data. This is what all frameworks are trying to solve. That hasn't changed for us either, but the tools and approaches taken have all been completely replaced since JavaScriptMVC.
Are you describing a switch statement? switch(variableName){ case "monkey": doTheMonkeyDance(); break; case "thriller": doTheThrillerDance(); break; default: danceLikeNoOneIsWatching(); }
This is a cool article - I’m learning JS now and I like that it sort of provides a “minimum for entry”. Thanks for sharing!
General rule - use if statements for contiguous data (eg. checking numbers between ranges) and booleans (does something exist? is it enabled? flagged for removal etc), and switch statements for discrete checks where you know of all the possible outcomes. Switch statements are a good way to explain to whoever has to touch your code next that this part of the code is working with very specific data - think checking the type of something - or that you are expecting a particular set of values from that variable.
When working with currency in JavaScript, it's important to avoid floating point error: const dollars = 10.10 + 10.20 // 20.299999999999997 Consider multiplying everything by 100 and working in cents until you're ready to display to the user: const cents = (10.10 * 100) + (10.20 * 100) const labelText = (cents * 0.01).toLocaleString('en-US', { style: 'currency' , currency: 'USD' }) // '$10.30'
What's being discussed is making this a standard feature of Node, without requiring external packages.
font-family: Georgia, 'Bitstream Charter', serif; It falls back in the order listed.
Thank you! [here's part 2](https://medium.com/@wesharehoodies/lets-build-a-fast-slick-and-customizable-rich-text-editor-with-slate-and-react-part-ii-3d3908d89664?source=user_profile---------4-------------------)
Great article but some sentences would need a bit of restructuring for grammatical reasons. Especially for a topic that can be confusing for some it should be precisely understandable.
Financial companies never stop finding unique ways to write weird, old code.
== and === for objects do not compare their values but their references so for example: ``` let a = {}; // variable "a" holds the reference to a newly created object here, let's call it Object ID 1 let b = {}; // variable "b" holds the reference to a newly created object, let's call it Object ID 2 However if you assign an already created object to a variable, you are not copying the whole object, you are copying the reference to that single object let c = a; // variable "c" holds the reference to an object created earlier (Object ID 1) This is why if you change a paramater on the "a" variable, you can also read it on the "c" variable. think of it like a shortcut or an alias. a.foo = 'bar'; console.log(c.foo); // prints out 'bar' in this case a === b would compare Object ID 1 to Object ID 2 a === c would compare Object ID 1 to Object ID 1 and would return true ``` If you think about it it makes sense... you don't want to copy the object value into memory whenever you assign it to a new variable... you only want to copy the "shortcut" or "reference" to that object. 
Thanks
Switch is the way to do what you want here. Why would it be bad practice?
Not at all i use them all the time.
The same thing happens in non-web technologies too. DLL hell is a pain sharing a lot of runtime does not really work even for strongly typed languages. Most of the time you install new .NET version or another Visual C++ Redistributable because each desktop program used different compiler settings and optimization. Multiple programs have their own .dll/.so version of the same library but for each contents are slightly different.
You mean writing bad code can be error prone? Duh? Forgeting a break... Cmon its what it was designed to do handle multiple cases so you dont write what OP said... Using an object is still fine but a switch would be easy to understand and read and you have the default case to handle unforseen cases. 
Would you say the same thing if I already have previous programming experience?
This solution is not new or unique and has been brought up several times to the Node org. They have a dedicated modules team now, so why not just wait and see what they come up with?
when you use !== you are asking if the variable is identical as the actual same object (in memory) if you use != you asking for the object content 
Yea and Oracle now pushing new Java and dropping support a lot faster, so either you pay or expect clients to upgrade JRE like 2 times in a year. I applaud but businesses do not.
Well, the server storing the information has nothing to do with Websockets. If you're doing something bigger you probably need a database for that. But if this is just a toy project, just create a hash visible to all the relevant routes/socket event handlers, and share the info there :).
I've been learning vanilla JS for the past few months. If you don't mind my asking, why did you initially decide to learn JS by using Angular? Was it kind of a two birds, one stone thought, given the overlap with AngularJS? 
My thoughts exactly. I sort of skipped the areas that specifically talked about react, and rather gained a list of ES6 features/syntax that I want to have nailed down before dipping into react. 
Never understood why it explicitly asks everytime instead of just updating
Yes I'm not super convinced about the benefits of dynamic linking anymore for a lot of user space applications
My horse is higher: People should spend a decade writing software on various platforms and know at least one CPU architecture inside out to be able to appreciate that React and people around it deliberately make simple things seem complicated to appear smarter - and the libraries and authors that don't do that. 
...That's the point, you define it somewhere once and use that version.
Okay I’m gonna have to do more learnin, but thanks for this!! And I’m really surprised how positive you were, usually when I ask for code help everyone’s such a dick haha. Thank you!
This couldn't have come at a better time. I'm really drilling in vanilla JS before learning anything else. I figure it's better to learn the "harder" way first then learn things like jQuery and React because it should be much easier. I was going to try learning React after I complete this current project I'm working on, but I was hesitant because I was kind of in the the mindset of "I NEEEED to master JS before I do ANYTHING else", so I feel more comfortable now to take that leap. Especially since this gives an idea of what I should really have nailed down. Thanks :)
&gt; == Equivalent === Actually the same instance. Incorrect. `===` means two values are equal. `==` means to value are equals after attempting to coerce them to the same type.
Are you trying to embed an image into a web page? What are you using svg.js for? It seems like you could just use html &lt;img&gt; tag for what you’re describing.
Much better version of my answer, I was lazy. Thanks.
What is an SPA then?
Ah. I skimmed and didn’t pick up on that.
No your just an idiot
Absolutely. 
I'm not trying to embed the image into a webpage - I'm using svg.js because I'm making animations that are generated by user input.
We've interviewed so many Angular devs who could not explain JavaScript basics, like the difference between var, let and const.
it just kinda happened organically. I was working as a graphic designer at the time and I did some design for web projects using angular, and it amazed me what our devs were doing with it so I started tinkering with it at home - and got addicted
Gotcha, so you already had some exposure in a professional setting? That makes more sense then - I'm learning now, following that developer road map people always post, and was a bit confused by that. 
I am reminded of the time I built a social network as a pet project with jQuery. You could make a post on it, which sent the string using AJAX, and then if the request was successful, the JS would make a new post item in the DOM. It turns out the latter part isn't very easy. jQuery has no idea how to make a new post item, so my initial solution was clone the latest post item in the DOM tree, then replace it's contents with the new post. But what if there were no previous posts in the group? So every group then had a hidden div that jQuery cloned every time it makes a new post, then removes the hidden class so you could see it. It was a simple application of jQuery and it was a mess. Thank heavens for React.
Here is the github repo https://github.com/hankchizljaw/mybrowser.fyi-project The font is called Domine
...then back to manual.
As someone who's learning React but has just a basic understanding of JS, this was pretty helpful! I understand that the sentiment seems to be that every React developer should have a strong JS background, but I think that having an article like this is really helpful as a handy "roadmap" of topics I should study and practice more. 
/s?
How does one email you their projects to be included?
How does one email you their projects to be included?
Cool, thanks! This'll be really helpful
New to Javascript and wanting to test my knowledge. var is pre-es6? let is a variable that can be reassigned, and const can't be changed? 
That's mostly right, but there's a little bit of nuance you don't want to lose. var is the original way you'd declare a variable in javascript. It was function scoped, or global scope if you were declaring it in the global scope. This meant that even if you declared it within an if block or a loop, it was actually instantiated when the function was declared or when the interpreter created the global scope. This created all kinds of hard to find bugs. let is a block scoped variable declaration. This means if you declare a variable with let with an if block or loop, it throws an error when you try to access that variable outside of the block. Behind the scenes it actually does create that variable when the function is declared, but the javascript interpreter now creates a temporal dead zone where accessing the variable throws an error. const means a variable cannot be reassigned. So const x = 1 cannot later have x = 2 without throwing an error. It is important to note that const DOES NOT mean that the variable is immutable. So if you declare an object const x = { y : 2 }, it is valid javascript to then say x.y = 3;
Thanks for the detailed reply. That opens up my understanding of them!
no thanks
pretty awful analogy
That gist is feedback on a recent discussion on that very same team. https://github.com/nodejs/modules/pull/150
You can't put an `if` in JSX, but you can move the `if` to a function and call that. Extract a function that handles the conditional logic, and call it.
I'm on my phone right now, but I didn't see any `if` in your gist. Let me know if you need more help.
edit figured it out: { repo.language === 'JavaScript' &amp;&amp; &lt;img class="card-img-top" src={require('../img/download.jpg')} /&gt; 
If you give more information about the problem you’re trying to solve people will have an easier time giving you a solution.
I wish you were my boss.
I am building an App in Reactjs right now and your article does a good job of covering the basics.. I have never setState() like they did in the article. setState(state=&gt; ( {noMore: this.what})); I always pass the anonymous in my onClick.
jQuery has both append functionality and HTML functions. It sounds like you were just not sure the best way to go and went with a simpler but messier way. You could do something similar to React's render function but it would be much harder if you wanted to bind events.
Lol, sarcasm, yes? I've had some pretty harsh bosses. I honestly think I was less productive and produced lower quality code because of micro-managing, pushy and critical bosses. I honestly expended a significant amount of energy just fretting over that next interaction, which made me perform worse. I have, I will say, had some bosses that have pushed me with some purpose, which can be a way you improve. But most are just slave drivers IMO. I honestly check in with my devs more because they need to know they're going to be held accountable, but I don't really hover or micro-manage to the extreme. I think it makes things worse.
Fuck React. I hate it. It has some good parts but I despise the amount of time I spend debugging its ecosystem over producing useful software. People will say react can be used by itself but no one is sanely doing that. I’ve been coding front end for a decade and React does everything I was taught to avoid doing in Javascript.
no. not sarcasm. my last 'boss' promised me 50/50 profit share. I made him 50k in a single week, he gave me $500, bought himself 2 brand new trucks, and then fired me on christmas week after I had just told him my fiance was pregnant. the boss before that forced me to hire her fuck buddy and I caught him at home on twitch playing video games numerous times when he should have been working and I couldn't not fire him because I 'did not have proper leadership skills' and it was my fault. she fired me a month later because I refused to break the law and remove cash from nightly deposits to fill her ATMs ( money laundering ) my boss before that used the same weak password on her root/admin accounts as on 5 different websites and a few of which were dumped online. I showed her her email/password on a pwned dump list and she refused to change her passwords. we got hacked and 35 servers were compromised and defaced a few weeks later. lost half of our customer base and they said they had to give me a pay cut. I quit.
Yeah, this is simplest factory ever 👍🏻
Check the docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce It’s an optional param that denotes the initial value. In your case it is unnecessary, but maybe the author considers it a good practice to specify it or something. 
You'll get an error with your solution if "arrays" is empty. Reduce takes either a starting value (the author's []) or it uses the first value of the array you're reducing. If it has neither it will throw.
The second argument you pass to `reduce` is the initial value for the accumulator. If you don't provide an initial value, `reduce` will use the value at index 0 as the initial value. Let's say that we have a list of dog objects, which each include a name and a breed, and we want to make an object that contains properties for each breed that hold an array of the names of the dogs of that breed. ``` const dogs = [ { name: 'Buddy', breed: 'pitbull' }, { name: 'Coral', breed: 'chihuahua' }, { name: 'Gonzo', breed: 'boxer' }, { name: 'Trixy', breed: 'pitbull' } ] ``` Without an initial value: ``` const breeds = dogs.reduce( (acc, val) =&gt; ({ ...acc, [val.breed]: acc[val] ? [...acc[val], val.name] : [val.name] })) console.log(breeds) // { name: 'Buddy', // breed: 'pitbull', // chihuahua: [ 'Coral' ], // boxer: [ 'Gonzo' ], // pitbull: [ 'Trixy' ] } ``` With an initial value: ``` const breeds = dogs.reduce( (acc, val) =&gt; ({ ...acc, [val.breed]: acc[val.breed] ? [...acc[val.breed], val.name] : [val.name] }), {}) console.log(breeds) // { pitbull: [ 'Buddy', 'Trixy' ], // chihuahua: [ 'Coral' ], // boxer: [ 'Gonzo' ] } ``` We could also use the initial value to make it easy to pull out only certain breeds: ``` const breeds = dogs.reduce( (acc, val) =&gt; !acc[val.breed] ? acc : ({ ...acc, [val.breed]: [...acc[val.breed], val.name] }), { pitbull: [], chihuahua: [] } ) console.log(breeds) // { pitbull: [ 'Buddy', 'Trixy' ], chihuahua: [ 'Coral' ] } ``` The [documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) is a great place to look for more information on `reduce`, so definitely check that out. 
Thread is incredibly long and pretty much the exact same discussion I saw around my PR and WebReflection's. I think it's the right way to go though, so let's hope it happens.
Not threads .pipe(map(thread =&gt; thread.author.id)) .pipe(toArray()) .pipe(mergeMap(ids =&gt; this.userApiService.getUsers(ids))) .pipe(concatMap(it =&gt; it)) .pipe(shareReplay()); but threads .pipe( map(thread =&gt; thread.author.id), toArray(), mergeMap(ids =&gt; this.userApiService.getUsers(ids)), concatMap(it =&gt; it), shareReplay() ); 
Check out arrays, iteration and setTimeout. 
You don't need to repeat calls to `pipe`. `pipe` simply acts as function composition - it accepts a list of functions. So you can just put all your operators in a single call to `pipe`. For example, from your code: return threads .pipe(map(thread =&gt; thread.author.id)) .pipe(toArray()) .pipe(mergeMap(ids =&gt; this.userApiService.getUsers(ids))) .pipe(concatMap(it =&gt; it)) .pipe(shareReplay()); You can refactor to the equivalent: return threads.pipe( map(thread =&gt; thread.author.id), toArray(), mergeMap(ids =&gt; this.userApiService.getUsers(ids)), concatMap(it =&gt; it), shareReplay() ); In regards to the type ("should it be `Observable&lt;User&gt;` or `Observable&lt;User[]&gt;`?"), think about what the type annotation is telling you. `Observable&lt;User&gt;` means "An observable instance, containing user instances." `Observable&lt;User[]&gt;` means "An observable instance, containing arrays of user instances." Looking at your code, `Observable&lt;User&gt;` seems to be the correct choice for your input parameters, because you're not working on arrays of users, you're working on users. However, if you return a different pattern from one of those methods, then the method should be annotated as such. Furthermore, there is mutation going on in your code. You should avoid this. I'm referring specifically to this snippet: users.pipe(map(_user =&gt; { thread.author = _user; return thread; })); You're mutating the `thread` object from the outer scope here. Since JavaScript works by reference in regards to objects, this means that when you change a value on an object, you change that value for *all references* of that object everywhere else in your code. This can introduce very nasty bugs that are hard to solve, especially when dealing with monadic functional constructs like an Observable, where everything is meant to be lazy, pure and side-effect free. You can fix this by instead *copying* the object onto a new object, and setting the respective new values on the new object. Thankfully, in TypeScript, there is a very neat shorthand syntax for doing exactly that: users.pipe( map(user =&gt; ({ ...thread, author: user }) ); It constructs a new object literal which is immediately returned: `=&gt; ({})` Then copies all properties of the `thread` object: `=&gt; ({ ...thread })` Then sets the `author` property on the new object to `user`: `=&gt; ({ ...thread, author: user })`
Ok I have done it with this: `var TimerQueue = (function () {` `var timers = [];` `var running = false;` `var currentInterval;` `var currentTimer;` `this.addTimer = function (fn, delay) {` `timers.push({fn: fn, delay: delay});` `function exec() {` `currentTimer.fn();` `clearInterval(currentInterval);` `if (timers.length &gt; 0) {` `currentTimer = timers.shift();` `currentInterval = setInterval(exec, currentTimer.delay);` `} else {` `running = false;` `}` `}` `if (!running) {` `running = true;` `currentTimer = timers.shift();` `currentInterval = setInterval(exec, currentTimer.delay);` `}` `};` `this.clear = function () {` `if (currentInterval) {` `clearInterval(currentInterval);` `}` `timers = [];` `running = false;` `};` `return this;` `});`
This is much better, but I think it's a bit verbose, and a bit confusing to read upon first impression. If you could build on top of this Symbol feature to support customisable accessors, like so: const safeData = Safe(data, { [Safe.or]: '$$or', [Safe.value]: '$$value' }); safeData.inverter.logicGate.$$or('Not an OR gate').$$value; Then it becomes a little cleaner. Personally I would prefer a pure function based approach: Safe(data, proxy =&gt; proxy.inverter.logicGate, 'Not an OR gate'); In this syntax, `Safe` accepts an accessor function that is executed on the proxy object. If the result of this function is `Nothing`, then it returns the default value if one is supplied as the 3rd parameter. If the return value is `Just`, then the value contained in the `Just` is returned. I think this is better because it hides the complexity of having to reference the `value` property from the developer, and removes the need to pollute the logic behind `Safe` with a bunch of Symbols.
View.js ftw? 
# A built in type that encompasses both null and undefined Unlike most languages, which have NULL, JavaScript has both null and undefined. Most of the time, they are used to represent the same thing - a value or variable not existing. Both suffer from null pointer exception. However, null is stored in memory and could mean that the variable is defined but not yet initialised, whereas undefined just means that a variable does not exist. In addition to the confusion already caused by this, JavaScript further dictates that: null === null; // --&gt; false typeof null === 'object' // --&gt; true Some languages (like Ruby) have the concept of Nil, which encompasses both behaviours, thus allowing new Ruby developers to not suffer from the same level of confusion that new JavaScript developers do. Since your language is based on JavaScript, I figured this was a big thing to point out. One of the "bad parts" of JavaScript that you should probably avoid in your language. # A Macro System I'm probably not the best person to be writing an example for this, because I'm not an architect of compilers. I've written parser combinators before, but the complex grammars/lexical analysis/recursive descent/non-ambiguity/polynomial time complexity details are far beyond me. The best I can do is explain what a macro is, and point you in the direction of languages/tooling that support macros. A language that supports macros will allow a developer to write a thing called a "macro", which essentially allows the developer to transform the *syntax of the language itself.* For example, if I want the syntax `f &lt;- list` to take the first item from the `list` array and assign it to `f`, then I can write a macro to do that. [Sweet.js](https://www.sweetjs.org/) is a tool that adds support for macros to JavaScript. You can see how one would write a macro that converts `async` and `await` keywords into their native promise chain equivalent here: [https://github.com/jayphelps/sweet-async-await/blob/master/sweet-async-await.sjs](https://github.com/jayphelps/sweet-async-await/blob/master/sweet-async-await.sjs) Other languages that support macros are Rust, Scheme and some variants of Lisp. The most impressive macro language would have to be Clojure (and its JS-variant ClojureScript), where critical pieces of syntax are implemented as macros (`core.async`, a macro that adds powerful concurrency coordination using communicating sequential processes, is a stellar example of the power a good macro system can bring to a programming language). There are however some pretty big disadvantages to macro systems. I could list them here, but if I did this comment would continue a while. Better to just research it on your own and decide for yourself. # A built-in primitive for coordination of concurrency ...Actor syntax largely differs between languages and libraries. You don't have to have it be actors either. You could simply offer something like RxJS included in your languages standard library (which I'm assuming there will be a standard library, as I did not see that being suggested...). If you do decide to go for the Actor Model approach, I found a really cool JS library with a very terse syntax that supports it the other day: [https://nact.io/](https://nact.io/) # Built-in currying (with support for placeholders) Currying refers to a scenario where a function will return another function expecting missing arguments if all its arguments are not supplied. For example: add = x y =&gt; x + y add 1 2 // -&gt; "3" add 1 // -&gt; y =&gt; 1 + y increment = add 1 increment 2 // -&gt; "3" There is plenty of source material on the internet about currying. It's a functional programming thing, but I've found it to be incredibly useful in multi-paradigm languages like JavaScript. # A cascade operator for getting/setting properties of variable neatly in a chain Hopefully this example from Dart will illustrate the idea: querySelector('#button') // Get an object. ..text = 'Confirm' // Use its members. ..classes.add('important') ..onClick.listen((e) =&gt; dispatch(confirmedAction())); // same as // var button = querySelector('#button'); // button.text = 'Confirm'; // button.classes.add('important'); // button.onClick.listen((e) =&gt; dispatch(confirmedAction())); try # Try / Catch is valid inside an expression In JavaScript, an arrow function can immediately evaluate an expression and return the evaluation. For example: const add = (x, y) =&gt; x + y; We can even have a little cyclomatic complexity in an expression should we need it by branching with a ternary operator: const isEven = x =&gt; x % 2 === 0 ? true : false; The ternary operator mirrors the behaviour of `if`/`else` flow, but there is no valid equivalent for `try` / `catch`. The following code is invalid JavaScript: const shouldUpdate = x =&gt; try checkUpdatePossible(x), true; catch (error) false; Meaning we are forced to expand the function into an imperative version (which can look ugly if surrounded by declarative arrow functions in a composed chain of functions) const shouldUpdate = x =&gt; { try { checkUpdatePossible(x); return true; } catch(error) { return false; } } Imagine seeing that monstrosity between 10 single-line arrow functions inside a call to `compose`...
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jayphelps/sweet-async-await/.../**sweet-async-await.sjs** (master → b8d0d83)](https://github.com/jayphelps/sweet-async-await/blob/b8d0d83932fccea49334db36b4a4690e5397fea6/sweet-async-await.sjs) ---- 
Oh yeah that makes total sense! I tried it out but now i get an error "Uncaught SyntaxError: Unexpected token (". I don't see any syntax errors though.. I know that it is cause by the second function (return function(event) ), since if I comment it I don't get the error.
##r/programming --------------------------------------------- ^(For mobile and non-RES users) ^| [^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| ^(-1 to Remove) ^| [^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/853qg2/ignore_list/)
Like what? 
I agree and would compound the statement to include other things also. It's not a bad idea to know what is going on under the hood because sometimes - just write your own js - is an answer. I think my comment is more directed at those who don't know how to do anything outside of jquery.
Did you install any dependencies?
I installed what was needed but nothing new. I extracted a few of the JSX bits to a separate component then it started. Even reverting it back to how it was causes the same thing to happen. 
Thank you very much for the detailed answer and priceless ideas. Wow, really, cool. I will try to implement each proposal.
Did you upgrade node and mom/yarn?
Nothing was updated at all. I just moved some code into its own component. 
&gt;create-react-app server using lots of ram and not loading pagehelp to run your application you do use node with npm or node with yarn. They could be outdated and causing memory leaks. I'd start with making sure you are running node 10 and lastest npm/yarn. No in the project, but on your laptop [http://blog.teamtreehouse.com/install-node-js-npm-mac](http://blog.teamtreehouse.com/install-node-js-npm-mac)
Latest everything. Works fine on all my react apps that are bigger than this one. 
Thank you. When I fill in my class for the jquery.each it returns no objects. If I test the .each just before calling the function it returns the proper objects.
Hello! While not this week, I made [redux-form-auto](https://github.com/dgonz64/redux-form-auto) ([npm](https://www.npmjs.com/package/redux-form-auto)), an automated validation and form generator for Redux working in React. See [the demo](https://dgonz64.github.io/redux-form-auto/demo.html) and play with it! At the moment it has bootstrap and [antd](https://github.com/dgonz64/redux-form-auto-antd) skins ([demo for antd](https://dgonz64.github.io/redux-form-auto-antd/demo/)). I would appreciate any kind of comment or suggestion even if it's heartbraking.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://www.npmjs.com/package/redux-form-auto) - Previous text "npm" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
I got started with JS by spending a year in a new Ember project. I had no idea, until I started with React, that I knew almost nothing about JS and was in a protective cacoon of ignorance.
Vanilla project from CRA? Or have you added something? 
Here's a fairly recent video. This will introduce you to a lot of concepts and this guy does an excellent job explaining. https://youtu.be/YMvzfQSI6pQ
How will you know that you have enough JS background to start learning React?
let also isn't subject to hoisting.
It’s a fully fledged front end for a blog. 
Sololearn. Worldwideweb or Goethe smartphone. Pretty cool for the beginning
Do you mean Vue?
first code adds a canvas(defaults to 150x300px), the second adds a favicon of running mario sprites.
I added unit testing and CI/CD to [react-innertext](https://www.npmjs.com/package/react-innertext) (for getting the innerText of React elements/children) and [react-multi-context](https://www.npmjs.com/package/react-multi-context) (for managing multiple React 16 contexts with a single component).
Codecademy is quite good if you are going from zero. 
thank you all for the replies, i ended up using SVGjs , this was suggested by @atkinchris , this library is the best suited for my app specifications
What does it say? How are you starting it? I mean, c'mon man. 
I like the idea of supporting custom accessors in the chain. I'm trying to be careful in introducing too much syntactic overhead for a programmer to think about (as I'm aiming for an easy to use and quick to implement library). I don't prefer the second pattern you suggested because it only supports one `or` or `handle` value and cannot be done multiple times in a monadic chain (it would instead require recursive calls to `Safe` if I'm understanding correctly). I really like this pattern in `Promises`, and I think it is why they are so successful. Thankfully, under the hood of the `get` function I have used, there is a `Maybe` monad running the show, so this is still staying pretty functional (just with some terse syntax). ~~I think I'll go ahead and implement the custom getter idea though. If this gets used a lot, I can see that being pretty useful just as long as the developer is clear to collaborators what keywords they have implemented on the chain.~~ Edit: adding these custom getters is adding a lot of comparisons each access. I think I'll just stick with the original method.
Agree about SoloLearn. Started there too. After finishing continued on w3schools
 var TimerQueue = function() { var timers = []; var running = false; var currentInterval; var currentTimer; this.addTimer = function(fn, delay) { timers.push({ fn: fn, delay: delay }); function exec() { currentTimer.fn(); clearInterval(currentInterval); if (timers.length &gt; 0) { currentTimer = timers.shift(); currentInterval = setInterval(exec, currentTimer.delay); } else { running = false; } } if (!running) { running = true; currentTimer = timers.shift(); currentInterval = setInterval(exec, currentTimer.delay); } }; this.clear = function() { if (currentInterval) { clearInterval(currentInterval); } timers = []; running = false; }; return this; }; *Formatted*
Actually better quality than most of the random guides out there in its focus on JS. It won't help you for data structures and algs, but I don't think a book should be combining all the subjects into one.
W3 learning by doing is also extremely good, in fact for the basics 
How do you do cross platform desktop apps in .NET core without e.g. Qt bindings?
Web app
You realize you're not really giving us anything to work with? At the very least you could point out which particular process seems to be hogging all the memory, what exactly it is you changed, if a stop and start (or even system restart) does anything about the issue, what version of each dependency (node, npm/yarn, npm packages, cra itself) you're using, if there's any error or log being printed to the console or if it just hangs, if the server is actually running but not serving any files or not running at all, what command you used to start it - literally anything at all that could actually help in diagnosing the issue
To be updated you can listen to [Syntax.fm](syntax.fm) . And apart from that You also need to develop soft skills and these skills will stay forever with you, The best resource to develop some soft skills is DeveloperTea at developertea.com.
Not really. I obviously don't think my particular experience makes me better than people, but I do think that React ecosystem is full of people inventing philosophical complexities to make the very mundane work of writing web UIs seem really clever and sophisticated. So when things like Svelte and Vue come along showing that you can get all the benefits without the smartassedness, I truly appreciate them. 
150+ matches ? You are not a programmer
Very nice, thank you!
lol
LMAO
Fairly new to Javascript here but, How is it possible for it to interact with Tinder? Can you do this with any app or?
It interacts with the website, not the app. 
*The Best Explanation of Reactivity in Vue
There are a lot of bots on Tinder
This was the site I learned on. It's pretty good, but it's worth noting that this site only covers ES5, which is kind of the legacy version of the language. The thing is, it's totally valid to learn ES5 first because all the concepts are still valid from ES5 in ES6, ES7, and ES8. https://www.w3schools.com/js/default.asp
You can grab an auth token by man-in-the-middleing yourself. There are lots of third party api wrappers for interacting directly with their api.
As someone who has just began with lealfetjs, I believe what you are looking for is [this](https://leafletjs.com/examples/layers-control/). Their API docs are pretty well organized. The link I posted is to a tutorial, but check out their docs too. As for handlebars, I believe that’s just one of the many view frameworks, and I don’t know what Sheetrock is, but if you can read data from it then you just plug it into your map. Edit: Also, after checking your spreadsheet, you are missing longitudes. You will need to find a dataset for country lists (they range from MB to Gb+.) unless mapbox provides that too in their datasets. Then, since you don’t have ‘where’ in your spreadsheet, I used {{cell. CUSTOMER}} instead. Without quotes. Lastly - for now until I get to my laptop - I am not using mapbox, but check with leaflets docs to see how to get the map to display. Maybe 18 is too much zoom. They use mapbox too for many examples and I think a tutorial or 2. I hope that’s a helpful start. 
Interesting 
I collect all my JavaScript free tutorials on https://flaviocopes.com/javascript/ might want to check it out!
I just learned hot to make an automated script and now thinking of all of the other useful applications for stuff like this. Thank you
Basically you can paste in js code on website that tells your tinder website to click unmatch a lot. So all it is doing is click certain buttons for you and that's easy for computer to do.
You can use promise or async functions so that instead of setting 500ms timer, the next function executes as soon as the previous one is done. Like dominos. I suggest you look into that. Not only it'll be faster but more reliable. Look into fetch and then functions
If OP is not a straight guy, then it's totally reasonable. In general, men swipe right by default on Tinder and women swipe left. If you're SEEKING a guy, it's very, very easy to get matched.
Just a bit of feedback. It appears that the script will remove any matches you've messaged, but it doesn't remove matches you've not messaged.
Might want to notes this is for ES6...
There’s going to need to be a really amazing font ligature for this syntax, because it’s ugly AF in any normal font.
Because a thing was designed to do a thing does not mean it’s the best thing to use. Having such a poor grasp on logic must make programming very difficult for you.
What is it that you're trying to achieve here? 
Im not saying its the best... There is no best just better and worse...
LMAO
my pleasure!
yeah sure, but I had only 1 match without messages and i removed it by hand.
This example just scripts deletion through their UI though.
Nothing wrong with quick and dirty. However you posted a code sample on an enthusiast forum and got feedback on your code. Lots of people here are learning so you shouldn't take offense.
not any app. if you want to do fancier stuff than pressing 3 buttons, then you have to use selenium, webdriver and other automation tools. btw there are websites that block js-clicking by using some hacks in their front-end. I was lucky that Tinder wasn't one of them. Otherwise I should have used selenium.
You're defensiveness is rubbing me the wrong way, how have you been coding for three years but are so offended by criticism?
Is this how you respond to code reviews? Good god 
just explaining why i didn't design it for this case. chill :D
Lol i'm not the one who needs to chill. Good stuff though
Didn't want to sound offended. I was ready for this criticism. If I was the code reviewer of this one, timeouts would be the first part I would suggest to be removed.
I am not sure if i got your question right, but it sounds like you want this [https://www.w3schools.com/jsref/met\_element\_removeattribute.asp](https://www.w3schools.com/jsref/met_element_removeattribute.asp)
Nice! Now I can unmatch my two matches in seconds!
Sorry to be a Debbie downer here, but I'm pretty sure everyone already gets unmatched when you delete the account. Source: 0 matches after restarting my tinder quest.
You could do that but you still need something to check the state of the page. In frontend testing you might have a function called `wait(selector, callback)`, which can wait for a certain element and then execute a callback. This is similar to the setTimeouts, but it would execute immediately once the element is found. Instead of using a callback you could add a `Promise` and use `.then()` or `.catch()` when a time limit is reached. The problem I have with his script is it's too slow and dependent on the speed of the API responses. He had to have given some room, but if a response comes back late then his script crashes. For example: ``` Cannot execute click() of undefined. ```
 document.querySelector('script[nonce]').remove() Is this what you want?
that's true.
yeap. it is not the best implementation. that's clear!
Still, if one can tinker with javascript, I don't see why one wouldn't. I sure have had a lot of fun making stuff much less useful than this.
Hi /u/hdaen, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/FuzzyMelon-, please do submit posts knowing that they are off-topic; if it's not JS, then it doesn't belong here. There's a plethora of web-related subs you could post in (many are listed in our sidebar). Thanks for your consideration. 
There's always a place for learning new things. But there's no barrier, if you know what classes and functions are you can go ahead and pick up the rest while you write code or study examples.
Overflow: visible my friend
What's a normal number for a guy to have?
I think a [fiddle](http://jsfiddle.net/2s9614j5/2/) makes it clearer. `overflow: visible` would flood all the content out of the wrapper.
Are you using macOS? If so, check out [this hack](https://davidwalsh.name/osx-overflow). However, scrollbar style will vary depending on the operating system and browser. Instead of platform specific behavior, you could change the container height so that the last item is only partially shown. To make this a bit nicer, you could also add a fade effect.
I am on Safari but cannot gurantee that someone visiting the page does not use Firefox or Edge. Your advice was exactly what I've tried initially but I was sort of not happy with the result, thank you though!
Stop this stereotype bullshit.
The multiplayer-game demo on glitch.com sounds like it would be a great example for you: https://glitch.com/edit/#!/multiplayer-game It is node express based using socket.io to communicate with the clients and relay positions of players back and forth. Lots of comments and a working example. You can even remix it and start debugging all inside the browser.
Yess thank you. I already have it to where it relays positions back and forth so we can all move around and see each other. I just need it to where the server hosts the same coordinates to everyone. I’ll check it out, thanks again! 
3\. With only one of them responding
It is [JSX](https://reactjs.org/docs/jsx-in-depth.html).
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://reactjs.org/docs/jsx-in-depth.html) - Previous text "JSX" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20e2szqdf) 
It's called JSX. It takes a JavaScript transpiler like Babel to convert it to valid JavaScript, because you were right in your initial assumption - it is invalid JS and does not normally work. It is used by libraries like React as shorthand for longer function calls, to make development faster. A custom transpiler is written that tells Babel how to convert it to real JS. This transpilation has to happen before any browser can run it. These libraries tend to come with the transpilers prepackaged to make the setup pain free.
Pug is kinda neat, but if I don't need to write actual HTML then I'd rather just use [hyperscript](https://github.com/hyperhype/hyperscript).
Create an issue at [the typescript repo](https://github.com/Microsoft/TypeScript/issues), the community is pretty helpful.
Will do, thanks
JavaScript xml. It’s a combination, as this poster mentions. Transpiled to js that will run in your browser with something like Babel
Pug is fantastic. Reusability is great, and using in combination with Node for server side rendering really helps when presenting things like lists. But why not just use React or Vue or even Angular?
PMs love him!
overflow: scroll
I've been making progress on my project to make furniture with JavaScript. [Repo](https://github.com/O-LAP/home)
It depends on the situation, but I too prefer this approach. \`if\` and \`switch\` are really specific for checking something. For more complex / different logic (let say doing something based on an action keyword), I think using objects is cleaner.
Javascript30
I just finished coding my first javascript thing. I followed a tutorial which helped a lot being new to javascript and all, but I finally finished it today and made some pretty neat randomly generated images, and can kinda read/understand script better!
Too much cruft)):){}
Can pug be used 100% client side?
Just use regular string templates.
read the article
Better than &lt;\&gt; and closing tags
Hes probabbly white and blonde or any kind of girl
I think this is because document.querySelector('test-game') doesn't guarantee you'll get a result (you could also get nothing if it doesn't exist). It should compile if you just do if(oGame) { oGame.setState(oState); }
I'm not convinced of that)), parm2))), {a: specialValue}))
I use Pug in Vue.
Or if he's a straight male then he could just be white. 
Could be E4X... _runs away_
You just blew my mind. Why? What’s the benefit for your particular usage?
Particularly, on my single file components, I use Pug instead of HTML. It's just nicer to use (looks cleaner) and allows me to create reusable templates (kinda like cheap static components like svg icons and the like). One of the other niceties is being able to work better with whitespaces.
Yes, I used to use it this way when I still used it.
I never thing of try this. I will use in my next pet project to test. Some tips or pitfalls you find while developing this ? 
&gt;You could do that but you still need something to check the state of the page. In frontend testing you might have a function called `wait(selector, callback)`, which can wait for a certain element and then execute a callback. This is similar to the setTimeouts, but it would execute immediately once the element is found. Instead of using a callback you could add a `Promise` and use `.then()` or `.catch()` when a time limit is reached. [I wrote](https://gist.githubusercontent.com/BehindTheMath/538f898838987b6d458b3cad7d443298/raw/295324867426bf27cc3a2bab1d26e8dda3fe8eec/QuerySelectorASAP.ts) something like this a while back. It's in Typescript, but to use it with JS you can just remove the types. 
One big hurdle is just tooling. Hard to configure your editor to highlight it properly and the errors you get can be quite obtuse. Other than that, just be aware of the levels of escaping available, it's one more layer to escape (\\\\, \\/) but most people won't run into such issues often enough... However, no big problems. I enjoy commenting with // instead of the ugly &lt;!-- --&gt; thing and Vue bindings work nicely without commas: `component(:value="model" @click="onClick")`.
The TypeScript compiler will omit `import` statements that are solely used for types. In your case, it was omitting the `game.js` and `main-menu-state.js` imports because you never used `Game` or `MainMenuState` as values; only as type annotations. Type annotations aren't there in the compiled runtime code, so the import statement doesn't need to be there either. Fortunately, you don't need to type-check the objects -- or change any other logic -- to fix the problem. You simply need to force your modules to import for their side-effects. import { Game } from './engine/game.js'; import { MainMenuState } from './menu/main-menu-state.js'; import './engine/game.js'; import './menu/main-menu-state.js'; Alternatively, refer to the imports in a value position so that the import statements aren't stripped. Game, MainMenuState; // no-op statement Explained here: [https://www.typescriptlang.org/docs/handbook/modules.html#import-a-module-for-side-effects-only](https://www.typescriptlang.org/docs/handbook/modules.html#import-a-module-for-side-effects-only)
You got 150+ matches? Damn. I don't have to use this script.
on jaxer!
Does it work with `super.foo()` calls? EDIT: Doing `this.bar = 123;` within a method will modify the private object, not the public one, right? How should methods modify public fields?
By `super.foo()` I was referring to the ES5 equivalent, `SuperClass.prototype.foo.call(this)` Put another way, if I have a class Animal and a class Cat that extends Animal, how can Animal have private properties that are inaccessible from Cat?
"INexperienced"
Ya, It wont help for DS and Algs but peoples can get the "idea" of ds in JS. 
Merely defining the methods on constructor.prototype won't work. There are additional complications when calling an overridden super-method that needs access to private properties of the super-class. This is possible to workaround, but it imposes implementation details on the subclass.
JSON-LD (JSON Linked Data) is a description of the content of a URL so that search engines don't have to guess the content of the URL. It also contains references to other URLs and a description. It generally describes "Thing"s with their properties as they are defined by schema.org. Like an Event has a Location (which also is a Thing and can be represented by a URL) and a description, …. JSON Schema is a JSON definition of another JSON document, like what DTD (Document Type Definition) is for XML. It describes, which fields are required, if properties are another object, array, string or number and so on. An example for the use of JSON-Schema with Java: If you want to use a JSON-Api and have the JSON-Schema of the objects, then you can generate the classes automatically rather than write them on your own.
If I run the code I'm pretty sure I'll get some undefined error on the matches variable
Lol I have over 150 matches in just a few months and selectively swipe right as a guy swiping on women. I'm not trash swiping on uglies. 
That's exactly it thank you! I learned something new today
https://watchandcode.com/p/practical-javascript https://www.freecodecamp.org/ https://developer.mozilla.org/en-US/ https://www.youtube.com/user/TechGuyWeb Traversy Media https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg Net Ninja
Never understood the appeal of pug/jade especially in large files with lots of markup having to worry about indentation is more trouble than its worth. Also if you're starting with a premade template and have to convert it all to pug. No thanks.
Any guides?
Holy shit that is some ugly code
I notice you are getting down-voted, and some of the reason for that is probably because Reddit is a terrible place to read code. It would probably be better if you posted with a link to a pastebin, or better yet a GitHub Gist.
I prefer ejs to pug. That said, I only actually use react.
You should never set your unfetched state as an empty array because then you wouldn't be able to tell the difference between an empty state and a loading state.
Thank you for the support guys. More snippets to come. Feel free to make suggestions. (I have already some for social media and betting apps)
Kinda sad that their own site is flashing fonts on load, and isn't really responsive..
I have created a new example with inheritance here: [https://gist.github.com/fedler/dbc65d146dc5dc615bd6dedc4c1451b2](https://gist.github.com/fedler/dbc65d146dc5dc615bd6dedc4c1451b2)
Got it. You're right, sorry for misunderstanding. It was a draft text from another page which ended up being published before my review (I'm not the only author). Anyway, all content went through a few rewrites already and that quote was definitely an over the top generalization, so it's removed. 
What's the difference between pug to haml or slim?
So if I’m correct this is kinda like Jade but then with ejs like template logic?
Oh my! Not appealing to me at all. If I was going down a route like this then I’d certainly just use Pug. 
If you use a primo editor like Webstorm, syntax highlighting is basically perfect. If you can afford it, I highly recommend the investment.
Not sure what you mean. A browser wont understand Pug directly. It’s transpiled to actual HTML for the client. 
1) If you're losing track of indentation in Pug it's probably a sign your modules are too big and you should split them up 2) There are tools which let you convert HTML templates to Pug online. Just type pug to html into Google!
Why not use jsx?
Nope, Pug is the new name for Jade. It is literally Jade.
Ah, thanks, that clarifies it!
Vetur for Visual Studio Code supports it perfectly. We use this in our own projects. My biggest reason is that I noticed that it's not uncommon to have hard to track layout bugs in large templates because people close tags in the wrong place or forget to close them at all. For a lot of mistakes Pug will not fail silently. Also mental mapping between selectors and target tags is seamless. Finally, once you get used to the YAML-like syntax (and it doesn't take long) , SFCs with pug templates actually become much more readable. Now when I have to work with plain HTML it's such a chore. 
It used to be possible. But no more. "Modern" web browsers won't display the scrollbar unless the cursor is on the element, or unless the contents dimension is actually greater than the element. This issue is browser specific, and any fix would be different accross web browsers. And it can't be automated using client-side script.
URL variables can be accessed from `location.search`, so use that instead. e.g. if (!(/[?&amp;]pfail=2/).test(location.search)) { location.search += (location.search ? "&amp;" : "?") + "pfail=2"; }
Data &gt; markup
It's why json won the API war over XML based webservices. Funny how the arguments are the same.
Yes, React is better than Angular since it actually solves the UI problem.Angular is trying to justify its useless existence by trying to be JEE in the browser with an IoC container. A dynamic language doesn't need an IoC container.
https://jsbooks.revolunet.com Plenty of free books.
It's actually pretty bad for JS but extremely good to learn HTML and CSS, especially CSS layout.
Several things about this make me think this guy doesn't actually understand currying but is just repeating what he heard from somewhere else.
I've somewhat found an answer. The old jade.js could do a client side transpilation. I can't find a maintained version.
Because sometimes you are not creating an application. You are just rendering static documents like emails or PDFs server side
Json won over XML because it was simpler.
Because not everything needs to be overcomplicated? 
If you're using express.js you don't need to transpile it... Express will recognize it. https://expressjs.com/en/guide/using-template-engines.html
Hence my question, as jsx is as easy as can be. No new language to learn, just js and html
Complication for the developer is not the only form of complication that exists, and is frankly one of the least important. 
This has always baffled me about their core teams vision. How far do you need to obfuscate away a framework from the language it's written before you realise "you're doing it wrong"?
No problem :). If you're surprised by seeing the `storage` variable used inside all those functions to persist data, the concept is called a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures). But.. if it helps, sometimes people are dicks purely because of the *form* of the question. For example, this one may have been better for /r/LearnJavascript or /r/LearnProgramming, people on /r/javascript may object to teaching people stuff :). Also, you described the problem quite well, but sometimes a code example with the important bits says more than a thousand words.
Oh yes, that's one I haven't considered, No worrying about forgetting to close HTML tags and general HTML weirdness (such as self-closing tags). And yep, I use Pug, ES6 and SASS, but I guess jumping to CoffeeScript would be a bit too far, because even though it's indentation-based, it's very much a nightmare to read sometimes...
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
0 with 0 of them responding
What's the advantage of this over just writing a Javascript app to be rendered on a web browser as a native app? It seems unnecessary to me, but I may not be looking at the right use cases. 
&gt; A lot of people get confused in between currying and partial application and many of us does not know what, where and when we should use them. IE: I was confused and just learned this.. So naturally, let me teach you.
Oh I agree. I needed this for a non-GUI fun project, with Javascript as a scripting language. :) One use-case could be a native Android game, with Javascript as a scripting language for modding.
Oh, that sounds pretty cool, thanks for making it clear,and good job! 
Lol bless your heart. 
Yes pug.js can be used entirely client side. It's entirely js.
No but the complier and renderer can both run in the browser
All solving the same problem. Depends on the flavor you like.
He never said he is trying to improve the code, just sharing. He noted why he made that design decision and moved on. I don't see a problem with his response.
Pug is Jade right?
Cool
Are there any guides on this?
Thank you very much for your help.
no, there is nothing string templates can't do that "pug" can. In fact if you are going to use a different syntax, just use a html builder in pure Javascript.
What do you think is the most complicated? using plain javascript or using a template engine that use strings with its own syntax? 
Sorry, I don't use it anymore. It did some things that I wasn't too fond of.
after a treat of lawsuit.
it's because currying is mostly useless in JS since its type system doesn't support automatic currying like Haskell or OCaML.
Of course, using JavaScript's inbuilt template strings would be less complicated for the server but more complicated for the developer and likely much more difficult to maintain or reuse. Pretty much every language has string interpolation but pretty much every language also has templating engines for a reason. 
The creator of Angular is a Java "agile" consultant at Google. Of course he is going to want to replicate the whole cargo culting of useless abstractions as it speaks to the "enterprisey" crowd. The things AngularJS had for itself is jQuery support to migrate legacy applications and good testing facilities when setting up front-end tests was complex. It isn't today and nobody's migrating jQuery apps anymore. Angular is a bit like backbone now, as it doesn't really solve the actual problems it is supposed to solve (the UI), but comes from "feel good" libraries like yet another ajax abstraction or validation ... React on the other actually fulfill the promise that web components didn't while still being close to how the DOM works. React success isn't an accident. 
You can, but you really shouldn't. At least not in production.
With Pug, you save a lot of special chars, especially any kind of tag characters. You can also use CSS selectors to build your HTML elements. e.g. div#app h1.primary My title will render to &lt;div id="app"&gt; &lt;h1 class="primary"&gt;My title&lt;/h1&gt; &lt;/div&gt; It also supports many common template patterns like extension, inclusion, blocks, macros, loops, conditions, it automatically escapes output to prevent XSS etc. String templates don't do any of that. Stop saying they would.
JSON is simply a lot smaller than XML. That's especially critical for mobile APIs. It also has basic types right out of the box.
So do you render the HTML then do a innerHTML replace? How do you listen for clicks, etc. on the elements since it’d be outside Vue’s control. Big use case for me is rendering XML in a clean way through JavaScript.
That's something either I'm confused about or many others are. I was under the impression that writing a function yourself that takes one argument and returns another function that takes one argument (etc) is a curried function. But this article suggests currying is what things like Rambda do where you input a function with an arity greater than one into a `curry()` function and it will output a curried form of it.
Why not? Precompile the template and use the render fn. What's your rationale behind not using it in prod? 
You would need a templating framework to do this in which case using something like Vue in conjunction with Pug makes a lot more sense than just interpreting Pug in the browser. 
I actually use Scss and ES6. For some reason curly braces are OK for everyone but no one minds not having to deal with HTML or XML ASAP. 
I see where the problem would be with large files with a lot of markup but HTML isn't handling these with any grace either. In the end having large files with a lot of markup IS the problem. Even outside frontend frameworks, Pug addresses this with composition/inclusion. 
Slim is more common in Ruby, Haml ditto and Pug in Javascript ecosystem. They are all very similar and it's mostly NIH frankly. 
I'm pretty new to javascript but I can already tell I hate putting &lt;% %&gt; around all my javascript within node and I was wondering what solutions ya'll have for this?
Technically the latter is "currying a function" (i.e n-arity to nth-order transformation). It is a good technique to know but per se isn't all that useful in languages that don't support it naively. Even higher order functions seem to confuse people (i.e your coworkers) so I imagine going all Ramda would just piss people off, for very dubious, mostly aesthetic benefits. 
Simply out of bare theory. Instead of having the required calculations (lexing, parsing, compilation, execution, rendering) **once** on your development stack and then never again, you put them on the client **every time** they run your website. This is just wasteful in every regard. Transpilers shouldn't turn into runtimes, and Pug is a transpiler, nothing more. The technology your browser likes is not Pug, it's HTML, CSS and JavaScript. And that is what you should give it, to keep things as stable and performant as possible. Always transpile either on the server-side, with proper caching, or during development. Pug's client-side rendering is only for development/testing purposes.
Just so you know, even though you probably already do, you don't need to prefix div to id's or classes, simply using #app will create a div with the id of app. Same with .app applying a div with that class.
I was referencing a component within its self 
No. Vue supports Pug in Single File Components, which means Pug is transpiled to HTML and Vue uses the HTML template.
When I said "just" what I meant is that I don't need to add any template compilers or use any non-standard syntax - it's just plain JS (or TS) and my editor tooling already handles that very well.
Oooh! That’s pretty great then. Anything in particular you enjoy over vue’s templating?
So is writing a higher order function with arities of one not currying at all? It's confusing to me since I feel like the pattern itself is what is important and not whether it has been "auto-curried" or written manually.
&gt; String templates don't do any of that. Stop saying they would. To be a bit more accurate: you can build that functionality on top of string templates if you wish, but why not use an established templating engine if you're going to go to all the trouble of building and testing one yourself? 
Yes I know that, but for people not knowing that it can be confusing :)
This was kind of a spur of the moment thing, a website was pissing me off so I decided to look around for some kind of custom html/css scripts(now I know it's called javascript) to make things easier for me and well kind of got lost after an hour on reading how to do what I wanted to do, so went into the internet's largest forum to ask a question lol.
Dude, was I making it too hard? lol.. Thank you so much, I've freaking wasted an hour or two trying to figure out the snippet of code from above from a tutorial from [here.](https://stackoverflow.com/questions/10675049/greasemonkey-add-parameters-to-url) I have a question though, what are the `[?&amp;]` for in the if condition? are they just syntax to point into the location.search of the query? I remember trying to do something like that but it ended up appending in something like :`https://www.text.com/file1/file1-2`&amp;pfail`=2?id=155&amp;s=beta` basically it added it before the query.
I would suggest to take straight into decent content, like frontendmasters.com has. It’s not free however and rather pricy, but really pays off well in the end.
Don’t think he knows what precompile means. Yes once you precompile most of the work is done and it works great on the client. Been using jade on the client for like 7 years.
PRECOMPILE.
Gesundheit.
I use vue templating while enjoying the cleaner syntax, there's no point in rendering using pug, since it's not running in runtime like Vue is. But it allows for some static reusable components like svg icons and better control over whitespace.
Currying is the translation of a function with an arity greater than one into a series of unary functions. Whether you write that curried version manually or use a currying function makes no difference. 
This is absolutely horrific
Really good job on that. Was hoping for the code but I understand why it was not shared. Still a great watch. Thank you.
It's not an article, it's some contradictory crap
Git: https://github.com/msteckyefantis/omnipresent
But if you write the function from the beginning like that, then it is not currying?
uhh python and PHP are very far from the only options remaining. there's tons and tons more. to name a few, java, scala, go, ruby, clojure. JavaScript itself is a decent choice for a backend language. generally, different fields will have different preferences for languages. you'll never see ASP.net in the startup space, where JS and ruby are more common. ASP.net is more common in large older enterprise like banks. do some research on where you'd like to work and see what they're using.
You should use a `hasOwnProperty` check for `addGlobally` rather than `!!` since currently, with `!!`, falsy values can get assigned to `addGlobally`. addGlobally({ addGlobally: '' }) // OK
Why is this getting down voted?
good catch, thank you I'll fix that, i'll put a shoutout to your reddit name on the git commit -- edit fixed: https://github.com/msteckyefantis/omnipresent/commit/d951c293e29218186965e5bcc8235101542d064e
Ruby Elixir Python JavaScript (nodejs) Java Go Rust Scala (it saved my life) Plus many more I’m sure They all have their pros and cons and there’s entire sites dedicated to comparing them. If you don’t want to learn a whole new language just stick with node, it’s pretty decent. 
wow, that's a lot of React fanboys here :) Dependency injection solves a particular set of engineering problems. A lot of the project architecture comes down to just dependency management, and that's where concepts allowed by DI shine. It's actually part of the SOLID principles, which are very much applicable in JavaScript projects. By providing an out of the box solution for DI, Angular facilitates a clean way for dependency management, which makes it easier to write maintainable code. Also, I saw someone said something along these lines: "React came up with a very smart way to pass props between components solving a problem that Angular does not have". That was referring to the fact that in Angular projects you can easily use services to pass data between components whereas in React you need to decide on some state management mechanism.
I like `cond`: ``` const handleUpdate = cond([ [isA, handleA], [isB, handleB], [fallback, unhandled] ]) const update = { some: data } const result = handleUpdate(update) ``` `ramda` has it or you can write your own pretty easily.
Python 
I have come upon this issue and wrapping the use of the audio.duration with a window on load gets the correct value: ``` $(window).on('load', function () { console.log(audio.duration); }); ```
In PacMan, the player gets a corner-cutting advantage over the ghosts. Curious to know if it would be too much of an advantage in human vs human play.
This looks awesome. Great job!
Do you really need a native app for that? If you just have customers using Android you can get all the features using a [PWA](https://developers.google.com/web/progressive-web-apps/) istead. On iOS everything except push notifications will work as well. You can "install" the app to the homescreen and it will look like a native app and you don't have to deal with app stores. They are also saving a lot of first time setup time for users because it's just a small website instead of a wrapper with a lot of bloat.
Depends on who you want to get a job with. For Google, something like Go would be a good choice. For the government or big enterprises, Java, .NET, etc. are still prevalent. Python is a good one because it's used almost everywhere these days. For fast prototyping, ruby, grails, etc. seem to be the preferred tools, but the implementations I have experience with didn't scale and they had to be completely rewritten (YMMV). 
It's not a pattern tbh. It's a tool. If you were to write an nth order function instead of nary function that's fine but not quite the same. The idea behind currying is that it is used when for some reason (partial application being the most common) it's beneficial to curry a function that is otherwise more useful as an nary function. 
I use it in a project with more than 100 components and it works great. The future seems to be [https://github.com/Polymer/lit-element](https://github.com/Polymer/lit-element) though.
Specifically for JS I would get familiar with node.js and something lower level for when JavaScript is sluggish, rust would be a good pick.
Which those of us who love hyperscript love too, smaller, simpler than JSX
From what I see Java still rules the enterprise backend. However a JavaScript programmer who knows Python or C# very well is incredibly marketable, it really depends if you're targeting startups, finance or cloud - just don't bother with PHP.
I prefer handlebars personally. Like that it’s just sugar over html instead of an entirely new thing.
&gt; I'm concerned that — with so many objects — &gt; memory will be an issue. So make a test, and create simple app with `( 100,000+ ) of “Map Objects” ( Markers, Paths, Path Segments).` and check performance on various browsers and devices. Maybe you try to solve problems you don't have. 
I agree. You get what you pay for. 
And const is also block-scoped.
I think that you could start to learn JavaScript whilst learning React. You would find areas to explore later outside of React but that’s fine.
Is the vector art rendered to PNG, or drawn as a vector? If it's PNG do you have several sizes for different screen sizes? If its vector how do you render them in JavaScript?
All languages mentioned here are fine. But ultimately, you’ll learn what you need to learn whenever. So if you get a job where some Java is required, you will probably learn some Java out of necessity. Knowing some JS is a great start and looking at Node.js will help initially.
Hey thanks for this information! 
Yeah it is
It can be done using SVG or through the canvas element in html5. In the case of this game, the canvas element is being used.
That is definitely currying. Not curried: const add = (a, b) =&gt; a + b const five = add(2, 3) Curried: const add = (a) =&gt; (b) =&gt; a + b const five = add(2)(3) Currying is making a nonunary function into a series of unary functions. The means of getting there are irrelevant. 
Okay thanks for that answer. Im working a bit with node.js while programming a Discord.JS Bot with Node.JS and running the Bot on my Ubuntu server. Then I tried creating a webserver with node.js aswell but need to learn this aswell cuz i used php some years ago. Node.JS is very different to PHP imo \^\^ Will see what I can do with node.JS. 
Finance is too much math \^\^ Whats the difference between startups and clouds in programming ? I would like to work in startups but I dont think that startups searching less-known ppl which comes fresh from education.
Im struggling between Python and Node.JS. I guess Python is more used in companies then Node.JS. So I would be better with python or?
This is incorrect. A curried function is any function that takes multiple arguments, but does so one at a time. Has absolutely nothing to do with the usefulness of the function in one form or the other.
Currying is incredibly useful in JavaScript. You don't know what you're talking about. 
Thanks for the comment. Unluckily, push notification is a core feature of my app, Also, PWA support is not wide as Cordova apps.
That's apples and oranges. Node.JS is a framework for using javascript on the server. Python is a scripting language. Personally, I already made this choice for myself and went with Python. 
Companies of all shapes and sizes often rely on one or more pieces of each. I've seen all of them used in every kind of company; ignore "{x} is not used for {y} business". Take a 6-sided dice 1 - Java 2 - Python 3 - NodeJS 4 - Rails 5 - ASP.NET 6 - PHP Best 2 out of 3, best 3 out of 5 or best 4 out of 7. Focus on that one. None of us have a crystal ball, so you'll be able to create a great starting point for your future with this method. Good luck!
The reason you don't understand this is : it's not readable. Wisdom is not to understand it, wisdom is to never write this in the first place. And probably chase the guy who wrote it and do really nasty thing to him. Practice "readable code", don't waste your time on such crap ..
Glad you liked it! I wanted to share the code, but at the same time did not want someone to ruin the whole game by finding a flaw in my server. I will share it once interest in the game dies down, as I'm sure others are interested too.
Was a interview question 
Then be lucky you didn't get that job.
😂
f is a function that returns 1 if the given parameter is odd, 0 if the given number is even. This is because it binds 2 to the a parameter, so you are always doing `x % 2` if you do `f(x)`. You take the array of numbers 1-7, and you _filter_ them with `f`. When you use the filter method, you are running each value through the function provided. If the return value is truthy (1), the final array contains that value. If the return value is falsey (0), the final array does not contain that value. Since odd numbers return 1 from `f` (because they have a remainder of 1 when `% 2`), the odd numbers pass the filter test and remain in the final array. Since even numbers return 0 from `f` (because they have a remainder of 0 when `% 2`), the even numbers do not pass the filter test and are stripped from the final array.
If the remainder of the devision by 2 is 0, you got an even number. If it is not zero, you got an odd number. 0 is treated like the boolean value for false, so the filter function evaluating the return value of the "a" function, will filter all odd values (as those return a remainder which is NOT 0) and put those filtered values into a new array, with the values [1,3,5,7].
Exactly. Don't go there. And if you're really filling generous, send the person who interviewed you the book "programming for ultimate dumbasses".
You can investiage this further on your own to understand. Simply add in a console.log in the the function (a), which simply returns true or false or "0 / 1" in this case when dealing with the remainder. You'll see that it flip flops 2%1 returns 1, 2%2 returns 0, thus it alternates on that array, true, false, true, false, filtering out the items that return 0. 
because filter function returns only truthy values. in this case 2 % 2 , 4 % 2, 6 % 2 etc. all equal to 0 which is considered a falsy value in js.
I would say it's local market specific. For example in my city (Gdansk, Poland) theres much more development in C# than Java or PHP. Actually, PHP is not considered as good choice for new projects and new people in industry rarely learn it so there's not much people who knows PHP very well. PHP is considered to be cheap in maintain and quickly produced, perfect for small projects. My cooworker once said that having 15 years of experience in PHP he had to learn JS at some point in order to being able earn more. My 2nd language is C# for few reasons. I find it very useful that C# allows to do much more than just backend. Stuff like games, Android development (I mean Xamarin - it's not best but it's still something), universal apps that are available for PCs as well as Xbox consoles - are really cool! I can belive Java has simillar advantages but I haven't learned it much. I would say that having in mind that Microsoft is investing a lot lately that it will be more popular in time and it will be widely maintained and developed. 
Vue Mastery works with Vue because it's open source. 
When I played against a friend 1-on-1, it was quite balanced. I made the ghost slightly faster than the dino so it isn't an endless chase, but made the ghost slower when a power-up is activated so that the dino actually has a chance of catching the ghost. If two ghosts double team a dino, though, it is probably game over. There are also many ways that the game can be dynamically balanced though. Like as there are more ghosts on the server, all ghosts will lose speed, or as a player gains points, they lose speed. Out of curiosity, I might log some data on ratios of dino kills to ghost kills, and how many players are online when those kills occur.
perfect. Thanks
Got it. Thanks.
Makes sense. I should have seen that before.
Thanks for the explanation. Very clear now.
Yes, I rendered the vector art to PNG and drew it on a canvas using a game framework called Phaser. I didn't make several sizes, as all the assets were quite small and I wasn't too worried about good looks or performance on phones. If I wanted to perfect the game, I might scale all my existing assets to half their size for phones. One interesting problem that I ran into was that I was initially drawing the whole map as one big image. I had to break those into chunks because WebGL on phones could not handle such big images (around 4000x4000). 
Thanks!
Have fun! I hope you get lots of players. 
I liked the article. And I do like Angular. But DI is a solution to a problem that Angular itself has created by ripping the view layer from scope. It is not an elegant solution or helpful in any way considering that the whole approach is a large scale hack to access scope. As for services, React has context, you would never use state management for component to component communication, just like you wouldn’t abuse services for state management in Angular.
Codecademy's intro to JavaScript course. 
I think you have a potentially popular game on your hands. I got addicted pretty quick! I would suggest using swipe gestures for control on the mobile app. It would feel more natural (like a joystick) than tapping quadrants. The "Lara Croft Go" game does this type of control really well.
I second this, Codecademy is great! 
There are a lot more startups using asp.net core but yes Ruby and JS miles more popular in that space. To be clear .net core runs on Linux/nginx.. meaning zero windows server license.
Thank you for this. I will just add, for anyone that stumbles here, that the book Clean Code is a must. Ingest the dictates there and hold everyone, yourself, and potential employers, to these standards.
Thanks! The quadrant implementation was kind of a last minute thing. I will definitely add in swipe controls. Something even more interesting that I thought of was actually dragging along the maze to map out where your player will go, but that might be too overpowered. 
I think you could benefit from the following approach. Use a job search site like Indeed to find junior dev positions at companies you might be interested in *in your area*. Make a list of the skills, languages and tools required. Learn those. It could be wise to start from what you already know and deepen your understanding so that learning other languages, approaches or frameworks is easier. Don't use the big companies as benchmarks as they might not be as great as they seem.
I smell ripoff
Instead of `const a` and `const f`, if they had been named `const getRemainder` and `const isEven`, it would have been a lot more clear.
You don't understand what JSX is. It creates javascript objects. You can create the same object without JSX.
Yeah but why the hell would you...
I share the view of MPJ on this. It was a bit confusing to me when I first learned React, but it definitely made things a hell of a lot easier. https://youtu.be/0ZNIQOO2sfA
Thank you, I hope so too :)
I think the question you should be asking is which one should you learn *first*. Languages get much simpler to pick up once you are familiar with the basic concepts. Eventually, picking up a new language to write/understand a simple program can be done in a day. I'd recommend that if you're familiar with javascript, learn nodejs. Then look at python and try to figure out which one is better for what situation. If you feel like you got those down, look into go. If you don't like any of these, then simply try something else. There is no 1 languages which will be the future just as there is no "best" programming language, there are just better and worse choices for any situation. Ultimately what you end up using comes down to where you work. Or you can take it the other way around, find what you want to use and find a company that uses it. In either case, you'll only know what you like after you tried more. Good luck! 
The distinction is that markup and code should be separated, it’s that business logic should be separated from view logic. JSX (and server-side templates) are not markup - they are processes that result in markup (or changes to the DOM). JSX is popular because it makes it easier to build maintainable applications that a ridged separation of markup and code.
Have you tried googling? Stack overflow? Building a project yourself? There are millions of threads just like this one in this subreddit - people complaining about a technology they obviously have not put any effort into understanding. What exactly do you expect to come of a thread like this? It's just nonsense argument bait. JSX is extremely easy to pick up. You stamping your feet about how it's "bad" just makes you look like you don't know what you are talking about. The idea of mixing code with markup hasn't been taboo in years, just because you are now getting around to learning it doesn't mean the kids are all wrong and the future is doomed. 
So you have something to target with your JSX transpiler? I can't think of any other reason that doesn't involve an absurd level of masochism.
According to the demo i have a question: instead of this.setAnimationState(el) why not el.classList.add('your-animation-class')? In your case CSS transitions will do the job smooth and fast. I mean if you really care about performance — don't use greensock unless you don't have choice. Btw i like your code pretty much.
Why is this not readable? The only unusual part would be the variable names, and the use of bind. Variable names were probably just set to single character names because it's a short snippet for an interview question, and bind is probably just to see if people know what bind does, or really if the person knows javascript 
I’d pay .99 for this on iOS 
Dude whenever you do share your code I would love to see. Love the design, very good game mechanics man. Props 😇
Really? It looks quite original to me, what's it a rip-off of?
Wow, it makes me really happy to hear that! If the game goes well for the next few weeks I will work on putting it out on iOS, free of charge.
Ad a splash screen for when you loose instead of being booted back to log in and that would be cool. Lol like a wah wah waaaaaaah😂
Man, you guys hate Angular....
For you and anyone interested in keeping track of this project, or even just talking to me, the best place to do so is on Discord: https://discord.gg/Sfbg2Sh
If you want them to be publicly available, put them on npm and a CDN. If not, just bundle them into your app. 
Thanks!! Definitely will when I get home.
Because react is objectively better and more suited to the language. Angular is designed to make JS more comfortable for corporate java drones.
I recommend Elixir to everyone. It follow functional paradigm which is less overwhelm for api than object oriented. It has a really nice syntax and relies on Erlang which is one of the most available platform. Pattern Matching is one of the best feature of the language. I recommend to everyone to NOT use Rails. Not that ruby is bad, it is not. But what dhh as wrote is, of course, an easy framework but highly opiniated and anti-pattern framework. If you think about learning Rails because it’s easy, give a try to Laravel, it’s inspired by rails but better structured, easier and better written and productive on a short and long term while rails is productive only on short term. If you want to use Ruby, then Sinatra and any Repository pattern gem.
Java is still really popular. My team is choosing to use Java as our backend language. It is a small application (less than 100 users once finished). PHP is good if you want to build on top of wordpress websites. Remember, like 33% of the web is powered by wordpress. Lots of small and mid sized companies depend on wordpress and therefore depend on PHP. Java/c# if you want to work for fortune 500 companies.
about changing two parameter inputs to only one input, read here http://www.thesoftwaresimpleton.com/blog/2014/03/05/dry-up-with-bind/
You don’t *need* an IoC container but it sure makes unit testing easier.
I'm not the one developing the libraries - I'm using 3rd party libraries, like svg.js. So it's not like I can put them on npm. 
Not sure I understand you... DI does not have anything to do with view layer. What \`scope\` are you talking about? As for the services, yes, React finally came up with a concept that's similar to Angular's services - the context API. Though it's not as versatile. Also, there is nothing wrong with using services for state management. It's one of the many valid options.
He has put out a link to a chat, but usually when you claim you wrote something, you post the code on Github. 
github link broke :(
Ok, I misunderstood your question. If you're using a bundler anyway, add the 3rd party libraries to it, since then you can take advantage of tree shaking. 
Great, can I check it out!? 
learn node.js everyone here is wrong as fuck
Go, google, good way to go. We build our back end with it. Seems cool Rust. Mozilla backed, dope af. Node, used to power lots of stuff you use everyday, and it’s a first class citizen now that V8 team promises not to make bearing changes against it. If you’re looking at asp, I would say based on back end devs I know and work with that Golang is a much nicer experience. Good luck, have fun
Isn't that only possible with rollup? Also - as a side note - do all browsers now support ES6 modules. Thus allowing for tree shaking and whatnot?
In the demo i use some very simple animations, but often I do more complicated ones, like animating lines or characters individually (gsap splitText). So in most cases using gsap is the most straight forward way for me.
VS Code ... i started with Brackets then switched to VS Code... Best text editor... Fast,lots of good extensions and the Microsoft team improving Vs code performance every month with timely update
This is like trying to compare apples and oranges in my opinion. What I do it try to use the right tool for the right job. It's not about what's the better language is because this is not a competition. It's like you use a hammer when you want to nail something down and you use a screwdriver when you want to screw something in. Different languages have their pros and cons so knowing how most of them are structured will enable you to choose the right one for the job. 
TLDR Airbnb hires absolute rank amateurs for their front end.
As a fellow developer it is immensely hard to hire an experienced developer "out of the box" just yet. I accepted that hiring just above average devs and teach them to some degree takes less than finding a decent one.
&gt; too overpowered. It could be balanced against the fact that you could just not allow them to adjust from a plan once it's been made. Sure you can lay a course and guarantee that you'll nail the next six turns, but if the situation changes, you can't do anything about it until it's over!
Learn Node. If you know JavaScript, you won't have much trouble getting on with it. If you want something else, Python is a great way to go, much better than PHP in terms of enjoyment (in my opinion).
Pacman /s
I have read the recent “Learning React” book by OReilly and it literally flipped the switch for not only react for me but for functional programming in general. As someone who works in a WordPress shop, I was previously accustomed to really shitty JS while learning. Learning The React framework really teaches you a ton of proper OOP/functional JS skills. 
JS
You cant be serious. It is one of the most important things. I imagine you dont work in teambased projects? The less magic, the better
Wrong. Angular is an alternative, and like alternatives, calling people names about using them while also using the word 'objective' or similar in the same paragraph makes you look like a fool. Different people like different things, that's just a fact of the world. There's absolutely no harm in either framework and neither of them are destructive to the ecosystem of JS. It just seems like the React community have this vicious mentality of saying "REACT IS EVERYTHING! IF YOU'RE NOT IN REACT, ARE YOU EVEN A JS DEV BRO?!", same way that Angular devs did with jQuery (lol) before React was even a thing. I wasn't a java developer and I may never be. AngularJS (i.e. v1) was easier to get to grips with because it lacked a transpile step leading to a very quick way of building something workable. It was the framework of choice for me to build moderately large projects in the space of days on my own. Messy code, sure, but end product worked at times when no one else I was working with was a coder and no one from the corporate side of things wanted to try to solve very real problems that the front-line workforce were facing on a daily basis. AngularJS helped me build something that reduced the chances of people mis-selling not because they were trying to, but because a lack of correct information meant they didn't know better. Angular (i.e. 2+) changed things across the board, and was a step into the practices we're using right now. It was also well-established while React was still changing API's. It heavily leaned into Typescript, transpiling, babel, NPM and packaging. However, despite Typescript initially throwing me off track, it still felt similar to AngularJS. Although Angular wasn't too instrumental in this, it did help me improve the tool I originally made in AngularJS while learning modern practices. Both Angular and AngularJS will always have a place on the shelf of success stories for me. React, and by extension React native, will join those if I ever move on from React. That said, I use React these days because my workplace uses it, and I've learnt more as time's gone on, so all the non-code steps aren't a problem and I'm faster at developing because of it (after the initial setup). Bonus point is that it's let me learn React-native so I can now (and do) build mobile apps.
It's almost as if your actual users (if you have any) and the experience they have with your product is what's of paramount importance, not what makes the developer feel good about themselves.
Heh, it's funny you say this because Airbnb is known for having one of the most difficult interviews in the industry. Not that it correlates with being a good experienced dev.
Thanks so much for the info!
o/ I'll take a look and see if there's useful content I can add, I've worked with D3.js for a few years now, but most of my work has been enhancing charts and making them more interactive and feature rich, less working out the basics (although a lot of people are reusing my work, it was never designed with that in mind). Since you're using d3v5, I'll need to read quite a bit of the source first. v5 came out so soon after v4 I've not yet got to the point where I'd consider myself familiar enough to make pull requests. ... on to reading! :-)
I know there are some open issues in Github about things you want to have in the library. Still, it *might* be a good idea to include a more explicit road-map (maybe a [ROADMAP.md](https://ROADMAP.md) or something similar) both explaining the general way you want to go, the general areas which need work and maybe some specific task that may be good for someone new to familiarise themselves with the code. It doesn't need to be very elaborate but it may help you getting contributors more easily.
Thanks! A roadmap file is an interesting idea (and also does not lock it into GitHub should I wish to move to another repo). 
@Little_Kitty, Thankfully there are only a few changes between D3 v4 and v5, the biggest change is the addition of promises (which affect d3.csv, d3.json etc). The other big change is the categorical color pallets. I think d3-ez is still backwards compatible with v4 (except maybe one of the examples), so there shouldn’t be much of a learning curve. Let me know if you have any questions.
Why not just render erb since they are using rails and wants to go back to server rendered?
Fyi, they hire contractors too
This is partially explained in this article [https://medium.com/airbnb-engineering/rearchitecting-airbnbs-frontend-5e213efc24d2](https://medium.com/airbnb-engineering/rearchitecting-airbnbs-frontend-5e213efc24d2) 
Well, in this case i think you're doing well sir. I'm using ScrollMagic for this kind of purpose and it's work pretty fast, but your custom code must be faster than big and old javascript library. In another hand ScrollMagic has couple of useful tools like animation reverse, fine tuning for each scene etc.
[suck a dick, medium](https://vgy.me/JcgIOZ.png) 
Yeah I have been using ScrollMagic before, but felt it was a bit overkill for my needs, and I also don't like that it's not updated anymore (several years since last commit). And I also enjoy developing(our trying to) my own small scripts and libraries because I feel it's the best way to learn:)
Nice try [medium.com](https://medium.com), here's the original: [https://www.smashingmagazine.com/2018/01/visual-studio-code/](https://www.smashingmagazine.com/2018/01/visual-studio-code/)
Arrow functions don't have their own `This`. They use the `This` of the enclosing context, in your case the global one (Window, etc). I think you can solve it by calling: `george.on('speak', (said) =&gt; { console.log(`${george.name}: ${said}`); });`
Thanks, this is working.
&gt; ... what are the `[?&amp;]` for in the if condition? It's part of a regular expression's search pattern. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#special-character-set The search pattern is surrounded with `/` charcters which creates a [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) (regular expression) object. Similar like creating an array without using `new Array()`. e.g. var array1 = [1, 2, 3]; //instead of... var array2 = new Array(1, 2, 3); With regular expression, this would be: var rx1 = /search-pattern/; //the above gave the same result as... var rx2 = new RegExp("search-pattern"); //except that the latter one, the search pattern is passed as a string So the if above is same as: if (!(new RegExp("[?&amp;]pfail=2")).test(location.search)) { //... &gt; I remember trying to do something like that but it ended up appending in something like :`https://www.text.com/file1/file1-2&amp;pfail=2?id=155&amp;s=beta` basically it added it before the query. The code from that SO question insert a string within the path part of the URL, not the query/search part. An URL is broken into parts like below. Protocol + "//" + HostName + ":" + Port + PathName + Search + Hash Or... Protocol + "//" + Host + PathName + Search + Hash The Protocol string is the URI scheme appended with a `:` character. e.g. `https:` HostName is either a host name or an IP address. Port is the port number, if specified in the URL. Host is the HostName and Port combined. PathName is the absolute resource path on the server starting with a `/` character. Search is the query string (the URL variables). It starts with a `?` character, if query string is specified in the URL. Hash is the location within the document, and it starts with a `#` character. See: https://developer.mozilla.org/en-US/docs/Web/API/Location
Good article and nice tips.
surprised they dont use preact like uber does 
How has scala saved your life?
This right here is the one thing about Vue that I really miss as a React dev.
 george.on('speak', (said) =&gt; { console.log(\`${george.name}: ${said}\`); }); 
&gt; This story is for Medium members. fucking paywall with a story ripped from another website. Fucking thieves.
This is awesome. I had a game like this in my todo list since the very first time I played Pac-Man vs on GameCube all those years ago. 
Preact only saves you a tiny fraction of time-to-load, but when the app runs there's no difference. The bottleneck isn't base-line benchmarking, in large apps it's prioritization, scheduling and occlusion, just like on native platforms where they have tools to deal with these. If you really want performance, React 16 atm is the only framework currently that strives to solve this. The scheduler will run circles around preact. Watch this for instance: https://youtu.be/v6iR3Zk4oDY?t=4m and until he switches on async. This is the kind of impact.
https://babeljs.io/docs/en/next/babel-preset-typescript.html
paywalls and FOSS doesn't mix and match very well. Consider posting on a platform where people are not being excluded.
Yes. So, the idea is that one should very well understand where the "=&gt;" is ok to use and where it is not ok to use, right? In my case, there is no point to use '=&gt;' since my needs are focused around creating an instance, in my case Person. So, '=&gt;' is not good for cases where Objects are constructed. Is that correct?
paywalls and FOSS doesn't mix and match very well. Consider posting on a platform where people are not being excluded.
For the record, WebStorm has all of these things natively. No extensions needed. 
I'd say it's a "3.5"... And this is not something I'd expect a junior developer to solve. I would even go so far to say that most web development positions wouldn't ever need to solve problems like this. Most of the time its all managing data and getting things to show on the screen. That's not to say you don't need to be a problem solver, which is what interview questions like this try to flush out. But I do think it's ok (from my perspective) if this is not something you can figure out, especially in a junior developer position. The "problem like this is a good way to get you on the spot", to me, sounds like if you _could_ get this problem, you'd be "hired on the spot" ...? Which makes me think you're not necessarily expected to be able to answer it. And often, that's ok. What interviewers like to see, if you're not a genius able to answer all the tricky questions, is your process in _trying_ to answer the question. That can be very informative into your abilities.
the cutesy emoji thrown around in the article irritated me a lot. it's like they were trying so hard to be fun and clever and it just ended up being really distracting and annoying. &gt; Each of the chunks in the flame 🚒 chart corresponds to one of the four links that we render in the sticky navigation. what does that firetruck add to the sentence other than a big visual breakup that makes it hard to read?
It depends. If you declare an inner function in an outer function, arrow syntax in the inner function will come very handy because its' this will point to the outer function's this. If you for example declare an object with a method like this: const obj = { a: 'hi', meth: function() { setTimeout( () =&gt; { console.log(this.a); }, 1000); } } This.a will be 'hi'. While if you use 'function(){}' the this will refer to the global variable a, if not set, it will return log undefined. In strict mode you'll get a typearror afaik. I'm aswell learning, so feel free to correct me if I'm wrong! Soz for the formatting, I'm on mobile.
I believe it's been edited. The way it was presented when I first answered it was a single line of functions over functions over functions, like those Perl guy trying to cramp an entire OS in one line of code. The way it is presented now in the post is perfectly readable.
Did you solve it? If so, what was the catch?
Gotcha, that makes more sense 
First thing I noticed was the site with the problem wasn’t responsive, seems more important to point out than the question itself if you are applying for a webdev spot.
I am learning as well. So I am already struggling to understand :) I am coming from a Python background. Maybe some more experienced user can shed a bit of a light on this topic.
Is it not the case that a curried function is one that takes multiple arguments, and will keep returning a receiving function until it has collected the required number of arguments, in which case it will execute the wrapped function
Vue is better!
Seeing as the rest of the comments so far are rubbish, I feel the need to say this was a really helpful and practical piece! The Chrome Dev Tools are great, but tough to interpret - so it's nice to have something to reference with.
Nope, not yet. My laptop is having a vacation at a service center :0. It's a prolonged one.
Call obj.meth();. You'll get 'hi' because of the arrow syntax, which uses the this of the enclosing scope. To achieve the same effect without arrow syntax, you can define self = this; before declaring the timeout function!
Great Job! What was the most challenging part of creating your game?
This sounds like something I'd use a survey builder site for, like SurveyMonkey. 
Thanks you all for your contributions. I really appreciate
It depends on your use case, but based on benchmarks provided here https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html you'll see differences. Yes, React 16 might be the only currently striving to solve this, but I'm willing to bet alternative solutions will come out that work as well in the future.
This is fairly difficult, but I've seen worse. I think this would be way too much for an in person interview, as a take home thing it's above average difficulty but not crazy. Make a graph out of the inputs. Use recursion or iteration to find routes that work. If there's a connection to the next station and it's before your required arrival time it's valid. If you go from one station to another then back to the same station it's an invalid route. Any routes that end at the correct place in time should have their probability calculated (although calculate it as you go to decrease runtime). The devil is in the details though, there's definitely intentional tricks in there.
I'm glad you like it. The best games are the ones people can connect to other games they've played, like Pac-Man.
Good point. I will probably stick with swipe controls because I could see some people locking in some moves, then getting annoyed that they can't change it.
But it’s not possible to use ndb with docker?
I'd say that as a junior developer you should be able to do the "plumbing" right: read the files, split the lines, convert them to a data structure that makes some sense... Once you are there, I won't expect you to come up with the optimal algorithm or even the correct answer, but be able to try different solutions (even if it just brute force), and be able to talk about the problem and your thought process. A senior should be able to find the right answer using an algorithm quite optimal, and talk about the performance and the limitations of their solution ("works fine for small datasets, but it won't work if there is not enough memory"), and outline a solution to those limitations
&gt;Your answer must be correct to within an absolute error of 10^−6. Unless there is one solution (e.g. the numbers never change) that they have tested explicitly, I am pretty sure that JavaScript's floating point errors can be greater than this. The problem does not seem to be written with JavaScript in mind. As others have said, this does not seem like a typical question for a web development position nor a junior position. I wouldn't expect a web developer to solve this unless the job would involve calculations similar to the question, which seems unlikely.
Basically a web application (with multiple views obviously) that runs on a single `.html`.
Yeah, it's a problem from the ICPC world finals. The coding problems are solved in C, C++ and Java, not in JS.
&gt;Admittedly, algorithms are not my best but I wanted to know from more experienced programmers how would you rate the difficulty of this problem I think this question is ridiculous for a junior programmer and I'm a little bit annoyed by it. What exactly are they testing? In what situations would a junior engineer be handed requirements like this and be expected to figure it out? I'm a senior level engineer and this kind of question would take me a good 15-30 minutes to solve. I mean, they're giving you up to 10^^^18 inputs, so you can't just write a simple loop to brute force it (even though in real life I'd happily write something that took 10 minutes to run if I was confident in it and I only needed to run it once). But generally problems like this are solved by working with the interviewer and asking questions and clarifying assumptions and talking about your thoughts and ideas while you work through a solution. A lot of times you need to find a naive brute force solution, then iterate and come up with a more optimal one. &gt;"problem like this is a good way to get you on the spot" Not sure what this means? They're going to trip you up and reject you? Or that if you get it, they're hire you on the spot? Either way, it's kind of a red flag to me. I'm not sure it's a great idea to hire or fire someone on the spot based on how they did on a coding challenge.
Definitely adding movement controls and collisions. Since players are always aligned in the center of the tiles, from a collision standpoint it would be almost impossible to turn, because players would have to be perfectly aligned with the tile they are moving onto. So, if a player is trying to change directions, I also consider where the player would go had they not turned, and if they pass that small gap, then I allow them to turn. I have to test this for each of a list of moves that the player attempts to make, and also have a way to determine if their move is successful or not. 
One of the examples in the document; async () =&gt; { const data = await fetchData().catch(e =&gt; { // Only errors from `fetchData` are caught. }); if (!data) return; doSomethingComplex(data); }; I can understand if you're checking purely for errors, such as a heartbeat, but for most standard use cases, there's no way to access data (since data is returning only errors, you'd have to call it again to pull data to process it). It's still a handy piece of code to have for heartbeats though. **"Because of difficulties handling errors without introducing bugs, I prefer to avoid using async/await on anything that's going to run in the browser. It's an excellent convenience when I don't care about failure cases"** Firstly, always care about failures. Even if you don't expect something to fail, assume it will. Secondly, using try...catch around an entire block is perfectly acceptable. Not being easy to read isn't a problem of the design, but rather a problem of not splitting your code out. Create code to try, and then split your error handling code out if there's a lot of it. You could even split both parts out and have your try catch statement surround those functions (in the case of fetchData(), that's exactly what's being done if you've got a fetchData() function with your own code).
What about a dashboard, doesn’t have multiple views, but definitely has an “application” feel.
Right... spam 
Not for engineering. 
Thanks, I found the book(s). Yeah, by the way it seems like it is a series of books.
The idea of a user disconnecting and then having the program try and predict where they go sounds like an interesting problem. The user could lag for a couple seconds or if they are going through a tunnel, it could be a minute. Regarding turning, I built a very simple Pacman game in Javascript a long time ago and encountered the same problem. Had to establish a threshold. 
Yes, true that my bad. There's a chapter about objects and this. It goes really deep, also explaining the =&gt; + this. The author doesn't like the usage of the arrow function to change the behaviour of 'this'. It's a hack like declaring 'self=this;'. As far as I remember, he wants you to use bind instead. 
Well, on one hand being able to describe/translate this into computer code, even high level pseudo code would be a good indicator of your ability to translate user stories into product features for a console application. On the other hand it tells me nothing about your ability to make webapps.
I'm not really sure what you're saying response to that snippet. If the promise rejects, there is no data, so no matter what you can't use the data in the error handling. \&gt;always care about failures. By that I meant short scripts, something I'd run in the console while prototyping, or in a build script. Something in a controlled environment where failures are immediately visible. \&gt; using try...catch around an entire block is perfectly acceptable. I disagree, for reasons I lay out in the post. I prefer to handle errors very narrowly, and wrapping a lot of code in a try...catch means that you'll catch a larger set of possible errors. Since JS doesn't offer very good ways of identifying what you've caught, I prefer to catch with a small net.
Didn't know {{{}}} would be valid in JavaScript. Good to know for interviews. 
&gt; If you go from one station to another then back to the same station it's an invalid route. Not exactly. In the example given, you could take 0-&gt;3 at time 200, hoping to catch 3-&gt;1 at time 500. But if that one doesn't come, you get 3-&gt;0 at time 550 back at 0 with the hope of catching 0-&gt;1 at time 700. This is in fact part of the optimal route, with a chance of 0.3124: - Wait for 0-&gt;1@000, if it goes you're there -&gt; **0.2** chance - If 0-&gt;1@000 fails -&gt; - Wait for 0-&gt;3@200, if it goes take it and - Wait for 3-&gt;1@500, if it goes you're there -&gt; 0.8*0.5*0.1 === **0.04** chance - if 3-&gt;1@500 fails - Wait for 3-&gt;0@550 if it fails, nothing, if it goes - Wait for 0-&gt;1@700, if it goes take it -&gt; 0.8*0.5*0.9*0.9*0.1 === **0.0324** chance - If 0-&gt;3@200 fails, wait for 0-&gt;1@700. If it goes take it -&gt; 0.8*0.5*0.1 === **0.04** chance Total chance of arriving is 0.2 + 0.04 + 0.04 + 0. 0324 === **0.3124** (See Note Below) Meanwhile, discarding 0-&gt;3-&gt;0, and simply going with the last 0-&gt;1 has a total chance of 0.2 + 0.8*0.1 === **0.28**, which is lower. ---- (NOTE Below) Notice that, yes, calculating 0.2 + 0.8*( 0.5*( 0.1 + 0.9*(0.9*0.1) ) + 0.5*( 0.1 ) ) ...does give a _clean_ result of `0.3124`. But you can have floating point approximation errors (e.g. above partial calculation `0.8*0.5*0.9*0.9*0.1` gives `0.032400000000000005` not `0.0324`. This, contrary to what Charles_Stover points out, can happen [just the same in other languages](http://www.browxy.com/SubmittedCode/137919) and is probably part of the original problem's concerns. Still, the error _is_ far below 10^(-6).
I would completely agree with this. But I feel like it should be slightly qualified. This particular problem is, in a _large_ part a **reasoning** problem. It is such much more than it is a _programming_ problem. With this in mind, there _are_ indeed jobs where _reasoning_ may have a more active role, and it is not so much a matter of experience. Is it common? No, probably not. But OP didn't specify at all what the position is about; just "javascript developer" and "junior developer". Depending on what the actual content of the position is, well, maybe not optimizing bus routes, but I've seen "similar" problems in different areas (logistics, shopping carts, etc). So, yes, as /u/senocular says it's not a common thing to expect from a junior developer. But well, it's good to ask some questions "just to see", not as an expected requirement. I think the question -if asked correctly, of course- is a good question.
👌👀👌👀👌👀👌👀👌👀 good shit go౦ԁ sHit👌 thats ✔ some good👌👌shit right👌👌there👌👌👌 right✔there ✔✔if i do ƽaү so my self 💯 i say so 💯 thats what im talking about right there right there (chorus: ʳᶦᵍʰᵗ ᵗʰᵉʳᵉ) mMMMMᎷМ💯 👌👌 👌НO0ОଠOOOOOОଠଠOoooᵒᵒᵒᵒᵒᵒᵒᵒᵒ👌 👌👌 👌 💯 👌 👀 👀 👀 👌👌Good shit
interesting, what is the job itself about? writing API? doing some front-end? because it's essentially a Math question.
Hi /u/_-SYNONYM351-_, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'.
Hi /u/_-SYNONYM351-_, For javascript help, please visit /r/LearnJavascript. Thank you!
&gt; And often, that's ok. What interviewers like to see, if you're not a genius able to answer all the tricky questions, is your process in trying to answer the question. That can be very informative into your abilities. Meh. Why you not come up with a piece of code where there is a bug and tell the candidate to fix that bug and explain how instead? is the candidate using a debugger? console.log ? ect... unless the position is related to data science, developers will seldom ever do anything like this test, and I'm not sure how it can flush out bad candidates. More and more candidates just learn to solve quizzes in order to pass interviews rather actually learning to think. Eventually these quizzes will mean nothing. As you'll just have to read books where there is the solution. How about a SQL question? change that schema so the new requirements can be fulfill? modify this script so that it can do this or that, instead of stupid quizzes? 
These kinds of questions and tasks as well. An interview wouldn't be very helpful if it consisted solely of stupid quizzes like these.
I agree with this almost completely. I don't necessarily think there are hard requirements on whether a junior or senior dev should be able to find the optimal solution. Especially given a short time restriction and the nature of this problem's solution (recursive graph traversal). A key thing that I wish a lot more interviewees, regardless of experience, would do is immediately go for the obvious brute force solution to a problem and explicitly mention that it's brute force. This lets the interviewer immediately see that you understand the context of the problem, can write a solution, and they can go on to ask you questions that might hint at a more optimal solution if you're struggling to find it. I'd rather spend the 5 minutes to have you get a shitty solution that works over spend the entire 30-40 minutes listening to you go down a rabbit hole because you think this problem is one that you solved last week (I usually just stop the candidate after 10 or so minutes if they aren't going in the right direction and try and ask them questions to steer them back). Interviewers spend the whole interview looking for reasons to hire the candidate. They aren't going to completely disqualify you in their mind because you chose to solve a problem a certain way as long as you can tell them why you did what you did.
That seems like an incredibly long and drawn out problem to give in a 45 minute interview. 
well, I've been in more interviews with quizzes taken straight from the Euler project than actual tasks related to the job. 95% of IT jobs are maintenance of existing codebases, not greenfield, you'd think interviewers would make sure candidates can read code, but no...
That only applies to libraries that aren't in the commonJS format, right?
&gt;On the other hand it tells me nothing about your ability to make webapps. This is almost impossible to test for in an in-person interview. Web apps are complicated systems, even if libraries like Express have made them simple to create. Anyone who has created a simple CRUD service with a framework can do it again. I'd much rather ask the candidate questions that they haven't seen before to see how they problem solve rather than quiz them on things that they already know the exact answer to.
you're right, i neglected to think about the fact that you could go to one station, have it not show up, then go back to the previous station to catch a different one. thanks for the input. i actually kind of like this problem, it has some interesting things to think about.
&gt; This is almost impossible to test for in an in-person interview. I'm just saying it doesn't let me know anything about your skills with CSS, front frameworks, HTML, browser compat., backend technologies, etc. And those are all easy to test. But not with an algorithms problem.
Seriously ? There is no "versus". If you do your job properly, you'll get an app that can do both, transparently.
In the video, I referred to the extremes on both end - SSR vs SPA. I also mention that most people are going to naturally fall somewhere in the middle, and that every situation is different depending on the site and its target demographic. There are some scenarios in which you simply go SPA + prerender or SSR + cache or SPA + SSR (universal apps). Obviously this isn't cut and dry, but I think its valuable to address common issues such as performance and seo in tradiational pure SPA's vs SSR's so that developers can find solutions like the ones mentioned above - I talk about alot of this in the video.
to my understanding it's somewhat like string.indexOf()? that just allows you to search the query part of URI correct? Either way this was very informative, and thanks again! :)
TL;DR don't use exceptions 
Even if you don't use exceptions yourself, you'll still end up in situations where \`.catch()\` or try...catch are your only options for handling an error. 
I am new to Reddit! I will post a new JS framework I created next Saturday.
"A min wait is a great pattern to use if you want to show a loading state to the user, but the API might respond quickly." I instinctually cringed at this initially, but there might be some truth to this. I know I'd *personally* prefer everything to load as soon as possible, but I'm curious if there have been studies done on user satisfaction with these kinds of techniques. Metrics like "polish" are nebulous, but it's things like this that sometimes contribute to that.
Yep, that's all there is to it. Instead of a function that takes an A, a B, and a C and returns a Z: `(A, B, C) -&gt; Z` You have a function that takes an A and returns a function that takes a B and returns a function that takes a C and returns the Z: `A -&gt; (B -&gt; (C -&gt; Z))`
example site : https://bsns.me/thecupcakeworld
except what happened with node is that ownership of the tool literally changed
Kind of makes me realize we are years away from having actual alternatives to javascript....
The motivation behind this pattern, per the article, is that showing a loading state and taking it away too abruptly is a bad UX: &gt; This is not a good experience. If you display a loading state, you’re telling the user “take a beat, we’re doing something, and we’ll be right back”. It lets the user take a breath, maybe check their phone — the user expects to wait if she sees a loading state. If you take that away too quickly, it’s jarring. I can get behind that motivation, but I'm not sure I like making people wait longer for data than is necessary, especially in the case that data would have come back near instantaneously. IMO a better pattern is to have a small waiting period before the loading state is even shown. (something like 50ms maybe?). Then you can show the loading screen. And if you're still worried about flickering, you can employ the "minimum wait time" pattern. But really, I would abstract this pattern out further and call it the "minimum state visibility time" pattern, or something like that. The motivation being a more general: don't flash any UI state for too short a time (unless the shortness serves some purpose). Another pattern you see a lot these days is the ["interface previews"](http://www.callumhart.com/blog/non-blocking-uis-with-interface-previews) pattern. I like this pattern because the loading state is made to at least somewhat resemble the loaded state, and thus lessens the effect of flickering.
paywalled
Why do you need a module to have a CLI? Just write a \`watch.js\` file that invokes it and run it with \`node watch.js\` if you need a CLI interface.
it's very strange idea, for loop on the class, you can to do array of object: const towns = []; towns.unshift(town1); towns.unshift(town2); P.S Sorry for my english. I learn it:)
The header image immediately made me close this article
What's wrong with dep heavy solutions? It's pretty much standard in the JS ecosystem. If you don't mind a bit of bash scripting use inotifywait.
No idea if it's just bad luck for me, but that page took quite a while to load on my phone.
thanks for the feedback. It is possible as my server sits on Europe , so if you from US it’s possible
Oh yeah, that could be it. I'll have to try from my desktop later.
There's an issue with the spacing on my mobile Firefox. Hopefully easy to fix. [spacing issue](http://imgur.com/GF7CGnr.jpg)
You can attach an array to the class itself to track the names of the instances class Town { constructor(name) { this.name = name; Town.towns.push(this.name); } } Town.towns = []; Also you have a mistake in your code you cannot do this ! class Town() { /* ... */ } 
that's because you're not be happy
I also signed up for EmberSchool. I also freaked out once I realized the creator bailed on the project to change careers. But what I came to realize is that although the material deals with Ember 2.0 and we're on Ember 3 now, it's the same, and so Emberschool is actually still the best resource for learning Ember. I would still fault the creator for not at least taking the time to give an update via blog post addressing these concerns. Also, if you notice a lot of the e-books an online courses for ember have been abandoned by their creators. There's no other way to interpret that for newcomers as a sign of a dying technology where even its most passionate advocates moved on to greener pastures. Program With Erik on Youtube used to have ember videos but he seems to have lost interest and mostly does Vue stuff. Unbelievably, there are NO new ember courses on Udemy, the most recent ones are half-hearted efforts. It's a shame, because while I understand why people might be attracted to Vue or React, Ember is a great antidote to javascript fatigue. Most of the web apps that are created these days are roughly the same type of CRUD apps. Ember definitely provides the best out of the box solution to build those types of applications. Everything else is over-engineered and unecessarily complicated and not to mention fragmented in terms of tools. 
Is `divEditLookupInfo` a class name or an ID? Assuming it's an ID, try: if (window.location.href.indexOf("table=hide") &gt; -1) { $('#divEditLookupInfo').hide(); } 
Noted! Thank you (: 
That would prevent any Town instances from being GCed.
I never heard or read about anything GCed, can you explain that concept to me ?.
It’s a matter of choice. I actually prefer the same because of: smaller install times, less files to be parsed by IDEs (even using exclude options), fewer failing points, more control over your project, fewer chances of dependency conflicts. Also, heavy dependency usage may reflect bad code quality (but this is contextual).
Thank you for the answer, it will surely help readers decide to watch it or not - better than a simple link.
If you're using this for dev only, you could install nodemon as a dev dependency to cut down the deployed code footprint. If none of the solutions are working for you, be the change you want to see and make one.
&gt; It’s very easy to write error handling in a way that it swallows more errors than you want Or, never swallow errors. &gt; This is an unfortunate interaction between async/await and JS exceptions. If JS had a mechanism to catch only certain exceptions, we would be able to describe the errors we want to handle with more precision. This doesn't seem to address the use case. While yes, there is not error type matching in catch blocks, you could do this manually in the catch. But the problem is not error matching, rather handling errors independently based on source. And that has nothing to do with async/await. The mechanisms for error handling are effectively the same whether or not you use async/await. And the mechanics of catching errors with try/catch and the promise API are the same. So: &gt; Because of difficulties handling errors without introducing bugs, I prefer to avoid using async/await on anything that's going to run in the browser. doesn't make a whole lot of sense to me. If you want to handle errors separately with async/await, use multiple try/catch blocks. Want to group things together and have a single catch-all error handler, use a single try/catch block. Same with sync code, same with the promise API, and even though you're dealing with callbacks there, similar grouping may - or may not - be applied at your discretion.
You're on the right track with `location.search`. But `==` is equality, so it will never work: - if it starts with `table`, it's `?table=hide` - if it doesn't start with `table`, well then it contains other stuff and it would therefore not be equal ```js location.search.includes("&amp;table=hide"); // you can also take a look at the newer URLSearchParams, but it's slower. I'll put it for reference const sParams = new URLSearchParams(location.search); sParams.get("table") === hide; // &lt;&lt; true ```
To add to this, you could also add a `watch` script in `package.json` with `node watch.js`.
For your use try entr. No need to stick to node solutions. http://www.entrproject.org 
I wouldn't say useless. I use ramda a ton and having everything already curried makes composition easy peazy.
Hi /u/Rz28, For javascript help, please visit /r/LearnJavascript. Thank you!
I disagree. Although it can confuse the hell out of people, this isnt always a problem. As for usefulness, curried functions are great if you like to build "pipelines".
To add to the general discussion. You generally want to use function declarations (so the classic `function () {}` syntax) for: - Event Handlers (this case) - Proxies - Constructors / Prototype
`"default.asp?mode=stdfile&amp;option=pag2&amp;table=hide"` Does that help or make a difference? I've tried both ideas above and it still just a no lol. :(
Do a mobile profile with devtools.
Agreed. The title is a cover up for a "vs" post, just didn't have the courage to admit it. 
Classes don’t hold reference to new instantiations created from its prototype. To have have a reference you would need to have some sort of register method on your main class so when you do new Town(‘Miami’) it will kick off a registerTown(this.name, context = this) There’s obviously more to it but that’s the main idea 
There is zero point to these types of questions and we know there is zero point yet they continued to be asked. I don’t get it. 
It's likely a combination of the video size, and the hosting that's the problem. I ran into a connection error when running it through Pingdom, the JavaScript isn't the problem here: [https://tools.pingdom.com/#!/d34He/http://www.cincybungle.com/](https://tools.pingdom.com/#!/d34He/http://www.cincybungle.com/)
Would it be better if I embedded a youtube video instead?
That library looks like a UMD module, which can be used with a script tag or as a CommonJS module. I think there are plugins for tree shaking CommonJS modules, although I haven't used any. Regardless, even without that, you'll still get the other benefits of bundling it, such as loading modules in the correct order. 
I wonder if there is a correlation to interview nonsense weeding out the good devs that see it as a red flag. 
Or load it after the page is loaded 
fs.watch() is fine but isn't consistent on all platforms, doesn't support recursive dirs on linux, and (iirc) would occasionally fire the same event multiple times for a single change, which meant I had to implement debounce logic myself.
fs.watch(), on windows at least, doesn't give very good information. The only thing you can rely on is that the file path it gives you needs to be re-evaluated as it might no longer be there (was renamed, moved, unlinked/deleted) or may have been modified. So basically you have to write something like: const myPath; // the path you want to watch, can be a directory let watcher; try { watcher = fs.watch(myPath, {recursive: true}); } catch (err) { if (err.code === 'ENOENT') { // handle `myPath` not existing, probably with a user-friendly error } else { throw err; } } if (watcher) { watcher.on('change', (eventType, filename) =&gt; { // do something // `filename` might have been deleted, moved, modified, or created }); }
If there's more in the query string (the key-value pairs after the ?) then your location.search check isn't matching the entire string. You should be using: location.search.indexOf("table=hide") &gt; 0
Your querySelector is not good, it should start with `#` (the css character for IDs) ```javascript if (location.search.includes("table=hide")) { // jQuery (see ravroid's answer) $("#divEditLookupInfo").hide(); // Vanilla JS document.getElementById("divEditLookupInfo").style.display = "none"; } ```
1. create a factory to make your class that keeps references on these. 2. http://jsfiddle.net/mu9pwke8/ 
Use console.log() when debugging and check the console in your devtools and ensure each step is working. As an example, write: console.log(location.search) with your devtools, then try finding your div. If both are working, is the script loading in the first place?
"Never swallow errors" could as well be the title of this post. I specifically mention the possibility of manually handling errors on the catch, but I also say that error handling strategies that require diligence are going to let something slip eventually.
[removed]
Fixed it. Never put your video on autoplay. The reason I put it on autoplay was cause if I didn't it wouldn't load an image on mobile until after you hit play. Didn't know that the poster attribute existed cause I'm such a noob. 
I’m very tired of the trend of the past 7 or so years of using the author’s mug as the OG image. It tells me nothing except that web dev is dominated young hipster white dudes. Why not relevant imagery?
You can pay me in money, not some BS tokens.
What have you tried? Part of being a good programmer is trying something and failing at it. Then try try try again until you succeed. Ask for help along the way, but not until you've at least made an attempt.
Good to hear! 
I'll pay you in somekidcash. As much as you want. 
This bounty is one of many aimed at augmenting an existing ecosystem of APIs, smart contracts, mobile apps, etc. This ecosystem is closely tied to the HYDRO token in a variety of ways, which is why it's natural to offer tokens as a reward for development tasks.
 function getPay() { return 0; } Note: This assumes they're all unemployed.
&gt; Unless there is one solution (e.g. the numbers never change) that they have tested explicitly, I am pretty sure that JavaScript's floating point errors can be greater than this. The problem does not seem to be written with JavaScript in mind. This is most likely to prevent brute forcing the entire problem. You can run 1 million simulations and probably get pretty close, but they want you to do the math.
Screw you. It’s not natural to “reward” people with bullshit meaningless buzzwords.
It isn't surprising this wasn't designed for JS. This seems like a Least Cost Path exercise that's more suited to C or C++. The easiest path most likely involves recursive functions. I'm more of a C++ person than a javascript person, but I don't think I've ever really encountered branching recursion in javascript. I think the easiest path forward would be to find all valid routes and then calculate the probability for each. 
I'll take this as you expressing a lack of interest in claiming the bounty :) we'll look elsewhere!
Good luck, you fucking scumbag.
You're looking for a tree, chained list style. var question = { Answers:[`something0`, `something1`, default], nextQuestion:[Question0,Question1, default], // list of next question type object depending on answerId userAnswer:`storeUserAnswer there`, checkAnswer:function(userAnswer){this.userAnswer = userAnswer; //check which answer matches return nextQuestion[answerId](); } } Don't try to run the code, it's just for the concept. 
So one thing you should think about when making functions is the use case. “If the function can return 3 different things, do I want them to all output at once, or let the user determine which?” So you could design a function like: function salary(jobTitle) {} And allow an string argument to be passed in, like “python”, “javascript”, etc. Then in your function you handle the logic within the function to return the specific salary based on what string is passed in. 
What seems more stable? A loading animation that completes and returns your request at a precise 350ms 99% of the time? Or the request coming back anywhere from 20 to 350ms 99% of the time? I think the idea has merit!
 const towns = []; class Town { constructor(name) { this.name = name; towns.push(this); } } towns.length // amount of Town instances towns[0].name // the name of the first town instance
take a look at jung: https://www.npmjs.com/package/jung
Yes. All JS APIs are just “extensions” of vanilla (plain) JS. 
[https://www.npmjs.com/package/supervisor](https://www.npmjs.com/package/supervisor) ? No deps and runs from the CLI.
Hi /u/HydroNoah, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (/r/javascript is not a job board).
Legit question: if you need a CLI solution, does it really need to be in node? Wouldn't something made in any other language work? Most solutions are going to be api based for a reason
you could also do `class Town { constructor(name){` `Town.all = Town.all || [];` `Town.all.push(this);` [`this.name`](https://this.name) `= name;` `}` `}` 
Do you have a gist or codepen that you can share?
no
You'd do it so someone else can just `npm install; npm start` without having to worry about configuring their computer.
Have you tried `onchange`? I invoke it using `npx` and it’s got a CLI that fulfills all your requirements. 
I think you have some badass logic, You have to cheat on his assignment to show him how effective his lessons are, ok. An advice : You don't need to justify yourself, just ask help... When given something to code, the first step is to know what is the function, what are the values, what the function is supposed to do. Everything is in what you say : One function. // how do I declare a function. which returns 3 values. // how do 3 value and return them as one, maybe we could create a container that has 3 value inside with their own name. 
thanks i figured it out before i got back to the comments i appreciate your good intentions
hey thank you very much i was able to figure it out before getting back over here but it was very similar and all very simple... i had a talk with my awesome friend and i feel like i wiil be getting the hang of this language!! thank you for your help.
hey thanks i figured it out before i got back to the comments i appreciate your good intentions, advice &amp; help. blessings.
Then Facebook's idx should perfect fit your needs. https://github.com/facebookincubator/idx
`window.MyApp` shouldn't throw an error, even if it's not defined, could be that a variable named `window` is being defined as `undefined` inside your function and you are trying to access this variable instead of the global window. Your error messages are messed up for sure (especially the last one, makes no sense whatsoever). Try logging with console.log right after your code runs
never mind, I've fixed that. also, what's the naming convention for such **namespaces**? Should it remain "MyApp" or should I rename it to "myApp"?
I’ll say it again, I believe everyone who works with React / Redux are realizing that all of the patterns for getting/fetching/manipulating data to and from an API (REST or Graph) can be abstracted. I truly think many engineers, across many different companies, are drawing the same conclusions about how to manage this and are writing A TON of the same code. I wish one system would gain support / be supplied by the official React team.
Or better yet install it as a global package.
./great\_ux --no-useless-wait-time
I’d say no, but I admit this is kind of a gray area. Is a landing page a single page application?
&gt; IMO a better pattern is to have a small waiting period before the loading state is even shown. Yeah, when React Suspense was first unveiled/demoed, I noticed they built this pattern into the API: https://youtu.be/nLF0n9SACd4?t=18m26s I also read an article somewhere about how Apple does the same thing in iOS menus, but I can't find it right now.
Newbie here, what should i use instead of MongoDB?
With `fetch` now supporting cancellation, any timeout done like this should also (attempt to) abort the request. Worth noting that `node-fetch` has a timeout option built in.
I personally tend to shy away from using global packages when they're required for a project. If another user clones your project and they don't have them, your code will break.
Sure - my recommendation was to use it when only *you* are using it for dev, not when you assume other people will be developing the component. In that case, `devDependencies`
Your site uses attractive colours that are easy on the eye. However the white text ("We all know how hard it is to build...") does not show up well against the background. Also, Firefox developer tools tells me that there are an awful lot of files being loaded on page load and that the page takes 3.69 seconds to fully load. This seems quite an overhead given your page has not got much content. For example there are 13 different Google fonts loaded.
PostgreSQL is good.
Ok thanks :)