All I see is hate for Angular 2.0, is there an article or something I can read to inform myself as to what's so terrible about it?
&gt;Excuse me, sir! Can you direct us to the naval base in Alameda? It's where they keep the nuclear wessels. 
I've worked in IT with people that couldn't get the difference. It's shocking. 
I think rand486's point was that the salaries in those cities should be discounted for the increased cost of living to be comparable to salaries elsewhere. 
Possibly, but they still tend to technically work in the HR department. By that I mean, their checks usually come from the HR budget. I will say that I'm surprised Reddit is so anti recruiter because I tend to see a lot of recruiters on LinkedIn with fedoras/trilbies :P
One of the members on the core angular team made a blog post detailing all the changes. I'm on my phone so its difficult to find it, but give me a few minutes and I'll edit it in. Edit: I found it - http://eisenbergeffect.bluespire.com/all-about-angular-2-0/
I fucking love Raganwald
I walked into a bookstore 5 years ago and asked them if they had any books on "C Pound".
&gt;[**no no NO, HELL NO!!! [0:15]**](http://youtu.be/HhTv2kSBMhc) &gt; [*^myreactionwhen*](https://www.youtube.com/channel/UC3Hy3lX4QY1b88J2XHzDCww) ^in ^Entertainment &gt;*^115,035 ^views ^since ^Jun ^2011* [^bot ^info](http://www.reddit.com/r/youtubefactsbot/wiki/index)
Probably Laravel.
Well he was trying to be polite while barely containing his laughs, but after he told her, he came into our office and we were all rofling about it
There's Equality and then Identity operators. If you're used to Java and other "reasonable" languages then stick with the Identity operator. Using the JS equality operator is akin to opening Pandora's box!
If I were him I'd thank that recruiter for their services and go with someone else. Unless it was only one fuckup in a long relationship obviously.
I spent way too many clock cycles trying to figure out how cars and carnivals both use semicolons.
You'll be good and trained up for a career of being exploited by an Indian IT bodyshop with that class.
Nice project! By quickly looking through the code there are MUCH faster ways to compute the determinate. Calculating it by minors does not scale. See QR factorization. Taking advantage of the fact that if A = BC then det(A) = det(B)det(C). You will find that with this method you can easily solve for the determinate of 1000x1000 matricies
Well to be honest the guy looks like an arrogant prick (I'm not saying he is, just it looks that way). He could have at least made a joke about it, instead he is like "oooo, I'm the guy that invented the language, I'm too important to bother with you".
YESSS!!!!!! THANKS SO MUCH!!!! I got this book for Christmas but had some trouble understanding some of the more exotic usage, so this is absolutely perfect. Can't thank you enough for sharing. 
&gt; JavaScript developers are a dime a dozen I honestly get the impression that this isn't that true relative to the huge surge in demand in recent years. This is the reason why I'm trying to move from PHP to JS. Also there's a difference between someone who's done the odd bit of jQuery and a full blown JS developer. 
&gt;and is capable of doing much more than Javascript. Not per line of code.
 Good demo but the title is misleading. You're including 9 libraries, so it's really thousands of lines of JavaScript "express": "^4.10.6", "node-uuid": "^1.4.2", "socket.io": "~0.9.16" "angular": "^1.3.0", "json3": "^3.3.0", "es5-shim": "^4.0.0", "bootstrap": "^3.2.0", "angular-route": "^1.3.0", "eventEmitter": "~4.2.11 So if I extracted everything into a library, and only called one method, would it be only ~1 line of JavaScript?
I recently made an web application that we "built" using node-webkit for some customers. We used BackboneJS, requirejs and websql. This stack worked out really well for us. 
A framework is like a woodwork jig: provided you are doing what it is made for, it saves time by doing some of the work for you. Ember, Backbone and others do this to a greater or lesser extent. JS is a language, and Node is a way to run it from the command line, instead of inside the browser. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Dudley Pound**](https://en.wikipedia.org/wiki/Dudley%20Pound): [](#sfw) --- &gt;[Admiral of the Fleet](https://en.wikipedia.org/wiki/Admiral_of_the_Fleet_(Royal_Navy\)) __Sir Alfred Dudley Pickman Rogers Pound__ GCB, OM, GCVO (29 August 1877 – 21 October 1943) was a [Royal Navy](https://en.wikipedia.org/wiki/Royal_Navy) officer. He served in the [First World War](https://en.wikipedia.org/wiki/First_World_War) as a battleship commander, taking part in the [Battle of Jutland](https://en.wikipedia.org/wiki/Battle_of_Jutland) with notable success, contributing to the sinking of the [German](https://en.wikipedia.org/wiki/German_Empire) cruiser [*Wiesbaden*](https://en.wikipedia.org/wiki/SMS_Wiesbaden). He served as [First Sea Lord](https://en.wikipedia.org/wiki/First_Sea_Lord), the professional head of the [Royal Navy](https://en.wikipedia.org/wiki/Royal_Navy), for the first four years of the [Second World War](https://en.wikipedia.org/wiki/Second_World_War). In that role his greatest achievement was his successful campaign against German [U-boat](https://en.wikipedia.org/wiki/U-boat) activity and the winning of the [Battle of the Atlantic](https://en.wikipedia.org/wiki/Battle_of_the_Atlantic), but his judgment has been challenged regarding the failed Norwegian Campaign in 1940, his dismissal of Admiral Dudley North in 1940, Japan's sinking of the *Prince of Wales* and *Repulse* in late 1941, and his order in July 1942 to disperse [Convoy PQ17](https://en.wikipedia.org/wiki/Convoy_PQ17) and withdraw its covering forces to counter a non-existent threat from heavy German surface ships, leading to its destruction by submarines and aircraft. His health failed in 1943 and he resigned. &gt;==== &gt;[**Image**](https://i.imgur.com/r0irDU5.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:SirDudleyPound.jpg) --- ^Interesting: [^Andrew ^Cunningham, ^1st ^Viscount ^Cunningham ^of ^Hyndhope](https://en.wikipedia.org/wiki/Andrew_Cunningham,_1st_Viscount_Cunningham_of_Hyndhope) ^| [^List ^of ^Lords ^Commissioners ^of ^the ^Admiralty](https://en.wikipedia.org/wiki/List_of_Lords_Commissioners_of_the_Admiralty) ^| [^Prince ^Louis ^of ^Battenberg](https://en.wikipedia.org/wiki/Prince_Louis_of_Battenberg) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cng3e1m) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cng3e1m)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
run away. RUN AWWAAAAYYY!!!
Cool, great work. Is this on github?
Thank you!
If you want to use it to learn it, go ahead. I wouldn't recommend it myself (Instead opting for React) but there's a definite usage out on the web of Angular and if you get into web Dev, you will most likely run across an Angular app so it will be useful. I can't stand it and whenever working in it I find that I tend to write it like I would write my React components (updating the scope data, not using watch...) and hate myself for not using React instead.
I still can't get anything to work. I think I'm going to have to explore other options. Thank you to everyone!
Like the other 2 posts is explaining, Angular, Ember, Backbone are almost the same and will help you a lot with web-developing. I personally prefer Angular because of the community around it and easy to learn/use, Ember has a slightly longer learning curve and lesser community. As Backbone is the oldest of the 3 but I personally like how Angular helps you.
Aww, low blow :)
Don't get fooled by this article. Java is not JavaScript. Java is a coffee bean! JavaScript is a new way to serve your coffee. If you go to starbucks for example, which is the only company which sells JavaScript coffee, and order one double-crisp JavaScript you get a huge cup of shit with creme on top of it. There is also CoffeeScript, hence the name. Basically you get served the same cup of shit with more sugar. Trust me. Source: I drink JavaScript for my own. 5 days a week. 
Some "best practices" I've found with writing modules: https://github.com/mattdesl/module-best-practices
He should of took the job, just for the heck of it.
Carpet, also known as car, for Short...
thank you. let me expand on my original question. let's say i wanted to have a page with text paragraphs and a button to be clicked by the visitor; upon the click, i want to find paragraphs that start with a letter P and change just their background color, while leaving the others as-is. i know i can write javascript to traverse the DOM with some loop, and change css properties for relevant elements. or, i an also utilize jquery library, to make a single (simple) call and let jquery plumbing utilize its generic DOM traversal routines to accomplish the same. all this is processing taking place in the browser. my specific question is: express, angular, backbone, ember .... which of these overlaps jquery in its most frequently intended purpose?
When it comes to frameworks, I prefer Angular because of readability and community support. But... that it can be any framework, Backbone is the oldest. Personally I think Backbone is great but still need to learn more about it. And Ember... well... I don't have a lot of experience in that one. IDE? I would suggest a good editor like Sublime or Atom (love that one, but it is sloooow, so Sublime is my preferred one) 
thank you. let me expand on my original question. let's say i wanted to have node.js website to allow visitors to save their own playlists for future use. i would need a http(s) server, js runtime, a db to store data and code to manage logins, session etc. afaik, installing node.js will address the http+runtime, but i still need to write raw js to manage logins-sessions-dbcalls; or i can make use of some existing framework to reduce the amount of my own coding (aka pasting code i find using google) all this is processing taking place in on the server. my specific question is: express, angular, backbone, ember .... which of these extends the base node.js install, to aid the development of webapp functionality most often residing server side?
Facebook's been borrowing a lot of successful ideals from the functional paradigm (immutability, statelessness, etc.) and 'porting' things from Clojure into JavaScript. [React](https://facebook.github.io/react/) and [Immutable](https://facebook.github.io/immutable-js/) are two great libraries that can change the way you think about JS development and scalability. The only real downside to React is that it's pretty hefty, but if you considering that it's emulating it's own DOM and doing high perf diffing once loaded, it's no surprise. If it's a medium-to-big application React is the way I'd go. If it were some small (and will stay small) data binding requirements where I need a lot of browser compatibility, I'd probably just go with [Knockout](http://knockoutjs.com/) over Angular since the mark up is cleaner than and the checking isn't dirty. With throttling Knockout's really performant too.
A great resource. I frequently recommend it.
I heard that was a management decision. They heard Java was all the rage and wanted it so Eich called the thing he was working on JavaScript. I don't think they knew the difference. 
Postponed till I have OS in javascript to run this browser
That's only because you didn't use ===
Company bus or muni? Even on a packed municipal I can't imagine more than 20% are engineers. 
If you just learn CoffeeScript's syntax, all of this is extremely obvious. Read the docs of the languages you use, people :) And if you're completely new to JS, I wouldn't start with CoffeeScript—It's probably best to understand the language you're compiling to best before learning preprocessors.
&gt; And I don't mean "all bosses are stupid" *My* boss code railroad controllers in asm.
Whoosh!
That's a great tip, I'll add that in :)
Hmm perhaps I was wrong. Last I checked the download size was pretty large… but maybe that's changed :) I was only referring to download size--it's totally okay on memory. Either way, it's good news that it's worked for you and the size can easily be justified. I've not been able to use it for any production project.
It seems a bit premature to ask this. Don't bother with a library or framework until you can show that it offers your project real, measurable, benefits. Don't just include one because you think you're "supposed to" or because "that's the what pro's do". If you're not in a position to evaluate how various third-party tools will impact your project, it's certain that no-one here will be either.
Yeah, if you get the dev build unminified, with all the helpers and documentation it's pretty big (559k). I wouldn't run that in production though. 128k in production seems fine for what it does.
In this particular case it seems the early return has a negative impact on performance http://jsperf.com/earlyreturn Personally I wouldn't bother with early return unless the function had a considerable amount of stuff inside the if statement and nothing after it, but that is possibly due to my training in python where you try to keep things as un-nested as possible for ease of reading.
Not sure why the updated version was recommended. It is better practice to use a conditional branch for control flow rather than an early return statement. Early return statements can easily be overlooked or be forgotten about when refactoring code. It will not make the method any faster. Even if it did make it barely faster, clean code should always be preferred over marginally better-performing code.
I think it's more of a personal preference. I prefer returns over nested ifs because I find it easier to read and log errors. It also makes adding and removing conditions quite easy. function example(){ // don't update videos that are already running if(video.currentTime &gt;10){ return; } if(video.format !== "youtube"){ logger('Video format unsupported, format given: '+video.format); return; } //update()... } vs function example(){ // don't update videos that are already running if(video.currentTime &lt; 10){ if(video.format === "youtube"){ //update()... } else{ logger('Video format unsupported, format given: '+video.format); } } } I doubt that there is any noticeable performance difference here. But I would love to be proven wrong.
Here is the full source of it. Pretty short and sweet. &gt; function comparator(a, b) { &gt; return a - b; &gt; } &gt; &gt; module.exports = function (arr, cmp) { &gt; cmp = cmp || comparator; &gt; var temp; &gt; for (var i = 0; i &lt; arr.length; i++) { &gt; for (var j = i; j &gt; 0; j--) { &gt; if (cmp(arr[j], arr[j - 1]) &lt; 0) { &gt; temp = arr[j]; &gt; arr[j] = arr[j - 1]; &gt; arr[j - 1] = temp; &gt; } &gt; } &gt; } &gt; return arr; &gt; };
This.
What's a short?
I think the problem is coming from the form action and not your javascript now. If you look here (http://stackoverflow.com/questions/4227043/how-do-i-cancel-form-submission-in-submit-button-onclick-event) you'll see that you can return a boolean value to your onsubmit where false will cancel the submit action. If you add return false after window.location.href it may allow you to redirect to time-limit.asp.
Nice article. Two corrections: 1. Object.freeze is part of ES5, not ES6 2. Once completely implemented in browsers, the new class system will actually offer something not possible today: Proper sub classing of built-ins, most notably Array. For example, imagine jQuery objects to be actual arrays with all the other stuff on top.
Interesting, but you need more test cases. Quick inspection suggest it throws if a non-object is found where an object is expected, e.g. {foo: 12} and 'foo.bar', also the string comparison that gets out of the loop early will fail if your property chain has duplicate names, e.g. 'foo.bar.baz.bar'
Two teams live code a website in 60 minutes. One person from each team does Html, another does CSS, and another JavaScript. No person may touch any language he is not assigned to. Teams are not pre-formed they consist of random people who have Signed up for the language. I'm a huge fan as of the war last Friday. Feel free to sign up and code with a team or join the rest of us in the chat as We watch and vote for the winners! 
&gt; easily overlooked or forgotten when refactoring Bro, do you even unit test?
I tried and it did nothing. I have to say I'm getting a bit frustrated. :( I feel like I am understanding but obviously I'm not. I have a bandaid on it for now. I am going to be going through all of the Javascript classes on Lynda and codeacademy this week. I have to know how to make this work just to know beyond anything else. :)
And thank you so much for looking at this and thinking through it with me. The coding culture is very intimidating to newbs. 
Addy is like a god, seriously.
These are really great too: https://www.youtube.com/watch?v=QSCfaTsCDrs
Pretty cool - on Chrome 41 it started OK, but then startnig spinning, and I couldn't make it go the other way without pressing both "a" and "left arrow". Opening the drawer was frustrating, and kept throwing the key and torch around, but otherwise, it's amazing. JS has come a long way!
Why would any one want to use bubble sort when there are much more efficient sorting algorithms out there (already included in javascript by default)? And if no one is using it, what's the point of publishing it to npm? I really don't understand why this context-less extremely basic algorithm is upvoted here? what am I missing?
I couldn't get through the first freaking level where you have to enter some kind of pass code :| I'm a tool yeah.
Depends where you are in Iowa. Eastern Iowa is [rolling hills](http://webcentrick.files.wordpress.com/2012/10/10-x-20-iowa-variety-2012.jpg), some [gentler](http://media-cache-ak0.pinimg.com/236x/3d/bc/df/3dbcdf71a4d478acff2075cc4872ae6b.jpg) than others, with some [limestone](http://www.inhf.org/images/learn/Upper%20Iowa,%20Clint%20Farlinger.jpg) [cliffs](http://www.naturallyamazing.com/americasparks/8064.jpg). Western Iowa ranges from [floodplains](http://upload.wikimedia.org/wikipedia/commons/0/08/Missouri_River_south_of_Sioux_City_aerial_01A.jpg) to [loess hills](https://www.iowabyways.org/img/photos/byways-splashes/loess-hills-3.jpg). West-central iowa has some [flat areas](http://lincolnhighwayguide.com/wp-content/uploads/2013/06/2013-06-13-13.54.00.jpg). If you were thinking it looked more like [this](http://theprairieecologist.files.wordpress.com/2013/09/enpo100424_d006.jpg), [this](http://aiminglow.com/wp-content/uploads/2012/04/nebraska.jpg), or [this](http://images.fineartamerica.com/images-medium-large/united-states-kansas-landscape-of-farm-keenpress.jpg) that's Nebraska and Kansas (though there are a few areas in Iowa that are flat like that). But yeah, there's a lot of cornfield.
Programming exercise.
This is wonderful. So glad I found out about it, you should cross-post to /r/webdev 
Why is this dude's algo101 exercise is worth mentioning and upvoting in this subreddit?
Thanks for the feedback. The second issue you mentioned was fixed by simply checking if it's the last token `if (props[i] === last &amp;&amp; i === prop.length - 1)`, but I'm not understanding the first issue you mentioned. For keys with periods it should be wrapped in brackets `var obj = {'foo.bar': 'baz'}; getProp(obj, '[foo.bar]') // 'baz'`
Neither: npm scripts + browserify :)
Commentator just discovered Emmet. Who the heck is that?
I don't know if you are already using this but I thought I'd throw it out there. If you use Chrome to test your pages as you develop them you can use the chrome dev tools (https://developer.chrome.com/devtools), other browsers have similar options, but I like Chrome the best.
Is that some kind of future Chrome? I'll have to try it for myself. What gfx card do you have? Does the game seem to be running slow? And, ya I know that sometimes you really need to fight the physics engine on things like the drawer. Just part of the challenge :p
I prefer Grunt because it's configuration instead of coding. I shouldn't have to unit test my build environment.
perhaps what you need are exceptions?
1: Oops, that's what I get for never using it. Fixed. 2: Hmm, is that really the case? It will actually behave differently vs. extending them using the "old style"?
You can also use npm and make.
I am trying to make gulp work at the moment. It is supposed to be much faster than grunt for most things and I hate config. Gulp's error handling is outrageously bad. Most plugins choose to fail silently rather than throw errors. There are monkey patches that try to make it suck less. They barely work. 
Nice article! I use lots of build tasks so I need gulp for its speed, but I can appreciate grunt for its simplicity in a case where fewer tasks are needed.
&gt; Java is a programming language that compiles and builds stand alone applications Uh, in what world? Java still needs a virtual machine.
Hahahahaha. 
What, they don't use the latest responsive node.js fanciness for a rail controller? Obviously an idiot.
[First!](http://i.imgur.com/EINDnRd.jpg) - Changeup Charley
Shit, just missed it :( - any VODs available by chance?
I bet you're looking at your phone right now.
http://www.twitch.tv/syntag/profile/past_broadcasts
http://www.twitch.tv/syntag/profile/past_broadcasts
u rang?
Yeah, extendable is what I meant. It's pretty easy to compose functions when the underlying data structure is a *fixed* size array (or a single value), like 4x4 matrices. If I had only been working with a small subset of same-sized matrices, I would have done things with composition. But with NxN, there is not one parameter but the array, number of rows, and number of columns. The boilerplate of working with NxN makes extensibility more applicable than composition.
We came up with something similar internally in our company. Turns out the implementation with a for loop (just like in the OP) is way faster than any recursive implementation in lodash-contrib or underscore-contrib. http://jsperf.com/deepobjectsearch
Given your array of objects construct, there are two ways to access the object's property by name: var val = quiz[0].questionID; Or... var val = quiz[0]["questionID"]; Where 0 is the index of the object inside the array. Both access the same property "questionID". Of course this can also access the property "correctAnswer", for example, as in quiz[1].correctAnswer. We also can access array's length to find out number of objects as: var len = quiz.length; Having said this: var question = "KC2Q4"; var answer = null; for (var i = 0; i &lt; quiz.length; i++) { if (quiz[i].questionID == question) { answer = quiz[i].correctAnswer; } } if (answer == null) alert("Answer not found"); else alert("Answer is " + answer); 
thanks! are saying that functionally speaking, angular == ember == backbone? therefore, i would need to get a book on just one of these 3. is there a similar alternative to jquery?
&gt; elegant 
if the plugin developer also set it up as an npm module, you can download it with npm install [pluginname] and then load it in your front-end app using browserify. It's nifty, although I'm not a big fan. A lot of front-end plugins arent on npm, and browserify has to concatenate them all on every save, and then you have to debug with source maps. I'm just gonna keep using grunt and requirejs until real es6 modules come out.
I think you meant to use .filter instead of .map. .forEach with a tweak to the callback function would also be acceptable. In the above example, matchingItems === [true, false]
Jesus who the fuck cares about bubble sort. I feel like this may be Addy trying to bump up his popularity more. he's already a very well respected and known javascript developer at google. /r/HailCorporate might get a kick out of this. 
https://github.com/KevBurnsJr/Iris
Doesn't work on mobile devices, I guess?
It's OK, but forcing make and sh to perform concurrent operations without race conditions can be pain. 
There is reason to use bubble sort - it's better than quicksort for arrays with less than 9 elements.
Doesn't work on Firefox either (Edit: hmm...maybe intermittent, second time I loaded it it was fine). Tun little game. The solution is very hard to read, maybe consider the ability to zoom in or magnify a section? Looking at the source, it looks decent, organized. But it could be more modular, right now it's likely to be really hard to add to or change things without touching a number of different places in the entire escape file. You might be able to abstract the ability to add new items out so that you just pass the item to a function, where it goes, and a function to call on click. That should also allow you to remove the if/then/else logic for the click handler - try pushing the click functions to an object with the key as the name passed to the handler on create, and then just reference that function by the key value passed to the itemClick function. Strictly stylistically, I generally always put the opening curly brace on the same line because there are certain places in JavaScript that will be a gotcha (after a return statement). And I am working on naming all of my functions. Personally, I like to define my functions separately and then just have a block of that sets up the function references. These are just my current quibbles, feel free to disagree, I tend to try things to see how I like it and then adjust my preferences over time.
I have used plumber. it makes gulp barely usable. I am sad that plumber exists as a monkey patch instead of as the normal functionality. Plumber allows you to ignore errors. Nothing exists to fail on error. Many plugins do not cause the process to exit as an error. The error handling is very inconsistent. I wish I could add a handler on the end of a stream that would catch errors. I like how promises bubble errors.
No, sorry, there's no chance it works on mobile
Weirdly, the first time it just sat on a black screen. I had closed the tab, and then reopened it after posting (and looking at it in Chrome) and it worked the second time. I didn't think to check the console to see if there were any errors. Using v.34. Added some comments to my original post.
Oh, and welcome back to JavaScript! It's pretty cool what can be done these days.
I only use it when checking if x is null or undefined: if (x == null) {} // instead of if (x === null || x === undefined) {} Everywhere else I use === for consistency's sake.
Yes. Again, for ELI5. For ELI a programmer, no. No. jQuery is the standard.
the new (I think) site looks really nice! My first goal of 2015 is to learn ES6, so I can't wait to read more of the docs (and figure out how to use 6to5 with Browserify and Angular)
I have built major tasks in grunt. I have build major tasks in gulp. I think I hate them both. I think you might be right to just build *.sh scripts to perform common tasks. Grunt and gulp seem like a huge amount of code to essentially call cli enabled processes. Some of those *.sh files might launch a nodejs file to compile, concat, minify my source. Another *.sh might launch a nodejs file that watches my source and compiles on save.
I get a server error when I click Visualize execution in the linked example.
I like the revealing module pattern (I believe that is it's name). Something like this in JavaScript: ;(function(w) { // yes, not 100% private, but as close // as you get in JavaScript var private_stuff = 'private'; function some_private_fn(stuff) { ... } function another_private_fn(more_stuff) { ... } function exposed_fn() { ... } w.myNamespace.thisModule = { exposed_fn : exposed_fn } }(window));
Oh, the other thing is...don't try to duplicate OOP in JavaScript. Embrace pure Objects, and prototypical inheritance rather than trying to recreate classical inheritance. Here's a couple links I've enjoyed: Kyle Simpson - http://davidwalsh.name/javascript-objects Eric Elliot - http://ericleads.com/2013/06/classical-inheritance-is-obsolete-how-to-think-in-prototypal-oo/ Eric Elliot - https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3 
Are your unit tests configured too? Otherwise they have to be unit tested too... wait what
Yes this is the function in a function stuff that I dislike. If its the best thing I may have to just deal with it.
Thanks!
I have been using 6to5 a lot recently after reading this article on the subject https://medium.com/@brianleroux/es6-modules-amd-and-commonjs-c1acefbe6fc0 It's a great article and I've found it a great technique for improving my workflow.
Webpack
I agree with most everything except directives - they're awesome! The learning curve can be a bit much for some, but it forces devs to break the habit of creating huge, monolithic controllers or functions that end up being god objects. The biggest pita is scope, hands down. :)
What he has created is very impressive. Although, from his tutorials, the way he is programming the game isn't taking advantage of JS much. 
This makes sense. The better isomorphic examples seem to structure their CommonJS modules in such a way that allows maximum reuse while keeping the client-side bundle as minimal as possible.
just use Makefiles, don't need to bother with separate shell scripts
What server software are you running?
I still use grunt for build tasks, but browserify + node/npm is amazing and makes front end javascript suck way, way less.
addy is crazy good but bubble sort is 101 type stuff
&gt; I'm working day and night for the past 6 months. Do you think that is fair? Do you really think the 9th hour in the day is a productive one? Sounds like you should find some other place to work.
Dude: you are not giving enough information for anyone to be able to help. IOS developer: you mean Objective-C or Cordova/Phonegap? What does IOS have to do with it specifically? PUT message coming from where? Javascript generally SENDS requests not RESPONDS to them. That's why I asked you what SERVER you were using Javascript on? Javascript is a client language. It makes requests in the HTTP protocol. It usually doesn't respond to requests. Some server environments (e.g. Node.js) do actually use Javascript. But you say that you don't have a server yet, so I am totally confused.
I can likely help. I currently work using protractorJS to perform end to end tests. Do you have any karma unit testing set up?
Angular has tools for unit/e2e testing, but its sounding like these were not used if you are doing manual testing now. This needed to be done while the original app was being built, by the devs building it. Its a shame because this would have documented features and previous bugs to look out for as you do the refactoring, at least for parts of this behemoth you have described. I'm not sure how you are supposed to constantly add new features, refactor and test all on your own, particularly if there was not automated testing set up from the start. Its like being between a rock and a hard place. 6 months? The last time I was in some position like this, I quit for a less stressful job. 
I'll wait until there are blog posts about the next big thing after Gulp, that's when I'll switch over to Gulp.
I really am not worried about the work load part. I work with quite intelligent people and everyone is loaded to their brim. I'm very frustrated that I might not be working smart enough. I feel that the same project in anothers hands might have fared better. I am a senior engineer after all. I have to be able to maintain one application, shouldn't I?
I'm really frustrated that I'm not seeing any results. I feel I'm not working smart enough somehow, I badly need an architects advice maybe? Until we get that, is there something I can do? In the department of refactoring an angular application?
No. I can use protractor easily? My directives and controllers are fuzzy scoped right now. Let me read more about protractor and get back to you
How do I turn on the flashlight? Clicking it causes it to drop.
If you want a little constructive criticism on the videos themselves (i.e. nothing about JS), read on. (If not, well, don't) 1. The interruption is a very bad idea. For 8 minutes you interrupt the original tutorial with something completely unrelated. It makes the audience lose attention. 2. More generally, you would avoid issues like that if you prepared a bit of script beforehand. You don't need a very detailed script with everything on it. Just do the full code first or at the very least the main points. This way you won't *need* the interruptions and would minimize the *wandering about*; this would maintain the audience attention and focus much better. 3. Could we somehow avoid the "this guy" thing?
They're playing LoL now I guess I'm late. can I join! I don't have a team tho :'( but I'm a fast dev
I know that, I just don't understand the reason why these two regexes appear on that line. `^(.*?)` at the beginning and `(.*?)(.*)$` at the end. What's this for? This is a joining code to construct a fuzzy match regexp, but that `(.*?)(.*)` part... I can't get what is this.
+1
thanks! edit: DevWars.tv/Play is 404 but DevWars.tv/play works edit2: I can't on the provided schedules :( I'm on habitat for humanity this Saturday, when will this happen again ? thanks!
Thank you!
People being scared to use Angular now because of the perceived upgrade issues when 2.0 rolls around.
Its a game of roulette, taking over an existing codebase. Even if you are the smartest person on earth, it doesn't help you to peer into the madness of 20 other devs who had been working for 3 years or whatever not following the BKMs for an enterprise-level app. I would see it as a failure of management or the earlier lead devs, not the person taking over. Sometimes its not workable at all, sometimes its painfully workable, other times it can be smooth and easy if they cared about maintainence and testing. I think the architecture of angular is relatively straightforward; its all these external things mixed with it and the implementation details that get difficult since you start going out of the digest cycle. The fact that it has a bunch of jquery is concerning. I've found little to no use for it in angular apps + a tweening library. I guess just some general advice for refactoring would be to have all that dom manipulation in directives and not controllers at least, use services to communicate between controllers, directives, other parts of the app. If you want to make unit testing easier as you refactor, chop up form-like views into directives. here's a [presentation](http://slides.yearofmoo.com/ng-mtv-meetup-nov2014/index.html#/1/0/) about refactoring complex forms
https://www.youtube.com/watch?v=HhTv2kSBMhc
doesnt work. pls fix
Sorry, has Backbone suddenly crumbled to dust in 2015? You also have: - Ember (more complicated but more complete) - React (mainly a view layer) - React + Flux (the new cool, my actual preference) - Angular (a nonsense, not to mention the v2 scandal) - Meteor (haven't used it) You've also got the outliers like mithril, Vue, om, Durandal etc. There are lots of options, most of which I'd go for over Ext JS unless someone was throwing money at me.
No proper documentation/tutorial is big one issue, but the bigger problem is that I can not find a single unit test anywhere in any of your python or javascript code. Projects without tests aren't ready for public consumption 
If your going to jsperf then please make SoMe effort to avoid the browser optimizing it. This one.... http://jsperf.com/earlyreturn/3 ...has done that, on ya Daniel ;) As for opinions Im with prettycode and UgnisKarolis
Bloggers: -- 10 ways front end dev can have you wiping with $100 bills in a weekend. -- Angular is old and busted ... check this awesome Angular 2. -- Gulp. Except people who actually need Grunt's config heavy approach. -- if you don't use ECMA 6 you are completely fucked RIGHT NOW. -- OMG Unity is awesome. (Runs game). WTF is this snail? -- Node is terrible, use Rails (and the opposite). -- Top reasons nobody uses Rails in the enterprise. In all seriousness, I think we are going to hear more of react, and either sails or another framework that does the same thing, since I heard sails is not active.
Source code available here: https://github.com/geelen/loopgifs
Have you taken a look at The generator generator? https://github.com/yeoman/generator-generator
I used the tools Meteor already provides. You can add your target platform to your app project with the command line tool of meteor and also run it. Either directly on your device or in a simulator. It's nothing more than meteor add-platform ios meteor run ios Actually pretty easy. You can take look it up at their [docs](https://docs.meteor.com/#/basic/buildingmobileapps) or on [Github](https://github.com/meteor/meteor/wiki/Meteor-Cordova-Phonegap-integration) if you are interested.
I built [canal.js](https://github.com/xueye/canal.js), a hybrid pub-sub library.
CSS Preprocessers/Reprocessors: [CjsSS.js](http://opensourcetaekwondo.com/cjsss/) - VanillaJS Version [ngCss](http://opensourcetaekwondo.com/ngcss/) - Angular Version Basically I've embedded Javascript within CSS so you get variables and the programability of LESS or Sass but none of the mangled code or limited libraries, plus live-binding (hence "reprocessor"). Plus you already know CSS and JS, so nothing new to learn. Thanks to these I've also built a rather impressive `eval` library that allows you to do basicially whatever you like with dynamic JS in any context you like from contextual (think Angular's `$scope`) to global (duh) to completely sandboxed. (Though I still need to break this one out into a separate library, though it is completely segregated within [CjsSS.js's code](https://github.com/campbeln/cjsss/blob/master/cjsss.js#L587) )
I made some express middleware for using [react-router](https://github.com/rackt/react-router) on the server. * https://isomorphic-lab.herokuapp.com/addthing You can disable JavaScript at any point and it'll fall back to full-page refreshes, doing all the data fetching and form validation on the server using the same React components.
and if you work in an office with linux, osx, and windows, are you going to maintain sh and bat files?
My last project added personalized delivery quotes to product pages for my employer. My last personal project of note is some [row/column rotation logic](https://github.com/oculus42/rc.js), because some data is much better as columns.
whoa, it's just you posting in there? You're doing god's work.
Nice work here, thanks for the service
[css matrix3d() tweening](https://www.npmjs.com/package/tween-css-transform) by decomposing, interpolating, and recomposing matrices as per [w3c spec](http://www.w3.org/TR/css3-transforms/#interpolation-of-2d-matrices). couple demos: - [random rotations](http://requirebin.com/?gist=9ee27b3c7b527cbb194e) - [stress testing](http://mattdesl.github.io/tween-css-transform/demo/stress.html)
+1, thanks op! 
Nice. I'm digging some of the FRP concepts, although sometimes there is too much "magic" going on IMHO (e.g. Bacon's sliding windows seems app-specific to me, outside the scope of FRP utils). Skimming your code -- how does [this line](https://github.com/robin-allen/frp.js/blob/62b77d809cdbd12b3b8de0464ba8c4bc805ae725/src/event.js#L13) even work? It's requiring a module that doesn't seem to exist in `src`. 
In ES6 there's a new method on the array prototype just for this use case: function getAnswer(questionID) { var result = quiz.find(function (elem) { return elem.questionID === questionID; } return result.correctAnswer; } You can grab a polyfill here: https://github.com/paulmillr/Array.prototype.find
Protractor was specially designed to test angular. are you development or qa? Because if you're dev, you probably would rather spwnd your time writing unit tests in karma. If you're qa, then protractor is for you.
A syntax-highlighting code editor, from scratch, rendering to a Canvas element: http://capnmidnight.github.io/Primrose/ I need it to be able to apply text to WebGL meshes for a WebVR demo I'm making. I posted here a couple of days ago. I've worked pretty much non-stop since then and have gotten a huge chunk of the project done. I would really appreciate some help with the international keyboard support, though. I'm afraid the Windows on-screen keyboards might be lying to me about keyCodes, or I have created incomplete code pages. 
Great idea! This could be very handy to quickly fix layouting issues I sometimes run into. Do you use it in production?
* The rejection of angularjs 2 by the industry. * A framework-less movement.
A jQuery plugin that enables some of the "directive" functionality of AngularJS: https://github.com/mennovanslooten/jquery.directive.js The plugin allows you (for example) to automatically run other jQuery plugins on elements that match a certain CSS class or HTML attribute. 
Meteor feels very different compared to other frameworks. I think its pretty easy to pick up if you have some experience in back- and frontend development. What I really like about it is the lack of friction. Every change you make gets immediately applied. What at least makes you feel more productive. And if you or your team is ok with JS as a language you should at least give it a try.
Are you able to use a framework like jQuery?
I'm working with a data set that we'll call "Sundaes" that is pretty much like so: var Sundaes = [ { 'flavor1': 'vanilla', 'flavor2': 'caramel', 'flavor3': 'cinnamon' }, ... ] This is how the Sundaes list is formatted by the server I am calling from. My job (currently working on) is to make a graph of the most popular flavors by tier and represent them in a set of three pie charts. On page load the flavor one pie chart will have a 'top flavor', say vanilla, that will trigger the second pie chart to show the distribution of 'flavor2s' that have the 'flavor1' of vanilla from the second graph. The third pie chart will show the distribution of 'flavor3s' that have the previous top flavors. Clicking on either of the first two charts will cascade changes down to the next graphs.
A 3D Sail Boat simulator from scratch: http://tamats.com/work/bwr/
I can, is that a lot easier?
My girlfriend and I have a blog where we post the meals we like to cook, mostly as a cookbook for us when we're making stuff. To avoid doing the 'I dunno what do you want to do for dinner this week?' dance at the grocery store every week, I made a really quick-and-dirty tool to pick a few recipes for us so we can get ingredients while we're at the grocery store. http://jsbin.com/kifafe It's really ugly but I use it all the time now. I'm making it prettier over in https://github.com/zdwolfe/cafevolta
too low resolution. unable to see code.
Very cool! The stress test is neat. Reminds me of [this](http://palebluepixel.org/2011/11/17/how-not-to-use-css3/), but cooler-looking :)
4K is not enough for you..?
A script for tamper monkey that changed fonts on all websites to Comic Sans. It was a prank on my ex girlfriend who is a graphic designer. 😀
I guess author is insinuating that this is the way web apps should be written in 2015. I personally don't have a problem with that.
Mine took about 20 seconds to load up HD, I couldn't see the code until then either. Didn't take long and I could see everything
I wrote an image slider. Very simple, but it was difficult at my skill level. http://codepen.io/Bmack182/pen/DLJqi?editors=001
Do people actually write JS this fast? I feel like he wrote it all before, and is rewriting it from memory (or paper).
What exactly do you mean by server-side rendering?
He's obviously using a good editor^\* with good macros for the job. \* It appears to be https://www.jetbrains.com/webstorm/ 
Yeah, the instant HTML page and auto-complete were cool and all. I meant more of not having to "oh shit, what's the syntax for that again? guess I'll google it real quick" 
im only getting 360p on the youtube 
i am fixed the bug on Firefox. it was JQM popup bug. thx guy~
Giving a brother some hope. Thank you.
The flashlight is needing something that most flashlights require to work.
&gt; Python 3 migration problems is nothing Says the guy who never had to migrate existing libraries between the two. Ex : matplotlib for python 3. Or pyGame. Or really anything popular in python 2. &gt; traceur works already on anything newer than IE9. Made by google. They should just call it 'Crutches for IE'. Are you saying you think its a good idea for Microsoft to need something like this in order to make it compliant? Are you saying they wont still find a way to screw the pooch? &gt; Also if you have you own implementation of Set, it should not be that hard to swap it for ES6 set. Youre a manager arent you.
Just to be sure, we're are talking about [this video](https://www.youtube.com/watch?v=iukBMY4apvI), right..? if you click the cog in the corner, you can see it goes as high as 2160p..
That... is a bug. Thanks for spotting it! I did consider Bacon before writing my own library, but it seemed a bit heavy (so, agreed wrt. magic), and I really wanted the stateful “signal” concept whereas Bacon only provides a stateless stream analogous to what I have called “event”. Edit: I was wrong, Bacon has Properties which work like frp's Signals. 
This x1000. You'll be in the same position 2 years from now, wishing you froze features, bit the bullet, and got a critical path test base automated, but you'll be staring down into an even deeper abyss. You can make this into a business case pretty easily with documented examples out on the web (re: make a case for automated test suite) if your management doesn't buy into it immediately. 
I think by "rendering" he means "generating static html" on the server. I wonder if people who use that term realize its really confusing since rendering typically means the browser's layout/render of a html view.
You da real mvp
What ever I will stick with TypeScript and Purescript, I need my types.
The data is received as an object property from the evented callback. Do I assign that to an ArrayBuffer? Or, like in my example above, do I loop through each character of the data and assign it to a TypedArray?
Yes, it's working correctly now :)
What do you mean by "FEDs"? Also, is there a good resource to get an overview of FRP in javascript? 
Hmm, is there any good information out there about why people are foregoing frameworks (besides the ridiculous turnover in what's popular...)? Is it mostly just people rejecting single page apps, and going back to server-side rendering (which, as far as I can see it, would eliminate much of the need for frameworks)?
+1 Gulp has been huge for me - in some Grunt tasks, if there was one tiny little thing I wanted to tweak, but there wasn't a config for it, I was SOL. I have so much more control now...
This looks awesome! Gonna try it out
I use this one: (function () { 'use strict'; var arr = [5, 2, 3, 8, 6, 1, 4, 9, 7], // generated from Fisher-Yates shuffle bubbleSort = function (theArray) { var i, j, temp; for (i = theArray.length - 1; i &gt;= 0; i--) { for (j = 0; j &lt;= i; j++) { if (theArray[j] &gt; theArray[j + 1]) { temp = theArray[j]; theArray[j] = theArray[j + 1]; theArray[j + 1] = temp; } } } return theArray; } console.log('Before sort: ' + arr); console.log('After sort: ' + bubbleSort(arr)); }());
IE technical preview has a large chunk of ES6 available right now and they are working on more. Also ES6 is backward compatible with ES5 and Flash was killed by Apple not the language bloating.
server side rendering....we are talking about things like react here? 
And you're a troll, aren't you?
I think the video was not playing at realtime, but faster. Which is good, because it doesn't get boring, but you still manage to read most of it. 
Bless you.
I just spent like half an hour playing this. Nice job! Did you come up with the whole concept?
Yeah following along everything made sense, but there's no way I could code that fast 
I'm gonna respectfully disagree with you on that. I know c# very well, but I still feel like I need to look up the layout for delegate commands every time I go a week without using one.
Just submitted a post for a remote position I'm trying to fill! Thanks for the resource.
done.
Would you happen to be using my plugin? https://github.com/randdusing/BluetoothLE I'm about to head to the airport, but I can post an example of parsing out heart rate data later today. Also, what service / characteristic are you consuming?
Can you link to the documentation for the device? Getting the format of the data will help with parsing it. For example, the heart rate page shows the format as 8bit, uint8, uint16, etc for various sections of the data. https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.heart_rate_measurement.xml And thanks for the kind words. The documentation has come a long way, but it could still use some work when it comes to writing and encoding/decoding data!
Here are some resources. In ES6 (the next version of JavaScript) you can pretty much do away with typing out 'function'. http://es6rocks.com/2014/10/arrow-functions-and-their-scope/ https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions Another really nice thing about ES6 is the short function syntax for objects - instead of doing this var myObj = { method : function() { return "upvote"; } }; you can just do var myObj = { method() { return "upvote"; } }; ... and you can more or less start using ES6 today, thanks to projects like [traceur](https://github.com/google/traceur-compiler) and [6to5](https://6to5.org/) - that take your ES6 code and _transpile_ it to ES5, which you can use in pretty much any browser today.
Being new to programming, this makes me feel better
Could be pretty simple with plain canvas api + fillText method. If you need more complex text layout (ie. word wrap, metrics), etc then you may want to use CreateJS or another more complete solution. 
```Might not make sense in some countries:``` ```isOverEighteen()``` ```Works everywhere:``` ```isLegalAge()``` This is a bad example. If you're actually checking for over 18 years old, then the function is named correctly. I understand the point, but the example doesn't really work that well because we don't know the point of the function.
Will your major project work as a SPA?
I want it to, but it doesn't have to. I don't know how to determine if a project should be an SPA or not. I've built a REST api that could be used for a mobile client in the near future. I'd like to use that same api for a web client, that's why I'm going with an SPA. Do you think that's a good reason to go that way? ps. I'm already quite comfortable with Angular, so there isn't much of a learning curve. I just want to know if I should invest my time in building an angular client for a serious project, or I should just use Django templates.
Generally speaking if you're writing your code very fast that means you're not learning anything, which is quite rare in programming since if you're going to have to write a lot of the same code then you'd automate the process one way or another and not have to type it again. So most of the time when programmers write code they're always learning something, thus going somewhat slow.
Thanks! I use the Angular version for some light lifting in an AU.gov project I'm working on and it is also being used by a company in the US for skinning, but I haven't heard a report from them in a few weeks (no bugs, so that's good). I started the VJS version a few weeks after the NG one as my first attempt to make a VanillaJS library (which has been going really well). Both are only around 4-5 months old so no major heavy lifting has been done, but I really want to get them out there so please give them a hack and bug report away! My next major milestone this month is to complete and publish Jasmine tests. I'm also in the middle of a rewrite of part of the `eval`uation logic to include the IFRAME's `sandbox` attribute, but that is at least a few days away yet for CjsSS.js and a good week out for ngCss. TL:DR; They are both still beta, but core features are well bedded down.
And you'll remember it ;) I felt like shoehorning JS into CSS was logical, yet unnatural... like they go together and yet they don't... like something that looks familiar yet weird at the same time... kinda like a 2-headed snake ;)
This is really nice what resources did you use to learn and what libraries are you using?
[JSSavior](http://jssavior.com), a javascript error logger built with meteor (not stable yet, but working) **edit, well apparently github/google login is broken, will have to fix that
You mean: Object.create( null, { } )
I think it's more like: if ( isLegalAge() ) showExplicitVideo(); which is great, because legal age might change based on laws changing or if you expand to a country with different age requirements. Otherwise you're going back to change every isOverEighteen() to isOverTwentyOne(), or worse, change isOverEighteen() to check if they're over 21.
I must say, I'm really with Doug Crock (along with what seems to be mostly all other JS developers) about wrapping your immediately executed functions in parens for simple clarity. What I don't like from the article: module = function(){ //[...] }(); What I would like to see instead: var module = (function(){ //[...] })(); 
capitalization don't matter in the domain but it does in the rest of the url AFAIK awesome! same link to register?
Yes sir! But You might have to try registering for next Tuesday game on Saturday.
It would kind of defeat the purpose of blocking scripts from running locally if the scripts just override those security settings. I'm fairly sure the only way to way to enable scripts to run automatically when working locally is by enabling the Internet Options &gt; Advanced &gt; Security &gt; Allow active content to run in files on My Computer option.
Sorta, but might as well do it 'right' the first time. Who knows what might change in the future. You're not sacrificing that much to write it out 'longhand' the first time, and if anything does change you'll just have to rewrite most of the code anyways, costing you more time. And as mentioned, you're sacrificing readability. var direction = -1; //at edge of map, reverse direction if(x &gt; 100) { //Throw an error/warning //or flip the map around to start over at the beginning //etc... direction = 1; }
Last September I created an artistic WebGL particle physics demo called [DiMo](http://palebluepixel.org/projects/dimo/). We used it in an art installation at Sparkcon. People could walk in, grab a colored baton, and wave it around to influence the WebGL simulation being projected on the wall. It was SO much fun. It works in FF and Chrome, but is faster in Chrome. Press spacebar to swap players.
 RespectGiven = { this.none = true } context in video.
Did you develop those websites? Are they real or just examples? They looked pretty good from my quick glance. I guess what I can offer is from a Software Developer's viewpoint, but you should really look into .NET development--Future is there. How much .NET development is going on down there? I'm just getting into the field myself, but have a lot of advice to offer in terms of development, and how to get ahead of the crowd. What is exciting about where you are from, is how much more ahead you guys are than us. We run on all these old legacy systems/software. A lot of stuff I know and am learning sounds like alien language to these people.
When loading scripts from your HDD you need to enable scripts by clicking a button. Accessing via localhost, intranet, or internet will not prompt.
Yup. This is the answer.
Very nice! Make sure the next couple of major versions are utter garbage and you'll be golden! ;)
Without the documentation, it will be a lot of guessing until you find out what format their data is delivered in. I stripped out some application specific code in my example, so hopefully I didn't break anything. ``` if (obj.status == "subscribedResult") { //Turn the base64 string into an array of unsigned 8bit integers var bytes = bluetoothle.encodedStringToBytes(obj.value); if (bytes.length === 0) { return; } //NOTE: Follow along to understand how the parsing works //https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.heart_rate_measurement.xml //First byte provides instructions on what to do with the remaining bytes var flag = bytes[0]; //Offset from beginning of the array var offset = 1; //If the first bit of the flag is set, the HR is in 16 bit form if ((flag &amp; 0x01) == 1) { //Extract second and third bytes and convert to 16bit unsigned integer var u16bytesHr = bytes.buffer.slice(offset, offset + 2); var u16Hr = new Uint16Array(u16bytesHr)[0]; //16 bits takes up 2 bytes, so increase offset by two offset += 2; } //Else the HR is in 8 bit form else { //Extract second byte and convert to 8bit unsigned integer var u8bytesHr = bytes.buffer.slice(offset, offset + 1); var u8Hr = new Uint8Array(u8bytesHr)[0]; //Or I believe I could just do this: var u8Hr = u8bytesHr[offset] //8 bits takes up 1 byte, so increase offset by one offset += 1; } //NOTE: I'm ignoring the second and third bit because I'm not interested in the sensor contact, and it doesn't affect the offset //If the fourth bit is set, increase the offset to skip over the energy expended information if ((flag &amp; 0x08) == 8) { offset += 2; } //If the fifth bit is set, get the RR interval(s) if ((flag &amp; 0x10) == 16) { //Number of rr intervals var rrCount = (bytes.length - offset) / 2; for (var i = rrCount - 1; i &gt;= 0; i--) { //Cast to 16 bit unsigned int var u16bytesRr = bytes.buffer.slice(offset, offset + 2); var u16Rr = new Uint16Array(u16bytesRr)[0]; //Increase offset offset += 2; } } } ```
Is that Typescript? ?_?
$('#llamasass').kick ()
document.getElementById('llamasass').kick();
sick json bro.
Guy in the video is OP. http://www.tigrisgames.com/ is his website and viewing the comments at the bottom, the tigris owner has the same avatar as the one featured on youtube. Why pretend?
For some reason, i just have not caught onto node. Asynchronous style programming adds complexity, and it's not always needed. I code with rails day to day, but I do like what Go is doing for the web as well. As far as JS goes, I am loving reactjs &amp; flux. Hoping to bring it into a project a work really soon.
JavaScript being the one language for web development is my favorite thing here. 
For the rails rumble back in october, i started on a sort of trello clone. But along side it to also utilize a dev log that you can tag todo items in. Can see the todo page here: https://dune-of-the-desert.herokuapp.com/projects/1. Cause I was learning react &amp; flux, i didnt get very far for the weekend. But i've tried to spend some time here and there since to continue the project. I need to deploy an update which has added some improvements to that page, breadcrumb links, and i've started on the journaling portion.
[imagine.js](http://vladakilov.github.io/imagine/)
Still a good tutorial.
[Fair enough.](http://img.pandawhale.com/post-29481-Ryan-from-The-Office-agrees-gi-1MNe.gif)
I hoped to hear some llamas. Not disapointed :)
The story went up because content was worthy.
He also misrepresented himself in this post from a month ago: http://www.reddit.com/r/javascript/comments/2p2z8w/this_guy_is_teaching_javascript_on_youtube/ I like to think I have a pretty high tolerance for bullshit, but can't tolerate when someone claims they're someone else.
Is that where Crockford currently stands on the issue? I think he's the person who coined the term 'dog balls' to refer to this iife method. I was under the impression that he wasn't a fan. Or is this just the least bad for him?
I never said it wasn't me, I just said it was me in third person. The title serves its purpose to explain what to expect from the content. It accurately describes the sentiment of many channel subscribers.
I'm not sure, but I did just watch a talk of his (that is a few years outdated) where he seemed to think that the paren-wrapping is important in this context. Maybe he's changed his mind, I don't know. I haven't ;)
&gt; Asynchronous style programming adds complexity I take it you don't ever do any client-side AJAX or REST calls? 
Hi /u/tigrisgames, please read reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. In short, you should post from a variety of sources, and not just your YouTube channel. **Consider this your only warning.** Continued posting of only a single source will force us to take action. Thanks for your understanding.
I love how Go approaches concurrency. So much nicer to work on getting concurrent code right when the language is built from the bottom up with that in mind, rather than just being a concurrency library added on to the language, where you have to consider language aspects that need to be avoided or changed to fit a concurrent approach. 
It's a difference from doing some vs doing all. Working with Ruby for example, accessing files and accessing the database is synchronous.
Yeah absolutely. I was tempted to write this back end app i have for a reactjs project in go. Ended up using ruby, as i was more geared on getting it done, and learning the front end side, than learning a new back end as well. But i think go is very interesting. I wonder and sort of hope that I use Go in 5 years for web, and Rust for games :)
I've recently switched a project to TypeScript. I gotta say, if you want to hit the ground running with ES6 (and then possibly AtScript/Angular 2.0), this is the way to go. [DefinitelyTyped](http://definitelytyped.org/) and [TypeStrong](https://github.com/TypeStrong) have really paved the way to make things easier. It's really just ES6 with type safety.
Is it really that much more performant to put the array length in an array and iterate using that instead of calculating it each time? That's really interesting, I've never seen it like that before. 
I'm going to disagree. I've always felt JS on the server was a stop gap until something better came along. The fact that JS on the server looks in any way attractive is more a knock against Java/Ruby/Python's inability to get anything sane going in terms of concurrency libraries than anything. That "something better" is looking to be Go. Go solves the concurrency problem really well, and it's already in use in non-trivial production at Google, Dropbox, Disqus, Soundcloud, etc. Go is far from perfect, but if I were writing a concurrent backend for some realtime webapp today, I'd be doing it in Go - no brainer.
I recently added optional alphabetic sorting of object properties in JavaScript and JSON to http://prettydiff.com
Ya boi DCrock is truth
I generally throw this in as well, but after a an introduction to react.js &amp; flux, I feel more strongly that developers should look at meteor.js. It has all the features of the react/flux workflow, but it is a singular framework with a true API. I've built two applications with meteor now and am now taking all new projects in my shop that direction. 
people who write up articles and try to give advice to others are often neither the well informed nor competent. one funny post about this a while back: http://larseidnes.com/2014/11/05/angularjs-the-bad-parts/
.gif does not do a great job capturing it, but you can click the small "D" to double the size (as you could with the original Winamp).
I was trying to live without jQuery for a while there, but as pointed out in a recent [jQuery blog post](http://blog.jquery.com/2014/12/18/jquery-1-11-2-and-2-1-3-released-safari-fail-safe-edition/), one of its major advantages is filling browser compatability. &gt;The most significant fix in this release is a workaround for a serious querySelector bug in Safari 8.0 and 7.1. [...] A bug like this one emphasizes the benefit of using a library like jQuery rather than going directly to the DOM APIs. Even modern browsers can suffer from bugs that aren’t fixed for a long time, and there are still cross-browser feature differences with several browsers in wide use such as Android 2.3. Add to that the fact that the jQuery is a lot more concise (as we've just seen), allows traversing the DOM a lot more easily (`.closest()`, `.siblings()` etc.), and is already cached by every browser anyway, I don't see why you wouldn't use it.
[MDN link](https://developer.mozilla.org/en-US/docs/Web/API/document.querySelector)
If that was really the case, why the need to submit the same content twice in less than a day with a different title?
I fully agree. Unless your JS code is truly trivial, you really should just reach for TypeScript instead of JS by default. I'm a bit surprised that AtScript would be recommended without recommending TypeScript first. I mean, AtScript is currently only useful in the context Angular 2. 
It's amazing how quickly and easily you can scrap together a webserver with Express.js and Node.js. Made a few projects with those early last year.
 (function() { console.log("dog way") })() (function() { console.log("Doug's way") }()) 
My advice to other developers would be: - don't learn Angular.js for now and wait after the 2.0 storm - learn at leat one of the statically typed JavaScript flavours: TypeScript (Microsoft), Flow (Facebook) or AtScript (Google) - learn about webhooks - learn at least one of the virtual DOM frameworks like React.js, Om and Mercury
The issue with Go is the language design. Some vital parts are missing and with Google's history of not listening to their users I'm not sure how it will improve.
I must admit I had lumped backbone in with the others, I will have to give that a look, thanks :)
three.js is something I am going to focus on. It is insanely powerful.
I think I hear 12 notes before the sequence loops.
Like what though? In a request response cycle of the web, we typically use asynchronous processes for things like email, or parsing documents/large amounts of data. Saving a new blog post for example is a fast operation, it doesn't need to be asynchronous. I think for certain things, Async file IO can be useful for sure, but for web apps, most GET/POST responses can be synchronous code. One doesn't have to get into callback hell. I'm trying to remember what operation I was doing specifically, but using node a few years ago i was trying to save or update multiple records to a mongo db. I ended up looping through them, but in order to know it was complete and I could respond, I had to add a callback to each one, incrementing an integer. So I would check the integer and see if its the size of the array to know that it's done. Not a complicated outcome, but it takes more than using other languages.
Thanks for the example code. I was able to get enough documentation to determine what data items are available, along with their respective sizes. Between those items, I'm able to know successfully read data from the device. Thanks again for the support! Please let me know how I can best support your plugin.
Either you don't understand what syntax means or you just don't know C# as well as you think. I don't see what's so controversial here. By definition, if you don't know the syntax of a programming language, you don't know the damn language.
Does anyone else worry about what to invest time in this year?
Not sure why this is getting so many upvotes.
&gt; the elimination of redundant code I feel this is often greatly exaggerated. Sure you could re-use some trivial validation logic, but otherwise front end and back end code doesn't really overlap much at all. I've yet to see an example provided that demonstrated anything even remotely resembling a common codebase for the front and back ends. When [the most prolific and influential member of the node community abandons it for Go](https://medium.com/code-adventures/farewell-node-js-4ba9e7f3e52b), and there seems to be a new talk or blog post every week about a startup abandoning node for Go, I think it's save to say that JS on the server has long since "peaked" and will gradually decline as better tools emerge to solve the problems server-side JS was designed to solve.
It's true that Go doesn't feel like a particularly robust general purpose language at the moment. However, it solves the concurrency problem so well that people are dealing with it. The fact that people would rather deal with Go's strictness over fighting with JS on the server says something. That said, the designers of Go are taking the position that it's much easier to add things to a language than it is to take them away. They don't want Go to become a bloated, tangled mess that a lot of other long-lived languages are. For instance, trying to parse arbitrary XML or JSON data in Go today is kind of a pain due to its strongly typed nature. I often pine for JS or even PHP when doing this kind of work. That said, I was able to build a simple web socket server that's deployable as a single small binary in a near-trivial amount of code. Something that's impossible in Ruby/Python/PHP/JS. I often like to say that Go makes easy things hard and hard things easy. I'm sure an enthusiastic Gopher would be able to justify Go's design, but I'm not an evangelist. I'm just calling it as I see it.
If your server technology uses synchronous IO, and Ruby, PHP, C#/ASP.NET and pretty much every Java server side flavor all do this, then of necessity your server is spawning a thread per request. IIS and Apache will often spawn multiple processes to handle requests, but they still also use threads for individual requests handled by each process. There are mitigation steps taken to reduce the overhead of spawning a thread, such as thread pools, but in both cases the threaded nature of the request handling means that there is a shorter upper bound on the number of simultaneous requests that can handled by any one server. Now obviously the maximum number of simultaneous requests depends a lot on server resources, but odds are you'll be able to put that maximum in the thousands rather than the tens or hundreds of thousands. Whereas with purely asynchronous I/O and a single-threaded model, you free up those constraints, allowing tens or even hundreds of thousands of simultaneous requests per process -- at the cost that complexity you complained about. And not being CPU bound, but that's a different issue. :) That complexity can be mitigated with good code organization techniques, just like it can be in client-side javascript, and it enables a much larger scale-out than classic thread-per-request techniques. So yes, if you don't *need* to scale out, by all means, go with the "easier" programming model. But if you are even *remotely* likely to need to scale out, the only responsible choice is a node-like model. There's a reason ASP.NET vNext is adopting that model. 
There are still reasons to have multi-threading. Nodejs is probably less I/O bound than most other popular languages because it is fully asynchronous. But it is highly CPU bound, and therefore you'd have to avoid things like: search (full-text), map-reduce, graph traversal, matrix multiply, trans-coding video, compressing files, geo-encoding, serialization &amp; de-serialization, algorithms in general. I'm not saying it's necessary, but there are still reasons why you can't port some Java/C++/Python applications to JavaScript/Node. To /u/NotMyRealNameAgain point, yeah for simple REST applications, no problem. For something like ElasticSearch, good luck porting that.
Personally, despite being primarily a JS dev, I agree - I was hoping for a more broad brush review of available technologies (i.e. Clojure, Go, Swift)
Sort the draw order of the lines such that the brighter lines are drawn last :) Rigt now it looks a bit buggy.
I would rather say, what to learn is not what to use. You can learn them, but you don't necessary use them.
"Java is to JavaScript as ham to hamster."
If I correctly understood your goal this task is much more complicated than you suppose. Development of 'simple like Google Docs" html-based editor requires years of work of state-of-the-art level specialists. However, you can try to build something more simple. I'd suggest you to start with reading of some basic tutorials: [MSN!](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_Editable) [!Using the HTML5 attribute "contenteditable" to create a WYSIWYG](https://thenewcircle.com/s/post/1096/using_the_html5_attribute_contenteditable_to_create_a_wysiwyg) Also Google for **'contentEditable'** and **'WYSIWYG'**
Thank you for all of your replies. This is the method that I wound up using that works really well. function multipleChoice(f){ var question = f.id var a = $.grep(quiz, function(e){ return e.questionID === question; }); var answer = a[0].correctAnswer; ...
A few errors I noticed while skimming: &gt; webpack encorages overloading require() to mean something very different from what it means in node: False. From http://webpack.github.io/docs/using-loaders.html#loaders-in-require &gt; Note: Avoid using this, if at all possible, if you intend your scripts to be environment agnostic (node.js and browser). Use the configuration convention for specifying loaders (see next section). . &gt; In webpack lingo this is confusingly called "incremental compilation" and is built into webpack core with: Really? You think that "fast watching" is a better name for incremental compilation than "incremental compilation"?
Browserify might have better design and even performance, but damn is it easy to get things going with webpack. In nearly all of the examples substack lists, webpack is either much easier to read or make assumptions about. That, plus the docs for webpack are pretty stellar.
I was just lookin at kangax table now and it seems IE has the best coverage for ES6 features right now.
Angularjs fanboys upvoting most likely
Why even allow a feature that is discouraged ? It should be deprecated and removed in a later version. EDIT: To clarify, every time Webpack's require overloading is brought up, everybody seems to discourage its use (even webpack authors). It's better just to have a single *solid* option than a whole bunch of not-so-useful "features" that add complexity/bugs/etc to the codebase.
Thanks for the help. I'll look into the WYSIWYG. 
I would answer that you shouldn't bother but some people still really feel compelled to learn it. So I delaying learning it is still an improvment.
We may get that far. We shall see. It's been done before with some degree of success and the code is on GitHub: http://cggaurav.github.io/juicydrop/ Pull requests welcome :)
&gt; Yes, learn Angular 1.x in ~~2015~~ *February, becoming proficient by May* so then you can learn Angular 2 in ~~2016~~ *this October, becoming proficient by next January*. 
&lt;Anjular&gt; is the only web application framework and does all the things. Why worry about the future? Just wait until next year to tell your boss that they need to budget for a complete no-features rewrite. If he gives you any shit just ask him if all that boring business stuff is really more important than writing anodyne 'look how cool we are!' screeds on your generic WordPress '2014 theme' dev blog. Worst case scenario there will always be plenty of 'JAVASCRIPT/ANGULAR/JQUERY/BOOTSTRAP FASHION BRAND URGENT!!!!' jobs in your nearest urban centre.
Firefox version?
Who tells you that? As far as I can tell it's very much alive. You should use the tools that you are comfortable with using. Not tools that others tell you (not) to use.
NPM is not ready to replace Bower yet. Hopefully at some point later, but not yet.
It's also called the euclidean distance.
Bower is great if you need to install jQuery or one of its plugins, or another very popular JS framework. [Angular inclued.](https://thinkster.io/egghead/intro-to-bower/) Bower is definitely not dead. But a lot of frontend devs are moving toward npm. When you get into smaller modules, persistence, recursive or deep dependency trees, versioning, automated bundling (i.e. no manual "config" files), etc. then bower is not a strong choice. A little more info [here](https://github.com/bionode/bionode/issues/9#issuecomment-49566087).
I built a data miner in Node.js that scrapes fonts off of the top Alexa 10k websites and analyzes them to find the most popular ones: http://bonfx.com/fonts-of-the-world/
Depends who you ask. ;)
Maybe this can be the replacement of Bower. http://jspm.io/ (You can see it in action here: https://www.youtube.com/watch?v=iukBMY4apvI )
I wouldn't say "years of work and state-of-the-art level specialists". It's not like the type of editor OP is asking for is a field of cutting edge research. Yes, there are some pitfalls to the problem of writing an editor, but if you know what you're doing and plan properly, they don't have to be "years" in the making. I say this as someone who has written--from scratch--a web-based text editor in JavaScript. Now granted, mine is a syntax-highlighting text editor, not a WYSIWYG document formatter, but the underlying process is mostly the same. And while I'm certainly far more experienced than the OP, the way you've described it makes the problem sound nearly insurmountable to any one person. It's surmountable, and would probably at the very least be an excellent learning experience for the OP. To OP: Using Content-Editable elements is fine if you leave all of the HTML generation to the browser. Don't try to generate your own markup in the middle. Just wire up the bold/italic/etc. commands that the browser provides. Depending on your requirements, it might be enough. If it's not enough, there are a lot of Content-Editable-based open source editors available. You have probably already encountered a few in your Googling. I'd suggest just trying a few out and seeing where they take you.
&gt; I'm not sure if I should write forgiving code or strict code. Your functions should be descriptive and expect a specific type of input. If you want to keep it simple (aka KISS), make sure they take only a specific input type most of the time. I'm not sure what your example is trying to achieve (besides logging things), but it should say `logThisObject` to point out that it's only logging objects. It's really useful for future testing and ensuring your codebase doesn't trying to do above what it needs to do. If you need to log something different, then either create a new fn for it or just use your built in fns that are better at logging nearly everything. TL;DR - Don't over think and and specifically, don't over engineer it. You'll end up wasting too much time debugging unnecessary things!
The key to deciding whether any particular example is a good idea or not is to ask yourself if the additional "forgiveness" checking serves to make for a better experience using those functions, or merely hides a defect elsewhere in the program. If, for example, I have an array that is supposed to be all numbers, and I want to add all of those numbers up, then I would not do any checking in the function that does the adding. It's not "validateAndSumArray", it's just "sumArray". The validation (if the issue is unavoidable) I would make at the calling site, or I'd fix the reason why those non-numbers are ending up in the array. On the other hand, if I'm starting with a mixed bag of goods--say, anything based on user input, or coming over the network, or what have you--then yes, I validate away. As much as there are constraints for my data. I try to avoid ignoring cases where the code "should work" without the validation, as I see the actual validation code as part of the documentation of the function: "this function needs this".
The phrase "years of work and state-of-the-art level specialists" was specifically related to Google Docs. BTW, it don't use contentEditable at all. Writing a simple editor is real task, but it still requires a good knowledge of JavaScript.
YAGNI and KISS :) You mentioned that you don't have to remember what the input should be when you call the function. You shouldn't call them if you don't have a specific intent. Ofcourse sometimes you want to check if something is undefined or not and so on. But you don't want to handle different scenarioes just because you don't want to remember what type of input that function took. Good and consistent naming through out should help a lot with knowing what to send in. 
That's what I was trying to discern. It should accept a specific set of inputs and nothing more. I prefer passing objects whenever I can, to avoid worrying about the order of inputs. I hope that was clear!
Is browserfy supposed to fill this role?
Fragmentation is not.
I actually have quite a bit of experience hacking Juicydrop. If I get a couple of hours of free time, I'll see what I can do.
$("div")[ visible ? "show" : "hide" ]() 
Oddly enough, I don't have a ton of apps in the que that aren't real time. If it's a simple brochure site, then yeah I'll probably stick with tried and true LAMP stack with ExpressionEngine or something. But there's one benefit of Meteor than cannot be undervalued, take this use case: Local restaurant, bread and buttered with lunch or dinner specials. These sites don't have active users, per se, there's no information collected from the user, nothing that truly needs real-time work, right? Well not necessarily. Because these lunch specials rely on ingredient availability, the menu can change at the drop of a hat. Taking the site from staging to production always ends up with a certain amount of downtime just for the DB to update. Not so with meteor, the changes are instant and no downtime. So really, it's a winner in that space too.
Can you post a JSFiddle or Codepen that reproduces the problem? I realize that the page is generated by PHP but surely it still reproduces with a fixed, static testcase.
I'll add to this. - Ember, Backbone (+ opinions), or something modular like Ampersand.js instead of Angular - If you don't feel like learning another language, at least start using modules. Browserify, webpack, es6 polyfils - ES6+7 features and apis
http://jsfiddle.net/ph269r4y/
You really shouldn't be using global variables for this. You should encapsulate the code such as by using an IIFE. Whenever you find yourself creating several related globals at once, it should be a red flag that you need modularize your code. But your problem is that you're creating the `values` string before you actually set the values. Notice that your `console.log("r1 " + r1);` is working as expected, which means the global variables *are* being updated. Try changing: var values = r1 + "," + t1 + "," + r2 + "," + t2 + "," + r3 + "," + t3 + "," + probeNumberx; to: var values = function() { return r1 + "," + t1 + "," + r2 + "," + t2 + "," + r3 + "," + t3 + "," + probeNumberx; }; and then change: console.log(values); to: console.log(values());
In JSFiddle, by default all the stuff in the JS box is already wrapped in an onload handler (that's what the "onload" drop-down box on the left means), and consequently `&lt;body onload="fixShit();"&gt;` results in an undefined reference error because `fixShit()` is not a global symbol. But once you fix that, the problem is just as tyroneslothtrop says, you have to use a unit like "50px" not just "50". Also, I suggest that instead of giving each element an ID, just put them in a container and use a selector to work with them. [Here's an example](http://jsfiddle.net/ph269r4y/2/). There's no need to communicate the number of images explicitly; it naturally works with however many images are in the container. 
There are a few stylistic things I would change with your code. But at the very least, if you remove any references to `window` and wrap your code with: (function() { // Put your code here }()); That will scope all of your variables to that function (called an immediately invoked function expression, or IIFE), rather than making them global and polluting the `window` object. You can then expose certain values through a single global interface: var probeMonitor = (function() { var monitor = { resistances: [] }; // Put your code here, except make your event handler populate values like `monitor.resistances[0] = probeData.r1` return monitor; }()); console.log(probeMonitor.resistances); // [99028, 107287, 137174, 127176] You'll notice a few things about this code: 1. I use long variable names. Variable names like `m`, `l`, `r2`, etc are worthless. They don't mean anything to someone working with your code. Name your variables with *names*, not letters. `probeData` tells someone a lot more about your variable than `m` does. 2. JavaScript has a way to group sequential values (lists); they're called arrays. It makes more sense to put a list of resistance readings into an array called `resistances` rather than having a bunch of variables called `r1`, `r2`, etc. Even though the data coming from the Spark may not use arrays, modularizing your code gives you the opportunity to expose values in a more friendly, natural interface for the language.
From what I understand, you've already set the color1, color2, color3, color4, and color5 properties on localStorage, so to retrieve their values, you would use `var value = localStorage.getItem("color" + (i + 1))`. It might also be helpful to start your for-loop at 1 so that you only have to use `"color" + i`. Edit: it seems /u/qgustavor had exactly the same ideas. Use his code.
Wow awesome, it's like sticky spider legs
I have to agree with these best practices
looks good, and make sure to keep libraries to a minimal since most are junk. Polyfill libraries are good
Thank you for writing }()); rather than })();
Haha, I don't really have a strong opinion on that. The important thing is to pick one way and stick with it, so that your code has a consistent style.
You must be careful not to have too much going on in the resize event as it will cause browsers to be very jittery when resizing. That said, awesome video.
and so it begins: http://swannodette.github.io/2015/01/06/the-false-promise-of-javascript-microlibs/
Because that's not the repository tool's job. You use a build or automation tool to do that at build time. 
Document. Document. Document. My functions have documentation that says what arguments are expected and what type they should be. Other developers using my code need to read the docs else code at their own peril. Going forward, my current company is adding this documentation (in jsdoc form) as a requirement in code reviews. Not having overview, params, defaults, returns, and side effects in the docs of any top-level function (top-level for the file) will definitely result in rejection. Any non-trivial nested functions also need param and return values as well (though we are moving to be more functional which tends to allow these to have more haskellish declarations). This kind of programming has reduced quite a number of errors and (along with better unit testing) cuts down on the need for defensive coding. Another change has been to move away from ambiguous parameter ordering and types. We try to minimize the number of functions that (for example) take either a string or an array or even worse, do something like jQuery where you can often input many different things in different orders with different effects. That reduces the number of function names to memorize, but adds the overhead of remembering which set of parameters in what order does what (and complicates the function code with lots of edge cases). 
I wrote a small framework to help with this type of programming. It handles and simplifies a ton of stuff as well as dealing with conflicting states. Like say you have a responsive layout for tablets in landscape, and another for tablets in portrait, and then your app has view states of it's own. If state A and state B don't conflict on a larger screen, they can co-exist and if both open they'll each consume 50% of the screen, but in portrait mode that might not work because of the reduced width. My framework will handle that without needing any special javascript, you simply register the states and then handle the conflicts in LESS. It works by stacking classes on the &lt;html&gt; and &lt;body&gt; elements so cascading CSS can handle the conflicts. It also integrates into jQuery and Marionette. https://github.com/chadillac/MoshPit.js/tree/master
Handwriting Draft [available here](http://www.dafont.com/handwriting-draft.font) I have no affiliation, just a fan. 
And I'm just noticing now this example has a redundancy. Pretty sure the second assertion used to say something else.
I'm more of an Anonymous Pro man for my primary font.
Sounds like an ambitious project. I like things like that.
It was developed over a few days for a much larger project and I decided to open source it. I was sick of editing javascript logic based on the whims of designers, so the goal outright was to have the core application logic handle no view states, this way designers could make application/layout/state changes by editing LESS and HTML, meaning less developers wasting developer time with edge cases, layout change requests, and hooking up application functionality in highly interactive applications. Like if a designer wanted to utilize a feature of the core application, let's say composing a message to another user, instead of needing to go in and have a developer hook their new button/ui/trigger into the application core, the designer could simple add their new UI element and using -data attributes they could trigger application level code and pass in data. p.s. it's in use on a largish (millions of registered users, thousands online at any given time) site as we speak, and it works even better than I had expected.
Any [Doctor Who fans](https://developer.cdn.mozilla.net/media/uploads/demos/s/c/scanlime/290c937290fd3ee99f7efdfd6b941a64/zen-photon-garden_1366793410_demo_package/index.html#AAQAAkACCgAZhQB2AVUAWwFQAh//AAABVwBcAWQAXf8AAAFkAF0BZQBL/wAAAWUASAF4AEj/AAABeABIAXgANv8AAAF3ADUCLAAY/wAAAiwAGAI6ABb/AAACOgAWApAAQv8AAAKQAEICmQBH/wAAApcARwKWAFL/AAAClgBSAqIAWf8AAAKiAFkCogBg/wAAAqIAXQKiAGb/AAACogBmArYAb/8AAAKyAG8CsgCE/wAAArIAhAKwAIT/AAACsACEArUCAP8AAAK1AgACtQIM/wAAArUCDAK/Ag7/AAACvwIOAsACGf8AAALAAhkCRAJA/wAAAVACGwFEAiP/AAABRAIjAUQCMP8AAAFEAjACQwI+/wAAAkMCPgI+Aif/AAACQgItArICC/8AAAI/AiwBTgIc/wAAAkUANAI/Aij/AAACQwA3AVgAXP8AAAJEADYCsgBu/wAAApMAUQI9ACf/AAACPQAnAXgAR/8AAAFfAHgCMgBf/wAAAjIAXwIyAEP/AAACMgBDAV8AYv8AAAFfAGIBXQB1/wAAAWUAgwFfAhr/AAABZwB/Ai4Aaf8AAAIuAGkCMQIn/wAAAccCJAHBAHb/AAABvgB2AcMCIv8AAAF+AIwBtQCI/wAAAbYAiAG2AMn/AAABtgDJAbYA0/8AAAG2ANMBfgDV/wAAAX4A1QF8AI3/AAABkQCJAZMA0v8AAAGnANUBowCJ/wAAAX8AsAG1AKz/AAAB2gCEAd0Azv8AAAHdAM8CGQDK/wAAAhkAygIXAH//AAACFwB/AdsAhf8AAAHsAIQB8QDL/wAAAgUAzAICAIP/AAAB3wCnAhcAo/8AAAJUAIUCegCP/wAAAnoAjwJ6AMb/AAACegDDAnoAz/8AAAJ6AM8CWADH/wAAAlgAxwJUAIf/AAACXwCLAmEAxv8AAAJtAMkCawCM/wAAAlkApQJ4AK7/AAACiQCWAokAyv8AAAKJAMoCiQDQ/wAAAokA0AKhANX/AAACoQDVAqEAmv8AAAKhAJoCiACU/wAAApEAlwKRAND/AAACmwDUApoAmf8AAAKJAK8CoAC2/wAAAlcAYQJWAEn/AAACVgBJArEAcP8AAAJYAG0CsACE/wAAAlgAbQJWAGD/AAABfwD0AX4BMP8AAAF+ATEBsgEw/wAAAbIBMAGzAO7/AAABswDuAYAA8f8AAAHNAPAB0AEs/wAAAdABLAIcASr/AAACHAEqAhkA7f8AAAIZAO0B1ADu/wAAAYgA/wGIASb/AAABiAEmAakBJ/8AAAGpAScBqAD2/wAAAagA9gGGAPn/AAABhgD5AYYBBP8AAAGJARsBlAEk/wAAAYoBFQGeASX/AAABhQEKAagBI/8AAAGKAQcBqAEZ/wAAAYgA/QGmAQ//AAABkQD3AagBBv8AAAGVAPcBhgEB/wAAAacA+AGFAQ//AAABpwEAAYsBGv8AAAGoAQ0BjwEk/wAAAX0BPwF9AXz/AAABfwGdAYACCf8AAAGAAgkBtwIK/wAAAbcCCgG3AZ//AAABtwGfAX8BoP8AAAF+AY8BswGP/wAAAbMBjwGxAUf/AAABgQFDAbABQf8AAAF+AW8BfgGJ/wAAAdQBQQISAUD/AAACGQFAAhcBjf8AAAIXAY0B2QGO/wAAAdkBjgHUAUL/AAAB2QGmAdoCCP8AAAHaAggCHgIJ/wAAAh4CCQIaAab/AAACGgGmAdoBpP8AAAHuAQwB6wEGO2ReAfEArgHUAFj/AAA=)?
Thanks for some reason i felt like it was taking the derivative of a value haha.
Hi /u/AndruRC, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Oh JEEBUS! Its mesmerizing. Props to both of you!
The [web interface](http://closure-compiler.appspot.com/home) is overly simple - I would like more configurations beyond "whitespace", "simple", and "advanced". All three kill unimportant comments. Whitespace touches formatting, simple does some minification and light jsdoc linting, and advanced does deep minification, dead code removal and deep jsdoc linting. As for using the library client-side, I haven't.
Hi /u/captbaritone, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `jordaneldredge.com`. I'm also surprised that after being a redditor for 6 years, you're unaware that it's in poor form to submit multiple posts for the same site within a brief period of time. Thanks for your consideration!
Noted
those parameters are almost unreadable
They serve different purposes. browserify is a build tool used for bundling code into a single file. bower is a package manager that downloads libraries, frameworks, utilities, etc so that you can use them in your project. Since npm is getting a lot more frontend packages published on its registry, having a strictly frontend package manager makes less sense.
see here closure effects on loops http://conceptf1.blogspot.com/2013/11/javascript-closures.html
I don't think that JS file size is the main concern with "Modularity Shaming". Rather, there's a worry that big non-modular libraries won't "do one thing and do it well" and will force you to buy in to substandard implementations of orthogonal features you don't really want. For example, I spent a couple days not too long ago developing workarounds for Angular's taking over of HTML5 history and URL handling when the native APIs would have allowed me to plow ahead with the task I needed to do. That's absolutely not what I wanted from a DOM UI library and deepened my appreciation for simple, modular libraries.
Zen *photon* garden
I never had the need of something like bower. All the packages I use are on npm. I guess I'm not the only one. 
Crockford writes some butt ugly javascript. Damn.
Substack is awesome at coming up with initial ideas for things. But he tends to get lost in his own dogmatic belief system that never really lets his ideas and projects grow beyond a certain scope for fear of angering the "modularity" gods. The Webpack vs Browserify thing is a great example of this tendency.
I think there's this perception that writing a jQuery plugin is some sort of rite of passage of beginner/journeyman level programmers. jQuery plugins sometimes have a reputation for not always being the highest quality code, and for being the domain of people that are oblivious to the fact that life exists outside of jQuery. There's this common refrain of, "well that sounds interesting, but why in the world must it be a jQuery plugin?" with the implication being that people don't want to be forced to use jQuery just to be able to use this functionality. I think people are also rather exasperated with the vast amount of blogspam floating around the web development world that comes in the form of, "50 jQuery plugins that you absolutely must check out!" where most of them are just rather *meh*, or they are for things that are more style than substance and in questionable taste. And finally, I think a lot of people have suffered from plugins that were considered one-offs by their authors, where someone banged out some barely working code and posted it in some plugin directory and then forgot all about it, leaving it in an unmaintained state of bitrot where it might not work correctly with the current version of jQuery or it might have other bugs or deficiencies that were never addressed. Now, please recognize that I'm just summarizing the common perceptions. I don't think you should necessarily put too much weight in them. There are a lot of times when a plugin's functionality only makes sense in the context of jQuery, because doing it without jQuery would require a lot of reinvention of wheels. And many jQuery plugins are very high quality and are written by people that know exactly what they are doing, and are actively maintained. It's obviously a thriving community that adds a lot of value, so there's no reason to throw out the baby with the bathwater. 
Agree, but it's far better than copy pasting your code into every page that needs it. ;) I've all but stopped using jQuery with React, but if you are going to be working on a jQuery project, plugins are an acceptable use case. Although, the plugin should only be attached on pages that use it, so having a module system in place should only help matters. There's no sense loading up a plugin that you aren't using on that page.
There is an unreasonable lot of jQuery plugins that are not even loosely related to jQuery, let alone use jQuery's abilities (why does a base64 codec have to be in $'s namespace?). If your module fits that description, rather make a JS module that does its task well and only add a jquery-binding if it seems reasonable.
Because it probably doesn't need to be a jQuery plugin. You probably don't need jQuery. The current climate in the JS is that of modules with as few and as small as possible dependencies. Monolithic libs are becoming less popular with growth of npm, bower (not so much anymore), jspm and tools like browserify, webpack, requirejs, etc. If you want a larger audience, ditch the (probably) unnecessary jQuery dependency.
There are two different solutions, each of which works, and I think has been used in articles on the subject. Which do you think is better, if either? for (var i = 0; i &lt; 5; i++) { (function (i) { setTimeout(function () { console.log(i); }, 100); })(i); } for (var i = 0; i &lt; 5; i++) { setTimeout(function (i) { return function () { console.log(i); }; }(i), 100); }
&gt; Because most people have moved on to vanilla js modules and mvc frameworks. Citation needed. I think you mistake a (very) vocal minority for a majority.
http://meta.wikimedia.org/wiki/Don%27t_be_a_jerk
The npm people have a company now and raised $2.6M. Not surprisingly, they want to expand npm's reach, beyond NodeJS. They want to be the tool for JS as a whole, including browser stuff. They are in listening mode now, collecting ideas on npm's roadmap. I recently ditched Bower on a big project and switched to npm-only. It works great until you have a dependency that isn't *correctly* in npm. For example, angular-bootstrap was on npm, then silently unpublished, and won't reply to a ticket asking why. Also, ui-grid (formerly ng-grid) is on npm, but doesn't published their generated output. Since their build uses grunt and I don't, it's a pain. (I just check their output into my project's vendor directory.) 
Hi /u/imprakash, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `sevensignature.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [sevensignature.com](/search?q=%28and+site%3A%27sevensignature.com%27+author%3A%27imprakash%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|42|86%
Well, I'm obviously excluding run of the mill developers that copy and paste some code snippets from blogs or stack overlow and throw all those global named functions into one document ready function. Like back in the olden days. 
lol I love this. I feel the same way. Take a look at r/jquery . It's full of post like "i need a jQuery plugin that will give me an image carousel" or "i need a jQuery plugin that will give me a shopping cart". Just feels like a bunch of hacks that are trying to sell someone a website that is just a bunch of pieced together jQuery plugins. I had to unsubscribe from r/jQuery. I had hoped it would be thoughtful discussion around how to used jQuery and best practices, nope.
To be fair, angular is a shitty citizen for *any* module system.
Didn't know about the third parameter in `setTimeout`. It is, however, not supported by IE 9 or earlier, or Firefox 12 or earlier, so I probably won't take advantage of it quite yet, but it's good to know about it though. Thanks!
this seems like part of a very rickety bridge towards being able to write a desktop app again...
Alternatively, `setTimeout(console.log.bind(console, i), 100)` also works. But this is not exactly a realistic example anyway.
Just wait until you see [node-webkit](https://github.com/rogerwang/node-webkit)!
I have seen these quite a bit telling me that a new comment was posted on the article, and NEVER knew how the hell this was done. I already had some ideas on how I can incorporate these into the sites I manage, so now I actually know what I'm looking for.
Huh wow thats pretty neat. Not sure what else you could use it for but will definitely come in handy for something in the future.
Nice job
Well, only if you let the websites notify you. They can't do shit if you press "don't accept".
I just starting using bower for front-end dependency management in one of my projects ... so plain NPM is better?
Hi all, just wanted to get some feedback on this npm-module I created. And if you feel like being a contributor, just fork it and add more pages that you would like to add to the blocklist. ;)
The difficulty in writing a parser -- pretty much any parser -- is not writing a parser that works on valid, proper input. The trouble is writing a parser that throws up usable error messages and whatever junk is thrown it's way... (Just as note, I've *used* a parser that only returned 'Syntax Error' with no further details -- I dream of finding the man who wrote that ..... well...) So you either use a generator of some kind, or you build your own parser using some kind of state machine. Truthfully, writing a JSON parser isn't *that* difficult -- its got a solid rule set with almost no special handling. It would be a great exercise, but really -- read up on state machines first.
Err no. Anyone *not* using a js framework uses [npm](http://npmjs.org) (or [bower](http://bower.io)).
This has been in Chrome since May 2010, Safari since July 2012 and Firefox since July 2013 - so has been around for almost 5 years…
If you're on desktop, you can see this in action in reddit live threads - click "Enable Desktop Notifications" in the sidebar: http://www.reddit.com/live/u7qtz12ybb74
Any loaded portion of the audio will still be in memory if you pause. to remove from memory you'd have to set the src attribute to an empty string. You should be aware however that you can only play one audio element at a time on iPad. You're likely much better off using the web audio API, but I'd have to have a look at some code to give any more specific advice.
Yeah after posting I was thinking you could have a method for having only one websocket open across entire tabs. For your usecase I guess you could have one tab be responsible for sending/receiving the data to the server and have the other tabs be a backup for that one taking over if the last update didnt happen in a specific amount of time. Id assume you may have difficulty with syncing still though.
http://pastebin.com/2TP5mY8n Here is some code. Basically: * hit play audio button and the audio loads. * if you hit the button again it restarts the audio * when you close the popup div it stops the audio There are about 20 of these popups that play audio. I hope make things a bit more clear.
Thank you for letting me know. I did take a look at the posting guidelines beforehand and thought it would be acceptable. Could you point me to what invalidated this post?
 +------------------------+ | | | How so? | | | +------------------------+ 
BTW, if anyone happens to look back here, I've made a lot of progress in the last 5 days, and have a good path to handle any other issues that come up.
That AXO probably isn't supported in Win7. Google it.
I don't think plain regex can handle that -- you need a full parsing system.
Nevermind. Figured it out. Shimming it involved simply wrapped the Dust.js library code in a requirejs defined statement thus: define("dust", [], function () { . . . return dust; });
Noone. I've been using both for over a year and Im well aware than NPM can download front end specific code. My original statement is not incorrect.
I agree. I think there should be a separation between front-end dependency management and backend dependency management. The two are pretty distinct. Bower works really well, I hope to continue using it for some time.
It's possible to write a regex that can match simple arithmetic expressions such as 1 + 2, but that is all they will do. If you want it to handle arbitrary complex expressions like ((4 + 5) * 2) / 3, then you have to use a parser. There are some libraries available for evaluating mathematical expressions, or you could write your own as an exercise. It's actually quite fun and a good way to learn how parsers work. If all you want to do is handle 2-operand arithmetic expressions, a regex like this should work: /(\d+)\s*(\+|-|\/|\*)\s*(\d+)/ That will match this sequence: one or more digits, zero or more spaces, an arithmetic operator, zero or mores spaces, and one or more digits. If you're not familiar with javascript and how it handles regular expressions, you might want to take a look at /r/learnjavascript. There are some good resources in the sidebar. (Edit: formatted the regex as code.)
Maybe I'm just a stickler, but I always use a different variable name for the variable inside the closure. It makes more sense to me, I guess, that I know this is being passed along and is neither a totally new thing, or exactly the original. Basically, I'd write the solution this only-slightly-different way: for (var i = 0; i &lt; 5; i++) { (function (_i) { setTimeout(function () { console.log(_i); }, 100); }(i)); }
Thank you again. I did some reading on IIFE. I can proudly say I no longer have global variables. I also updated most of my variable names to be more descriptive and while doing so, I realized I was trying to use r1 for more the one variable. While I'm no stranger to arrays, my limited knowledge of javascript, I can't get the array to populate from the event handler. I have tried monitor.resistances[], resistances[], probeMonitor.monitor[] and tons of other tail chasing. What do you recommend I study to learn more. I can use an array just fine in a global var and I thought I understood the namespace thing but not having any luck. 
Ah. Great idea. Thank you very much.
Look into WebRTC.
&gt; NPM is specifically for node Your original statement is misleading. npm may use node, but its registry is not exclusive to node, and its modules can be used in front- or back-end applications. A clearer statement: "npm is (currently) specifically for code" -- which might mean JS, or [images](https://www.npmjs.com/package/baboon-image), or [css](https://www.npmjs.com/package/atomify), or [3d models](https://www.npmjs.com/package/bunny).
Or you could just use array.forEach(fn);
I like your work, Eric, but I feel you promote yourself too heavily. Like this title. If your work is solid and clear your name will spread itself. Ease up a little.
A text wrapping plugin for Raphael.js. I would call it a 'non trivial' piece of work.
Not really sure what you're trying to argue. The npm tool does not run without Node (same with Bower). npm modules are expected to contain JavaScript code or JSON, but they can be transpiled from any language. 
&gt; The npm tool does not run without Node Would you say, then, that NPM is specifically for Node?
Your post wasn't directly related to JS.
A privacy warning for using this: if you don't explicitly .close() the notification, firefox will locally keep the plaintext of the notification in a file, with *no way to remove it* short of manually editing/deleting that file. So, if you use this to show some private chat message or something, it's possible an un-closed message will stay on the user's hard-drive even after log-out/closing the browser. Probably bad news for public computer users.
Your post was about a font, a "novelty" font at that. It doesn't matter what language the code in the image was written in, when all you're demonstrating is the font. Fonts are too broad for /r/javascript, if you want to discuss fonts then perhaps try /r/coding, /r/programming, etc., because fonts transcend any particular language.
Hi /u/rcoshiro, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `frontendjournal.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [frontendjournal.com](/search?q=%28and+site%3A%27frontendjournal.com%27+author%3A%27rcoshiro%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|14|78%
*Adobe air cries in the corner...*
Bluebird is awesome. I do not recommend using q. 
There's a more semantic way of doing it. See: [requirejs config shim](http://requirejs.org/docs/api.html#config-shim)
Turn based. Basically similar to a board game, but with faster gameplay. I can code in C and this is a foray into JavaScript.
Thanks for the links. I can use ajax, but don't want to because I want to learn something new. I was thinking of RabbitMQ, but wanted to ask around first.
There's a couple ways of answering this. a) The simplest way is to do something like this: if (typeof namespace == 'undefined') { //attach your namespace to global namespace = {}; } namespace.foo = function foo() {} console.log(namespace.foo()) b) A better, albeit more complex solution, is to use an actual module system, like CommonJS or [ES6](https://6to5.org/). 
[No?](http://bower.io/#install-bower) 
Awesome game, nearly crapped myself whenever one of those red pacmans would come up behind you out of nowhere.
losing applets was a much bigger impact than air. All politics driving everything.
What advantages does bluebird have over q, when.js, or any of the other thousands of promise libraries out there?
It's fast and has sane error handling. 
So then my question would be, "what does it sacrifice to be fast and have sane error handling?"
Well, that's not the point. The point is that `typeof` can now throw ReferenceError when given a simple Identifier. Considering that it's something that could *never* happen in ES3/5, I think it's good to be aware of that. Don't know about you but it does feel like a significant paradigm shift to me. You might not know or immediately see where and how that identifier is defined. It doesn't matter. ... if (typeof x !== 'undefined') { // boom ... } /* further in code */ let x = ... You might argue that declaring variables on top and keeping functions short should make this a non-issue — and you'd be right — but it also doesn't matter :) This is purely about fundamental change in behavior. Pre-ES6, you could be sure that `typeof foo` will never blow up (no matter what that foo is — declared, undeclared, initialized, uninitialized, host object, built-in object, etc.). Now there's an extra condition to keep in mind (does this identifier refer to a non-initialized lexically-scoped variable? yep, it will still error out then).
Nothing?
Just a note: we normally don't allow posts which are only the final product (including games), but I'm going to let this one go seeing as it was relatively easy to find the source and architecture details (given that it's hosted on github.io made it much easier). We'd appreciate it, if you'd like to post something similar in the future, to go ahead and post the source and/or architecture details yourself so that we don't have to do it for you, because if we have any difficulty locating this info then the post may just be removed. Thanks! Project page: http://timeinvariant.github.io/gorescript/ Github repo: https://github.com/timeinvariant/gorescript
Maybe I'm missing something, but I can't get this to throw... in an html page in FireFox 34, &lt;script type="application/javascript;version=1.7"&gt; if (true) { console.log(x); let x; } &lt;/script&gt; It logs `undefined` with no `ReferenceError`.... in Chrome 39 with experimental javascript flags and without the type attribute, it doesn't like the let keyword so can't really test... haven't tried it in node with `--harmony` yet. edit: tried it in node and yes, getting reference error.... sad panda.
[proxyquire](https://www.npmjs.com/package/proxyquire)?
So I have to have a build step during development?
wait a minute... Why are you comparing this to ES5, when it didn't have the let operator? Or am I wrong in thinking that let was added to ES6. So the guys really comparing the operations of let vs var. The big difference is that var is hoisted to the top while let isn't. in ES5 these checks would work because x/y/whatever is hoisted before your checks are actually performed. 
Wrote this while working on a project that required form uploads in IE9+. Every other library was either big, required jQuery, or didn't support everything we needed. It started as a fork of [toddmotto/atomic](https://github.com/toddmotto/atomic) but ended up getting an api change as well as the new features. Any feedback would be great.
This. *IS*. ***AWESOME***. As an old Doom player I immediately felt back in my element.
Hey this is excellent. I only played a couple of levels because I don't have a mouse handy, and was using my laptop touchpad. Some constructive criticism: One of the nice things about Doom was that you really felt like you were running through the levels. Here I'm always opening a door, and then walking backwards shooting over and over again. It can get a bit tedious. The other strategy I used was just ignoring the enemies (as they are really quite slow and not all that threatening) and just running through the levels. I'd suggest reducing enemy health, and making them more threatening. Red guys could move faster, and the triangles' bullets should perhaps fly faster, or be fired more frequently. The other thing is the name. It doesn't really represent the game well - there's no gore, and having 'script' at the end makes it sound like a language. Otherwise great project, thanks for sharing.
I have an interesting FPS issue, I can't seem to get into the double-digits for FPS even on the first level, using a completely up-to-date Chrome in incognito mode (which I believe means that extensions shouldn't affect it). However, on my ancient Chromium install, everything runs great. http://i.imgur.com/eMdni7C.jpg I realize this is likely something to do with my local Chrome install, and so I'm not really asking for trouble-shooting -- though I'll gladly do that if it'll help you. edit: Tried a new Chrome profile, no change. Tried 60hz and 120hz monitors on low res, no change. Chromium can, however, get 120fps which is really nice. Maybe something internal to Chrome-beta? edit 2: Embarassing, I didn't have HW acceleration enabled, and it wasn't till I got to the _Performance_ section of the project page that I realized it might be off. Works great now.
Unplayable for me. Might be my system, I guess, but on Chromium the walls and enemies are *almost* transparent (fiddling with the graphic settings didn't help), and on Iceweasel, I get "script not responding" errors.
It depends very much on the subreddit. For instance, if you post it to something like /r/WebGames or /r/BrowserGames, then they're going to be opposite of us: they're going to want just the final product and won't care about the tech. Here in /r/javascript though, final products or demos are appreciated -- but not required -- since it's the JS that we're interested in. Many, if not most, of the programming subs are like this. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) go into more detail :)
So why not declare all lexical scoped vars (let) in the beginning of the block? Thats what you usually do anyway with vars in function scope.
namespace = namespace || {}
&gt; let and const declarations define variables that are scoped to the running execution context’s LexicalEnvironment. The variables are created when their containing Lexical Environment is instantiated but may not be accessed in any way until the variable’s LexicalBinding is evaluated. A variable defined by a LexicalBinding with an Initializer is assigned the value of its Initializer’s AssignmentExpression when the LexicalBinding is evaluated, not when the variable is created. **If a LexicalBinding in a let declaration does not have an Initializer the variable is assigned the value undefined when the LexicalBinding is evaluated**.
Yes, this is exactly what I was aiming for. Reverse engineering the general "feel" of Doom was a big part of this game's development.
What you quoted means the following: x; // error (the subject of OP) let x; // let declaration does not have an initializer, so the variable is assigned undefined x; // undefined 
I myself learned javascript in about a couple of weeks before I can actually write something interesting, so I think it won't take you too long to write some useful code. I believe that the best way to master something is a lot of practice, just find yourself some interesting projects to build with javascript. also there are some materials that worth to be read, such "javascript design patterns", "javascript: the good part", "effective javascript". 
Cause Jesus he knows me, and he knows I'm right.
the thing with these quizzes is that no one would or should ever code like this.
On an equally shocking note, the following code *never calls alert*. function f() { alert('f ran'); } ... this is the same thing. "f()" never meant "f is always executed", it meant "f is executed when this code is run". Same with IIFEs. ES6 groups the default value statement with the function body, not the function declaration, that's all there is to it. Good to know but not surprising when you consider Python's experience with only evaluating default arguments once.
One of the reasons for `let` is to be able to declare variable just before you use it, not clamp everything up at top (it is bad/confusing programming). We use `var` that way because even if you declare it at the end, it still gets hoisted up.
No need to apply the classes by hand, that's what javascript is for :) [example](http://codepen.io/thykka/pen/bNgKBR) ^(EDIT: URL fail...)
Say for example, you have a Jade template view that is used on multiple pages. Depending on what variables are declared and non-falsy you display separate blocks of HTML. Before you could do `- if( typeof someVar != 'undefined' &amp;&amp; !!someVar )`, but with ES6 it looks like it just blows up.
You cannot have competition without fragmentation
Okay, here is an example. Before this change it was possible to build a library that created a poor form of macros for JavaScript by simply cutting and pasting code to generate the final JavaScript program. When writing a macro for such a library type of could be used to very carefully test one's inputs in a way that was completely safe. After this change it is no longer possible to use type.of in that manner and have it still be 100% safe. So, for instance, if you were to build a container that attempted to run third party code which might be malicious and which attempted to sandbox that code by inserting some text at the beginning before running it then this approach would no longer work. I will admit that this is a pretty obscure use case but it certainly does apply.
Yup, but npm does not allow you to remove or rewrite a version from its registry. This way you can still "npm install" with your previous versions and things will work. (Even though the package no longer shows up on the site.)
That sounds like a perfect case for a spa
Interaction between pages.
Congratulations on your enormously large penis, it must make you very happy.
I wanted to create something which works universally with all types of collections in JavaScript, and still be able to use some reactive principles through streams. Basically, it's a combination of underscore and bacon.js, but I also tried to keep it as simple as possible so more people get something out of reactive-functional programming. Some more links * [Wiki pages] (https://github.com/colin-dumitru/F.js/wiki) * [Flickr search example using streams](http://codepen.io/colin-dumitru/pen/XJNNPJ) * [Gitter chat](https://gitter.im/colin-dumitru/F.js?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge) I started the library so I can use it on some my other projects, but I'll maintain it and add features as long as someone finds use in it.
Is it the were squirrel part?
I don't like the hubris exhibited by fc_s, but to say that they are "pure marketing baloney" is very wrong. There is an extremely high demand for devs right now and a short supply. So people are willing to hire people with less experience. 12 weeks isn't enough to become an expert, but 12 weeks at 60 hours a week means you are getting more classroom time than most people get in 2-3 college semesters. You don't need to be an expert, just in a situation to be able to learn quickly and easily on the job (from various materials, including more experienced devs). It's not easy for everyone to learn on their own. Yes, you can definitely do it, but some people don't learn well that way, and having someone teach you in person can go a long way. It also gives you a huge network of other devs, businesses looking for devs, and shows that you actually have some training. It's really not all that different from going to college, you're just not doing it for as long. It's more like going to a technical school that is crammed into a 12 week period and you're learning the essentials. I went to a coding bootcamp and have a job and my job is very happy with my performance. Most of the people I graduated with are in jobs that pay well and they're very happy, too. We're not experts, but we are confident that we can contribute and learn and become more and more valuable employees. It would have been much, much harder for me to get to this position in such a short time had I not dropped 12k on the bootcamp I went to. Yes, that's a lot of money, but it was an incredible experience and got me a job that I love and pays plenty well that the money I invested was well worth it. tl;dr: Bootcamps aren't baloney, they're just another very valid method of learning coding and getting a job. 
I wonder what the thoughts are in the slackware community about this slack community. 
It's disappointing that the guy above was so snooty in his response (though I think he felt a little attacked by the original commenter), but I don't know really any people who have that arrogant attitude out of my bootcamp (Fullstack Academy in NYC). Our instructors made us confident that we could do well and continue to learn moving forward, but made it clear that this was just the beginning (our instructor literally gave a speech that said "You aren't great yet! But you can be!" on our final day) and that we should continue to work hard and be humble. Hope guys like him haven't turned you off to the rest of us.
In ES5 you could do `typeof anyname` and you **never** would get any reference error. That's no longer the case. I don't mean it matters but there's a change.
Learning any new language (be it a coding or a spoken language) is going to be tough at first. It'll take time and requires you work on it daily. How long have you been working on it and how often? If you're working on it for a year daily and you're still struggling with chapter 4, yeah, maybe you should pick a different path. But if you're just a few weeks in, don't be discouraged. You don't need to be a JS expert yet, just need to be really comfortable with all of the basics, and be good at problem solving. That's what'll get you into HackReactor. [CoderBytes](http://coderbyte.com) are a great practicing tool for the sorts of interview questions you might see in both bootcamp interviews and future job interviews. Let me know if you have any questions about the whole process (learning, applying, etc) as I attended a bootcamp in NYC about a year ago and now am happily employed. 
I don't think its bologna by the way multiple sources and graduates praise the program. However, I was very skeptical at first as well. I'm just in a position where I really want to set myself up for a good career in a promising field, and Hack Reactor suits my way of functioning. I'd rather sprint in bursts, then jog.... and jog. I agree with /u/disasteruss that the networking alone that they provide seems very promising. And I believe proper networking leads to multiple options for a career. But man, is self-teaching tough...
A few things that come to mind: * It doesn't require deep links (though you *can* do this with an SPA.) * Easier to manage state between views. * Writing a back end to generate HTML pages is more work (and requires better security) which you probably want to avoid if possible. * It'll appear faster as users advance from one view to the next, easier to animate transitions if wanted, etc.
Not being the first.
This is perfect for an spa. You will need the API to serve your page, but every other endpoint can remain the same. If you had your app posting to the API or server then you will have to state serving pages as well as API content. You may want a slight mix if its easier, e.g. A guest page and a signed in page, within those you might have two separate SPAs for different types of users. I'd go with one spa though and master the state side yourself as it's a good journey to go on. 
My understanding of JS is pretty subpar as of now. Maybe once I'm able to do easy problems on CoderByte I'd be willing to help others instead of maybe confusing another person inspiring to be a programmer. But thanks for the motivation! I really need it :)
That's what it seems like is happening to me. Yea sure at first I totally thought I can do it while breezing through syntax and basic functions keywords. *Then it got complex real fast.* *Did you feel you were only able to understand those things because you were proficient in other languages? Or was it mostly hardwork?*
It would only be 2 semesters of college, 60 * 12 / 15, if you take the required minimum of a full time student. At a community college, that's around ~$3000. Personally, I find these bootcamps incredibly narrow minded. When you attend college, the purpose is to get a broad understanding of the degree you are achieving. Instead of learning to specifically code JavaScript, you are learning data structures, algorithms, operating systems, networking, the basic fundamentals of Computer Science. A person would be better suited to learn those fundamentals and why these things exist and work the way they do. It doesn't matter what language you choose, whether that be JavaScript/Python/Java/C/etc. The reason they teach these things in college is because it will make you a more well-rounded *product* for the industry. From HackReactor's website: &gt; Our program builds expertise in a curated suite of technologies and concepts, each selected for their workplace utility and relevance to modern software engineering paradigms. The problem there is *curated suite of technologies and concepts*. As developer's, we are problem solvers. Bootcamp's do not teach you to solve problems, they teach you to use modern technology. Some of us older dev's all know that JavaScript is a bullet train just plowing through constant bullshit. A year from now, there will be a new package manager, a new transpiler, a new MV* framework, Crockford's updated "JavaScript the ES6 Bad Parts", etc. Are you planning on taking HackReactor again next year, because the curriculum will be entirely different. This is not teaching you to be come a software engineer. This is an expensive hobby, that for some works. But if I started a company and wanted to hire candidates, I'd take a college graduate over a bootcamper any day of the week.
No, I do not know how to program. I'll look into JS for kids and the source you provided. Thanks for your suggestions!
Ah I see. Sorry I wasn't more clear. I should've made my thought process more apparent. 
Google is crawling JS now - http://googlewebmastercentral.blogspot.com/2014/10/updating-our-technical-webmaster.html?m=1 So your quip may not be so true.
Sure, though I'm not going to name names at this time. - Interviewed last year for an *expensive* Texas bootcamp. Focus was on trendy tech, not education. Technical interviewer wasn't very impressive, IMO. - In my day job, I've interviewed probably 6-8 applicants with bootcamps on their resumes. Most people in a hiring position probably have done so these days. So far we've not decided to hire any of them, unless I'm forgetting someone. - Friend and former coworker is a current instructor at one. I've been encouraged to become one at the same place (I'll pass for now) 
I prefer to use Npm install express-generator Then you get a good file structure and you can add flags like -e to generate ejs it defaults to jade. http://expressjs.com/starter/generator.html
My biggest problem with libraries like this is they don't work with screen readers.
async.js is pretty old yea and was the most popular flow lib once.
Agreed and for it's time before promises it was a huge improvement over raw callbacks. But that time is long past no one should be learning or using async.js today. 
Looks, in my opinion, much cleaner than bacon.js. Nice work!
Don't belittle your understanding of JS (or anything) as subpar. It'll only hurt your confidence. You might not know Javascript as well as others but you do know more Javascript than you did before you started learning. The more you study, the better you'll get. If you want to compare your understanding, do so with your own understanding a day before, or a month before. If it has improved, feel good about it and *keep at it*. It won't be long before you'll be good at Javascript. edit: If you want, you can give Codeschool a try (https://www.codeschool.com/paths/javascript). Try the Javascript road trip series. The first one is free.
You might want to recreate the issue at http://jsfiddle.net/ or http://jsbin.com/ so everyone can see what's going on.
On mobile it works, but the experience leaves much to be desired.
Not sure I'd ever really use this. Requires too recent browser support to make it useful for the projects I'd think of needing it on.
Select2 has pretty decent ARIA support. I have tested it with NVDA without any problems.
I feel like you've done a great job for that goal. I felt some nostalgia come back to me from the old days of doom.
What browsers would you require? I don't support anything less than IE10, but I haven't checked if it's actually broken on older versions. It might just work, possibly with some polyfills.
Then IPv6 is going to be a hell of a security mess, if you think revealing an IP is a problem...
Yes: command-click did not seem to work for me.
how are you testing this is in Chrome? Chrome Canary does not support "let"
JavaScript doesn't have a queue. The setTimeout function says "after this amount of time call this function". If you set up multiple setTimeout calls which should all execute after the same amount of time then they may execute out of order because there is no queue to order them. JavaScript is also single threaded (ignoring Web Workers). No two things are actually running at the same time. Does this help clarify? If you have followup questions a code example may help the explanation as well.
Use Underscore. It's a really useful framework/library. var output = []; _.each(json, function (obj) { output.push([obj.timestamp, obj.value]); }); console.log("output", output); I'm not sure how the integers in your expected output correspond to the datestamp provided, but if it is a Unix timestamp you want and you want the value as an float/number (not a string), try this: var output = []; _.each(json, function (obj) { output.push([new Date(obj.timestamp).getTime(), parseFloat(obj.value)]); }); console.log("output", output); Your example input produces the following JS array: [ [1420405516000, 26.9], [1420405827000, 27.1], [1420406138000, 24.8], [1420406449000, 21.4], [1420406761000, 19.6] ] Of course, Underscore isn't required for this: var output = []; for (var i=0; i&lt;json.length; i++) { output.push([ new Date(json[i].timestamp).getTime(), parseFloat(json[i].value) ]); } console.log("output", output); 
Something like this data.map(function(v) { return [new Date(v.timestamp).getTime(), parseFloat(v.value)]; })
Two-finger click seemed to work for me.
Your example actually got picked on Codepen, haha Congrats
As others have mentioned, javascript is your best bet. Check out [Lettering.js](https://github.com/davatron5000/Lettering.js)
this just looks like a copy of underscore.js how is this different? Underscore is designed to abstract away differences between arrays and objects (for example _.each) as well has map, reduce and filter functions. It's also more respected and more common to use. The only exception are the few featurs that lowdash uses to help this along. 
Go on... 
Is the show in a settimeout? 
How are you trying to set up the 2 second timeout in the loop? If you are calling setTimeout in a loop that wont work because setTimeout does not block, it returns immediately.
My personal issues: * strictly "id" and "text" properties for the elements, if my current services return different names to this properties, the init of a new input fails. * I think you mentioned, but the lack of support for "input" elements is a huge deal. * When using bootstrap, the search box overflows the actual input element (http://plnkr.co/AaOfgdpX2xgBxSbHLc49). This also happens when I was testing without bootstrap. Aside of that, looks pretty good. Also, what about validation? Any plan to integrate jquery-validator?
IPv6 folks are all about "the end-to-end principle of network design." [Some even believe that NAT is a security risk itself.](https://www.princeton.edu/~achaney/tmve/wiki100k/docs/End-to-end_connectivity.html) It doesn't make a whole lot of sense to me, though. Firewalls will still have to strip off incoming connections, and a misconfigured firewall and/or an unpatched exploit on any client behind the firewall now leaves the entire LAN vulnerable, whereas currently you just need to make sure your firewall is properly patched and maintained. I'm sure good solutions will emerge, but it just seems like the first networks that deploy IPv6 without NAT are going to be super-vulnerable.
No, it is not. I'll try to recreate the issue as /u/bateman below recommends and I'll let you know as soon as it is there. Thank you!
I'll try it and let you know. Thank you very much
Hi /u/Wolffoftryon, it looks like you're new to reddit, welcome! Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `libstash.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [libstash.com](/search?q=%28and+site%3A%27libstash.com%27+author%3A%27Wolffoftryon%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|7|88%
Very strange. I tested my code and it worked. Can you paste your code here? Are you using "new Date()" or just "Date()". Also, what browser are you using? 
I've been using 2.0 on a few different projects. The simplified syntax for async tests was definitely worth the upgrade from 1.3.
Ok, so I call setTimeout... It returns INSTANTLY, but puts the callback function aside to do later. because the callback is a console.log- seems like they all happen at once. i guess i'm confused where the delay actually happens.... Not when it returns, but prior to the callback being done? 
arendjr, IE 8+. Include a legacy build or something, don't leave it up to your consumer to figure it out. This isn't a next-generation UI tool, it's a simple dropdown replacement, it should "just work".
Looks interesting. Aside from streams, is this different to Lazyjs?
EDIT: new Date("2015-01-04 21:05:16"); works for me as well, so just do that. There might be an easier way than this, but this should work. The only thing you should be careful with is time zones. var convertDateString = function(ds) { var date, time; ds = ds.split(' '); // Split the date string by space. date = new Date(ds[0]); // 0th index is the year, month, and day. time = ds[1].split(':'); // 1st index is the hour, minute, seconds date.setHours(time[0]); date.setMinutes(time[1]); date.setSeconds(time[2]); return date; };
You are getting no replies because you haven't attempted anything. Get a Codepen going and we will help you when we see something.
did you have to just go through all of your tests and make the changes manually?
You can unpublish from npm website, you cannot unpublish from the registry. 
&gt; More often than not they make the code more difficult to interpret I tend to disagree - for me, in the JSPerf link you've provided, it's far easier to see what the functional style code is doing than the imperative. The former is very obvious at a glance, whereas I have to read through the latter to figure it out. To be fair I've written a metric shitload of functional code over the last few years (Mostly in Scala, but a fair bit in JS as well). Perhaps it requires a bit of a learning curve, but once you're over that it seems much, much easier to work with than the alternative. &gt; hugely disproportionate performance degredation In micro benchmarks, bare to the metal code is always going to be faster. However functional code composes better, resulting in less cognitive effort to maintain a codebase with any level of complexity. This gives you more opportunity to optimize at an architectural level. In that example, since the amount of actual work inside each function was just a trivial multiply operation, the overhead of calling multiple functions for each element was orders of magnitude more than the operation itself. Basically, that was the worst possible scenario for the functional style, and the best possible scenario for the imperative style. In real world code, you're normally doing more complex things and the function call overhead becomes a rounding error compared to your actual logic. If at any point you want to take the results of your stream and display it to the user, chances are you're doing DOM manipulation. This alone would be orders of magnitude slower than the functional call overhead. In the case of FRP, the entries being iterated over are events created by a user. Even for highly interactive games with a lot of key and mouse events, you're still talking about at most maybe 10-15 events per second. This is hardly taxing to the runtime, and will be several orders of magnitude slower than the actual rendering code. If you had a scenario where you needed to batch calculate the squares of million of elements in an array, then I'd absolutely agree an imperative style (inside that function) is the appropriate course of action. Really it's a matter of using the right tool for the job. For the type of stuff I've worked on, in the majority of cases the overhead of using a functional style is basically zero, but I still drop down to an imperative style in the rare occasion I need it for performance inside a specific function. Javascript isn't the best language to use in a functional style (for this and many other reasons), but it does work well enough. &gt; Here's a working example of your Flickr example without the use of F.js. In my opinion, it's much more succinct and easy to reason about I agree - for simple cases like that, FRP is overkill. The benefit only becomes apparent in more complex scenarios. (I can't speak for F.js specifically, but in other libraries I've used the benefit comes with being able to compose streams in different ways - i.e. flatMapLatest, zipWith, merge, etc) Unless I'm missing something though, your example is also in a functional style? 
I haven't used F.js specifically, but in the case of FRP - it really does fill a very important niche (Although it's not something that you need all the time). It does appear to be a bit of a fad at the moment with everyone trying to re-invent the wheel, but I think it's still going in the right direction. Mind you I'm coming from the perspective of learning FP in Scala and Haskell and then trying to apply the same principles in Javascript. As you say, there's probably a lot of people trying to learn FP solely in JS, which could explain a lot of the misuse. 
This is the actual code I am using. It will work if instead of the ajax statement I use setTimeout, for simulating the processing time of ajax. (it works in firefox even as is, but not Chrome) $('#process_2banner').on("click",function(){ var postdata = "lead_id="+rowId; //needs to include the pidm of the user clicking the button $('#spinner_box').css("display","block"); $('#spinner_box').html('Wait, we are processing the record..'); $('#spinner_box').css("display","block"); $.ajax({type: "POST", url: "insert_srwordpress.php", data:postdata, success:function(result){ if (result.isOk == false) { alert('Some error occurred while writing Banner') } else { $('#spinner_box').hide();} }, async: false}); }); 
Absolutely, that's the attitude I tried to convey when looking for jobs originally. I am inexperienced but eager and passionate and have the basic skills necessary to grow and become a great programmer. I've learned a lot from my job and was glad that my company decided my lack of experience wasn't a deal breaker.
From inside the LAN. Their forward facing IP is the routers IP
and im still programming with jquery like an idiot
Well, couple minor things first. First, I don't understand the need to use $.html on the box. Just hardcode that message in the html if it's only ever shown if processing. Second, you can probably just use jquery's hide() and show() functions. Or, alternatively, use classes that accomplish the same thing and toggle them. Anyway, as for the ajax stuff, it seems that you want to show the spinner immediately on click and then hide it once the ajax is complete right? Turn async back on, and put the hide() in the success function. Success is fired when the request completes successfully, error is fired if there's a problem, and done is fired regardless of success or failure. In this case, success should fire once the data has been sent successfully, and you should get an error if there was a problem sending it. Something like this maybe: $('#process_2banner').click(function() { // needs to include the pidm of the user clicking the button var postdata = 'lead_id=' + rowId, $spinz = $('#spinner_box'); $spinz.show(); // just put this in the html, setting it via js seems unecessary // $('#spinner_box').html('Wait, we are processing the record..'); $.ajax({type: 'POST', url: 'insert_srwordpress.php', data: postdata, error: function( req, status, err ) { console.error( 'Banner failed because of: ', err ) }, success: function( res ) { $spinz.hide(); // do stuff }, ); }); 
1.3 because there aren't any Karma bindings for 2.0 (or at least there weren't the last time I checked)
Yeah, that's the only way I can think to do it. For the clock stuff it's a pretty simple search/replace. The APIs for spies and async tests changed pretty dramatically so you pretty much just have to do it test by test. If you decide to go through the effort and you have a lot of tests, best of luck. 
FRP goes much further than simply dealing with streams (in the node sense) and laziness. As just one example, AFAIK Lazy.js is incapable of dealing with data-over-time, whereas the FRP primitives provided by something along the lines of F.js, Rx.js or Bacon.js are specifically designed with this concept of constantly changing input with no determinate end.
Eh, polyfill map if that's what's keeping you from using it.
Mine is 192.168.1.4 on my Windows laptop, 192.168.1.8 on my desktop and 192.168.1.9 on my Ubuntu machine. The DHCP ranges from .4 to .50. I've got the rest reserved for statics, although I only use a handful of them.
&gt; I guess I'm used to seeing it kludged into all the wrong places (read: everywhere) in JavaScript. This appears to be an unfortunate consequence of the feared rockstar-hipster webdev movement discovering F(R)P for the first time. 'Tis a shame that many of these individuals either grossly conflate using functions with functional programming (eg. es5 Array utilities) or advocate fp-oriented libraries with the same vigor that they push mongoDB. FP as a tool for procedure abstraction, control flow abstraction, and state handling (among other things) falls to the wayside in favour of FP as a technology to be shoehorned into every imaginable scenario. Of course, it's ridiculous to expect everybody picking up FP to be familiar with, say, lambda calculus, but I stand by the opinion that the sea of un/misinformed (and not necessarily poorly written, either) blog posts on this topic only serve to worsen understanding among js programmers.
no one needs it and we havent for half a decade
Like someone trying to get things done fast and efficiently, if not as performant as possible. 
&gt;[**You're BeautifuL - James BLunt (OfficiaL Music Video) [3:20]**](http://youtu.be/ehToBz7zhqE) &gt;&gt;CLick " Show more " for Lyrics &gt; [*^Rainier ^ALfred ^Apuada*](https://www.youtube.com/channel/UCbl1J062kzVr6xFayBVNL6A) ^in ^Music &gt;*^13,589,148 ^views ^since ^Dec ^2011* [^bot ^info](http://www.reddit.com/r/youtubefactsbot/wiki/index)
ah ok. I am using Karma. So pretty much every Angular developer is still on 1.3 huh?
Check out Karma. sudo npm install -g karma Then create a configuration file like this: https://github.com/skaterdav85/backbone-computed-properties/blob/master/karma.conf.js Alternatively, if you just want to play around with Jasmine, you can use an online tool like this: http://tddbin.com/
Javascript in Acrobat is an abomination. Get ready for a really painful learning curve and one of the buggiest pieces of software ever written. If you can, I'd highly recommend a web-based form which stores to a db or emails you the results. I unfortunately don't remember any of what I had learned and don't have acrobat anymore, but this is the document I used to figure it out: [PDF link](http://partners.adobe.com/public/developer/en/acrobat/sdk/AcroJSGuide.pdf).
How do you do it? ... firstly you type something... then you see what you get.
The biggest issue I have with modules like [clamp](https://github.com/hughsk/clamp/blob/master/index.js) or [lerp](https://github.com/mattdesl/lerp/blob/master/index.js) (linked in the post) is that it's a lot quicker for me to just write the function than Google it, *especially* when there are multiple competing alternatives. Also it is not fair to lump polyfills in the same category as the two functions above. Although polyfills can be tiny in the sense that they have few lines of code, they are not tiny in the sense that they are quick to write. They often require a lot of research to deal with browser corner cases. Polyfilling a microtask queue comes to mind, as you have to use DOM MutationObserver and do something like toggle setting a class (which is not obvious at all). edit: [oh man that repo linked in swannodette's tweet is hilarious](https://github.com/blakeembrey/change-case/blob/master/change-case.js). I think what JavaScript needs more than anything is competent code deduplication and dead code elimination (Google Closure is way too inconvenient to use). This is shit machines should be doing, not humans.
&gt; Writing a back end to generate HTML pages is more work (and requires better security) which you probably want to avoid if possible. I hope you are kidding.
Browserify is a big reason why people are dropping bower. When you can write all your code like it's back-end js, and just require('myNodeModule') for everything you can possibly want, using 2 separate package managers stops making much sense. 
Can I hijack this and ask a related question? When *shouldn't* an app be a single page app?
No... why? If you're implementing typical form posts you have to guard against XSS. If you're submitting user data with AJAX you don't have to worry about hijacked user input getting recycled back into the front end. EDIT: Ok, I was wrong. I must have glazed over the description of where they grade each other's scores.
Sums up my thoughts exactly. Except for what you've outlined, I have a feeling the following things would be madness in a larger project (assuming the dependencies are third-party, which most likely would be the case to avoid "reinventing the wheel"): - **Management**: Managing the ever-growing list of external dependencies would be a full-time job (introducing new dependencies, updating existing, etc.) - **Bugs**: Finding, fixing, testing, contributing back—a major overhead in your day-to-day, especially if there are CLA's that needs to be signed, code that needs to be legally reviewed, project maintainers that are not really maintaining the project anymore since he/she already have 100's of other "tiny" modules, etc. - **Familiarity**: Every tiny module you incorporate in your code base comes with its own API, following its own code style. Similar functions with opposite input parameters etc. I wouldn't want to work on a project like that.
Something like reddit of course, where you navigate primarily by links to reference self-contained discussions with no implied hierarchy 
You're still gonna have to display user input at some point and you'll have to escape for html whether you're doing it on the client or the server.
It's a bit clunky on mobile, but being in the experimental phase and having to go up against a goliath site like reddit that uses a lot of native front-end ui I'll have to reserve judgement 
Tiny modules... In the Wine.
[kangax](http://kangax.github.io/compat-table/es6/#iojs) says Node doesn't support `=&gt;` functions. The solution I've been using is to have a small file to initialize my package that runs all my imports through [node-jsx with Harmony transforms enabled](https://github.com/petehunt/node-jsx) and then `module.exports = require("./actualInit.js")`.
I think the modularity whacko's publishing 3 line functions to npm are completely out of touch with reality. That is absolutely fucking crazy to me, i'm sorry. There's a certain limit in size of module where it becomes more overhead to consume it then to just write the fucking thing yourself in a few keystrokes.
Two questions: - Have you been following [Jafar's efforts](https://www.youtube.com/watch?v=DqMFX91ToLw) to get Observable implemented in the language spec; what are your thoughts there? - How come the `pullStream` method requires you to tell it what stream to pull? Shouldn't the context of being on the stream do that (just as `sequence.toArray` knows which items to create an array of without needing to receive the sequence as a parameter)? 
node 0.11.13's v8 version doesn't support arrow functions. Use [6to5](https://6to5.org). 
I was not aware of "most", and it does seem very similar, though obviously it has a different syntax. Oh well, more choices is better I guess. And for your second question, I wanted to keep the API of streams as simple as possible, so you don't have to necessaily use functional methods to pas objects through streams. By default, it follows the same interface as ES6 generators (so it has a "next" method and a few more to push or observe values). But this *is* something I didn't like when developing the library, that you had to call F twice to get the functional methods. As it's still experimental, I might change this aspect.
Why would you care about mapping internal topology before an attack? It's no use without an entry, and once you've got an entry point, you'll have the local topology in very little time just looking at ARP / miscellaneous broadcast traffic.
calling `item =&gt; item` will just console log each item, it was only a dumb little command to see if it was working, also you don't need parenthesis, unless you're using more than one parameter, e.g. var result = test.map((value, index) =&gt; value); 
I would love to see more tools for discoverability and "grouping" modules. I think lack of discoverability is a huge pitfall to the modular approach right now. 
Goodness I really needed to ~~hear~~ read this. I'll be sure to check out that learning track asap. May I ask why you're learning? Casual? Hopes to be professional?
Wow you're really motivating. ~~If I ever~~ When I make it into the program I'll be sure to thank yo again. I'll check out that course after peeking at a few others that was recommended to me. Thank you so much for your time and being kind :)
Perhaps I don't understand you completely, but when I can see what URI your ajax posts to (which is not hard) I can post to that same URI as well. Back end will always need cleaning of all input. Never trust a user ;) 
I do not know how to program this in Acrobat. If I were to program this in a webform, it'd look something like this, and I hope this will give you a hint as to how to do it in your form: function onBox1Change ( value ) { "use strict"; var i, theForm, theBox, boxNames; theForm = document.forms[ 'whatever you named the form' ]; boxNames = [ 'box2', 'box3', 'box4', 'box5' ]; i = boxNames.length + 1; while ( i -= 1 ) { theBox = theForm.elements[ boxNames[ i - 1 ] ]; if ( !!theBox) { theBox.value = value; } } theForm = theBox = boxNames = null; } You can change the names of the boxes and the form as long as you leave the quotation marks. Edited because I forgot something: You have to tell the 1st box to start that function at all. This is called 'adding an event listener', where the above function listens to an event on the box. In this case I would choose the 'change' event. For a webform the html coding could look like this: &lt;input type='text' name='box1' value='' onchange='onBox1Change( this.value )' /&gt; Does that help?
&gt; No. That's not helpful. What are you recommending instead then? I read your comment the same way as /u/SubStack. &gt; You don't need a "kitchen sink," or a whole slew of unrelated features, or a framework, or even a single library to avoid one-function modules. Equally unhelpful. What *are* you recommending? &gt; one-function modules Pulling this out just because it's bothering me. There are many instances of code that requires significant effort to write yet can be reasonably expressed in a single function, resulting in a "one-function" module that is very much suited to being a module. I think a better term for what we're talking about is a "trivial module". &gt; This is not an example of what you stated. It's a GitHub issue comment. Perhaps provide some contextual clues to make your point. What? It's a GitHub issue comment that supports his view (that grab-bag modules are less discoverable than separate modules). I don't even know what part you're asking for clues about.
I'm not supporting grab-bag modules, but the issue highlighted in that comment is 100% a shortcoming of npm's simple search rather than of the idea of grab-bag modules. Which doesn't argue against separating modules for discoverability in the short term, but it does make it fall under "fixing the problem in the wrong place" IMO.
Or none.
The Date object has a getHours and getMinutes method, which will return a number. You'll likely want to zero-pad these and then concatenate to get your time string. EDIT: I may have misunderstood. If you're after the minutes and second of the difference between two dates, expressed as milliseconds, you want to do something like this: http://stackoverflow.com/q/10874048/283445
While you certainly still want to keep security in mind, there is some truth to this. A regular endpoint that returns unescaped input can be used to harvest cookies and whatnot from anyone visiting the page. A REST endpoint returning JSON that is associated with corresponding JS that has missing sanitization is much less likely to be practically exploitable. I think it's generally a true statement that its harder to mess up security on a SPA simply because the backend doesn't return HTML that can be silently rendered in an iframe. 
The "Show me" links/key presses don't work (Im on Chrome). :(
"Refused to execute script from 'https://rawgithub.com/dmauro/Keypress/master/keypress.js' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled. " Thats why
WHO NEEDS THIS? STOP MAKING STUFF NO ONE NEEDS. $("#foo").on("keypress", function() {});
I find the following resources useful: * Free ebooks on web development: http://jsbooks.revolunet.com/ * Resources for frontend development: http://uptodate.frontendrescue.org/ * JavaScript news: http://www.echojs.com/ * JavaScript user groups: http://communityjs.org/ * JavaScript conferences: http://lanyrd.com/topics/javascript/ * A forum where you can ask questions: https://groups.google.com/forum/#!forum/jsmentors * Twitter is widely used in the JavaScript community and a great resource.
Did not know. Awesome =)
&gt; And why do I gets a complete test suite and a shitload of miscellaneous project cruft in the installed package if I only need the one function? Because they don't know about `package.json:files`/`.npmignore`.
they have a history of dropping projects on a whim. And they kinda confirmed some fears by doing the Angular 2.0 move. 
"simple" solution that requires looking up keycodes every time instead of using something like "shift s" or doing sequences like Keypress does. It's the same amount of code, but it is not the same amount of work.
https://developer.mozilla.org/en-US/docs/Web/JavaScript https://developer.mozilla.org/en-US/learn/javascript
Someone with more experience should comment, but - Eloquent Javascript? I've been working through that and it's not exactly basic. And it gets you using higher order functions like .map instead of loops very quickly.
I solved it with the date()-function! The problem in the end was that i needed to replace the space inbetween the date and time with a T and then it worked! Thanks everyone for your help! :)
So, what advantage does this have over Select2?
Start learning NodeJS for shits and giggles to redo things you've done in Python / Django... and a while after that, Bam! You'll know javascript. Then you just have to learn how to muck around with jquery. http://nodeschool.io/#workshoppers
Hm, not really. Most people searching for a "lerp" or "smoothstep" function are looking for the exact function as published to npm. If you had to remember everybody's github handle, things would get out of hand pretty quickly. 
Again, the problem would come from namespace collision. Who's to say that your lerp is better than my lerp? Granted, with code so small it can be easily validated via inspection, but I feel we're now in the realm of stuff being so small that your module only serves to inform someone else's own implementation, so they can duck out of the encumbrance of the copyright notice required by the second clause of the MIT license, and you'd have no particular recourse because the code is so trivially small that you'd be hard pressed to prove anything was distinct about your version that could be clearly proven to be stolen. I guess what I'm saying is that npm's flat namespace assumes larger modules and might be a poor medium for tiny modules to live in. A better system might be a package manager that only downloaded a module and then dumped it to stdout, just to serve as a fast "this is what lerp looks like."
I think we can all agree npm search is not the best, but I wouldn't call it the problem. A module called "mkdirp" will always be easier to discover than the same function hidden in a grab-bag module. Its also clearer in the code; ie you know that module won't have any other cruft, and you know it will not change/grow in scope or get removed from the grab-bag altogether. 
React makes code more reusable by eliminating spaghetti code which is typicall for most js heavy apps.
Good work. I completely understand why you've done this, and you should continue working on it. But you should know that not all keyboards map "SHIFT + keyCode: 51" to "#". For example, on the UK QWERTY keyboard, it's "£". On the French AZERTY keyboard, that combo is "3". On the German QWERTZ keyboard, it's "§". Some keyboards have different behavior for the left and right modifier keys. The UK QWERTY keyboard has an Alt-Graph key that sets altKey:true in a KeyboardEvent. You have to listen for keyCode:18 and then check the "location" property of the KeyboardEvent to tell the difference. And finally, you may want to read up on "dead keys", which are sort of like modifier keys, but they work in sequence, not in combo: http://en.wikipedia.org/wiki/Dead_key
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Dead key**](https://en.wikipedia.org/wiki/Dead%20key): [](#sfw) --- &gt; &gt;A __dead key__ is a special kind of a [modifier key](https://en.wikipedia.org/wiki/Modifier_key) on a [typewriter](https://en.wikipedia.org/wiki/Typewriter) or [computer keyboard](https://en.wikipedia.org/wiki/Computer_keyboard) that is typically used to attach a specific [diacritic](https://en.wikipedia.org/wiki/Diacritic) to a base [letter](https://en.wikipedia.org/wiki/Letter_(alphabet\)). The dead key does not generate a (complete) [character](https://en.wikipedia.org/wiki/Grapheme) by itself but modifies the character generated by the key struck immediately after. Thus, a dedicated key is not needed for each possible combination of a diacritic and a letter, but rather only one dead key for each diacritic is needed, in addition to the normal base letter keys. &gt;For example, if a keyboard has a dead key for the *[grave accent](https://en.wikipedia.org/wiki/Grave_accent)* (__`__), the French character *à* can be generated by first pressing ` and then A, whereas *è* can be generated by first pressing ` and then E. Usually, the diacritic in an isolated form can be generated with the dead key followed by *space*, so a plain grave accent can be typed by pressing ` and then Space. &gt; --- ^Interesting: [^Compose ^key](https://en.wikipedia.org/wiki/Compose_key) ^| [^Icelandic ^keyboard ^layout](https://en.wikipedia.org/wiki/Icelandic_keyboard_layout) ^| [^QWERTY](https://en.wikipedia.org/wiki/QWERTY) ^| [^AZERTY](https://en.wikipedia.org/wiki/AZERTY) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cnljv9x) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cnljv9x)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
That's a great point. I don't do a ton of key specific logic right now (if user presses ctrl+i, do this), but I will be soon. I'll probably end up using this or something like it just to keep the code simpler and easier to read. Thanks for the comment!
You can do it like this for example: var myArray = []; var myImage = new Image(); myImage.src = '/something.png'; myArray.push(myImage); // ... 
OTOH You have to audit the code, add the library to your vendors/, probably do some tweaking of a gruntfile, keep it up to date, it adds extra complexity to your code and increases your total page-size.
Check out moment.js it's a legit library for dates and times.
Funny enough this advice will actually help them learn Javascript the fastest since they'll be working in a domain they're familiar with. 
I didn't even know you could make android apps with Javascript. Lol
Exactly this. I started doing all the backend work that I normally did in Python/bash in node js. Learned JavaScript in no time and 90% was transferable to front end as well.
In my experience IE &lt; 9 should be treated almost as a different project, and billed/allocated accordingly. Then with LESS/SASS and browserify/webpack/AMD/whatever you can share *some* code across the modern/fallback versions, but still use separate bundles. YMMV but I've been bitten by IE too many times; having JS/CSS and designs that target modern browsers can be pretty tedious to refactor for IE. It's easier to do IE from the ground up, with its own designs and devs. 
You can't compare a web framework and templating engine, to a library of functions. There is no 'versus'.
Read more about protoypes and the OLOO pattern. Look at frameworks like Ampersand.js where each module is of easily readable size. 
It also conflated `Product` with item `ItemsList`. `Product` is clearly another component, but they wedged it into the list so that it could never be used elsewhere. `isExpanded` is a property of `Product` and `Product` should be a component: &lt;ul&gt; { PRODUCTS.map(function(product) { return &lt;Product { ...product } key={ product.id } isExpanded={ self.state.expandedProductId === product.id } onClick= { self.handleProductClick } /&gt; } } &lt;/ul&gt; Ugh. I think that's even terrible. The `isExpanded` should be an `ExpandableListItem` component with the child being a `Product`. The `Product` render shouldn't care if it's expanded.
Here's an example to look at with a bit of , with the same basic idea as andersevenrud's example above: &lt;!doctype html&gt; &lt;meta charset=utf-8&gt; &lt;title&gt; arrays of images &lt;/title&gt; &lt;pre&gt;&lt;/pre&gt; &lt;script&gt; var log = document.querySelector('pre'); var imageURLs = [ 'http://placekitten.com/g/90/91', 'http://placekitten.com/g/91/91', 'http://placekitten.com/g/95/91' ]; var images = []; imageURLs.forEach(function(url){ var image = new Image(); image.src = url; images.push(image) }) log.innerHTML += JSON.stringify(imageURLs, null, 2); log.innerHTML += images; for(var i=0; i &lt; images.length; i++){ document.body.appendChild(images[i]); } &lt;/script&gt; You'll notice that the two arrays `imageURLs` and `images` are serialized differently: one is an array of strings and the other an array of Image objects (represented by JSON.stringify as [object HTMLImageElement]). Those images are DOM nodes, so we can attach them to the body with `appendChild` and they should render.
When you know, you know. It's like falling in love! Teehee
You can make a JScript.NET executable with jsc.exe, which is present in many Windows installations. http://msdn.microsoft.com/en-us/library/7435xtz6%28v=vs.90%29.aspx
Read the rhino book, then read the good parts. Then read about es5 and es6/7 stuff. Build stuff. Firebase and meteor are all great for just getting started building apps without having to worry about build tools like gulp/grunt/webpack/bower/browserfy/handlebars/requirejs static crap. But since you're already familiar with django you might just want to make your backend django and use django's static build tools (compression, caching, file concatenating) which are good enough. Mozilla has a js template language based on django too: https://github.com/mozilla/playdoh
IE6? wow I hope you tripled your rate there.
This is great! keep it up.
You can use Titanium if you want to build your app with JavaScript, but note that this isn't the same thing as "turning a website into an app", it runs JS-code through a runtime and allows you to use native components via "bridges". If you really want to use a "website to app" solution I think Phonegap is still the most popular. I wouldn't use it though. HTML5 has some offline-support that you could search for instead.
Everything you need: http://jstherightway.org/
No, there's no reason not to use JS. Check out some of the resources below: [Cordova](http://cordova.apache.org/) [PhoneGap](http://phonegap.com/) [Geolocation](http://plugins.cordova.io/#/package/org.apache.cordova.geolocation) [Ionic](http://ionicframework.com/) I was iffy on Ionic when I first started playing around with it, but after a day of building something in it, I don't know if I'll go any other way for my future hybrid applications. You should be familiar with Angular if you're going to check this out. You'll have to do some digging for log in management or write your own. As far as open source ones go, I don't know if there's any that allow for permanent log in. All of the ones I found had tokens that expire after x hours/days. That being said, I used [Quickblox](http://quickblox.com/) on my last project and it works okay. You should also know it isn't as simple as "turn my website into an app." 
Is there any way to scope the handlers to a specific element (e.g. only call the handler when a specific element [or any of its children] has focus)?
"Javascript, the good parts" by doug crockford is a concise and clear summary of the language, for programmers coming from c++ or java. It was really helpful for me after a few days of playing and being confused.
http://www.reddit.com/r/LearnJavascript u will get all ans from this .. link
Try [IWC](https://github.com/slimjack/IWC). It provides cross-window locks which can be used to synchronize access to common (for multiple windows) resources like client-server connection.
Build two apps.
This...this is really helpful -__-
I just got done building a large JS based project (HBO GO for Xbox One). Here's what we found: * JS performance is pretty good on a laptop, but on mobile devices you need to work around it being slower than C++, including issues with the garbage collector. * While JS itself is pretty good, HTML is just plain slow. Something that is trival to achieve with C++/OpenGL is either impossible with HTML or requires a much higher end machine. For example if you want to do a lot of animations on a mobile device (you will experience pain/disappointment) * Similarly the feature set of HTML based apps is limiting vs. native apps. For example, access to DRM'ed video, advanced animations (particularly those based off scroll offsets), and advanced graphics (like blurs, etc) are either too slow with HTML to be practical on a phone or not exposed to the web platform. * Older OS's and devices will struggle with JS perf. Pre-iOS 7 for example runs JS quite slowly. If you only care about the latest devices/os'es, this might not be an issue. In summary, depending on your application, it might be a good idea, or it might be a huge pain. The ubiquity and ease of JS is appealing, but it's not all roses.
I did an app that had Facebook login which required 500kb of JavaScript, and then I was required to use some other libraries on that same page which weighed 2.5MB, so I wanted to isolate those from the rest of the app (which was an SPA).
Perfect, thanks!
Have you tried http://famo.us/ ? I've only used Ionic, and understand the limitations you've mentioned above. I wonder if Famous would fix any of them...
No, because you could create many instances of `Receita`. A singleton pattern allows only one instance of an object. var getBlahInstance = (function(){ "use strict"; function Blah () { this.x = true; } var blah; return function getBlahInstance () { if (!blah) blah = new Blah(); return blah; }; })(); var blah1 = getBlahInstance(); var blah2 = getBlahInstance(); // blah1 === blah2 (they are the same instance) I guess this is something like a Singleton. I think Singletons are even more stupid in JavaScript than they are in languages they make sense in, like PHP. I'd say: avoid them.
I love this! Beautiful work
Beautiful animations! 
Ah, good to know that I'm not the only one. Good idea on the JS, that might just be a requirement no matter what. It seems *sound* as far as regular business practices but this is an app targeting old-school enterprise businesses that are usually "locked-in" to oblivion.
Thanks for letting me know! :) I guess it's a moot point since I'll most likely use Node anyways.
Oh yeah sorry forgot to mention that someone else is going to do that part of the presentation 
i think it might be a UX thing - users interacting with a lightbox-style UI will expect hitting 'back' to take them to the index of the gallery rather than the last visited gallery member.
Ah I gotcha.
Hi /u/justintevya, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
What does this break exactly? It's not spam or advertising, just somebody showing off his latest js project. Seen much worse content get through on this sub. 
This is the relevant guideline: &gt; * If you'd like to show off your latest project, then that's great! We love seeing what fellow redditors can come up with. However, the same posting rules apply: it must relate to JavaScript. For example, this could be a link to the source, or maybe an overview of your architectural decisions, a code review request, etc.; you can even do so in the comments if the site itself doesn't meet the posting criteria. NOTE: The fact that a site was made with JavaScript does not automatically make it eligible to be posted to /r/javascript, incluidng games. If we allow any site that uses JS to be posted to /r/javascript, then we'd soon be indistinguishable from /r/WebGames, /r/InternetIsBeautiful, etc. Instead, we aim to foster discussions around the source code, and/or the development processes and practices used to create the project. And here's a [related comment that I made yesterday](http://www.reddit.com/r/javascript/comments/2rwn91/gorescript_fullfledged_js_doomlike_firstperson/cnk4pjs) regarding these types of posts.
* Think of something to build * Build it.
A very relevant question to ask! **Is anyone currently working on a similar system? ie. a system that has to support legacy systems but needs to be an SPA on modern browsers** I'm managing several similar projects. **What were your stack decisions as far as front-end and back-end? What would you change now that the app is built?** I've built with Angular before, but ran into compatibility issues with people who cannot choose their browsers. So I started to figure out how to do it with jQuery. The first difficult part was finding routing - I now use Crossroads for this. Using Crossroads I created this simple Model-View-Controller logic, where routes fire views, which fire controllers. I made the authentication to rely on Facebook SDK and wrote some little helpers for it- an asynchronous call to find out if the user is logged in. Since a lot of what I do has to do with showing and hiding things I wrote functions in() and out() that show and hide things and reply on Animate.CSS animations. For example you can do in('fadeInLeft'); CSS Animations is what you can use for *some sugar*. The most exciting thing I'm trying out is the way elements can be accessed. This is how I used to do it: $("#navigation").show(); Now I do: navigation.show() Since I used the same patterns in 3-4 different project I created a library for this. It's a really young idea, but should not cause you any trouble, since it's dependent on the latest version of jQuery 1, so it is with IE 6. Here's the code: [https://github.com/jayJs/jay](https://github.com/jayJs/jay) It's also a bower component: bower install jay As for back-end decisions I'm relaying on REST API so it's abstracted. There is a boilerplate for Node available: [https://github.com/jayJs/node-jay](https://github.com/jayJs/node-jay) All feedback is highly appreciated. All Github Issues will be dealt with. 
Why even type Javascript when you can just `011100101100010010110101001001..`? This is definitely an area where a lib that helps with abstraction is needed.
Ever heard of package managers?
Relevant username.
haha - I do describe it as &gt; *an amorphous cuddle puddle of tasks, where there are no strict boundaries between their composition or configuration.* If you decide to look at source, most of my modifications are in task.js and options.js - the rest is azer's work. He's like a process piping genius. I did refactor the codebase a little in other places where I felt like another module does the same thing (npm-execspawn, globby), but all the process management is azer. If you haven't checked out his profile, I'd highly recommend reading his tiny [javascript-guide](https://github.com/azer/javascript-guide)
Would it pass acceptable guidelines if they posted CodePens instead?
Yup! The source doesn't necessarily have to be in a repo, it just has to be easily viewable (i.e. not having to dig around with browser tools and unminified).
I'd recommend reading through Javascript, the Good Parts (http://shop.oreilly.com/product/9780596517748.do). If you're an experienced programmer it's a quick easy read, and gives you lots of advice about what parts of the language to actually use and what to avoid.
I've mentioned KOJs, I've even worked with for some time; however, how is the community these days? It feels like the framework is dying out, but I could be *dead* wrong. Thoughts?
Install Firebug extension in Firefox. Then you can type in the console and learn javascript interactively and modify test and see whats happen. You can also inject javascript to modify the web page to the way you want. The jsconsole has also auto completion, what makes your life easier. For example: If you type in the javascript console: document.body.style.backgroundColor="red"; console.log("Hello world javascript") console.dir(document.script) alert("Hello world javascript") You will change the page color to red ( in your browser only). Another useful trick that I have learned is: Create a directory: javascript/ index.html codejavascript.js Then you enter the directory in the shell or create batscript( windows) and type: cd javascript python -m SimpleHTTPServer It will create a small web server in the port 8080, so you can enter in the browser: http://localhost:8080/index.html and use the javascript console to debug and test your code. I also found useful the functional programming approach in the library underscore.js I would also add that the Browser Javascript has small differences in each browser (specially old Internet Explorers 6.0, 7.0 that are still used in many corporations) and that Nodejs is only for server and it lacks DOM manipulation features. 
It was a while ago. I believe it was Adobe InDesign CS6.
I'm still in the research phase so I'm hoping that I'll get better data on this but it's basically an app for a bunch of old-school enterprise businesses that still operate on whatever OS and browser they got when they decided to "adopt the internet". But then, they bought a bunch of iPads.
Thanks. I appreciate it.
Looks fairly cool, I wouldnt use it in production yet just since its new and as the title says its minimalistic (ie, not got some features I would like to see in a server). Whats up with the random spike in response time for both express and quark in the performance section?
Why do you have a while loop that updates the currentScore? And why do you declare it to ~~9~~ 0 and the on Start set it to -1? What are you trying to do here? 
I think it'd be good for labels to always face camera and not rotate, like in this example http://stemkoski.github.io/Three.js/Sprite-Text-Labels.html 
You don't need a Processor node. You can just use `requestAnimationFrame()` and pull the frequency data from the analyzer inside that loop. It would also probably be easier/faster to paint on a `&lt;canvas&gt;` than manipulating a bunch of DOM nodes.
I am very new to this, so I have a score and it is supposed to add 1 point every second. So the -1 is there because at first the score would start with 1 point. The -1 made it start at 0. I just want the currentScore to go up by one every second starting at 0.
It's still a pretty new library so there definitely issues to be worked out. Not to put you on the spot but if you have any suggestions about specific problems, they would be greatly appreciated. 
I really like the footer on this site. edit: do I get a prize http://imgur.com/kxBRbTf
That's helpful feedback - I just added the labels but I'll try to incorporate the camera orientation into a subsequent release. 
Javascript: The Good Parts as others have said. Will clarify all the weird little tidbits about js you might be confused about if you're coming from another language. Then read Programming Javascript Applications, which is imo the best book on javascript i've read (other than The Good Parts of course). Very opinionated, covers everything you might need to think about when building a javascript application. Also goes into more depth on prototypical inheritance and why you should embrace it than any other book i've read. Realistically, you should just take projects you've already done and convert them over to javascript. It's the fastest way to learn.
Knockout development is active on GitHub and [new releases are relatively frequent](https://github.com/knockout/knockout/releases). It's nothing groundbreaking, but the project is moving forward. More features, improved performance, and prettier syntax (e.g. no more ko.utils.unwrapObservable all over the place!). Read more on [this blog](http://www.knockmeout.net/) or [this blog](http://blog.stevensanderson.com/). It's definitely not the most popular library in the world, but it never was. I still use it for [this project](http://basketball-gm.com/) and don't have any serious complaints.
This is a pretty terrible example, the two serve vastly different purposes.
Great job! Reminds me of [Slim framework](http://www.slimframework.com/).
any ie short of ie9 can kick rocks.
ps just came across this which echoes some of the things I said http://qr.ae/6aLBo
So how do I install "angular-bootstrap" from the command line via npm? I get a 404.
If this is for an enterprise than it's even crazier. What OS are they running? You can't run IE6 on versions of Windows that aren't end-of-lifed. Businesses shouldn't be running software that old for a reason. This is an interesting exercise, but I would turn down such work for sure. You're only thinking about what difficulties there have been in supporting IE6 for the last few years. You should be thinking about what difficulties there will be in supporting IE6 over the *next* few years. Who is going to drop support that currently has it? Will you be okay not taking new drops of those libraries ever again? Lastly, anyone imposing such requirements on a project ("make it modern and fancy for iPads! But it has to work on IE6!") will surely be a horrible client not worth any amount of money.
Oh cool. Well `(.*?)(.*)` is to match and capture remaining characters in a way that maintains a uniform structure of the array returned by `String.prototype.match`. Basically, I wanted the array returned by the call to `match` to return an array where every other element is the captured element. This uniformity makes it easier for authors to write transforms on the list of characters. An example of it is [here](https://github.com/zeusdeux/subsequence-search/blob/master/src/transforms/highlight.js#L23). Every even index is what needs to be wrapped in a `span` tag and be highlighted. If `(.*?)` wasn't there before the last `(.*)` then that would leave a special case that every transform author would have to handle in his/her transform. Adding the `(.*?)` gets rid of that case completely at virtually no cost as it's non-greedy and when coupled with `(.*)$` actually just stands for matching `""`. Hope that helps.
`var score = 0; setInteval(function(){ score++ }, 1000);`
This was an experimentation with chromes DOM implementation and runs at 60fps on my 2 year old MacBook Air. Google really have their shit together with blink. But yes I agree if you are animating more objects, but I mention that in the article. Also re the scriptProcessor, script processors run way more often than the browser paints.
would have been cool if the snow didn't melt. i left it going for an hour hoping i'd have a big pile of snow.
Hmm, so in order to add something in plot you need to add values into each axis separetly? What if you need sort those values? I think that you should use objects there: var values = [ {x:1,y:1,z:1}, .. ];
You haven't demonstrated that the variable type has changed. For all you know, the numbers could be stored as strings that just look like numbers. Use `typeof` to output the variable's type.
does browserify solve the cyclic dependency problem that requirejs has? a requires b -&gt; b requires a. This would choke requirejs.
This idea a million times over. Look into a technique called [cutting the mustard](http://responsivenews.co.uk/post/18948466399/cutting-the-mustard) where you develop a barebones, no-frills core system that (even without media queries) will work. You then feature detect core pieces of functionality like classList or matchMedia and if your browser ticks all the boxes it initialises the all singing all dancing experience... you can also polyfill using something like yepnope to help older but not-so-shit browsers keep up. Progressive enhancement at it's finest. You can then, in the future, as you develop, change the requirements that are needed to 'cut the mustard' and you will still have a site that's usable as far back as your original specification. Your point of argument is that people are there for the content, and if you can access that you don't need rounded corners or drop shadows to see them.
No, no, it's like i said, without wanting to be offensive, it's awesome, but it's not my thing
Web design trends truly *are* cyclical. All jokes aside, this is cool. :)
I could be wrong, but I believe that's because the entire file is read as a string and then `eval`'d. An easy way to test this would be to include `/* comments */` somewhere in the code, and if you get a JSON failure then you know that's not the case, otherwise if it accepts it as-is, then you know it's being passed to `eval`.
Neat work! http://codepen.io/anon/pen/ZYLZMX I forked your pen so you can "blow" the snow around with your mouse :P (It's totally insane and defies the laws of physics so forgive me). Your code was really neat.Maybe this should be more of a thing where we just play with each others little experiments. I have a few ideas on how to make the snow pile up , lemme see :P Thanks for the fun.
I'll have to let everyone know the exact stats when I know them. I'll definitely push for more modern browsers so that I don't have to deal with developing two apps but I have to, I'll deal with it, with the expectation that it'll take twice as long. Regardless of all that, I'll be working for a client targetting these businesses so not for the businesses themselves. I'll definitely have to have a discussion with them about it; however, before I did that, I wanted to see what Reddit would say. 
http://es-discourse.com/t/why-typeof-is-no-longer-safe/15
Is the `let` hoisting thing really a problem? Is there any advantage to writing code this way? (function() { "use strict"; console.log(x); let x = 1; }()) It seems weird to me to declare a variable after you use it. Or is there some benefit I'm not aware of?
Nice work! I'm a big fan of isomorphic apps. They really are the best of both worlds and exemplify the power of thinking functionally and the relationship between state and environment.
The programmer solves circular dependencies!
&gt; Also re the scriptProcessor, script processors run way more often than the browser paints. Right, so that's wasted CPU.
[**@thejameskyle**](https://twitter.com/thejameskyle): &gt;[2015-01-03 20:24:36 UTC](https://twitter.com/thejameskyle/status/551474226708766720) &gt;[#6to5](https://twitter.com/search?q=%236to5) \+ [#esnext](https://twitter.com/search?q=%23esnext) I'm looking forward to our future together! Thanks guys [@sebmck](https://twitter.com/sebmck) [@stefanpenner](https://twitter.com/stefanpenner) [@eventualbuddha](https://twitter.com/eventualbuddha) @Rich\_Harris ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/2s5v2c%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Saw this in a couple spots on twitter. Thought this was interesting as I use 6to5 and I wonder what esnext has to add.
You're correct, this is an idiotic complaint. Compiler var hoisting is itself the problem, let's not spread it to let.
That's exactly what I'm thinking and I would definitely want to see and hear more about what are the real applications for isomorphism in web development. Thanks for your comment! 
Thank you for the feedback. I think there's a reasonable case for both conventions. Not using objects does sacrifice organization but in many cases allows for plot creation with less preprocessing of data (this is also the convention used in R, which influenced my decision here). 
Yeah I'm confused by people pointing this out, because wasn't this the whole reason for introducing "let"? To fix "var" getting hoisted to places it logically shouldn't be. afaik this is literally intended behavior.
This is like a Michael Bay version of D3.js
Let me know if you have any questions/comments :)
Well there is, when you're very uncertain about a variable, but then I can't think of a case where the next step would be let'ing it below...
Nice work! Too optimize the framerate, change the code to draw images instead of arcs: [http://codepen.io/anon/pen/NPdmeR](http://codepen.io/anon/pen/NPdmeR?editors=001)
I don't think your backend will matter much, as you'll just be outputting JSON data in any case. Rails is fine for that, but so is just about everything else you might use on the backend. As for Angular vs. Backbone, my personal preference is Backbone. Angular has a little bit __too__ much going on, in my opinion. There's a significant problem of having to dive deep into the internals of just about anything as soon as you get some kind of unexpected behavior. Its not very transparent. Backbone is more minimalist, in a good way. I find it to be easier to work with and debug when something weird happens. There's also the separate (though still important) problem of ongoing maintenance. Backbone seems to be on a stable incremental development track. Angular recently announced a huge backward compatibility breaking version change between 1.x and 2.0. Whatever version of Angular (1.3 I think?) you start working with today will not be officially supported for much longer. you'll either be forced to rewrite it using Angular 2.0 or to maintain it as legacy software without official support.
Thanks for the above. I have been trying to start with Angular and it does seem a lot of things to begin with. Today I saw https://www.youtube.com/watch?v=QFYuGUG46y0 and the ease of Backbone is making me going the way you recommend.
Thank you for your answer! This is exactly what I was worried about. So if you think e.g. of a TV guide, with animations like opening and closing a side menu; do you think one would already notice performance issues on relevant older devices? I do not care about the very low end devices with mostly "non-paying customers", but if I were to kick out 5% or more of the paying customers by choosing JS, this would be an issue. If the performance issues matter, what alternatives to JavaScript are there? What would be your preferred cross platform framework/language or would you recommend writing native code?
I just took a look at it. Quick question, for the ``` renderIn(elem) ``` Expects an ID name without `#`? 
Yeah, I took that design decision from Leaflet http://leafletjs.com/reference.html#map-usage
Awesome, nice idea! The first game I ever wrote in Javascript was a side-scroller about penguins too!
What makes you say Knockout isn't very robust? I've never had any bugs using it at all. If you mean it doesn't provide much *scaffolding*, then my advice would be that monolithic MVC isn't the only way to build complex web applications. For my own recent major project, my design was simply to use knockout for individual page fragments, and have them talk over an event bus. This is kind of how Flux/React and a lot of the common Android frameworks work anyway.
I'm not sure, but I think at times it could make sense. So, one example might be: function Example() { console.log(x); } Example.prototype.name = function() { return "Foo"; } let x = Example.prototype.name(); let obj = new Example(); Or something. Contrived example, but you get the idea.
This is pretty fun. It reminds me of the helicopter game.
Just a quick thing that confused me on first couple attempts, as I didn't read the bottom instructions at first: there's no animation/event/text in game showing or saying why you failed/died. Obviously an animation would be great, but even a simple text dialog would help. Keep up the good work!
It's not that there were bugs but when you are building an entire web application you do need more of the components that Angular offers. Personally I love Knockout but after I used Angular a bit I looked back at my KO code and said, oh this could be done in 2-3 times less code. Not only that but I had to bring in several other libraries to get the full application built. If you can suggest a client-side stack I'd personally be interested because I agree that having everything bundled is a long term disadvantage if you ever want to change one component.
Hey guys, just posted the official write up: http://6to5.org/blog/2015/01/12/6to5-esnext/
Good fun but a little more lead up into the level would be nice.
What part of chapter 4 were you having trouble with exactly? Is it when he starts talking about correlation? Or are his explanations of methods and objects giving you trouble? 
Turn this inot a mobile game and you've got something. Maybe adding a scoring system and better graphics.
I've heard people argue that you should only use let going forward, but I'm still not totally convinced. I would say, if you don't use let, you should be aware of how variable hoisting works (including what does and doesn't count as scope and in what order things get hoisted) in javascript.
Sounds like this is going to be like `==` vs `===`, meaning that there is practically no reason to ever use `==` because `===` has more specificity so the results are more predictable.
6to5 came out of nowhere and supports more stuff than Traceur. Feel kinda bad for the Traceur people who put up such a good showing early on, just to be trampled and forgotten. I've never heard of esnext and have no idea how it will improve 6to5. From the blog post: &gt; The esnext team will start work on 6to5 bringing their skillset and experience to make it faster and more spec-compliant. I don't know what this means, exactly. Guess the 6to5 team just needed more hands.
If you can use it, then by all means you should. But most people can't, because too few browsers support it without having to enable some flag or explicitly mark a script block as JS 1.7. But if you are using a transpiler or you know that your target systems all support it, then there's no reason to use `var`. If you did use `var` when there are no blocks and then later you edit the code to have a block, you would have to remember to change `var` to `let` to get the semantics you were expecting, and that sounds like a terrible source of bugs. 
I'm not sure what you're asking exactly. RequireJS works, but its configuration is seriously ~~insane~~ arcane. I'm glad I left it behind me and turned to browserify. I know it's a lot of work, but I'm absolutely positive that you'll be happier with browserify in the long run. Alternatively you could check out [SystemJS](https://github.com/systemjs/systemjs) which can work with CommonJS, AMD and ES6 modules.
I wished I was able to but in a company of the size I work for a single developer hardly changes anything.
Consider me a newbie for this one: can't this not be done with sockets?
~~48 points. I sorta suck~~ 135 I don't suck anymore.
Nice game. Simple mechanics are always good
Well yes, you actually need socket.io to run this library. What it is is a data synchronization library. You create a variable, and it will synchronize it, whereas sockets only handles messaging.
The explanations and his examples around the correlation part. I usually try not to move on from a part until I understand what is going on. Turns out the exercises are easier to understand and work around than that damn correlation section.
This is pretty cool. A nice, simple concept that can still be very challenging. It's possible to, early on, get a tile set that is so short that by the time the color changes to indicate control, the penguin is right about to fall off, giving the game sudden spikes of difficulty, if the user is unlucky. Conversely, it's possible to get stupidly easy sets of tiles for most of the game. The game kind of throws the player to the winds of luck as much as or more than it tests the player's abilities. If the tile set is controllable before it changes color visually, then it needs to change color in the exact frame where control switches, otherwise the player might be waiting for nothing. Additionally, you mention that you need to keep up with the increasing pace. I didn't notice a speed difference because I didn't get very far due to the issue above, but I'm riding on the assumption that the penguin speeds up as time goes on. With that in mind, here's my suggestion for difficulty scaling over time: There are a few factors that need to be considered as to what can contribute to the difficulty of the game: * the length of each tile set * the height difference of the next tile set * how fast the penguin is moving Thus, your generator should: * determine a difficulty level based on the duration of the run * pick a random height difference for the next tile to generate based on current difficulty * use an algorithm that will calculate a minimum tile length for a given height diff when moving at speed X (this minimum should target the upper limits of human ability) * adjust the tile length based on difficulty (where the minimum tile length is the most difficult, and anything above that is progressively easier.) The game starts with really long tile sets and small height differences, stuff anybody could do with minimal effort. As time goes on, the penguin starts moving faster, the tile lengths get shorter, and the height differences start becoming larger, more frequently. This gives the player time to get comfortable with timing and controls, and ramps up the difficulty as quickly as you program the pace of the game to be. While there's some charm in simple-but-face-meltingly-frustrating games, I don't feel that this one would benefit from that level of challenge right out of the gate.
I really plan on shouting you out once I get my stuff together. Thanks for being so motivating stranger. I'll try to think of a project real soon to work on! 
I think the instructions could be a little bigger or better placed, but interesting concept and good gameplay once I figured out how it worked. Everything ran smoothly. Overall, I liked it.
I can't believe you made this in 6 weeks, that's awesome
I like good old backbone for it's simplicity.
Any details about how you built it?
we do. it's just the parser i guess.
Comprehensions are out for ES6.
For every post from this domain there would be another one 
[Contributor](https://github.com/thejameskyle) to 6to5 here. &gt; Feel kinda bad for the Traceur people who put up such a good showing early on, just to be trampled and forgotten. Traceur has been around for about 4 years and has gone through a bunch of iterations. I believe it never resonated with developers because of their approach to transpiling and the lack of legwork to make it easy to use across toolsets That being said I have a lot of respect for the devs working on Traceur. &gt; I don't know what this means, exactly. Guess the 6to5 team just needed more hands. Absolutely! The ES6 spec is a massive one, and it's going to take a lot more than 6to5 in order to get it adopted by everyone. There are whole toolchains that need to be updated (Linters, Code Coverage, Text Editors, Syntax Highlighters, etc). Which then need to continue to do so for future versions of JavaScript (ES7+). The good news is that there is a lot of momentum. Everyone is on board with making it happen. We merged esnext and 6to5 because it just seemed silly to try and compete with separate yet very similar projects. 
He needs to switch the order of the squirrel and the pizza in the drawing. I think that's one step he could take to make the example more clear. Basically, SP (in the S column, 1 means he turned into a squirrel, in the P column, 1 means he had pizza) can be represented in binary, the possibilities being 00, 01, 10, 11. This is also 0, 1, 2, 3 in decimal notation. When he has an array table = [76, 9, 4, 1] : * The number in the 0th spot is how many times 00 occurs (00 in binary = 0 in decimal). 00 meaning !Squirrel,!Pizza. * The number in the 1st spot is how many times 01 occurs (01 in binary = 1 in decimal). 01 meaning !Squirrel,Pizza * The number in the 2nd spot is how many times 10 occurs (0b10 = 2). 10 meaning Squirrel,!Pizza * The number in the 3rd spot is how many times 11 occurs (0b11 = 1). 11 meaning Squirrel,Pizza So we take the data from his logs and plug it into the phi equation. The nXX notation is for nSP where n01 means !Squirrel,Pizza, n10 means Squirrel,!Pizza and so on. n00 corresponds to the 0th index of the array, n01 corresponds to the 1st index, n10 the 2nd, n11 the third (remember 0b00 = 0, 0b01 = 1, 0b10 = 2, 0b11 = 1) nX1 is the sum of all the times he had pizza, nX0 would be the sum of all the times he didn't have pizza, n1X would be the sum of times he became a squirrel, n0X would be the sum of times he did not become a squirrel. The X just means we don't care wether it's 0 or 1. So for nSP = nX1, we're just considering ALL the times he had pizza. His function simply returns the value calculated from plugging in the right values to the phi equation. 
I took a look at the code. It looks pretty good. Could use a few more comments. Don't go crazy, but one saying what each method does is usually good. I recommend breaking up longer lines like this: this.context.drawImage(this.imageObj, objProps.spriteX, objProps.spriteY, Math.round(objProps.width * partialFactor), objProps.height, x, y, Math.round(objProps.width * partialFactor), objProps.height); Something like this would be more readable IMHO: var width = Math.round(objProps.width * partialFactor), height = objProps.height; this.context.drawImage(this.imageObj, objProps.spriteX, objProps.spriteY, width, height, x, y, width, height); Other than that, just minor things. Replace `noPush !== true` with `!noPush`. I recommend brackets around if statements and loops, even if there's just one line in the block (see Apple's "goto fail" bug for an example of what can go wrong).
I just need the practice and I'm a learn by doing kind of guy
I understand that bit, and just stared back and forth from the phi equation and his function. But what I still can't comprehend properly is the tableFor function. I would fiddle with the numbers but I can't comprehend how the if statements and table[index] pop out the array, [76,9,4,1] with the Journal. That is what spawned my whole post about throwing in the towel. function hasEvent(event, entry) { return entry.events.indexOf(event) != -1; } function tableFor(event, journal) { var table = [0, 0, 0, 0]; for (var i = 0; i &lt; journal.length; i++) { var entry = journal[i], index = 0; if (hasEvent(event, entry)) index += 1; if (entry.squirrel) index += 2; table[index] += 1; } return table; } console.log(tableFor("pizza", JOURNAL)); // → [76, 9, 4, 1]
Please move the penguin a bit to the right (padding-left). It hurts my eyes having to focus at the corner of the window. Just maybe 1/4th.
Neat, next I would work on scaling the difficulty to get people into the game. Start out making it very easy and very hard to lose. They should only have to go up/down 1 two or three times before they have to go up/down 2. Also give extra room for users to play with the controls to figure things out. Only after all of this toss them to the randomly generated bits. As others said not knowing what to do isn't fun. Maybe show an up/down arrows for the first 3 or 4 or something until the user gets it.
I just stumbled upon this game: https://play.google.com/store/apps/details?id=air.net.mindresearch.stmath Only similar in that they involve penguin-walking.
hasEvent(pizza, entry) returns 1 if pizza occurs in the entry. So, if Pizza occurs, you're currently working at the 1st index (index += 1) [00, **01**, 10, 11] and 01 means !Squirrel,Pizza. So if Squirrel doesn't occur, you stay at 1st index and that value gets incremented. Then you check if Squirrel occured, if it does, then you add 2 to 1 and are moved from 1st index to the 3rd index [00, 01, 10, **11**] and 11 means Squirrel,Pizza, so you increment the value in that index. If no pizza, but squirrel, you get index = 2, which is [00, 01, **10**, 11] and 10 means Squirrel,!Pizza, so you increment the value in that index. If no pizza no squirrel, index remains 0 so you increment the value in the 0th index.
&gt; I disagree with this only because it's inconsistent and it is possible to do everything without var. Just to play devil's advocate, it is also possible to do everything without `let`.
Well, shit. [This guy](https://www.npmjs.com/~leon) published version 0.12 just nineteen hours ago, so that's not a good example. But, anyways, back to the point. npm allows you to unpublish with the `npm unpublish` command, so I don't get what you're trying to convey. The publisher *can* unpublish and you *won't* be able to just make it work, despite your argument otherwise. If you tried to re-publish the same module, you'd have to submit a new version number if you unpublished it.
Damn, weird timing indeed. You're right. IMHO they should change this to align with the recent changes to `--force publish`, so that versions cannot be removed from the registry. On the upside, at least the unpublished versions are tombstoned so they cannot be overwritten..
Well... you *could* try to do that with some regex... http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454 Or, have you considered using a markdown library like reddit uses? 
forgot to include this, but we're using jquery/backbone/handlebars. so utilizing any of the 3 (or any combo) would be ideal. I did discover that you can simply do a jQuery.html(markup).text() to get all HTML markup to be stripped out
Or if you want to escape the html, do this: $('&lt;span&gt;').text(markup).html(); 
I don't see a reason to not use both as needed. Var has been more than fine, function scope is fine. They are different ways to denote scope to the developer, not a one size fits all situation.
what about webpack?
Preview here: http://cl.ly/image/3M1b0n16092V
Makes sense, there's no point in two teams doing nearly identical work twice. 
This is pretty interesting. I assume you need ES6 feature enabled on the server side?
Looks like it's the same guy. He got pinged for it here: http://www.reddit.com/r/javascript/comments/2rnh81/this_guy_is_teaching_html5_games_on_youtube/
Damn 6to5 came out of fucking nowhere and took over. This is a good lesson to us all to stop abandoning our side projects and to see them through.
https://github.com/derbyjs/racer
we didn't really intend for it. we just found we didn't organize the code well....as soon as we hit this problem.
too annoying having to hit space
Fix it bruh
How exactly is the first index's value changing? I see index = 0; but that's just assigning it's value. Where does the value of [**00**, 01, 10, 11] come from? I just see it as 76. Thanks for your help tho. This is so valuable to me.
Cool , something new, love it!
MDN gives a good doc on Event.target for you to refer to in the future: https://developer.mozilla.org/en-US/docs/Web/API/Event.target The 'compatibility notes' will be of interest to you, if you need this to support IE8. Now that most sites aren't supporting IE8, plenty of people are phasing out their heavy jQuery reliance, since that's half of why it used to be so popular.
Sorry, the binary bits threw me a wee bit off I suppose. But I understand what you meant there now. Also where in the world does the 0 index value get added? That's the part I couldn't understand in particular with the function. I was changing values but had no idea where in the function the 0th index was being affected. I was able to deduce how the number got there by seeing the total number of entries in the JOURNAL and seeing which !Squirrel,!Pizza. But I couldnt find it in the code. I guess I was posing my misunderstanding wrong the whole time. But that's what gave me a pain.
&gt;Everytime you iterate through the for loop and neither pizza nor squirrel occur (!S!P), table[index=0] gets incremented. Since index is set to 0 at the beginning of each iteration O SHIT. Really? But I thought the if statements changed that? That's why I always ruled it out. Edit: OMG IT CLICKED IN MY HEAD. IDK WHY I DIDNT SEE THIS SIMPLE ~~BULLSHIT~~ BEFORE. The loop just adds and ofc, the if statements only fire when the requirements are filled. That's why its the total entries minus Pizza, Squirrel, !pizza, squirrel and other variations. GOODNESS! Why couldnt I comprehend that before T.T Thank you so much for helping me realize the concept for that part. Idk why it was so hard for me to comprehend when it was a pretty straight forward line of code.
we ended up referencing global app object to get our dependencies in, completely circumventing requirejs.
good question. i keep hearing about "isomorphic"
Web app, basically to run on desktops. I think index cards are particularly useful for providing perspective over things. That's where their edge is over digital notes, sheet of paper. They would do that much better on a regular desktop screen. Great! I wanted to start learning those. Which would you recommend the first?
Who am I gonna ask? Google?
I did not look at Browserify in detail but bundling up all the script files is definitely not possible. That would result in a 20 MB script the client has to load when accessing the application. That is the reason why we bundle modules separately and load them dynamically when required.
I just found [this gist](https://gist.github.com/dak0rn/d31f90d21268a179ac31) describing how to use an existing require.js configuration with Gulp. It's a bit *quick and dirty* but it works!
is there an IRC channel that you know of?
how did you start it? what hosting do you use? I have a wordpress site that I hate and pay for, but I'd like something that I could work on and with.
I havent irc'd in years and dont know of any off hand. I know I heard of one or two before, but that was ages ago and cant remember where.
sad day indeed for node.
ok, thanks. Do you know if its possible for the popup or the contentscript to set the badge text? I cannot seem to figure this out. It only seems background.js (which i'm not really using) can set badgetext
This is actually very cool. Great concept and fun to play. Also I looked over the code and it's great! Maybe some of the approaches are a little atypical but it's easy to read so I don't care. 1000x better than clever difficult to decipher code. Well done!
No. You don't get to do that. You don't get to take common sense principles and assign bullshit names like "pattern" to it then tell everyone they need to learn it and then make up another stupid irrelevant term called "anti-pattern." That guy needs to go away.
possible with Node too: https://github.com/yortus/asyncawait (uses node-fibers)
&gt; doesn't scale for larger systems Is that true ?
Why is this guy being downvoted? He's correct - all modern browsers will not run JS (or at least not without prompting the user first) in files served from the file system in this way.
it is only available in a few regions. Try switching region or contact the Lambda team here (https://forums.aws.amazon.com/thread.jspa?messageID=593815&amp;tstart=0#593815) as I see many people got the same issue.
Look into [regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), specifically the `match` function. It does basically what you're looking for, minus the printing.
lolwut is going on here? I see this a lot in /r/javascript and I have no idea why.
Yes, those are the same semantics.
I disagree with the other commenters. I've worked on a handful of pretty large Django projects, and the process of designing a backend is heavily influenced by the approach taken by the frontend. E.g., I worked on a fairly large scale e-commerce website that used pretty basic levels of javascript. In this case, routing, templating and form handling were all done in Python, which was a fairly significant percentage of the loc. These days, the vast majority of that logic is now in the frontend. Most of the Django/Python code I write now is to fix up an API. Models remain virtually unchanged between both cases. But I'd say SPAs have definitely changed the anatomy of the average back end.
Well he does say "I'm bending the rules a bit and will also present some of my favorite lesser known features of these libraries, even if it isn't strictly an anti-pattern not to use them." I would say any kind of inelegant design (such as having multiple code branches share a handler that contains a big switch statement to deal with all the cases) can be considered an anti-pattern, so most of the points in the piece qualify.
Fair enough.
This page has a redirect loop in Chrome on Android.
A nice idea - my main suggestion would be to improve the graphics on the Pengiun, which is low quality compared to the rest of the game's graphics.
&gt; I would rather write _.clone(arr) then arr.slice() Is there an actual benefit to this, or is the author just expressing their aesthetic preference?
I did try to have a uniform color through penguin but there doesn't seem to be an easy way to do it. How can I vectorize the graphic? I would love some help here.
Edited what I said.
This is a great article, nice overview of some of ES6's handy new features. I used to be big into CoffeeScript but switched back to JS, but am now looking forward to doing all my development with ES6. Why not CS? I found CS code to be very pleasant to write, but rather difficult to read, mostly due to the significant whitespace.
I love node. I learned so much about it that I got a couple of job offers when I had no professional experience with it. It's easy to learn, easy to work with and very fast dev times. It also scales reasonably well. However, Node's concurrency model sucks. Simply put, it's single threaded and has to be manually multithreaded at the top level of code. I don't know as much about Go however, I do know it was designed to handle concurrency natively and Go developers may enjoy it more. Secondly, NodeJs is best use for IO limited tasks. (99% websites) multiple language performance tests show that when it comes to those kinds of uses NodeJs and Go are Neck and Neck. However, when it comes to raw scaleable computation Go has been shown to have significantly better performance over Nodejs. This is useful for areas that require a lot of number crunching (Math/engineer) or machine learning. 
I still prefer the cleaner CS syntax (and all the remaining features not present on ES6), and since ES6 has to also be compiled to ES5 anyway, I would rather keep using CS. If I could use ES6 on every browser without compiling to ES5, then I might switch. But in the other hand nowdays you NEED a build process anyway, to concatenate and minify your code at least, so it's not a really big drawback to add another layer to compile CS anyway.
Thank you! Now there's no reason for me to not add it to my build step!
I guess it's nice, but the way Portal did things was that it would teach you a small tidbit and then let you apply the concept to a bigger puzzle.
That's exactly what the answer said. &gt; Drawbacks. You have to be careful about the excessive use of publish/subscribe. If you’ve got hundreds of events it can become very confusing to manage all of them. No one is saying to exclusively use pub/sub though for an application. In the end it always come down to picking the best architecture for what you're trying to accomplish. Simply saying pub-sub doesn't scale well doesn't help because it scales just fine depending on how you utilize it. Pick your patterns that fit your needs, don't blame the pattern just because you misused it.
Often the goal of a good pattern is to prevent people from abusing it in the first place. I agree, pub/sub can be better for decoupling events. I wonder if it has better performance than dom events (since you dont have to deal with bubbling) 
It doesn't do anything for me. Just sits there after the line "Neither should you. Because you can." The mouse changes the screen color, but the keyboard does nothing. I'm on Firefox
you might be interested in my framework, BabelExt - it still needs a little work, but it's a good start for what you want. [website is terrible and needs updating, but here you go](http://babelext.com/)
It's definitely more explicit what you're actually trying to do, imo.
I wonder how much of ES6 was inspired *by* CoffeeScript bringing the sugar from other languages to JavaScript…
I believe CoffeeScript had substantial influence on ES6. Brendan Eich references CoffeeScript frequently. For example: http://brendaneich.com/2011/01/harmony-of-my-dreams/
Yeah, you can definitely see the influence in things like arrow functions, array comprehensions, destructured assignment, etc.
Very true, but the idea that one day you could remove the compilation step for your source is very appealing. A lot of new applications only support evergreen browsers, so it's not unrealistic to think that you could use the latest and greatest ES6/7 features without having to worry about transpiling for older browsers.
Nice example on how it's not a problem to integrate 'alien' views doing raw dom manipulation in an angular app through directives.
Very good article all in all. **But** &gt; Managing this in a callback $('button').on('click', function() { var _this = this; setTimeout(function() { $(_this).addClass('clicked'); // All better }, 1000); }); Every developer with only a little JavaScript experience should know that one simply does not stuff like that because it is unbelievable ugly. &gt; Of course there are many ways to accomplish the same thing. You could use .bind(), .call(), or a number of other options. Choose what works best for each individual situation. Yes, using `bind()` or similar is a possible solution, but this should be definitely more than a side note.
Why not just keep them here? Most npm modules aren't specific to just npm so I don't see why we need to split the community up? 
Why not just use Web Workers or Shared Workers?
I feel like the next level is to go beyond CoffeeScript and into something like [PureScript](http://www.purescript.org/) or [Elm](http://elm-lang.org/).
I am sorry it does not work for you. Unfortunately I can't reproduce this issue. It should be just a static page with no redirects whatsoever (site is served by GitHub Pages infrastructure).
Try Typescript :)
The first makes sense to people who know English, the second to people who know that particular quirk in JavaScript. It's such a tiny case that I don't think it makes a real difference, but as a pattern, yes, I'd much rather use names that make sense.
i don't need to use eval. I can simply append a script tag.
Can we please put some explanation of this in the side bar? It seems like it's every week we get another post about "mastering this", "understanding this", "the this keyword", "a simple explanation of this", etc.
See ToffeeScript and LiveScript.
Its "pure" JavaScript, so we can all use it now, even though its the exact same features from CoffeeScript. People are incapable of thinking for themselves. They just follow authority. You have to compile ES6. I am glad that people are accepting it, but CS , ToffeeScript and LiveScript are still better. "Pure Javascript" is a silly religion for simple minds.
Instructions for stage where you have to jump to line 3 or 4 is unclear. As a non-Vim user, I can't figure it out. I tried typing 4g or :4 etc. And all the cursor does it go to the first letter of the word sometimes. Cool concept though!
Nice. 
Well the game resumed where it left off, but now when I get to the portal it says "Satisfying performance" but doesn't do anything after...is this truly the end of the game? Or did it die because of "resuming" the game?
I'm curious too, although have no plans to do this.
The idea with ES6 being a standard and whatnot, is that eventually you wont have to compile it. Which is kinda nice. I won't argue that CS and other compile-to-JS languages don't provide interesting and/or new features/syntax, something that is impossible with vanilla JS, but I fail to see how it's possible to leap from that to the assertion that (plain|pure|vanilla) JS is for "simple minds". Though if you mean the trend of people gloating about their use of plain JS as if it's some kind higher order or greater accomplishment then I agree.
 url: "/bot/" + "#" + channel + ".json",
I'm a huge fan of promises. Promises FTW!
In general, it feels like switching from rotten pears to rotten apples, while still having to peel off the skin (build step). Fat arrow syntax is the only real difference (assuming the question is about syntax, not features like like proxies, weak maps/sets, generators let, const, etc.)... 
%23 in place of # in the channel variable?
Thanks for explaining the jquery part. Didn't think that was intuitive at all... 
Tried this, didnt work. Just cut off # and everything past
Tried this, didnt work. Just cut off # and everything past
Some people hate just to hate. I'll use whatever tool to get the job done. 
I assume he means the transpiling. Pretty minor if you ask me. 
Ah right, there's a URL encoding issue too - my bad.
Sorry it's not really feasible without a signalling server. It's possible see https://github.com/cjb/serverless-webrtc but very difficult. Recently it was done via nfc: https://github.com/wilsonpage/webrtc You could use a peer.js signalling server on the local network to do the initial handshakes. 
In base 10 (decimal), 1/3 is 0.333333... (the 3 repeats) In base 2 (binary), 1/10 is 0.0001100110011... (the 0011 repeats) Now, I want you to add 0.33... and 0.33... together. You know from fractions that the answer is 2/3, but if you MUST express it as the infinite numbers. What is more, you MUST only use 32 repeats because you run out of room if you use more. You wind up with 0.33333333333333333333333333333333 (rounding down) +0.33333333333333333333333333333333 ---------------------------------------------- 0.66666666666666666666666666666666 But that answer is wrong (and due to rounding the 3 earlier, we don't even have the 0.666...67 part that most people are used to). Now let's add 1/10 and 1/10 in binary (remember, 1 + 1 = 10 in binary) 0.00011001100110011 (once again we round) +0.00011001100110011 ------------------------- 0.00110011001100110 +0.00011001100110011 ------------------------- 0.01101110111011101 With our rounding error this becomes our infamous 0.3000...4. This is exactly the same thing as rounding those 1/3 numbers in decimal.
All numbers in JavaScript are floating point and encoded like this (base 2, mantissa and exponent are integers): mantissa x 2^exponent Thus, fractions of 1 are m/2^d (positive d). That means that 0.5 = 5/10 = 1/2 = 1/2^1 can be represented precisely. Similarly: 0.125 = 125/1000 = 1/8 = 1/2^3. But 0.1 = 1/10 and 0.2 = 1/5 can only be approximated. That’s why adding them is imprecise – the numbers were imprecise even before the addition, but you didn’t see it. The addition made the imprecision large enough that it is visible. Compare: 1/3 cannot be represented via a finite decimal fraction, it is 0.333... (infinitely many threes). A longer, more nicely formatted version of this explanation is here: http://speakingjs.com/es5/ch11.html#rounding_errors
And if you want browser compatibility you need to transpile ES6-&gt;ES5 anyway...
If memory serves, I think Jeremy Ashkenas proposed a few of the features that made it into ES6, or at least worked with Brendan Eich on them. Arrow functions come to mind. 
Nevermind lol, I just looked at peer.js and realized what it was. Please ignore that other stupid comment. Thank you for suggesting peer.js, it looks like it will be a good solution to not being able to use pure peer to peer.
What explanation would you put on the side bar?
Since it doesn't currently remove any "build debt", I'm inclined to not switch for the time being. There are some really compelling features (native promises and common.js support are huge wins), but I'd also wager that CoffeeScript will add compilation support for those features if/when necessary. I'd be more likely to start a brand new project in ES6 rather than converting any existing code into it.
Make sure you are using 4 spaces for indents. Code should be flat so besides better readability in general - but especially in CS - this also makes nested code smells stand out. 
&gt; bind is not a fundamental way to set "this", it's just a function that returns a new function. It does not change the function that it is applied to. This, in my mind, is critical to understanding this: there is no aspect of the function being called that impacts this, only of the way in which it is called. This statement is absolutely incorrect. Bind is the MOST fundamental way to set this. The spec specifically states that if bind has been called, an entirely different internal subroutine is used to call the function (and this routine ALWAYS sets the 'this' to the one set by the .bind() ) Any 'this' provided by any other scope (including .bind(), .call(), and .apply() ) is ignored. In practice, this means that once you call .bind() on a function, you may NEVER change the 'this'. The proof of what I said: [ECMAScript 5.1 8.6.2 table-9](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2) defines [[BoundThis]] internal function property. [ECMAScript 5.1 15.3.4.5](http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4) defines the Function object bind method. Note step 8 where the [[BoundThis]] is set in the bind function. 15.3.4.5.1 (the very next section) describes [[Call]] and step 5 says: &gt; Return the result of calling the [[Call]] internal method of target providing boundThis as the this value and providing args as the arguments. For the record, this is one of the less-known 'features' of JS. A fun bug is where a bound function is passed to another function that then does a .apply() to it. You get a mysterious change of scope if you step through the stack where you look at the 'this' being passed to apply and it's one thing, but the 'this' when you step inside the function is different. The fact that this "failure" is silent makes it even worse. &gt; An article written in 2015 that assumes we're not using 'use strict' is already out of date. And it should probably mention the effect of modules too. [MDN would disagree](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee#A_use_of_arguments.callee_with_no_good_alternative) All that aside, I wasn't too impressed with the actual article. 
I just released a new version, give it a refresh
I don't know of a good one off the top of my head but I'm sure many are out there. Maybe somebody else can recommend one?
Another one?? For Christ's sake.
&gt; I’ll just compile my CoffeeScript and swap out the .coffee for my .js files Has anyone made a human-readable CS -&gt; ES6 compiler yet? One that actually creates code that a human would write?
First off, thank you for the well-referenced reply. However, I still believe it is wrong to say `bind` is "setting" `this`. It is not modifying the original function, but *creating a new callable* (function) that, when called, calls the original function with the previously passed `this` value. The new callable is not a facet of the original function, it just references it. [[BoundThis]] is not mentioned in [the function [[Call]] procedure](http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.1), only in the separate [[Call]] procedure for the result of calling `bind` - which means it's just the native equivalent of storing a value to use as `this` and having a function body that uses it. &gt; MDN would disagree - It doesn't disagree. I said (or meant to say) one should not assume that 'use strict' is never used, not that one should assume that 'use strict' is always used. - It doesn't say anything about the validity of 'use strict', it says there "could be" a bug. - It actually isn't related to 'use strict' at all, because it's an edge case that requires the use of `eval` which isn't available in strict code anyway. - It's wrong, there are alternative solutions to that exact scenario, one of which is written in the bug it links to.
Thanks :)
What specifically are you asking?
Because computers don't use "real" numbers doing simple decimal points. So when you add 0.1 and 0.2 you're really saying "add sort of 0.1 and sort of 0.2 together" which ends up being "kinda 0.3". "Kinda 0.3" is 0.300000000000004 to humans. It's good enough to land space ships and draw the graphics in video games but for perfect numbers you have to use special numbers, which is hard. If you need real decimal points (say for banking) try [fixed point numbers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed).
**grabs popcorn** (And then downloads it to kick the tires)
Hey, did you hear about react.js yet? 
I'll make a tutorial on how to follow reactjs tutorials. dw
Even is ES6 - we need to use this to reference class members. Example codes look nice, but when you have a bunch of members and you working with them a lot in a method, the whole code gets bloated with this. this. this... that's one place place where I love CS's @ sugar
[The law of leaky abstractions](http://www.joelonsoftware.com/Articles/LeakyAbstractions.html) needs to be mentioned in this thread. Others have answered what went wrong; the law is what we can learn from it.
It's more than politics. Node has frozen activity for the past few months: https://github.com/joyent/node/graphs/commit-activity This fork took place to get things moving again. The CHANGELOG for io.js is impressive: https://github.com/iojs/io.js/blob/v1.x/CHANGELOG.md
Wow, I didn't realize Node had stopped development. They still aim to merge those advancements into Node, right?
 4. profit
Not sure if this is a joke comment, but I'll fill in that before it was called JavaScript, Netscape named it LiveScript which I don't exactly know if it is an ancestor of [this LiveScript](http://livescript.net/) but I want a vintage shirt with the original emblazoned on it now.
Promises and execSync, whee! 
If I take off a year or two of web development, I guess I'd just jump on the bandwagon for whatever comes after React. Nothing lost :)
not this? fn DoSomething() { err, data := serviceOne() if err != nil { ... } err, data2 := serviceTwo() if err != nil { ... } err, data3 := serviceThree() if err != nil { ... } ... }
Some day. Hopefully by 2050.
Those graphs seem to be tracking master, whereas all the activity is going on in other branches and elsewhere. E.g. here's 0.12: https://github.com/joyent/node/commits/v0.12
hehe no no, it isn't minified, but the previous coder thought he was super cool in using shorthand everywhere.
Yes. I've used pub / sub for a project that's starting to grow in scope. I can already see keeping track of all the event names will be a nightmare.
Seems to be a solid filter for all unqualified applicants. 
can this coexist with node/npm? i downloaded the tar.gz and see symlinks to node and npm. i want to try this on my dev-machine but i have projects depend on node/npm. is this safe to install without messing up my projects?
https://github.com/iojs/io.js/issues/133 
Are there a lot of tutorials on react? This is the first time I've seen one. Do you think it's worth getting in to, or is angular the way to go?
Almost there. Expand on how you got from 0.0001100110011 to 0.199981689.
Less experienced developers will just play with whatever everyone else seems to use, which is only natural. I'd be more interested in what veterans have to say about it. Personally, my biggest gripe with AngularJS was that when it went wrong; it went wrong **terribly**. We had problems with translations not always loading (only on IE9), and &lt;select&gt;s which would automatically select the &lt;option&gt; after the one that was clicked. Neither were fun to debug and both required massive ugly hacks which give me nightmares to this day.
While I'm more interested in learning the new parts of ECMAScript 6, most jobs going seem to ask for Angular, Backbone, and React. I suspect a *good* dev would learn them all, but I'd rather pick one and be really skilled at that.
I use node for side projects for now. I'm stuck at this - How do I start using this feature when libraries have callback syntax? For example - all mongodb calls follow func(params, callback(err, res)) pattern right. How do I call this using promises or generators? Does the lib need to be re-written entirely? or fully wrapped? 
Word, thanks for the reply. The guide looks interesting, but at the same time it seems my time would probably be better spent on Angular; based on your comment. Just getting into a more serious dev position now so that really helps. Thanks.
You can wrap it to make it work. Or you could use the Q library, which lets you replace your callback function with deferred.makeNodeResolver(). That's how I've been incorporating promises into my projects. https://github.com/kriskowal/q
6to5 transpiles es6 into es5 so it could run on joyent/node and browsers lacking es6 support. This is *native* es6, it will run without needing an extra build step.
Apparently it's not stable yet (what's funny is that the advanced generators feature, on the other hand, is)
Because there's still no correct implementation in V8 ?
That is not good. I can think of about 4 libraries in my current project that need node-gyp. Guess io.js probably won't work for me yet. 
You can use background-position by shifting the background by any offset provided your background represents the current world. Moving the man would be alot easier if you ask me. http://stackoverflow.com/questions/1175557/how-to-shift-a-background-image-with-css I would also look at some js game engines to make things easier! http://html5gameengine.com/
I was wondering this as well. If it hasn't, I'd guess it will eventually. From the look of it it'd be way easier than the standard compile process to ES5.
Ah, excellent point :)
I haven't installed it yet, but `npm` is `npm`. You should probably use the `io` version anyway, because the one that ships with `node` is hella old. As for the `node` symlink, you can either not-use it, or you can just symlink `node` to whichever binary you are using at the time. As for me, I'd probably ignore the `node` symlink and just change my `package.json` to invoke `io.js` on projects I want to use it on.
:( I'm pretty sure `node-sass` requires `node-gyp`.
As a side note - I started /r/iojs a couple of weeks ago and just cross posted this. It's definitely relevant here, but I'm hoping to ramp up the iojs-specific discussion over there as well!
It seems that you pass string values instead of input field references when you call the function. You should correct it to this: checkDivideZero(operator , divnumber, "You cannot divide by 0.")) Where operator and divnumber are references to input field elements. 
your parameters are named 'operator' and 'divnumber', yet when you want to use them you put '.value' next to them, why is that?
You have a return inside an if statement, but outside of a function. Instead of checking the result of checkDivideByZero, just call it on each key event, or after someone presses an operation key. Like this: checkDivideZero("/", "0", "You cannot divide by 0."); function checkDivideZero(operator, divnumber, msg) { if (operator.value === "/" &amp;&amp; divnumber.value === "0"){ alert(msg); return true; } return false; } 
How is this different from `node --harmony`?
In that case, I would suggest renaming the variables the something meaningful in addition to the reformatting you did.
That's actually very untrue; name a well-known tech company and I bet they're starting to migrate to React.
&gt; 1.0.1
to be fair, you don't need a build step for 6to5 inside node - just a require() hook. and obviously native would be faster anyways.
Disclaimer: this isn't my project. I found it while searching the internet.
that's fun ! i'm actually chasing that rabbit with https://github.com/kapouer/raja... though my approach leverages socket.io and cache synchronization, and doesn't impose so much client libs. Interesting to see how approaches differ to this problem.
jshint. came as a simple grunt plugin. also, more lenient than jslint.
To quote [IO.js's ES6 page](https://iojs.org/es6.html): &gt;On joyent/node@0.12.x (V8 3.26), the --harmony runtime flag enabled all completed, staged and in progress ES6 features together, in bulk (with the exception of nonstandard/non-harmonious semantics for typeof which were hidden under --harmony-typeof). This meant that some really buggy or even broken features like proxies were just as readily available for developers as generators, which had very little or even no known-issues. As such, it was best practice to either enable only certain features by using specific runtime harmony feature flags (e.g. --harmony-generators), or simply enable all of them and then use a restricted subset. &gt;With io.js@1.x (V8 3.31+), all that complexity goes away. All harmony features are now logically split into three groups for shipping, staged and in progress feature
jshint is great because it focuses the least on code style, eshint has promise for going in unique directions, jslint is overly strict. My only real gripe is none of these really catch performance issues anymore - it's all about code style. Might as well check a parser is capable of parsing the code, like acorn.js, and pretty print with jsbeautifier.
You can use jQueries `.css()` method to do that: elem.css('border-right-color','#f00'); I have created a [JS Bin example](http://jsbin.com/wowolureni/1/edit?html,js,output) that demonstrates it.
I think out of those, React is probably the best candidate moving forwards. Backbone and Angular are def still going to be around, but I don't know of anyone building new product with BB. The same will probably be said of Angular in a year or so, while React is getting adopted left and right into some very well known companies.
Look at the dockerfile and just use it for yourself - it's literally grabbing iojs and installing it
k 
As far as I know that's the way html borders work. If you have a 1px border it doesn't have the angle where they meet, but other than that it always has the angle. If you only wanted the border on the one side then it would be straight at the top/bottom. Or you could nest some divs with various borders/colors to get what you are looking for.
[Webstorm](https://www.jetbrains.com/webstorm/) has free [for education options](https://www.jetbrains.com/student)
I'm using the built-in gulp.watch. I updated the code to include all necessary requires (gulp, rename plugin).
I know you have solved this but I am interested in why you would want to pass in the error message itself... why wouldn't you declare this at the top of the file? additionally, you may want to do a typeof(divnumber)=="string" check and then attempt to convert it to a number if true.
Variables, control flow and loops, functions, mdn, a hatred for IE, the prototype chain, modular programming, object oriented programming, functional programming. Most of these are optional though I'd say the first four are mandatory.
Scopes
Do not present the hatred for IE. Many corporations still use IE and are limited to only IE. That is why we have work-arounds(in code). Yes - variables, loops, functions are a good looking list. EDIT: Maybe introduce some of the more popular libraries that are almost essential, as in jQuery for DOM manipulation. Adding AJAX to this too. Allows for asynchronous calls.
I'd say start with the basics in the introductory session to get their feet wet; using basic math operators, presenting code well (including comments), understanding and creating confirm and prompt boxes, and understanding data types in JavaScript (numbers, strings and Booleans). Then they can start using console.log and comparison operators, using if/else statements (with comparison operators), debugging, and using the modulo (%) operator. Then they can go onto implementing the substring keyword, practicing using variables, reviewing variables and manipulating numbers and strings, and practicing using variables and if/else statements. The above are the fundamentals of the language and should give them a base of knowledge from which to progress; hopefully this is more or less what you're asking for! (By the way, I'm assuming that the students have no programming experience prior to doing this but if they do then of course they may already know a lot of the above/learn it in a jiffy; it's straightforward stuff anyway.)
Your assumption is correct. 
Thanks and that is a good point. I had used the YUI library before, but since Yahoo has discontinued their support I'm familiarizing myself with JQuery so they can include that in their pages
I think they changed because they now use io.js instead of node, thus making the name "node-webkit" a bit misleading.
https://nodesource.com/blog/node-desktop-applications
That makes way more sense. Thanks for the clarification!
If you don't even understand what it is, why are you shitting all over this guy for building something using it? I wish I had your kind of free time.
Good to know; once again hope the above helps a little!
See: https://github.com/npm/npm-expansions
Most jobs aren't at well-known tech companies and mid-sized companies don't usually take the risk of changing to newer tech as fast.
Functions, functions, functions. JavaScript is all about them. Tell them about first class functions, tell them about closures, tell them about functional programming, tell them about array generics (e.g. Array.prototype.map(), filter() etc.), tell them about functions as objects, tell them about futures and promises. You will make them stronger programmers as a result, with or without them using JavaScript in future projects.
~~But why isn't the compass pointing towards northwest...?~~ &lt;- moron
Not jQuery. http://gomakethings.com/ditching-jquery/
Is the runtime still as large? As I mentioned on the other node-webkit thread, the built packages often total more than 50mb in size (probably mostly webkit binaries). I can't ask users to download that much just for a single-page GUI app. There was an alternative, tideSDK, doing the rounds a couple of years ago too, but I don't know if that project's still in rude health.
Backbone isn't MVC, and react components function as more of controller views than just a plain stateless view
Compasses point north.
This is probably better posted on r/jobbit. You might also want to be clear about whether you want to hire a UI designer (a visual designer who creates artwork and concepts), a UX designer (someone who designs flows and functionality) or a front end developer (someone who actually implements what the two others design). They are different disciplines. You can probably find someone who will do UI and UX design well, or is a dab hand with HTML, CSS and JavaScript, but probably not someone who will handle all three specialisms.
Oh! I'm an idiot. Carry on.
Yeah, I actually set up grunt-jscs but unfortunately it doesn't do es6 yet (and then I'd need to make it ignore jsx too). So I've had to exclude .jsx/.es6.js files from its file pattern for now.
Thanks! Yeah, that was pretty confusing for me 
Probably better suited as an object hash... function Person(name, interests) { this.name = name; this.interests = interests; } var bob = new Person("Bob", {"reading": {"paper": "Foo"}, "hiking": {...}, "spelunking":{...}}); bob.interests.reading.paper // "Foo" 
 this.listenTo(this.model, 'event:name', function(model){}) Less subtly, this is applying an architecture that works well with react, as react was specifically designed to interact with state and data in that way, to a framework designed to work with a different set of patterns and assumptions. Backbone views are not designed for that flow. Without changing the architecture of the view to take advantage of the flux paradigm, I don't see how this is better than using the patterns that Backbone views are designed to use. 
Another option is to transpile your source to another directory and lint there, since the JSX transform should preserve line numbers.
Wait what was it?
Yeah, sorry I hadn't seen your edit before I posted the comment.
Haha, no, you're fine...I hadn't seen your comment before I posted the edit. I think we did it at the exact same time.
OH, AND DO NOT GET INTO BROWSER COMPATIBILITY. CHROME ONLY. Again, you don't want to confuse things....if they stick with it, they'll learn that later on. It's just likely to turn off their interest this early on, and has no utility at that stage of learning. Absolutely zero point bringing it up. Don't do jQuery, either. That's totally the wrong way to learn JS. It's not "easier" in the circumstances, and I can elaborate on this if asked. Just use pure DOM API.
Do you have some code you can show? What's the functionality that you're trying to generalize?
here is an old iteration on my codepen http://codepen.io/nickeleres/pen/MYePaM
There is another hat in the ring other than atom-shell and node-WebKit. It's call thrust. It's basically a "build your own hybrid web app". There are bindings to a couple languages. It might be more of what you are looking for, if you want minimal size. https://github.com/breach/thrust
Yep, almost every project! :) One I did recently outside of work: http://mattdesl.github.io/xmas/ ([source](https://github.com/mattdesl/xmas)) A good workflow I've found is to use ThreeJS for heavy lifting, and a combination of stackgl and other small modules to make things easy to reuse on future projects. In some projects these modules can replace ThreeJS altogether, making for much slimmer bundles and very composable/reusable code. The MVC side of things is a bit trickier. At work we have some custom in-house frameworks. Still lots of experimentation, webgl is fairly immature outside of typical ThreeJS apps! 
I don't know if "redundant" is the right word here. It tangentially reminds me of "Liar functions/variables/classes" from this article a few weeks ago [ What most young programmers need to learn](http://joostdevblog.blogspot.ca/2015/01/what-most-young-programmers-need-to.html?m=1) 
NW probably stands for "not webkit" now. 
I work in big data, and anything that'll help with connectivity, especially if it is live data, is valuable. 
React is only the best to you because it hasn't had time for all of its flaws and maintaince problems to be obvious. Angular felt amazing 2 years ago, now it feels beat up and unwieldy. My small interactions with react make me think its not really any better than just using jquery, and jquery has a long proven history, react does not.
React has been in production for &gt;2 years at one of the largest sites in the world, and if you're honestly, legitimately comparing it jquery you have no idea you're taking about.
Hitting enter should commit a tag too.
That's like the second thing your learn after reading the homepage.
Well, with most multiplayer games, even when there is not a dedicated server, one of the player's boxes (usually the first person) will start up a server and that person's client and the others' clients will connect to it.
&gt;One thing to keep in mind is that everything FB open-sources is built and maintained by its A-squad for real prod systems (they don't open-source rando side projects), which is probably why it seems like the quality is particularly high coming from fb/ig. Yeah, the signal to noise ratio seemed awfully high, given how ~93% of open source projects are crappy throwaway projects lol 
Just in case you want verification, yes, your edit is 100% right. JavaScript passes primitives by value and everything else by reference. Only strings, numbers, and booleans are primitives. (Confusing protip: JavaScript also has `String`, `Number`, and `Boolean`. These are constructors for, insanely, Objects that act like the corresponding primitives but have subtle differences. And if that weren't insane enough, if you don't use `new` then these classes instead try to convert their first argument into a string/number/boolean - the primitive version. Needless to say, best practice is to never use these classes.)
There's still more jobs in Angular or Ember compared to React now, it has been getting wildly popular but that doesn't mean React jobs are everywhere.
I'm guessing IS is Information Services? Not that that is a helpful qualifier to judge your skillset (nor is IT for that matter). Most software devs probably couldn't tell someone why their VPN doesn't work either (that's network administration, not software development). Your job description sounds like data entry, though. As your second question is specific to a particular piece of software, I'm not sure this subreddit is the right place to ask. In any case, don't call people "bros" (or "brahs" for that matter). It's inappropriate and exclusionary. I think you mean [CodeCademy](http://www.codecademy.com/)? I'm not familiar with their syllabus, but they seem to go through the language basics mostly. The go-to book for beginners is [Eloquent JavaScript](http://eloquentjavascript.net/), so I'd start there if I were you. It's difficult to say what would be the best fit without knowing what you're going to need to know.