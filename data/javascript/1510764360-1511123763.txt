So many up in the air questions with no clear blockers. SHIP IT!
Finally using Vue in production at work, and with a few plugins (and admittedly several custom ones), it fills all the needs of a full framework like Ember :)
I'm not a huge fan of Haskell. It's big features like laziness, "no side effects" (performUnsafeIO is everywhere), and (to a lesser extent) immutable everything are generally at odds with the real world. If you are willing to work through those, it makes fast code. SML with mlton or similar is a better flagship for lambda calculus languages. Like all GC'd languages, it loses by a little to the low-level C ones in the general case. Compared to other GC languages, it's very competitive. https://www.amazon.com/Implementation-Functional-Programming-Prentice-hall-International/dp/013453333X
No, only taskbar. But I found solution http://icofx.ro/tutorials/tutorial5.html Ya can use this program to replace the icon for the whole application. The only problem is that ya icon is a bit too small, but even this result is manageable
While many were using `https://www.instagram.com/&lt;username&gt;/media/` urls to fetch data, my API provided data in a cors compliant way so that any webpage could load that data. Last week they disabled their `/media/` urls and started using facebook's graphql for fetching posts. I am using the same now. The `/media` urls are just a slower version of gql. https://igpi.ga/whizzzkid/media/?count=3 eventually resolves to https://igpi.ga/graphql/query/?user_id=1606740656&amp;count=3 which eventually brings in data from https://www.instagram.com/graphql/query/?query_id=17888483320059182&amp;variables={"id":"1606740656","first":3,"after":""} Now they could disable access to gql, sure, but will there be other ways? I guess yes!
I suppose the argument is what denotes legacy, and when that distinction becomes important. Is it time since release? Popularity? Market share? In our case, I don't think time since release is a useful metric, nor popularity among developers. When it comes to market share, ES5 is still very much the dominant flavor in the web environment. Until that's no longer the case, it's disingenuous to call anything else vanilla. Not only that, but it's confusing for those new to the javascript world.
You could probably split the work up between back end and front end, use the back end for managing your database and serving the data via an API, and use the front end for calculations. [Vue's computed properties](https://vuejs.org/v2/guide/computed.html) are very effective for dynamic calculations that can auto update as the data they depend on is mutated. We use this very model in production for things like adding up large numbers of financial transactions and calculating averages, etc.
If you want best of both worlds, try RE:DOM! It‚Äôs really close to vanilla, but with some really nice helpers: https://redom.js.org
&gt; Thanks, but the event loop and its checking mechanism, whether some time has passed has to be implemented somehow as well, right? Not quite. When you loop and check your code is constantly asking "is it done yet?" as fast as the CPU will allow it to ask and get an answer. This could potentially be millions of times per second. With setTimeout the OS is asked to set an alarm which when you dig down eventually gets to being a hardware alarm. Instead of constantly checking it will do nothing more until that alarm goes off. It *used* to be that the alarm granularity was at best about 55ms (as a legacy hardware clock that ticked over 18.2 times per second was used) but in modern standards it is 4ms (250/second). Even at 4ms, imagine how many times you constant loop will run in that time where by this method it will run once, and you'll see where the extra CPU use is coming from. The granulatity of setTimeout/setInterval is a bit more complicated these days as browsers deliberately reduce the timer frequency for background tabs and/or when they ditect that your device is in a low-power mode (i.e. your phone or laptop has switched on power saving features as the battery is getting low).
Yeah man. The only thing that'll keep you down is if they keep changing, which would make little business sense on their part. Yours is a better design, imho.
"Hardware firing (interrupts)" works too üòâ. But yes, that's how it can avoid spinning aimlessly.
seems cool but [I think you forgot to remove this test thing](https://i.imgur.com/De9tIw2.png)
[removed]
I would definitely recommend if you are doing some real-time stuff. Safety is not a problem, very basic security rules allow you to create complex safety logic. But the thing is you need to structure your data in NoSQL fashion (which I didn't know before working with Firebase, I came from MySQL world). If you don't structure your application logic and data becomes complex but if do it right everything is simple. I would recommend watching Youtube videos on Firebase channel about how to structure your data. I am using it on production and I would definitely use if I start another project.
Oh my god ... The next step will be crowd programming then? A whole office with 20 people and a giant screen? There is nothing wrong with working on a team. But there is a reason why Git and others allow merging ...
Also before anyone asks about "can i scale across machines" i will say not yet, but i have started working with this feature and it should be ready pertty soon:) hope you will like this framwork :üòÅ
Yeah, it's like being down-voted for recommending jQuery!
I only use firebase as a read only view. I found it too difficult/impossible to match my biz rules for acl data writes to firebase. I use a service account and a backend to write views to firebase
Spectacle is great! For an example presentation I recently gave, you can check out the [slides](https://www.css-in-js.dustinschau.com/#/) or [repo](https://github.com/dschau/css-in-js-presentation). Can't wait to try out Spectacle 4. The magic moves look really slick.
cool. I might have to make the icon bigger and do this. thanks for the link.
Isn't this whole project in typescript and not javascript? Maybe move it over to /r/typescript Most languages have a compile to javascript interpreter now, but we don't include/allow every project out there. I know this is a divisive viewpoint but I'm standing by it.
Sorry, I hate to be *that* guy, but can you ELI5 this for me a little? What would be a good use case for this?
The project is written in typescrip but npm module is completly javascrip, and all the documentation also in javascrip so i think this project is in the right place.
"Twitch Develops an App"
If you're going to use semi-colons then be consistent (noticed there are some missing).
The parser allows you to embed a JSX like syntax inside C++ and compile it into standard C++ compatibile with [asm-dom](https://github.com/mbasso/asm-dom). asm-dom is a minimal Virtual DOM that allows you to write Single Page Applications in C++ that can be compiled to webassembly (or asm.js as fallback) using [emscripten](http://kripken.github.io/emscripten-site/)
yeah i actually learned to code in python where they don't use any but i've read you should be using them in javascript so i'm trying to get it in my brain that i have to always use them, but i sometimes forget. Good catch, thank you. 
Or, you know, he asked specifically about it.
Caption of photo: &gt; Some woman (1.52 m) poses with a print of an avg. codebase Flow type declarations. That's not just "some woman", that's Margaret Hamilton, Lead Programmer for the Apollo 11 mission, and print out is the code that sent the astronauts to the moon.
Agreed - pair programming is crap. Still potentially a nice feature for the times you're working through something with a co-worker.
üòÆüòÆ
Promises compose naturally by design - no need to create your own composer function: const source = (value) =&gt; new Promise(resolve =&gt; { setTimeout(() =&gt; resolve(value), 2000); }); const add100ToNumberString = (value) =&gt; source(value) .then(res =&gt; Number(res)) .then(res =&gt; res + 100) .then(res =&gt; res.toString()); 
:-) Read carefully the rest of the article.
Knowing how tall she is should be good enough hint that this is humorous. The reason for this particular photo is because she is the lead programmer of the Apollo on-board flight software. GraphQL client is Apollo. I name her later in the article.
Did you select 'inspect' the demo page? The browser says: .grid__item { width: 20%; } in https://tympanus.net/Development/AnimatedGridLayout/css/style1.css I don't know if you use inspection in chrome or ff but if you don't then you need too know it is the most powerful tool you have. 
I used to be with you a few years ago, but I'm leaning towards learning ES6 first now. You can pretty much use the entire thing including modules in Node and at least two major browsers without a transpiler. I'd make an analogy with learning C11 vs ANSI C. Sure, if you're knee-deep in an old, long term C codebase, the difference will probably matter at some point, but as a beginner, you'll want to learn about modern language constructs and modern idiomaticness.
Try using a linter. I prefer eslint.
It's more of an issue of height than width. I'm totally solid on HTML and CSS and I'm "familiar" with jQuery, but I don't have a solid footing in JS. I've downloaded the code and been messing around with it for a while but I can't figure out the height issue. Though now that I'm away from the it it just occurred to me that it might be a flex thing and not a JS thing at all.
I pair a lot and enjoy it. You do tend to end up with something better quality and it helps avoid silos. I've worked with ThoughtWorks before and they always pair on everything. Good pairing is hard work though, when I was working with the TW guys I'd not really paired before so suddenly pairing all every day left me exhausted. Having said that sometimes you just need to get your head down and code. It depends on the problem and the people. 
What about rate limits for this API ? More specific the user/media/ endpoint ?
I believe that caption is what some humans call ‚Äúhumor‚Äù. 
I have a feeling than whether ES6 is vanilla or not is the least of a beginner's worries, but I would tend to agree with you. I am not in a position to use untranspiled ES6 in production at work, but I have noticed more developers and companies deciding to only support evergreen browsers. Based on that, my guess would be that non-evergreen browsers, especially those whose developers have ceased to support it (Internet Explorer) would be considered legacy.
True, but the *de facto* standard is still not ES6 - the libraries you will undoubtedly use will be written in ES5, and so it could be argued it makes sense to understand it, as you very well might have to debug it at an inopportune moment...
I love pair coding. Not full time and I admit it is slower than me going alone but having a second pair of eyes on the problem while I am in the head space of the problem instead of after the fact ( in code review ) has been amazing.
It checks the "queue" after everything in the current event loop is done. So let's say that you have 10 functions, half of them being "setTimeout" and the other half not. The computer basically puts the 5 on the "waiting" queue and the resolves the other 5. Once the 5 are done, it goes to the "waiting" queue and says "Are any of you done waiting" and if so, puts it in the "active" queue or the event loop. Wash, rinse, repeat
Many newer libraries and frameworks are written in ES6, Typescript, or Flow. I don't disagree that everyone should learn ES5, at least in part. I was just making a point about the classification 
&gt; Config config = Config(); Because programming...
I've used both and always end up using `ramda` if I have a choice. Not really a perf or DX reason just `ramda` feels nicer to use than `lodash/fp`.
I also noticed this, recognized the joke you were going for (it's funny), but thought the caption was mildly distasteful. I think you could make the joke better by replacing "Some woman (1.52m)" with "Programmer (1.52m)" - it conveys the exact same joke, while at the same adding another layer to breaking the inversion of Programming having become a masculine word in modern language :)
It's been a while since I've worked in C++, but I'm 90% sure that can be rewritten as: Config config();
&gt; Which is a better practice objectively Whatever helps you solve the problem you are trying to solve. For instance, the DOM is OO as are most browser APIs that I've interacted with. I'm assuming the people that make browsers are way smarter than me and have very great reasons for choosing OO. &gt; I was always taught that object oriented programming was better. _better_ in what way? I know in CS programs, they teach C++/Java as the gospel and those languages use OOP exclusively ( from my understanding. It's been years... ). And for whatever problems those languages solve, perhaps OOP is the _better_ choice. From my perspective, _better_ means whatever helps me and my team meet the client criteria for "success" the fastest. From my experience and the experiences of the teams I've worked on, FP has fit that bill more so than OOP because it lets us work atomically instead of holistically. 
It is, and it's funny but also offensive. It could be just funny if it were "Programmer (1.52m)", which immediately sheds all the baggage of gender theory while letting the joke itself shine!
you are setting event handlers every cycle, they should be set only once // SET TIMER ON PAGE LOAD ------------------------------------------ function setTimer() { var initial = 30; $('#timer').text(initial); return initial; } $(document).ready(function() { var timer; setTimer(); $('#start').click(function() { var counter = $('#timer').text(); if (counter &lt;= 0) { return; } timer = setInterval(function() { counter--; $('#timer').text(counter); if (counter &lt;= 0) { clearInterval(timer); } }, 100); }); $('#reset').click(function() { clearInterval(timer); setTimer(); }); $('#stop').click(function() { clearInterval(timer); }); });
Fully Agree. 
&gt; I also noticed this, recognized the joke you were going for (it's funny), but thought the caption was mildly distasteful. I think you could make the joke better by replacing "Some woman (1.52m)" with "Programmer (1.52m)" - it conveys the exact same joke, while at the same adding another layer to breaking the inversion of Programming having become a masculine word in modern language :) Love it! Updated article to use the suggested wording.
Heh. This time a actually loled and my coworker came over, read it, and also loled. +1, good post!
About $3.50...
Put it in the body not the head
The HTML
That is rad af
I‚Äôm beyond excited to see how upset devs get over this. 
[Code School free weekend](https://www.codeschool.com/free-weekend) is available this coming Friday. Check out Javascript Roadtrip with Jason Millhouse. 
So its a C++ pre-processor that takes a sorta JSX and turns it into asm-dom calls.
You are still not explaining why you think Ember is not a good option.
That won't work for 90% of compilers, it will be interpreted as a function declaration. The valid syntax is even shorter: Config config;
I even try to make the directories and files names as short as possible, so instead of /css/style.css it would be /c/s.css. That just shaved 6 bytes! Also HTTP/2 is supposed to help out with the multiple request thing IIRC.
Whoops, sorry, that was meant to be a reply to a different comment. :x Well Ember is slower to render, slower to develop (can't use any kind of IntelliSense available for other frameworks), has smaller number of tools and packages that you can use in your projects. Generally outdated. While it doesn't make much sense to rewrite your Ember app ASAP starting something from scratch with a more modern framework will only bring benefits.
It's missing comments for clarity.
If ya make it bigger, please share it with me
&gt; Ember is slower to render I use Vue and React, but Ember (and Glimmer its rendering engine) is [pretty competitive](http://www.stefankrause.net/js-frameworks-benchmark6/webdriver-ts-results/table.html). &gt; slower to develop That seems pretty relative. Someone with a lot of Ember experience will be fast and will not even need intellisense. &gt; has smaller number of tools and packages that you can use in your projects This is true, but the importance of it is quite relative. You might not need any third party stuff. Marko which has zero third party stuff is used to build one of the biggest websites on earth (Ebay). &gt; Generally outdated MVC is 40 years old and still valid. Just because Ember is not on the FP React bandwagon doesn't mean it's outdated. I would not pick Ember, but I think you are confusing opinions with facts.
Its $4.20 where i live
I've only stated facts.
Kudos for the suggestion. 
I don't understand what exactly is your problem. Nwjs is just to package your game on a Chromium-like browser. Maybe you should develop your application in react and then worry about nwjs (just be sure to test it on the relevant chromium browser to minimize problems). Other than that, try to explain what you've done so far regarding React. It really boils down to whatever you decide your workflow should be, so it's hard to pinpoint you to some resource that could help you out.
Apologize for not explaining correctly. I just want a development environment to work with react and then constantly debug it on nwjs since I don't want to be based on web but an application. It's going to be a single page application. However I don't know where to start. I am using Webstorm and I created a new empty project and used npm init and npm install react react-dom --save-dev. Now what do I do next?
I hate this hyper PC world. For fucks sake.
Is there any trend thats not? 
Yeah that's ridiculous. If it had Steve Wozniak holding up a stack of assembly instructions and you said "some guy" that wouldn't be offensive, so why is "some woman"?
I know, it's so much more work to consider how other people might interpret your words.
It wouldn‚Äôt be. We just now living in this ridiculous world of completely ludicrous standards that do more to create fear than breed harmony. 
Have you followed the React tutorial on their site? Is this the first time using react? 
Hi /u/tanphamvan, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I used react before but I just don't know how to connect them together. Also I may need to use Babel to convert jsx to js that Chromium understand. Also need a way to pack up all the js files inside 1 bundle and I thought Webpacker is good. However I don't know how to setup it all up together. Also I only want Webpacker to pack it when I am distributing, not when I am testing. 
Lol the only aspect of gender theory involved here is in this insane interpretation of an otherwise factual caption. 
Well, what do you want to do? I found my skills increased when I asked my colleagues at work what issue study had with their work and created webpages to solve them. Alternatively think of small games that you could build. I don't want to sound like my dad but, get a job!
http://nesamdoom.net/random/orange_code_300x300.ico I was getting annoyed myself with the smaller size since it didn't scale. this one matchs the size of the icon I had on my desktop. It didn't show up in my browser but I downloaded it and it was still good.
Something like this? https://github.com/zerojuan/nwjs-react-babel-webpack
Yes but I don't need readux or routing. It's going to be a single-page application. Also I don't want to add some other package like boostrap and react-boostrap so I don't know how to do that. It's a bit confusing and looks really complicated.
Ugh. Just ugh. 
Get a job? Where did he say he didn't have one lol. He just wants to improve his skill set..
Nwjs just serves a document. Babel just compiles jsx to native Js. You don't need a web packer if you don't want to, but I think you should rather use it all the time or none of the time (since it usually means it will help you compile multiple files). Follow the getting started of nwjs and take it slow, you only need to do this once, it's a bit overwhelming‚Äã at first, but you seem paralyzed
Would I need webpacker to use import/require?
Because men aren't exactly unrepresented or discriminated against in the software engineering industry. It's really not hard to understand.
This is satire, the point was him feigning ignorance about who she is despite that being a *very* well known photo, and then he went on to give her credit by name later in the article. I guess I'm just not seeing who read the article and felt offended other than someone trying to defend theoretical others who were offended.
You're trying to use reason and logic in a situation where there is none. Here we are talking about gender instead of discussing the actual reason we all come to this subreddit; Javascript. Welcome to the new world. 
Try to make a little project. Todo-list or a table (with sorting and search) with a scrapped data.
*How* is it insensitive? Like, what's the negative implication here? If anything, the implication is positive as the joke *points to the fact* the woman is well-known and respected. The meaning is reversed, that's how satire works. You're honestly not doing women any favours with this nonsense. 
It reads "A programmer (1.52 m)..." when I visit. Even that made me double take a bit though.
Yep, author changed it in response to this thread. Explained in some other comments.
It‚Äôs not checking every millisecond. Often these timers are restricted to a lower resolution, like 16ms, or the timer is coalesced with other timers so that they all fire at the same time. The value in a function like `setTimeout` is more a request to wait at least or approximately that duration. Building on this and what others have said, you may be interested in [this](https://accu.org/index.php/journals/2185).
You should change it to "Some programmer" to keep the same tone of the joke. Otherwise it feels more informational rather than humorous. 
&gt; ... here is the list of the items I‚Äôve used and I recommend them: Adblock software hides these links. Maybe consider adding them as text links
*bread harmony. we need to harmonize all our bread.
shut up and go away already 
Wut 
Clever trick to reduce codebase, OP. Also, nice job tastefully handling the presumptuous other redditor here.
I think you're better off with an aggregate object. It's clearer when reading what each value is for, and it's more flexible on the receiver. If you passed everything as separate arguments, you might have something like: new Person("Java", "Script", 21, null, null, ratios) It's not immediately clear what the 21 is for, nor what the null values are for. You have to look at the definition of Person to see what those values mean. Much clearer to have the object literal key names.
"some woman" was funnier. if I had read "some woman" in a caption to an instantly recognisable photo I would have laughed. when you wrote "a programmer" my honest first impression was that you're an idiot and you have no idea who the woman is. I didn't see a single woman in this thread say they were offended by the original caption. just a bunch of retarded pc police liberals who won't stop until were all taking soma..
http://www.cnn.com/ 2862 ms scripting, 113/351 req (2.6MB, 4.8MB transferred) with uBlock origin: 1388 ms scripting, 28/111 requests, (882 KB 2.1MB transferred)
They shouldn't have changed it. The point of the joke was treating her as some rando.
I have to write hundreds of these and that's also one of the reasons why I like the object path, because writing the key names makes it so I can't mess up. I was just worried that assigning `this.stats = stats` directly might cause some kind of problem, just overthinking things I guess. Thank you very much for your response!
This is a very well-known picture of a very well know programmer. The caption of "some woman" is an example of comedic understatement: http://literary-devices.com/content/understatement The implication of using an understatement is the exact opposite of insulting, as the author is relying on the fact that the picture and the woman pictured are well-known. The comedy lies in the disparity. If you don't find it funny, that's okay, but to insinuate that the author doesn't know who the programmer or is somehow putting her down just demonstrates your own lack of comprehension. If this was a picture of my neighbor, Jane Doe, the author wouldn't have used the term "some woman" because that is not a comedic understatement Again, understatement is a literary device for doing exactly the opposite of what you claim it is doing
Awesome stuff, good work
MDN
Besides what u/bobandalice pointed out about setting the event handlers too many times, there are a number of things that could be improved. 1. Try to avoid polluting the global scope. To do that, there are a number of options that range from simply wrapping everything in a _IIFE_, to using some module system. 2. Give things _truthful_ names. You have a function called `startTimer`. That name _clearly implies_ that that function "starts the timer"... but it doesn't. Instead, what it does is set up the handler for clicking on the start button. The name of the function _lies_ about what the function does. The same occurs with `stopTimer` and `resetTimer`. 3. The logic flow is fragile. _Some parts_ of the logic are somewhat fragile. I mean, in the handler for the start button, you rely on `&lt;span id="timer"/&gt;`'s content having been set before. If it _wasn't_ set, if `setTimer` hadn't been called, the logic in there would fail. Up to this, it is a fair assumption. I mean, it's not that much of a problem to assume that. But then again, there's nothing to ensure that `setTimer` has indeed been called. The fragility actually lies in the final lines, in the fact that, to really set up things, you have to call two different things: `setTimer(); startTimer();`. ---- With these things in mind, and without changing any functionality, here's some _sketch_ of a more solid solution. Bear in mind that I didn't think too much about some of the names. (function() { // Some general stuff: var INITIAL_TIMER_VALUE = 30; var intervalId; var SELECTORS = { START_BUTTON: '#start', STOP_BUTTON: '#stop', RESET_BUTTON: '#reset', TIMER: '#timer' }; // We have only 1 function that initializes the timer: $(document).ready(initTimer); // That function would be something like... function initTimer() { resetTimer(); setupEventHandlers(); } // resetTimer is basically your setTimer. I prefer reset because it doesn't set any random state, but sets the timer to the initial state. So, reset. function resetTimer() { clearInterval(intervalId); $('#timer').text(INITIAL_TIMER_VALUE); } // setupEventHandlers _only_ does what it says: hook the event handlers onto the corresponding buttons: function setupEventHandlers() { $(SELECTORS.START_BUTTON).click(startTimer); $(SELECTORS.STOP_BUTTON).click(stopTimer); // Turns out, what we do when resetting the timer is exactly the same as what we do initially. $(SELECTORS.RESET_BUTTON).click(resetTimer); } // startTimer is, basically not your startTimer, but the anonymous handler you had inside that function startTimer() { var counter = $('#timer').text(); if (counter &lt;= 0) { return; } intervalId = setInterval(function() { counter--; $(SELECTORS.TIMER).text(counter); if (counter &lt;= 0) { clearInterval(intervalId); } }, 100); } // And similarly for stopTimer: function stopTimer() { clearInterval(intervalId); } })(); ---- Now, that could be a more solid solution. It can, of course, be much, much better. But without going as far as making radical changes to the whole thing, there's at least one thing that is bothering me a bit. Not much, but a bit. It is the fact that we're storing the state of the counter in the DOM, in the `#timer` element's content. And we go and get it and then we go and set it back. I mean, it's not _that_ bad, but read on for some advantages commented later. You could correct that by simply storing it in a variable: // Note: the following is **not** the full code, just the changes made. Parts omitted are similar to above. (function() { // Some general stuff: ... var time; ... // resetTimer is basically your setTimer. I prefer reset because it doesn't set any random state, but sets the timer to the initial state. So, reset. function resetTimer() { clearInterval(intervalId); time = INITIAL_TIMER_VALUE; paint(); } ... // startTimer is, basically not your startTimer, but the anonymous handler you had inside that function startTimer() { if (time &lt;= 0) { return; } intervalId = setInterval(function() { time--; if (time &lt;= 0) { clearInterval(intervalId); } paint(); }, 100); } ... function paint() { $(SELECTORS.TIMER).text(time); } })(); One advantage of this, is that, to some extent, we've separated the model, the _logic_ and _state_ of the timer (`time`, `intervalId`, `INITIAL_TIMER_VALUE`, `startTimer`, `resetTimer` and `stopTimer`), from the view, the _interface_ of the timer (`SELECTORS`, `paint` and somewhat `setupEventHandlers`). We could now reorder things a bit and further separate those things and it would be easier. If you don't mind I'll leave that to you as exercise :) Note that if you do go and separate those parts completely, the `paint` function will need to receive as argument the current value it has to show. The advantage of this separation should be clear, but just in case: The advantage is that each part is responsible for its own part. That is, there's a better separation of concerns. Say you now wanted exactly the same logic but you want the view, the visual representation of the counter, to be something fancier, with SVG or with some images or whatever. You could then just change the view without affecting the rest.
Troll-like blanket statements are fun heh ?
No, bread is pain. 
I have a game framework called Machete which uses the DOM instead of &lt;canvas&gt; :D https://github.com/Technohacker/machete Also, I tried making a game that uses the JS console extensively :P https://github.com/Technohacker/console-experiment
specifically the end of the body.
"Twitch Writes C" sounds like a blast.
Format your code properly for Reddit, add 4 spaces to the beginning of each line
To explain the solution: your script is loading and running before the DOM is available.
As long as you don't later manipulate the stats object that was passed in, it's fine. For example: function Person(stats){ this.stats = stats; } // bad const stats = { name: 'whatever' }; const p = new Person(stats); stats.name = 'changed'; // this changes p.stats.name! // fine const p = new Person({ name: 'youll never have a problem with this' }); Or you can even do something like this to make sure the stats object is copied: function Person(stats){ this.stats = {...stats}; }
i always recommend jumping into a lightweight boilerplate to learn a new framework. forking and extending those provides real world experience. you'll be often joining existing projects in the business world.
Your scores are strings + numbers which would give something like "mind palace180" which isn't as simple as comparing two numbers. Alphabetic precedence will matter 
I like Electron. People trash talking it are more than welcome to develop sometime better that also allows us to leverage our web development skills in the desktop environment. 
It's certainly a shit ton of work when you're surrounded by trigger-babies like yourself. 
What do you mean by lightweight boilerplate?
I would be interested depending on the task 
I don't think we'll see wasm Incorporated into libraries until it gets DOM manipulation support (on the roadmap still last I checked). The current setup is to do the diffing and model patching in c++ but to still modify the DOM via JS. Not terrible, but could be better.
ok, thank you
good to know, thank you
If you're in an es6 environment, then you can also use destructuring in order to achieve some self documentation as well. example: function Person({ first, last, age, level, income }) { this.first = first; this.last = last; this.age = age; this.level = level; this.income = income; } I like to do things like that since it helps with intellisense in a lot of editors, and its immediately clear what properties to pass in. You can add on default assignment if you wanna make sane defaults too. function Person({ first, last, age, level = 1, income = 0 }) { // code here } 
Why? With pairing, you get: 1) knowledge transfer (at least two people know what's being worked on so the bus factor isn't as much of an issue) 2) better design because you have two brains working on the problem 3) less time wasted trying to get past blockers/errors. One person in the pair can catch mistakes made by the other much quicker than one dev trying to figure out what they messed up when just by themselves
This article is cancer. Use whatever tools you want to build the apps you like. Electron is a tool. Use it, or don't!
Don't ever try to learn the framework before the language, since every custom thing you do with it will still be in Javascript. Learning ES5 is maybe not optimal but okay, as long as you then start learning what ES6+ adds to it. That's what I did at least. Before learning a framework, understand why you'd want to learn a framework. Frameworks are useful for handling certain situations better, but nothing like first knowing what corners they cut. For example, jQuery (which is not a framework but it's still on the "make things easier" camp frameworks thrive). Why you'd learn jQuery? Well, jQuery abstracts away a lot of boring JS code, but your heart wouldn't understand its usefulness if you didn't know what it's abstracting. It just makes more sense. Same thought principles go with React, Angular, Vue, Ember... What problem do they solve and why so many people use them? Also, Node.js is single threaded, since Javascript itself is single-threaded. Node circumvents that by being asynchronous, so it can do I/O operations in parallel without blocking anything else.
I'm sick of 99% of the "articles" from medium.
 // Config Config config = Config();
And this is why SSR isn‚Äôt good enough
I used to work with this stuff all the time in my previous life as an electrical engineer. Basically, there is a dedicated timer circuit that sits next to the CPU. The CPU can program the timer with an delay, just like the timer in your microwave oven or whatever (but in nanoseconds). When the timer goes off, the CPU gets interrupted from whatever it's doing, and has a chance to run some code. The actual timer control code lives deep within the bowels of the Linux / Windows / Mac operating system. Normal user software can tell the OS, "I'm going to sleep. Wake me up in x milliseconds". The OS looks at all the wakeup requests from all the programs running on the system, picks the soonest one, and starts the hardware timer for that amount. When the timer goes off, the OS wakes up the sleeping program, and then re-starts the timer for the next request. This way, many programs can all share one hardware timer. I am vastly oversimplifying things, but this should give you the basic idea of how this stuff works.
time
You can host your own heroku instance using the 1-click deploy and use it for scraping. I have not faced any issues. Try not to use igpi.ga and igapi.ga for scraping.
One step closer to full time remote/virtual offices. Is this a good thing or a bad thing?
Just because it's understatement doesn't make it funny.
progressive templates. like one branch for just React, another for React + Redux or Mobx, another for SSR, etc. something you can step through, not try to learn all at once.
Man, I really have no idea what you're talking about here. I don't know what progressive templates are.
scoreJohn: "concern2500" scoreMoriartyÔºö "gun825" scoreSherlockÔºö "mind palace900" String compare: 'm' &gt; 'c' &amp;&amp; 'm' &gt; 'g' scoreSherlock &gt; scoreJohn &amp;&amp; scoreSherlock &gt; scoreMoriarty
[THIS](https://jsfiddle.net/d18sdjeg/2/) is a simple example if I understand your question right. Just pulling urls out of text, like an article or email? This could be highly be approved upon. When copy the html markup from a google search results page, some parts of the inline-script like: "a.comatable" would appear as a url because of the ".com".
Good lord, that's amazing!! 
&gt; I am not disputing its importance, but its not more than 10 - 20%.. I've seen people rejecting whole code because of coding conventions and it occupies 100% of preference as compared to functionality provided by the code. So 10-20% of people are stupid within your sphere of influence if that is their sole criteria for judging code. &gt; What is your opinion ? 1. Readability and comprehension are not the same thing. I could write vanilla assembly code and limit each line to 80 chars (shorter line lengths have been scientifically proven to aid in readability / memory retention)... does this mean because it's easy to read it defaults to easy to understand? Conventions aid in consistency / recognition of structure thus comprehension... whether it's easy to read or not. \2. Can help to identifying code smells. \3. Can reduce code commenting requirements \4. Some dependency managers / compilers have code conventions as a prerequisite (php : autoloading / composer / PSR2).
How do you decide on what app to build next?
here's an example, not mine - https://github.com/diegohaz/arc progressive boilerplate (starter kit). multiple branches with different levels of functionality.
Your idea goes against the FlexBox ideology by trying to force the parameters into a weird spectrum. Although it may be possible, it's not practical, nor would your browser really like it.
Well, it‚Äôs a weird bit of code. You should read up on function parameters, variables and scope. Look at the name of your function and the first line of the function.
Just doing some cleanup function greaterThanFive (comparisonNumber) { if (comparisonNumber &lt;= 5){ console.log("false"); } else if (comparisonNumber &gt;5){ console.log("true"); } }
To my understanding, you're asking if the content was an image, how would you zoom it to propagate the effect that the article is using?
Just because you didn't find it funny doesn't mean nobody does.
the keyword "function" should not be capitalized. That's probably why it isn't working, but your naming conventions are pretty bad too. You have a function and a variable with the same name. That will cause problems. Consider renaming your parameter to something like "input" and the whole thing will make a lot more sense: function greaterThanFive(input){ if (input &gt; 5){ console.log("true"); } else if (input &lt; 5){ console.log("false"); } else { console.log("equal"); } //endif } // end function
I am fine with using a different method as long as it gets centered vertically and horizontally depending on the text size. Do you have any ideas on how I could achieve that?
Look at the top 2 lines? `` Function greaterThanFive (five) { greaterThanFive = 5; ```
If by harmonize, you mean eat, then yes. 
&gt; Function greaterThanFive (five) { &gt; greaterThanFive = 5; &gt; if (greaterThanFive&lt;5){ &gt; console.log("false"); &gt; } &gt; else if (greaterThanFive&gt;=5){ &gt; console.log("true"); &gt; } &gt; } This can be written very simply: &gt; function greaterThan (input, max) { &gt; return input &gt;= max ? true : false; &gt; } 
If I understand your post correctly, the effect works by positioning a dummy &lt;div&gt; where the element you clicked on is, at the same dimensions. It then scales to the viewport width/height before the content fades in over the top. See loadContent().
IMO, roughly similar to rules for capitalization vs. writing easy-to-read English. I find both important, but the latter is clearly more important.
^ This. @OP You'll miss out on a some lower-level understanding of how js works by jumping straight into ES6, but, honestly, in my JS career I've never really had to apply that low-level knowledge, like, ever. That being said, if you just want to kickstart your JS career and start making dosh asap, learn es6 fundamentals -&gt; read about create-react-app -&gt; fuck around with that (practice es6 in the context of node) -&gt; learn express + your prefered db (non-relational is king right now) -&gt; fuck around with that -&gt; make something -&gt; job.
Code isn't just about functionality. You write code for people just as much as your compiler (etc). 
In vanilla JS you instantiate a date: const date = new Date(); Then date.setDate(date.getDate() + 1); But this is kind of ugly and only works if you want to increment that specific variable. If you're going to be working with dates a lot and want something more comfortable to work with check out [MomentJS](https://momentjs.com/). It's a really solid date library with all kinds of manipulation and formatting capabilities and very comfortable syntax. Then you can do stuff like this: moment().add(7, 'days'); And even assign the new value to another variable without changing your current one.
hahaha thats the most direct answer I've ever received but thanks go to the point and direct with no bs good job I understand your point I was about to start reading Javascript the definitive guide 6th edition but it cover ECMAScript5 and its from 2011... wasn't sure about that or the never tutorial online about JS or some of the Mozilla developer pages etc I don't know whats the differences between learning JS from ES6+ or start with a older version if in production we never use under ES6 etc I understand the knowledge aspect of it but its like saying Im learning C# but ill use the unsafe part a lot to call win32 com interropt etc or I learn C++ to use just Java or C# later on etc its like it doesnt make much sense I need a explanation on that
Mobile popunder script
You mean the "I have a year experience in frontend tops and need to fluff my CV and sound smart when I actually have no clue how any of this works" blog?
When I moved from QA to dev my bosses had me program snake in vanilla JS (no canvas either) as a test challenge, it was really fun, maybe try that.
Rather than adding all the selector strings to an object it's better to just declare the jQuery variables at that level, i.e.: const $startButton = $('#start'); const $stopButton = $('#stop); and so on. Then jquery doesn't need to do selection each time it sees a variable.
Yes, that's usually how you do it client side. Maybe there are other options (like a shiv) but I couldn't help with
But I write code which is understood as well sometime praised by the people. then why we need to force people to do something specific. Coding convention doesn't help people to understand the code, its the code and there are much better ways to write it
I agree to all of the points you have mentioned but I can do all 1,2,3,4 without sticking to something someone comes at some point of time (e.g. coding conventions) If a programmer is novice (s)he will make code a mess irrespective of following / not following convention
In this case, that is correct :) But since it's only done once, except for `#timer`, it isn't that much of a difference.
All of that is irrelevant to what you were asking, nice strawman.
This is a nice trick!
I ended up going with Vue.js instead of React and everything is working well. I setup my dev environment from scratch using Vue.js for data-binding and component system, boostrap for layout, JQuery and JQuery UI for UI, EMS 6 Javascript for scripting, webpack for packaging javascript files and dev server, NWJS for the final product in desktop and Webstorm for IDE. Seems to not have any issues so far. 
Addy Osmani, what a man! 
You're perfectly right, it's the Flow reference that makes the joke.
(We're definitely going on a tangent here, and I'm not subscribing to OP's comment in any way. That being said, and since you brought it up:) I've seen this type of reaction before. "Why are we favoring women if the underlying goal is equality?" For two simple reasons: 1. There's a difference between favoritism done for the sake of being nice vs doing it to usurp someone's merit or credit. It's perfectly OK to shower one person with extra nice behavior and not the other. It's extra, sugar on top. If some people prefer to do stuff like give a woman flowers or hold a door open or be nice to them just because they're a woman, that's OK. 2. Women have been treated like second class citizens for a few hundred years, every since matriarchal societies stopped being a thing and until feminism started. Let me repeat that, you give someone shit for a few hundred years, then say something nice for once, and someone says "what a load of PC". Come on. There is no amount of nice things you can say that will make up for hundred of years. You could kiss a woman's ass non-stop for 3 days and it won't stop her from being treated like a second class citizen, won't make up for being treated like that her whole life, and won't make up for history. So I don't think we're in any real danger here. TLDR: If someone favors women undeservedly, eg. hiring one for a job they're not qualified for just to fill the diversity quota, then by all means call them on it, it's stupid. But if they do it to be nice or for PC, please think and don't.
I don't know where you effed up but hope you find your solution. 
Yes we did indeed ;) It should be fixed very soon. Thanks for letting us know.
I think you want `window.location.href` not `window.open.href`.
So I read the whole article just now, and really all it does is points out cases where people use Electron or expect Electron to do things in cases outside of what it's meant for. It's the same as node. Node is meant to give JS developers a server-side environment to test their projects or to provide a simple backend without hassle. The fact that some people try to run full-blown enterprise level backend services in Node does not mean that Node is cancer, there are just dumb people out there who don't understand their tools. 
Home office work. Or remote work.
The problem i with how you implemented BreakStar function. The part: var index = stars.indexOf(Star); Will return -1 if you pass a "Star" that has already been removed from the array so splice will be called with stars.splice(-1, 1); effectively removing all but last element of stars array. A simple check "if index is -1 do nothing" should help.
Thanks myrddin4242, now this finally makes real sense! :)
This is great info, now it finally makes sense! Thanks s_tec &gt;)
Thanks, I'll try that. 
Try this out: https://jsfiddle.net/fc15zn3f/1/
Mmm... Exactly what kind of _conventions_ are you talking about?
 stars = stars.slice(index);
Thanks for your answer and I'm not spamming I find this post useful so I posted it here. that's all :)
why would anyone be upset?
``` const stuffs = array.reduce((acc, item, index) =&gt; { if (index &lt; 11) { acc[0].push(item); } else if (index &gt; 11 &amp;&amp; index &lt; 22) { acc[1].push(item); } else if (index &gt; 22 &amp;&amp; index &lt; 33) { acc[2].push(item); } else if (index &gt; 33 &amp;&amp; index &lt; 44) { acc[3].push(item); } else { acc[4].push(item); } return acc; }, [[],[],[],[],[]]); return stuffs[0].map((loc, index) =&gt; ({ iphone64gb: { spaceGrey: stuffs[1][index], silver: stuffs[2][index] }, iphone256gb: { spaceGrey: stuffs[3][index], silver: stuffs[4][index] } })); ``` Something like that.
&gt; With pairing, you get: ... a very socially awkward situation in an uncomfortable environment where you always talk instead of being able to concentrate on what you're doing.
Write pseudo code for the parts you know how to do then It'd appear easier. I believe you can use splice and just get the store locations on its own. From there I have no idea what the patterns means. You have more dashes than places. No one knows where the value for one store starts and another ends. So no one is going to help there. Small tip. Write the question with as much respect and effort as you'd hope someone would answer with. You wouldn't want a half baked answer right? Far to expect we wouldn't want a half baked question. I hope I don't come off offensive. Trying to help
If you know the first 11 indexs will always be the location, then it's easy enough to do: var iPhoneAvailMap = {}; for (var i = 0; i &lt; 11; i++) { iPhoneAvailMap[inputArray[i]] = { IPhone64gb: { silver: inputArray[i+13], SpaceGrey: inputArray[i+26] } } } I'm on my phone so the formatting sucks and I didn't put the specific addition on the silver and grey checks. The idea is that as you iterate over each location, you can check further on the input array for the desired value by adding a number to the index for where you need to check. 
thanks for the answer. I'll just need fix it and and add the location. 
&gt; On the high-end iPhone 8 it takes just ~4s to parse/compile CNN‚Äôs JS compared to ~13s for an average phone (Moto G4). This can significantly impact how quickly a user can fully interact with this site. This is a vital point that people often miss. "It works smoothly on my phone" says the developer pulling a high-spec device that probably costs at least several hundred $. Or almost as bad "it works fine on all the phones here" where the oldest phone in the room is 18 months and it was top-of-the-range back then. Many people are using phones that were released a few years ago and may not have been high-end even then so unless you are specifically targetting power users you should test on devices with less CPU/GPU umpf, less memory, and smaller screen resolutions. The G4 stated as an average phone in this article doesn't go far enough IMO. I keep a 2nd generation Moto G (released Q3 2014, snapdragon 400 based, 720p screen) around for this sort of testing on personal projects and did have something older but that stopped charging. Yes, people with older devices will be expecting things to be slow, but if you can make your app smooth enough on those devices it'll run like a cheetah on something newer/faster/bigger. Also: if you actively care about mobile make sure you test at 3G (preferably lower) network speeds with high latency. Many tools exist to simulate this (for instance Chrome's dev tools, network tab, you can set it to try simulate various speeds and latencies), though the best UX test is to drag out that old phone, turn off 3G+ support, clear all caches, and see how your site/app feels then. Don't have a SIM compatible with your old device (I don't for mine, it takes micro SIMs and all my active ones are nano now) and don't want to pay for PAYG access just for this test? Turn off 3G+ on your normal phone and tether the old one to it via WiFi.
other than the capital R in "Math.random" I like this solution.
 class Person { constructor({ first = 0, last = 0, ...options }) { this.first = first this.last = last this.options = options } foo() { const { age, level, ratios } = this.options console.log(age, level, ratios) } 
Try replacing BreakStar function (https://github.com/DatBoiSkeltal/game/blob/master/JS/script.js#L88) with: function BreakStar(Star) { var index = stars.indexOf(Star); if (index !== -1) { stars.splice(index, 1); } }
I actually was on a mobile device, so...
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [DatBoiSkeltal/game/.../**script.js#L88** (master ‚Üí 5ce9ef7)](https://github.com/DatBoiSkeltal/game/blob/5ce9ef7bbbf9df56b213ed9c04fc1b604aaa2d1d/JS/script.js#L88) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
I'm sure lodash can help as well.
You're right, and I don't even think it's funny. I didn't sit here laughing my face off. However, if you're mistaking somebody else's perfectly wholesome joke for misogony and calling them out for it on medium and reddit like an asshole -- it's important to point out that you're being an asshole
For example camelCase, naming convention of class and function variables and so on
[removed]
If I replace my code with your code it seems like stars.splice doesn't run at all, saved the link for future reference but for now I'll keep asking around. Thanks anyways. :)
This doesn't address the situation of each live box having its own config, or even the simpler version where each dev box has its own config, test has its own, and live has its own. Some of the methods that they're rejecting are designed to handle those situation.
There is one quality about code developed by more than one person. It is that, if left to nature, that code reflects all the stylistic quirks and preferences of each member of the team. Codind conventions counter this effect and this is for good. It gives the code **consistency** and it eliminates having to deal with other people's quirks when having to modify parts of the code done by others. I was about to write "other people's code", but then changed it because that's precisely the point. Working in a team, it's **not** your code or my code, it's just the code, everyone's code. Consistency is a good thing. Compared to ‚Äúletting each person's preferences flow freely‚Äù it is infinitely more valuable. I have, and will, rejected pull requests on naming problems, on bad style and on not following the teams conventions. At least, if not rejected, I've had the person responsible change the code to conform to that. It's not a 10%-of-the-time-important thing. It's something that does matter. I've had code on which I could do a pretty accurate `git blame` just by looking at stylistic preferences. That is not good code, no matter how great you think ‚Äúyour‚Äù code is.
thatsthejoke.jpg
[thatsthejoke.jpg](http://i.imgur.com/tEjeMu8.jpg) --- ^(*Feedback welcome at /r/image_linker_bot* | )[^(Disable)](https://www.reddit.com/message/compose/?to=image_linker_bot&amp;subject=Ignore%20request&amp;message=ignore%20me)^( with "ignore me" via reply or PM) 
I think he‚Äôs safe to jump to ES6 right away, but with one caveat: learn about prototypal inheritance first since ES6 classes are a little hacky and not understanding why can cause headaches. Find JavaScript Jabber with Kyle Simpson, I think it‚Äôs #220 if you want an explanation. With a strong foundation and the ability to build what he wants, then I‚Äôd recommend filling out his knowledge with a book like Secrets of the JavaScript Ninja.
A [GitHub App](https://github.com/apps/triage-new-issues), built with [probot](https://probot.github.io) that adds `triage` label to newly-created issues which don't have labels. - semantically released - https://github.com/apps/triage-new-issues - https://triage-new-issues.now.sh - https://npmjs.com/package/triage-new-issues
Name the param **num**, input is too vague for no reason. We're clearly doing number comparisons here.
&gt; It doesn‚Äôt really matter, because you don‚Äôt need to maintain this code by hand. Next time you make a change in the database, simply run PostLoader to generate new code. Why would you count this code? Surely you aren't checking in auto-generated code?
A little cheaper with a costco membership.
Boolean values do not need "" you can just put console.log(true); also, here is a script that will give you your desired output. function greaterThan(){ let number = 6; if(number &gt; 5){ return true; } else { return false; } } greaterThan(); true function greaterThan(){ let number = 4; if(number &gt; 5){ return true; } else { return false; } } greaterThan(); false
I think you should learn how to program as a first step and quit relying on third party code and reddit telling you what to do and how to do it.
Sorry its in paragraph format. idk how to get it to retain the structure on here. n00b reddit user
That's probably because stars.indexOf(Star) in your case never returns anything other than -1. Star is complex object and indexOf can't compare those. You could try assigning a unique id to Star object and use stars.findIndex or event stars.filter to remove "Star" based on this unique ID.
What does `isPC` mean? Everything that is a computer that is personal to your use is a PC. And you can't detect with browser apis how many users the machine has. Do you mean non-mobile? I'm confused. Or do you use the definition of old advertisements and mean non-Mac? That's a stupid definition and I don't see how it's useful to detect that
Do know how to program, was looking for architecture opinions of other engineers. 
It's not immediately clear what you're asking, so I'll try to answer all the questions you might have as a result of the code you provided: `undefined` in Javascript basically means "this is a meaningless question" - for example if you define a variable and ask for its value before you give it one: ```let a; console.log(a);``` The function in your example returns `undefined` *when you just type that code into the browser* because you're defining a named function and not assigning the result to a variable, and that doesn't result in a value. The function returns `undefined` when you *call* it (eg, `greaterThanFive(6);`) because you don't `return` any value - you use `console.log()` to output values to the console (akin to printing to the screen), but the function doesn't *return* any value... which means in Javascript that it implicitly returns `undefined`. So that's why you're getting `undefined` back when you enter or execute the function. In addition you have a couple of bugs/issues in your code: * The `function` keyword shouldn't be capitalised. * You're defining a variable (`greaterThanFive`) with the same name as the function it's defined in. This will work, but it's a bad way to write code because it makes it harder to work out what `greaterThanFive` refers to in different contexts (inside the function it's a local variable, but outside the function it refers to the function itself). It's also unnecessary as you're already defining a variable (`five`) to hold the parameter passed to the function. * The parameter is called `five`, which is misleading unless someone only ever passes a value of `5` into your function. Call it something like `numberToTest` instead. * You're testing the local variable (`greaterThanFive`) rather than your parameter (`five`). As the local variable is always hard-coded to a value of `5`, your function never actually tests the parameter passed to it. * The function is called "greater than five" but it's actually testing if a number is "greater than *or equal to* five", which means the function name is misleading. * It's not *wrong* to explicitly lay out the two possible cases you want to test (`greaterThanFive&lt;5` and `greaterThanFive&gt;=5`), but where exactly one of them will *always* be true you can just use the `else` keyword on its own to handle "all other cases" so you don't have to explicitly lay out the second condition. Writing less code means writing fewer bugs. ;-) If you fixed all these issues then this function would look more like this: ```function greaterThanFive(numberToTest) { if (numberToTest &lt;= 5) { return true; } else { return false; } }```
Not opening on mobile Safari. 
The ternary operator and logical expressions may be more concise than if / else, but they are not easier to understand. My advice to beginners (after teaching computer science for about 20 years) is exactly the opposite. If / else is a structure that has meaning in English, and that meaning is very close to its use in programming languages. I don't see people get hung up on nested ifs. I do frequently see people get hung up on Boolean operators in conditions. (My rule is this: Don't use Boolean operators until you can explain DeMorgan's law.). That simple rule has helped hundreds of students get to better code. I also don't encourage the ternary operator for beginners, because beginners often haven't thought through their algorithms completely, and the ternary operator doesn't give you a lot of flexibility to expand your thoughts internally. My general rule is one line: one thought. As soon as one line of code is performing more than one or two actions, break it up. You're never really saving anything by making your code shorter. 
React Native is my go-to for writing mobile apps. It‚Äôs mature enough for production apps now (has been for a while) and has most of the benefits of native code while still being cross-platform.
I would argue num is more vague than input. Remember, this is for a beginner, and the most important thing I think the OP is confused on is naming conventions. So now the function is clearly named greaterThanFive, and the function's parameter is the input value. In actual working code, it's either going to have a more meaningful name, or it doesn't matter. If it doesn't matter what the thing is called, I would give it the most appropriate math variable name (i for an integer, n for a length, and so on.) But the point of this exercise is to make the logic flow more clear to the OP.
Use four space indent. NP.
... the article makes it clear that the author is NOT including auto generated code. They point out that the code after generation is greater than the original codebase, but the 40% number comes from beforehand
Hi /u/CodeEurope, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
48h later, there restarting the project in hopes to clean up the spaghetti code
Professional developer here. I don't think that Angular is going anywhere; Angular5 was just released. Having said that, I would definitely recommend upgrading the version of angular that you are using. Angular 2 is significantly more performant then Angular 1. If you are looking at moving away from it Angular entirely, react is good. You should also investigate looking at Google polymer. many of the concepts that angular leverages, Polymer also leverages. The big difference between the two is that Polymer stays as close to the native browser functionality as possible, without as many dependencies.
I don't believe an end date has been announced for AngularJS maintenance, but it's pretty much already deprecated in the sense that it isn't recommended for anything greenfield and (I assume) will no longer ever have important new features added. As far as performance, I can't say exactly how Angular and AngularJS compare because I never really sat down and compared the performance of my application pre- and post-Angular side-by-side ‚Äî which would have been difficult because we had an extended transition period of using the `UpgradeModule` (mainly because Material 2+ wasn't a suitable replacement for Material 1 at the time we first upgraded), and by the time we were fully migrated to Angular I'm sure we'd put in a decent number of entirely unrelated performances enhancements and fixes. That said, my impression from seeing benchmarks over the past year is that Angular is in a different league of performance from AngularJS, and the performance difference between Angular, React, and the various virtual DOM implementations isn't enough to really care about in practice. As far as TypeScript, there's little to no learning curve. All your existing JS is already valid TS, and as you go along you can incrementally add type annotations where needed and modify and refactor things to conform with the `--strict` compiler option and any [tslint](https://palantir.github.io/tslint) rules you find appropriate. For any project large enough to warrant a framework like Angular(JS) in the first place, I would say that TypeScript is absolutely a net positive for both productivity and software quality, regardless of whether you choose to migrate from AngularJS. For testing, if you use the Angular CLI, it automatically sets up everything you need and stubs things out. Speaking of which, if you do upgrade from AngularJS to Angular, [the official upgrade guide](https://angular.io/guide/upgrade) is great and I would recommend following the process exactly as described there, with one exception. It seems that the guide is a little out of date, as it makes no mention of the CLI and talks a lot about SystemJS (which isn't ever recommended over webpack or the CLI anymore). Once you get past the "Preparation" section, switch over to the [quickstart](https://angular.io/guide/quickstart) guide for information on getting started with the CLI, and then just copy all your code into the new project structure; that will save you a lot of headache and needless custom development / fiddling with tooling going forward.
Oh I get it you're trolling
&gt; ompl If it isn't to much of a hassle could you show me how to do that? I understand what i have to do and why but I can't say I have any idea how to implement it in my code. 
IDK about memory usage, but I switched to Code from Sublime specifically because it's less laggy on my crap laptop.
Okay, there are a couple of issues here. **First Problem** On line 84 you write this BreakStar(); However on line 88 you expect a parameter BreakStar(Star); This leads me to believe that on line 84, that you actually need to write BreakStar(this); **Second Problem** You are trying to use indexOf on an Object, this is what Star actually would look like if x and y are equal to 5. var Star = {x:5,y:5,height:8,width:8}; indexOf only works on the following var string = 'hello'; var boolean = false; var number = 25; So you can either create your own comparator or you can check on simple variables of star matches function arrayObjectIndexOf(starArray, searchTerm) { for(var i = 0, len = starArray.length; i &lt; len; i++) { if (starArray[i]["id"] === searchTerm) return i; } return -1; } [Credit to Joe on Stack Overflow](https://stackoverflow.com/questions/8668174/indexof-method-in-an-object-array) Add arrayObjectIndexOf() on line 89 Then write the following after arrayObjectIndexOf() var index = arrayObjectIndexOf(stars, Star.id); if(index !== -1){ stars.splice(index, 1); } But we are not done yet. **Problem 3** Star has no id yet. Star needs a unique id so we can find it in the stars array. Between line 8-9 add var starId = 0; //Global variables are bad Then between line 76-77 add this.id = JSON.parse(JSON.stringify(starId)); //Create a copy of starId to make sure that it isn't just a reference starId++; **Problem 4** JavaScript is camelCase, so all parameters and functions that aren't classes/object like Star is, should start with small letters e.g., on line 88 BreakStar(Star); -&gt; breakStar(star);
thats better haha 
I like your function and agree with your point, but disagree on the param naming. Ideally with ts I'd put (num: number) so it's even more obvious what is supposed to be passed in. But, this is minor and detracts from the fact that you answered OP's questions with a good example. Cheers!
I'm with you, and from the comments I've seen here and there around reddit, I think there's going to be a resurgence of apps getting developed in regular old JS. I mean, look at this: http://www.stefankrause.net/js-frameworks-benchmark6/webdriver-ts-results/table.html I think people rely WAAAY too heavily on these JS application frameworks. Vanilla JS is still faster, probably always will be. 
Have been converting a 2-year old code base written in AngularJS 1.x to TypeScript. Discovered previously undetected bugs due to static type checking. Many modules are written in regular Angular controllers, but TypeScript really helps refactoring the code base. My next plan is to migrate to the Component-based architecture. &amp;nbsp; Afterwards, I can safely upgrade to Angular 2/4/5 whatever it may be. It is extremely hard/impossible to rewrite all to a newer Angular version (or) move to React for a large code base. Your only course of action is slow and methodical evolution.
I know it's not supported by a big enterprise like Google or Facebook, but I'm still going to suggest switching to Vue.js. It's got the best from Angular, the best from React, without all the pain. For performance, Vue is faster than both Angular and React. And Vue is one of the most trending, rapidly growing JS frameworks in 2016 and 2017. Here's a fine comparison guide versus some popular frameworks out there: https://vuejs.org/v2/guide/comparison.html
The first thing you should do is measure (important word) if Angular's digest cycle is indeed "wrecking your fps". Quantify it. Profile it. Get a lot of numbers (user facing instrumentation is a great thing), break the performance characteristics into percentiles and understand a) if a problem really does exist, b) is it really the digest cycle and, c) does it actually negatively impact your users. In my nearly 20 years of doing this, I've been shocked at how many major decisions have been made (including by me) without having a true grasp of a problem space or any supporting evidence. As far as I can tell, all your follow up questions (aside from deprecation, which is reasonable) are predicated on a fear you haven't yet confirmed. Spend some time and do that first, you might just save yourself a ton of work.
@liming91 is right, react native seems to be the best solution for that.
This is hyperbole at best. It is not the "most trending" by far: http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core It is neither faster nor easier, nor "less painfull" whatever that is supposed to mean. Throwing blanket statements like that around doesn't help anyone.
Hi /u/b6utle5r, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/-VismundCygnus-, For javascript help, please visit /r/LearnJavascript. Thank you!
I don't think the OS is relevant here, just keep in mind you won't be able to develop for iOS without macOS. Or at least there's no official way to do it. 
Hi /u/Skeltal_Lover, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/anghari, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/LearningBus, For javascript help, please visit /r/LearnJavascript. Thank you!
1) Yes. It most likely will be unmaintained within the near future. 2) it depends on the application code. Most of the time it‚Äôs the application code that makes the application slow and not the framework. Certain Framework just makes it easier to write faster code. Definitely give react or the new angular a test run if possible. 3) absolutely. There are a few. Nightwatch is a good option. Easy to work with from what I hear. 4) again depends on your application code but most likely you‚Äôll see improvements. 5) N/A 6) coming from angular 1 you might also like vue.js. The most popular ones from my eyes are angular2+, react, vue. There has been performance comparison done with them, if you want to see some Ashoc comparison But note don‚Äôt base your decision just on performance also think about maintainability, ease of writing, how easy it is for semi experienced new engineers to pick it up, and it‚Äôs future plans and support. 
Bullshit
Indeed, lodash would be a great help. I just wanted to avoid it for the real "Vanilla experience."
Ah, I guess the point I didn't make is that you can do something like this: NODE_ENV=kiernan .env.kiernan PG_URL=....some experimental setup that I use I'm generally not in the situation where each live box has its own config. More often than not I have whatever cloud service I'm using inject the env var into the container and remove the need to pass a config file around. Is there a case that I'm missing where this advice is an anti-pattern?
Why do you need to add one span after another? What's the reasoning behind it ?
And I think they make some money doing it too.
You mean I can get paid to say stuff if cancer because people don't use it for its intended purpose?! 
&gt; Professional developer here. Good to know! 
/r/learnjavascript /r/learnprogramming
/r/learnjavascript /r/learnprogramming
/r/learnjavascript /r/learnprogramming
Meteor isn't a native mobile app tool, so probably not that one.
Building everything in vanilla js is not a valid solution. Companies do not have the time nor resources, plus it will mega complicate your code base. Relying on a framework isn't a bad thing while it's still supported/maintained. 
Answers below inline... 1) Should we get off AngularJS? I can't seem to find a reliable source for when it will actually become deprecated but I fear it will be soon. &gt;&gt; Honestly no, it won't be worth the time/money in my opinion and I've never seen a rewrite end up being "worth it" for AngularJS to React besides making DEVs happy. 2) If we should, how does performance compare between Angular 2+ and React? &gt;&gt; You won't notice it. 3) For end to end testing, is there something comparable to protractor for React? It would be harder to sell to business if we couldn't get as good end to end tests. &gt;&gt; Use wdio it's very similar. 4) Are there major performance gains switching from AngularJS to Angular 2+? &gt;&gt; You'll see them in print, but you probably won't "experience" them in your app 5) How long does it take to learn TypeScript? &gt;&gt; Not worth learning IMO, JS is moving much faster now. It's not worth the headache of learning, building, ect with Typescript. 6) Is there a front end framework we should also consider? &gt;&gt; Check out Vue
www.codecademy.com and www.w3schools.com is pretty good
All three of; React-Native, Ionic, and Nativescript are all mature enough for production value applications, there are other options but these are what seem to be the most active and well maintained. My personal recommendation would be either Ionic if you want a more batteries included solution, or React-Native if you have a decent grasp of modern JS and like to tinker with your tech stack a bit.
Thanks for the additional resources! 
I'm not a Junior dev. And I understand the frameworks just fine, I use react often at work, and angular. &gt;With large codebases written in plain javascript, you will have a lot of situations that will lead to buggs, a hard time changing stuff, more problems with browsers an what not. Yep, that's true **if you don't know how to code**. So now we've circled back around to the first point. What language do you think Javascript frameworks are written in?
While not necessarily a response to your question, you should consider looking into Progressive Web Applications. You'll get a great mobile experience with the bonus of your app working on normal browsers 'for free' without any code changes. https://developers.google.com/web/progressive-web-apps/ If you wan't a great example of what's possible with PWA, check out https://ride.lyft.com
I never said to build everything in vanilla JS, why are you putting words in my mouth? 
Lol at being prejudiced about tech. It literally is native code. Facebook say as much right at the top of the docs. It‚Äôs executed by native code, has all the benefits of native code, and uses exactly the same APIs. The reason Cordova etc aren‚Äôt considered native is because being in a web view puts that layer between the native code and your app code, and that brings other restrictions. I feel like you‚Äôre making up arguments in your head and arguing with yourself. You say I barely know RN because RN doesn‚Äôt fully implement CSS, well... go and reread my post and you‚Äôll see I said ‚Äúbasically‚Äù CSS. No reasonable person would think ‚Äúbasically CSS‚Äù means ‚Äúliterally exactly CSS‚Äù. You keep throwing out technical terms barely related to what we‚Äôre talking about, thinking it‚Äôs some kind of ‚Äúgotcha‚Äù moment, but it just shows your lack of knowledge. I‚Äôve been writing production RN apps for a year as a senior full stack developer. I don‚Äôt know anything about you, and I‚Äôm not an authority on RN, but judging by how you speak and how you turned my initially friendly replies into an argument because you didn‚Äôt understand and got defensive, I‚Äôm guessing you don‚Äôt know as much as you think you do. Maybe you would prefer to go and argue about this with Facebook instead, since they share my opinion. In future just do a bit of reading before piping up, and if someone replies to you in a friendly manner, even if you disagree with what they‚Äôre saying, you should be nice too.
Could you explain what you meant when you said this then? &gt; Learn to program in JS so you don't need a framework
I meant that you should learn to program in JS so that you don't **need** a framework. You could want a framework, or you could use one to save time, but you shouldn't be so completely reliant on it that you can't function without them. &gt;plus it will mega complicate your code base. Want to tell me what you mean by this? Because how complicated your code base is has nothing to do with your choice of framework or language.
So I did this, https://github.com/DatBoiSkeltal/game2/blob/master/JS/script.js Not sure if I did it correctly though since stars won't dissappear at all and I'm getting this error: https://gyazo.com/8af422fd4cad2ddf9658f515b8cdad52 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [DatBoiSkeltal/game2/.../**script.js** (master ‚Üí 1f2f952)](https://github.com/DatBoiSkeltal/game2/blob/1f2f9526bbfd66b78299bd34e9ed5d41d65285ef/JS/script.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dpx2jbj.)^.
**[Fixed your link? Click here to recheck and delete this comment!](https://np.reddit.com/message/compose/?to=Gyazo_Bot&amp;subject=delete&amp;message=delete%20dpx2jbv)** ***** Hi, I'm a bot that links Gyazo images directly to save bandwidth. Direct link: https://i.gyazo.com/8af422fd4cad2ddf9658f515b8cdad52.png Imgur mirror: https://i.imgur.com/KgZ7K97.png ^^[Sourcev2](https://github.com/Ptomerty/GyazoBot) ^^| ^^[Why?](https://github.com/Ptomerty/GyazoBot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/u/derpherp128) ^^| ^^[leavemealone](https://np.reddit.com/message/compose/?to=Gyazo_Bot&amp;subject=ignoreme&amp;message=ignoreme)
6 bytes! Holy Schmolly. Imagine if you had like 170 files... you'd be saving around a KB! /s
Have you tried a try/catch? 
This is a project at work. Similar to how you just said you use angular and react at work. I know how to write JS. If you try to implement things that angular or react do in vanilla js alongside whatever it is you're building your app to do, it will certainly add to the size of your code base and in turn make it harder to work on/ more complex.
Query for "this_value_i_want_to_change" using `querySelectorAll` then use `classList` to change the classes. [`document#querySelectorAll`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll) [`Element#classList`](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)
I modified main like this: function main(){ var def1 = webdriver.promise.defer(); try{ tester(1) .then(function(){ throw 'Yep, that broke'; tester(2).then(function(){ tester(3); }).then(function(){ tester(4); def1.fulfill('peanuts'); }); }).then(function(){ tester(5); }); tester(6); return def1.promise; } catch(err){ console.log('Catcher found an error'); def1.fulfill('pickles'); return def1.promise; } } It returned: point 1 point 6 Catch All found this Yep, that broke I also tried domains with the same result as try/catch. If I changed the throw to domain.emit('error') I could get it to run the domain.on('error') I defined, but it would go ahead and keep processing the function. I need the function to die if it hits a error and return something back. 
React native! There is also weex if you like vuejs but it's still in early development! It works, but it's really hard to make it work... Native script is nice but I personally prefer react native! If you wanna try something different try fuse tools! It's pretty neat
Remove line 99 **EDIT:** function player -&gt; function Player function star -&gt; function Star These are "classes" so they should start with capital letters. A Class is basically something that has properties or function, or both, e.g., x:cwidth/2 or this.x = x; or update: function(){ //code here } or function update(){ //code here }
Thanks, you've helped me a bit on the way, but when I try too access this error occurs: https://imgur.com/a/dgzDh 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/8rlB72w.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dpx4dr3) 
OH wow, I guess we're in agreement and your snarky bullshit was completely unwarranted.
We are currently migrating our site 1.3 to angular 4 (soon 5). Using the upgrade stuff provided it has been pretty smooth. New code is written in angular 4 and old code can slowly be ported over. No need to Big Bang or anything.
I'm not sure if your passing that huge string to querySelectorAll, but, you should be able to target the class on the div directly: document.querySelectorAll(".this_value_i_want_to_change").classList.remove("this_value_i_want_to_change").classList.add("something_else"); 
1. Yes. Angular might not be deprecated for couple of years, but most active developers shifted away already. 2. slightly. React is slightly faster, but most importantly it can render items smarter than angular 2 can. So while benchmark performance is on par, an app in react 16 will be perceived as smoother by the user. 3. we use Pupeteer and we couldn't be happier. BTW you can use protractor with react as well. 4. no 5. not too long. I'd advise to use it whether you choose react/angular2 6. only vue comes to mind, but I would not bother-react.js is the frontend king We are in the same boat-our old app is running angular 1.5 and we're rewriting it to react.js with mobx. MobX should be quite a good choice for you as well since you've mentioned you have lot of calculated data. MobX is the king when it comes to this. Just look at @computed decorator and you'll know what I mean.
Ah just tried this and got the same error. Lemme look into classList a min, normally I just use jQuery to do this stuff.
I was in this same position a few months ago. Based on my research and playing around, I decided not to recommend AngularJS (1.x) to Angular (2+). At the time (haven‚Äôt checked since): * the build files were huge * the DOM markup looked terrible and unnecessarily messed with (e.g. we‚Äôre changing `ng-if` to one of either `*ngIf` or `[ngIf]` (depending on if it‚Äôs a template or not) because fuck you, that‚Äôs why). * No guarantees on improved speed. * Based on a few forum posts, it looks like the Angular team sees the writing on the wall pretty clearly now, so longevity of the entire project isn‚Äôt guaranteed. So, that left us between React and Vue. We ultimately decided on React because of its incredible momentum and community size, *but* it‚Äôs worth pointing out that Vue is basically a less-bossy AngularJS 1.x, so migration might actually be pretty seamless. What I would recommend you do is, at the very least, get a Babel + webpack build pipeline in place *and* factor your Angular providers into ES6 modules (there are standards for how to do this with AngularJS 1.x on the web and it‚Äôs pretty easy). If you absolutely cannot do that, then Vue is pretty much your only migration option (it would be theoretically possible with React but honestly not worth the torture). Anyway, setting up that build pipeline and refactoring will put you in the position to slowly untangle Angular code from your business logic. Move all view logic (that creeped into templates) into services, etc., and pretty soon you‚Äôll be in a spot where you can, with a reasonable amount of effort, switch out the underlying view. 
Vue or Aurelia will be the easiest to migrate to. Angular 2/4/5 youll have to migrate to TypeScript (which is really great, but customers don't pay for static type checking) React should be pretty straightforward too although less easy than Vue or Aurelia. 
But creating the android application is part of the project. Yes I know about progressive web apps. I would like to try PWA with Angular or Vuejs.
But sencha doesn't have a option for the Linux.
Alright so I think the problem is that querySelectorAll returns a list of elements. When you try to use classList on the list of elements, it doens't work, as we have to use the classList on each element in the list. Here's a fixed example of how you could do that: https://codepen.io/anon/pen/KyyKxR
&gt;From Hawaii, we traveled to China, to Japan, South Korea agreed to harmonize sanctions and joined the United States and our great American dreams. And I have a great deal to do something very, very fast. It's a great one Oh dear god it's perfect.
Nice!
inb4 we all knew he means ES5 by Vanilla JavaScript.
Hmm, I get undefined... Is it something I am doing wrong: let div_list = document.querySelectorAll(".this_value_i_want_to_change"); for (let i = 0; i &lt; div_list.length; i++) { let ele = div_list[i]; ele.remove("this_value_i_want_to_change") } edit: Do you think it's the parameter within querySelectorAll() that is incorrect?
Aren't we waiting on Apple before PWAs can be a thing?
No problem, it's a good place to ask for help.
You are correct, currently to my knowledge there is no way of adding a PWA to the home screen of a stock iOS phone
Sencha?
Well if you compile all your CSS files into one, shave down your id and class names and just call "c"....
Was glancing at it and I see it uses `__proto__` a lot. Anybody else think this is bad advice? The [MDN article for `__proto__`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) makes it pretty clear it shouldn't be used and `prototype` should be used instead.
tl;dr; User Information: https://igpi.ga/whizzzkid/?__a=1 User Posts: https://igpi.ga/whizzzkid/media?count=3 Posts by Hashtag (nyc): https://igpi.ga/explore/tags/nyc/media?count=3 Demo: http://plnkr.co/edit/4oCwpbMm6p9cyJb1UWld?p=preview
You're calling `remove` on the element, not on `classList`
Also, service workers.
Whoops, not my intention... Yay! Now it's working! :)) Thanks everybody
Thanks a lot!!
Woohoo! Glad to hear you got it working!
This was dumb of my to post. Literally stumbled on this moments afterwards - https://github.com/typicode/json-server
Thanks for your help :))
I've yet to capitalize the classes but without line 99 it doesn't seem to do anything. I'll just edit this or something when I've fixed all the classes. Thanks for being so patient with me.
He does state this on a note: &gt; Note: even though the __proto__ property is standardized today, and is easier to use for explanations, on practice prefer using API methods for prototype manipulations, such as Object.create, Object.getPrototypeOf, Object.setPrototypeOf, and similar on the Reflect module.
Well, yes, but the thing is that it's not really suggesting you _use_ `__proto__`. It _shows_ `__proto__` to explain how things work, mainly because it's easy and practical when drawing the diagrams. In fact, it says as much in one of the notes: &gt; Note: even though the `__proto__` property is standardized today, and is easier to use for explanations, on practice prefer using API methods for prototype manipulations, such as `Object.create`, `Object.getPrototypeOf`, `Object.setPrototypeOf`, and similar on the Reflect module.
For what its worth, at my company we have an Angular 1.6 app that uses Components, Typescript and Webpack. While the team prefers React (I like Vue, also), our setup was close enough to Angular 5 that it made more sense for us to go that route. We don't have time to spend on a complete rewrite. I was able to follow the official docs for ngUpgrade on the Angular.io site and I now have the app working with ng 1.6 and ng5, using Typescript 2.6.1. Most of the code is ng1, but I have some ng5 components and services working in the ng1 app (including injecting ng1 services into ng5 services, and ng5 child components loaded by ng1 parent components). The app is now bootstrapped with ng5. We will likely continue to use the ng1 app modules and ui-router, and begin migrating the rest of the components and services to ng5. Once that is complete, I believe the best path it to bootstrap a new ng5 app to get the benefit of the cli, rewrite the router and modules to be ng5, then copy the components over as the last piece of the migration. Of course, this means that for awhile your app bundle is large, as it will be loading both ng5 and ng1 libraries. But since our app is internal, the extra potential loading time isn't a factor for us. 
This does look very exciting, but I don't really understand why the C++ syntax has to be so verbose. I think it should be possible to write something like this instead: using namespace dom; using namespace std::string_literals; html{head{title{"C++ DOM"s}}, body{header{img{attr{"src", "an_image.png"}, attr{"alt", "This is an image"}, callback{"onclick", [](auto ev) { console::log("clicked"); }}}, "Beautiful DOM from C++"s}, main{"This should be possible."s}, footer{"Bye"s} }; This just seems like a much better way to handle it than writing a complex preprocessor to generate code from a newly invented syntax. Also, returning raw owning pointers from everything [seem like a bad idea](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#r3-a-raw-pointer-a-t-is-non-owning).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [isocpp/CppCoreGuidelines/.../**CppCoreGuidelines.md#r3-a-raw-pointer-a-t-is-non-owning** (master ‚Üí df68bfd)](https://github.com/isocpp/CppCoreGuidelines/blob/df68bfdc5bff96cb566983726d7a5126bce4b2c7/CppCoreGuidelines.md#r3-a-raw-pointer-a-t-is-non-owning) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dpxfkse.)^.
Fuck it, i'll just download the file and make it work. 2 seconds
Found it. on line 87 you say breakStar(star); What you actually want to say breakStar(this); Because you want to break the current star you collided with.
i don't agree, but that does not mean i think we should type in the same file at the same time. it only mean we discuss our solution as one of us code it. It helps to see mistakes and review solutions made by the one typing. It can be fix easy syntax errors but also major things. It's not for every case, but when doing certain things like experimenting with features to solving difficult bugs, i think this is a really good way to do it. At work, i usually let my team assemble when solving issues to analyse it together and discuss the issue, debug it together. But this is first when one of us was not able to solve it singlehanded. 
In javascript. But if you understand this, then i have to ask, what would you do, if you cant use dependencies? I for myself would start implementing something like vue or react myself and i would do a crappy job, not because im a bad dev, but because its a lot of code that i would have to write that i dont have time for, better use what someone has already made.
Oh wow thanks a lot, I've been stuck with this part of the code for like a week but now it's fixed. Have a great remainder of your day! 
I LOVED his original set of posts and I can't wait to check this out and I'm so excited it's getting more exposure. His was the first that made me really understand prototypes. My most upvoted post is just a table of contents of his original work before he redesigned his site. Highly recommend this to anyone to read. It's in my top 3 resources along with Crockford's lectures and YDKJS. 
Hi /u/explicitownage, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Specifically, this has nothing to do with JavaScript, and thus doesn't belong here. 
A common pattern for HOC's is to add props or manage state in a way that can be reused between components. A common and simple example of this is translation. If you need a string translated into different languages in a component, libraries like [react-i18next](https://github.com/i18next/react-i18next/blob/master/src/translate.js) use a 'translate' HOC, which then add a prop that you can use to translate strings. Your actual component can be doing all manner of complex state management or be passed all manner of props. HOCs retain the functionality of the component while giving you the ability to do something very generic like translate text. Also check out https://reactjs.org/docs/higher-order-components.html if you haven't already
I guess its a school project and you know nothing about coding. So your teacher might ask about JSON.parse(JSON.stringify()), so you should probably google that.
My [React/Redux links list](https://github.com/markerikson/react-redux-links) has a large section on [React Component Composition](https://github.com/markerikson/react-redux-links/blob/master/react-component-composition.md) patterns, which includes Higher Order Components. The React-Redux `connect` function is a good example of a HOC. Dan wrote [a miniature version of `connect`](https://gist.github.com/gaearon/1d19088790e70ac32ea636c025ba424e), which illustrates how it works.
Depends on a lot of factors. Blindly choosing one isn't going to go well. I would rather use both to create a proof of concept application and write down your findings then evaluate which is best for your team.
&gt; Generates a trump-esque speech using a markov chain trained on previous speeches. They make about as much sense too. It does. This I can tell you.
If you want to set it without worrying about someone else being able to change it from the outside ( via `stats.name = 'John'` ), you can do the following function Person(stats){ this.stats = Object.assign({}, stats) }
A little late to the party but I had to make a first post on my new blog so [here it is!](https://gcauvet-dev.com/blog/?d=2017/11/16/21/21/51-how-to-change-element-class-without-id) If you want to skip directly to my solution I also made [Fiddle](https://jsfiddle.net/gcauvet/zxvz0h0c/3/) with ES6 syntax (especially the loop). Hope it helps ;)
A good programmer wrote that code long ago and keeps it with him forever. A good programmer doesn't rewrite the same code for every project. That's the fallacy redditors like to think but is never true.
Yep. You get it.
Well, seeing as we probably don't use half the features in any given js framework, I'd make a small bit of code to handle my specific use case and it would be SMALLER and MORE maintainable because it would only do the one thing we need it to do. Less dependencies make projects MORE reliable, not less reliable. And that's my whole point here. Pure JS might take more time, but it would be smaller and faster.
Pilsner or IPA!
I'm stronger in react so I choose react. That being said pick what you can dev in the best/fastest. Imho frontend frameworks often solve for the same (or very similar) issues so picking your favorite flavour is up to you / team
react
I'm also a fan of Maximilian Schwarzm√ºller's videos
Did his Vue course during the sale last year and just wrapped up the PWA course! Awesome stuff!
No sound, but a lot less advertisements http://sorting.at
If you're using Redux, you might want to browse through the [list of UI binding libraries for Redux](https://github.com/markerikson/redux-ecosystem-links/blob/master/library-integration.md) in my [Redux addons catalog](https://github.com/markerikson/redux-ecosystem-links). May not be directly data-binding related as such, but could be useful with whatever you're putting together, either directly or as inspiration. There's also a section of [utilities to watch the Redux store for changes](https://github.com/markerikson/redux-ecosystem-links/blob/master/store.md#store-change-subscriptions).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [i18next/react-i18next/.../**translate.js** (master ‚Üí c221cbb)](https://github.com/i18next/react-i18next/blob/c221cbb8b3d201f63c1830ce2782b2d5264852e6/src/translate.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dpxmgmb.)^.
I don't have a great understanding of Javascript and found that helpful. 
Vue
It is in the traditional way, as one codes and the other looks. But two people coding at the same time in the same place is another thing.
Sure, dawg
This is a talk from Destroy All Software, source: https://www.destroyallsoftware.com/talks/wat.
**Vue** ;-) But if my options really were only those two, I‚Äôd choose React. 
[removed]
Please don't arbitrarily capitalize properties and methods.
Not comparable. React is just the View component.
I tend to use arrow functions as described in the article when I know the function will be called outside the scope of the class. Sounds like the author is cool with this too, he‚Äôs just warning you from prematurely using the arrow function when not necessary 
My suggestion is to add an `autobind class` syntax to JavaScript.
Hey, thanks for your contributions to our [FAQ](https://www.reddit.com/r/javascript/wiki/faq)! (this was the only way I could guild you with creddits)
Why not use serviceworkers? It's built for this
Also broken without javascript - doesn't have SSR :) Then again you're not missing anything, the article doesn't have any content even if you get it to load. That said, next.js is great. 
hyperHTML has been getting some hype recently. 
and not capitalize constructor functions. 
Many codebases, even at larger companies, are starting to be written with ES6+, even though they most always transpile down to ES5 for browser support. Many project on Github are now being written in ES6 as well. I had a job interview very recently where I was prepared to answer questions with ES6 or ES5. Surprise! They wanted ES6. I did an ok job, but reverted to some ES5 style code because I'm not yet super confident with ES6. I also kinda goofed on how to use super() inside a class constructor. Slightly embarrassing... ES6+ isn't some hipster flash-in-the-pan language like Coffeescript. It isn't some framework-of-the-year like Vue is this year. It's now the core language! Time to get to know it better. :)
Good little solution. Used nginx to do similar to help protect a service that was vulnerable to high loads, as it could mitigate multiple calls and consolidate into one request.
Wouldn't using `prototype` instead of `__proto__` also work and be an even more practical way?
I didn't know that, thank you for the information üëç
Currently doing something very similar for static data that is only served through an api for consistency. Doesn't make sense to me to not cache these things, especially if the cache will improve the user experience and there is little chance of the data going too stale. 
``` try { const response = await fetch(...) if (response.ok) handleOk() } catch (error) { console.error(error) } ```
Douglas Crockford, apparently the inventor of the JSON concept, likes to say that JSON is a robust data exchange format which he "discovered" to be already present in JavaScript. It's simple, and genius: - javascript already has primitive values, numbers, strings, etc - these primitives can easily be organized into javascript objects - JSON is simply a formal way to express these primitive data types, in native javascript - it's become so popular that other languages can now read and write in JSON format This is a JSON document: { "alpha": true, "beta": 123, "gamma": "hello world" } You could easily prefix it with a variable declaration, and feed this into any javascript interpreter: const myData = { "alpha": true, "beta": 123, "gamma": "hello world" } 
OP ‚Äî I do find it odd that you're trying to make JSON fit into either category, "web technology" or "database tech". JSON supersedes both of these categories.
Fantastic! You should make this run on a little webapp, so the regular public can see it. I posted this issue: [Publish consumable "trump-chain" package onto npm](https://github.com/francisrstokes/trump-chain/issues/1) You should add an open-source license too, share the love!
1st page of Google [pretty much nails it](https://www.google.com.au/search?q=source+map+definition&amp;rlz=1C1GGRV_enAU752AU752&amp;oq=source+map&amp;aqs=chrome.1.69i57j0l5.4359j0j8&amp;sourceid=chrome&amp;ie=UTF-8).
Thanks for the feedback. By resume, i'm referring to an open source resume builder i'm deploying soon. Through a single JSON file, i'm able to display categorized skills, titles, roles, etc, as well as quantify experience levels per. I noticed that JSON was the leading skill, since i'd applied it to both a Web and Database categorization. Ex: https://imgur.com/pIUYTYa
Yea, it's not perfect, but it was an improvement. I do expect there will be further improvements, so it doesn't worry me much. I'm not a huge fan of a decorator, as extra syntax though. I kinda wish I could just use regular class functions. 
Don‚Äôt put JSON on your resume since it‚Äôs not a technology that takes more than a sentence to describe or more than a few minutes to learn. Listing it, from my perspective, buckets you immediately as a very junior engineer.
That looks like background syncing of data. This isn't that. With a few lines of code stale-cache speeds up your remote data accessing by a million times ( if you are lucky :), and can drop your bandwidth usage by a 1.5 trillion times (ok I'm exaggerating a little, who knows, its possible ).
In my professional experiences with both, I greatly prefer React over Angular. Angular tries too hard to do everything, and it doesn't seem to do any one thing very well at all. React isn't perfect either, and I only use it to render views. I use Mobx for state management, which is blissful compared to Redux. I suspect in a decade, React will die, giving way to standards like Web Components.. _if that ever gets off the ground..._
It's something i've seen on job descriptions, that and REST API. So i was interested in quantifying where my skills have actually been applied, like so: https://imgur.com/pIUYTYa (Not sure that JSON is automatically intuitive to everyone, but i could be wrong.) 
It's neither. It's a lightweight data-interchange format. Analogous to CSV, XML, YAML ... or a handful of other formats. It's simply a platform-independent way of moving structured data from one system to another. Its benefits are that it's not verbose (unlike XML) and is natively interpreted in JavaScript. Its format has long-been described in the JS specification and there are parsers available in every language that matters. It transcodes into a native hash structure in most languages that is very easy to traverse and "auto-discover" and is very "human readable".
Google and stack overflow
If I see JSON on a resume, I‚Äôm going to assume the candidate is padding the resume. It‚Äôs such a simple format, that it‚Äôs akin to putting, ‚ÄúI can declare variables,‚Äù on your resume. 
I don't understand this `response.fresh` stuff at first glance ‚Äî it doesn't seem simple or straightforward to me. Why can't the whole thing be something even simpler, couldn't we have a `cacheify` function which converts any generic requester function into one which respects the cache? // requester function makes http calls const requester = request =&gt; axios(request) // now we create a cached version of that requester const cachedRequester = cacheify(requester, localStorage) Above, the cacheify function is even provided the localStorage object, which could be easily swapped out for another storage mechanism. Next, making typical cached requests is easy ‚Äî but forcing a fresh response can be even simpler, as we just use the original requester for that: // lets prepare a request object const myRequest = {url: "/user", params: {id: "12345"}} // get data from cache (or make a call) const myData = await cachedRequester(request) // get data fresh, ignore the cache const myFreshData = await requester(request) 
Not sure that what we consider simple is actually so to every hiring manager. As in this visualization - https://imgur.com/pIUYTYa i'm actually charting out the major skills i needed to implement all my recent projects, for curiosity mostly, but also perhaps as a qualitative measurement of my experience for potential employers.
Hahah, cool cool. I'll cast my vote, that JSON is not appropriate for anybody to list as a "skill". It's actually a prerequisite to listing "JavaScript" as one of your skills ;)
Thanks I‚Äôll quit writing forever and go jump I a hole now.
Your project should help cut through the confusion, not add to it. Otherwise, why not complete the list: - HTML - CSS - QWERTY keyboards Hahah Try to focus on skills listed in the resume's of people who _actually got the job_ ;)
Several job descriptions actually do include HTML/CSS in their bulletpoints - none so far asking about QWERTY. The visualizations actually let anyone scan a single vertical list of skills (technologies), rather than jump around a PDF/DOC. I wouldn't know where to find the resumes of people who have been hired, to study their categorizations, but would be nice. By major skills, i was referring to my own, but i do dislike the, perhaps, pretentious nature of the word 'skill'. Maybe technology, capability, competency, dunno. 'Skill' has just been the default i've noticed.
Been doing this in TypeScript for a long time already ;) `static` is just a handy syntax to attach things to `Constructor`, instead of `Constructor.prototype`.
There is a prototype property on all function objects which is different from the internal proto property that all objects have, so I think it's the best way to be honest. 
&gt; I wouldn't know where to find the resumes of people who have been hired, to study their categorizations, but would be nice. you found us right here in this thread buddy! we're it! :D here's my resume, have a field day: [chasemoskal.com/work](http://chasemoskal.com/work) cheers! // chase
The `prototype` property is not the prototype of an object. It only exists on the constructor function and is used as a reference for what to assign as the prototype for instances being created by that constructor function. If you want the actual prototype of an object you would have to look at the `__proto__` (or use something like `Object.getPrototypeOf()`). TL;DR: The `prototype` is not the same thing as the `__proto__`.
Angular and don‚Äôt look back!
Every aspect of life doesn't need to be infected by peoples political opinions
Serviceworkers definitely does network caching. I was going to link to https://serviceworke.rs/ (it has a bunch of examples for caching/offline access/etc) but it's ironically down right now. Here's an archived version: https://web.archive.org/web/20170623214318/https://serviceworke.rs/strategy-cache-update-and-refresh.html I bet if you set something up (like what you made) using service workers, you'd get a lot of interest from the community. There aren't a lot of resources and libraries for it yet, and it's definitely the direction network caching strategies is heading.
To a hiring manager, basically saying you can work with APIs is adequate in saying you know JSON. I‚Äôve never worked with an API that returns something other than JSON (well, truthfully I‚Äôve integrated with services that return HTML but they were shit). It‚Äôs also a good talking point in discussing what technologies to used in said API consumption/production. I work in HR tech and the hiring managers I know are fairly tech savvy, don‚Äôt want to dumb it down too much or it will look like padding your CV.
You say infected because...you disagree with their personal opinion? Because only people who share your beliefs should program things for what they‚Äôre passionate about? Why ‚Äúinfected‚Äù?
Could you describe it as a markup language? That is essentially what I would regard it as being part of. It‚Äôs like the markup of data as HTML is the markup of content. Idk just throwing the idea out there.
Did you post this yesterday? https://www.reddit.com/r/javascript/comments/7d276w/wtf_is_a_source_map/
You do not need regex for this at all. If you want the inner nodes as strings you can access innerhtml on a query selection of lis or if you want the actual nodes use children or childNodes.
Angular, all day long. 
I‚Äôm missing the political opinion? It appears to be trained against actual speeches? Are you referring to the line in the Readme about how much sense trump makes in general?
I am a hiring manager. Writing HTML or CSS as a skill on your resume is better than writing JSON because it can take years to master practical use of these technologies. At best I skim a skills section but often just ignore it because it‚Äôs too often a vomit of terms. I‚Äôm much more interested in work history, including duration, and projects. These are more important because they demonstrate what you can do.
Any reasonable API will already provide client-side caching via appropriate HTTP response headers, and any reasonable client will respect those headers and serve up locally cached data on subsequent requests, refreshing automatically when the data is stale. So, I don't really get the use-case here, personally.
Even without the "+", the regex should work. Can you show us a bit more of the context of your code?
This is not what it does. It caches based on the entire request (params, method, etc). Same request, same data, then it gives the server a chance to decide is there's a newer response.
Ok you are missing something but its perfectly understandable. This is mostly for SPA, and its for optimistic caching. So you display the data from staleCache(request), hope thats its current, and then do a response.fresh() and display the data again. Hopefully the stale data is still good, and the user experiences minimal spinners. Then a potential fresh set of data comes in, and your fancy virtual-dom SPA library decides very quickly if an display update is even necessary, and if there's a change, you might get a quick refresh, or even something fancy like a cross fade, or new elements added to a list, etc.
Depending on how you choose to pronounce this name, it's gonna get real interesting when the third version comes out.
For most basics, you can use the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API). For example, you could do something like this: async function main() { const container = document.getElementById("root"); const data = await getData(); render(data, container); } document.addEventListener("DOMContentLoaded", main); async function getData() { const response = await fetch("https://my-api.com/endpoint?foo=bar"); const json = await response.json(); return json; } function render(data, container) { for (const {title, text} of data) { const div = document.createElement("div"); const titleElement = document.createElement("h2"); const textElement = document.createElement("p"); titleElement.textContent = title; textElement.textContent = text; div.appendChild(titleElement); div.appendChild(textElement); container.appendChild(div); } }
Why not write a simple script that you include? because whatever solution you end up picking, this is going to happen as well. Don't look at a framework or module bundler if all you're doing is a couple of AJAX calls. I wouldn't even advise an ES6 transpiler, a lot of the features you're going to use are supported anyway.
the await and async are more ES- then I know. haha that's ES7? Will have to look into those! Thanks for the tips on the fetch() api. Is it normal to resort to vanilla JS for DOM operations when using ES6+? 
After 1 year, v1.0 released with a lot of features, such as matches with object keys and using blood edge es6 capabilities.
&gt; Is it normal to resort to vanilla JS for DOM operations when using ES6+? Using a view library is totally optional. If needed, I would personally use React/Preact even for a small project rather than resorting to jQuery.
&gt; Is it normal to resort to vanilla JS for DOM operations when using ES6+? Using a view library is totally optional, but extremely common. If needed, I would personally use React/Preact even for a small project rather than resorting to jQuery. const Item = ({ title, text }) =&gt; ( &lt;div&gt; &lt;h2&gt;{title}&lt;/h2&gt; &lt;p&gt;{text}&lt;/p&gt; &lt;/div&gt; ); const Items = ({ items }) =&gt; ( items.map(item =&gt; &lt;Item {...item} /&gt; ); function render(items, container) { ReactDOM.render(&lt;Items items={items} /&gt;, container); }
I'm happy to see this, but why is it `native` pattern matching? It's not a language feature, so it's just a convenience library. If you just meant that it's written in javascript, then I don't understand you: there's no such thing as non-native thing in javascript by this standard.
Thank you for putting it here. Meteor is an extremely useful framework not only for frontend, but for backend development as well. It uses Node.js and MongoDB on the server-side and is considered as a full stack JavaScript technology. Moreover, it has the most stars on GitHub as a framework for backend development. Being released in 2012, it is still in the high demand among JavaScript and [Meteor developers](https://mobilunity.com/blog/how-much-does-it-cost-to-hire-a-meteor-js-developer-in-ukraine/) to the day. 
Hey Chase, thanks! Yes I'm creating a little web app from it today. I saw the issue about creating an npm module - that's definitely possible but there are two "obstacles". The first is that it uses node to load the training text from disk. This is easily solved by just bundling the training data alongside the module. The second is that the training data is probably not the best - I just scraped some speech transcriptions, and a good module would be able to take any training data (i.e. better speeches) and output the result, and at that point you actually just arrive back at the 'markov-chain-text' npm module I used in this project. 
Because the greatest pattern matching for Javascript uses sweet.js , not pure only Javascript. Creating a pattern matching, that powerful, which only with raw Javascript was the challenging job. That's the context why naming "native" is so important, it's the first library which achieve that on Javascript.
Sorry you got your feelings hurt.
Right. "First" "native", except for all these contestants: https://github.com/elixirscript/tailored http://pamatcher.js.org/ https://www.npmjs.com/package/pattern-match and https://github.com/roli93/js-pattern-matching which looks eerily similar to yours. Good job anyway.
Got it, thanks. I'm working on installing jshint for SublimeText.
ehh, it wouldn't be a markup language if we're going to be pedantic. at least in html the term 'markup' is in it, if you wanted to categorize json, it would be 'object notation'. but to regard the topic, I don't even think it's worth listing that you know json lol. 
Any of these mentioned libraries have the amount of features which `z` has, Have you spend some time looking for differences? Plus, is not "my" work, it's from community, which hopefully doesn't depend on your neglectful approval. Do you really think in a year of development I never did a 5 min. google search? 
Try to use innerHTML
I'm sorry if I came off arrogant, what I'm saying is "Z - a library for pattern matching" would have been a lot more accurate and lot less clickbaity. Good job to anyone who did it, it definitely has a cooler name than the others.
Minor dom changes can easily be done with es6. No need for extra dependencies 
Yeah, an HOC is just a component that returns another component. Or if you‚Äôre using it outside of JSX, a function that returns a component. Say you want to easily convert components into links but don‚Äôt want to go around adding &lt;Link /&gt; all over your JSX. You could create a simple HOC that checks whether or not a ‚ÄòlinkTo‚Äô prop has been passed to your component, and if it has, return the component wrapped in a &lt;Link /&gt;, otherwise return the component as is. HOCs are incredibly useful and cut down on the amount of code you use while giving you a single place to manage a common action that would normally have to be implemented in many different places (i.e. every component of want to link somewhere). Your HOC would look like: const LinkedComponent = Component =&gt; ({ linkTo, ...props }) =&gt; { if (linkTo) { return ( &lt;Link to={linkTo}&gt; &lt;Component {...props} /&gt; &lt;/ Link&gt; ) } return ( &lt;Component {...props} /&gt; } And you simply wrap your component class/function with the above HOC: const LinkedButton = LinkedComponent(Button)
I don't, I always start with a lowercase, and if I have two words, ex firstName, the second word starts with an uppercase.
[Codeschool.com](https://www.codeschool.com) is pretty good starting place, and their courses are [free this weekend](https://www.codeschool.com/free-weekend).
no big deal I guess, since I'm not taking a TOEFL. want to = wanna
No ie support fetch, shame. 
Come on, does async have any support?
I wouldn't do that.
[removed]
Lodash functions nare typically more performant than native and that would be a quick conversion.
Bleeding edge. Blood edge sounds pretty cool though
All modern browsers or it can be transpiled
/gi?
There's a polyfill
There is nothing bad with code review, but AFTER coding, not while coding. Nothing is more distracting and annoying than having someone looking at your screen all the time while you try to do your work.
&gt; It can be fix easy syntax errors but also major things. That‚Äôs what the linter and unit tests are for ‚Ä¶
We don't need a dedicated syntax for that, just decorators. There are already a few decorator libraries that will bind all class methods to itself.
[removed]
Right, the project I'm doing has to work on ie8, it's for schools.. Always the biggest entities lagging behind the most. Is the polyfill for ie8 also?
How is this different from https://github.com/facebook/dataloader?
https://www.npmjs.com/package/babel-plugin-loop-optimizer
That said... I would avoid doing this at the transpilation stage. Simply write code without using map/ filter. I personally prefer using `for..of` loops for map/ filter.
[removed]
MDN itself says you should never use it though. Why not extend `prototype` from the constructor function is what I'm saying though. That's what you'd reasonably do.
Could you possibly use .bind to partially apply your callback functions? You could define the function outside of the map, reduce or filter loop, then use bind to apply the parameters which change. For reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
I'm not quite sure what you mean by "extend prototype from the constructor function". Maybe I'm just missing the context. I was just saying he uses the two terms for the sake of clarity. You never use proto in real code because if you do it slows everything down because the interpreter can no longer make certain assumptions about our code and a lot of optimizations go out the window.
If you want to support ie, why don't you use ajax lib directly, you still need a lib or polyfill 
I've always wondered about these functions. I use them all the time and new that they were slow. My assumption is that because they can be executed in parallel, JavaScript engines would start integrating parallel processing hardware into the implementation. Am I totally wrong?
Templates are anything but light weight. I'd use functions, or hyperscript, or jsx to construct a lightweight v-dom. Then a small engine to render it. Look into something like preact, their entire framework is under 3kb, the engine alone is less than that.
map/filter/reduce do tend to be slower than for loops, but for most applications - it's not that big of a deal. If you are having performance issues - there are probably other optimizations that you could be making instead. Also, if you have a rather long functional chain - if possible - moving filter as high up the chain as you can can help (why map a 10,000 collection to then filter it out to 10 things - see if you can filter first). That said - if you do hit a serious bottle neck - then breaking the right spots out into a more imperative for-loop is fine. For the OP - this could be a real concern, although I've found that for most of the stuff that I've been working with - the other gains I get from a more functional approach are worth the performance tradeoffs.
Use babel, target node 0.12 maybe?
How can you be sure the time is in overhead of map/filter/etc as opposed to the fact that they are called many times + the cost of the functions passed to map/filter?
I mean, service workers do exactly what you're describing in terms of caching. You make a fetch initially, your service worker stores it in a cache and returns the data to you, and next time you make that request, it's cached.
you mean the vanilla xhr. library? I can do that! thanks
I totally agree with you, the cost of invoking map vs a loop is not going to be changing to much.
They have not expressed any intent to make these calls parallel. The amount of static analysis it would take to determine that, is not something the engines seem to be interested in doing. On a side note it's fairly easy to write your own forloop based reduce, which you can use in place of the foreach and map functions.
That's one of the issues, we cannot be 100% sure, but more testing is needed to find out the actual reason. An automatic conversion tool would help a lot here. That said, I've developed mobile games before, and encountered similar cases, e.g. like removing `.` property access and function calls gave FPS improvement noticeable with unaided eye. So I have a feeling that in our case, where the simulation must run at constant 30 FPS, the issue may be similar. Of course the checks and transformations performed in those filter and map functions cannot be removed, but the function and closure creation overhead can. Besides, `map` and `filter` create new arrays each time, and this allocation could be avoided (in languages like Haskell this is called stream fusion and is performed automatically, I was expecting to find a similar optimization tool for JS).
&gt; the cost of invoking map vs a loop is not going to be changing to much. It depends - map takes a callback, which means a function invocation, scope changes and all sorts of other complexities behind the scenes. Of course it's *possible* that ES6's introduction of `let` means that these days a lot of that setup has to be done for any block in the language (ie, not just entering a function), but all things being equal calling functions certainly has an overhead that a regular loops don't.
or just use an older version of jquery. 
Thanks for your response. Given the recent growth of JS static analysis tools, I was expecting to find at least something related to directly optimizing things like this (as opposed to minification, etc). I totally agree that performance-critical code should be written appropriately from the start, but in this project it was not the case. The team was not very experienced and relied too much on advice like "micro-optimizations do not matter". I actually start to think that writing our own optimization tool may be a viable approach here, considering that this could benefit other code bases as well.
&gt; My assumption is that because they can be executed in parallel Is that true? Many languages/systems use `map` because *in principle* it allows or parallelisation, but nothing in Javascript says you couldn't use that `map` callback to modify closured-in variables or create all sorts of other side-effects, so parallelising them seems disastrously dangerous. Sure it's *bad form* to use `map` callback functions to cause side effects in the enclosing scope, but when you're implementing a language's runtime you don't get to break code that's *valid* according to the spec just because it's stupid.
Just few corrections 2. No need for function arrayObjectIndexOf, look into https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex 4. &gt; JavaScript is camelCase, so all parameters and functions that aren't classes/object like Star is, should start with small letters That's not true at all. It's a **convention** to write class* names in PascalCase and function / variable names in camelCase, but class* / function / variable names can contain an combination of unicode **letters**, dollar sing ($) and underscore as long as they are not a reserved keyword. So breakStar, BreakStar, break_star etc. are all correct. * there are no classes in Javascript, just functions with extended prototype. ES6 introduces class keyword which is just a syntatic sugar.
I would be interested to see how it comes out, keep us posted if you have time :)
I think we've already done this where possible, but most of the parameters can change on each iteration, so it's not possible to just bind them. Still, this is a good advice for anyone in a similar situation.
Parallel Map Example: async function processArray(array) { async function delayedLog(item) { item *= 10; await new Promise(resolve =&gt; setTimeout(resolve, Math.random() * 1000)); console.log(item); } const promises = array.map(delayedLog); await Promise.all(promises); console.log('Done!'); } let arr = []; for (i = 0; i &lt; 10000; i++) { arr.push(Math.random() * 100) } processArray(arr);
If JavaScript static analysis ever reaches the required quality, stream fusion (the optimization Haskell uses, basically combining all loops and array allocations into one, or as few as possible) could also be a valid approach here.
I would love to see a babel plugin that did just this: a transformation pipeline plugin that transforms to the most performant code.
&gt; it's likely that the work you are doing inside them is more the culprit Of course the logic inside these functions is more time-consuming than the `filter` and `map` calls themselves, but we've already written this software in other languages, so there isn't much to optimize in the overall architecture or algorithms. The code is JS-friendly, does not break V8 internal types and other things. It's just that almost all loops are written using `forEach`, `map`, `filter` and `reduce`, and the code base is big. It is trivial to rewrite, but very time-consuming. I've mentioned in my other comment that I already encountered cases where simply removing function calls overhead gave a significant performance improvement on mobile. This makes me think that the optimization I'm talking about can help here.
I don't like writing frontend in ts, the only thing I prefer with angular is the material framework of it. I prefer Vue over React over Angular. Vue takes the good part of angular (2-Way Data Binding) with the good parts of react (template/component based syntax without jsx and the virtual Dom) and the best part that Vue also has a great material framework (Vuetifyjs)
Trying to perfectly format excerpts. let excerpt = article.article.replace(/\s?&lt;h[0-3]&gt;[^&lt;]+&lt;\/h[0-3]&gt;?/g,'').replace(/&lt;(?:[^&gt;=]|='[^']*'|="[^"]*"|=[^'"][^\s&gt;]*)*&gt;/gm, '') excerpt = truncateStringToWord(excerpt, 160) // remove js formatted newlines Space out periods without spaces i.e. He wept.And he also... = He wept. And he also... excerpt = excerpt.charAt(0).toUpperCase() + excerpt.substr(1).replace(/\n/g,' ').replace(/\t+/g, "").replace(/\n\n/, '').replace(/\.([^\s\d])/g, '. $1') // space out Remove special chars w/ exceptions for special punctuation no tabs .replace(/\)([^\s\d])/g, ') $1').replace(/[^a-zA-Z0-9\s'"().,‚Äô‚Äì:]/g, '') // double space space in between upper case lowercase I.e. HelloWorld = Hello World .replace(/\s\s/, ' ').replace(/([a-z])([A-Z])/g, '$1 $2') // Horoscope Posts //cut more than one space down to one space .replace(/([A-Z])([()])([A-Z])/g, '$1 $2$3').replace(/[ ]{2,}/g, ' ')
Thanks for the link anyway, I'll check it out, maybe we can adapt it to our needs! &gt; Simply write code without using map/ filter. I would totally do that if I was in charge of the project from the start, but unfortunately the current team only now realized that these micro-optimizations may actually matter when there's so many of them. It's not even hard to rewrite things with for-loops, but it's time-consuming. And yes, `for...of` is a very nice ES6 feature which does not include a performance overhead.
The fact that you spend your time in the `map` or the `filter` that doesn't mean that the `map` or `filter` functions are actually slow, but the predicates and transformators you use within them, so I'd recommend reviewing them and not really spending time microoptimizing iteration.
Thanks for the suggestion. I doubt that it will give a significant improvement over native methods, but I'll benchmark it.
Well, transpilation would be the only automated way to attack that IMO. If your code is that big, and there isn't a transform out there to fit the bill, it's not *that* hard to write your own. Look at babel, or [Unified](https://unifiedjs.github.io/) to write your own transforms.
These functions **are** slower than a loop, but it's trivial to write any of these as a plain loop. Why don't you just do a test case where you write one out manually and test it? It will take you 10 minutes. Also I suspect (correct me if I'm wrong) you're writing it like this: const funcThatIsCalled60fps = () =&gt; arr.reduce(() =&gt; /* stuff */); If so, try writing it like this to avoid creating a new function every tick: const stuff = () =&gt; {/*stuff*/}; const funcThatIsCalled60fps = () =&gt; arr.reduce(stuff); 
Can you rewrite a smaller portion of your code with loops and benchmark that against the current version - you don't need to rewrite everything but still get a suitable amount of data to make a decision before committing to a big rewrite 
Another advantage of ServiceWorker API is that its per-origin cache space allocation is independent of the per-domain localStorage cache space allocation.
You can read a full discussion of the differences here, scroll down past the first section: https://dev.to/voodooattack/cloudpresspart-2-cmx-the-user-friendly-variant-of-jsx-boo
The thing is, this is not the first time we write this simulation, so the overall architecture and algorithms themselves are really optimized already. The versions written in static languages that optimize these `map` and `filter` calls during compilation (e.g. Haskell) are quite fast. The predicates and transformations have already been reviewed, and since that wasn't enough, we are turning to micro-optimizations now. I've mentioned a case where this helped with mobile performance in other comment.
&gt; I would love to see a babel plugin that did just this: a transformation pipeline plugin that transforms to the most performant code. That would be very nice indeed! &gt; As an aside, have you looked at running your internal loops at different frame rates? Possibly limiting rendering to 45fps, logic to 30fps, physics to 25fps, etc. Yes, we've investigated this, but the core simulation must run at 30 FPS min, and we're having problems specifically with it. Still, thanks for the response, this is a good advice.
This is purely from what you've written and without looking at the code I could be completely wrong but it sounds like it's been engineered incorrectly. I would take a good look and make sure there aren't other solutions e.g. calling the functions less. Again, can't really help without seeing the code base.
This is not the first time we write this simulation, it its performance is totally good in other languages, the architecture has been reviewed many times. We've also made sure that we don't break V8 internal types and other engine optimizations here. But the JS version has been written with "don't ever micro-optimize" advice in mind by a team of good, but not very experienced developers. That's why I suspect that if the whole code base was optimized (even if micro-optimized), the overall performance would improve significantly. Besides, I've already encountered a similar case in mobile game development, reducing function calls helped a lot there.
I think that's what we will be doing if we don't find an automated solution.
&gt; These functions are slower than a loop, but it's trivial to write any of these as a plain loop. Why don't you just do a test case where you write one out manually and test it? It will take you 10 minutes. Well, of course it's trivial to test a single function. The question is whether a large amount of micro-optimizations in a large code base will give a large performance improvement. Your advice about not creating functions is good, but this is something we already do where possible. In most cases, though, the parameters may change on every iteration, so the callbacks are closures and cannot be cached.
sorry bro but I don't get it.
Figured it out. If it works before that truncate function not after. Not sure why...
&gt; Note: even though the __proto__ property is standardized today, and is easier to use for explanations, on practice prefer using API methods for prototype manipulations, such as Object.create, Object.getPrototypeOf, Object.setPrototypeOf, and similar on the Reflect module. 
Yeah, writing our own optimizing transform may even be viable in this case. Maybe we'll do it if we find no other solution.
Can't memoize anything?
I didn‚Äôt post to HN, someone else posted my article. I did post to r/JavaScript but only once. Why? 
Most of the things can change every frame, so there's not a lot of assumptions to be made about our data. We've already implemented memoization where possible.
findIndex does not work in Internet Explorer. And thanks for the clarification. Coming from a Java background, it just felt like they had similar code convention, guess i should read more into the documents. And yes, JSON is slow. That way is much faster.
neat. i made an html to markdown converter a while ago but this seems more thorough :) https://github.com/leeoniya/reMarked.js
It's exactly what it does. The author just doesn't appear to be aware of how Etag/If-None-Match/If-Modified-Since/etc. and HTTP level caching in general works. If the data hasn't changed, the server will reply with 304 Not Modified, and the client is free to use its cached version. The caching itself is already handled by the client. This just reinvents the wheel, so to speak.
It sounds like you don't know what you're doing. The problem is what you're doing at each iteration. If it's too taxing to compute the whole array at once, you can RAF, or defer computations with requestIdleCallback.
Some operators like `Array.prototype.filter()` have been [proven to be slow](http://www.monkeyandcrow.com/blog/why_javascripts_filter_is_slow/). Libraries like Lodash do really solve those issues and can be faster than the native ones. However, a common problem for both the `Array.prototype.*` methods and Lodash is that they generate a new array for each step, which could degrade performance. Libraries like [Lazy.js](http://danieltao.com/lazy.js/) try to solve this issue. For demonstration, I wrote a function that generated an array with 10 million random items in it, then I used a `map()` operator to multiply it by ten, and then a `filter()` operator to filter everything below a million. Then I tested it out and obviously, using `for()` and `if()` is the fastest, but surprisingly, using Lazy.js returns similar results. Lodash is a bit slower, but is still a lot faster than using the `Array.prototype.*` methods. [Demo](http://jsbin.com/ricutixuti/edit?html,js,console,output) [Benchmark](https://jsperf.com/array-processing-libraries) I personally wouldn't rewrite everything to `for()` and `if()` since that's a huge cost. I would rather suggest using Lodash or Lazy.js. Even though Lodash is still slower, it could still perform a lot better than writing it using `Array.prototype.*` functions and it is used quite often in comparison to Lazy.js, which is also still a 0.x release and could be unstable.
The real problem imo is constantly creating intermediary arrays.
Sure, in a world without optimizations, yeah, a function is going to be slower than a loop. But V8 (and other JS engines) do boatload of optimizations: given how easy it is to convert a `.forEach` to a loop, I'd be rather surprised if those optimizations aren't being done automatically. It'd be a real waste of time to go through a large codebase and convert all of those to loops, only to discover that you don't get any benefit because it was already being done by the V8 compiler.
It will, because Lodash operations are lazy if you chain them (or compose them via lodash/fp), which means there are no intermediate collections.
That's actually not parallel at all, see setTimeout just delays the execution of the code but on the same thread. For your example to be parallel, it would have to, inside the delayed log function, create a webworker give it some value to execute on, and await the response. That strategy most likely wouldn't work because it would also require you to create way too many workers. In my experience the best way to accomplish parallel processing is to create N workers (depends on the machine) then split the input array into N chunks and have each array be handled by a worker then combine the results.
That too, but you could still do that with a loop solution, so it's not a definite difference. Certainly though loops allow you to *avoid* allocating additional memory if you don't want to by doing destructive operations in-place, which *allows* (but does not guarantee) them to be more efficient.
All true but my guess is if he is doing anything substantial the overhead is less the 0.0001% of the time it takes to execute.
Yes! Allocation is the slowest thing out there!
What if you perform the extensive calculations on the server? Is that an option? It might benefit you to utilize a performative language for calculations(ex C++) or try to reduce the calculation count per iteration or even go for probabilistic estimation than actual precise calculation. Are you able to go into more details about what you‚Äôre calculations are? Also map/reduce/filter returns a copy. Maybe it benefits you to rethink how your data is structure so it can be manipulated in place. I bet the copying is huge part of performance hit as well. 
It's super easy to set up Babel async-regenerator transpilation and a promise polyfill for nearly universal browser support.
browser support is not that great :(
If you know that they're not sparse arrays, you should create your own versions of those functions. It's like twice as fast because the native implementations need to handle edge cases and sparse arrays, which is more time consuming.
Not really related, but why are you porting code to JavaScript? Given certain performance requirements JS would not be my first choice -- especially if you already have a binary. If you're making something like an electron app, you can try and ship the binaries in the release and use JavaScript as a wrapper. Also, have you looked at PureScript or GHCJS?
Are you assuming you need regex because you **can't** use jQuery? 
&gt; the parameters may change on every iteration Mmm... I've read you saying this a number of times throughout the comments. Now, I'm not asking this to suggest you're doing something wrong or anything, but just out of curiosity, because it seems _peculiar_ and not sure I'm understanding exactly what you mean. So, would you mind showing one such instance of the code where this occurs? If this is not possible, it's ok, I understand. It's not a big deal, just curiosity. --- Having said that, for your intentions of transforming the code, you may have some success going with a [Sweet JS](https://www.sweetjs.org/) macro. I haven't searched much and found an example macro that transforms an `filter` into a for loop [just here](https://gist.github.com/andreypopp/8978374). It should be easy to adapt that and create `map` and `reduce` macros. It shouldn't take much to have this working.
You've identified these functions as "too slow", so it's a fair assumption on my part that finding a ~5x speed increase by converting just one of these *would* give a large performance improvement. If not, it's probably not the case that these functions are too slow.
That's why I suggested converting and testing one. Also there are plenty of benchmarks out there that prove if there *are* optimizations here, V8 isn't doing them. `forEach` is consistently slower than a for loop, fact. That doesn't mean I don't use them, I do, but then I'm not claiming they're "too slow"
There is an ie8-fetch polyfill that uses es5 shim/sham and es6-promise polyfills: https://www.npmjs.com/package/fetch-ie8
Are you needlessly recomputing values that could potentially be stored in intermediate models which are replaced when stale? Perhaps you can estimate some of these values rather than iterating over the full set?
That's true but keep in mind that modern JS JITs are capable of inlining hot paths like this. The first step would be to manually replace some of these instances with `for` loops and profile again to verify that callbacks are the culprit. If that's the case then you need to figure out why JIT doesn't optimize them. [V8 bailout reasons](https://github.com/vhf/v8-bailout-reasons) would be a good place to start.
[Transducers](https://github.com/cognitect-labs/transducers-js) are a nifty tool for composing `map` and `filter` operations to avoid that problem: let {map, filter, comp, into} = t; let inc = (n) =&gt; n + 1; let isEven = (n) =&gt; n % 2 == 0; let xf = comp(map(inc), filter(isEven)); console.log(into([], xf, [0,1,2,3,4])); // [2,4]
Sweet :)
 const temp = document.createElement('div'); temp.innerHTML = yourString; return Array.from( temp.querySelectorAll('li'), li =&gt; li.innerHTML ); Totally untested, but that‚Äôs how I‚Äôd do it. 
The term people in the JavaScript community have used for something like this is "codemod." The gyst is: break existing code into an ast, perform some transforms, generate new code from the transformed ast. I'm not sure if there are codemod in existence that do what you want, but there are a few talks about how people have used them going around. One tool people used can be found here: https://github.com/facebook/jscodeshift Here's someone walking through the steps of a simple mod to turn concatenated strings into template literals: https://vramana.github.io/blog/2015/12/21/codemod-tutorial/
This isn't parallelized, it's just non blocking.
Yes, ofc. Linter does not catch everything and this was not the major points but a minor one
It's actually pretty good now... All modern browsers support it. Localstorage certainly isn't any better. But since this is just for a caching layer it doesn't matter. 
These links are invaluable. Thanks!
&gt; Upon examination, it turned out that most of the time is spent in map, reduce and filter functions Sure, but the functions themselves are never the issue. Intermediate allocation can be a *slight* performance hit at frequencies like you're talking about, but it's not going to be raising any red flags. Your problem is almost certainly your algorithms, and your difficulty in finding a solution is being caused by confirmation bias (having already written off the algorithms as "already optimized"). Without access to the code, all anyone here can do is trust that you're right about the algorithms and start rattling off micro-optimizations for you to try, but that's an obvious dead end. I would suggest taking a more skeptical look at your existing assumptions - namely that the algorithms aren't the issue. It doesn't take much of an oversight at 30-40Hz to become problematic, and y'know... Occam's Razor.
It would be cool to crawl an entire website with this. For example, if I'm building a new website for a client I could run this to pull the content for articles and pages to something clean that can be imported in to their new CMS.
Well, of course this possibility always exists. If we find a way to optimize the algorithm further, it will make everything easier.
How does this avoid the intermediary arrays?
These are good optimizations, but we've already applied them wherever possible in previous versions. But those versions were written in compiled languages, and using higher-order-functions like `filter` was basically free.
Also, from what I remember, lodash uses native while loops under the hood because they are more performant than native for loops. 
&gt; So, would you mind showing one such instance of the code where this occurs? I cannot give snippets from the actual code base, but the example may look like this: function findCorrectFoos(foos, bars) { return foos.filter(foo =&gt; bars.indexOf(foo.bar) &gt;= 0); } Here, the callback captures `bars` and thus becomes a closure. It cannot be created outside of `findCorrectFoos` function. This particular snippet also has m*n complexity, but that's another, unrelated issue. And thanks for reminding me of SweetJS. I'm not sure if it's powerful enough for our case, but I'll look into it further.
It pulls one value through map/filter/etc. "pipeline" at a time, and puts the result (if any) into already-allocated collection (first argument to `into` in the example).
It has to be an in-browser app, so JavaScript is the only choice here. There are asm.js and WebAssembly, but the latter is poorly supported, and with the former we haven't been able to achieve the desirable performance using Emscripten. It performed significantly slower than hand-written JS in recent browsers. I've used PureScript some time ago, but it didn't perform particularly well back then. I need to check it out again, maybe they've made some improvements.
This may be worth trying, but I'm afraid the performance gain may not be enough. I'll need to benchmark it, though.
I see.
Does extract also embedded contents? 
My initial thoughts are... 1) does this really reduce boilerplate? Looks extra boilerplatey to me. 2) perhaps I just don't run into as many async issues as other people do with normal promises and the occasional observable. seems like a lot of overhead just to deal with async state transitions Feels like a step backwards from the nice functional react, "everything is a component" mentality which I think is a great trend. Writing large scale applications with "Component" as the only concept seems doable, and keeps things simple from my experience. Controllers + view + model, dependency injection.. all of that adds cruft that makes it harder to reason about when the code starts to scale up
Thanks, it's really nice to see a benchmark of all the things mentioned. There is definitely an improvement when using Lazy.js, but native loops are still an order of magnitude faster. Speaking of our amount of items, we start with some large arrays (thousands of items), but after some filtering, only a part of them is fully processed.
Server-side calculation is not an option right now because of infrastructure requirements and increased setup difficulty. But it's certainly a viable approach, and we may use it in the future. In-place manipulation could be done only on the level of individual functions, but this is actually what I'm talking about: replacing `map` and `filter` with loops that manipulate items in-place.
How big are these arrays? Would it be faster to convert `bars` into a `Set` and do existence checks with that instead of `indexOf` ?
I think this is pretty easy to test. In the app I'm working on we were looking at performance of forEach vs a loop, and found that it was much faster to use forEach, whereas much of what you read elsewhere shows the opposite. I would just test to your specific use cases.
Really nice! About the tables, let me check; I need to find an article with tables first :))
Yes, it can be done. You need to crawl the articles list first. Then you need to make sure that an article is extracted correctly by default. If not, you can add a new expression in the [A-extractor](https://github.com/croqaz/a-extractor) database. Then you call `clean-mark` on each article. This way you can crawl an entire site, if they don't ban your IP...
I'm not sure what you mean exactly. Can you share a link with "embedded content"? You mean, like an iframe?
This is something you use in a node server. Something like express.js or koa.js. It looks like the last update to it was before node 8.x came out, and the version number is "0.1.64-pre" - you might just want to use his/her code as a reference and write what you need yourself. 
The replace statement itself works for me, so the tabs in question seems to be added later. Maybe one of the spaces is actually a tab?
You can't parse [X]HTML with regex. Because HTML can't be parsed by regex. https://stackoverflow.com/a/1732454
You should look into memoized functions and if you were using redux, I would recommend selectors to handle this. Basically, make sure that you don't compute the same results twice. If you have a function and you are passing the same params that you have already passed before, a memoized function will simply look up the saved result instead of doing the calculation again. 
I‚Äôm not aware of such tools as i haven‚Äôt done much research but one option is to override those map/filter functions globally and reimplement them todo inplace just to see if there is performance gains from them. Thereafter if beneficial further research or implement such a tool? 
Benefits? JavaScript was originally built in 10 days, and is now maintained by committee. It shows.
TL;DR: We introduced some new syntax, and for historical/backwards-compat reasons kept the old one around. Longer version: Well, there are two ways of creating new functions in JavaScript: using the `function` keyword, and using arrow syntax `() =&gt; ...`. Python also has two different ways of creating new functions: using the `def` keyword, and using the `lambda` keyword. The major difference (and possible confusion) are the *cases* in which you would use the different options. In Python, there's only one way to create named, stand-alone functions (`def`) and only one way to create anonymous functions (`lambda`). In Python, you would use the `def` keyword to create stand-alone, named functions like so: def greet(): return "hello, world!" And likewise, in JavaScript: function greet() { return "hello, world!"; } In Python, if we wanted to create an anonymous function, we would switch to using `lambda`: greet = lamda: "hello, world!"; However, in JavaScript, we could continue to use the `function` keyword: const greet = function () { return "hello, world!"; } So up until ~2015, JS and Python had about the same number of ways to create new functions. However, JS had some surprising behavior when it came to attaching functions to objects, and using the `this` keyword. Notably: const user = { name: "lilactown", greet: function greet() { return "hello, " + this.name + "!"; }, }; const otherUser = { name: "CluelessGoals", }; user.greet(); // will return "hello, lilactown!" const greet = user.greet; greet(); // will return "hello, undefined!"; otherUser.greet = greet; otherUser.greet(); // will return "hello, CluelessGoals!" Basically, you can "tear off" a function that lives on an object, and reassign it to another object, and `this` inside of the function body will refer to whatever object it is attached to. This can be useful in certain use cases. But it was (and still is) surprising to people at first and made other use cases very clunky, like trying to pass in a method to a higher-order function: const mathHelpers = { add: function (m, n) { return m + n; }, double: function (n) { let answer = 0; for (let i = 0; i &lt; n; i++) { answer = this.add(answer, 2); } return answer; }; [1, 2, 3].map(mathHelpers.double); // we expect it to return [2, 4, 6] but actually throws an exception!! To remedy this, *arrow functions* were added to the language to make `this` always equal the value at the definition site, not the call site: const user = { name: "lilactown", greet: () =&gt; "hello, " + this.name + "!", }; const otherUser = { name: "CluelessGoals", }; user.greet(); // will return "hello, lilactown!" const greet = user.greet; greet(); // STILL will return "hello, lilactown!" otherUser.greet = greet; otherUser.greet(); // AND YET AGAIN will return "hello, lilactown!" And our second example: const mathHelpers = { add: (m, n) =&gt; m + n; double: n =&gt; { let answer = 0; for (let i = 0; i &lt; n; i++) { answer = this.add(answer, 2); } return answer; }; [1, 2, 3].map(mathHelpers.double); // will return [2, 4, 6] So now we have, essentially, one way of creating named functions (`function greet() {...`) and two ways of creating anonymous functions: `const greet = function () {...` and `const greet = () =&gt; ...`. A lot of people like the behavior of arrow functions a lot more, and so have switched over to *only* using arrow functions. Other people still like having the ability to "tear off" and attach functions to objects - plus there's a whole lot of legacy code sitting around that depends on it - so the original way of creating anonymous functions using the `function` keyword lives on. Does that answer your question?
Try running using Chrome Canary and use the JS profiler. Newest versions of V8 can optimize those built-in array operations by inlining them. Look for any functions that get reported with a yellow warning symbol. Can you share any snippets of the hot code? 
Hello everyone, It was already posted to /r/reactjs two days ago. I published a tiny git cheat sheet written in ReactJS Here is the website : [the awsome git cheat sheet](the-awesome-git-cheat-sheet.com) Here is my github: https://github.com/ziedbeta/the-awesome-cheat-sheet It is still a work in progress, please feel free to ask any questions or make sugggestions
You are still missing the point. When you say "and the client is free to use its cached version", that is what stale-cache does. The browser just doesn't cache a json object somewhere and use it automatically like it would a whole web page or an image. Storing and retrieving data locally is what 99% of stale-cache does. You are getting stuck on how the server is reporting to the client is the data is different on the server. The stale-cache client could have used http headers, but that would have complicated the interface at the sever and client ends. Instead it uses a version token, so the relevant code on the server and client don't even have to know what http is. Another thing, stale-cache is mostly for avoiding spinners and making your SPA snappy. It for optimistically displaying old data and hoping its still up to date, whether it using version tokens and downloads the data again is not the point and completely optional. 
when you say JSON do you mean object? JSON can't have functions. Generally speaking, modifying a prototype is unusual since you're modifying all instances of it, leading to potentially strange behaviour. furthermore, most things in JS can be done without thinking about prototypes at all. maybe you can post the function(s) you're talking about so we can give you some direction
You are basically saying rewrite stale-cache as a service worker. stale-cache is basically a wrapper around object-hash and lscache that lets you implement ajax response caching to localstorage in a few lines of drop in code.
I feel like that code is just an example and probably doesn't represent the actual situation. There are probably various solutions. However, based on the comments OP made and the little info available, I think anything we might suggest here lies between "educated guess" and "shot in the dark", closer to the latter than the former :)
Now that you bring it up, I'm not sure if it blows up or not if localstorage doesn't work, I think a lot of that checking is in lscache itself ( a lib it uses). Ideally if the browser doesn't have localstorage, it shouldn't matter, you just wont get the speedup.
&gt; Well, there are two ways of creating new functions in JavaScript: using the function keyword, and using arrow syntax () =&gt; .... You also have `new Function()`, object/class method syntax with `name () { ... }`, and even `class` itself, which also (technically) creates a function. If you want to throw in generators, that adds a few more variations. And this all without getting into the distinction between declarations and expressions.
If I understand your question, I believe you'll find split() helpful https://www.w3schools.com/jsref/jsref_split.asp
Sorry I explained the whole JSON thing a little wrong since I wasn't sure how to put it. The company has this massive excel sheet that I use a script to convert it into a sort of class (OOP object with the new keyword, I apologize not sure what that's called exactly). These newly created objects are pretty massive, and so using prototype makes sense since I want to add a global parameter to them. Here's a simple example I can think of, but it doesn't entirely represent what I am going for: var object[459] = new Person("firstName", "lastName"); Person.prototype.fullName = function() { return this.firstName + this.lastName }; function OnPersonChange() { Person.prototype.fullname = this.firstName + this.lastName; ] These are the 2 examples I can think of adding the global parameter, the `OnPersonChange` function is currently the easiest solution for me, but that would mean changing the prototype every time someone changes the main person, which there are 2 of like I mentioned in my post. The website compares all the data between the 2. The function return prototype seems like a cleaner solution, but it's a little uglier to implement since I'd be writing `Guy.fullName(whichSide) + text`, instead of `Guy.fullname + text`, if that makes sense, although I guess it's just a personal preference. Hm, maybe I am just overthinking it and the function return is just better. I am still curious if changing the prototype like that often is bad, and any other thoughts related to these 2 solutions. Thanks again for reading and for the reply.
Good articles? Stop reading Medium!
TL;DR: Since the release of Firefox 55, Selenium IDE is no longer supported and the support for Selenium Webdriver will be discontinued soon. Use endtest.io
Okay, that‚Äôs good to know, but how can I take those values and plug them back into my code?
You can use the totally not prod ready prepack https://prepack.io/
I don't know about any tools sorry, you've probably already considered these. * combine filter/map/reduce into one function for a single pass on data * if you can benefit from parallel processing, consider web workers or going native * if UI responsiveness is an issue, off load processing into a web worker or use coroutines 
Article that barely scratches the surface.
I think "function soAndSo()" is weird syntactic sugar to make people coming from classical OOP more comfortable. I use it out of habit, but it makes understanding the paradigm behind JS more confusing. With everything being an object the other ways of defining functions just make sense.
I think you've convinced yourself that I "just don't get it", and you aren't taking the time to listen to what I'm saying (or I'm not explaining it properly... or a little of both). There is nothing that this package can do that can't already be done with HTTP/browser caching. If you disagree, feel free to provide a tiny code example, along with the expected benefits, and I'll be glad to show you how the same thing can be done without the package. I think that's going to be the least confusing way to demonstrate the point.
[removed]
Only problem is, what the hell would you call it? .. is there a sub for suggesting subreddit names from descriptions?
Ok, lets say you have a weather app. Its a SPA. Along with all the components on the screen there is an API call to get the current temperature. This is displayed in the current temp component. The user goes to his page, the component does this (in pseudocode). The user gets no spinners, just instant display of data because the last data is in localstorage, which is a million times faster than network request. ``` // display boston temperature right away from localhost even if its wrong, but it probably isn't because temperature doesn't change that fast response = staleCache({location:'Boston'}) display(response) // now make a query to API to get fresh data and update that display(response.fresh()) ``` 
What do you mean "converting a website to markdown"? Isn't a website already HTML, and isn't HTML already a "Markdown"? I usually just use the "Save page as html" option on my browser, and then edit the html page as I like. What are you doing different?
Why not make an HTML form. Use those values to do your calculations
markdown and html are different things. 
HTML &amp; Markdown are both markup languages, but they have very different ways of defining elements in their markup. While a h1 in HTML would be: &lt;h1&gt;Heading&lt;/h1&gt; In markdown it's simply: # Heading A lot of things that dont need the complexity of HTML and want to be more writer friendly are switching to using markdown. Things like text editors for notes/writers/documentation, CMS article body editors, and even email (with a parser) are making use of markdown. As a use case example, something like the above could be useful for those who are looking to switch from HTML markup for this kind of content to markdown. *please note I have not used the above nor have I done more than glance at it, just wanted to help shed light on why you may use markdown over HTML or why you may need to convert. 
let angles = input.split(" ") sum = angle[0] + angle[1] + angle[2]
"native" nowadays means "a system app" -- mobile or desktop, i.e. "does not depend on a web-browser" what you wanted to say is "vanilla" -- b/c it dosnt need babel, webpack or a WASM compiler
It‚Äôs difficult to say what the problem is without seeing the external js. One thing I noticed though, your onload call references an id, but I don‚Äôt see that id on your page. Is that id supposed to reference the iframe? Try adding an id attribute that matches the function call. 
Thanks both of you, but as always happens, I asked the question and a day later figured it out. Well, at least I got it working to some degree. I haven't had time to dive back into it though.
This reminds me of Firefox's reading mode. Cool.
I got bored and set up my own sub: [NameThisVariable](https://www.reddit.com/r/NameThisVariable/)
Sure, not a problem. Simply make your JSON API server respond with a far-future `Expires` header (effectively caching it in the browser "forever"). Then, your code can be replaced by the following. **On first page load:** // Force the use of the local cache, regardless of whether or not it's stale. This will only // generate a network request if there is nothing in the local cache (which should only be // on the first visit, or after the user has cleared their cache). fetch(url, { cache: 'force-cache' }) .then(res =&gt; res.json()) .then(display); This will prevent any spinners, and the last cached data will instantly be displayed without any network request. **Whenever you want fresh data:** // Bypass the local cache and get some fresh data, caching it on return. This will always // generate a network request, regardless of whether there is a cached version of the // JSON response. fetch(url, { cache: 'reload' }) .then(res =&gt; res.json()) .then(display); This will bypass the cache (if it exists) and always get you a fresh response from the server, and then cache the response. Thus, on the next page load, the most recent data will be available before any network requests happen again. Let me know if you have any questions.
Yeah, I actually think that whole thing was a mistake
Sure, that's not a problem at all. Simply make your JSON API respond with a far-future `Expires` header (effectively forcing the browser to cache the response "forever"). Then, your code above and your package can all be replaced by the following: **On page load:** // This will not generate a network request unless it's the very first visit, or the // user has cleared their browser cache. const stale = () =&gt; fetch(url) .then(res =&gt; res.json()) .then(display); **Whenever you want fresh data:** const fresh = () =&gt; { const request = new Request(url); const headers = new Headers(); headers.append('pragma', 'no-cache'); headers.append('cache-control', 'no-cache'); return fetch(request, { headers }) .then(res =&gt; res.json()) .then(display); }; So, when a user first arrives to your SPA, you can simply call `stale()` to get the locally cached data from the browser (a local memory/disk lookup, like localStorage), and then `fresh()` to fire off a network request to get the fresh data to replace it with. And there you go. No spinners, no localStorage, no dependency. Just a few cache headers. *Note: In FF/Edge, this is even more trivial using [Request.cache options](https://developer.mozilla.org/en-US/docs/Web/API/Request/cache), but Chrome is late to the party for that one, unfortunately.*
I love it. 
Also ‚Äì coming up: collaborative editing and debugging. https://code.visualstudio.com/visual-studio-live-share
W.r.t. smart templates ‚Äì this may help: https://code.visualstudio.com/docs/editor/userdefinedsnippets
The Subtle Brackets plugin was the one thing I needed to make it my go to. The default bracket highlighting is....not for me. 
I've loosely have been following WebUSB as a standard for awhile now and a couple things to note is that the WebKit team has decided against implementing it (https://webkit.org/status/#feature-webusb) I think for security concerns, and the Microsoft Edge team currently doesn't even list it as a thing. My general feeling has been lately that I don't think WebUSB is going to become a thing outside of the support already shipped in Blink (i.e. Chrome). So I'd recommend learning whatever makes the most sense to your needs as it stands today.
Oh you, I just wrote up an elaborate response to your previous posting and tried to submit it and it wouldn't let me. I'll see if I can salvage any of it. The previous version made more sense to me, and I'm bummed you are adding 'on page load' because I'm never sure whats going on there with SPA's, and I just used spinners as an example, in my particular use-case I'm doing this all with form submits. That's probably my fault. (aside) You might have a problem with parameter order resulting in multiple cached version. stale-cache will normalize these using object-hash, so you have to deal with that. (pseudocode) response = staleCache({location:'Boston', station:1}) response = staleCache({station:1, location:'Boston'}) You're 'browser flow' makes the conditions too simple. we need fresh() to write to the cache. hopefully its also respecting 304's from server. Now I have a problem on the server side. With the stale-cache version, we'd return a version-token with the first data. On request, this version-token would be sent up and get a 'OK' or new data. OK is the equivalent of 304 in stale-cache world. In my particular use-case, calculating whether to return a 304 on each request is heavy lift, since the request parameters might be relating to multiple tables in a database and a complicated query, so i'd have to cache that somehow. On the other hand, just storing that version token and uploading it with the query, and whether that token is still valid being calculated at another time makes it much more efficient ( and easy ).
Good vim plugin as well, made my transition pretty smooth.
I really like the database explorer included in Intellij. Can't wait to have one as good in VSCode. Intellij has a better git integration IMO. The omni search is pretty good too, wish there was the same in VSCode. Anyway, still using VSCode instead of WebStorm as it's right now the best for the price (which is nothing). I'm pretty sure all those problems will be resolved soon :)
[Web Assembly](https://developer.mozilla.org/en-US/docs/WebAssembly) is now supported in [_all_ current major browsers](https://caniuse.com/#search=webassembly), as of a few weeks ago. That would get you near-native performance, depending on the operations that are taking a while.
Vim!!!
I'm trying to remember why version-tokens and not just storing the query on the server and invalidating that. I must have had a reason, right?
What is "the perfect theme" you talk of? I'm always looking for a decent theme.
Well another question I had was regarding the specific label printer I bought...Of course right after buying the Brother QL800, I read a review online somewhere that Dymo has an actual JavaScript API, at the cost of being able to install a native C++ background program on your PC... What are your suggestions on learning how to send data to a USB device? Know any good resources?
[removed]
[removed]
Know how to integrate various js APIs and frameworks.
All you are trying to do is print to the label printer right? You actually shouldn't really need to do anything specific via USB to achieve that. You simply format a printed view and have the browser print to that printer which would avoid that headache all together. Personally that's what I would do. 
&gt; Oh you, I just wrote up an elaborate response to your previous posting and tried to submit it and it wouldn't let me. I'll see if I can salvage any of it. Sorry, the previous version was only up for about 30 seconds. It was the exact same premise, though. The only difference was that my example made use of `Request.cache`, which I didn't realize until after posting still doesn't work in Chrome after over a year (TIL!). It's kind of a bummer, since the code is much more terse and self-explanatory with it. &gt; (aside) You might have a problem with parameter order resulting in multiple cached version. stale-cache will normalize these using object-hash, so you have to deal with that. Yes, that's definitely a potential pitfall, but easy enough to avoid. You just need to ensure that both stale/fetch methods are using the same implementation for query string construction and that it's deterministic. &gt; I'm bummed you are adding 'on page load' because I'm never sure whats going on there with SPA's, and I just used spinners as an example, in my particular use-case I'm doing this all with form submits. That's probably my fault. "On page load" wasn't really meant literally. It could just as easily be "on view load", "on section paint", "on route init" or whatever fits your architecture. The idea is just that it's what you would call when you don't have any fresh data available to show the user, but want to show stale data while you fetch some fresh stuff. It can be used anywhere that that's a desired behavior. &gt; You're 'browser flow' makes the conditions too simple. we need fresh() to write to the cache. hopefully its also respecting 304's from server. The `fresh()` implementation I showed above will write to the cache, and will also respect 304s. &gt; In my particular use-case, calculating whether to return a 304 on each request is heavy lift, since the request parameters might be relating to multiple tables in a database and a complicated query, so i'd have to cache that somehow. On the other hand, just storing that version token and uploading it with the query, and whether that token is still valid being calculated at another time makes it much more efficient ( and easy ). What you're describing is [`ETag`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag), which you can also fit into the examples above and JSON API responses.
It looks like the kind of tool I've been wanting to see for a long time! Not sure if we'll use it, but I'll certainly keep an eye on it.
I suppose. But if I want to copy a barcode I scan immediately after I scan it (and save time), I'd want to print using the API. Time is money haha.
RemindMe! 2 days "Talk to my ms rep about security"
I will be messaging you on [**2017-11-20 04:54:33 UTC**](http://www.wolframalpha.com/input/?i=2017-11-20 04:54:33 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/javascript/comments/7dpwyl/ode_to_vscode/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/javascript/comments/7dpwyl/ode_to_vscode/]%0A%0ARemindMe! 2 days ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
&gt; Oh you, I just wrote up an elaborate response to your previous posting and tried to submit it and it wouldn't let me. I'll see if I can salvage any of it. &gt; Sorry, the previous version was only up for about 30 seconds. It was the exact same premise, though. The only difference was that my example made use of Request.cache, which I didn't realize until after posting still doesn't work in Chrome after over a year (TIL!). It's kind of a bummer, since the code is much more terse and self-explanatory with it. &gt; (aside) You might have a problem with parameter order resulting in multiple cached version. stale-cache will normalize these using object-hash, so you have to deal with that. &gt; Yes, that's definitely a potential pitfall, but easy enough to avoid. You just need to ensure that both stale/fetch methods are using the same implementation for query string construction and that it's deterministic. If you pass params to axios, or maybe even fetch (it takes params objects?) you really don't know what its going to do with those, especially if they are in js object format. &gt; I'm bummed you are adding 'on page load' because I'm never sure whats going on there with SPA's, and I just used spinners as an example, in my particular use-case I'm doing this all with form submits. That's probably my fault. &gt; "On page load" wasn't really meant literally. It could just as easily be "on view load", "on section paint", "on route init" or whatever fits your architecture. The idea is just that it's what you would call when you don't have any fresh data available to show the user, but want to show stale data while you fetch some fresh stuff. It can be used anywhere that that's a desired behavior. &gt; You're 'browser flow' makes the conditions too simple. we need fresh() to write to the cache. hopefully its also respecting 304's from server. &gt; The fresh() implementation I showed above will write to the cache, and will also respect 304s. &gt; In my particular use-case, calculating whether to return a 304 on each request is heavy lift, since the request parameters might be relating to multiple tables in a database and a complicated query, so i'd have to cache that somehow. On the other hand, just storing that version token and uploading it with the query, and whether that token is still valid being calculated at another time makes it much more efficient ( and easy ). &gt; What you're describing is ETag, which you can also fit into the examples above and JSON API responses. Yes ETags, but didn't want to mess with headers, it complicated the library. I'd love to replace localstorage with browser caching because localstorage makes me nervous but I'm always going to keep the stale-cache API, but it might not be easy to set headers in multiple ajax libraries. I'm not sure I trust browser cache control - its got that off-the-beaten-path smell to it I've learned to identify, in other words, documented but nobody is talking about it. I'm sure it works with simple stuff, but as soon as you try to get tricky, you know how it is. 
In VSCode, ctrl-p brings up the comment pallet which lets you search for any file by typing part of its name. Is this what you were looking for when you said "omni search"?
It runs remotely, so someone won't be executing code on your machine. 
Sounds like you should write an extension :-)
&gt; how can it be free? The better question is, how can intellij/WebStorm/etc charge. It‚Äôs like they said to themselves, we need to charge people to use this much cpu in a single process - it‚Äôs not easy to do
I ain't waiting. I'm writing my own now that's just based on websockets. That way you can cross code to other editors. Ironically I started this the day before Vsc announced in Sublime. So I've got a good portion written in that as well. Also should be fairly trivial to create a web interface too for quick collaboration. 
Sticking to Webstorm because IdeaVIM is still better.
I had an opposite experience. I've been a VSCode evangelist until I used Intellij. Refactoring code is so much easier with Typescript in Intellij. I just wish Intellij could have the theme I was using in VSCode... One Dark Pro is what I used.
JetBrains editors are king for me too. But VScode is a good free alternative. 
&gt; If you pass params to axios, or maybe even fetch (it takes params objects?) you really don't know what its going to do with those, especially if they are in js object format. Well, you can [always take a look](https://github.com/axios/axios/blob/b8f6f5049cf3da8126a184b6b270316402b5b374/lib/helpers/buildURL.js). In axios's case, params would not be deterministic by default if you used a plain JS object for them. However, it does have a `paramsSerializer` config option that allows you full control over your own serialization. It also accepts a `URLSearchParams` instance directly, which can be sorted. The `fetch` API doesn't allow param objects at all, so query string serialization is completely up to you. It's pretty trivial to create a serializer, though. Here's a pretty simple one: const paramsSerializer = params =&gt; { const usp = new URLSearchParams(params); usp.sort(); return usp.toString(); }; &gt; I'm not sure I trust browser cache control - its got that off-the-beaten-path smell to it I've learned to identify, in other words, documented but nobody is talking about it. I'm sure it works with simple stuff, but as soon as you try to get tricky, you know how it is. Browser/HTTP caching is one of those essential cornerstones of the web that prop the whole thing up. It's rock solid, and has only changed minimally over the past couple decades. You can be as tricky as you want to be with it, provided that you fully understand the nuances of how everything works (no small feat, since the various headers are their semantics can be very subtle and easy to confuse). In any case, you probably have enough info now to decide what's best for you, so good luck to you.
&gt; &lt;script type="text/javascript" src="dynamicoptionlist.js"&gt;&lt;/script&gt; Where is dynamicoptionlist.js located at?
Check out Seti Modified, it's pretty slick.
I gotta say I am glad they changed the icon back to blue
Every editor has a vim mode plugin. Hell even chrome does
for syntax I like Dark+ Material, good contrast and the comments are green instead of grey
Look into getters and setters https://javascriptplayground.com/blog/2013/12/es5-getters-setters/
It makes me feel dirty when I think about how much I like VSCode. I was braced for Microsoft to betray me but then they [open sourced](https://github.com/Microsoft/vscode) it.
Yeah, I forgot about `new Function()`! Good one to add to the discussion! 
[removed]
I don't use VSCode but I can speak to all the lovely search stuff the person you're responding to might be talking about: Double tap shift: searches all IDE commands as well as files Ctrl+shift+n: search through file names Ctrl+n: Search through all class names Ctrl+alt+shift+n: search through all symbols (including classes, functions, css selectors, maybe more?) All the search tools take camel casing and underscores into account, so for example if I'm searching for a file named NetworkUtils.js I can type NU in the search and it will pop up. All the search tools are part of why I love IntelliJ based IDEs so much. Though I'm thinking of giving VSCode a shot since I hear so many good things. If I can't navigate code as easily as that, though, I'll have to see some other huge improvements to stick around.
how could anybody ask for money for their work. p.s. vsc hangs and crashes like crazy, most of the plugins doesnt work as supposed. Still long way to go.
How do I turn off the annoying definitions on hover when I am coding? I've tried to go in settings but it appears I have to code my settings in VS Code. I just don't need to know what a &lt;div&gt; is everytime I hover over it, etc.
 I am with JavaScript for 11+ years. And Architector of JavaScript Grid Library for Enterprise. FancyGrid - https://fancygrid.com And it seems to me, I do not know JS. Why? Since for past 5 years, all started to code on JS and offer self solutions. If you perfect know VanillaJS, it does not mean that you know: Babel, WebPack, TypeScript, Angular, Angular 2+, ReactJS, VueJS, npm, lintering, testing. It is not the full list. You could be also needed: jQuery, Grunt, Gulp, ExtJS, BackBone, Ember, CoffeeScript. The only I can offer to you is. To read at least 7 good books about JS. But do not read all. There are many useless. Here are 4 to must to read. They are really good. From SurviveJS https://leanpub.com/survivejs-maintenance - Maintenance https://leanpub.com/survivejs-webpack - Webpack https://leanpub.com/survivejs-react - React https://leanpub.com/vuejs2 - VueJS About Angular, I do not know good book. Also take a look at this. https://github.com/kamranahmedse/developer-roadmap The main: Modern web dev is freakness with unlimit to know things. 
A couple things: first, be careful about overriding the f2 function. It's actually the shortcut for the rename refactoring. Second, the smart templates feature from the jet brains IDEs can be replicated by making snippets: https://code.visualstudio.com/docs/editor/userdefinedsnippets There are a bunch of plugins too, which could make life easier. 
i tried and like it, but I still keep use Vim. I am faster and more productive with Vim.
I don't even use VSCode as my primary editor/IDE but I'm very glad about this. 
I can‚Äôt speak for WS, but PHPStorm has many features that work out of the box which I‚Äôve not been able to get reliably working in VSCode. It is so useful to my workflow. 
Yes! I have inspired my code from their code: https://github.com/mozilla/readability Unfortunately, they need a DOM parser and it's hard to use in a node.js environment.
Perfect explanation. HTML is for machines. Markdown is for humans.
they tend to be lacking in the one thing vim users enjoy... customization. I really enjoy VSCode... but the lack of key mapping keeps me waiting 
PHPStorm is a true IDE. IÔ∏è love Sublime but you can‚Äôt even compare a text editor to an IDE. 
You have spend too much times on preparing, the answer is no best route, no best tutorials, no best frameworks, they are just different philosophy to sovle the similar problems. You can learn JS from freecodecamp, every js concepts will be explained via short examples that you can follow, so that is the pretty easy way to learn it. The most important way to learn programming is write code and run it. Just start to code, no matter what book you choose, you get the same result , javascript. 
None of those plugins are perfect and many of them are awful. IntelliJ‚Äôs is quite good, admittedly, compared to alternatives, but it still isn‚Äôt perfect. 
1. That's a great book to start with. The ES6 features will take you a day or two to understand once you've got a good base. ES6 is mostly syntactical sugar, so having a good base in ES5 will only help you exploit the features of ES6 when you use them. 2. Yup. Knowing ES5 also helps when you need to debug your code. While many of us have converted to ES6, the majority of browsers in use don't support all the features, so you'll have times where you have to debug in ES4/5. Babel will convert ES6 to ES5 so it can be used in all browsers, but we're still a little ways off from being able to develop in it exclusively. 3. Vue or React. I'd recommend Vue as it's a lot easier to get in and develop for. Angular2/3/4/5 is a mess when looking for support. Vue is Angular 1 done right, with discrete components. Angular(5 now) is... Honestly, I'm not sure what it is at this point; it's all over the place. React is just a view library for making components. It's not really a framework in the strictest sense. You'll need to know a lot more about a lot more libraries and tools to make use of it. Ember is a great concept, but fall apart in practice. The number of times you hear yourself say "That really should work, why isn't it working" will be met with the occasional "Why is that working, it shouldn't be yet." 4. Yep. But start with the foundation of the language first. You'll need to understand the nuances of JS first, or your time making games with be of frustration. JavaScript, if you learn it properly and well is a great language. But if you don't, you'll run into edge cases that will cause bugs and side effect that will be very difficult to debug without a solid understanding.
I know the author of survive series is the maintainer of webpack projects, I read survive webpack, an awsome book, I can not find a better one..
Know debug effectively, know software enginnering (not limited to version control, test, design patterns, algorithms, code style, net, database, browsers, cooperation, refraction...), If you only know js, you are just a js coder, not a cool developer.
&gt; and isn't HTML already a "Markdown"? You're probably thinking "isn't HTML already _markup_?", as in the generic "_markup_ language". [Markdown is a particular format or language](https://en.wikipedia.org/wiki/Markdown) that is generally aimed at easy editing and then transforming it into HTML. When you -as a _user_ not as the developer- write content into a CMS or similar, it is fairly common that you can use either Markdown or some other form of "simplified syntax". e.g. writing this comment here.
If it‚Äôs not on the environment settings you can ask for it on GitHub. They respond really fast.
The ones I have tried for vs code, the top ones, really suck. I had one installed a few months ago that worked fine, then they updated it and now I can‚Äôt have it enabled more than 2 mins before uninstalling it... I am still waiting for something like vsVim that just works.
I liked the orange one, that way was easier to differentiate the regular VS (purple) from VS Code (blue)
Which one are you using? I try every few weeks and none seem to work fine. And I mean basic stuff like moving around with hjkl or selecting... I tried the 3 most downloaded and they used to work but now I don‚Äôt know why they are unusable. I am guessing that I have another plugin conflicting with the key bindings. But it happens on MacOS and 3 different windows machines...
I'm using Darcula theme with Twilight in the editor. It might be very close to One Dark Pro.
F1: searches all commands, for example: "&gt;acb" = "&gt;Add Cursor Below" F1: search files in workspace (without the "&gt;" character) F1: search symbols (variables, functions, classes, etc...) with @ char, or "@:" if you need them by category ("#" same, but in whole workspace) F1 can do more than that, for example, if you press F1 and write "task " it will detect and show tasks which you can run instantly. 
&gt; Someone has created the **perfect** theme for me--*which I then customised* My life in one sentence
... If the job description says JQuery... then you should know jQuery, derp. You should also learn techniques for jQuery, for example there's no native DOMcaching in jQuery so you should learn how to code that manually.
They made her decision to target multiple platforms, and ended up with Java. Can‚Äôt really blame them - there are *no* good cross-platform UI toolsets. It‚Äôs a shame, but the feature sets keep me using their tools. I do wish the default key map on macOS wasn‚Äôt total garbage, though. 
In other words, it's using mutation to save resources, and yet it still works in a functional way.
Yes, like twitter embedds, YouTube videos and such
I have Intellij IDEA lying around but the lack of a project manager that autoscans folders for git repos and the unresolved issue that the flow binary executable path is not filled in per default in the settings and the absence of vscode style on hover type signatures (maybe due to the wobbly flow integration?) coupled with slower startup is a bit of a downer. If they resolve the flow issue I will definitely take another look. 
I use the Darcula theme (which is the same default syntax theme as used by the JetBrains IDEs in dark mode) with a dark gray status bar: { "statusBar.background" : "#333", "statusBar.noFolderBackground" : "#333", "statusBar.debuggingBackground": "#543" },
Note that [official builds of Visual Studio Code are not under and open source license](https://github.com/Microsoft/vscode/issues/17996). Unfortunately, this means you'll need to build from source if you want a binary that lets you exercise the freedoms the open source license grants you.
Lol someone downvoted you for having the wrong opinion on the colour of the icon for Visual Studio Code.
Lol I am amazed at how stupid are some developers... 
For database work - https://github.com/Microsoft/sqlopsstudio
I don't usually download for opinions, especially something that isn't important like this, but I was scared that vbcode developers would see this as a feedback from the community, and I really hated that orange icon, so I downvoted, I downvoted again because he took that personal and called everyone with a different opinion stupid
1. The best way to learn is by doing. Make a small website for your self, start to incorporate new features, tooling, etc. 2. Javascript is simple to learn but tough to deal with in praxis. You will often see, actually in the most cases, that it relies on node, npm and build tools like webpack and babel. These will make it possible for you to use the language to its fullest. 3. [React is the biggest](http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core) by far. Learning React is learning javascript, and the other round, if you know javascript, you know React. Angular is a great framework as well, but you learn Angular, and the knowledge will be useless once you stray. That is not the case with React, the concepts you learn there are valuable in general, that's why i'd recommend it, especially for beginners. It's also the easiest to pick up. 4. There are a couple of wrappers around weggl, like three.js, or canvas, like pixie. You can make games with it for certain.
I use https://github.com/VSCodeVim/Vim on my Mac. Works great
I'll allow it
gotcha, thanks
Nothing is better then WebStorm!
&gt; Fast Startup Ehhhhhhh I don‚Äôt know about that. 
Faster at least than webtorm 
Thank you for your thoughtful reply! 1) You have a good point, and I'll be thinking about ways to potentially make reduce boilerplate even more. That said, I'm not really sure where to start. There's a minimal subset of things you will have to wire up to tell the system what to do. I'll be giving this a lot of thought and if I can't figure out a way to reduce it more I might just remove that "selling point". 2) So, and I haven't written much documentation on this yet, but the point of the Controller / async paradigm was to abstract out the way that your asynchronous parts of the application function. With Ringa you could completely swap out your entire APIController with a single line of code. Asynchronous code is modularized, named, and then turned into an interface where you don't even have to know what the target Controller is named - or even its type to invoke it. For example, you could have a "apiGet" string that requires a certain detail object and then simply rewrite that entire controller, swap it with a new one, and the rest of your application does not need to be touched. The goal here was not really solving a problem with the current implementation, but making it easy to refactor. I probably need some better examples of this. Appreciate your thoughts! 3) Yeah I could see how it would potentially be seen as a step back in some ways. I'll be giving this a lot of thought. I'm coming from a Redux background where a lot of the business logic ended up in endless chains of reducers. I'm not really sure how to avoid this "non-componenty" part of things. Regarding your last point and "cruft". I realize this is a very real problem - and always is in enterprise applications - which is why I've been steadily build a nice suite of debugging tools. The biggest one that I've been working on is the debug inspector to visualize the entire application tree in useful ways. My end goal is a solution where you could have a 50-100 page SPA and jump in and be able to find out what is causing a bug, what controller is running the code, what models are involved, and what Components need touching - all with a quick visualization from that screen in the running app. Thank you for your feedback, I'll be taking this to heart :) 
I like VSCode a lot and it is my go to editor for smaller projects. I also recommend it to everyone I know (: But I'm using JetBrains products for work. The first reason is that VSC gets very slow on bigger projects. Yeah, WS/IDEA are slow to start and an overkill for a small project, but their performance is consistent no matter how big the project is. As a side note, JetBrains products are very fast on Windows, but super slow on Macs, since I'm a Windows user, I rarely experience any slow downs, but my Mac colleagues struggle frequently. The next reason is quality of IDE tools: language support, auto complete intelligence, refactoring tools, database tools, etc. They are far more superior in IDEA, no matter what you throw at it. And it is vital for scripting languages, since many IDEs miss judge which code blocks should be affected and which are not leading to a fucking mess. Another reason is general Java performance compared to Electron. Gone are the days of shitty, buggy and slow Java apps, Electron apps on the other hand feel like back to early 2000s, even though hardware is times more powerful. I just hate Electron. And last but not least is that I'm doing plenty of Java development and MY GOD IDEA IS FUCKING AWESOME! And I'm not a fan of having multiple IDEs for different languages I use at work. Switching contexts is very painful for me, so using one single IDE makes my life a bit easier. But yeah, overall VSC is awesome! As many others I have tried plenty of different tools in the last decade and VSC is a bliss to use. If you understand its weaknesses, your work well be pleasant.
Fragmentation is bad
[removed]
No canvas?
They still maintain it, and they still will use it and you to push their agenda.
You have function and () =&gt; {}, which have different behaviour. Everything else is just shorthand
Lmao the problem is not with array HOFs, it‚Äôs more likely what you‚Äôre doing inside them
No.
I switched from vim. Have been a vim user for about 8-10 years and was really spoiled for all other editors. VSCode is the first that truly clicked - mainly due to its awesome vim integration (and apparently even more in the future to come). Wrote my own extension from scratch within a single workday on the side. And the intellisense is just mind blowing at times. Sneak Peeks are one of the many things that made my jaw drop and the easy accessible CLI is perfect for me. There's so much I really like a lot about VSCode making it my favorite editor of all times - so far.
If you are not targeting IE, then all browsers support most of ES6. I rarely bother with ES5 these days. If a person wants to learn JS, then by the time these skills will get applied to work IE will be completely obsolete, so why bother?
Nope, challenge.
Yes, I use TypeScript a lot. Another point to Java is that most of people use laptops these days and better performance = longer battery life. I mean, yeah, my laptop can even play games comfortably, but 2 hours of work VS 5 hours of work on a charge is a big difference! And also better performance means less fan noise.
only because you're used to it
This. Even though VS Code is an amazing product. No, WebStorm is still the best.
[removed]
this isn't true at all. v8 does NOT generalize `.forEach` into a loop. in fact, it cannot. bench it yourself. &gt;It'd be a real waste of time to go through a large codebase and convert all of those to loops absolutely NOT a waste of time. you do not use sync callbacks for perf-sensitive code in any of javascript's runtimes.
You realise that's the whole point of the article? To get an introduction
btw lazy (in general) still creates intermediate collections / intermediate garbage, it just doesn't fully realize them at once. for that reason lazy is only an optimization for when you cannot hold on to the head of the collection (too large) OR you are only consuming the sequence partially. if not, then eager is actually faster.
Fair enough 
Importing the settings is great. There is a VSCode Extension that allows you to commit your settings to GitHub, and then import them to VSCode on other machines. https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync Settings Sync Previously known as Visual Studio Code Settings Sync Version Travis Join Chat Type Sync in command Palette in order to view all commands. Key Features 1. Use your GitHub account token and Gist. 2. Can create Anonymous Gist without using your GitHub account token. 3. Easy to Upload and Download on one click. 4. Show a summary page at the end with details about config and extensions effected. 5. Auto Download Latest Settings on Startup. 6. Auto upload Settings on file change. 7. Share the Gist with other users and let them download your settings. 8. Supports GitHub Enterprise It Syncs Commits all extensions and complete User Folder that Contains 1. Settings File 2. Keybinding File 3. Launch File 4. Snippets Folder 5. VSCode Extensions Settings 6. Workspaces
Your poor eyes! 
Can you explain key mapping? All of the shortcuts and commands in VS Code are editable I believe.
What terrible article. It implies that selenium can't be used with Firefox anymore in the future, which is nonsense and then recommends a tool where you have to click together the actions you want your browser to perform ... Actually the way the author advertises Endtest not only in this article, but also in others across platforms, makes me a bit suspicious.
https://github.com/yurtaev/idea-one-dark-theme
I have never used React, so I don't know what the issue is, but I'd suggest configuring tsconfig properly, IDE takes all settings from there.
not open sourced enough to actually install it from source.... this seems like classic microsoft; they hold back something important to prevent the project from being forked successfully.
There are shitloads already....
I don't know why it is this sub is so negative. 
Literally yes
Can people stop liking things I don‚Äôt like omfg WebStorm represent
http://104.207.128.112/games/mach3/ I made a software renderer with a variable watcher for debugging
Fummy since I thought vscode was perfect until instarted using php storm 
¬Ø\\\_(„ÉÑ)\_/¬Ø
Brilliant editor all together hope this won't get screwed up.
And how would you define downvoting twice for a different opinion on the color of an icon? 
Fair enough :-) you never know someone might find it useful
The memory and CPU usage is also a big deal for me. Running what is essentially an entire web server and browser stack in order to have my IDE running is a bit overkill. It's not that Jet Brains is light, but it's lighter than that, and has a lot more power under the hood.
I‚Äôm not sure what you mean. Do you want a graphical way of constructing UIs similar to Xcode? It probably exists but I‚Äôm not aware of it. Do you want a visual way to design servers and the connections between those nodes - if so, use node-red. Or do you want to draw charts based on data (mentioning B√©zier curves makes me think maybe?), if so, check out D3.js or one of the abstractions built on top of it.
Unlike other languages, accessing an non-existent property will not throw an exception. It will simply return `undefined`. var anObject = {}; anObject.xyz // ‚Üí undefined anObject.xyz = undefined // ‚Üí undefined 
I was wondering why the Ubuntu store classified it as proprietary. 
Anything that doesn't exist is considered undefined. So if you do console.log(onSomeVarThatDoesNotExist) it will print undefined. 
from [eloquent javascript](http://eloquentjavascript.net/) book: &gt;The difference between setting a property to undefined and actually &gt;deleting it is that, in the first case, the object still has the property &gt;(it just doesn‚Äôt have a very interesting value), whereas in the &gt;second case the property is no longer present and in will return &gt;false. 
You can use the neovim inside vscode
I tried about 4 times to get debugging to work. On the 4th try, I got it working and it‚Äôs a complete game changer. I ended up never using Webstorm because of how slow it is and felt it was overkill. If anyone is doing anything in Ionic and trying to debug with safari and remote chrome dev tools, seriously spend the time to fiddle with Vs code and it‚Äôll change your life. 
Yikes! 
 If "delete" deleted property "left" from an object it means that this property does not exists, right? But if we see "undefined" it means that property is existed but has no value. from [eloquent javascript](http://eloquentjavascript.net/) book: &gt;The difference between setting a property to undefined and actually deleting it is that, in the first case, the object still has the property (it just doesn‚Äôt have a very interesting value), whereas in the second case the property is no longer present and in will return false. 
My first game using React.js and Redux. http://sumrun.herokuapp.com
&gt; But if we see "undefined" it means that property is existed but has no value. &gt; ({}).asdf undefined In JS, accessing nonexistent properties is not an error. You get `undefined` instead. Same deal with walking outside an array's bounds: &gt; [][-1] undefined This too would be an error in most other languages.
Sorry I haven't been clear, by again I meant the different post where he called people stupid
You don't know much about JS, don't you?
&gt; how could anybody ask for money for their work. That's kind of silly, IMO. They're wondering how viable a company based around selling these tools is now that major companies like MS are releasing free tools in direct competition. "They put work in to make it" doesn't matter, just because you put work in doesn't mean your business will succeed. Opera charged for their browser for years, they put hard work in to make it, IE and Firefox still beat them. 
But why in the book we see that: &gt;The difference between setting a property to undefined and actually deleting it is that, in the first case, the object still has the property. It means that property is existed even after deleting.
It‚Äôs me, I called them stupid, because downvoting someone just for the opinion on the color of an icon seems pretty childish to me. Specially since they are not going to change it again after all the complains they had on GitHub. You even say you were ‚Äúafraid‚Äù the vs code team could see it and change their mind. Dude, being afraid of the change on an app icon? Seriously? I guess if there is a new redesign like on windows 8 it will be the apocalypse... Downvoting for calling people stupid? Ok. I could have used a softer term to say the same. Downvoting for saying I liked the orange icon? Come on, you have to admit is pretty ridiculous.
I don't know, I'd count it as fast. I just measured it on a fresh reboot and it was 1819ms. That's 10x as long as vim, but under 2 seconds means I'm never actually waiting for it to open like I am with Photoshop, Excel, Calibre etc.
Are there any extra or better features compared to webstorm?
For what it's worth, I haven't noticed a drop in battery life moving from Sublime to VS Code, although I haven't done a formal measurement. I'd like to do one, actually, because you've made me curious, but I'm not sure how I'd make it 100% fair/equal in terms of the work being done. Record the keystrokes in a ~1hr work session and then replay them in both editors, sticking only to commands and shortcuts available in both tools?
I celiac what you did there
Derp.cheese.banana.brownCow will also print undefined. I think your failing to understand here that ANYTHING is undefined until you explicitly state that it's not. Think white listing as opposed to black listing. 
By deleting it you took the object out of existence hence making it undefined. 
and the VSCode telemetry....
You are extracting a conclusion from that quote that the quote itself does not really imply. The quote says that: &gt; If you explicitly set a property to `undefined` then, the property exists in the object and its value is `undefined`. While you're deriving a _different_ conclusion, which is: &gt; If trying to read the property returns `undefined`, then it must be because the property exists. But this does **not** follow from the original quote. It is as other commenters have already told you. &gt; If you try to read a property and it returns `undefined`, it can be either because it exists and its value is `undefined` or because it doesn't exist.
If you delete a property, the property is gone and you'll get `undefined` when you try to access it. However, there is still a difference compared to existing properties whose value is `undefined`: &gt; var o = {} undefined &gt; o.foo = undefined undefined &gt; Object.keys(o) ["foo"] &gt; 'foo' in o true &gt; delete o.foo true &gt; Object.keys(o) [] &gt; 'foo' in o false 
https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run-from-source
&gt; A couple things: first, be careful about overriding the f2 function. It's actually the shortcut for the rename refactoring. All shortcut keys can be remapped, just be cautious to remap anything that is already mapped before you assign it.
What do you suspect downvoting him for saying he liked the orange icon will stop? Do you think your downvote will cause the post to be hidden for VSCode devs? It's abundantly clear that the orange icon was widely disliked. One redditor saying they liked it won't change that. Not to mention I can change my downvotes threshold to an absurdly high number, making it so that no downvoted post will be hidden for me.
"left in obj" will, as you probably already guessed, tell you if the property "left" exists in obj. Now, "left" could hold any value. "Dinosaur", 15, { }, true, false ... Or, indeed, `undefined`. The "in" syntax will only tell you if a property ***explicitly*** exists in the object (i.e: you set the value of the property on the object). It doesn't care what the value is (even if the value you explicitly set was `undefined`) - only that it explicitly exists on the object. Now, this gets confusing because the default value of a property that has never been set before is, well, `undefined`. Setting an object's property to `undefined` is different from `delete`ing the property because the property actually still exists - its value is just `undefined`. Just like it could have been `false` or "banana" or 78.
I've done both and I prefer React. Angular was just too much of knowing how to do things the "Angular way" and I wasn't a big fan of typescript.
I dont even know how thats possible though. Please explain
I made my own little manager which would handle the relative positions of everything and render a grid of divs for each frame with appropriate css styles. Kind of like canvas.
So you used divs as pixels in a way? That is really cool!
Yeah, it was a fun project.
Thanks in advance for wasting my weekend üôè 
It already exists in some editors too. 
My eyes just threw up. 
&gt; It serves better hydrating at server rendered HTML to the clients. Hence, it doesn‚Äôt require initial render to match the results with the server. i never understood the need for this. in what case would server-generated html not match client-generated vtree rendered from the same data by the same lib?
Hehehe, have fun.
If it's not necessarily rendered with the same data client-side. Possible causes could include preloaded data included in the HTML page itself, code splitting, async data fetching on the client, etc.
Well isn‚Äôt it feedback from the community?
That‚Äôs not nice :( Maybe explain yourself rather than just act like a massive chode?
Not if derp.cheese.banana doesn't exist. For derp.cheese.banana.brownCow to return undefined you'll need derp, derp.cheese, and derp.cheese.banana or else you will get an exception. 
Nice clear demonstration! 
Maybe not _all_ of them, but I guess they'll add more if they were recorded. The talks seem to be about 20-30 minutes each. There are some other short (~1min) videos which seem to be from people presenting their talks.
Read the comments above, people already said everything.
still slower than sublime. 
Sounds like we agree?
I guess you can try to simply work and make measurements 10 times for each editor and compare the results. I'd love to do that myself, but my work includes running multiple VMs regularly, that will screw my measurements. But maybe I can try to do that in my spare time working on my own projects...
Maybe not _all_ of them, but I guess they'll add more if they were recorded. The talks seem to be about 20-30 minutes each. There are some other short (~1min) videos which seem to be from people presenting their talks.
No, that will throw an exception because you can't access properties on undefined
Sounds like you don‚Äôt know what you‚Äôre talking about if you can‚Äôt explain it then? Basically m8, there are 2 types of functions with different behaviour and anything else is just shorthand. There‚Äôs nothing else to say, that‚Äôs it. I think if I didn‚Äôt know things that basic I wouldn‚Äôt be employed. Not sure why you can‚Äôt even explain yourself tbh, at least try pls
To be clear I wouldn't say that there is a default value. Instead, say that if you try to access a property in an object that isn't there you get undefined. Calling it a default value makes it sound like the property is in that object. 
Having watched one of my co-developers work in VS Code I‚Äôm not leaving Webstorm anytime soon :) VSCode is amazing for a free editor but there are a few key time savers that will make me stay with the storm. 
As much as I like VS Code, nothing knows wtf is going on like Webstorm, and for large scale apps it makes a sensible difference. 
&gt;Also should be fairly trivial to create a web interface too for quick collaboration. We must have different definitions of "fairly trivial." 
Well there's a difference between setting a property to `undefined` explicitly and the property simply not existing. 
Right-o ; given the nature of the question, being clear on these rather ambiguous parts of the language is probably for the best. Have edited my comment.
That poster is a bit of a dick about it, but I'd include class syntax as its own way to create a function, and also include method syntax since it also allows usage of `super` so it isn't quite only shorthand. Also potentially `new Function`.
Material theme or nothing
Never really used intellij stuff after the trial. It would need a lot of features to justify the price.
Less bloat.
It is not about learning how to make things in the old way vs how to make things in the new way. It is more about learning the core concepts of the language and then the new features that were added later.
You may consider learning jQuery even if you can manipulate the DOM without it. It is not uncommon to find code that relies on it today.
Auto import is beautiful
There are more than one way to declare a function because the language design evolved over time. The new arrow functions make it easier to work with `this`, for example.
I don't use classes. Functions and modules are enough for me. I pass the "state" as argument.
well, I don't think inteli is on edge here. Frankly I know lots of devs who use their stuff because its reliable and does the job as expected. Sadly I haven't noticed any of those features on free tools (except vim but I'm still learning to stay at same productivity level). Anyways use what you like.
Don't get me wrong, I love VSCode. Boot time is my last nitpick. 
This feature is absolutely amazing for Typescript though. Especially when you want to see the inferred types of things that you wouldn't necessarily know otherwise. 
If you can write easy to read code without following conventions, that is ok. But when you are in a team that have members that don't care so much about style, having tools to enforce a style really pushes the overall quality of the code up. Also, having a code convention avoid subjective discussions on what is readable code.
 delete a.prop; console.log(a.hasOwnProperty('prop');. //false The property is deleted, so hasOwnProperty reports false, but if you try to access the property JavaScript will say it's undefined because there is nothing defined at that position in the object. The property is undefined.
&gt; If it's not necessarily rendered with the same data client-side. hmm, still not sure how. even if the initial state is empty and the server has to render a shell to be populated after an async client fetch of some state, how can the js code which generates initial data-&gt;vtree-&gt;html differ on the client during initial ssr? for a concrete example, let's say you have some `/invoices` route and the server returns an empty table with "Loading..." while an async fetch happens followed by setState/redraw. shouldn't the vtree match exactly at the time of page load on both ssr and client?
Sort of. What I'm trying to say is that the progression is not as rapid as you make it sound :-)
The problem with native development is that your application won't be portable. It is extremely hard to develop a macOS app if you don't have an Apple machine, for example. Not to mention the many linux flavors out there. And yes, it does came with a price. But I actually prefer web apps over electron. You don't even have to install those, just go the page and be happy. Leave the page if you don't like it. You can even do 3D now. I don't know what happened with chrome apps, I had the felling they would be light weigh because they were using the browser already installed, but they look "gone" now.
Should read CKEditor blog posts to see how much of a pain in the ass it is to make a text editor in the browser. https://medium.com/content-uneditable/contenteditable-the-good-the-bad-and-the-ugly-261a38555e9c
&gt; Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections. So it was a response to common web server tech available at the time.
That is because JavaScript is weird in that way. Trying to access a property that doesn't exist is like trying to access dictionary entry that doesn't exist, except that "direct" access still catches that it doesn't exist and returns undefined. &gt;var a = {"Example":"Hello world!"} &gt;undefined &gt;console.log(a["Example"]); &gt;Hello world! &gt;undefined &gt;console.log(a.Example); &gt;Hello world! &gt;undefined &gt;console.log(a.e); &gt;undefined &gt;undefined &gt;console.log(a["e"]); &gt;undefined &gt;undefined
While I appreciate the effort, I'm afraid that's not a very good analogy or explanation. While there are various subtle/small details I could point out that can potentially confuse a beginner -which, I guess, is the intended audience for this-, I will focus on the main problem I find with this explanation: _There is no chicken._ I mean, there are two important characteristics in the concept of _Promise_. The first one is that you immediately get the _Promise_ itself. While this is key when comparing to the use of _callbacks_, since the article doesn't mention those at all, I'll skip it. But the second one is that you do get the chicken, given to you, _through the promise_. This is omitted from the pseudo-code and I'd consider it an important mistake. Right now, as it is, we don't get the chicken at all. It is hidden from us where the chicken is... pickUpChicken().then( () =&gt; { return prepareChicken(); }) It is quite important to the explanation that you will get the chicken in the function passed to `then`. Otherwise, there is no way to follow where does "getting the chicken" fit in all this. You need to produce code (or pseudo-code) that, while it can be simplified for the explanation, still needs to present the key elements of what you're doing. pickUpChicken().then( (chicken) =&gt; { return prepareChicken(chicken); }) // Note that it's probably a good idea to also change other functions with this idea in mind. The whole point of _Promises_ is that they produce a value and how/when you get that value.
You could use ES6. For example, you could use `const` instead of `var`. You should avoid side effects. You could use modules to avoid creating global variables.
&gt; leftpad https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart
&gt; Write code that is both performant and safe, because it executes within the browser‚Äôs security sandbox Easier said than done.
Can you tell me how lambda in javascript behaves differently than any other function? Because at this point it just feels like syntax sugar... const a = () =&gt; {console.log("Hello world!")}; const b = function() {console.log("Hello world!")}; a () =&gt; {console.log("Hello world!")} b ∆í () {console.log("Hello world!")} a(); Hello world! b(); Hello world! Different toString() return value? This all still works the same. const c = () =&gt; {somebrokenfunc}; c(); &gt;Uncaught ReferenceError: somebrokenfunc is not defined at c (&lt;anonymous&gt;:1:18) at &lt;anonymous&gt;:1:1 const d = function() {somebrokenfunc}; d(); &gt;Uncaught ReferenceError: somebrokenfunc is not defined at d (&lt;anonymous&gt;:1:23) at &lt;anonymous&gt;:1:1 function e() {somebrokenfunc}; e(); &gt;Uncaught ReferenceError: somebrokenfunc is not defined at e (&lt;anonymous&gt;:1:15) at &lt;anonymous&gt;:1:1 ?
Yeah, Webstorm is good. But not good enough over VS Code to justify the price. 
No matter what kind of library they are going to use, in my opinion, they should be able to work with bare, plain old javascript and understand what kind of animal it is. Because, to put it lightly, it's a very weird language...
I've never used SSR myself, I'm just trying to describe the possible reasons as best as I understand them. Others would be more familiar with how it works. Per your specific example, you say "the server returns an empty table". What if the server _isn't_ returning an empty table? The server may have done some async data fetching of its own in order to populate the actual response. However, the client wouldn't necessarily have that data right away, unless it was provided as a global object as a script included in the HTML response from the server. But, in general, the point is that in order for the server and client renders to match, they need to use the same code and the same data as inputs. Any differences between that would potentially cause mismatches. So, your assumption is that there's "the same data", which isn't necessarily the case. If you want more details, Sasha Aickin knows a _lot_ more about SSR in React, and he wrote a long detailed post about [What's New with Server-Side Rendering in React 16](https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67).
Plain JS: var angles window.prompt("Enter triangle angles:", "default value here"); var a = angles.split("&lt;your delimiter here&gt;"); // a = ["angle1", "angle2", "angle3"]; // use parseInt(a[index]); // to get values
This. So much this. I don't understand why everyone is always REGEX AND ONLY REGEX, when with a simple solution that even if it looks ugly, or using other, most of the time better tools, can do the job a lot faster with less confusion (when reading the code few days/weeks/whatever time unit later) and pretty much most of the time with better performance as unlike regex, what you've just did was made to do one and only job properly. People really should think about whether they really need it to begin with...
Thanks! Not it works. I am almost sure it was the one that wasn‚Äôt working right lately, but I have removed a lot of plugins, probably it had a conflict.
SQL Server only, no? 
&gt; unless it was provided as a global object as a script included in the HTML response from the server. yeah, that's the assumption. the entire state for generating the html you got was obviously known at the time of html generation. i have a pretty good understanding of it all [1], though not React's specific impl. &gt; If you want more details, Sasha Aickin knows a lot more about SSR in React, and he wrote a long detailed post about What's New with Server-Side Rendering in React 16. I read through the article and there's nothing that really addresses my question. Maybe streaming would need this in the future for progressive hydration, i dunno. [1] https://github.com/leeoniya/domvm/tree/3.x-dev/demos/bench/ssr
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [leeoniya/domvm/.../**ssr** (3.x-dev ‚Üí 344e512)](https://github.com/leeoniya/domvm/tree/344e5122a1513b3b1c8ff98c13f517978016c680/demos/bench/ssr) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dq0j6bt.)^.
http://sumrun.herokuapp.com Used React and Redux.
I use [Nord](https://github.com/arcticicestudio/nord-visual-studio-code)
Does it really matter if an app opens 2 seconds slower? You only do it once a day anyway
Well all ik is that its an inhouse position for a local Urgent Care facility. I applied almost a month ago and the job post is still up so as long as its up I am trying to prepare myself for it. So with this reddit post Im trying to get an idea of what i will need to be able to do to make sure I dont just know the syntax but how to do it. 
Every problem is different and there's no "how to do it" that can be applied to everything. You need to learn to program instead (if you didn't yet).
First of all, there is only ONE function behaviour. JS lambdas are just a sugar syntax for anonymous function with bind(). But there are plenty of function syntaxes, which are not sugar. These are new Function(), unnamed anonymous function, named anonymous function, normal named functions and now lambdas, class methods, etc. Getting back to your original comment, there is only one behaviour and only one function definition which is not sugar (named anonymous function, everything else is a syntax sugar on top). But different function sugars have different mechanisms behind the scenes, so you need to understand what's happening behind the scenes to use the correct one in a specific scenario.
What‚Äôs so great about this Jason guy everyone‚Äôs always talking about?
&gt; I can use this on any platform and just import my settings How do you do this?
Host it online somewhere. That'd help you find contributors bc then they can try before they fork.
Well I started learning html/css almost a year ago when i took a web design class in college. it snow balled from there and for a while i was learning code on the side as a hobby. Dabbled with PHP and wordpress for a bit but it didnt click with me. I wanted to be a Copywriter originally and a month after i graduated I was. I was working in Marketing for 2 months and got fired, thats when I realized that I wasnt passionate about it. So i started to focus on web dev full time n its been 2 months since I got fired and im trying to figure out if what Ik now is good enough for a full time position. I read a book called learning to program by steve foote. so idk, what do you mean by program? like being able to break down problems and understand how everything works together? I havent even written enough Js code to debug anything. I just know the basic syntax and how to minuplate the DOM. 
Honestly you aren't going to get contributions for something like this. Especially without a hosted version of the game or screenshots anywhere. 
https://github.com/dhanishgajjar/vscode-icons
Hello everyone, I have already posted this two days ago on /r/reactjs A tiny git cheat sheet written in ReactJs: https://the-awesome-git-cheat-sheet.com/ Here is the GitHub https://github.com/ZiedBeta/the-awesome-cheat-sheet Please feel free to provide feedbacks 
I can recommend the "You don't know JS" series on github, because they are by far the best one when it comes to technological correctness. I would also recommend watching the "Fun Fun Fun" youtube channel and his videos about different architectural concepts and patterns. They are really well explained. Also, when it comes to block scope vs. function scope: I think before somebody can appreciate the beauty of let/const, someone has to feel the pain of debugging a hoisting bug. Of course, quality ensurance tools like eslint are implied here; but nevertheless hoisting has some serious side effects that most developers don't understand (e.g. with statement vs. hoisted variable that was parameterized and named inside a calling IIFE expression). 
Now with web-scale factors of 100k clients per second, that's a shitload of traffic saved. More money for beer, yay!
**[Civ](https://github.com/andrejewski/civ)** A command-line tool to search stdout output in realtime. The "about" section of the README explains why it might be useful. I admit the code is not the best as it seemed like there had to be something that already existed with this functionality. I did not want to spend too much time copying someone's idea. I haven't seen or heard of a similar tool from others yet. Please let me know.
Format it correctly, put 4 spaces before each line then people might consider reading it.
sorry, i'm new here, do you mean 4 spaces before every line on the whole thing? will that be proper formatting?
Yes
A good solution which might make people more willing to help would be to use a service like jsfiddle or codepen, etc and then posting the link. 
Just went ahead and downloaded it, and I think I could very much enjoy this!
I put 4 spaces in front of everything but i don't think it looks right still
would i need to separate the HRML CSS and javascript or can i keep it together? bc the javascript has to work with the form
Look at this line: if (GCSE &lt; 1 &amp;&amp; GCSE &gt; 6)
What is wrong with it? I can't see what is wrong with it
Use OR not AND
Thanks for your help, I just tried || but it still doesn't work :(
Unless you use Flow and want Language Server support than you have to deal with the editor telling you all your types are invalid because the TypeScript linter isn't smart enough to disable when no tsconfig is present.
It irritates me when I have VSCode open and right-click on a file in explorer and select Open in Visual Studio Code and it takes 5 seconds. That shit should be near instant. It has nothing to do with it being an Electron app, it's just using the wrong mechanism to do this.
that if is also missing an open brace if (GCSE &lt; 1 || GCSE &gt; 6){
That's not really what you were being asked. If you start with `const = "LeCapitaine"` then your output should be `"INE"` As a hint, you already know how to get the last three characters from a string with `.substring`. Now have a look through the `String.prototype` and see if you can find one to turn a string into upper case.
&amp;zwjn;
- They have open-source "community editions" - Student discounts - Open-source contributors can get then for free
 &gt; 'abcdef'.substr(-2) "ef"
Intellij is good
Not entirely sure what getTile is doing after reading this. I would expect a method with that name/params to return me the corresponding tile object for those coordinates, but it looked more like it was generating parameters for the given x/y and then setting new x/y coordinates for that tile based off of the parameters? Assuming I have understood that correctly, would a solution not to be have an additional parameter made alongside noise() of the type of tile that it should be, then after the type has been decided have the remaining values be generated within their appropriate ranges. That would allow you to cut down on the pyramid of if:else and put in a switch statement checking the noise.tileType parameter. However, as I said I really am a bit confused as to what that method is doing. If I‚Äôve misunderstood a description of what it is doing and why would be useful.
Hey everyone, front end newb here. Currently searching for a junior front end job so been making a bunch of stuff in the downtime to up my skills. Here's two projects using React. Beat Pad: [Demo](https://jonfranco224.github.io/drum-machine/) / [Github](https://github.com/jonfranco224/drum-machine) A minimal text/notes editor: [Demo](https://jonfranco224.github.io/JustWrite/) / [Github](https://github.com/jonfranco224/JustWrite/) Some bugs still, but feels darn good to get stuff up and running! Hope to post more here in the coming weeks.
Yeah I had seen something where you could uppercase the first letter or last letter but not a bunch of them, I'll go back and take another look. Thanks
Boom this worked! const = myName const lastThreeCapitalLetters = myName.substring(myName.length - 3); console.log(lastThreeCapitalLetters.toUpperCase()); I added the .toUpperCase()
Awesome. Now do it all in one line.
Just one next to each other right const myName = 'John Doe'; const lastThreeCapitalLetters = myName.substring(myName.length - 3); console.log(lastThreeCapitalLetters.toUpperCase());
Might as well ask here. Anybody know a good beginner guide to vscode? I'm still a beginner developer learning the ropes and I want to make sure I'm getting the most out of my text editor and learning how to organize files correctly and efficiently etc 
Looks like it's picking x/y coordinates for the spritemap: https://github.com/Hevaesi/Hevaesi.github.io/blob/master/procedural-terrain/resources/textures/terrain.png 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Hevaesi/Hevaesi.github.io/.../**terrain.png** (master ‚Üí 7a5d66c)](https://github.com/Hevaesi/Hevaesi.github.io/blob/7a5d66c3b01a4bd6737f0bdf36993a0ce4ea956c/procedural-terrain/resources/textures/terrain.png) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
First thing, put an abstraction layer between choosing the type of terrain and what terrain corresponds to what x/y coordinate. You have comments right now saying what each one is, but this could could just have an object that describes these coordinates: const types = { "desert": [0, 0], "desert-hills": [1, 0] //...etc... } Then create a mechanism to choose the appropriate key based upon conditions in the noise, something like this: var isDesert = noise.temperature &gt; 0.5 var isHills = noice.height &gt; 0.6 ...etc... var key = [] if (isDesert) { key.push('desert') } if (isHills) { key.push('hills') } return key.join('-') Then, var key = this.getTile(x, y) var coords = types[key] this.atlas.draw(this.camera.ctx, tileX - this.camera.x, tileY - this.camera.y, ...coords);
Well that technically counts. However you might observe that you can call methods on the return value of the function without binding it to a variable. 
Ah yes. That makes sense. Then my suggestion should still be a valid possibility, as rather than determining what the tile is based off of its attributes, you base the noise attributes off the generated tile type.
Heh, I like how you think, but not quite. So this is what you've got: const myName = 'John Doe'; const lastThreeCapitalLetters = myName.substring(myName.length - 3); console.log(lastThreeCapitalLetters.toUpperCase()); /u/inu-no-policemen pointed out that you can make the `substring` call neater by just passing in a negative number, so let's do that: const myName = 'John Doe'; const lastThreeCapitalLetters = myName.substring(-3); console.log(lastThreeCapitalLetters.toUpperCase()); Now, you've pulled out the last three characters and stored them in a const `lastThreeCapitalLetters`, then straight away you've called another string method on that new const. You can actually do these two things on one line, without creating a const in between: myName.substring(-3).toUpperCase() And you can pass all _that) into `console.log()` without needing a variable: console.log( myName.substring(-3).toUpperCase() ); That's what was meant by "doing it on one line." It's a technique called "method chaining" and personally I'm not a big fan of it because I think overusing it leads to dense, unreadable code that is difficult to debug. But it's widely used in several big JavaScript libraries like D3, and it was used in jQuery, so it's useful to know about it I guess.
&gt; /u/inu-no-policemen pointed out that you can make the substring call neater Note that I used substr, not substring! These two methods behave differently: &gt; 'abcdef'.substring(-2) // a negative start index is treated as 0, it does nothing "abcdef" &gt; 'abcdef'.substr(-2) "ef" https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr
Good bot.
Whoops, did not catch that, but I fixed it now. Thanks!
There are various ways to do it. You could create a _definition_ of the conditions for each type of tile. Something _like_ this: const terrainTypes = [ { name: 'hot-desert-low', temperature: { low: 0.5, high: 1 }, humidity: { low: 0, high: 0.33 }, height: { low: 0.5, high: 0.6 }, tile: { x: 1, y: 0 } }, { name: 'tropical-forest-mountain', temperatureRange: { low: 0.5, high: 1 }, humidityRange: { low: 0.33, high: 1 }, height: { low: 0.5, high: 1 }, tile: { x: 4, y: 0 } }, // ... etc ... ]; Now, instead of all those `if`-`else`s, you'd loop through the array checking if it matches the conditions. Something _like_ this: getTile(x, y) { var noise = this.terrain.generate(x, y); var tile = terrainTypes.find(function(tileType) { return ( tileType.temperature.low &lt; noise.temperature &amp;&amp; noise.temperature &lt;= tileType.temperature.high &amp;&amp; tileType.humidity.low &lt; noise.humidity &amp;&amp; noise.humidity &lt;= tileType.humidity.high &amp;&amp; tileType.height.low &lt; noise.height &amp;&amp; noise.height &lt;= tileType.height.high ); }).tile; return tile; } Quite probably you will have to go through all the definitions to make sure it always matches one. Or else, check it didn't find one and do something.
You could further simplify it by creating a function isInRange(value, range) { return value &gt;= range.low &amp;&amp; value &lt;= range.high }
Yes :) I focused on showing the general idea, but of course it _should_ be further refined.
Yeah I figured it wouldn't be that simple. Thanks for the help!
Than
Man I cannot _material_ design in anything other than an official Google app
They both are interesting, and yes, they can be combined, as I have 4 main biomes which then can further be divided based on humidity and temperature (for example, grasslands, lone trees and forest are all same biome, just trees are in a bit more humid area but all around same temperature) and so on. Thank you, I'll try to do something similar to this.
Wtf is with all these emoji in the text?
Yeah I try to do that often times, I just couldn't really find a good way to do it but really wanted to see the end result. And I see that it turned out okay even though I didn't even implement "proper" noise with octaves and differering amplitudes/frequencies between them. Anyway this is a really good idea, I never thought of using modular string keys before, thank you!
It gets noise values of height, temperature and humidity in given x and y and based on that determines tile type, that's why I named it tile. In this case I just call the actual texture a *tile*, as it's a tileset. returned object is x and y offsets in tileset where tiles are picked from in draw() method. I didn't really mention that because I just wanted to know how to determine output based on input a bit better than what I did.
You don't "separate" them, even if you put them in 3 files for html, css and js, in the end you still end up having the same page which has same functionality, you just can read it better.
I‚Äôm a little confused on where to really start with this I‚Äôve attached another image for the rest of the assignment 
Vanilla for learning and better understanding in general, frameworks to do the damn job, and do it ezpz and fast.
But also remember that jQuery is a piece of shit that you can easily learn if you know JS. I hate jQuery with a passion.
With amount of IDE's that have trivial functions such as find-all and rename, nobody really has problems with it anymore. There's nothing wrong with makingAVariableNameThatTellsALotAboutItUntilYouFindABetterName when you can simply later select it, press 1-2 buttons, enter it's new name, and all instances of it are replaced.
Because it's regex, not tab remover.
Fast startup? It takes 6 seconds for me, and that's not even opening a file. Is everybody just on crazy-powerful machines, or have standards fallen that far?
IME they seem to have gotten better. In fact, a decent vim plugin was what kept me from switching from atom to code. &gt; then they updated it and now I can‚Äôt have it enabled more than 2 mins Hmmm, I think I have everything up to date, and still running fine ... I'm using "vscodevim" and it's holding up fine. None of the vim plugins are perfect, but I can at least I'm getting the hoped for productivity boost when editing ... Did you use vscodevim, and if so, what did you find wrong with it? Just curious ...
Hi /u/ObiwanGinobili2, For javascript help, please visit /r/LearnJavascript. Thank you!
Most keys didn‚Äôt worked as expected. Couldn‚Äôt move the cursor. Strange selections when I wasn‚Äôt selecting. Unusable. It was vscodevim, and another one, i guess it was some conflict with the keybindings of another plugin because now works fine again. Or maybe the configuration was corrupted... I had problems more than once with vscode and configurations that didn‚Äôt disappear after deleting a plugin. Maybe installing and removing multiple vim plugins created the conflict.
Yeah he really is lol. Classes are just syntactic sugar over the function keyword, the behaviour is exactly the same as if you were to define methods inside of a function using ‚Äòthis‚Äô (on phone sorry for formatting but I‚Äôm talking about function keyword). ‚ÄòFunction‚Äô and lambdas have different behaviour regarding context as you know, other than that everything that happens with other ways of defining functions can be achieved with those two, and all of those other methods of defining functions (including classes) ultimately boil down to a lambda or a function.
Lambdas adopt the context that they‚Äôre defined in, while it you use the function keyword you will open up a new context and ‚Äòthis‚Äô will reference that function. That‚Äôs literally it! It a a very small (but significant) difference.
Keep in mind they want to check if it's *in* the range.
nah, it does everything slower. imho
use lodash.js https://lodash.com/docs/4.17.4
From the absolutely gigantic sample size of my friend and I, we‚Äôve both made those salaries in those timeframes and people in all the offices I‚Äôve worked in seem to be in the same boat. It‚Äôs kinda why I listed those salaries in the first place. My friend actually makes more than me and he does front end only. My salaries went ¬£26k in my graduate job for 9 months, ¬£35k after promotion. 3 months after that I left for ¬£40k, now I‚Äôm on ¬£55k. I graduated in 2015 and have been in industry since September of that year. Judging from my coworkers and people who I‚Äôve met it really seems to be the norm. If you hang around at one company obviously they‚Äôre not going to promote you up to that salary in that time unless you‚Äôre a superstar, but I think people should move around early in their careers to find their feet.
That's the right line, but the correction is actually wrong for what you're trying to do. Try reading what the if statement is doing out loud. &gt;`if (GCSE &lt; 1 &amp;&amp; GCSE &gt; 6)` &gt;if GCSE is less than 1 and GCSE is greater than 6 That can't be right, since a number can never be less than 1 *and* greater than 6 at the same time. Using `||` would be &gt;`if (GCSE &lt; 1 || GCSE &gt; 6)` &gt;if GCSE is less than 1 or GCSE is greater than 6 This will work for some numbers, but only the ones *outside* your range. What you really want is something like "if GCSE is greater than 1 and GCSE is less than 6", though I'm betting that won't quite work either (testing it with numbers near at edges of your range should show you why). You can check out the [list of operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Comparison_operators) for one that might work better, and you might want to make sure your input is an integer too. You might also want to look into "[truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy)" and "[falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)" values for your other validations.
I think it depends how much boiling you're doing :p If you go that far, an arrow is just sugar for a function too, right? I view arrow as separate because it isn't constructable, not just because of the lexical scoping changes. Same for method syntax creating non-constructable functions. If you accept arrows and different enough from `function`s, them methods count for similar reasons since spec-wise they get a `HomeObject` property that normal functions don't have in order to allow super to work. For constructors they are more sugar, but for `Reflect.construct` which most people don't even know exists, not sugar for the es5 class pattern, and when you desugar a class you also have to desugar all super references which is 100% a pain.
you speak as if findandreplace is a new concept or that text editors before that existed before you were born didn't have them. try writing code with a stupid-ass name like that with class names that depend on the class name, and other files that reference that class name, and oh my, I don't think you have enough coding experience!
&gt; stupid ass-name *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
jfyi you can disable the default behavior in the settings, it's explained in the readme of the flow plugin
Personally I prefer [Mithril](https://mithril.js.org/) for projects of any size, but it's especially well-suited to small projects. It doesn't require any build tooling, you don't need to learn a custom template language, doesn't require fancy redux libraries to wire up redraws. It does include http request and router libs all in a single 8k gzipped script. It also comes with a tiny, optional streams library to help work with async data.
The new generation of writers. 
Webstorm is a cheaper intellij
Hah, they've been evil since Windows 3.1
JVM but it's written in Kotlin.
That disables all linting though. I was no longer getting Eslint errors. 
[removed]
Now think about the edge case. It asks for the last three letters. Letters are [a-z, A-Z]. What happens if your input is ‚Äút e s t‚Äù. The last three letters are ‚Äúest‚Äù but with your method it would count the space character as a letter as well. Can you reconstruct your algorithm to handle this case as well? 
I just want to say üñïfuck thisüñï style of writing.
point2place: https://github.com/bradoyler/point2place Library &amp; CLI for converting longlat coordinates to a place (reverse geocoding w/o a http request) try '$ npx point2place -l 30,30' 
The one I'm most efficient/productive in, unless I was doing it as a reason to learn something I've been meaning to learn but haven't yet.
Shit this seems pretty revolutionary. Has anyone given it a shot yet? Any hurdles?
github pages? and thats pretty hard coded tbh
So https://c9.io with less features?
"The natural flow of discovering dependency is something like üîç Google üëâ npm.org üëâ GitHub üëâ $ npm install; Google, NPM, and GitHub are not telling us about hidden cost of package we install;" What the fuck.
&gt; Shit this seems pretty revolutionary. It would be, if not for [c9](https://c9.io/) and the now defunct nitrous.io.
Thanks for the question. Author here. Our goal is not to build a professional-grade IDE like c9, but rather to make it dead-simple to code and host simple node.js apps (think bots, basic web apps, add-ons, etc.) With that being said, we do have more standard IDE features planned in the pipeline. Stay tuned!
You can a method called trim that will remove all the blank sapces and put letters together. After that, you can just apply the algorithm above
I've struggling with configs this is excellent, dead simple to set up applications
I haven't learned a single one yet. 
I got it. It was overkill with emoji (I did write the post). And you reminded me to [check article for readability](http://wooorm.com/readability/) next time. Nevertheless, a valuable idea can be hiding behind typos and poor language and style üòâ Because, not every contributor of JS community is a professional editor or even native English speaker. Anyway, thank you, honest feedback. I will rethink usage of emoji next time.
What's the use case you envision? If it's just for simple apps why do we need it? The app was simple after all...
Mostly of the time I don‚Äôt need to use the mouse, I‚Äôm staying on my row 80%. no one software can do a better job than Vim and Neovim in my case. So I‚Äôm developing with less effort just with this simple habits. Something usually takes me one step with Vim, need 2 or 3 step with VS. At a end of the day, I did more work for less effort :)
Thanks for the question. We are targeting at use cases where the app "logic" is simple, but not necessarily the setup. For instance, if someone who has general programming experience but not a frontend expert wanna try out one of the latest frontend frameworks, the initial setup can cause significant overhead. Another example is that if someone wanna write a simple voice bot with the latest Alexa framework. That's why we also plan to provide more app templates so that people can easily get started with different frameworks.
Thanks, you seem experienced, if I pay you ¬£10 will you please fix the whole thing for me? like the whole validation?
Very convenient. Where is the pricing?
Right now we are still in beta stage so everything is free and best-effort, and we only support public projects. A paid tier is definitely in our plan to introduce private projects and better SLAs.
Do you plan on having a free tier after leaving beta?
Yes, the free tier's (hosting) performance would be similar to Heroku's free tier. The online editor and workspace for public projects would always be free.
Good news. Seems like a great product, wish you guys luck!
Thank you!
Interesting. Looks good so far, good luck.
And with a click of a single button, most text editors find and replace ALL OF THAT to something else on demand. Maybe you should stop using notepad and get a real editor? Or maybe entire IDE dedicated to language you're using if your project is that big?
'''trim''' will only remove whitespace from the beginning and end. It won't remove whitespace in the middle of a string. 
Looks like cherow demo page got a reboot. Looks cool
React &amp; Redux / vuejs &amp; vuex
Oh, really? Got a source on that? I‚Äôve been using Kotlin on our latest Android app at work, it‚Äôs *so* much nicer than Java. 
I'm really not trying to be glib, but it's literally in the Wikipedia entry for Kotlin. Jetbrains invented Kotlin to rewrite IDEA Intellij, of which Webstorm is a subset.
I'd use plain javascript. Mainly because I always want to feel like I'm controlling as much as I can in my code. Also it's just a memory game, so you can get away with drawing your background into a buffer once then drawing cards over it as you please, then drawing that into main canvas based on clicks, the animating would be the hardest part (if you want to animate a card that you flip over, though that's not hard either if you use requestAnimationFrame() instead of drawing per click). I don't really know what kind of memory game you'd like to make, but I don't think it's much more difficult to do than a minesweeper game that feels fair. [Shameless plug](https://hevaesi.github.io/minesweeper/?width=32&amp;height=32), please don't try to find source code and look at it, it looks horrible. :) You don't really need frameworks unless it's a 3D game as nobody likes writing same code over and over again to render properly. But it's up to you, use whatever you're comfortable with.
Sounds like what a proper library should be, I'm not a fan of using libraries in JS but I think I'll check it out. If a dependency introduces 10 more dependencies, then is it a library or is it a wrapper around a collection of libraries made by others?
Luxon = 24.6kB vs 61.4kB for Moment. Considering [intl](https://caniuse.com/#feat=internationalization) browser support, I'm all in! 
You've probably seen it before. But feels similar to https://glitch.com/ The remixing (open source) projects feature of glitch is quite fun, as it allowed you to understand and play with someone else's codebase. I've also used glitch for collaborative coding with junior developers, can easy put some code up and live code it together, seeing the results live without ever having to deploy. Would be great to see a more fully-featured version, along with strong collaboration tools.
&gt; From the absolutely gigantic sample size of my friend and I Don't we all derive our wisdom from our own personal sample population? :-) So far, your progression seems in line with what I have applied to my own developers and new recruits. And, you're right -- the surest way to increase your pay is to switch jobs. However, from experience, it is also good to make yourself more valuable for your current employer (if it is worth it) and leverage the expertise for future salary increases. &gt; but I think people should move around early in their careers to find their feet. Completely agree. I sacrificed very well paid jobs early in my career to gain experience elsewhere.
You can't. It depends on user settings, same with where it will be opened and how. To answer your question, simply link them using an attachment, using url where your file is hosted. &lt;a href="url2your.pdf" target="_blank"&gt;Open pdf in browser(?)&lt;/a&gt; Personally, it opens pdf in a new window for me (as you'd expect). But it's not guaranteed.
ASCII art has gone Unicode.
Does/will the free tier hosting 'sleep' after a while, like Heroku's?
React-motion is nice, but i dislike render functions so much, can't get used to it. It also renders the component on every frame, which isn't the most efficient. The nicest animation api i've seen so far is react-natives animated. Smallest api surface, very powerful (interpolations, gestures, chains, etc). You get "animatable values" that you can put into generic styles, then drive them from outside. They render without affecting the component which is very fast. It also works for the web: https://www.webpackbin.com/bins/-KfKys3S2mgEH9UsE8GL
There have been several attempts in this space (cloud9 for instance) but I don't think any of them got it quite 'right' yet. This looks like it's on the right track, going by the description. Going to give it a shot for my next project and see how it works.
These are nice. Great job!
Always use a framework, it shouldn't even be a question. For anything that is dynamic, or even if not. There is about no benefit otherwise. You'd end up with a less performant, likely bloated self-made framework. Someone has to take care of rendering efficiently only what needs to be rendered, or read and write to the dom without trashing layout, orchestrate pooled events in order to not cause jank. Etc. Also the way you'd normally throw wires throughout the app to [inform this place of something that relies on that place](https://pbs.twimg.com/media/C7eEVWJVUAA8era.jpg:large), it isn't the way. Use react, vue, mithril, preact, whatever you like. Your app will be a piece of cake. But don't let anyone fool you, "plain javascript" means working against the dom.
What's wrong with github pages? My [minesweeper](https://hevaesi.github.io/minesweeper/?width=32&amp;height=32) runs the same as if I ran it anywhere else...
Nor any comments where they are actually needed... I mean, when you ask for contribution it shouldn't even be a question as to whether there should be comments or not. Otherwise it's fine both ways as long as you don't forget what your code does.
It sounds like you want to let someone drop in a project and run it without having to go through configuration and server side set up? I can see this being very convenient.
how does this compare to moment?
For Brother and Zebra printers I do what psiablo suggests. For Dymo I use their js API. I prefer Dymo.
Hmm. Don't really know. What about "charAt" and then only pick the letters and add .toUppercase()?. I'm sure it would work but it's probably not the "proper" way of doing it.
In the docs - https://moment.github.io/luxon/docs/manual/faq/moment.html 
&gt; I just can't seem to understand your problem So.... be quiet.
Always good for end-users to have competing companies / projects.
Angular fits well with the MVVM requirement. The benefit is that you can use Angular for work if you want.
Nice works. When there's the github integration will be interesting. Just don't forget the bitbucket service. 
Hi /u/jamuhl, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
C9 does hosting? I‚Äôve only seen it run apps for previews, never thought about leaving one running
Great..Iam loving it...all the best.. 
That‚Äôs a reasonable solution. How would that solution look like. Also what happens with your solution when there are less than two letters in your input , ex input is ‚Äúa‚Äù or even the empty string. 
You could create a server running locally and send a request to print from the webapp
Outside of dom manipulation, how familiar are you with js? Do you have a good understanding of scopes, hoisting, and closures? Can you tell me about context in javascript? Outside of that, how are you with "the basics". Do you have a good functioning knowledge of css? Can you design a layout from a mockup with accuracy? Do you have an understanding of what it means to write semantic html? If you answered yes to all of these, you're probably in an okay spot for the position. Do you have a portfolio and github to showcase your work? 
It's not about winning the argument, but you never even bothered to provide any good point so whatever, I'll take it :)
We have some basic Git support planned for our next release, and more comprehensive support is coming in the future as well.
Yes, it does.
Thank you!
Why throw out the baby with the bathwater? I'm building my own framework with jQuery *as the foundation*. This way for instance a) I don't have to write Ajax functionality and b) on the same topic, you don't have to pull in Ajax functionality from somewhere else. Win for the framework developer, win for the framework consumer.
I agree that it was a little tough to get started with rm, but I understand the motivation for the API after playing with it a bit. Thanks for the tip. I'm looking forward to checking that library out!
What's the approximate reboot time when the next request happens? With Heroku I'm easily waiting 20+ seconds for a simple Express app to come back up, and that's a dealbreaker for me.
I cannot say for sure, but right now it takes about 2-3 seconds to spin up the container and the rest is the time to start the process. The time might get longer when we are under load, but it is something we are trying to optimize aggressively for (like currently we use a custom container orchestrator to reduce container scheduling time).
I like the sound of that! Excited to try out Postverta soon :-)
I don't have an answer, but as an approach to the problem you could look at what styles and javascript the bootstrap modals use to lock the scrollbar.
From reading the questions and your replies. It looks like this is a simple way to start something up and go. Would you envision someone starting an app and keeping it on your platform? It doesn‚Äôt look like that‚Äôs the main goal with this. Not to scale this up to a massive application. You want people to port away at some point simply because the infrastructure can‚Äôt handle anything really big. Is this assumption correct? This is a hackathon tool. Right?
Do you have the paid or community version? I believe the advanced web features are only available in the paid version.
You can disable the custom CSS by unchecking "Use subreddit style" in the sidebar. Or you can try tweaking the CSS by installing [Reddit Enhancement Suite](https://redditenhancementsuite.com/) and going to Options -&gt; Appearance -&gt; Stylesheet Loader
hmm okay, I have the community version indeed.
Beginner question: Does that mean when I use const/ let that the only disadvantage I have is that I don't get the text highlights. Or does that mean when I use const/let in my code that the script won't even work when I run it locally?
The issue is that my main computer is a Chromebook. Never mind the fact that our detached garage where all my inventory is has a poor internet connection, but the Chromebook is the only computer I have that is portable. The BS part is the fact that the Android app doesn't detect the printer, neither does the Chrome print dialog. 
For really complex applications, our vision is to provide good integration with production quality PaaS and IaaS in the future, but the more important goal is to do this without sacrificing the fast iterating user experience.
In this case it sounds like you're running the code in the browser so depending on the browser I'd they support const and let your code will work. The browser executes the code and not the editor. So all you'll be missing is syntax highlighting and inspections.
Thnx for your help, I just activated the paid version of pycharm(for free! As I'm a student) and everything works fine now. 
I‚Äôd use webpack for something like that. But I‚Äôm at the same time afraid to suggest it to anyone. Webpack would be able to pull component css from your dependencies given that you also require/import them into your modules. Having said that it‚Äôs possible, I really can‚Äôt tell you of a simple way to do it. The documentation is really poor and the fast changing api leaves most of the examples you find out of date. A simpler way is to use some gulp tasks and build your concatenated css by ‚Äúhand‚Äù and minify it with some common uglyfier. 
If you are tired of cloning every moment, you'll love Luxon.
What's wrong with date-fns?
Since you are using Gulp, you should take a look at [gulp-useref](https://github.com/jonkemp/gulp-useref).
You can use Webpack‚Äôs [DefinePlugin](https://webpack.js.org/plugins/define-plugin/) with a different configuration per environment.
Awesome! It's nice they hook students up! Good luck and enjoy all your learning!
yea webpack seemed more complicated than I need. I'll have to dig more into using gulp
How about giving the body a position fixed and saving the scroll position (margin to top) with javascript when modal is opened. When modal is closed you can give the body position relative again and scroll to the saved margin? I think i had that problem too on mobile, it's because the body behaves different on mobile. 
I'm not seeing this option anywhere - ctrl + F doesn't reveal it either.
Convert yarn.lock to package-lock.json and vice versa: https://github.com/imsnif/synp I hope you'll find this useful!
Example real-time hackernews. https://realtime-hn.now.sh
I made a proxy based model/MVC thingy, [SuperModel.js](https://github.com/SaulDoesCode/SuperModel.js)
It‚Äôs called ‚ÄúShow this subreddit‚Äôs theme‚Äù and it‚Äôs only for gold members.
It's right [there](https://i.imgur.com/O7Emnq6.png), silly.
Hey advertiser, realize that we don't care for spam!
The checkbox is also part of RES.
If you're doing this entirely as client side (which isn't a bad thing if you're using it as a learning project or similar), then what you did there was absolutely fine. It's simple and it works. There's no ambiguity over what it does which is good for readability and future development. Once you get further into the development, you might find that with everything else going off (such as attack modifiers such as miss, shields, health gain, etc. or multiple targets/enemies or allies) that you might find more value in using a data-binding framework such as Angular 1 (or Angular 2+ or React if you intend on moving to a compile/transpile-based workflow) may be more beneficial.
So PaaS?
I mean... I know there's a subjective component to it, but that yellow isn't even that intense. It's gold bordering on orange.
Seconding this, but recommending Vue instead. The learning curve is much gentler, yet still capable of quite a bit.
You gotta set the body/html tag height to the window height most likely it is larger. Maintaining the scroll after dismissing the modal is always tricky.
Not on my screen: https://imgur.com/a/y00Up
I suspect it varies with monitor. It's hideous and distracting on mine.
Here's what works for me: go to https://www.reddit.com/prefs and disable "allow subreddits to show me custom themes" under "display options"
Rockin a Macbook Pro Retina here. Here's the color: http://www.colorhexa.com/ffb400