Yeah unless these run in the background I don't see how this is any worse than the intrusive ads that they'd have otherwise. Less data guzzling, less intrusive, but uses more battery (probably not much more than if it had a video ad every five minutes)
My understanding is that to animate a slide down, for example, you'd need to know the height of the element when fully expanded, which means it unfortunately won't work with dynamic data. 
A lot
That looks awesome! Could you give me a reason why I would still use redux instead of this for new projects?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [geon/xkcd_543/.../**heart.ts** (master → 67653fd)](https://github.com/geon/xkcd_543/blob/67653fd69a25d7d7dadf25fbe094cb65e17ee571/src/heart.ts) ---- 
For component to component communication i use this now at work. Views talking to sub-views, tree-views, sharing simple state and actions, themes, anything really. I haven't dared trying to replace redux with it yet because our app is heavy into middleware. But if it weren't, and for all apps that follow, i think i'm going to use this instead. 
If you are a frontend developer with zero knowledge of Vue and follow this course Vue JS 2 - The Complete Guide (incl. Vue Router &amp; Vuex) and you can become a Vue master with a solid understanding of the Vue landscape. This is a very thorough course on VueJS and the instructor covers a ton of concepts and many ways to write VueJS applications [https://www.udemy.com/vuejs-2-the-complete-guide/](http://www.udemy.cc/vuejs-2-the-complete-guide)
My mission was not to convince people to convert to such an architecture. That would be tantamount to start in a holy war in today’s front end culture. Instead I am showing an alternate approach to those who have already gone down that path.
Sure, let's justify Google doing more crap to us "in the name of security". No thanks. I already hate how invasive they are as it is.
I liked the previous version and am excited for the new one. Really easy to get started with this, and it has nice depth as well if you want to do more complex things. 
I don't get the point, how much money are they making? 5 min spent on a site, using cpu only...
A year or so ago I did a lot with Phaser. I learned I'm not cut out for indie game dev and since moved on, but man is Phaser easy to learn and easy to get more advanced in. Even though I don't use it anymore, I am a big fan of their work. Congratulations on shipping 3.0. I hope it inspires a lot of great talent to discover themselves
Please provide examples?
These are the following tools shown in the above video... * [jsinspect](https://github.com/danielstjules/jsinspect) - Detect copy-pasted and structurally similar code for ES6, JSX as well as Flow * [jscpd](jscpd - https://github.com/kucherenko/jscpd) - Copy/paste detector for programming source code with many supported language (JavaScript, TypeScript, Java, PHP, Ruby, CSS, Less, SCSS, etc...) Do you know any other tools to detect copy-paste code?
Really nice - but is it me, or does the top of the triangle not render correctly?
what about https://www.npmjs.com/package/caller-source-location ?
It is very distorted, yes. I’m not sure I can fix it. 
If you want to argue that frameworks are frameworks because they call code in some special way, elaborate on what _that_ means. If you are trying to say they do IoC, say that. If you are trying to say they are DSLs, say that. "Calling your code" is standard terminology for doing a [[Call]] on a function you own. Implying it doesn't mean that won't be taken very seriously..
I second this recommendation. If just finished this course and it was terrific.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [streamich/bamboo/.../**asm.ts** (master → e38b356)](https://github.com/streamich/bamboo/blob/e38b356db36560bded3fb074b27fdead55b1f813/packages/asyscall/src/threadpool/asm.ts) ---- 
Yeah I agree. Its akin to the free with ads, pay for no ads model except could potentially lead to better user experience since ads are annoying. Most user's phones (US and Europe) are beefy enough to handle a bit of mining.
Can't you animate "top" using vh units?
I point people to this when they look down on me for having an iPhone. Yes, this could get through Apple, but the chances are greatly reduced. 
Hey thanks for the response. Yeah I noticed that
You can block them at in your hosts file or at your router. https://github.com/hoshsadiq/adblock-nocoin-list/blob/master/hosts.txt
However as the application code increases the difference will become smaller in absolute numbers and negligible in percentages. 
HyperApp seems really cool and "cognitive" efficient: it packs a full solution in a small package. 
Best answer right here!
Hey thanks yeah I saw
&gt; Motherboard.vice.com Yeah, I got that warning too
&gt; "Calling your code" is standard terminology for doing a [[Call]] on a function you own. Actually no. When people talk of [a framework] calling your code they're referring to the Hollywood Principle, which is explicitly about inversion of control. See [this](https://msdn.microsoft.com/en-us/library/9zctd4hf.aspx) or [this](https://stackoverflow.com/questions/3057526/framework-vs-toolkit-vs-library/3057818#3057818) for instance. [I've gone over this before.](https://www.reddit.com/r/javascript/comments/7tbks3/how_do_you_define_library_vs_framework/dtbm8xq/?context=3)
It's working using this: But is this the best solution? let offset = setInterval(() =&gt; { clearInterval(offset); setInterval(myFunction(), 100); }, 50);
Thanks!
Not sure on smartphones being as good as gpus, but Monero is a popular one to mine on them. Low difficulty, decent value. 
It intrigues me, I have some game experience from the past and always mean to go back to it. Without going into pages of details, how does it compare to something like React? That might sound like a weird question, but there are parallels such as different views, entitities, data bindings, etc. Don't take React as the be all if it, I'm really interested if there has been focus on providing a workable framework for the things common to games but utilising patterns less game oriented programmers might be familiar with. or if it's designed at a lower level. Or both? 
Thanks, it's what we're after. It's "Hyperapp" by the way.
I'd wager battery usage is a lot higher than video add every five mins. Not got any stats to back that up though!
Great news, should try it out. I’ve used the original Flixel like 5 ago, and learned a lot from the engine insides. If I remembered right, the first photon was based on that one, but optimized and enhanced.
Good bot
genius level crypto coin miner detected lol
My are you making a Node.js clone? As a learning exercise?
&gt; To me a library is something like moment.js which you just import, but I could easily swap out for something else Man, if you know how to change a essential dep like `moment.js` by just swapping it out, I'd like to read your books/posts!
&gt; "Calling you code" means "calling your code". "Uses IoC" means "uses IoC". IoC can be explained as "we call you", but that doesn't change the meaning of "calling" to equal IoC. Makes sense? It's like you didn't read a word of what I or the links I provided said &gt; And since we're speaking of IoC and hinging a question about whether React is a framework based on that as a criteria, consider that React components receives flow of control from React (i.e. React calls render and other lifecycle methods). Compare it to what wikipedia says about IoC: "custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code". And it's like you didn't read the previous comment of mine I linked either. _You_ import React and ReactDOM in _your_ code. _You_ call `ReactDOM.render` to start the rendering process with your top-level component that _you_ pass to it. The fact that the rendering process is [essentially] an infinite loop does not mean control is inverted, or are you going to call every recursive function a framework now? I honestly don't have the energy to repeat what I've already said elsewhere so if you can point out what in the linked comment you don't agree with/don't understand then I can work from there
This is a really big question, and not really specific to javascript. Architecting large applications, in my opinion, is kind of an art form. You can learn strategies by reading, but you're not going to get good at it without years of experience. Read [Design Patterns](https://www.amazon.ca/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612), if you haven't. I'd also recommend [Javascript Alongé](https://leanpub.com/javascriptallongesix/read), but I'm a functional programming crazy. Build something in a way that feels right, then evaluate what worked and what didn't. Which parts sucked to modify when requirements or assumptions changed? Which parts were hard to understand a month later? In general, I have a few guidelines: 1. Definitely use some sort of module system (AMD, or ES6 modules) to aid in encapsulation and prevent global pollution 2. Keep similar code together and differing code apart. 3. Keep modules small, and single purpose 4. Prefer composition over inheritence 5. If you're doing web stuff, don't be afraid to keep the html, css, and js for specific pieces of UI together. Don't fall into the trap of conflating technology with concerns.
 const function1 = () =&gt; { } const function2 = () =&gt; { } const delay = (fn, delay) =&gt; setTimeout(fn, delay); setInterval(function1, 100); delay(() =&gt; setInterval(function2, 100), 50);
I think you may be missing something here, possibly because you refactored the code to share. The first `setInterval` is immediately cleared and `myFunction()` executes once and only if it returns a function executes again at an interval. Remember though that using timeouts are not guaranteed and may run out of sync/be delayed especially with separate setIntervals and low ms delays. I think a better implementation might be to make one function depend on the other to ensure they execute one after the other: setInterval(() =&gt; { // first function setTimeout(() =&gt; { // second function }, 50); }, 100); The exact timing isn't guaranteed, but to my knowledge, the execution order is.
uBlock Origin has the "Resource Abuse" category, which includes cryptominers.
What? No. An ad that features a simple up and down motion or objects dropping should not drop my app's FPS to the single digits. These cryptominers would be way worse than that.
that's cool. I plan to start a games business soon and if we will be working with them, I'll make sure to leave parts of the profit to support the project.
I used phaser to build a game for a university project, it was an amazing framework easy to learn
How does this compare to Pixi.js? 
It's built on top of pixi
Did you make the same comment on hn, or did you just copy paste one from there? https://news.ycombinator.com/user?id=freehunter
The link was on the original website. https://eloquentjavascript.net/3rd_edition/Eloquent_JavaScript.pdf
There is no "proper" way since every project is different. There are only (3) module systems (that I know of) that is being used today: 1. [ES2015 modules](http://2ality.com/2014/09/es6-modules-final.html) 2. [CommonJS](http://www.commonjs.org/) 3. [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) In the frontend world, you will see ES2015 modules used everywhere. Older projects may still use CommonJS since it was around _before_ ES2015 modules were officially released. [This](http://exploringjs.com/es6/ch_modules.html) section in _"Exploring ES6"_ will give you an in depth look at ES2015 modules that you seek. CommonJS you will often find in [Node](https://nodejs.org/) modules/libraries. Although [ES2015 modules are supported](http://2ality.com/2017/09/native-esm-node.html) as of v8.5, however, there are mixed feelings of the approach.
How did you even find that and why would you get downvoted?
Shrug, you're the one coming here trying to argue with me what "calling your code" means... &gt; You call ReactDOM.render I literally said 'You can "call" angular.bootstrap(), but angular is definitely a framework' above... &gt; The fact that the rendering process is [essentially] a loop that waits for changes does not mean control is inverted, or are you going to call every recursive function a framework now? Again, I said "A promise calls my code, but it's certainly not a framework"... &gt; if you can point out what in the linked comment you don't agree with I already addressed why some people think React can be considered a framework: namely, that regardless of how simple you think the internal flow of control is in React, the flow of control into lifecycle methods is entirely controlled by React. Also, idiomatically, you never call a component. You pass it into `createElement` and React decides when to call what. React also checks the "framework" boxes for extensibility (class components literally extend from a base class) and defining standard ways of doing things (again, the component interface). Since you're asking me to spell out the specific part I don't agree with in your link, here it is: &gt; If Y exposes the exact same API that X exposes, and is aliased to X, would that break your app? If yes, X is definitely a framework. If no, it's most likely a library. API parity has nothing to do with "framework"-ness. The wikipedia definition doesn't mention it at all, for example. By that definition, jQuery would be a framework because it can be aliased in e.g. angularjs and replacing w/ zepto can break things even if you only use the intersection of the two APIs because there are some semantic differences in some places. If we wanted to be super obnoxious, we could even write a "lodash" that returns random garbage and that would definitely break your app (qualifying lodash as a framework), and we could fork Ember, revamp internals significantly, and have it still work (qualifying it as a library). That seems super arbitrary imho. That brings us back to IoC being a more appropriate distinguishing feature of frameworks, and what constitutes IoC. Obviously at some point, _you_ call _something_ to make a program work. Whether that is `ReactDOM.render`, `angular.bootstrap()`, `new Vue` or `ember serve` is kinda beside the point. The question is what you can do _after_ that. Can I call `new MyComponent().setState(foo)` or `myComponent.render()` from a larger non-React-centric framework? Sure, I guess. But the point is that nobody does. Instead, the flow of control is typically ceded to React itself, so in that case, React takes on a "framework" responsibility.
So true lol
Will the box2d plugin work with this version?
You can read about the mongodb protocol here: https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/ The relevant parts are that you connect over TCP/IP socket, and that the format is binary, and not something on top of HTTP. So we're looking for a way to open a raw TCP/IP socket from a browser. Googling it gives you this: https://stackoverflow.com/questions/12407778/connecting-to-tcp-socket-from-browser-using-javascript TL;DR: can't do raw TCP sockets in browsers.
Okay that's incredibly satisfying! thanks :)
bump
The first two require Java, for starters. They're not bad in themselves - I've actually made quite a few contributions to WireMock, back when I used to write far more Java. Having to ensure you've got a consistent JVM environment in all your JS environments at all times though gets quite a hassle, and then they're both fairly dated, and don't end up with APIs that fit well into typical JS idioms. The 3rd however can only be configured by writing files to disk in advance to preconfigure everything. Sometimes useful, but pretty niche. Meanwhile, in addition to being simpler and pure JS solution, Mockttp has a various features none of these has at all, like the ability to run multiple tests in parallel, or to configure servers identically, from node and the browser using the same code with just one library.
If you reached the conclusion that this was in any way anti-Redux then I encourage you to read the entire article. Being a refugee doesn’t mean you hate the place that you left. And you take part of that homeland with you in the process.
Let me see if I can get this right: &gt; At an interview, one of frontend developers in my team asked me if we can use timeouts/intervals in components. I answered “Yes” and wanted explain how to do it correctly but I was called incompetent. This is what I came up with: Before you were hired at your current, new job, you had an interview for that job. In that interview the one of the frontend developers from that company - someone you now work with and are now on the same team with - asked you if it was ok to use timeouts/intervals in components. You said "yes". That developer then wanted you to explain it to do it correctly. Whatever you said was not received well by that developer and either that developer or someone else in the interview called you incompetent. Am I close? 
“Mock text transfer protocol” So fucking stupid
I found it because I read the hn thread and read this...and have a pretty good memory. :)
Again you'd have to know the height of the item in order to translate it into vh.
I've done it with variable sized content by animating the max-height and setting the "open" value to some large value. 
how i got fired from my new job
Phaser 1 &amp; 2 were, 3 is not.
They're not really comparable; Pixi is more of a graphics engine, Phaser is more of a game engine (which includes a graphics engine as a major component). Phaser 1 &amp; 2 used Pixi for rendering, 3 uses a custom engine they built from scratch.
I've used both React and Phaser and they are totally two different concepts from my understanding. Phaser is basically a library of helper code. You still need to work out the brains of your game. It allows you to focus on being creative and takes out the tedious aspects of designing a game engine, like collisions, loading assets, managing sprites, etc. IIRC you still manage your own game loop to some degree. They are very different concepts though since one relies on a fixed interval gameloop and the other just relies on state changes, which can happen any time.
Try it
Mining is really, really computationally intensive and it takes GPUs a considerable amount of time to mine anything of value. You're looking at millions of users to make just any kind of money. And by money, we mean, like $20.
Man I realized how fucked the entire thing sounded, then I realized I didn't even use Phaser, It was PIXI. 
Yeah, we used it for a Game Jam lasting 48 hours, and still got something done. Most of us never tried doing games, so that's a big thing, just being able to jump in like that!
Stop using your server to handle webhooks, and use ours.
&gt; would you get downvoted? Maybe the account and posts are less than genuine...
OK - let's work from the top. 1 cent per 5 minutes is 6 cents an hour or about $1.44 a day. Let's see if this is plausible. My GTX 1070 mines 300kh/s (garlicoin) while my CPU (7700K) mines about 30. The CPU can mine about a garlicoin a day. At one point that was worth over a dollar. The number of people it takes to fill up a day, assuming 5 minute sessions that can only run the scripts while the user is on a page, is 288 ((60*24)/5). Let's say a website gets 2880 hits a day. That's 10 garlicoin a day. 
Your cpu maxed out can mine that much, but your cpu will not be running 100% on a web browser. It has to do other things, like process/make the site work and will prioritize tasks as needed. If you use something like a service worker, it will de-prioritize it as needed. Chrome and other browers also cannot take true advantage of a multi threaded environment, due to javascript being single threaded. It has something equivalent to python's GIL. So yeah, it's almost certainly more complicated than some napkin math.
Also, garlicoin is very new and easily mined right now. That won’t be true in a few months. That’s assuming garlicoin even lasts(hint: it won’t).
In addition to the inability to create raw TCP connections, you want to use an application server to proxy your connections for the following reasons: 1. You only need your database server to be accessible to the application servers you control. This limits your attack surface. 2. Some database drivers are smart enough to keep connections open, rather than reconnect for every request. If you had every user connecting directly, your database might face performance issues due to having to open and close numerous simultaneous connections.
Are you the developer? If so any insight on why you chose to use QT over GTK? Looks good though, I'm sure it will get lots of use.
Yes I am the developer. I used libui, which is a GUI library that is different from Qt and Gtk. I used it because I couldn't find any good/stable bindings for Qt or Gtk and libui came up. It's not as refined and it is missing some stuff, but the API works well and the node bindings are good. 
My bad I saw you mention QT for the python example and assumed that's what you were using. Upon looking into libui it seems to use GTK for Linux, and native libs for Windows / Mac OS, which is quite cool. I had originally asked because I've looked a bit into this before and found that GTK did have some official JavaScript bindings.
Don't know much about Phaser, but [here is a really cool example](https://auth0.com/blog/developing-games-with-react-redux-and-svg-part-1/) of building a game using React, SVG, and Redux.
I think we agree. "Considerable income," probably not, but worth their while - definitely. You can 1/10 my assumption and that's still worth someone's bother. 
It doesn't matter if you're right or wrong. Clearly some people believe that garlicoin (or whatever shitcoin you want to name) is worth mining. Source: shelves at stores. Finding the most efficient crypto to mine can also be done programatically ala nicehash.
Google should have apps with mining scripts regester themselves as such, or be removed. Then they can show a label on the apps to indicate it has a mining script, just like they do for apps with ads.
If it's using QT why it's better than QtQuick? Also QT is not native cross platform they render controls by themselves.
What is the color scheme of those code snippets? 
I agree with the eagerness issue to an extent (though I think it happens to be much less of an issue than the author is making it out to be, and it kind of ignores that Promises are meant to be *wrapped values*, not work-as-data). I've never understood Promise cancellation as something that people want. JavaScript is single-threaded, so you can't preempt the code anyways. I believe cancellation will always have to be custom anyways. I know of no mechanic in JavaScript that would allow Promise to implement a `.cancel` that would be more ergonomic than what you can do already. Bluebird implements a `.cancel`, but you can accomplish pretty much the same thing by attaching a `.cancel` to the Promise instance inside the Promise function, rather than registering the cancel function with a callback. I also cannot tell what the author is saying with regards to eagerness. He gives examples of promises not even being theoretically cancellable (or ambiguously so) due to dependency issues, but offers no good explanation as to how laziness would resolve the issue. I honestly have a whole host of issues with this section's logic, but I'm going to move on. I agree with the third section, though I feel the analogy is irrelevant and, at best, confusing. I'm not hip to all the functional lingo anymore, so I don't quite remember what the difference between `map` and `flatMap` are necessarily. I think the author should have described these more thoroughly in order to make an actual argument, but I admit it is my failing that I came in not knowing what they are, and Googling yields... less than fully helpful results. However, it seems to me that `.then` is just `.flatMap`. It doesn't really seem to be so much of a mix of `.map` and `.flatMap`, as it has all the elements of `.flatMap`. I could definitely be mistaken, though. Most of this section seems to be arguing that Promises should be full-fledged monads with all the typical utilities and compositional abilities. I don't disagree, but JS doesn't have that, and it's pretty much too far along to become Haskell. My last point is nearly identical to the author's, but I'd like to apply it to say that I have worked with Promises professionally my entire career (since about 2015, anyways; I'm young), and I have never run into a problem with anything the author points out in the entire post. Everything he mentions that I agree is a problem is absolutely trivial to get around. If I were in charge of redesigning Promises, and the only things I could change would be fixes related to the problems the author presents, I would change nothing.
It doesn't use qt. It uses libui. And the advantages over qtquick are that it has state and everything can be written in JavaScript, plus it works with a lot of existing react libraries. It's also more familiar for people who have already used react. 
TIL I've been using pipelines without knowing they were called pipelines.
The #1 reason you shouldn't, even if you could, is that you don't want arbitrary users to be able to access the database. You want a secure authentication proxy between the users and the database that makes sure the users can't read or write anything that you don't want them to.
Yep i know I shouldn't. that's very obvious, just wanted to see if there was a specific thing limiting me from doing so.
This company sounds radioactive.
What are you animating a slide down for that you don’t know the height? 
most of these currencies are like hat collectikns in team fortress
And still no routable components...
`.then` is absolutely a mix between `map` and `flatMap`. The difference between `map` and `flatMap` is that `flatMap` is a two-step operation: first it maps, then it flattens. In order to achieve its second job, `flatMap` has an extra restriction on the functions it can work with, which `map` does not. Suppose I have a List of Strings (or `List&lt;String&gt;`). I have a `length` function which takes a String and returns an Integer (`String -&gt; Integer`). If I call `map` on my `List&lt;String&gt;` and give it `length`, I'll get a `List&lt;Integer&gt;`. This is the typical use case. But now suppose I have a function `findVowels`, which takes a String and returns a **List** of all the vowels found in that String (`String -&gt; List&lt;String&gt;`). If I call `map` on my `List&lt;String&gt;` and give it `findVowels`, I'll get a `List&lt;List&lt;String&gt;&gt;`. But that's probably not what I want. Lists of lists are clunky to deal with, and all I probably wanted was a list of all the vowels found in *any* of the strings in the original list. For this, we have `flatMap`. `flatMap` *requires* that the function you provide returns a `List` of something, and then it flattens the resulting list-of-lists. So if I call `flatMap` on my `List&lt;String&gt;` with `findVowels`, I end up with just a `List&lt;String&gt;`. So, as a signature sketch: List&lt;A&gt;.map(A -&gt; B) = List&lt;B&gt; List&lt;A&gt;.map(A -&gt; List&lt;B&gt;) = List&lt;List&lt;B&gt;&gt; List&lt;A&gt;.flatMap(A -&gt; List&lt;B&gt;) = List&lt;B&gt; This isn't specific to lists; this is true for any monadic type. So you could sketch it even more generically as: M&lt;A&gt;.map(A -&gt; B) = M&lt;B&gt; M&lt;A&gt;.map(A -&gt; M&lt;B&gt;) = M&lt;M&lt;B&gt;&gt; M&lt;A&gt;.flatMap(A -&gt; M&lt;B&gt;) = M&lt;B&gt; Where "M" is something like `List` or `Optional` or `Promise`. The `then` function on Promises does both by getting clever. When the function you provide to `then` returns, `then` looks at the return value and checks to see if it has a `then` property. If it does, `then` assumes it is a promise and acts like `flatMap` by trying to flatten it. If it does not, `then` just acts like `map` and resolves the promise with the value. So you have: Promise&lt;A&gt;.then(A -&gt; B) = Promise&lt;B&gt; Promise&lt;A&gt;.then(A -&gt; Promise&lt;B&gt;) = Promise&lt;B&gt; (!!!) The most obvious ramification of this is that `then` effectively becomes a reserved word. You can't return a value with a `then` property from a Promise's `then` callback without getting real weird behavior. (This is rarely a problem for anyone, fortunately, because "then" isn't a popular method name.) A less obvious ramification is the loss of control the author describes, and the fact that it makes it impossible to write agnostic utility functions that work on Promises *as well as* other monads like lists.
Phaser uses pixi 
Im thinking about using Phaser for a multiplayer crypto game, but I was frustrated with some library bugs in phaser 2 a year ago. Any advice guys on if Phaser 3 can support something like this or suggestions on another js client?
I've been working in a codebase my company's tech founder wrote a couple years ago, and these fucking for loops are everywhere. Each with a ridiculous amount of nested if/elses and bizarre mutations. Yesterday I found a Date setter operating on a shared reference a couple layers deep in one. Hmm, wonder why our eff'n dates are so wildly off all the time? /endRant I've become so conditioned to it that I immediately started cursing the early examples, saying, "just write a filter with two fucking conditions and a map for fuck's sake!" It may be time to start a job search. 
reminds me of Dracula color theme
Hmmm... this happened around late 2016 where i was learning a new system. I'm pretty sure I switched to ES2015... but the dates dont really line up. What about ECMA6 modules? http://2ality.com/2014/09/es6-modules-final.html
You may be interested in https://github.com/Izzimach/react-pixi, which allows you to control a PIXI.js canvas with React.
I see. Thank you for your explanation. To summarize as well as I can, `.flatMap` will not lift a return value from 0 layers to 1 layer. `.then` is not problematic for this reason. Promises are monads that cannot have a `.flatMap` (due to the restrictions of time and space), but for whom `.map` does not make a lot of sense without flattening (because we pretty much always want to flatten *in the case where the function returns another Promise*). I think this would serve to be confusing more than helpful, so `.map` would be an anti-feature of the language. I recognize that it is every so slightly more powerful, in that you can have nested Promises, but I genuinely haven't the foggiest idea why you'd ever want nested Promises. I believe (please educate me if I'm mistaken), a proper monad is supposed to be able to lift itself nested, but Promises can't, and I think that's a good thing. Cannot think of a usecase. Arrays in JS *do* have `.map`, and I believe it's a valid `.map`, and you can have nested arrays. We're not aiming for pure FP -- that ship has sailed. We're just going for practicality. The way I see it, the `.then` method is actually a fantastic approach. The issues you pose are just typical growing pains you would get with any approach -- A library that acts upon objects it creates can always be "duped" (accidentally or on purpose) into thinking it's received an object it created, unless it uses `typeof` which pretty much wouldn't let you interoperate with other libraries (for example, mixing Q, Bluebird, and native promises). If we're going to have something like Promise, it's going to have this issue. In fact, doing Promises the "proper, monadic" way would result in clashes here, as tons of objects have `.map`s, and several have `.flatten` (certainly more than `.then`, unless you count ones that are trying to interoperate with Promises). But even if you think duck typing is bad (you don't want to "reserve" words), I fail to see how making `.then` into `.map` and `.flatten` would help.
You need to destructure that: `Math.max(...this.users.map(({ credits, shots }) =&gt; credits + shots)`
Very surprised there are companies with large vue code bases.
Insert Gandalf meme here
Yeah... Don't do this unless you want to be hated. You just pissed all over the performance and readability of this code by looping through the elements twice and shortening variable names. One liners are cool, but not in the real world.
Don't be, it's a massively popular library. It's starting to catch on in SF, because it's damn good. I use it heavily myself in production level code from small to medium size. I'd be lying if I said I'm using it for large scale production app, but I absolutely will use it next time we start one. P.S. You know especially in Asia, it's used for large scale production apps by big companies too: https://www.quora.com/Who-uses-vue-js I prefer it over React, and 1000 times over Angular2-5+
Why do you prefer it over react?
I should really spend 4 weeks re-learning Ember and rediscover its beautiful secrets. Seriously, I really liked developing a little test site in it but the learning curve was massive.
The author is giving his opinions on the design of promises, having seen similar implementations in other languages. He acknowledges that you can work around issues, but that it is unfortunate that one has to do workarounds at all when there are alternatives elsewhere that are better designed. Promise cancellation comes up most often when people talk about autocompletion/typeaheads, where one wants to abort previous `fetch` requests in order to avoid race conditions if promises resolve out of order (which can happen because of network). His beef about eagerness-vs-cancellation is that eagerness makes the promise chain itself stateful, whereas a lazy version can be stateless up until the point one calls `.run`, and the statefulness would then be associated with each `.run` call, rather than a singleton state per promise chain. Where the statefulness exists is at the heart of why cancellation is problematic with promises. Re: map/flatMap/then, here's an hypethetical example of what would happen if these methods existed in Array (and were implemented strictly): [[1],[2]].map(([x]) =&gt; [x + 1]) // [[2], [3]] - no surprise [[1], [2]].flatMap(([x]) =&gt; [x + 1]) // [2, 3] - maps and flattens [[1], [2]].then(([x]) =&gt; [x + 1]) // [2, 3] - also maps and flattens // but... [1, 2].flatMap(x =&gt; x) // throws TypeError: what do you mean flatten a Number? [1, 2].then(x =&gt; x) // [1, 2] can't flatten so just maps because yolo What makes things confusing is that `Array::flatten` is typically implemented in js with `concat` which is fast and loose about types. A `flatten` in a system with sane types would have type `[[A]] -&gt; [A]`, i.e. it would only accept arrays. This is similar to how `foo + bar` does different things depending on the type of `foo` - addition if number, concat if string - it may be useful on occasion, but can also be a foot gun, and a language with stronger type safety would require explicit type conversion to prevent unintended consequences. In the flatMap case, a sane type system would complain because if someone's flattening a non-array instead of using the more appropriate `map`, there's a chance they're doing something stupid.
I just made a game with phaser 2.0 for moviegamejam. Was tinkering with Spriter and the Spriter plugin. https://madmarcel.itch.io/assault-on-the-tron I'll wait a bit before I switch to the newer version.
I think better bundler integration was one of the focuses of v3, last I read
Hey, the migration from Vue 1 -&gt; Vue 2 is really painless, or was last time I did it. I recommend sticking with VueJS, it's awesome. Good luck with everything
With `reduce`: const twitterHandles = (authors, company) =&gt; authors.reduce( (as, { company: c, twitterHandle: t }) =&gt; c === company &amp;&amp; t !== null ? [...as, t] : as, [] ); 
The final version is infinitely more readable than the for-loop. The mechanisms of looping and pushing are abstracted away, the only info that's visible is the filter condition and the property being extracted from each of the elements in the array. If there's a perf bottleneck then sure, revert to the for-loop but until then... &gt; Premature optimisation is the root of all evil - Knuth 16:4
I know this is a month old but this explanation is so good I feel compelled to say thank you.
It would be nice if the sky had some other colors, lets write a blog article about it.
There is a trick by overriding valueOf function, but that is distasteful, borderline disgusting.
&gt; By that definition, jQuery would be a framework because it can be aliased in e.g. angularjs and replacing w/ zepto can break things even if you only use the intersection of the two APIs because there are some semantic differences in some places. Obviously the implication was that the exposed interfaces do the same thing under the hood, with the point being that a framework provides more userland functionality than what its exposed surface provides, but you can be obtuse about that too &gt; Obviously at some point, you call something to make a program work. And since it seems you've never actually used [what would be considered] a pure framework, here is how you do that with a couple of things that are not libraries: $ rails s $ meteor run . $ sails lift $ ember s / ember build Makes you think huh
Hey the people at your new job are on reddit too.
I'm pretty sure that actually is the Dracula theme, not darcula.
Stop maintaining servers if you just want to run some code.
I think it's highly a matter of preference. I'm pretty good at React, I know it inside out, but Vue is just a breeze of fresh air in terms of simplicity. I like how components have a HTML template, a script and some css, split into three. It makes it much easier to get an overview. In the end, bad developers can make both look like crap-code to read, but Vue makes it easier to write concise front-end code, if you ask me. Also, you can give a designer a Vue-component and (s)he will be able to derive where the HTML/CSS happens, and not touch the `&lt;script&gt;` section at all. It seperates concern and provides an overview in an easier matter, whereas a React component with HTML mixed in Javascript and vica versa, it likely caused heart attacks in designers before :-) 
That's pretty cool. I was trying (and failing) to ask if phaser is a complete framework rather than just a bunch of routines for sprite handling or collision detection. So I could have said React or Angular, anything that helps the developer to separate their game state from the visual representation. I am going to poke at your project though :)
No, as a real alternative, only networking stack is missing now :)
Why?
"method chaining" is more general then just this.. More like 'map-filter-reduce'.
And also Method chaining was more popularized by jQuery i think
map/reduce style programming would be so much better with lazy iterators (or generators) like in Python. There are some lazy lib's on npm that really help with the memory trashing if you have large collections.
1000 upvotes
What libraries?
`lazy.js` for example
Thanks 
There are a lot of things to learn yeah. Ember does a lot of stuff for you, so it's understandable there are lots of things to learn. But I think the guides to a good job of setting you up.
I think that a lot of the problems the author have with Promise are actually conscious design decisions. Not allowing the end user of the Promise inspect or affect the value resolution flow (eg by causing it to start running at an arbitrary time, or cancelling it) allows the Promise to be passed around freely without concern that code elsewhere in a project will break or change the behavior of the resolution flow. I think developers in large (multi-team) projects that use Promises will come to appreciate this, and if you're a lone developer who knows exactly what's going on in the entire codebase then you can get around most of these "problems" with a helper library. I don't think the `map`/`flatMap` argument is really relevant, and the design decisions that went into `then` become even more apparent when you start using the `async` and `await` keywords.
&gt; the modal with long text doesn’t scroll very fluidly, takes ages to scroll. This issue is fixed in the latest release. &gt; Also, content changes behind the modal when opening a modal but returns to its original state when closing, and its really obvious, also looks and feels weird. Again, known issue? I'm still not able to reproduce this, but it's reported: https://github.com/sweetalert2/sweetalert2/issues/918
&gt; I see the same issue. Using the web view inside Apollo. Tried in Safari too, and it’s the same. The same to first one or the same to second one? :)
 All I see is weird expectations and misunderstandings. Promises are just fine the way they are. In my experience they are very difficult to use well. I've seen Promises wreak havoc on a codebase. Of course that isn't at all the same as saying they can't be used well, and can't be very useful. But why would people have weird expectations and misunderstandings in the first place? 
https://xkcd.com/543/
The project is not dead, but being developed on a different branch. But a big factor is cross compatibility which is why I chose libui. 
The time gained from improved readability and reduced bugs can be spend optimizing your architecture.
No. Especially in the never synchronous part. Like really? You want code around the code to not fire until your promise resolves? That's blocking which is what got us into the mess in the first place. In any case, if you really want to block a line until a promise resolves, async/await style solves this "problem". Also, I will say I totally agree the semantics of then are broken by mixing map and flatmap, but you're expecting type restrictions in a unityped language so the author is going down a hole I don't think we need to go down.
ECMAScript 6 === ES6 === ES2015. See http://exploringjs.com/es6/ch_faq.html#sec_es6-vs-es2015
Putting that function in another file and including that in a `&lt;script src="..."&gt;` is probably the best choice... What happened when you tried that?
Ignore the other comment, because it literally says nothing of meaning. For loops are still much faster unfortunately. With the trade off in readability, I would use for loops in cases that definitely much more intensive. While loops can help in those cases as well. Take a look at this [test case](https://jsperf.com/fastest-array-loops-in-javascript/686) on jsperf and see what works best for your use case. I'm on mobile and don't feel like waiting for the test to complete. One thing I would suggest, add comments to your loops that are complex. What I normally do is write the loop how the article describes because it makes readability better. Then I'll comment it out, add some additional comments to save it (since people tend to remove comments of code blocks), and explain why I'm not using that syntax. That way it's clear from the readability point of what I was trying to do, and why I didn't do it that way. Also, if you are even remotely suspicious your code is slow, benchmark the function or loop. Even if it's just console.time(), there isn't a substitute for knowing what's faster, and evergreen browsers are always changing performance wise.
Slow scrolling in both. 
I tried that way but if I clicked on my object I got the error message showContent is not a funktion
What you're looking for is a "predicate" function. One that you can use to filter lists and values. This is a nice article on predicates that may help out https://codepen.io/Universalist/post/predicates-in-javascript It's been a while since I read clean code but I assume the "don't pass booleans" is related to a boolean having no additional context. It's simply a flag that you provide to a function where a better abstraction would be useful, and this is where a predicate comes in. It's a named function and a recognised abstraction that is more informative than providing a "true/false" Here is a fiddle I built on top of yours. I also refactored the callbacks out into a Promise chain because I find that easier to parse, especially when the results of the callbacks don't matter https://jsfiddle.net/n3z7tye5/32/
If you store your tasks as an array you can just filter over the array with tasks.filter((single) =&gt; single.completed) And I would also try to get rid of this callback stuff, since it makes the code look bad and you can do all of this synchronous 
The problem that I think you are having is that you are mixing up your front end code with the back end code. In your Express app, you should have something like this app.use(express.static(path.join...... That ```express.static``` folder is where your front end JS should live. BTW just putting a regular in the head section of your ejs file will work too, but having a separate js file in your public (static) folder is the preferred way &lt;script&gt; function showContent() { console.log('hi') } &lt;/script&gt;
Don't we all want fake internet points on hn and reddit?
In my Express app I have app.use(express.static(__dirname + "/public")); [This](https://i.imgur.com/j93RSjG.png) is my folder structure. Functions.js contains: function showContent() { console.log("test"); } Index.ejs contains: &lt;script src='/scripts/functions.js' /&gt; I tried to use the script tag at the bottom and at the top. Didn't make a difference. Error message: showContent is not a function.
I'm excited for this. I liked Phaser 2 but I wanted more modularity
One loop only. Why not?
Indeed it is fixed. Great job!!
Ah, I think you're right :)
- Use any VM, not just V8 - Faster - To run in kernel space - To run in browser
I am having a hard time even imagining how promises could even be used poorly with async await. Maybe in animation frames or something?
I see lots of people using it. I've tried it and hated it, so I don't understand it, but all those people can't be wrong...
Can anyone ELI5, “memory trashing”?
The class "data type" here is pointless and likely requires transpiling. This should just be an object { }.
OK, good enthusiasm. 
lol. I don't know about the "all those people can't be wrong". I think the main gain, is the italic font stuff almost is like a new font, which helps scan ability. I personally can't deal with the aesthetics, but I see why people use it. I don't think this is a wrong or right type of thing though. Whatever helps you at the end of the day.
Trade-off for memory and processing as per usual.
Vue’s actual reactive data implementation is also extremely efficient. When a method fires, it buffers all data changes so it can do them all at once and then update the DOM a single time. It’s also more efficient than Angular and React (at least pre-16, i don’t know if React has changed this since), in its reactive data approach because it doesn’t have to dirty check or tree diff it’s data. The reactive data actually keeps track of its own dependencies, so only things that need to update will even be evaluated. Evan Yue explains this in depth and much, much better than I ever could, listen to his episode of JavaScript Jabber if you’re curious.
So "memory trashing" means you're "trashing" the memory by creating all of these arrays through the use of these functions? It's a pejorative?
Do the second and third examples create the uninitialized array, copy it, and throw it away? If so is there something similar that avoids that copy?
Lodash actually does have some [lazy evaluation](http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/) capabilities too, so you might be using them without even knowing it.
A million records ? My gut is that I would not approach this with even 10k or 100k records. There are some crappy computers out there. 
Not everyone is afraid of the job market..
Interesting, but readability of the OP easily wins out, and should be preferred.
Just refactor it?
Tracking js variables is very easy, yes. If you need to hide something, do it on the backend. Firebase has easy to use authentication that supports phone number verification, you could check that out
I've seen people complain that they have to await each promise in turn, and then the second one doesn't happen until the first one. The solution, of course, is to await when you're *using* the data, not when you're declaring the variable. Once explained, they got it instantly and were happy. (I modified their sample code in each case, so that made it easier to explain.)
Yea. It's an older term from computer science and such (with real memory management) but works well as pejorative for what it does in javascript.
Sure but it has to allocate space for itself to hold all those references and then do the work to copy them over. Of course this is not a complex task but it adds up if you have large arrays and/or many steps in the pipeline. 
If you haven't read it, pick it up. Booleans as function args is code smell. There are better ways to do it for sure. Basically in the functions chapter there's a section that says should do one thing only and one thing well Definitely agree on the callback stuff. It looks messy and it's almost becoming deprecated these days. Check out promises and async await
thanks
I've never used Ember but I found this npm package that appears to do exactly what you asked for: https://www.npmjs.com/package/ember-get-component At the very least you can look at the codebase and see what they're doing ;)
Classic for loop approach also has a lot of housekeeping code mixed with the business logic. If you have a nice functional helper library (lodash or whatever) you can get more readable and uniform code with less noise.
Well, the second one clearly does _create the array_. As for _copying_ it... No. [According to the spec](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.from) Array.from iterates over the object supplied. It does not make a copy. Copying it, in any case, wouldn't have made much sense. If you have a problem with creating the array in the second example and discarding it, then that is what the _third_ example _tries_ to avoid to some extent. The object created (instead of the array) is still discarded, so the difference is not that big. But those are _semi_-synthetic examples, or at least _very specialized hacks_. So they won't be perfect. Such is life.
Readability.
 document.getElementById('imageBox').setAttribute('src', output) src isn't a method the correct method to use would be setAttribute which takes the name of the attribute in the first argument (src) and the value as the second argument (make sure you use output not 'output')
Yeah, makes sense. Thanks!
Cool ill check the book. Still sounds odd. But there is nothing async about the filter code, so why are callback or await or promise there at all? Maybe the initial getTasks() is async but all the filtering can be done synchronous afterwards (in its callback or after the await)
I googled a bit on the boolean, possibly it's the "flag argument" problem? I don't think it applies here because the boolean is not a flag that changes the flow in the function but just data to compare with
Yeah, I thought that localStorage calls are asynchronous, thats why I designed it with callbacks. So I removed them now :D And replaced object with array as well. Thanks!
Yes, it would be trivial for someone to see what the number generated in JavaScript is, yes. You need to generate the number on your backend and only provide an endpoint that allows you to check whether it matches, without giving the number itself to your clientside code.
Yeah, I'm one of those people. I would never put these fonts on my products, but personally I love them. It's just a little more joyful to look at than the monotonic boring straight fonts. I'm not comic-sans crazy, I just like little tilts and swirls. Thats just my preference. I'm not going to shit on other people's taste. 
I remember when this font came out. It was like 200 bucks. Did everyone buy it? Lol
Sure, but so does code duplication; having two almost identical functions just to hide a boolean argument out of principal doesn't feel like a good trade.
Hi /u/Leotroynics, For javascript help, please visit /r/LearnJavascript. Thank you!
How is this native since it's all javascript? Are there binding in the source code for qt/wxWidgets because I couldn't find them..
Hi /u/joezimjs, What does this have to do with **/r/JAVASCRIPT**?
If one wanted to introduce this (maybe all at once, maybe gradually) into an existing large project, is there any way to do it with blowing away the entire git blame?
That's operator mono, it's a pretty nice font IMHO. Only downside is that it's a bit pricey and doesn't support ligatures. I'm currently using Fira Code instead of it because of the ligatures.
Sweet! Down the rabbit hole, I go! This looks like it will get me what I need. I appreciate the find!
It should be faster not to draw every 2x2 circle dot with arc and fill but to either predraw that into a small off-screen canvas and then use drawImage to draw that or to use a 2x2 circle PNG drawn in a graphics program.
I make pretty decently. I could never bring myself to spend that much on a font. If I could get my company to pay for it though....
Do it file by file or by directory ? Or only on git changes ? https://medium.com/@brindelle/format-your-javascript-with-prettier-before-committing-177079ec356a
I ran their upgrade checker and it flagged a ton of stuff for me... I guess I am using a lot of depreciated features (such as the event emitting system).
File/directory is a feasible solution. Another approach could be that you integrate it in your editor, and on every file that you work, on pressing save, it gets formatted. Thus you can convert it file by file
Good luck!
Hi /u/smittyy, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
As a relative novice to front end development (but expert on the backend), I always seek out the reason why I should use one library/framework over others. Some READMEs explain this. Why should someone choose your framework over React, Vue, Angular, or any number of other frameworks?
personally, i hate seeing a bunch of formatting changes in the git diff. i would just not worry about git blame and make a format project commit. 
&gt; framework provides more userland functionality than what its exposed surface provides Sure, and I think we both agree that inversion of control is one of those things. Semantic equivalence w/ other projects (hypothetical or otherwise), however, is not. I mean, there are projects using React lookalikes to various degrees that don't break with aliases, so making a definition depend on arbitrary project stability seems weird. &gt; since it seems you've never actually used Not sure why you keep making these ad-hominem jabs. FWIW, I've not only used frameworks of different sizes in multiple languages, I work on a "pure" framework (as you call them) for a living. I also wrote an OSS "foundational library/framework" as someone else had put it in another comment, and researching frameworks is a big part of what I do, so I think I'm generally more qualified to talk about frameworks than an average joe.
This isn't totally true. The data side of things is reactive, but the vdom diffing is not. 
We did it to a large codebase in one swoop. So worth it. If you need previous blame, you can just look at previous versions to find the appropriate author. Just make sure the commit message mentions prettier so it’s obvious. 
Sweet. I used to do this: var x = Array(5).fill(null).map((n, i) =&gt; i); console.log(x); // [0, 1, 2, 3, 4] But now I will do this: var y = Array.from(Array(5), (n, i) =&gt; i); console.log(y); // [0, 1, 2, 3, 4] 🙌
 var intervalSpeed = 100; setInterval(() =&gt; { console.log('I am first'); }, intervalSpeed); setInterval(() =&gt; { console.log('I am second'); }, intervalSpeed * 1.5);
It uses libui so it is native. I just don't have the bindings in the package. 
True enough.
That's a good question, I tried to touch on the subject a little in the about section on the website. I think one advantage is that I have tried to be very focused on identical user experience for both transpiled and "script tag" use cases. This makes it super easy to start using, without needing too much background knowledge about the JavaScript ecosystem, but then transition into it when necessary. In a similar vein, the fact you also get routing and state management out of the box can be super helpful for both of these types of users. I also think that it introduces some interesting concepts around using function scope as state and I'm very happy with how components turned out as a whole. On the customization side, okwolo has super powerful support for plugins, which can also be baked into the app as modules. This pattern encourages configuration for very varied use cases and allows these to be "published" as kits for a really clean experience. More specifically when comparing to angular and vue, I am very bias towards having layout be defined only in the familiar javascript and without special template syntax.
What exactly are you referring to? There is some more information on what I was talking about here https://vuejs.org/v2/guide/comparison.html#Runtime-Performance Unless I'm missing something, Vue doesn't need to diff the entire virtual dom tree.
Old blog post but I have updated it recently https://glebbahmutov.com/blog/picking-javascript-testing-framework/
I also want to make sure I say that using established frameworks have the huge benefit coming with huge communities that create great tooling and support.
lmao what an utterly feeble attempt at criticism
I don't know, man.. I hate to sound discouraging, but.. Why another framework? Are there any improvements on what's already out there? I took a quick look at the website/quick start, and it wasn't immediately apparent to me what was going on or why I would want to use the framework. 
I started making this for myself, I am very aware the space is saturated. I'd be thrilled if I can interest some people enough to use it though! Did you hit any more specific snags in the quickstart? that's exactly the type of feedback I'm looking for!
One reason to use `reduce` over `filter/map` would be to reduce memory trashing, but it would have to written in terms of array mutations like this: const twitterHandles = (authors, company) =&gt; authors.reduce( (as, { company: c, twitterHandle: t }) =&gt; { if (c === company &amp;&amp; t !== null) as.push(t) return as }, [] );
Some people use '_' in arrow functions to mark argument that is there but is not used.
It’s the array element being iterated over. They named it that to signify that it’s unused in the callback.
Is it the same when you re-arrange them?
I wrote an eslint plugin because I kept forgetting about it: https://www.npmjs.com/package/eslint-plugin-array-func The eslint plugin now also has rules for some other wasteful array operations.
I'm sorry, but: ``` function twitterHandles(authors, company) { var result = []; for(var i = 0; i &lt; authors.length; i++) { if(authors[i].company === company &amp;&amp; a[i].twitterHandle !== null) { result.push(a[i].twitterHandle); } } return result; } ```
Started doing this on a recent project and can't recommend it highly enough. Very commit is formatted the same, nobody complains in the comments about dumb formatting quirks people have. It's heaven. 
That's the worst place to put it. We had a large app and at some random point it turned slow. It took us a while to figure out that Vue climbed through some three.js context we dropped there, turning everything into reactive getter/setters, including the scene graph, gpu buffer data, even the full dom which was referenced in there through the root node. 
Oh gee! Thanks for the heads up. 
If you're looking for a way to extract the week or month value of a given date, [MomentJS](https://momentjs.com/) is one of the best date/time libraries out there. Checking the week for a given date is as simple as `moment(dateString).week()`, and checking the month is `moment(dateString).month()` (**note**: months are 0-indexed, so January is 0 and December is 11). Combining those values with the year (which is just `moment(dateString).year()`) should get you the grouping values you need.
[repost](https://www.reddit.com/r/javascript/comments/7rv4pi/twitter_tip_javascripts_arrayfrom_accepts_a/)
&gt; Promises are monads that cannot have a `.flatMap` (due to the restrictions of time and space) I'm not sure I understand what you mean here. Promises *do* have `.flatMap`, they just call it `.then`. (From the other direction, having a `flatMap` operation is one of the fundamental requirements to *be* a monad, so "monads that cannot have a `.flatMap`" definitionally don't exist.) I don't disagree that the `.then` method's cleverness is perfectly pragmatic. I do find myself wishing that the standard had chosen to have `map` and `flatMap` operations, but that's in great part because I tend to prefer allowing developers to learn to use powerful concepts, rather than hiding those powerful concepts from them so that they don't have to learn them. If Promise had gone with `map` and `flatMap` methods, I think people would have had to dig in and understand what those were for, and then would have been better equipped to deal with the same operations when they found them on Lists, or Optionals, or other such structures. The tradeoff would have been that people would have a very easy way to screw up their programs (by using `map` when they should have used `flatMap`). The standard writers (probably correctly) estimated that the cost of that was greater than the potential value of having separate methods. &gt; A library that acts upon objects it creates can always be "duped" (accidentally or on purpose) into thinking it's received an object it created It depends on how the library interacts with those objects. The trick here is that Promises have *different* behavior based on whether they think something is a Promise or not, and this makes it impossible to access one kind of behavior with certain kinds of objects. &gt; In fact, doing Promises the "proper, monadic" way would result in clashes here, as tons of objects have .maps, and several have .flatten (certainly more than .then, unless you count ones that are trying to interoperate with Promises) This isn't the case. In the "proper, monadic" way, Promises wouldn't be trying to use the existence of certain fields to decide which behavior to use. If you called `map`, they would simply `map`. If you called `flatMap`, they would map and then flatten. The return values on your operations could have any fields they wanted, because the Promise wouldn't be trying to do any clever logic on them. Or to summarize, the answer to this question: &gt; I fail to see how making `.then` into `.map` and `.flatten` would help. Having separate `.map` and `.flatMap` operations allows me to tell the Promise what the correct operation to perform is, which removes the need for the Promise to *guess.* And because the Promise doesn't have to guess, it doesn't have the opportunity to guess wrong.
If you're looking for a way to extract the week or month value of a given date, [MomentJS](https://momentjs.com/) is one of the best date/time libraries out there. Checking the week for a given date is as simple as `moment(dateString).week()`, and checking the month is `moment(dateString).month()` (**note**: months are 0-indexed, so January is 0 and December is 11). Combining those values with the year (which is just `moment(dateString).year()`) should get you the grouping values you need. Some other functions that might be useful: [startOf](https://momentjs.com/docs/#/manipulating/start-of/) (can be used to transform dates into the start of their week or month) [format](https://momentjs.com/docs/#/displaying/format/) (for when you need to get back a string representation) [isSame](https://momentjs.com/docs/#/query/is-same/) (note the second string parameter that lets you compare based on a specific level of granularity) One easy way to do this would be to use `startOf` in combination with `format` to get back a string representing the start of the week/month/etc, and then use that string as a key in a JS object to keep track of how many dates match that key. Then it's just a matter of sorting those keys into an array of objects.
Yup, they always come in the same order. 1. `Array(100).fill(null).map((_, i) =&gt; i * 2);` 2. `[...Array(100)].map((_, i) =&gt; i * 2);` 3. `Array.from(Array(100), (_, i) =&gt; i * 2);`
Sounds good... I actually just edited my reply to include an example function, in case that helps.
there was a tool I saw recently that would go through all your commts and prettify them one-by-one. Can't remember the name though
Of course,... I rewrite each as I find them. 
Congrats! ... Are you asking us to code it for you? Because we won't.
Not necessarily any snags.. To give you context, I'm already somewhat familiar with Angular, React, and Vue.. So if I don't see any immediate gains from an additional framework, I'm really not going to have any interest in reading more/using it. Me personally, I'd like to see something that uses more natural language/prose to do things. I think React gets kind of close on that with the render function. I don't know.. just my personal taste.
One way would be to integrate prettier together with lint-staged and husky and gradually prettify the codebase as people work on things.
you can also do `Array.from({length: n}, () =&gt; {})`
I prefer Vue because it's really casual and simple. Just `vue init webpack` and start your work. It has best docs I've ever seen, it's strict (not so enough as I want, but OK) and even has official styleguide. It's juniors-friendly - it's important for business because you have more potentially good developers because it's just easier What does React say? Hmmm, 10000 solutions for state management (and most popular solution causes more problems than gives profit). Hmmm, no generally accepted styleguide (I still do not know how better to organize folder structure) But I want to note that Vue is not as flexible as React is. There are some things that I really don't like in Vue and I can't change them. I would like to write one more post about it. So, if you really know how to do better and you are ready to take responsibility for the code - React is your framework If you just don't want to care about - Vue is your way That's why I prefer Vue over all another frameworks
&gt; Promises do have .flatMap, they just call it .then. But you just wrote me a long explanation saying that `.then` is *not* `.flatMap`... My initial point was that `.then` is `.flatMap`, but then you corrected me. As for the remainder of your post, I'm entirely not following. You seem to be implying that being functional in behavior would somehow create a full type system. My understanding of flattening is that it would take `Monad(Monad(Monad(x)))` and turn it into `Monad(x)`. So `.flatMap` on a `Promise` would require you to return a Promise from the callback (which is not presently the case with `.then`, which I believe to be the difference between `.flatMap` and `.then`, at least according to your earlier explanation). Is that accurate? If so, I really don't think there's a way to do this in JavaScript without using prototypes or duck typing, and certainly separate `.map` and `.flatMap` functions wouldn't change whether we're using duck typing or prototype-reference-check typing. So that's sort of my point. It seems you're conflating duck typing with the separation of `.flatMap` and `.map`, while they're really two completely separate things. I do wish JS had a more valuable type system, but I think that's a fairly irrelevant point to the topic at hand.
It's understandable that if you are new to JS you may find an array reduce with a bit of destructuring hard to follow, but "an absolute mess" says more about you that the code...
Nativescript doesn't solve any scalability problem because it's not applied to a problem space where scalability is a concern. It allows you to write *stand-alone* mobile apps -- apps with no server. There is nothing to scale. If you want all your apps to talk back to some central server, then it's up to you to write and deploy that server in a scalable way, but that isn't a job for angular or nativescript -- as those are strictly front-end clientside dev frameworks/tools.
The difficulty with finding the right syntax is that I wanted to avoid jsx-style transpilation so that it can be ran from simple script tags. right now it looks like this: const element = ( ['div.class | height: 20px;', {}, [ ['a#link', {href: '/home'}, [ 'Click Me!', ]], ] ); To make it easier to use, an id, classes and styles can be defined in the tagName string. At the end of the day, there is a lot of information being "encoded" in html, so there are not many shortcuts to take. As for the rest of the features, I also tried to make it very easy to use the router. app('/user/:id', ({id}) =&gt; (state) =&gt; ( ['div.profile', {}, [ 'Profile id: ' + id, ]] ); There is also the `use` interface which is pretty readable and encourages steps-by-step configuration. app.use('base', '/appv1'); app.use('watcher', (state) =&gt; { console.log('state has changed: ' + state); }); For aspect is the most important for you to have natural prose ?
I mean, I never use one or two letter variable names (except for the _de facto_ standards like `i` etc) but besides that I find it pretty reasonable. It's modern JS
I wouldn't expect to loop through 100k records on someone's computer, I was thinking more of node.js Of course, there are lots of analytics apps for the finance sector that run on ancient versions of IE, but then it's a different game altogether. I mean on IE8 once I had to scrap a forEach loop with like 120 iterations because it was crashing the browser... on one of those browsers I wouldn't even try, to be honest
The difference is in the amount of mental effort required to understand a simple filter, map chain compared to the convoluted code posted above. It is pretentious to think this is an even remotely acceptable way of programming.
I insist, that says more about you than the code itself (besides the two letter variable names, which, I agree, are pointless and makes harder to read). If you write it out with decent variable names, it's perfectlhy reasonable ``` const twitterHandles = (authors = [], company) =&gt; authors.reduce( (reducedArray, { currentCompany, twitterHandle }) =&gt; { if (twitterHandle &amp;&amp; currentCompany === company) { reducedArray.push(t); } return reducedArray; }, [] ); ```
Readability is not about someone understanding the code, but if you can figure out what it does at first glance. `filter().map()` sends a strong message of what is being done -- filter the array, and transform the result, have an array in the end. `reduce` is more generic -- combine all of the elements and have anything as a result...
I agree that is more "semantic" and perhaps more elegant, at the price of an extra iteration through the loop, but the `.reduce` version is not as outlandish as some of the comments here would have it. You can easily see that '[]' is being used to initialise the accumulator. 
Hi, Mithril.js author here. Some feedback: - people will inevitably ask for JSX support. The syntax in your docs don't support it out of the box. You seem to provide `h`, but I can't see docs for it. This will lead to fragmentation. FWIW, DomVM started w/ the same array-based syntax you have and later moved to hyperscript. You might want to talk to u/leeoniya about reasons/trade-offs - personally I think it's fine to have a built-in router, but in my experience, it'll hamper adoption if it's not optional - I can't immediately understand what the abstractions are based on their names. "Blob" already has a meaning in js. So does "Module". Your examples need to be more than just the immediate syntax and they need to show an example or two of what one would accomplish by using each of these abstractions - `'div.class | height: 20px;'` is surprising to me. I'd have expected standard CSS syntax `div.class[style="height:20px"]` - speaking of which, I couldn't find docs on view language. Is it `class` or `className`? How does `readonly` work? Do `select.value` and `innerHTML` work? SVG `xlink:href`? Does it do what `classnames` does? Style objects? etc. HTML has a very broad surface, your docs should cover at least the common stuff. - Selector syntax also comes with a trade-off in complexity: `'div.class'` needs to play nice with `{className: 'foo'}` 
Yes, drawing circles is extremely expensive on the canvas. Cache the circle as an image, or even as a test you could draw small squares instead. You will see a big performance increase. I noticed similar performance issues building a custom scatter plot graph.
To tie in with this, Nativescript and it's kin will solve the problem of actually getting your project onto a device only. Scalability isn't ever a concern - the closest is view optimization, but even then that's only a concern if you're dealing with huge amounts of data and DOM elements (such as tables with hundreds of thousands of rows) and you're not using a framework or view engine that's built with that in mind (basically all of them are). If you want to build something to stand-alone and it doesn't need access to remote resources (i.e servers) then it's ideal. There are hundreds of use cases ranging from interacting with services on the device (e.g. Maps) to using third-party services (e.g. also Maps, amongst other API's). Scalability in these cases is limited to what the remote server can handle which isn't something you need to be concerned with. Where you're looking at 'scalability' and how JavaScript is part of it, you're looking at what node.js can do in most cases. For networking tasks, node is extremely scalable (up to hundreds of thousands of concurrent connections on fairly moderate hardware) as long as you make the correct optimizations. However, this only plays into effect if you're building a server-platform with it and then only if you're dealing with high traffic volumes. The example you provide isn't exclusively a Javascript interpretation, but it is also heavily affected by how you're rendering the game gallery. If you're talking about game development in JS, the same applies as it does with games in other languages - it's all about the engine. It's not scalability in the strict sense of the word, but efficiency and optimization.
Hey there, You can start with Node JS, managing http, but since you have mentioned you have experience in Node, can you put some more lights on the same. In the meantime you can have a look at “Express in Action” by “Evan Hahn”. Express in conjunction with Node, helps in creating web apps and web APIs. Also there are some good books on using MongoDB, “MongoDB: The Definitive Guide by Kristina Chodorow and Mike Dirolf”, and in case you don’t go deep in database, you can also refer to “Practical Node JS by Azat Mardan” and “Mean Web Development by Amos Q Haviv”. Thanks, Siddharth
Thanks for your response, I think I had a eureka moment when reading this. All the UI elements are presumably converted to binaries for the device, correct? I was thinking that the phone acts as a web browser that is served views. Im so use to serving EVERYTHING from a web server I didn't think that the phone would have some stuff locally. That is, I should design templates, that are stored locally, with the response in mind, rather than building a template in a webserver and send that as a response for the phone to render?
Reposts are generally OK from a moderation standpoint assuming that it hasn't been posted within the past several days or so. With the way reddit works, if you don't visit every day, you could miss something. The main thing I try to avoid is having multiple, concurrent posts for the same content. Otherwise, voting does a decent job of handling reposts.
Doing some more reading. I guess in JS Arrays aren't arrays, they're objects whose members are indexed by integer? (Is that accurate?) So the constructor Array(n) only initializes the "length" property to n, no actual elements are created.
Huh. That's cool.
So is the original, just much more readable. 
You can use an empty global Vue instance as a message bus: const bus = new Vue() then in any components that want to use the bus: bus.$on('whatever', someFunc) bus.$emit('whatever', this.somedata) You just need to give each component some sort of identifier so it knows if a given message is meant for it or not. At a certain scale, this may become a performance issue, but it's a lot easier to put together than something heavier like Vuex if you don't have a ton of inter-component messaging needs. But yes, if you have much communication happening between siblings, you probably have a design problem.
[There are perf implications in creating arrays with empty items.](https://v8project.blogspot.se/2017/09/elements-kinds-in-v8.html?m=1)
What do you mean by *big diffs*? Do you use Prettier as a diff tool?
Ah, I see what you mean. A good language aware diff tool should be able to see past differences in comments and white space. I understand the differences may be more than that, but a literal text diff on moving code is often more trouble than it is worth.
In JavaScript, everything that isn't a primitive inherits from the class `Object` - including the class `Array`. But it doesn't make `Array` less of an array. If it looks like an array and behaves like an array, then it is an array. The special case about `Array` in comparison with other classes that it has like `Object` its own syntax for instantiation. [] instanceof Array // true ({}) instanceof Object // true
I personally don't prefer prettier running as a precommit hook, it breaks staging hunks. When possible, I like to add it to CI as a check `prettier -l` will lost files that don't match prettier output and use a non 0 exit code, so it's pretty easy to use as a "verify only" check.
Apps for phones are real applications, just like applications on windows, linux, or macOS -- they are not web apps. The native in "react native" as well as in "nativescript" refers to the fact that they are compiling to real *native* apps and not in some intermediate or portable format. You can place these apps in the apple/google stores for download like any other. &gt; I should design templates, that are stored locally, with the response in mind, rather than building a template in a webserver and send that as a response for the phone to render Yep. In general, using e.g. nativescript, you'll just "write the app." You write it as if it were a webapp, because it can also be used that way -- with Angular everything is done on the client. That's just how it is, it has nothing to do with it being mobile or not -- Angular web apps do not actually require any kind of backend server, as they can be run locally in a browser. Compiling via nativescript will then create native apps that don't require a *browser*. Again, nothing to do with a server. If your app uses or needs a server, the way you will talk to it in the angular app is entirely up to you, and will be the same no matter if you use nativescript or not. That server code will be written in something *other than* angular, as angular doesn't do backend.
Large changes to existing code, causing git commits with large diff lists.
regardless if you're passing a bool to a function it's doing more than one thing
Out of curiousity, I added this approach as `fourth` to @DGCA tests, with the following results: ```text first: 738.464ms second: 1249.699ms third: 220.649ms fourth: 1123.781ms ```
First off, thanks a lot for the feedback, I really appreciate you taking the time to write that comment. --- I included the `h` function for use as a custom function for the transpiler to use instead of react's. It does however return the regular array syntax. It is a layer above, not a different implementation. I intentionally left that part undocumented because it is a non-standard use case. --- The router can be totally ignored by omitting the string argument. This bypasses any routes and replaces the layout. I wanted to include it by default because I have often found this part to be a pain point in other frameworks. app('/route', () =&gt; ...); // overrides layout, even if it route has matched. app(() =&gt; ...); It can also be removed very easily by not including the router modules in the kit! See here for standard: https://github.com/okwolo/okwolo/blob/master/src/kits/standard.js --- Good point about overloaded names, I really struggled to name these. I am considering changing blob to plugin, but I haven't made a decision yet. I added a lot of examples on the website for both of these concepts. https://okwolo.org/blobs/ https://okwolo.org/modules/ --- I was not aware of that syntax, I was trying to find something that would be short to write. I made it possible for it to be multi-line for some nice formatting! ['div | height: 20px; font-size: 3em;https://github.com/okwolo/okwolo/blob/master/src/modules/view.build.js#L210 '] As it stands, the parsing is a non-trivial performance hit, so I am not super keen on adding a second syntax. --- All the attributes get added to the DOM node. https://github.com/okwolo/okwolo/blob/master/src/modules/view.dom.js#L99 The only special behavior is with className which gets parsed (supports objects and arrays like the [classnames package](https://www.npmjs.com/package/classnames)). I know `innerHTML` works and can be used to insert unescaped html into elements. Point noted though, I will add some tests to cover more of these attributes. --- Yep, those cases are covered for all three (id, class, style) https://github.com/okwolo/okwolo/blob/master/src/modules/view.build.js#L210 ---
`_` is a throwaway variable name to represent some variable that is never used in the function body. `...` is the spread syntax: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
Weird font choice.
What's wrong with Angular? 
Generally, I think learning a specific library isn't the best way to learn a language. The best way to learn how any tool works is to have a problem to solve, and to build something that solves that problem. This could be "I need a website" so you build a website, as an extremely simple and vague example, but the point is that having a real project to work on is a better way to learn. Also, processing is a bit older, I haven't seen many recent examples of it being used for cool projects. When people want to do stuff with a canvas, they are either doing it with vanilla js, or if it's a 2d project maybe something like Fabric.js, and for 3d there's Three.js. That's not to say you shouldn't play around with processing and go through their tutorials, but I wouldn't count on having a strong grasp of JavaScript when you finish that course.
Thanks
It's good to link to the duplicate post for the old discussion.
&gt; Just going by docs (mozilla, other sources) that imply a new array is returned. If you look at the [pollyfill](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Polyfill) proposed on MDN, it _follows exactly_ the specification. You can see exactly what is created or discarded. Yes, you're of course right that a new array is created, but it's not discarded nor copied from anywhere. The array is created because that is what `Array.from` does, create an array from something which is not necessarily an array. But the array that is created is the one that is returned. My point above was that `Array.from` does not create any _additional_ copies not does it _discard_ any temporary arrays, as your post above seems to suggest. Then again, _in those particular examples_ yes, an array (in the second) or an object (in the third) are created and discarded, **but not by `Array.from`**. I see that the other question has already been answered :)
I really like that caching idea, do you have any insight on how it affects memory usage? [I will very likely be implementing this, thanks!](https://github.com/okwolo/okwolo/issues/135)
I really like that caching idea, do you have any insight on how it affects memory usage? [I will very likely be implementing this, thanks!](https://github.com/okwolo/okwolo/issues/135)
Processing itself is a pretty good framework for canvas manipulation but i would recommend very strongly against using it to learn javascript. Unless you don't know any other language, in that case what processing makes easier in js may get you over some of the initial hurdles of programming where most people give up. However if you already know any language then try to avoid frameworks that do something you don't know how to do. In processing's case canvas which isn't a core part of js but is something nice to know if you want to make interesting sites.
Which linting/formatting plugin do you use? I use ALE but I'm working out the kinks.
That would make it a hybrid then
Thanks for the clarification. Several sites I look after are still logging around 10% of traffic on IE 10/11 + Edge, which sadly means we won't be embracing web components anytime soon. I can only hope the polyfills improve! 
Memory usage isn't really an issue. The absolute worst case scenario is you end up with a map with as many entries as there are `m()`'s in the app. That's a fraction of the memory you'd typically thrash doing diffing over the course of the app life time. And realistically, it's usually far less than that, especially if using JSX or a CSS framework
The example I was thinking of is someone animating something using the inline css @60fps. As much as it is a pretty bad pattern, I don't want it to break either. I'm thinking I might not cache the style part. It's true the memory footprint should be small, but it's not memory that is being garbage collected ever. Almost like a controlled memory leak.
I also use ALE with Eslint, also set up to lint as I edit: " " auto-linting on text-change/exit-insert/open with https://github.com/w0rp/ale " let g:ale_sign_column_always = 1 " custom global, we flip this on in *.js files if ! exists("g:do_ale") let g:do_ale = 0 endif let g:ale_lint_on_text_changed = 'never' " use our super-speedy eslint daemonizer https://www.npmjs.com/package/eslint_d let g:ale_javascript_eslint_executable = 'eslint_d' let g:ale_linters = { 'javascript': ['eslint'] } " skip to next error nmap &lt;silent&gt; &lt;leader&gt;e &lt;Plug&gt;(ale_next_wrap) augroup lint " we're going to call ALELint via autocmd, so we have to manually " check to see if it's enabled so we play nice with " vim-multiple-cursors function! Run_lint() if g:do_ale == 1 if executable('eslint_d') ALELint else echo 'eslint_d could not be found in your path' endif endif endfunction autocmd FileType javascript :let g:do_ale = 1 autocmd TextChanged,InsertLeave *.js call Run_lint() augroup END 
Problem is that this just litters your code with implementation details. Instead of saying what your code does, you describe how it does stuff - which is a lot harder to read.
Yeah, I know that's a possible option I'm just not a fan of it, as I think it's a kind of gross pattern.
I mean, there's nothing stopping you from clearing the cache on route change or something. All I'm saying is that it has an upper bound
&gt; Also, content changes behind the modal when opening a modal but returns to its original state when closing, and its really obvious, also looks and feels weird. Again, known issue? Fixed in the latest release! Thanks again!
Thank you so much! I got some more work to do on my [config](https://github.com/jonleopard/dotfiles/blob/master/nvim/.config/nvim/init.vim#L401). Are you defining all of your prettier configs in a .prettierrc file? If so, does ALE know to look at file automatically? When setting up a new project. I usually install the following NPM packages, and I'm afraid that some of them might be overriding eachother's rules...on top of the eslintrc and prettierrc file that we write. Perhaps you can enlighten me and tell me if any are redundant or unnecessary: **Eslint** * eslint-config-prettier * eslint-config-airbnb * eslint-config-react * eslint-plugin-prettier * eslint-plugin-import * eslint-plugin-jsx-a11y **Prettier** * prettier-eslint * prettier-eslint-cli Which packages do you install to get everything working nicely together? Thanks again for the help! I've been trying to nail this down for a couple weeks now haha! 
the functional reactive library "most" by cujojs is great for this: https://github.com/cujojs/most import { from } from 'most' // After 1 second, logs 10 from([1, 2, 3, 4]) .map(y =&gt; y+5) .take(3) .toArray()
I see what you're saying now with regards to `.map` vs. `.flatMap` -- a `.map` would empower you to *not* flatten, rather than a `.flatMap` empowering you to flatten. Yes, I have to take that obvious complaint. :P I'm rather glad Promises don't have both a `.map` and a `.flatMap`. The easy work around for your issue is to just wrap it further and unwrap it when you actually use it (you could wrap it in any object; could be `{ price: { now, then } }`, for example. Or just `[{ now, then }]`!). Therefore I still hold that the author's complaints are less valid than the complaints people might have with the proposed changes. (except *maybe* eagerness, but I'm kind of 50/50 on that)
Not really. My code above literary terms what it does.
Well, you're not wrong. It's certainly inelegant. But it's easy, and if you can exercise some restraint, it's not likely to get you into too much trouble. :-)
This rule triggers me.
for-of loops aren't that bad to read though: function twitterHandles(authors, company) { const result = []; for (const a of authors) { if (a.company === company &amp;&amp; a.twitterHandle !== null) { result.push(a.twitterHandle); } } return result; } Or if you wanna be fancier: function* twitterHandles(authors, company) { for (const a of authors) { if (a.company === company &amp;&amp; a.twitterHandle !== null) { yield a.twitterHandle; } } } // Array.from(twitterHandles(authors, company)) 
&gt; Are you defining all of your prettier configs in a .prettierrc file? No, I'm just setting command line args in my init.vim file: autocmd FileType javascript setlocal formatprg=prettier_dnc\ --parser\ flow\ --single-quote\ --no-semi\ --fallback prettier_dnc comes from here: https://www.npmjs.com/package/prettier_d As for the rest, that's not a quick question to answer. My init.vim is 451 lines long. It took a little doing to get it all to play nice.
BTW, if you post a link to your config in /r/vim and ask for a critique, you probably won't be disappointed. They're pretty helpful over there.
I’ll definitely go do that. Thanks again for your help! Cheers
found something even faster (fifth); `[...'!'.repeat(n)].map((_, i) =&gt; i)` first: 925.04ms second: 400.52ms third: 283.76ms fourth: 926.82ms fifth: 128.22ms
Good tip!
check this link: https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt
[@60fps's latest tweet](https://i.imgur.com/aVzTiNf.jpg) [@60fps on Twitter](https://twitter.com/60fps) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Angular 2+ has too many abstractions for my liking
If you want a single loop, just go with an imperative for-of loop. It's much simpler. function twitterHandles(authors, company) { let handles = []; for (let author of authors) { if (author.company === company &amp;&amp; author.twitterHandle) { handles.push(author.twitterHandle); } } return handles; }
On the other hand, if you run it consistently it means your merges *don't* contain many formatting changes anymore. If you manage to start a project with this from the start (or standard/semistandard/etc) you can avoid a lot of mess.
They all quite suddenly seem headed south with the exception of jQuery? I'm scared. :O 
lol: [ATTENTION: THIS PROJECT IS STILL BEING DEVELOPED AND IS NOT UNMAINTAINED. PLEASE DO NOT ASSUME THAT JUST BECAUSE THERE HASN'T BEEN A COMMIT ON THE MASTER BRANCH IN MONTHS IT HAS BEEN ABANDONED. THANK YOU!](https://github.com/andlabs/libui) 
I have prettier set up as a package in vscode, so I can dictate when it formats/etc, but we also have prettier run on all check ins to make sure that everyone is consistent with their style. So, if you're developing alone, you probably wouldn't notice a difference, but it matters with a team of developers.
String concatenation is additive / can be used in multiple steps. I personally find that the syntax highlighting and "bracketing" nature of backticks make code easier to **scan** because it's quicker to identify the start / stop. Hence why I specified "scanning" in my comment. It's a fairly trivial thing and not one that I would bother commenting on in a code review, barring some probably obscure edge case I can't even think of right now. On the topic of "why use anything other than backticks at all" that's about the only reason. Your comment would also apply to the distinction between `let` and `const` that I pointed out... using `let` exclusively won't necesasrily impair **understanding**, but might make scanning a bit trickier. YMMV.
Good to know! But in practice I really think `Array.from(arr).map(x =&gt; ...)` is much more readable than `Array.from(arr, x =&gt; ...)` and is worth the extra 4 characters.
&gt; Better yet ... work in progress And from the site the "Getting Started" page just says "Coming soon." Your tool isn't better until it, you know, exists
This is pretty confusing I imagine since there is popular libraries underscore and lodash that use it as well.
Prettier is amazing. You can also use it [with gulp](https://github.com/GAumala/gulp-prettier-plugin)
Prettier can be setup for your CLI, so it removes the dependency on a specific editor.
It depends how you write it: Array.from(numbers, toRomanNumerals); Array.from(numbers).map(toRomanNumerals);
Does this play well with web3 Js apps?
Naperville/Saint Charles area 
What do you mean by web3 js apps? If it is a javascript file, prettier should just work. You can try the playground to test it in your browser
Also `[...arr].map(x =&gt; ...)`. Though this all seems like a very silly workaround when `arr` is already an array.
I'll give it a try.
Array(n).fill(null).map(() =&gt; {}) is faster for me too
Depends on the implementation. Optimizations like stream-fusion can make the difference negligable.
gofmt is a nice feature of working in a go environment. "gofmt" is no one's favorite style and everyone's, something like that. Removing the discussion of syntax eliminates unnecessary barriers to understanding when reading other people's code. Using prettier tied to a hot key gives me that same feeling. 
Second this, clicking outside the modal needs to close it.
Just integrate prettier on save in your editors and the precommit hook becomes unnecessary.
And just integrate Prettier with editors. Super easy.
Yep, I've already ran into the disambiguation problem where I would like to support ['div', {}, 'child1', 'child2', ] But I can't because this could mean two things ['div', {}, ['div'] ] `&lt;div&gt;div&lt;/div&gt;` or `&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;` --- On the performance side, I've measured that the parsing step takes roughly as long as the vdom diff/update part ... The cool thing about okwolo in this case is that the parsing step is entirely independent from the vdom draw/update code. So the standard `build` function can be replaced at runtime with a plugin or packaged into a kit to easily distribute!
Her mini(fied) skirt sure shows off her body language. 
Those lines represent relative usage per month, that kind of data always looks more fragile. If you take a look at [cumulative absolute values](https://imgur.com/rbcJpix) react is the obvious leader.
So eslint that doesn't check for errors. Yes, eslint can format your code also.
Also, ESLint configuration takes a lot of time. Even if you've configured eslint out the wazoo, it doesn't actually catch a whole range of style differences.
I have tried prettier multiple times and it really rubs me the wrong way. I understand the problems it is designed to solve, and I would love to have them solved in my projects, but the way it solves them just doesn't align well with my personal preferences. I value consistent code structure a lot. I like whitespace, I like patterns, I like when similar code *looks the same*. I like it when I can get some information about what code does by *looking at it* without reading it. I like it when I can see weird spots in code because they *look* weird, they're breaking the rhythm. And prettier doesn't care about consistent formatting between code blocks at all. The only thing it cares is cramming code into max line length. Therefore, it can take five lines of code that do exactly the same thing and look exactly the same, and convert one of them into something wildly different, not because it *is* different, but because it is slightly longer than others. And I can't stand this, the asymmetry is drawing my attention -- "why is this line different? is it special? is it important? is there a bug? why doesn't it look the same as others?" -- but the code is absolutely benign and boring and isn't worth my attention at all. Every time I read prettier-ed code, I keep stumbling on pieces like this: a block of code formatted differently from its peers because one of the methods inside it is longer (or shorten) than the one in its neighbour. It forces me to put my attention to places where my attention isn't needed. I mean, I can't really blame prettier for doing this, it does what it promises and it doesn't promise anything more than it can do. I wish there was a tool that aggressively formatted code based on code structure, not line lengths. Like, "all asserts are formatted like this, all chained method calls are formatted like that, all destructuring assignments are formatted like this, all ternaries are formatted like that", etc. 
Well native on Android would be built with the NDK
textArea.style.display = 'none';
I added textArea.style.display = 'none'; after the textarea declaration and textarea is hidden &gt; var textArea = document.createElement("textarea"); But now my button won't copy anything :(
Hrm, maybe .select() doesn't work with display: none. I'm pretty sure visibility: hidden doesn't work either. I guess you could set the width and height to 0, but there might be a more elegant solution.
It doesn't have anything with familiarity. Readability comes from your understanding the language. Replacing one set of "words" with another set of synonyms doesn't change the meaning of the sentence.
No, it does say exactly what it does. Unless you don't know the language. And replacing programming language with English doesn't make your a better programmer.
I did opacity:0 and width:1px in my css for this.
yea the article was interesting but howling at the moon is so useless
Following that logic passing a string or number would be the same here? What if the completion status was an enum instead of boolean? Would you make a function for every state? How many states would you duplicate before accepting the parameter? How about dynamic states?
setting just weight and height still displays a very tiny box after button click. 
setting opacity and width to 0 moves my copy button down a little bit on clicking it, because of textarea's height.
**Solved**(kinda) textArea.style.height = "0px"; textArea.style.width = "0px"; textArea.style.opacity = "0"; adding this code works perfectly, but as /u/CertainPerformance said there must be a more elegant solution.
I posted this in the comment section of the article, but I felt like "pipelines" isn't the best term to describe this code. This is more "method chaining". If you want a true pipeline (with the benefit of only a single iteration) then you can abstract the "reducer" part from the filter/map transformations using transducers (usually you'd use a transducer library for this - those libraries also have the benefit of being data-structure agnostic): function twitterHandles(authors, company) { const xform = compose( filter(Boolean), filter(author =&gt; author.company === company), filter(author =&gt; author.twitterHandle), map(author =&gt; author.twitterHandle) ); return authors.reduce(xform(arrayPush), []); } function map(fn) { return reducer =&gt; (acc, input) =&gt; reducer(acc, fn(input)); } function filter(fn) { return reducer =&gt; (acc, input) =&gt; fn(input) ? reducer(acc, input) : acc; } function arrayPush(array, input) { array.push(input); return array; } function compose(...funcs) { return funcs.reduce(compose2); } function compose2(f, g) { return function (...args) { return f(g.apply(this, args)); }; }
It's fine. It's the end of year, you can see them recover after the holiday season: https://npmcharts.com/compare/react,angular,@angular/core,ember-cli,vue,jquery
There are no nitty gritty details in for cycle definition. For is essentially a function which takes some kind of predicate and executes passed code block. The problem with your argument is that it doesn't work for simple scenarios like the one in article. Refactoring one line of code into a function doesn't make any sense and just pollutes your code with noise, because what you're effectively doing is making an alias to an existing built in functionality without enriching it in any way. This also leads to code duplication and doesn't improve portability in any way. Another argument is that premature optimisation is the root of all evil and that also applies to code structuring. There's no need to pollute your code with advanced constructs prematurely, that will only lead to confusion and will make later refactoring harder.
For local development, a quick fix (assuming you’re using Chrome) is this [this extension](https://chrome.google.com/webstore/detail/cors-toggle/jioikioepegflmdnbocfhgmpmopmjkim?hl=en). Toggle it on and try hitting the API again.
Thanks, but we're eventually trying to make POST requests to handle payments via their API after populating the pages with data from the GET requests. :( 
Or even `[...Array(5).keys()]`
It works for TypeScript as well. I have to ask though, how does it play with something like EditorConfig.
two tiers is too deep to me
You probably need to make the requests via a server-side script and not directly from JS. 
If you need only a single element, why use that at all? `thing = obj.prop[0]` is both shorter and more readable. 
I also have stopped worrying about formatting my code. It beautifies on pressing save anyway, so I just write stuff focussing on what it is supposed to do!
Looks like your code snippet broke.
https://github.com/prettier/prettier/releases/tag/1.9.0 Prettier 1.9 onwards reads from editorConfig when present
Great tip! Will add it to the post! Thanks
The only trouble I had with it is convincing my teammates to use it as well. Our diffs are still huge sometimes because of that. Many developers just prefer to format their code manually, which seems like a long and unnecessary operation. Lucky, Prettier almost became a company standard recently.
Have the same feelings about it. Found that once I changed max line length to 130 (github diff size) then the wrapped stuff becomes quite rare
yeah, sorry, fixed it
This is an [open issue](https://github.com/okonet/lint-staged/issues/62)
I don't think it is ever too deep.
Of course I in the next article I will make a public repo for the project for now I have published the first code in this gist: https://gist.github.com/carloslfu/ec389a3d55e07edbf48e23fbd8d65689
I don't really understand what you're trying to do Do you want to apply the same modification to every object?
No, I just dont know what commands to use, cause by far we have only learned about vars, loops and nested loops, and I know it is possible to create this with Functions but we havent learned that yet.
I’d make them my data cache and object of record
What is the transformation you want to apply exactly? From your example it seems you want to manipulate object properties. I suspect `Array.prototype.map` is what you want here. Whether or not you can implement it in a one-liner will depend on your transformation function. ``` let a = [{ name: ‘bobby’, id: 9, position: ‘forward’ },{ name: ‘mane’, id: 19, position: ‘attacker’}]; function transform(item) { // Stuff... } a.map(transform); ``` 
Yes! It's so frustrating reading that GitHub thread from years ago. To be fair, I probably would have been one to prefer an easier api over some dude taking category theory, but now I feel like we are respond the consequences of that
The error describes the problem exactly as it is. The server doesn’t allow cross origin requests. This means you need to use another client to make the request (usually same origin) to make the request (proxy) for your browser client.
If you use VSCode and ESLint, don’t use the Prettier extension. Just add “prettier” to the list of plugins in .eslintrc and it works like magic. Set “editor.formatOnSave”: true in your user settings.
https://www.rithmschool.com/courses
Why?
It's good if you have a team. I need a good linter that finds all kind of unused object members and such.
There seem to be some differences when executed in Chrome: https://imgur.com/a/AJbbJ But impressive. Might fit on /r/tinycode
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/2cC3d80.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
I was working on an answer to https://codegolf.stackexchange.com/q/124259/9365 but wondered if it was possible to write an entire program using only single bytes per line. I've also been experimenting with quines lately and thought I'd give it a try! But yeah, why is a valid question! It's kept my brain active in lunchbreaks this week!
Hmm, interesting. node.js returns the same code as is fed in (which is where I was testing). I guess there could be implementation differences.
Fair enough, I am always curious about stuff like this but sometimes I just don't get it. I do get doing things as a difficult brain activity though, nice job.
good bot
Why would I want to have text as an image? What's the benefit?
Twitter.
Sure we can help. But are abso-fucking-lutely not going to solve your homework problem, especially with the abysmal amount of effort you put into this post. What have you tried and where are you having problems?
Not homework, more like a quiz. And also I have spent the last 2 hours trying to figure out how to write the program. I don't want the answer, I just need a step in the right direction.
So your teacher gave you homework without teaching you the basics of how to do it? 
I assume you meant: const foo = a =&gt; b =&gt; c =&gt; a+b+b; It's a way of doing *currying* with arrow functions, which means that each function returns another function which takes exactly one parameter. Each function remembers the scope in which it was created, so in the final function the 3 numbers are added together. You can then call it like: foo(1)(2)(3); // 6 
My employer going out of business I guess... I'm quite satisfied with my job.
Hi /u/1f1nas, For javascript help, please visit /r/LearnJavascript. Thank you!
const foo = function(a){ return function(b){ return function(c){ return a+b+c } } } console.log(foo(1)(2)(3))
Hi /u/eovf, For javascript help, please visit /r/LearnJavascript. Thank you!
agree, will post there, thank you
stress factors? (besides the going out of business part)
I haven't done it, but I would expect that they're going to point out any flaws they've found and either ask you to fix them, or ask how you'd fix them. They'll probably also ask you why you did things in a certain way. If it's a good interviewer, it'll be open-ended questions about why and how. If it's a bad interviewer, they'll be grilling you about why you didn't do it the way they'd have done it. As I said, I haven't done it, but if I were interviewing someone this way, that's how it'd go.
Found the more elegent Solution, it was there all the time, I just made a few mistakes in my code I wrote document.body.removeChild(textArea); While I had to write btnPos.removeChild(textArea); Now the code works perfectly.
Actually, I think you'll find that most people have a very hard time deciding to change jobs. But once they've decided, it becomes really easy. There are a ton of factors, but I think the main ones are working environment, pay, and career growth. Working environment is everything from the office layout to coworkers to tools provided. Pay is pretty obvious and often a problem in our industry. Career growth is an issue, too, since a job will often hire you for something and then keep you doing it forever, which isn't good for personal growth. Some jobs are aware of this and will actively work to provide you new challenges, but some simply can't. As for guilt: Stop. Employment is a mutual agreement from both sides. They pay you, you do work for them. Don't worry about what will happen to the company after you leave. The company is certainly not worried about what will happen to you if they lay you off. You need to take care of your needs. If your current job isn't doing that, you absolutely should be looking for a new job. That doesn't mean you have to take the first one you find, but you should be *looking*.
I like the subtle jab at operator mono. 
 var spans=[]; for(let i = 0; i &lt; splitDomElement.length; i++){ span = document.createElement('span'); span.innerHTML = splitDomElement[i]; spans.push(span); }; console.log(spans);
Just left a job. Management wasn't setting me up for success. They were making big promises to clients and then effectively making it my problem when projects went over budget. They were pushing the one project manager that I worked well with off of projects I was involved in. And they terminated a coworker I got along well with more or less because they can't figure out what their priorities are. While all this was happening, there's been a pretty decent job market in this town and recruiters have been all over my LinkedIn. Decision was pretty easy. Companies aren't loyal to employees. They'll hire and fire to meet the bottom line budget. If there's a better job out there and you're stuck in a lousy one, don't be too shy to jump ship.
Great, now what have you tried and where are you stuck?
While I completely agree with /u/trout_fucker, maybe it's easier for yourself to analyse and write down in pseudo what should be done. Here's an example. i need to create some empty array; for a loop until the iteration has reached 25 { here i should know which iteration i am in; make a new value from the iteration to the 3rd power; then i should push that value to the array i've created. } 
my reasons were also environment based. We had proper tools, those weren't an issue. The office layout is a big open space where you hear everything and it get's pretty loud. The big problem for me is the constant rush and writing of crappy code. I was hopping to find some people interested in delivering quality solutions but everyone was focused on just delivering. My guilt isn't for the company sake. My guilt comes from the idea that I didn't fight enough for what I have wanted. But at the end of the day, I simply didn't find my self with their culture. I was constantly trying to delay implementations just to try to keep up with the volume of requirements and to maintain a good architecture. But everybody was still rushing. I was feeling annoying that I was the only one concerned with this problems. My options was to don't give a crap and simply close jira tickets. Then I decided that I should simply find a job where I fit in more.
&gt;That doesn't mean you have to take the first one you find, but you should be looking. Absolutely. If opportunities are coming your way, take interviews even if you don't intend to leave your current job. Learn more about how you company stacks up against others. And if you get an offer it can be a great bit of leverage in pay negotiations even if you stay at your current shop. It's never gonna hurt you to know what else is out there.
eslint can’t re-wrap your code to fit a specific line length.
He can still do it with a "one-liner" by passing its objects to a processing function !
Also another reason for my guilt was that my direct manager tried to convince me to stay for the change. That things will change and become more relaxed and we will have more time to deliver quality. Basically stay and keep fighting. Which they probably will.... in 2 or 3 years or something. Maybe I shouldn't take things so personally. After all it is just business.
At that point you could still do `[thing] = obj.prop.arr`.
Well, maybe Twitter is just not the right medium to use much text, is it? At least use a pastebin link...
ESLint?
You could use eslint-config-prettier to extend it with Prettier config.
Yeah, that environment sounds toxic. Both the noise and the rushed code. But you shouldn't feel guilty for not fighting for what you deserve. A great company would provide that to you without you even asking. A good company would do it with just a hint that you noticed something was wrong. Bad companies make people fight for what they deserve. And then make people feel guilty for demanding it. For instance, I worked for a company that made it really hard to take vacations. When I claimed, they said, "It's like that everywhere." While I knew that had to be false, I hadn't *been* anywhere else, so I didn't really fight it. My next job was completely different in regards to vacations. 
https://developers.google.com/web/updates/2015/03/introduction-to-fetch
Given this HTML: &lt;div class="container api-ids"&gt;&lt;/div&gt; You can use this JS: // get the html/DOM element you want to put the data in const apiIdsContainer = document.querySelector(".container.api-ids"); // here's the function that will add the data to the html function addIdsToIdContainer(data) { // forEach loop over the data data.forEach( datum =&gt; (apiIdsContainer.innerHTML += `&lt;p&gt;ID: ${datum.id}&lt;/p&gt;`) ); } // asynchronus function to handle api request and results async function getApiResults() { // the 'await' keyword kind of pauses execution and waits for a response const apiResponse = await fetch("https://api.coinmarketcap.com/v1/ticker/"); const jsonData = await apiResponse.json(); // call the first function to add to html addIdsToIdContainer(jsonData); } getApiResults(); 
Also you witness the occasional yelling in code reviews and in planning. We are a branch of a bigger corporation. In our branch we have really talented developers, but in the main branch there are a lot of "tired" and bored developers which don't give 2 cents on quality. And you sooner or later have to integrate with something they have written. Or with a module or smth. And you encounter all sorts of horrible written code in a rush. Yeah sure if you look away and simply do your job, yeah, everything is fine. You drink a coffee, laugh with your team mates and go home. But then the job starts to be just another job. You come, do your job and go home.
There is also a cool web app for that, [Carbon](https://carbon.now.sh).
&gt;To me it is very hard when it comes to changing a my job, I see other devs job hopping without any guilt or anything. You've obviously never worked at a company that laid off your co-workers (or yourself). The best part is 99% of the time the reason for those layoffs is due to poor management. But management never gets laid off (they offer too much "value"), they always lay off people who don't make any business decisions. Then the CEO will send out an email (well, he didn't write one word of it, it went through a corporate communications team/senior C-level review) saying how hard the decision was (though he's made it before) because everyone is like family to him. You're nothing but a resource, employers don't care about employees. You need to understand that.
Please don't. 
makes sense because most developers have wide monitors these days.
Sure, I'll get right on that with out any context or backup for your position!
I think it's reasonably implemented but a terrible idea. Never share code as an image.
Thank you for the suggestion OP 
You sound upset about something.
I've made some changes and now I'm consistent output from Chrome vs. node (except the leading/trailing newlines...). If it's still not the same for you I wonder if it's a version thing...
Alternately, just `npm install js2p`
Do you have a good example of why you might want to do this?
But if you need operations, you can't, but nice...
 var talk = function(whosTalking) { return function(phrase) { console.log(whosTalking + ' says: " ' + phrase + '"'); }; }; var johnSays = talk("John"); var annaSays = talk("Anna"); johnSays("Hi there!"); // John says: "Hi there!" annaSays("Hi Jhon"); // Anna says: "Hi Jhon" talk("Pablo")("Ehy you too!"); // Pablo says: "Ehy you too!"
It uses d3, look at the network tab in developer tools.
Oh wow, okay gonna give that a try! 
Then you do not consider some use cases for this.
But does it require this tool? I just used to screen shot my IDE. Or use a syntax highlighter online.
I'm sure OP would happily indulge if asked but naturally I had to try to figure out how this works... [N, a, N, b, N, c, N, d, N, e, N, f, N, g, N, h, N, i, N, l, N, m, N, n, N, o, N, p, N, r, N, s, N, t, N, u, N, x, N, A, N, B, N, D, N, G, N, J, N, K, N, L, N, M, N, O, N, T, N, V, N, W, N, Y, N, X, N, z, N, j] = `abcdefgh|lmnoprstux(B=C)REQ[P]RN,;F`; E = [] + []; C = c + o + n + s + t + r + u + c + t + o + r; S = C[C]; F = S[C]; F(K + D + K + e + g + L + x + p)(P = r + e + p + l + a + c + e); H = S[f + r + o + m + G + h + a + r + G + o + d + e]; Q = `$=H(8*4*3);Z=H(9*9+9+2);U="[N,a,N,b,N,c,N,d,N,e,N,f,N,g,N,h,N,i,N,l,N,m,N,n,N,o,N,p,N,r,N,s,N,t,N,u,N,x,N,A,N,B,N,D,N,G,N,J,N,K,N,L,N,M,N,O,N,T,N,V,N,W,N,Y,N,X,N,z,N,j]=Iabcdefgh|lmnoprstux(B=C)REQ[P]RN,;FI;E=[]+[];C=c+o+n+s+t+r+u+c+t+o+r;S=C[C];F=S[C];F(K+D+K+e+g+L+x+p)(P=r+e+p+l+a+c+e);H=S[f+r+o+m+G+h+a+r+G+o+d+e];"[P](R(H(9*8+1),g),$);console.log((U+M+D+$+Q+$+O+T+V+A+W+A+Y+X+g+J+X+L+J+z+j+A+M+J+A+J)[P](R(Z+b+i+Z+B,g),N));` [P](R(N, g), E); F(Q)() [N, a, N, b, N, c, N, d, N, e, N, f, N, g, N, h, N, i, N, l, N, m, N, n, N, o, N, p, N, r, N, s, N, t, N, u, N, x, N, A, N, B, N, D, N, G, N, J, N, K, N, L, N, M, N, O, N, T, N, V, N, W, N, Y, N, X, N, z, N, j] = `abcdefgh|lmnoprstux(B=C)REQ[P]RN,;F`; E = [] + []; C = c + o + n + s + t + r + u + c + t + o + r; S = C[C]; F = S[C]; F(K + D + K + e + g + L + x + p)(P = r + e + p + l + a + c + e); H = S[f + r + o + m + G + h + a + r + G + o + d + e]; Q = `$=H(8*4*3);Z=H(9*9+9+2);U="[N,a,N,b,N,c,N,d,N,e,N,f,N,g,N,h,N,i,N,l,N,m,N,n,N,o,N,p,N,r,N,s,N,t,N,u,N,x,N,A,N,B,N,D,N,G,N,J,N,K,N,L,N,M,N,O,N,T,N,V,N,W,N,Y,N,X,N,z,N,j]=Iabcdefgh|lmnoprstux(B=C)REQ[P]RN,;FI;E=[]+[];C=c+o+n+s+t+r+u+c+t+o+r;S=C[C];F=S[C];F(K+D+K+e+g+L+x+p)(P=r+e+p+l+a+c+e);H=S[f+r+o+m+G+h+a+r+G+o+d+e];"[P](R(H(9*8+1),g),$);console.log((U+M+D+$+Q+$+O+T+V+A+W+A+Y+X+g+J+X+L+J+z+j+A+M+J+A+J)[P](R(Z+b+i+Z+B,g),N));` [P](R(N, g), E); F(Q)() After removing newlines it starts to make sense, it starts by defining a variable for each letter in the alphabet, then a variable whose value is the string "constructor". At this point it is possible to get the Function constructor via "constructor"["constructor"]["constructor"], which is basically eval, and the final string can be properly evaluated. Very cool!
I work heavily in UX. Those use cases are few and far between. This encourages bad behaviour. For those who do need something like this there are plenty of other options that don't encourage the average user to 'screen shot' their code.
Adding to what's already been said, you should really show that you've at least tried - but just to confirm, this is a JavaScript task, right? When it says "ArrayList" it makes me wonder if you've mistaken JavaScript with Java (which are completely different programming languages.)
Interestingly, there's one difference between the two: where an error is thrown if obj.prop.arr is not iterable. With destructuring, it happens right on that line. With ES5 it might happen at the same spot too, but it could also happen way later somewhere unrelated, or even not throw at all and silently wreak havoc. You want error stack traces to be as close to an error as possible, and destructuring can help. Something to consider.
I think it's messy to go any further than one level. const [ element ] = object.property.array Or, if I'm using *property* elsewhere, for example const { property } = object const [ element ] = property.array
I hadn't considered that, super great point!
See [my list of suggested resources for learning React](http://blog.isquaredsoftware.com/2017/12/blogged-answers-learn-react/), as well as my extensive [React/Redux links list](https://github.com/markerikson/react-redux-links).
Syntax Nazis.
Interesting! I'm also curious, in the first step, what's with all the N's? If I actually run this as-is in node the letters don't map correctly.
It's the same as any other relationship - once you have have your heart broken, you'll find you become a little bit harder and can deal with such things better. &gt; I see other devs job hopping without any guilt ... Why should there be guilt? Unless you are the only person who has know how of a particular project and leave the week before launch or something, there is no reason to feel guilty. Everyone looks after number one. It's not that hard to decide, really: - make a list of what is important to you - are you getting it where you are? - if not, can you realistically get it in the future? - if not then you need to leave Simples
But that's not what we are talking about, is it
I can't believe we are still talking about this... they are both equally valid solutions, my point is that a reduce is not outlandish in the least
I am curious too. Despite how often I see people mention currying, I've never ran into an instance where I wanted to pass around a gradually-updating function like this
Nicely put. Thanks man! What is your experience on this? Did you left a job because of the environment?
A classic old school example const moveFactory = direction =&gt; (distance, x) =&gt; direction * distance + x; const moveLeft = moveFactory(-1); const moveRight = moveFactory(1); ... moveRight(120, x); // etc
I am right in the middle of changing jobs as it happens :-) "because of the environment" is pretty vague - you mean you don't get on with people, or the people are not good enough or the company treats everyone badly or something like that? I have had several jobs, and left them because: - got stuck in a rut; everyone was nice enough but I knew it was harming my career prospects - great place, good for career prospects, but they knew it and it was a bit of a sweatshop - various circumstances beyond my control or non work related - everyone was an arsehole who spent too long fighting each other - great atmosphere and good career wise, but bosses knew it and therefore paid the staff too little these are the ones I remember 
Usually higher-order functions/components or middleware. These are common fp patterns. This is for instance how a redux middleware looks like: const middleware = store =&gt; next =&gt; action =&gt; { ... } And here's a component that returns a component: const canHide = Wrapped =&gt; props =&gt; props.hide ? null : &lt;Wrapped {...props} /&gt; const Hoc = canHide(AnyComponent) // Inherits AnyComponent, but can now hide &lt;Hoc hide /&gt; // won't show
When having a framework is the new having a website....
can someone explain to me what this code is actually doing? 
Because `.map()` sends 2 arguments to its callback, the element and the index. `parseInt`'s 2nd parameter is the radix, so you're passing the array index as the radix to each one... 
parseInt() accepts the second arg as the radix. Array.map() acceps the second arg as the index. So [“1”, “2”, “3”, “4”, “5”].map(parseInt) equals: [ parseInt(“1”, 0), parseInt(“2”, 1), parseInt(“3”, 2), parseInt(“4”, 3), parseInt(“5”, 4) ]
I'm a developer and one of my coworkers uses this and it is actually great for cases where your just trying to convey something over slack - in cases where you don't need to copy and past anything but want to show your approach or intention - it's super handy
Instagram has a fairly large community of programmers (me included), I could definitely see myself using something like this to get those ❤
As others mentioned, it's because `parseInt` takes radix as a second argument, and map passes `index` as the second argument. As for the code golfing part: const parsedArr = arr.map(Number) BTW, you probably want to use `Number` regardless of the `map` args caveat, because: parseInt("1e2") // 1 Number("1e2") // 100
Well, every job has it's downsides. And to be honest I've had a few jobs in my life and in the end the lesser likeable sides are the same. Yes, I do have to make impossible deadlines, but I've really got super colleagues, my manager is almost always willing to help when it's necessary, and I can work from home whenever I see fit... As long as I do the work and make the hours it's ok. 
Now it's identical, also in FF. Very cool.
It's common with React/Redux. If you've ever heard of HOCs (higher order components), they usually rely on currying for parameterization const MyComponent = ({hello}) =&gt; &lt;div&gt;{hello}&lt;/div&gt;; export default connect(({hello}) =&gt; ({hello}))(MyComponent); There, `connect` is curried, which allows you to `compose` HOCs: const greetOnRender = C =&gt; class extends C { render(...args) { console.log('hello') super.render(...args) } } const hoc = compose( connect(mapStateToProps), greetOnRender ) export default hoc(MyComponent) 
run in terminal for security free development :) /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --disable-web-security --user-data-dir
Story time: Two years ago I was offered a pretty big promotion to lead the ops side of a new business venture in a new city/market. The company was "cool" and it a highly desired role within a niche "cool" industry. It was a year assignment with the option to stay on in a larger role. From the start, something seemed off. I applied internally, and was hired within about a week. I was rush "trained" on an ERP for about a week and a week later I had to leave. So within two weeks of accepting the job, I had to relocate across the country. Within a week, I had to oversee the logistics of 100+ SKUs of inventory using a platform I had never touched. It was a mess. I was running ops, distribution, warehousing, field marketing, and sales support as the ONLY FT employee in my city. Flash forward a year later, I picked up the ERP platform pretty quickly but with a lot of stress. I got things up and running smoothly but we had NO sales and only one account. My city receive only one sales rep who worked the entire region. He dropped in once a month but had closed no accounts of his own. I was sitting listless in a warehouse that was ready for business that never materialized. I later find out the entire operation had not been budgeted for. Unbeknownst to me, the company had been sold and the management at the time decided to move quickly into a new market for reasons unknown. The entire previous management quit or got payouts and new management decided this new venture was too expensive and they were right. We didn't have enough revenue coming in to support our rent, let alone my modest salary of 53k. The entire business operation I had spent the last year building was being folded and other markets and HQ would be assuming my in-market responsibilities. Everything else was outsourced to a third party. The warehouse was to run out the lease and then close. I was told I could go back to my original market but the only options were a fraction of the responsibility I had been given in my promotion and I would move one rung down the latter. My boss implored me to return. I quit immediately. So I spent a year of my life working on a business venture that was destined to fail. I decided to I needed a change and switched careers. This story has nothing to do with web dev. But it should serve as a reminder that companies don't look out for your interests, they look out for theirs. And sometimes they make mistakes. Never feel guilty about putting your interests first.
Rough ride man. Thanks for the story!
The topic is the readability of this function. This branch in particular is about doing it with a single loop and avoiding memory trashing.
``` const arr = ["1","2","3","4","5"]; const parsedArr = arr.map(item =&gt; parseInt(item)); ```
The whole thing started from refactoting away from a single for loop... 
Please consider using public CDN instead offering your own, people may be worried by the possibility of getting some mining script in their apps.
The second parameter of parseInt is the radix and Array.map accepts three parameters: element, index, array. So you're passing the array index as the radix in parseInt.
Kyle simpson actually used this exact example in his functional lite course on frontend masters. His method of dealing with this was using a utility function const unary = (fn)=&gt;(arg)=&gt;fn(arg) arr.map(unary(parseInt)); 
there's a good book on writing art code from scratch called _The Nature of Code_. it's based on Processing, but it's mostly about the math behind programmatic art.
Are you bit shifting a regex there??? Hmm...
So, originally my code was more like: a=` a `[1]; Which creates a string of length 3 where the char at index 1 is what we're after. Then as I tried to reduce the size of the code I remembered the destructuring assignment feature and, since strings can be indexed like arrays, I though that would work instead. Since every other char is a newline I need to assign those to something and since I need a newline anyway, I might as well assign to it and save a call to H(). With newlines removed, the indexing is all off!
Ohhhh, wow that is a clever trick! I've heard of people using _ for undesired parameters before, just as a convention to consider in the future ;)
Well I wasn't really determined to leave my job. It was a bit stressful and there were some red sings like teams doing overtime for long periods of time, always in a rush to deliver, always planning for demos and not for the product it self. I didn't payed too much attention to it. I simply don't want to deal with aggressive managers and all that. Until one day an ex colleague asked me if I wanted to change my job cause they were looking. I went for a cup of coffee to their small company and I was amaised of how chilled and friendly they were. I then started to think about my work environment and that it wasn't all that ok. So I said ok. Let's make a change. They gave me a bit more money. More flexible work. Friendlier people. Nice project etc. work from home whenever I want
Hi /u/andrew_kapa, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Barely...
I've 2 objects in an array and I want to swap only 2 values (i.e id and position) ...
Some of my favorites pieces of Javascript abuse: &lt;!-- html comment --&gt; http://google.com ಠ_ಠ let = 'wtf' 
No, i'm bitshifting the length of the string representation of a regex.
I want to like it, but the example on the homepage uses a `plot` function that uses an array-positional syntax, i.e. `plot(x1, y1, x2, y2)`. Not to my taste, and makes TypeScript usage basically impossible. Worse though is that in the API reference, all it says is: `(...args: any[]): void` and to find out about the arguments you have to go to the source.
Oh...
&gt; You shell out $200 for italic cursive html attributes.
I don't get it. Every OS has the ability natively to create an image from a selection of text.
+1 this is a deal breaker if you happen to want to highlight code that's all the way on the right side - love the concept though!
Wheres you're open tag? Might as well make a full script doing something useful /&lt;script&gt; i = 2; i &gt; 1/i &lt;/script&gt;/
The only issue I could see with this is in regards to accessibility. If the copied text is already shown on the page somewhere then it probably doesn't matter, but if not, you might want to try some of the tricks people use for hiding form labels while still keeping them available for screen readers. eg: @mixin sr-only { position: absolute; clip: rect(0, 0, 0, 0); white-space: nowrap; border: 0; }
So is Sublime Text dead now?
I think you really need yo get out more
short-hand: +'1e2'
Is there a good reason to use parseInt over Number? Only reason I could think is if you need an actual integer returned, aside from that Number seems more consistent to me
What is this actually doing?
That seems unnecessarily complicated. I'd rather just write... arr.map(n =&gt; parseInt(n))
parseInt-ing it how it should be done. Placing a plus sign in front basically makes it handle it like an integer. 1e2 is the scientific notation for 100, or 1*10^2.
Nah.
It depends on your workflow.
I would have done a function taking two of these objects which swaps their values, nothing more 
No, Number is better.
https://jsfiddle.net/bdyy2bro/6/
 Number(null); // -&gt; 0 parseInt(null); // -&gt; NaN
That it doesn't cater to you or your sensibilities doesn't make it not significant.
Wow that could cause a lot of problems, thanks!
`parseInt` takes two parameters. The first parameters is the string you want to parse, the second parameter is the radix you want to base the number in. By default, the radix is 10, but the Array.prototype.map method passes the index as the second parameter to the iterator function, so you're altering the radix on every iteration. The only thing I had to Google there was the word "radix," because I couldn't remember what to call it other than "base" and that didn't seem right. What do I win? =P
That doesn't solve the actual problem.
What is your problem with D3.js projects? There are super awesome D3 projects, including the one you linked. Yes, it was done using D3.
I'm not saying it's better or worse.
Ah, my bad, the more you know. I should have used `number` instead of `integer`.
Using parseFloat is optimal. parseFloat('100'); // 100 parseFloat('100.12'); // 100.12 parseFloat('1e2'); // 100 parseFloat(null); // NaN
Have Turbolinks been significant? They were created by the people behind Ruby on Rails.
Yeah turbolinks is pretty significant to all the Rails apps that use it in production, I'd say
code like `unary` is meant for just trivia look-what-i-can-do nonsense. don't take it or anyone writing "production" code like that seriously.
Just so you know n**0 = 1
Ok then, by that yardstick Stimulus is significant too :-) For the devs who are not working with Rails apps though, it likely is just a blip on the radar.
Hey! p2p.today looks very interesting, I will try it.
For people who use Java/Spring or C#/.NET or Go or whatever the JS releases you get excited about are also just a blip on the radar. Your point? &gt; That it doesn't cater to you or your sensibilities doesn't make it not significant.
I found the solution, but I didn't notice anyone explaining the mysterious 1 as the first element. For the first element, `parseInt(1, 0)` is called. If the second argument is falsey, it defaults to 10.
Maybe I'm not the greatest programmer in the world but I know how to use nested loops, use 1d array to represent 2d matrix etc. Still, I found those examples a bit confusing, I'm not sure where is correct code and where is code to modify. Perhaps React blurs the goal of task a little (I don't work with React just know the basics).
My point is that for the community of javascript developers in general (who, I presume, is the target audience of this subreddit) a framework whose primary purpose is to help Rails developers organize their code is a pretty minor thing. It's too specific a case to be considered generally significant. I would think. CoffeeScript released version 2 several months ago. Is it significant? I would think not.
Yeah that's basically what we do. It's just that when you do a version bump on Prettier, it usually has some pretty major reformatting implications so every time you upgrade your devtools it's another widespread change.
...do you think the Rails and JS dev communities don't intersect? And it has nothing to do with how many devs in general use it and you know it - tons of [varying degrees of] niche libraries and frameworks (as well as popular clone number 5258) get posted here and no-one jumps into the comments to trash them for not being "significant". Again, &gt; That it doesn't cater to you or your sensibilities doesn't make it not significant.
Read utilizing JSONP is insecure when handling sensitive information. I found that the Rezdy API requires the pre-flight OPTIONS request, and I am able to curl the api.com/key url and receive information (albeit I don't understand how the return data is useful to me). I read that I need to send the "pre-flight OPTIONS request" which will return the "Access-Control-Allow-Origin" value in the response headers. Does this then mean that the OPTIONS request adds the users browser to an accepted browser list and will accept requests from it? Or I will need to add the key returned from the Access-Control-Allow-Origin to my GET request headers in the next step? And I will need to make the requests via server-side script because the OPTIONS request can be sent via server only? Sorry I feel swamped in information right now.
I'm guessing this isn't beginner friendly?
I am not trashing Stimulus; I am not passing any judgement on it whatsoever; I am merely expressing my skepticism regarding the syllogism that since it's made by the Rails team, it is generally significant.
Surely peole can do what the hell they like with their code?
&gt; The runtime is not throwing an error though. That would be because they code wasn't run in strict mode. In strict mode failure to set a property throws just fine. You'd get the same behavior from an object that has been frozen too.
So I'll need to make a pre-flight request with the OPTIONS or PUT method? Then get the value from access-control-allow-origin key and place that in my GET request headers when I send the actual API request?
Yeah, but: parseFloat('0x10') // 0 Hooray Javascript :(
I believe this is the shortest solution: arr.map(n=&gt;+n)
&gt; If I see arr.map(n =&gt; parseInt(n)) I might be tempted to simplify it to arr.map(parseInt) IMO if you're worried about others being tempted to do the same when confronted with this code, you're better off just writing a short comment rather than introducing an unnecessary utility function to the codebase. 
`arr.map(x=&gt;+x)` is shorter
You'll likely be better off just actually asking your question, and posting in /r/learnjavascript instead
The problem is not the loops, it's the combination of the delivery format (a workshop) and a highly uncommon idiom (interpolated reversals): &lt;Swatch color={this.colors[j%2 ? i : this.colors.length-i-1]} width={this.width.step()} x={this.width(i)} y={j*20} /&gt; Let's face it, most programming jobs don't involve thinking about lining up color sets in geometrically pleasing patterns. If you tell people you can achieve a checkerboard pattern by interpolating reversed arrays, I doubt these people would have any trouble coding up the solution. It's the "aha" moment of doing that (versus other more-likely-to-be-considered-but-more-convoluted solutions such as rotating the array) that trips people up. This actually translates to a couple of good lesson in hirings: 1 - don't build an interview around an "aha" moment; make it so that a solution can be found by incrementally deducing solutions to smaller problems. 2 - don't assume you are testing for a basic skill if there's a built-in component that doesn't align with their relevant skill set. A great analogy I heard a while back was when there was some promotional stunt involving olympic archers trying to hit targets as fast as possible and without some of their gear. Many took that to mean that olympic archers can't shoot for shit without their equipment, but the only actually sensible conclusion should be that _nobody_ can shoot for shit _if they're put in a position they had never practiced for_
&gt;by just using what I guess is a weak map var myMap = {}; This is just a plain Javascript object. A WeakMap is a different construct altogether, as is Map. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap Generally, you should use an ordinary Object, unless you specifically desire at least one of the benefits provided of a Map instead: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Objects_and_maps_compared
Thank you! I'll look into your links. Javascript just has so much more going on than python or java that it can be overwhelming, but I guess it needs to since it interacts so much with the front end.
Obviously they meant in regards to their ownership of React
Save one char with app.map(x=&gt;+x) Of course, the unary + operator is heavily debated.
Sweet! Maybe they can get on to removing that errant package.json file that causes react-native-vector-icons imports to fail?
Why not file a PR?
thnx, i will give this a try too.
If the data is only used locally, and security is not an issue, and the database or list is fairly small, you can do: 1. load JavaScript functions; 2. load file with serial data; 3. enter serial in text field; 4. create string/array from search in database; 5. populate other fields. There are readymade examples, some more complex than others, but stackoverflow has [some](https://stackoverflow.com/questions/2166765/search-an-array-for-matching-attribute). Scroll through the answers to **find** your preferred method. 
You can learn **[Artificial Intelligence](https://github.com/BuildingXwithJS/proposals/issues/22)** and become an **[AI Mind Maintainer](http://ai.neocities.org/maintainer.html)**.
Fat arrows are fun to 👀 at. 
The biggest dichotomy in my life right now is that I strongly dislike Facebook the product but I very much like Facebook's Open Source, and I'm using it heavily. I guess you learn nuance with experience ¯\_(ツ)_/¯
You dropped this \ *** ^^To ^^prevent ^^any ^^more ^^lost ^^limbs ^^throughout ^^Reddit, ^^correctly ^^escape ^^the ^^arms ^^and ^^shoulders ^^by ^^typing ^^the ^^shrug ^^as ^^`¯\\\_(ツ)_/¯`
kk, i will look into querySelector. I will put the code on jsfiddle too.
You've interpreted it wrong. That's more like: 1 &lt;&lt; /script&gt;/.toString().length i.e. shift `1` by the length of the string representation of the `/script&gt;/` regular expression object (which is `9`).
done
Same thing as I suggested above: &gt;Get .textContent rather than .innerHTML if you want the text content instead of the HTML. https://jsfiddle.net/y8b9tnn5/1/
sorry for sounding like a noob, but can anyone explain to me what this means? What does a relicense entail? Are they common, or is this an odd occurrence? If it's odd, why might this have happened? 
Is that react native developers are safe to continue?
The previous license gave Facebook a lot of advantage over your software, which some people interpreted as they can own your software or ask you to shut it down. It was so unpopular as a license, but the library itself wasn't, that apache themselves has to say that react could no longer be used on their projects. MIT license however is a lot in line with the general open source motto where using the software and manipulating is free and has no burden. That's the layman version as I understand it.
I did what you as suggested, used querySelector and .textContent It solved the promlem a little bit more but not completely. Copied data still have one empty line both before and after fname and lname and also 20 blank spaces before fName lName.
Depends on what you're building. A large single-page app is untenable to build without a framework (even if you don't use one, one will eventually arise out of your work). Smaller stuff like node scripts? Sometimes I don't even pull in utility libraries for that stuff. 
That's because the text node in your fiddle contains all those spaces. https://www.google.com/search?q=remove+spaces+from+beginning+end+of+string+javascript
Not sure what you mean by this question. It's all just JavaScript. You should do what makes sense. For instance, building your own state management or rendering engine is probably not something you want to do, so you use React, Vue, or Angular. But everything else is just vanilla. You probably don't have any reason to build your own short-id system when you can just pull a library down that does it for you and save 20-30 min. You probably don't want to reinvent the wheel for a lot of things that have caveats that could get you in trouble, so you just use a piece of Lodash that does it. It's not really like the jQuery days. ES5+ has incorporated most of the things jQuery added to make it not "vanilla" JavaScript.
/u/CertainPerformance thnx .trim() did it. It was easy af, should have googled it myself, sorry for bothering u.
WE ARE WE YELLING
Just checking. I thought perhaps the cat would be in the modals background rather than the windows. 
Why is it better and how is it different? 
Maybe look at the comment that started this chain?
I don’t understand. How is the *lack* of a patents grant (which I’m very happy they removed) potentially bad news?
Maybe a reaction to the release of vue native last week? https://nativescript-vue.org/blog/nativescript-vue-1.0-and-a-new-site/
You can have nyan cat as a modal background: https://jsfiddle.net/ad3quksn/482/ But I'm just not sure if that's a good UX :) Here's the migration guide which should help you to switch from the original sweetalert: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2
If they have a patent that react/react native uses, you no longer are granted the right to that patent. Meaning now you can possibly be sued for patent infringement because there isn't a patent grant.
Did you downvote me for asking a question?! If so, that’s bad manners. My issue with the patents grant, after reading it in full (but am not a lawyer) was basically this: ““BSD + patents” essentially means that the code is open (for everyone to see and use), but it’s copyrighted by Facebook. The BSD license grants you a copyright usage license. Additionally, they grant you a patent license as long as you’re nice to them by never suing Facebook for patent infringement. The instant you sue Facebook, your patent rights for React — and any other Facebook ‘open source’ technology you happen to use) — are automatically revoked.” I’m using React Native to build something that could end up being built by Facebook itself as well (it’s social network related). If they were to do that, hypothetically, I’d be screwed because they could literally copy my whole app and there’s nothing I could do - because suing them would revoke my right to use React Native, which means my app would be illegal and would probably have to disappear from the respective App Stores. Do you think I’m wrong to be happy they removed the patents grant?
If I am building some simple interactivity for a web page, I use vanilla. If I am building anything more complex, from medium sized interactive forms all the way up to single page web apps, I usually use React and a couple other things.
[...Array(5).keys()]; =&gt; [0, 1, 2, 3, 4]
Me too, honestly their OS libraries are seriously the best
Removing the patent grant does not make the patent go away.
I’m genuinely stupid in this area, please forgive the ignorance. You’re basically saying that if a patent on anything in React or React Native exists, they could potentially sue any site or app that uses React or React Native for patent infringement (and come out on top)? If so, doesn’t that argument apply to *any* open source software you use in your app?
I'm also no lawyer, just trying to use common sense (so my reasoning and conclusion might be wrong) but the way I see it, this is actually a worse licence in the face of patents. Patent exists and no licence can change it. With the previous licence facebook could sue you only if you sued them first.Now they can sue you whenever. You can't replace the patented part, because: 1. Patent applies to idea/approach and not to actual code (it's not copyright) 2. The patented part is the core of react
Ok, that makes sense. Thanks!
Which is what I talked about?
but respondet to a comment talking about the `undefined + str` method of casting. 
Actually I believe this might be one of those things where a beginner might have a better chance - years of using a certain API in a certain way makes you... assume stuff... 
He literally said "parseInt-ing is how it should be done". No, it should be done using `Number`.
Almost always a framework or library. VanillaJS is hyped and hyped, but using it just rarely makes practical sense. If you are doing something large (or huge), you just need a framework or library, most likely multiple ones. It's the same as in any language. If you are doing something small, you can manage without any libraries. On the other hand though, on a simple site, &lt;100kb won't be noticable for the end-user no matter what, and for you and your company it's often the difference between delivering the feature in one day vs whole sprint.
You still may use jquery for simple landing pages/forms etc. It will shorten the code a lot. 
Totally agree. React (Native), ImmutableJS, Jest, Flow, ... are all awesome
If Facebook hypothetically implemented their own product that was similar to yours, you would only have grounds to sure them if their implementation infringed on your copyrights (eg. By copying your code or design without permission or licence) or infringed on a patent held by you or someone you represent. It is not infringement to merely develop a new application that has the same or similar behaviour to another app. Patent grants are not inherently bad. There are many licences that do include some kind of patent grant. The common Apache licence 2.0 includes one, for example. But not all patent grants are created equal. Facebook's patent grant was considered bad because it not only granted you a licence to use any of Facebook's own hypothetical patents that are necessarily infringed by using their software, but by using their software, you implicitly provide a reciprocal licence to Facebook to use any of your patents. Basically, Facebook wanted a way to say you can't sure them for patent infringement, no matter which patents of yours they infringe upon. This goes beyond the requirements in widely accepted patent grants.
That's one char in exchange for new function.
There’s a good discussion over at [Hacker News](https://news.ycombinator.com/item?id=16398582)
Thanks so much!
Have you ever played the game "Creatures 2", where you take care of little creatures called norns? Well, if you have, I created a NW.JS monitoring application for it. I call it "Albian Command" and the source is [here on github: https://github.com/skerit/albian_command](https://github.com/skerit/albian_command) The game is actually 20 years old, but it still has a small yet active community. Most existing wolfling run monitors were from the same time and written in VB6.
It is generally understood to give an implicit patent grant. Basically, it says you are free to do a bunch of things rather than say you are free to do those things only if you get another license.
I usually always transpile my code so that I can use modern JS and npm modules. If I'm build a some sort of server I'm generally always using express. For anything even slightly complicated on the frontend I use React. Vue is also good but I'm more familiar with React so. 
Patent and copyright are two completely different things legally. I think your general idea is headed in the right direction, but technically incorrect because there is a distinction between a patent and copyright.
lol no
What a load of piffle
It's how Yahoo! used to be. Meh product but great YUI and CSS resets, etc. 
You can also check out [my books on JavaScript](http://exploringjs.com/), which are free to read online. They complement MDN. For example, this is the chapter on Maps and Sets: http://exploringjs.com/es6/ch_maps-sets.html
My book on ES6 (free to read online): http://exploringjs.com/es6/
If it’s MIT why is it only slightly safer? The patent rider made the otherwise also totally safe BSD-3 license sketchy if you planned on litigating fb. I guess I agree if you mean it was only slightly not safe to begin with. 
I have received the words of wisdom.. Guess i'm going to try this!
This article feels like a step backwards. Using GraphQL, you can query for the fields you need to render a component. If you really felt compelled to rename it on the data level, then the front end could just query for that instead.
This is great. Every project should use this as a documentation standard. Example - code snippet. And so a many examples. Love it.
For everything in life, you can google “awesome X”. For instance “awesome project ideas”.
Yes
Vanilla was difficult a few years ago due to browser differences but now it is a much less of an issue. Personally I use a mixture of jquery (library) and vanilla along with with several customised routines in a very large web project. I'm not a big fan of frameworks.
I'll check them out. Thanks. I am doing the W3C courses on Edx (not related to the W3C website), and the second one is heavy with JavaScript despite saying it isnt. They really didn't do a intro to the language that covered stuff like the basic data types. So I'm thinking going through a book would help a ton, and shouldn't take too long considering I already know 2 languages.
People here are generally willing to answer questions so long as it's clear you've put the work in first and are just stumped. Provide all the info, including what you've tried and your current code, and I think you'll usually get an answer. Personally, I'm curious about what kind of questions you could have that forums would say they were stumped over.
&gt; If I see arr.map(n =&gt; parseInt(n)) I might be tempted to simplify it to arr.map(parseInt) Why not just refactor it to `arr.map(n =&gt; parseInt(n, 10))`? Temptation gone, code is more explicit, and no silly functional helpers required.
The patent grant was fine, the revocation clause was not. The patent doesn't just magically disappear when the questionable grant does. So you're still subject to it's existence. Apache 2.0 which was created after software patents were a thing addresses this in a permissive way. Facebook's BSD Addendum granting patents was a legal nightmare.
Are licenses retroactive? If I used a version of React that was BSD, deployed it into a bundle.js and never touched it again, did I at one point have an agreement with a BSD + Patents, and now an MIT license? 
It is safe. Some people just gotta hate on the Big N tech companies.
fuck off, bot
If you like math, Project Euler is a lot of fun
Absolutely! JavaScript has its fair share of quirks and is often different from what one might expect when looking at its syntax, but none of that is difficult to understand.
Yea as long as you know, that every level is defined, so it won’t crash, there really isn’t a reason not to do it. I think the syntax is quite elegant. Of course if you start defining 50 variables just to reach the final level, accessing it directly or _.get or something like this, is the better solution.
I actually find it more readable than original ver plaus we still can get a transpiler spiting errors for non iterables, that's cool
https://www.meetup.com/find/events/?allMeetups=true&amp;radius=Infinity&amp;userFreeform=Saint+char&amp;mcId=c60174&amp;change=yes&amp;eventFilter=mysugg take a look at this
No, this has been in the working for quite some time: https://code.facebook.com/posts/300798627056246/relicensing-react-jest-flow-and-immutable-js/
This is great, but does anyone actually use blockchain in their projects today?
I would suggest for you to eventually try some things. You can only come up about how certain architecture is good for this or that reason only when you need that. With only jQuery and Vanill JS it will be hard. Or you need to enhance and enlarge some apps that you already written to start feel what is like to have Models, Controllers, View etc. Or what is flux and why is that good or bad. Hope it helped!!
ccb621, great post! As small ecommerce owner i tired of dealing with FE devs who try to sell me on SPA. One thing i am not 100% sure about is use of frameworks (react/angular/vue) as a view model for js functionality you need on the specific pages VS keeping it to native js. Could you make recommendation here?
If you can use native JS, go for it. If you need a library/framework, I would lean toward something fairly lightweight. I have only used Angular and React, but I have heard good things about Vue. Angular is probably a bit too opinionated. Personally, I would probably go with React if I were in your position. 
If you mean exercises, they're at the end of the chapter and there is a [code sandbox that is offered by Eloquent JS's website](http://eloquentjavascript.net/code/) too with the corresponding exercises. There is a [code sandbox for the newest edition too](http://eloquentjavascript.net/3rd_edition/code/). Not sure if any significant differences, but the 3rd edition is still a draft according to the website's header. 
Thank you!
Why take poll when you could test this with one line of code?
Use Fusebox, you automatically get rid of gulp, browsersync and babel and have very fast and easy to do bundling capabilities. 
I created a micro library to help ensure immutable and safe state in redux. It can also be used outside the context of redux for easily setting and retrieving properties from deeply nested objects. https://github.com/Millsky/lenscrafter
I’ve always found the Mozilla developer network to be the best resource for javascript. If you’re new and just learning their [learn web development ](https://developer.mozilla.org/en-US/docs/Learn/JavaScript) course really helped me out after my first semester. 
For someone who was interested in learning react, all those discussions about licences scares me a little bit. I think the real issue is facebook being facebook (lot of 💰). MIT licences was not an issue before, I am referring to Ruby and Postgresql and alike 
Don't think in term of specific coding challenges. Think in terms of things you want to build. A crawler to find rare pepes on 4chan. A Bot that spams your friends. Scripts to automate menial and repetitive tasks. Scripts to automate other tasks. A game. A cryptocurrency trading bot. Machine learning shenanigans for front end. Anything that comes to your mind. Then you will stumble upon countless of doubts and problems and that's where the learning will take place. Revisit and reconsult the basics when in doubt. And keep learning and building stuff. 
I'm a beginner, yes. And your comment was really helpful, thanks. I'm just starting with webdev, and I want to build a cross platform Electron app. So that's my goal. Would you still recommend Eloquent JS? I've also stumbled upon Mozilla Developer Network.
Take a good look at the ["vanilla-js" example on TodoMVC](https://github.com/tastejs/todomvc/tree/gh-pages/examples/vanillajs/js). The moment you have any dynamics you're basically writing a framework, that means cobbling together MVC type controllers, render-views, etc. If you follow best practices that it, if you just go ahead instead pumping globals into dom nodes your app will turn sour quickly. But even if you do re-create your own blend of a framework, it will be slow, it will be bloated, it will be buggy, it doesn't have any kind of eco system for third party tools and ui controls, hiring devs for maintenance will be tough. The naked dom is helpless when it comes to rendering a vivid application. The patterns that have evolved around the need for something to drive it have obvious merit. They have progressed so much that it is downright silly to not use a framework for even the most simple personal web-page. Even there you would want to use and re-use components, split and distribute responsibilities. 
I'm a beginner, yes. And your comment was really helpful, thanks. I'm just starting with webdev, and I want to build a cross platform Electron app. So that's my goal. Would you still recommend Eloquent JS? I've also stumbled upon Mozilla Developer Network.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tastejs/todomvc/.../**js** (gh-pages → 5e69c95)](https://github.com/tastejs/todomvc/tree/5e69c95ef7d60d52a0d94819d7dcc542e7375fb0/examples/vanillajs/js) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply duemfa5.)
Yes. Do not worry much about the book. Most of the stuff I learned and still do by googling and indeed the mozilla documentation. Then I go to the books when when I have already used the things to get more profound knowledge. I also like and would recommend : Programming Javascript Applications - Eric Elliot It's even available as a PDF on the first results page of Google) 
Created a tiny and fast micro logging library that is a mixture of debug and bunyan and is able to utilize asynchronous local storage (async hook) https://github.com/emartech/json-logger-js
I must confess I couldn't work out why the hell I was bothering as I clicked the the squares, until I got to the horse and my mind was blown. Bravo dude - and talk about burying the lede!
Stop spreading FUD. It’s MIT licensed. It’s safe.
Great question. In Brazil, where I live, there are a couple of startups getting involved with blockchain, but it is still very unknown to the people in general. I did it for learning purpose, no regrets. :)
Also those aren't exactly loops, they're using map(). Same result and behavior, but possibly different mental model or approach to thinking about it. The other leap was that the height is the same as the width, so you can create the outer vertical and horizontal "loops" by mapping on the same colors array.
How would you know they are being installed? The bots could be doing this for creating their own historical repository. There is a chance people download your packages, and then choose to not comment or rate. I know personally I have never rated a single package.
There are networks segregated from the internet that host their own NPM servers. Some of those downloads are definitely for those types of networks. 
for this example &gt; https://puu.sh/zq1kz/d6f4c5c840.gif would you use vanilla or frameworks?
Webpack is used to bundle your assets in one big file. Babel transpile the code you write with ES6+ features into ES5, so you have more compability with older browsers. I really rec studying webpack + plugins(loaders) so you can bundle not only your javascript code but also CSS, SVG. You will struggle with the configuration of webpack at first but it pays off since you're thinking about using some kind of javascript framework.
I have never marketed the package at all. There is a chance, but it is very low. 
This is what I was thinking as well ~ I would be interested to see what the statistics are. Unfortunately googling npm stats or npm scraping leads to packages on npm rather than articles about npm.
Those are usually setup as proxies. So they don't fetch a package until a developer needs it.
The networks I’m talking about require a physical transfer of data, so an as requested architecture is not viable. 
We had a similar confusion about small library we made, but we theorised it was just because of how often we rebuilt our Docker containers, could it be the same for you?
I don't have any docker containers. I think /u/jesseflorig has the right answer. &gt; There are networks segregated from the internet that host their own NPM servers. Some of those downloads are definitely for those types of networks.
While many companies do maintain their own npm servers, typically they only pull approved packages and versions, not the whole npm space. Banking industry is an example where you are almost never allowed to install / develop from public repos. While some downloads are for that, there are some malicious downloads done to scan packages for keys / access tokens as well.
How about something [cool and fun but useless](https://codepen.io/kennethlumalicay/full/PQERyr/)?
Could be if you're using it in a project that runs through CI
Fuse box + circleci should give you most of what you need. 
Our esteemed colleague, trout_fucker, is absolutely correct. Use the right tool for the job, and that tool is almost never jQuery these days. 
Good point. AREPL and AREPL-vscode both have CI unit tests. AREPL uses appveyor, which caches the node modules, but AREPL-vscode uses travis (which has the same feature but does not do it automatically). However, on Febuary 10th I only had 16 commits, yet the [stats](https://npm-stat.com/charts.html?package=arepl-backend&amp;from=2018-01-01&amp;to=2018-02-15) say that I had 58 downloads that day.
I have an npm package that’s pretty much only useful to my coworkers and me yet it gets tens of thousands of downloads a month. I’ve never been able to explain it. 
Mandatory not a lawyer disclaimer, but I would think that the license applies to the product as a whole, not specific versions. 
How is this useful? Trick question because blockchain is a meaningless buzz word. From some that works with "blockchain" 
The outcome of the poll would give me an understanding of why we see js developers using something like someString.indexOf("a") === -1 Instead of using ~ someString.indexOf("a") . Just spreading awareness of this lesser known fact about negative numbers because we use them everyday. But yes I get your point I should have phrased it as a quiz. 
That’s because an index of zero (the string matches) evaluates to false. IndexOf === -1 is the correct way to evaluate it.
Not true. Before, the patent license could be revoked in certain circumstances, but the source license was not revoked. After, no explicit patent license is granted, but the community spoke and decided a possible implicit grant is preferable to he explicit but conditional grant 
Ever thought of using the ~ operator ? Which does -(N+1) . 
Ditto this! MDN (Mozilla developer network) is a top resource. I would also highly recommend some javascript courses on Udemy, just be sure to grab them on a $10ish sale. I personally liked the following on Udemy: "The complete javascript course" by Jonas Schmedtmann "Javascript: understanding the weird parts" by Anthony Alicea
Thanks for your sharing.
I missed the operator in your response but I’d still probably wouldn’t do that. It’s clever but could trip up an inexperienced dev. I tend to program on a team with developers of varying experience so the most clever may not always be the best choice.
That’s going to return a collection of img elements. You’ll need to to loop through them and apply the change.
Any idea on turning this into a useful code? Besides criptocurrency
`getElementsByTagName` returns _elements_ rather than a single element. Single elements have a `style` property. A list of elements do not (jQuery collections act this way, but this is not using jQuery). So you'll need to go through your list of returned elements and set your styles on them. var imgs = document.getElementsByTagName('figure'); for (img of imgs) img.style.display = "none";
well aren't you an ActionScript throwback
Ahhhh okay I got it so this would work too right? var img = document.getElementsByTagName('figure'); for(var i = 0; i &lt; img.length; i++) { img.style.display = "none"; }
Close! You have the right idea with the loop, but you have to make sure you grab the figure element from the img list rather than referring to img again when setting the style: var img = document.getElementsByTagName('figure'); for(var i = 0; i &lt; img.length; i++) { img[i].style.display = "none"; } Note the use of `img[i]` instead of just `img`
You may be doing something that isn’t “web” compatible, what dose the code look like?
Aye. I've been known to dabble in ActionScript.
Thank you for your quick reply! Here is the HTML code: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;script src="hiddenScript.js"&gt; &lt;/script&gt; &lt;h1&gt; A nice header exists here... &lt;/h1&gt; &lt;b1&gt; &lt;p id="lyndsay"&gt; Something naughty is here &lt;/p&gt; &lt;button type="button" onclick=deleteAll()&gt;Click me!&lt;/button&gt; &lt;/b1&gt; &lt;/html&gt; and here is the hiddenScript.js code: function foo() { window.alert("Nothing to report"); } function bar() { } function deleteAll() { document.write("HAHAHAHAAHHAHAHA GONE!"); }
Yeah here’s your problem. Chrome is trying desperately to render something in you browser. When you write to the document it’s not behaving because the string “hahaha gone” isn’t valid HTML Wrap it in an &lt;h1&gt; element and then replace the contents of the &lt;body&gt; element with that h1
Yeah I'm gonna need some more information about naughty Lyndsay. For debugging purposes, of course. 
Note that display and visibilty are different properties, it looks like you're trying to affect one with the other.
Node is just massively popular. I'm guessing some people genuinely checked out your library. My library is the simplest thing ever and just broke 100k downloads with only 19 stars on github.
So if I change my CSS to something like: #normalRead { display: none; } Will that work?
I think I understand. So use document.getElementById([header_name]).innerHTML(&lt;h1&gt;Haha gone!&lt;/h1&gt;) instead? I am under the impression that I should generally avoid document.write() if I can anyways.
Have a look at the spec of that method. If it fits what you need at the time then use it. Generally if you’re changing the DOM then you don’t need it
A framework. I almost always use a framework with any kind of standard UI widgets like this shows. There will still be vanilla JS in my custom code, by why reinvent the wheel. 
\r\javascript\ilikepugs.1 Error: 'id naughty Lyndsay' is private. :P
Same thing happened to me and an old coworker, didn’t speak to anyone else about it. We were graduates and published small npm packages just to see how it’s done and both got &lt;50 downloads in the first night for no reason. Assumed it was bots, not sure what they’re doing though 
If that was literally all the interaction on the site, vanilla. If this is just one of several widgets of this type, I would probably pull the React trigger.
I was thinking of using it for trusted content/news blockchain. I've done a few blockchains using .Net and nodejs. Core concepts are simple.
As ecmabot says about document.write: &gt;document.wrong. Please use something more modern and less prone to doing confusing things. This function tries to write to the current document. If the document has already been processed, the document will be replaced with a blank one with your argument. You don't want that; use the proper DOM methods instead.
It's much more elegant to use the array iteration methods than to use for loops. &gt;ECMAScript's Array contains a number of built-in methods for iteration (e.g., map, reduce, every, some, filter, and forEach). They relieve the need for manual iteration, provide better abstraction than a `for` loop, and make it clear what your iteration is doing. See https://gist.github.com/ljharb/58faf1cfcb4e6808f74aae4ef7944cff Like this: document.querySelectorAll('img').forEach(image =&gt; { // do stuff with each image });
Researchers, lot of researchers pulling npm packages down for analysis, network aggregators, trying to build their own npm mirrors. etc.. 
Try it and find out!
010110100010010101110110010101100010011001010111001101110100011011110110111101101100011100111010101010100000101010100010001110011101010101010000010101010001010000100000110010101110010.
Probably. You might also need to include the leading # in your javascript selector, can’t remember. 
a package depends on yours. https://www.npmjs.com/browse/depended/0126af95c0e2d9b0a7c78738c4c00a860b04acc8
The appropriate framework(s) to learn probably depends somewhat on what you want to accomplish with it, or what you might want to learn it for - do you have ideas?
Thanks for the quick reply =). I'm kind of self-teaching and hoping to find a career somewhere out there related to programming, so I suppose I should have asked: "Which is better for the job market/a career?"
Another alternative is parcel-bundler
Use an event listener to drop the inline script and then toggle a CSS class from the event listener. 
I made a Chrome extension. It was my first go at making an extension. I'm a student and PDFs are annoying to find again and again (like rubrics and such) so the extension lists links to recently viewed PDF files. https://github.com/alexweininger/recent-pdfs
React. It‘s valuable to know because it‘s not throw away knowledge, it‘s basically a JavaScript centric pattern. It‘s very simple to learn, the amount of knowledge you need to get going is a fraction of what you‘d need to know with more conventional frameworks like Angular, Vue, etc. It dwarves the others when it comes to [usage stats](http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core) and that applies to the job market as well. 
Is D3 something you would recommend learning for a new developer looking to get into the job market, or is it more of a niche framework to know? Thank you in advance!
Angular Ecosystem is fucking retarded. Changed versions every 6 months. This time last year I was learning angular 1.5 with components then had to switch to angular2 with typescript. Now idk what version they're on now. v4? lol, this guy just learned js+es6, so i suggest him to stick to frameworks that support that -&gt; angular needs typescript so if he wants to spend some more time learning type javascript then be my guest. Angular is dying, and it has generally lower pay than react. If you think angular is still a thing in 3-4 years, you're delusional
D3 does not belong on this list. D3 is a library that can be used with any JS project. It is very valuable to know how to use but it’s notoriously hard to actually master. Aside from that, if you’re looking to get a job ASAP, the answers are Angular or React. Vue is too new and it’s going to be a while before major companies take it seriously and commit resources to using it. Certain people in the front end community like to shit on Angular. Don’t listen to them. I would try to learn both Angular and React if you can. It will be a valuable learning experience to see the differences between them and begin to pick up on their pros and cons. Lots of large companies use both. PS Angular is the only actual framework on this list. Even React is just a library.
Sounds to me like a personal problem. Typescript is not hard to learn AT ALL. Pretty sure you haven’t even bothered trying. I know for a fact Angular will still be a thing. They have a long term roadmap. PS if you want to have a reasoned discussion and not sound like an absolute neckbeard douche, maybe ditch the holier than thou tone.
i disagree. I grew up with templates, and i think vue is much more easier to learn than react. That said, there are more career opportunities with REact
Ha, when I was writing this I was even thinking to myself "huh, are ALL of these libraries...?" When I should have asked if any of them even were. Thank you for the quick response, I appreciate the advice!
its easy to learn if you have OO experience, which, i mean, i grew up with java so it was easy to learn, but people with no OO experience will spend at least a week of everyday learning just to learn typescript. and that long term road map, whats it like? coming out with new major releases every 2 months? because it sure as hell felt that way from 1 to 2 to 4
They are “major” releases in the versioning sense only. They are incremental updates realistically. What’s the big deal? AngularJS &gt; Angular 2 was the only major earth shattering update. 2 is not that different from 4 which is not that different from 6. They’re functionally the same, just with improvements.
 npm install -g nodemon babel-node You should not do this, do this instead: yarn add --dev nodemon babel-node and then in package.json: "scripts": { "start": "nodemon --exec babel-node server.js" } And finally start with: yarn start As a rule of thumb you should not install per-project packages globally.
New selective polyfill behaviour sounds good, hopefully i can stop including these myself now
&gt; I prefer yarn for speed, but plain npm works as well. I was gonna say, it's preference - Everyone says yarn is faster, I can't see the difference in my computer!! I agree with having nodemon and babel-node as devDependecies, Since I have them installed globally (because I use them everytime) I forgot to account for others not having the same setup Thanks
This should be called setting up a basic node server
The yarn vs npm thing is definitely personal preference (especially with some of the recent npm speed increases), it feels somewhat strange to have a personal preference recommendation alongside something actually useful. 
&gt; Much of the code hosted there is transpired. Depends. When it comes to largely supported packages, chances are that it's minimized. But I was surprised to see that a lot of packages are actually distributing the plain source code (which is a great idea for security if you're thinking about making your package dependent on it).
It's mostly just that I wrote it from a yarn perspective - what I'm used to. I figured at the end I should tell those who wonder why yarn is in the examples instead of npm.
Yeah, people tend to not use .npmignore as designed. However, it would be naive to assume a linked GitHub repo or any source code in the npm package is actually what's been transpiled. This is very easy to spoof. For security, the only code you should audit is the one that is actually executed. If anything, source maps should be provided to help reading minimized/transpiled code. [Worth reading regarding the dependency hell that is the JavaScript ecosystem.](https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5)
Or even easier. Use [Backpack](https://github.com/jaredpalmer/backpack).
Yeah, that's true. I've already read this article but it's actually fairly interesting on how do we do security on the web. But you know, for most companies, security wasn't worth regressing performance until recently
I’m going to propose something a little bit off the wall here, but is nevertheless something I wish I had done earlier: roll your own framework. It may be naive and unfit for production use, but it will make you understand and appreciate any of the big frameworks out there today. It will help you understand what issues the framework is addressing for you, instead of blindly consuming a bunch of best practices and patterns (no matter how well intentioned) laid down by the community. Best practices are great, but don’t learn them by rote without understanding why they exist. 
If you don't already know. Learn some jQuery. It's easy to dismiss it nowadays, but 99% of the problems we face in frontend can be solved with a bit of jQuery. You can save larger libraries/frameworks for when you're making bigger systems with a lot of interaction. If you're making web pages for a client - something you should think about even before getting a formal job - don't bother starting a whole chain of new tech to solve old problems just to feel part of "the hip guys". Also, a lot of legacy sites and systems are still using jQuery. You'll see it being used one way or the other.
What, you can rate npm packages?
I see, if you choose framework you will make only [this dynamic block(RED)](https://puu.sh/zqkHG/7294844e34.png) handled by framework, right? All the rest(YELLOW) should be rendered on server and served as static blocks, correct? ---------- Also first page load for us is very important, currently our js per page page is ~40-60K. (not gzipped - actual minified file size). So that's why i am not very eager to bring on heavy frameworks.
Vue, React and Angular... I'm shocked! Shocked I say!
How can anything that includes Webpack and Babel be "minimal"?
The title doesn’t say anything about React. React is not Node. 
&gt; Kano OS is not fully i18n-aware and locales are not installed for end users, yet. You can translate this application, but as of now, users will still see the default English message strings.
Why am I using Array.from() in cases like these? Why not just map? console.log(Array.from([1, 2, 3], x =&gt; x + x)); // expected output: Array [2, 4, 6] console.log([1, 2, 3].map(function(m){ return m*2; })); // expected output: Array [2, 4, 6]
Based on what you can do with webpack and babel, that's the minimal setup (Even HTML isn't minimal if you never used it)
Agreed!
Why? Please explain.
That means it's not just as simple as changing a file, and that it is _most probably_ not something in the application itself but in the platform. Try to ask the Kano maintainers directly what you can do to help on i18n instead.
What's wrong with Angular? I'm pretty happy with it.
I put off using Prettier for the longest time because I could do a better job myself. However, I work in a team and many of my co-workers have their own opinions, or just don't care (mainly the latter). Prettier doesn't format our code to my taste but what it does do is avoid me having to explain, again, why indentation matters, spacing aids legibility, etc. And for that alone, I love it.
You'll eventually want to change visibility by toggling (adding /removing) a class.
Why do you need Webpack and Babel on backend? This. Makes. No. Sense.
Well weigh your priorities. Estimate how long it will take to write those components and how large they will be vs the extra size of the framework. Which one is truly more important right now. You can always reprioritize later. 
Why would you need to reload it?
I think he means stars on Github
Experimenting purpose, made a javascript function to load a random image trying to make the button reload javascript and reload a different image
+1. I'm a React dev, and I'm always displeased by the hate my fellow devs throw at Angular. It's a neat framework. 
Try it and find out!
“minimal” - this word. I do not think it means what you think it means. For a minimal node setup, why do you need Webpack? And why would you need Babel (node supports es6, even es8 if you use node 10)?
Correct. HTML would not be a “minimal node setup.”
As of now, it's not possible. You need to enter the passphrase in the input.
Two diffrent ways, Change style durrectly or change class: class: CSS: .hidden{display:none;} .notHidden{display:block;} JS: function functionName() { var button = document.getElementById("normalRead); if (easy.className === "hidden"){easy.className='notHidden'}else{easy.className='hidden'} } Style Durrecly: CSS: #normalRead{display:none;} JS: function functionName(){ var easy = document.getElementById("normalRead"); easy.style.display='block'; }
I didn't say "minimal node setup" I said "minimal Node environment with Webpack and Babel". You might be right but at least quote me correctly
It's not a minimal (node environment) with webpack and Babel. It's a minimal (node environment with webpack and babel). The goal is to have webpack and babel. This is a minimal way to get there.
Have you tried using the touchstart event instead of the click event? No clicks on mobile :)
If you made a JS function that loads a random image, Instead of reloading the whole script just re-run the function by calling it with a onClick?
Just finished making it today, well adapting it from my other project. [rilti-dom.js](https://github.com/SaulDoesCode/rilti-dom), a framework for all and none; it's basically html tags as functions but with superpowers. I tried to out do RE:DOM with this adaptation of rilti.js, this implementation is actually on par size wise (weighing in at 2.46KB gzipped) and offers some extra functionality like dom manipulation functions and currying...
Vue is very easy to learn and understand. I've never looked at React, so can't say how powerful they are compared to each other, but based one where you sounds like you are in the learning process, I'd be stunned if Vue couldn't handle everything you need for the foreseeable future. 
Check out parcel... You literally have to link your script to the html and it will bundle everything without any setup! It's waay better than webpack
As a front end engineer, I’ve been doing agency work for theee years (lots of different projects), almost all SPAs. I also interview/hire folks for the same. For a junior dev, I think this should be your focus: learn React and React only first. Build something small. You’ll quickly see that managing state internally throughout your components is tricky. Then try Redux. Really work with it until you understand how connect()ing a component works with state and dispatchers. Do this for a month or two. shifting Then try Vue. It’s gaining major popularity but Redux is still the elephant in the room. Given your learning trajectory, I’m betting that by the time you get to Vue you’ll be really happy you’re using it but even happier to have a little background with React and Redux. Note: this is just my opinion but if I saw a junior dev that could not only code decently in those technologies but be able to articulate the differences, I’d be inclined to hire them. It’s not as much about knowing the technologies since they change so often anyway, but about someone who understands enough that they can adapt. 
try everything. you may hate / disagree with one thing badly. you may 'love' another. 
ummm what? node supports es6 by default in newer versions.
Node.js already has [ES6 support](https://nodejs.org/en/docs/es6/) built in. I think it's better if the client and server are in separate repositories. Webpack, Babel, and React in the client repository. Express.js and whatever data layer you use in the server repository.
If we really need another article about this?
You should always explain things the standard way, and then, add your opinion
Webpack v4 works without any configurations like parcel. Check it out.
Is that really that important to you??? `~someString.indexOf("a")` is not very readable, especially since in most case you need to negate so it will be `!~someString.indexOf("a")` which is ugly as hell. What exactly do you gain by writing it that way?? Even if it was somehow more efficient, it's a microoptimsation better left to minifiers
Then...?
What you posted isn't even valid JS. You will need to at least provide the full code or at least fix up what you given.
I can send you a pic of my code but its basically like that
Yeah, what a waste of time
isn't it still in beta?
Hey man, IE/Edge is the "official" web browser of the Windows platform but you don't hear too many people saying we shouldn't use Chrome. :)
Only if you’re using jQuery do you need to specify Id or class
If you were talking to a newcomer, or writing support documentation or a guide for newbs, you wouldn't say "Open Chrome and go to Preferences", would you?
As someone who went from AngularJS --&gt; React --&gt; Vue, I can say that Vue is bar none the most productive and pleasant framework experience I've ever had, and the community behind it is awesome and super helpful. 
What value is time? Milliseconds? Seconds? Epoch time?
This is a script in AE and AE uses javascript and sorry ... but if not understandable to you, instead of fixing, do you mind making one? I just want to create a time code that appears at about 7 sec into the video, and still shows 00:00 at 7 sec and continue from there. So basically.. At 7 sec it should show 00:00 At 8 sec it should show 00:01 At 9 00:02... At 10 00:03... and on and on. Thanks
That's a start!
 - minimal - webpack - Babel Yeah that's not minimal
And... you're satisfied with that? It's fundamentally different than your original position which is "use this specific product and don't mention the other one"
It would take you a full day..
Thoughts on using supervisor
Best advice in this thread. I learned angular first. Big mistake. jQuery can be learned in a few hours. For the most part, frameworks just mess with your head. Their real benefit comes after you learn where jQuery is overcomplicating things.
Never used it so I can't really comment.
First of all you don't want to just add a 0. Instead you will want to use string slicing to add the zero. ('0' + number).slice(-2) What this will do is add a string 0 then output the last two digits of the string. So when you get to 10 you will have the string 010 that will get sliced back to 10, but 01 will get slicked back to still being 01. Secondly you do not want to use modulus for the minute. Modulus is appropriate for keeping track of the seconds, but minutes should use floored division. Assuming "time" is represented by seconds (I asked the question because if time is milliseconds this is all wrong) you might have something like this: var sec = 0; var min = 0; var curTime = time - 7; If(curTime &gt; 0) { sec = curTime % 60; min = Math.floor(curTime / 60); } output = ('0' + min).slice(-2) + ':' + ('0' + sec).slice(-2); This should stay 00:00 until the 8th second then count up just like normal. This only works through 1 hour. If you have more than 1 hour worth of video you need a bit more logic to handle it.
Ahh, determining the scopes is a little trickier with English. My bad. Your interpretation is reasonable.
Thanks a ton!! I will try when i get home. Uve just saved one persons life
Yes, it's possible. Is that your only question?
Precisely. jQuery can really help getting code that runs fine everywhere and it's simple to learn, focused on the smaller problems we solve everyday. Most of it was brought to the DOM API, but it's still a valuable tool, especially for a beginner
SSR is pretty much the only reason.
Hi /u/edgarsbarajas, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Parcel is a great replacement for Webpack. For some reason, many FE developers go into full defense when someone says that Webpack is a hard thing to use. Almost every FE project I've seen using it and when the project grows, build time increases exponentially. 
Thanks for letting me know! Where would I even begin to start a project like this? 
You haven't indicated whether or not you plan to do this yourself. If you do, then /r/LearnJavascript is a good resource. Otherwise, you obviously need to hire someone (which isn't allowed here).
&gt; much more easier You might be a very special learner.
Not sure how good it is. Add class to body having style img { display : none !important }
Would a class perform this task?
No, `this` value depends on the function, opening an object literal doesn't change it's value.
And also font-size: 150% (only if you have used em/rem as font units)
I don't believe you can comment or rate packages on npm, but if done right that could be a nice feature.
I was also thinking... inside the locales folder, where you can find the languages, there is also English, and I imagine that the main function calls it, so why not calling the Spanish one instead?
 const obj = { x: 'Test', get y() { return this.x; } }; 
They're all worth learning. The easiest is probably Vue. 
its a valid after effects expression. The last evaluated expression is what the engine will use for a property value. JS in after effects is very old and not standard. They've overloaded array operators, for example: [ 1, 1 ] + [ 2, 2 ] == [ 3, 3 ]
It's because your proxy is returning another object every time an undefined property is being accessed effectively creating an infinite loop. Unfortunately in this example you can't have your cake and eat it too. But perhaps you could compromise by adding a ``.toJSON`` method to your fancy object which just performs ``JSON.stringify`` on the original object. Happy coding friend!
This really isn't a javascript challenge, it's a "try to reverse engineer what someone did with some data then write it in javascript" challenge. /r/javascript isn't really the target audience for that kind of thing.
Just a weird afterthought, imagine c++ style polymorphism or go/rust trait interfaces on a proxied hashtable object like this where traits and/or overloads are defined for when it prints or when it's being compared causing no issues. Maybe with Web Assembly we'll be able to implement something like this.
Hi /u/scarlet_blonde, this isn't the proper place to post your problem. If you have a specific question about javascript, then you might try /r/LearnJavascript, but if you need help fixing your site, then it sounds like you need to hire someone to help (also not allowed here). Thanks for your understanding.
yea u rite that was a messup
 function test() { this.x = 'hi'; this.y = this.x; } console.log(new test().y); 
I agree, rolling your own is a very good idea for educational purposes. I heard that's how Evan You (of Vue.js) got started. :)
Did you need help figuring out how to generate the list, or just how to search it? How much Javascript experience do you have? You could throw something together using [jQuery](https://jquery.com) pretty easily. If you're looking for a premade solution, maybe [List.js](http://listjs.com/) would be useful.
post version 2? weird templating language, too much API surface to learn, breaking versions coming every x months, slowly losing developer mind share which will result in it being totally forgotten in 5-10 years.
I will probably start with a hashmap or something like that I make myself. I have no Javascript knowledge at all. Only HTML, Ruby and Clojure. If List.js can handle hashmaps, I'd be golden for now. Otherwise I'll need to hack around a little to get the link name and actual link together. The only deficit would be that the hashmap would sit inside the sourcecode, but that's easy to fix with a JSON file or something like that I think. Another issue would be that with a hashmap you can only bind 2 things together, so I wouldn't be able to add link descriptions in the future, I'll need a database for that, right?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [invisible-college/statebus/.../**statebus.js#L1435** (v6 → 565e7f6)](https://github.com/invisible-college/statebus/blob/565e7f6044784abc5315bebf0c033a7f376d78c0/statebus.js#L1435) * [invisible-college/statebus/.../**statebus.js#L1327** (v6 → 565e7f6)](https://github.com/invisible-college/statebus/blob/565e7f6044784abc5315bebf0c033a7f376d78c0/statebus.js#L1327) ---- 
I'm working on this for you... found a fuzzy logic library called fuse...
&gt; I will probably start with a hashmap or something like that I make myself. I have no Javascript knowledge at all. Only HTML, Ruby and Clojure. &gt; &gt; &gt; &gt; If List.js can handle hashmaps, I'd be golden for now. Otherwise I'll need to hack around a little to get the link name and actual link together. The only deficit would be that the hashmap would sit inside the sourcecode, but that's easy to fix with a JSON file or something like that I think. &gt; &gt; &gt; &gt; Another issue would be that with a hashmap you can only bind 2 things together, so I wouldn't be able to add link descriptions in the future, I'll need a database for that, right? Oh wow. That seems like a very easy to use and customize.
Named exports are already supported with the `--experimental-flag`, however, you *have* to have an additional default export.
Oooh nice! So small as well! I'll have fun hacking on this :) I suppose I can now just put the content in three files and serve it up, right?
What about fuse box. It takes the other approach. Point to your js or ts file and let it go
&gt; templating language Have you seen JSX? &gt; too much API surface to learn Not really most of the time I write ES6/TypeScript not related to Angular. &gt; breaking versions coming every x months Semantic Vesioning can have breaking changes. But since Angular 2 was released there weren't much breaking changes. &gt; slowly losing developer mind share which will result in it being totally forgotten in 5-10 years. Actually no. All three Vue, Angular and React are gaining popularity. React just gains a bit more than the other two. 
Not sure what you mean by link descriptions... Here's an example I managed to put together using List.js: https://jsfiddle.net/vs4fd7zL/
Yeah... index.html and link it to style and script. Given a folder structure of: root |__ index.html |__style.css |__main.js You would do your index.html like this: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;link rel="stylesheet" href="style.css"&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="link-search-app"&gt; &lt;div&gt; &lt;label&gt;search term: &lt;/label&gt; &lt;input type="text"&gt; &lt;/div&gt; &lt;div&gt; &lt;ul class="links"&gt;&lt;/ul&gt; &lt;/div&gt; &lt;div class="query container"&gt; &lt;p&gt;Search Google for &lt;span class="term"&gt;&lt;/span&gt;?&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/fuse.js/3.0.4/fuse.min.js"&gt;&lt;/script&gt; &lt;script src="main.js"&gt;&lt;/script&gt; &lt;/html&gt;
I meant something like this: https://jsfiddle.net/vs4fd7zL/11/
Right... I just wasn't sure if you meant something that should appear next to the link or when hovering over it. Having it next to the link is pretty simple: https://jsfiddle.net/vs4fd7zL/14/
I'm not sure in what way I want to display the description. I think this way will do. This way also makes it really easy to extend it so I'm very happy with this. Thank you very much. I really love both of you guys' solutions!
Hey Quintanius. These are all great frameworks, depending on the environment (the product) your are trying to build one or the other will shine over the others. For example, if you are working with a small team of frontenders on a small project with no time to learn a framework, I dare to say you could get started with React within a few hours and so would your colleagues. If the project is medium sized, you have some time to do some good research or will have some designers involved (that can help on writing and editing HTML), Vue fits perfectly. If you have a big project which will be around for a very long time, even perhaps after you are gone, have a big team of developers, and can afford to spend a lot of time reading documentation (which is not necessarily boring, just time consuming), Angular is the choice. My best advice to someone just getting started? Pick 3 small projects, as dumb as possible. E.g. a soundboard, a timer or a notes app, and use a different framework for each project. After finishing you'll have a pretty good sense of where each framework really shines and really lacks over the rest. Much success and fun in your development adventures!
I have just 2 more questions if you don't mind: *How could I host this? Currently there is no script being added in your fiddle, so I'm wondering what I'll need to do. *Would you have any idea on how to be able to press enter to launch the link you've searched?
Something like this should work; $("body").on('click', '.link', function(e){ e.preventDefault(); // This stops the page from attempting to load the new link using it's normal methods var elem = $(e); // We assign the element to a variable to optimization reasons var pageLink = elem.attr('data-page-link'); // We also obtain the contents of the 'data-page-link' attribute $.post( "pageLink") .done(function( data ) { $('.pageContent').html(data); }); }) You'll need to add the `link` class to every link you want to use this method with, and have a container with a class `pageContent`. On each link, you'll also want to have an attribute called `data-page-link` which contains the URL you wish to load - e.g. `&lt;a href="#" data-page-link="./myPage1" class="link"&gt;MyPage1&lt;/a&gt;`. This will generally only work with web pages on your local site due to security measures on other sites, known as CORS. Please be careful though; This method can be exploited if you have scripts on the pages you're loading. It's not a recommended method by any means, but it will do the job. A better option would be to learn a framework like Angular, but if that's not quite where your learning is yet, then the above would suffice.
Re: hosting, that's a whole separate issue... are you saying you're not sure where your website will be hosted? Github Pages can be useful if you want to get a static site up for free and don't need a server. With regard to the enter key, what about hitting Tab to select the link and then hitting enter to navigate? You should already have that functionality... try it here: https://jsfiddle.net/vs4fd7zL/25/ or are you saying you want Enter to navigate as long as there's only a single result available?
I don't get it...
Just opening it in the current for now. I know how to edit it if I need to.
Ah sorry, hope I didn't come across as condescending! Was just confused by the question. But yes, you can use [cdnjs](https://cdnjs.com) to avoid having to download and host the List.js library yourself. Very useful service. Re: pressing enter to open the topmost result, this fiddle is a solution using jQuery to simplify event binding: https://jsfiddle.net/vs4fd7zL/33/ It uses window.open only because jsfiddle was bugging out when I tried to use `window.location = url` (probably has to do with how it parses/executes JS).
yep it has a pretty great fanbase ahaha 
/r/therestofthefuckingowl
Dont pass strings or any other thing than Error object to the `reject`. It is the same as you `throw 'foo bar err';` which is bullshit style :)
What kind of interaction do you want the player to have with the div?
Even you can do it :)
If you don't mind being slightly verbose, and also don't want getter functions, you can also use a IIFE. ``` const obj = (() =&gt; { const _obj = {x: 'Test'} _obj.y = _obj.x return _obj })() ```
Because you're not setting up a node environment. You're setting up a webdev environment. 
I don't agree but cool
Thank you so much for the thorough response!
That sounds pretty scary but I might just give it a shot! Thanks!
Thank you for the thorough input!
That's kinda mesmersising
Nah I was just making a pun about his name lol.
Can you elaborate?
To start with, use a good linter, such as ESLint + Airbnb config.
Thanks!
Syntaticical errors never reach a PR due to testing and longing catches the majority of formatting errors. So most of the time we talk about: the best place to put certain pieces of code, performance implications, reusability, spelling errors in test descriptions, and larger architectural discussions.
Hey, thanks for pointing this out. I just read about this in the MDN doc. I do have a doubt though. Is it absolutely necessary that I should only pass something like `new Error("error message")` or can I also pass any object that I create? (I'm asking this because I want to be able to pass something like { status: "failed", message: "some error message" }). I'll try to read up more on this but any help in the meanwhile will be much helpful. Thanks :)
You're correct. In the first iteration, I wrote this thing as a jQuery plugin. So in it, you called it on a node like so: `$('#elem').psst()` and it took care of the event handling. It's probably simple to just pass the node as a parameter in the function now ... I'll look into this as well. Thanks. &gt; npm Oh man. Never put things up on npm but will definitely see this.
OP are you posting pirated material? There's a difference between "free" and "stolen"
I transitioned almost all my promise chains to async/await and am very happy with the result. Learned some cool things! const [value1, value2] = await Promise.all(foo(), bar()); The above starts both functions at the same time. while it would he awesome for this to work the same const [value1, value2] = [await foo(), await bar()]; That version is synchronous and foo will have to return before bar is executed. Anyways i thought that was pretty cool and my overall code is much more readable with async/await. 
Oh, I'm not familiar with Flash. Can you explain this a bit?
Technically you can throw just about anything in JS, it doesn’t even have to be an error!
Nice write up on the topic that might be helpful - http://clubmate.fi/self-referencing-object-literal-in-javascript/
Is this really JS? If so, then assuming nothing tries to access it before it becomes set for real, just don't assign it a value before then. Or if you must declare it up front, set it to `null` and then reassign it to `true` or `false` later.
You should look in to extending the default `Error` object. class PsstError extends Error { constructor(msg = 'Uknown', meta = {}) { super('PsstError: ' + msg); if (Error.captureStackTrace) { Error.captureStackTrace(this, PsstError); } // Custom Psst debugging for(var k in meta){ this[k] = meta[k] } } } then you can pass additional info you'd like to send in the second parameter. try{ // something that fails } catch(e) { throw new PsstError('This filetype is not allowed.', {original: e}) }
For some weird reason Babel looses the this context when passing this.onResolve into the executionFunction. I'm not sure if this is intended for a good reason since it inevitably means you need to add the bind calls, but in any case, there's an [experimental ES feature that Babel supports, where you just define your class method as an arrow function and it binds the this context for you.](https://babeljs.io/docs/plugins/transform-class-properties/)
&gt;I'm assuming that it's in a cookie. Did you actually see that it's in a cookie? It doesn't make a whole lot of sense to store general-purpose data like that in a cookie; cookies are for authentication (sent with every page request to the server), not for storage.
Yes, I think you might be right about it. I jumped right into sagas for work, without fully knowing how thunk works. But I think you made a fair assessment :)
That's weird.
This is not a 9/11 issue, it seems to have something to do with Chrome. Any other "new Date('m/dd')" results in year 2001 as well in Chrome. https://stackoverflow.com/questions/40504116/default-year-in-date-if-datestring-does-not-have-year-part
No. But I don't know where else it would store the information. If you clear the browser cache, you loose the teams you made.
Seems like it defaults to year 2001 for any two numbers: &gt; (new Date("1/1")).toString() 'Mon Jan 01 2001 00:00:00 GMT-0800 (PST)' &gt; (new Date("12/31")).toString() 'Mon Dec 31 2001 00:00:00 GMT-0800 (PST)' 
Did you look in Local Storage?
Oh, so it's possible to just store the data in the cache? 
ahhh localstorage... As I said, complete idiot. 
It's only use would be cryptocurrency. Proof of work requires a token to make the game theory work. It's has very little use out of that context
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this
I use Ramda in my project. Its function `path` safely extracts nested props, so if some of them is missing, it just returns undefined instead of throwing error. ``` const thing = R.path(['prop', 'arr', 0], obj); ```
Hi /u/MALON, For javascript help, please visit /r/LearnJavascript. Thank you!
this is just the context, it is where it is being called from. it is like the scope of function. js allows you to override this value manually if you so wish.
Thanks for the clarification.
First thing I checked. I'm asking for a simpler explanation. Hence the eli5
It's just there to ensure that the onReject and onResolve cannot be called in any other context than the correct one. It's not strictly necessary to do this, and it doesn't quite do enough IMO if you're trying to cover all weird cases. I'd probably do something like this to prevent someone overwriting these functions, as well as ensuring the correct context. Object.defineProperties(this, { onResolve : {value: this.onResolve.bind(this)}, onReject : {value: this.onReject.bind(this)} }); 
&gt; Think of it as an object specific to the place it was defined. This is not accurate. That's true of more conventional OO languages like PHP, Java, or .Net, but it is not true of JavaScript. `this` in JavaScript is specific to the place it was *called*, not *defined*.
I personally don't use _this_ either exept for in classes because I haven't really had a reason to use it 
http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/ maybe this is confusing for five years olds
Making some pub for another great [subreddit](https://www.reddit.com/r/eli5_programming/comments/784prf/this_keyword_in_javascript) but your question has been asked there and you should find some complementary responses. 
&gt; You can’t even call ‘this’ If `this` is a function you can call it. Unless you mean something else? const f = function () { return this() } const g = () =&gt; true f.bind(g)() // true
...but...but TypeScript doesn’t just let you check if a result is of a certain interface, it lets you enforce it statically. What have I missed?
&gt; Inside a function keyword a new context is created, so ‘this’ will reference the function itself. I think you're wrong in this one. **this** inside a first level function will reference the *window* object.
Nope. `function` always creates a new `this`
one of them is the ability to use a `toLowerCase()` method
That's some gnarly code
Not OP, but IMO the fact that `this` refers to the calling context rather than where it "lives" makes it a major foot gun. It's super easy to inadvertently assign a function that contains a reference to `this` to some other function, or call it from within a different context (such as `setInterval` or something else) and then get `undefined` for whatever `this` was referring to. You have to explicitly do shit like `var myFunc = myObj.myFunc.bind(myObj)` to ensure the function retains the context you want it to have. Very, very, very rarely have I ever needed to deliberately change the context of something by `bind`ing a different object. I feel the *default* case should have been to make `this` refer to the context it was defined in, but still provide a way to override it with `bind/call/apply` in the rare cases you need to. I don't avoid `this` as much as I used to now that I know the rules concerning it's behavior, but I also prefer using simple closure to do what I need to instead: var personFactory = function (name) { return { sayName: function () { console.log(name); } } } var person1 = personFactory('Joe'); var sayName = person1.sayName; person1.sayName(); // Joe sayName(); // Joe setTimeout(sayName, 1000); // Joe setTimeout(person1.sayName, 1000); // Joe Closure not only provides actual privacy, it avoids `this` wonkiness altogether. The downside is that there is a bit of a performance cost to this approach since you're creating brand new `sayName` functions each with their own closures for every person you create. This eats more memory than defining a constructor / prototype function. 
"this" is a keyword that represents the current scope you're coding within. In the global scope this refers to window, under the scope of an object between the {} this will refer to the object. You can't redefine this but you can pass a shortcut or bind this. You can have an object and pass the keyword as a variable and deal with that scope in a different scope.
You would use `new` to call a class function, which creates a new `this`
JSONPs insecurity stems mainly from the fact that it circumvents CORS-protection. If you trust the service you can probably live with that. There are also some measures to ascertain some sort of security/verification. But i would still recommend server-side api calls combined with something like ajax to propagate api-call results to the frontend. The pre-flight options are always requested before http calls to ensure the CORS Settings if you ask for resources on other domains. You don't change the settings via this call and don't register a new allowed origin. The origin is always a domain not a browser. Your browser will add a referrer to the request header and this will be checked against the allowed origins on the target server.
&gt; That’s not right. You can’t even call this, you reference it Ok mate, you know what I meant. I'll be more verbose: "It's the place where the thing that references it was called from." Happy? &gt; It’s captured/created and set when the function is defined. This is simply not true. I don't know why you think it is, but it's not. var makeJoe = function () { return { name: 'Joe', sayName: function () { console.log(this.name); } } } var joe = makeJoe(); window.setTimeout(joe.sayName); // undefined As you can see, the fact that `name` was "captured" or "defined" in the function that created Joe is 100% irrelevant because `this` does not refer to that object when `sayName` is called inside of a different context. 
thanks !
Yep. I just clicked it myself and noticed the browser version. Don't use that. They have warnings and reasons why you shouldn't use it on that page.
Let's say you're in a classroom. The classroom is this. If you're in the school, then this is the school. So how can the classroom and the school both be this? Scope. In the larger scope, the parent scope, everything in the school is a child of "this" (the school's context). Each classroom (a function) has it's own scope. It has no idea what's going on in the school or other classrooms; it only knows what it's fed from the outside (dependency injection in OOP). To make the context of the school available to the classroom, you pass it in. The school already knows about the classroom because it is a child of the parent. There are nuances unmentioned, but this is ELI5 of this/scope/context.
But if he learned CSS he could use text-transform with the added benefit of being able to add padding to his blog.
If you put it that way yeah.
Have a look [here](https://dev.to/kayis/dynamic-imports-with-webpack-2)
In one sentence, this is the global object (usually window) unless you are within the method of an object, because there it refers to that object. Try it on the console and work from there. Log this from inside a function. Now put that function inside an object.
tried the demo in firefox (v59) and handles don't move with the mouse. in chrome it works correctly...
`this` is like saying *"where I started"* or *"the thing that called me"*. It's true for native functions and for your own. Taking an example from the conversation: var hello = function() { return 'hello, ' + this.name; } var person1 = { name: 'fred', greet: hello }; If we run `person1.greet()`, it will check for `this`. *The thing that called greet* is `person1`. Prototypes and even the native functions use this concept, too. 'My interesting string'.split(' '); This uses `String.prototype.split()` which says "split up the thing that called me".
You can actually do quite a few things already with AssemblyScript (disclosure: I'm its author). Here's a GameBoy emulator: https://github.com/torch2424/wasmBoy Or if you like it rather fancy, here's the TLSF memory allocator specifically tailored for WASM: https://github.com/AssemblyScript/assemblyscript/blob/master/std/assembly/allocator/tlsf.ts It's also one of the languages you can try out in https://webassembly.studio
Showed *this* answer to my 5 year old and think she may be retarded. 
Really one of those things you just need to read 5 different explanations before you start seeing the light... Yours was really clear and insightful, thank you!
You use strings and parseBool the string?
I've noticed the same. Build time of 60-90 seconds for the front-end wasn't uncommon. It's pretty outrageous tbh. 
Welcome
&gt; the amount of knowledge you need to get going is a fraction of what you would need to know with more conventional frameworks like Angular, Vue I don't think you've actually used Vue? If anything, it's significantly less complex than React. 
You can think *this* as a way to access the scope. If its is on a class, *this* is the scope of class, if it was in a function, *this* is the scope of the function.
thank you dwighthouse
`this` can't be possible to explain to 5 years old.
As someone who programmed with JS for more than a decade and have an actual 5 year old here, it's fucking impossible. You would first have to teach him functions, objects, closures, all the background info, etc. **This** is not a simple concept in JS. Especially with the modern changes with **let** and **var** behaving differently with **this**.
What’s the point of web assembly exactly? 
i'm a js noob myself and i am learning Vuejs. the way i understood `this` might be oversimplified but so far i havent run into bugs because of it so let me try my hand at ELI5. 1. first off, dont think about the arrow functions. understanding `this` pre-ES6 is sort of important. `this` is a simple way to reference the context it's called in. in abt 90% of the cases, it's a function or class. (you'll probably hear the word `instance`). ``` function whatever(arg1, arg2) { this.option1 = arg1; this.option2 = arg2; this.option3 = arg1 - arg2; function child() { this.option3 = arg1 + arg2; } } ``` The first three `this`s reference the `whatever()` function. The fourth `this` references the `child()` function. 2. let's now get to ES6 arrow function. ``` function something() { const someVar; var whatever = (arg1, arg2) =&gt; { this.option1 = arg1; } } ``` There's a `this` in this function too. But unlike the previous example, this `this` does not reference the `whatever()` function. Instead, it references the `something()` function. That's the problem with arrow functions. One way I learnt to get around this confusion was to do this: ``` function something() { var instance = this; const someVar; var whatever = (arg1, arg2) =&gt; { instance.option1 = arg1; } } ``` By doing `var instance = this`, I avoid confusing my primitive js mind because I always use `instance` when I want to reference a value belonging to the main function.
It is a compiler target for other languages than JavaScript to run in the browser, like C/C++, for example because it eliminates parsing overhead that comes from compiling native code to JavaScript (see asm.js to get an impression on how this looked). It's somewhat similar to Java applets, Flash, ActiveX, PnaCL, but properly sandboxed and being standardized (it actually works in all major browsers today). In general, because WebAssembly code is statically typed, it also has advantages over JavaScript where performance is a concern, because a JavaScript VM has to deal with varying types of variables for example, while WebAssembly has not because it is compiled ahead-of-time. It also provides low-level instructions that map to processor instructions, for example to do math or bit fiddling, or to work with 64-bit integers which JavaScript doesn't support. In its current state, WebAssembly is still missing a few key parts and optimizations (for interoperability between JS and WASM), but these are being worked on. There are proposals for exposing the host's garbage collector, for example, host object bindings, threads, simd, bulk-memory intrinsics and so on.
You're 5. Go play outside with the other kids.
Well, and AssemblyScript or any other TypeScript-to-WebAssembly-compiler, let's you, erm, use TypeScript syntax (yay!) to benefit from where WebAssembly excells - instead of having to learn something else, or to install gigabytes of compiler toolchains.
There is no ELI5. This in Javascript is a tricky concept with a set of rules you must know to completely understand it. It is not scope nor calling context as some here have posted, it is execution context aka the context in which a function is executed and there are many ways to manipulate the execution context. The best thing I can do is give you this (gentle explanation of this in javscript)[https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/]
You are losing the type safety of Typescript once the code is compiled to Javascript. And in runtime or test context, you have no access to Typescript definitions. This library helps mostly in test context to still access object's description and match against it. Let me know if that is still unclear.
Okay, so let's say you have a house with a bedroom and a kitchen. When your mom and you are both in the same room and she says "clean up this room!" you know which one she means. When your mom and you are in different rooms and she says "clean up this room!" you know that she means the room she's in now, that's her context. Now, let's say your mom writes you a letter and leaves it on the kitchen table. You go to the bedroom and then you open it, and it says "clean up this room!". Well, you know it's the kitchen, because that's where the letter was when you found it! Okay, now let's say your mom leaves you a package on the kitchen table, and you take it to the bedroom and open it, and inside there's a model version of the kitchen, and there's a letter that says, "clean up this room!". Well, you know you're trying to clean up that model of the kitchen, not the real kitchen. In addition to all this, to clean up the rooms you need a broom, and the broom is in the broom closet. You definitely have access to the broom to clean, even though the broom wasn't in the kitchen in the first place! That's because cleaning up a room exists within the context of the house, so you have all the tools of the house to work with. How's that?
Fusebox 
Window
You can find this an another challenges/puzzles like this in the following book. http://tcorral.github.io/javascript-challenges-book/
Depends. Are you using an arrow function?
I am starting to follow Crockford's advice on this as well. It just removes a whole layer of cognitive baggage when I can stop dealing with `this`.
strictly speaking, he's `undefined`
What "this" points to depends on how the function containing this (from here on out, the parent function) was called. It's basically the same idea as dynamic scope, if you're familiar, or you want to look that up. 1. Default: this will refer to the global object. 2. Implicit: this will refer to the object that contains the parent function. 3. Explicit: this will refer to any object you want it to. Using the functions bind, apply and call, javascript lets you chose what this refers to. Libraries like jQuery do this a lot. Assume any library like jquery uses explicit binding on this basically all the time. 4. New: If you use the new keyword, this will refer to the function object, or the prototype of the object that the function returns. If multiple conditions above apply, the items further down the list will be the rule that applies.
A simple way of viewing he concept of scoping is if you imagine you are standing in a room. If you’re just standing there, and say “what is this?” you are likely talking about the room itself in which you stand. The room itself may be square or circular, have a certain set of measurements on its sides,. (Properties) There are things to do in this room, like walk around or sit down (methods). There might be things which are possibly even more complicated, but still exist in the room, such as the TV or the remote control. (Objects referenced as a property of the room) If you pick up the remote control and say “what is this?” then “this” changes to what you are holding. It has its own set of methods, properties, and possibly even its own complex object, such as an array of batteries or buttons. If you press the on button (function turnOn()) then the scope of this is inherently the object which contains the method, in this case the remote control. Hope this helps!
The funny thing is, I strongly felt this way already. Then when I started mentioning it in comments, other people told me Crockford says so too.
isn't it supposed to be &gt; var nameSayer = person1.sayName; (no parens) 
JavaScript that warns about JavaScript..
The idea comes from a test, where I tested an API response and I wanted to assert that the data is array of interfaces DBInstance. I wanted to reuse DBInstance definition instead of repeating all over it in my test case. expect(data).is('DBInstance[]') against: expect(data[0].id).toBeTruthy() expect(data[0].text).toBeTruthy() and so on 
A more useful method is to continue to improve the browser’s security model. No one, developers or users, want to return to a web without JavaScript because having interactive web pages turns out to be incredibly useful.
Yes.
Well one obvious way to manipulate object.method() would be using .call on the method. var example = { method : function(){ console.log(this) } } example.method(); example.method.call("that") gives: { method: [Function: method] } [String: 'that'] 
outstandingly great explanation!
When we write code each bit of code is a person, _this_ belongs to a person. Sometimes, when code is given to the big person who owns the place, (the _window) it can be tricky to remember.
Tags in cpp file are scaring the hell out of me. And I like it
&gt;Current calling context. I don't see what's not so simple about **this** sentence.
So I never do something like this manually because I don't know how to do SSR Server Side Rendering so I end up using NextJS which handles SSR for you. Do you have an example of how to write this SSR bit in node? ps can't seem to comment on the article, when i post the comment it thinks im a bot.
My mind boggled at first, too. But I think the idea is that if a user is on your site and has Javascript enabled, it warns them about it. The site would still be otherwise Javascript-free. 
**For a 5 year old**... Easy as 1, 2, 3! `this` can be 3 things. ... `this` can be the Window object/global context. this === Window // true `this` can be an object on which a method is called obj.sayHey() // console logging this in sayHey means this is obj `this` can be explicitly defined with `bind()` const func = function() { console.log(this); } const boundFunc = func.bind({ msg: 'hello' }); boundFunc() // { msg: 'hello' }
Would type script have some advantage over javascript when compiling into webAssembly ? Because of types? a la Dart it can do some optimisations from types and possibly run faster ?
Yes.
&gt; "WARNING! Your are using JavaScript! WARNING!"
This is terrible. &gt; JavaScript is the biggest threat to the security and privacy of users. False, the internet is the biggthreat to the security and privacy of users. Users can be tracked and otherwise abused with no js at all. Malicious css can be used for cross site scripting, browser manufacturers can track anything, while your ISP and various government agencies can track most everything else you do online. Auto downloads of malicious executables can be done without JS. The cherry on top is that this library could have been written as two lines of js code, with a few extra bits of css, but is somehow over 90 lines long.
This is a new version of a previous module proposal I have posted here, taskq. It now supports dynamic loading of scripts and the ability to pause/resume entire thread. There are several things you cannot do out of the box using other module patterns or ES6 import/export syntax. Directly from the github: - 0 dependencies - No polyfill required - No transpiling required. - No config file etc. - About 6kB when minimized - Will work on ie9+. - Will play nice with other technologies/patterns you use in your page - Non-render blocking - You can pause/resume the main thread - Aware of document state (hidden, minimized etc.) - Fine grained control on execution of all imported scripts. - Uses Promises combined with requestAnimationFrame(rAF). Falls back to rAF on older browsers (ie etc). - Supports nested/single dynamic imports. Your main thread will wait until a module finishes dynamically importing other modules. - Supports *then* , *catch* phrases for dynamic imports. - Uses async script tags - Does not dictate anything about your app structure. Whether you want use separate async script tags, or bundle them. - No modifying required to your existing scripts other than wrapping them around iief (immediately invoked function expression) and *pushing* them to the taskq object.
Here is a solution I have that does require 0 transpiling and no entry script: https://github.com/IbrahimTanyalcin/taskq
Cool idea. I can’t think of a use for it yet in my projects, but I’m glad to know someone’s made utilizing it simple.
That's a very nice in-depth explanation, but definitely not ELI5. ELI5 would be: All functions in JS are methods on objects, called liked this: `myObject.myFunction()`. `this` is the object before the `.` when you're in `myFunction` (in this case, it's `myObject`). Special case 1: if you call a "naked" function (in the global context), `this` is simply the global object (because `myGlobalFunction` === `window.myGlobalFunction`) Special case 2: If you don't like that rule, you can always `bind` a function, to explicitely set its `this` once and for all. Special case 3: If you don't like that rule, you can `apply` or `call` a function, to explicitely set its `this` just this one time.
Simply put, “this” is where you are. If you’re in your bedroom and you say, “this ceiling is high”, anyone would know which ceiling you’re talking about. The same applies to code. If I type “this.x” I’m talking about the x property of the place I currently am. The “place” could be a function or an object. 
There's a bit more going on behind the scenes. [Check out this article](https://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1) that explains the difference (and IMO why you shouldn't use them).
I believe the question should be whether running WebAssembly has some advantage over running JavaScript? AssemblyScript, for example, can compile 1:1 to WebAssembly instructions (see: https://github.com/AssemblyScript/assemblyscript/wiki/WebAssembly-to-TypeScript-Cheat-Sheet), and since WebAssemlby forces strict type usage, there is no penalty like for super dynamic types. Under the hood, AssemblyScript uses Binaryen to optimize WebAssembly. That's basically the same thing Emscripten uses to optimize C/C++ compilations. In general there are cases where it is expected that WebAssembly programs run faster. But today's JavaScript VMs are actually quite fast as well, so not all programs will benefit from it the same. Ideal candidates at this point in time are games or crypto for example, i.e., everything doing something compute-heavy where every CPU instruction counts.
Though a year old the article is still accurate. Here is an up to date rundown https://nodejs.org/api/esm.html. I think custom loaders is really the main thing the article is missing.
I came here fully prepared to be like, yeah, of course it's possible! Just look at Adobe Animate \*cough\* Flash \*cough\*! So I guess the question is, can it be done _for free_ ...? That's a question I'm not fully prepared to answer since I've been indoctrinated into the Adobe ecosystem. But, that said, Animate uses an open source framework called [CreateJS](https://github.com/CreateJS). That probably doesn't help much by itself, but I'm wondering if there has been any other tooling built around it. I also feel like every couple of years I get the bright idea to create my own simple HTML-based animation app and every time something comes up that prevents me from going through with it... so I feel like there's gotta be something like that out there already.
Scope is the accessibility of a variable, scope is a different concept than execution context of a function.
&gt; If you can't explain it simply, you don't really understand it. That's bullshit. There are many topics in science that are complex, and can't be explained in terms of a 5-year old view context. Yes, you can say some words on the topic that the 5 year old will understand, but it will not be an explanation. You're welcome and try to explain **this** in JS, if you want to prove me wrong.
Nah, he’s window, but `window.getsIt` is undefined.
As far as doing animations and using all sorts of paths and animating everything I made a library called anim8js http://github.com/anim8js. I've made a few things I call "Movies" like you've described. Checkout the anim8.Movie object! Not only does it let you set subjects to animate or transition at certain times - but you can jump into the movie at any point in time, and play at any direction and speed. As far as realistic movements go, I have 18 different "paths" you can use. Please check it out! I am using this in production environments for some large clients (Discovery Education, Nat Geo, Tiger Woods Foundation, The Navy) - so it definitely has been heavily used!
Great article btw. I agree it's bad, but I don't really like any other solution. I'd say this is a major problem in the design of Javascript, so both solutions are band-aiding a design problem that shouldn't be there in the first place. I'm not a big fan of adding decorators into JS, which the article alludes to, but let's at least discuss the issue of the fundamental problem instead of the myriad of ways to fix it. Hopefully, /u/bluehabit gets something out of that. I'm going to put my design hat on and take off my engineering hat. We have almost 20 years of [operant conditioning](https://en.wikipedia.org/wiki/Operant_conditioning) in programming that says a defined class method should always reference this, but this contexts are lost when rebinding a function in JS. To me this is bad design. It's like a soda machine with a button that labels Dr. Pepper, and you push it and Mike Pepper, an Orthopedic Surgeon appears behind you and taps you on the shoulder.
Not really? Do you only write 1-character variable names? You could also skip`const`/`let`/`var` completely and just have globals everywhere. Much less typing, and you don’t even need to pass around arguments!
LOL you have just typed 334 characters to complain about typing the odd two characters here and there
First 'feature' is "All devices", further down lists support for only 10(+) devices.
Yes, it's annoying. I wish it were 3 characters, and it does bother me that its longer. But at the same time, I'm using it because it does better convey the intended usage of the variable (wrt reassignment, not immutability). Its subtle, but it does help.
Definitely interesting, movie object seems close to what I had in mind, thank you for suggestion. Nevertheless, for various reasons it probably won't do for me (short on time to look through it and I *need* something *very* simple, because I want to measure reflex in miliseconds as accurate as possible). Great job anyway, I will bookmark this for future!
The base time unit is milliseconds, and it will convert any unit into milliseconds automatically.
Thank you for reminding me about createJS, I forgot to return to it and read what it can do. Unfortunately, I don't think it will do, in my case. I need something *very* simple, as much as possible. Since I want to measure reflex in milliseconds, every bigger framework that I cannot fully control what is doing "in background" seems too risky to me. I think I will stick to the idea of creating an animation outside of HTML5 (Wick editor is my last chance I think, but really all freewares are so annoying to use :P) and just use the JS logic in a background to control *play pause stop* of my animation during the reflex tests. Not sure yet how much resources it takes to play a simple GIF/mp4 animation in &lt;video&gt; takes, though. It might be more problematic than complicated frameworks, after all. But for now it seems like the easiest/quickest way of doing that. Anyway, I'm heavily dissapointed in canvas animations :d Thank you for your answer!
Fair point. I'm not super into language design (yet - I find it very interesting), but I agree, it's confusing. Sometimes I wonder what JavaScript could have looked like if it wasn't for all the backwards-compatibility. :)
Exhausting lol
I'm sorry, I meant how much impact on the time itself does the code have? Since I'm not sure how exactly the things are animated in the background, I can't tell right away if it can significantly slow the application? What do I mean is: .... wait... I'm wrong! Whatever it does, it cannot (I think) interrupt my own logic in any way, since when the QTE moment happens, the animation ought to stop anyway! Therefore it might be a good idea to use your library. One question though, I cannot find (it's probably there but I'm blind?) a documentation on what kind of movements the movie object can get? In examples you use `.transition( '1s &gt;500 &lt;100 /0', 'pathLeftAndRight x3 linear-yoyo' )` for example, I can't find (quickly) the information about possible transitions? :)
I guess the issue here is that the OP asking this, probably has already read those three words everywhere around the web in search for a simple explanation. As a result everyone here is trying to come up with a short explanation for the complete usage but even at their shortest, they're pretty long and go over the assumed understanding of a 5 year-old (as in no understanding of javascript in depth).
The sate of javascript: A web designer asking a javascript question explained in high detail by a PHP dev.
There’s a ton of great responses in here and I didn’t have time to read all of them, so apologies if this has already been mentioned: https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes This really helped solidify the concept for me. Definitely not written for a 5yo, but might help you as well!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/You-Dont-Know-JS/.../**this%20%26%20object%20prototypes** (master → 6f51ed6)](https://github.com/getify/You-Dont-Know-JS/tree/6f51ed6746300f51bc6c930c080b8a7426b7629b/this%20%26%20object%20prototypes) ---- 
My condolences
That used to be my tumblr name
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [anim8js/anim8js/.../**transition.js** (master → cc6eadf)](https://github.com/anim8js/anim8js/blob/cc6eadf40fc3c585aedd50e2508256d23cc9eeaf/src/parsing/transition.js) * [anim8js/anim8js/.../**AttrimatorMap.js#L267** (master → cc6eadf)](https://github.com/anim8js/anim8js/blob/cc6eadf40fc3c585aedd50e2508256d23cc9eeaf/src/AttrimatorMap.js#L267) ---- 
I would suggest to convert the object to string using JSON.stringify() and then set a redis string with the key something like this: object:objectId. If you need geting all objects store the objectIds in a redis set with sadd and get them with smembers.
it's easy to find other cases (like by adding or subtracting one) the post lists many other cases (like negative numbers) writing `Math.floor()` makes your intent much clearer, which means that debugging is easier. debugging is the bulk of a programmer's work
Thank you for explanation! I'll take a look at it and see if I can achieve what I want :) Good luck with your projects, this one looks pretty promising.
I find myself testing the types when I'm writing a library that other people will use in their applications. The problem with writing libraries is that you're not actually using the code you're writing, and so it's useful to create tests with dummy data so that you know that the types you're writing match the common use cases. 
ELI5? I'll take a stab. This won't be easy. Let's start with variables. Variables can be used to store things, like numbers, letters, or strings. Variables can even store a group of things, with a mixture of numbers, letters, and strings. I can call a variable almost anything I want. Let's start with an example. How about a variable that stores information about my dog, Ralph. In Javascript, variables usually start with lower-case letters, so let's call the variable "ralph", and give it a few pieces of data. My dog is black in color. I just took him to the vet, so I also know he weighs 72 pounds. He is currently in my office. So our variable 'ralph' has a mixture of numbers and strings, and looks like: let ralph = { type: 'dog', color: 'black', weight: 72, location: 'office' } Now for functions. This are a little harder. They do stuff to variables. So when I take my dog somewhere, I might want to call a function "move" that moves him somewhere. Let's say that we tell "move" where we are moving him? So we might have a function that looks like: function move(thing, newLocation) { thing.location = newLocation; } Any time I call "move", I have to tell it what I'm moving (called "thing"), and where I'm moving it (called "newLocation"). It changes the first variable passed to it (called "thing"), setting its location to the second variable passed to the function (called "newLocation). So if we called 'move', passing 'ralph' and 'bedroom', it would set the location for Ralph to 'bedroom'. It might look like this: move(ralph, 'bedroom'); When programming, very often you have types of variables. So if I were keeping track of all my pets, I might want to call "move" on any pet. "ralph" would be one pet, and "fluffy" and "button", my two cats, might be two more variables. All of them are "Pets". All of my pets move, so I can even attach functions to this type. In Javascript, this is called a Prototype. A prototype has a special function, known as a Constructor, that creates an instance of a variable. This function is just the name of the prototype, and usually starts with a capital letter. Since I have 3 cats, I would create 3 instances of the prototype "Pet". Let's re-write our move function to make it part of our "Pet" prototype. So it might look like this: function Pet(type, color, weight, location) { this.type = type; this.color = color; this.weight = weight; this.location = location; } Pet.prototype.move = function(location) { this.location = location; } Weird! Now we see that thing you asked about, "this". Well, when I create an instance of a pet, we assign that instance to a special variable called "this". The special variable, "this", contains all the data of or prototype, "Pet"--in our case, the type, color, weight, and location. And we have a "prototype" function, assigned to Pet. You can call this prototype function as if it were part of the Pet variable instance. So we could do this: let ralph = new Pet('dog', 'black', 72, 'office'); let fluffy = new Pet('cat', 'grey', 18, 'bedroom'); let button = new Pet('cat', 'tabby', 9, 'outside'); ralph.move('bedroom); This would have the effect of moving ralph to the bedroom! And now we have 3 Pets (instances of the Pet prototype), ralph, fluffy, and button! Now, here's where Javascript gets a little weird. The way Javascript works, any variable can be treated as if it were part of any prototype. To do this, you can use the magic "apply", "call", or "apply" functions...this apply function can be attached to any other function. So let's say my buddy, John, isn't as organized as I am, and doesn't store all of his pets using this prototype. He can still treat his variable as if it were a Pet! For his dog, "Fred", it might look like this: let fred = { location: 'den' }; Pet.move.apply(fred, ['office'] }; Pet.move.call(fred, 'office' }; let newMove = Pet.move.bind(fred); newMove('office') This shows 3 ways to do the same thing. The first "apply"s the Pet prototype to "fred", calling the function "move" on the "Pet" prototype. When using "apply", any parameters you want to pass to "move" must be passed as an array. The second does the same thing...but parameters you pass to the "move" function are passed as extra parameters (not in an array). The third approach "bind"s the variable "fred" to the function "move" in the prototype "Pet", assigning this bound function to a new variable, "newMove". We then call "newMove" with the location, just as if we called the pet's "move" function directly. In each case, when the Pet function "move" is called, that magic variable "this" is set to "fred". So when the function sets the location on "this", it's actually working on "fred". Now the variable "fred" doesn't have all of the parts of a Pet we might expect. That doesn't matter. Javascript doesn't care--it just treats "fred" as if it were a "Pet", setting that magic "this" variable to fred when calling the move() function. Neat! So "this" is just a special variable. It has a Prototype assigned to it that gives it functions that operate on it. You can treat any variable as if it were a type of any prototype using the magic functions, "call", "apply", and "bind". Depending on how you run Javascript, "this" gets set automatically when Javascript functions initially start. For your next lesson, we'll discuss how Javascript introduced this new thing called a "Class"...but it's really just "Prototype" under the covers. But that is for another day. 
JSON.stringify, JSON.parse
Those demos gave my laptop's GPU fan a good workout.
&gt;Insert oblivious "not everything, not everyone"
Have used a tokenised system before whereby every string used in the system is in the format of say app.dashboard.welcomeMessage for example. This is then mapped to a corresponding locale Json file on load of the app based on the users defined or inferred locale (on a mobile app) . We fetched this file on the splash screen of the app. Then have some logic in your text components (if using them) to use this token I.e &lt;p&gt;tokens[app.token.dashboard.welcomeMessage] ? tokens[app.dashboard.welcomeMessage] : fallbackTokens[app.dashboard.welcomeMessage]&lt;/p&gt; Seemed to work okay for us. Not sure how helpful that is. Apologies for formatting, mobile.
querySelector needs to be capitalized properly. It's probably better to use /^\d/ rather than use .startsWith. (does startsWith even accept RE?)
I agree, once I started writing selectors I never looked back and also put them next to reducers. But what if we also put the action creators there. Then we've basically put all global state and the ways to update and read it together. That's also known as an object. A global singleton object. We're almost full circle.
wonder if the reason it defaults to year 2001 has something to do with the Y2K scare
ty:) Give it a try, if you find inconsistency in the behavior outlined in the examples or some inefficient handling of queues, let me know. Thanks 
nice thanks
Pretty sure what is happening is that the ~ will cast the floating point value to a 32 bit signed integer. The max value an integer can be is 2147483647 which is less than 2222222222.2 so it will overflow the integer. The other difference between ~~ and floor, is that when you convert to an integer you truncate the decimal place. Floor gives the greatest integer upper bound. So you get a different answer for negative numbers. For example: (int) 1.5 == 1.5 (int) -1.5 == -1 floor(1.5) == 1.5 floor(-1.5) == -2 
Yes. Thank you. Would you like to be my linter? I can pay in chicken nuggets.
If you use it and you ever have any questions please feel free to PM me. It would be good to know what things people are curious about/get snagged on - so I can make sure to explain things properly in the documentation.
All of the variable pressure examples do not work on other devices.
Localization is actually a really hard problem because of stuff like different numbers of plural forms per language (two in English, one in Japanese, three in Russian) and words that are gendered based on context ("they" is gender neutral in English but can be either "ellos" or "ellas" in Spanish depending on who). I recommend [MessageFormat.js](https://messageformat.github.io/) for this. Overall I find that boot-time performance doesn't matter that much.
I don't have an answer for this, but I'm looking forward to what the community has to say. Perhaps you could give them some more concrete examples so they can give advice specific to the situations you've encountered?
If accesing field of objects is important you can try spliting the object on multiple redis hashes e.g. object:objectId, object.foo:objectId, object.bar:objectId this is propabiliy will be hard to maintain but it's an option. I don't have any experience with ReJSON but it looks interesting.
&gt; does startsWith even accept RE? It doesn't
No I haven't, but thanks for the tip. Still don't know how to find it. ;)
 expect(toJson(shallow(&lt;App /&gt;))).toMatchSnapshot() Boom. You are done.
Wacom tablet doesn't quite work.
I write tests for React components (and other things) daily, using Jest and Enzyme. If you find you're writing lots of extra code in your tests (outside of assertions and basic mounting), your component might not be written to be testable. Your component might be doing too much, taking in too much data, or mixing lots of domain logic with renderable logic. Writing your tests as you write your component can help ensure concerns are separated, props are well thought-out and avoid bugs from a component trying to do too much. This is very difficult when revisiting old code, that wasn't written with tests in mind, especially if someone else wrote it. You might find yourself writing lots of code trying to wrap a component that wasn't written to be tested in a test framework.