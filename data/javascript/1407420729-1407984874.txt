&gt; Using jQuery well would not ruin a project, but misusing it could do. Correctly understanding the performance implications of the tool one uses is important. Misusing vanilla JavaScript, or even CSS can also ruin a project. I recall having some problems with the drag and drop system as well. Decided to ditch it completely. Most of my problems have been with the animate() though.
Well isn't it quite obvious that if you have a large project and you use some library that a lot of people deem shitty, but still manage to make a perfectly fine and working application, the library might not be so shitty after all? Isn't it the definition of a shitty library, when you can't make a working application because of something the library does or doesn't do? I'm not worrying about people bashing jQuery, I would just like to know why they are bashing it as 90% of the points I've seen, such as jQuery taking time to load, aren't really a problem unless you can't spare tenth of a second for some reason, in which case you should be optimizing everything else in the first place.
&gt; One "developer" I work with keeps telling me that jQuery will replace javascript someday. This is a legitimate problem with jQuery. It hurts my head to read the jQuery/JavaScript questions on Stackoverflow because of this. Like even if the question is especially tagged as "JavaScript", people are still dumping their jQuery-solutions in.
It's very unlikely someone's gonna hit a performance issue with JQuery. Unless he is using it for something JQuery clearly isn't suitable for. Is there supposed to be a problem architecture wise? I mean if you are doing something that needs to quickly reflect changes on data then you'd better use a framework that takes care of the callback hell jQuery is likely to bring about. It should have some type of mechanism for seperating the "data", and watching for updates on the data. Angular, d3.js, knockout, and pretty much all new frrameworks attempt to do that in some fashion. But if we are talking about presentational stuff, I don't see how jquery's way of using the dom is bad architecturally? It reminds me of people who are like "I'd like javascript api's to be more OO" which imo is completely stupid for a dozen of reasons. It's quite fine and it reflects the way CSS works. Tag DOM elements, match them externally and change functionality, jquery can add functions instead of just styling like CSS does. Angular directives can do that in a way that is a bit more structured of course.
By perfection I think you mean speed? What about the other dimensions of clarity (clean, understandable code), productivity, expressiveness, maintainability? Look at performance alone is myopic outside of your lab or dev server
Doesn't the script get cached though? A single 2.77 load shouldn't matter if that's the case.
Programming perfection to me is doing something as efficiently as possible with least amount of code as possible. Sure things like code readability and maintainability matter, but those only help the developer, not the user.
I am so sick and fucking tired of these angular hipsters and startup kids talking shit on jQuery. Where do I even begin. jQuery is great. Why? Because browsers aren't. If you aren't supporting ie8-9, chances are you aren't building anything anyone gives a fuck about, let alone employed. I am fully capable of writing everything in Vanilla JS, but do I? No. Why? Because people at jQuery already did. They tested it thoroughly, its as small as its gonna be, and its probably better than what I could come up with mid project to replace it. If you want to write event binding methods for 8 different browsers, or 3 different ways of making an ajax request, be my guest. I don't have that kind of time. I'd much prefer to leave that shit to the folks who do it day in and day out, so that I can focus on writing shit that somebody hasn't already done for me. &lt;/rant&gt;
Yes and no. Yes, it gets cached, but on mobile devices that cache doesn't last very long. So next week the user will have to re-download it. And no because 80% of the visitors on one of my sites are first-load users (not necessarily because they have never been here, but because they don't have cleared their cookies since then). For them, that will be the ONLY experience they get. Overall I agree with your sentiment. jQuery doesn't deserve the hate it gets. But when I'm building a site, if I can avoid it I will, just like I avoid images (I try to use SVG for icons, and CSS for fancy gradients and stuff), linking any other libraries, and loading more than one css or js file.
I guess that on cases like this it does matter whet ever you use jQuery or not. But still, in cases like this, shouldn't you be looking at optimizing images, cross-server requests and everything else as those should still take even longer to load and process than jQuery.
I could not agree more. When I still used jQuery on a regular basis, reading through the source was one of the most eye opening and educational experiences I have had. 
I like how you just compared jQuery to God.
It's 2014. Optimizing images, gzipping files, and concatenating and minifying resources should be standard practice. If you aren't doing that, you don't deserve to call yourself a web developer. I mean there is an apache plugin (mod-pagespeed) that will literally do all of that for you. There is no excuse not to be doing it.
Point taken. I haven't done really large projects yet. Biggest one I've done is probably 30k lines of code and I haven't paid extreme attention to maintainability or scalability on that one and I actually won't until it actually becomes a problem. I learn better the hard way (yeah, yeah it costs the company money if I screw up, but what do they know anyway - besides if it makes me better I think it's worth it).
I tried to make it seemingly subtle, too!
&gt; People hate...space Yeah! What has the cosmos, or an understanding of it, ever done for me!
forEach can be added via poly fill. querySelectorAll is supported even by IE8 (of course only for the CSS selectors that are supported by IE8). Do you really need to support browsers older than IE8? Or do you need CSS3 selectors?
In addition to the git repo, it's also said explicitly in the official docs for angular.element: https://docs.angularjs.org/api/ng/function/angular.element They mention jQuery 9 times in the opening description to the doc page in nice big letters :P
I like jQuery, but not always. If I'm doing a simple site, then jQuery is a godsend. It abstract DOM manipulations stuff, easy to use plugins, job done, get paycheck. If I'm doing a more advanced app, then I try to not use jQuery, not because of performance, but because of the architecture. jQuery is very good for DOM manipulation, but I think DOM manipulation is not the most efficient way to build an app. I'd rather use React, which makes it easy to not think in terms of DOM but think in terms of data and state. Some hatred towards jQuery is sometimes really stupid. At my previous job, the lead dev forbid us from using jQuery... and instead, we had to use his undocumented, untested 10k LOC custom library that did a similar thing, but with bugs. ``Utils.DOM.getClasss('className')``. No method chaining, no CSS Selector, only by classnames or ID.. ugh. 
&gt; Well isn't it quite obvious that if you have a large project and you use some library that a lot of people deem shitty, but still manage to make a perfectly fine and working application, the library might not be so shitty after all? That does not have to be the case. A library being shitty doesn't have a lot to do with the final application being good or bad. Having to work with a shitty library generally means you have to do a lot of workarounds or hacks in the application to work around the shitty parts of the library. E.g. if I give you a shitty math library that has "add(a,b)" function that returns "a+b+1" then it is a shitty library. The answer it gives you is wrong in comparison to the defined add operation in math. I can make a good project using the library as long as I keep doing -1 on the return value of add every time. The end result would be a correctly working application, but internally it uses a shitty library. Using a shitty library increases the chances for bugs and makes it harder for the developer in general. So if we look at /u/tencircles points again: 1) The promise isn't spec compliant. - Does this mean that it is unworkable? no, but it makes it harder for the developer to work with. He would have to add hacks and workarounds to make sure that everything is working as it should. 2) The functions don't compose. - Does this mean that it is unworkable? no, but again it makes it harder for the developer to work with. 3) It is a bit heavy - Does this mean that it is unworkable? no, but it requires the developer to optimize other areas for size if he is aiming for a set size budget. This again makes the life of the developer harder. ----- Do these 3 points mean that jquery is a shitty library? no. It does mean that it has shitty parts. Does it mean that it is not shitty in general that I have to use it for every site I make? no. It does mean that you can use it when it is applicable and don't mind working around the shitty parts.
If speed were not an issue, there wouldn't be so many articles published about speed being an issue, particularly with jQuery.
That is the wrong attitude to take. From what you have said I gather that when you start a new project you add jquery without thinking about if it is needed or thinking about its use. jquery is a library and for every project you should consider if it is needed or not. Even big projects often don't need 80%+ of what jquery has. And at that point there might be better libraries that provide that 20% without having the added overhead. Especially now the API in the browsers have stabilized a bit and the newer browser versions are compatible with each other. Should you still include jquery if your requirements don't require IE8 or lower and you only need the selector query? Even big projects can have these requirements and conditions. So does it then still make sense to include jquery and have the extra overhead? That is why you always need to carefully weigh the merits and demerits of a library that you include.
&gt; Misusing vanilla JavaScript, or even CSS can also ruin a project. Very true. How much jQuery and jQuery UI to use in that case was not only my decision. It was deemed best by the team to use jQuery UI to solve the problems, and I said I'd make use of jQuery UI as much as was possible. When I found cases where jQuery UI was not working right, and could demonstrate that, writing some code myself that makes use of the jQuery functionality that could be seen to be working was the best option and the management gave the go-ahead for me to take that approach.
Think about it like this. Executing JavaScript is very fast, well, depending on the machine doing it. However, manipulating the DOM object is really slow in comparison. Therefore, the discussion should not be jQuey vs JavaScript. JQuey is just a set of JavaScript functions that are as efficient as possible. Instead, you should use JavaScript for logic, CSS3 for animations and not manipulate the DOM unless you absolutely have to i.e. appending more content.
You should checkout the ember ToDo app. It's a tutorial that walks you through the framework as you build a todo app. It actually hits a lot of what's good about Ember.
jQuery is not solely a polyfill &amp; compatability library for browser inconsistency. A number of things jQuery does internally could be better/faster/more optimal, but that's not even the point. The worst thing jQuery does is encourage terrible programming. It's absurd. Think about how many times you've seen developers use jQuery for sheer brute force - such as searching the *entire DOM* just to find a child of a parent you already have a reference to. Or using *class names* on an *element* to persist *state*. All things considered, aside from the compatibility (which really could be refactored into a standalone feature), I use jQuery for one reason and one reason only - it's so pervasive, most other developers can read it and know what I'm doing. But that mentality is very much at the cost of us having to hire developers these days that can't figure out how to traverse a DOM properly and efficiently anymore, because jQuery has enabled mediocre developers to look more advanced then they are.
Eight year olds, dude.
&gt; From what you have said I gather that when you start a new project you add jquery without thinking about if it is needed or thinking about its use. This is (unfortunately?) true, but I weight it in planning phase and dumping it in like that hasn't been a problem... yet. Maybe it's because of who do we develop for. Systems I make aren't commercial and we usually know pretty much exactly how many people and what kind of people are going to use our software and in what environment. This might have made me a bit naive to be honest.
&gt; prototype.js (oh lord... why this name) Because it extends the prototypes of all built in objects, and was created at a time when libraries were named for what they did rather than what would keep people's attention.
Objects have a plethora of uses in JavaScript, but essentially anything you could model that could have it's own attributes is suitable for a JS object. Frameworks often use them for storing data returned from the server, but another popular use case is storing something like plugin options. A use case that I used JS objects for today was building a little client side router. The router stores an array of routes that are just plain JS objects. Each route has attributes like url, params, callback, etc.
&gt; But that mentality is very much at the cost of us having to hire developers these days that can't figure out how to traverse a DOM properly and efficiently anymore Computing power has also gone up so that should even it out a little bit.
Ah okay, that makes sense. I'm still so new to it that the "user" object makes the most sense because I can actually think of various attributes that can come along with a "user" but this is a good example. 
Yeah, there are tons of other use cases. Think of other things a user could have in a certain context. Maybe you're app stores information about a user's car. So we could then model a car using an object too: var Car = { make: "Ford", model: "Fusion", year: "2010" color: "red" } console.log(Car.color); //returns "red" 
It's an inevitable backswing against the over-swing in favour of people thoughtlessly and reflexively using jQuery for *everything*, including as an application framework, programming crutch to avoid really learning JS and the automatic answer to questions on Stack Overflow which could otherwise be answered with a single line of raw javascript. There's nothing wrong with jQuery, but there are plenty of ways to use jQuery wrongly. When it first came out it was useful and people used it. Over time newbies and jQuery fanboys created a powerful and noisy peanut gallery that ignorantly advocated using jQuery for everything, reflexively, as a tool of first resort, and in lieu of even thinking about the problem and choosing the most appropriate solution. That overswing in favour of "how do I-" "doesn't matter - just use jQuery"-type discussions and fanboyism has now triggered an inevitable backswing, where people are criticising jQuery - sometimes legitimately, sometimes ignorantly/reflexively. jQuery's a great tool, but just like anything else it *is* just one tool. It's not right for everyone, and both the people who believe you should *always* use it and the people who believe you should *never* use it are equally wrong. Rather, you have to research its benefits and limitations and decide *for your particular use-case* whether its drawbacks are worth the benefits it brings.
I guess the issue I'm having is what would be the reason to store this in javascript vs. a language where I am going to store this in a back end? Maybe some sort of AJAX style of page? Or maybe for an API or something?
Just learn it so when someone suggests grails you can steer them away 
I totally agree, but the argument comes down to the same thing as the people trying to hate on jQuery. AngularJS is pretty much as large as jQuery, so if you're only using Angular for a very small portion of it's functionality, you probably shouldn't use it at all. 
Agreed, it lets people do shitty things. But that doesn't mean that everyone uses it shittily.
Our app has dozens of &lt;table&gt;s in it, and each one is 'managed' by a mountain of JavaScript (to add stuff like saveable column order, etc.). Each &lt;table&gt; has a corresponding JS object with a bunch of properties in it. My point being, while the example of a 'business entity' like a User is legit, there is also the notion of having JS objects to manage stuff that you are doing in the DOM.
I agree that all of things should be done, but as a web developer I don't even have control over most of those things on large-scale projects. i.e. web developers usually don't even touch or see the web servers in a typical large company. Definitely do it if you can, but to say there's no excuse is completely wrong. IT and management will make plenty of excuses for not doing things implementing things that actually help the business.
In spirit you nailed it. More specifically on the testing front, this is a list of 110 modern (yes, modern!) browser bugs that jQuery works around. https://gist.github.com/rwaldron/8720084#file-reasons-md Because it is so popular, they have incredible bug testing, reporting, regression tests, hardware, all that. Writing your own lib/vanilla JS to cover even 50% of that would be INSANEly expensive. I really can't believe people have this argument...
That's a terrible attitude. More computing power should make more functionality available, not enable poor coding. 
AngularJS is just as large as jQuery. It's just as bad to use Angular for a tiny subset of it's functionality as it is to use jQuery for the same.
That's true, but in my experience when you fertilize weeds, they do tend to outgrow the rest of your garden.
&gt; Did I expres any judgment? Yes? There's really no other way to interpret your comment than "the source code is bad". Also, no one is going to go read a 200k library just to see if they want to use it. It's not even possible to get any indication of how good it is nor is it worth anyone's time to do that.
That's because jQuery is javascript. It is a library on top of the language to abstract away some operations and provide a standard API for certain things across browsers (which was especially important when jQuery was created, now not as much since browser devs have started cooperating on standards a bit more), but it is still javascript. Sure everything you can do in jQuery you can do in raw JS, but that works two ways. If someone posts a jQuery answer and you want a raw JS implementation, then just rewrite it in raw JS. Quite often (especially for somewhat simple operations) the translation is super easy. I would try an exercise of going through some jQuery code and seeing if you can translate it into raw JS that works on the browser of your choice. Then see if the solution still works on other browsers. If not, try to figure out why it doesn't, and fix it so that it does. When you're finished, see how much time and space was saved when writing it in raw JS vs jQuery.
Yeah I totally agree. You wouldn't (shouldn't) use angular for a super tiny project, and will have a much cleaner large application if you use angular over jquery. 
Not sure why you got downvoted, but you're exactly right.
As long as your app is fast enough any additional speed is like throwing pearls to swine. Jquery will help you a lot when writing your app. If you later discover a bottleneck do a fix for that part and no more. Remember, as they say, ' first make it work correctly. Second, make it work fast' (only do second part if needed!)
&gt; fast enough And here we can get to the long lasting debate of what is fast enough?
Could you please take a look at my code and tell me what you thin, and point out bugs? Thanks! http://codepen.io/anon/pen/Amibd
You are taking your experience and telling everyone "the path I took will take you further than any other" and that's plain wrong. You don't need to learn C first to be the best programmer possible. It doesn't even necessarily help you be your best. It's completely subjective and you're being completely single-minded on this.
Depends. When it comes to ui does the app feel fast enough or are there moments that irritate? What do other users say? Of enough ppl say a certain part of your app feels slow that's probably a part that needs attention. 
You'd be surprised at how similar a lot of it is now. The "never going back" attitude will bite you later if you just refuse to revisit old technologies. Regarding stack overflow, I'd say it depends on a lot on what is being asked. If the question is something like "how do I get a JSON response from X API" I'm going to suggest using $.getJSON() because I don't feel like typing out the three different ajax calls you need for full browser support. If it's something like "how do I change the class of an element", then they are most likely very new to JS anyway, and are probably already using jQuery in the first place. Is that a good thing? Debatable. In an ideal world people would probably post the raw JS and jQuery implementation for things, but people are lazy and the jQuery notation is almost always more terse and understandable. 
$('.lovers').gonna('love');
&gt; Hate is a cost of popularity. That is really all that needs to be said.
By your logic, hammers are a terrible tool because some people suck at woodworking.
But, why do you want to do that? I think it's not a good idea.
&gt;If you aren't supporting ie8-9, chances are you aren't building anything anyone gives a fuck about, let alone employed. Actually, there's *lots* web applications currently in development that only support modern browsers. There are whole industries that are switching from desktop apps to web apps at this moment.
Don't be too focused on jquery. There are other libraries out there that are more specialized, for example, tweenmax and angularjs. Granted, ANgular is based on jquery, but it is specialized for webapp development. As for development, "never going back" will bite you in the ass because javascript will not be there forever. When something like dart takes over you will be forced to retool. 
Switching to dart is going forward, heh. And I've already started learning it.
On the very basic level the website works like this: you double click a word, the word is captured via getSelection method, then a popup with translation is displayed. On an iPad it makes sense to change the behaviour to longpress instead of double tap, as it's much more intuitive to select a word like this (plus there's a magnifying glass appearing for better precision). I also tried simulating selection by running through text nodes in the document and applying a highlight with a span, but this thing won't work on iframes, because of cross domain origin, and iframes is one of the main thing that it has to work on. 
Cool story bro. http://www.winbeta.org/news/june-1st-2014-internet-explorer-8-still-dominates-browser-market-share
window.atob("Tm9vYnMgd2lsbCBiZSBub29icw==")
This [research from Google](http://googleresearch.blogspot.co.uk/2009/06/speed-matters.html) shows that small slowdowns that they deliberately introduced led to small decreases in the use of the Google service.
Try and get out of the mindset that all objects will eventually be persisted, especially client-side. You are correct in thinking the AJAX is a common use case, as the server will often return JSON, which is essentially a JS object. So if we got back some data from the server, we could then use this object for something like DOM templating. Here's a simple example (with jQuery because I'm lazy) $.get('/api/shows', function(shows){ // `shows` is JSON returned from the server shows.forEach(function(show){ var template = "&lt;div class='show'&gt;"+ show.name +" - "+ show.episodes.length +" episodes&lt;div&gt;" $('.shows-list').append(template); }); }); 
Oh this is great. This is a great use and I never would have imagined it would work like that. What a smart idea. This is making a lot of sense now. 
They're all good and practically identical. Personally I'm a fan of Mocha/BDD since I can use it both in Node and in the browser.
jquery and angular cant really be compared. One is a tool and the other is a framework that implements the MVC design pattern. 
I'm pretty sure people use windows because it came already installed on their computer. You don't see too laypeople running Windows on their Mac because it's "so damn easy".
Maybe if hammers made it easier to suck at woodworking. At that jQuery isn't simply a tool; it's an abstraction that hides a lot of tools. It's an abstraction which has its uses, just like a pre-fabbed house. But no one considers a prefab to be the correct answer for everything. 
Large sites that get massive traffic like theguardian.com do not use jquery due to the filesize and/or they've looked at what sizzle is doing under the hood and didn't like it. They tend to lean toward micro-frameworks such as Bonzo, Bean, Zepto, Apollo, etc. Patrick Hamann from theguardian explained why they used micro-frameworks near the end (QA) of this great video: http://vimeo.com/100505617. 
Well, any web application utilizing WebGL. My point was, however, that these modern web applications are mostly in development, and will be released in near future.
How does that refute my point? I was talking about software in development, which is not really relevant to current browser shares. There's lots of web applications in development which will only support something like IE11+. One reason is WebGL. These are not your everyday consumer websites. In addition, there are and will be web applications that will be used internally by companies.
I prefer [Karma](http://karma-runner.github.io/0.12/index.html) (runs your tests on multiple browsers) ...combined with [Mocha](http://visionmedia.github.io/mocha/) (a solid test runner that does what's needed and stays out of your way) ...and [Chai](http://chaijs.com/) (an assertion library) or [Expect.js](https://github.com/LearnBoost/expect.js/) (not as good as Chai, but works on IE 8). I have [example source code here](https://github.com/jamesshore/automatopia) that you can use as a starting point for your own apps. I also have a [screencast series on unit testing JS here](http://www.letscodejavascript.com) if you're interested.
Ok. I see what you mean. A dirty workaround could be to use a null-animation (not delayed and having no visual effect) to keep track of those delayed, applying it to a meta-element (::before or ::after). You will have to filter them out when they end, and filter out the delayed animations with matching name when they start. One way could be to suffix with `-sentinel` the name of the fake animations, keeping the first part of the name equals to that of the corresponding delayed animation. A bit convoluted, but it could work. 
&gt; Computing power has also gone up so that should even it out a little bit. It already has.
According to [this website](http://davidwalsh.name/webkit-css), `-webkit-touch-callout` does not do what you think. It apparently only affects the result of a long-press on a *link*. One thought: have you tried leaving selection enabled, then as soon as a selection is made, apply `-webkit-user-select: none` ? This might allow the selection info to be obtained, while turning off the actual selection before the menu shows. On a similar note, you could clear the selection immediately, while rendering your own selection box (via some tags).
It's not always bad. The biggest problem I see is that people use it as a crutch and never learn proper JS coding techniques. This becomes especially problematic when they move to frameworks like Angular and still rely on jQuery, when there's no good reason to use both, since Angular's directives should be handling most of what you'd use jQuery to do otherwise.
Just a couple of things: 1) put the :hover on the parent wrapper, to avoid flickering: `.flipwrapper:hover .flipper` instead of `.flipwrapper .flipper:hover` 2) I don't know the strategy you are using for the vendor prefixes, but I had to prefix with `-webkit-` also the `perspective` property on the `.flipwrapper` to make it work in chrome stable. You should complete the declarations to make it as much cross-browser as possible.
I am sorry, but in my country between friends we use to say fuck-off to each other, **privately**. We found that sometimes it is better to go straight to the point instead of trying to look polite while deeply insulting someone as you did in your first response. In respect to this new response, I use to read the code of every open source piece of code I evaluate for use in my projects. Maybe I am just the exception that confirms the rule. Maybe it is the proper way to use opensource code. How should one be supposed to understand how it works, and maybe even to fix bugs and contribute back with improvements without reading the source? For this reason I tend to avoid closed source software as much as possible. If I can't see how something work, I cannot be confident enough to use it in my software.
Most companies aren't running IE11+ internally. I would say almost zero non-development companies have that standard. I would know, because I do work for one of the biggest companies in the world and internally they require support back to IE6 at least, via fallbacks. I get what you're saying, but if you do day to day web development for shit that millions of people use daily, you aren't getting away with this "It works in Chrome" bullshit. That aside, modern browsers are fucking fail as well. Have you seen how Windows Phone handles touch events? Or how IE11 identifies itself as firefox to avoid IE conditional CSS? There is nothing wrong with jQuery and the newest batch of browsers aren't solving shit.
Oh, that sort of talk is the kind of talk you will find from developers who believe they are the smartest person in the room and so therefore talk like it. Ignore them. They tend to be the ones that fuck things up in projects by overcomplicating things by trying to be clever.
If you want efficient immutable data structures in addition to useful higher order functions take a look a [mori]( https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;ei=e9TjU4yuNcHG8QHut4CQCg&amp;url=https://github.com/swannodette/mori&amp;cd=1&amp;ved=0CBwQFjAA&amp;usg=AFQjCNEXyGyrcpaqlaj_ImozBBdnBTFSdg&amp;sig2=h_vb7RiT0U1sj4zwwG5PBQ). 
So you state that reading the source code is worthless and gives no metrics about the quality of the code? Why do you use open source software then? Just because it is free?
&gt; I have been making web applications for fun for about 4.5 years and professionally for a year I think. I have been doing the same for 15 years. When you get to that point, you'll look back and see that JavaScript sans jQuery isn't a "pain in the ass", but having an abstraction around everything you want to do **is** one.
I am so sick of seeing this bullshit list, where 90% of the issues are around Sizzle, which isn't even needed anymore.
 &gt; was created at a time when libraries were named for what they did rather than what would keep people's attention Very old-person-ish statement, regarding how simultaneously wrong and nostalgic it is.
I remember those days. jQuery 1.2. Coming from 10 years writing pascal, C, Java and then ActionScript, reading the source of jQuery was an amazing experience. Shortly after I reimplemented it, just to realize that such a DOM centric abstraction was not necessary at all, just leaky.
Stopped using jQuery years ago, and cured a bunch of headaches! Namely: my team actually learned how to program, and I could inspect event handlers in the browser (yay!)
Why isn't Sizzle required? It's an excellent way to grab a collection of elements by any identifying element (tag name, classname, attribute existence/value, structure, etc). The JS standard selection engine is very limited. getElementsById? getElementsByTagName? gg to that.
&gt;Or IE11+/newish Chrome/newish Firefox which will be commonplace in the near future. People have been saying that since Chrome came out in 2009. We're still in the situation of putting up with polyfills for IE8+ behavior.
`querySelector`/`querySelectorAll` have very good support nowadays, and the need of too complex selectors in js is a code smell.
A pre-fab house would be more akin to a widget library. In order for this conversation to be useful, you will need to come up with more applicable analogies to support your case. As for now, your point has been limited to "I've seen some bad programmers use jQuery, so jQuery must be bad." It's a bad carpenter that blames his tools.
&gt; Contrary to common belief, the sheer popularity of something does not mean it will always work. 100 times this. Also, if something is popular, it gets exponentially more difficult to be fixed without breaking backward compatibility. Look at the broken parts of javascript...
I read Professional JavaScript for Web Developers, I found the definitive guide too dry (like a dictionary). It wasn't too difficult after watching a few videos on JavaScript, I did the codecademy tracks as well so it was a little bit easier to grasp. TeamTreeHouse is just bleh. Their JavaScript track is almost non-existent. I think there's a lot of different ways to be a web developer. Mainly there are people that don't care about what's going on under the hood and just jump on any new framework that comes along and paste code together and those that do understand core fundamentals. That's what TeamTreeHouse feels like to me. There videos aren't very serious and I didn't feel like I was learning anything I didn't already read or do in codecademy. 
Let's be generous and say that 80% is sizzle, and sizzle can be replaced with qSA, isn't that still over 20 bugs found and fixed? I think its safe to assume there will be more in the future and not having to find/fix them is valuable. its basically offloading a chunk of your QA to someone else.
Unfortunately, until its WheelerTech on the statement of work, that's not necessarily my call.... :(
I've been doing JS dev for 18 years, so yeah, I am a very old person by this industry's standard. I am not nostalgic for that time, however. That was the end of the web dark ages following the dot.com crash and IE winning the browser war. After I lost my job I worked minimum wage retail gigs while scrapping together what little contractor work I could find. That era sucked. When prototype.js came out (Feb 2005) the only other big name libraries were the Dynamic Drive libs. Tthe only big companies putting money into the web were MySpace, Google and Yahoo, and they weren't releasing any public code. MooTools and jQuery came out a year later, but it wasn't until github launched in 2008 that JS library development really blossomed. 2005 and 2006 were big years for the web. In addition to prototype there was also the first release of webkit, firefox 1.5 came out, Reddit and Twitter launched, and Facebook opened to the general public and released out their app sdk. The web was reborn.
There's pretty large chunks of missing functionality. ":visible" springs to mind. And those methods have plenty of surprises, [like this one](http://jsfiddle.net/QdMc5/).
I just got into webstorm and I've been loving it! I'm glad to see that 9 offers Polymer and Gulp support, because that has been kind of annoying in 8. Now, if it were only free :(
I'm pretty sure you get free updates for a year 
&gt; ut it wasn't until github launched in 2008 that JS library development really blossomed. I'm not really sure github was so important in that regard. Personally I would rather attribute it to Firebug and node.
This is the problem with big IDEs: when the IDE you use doesn't support your tech it can suck bad. That and all the IDE specific troubleshooting that can happen. I like Webstorm but I'm pretty much a minimal text editor &amp; command line guy now because I just don't want to reply on all that built in goodness or rely on my teammates all having access to that built in goodness. Still Webstorm is the best and I'll try out 9 when it comes out just to check up on the Polymer support.
You think $245 is pricey? 
Well, osx is pre-installed on the mac's, so that's not the point.
That's actually exactly the point I'm trying to make. People don't use Windows because it's easy, they use it because that's what came preinstalled with their computer.
Very true. It sucks to rely on the crutches when working with the bleeding edge stuff, but most of the time it's the best thing since sliced bread.
Yea, that is what you pay for. But it'll keeps working after that, and you get the fixes of the major version you have even after the year is passed (but that only lasts until they release a new major version).
Stop coupling yourself to the DOM and worrying how to get data through your app and use a proper MVC Framework like AngularJS :D Do you trust that your co-workers will not change CSS classes and kill your payment process?
Well, it's not completely black &amp; white. For example I use the Grunt integration they have in 8, but that won't stop minimal editor users from just calling the commandline. Same with the JSHint integration, it uses the same .jshintrc file as the external tool so again minimal editor users can just run their commandline. Built-in support for build tools (Grunt and now Gulp) is a nice improvement because like you say it is not practical for mixed teams to rely on IDE's built-in compilers (like they have for CoffeeScript, TypeScript, Less etc). But they parse the regular Gruntfile.js or Gulpfile etc and put it in a nice UI to click on, so it still works fine for minimal editor users. It's pretty clever. But fat IDE's are still worth it for the productivity tools, like refactoring and templates and all the other clever things (so many, hard to go back).
&gt; $.each vs Array.prototype.forEach &gt; You often see developers who are so fixated on $ having all their tools, they use them to the exclusion of learning about what the modern browser provides. ES5 has had iteration methods for a long, long time. It's time to let go. This is strongly-worded bad advice. IE 8 doesn't support it, and due to the XP lock-in, it's hovered around 10% usage for a few years now. 
WebStorm is the most minimal . But what if you code both PHP, Ruby and Python?
IE8 is very easily shimmed to bring it up to speed. For the reasons I mentioned above, jQuery is not the same/a replacement for a good quality ES5 shim. It really is time to move on.
Does IntelliJ not fill this purpose? Im out of the loop a bit but I thought that was the point?
Moral: enbrace progressive enhancement.
Then I'd say make up your mind and quit having needlessly complex software. Why would you use all three at the same time? 
It takes less than 10 line of code to implement Array.prototype.forEach, and there are specs-compliant polyfills available since long time.
The final jsfiddle can't run at all in Chrome, and in Firefox always places the circle at 0,0. Kind of paints the whole article in a bad light. Also, please don't post screenshots of code, it drives anybody who's actually interested in your post crazy. Syntax highlighting is easy with libraries like [google code prettify](https://code.google.com/p/google-code-prettify/), but even a simple `&lt;pre&gt;` would be so much better than a screenshot. (I don't actually know that Medium lets you do either of those things, but if it doesn't, I would strongly consider a different platform for this type of post.) edit: you post broken code, I point out that it's broken and give you help with your website, and your response is to say nothing and downvote me? You and I clearly have very different priorities.
For a conference that is brand new with no established base it's a big bet considering I'd go for networking mostly. And as a hobbyist for that money I could pay for a couple years of pluralsight subscriptions and get access to so much more learning material. 
They all do Javascript, HTML5, CSS (and some other web basics).
WebStorm is bundled with both PHPStorm and RubyMine. To be honest, I'm totally okay with having separate IDE's for PHP, Ruby, etc. That way they are not unnecessarily bloated and cluttered with tools that you may not want. It would be nice if there was at least syntax highlighting though. It's not like it is expensive software though, and it's absolutely worth the price. They have awesome sales from time to time...I got PHPStorm on sale for like $25 two years ago.
as is already pointed out very tersely - they do exactly what you want. It's their main product, IntelliJ IDEA, and it has [tons of plugins](http://plugins.jetbrains.com/?idea) and does essentially exactly what you're asking for. Yes, it costs a little more, because you're getting an extremely expandable piece of software that works for you. Also, PHPStorm == webstorm + PHP support. So really, all you want is PHPStorm + rubymine.
jquery is ez mode. It is good to understand what is going on behind the ez.
Well, I'd just use Webkit without node.js, to be honest ;)
Looking for any feedback on this article especially from those who have been working with Angular in their projects.
Spam. Rather than driving hits to a clone of Reddit, you should link to the actual article: http://www.tysoncadenhead.com/blog/the-state-of-javascript-a-shift-from-imperative-to-declarative
Those issues are microscopic. I haven't run into them, ever. They will never affect my apps. jQuery is only useful to people who have no interest in actually learning the DOM API, and they are worse off as Web engineers for it. 
It's hilarious and sad that most "developers" don't know how to change an element's attributes without jQuery. 
&gt; I am fully capable of writing everything in Vanilla JS, but do I? No. Why? Because people at jQuery already did. Yeah, they wrote a 300-line function just so you don't need to use .className. 
&gt; The problem is not that websites/webapp should be compatible down to IE8. But you don't need jQuery in IE8.
Oh, I thought I was arguing with you. :) This whole thread is a cluster.
&gt; So am I a jQuery-guru or something, because apparently everyone else keeps having million problems with the library, but not me. No you just aren't developing complex enterprise applications. And I have worked on a few projects that were destroyed by jQuery, not destroyed in the sense that they didn't work, but in the sense that maintainability was impossible and they required entire rewrites with frameworks proper for the specific tasks. My personal hate for jQuery isn't in the library itself its at its misuse by so many people. Its really frustrating starting at job X and having to clean up 10k line JS files that are just filled with spaghetti js/jQuery, and then having to figure out which plugin is messing up the entire application when someone decides to change the name, or remove a css class. However this happens with all things that become popular, Wordpress is another great example. If used appropriately its fine.
You get free upgrades for year. I bought 7 and upgraded to 8 when it was released.
You're absolutely right there. Angular and Backbone are very much head to head in the employment space. Different countries put one before the other. When I look into the state level data, it's a similar dance.
Huh, I honestly didn't know that until reading your comment and looking it up to make sure. I actually don't mind the idea of specialized IDEs for different languages/tasks, though. I'd rather have a tool that does one job really well than a mutli-purpose tool that sort of gets the job done.
In addition to the points posted, I have another reason, though people don't seem to talk about it so I may be alone here: jQuery relies far too heavily on parameter analysis. Most of their functions analyze the type, length, and/or structure of their arguments to determine which of several functions you meant to call. It adds to the file size and complexity, reduces efficiency, and introduces imprecision, all of which could be very easily avoided by just giving different functions different names. For example, `.css()`. There are 5 different ways to invoke `.css`, and every time you invoke it, jQuery needs to analyze your arguments to determine which one you want. Which is idiotic, because you have a specific one in mind already and jQuery just had you write it down with the same name it used 4 times already. `.css` is especially bad in that a person reading the code doesn't even know whether it's a getter or setter until they've read through the arguments. This obviously isn't a deal breaker by itself, I only mention it because it seems to be symptomatic of their "efficiency last" mindset that also caused the significant problems.
I can't wait for generators to be everywhere. I've used them a bunch in C#, so handy, and they make for some clean code.
I just went to theguardian.com and Safari said jQuery loaded, along with about 20 other js files... and one of them took about 30 seconds to load. If you're a site that uses every social-media js 3rd party script to load widgets and pictures of friends who likefave+1tweeted things, there's not much harm in throwing jQuery on top of that pile.
Angular also includes a stripped down JQuery implementation called JQLite and will use real JQuery instead if it's loaded before angular.js. So that's a particularly bad example.
The function is run asynchronously. The length function will call your function when it's done retrieving things, and will let the code run while it does that. If you run code after your function has run, it will work. I recommend using the promise that the length function returns to avoid callback hell.
IntelliJ.
IntelliJ.
IDEA updates behind the specialized IDEs. Which makes sense. But yeah, I have one specialized and IDEA proper, each for different purposes.
I like giving JetBrains money because their products are beyond their dollar value. I wish I could say the same for Adobe. I think I'm still using CS3
So this is a higher-level cousin of d3.js?
Hey, man. For what it's worth, I run a [website](http://www.nevergrind.com) that has over 73,000 lines of javascript and I use quite a lot of JQuery. It runs fine. JQuery kicks ass, but I try to avoid it when performance really matters (frequently called functions). I use [Greensock](http://www.greensock.com) for my animations, though.
warning: your entire philosophy on software is about to get debunked. Seriously? You're on the internet asking a FOSS developer how he expects software to be written with that attitude? I know you couldn't know, but at least have some consideration for the fact that most paid software pales in comparison to the richness of it FOSS counterparts. WebStorm is an exception to the rule and MS Windows is a clear example of paying more for less. For instance, how much should it cost for your operating system to support PXE booting? Windows: absolutely no amount of money paid to Microsoft will get your windows system to boot over LAN. As in, "I know you paid $299 for your 'Enterprise' copy of Windows, but fuck you anyway." Most other i386/amd64 operating systems: It's expected in certain environments that PXE booting would be the most effective approach to solving certain problems and thus, that functionality is provided for free. How about ramdisks? Certainly at a minimum of $99 a license (for the shittiest version of Windows with arbitrary limitations imposed by a greedy bunch of d-bags [inspired by a born billionaire who said daddy's money isn't enough](http://en.wikipedia.org/wiki/Open_Letter_to_Hobbyists)), they could at least give us that right? MD's have been a thing in UNIX for decades, free for at least a couple. And no, while living at a fraction of the IRS's definition of the 'poverty line,' (a little over 20k for a single income, no deps) I can't afford the $49 for a license. I can barely justify a $3 can of pasta sauce on top of the $1 box of noodles that are supposed to get me through this week.
Networking is definitely the reason to go to an in-person conference. If you're in the Atlanta area and meet a few people who can help your career, the price is a bargain. The $245 is reasonable for typical conference trimmings like breakfast and lunch for both days, a swag bag, and an evening networking party. Also if they're paying travel expenses for out-of-town speakers that can add up pretty quickly. They say the event is being held at the [Cobb Galleria Center](http://cobbgalleria.com/) so it's most likely not a cheap venue either. Seems like they're going for a larger crowd and upscale sponsors. I don't recall seeing any tech conferences in the Atlanta area, in fact I can't think of any in the south at all other than [DevLink](http://www.devlink.net/). (There are some in Florida but that ain't really the South.) The prices at DevLink are only lower if you get the cheap tickets that don't include meals or the networking events. And of course it's Chattanooga which is going to be a less expensive place to hold a conference than Atlanta, but you'd need to pay for traveling there. 
Hey guys! I don't like this OS that costs money. So that means all software shouldn't cost money! QED! No. Logic doesn't work that way. Your distaste for Windows doesn't make webstorm an exception to any rule. Oh, by the way, I'm a FOSS developer myself. In fact there's a decent likelihood you're using my FOSS since you're on here... Hi! If you're a qualified software developer living under the poverty line and you're not dealing with extenuating circumstances with health, family, etc, then you've either chosen to be under the poverty line or you're doing something wrong. Lastly, while we may disagree here, if you ARE dealing with extenuating circumstances be it family or health issues etc then I sincerely wish you the best and I hope your situation improves. 
This is neat! Have you packaged it up for CommonJS usage?
Kind of confused, processing.js exists and is quite good. Not saying this isn't but the video makes it sound like there is no way currently to use processing on the web. IMO a better approach would be to not really compare to processing. Also that was some amazing enthusiasm I think this would be an excellent video on getting kids excited with doing things on the web, would be fantastic if you made a series of videos for kids. 
Not 100% true. The plugins for IDEA are not always kept up to date with the individual IDEs.
With regards for using the web to male games, you don't use the DOM for that. You would use the canvas element with WebGL. The Unreal Engine was ported to that stack. I agree with everything else though.
20kb merged into a single JS file for your site really isn't much extra weight at all though...
They have [an explanation on their Github page](https://github.com/lmccart/p5.js#how-is-this-different-than-processingjs). The short of it is it's "native JavaScript", and it "extends beyond canvas drawing to allow people to create, access and manipulate other HTML elements." Seems cool. I got really excited when I saw the slider, and when the circles started following the wind. Those things certainly are not too difficult to do without p5.js, but, at the same time, I had not really seen that sort of thing before today (save for in [Sean Fioritto's FlexBox videos](http://www.sketchingwithcss.com/flexbox/)).
The larger Pretty Diff application, which contains csspretty, is packaged for CommonJS (Node) and RequireJS, but the individual libraries are not.
Thanks for the link, that makes more sense, the video made it sound completely different.
I went to [Great Wide Open](http://greatwideopen.org/) which had 60+ speakers and 50+ events (so about 10x as much content) for which I payed $150 just a few months ago. That's much more bang for the buck. Also [API's and IPA's](http://apisipas.com/#eEiIk) where I've met a ton of local devs which was FREE except for the beer I drank(awesome). So yeah, in the big picture you're right, it's not that large a price to pay for some good networking -- but I've payed much less for much more and again this is the first conference of its kind in Atlanta, $250 to go to a convention center with no one around would be quite a disappointment. I would hope that my town's turnout would be huge but damn $250 for, at this moment, 6 events is not much considering the track record Atlanta has(at least for me).
Be careful with misunderstanding the terminology. Javascript doesn't have objects in the way class based languages do. In class based languages, objects are instances of a class. In Javascript, objects are simple lookup tables for properties that can be values, other objects, or functions (which are also objects... More on that below). For the moment, disregard your current definition of objects from other languages and consider them basically just hash tables or dictionaries. A collection of key /value pairs, nothing more. Nearly everything in Javascript is an object. Some exceptions are numbers, boolean, null, and undefined. Strings are an object. In fact, strings have a constructor function so they are a special kind of object (called a "function object") whose properties are attached to its "prototype" (a prototype is... Also an object which shares all of the shared between properties of a given function object. Quite literally when you instantiate two strings with "new String" the returned objects both have a prototype and it's not a copy, it's a reference to the same exact prototype object). It's gets worse, you can create a string with a string literal "like this" and never use its constructor function. This is a string that is an object, but because you didn't call the constructor it doesn't have a prototype. It is however still an object, because it has properties and you can reference it's characters like "I'm a string"[0] (oh did I mention arrays are just objects with numeric keys!). So my main point is, objects in Javascript are very different from any of the modern OOP languages (Javascript is not the only language to use this approach or prototypes though fyi). Therefore, your approach with them is going to differ from what you've experienced in php (and it should. Javascript is very powerful when understood fully rather than trying to hack around it to recreate what you are used to in other languages). A lot of people feel like it's becoming dated, and in some ways I tend to agree, but I'd still recommend giving Javascript, The Good Parts a Read or if you really want to understand Javascript on an extremely in depth level check out https://leanpub.com/javascript-allonge/read (but buy it too!) by /u/homoiconic (raganwald). Digest that, and you'll have all sorts of new perspectives on programming in general and be an order of magnitude above the level of the average Javascript developer. 
I'm a software developer, and disagree with the way you're addressing this person, and subject. The value of anything is, and always will be: the amount somebody is willing to pay for it. So, if somebody says, "I wish it were free", it's wiser to listen to their reasoning, rather than imply that they're ungrateful. This is especially true for software as you know very well that if people stopped paying for software, it would still get made. Humans would not sit idly and simply not have a development environment. Revenue is not the mother of invention, and open-source is thriving. For example, any mainstream browser is arguably more sophisticated than WebStorm, so should we pay for our browsers? Why not? When somebody proposed that browsers ought to be free, were they being ungrateful? How about Mozilla and their audacious open-source browsers? Did they cross some moral line by undermining others' ability to monetize their browsers? Also, this person is not asking for all software to be free. They want WebStorm to be free. Logic Pro X costs $199.99 which is far more than WebStorm, yet is anybody calling for it to be released freely, even amongst poor bedroom musicians? Why not? I'm a senior developer, so I can pick and choose which ecosystem I'd like to work in. In a big way, I am far more valuable to the ecosystem I work in, than they are to me. If I like Javascript more than Ruby, I can switch. If I want to switch back, I can. My success is not tied to an ecosystem, but an ecosystem's success is tied to my participation. In this way, I think major software developers like Apple, Google, IBM, and Oracle have got it right: Give away the IDE for free, to evangelize the ecosystem. Apple makes it's own in XCode, while the rest support projects like Eclipse and others. If you had asked the person requesting WebStorm why they thought it should be free, I would imagine that they have something like this to say about it: * I think the "Electronic Arts-esque" pricing model reeks of "DLC", and don't think it's fair to pay an additional $49 for each language I want the IDE to "support". * I think applications built with Java's Standard Widget Toolkit are ugly, and while they save the developers effort, the end result is not as good as a native UI implementation with native hotkeys. * There are so many open-source, or cheaper alternatives that do everything without charging you per ecosystem.
http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html
(![]+[]) = "false" [+[]] = [0] "false"[0] = "f" And so forth.
Check this out: [JSFUCK] (http://www.jsfuck.com/)
Resharper is just an annoying add-in? Do you even C# bro?
My entire point is that the IDE doesn't hold value like other types of software do, not because of some inherent technical difference, but because of value perception. Just as the browser is technically worthy of paying for, but is instead paid for by those that stand to profit from it's usage; so should the IDE be paid for by those that stand to profit from the ecosystem's usage. So, I'm not ignoring that they are different models; I'm criticizing that you suggest to the OP that all software ought to be paid for by end-users, and I'm criticizing companies that insist upon end-users paying for glorified text editors, instead of the companies that profit from the ecosystem's evangelism. It's a fair comparison, because it's two ways to achieve the same goal of monetizing IDE software, and I'm criticizing one as being superior in the case of IDEs.
God's work right here. I'd advise you to post it to /r/jquery and x-post here next time.
By virtue of the fact that there still exist many IDEs that cost money, and people buy them enough that the companies making them are still in business, your point seems to be objectively incorrect. Just because the guy I replied to thinks it's not worth $49 doesn't mean it's not. Many people are paying $49 and will continue to do so. 
why use $.each when you can use [].each?
I've not claimed that people are unwilling to pay $49 in the first place, and that figure is unfair in the second place. If I have to buy RubyMine and WebStorm to cover off on Javascript and Ruby; that's $100. If I want Objective-C with that? $150. Java? Forget about it. You have to pay $499 for Java. How about C#? $150 extra. So, let's start with $350 instead of $49 (since I'm certainly not willing to pay $499 to "get it all") if you want to be fair in this conversation, since that's the amount I have to pay to JetBrains for a development environment capable of handling the 5 languages I routinely develop in. Is this the future of IDEs that you support? Is the DLC/EA model something you enjoy in video games? If not, why here? I paid over $200 for JetBrains software last year (WebStorm and RubyMine commercial licenses), but this year I spent $70 to Sublime for an editor that has made everybody here more productive. Next year, the open-source alternative to Sublime, Lime Text Editor, is hopefully ready for me to pay $0 for my next IDE. My main question to you is, "If there was an open-source alternative to your main IDE that performed all the same functions, would you switch?" Of course you would, which is why the trend is toward FOSS, and not end-user paid commercial software. Edit: Turns out IntelliJ IDEA is actually $499, and ReSharp is $149, so I was very low in my original estimations for how much it would take me to buy all of the various "plugins" required for my typical workflow.
HTML normalizes whitespace. What you actually want are `&lt;br&gt;` tags instead of newlines.
Because i dont like a particular addin i dont code? Fuck off
what about the i?
And since you're going char by char, you can do a quick check to see if the next char is newline and then plop a &lt;br&gt; tag right in there. if(text.charAt(i) == "\n") docGetElById('screen').innerHTML += "&lt;br/&gt;"; else //do yo thang
nevermind, infinity. or something else maybe, but that would work.
Find something that evaluates to undefined, like accessing an array element that doesn't exist. Specifically here: [][[]] = undefined
[![]] = [false] [][[]] = undefined [![]]+[][[]] = "falseundefined" +!+[]+[+[]] = "10" (1 + [0] = "10") "falseundefined"["10"] = "i" The wonders of type coercion. Personally, I prefer type errors.
pretty cool
What am i supposed to think you meant? Resharper imo is more annoying than it is helpful. I prefer other extensions. How does not liking resharper mean i dont use c#? 
I have a feeling emacs saves me more time then IntelliJ would, yet it's free. That is, it's cost isn't in money, it's in time and skill invested. But that ends up being a good thing for an IDE, doesn't it? :)
NPM wouldn't be possible without github, either. They totally go hand in hand. There's probably been a few orders of magnitude more JS code written in the last 4 years than the previous 20 years (or whenever it came out). And node wouldn't exist without the V8 either, we have to respect these compilers. They're are probably some of the most interesting ones ever written..
Dude you are taking this way too seriously. Chill. I hope in real life you don't take offense to everything people say to you if you aren't clear on what they said. So you don't like Resharper, great! I'm genuinely happy for you. There are lots of us C# guys who love it, thus the sarcastic jab.
&gt;Yes? There's really no other way to interpret your comment than "the source code is bad". I disagree. All I read in it was "Understand the tool, and make your own judgment as both a user and creator of tools." 
Lots of my peers use both, but I don't have the memory for either shortcuts, or macros. I've attempted to memorize enough to "Get Stuff Done", but then I get caught up in the modal nature of vim and end up hating it because I forgot to get into insert mode. My peers customize their vim or emacs to overcome any criticism I've ever known about the systems, but they admit that it came at great initial investment of time. At this point, I'm pretty sure that if I invested enough time, vim could "click" the way it did with my friends, but I'm not compelled enough to cut my teeth on either vim or emacs, especially when Sublime Text does almost everything great (it's search feature is utter CRAP). One thing I will note though: Richard Stallman wears *two* wrist braces, and it would not surprise me to find that there's a correlation between that condition and emacs macros.
&gt;I don't think anyone chooses their library by reading its source code. I am actually surprised to hear this attitude earnestly expressed. 
I think this is the most comments I've seen on [r/javascript](http://www.reddit.com/r/javascript/), congrats!! Mentioning jQuery, it's like mentioning christianity on [r/atheism](http://www.reddit.com/r/atheism/). I mean, we've all done a few lines of jQuery at some point in our life, right? It was fun while it lasted, but once I started using it everyday, my friends and family started to notice, and it was dark time in my life.. I had to stop programming javascript for a month or two. Dabbled with ruby for a bit, but that ended quick after discovering Rich Hickey - [Are we there yet?](http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey), I had like a life-changing epiphany. And to this day, I've stayed clean from jQuery, and I'm *really proud* of myself. 
Care to elaborate? Libraries can be huge and they are made specifically so that you don't have to write all that code ... so why should you read all that code either?
What do you mean? Why wouldn't I use $.each?
I wish CFP's would be clear about potential travel and hotel reimbursements. I'm not going to bother writing a proposal if it ends up with me paying $1000 to speak somewhere. 
Mechanics don't manufacture engines from scratch, but they know every part of the car. &gt;The source doesn't really tell you anything about whet ever the library is shit or not. The source tells you _everything there is to know_ about the library. It is the inherit essence of the library. More philosophically, reading source code keeps you in the frame of mind that all libraries, all tools are code. It is an empowering perspective. Now I don't know jQuery's code inside out, but I know something of its organization and style. 
I haven't tried disabling user selection immediately, will try to check it out, but my prediction is that if something will be selected the menu will be invoked immediately. As for custom selection box, I don't think it's possible to modify some iframes (lots of iframe content) due to cross domain policy. 
The main reason I go to JavaScript conferences is to get inspired by people who are super passionate about it. There simply is no substitute for physically being there and talking to them. This is also one of the main reasons why I enjoy being an occasional speaker (besides the fact that I enjoy presenting).
Take Javascript Object for what it is - JSON decorated with methods. If you want to use inheritance, 'privacy' or create instances, you need to look into how Function works, particularly the prototype property and the new operator. 
&gt; The source tells you everything there is to know about the library. That's the the documentation is for, so you don't have to read the code.
It looks like reading the code is a boring activity that is better to avoid. This is just wrong. You should read way more than you write. The more you read, the better you write. Documentation can be partial, out of sync and even wrong. If you don't read the code you cannot say whether it is correct or not. You cannot contribute neither to the code nor to the documentation. Fail-fail.
I really don't even have time to read it, let alone contribute to it or its documentation. If the documentation is partial, the missing part is usually found on Stackoverflow, if it's out of sync that's too bad and I can't help it and if it's wrong I will probably notice it sooner or later. It's not boring activity at all, I wouldn't be working with code if I didn't like to read it - it's just waste of my time, I get nothing out of reading the source code of some library. I'm in no position to tell if the code in some library is correct or not, even if I have read it. People who contribute and make these libraries are far beyond my skillset and have years of experience whereas I am just getting into the industry (thought shout out to them as I have no idea how they even have time to contribute to these libraries). 
And now I'm about to do this to our code base and see who can help me debug a small problem I'm having, https://www.npmjs.org/package/grunt-jsfuck. 
You simply need to change `.innerHTML` to `.innerText`
The time spent on this thread would have been enough to dig into the source of a couple of small libraries :). If you are just getting into the industry, I strongly advice you to keep in mind that reading code is 100 times more important than writing code. It will make you a better programmer, where better programmer means one able to tackle more complex problems, and to solve easier ones in less time. Writing libraries (for internal/personal use or to give back to the community) is a natural evolutionary step. You identify recurring patterns and you factor them out in self-contained, reusable solutions.
I'm curious to know why you chose a factory instead of a service. Also would it not be better to store the api key as a value/constant?
JS isn't, but React is. And it's not like you can't just compile the code to plain old JS and then keep going from that if you don't like the 'lock-in' to JSX and work with the plain JS after. If your concern is of being 'locked into something by FB' - then using a framework made by them in the first place probably isn't a good spot to start anyways.
Protractor: https://github.com/angular/protractor
I use qunit + sinon on the client and server. For node wrote a small [wrapper](http://pastebin.com/jvs0CwRR).
On factory vs service, I don't see a lot of difference other than how they get instantiated (and therefore how you write the constructor function). I'm more of a functional guy, so I used the factory method. In a larger app tradeoffs between the two may become more relevant, but in this case it doesn't matter. Good point on the "value." Could have stored the API info that way.
Miško Hevery, the AngularJS creator, has a strong background in testing. His [homepage](http://misko.hevery.com/) has quite a few articles about it, including this [guide](http://misko.hevery.com/code-reviewers-guide/). He also has [30+ articles on Google's testing blog](http://googletesting.blogspot.com/search/label/Misko%20Hevery). 
Sounds like there are lots of options... it even looks like FWs like angular have some basic unit testing built in (from how I read it). I'll probably play with that and look into Jasmine + Karma since I have seen it come up a lot. How does grunt come into the mix here (if at all)?
I love specs, so I will explain it in spec-level detail. (Though some details like parsing, execution context, and `GetValue` are not mentioned in this comment, except in this sentence.) `alert((![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]);` ---- First, by [11.4.9](http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.9) and [9.2](http://www.ecma-international.org/ecma-262/5.1/#sec-9.2), `![]` (where `[]` is [an empty Array object](http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.4)) is `false`. `alert((false+[])[+[]]+(false+[])[+!+[]]+([false]+[][[]])[+!+[]+[+[]]]+(false+[])[!+[]+!+[]]);` ---- `+[]`, which is an unary `+` operator attached to `[]`, [is equal to](http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.6) `ToNumber([])`, which is, by [9.3](http://www.ecma-international.org/ecma-262/5.1/#sec-9.3), equal to `ToNumber(ToPrimitive([], hint:number))`, and by [9.1](http://www.ecma-international.org/ecma-262/5.1/#sec-9.1) and [8.12.8](http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.8), it is equal to `ToNumber([].toString())`. (`Array.prototype.valueOf` does not exist, and `Object.prototype.valueOf` applied to `[]` returns itself, which is not primitive.) `[].toString()` [is actually](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.2) `[].join()`, and since `[].length === 0` (again, read [11.1.4](http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.4)), [it](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.5) retruns an empty string `""`. Therefore, `+[]` is equal to `ToNumber("")`, which is, by [9.3.1](http://www.ecma-international.org/ecma-262/5.1/#sec-9.3.1), `0`. (A StringNumericLiteral that is empty or contains only white space is converted to +0.) `alert((false+[])[0]+(false+[])[+!0]+([false]+[][[]])[+!0+[0]]+(false+[])[!0+!0]);` ---- Since `0` is [falsey](http://www.ecma-international.org/ecma-262/5.1/#sec-9.2), `!0` [is](http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.9) `true`, and `+true` [is](http://www.ecma-international.org/ecma-262/5.1/#sec-9.3) `1`. `alert((false+[])[0]+(false+[])[1]+([false]+[][[]])[1+[0]]+(false+[])[true+true]);` ---- `false+[]` is evaluated by first converting each sides to primitive value, and since `ToPrimitive([])` is equal to `ToPrimitive([], hint:number)`, it is an empty string `""`. By [11.6.1 7-a](http://www.ecma-international.org/ecma-262/5.1/#sec-11.6.1), it is equal to `ToString(false)+""`, which [is of course](http://www.ecma-international.org/ecma-262/5.1/#sec-9.8) `"false"`. `alert("false"[0]+"false"[1]+([false]+[][[]])[1+[0]]+"false"[true+true]);` ---- `[][[]]` seems strange, but it [is simply accessing a property](http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.1) of an empty array `[]` with identifier name `[]`. (For example, `foo.bar` is equivalent to `foo["bar"]`. Try changing `foo` to `[]` and `"bar"` to `[]` too.) By [step 6 of 11.2.1](http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.1), [9.8](http://www.ecma-international.org/ecma-262/5.1/#sec-9.8), [9.1](http://www.ecma-international.org/ecma-262/5.1/#sec-9.1), and [8.12.8](http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.8), we can know that it is equivalent to `[][""]`. Since an empty array does not have property `""`, it is `undefined`. (Example: try executing `var o={'':42}; console.log(o[[]]);`) `alert("false"[0]+"false"[1]+([false]+undefined)[1+[0]]+"false"[true+true]);` ---- `true+true` is, by [11.6.1](http://www.ecma-international.org/ecma-262/5.1/#sec-11.6.1), equivalent to `ToNumber(true)+ToNumber(true)`. Again, `ToNumber(true)` [is](http://www.ecma-international.org/ecma-262/5.1/#sec-9.3) `1`, so `true+true` = `1+1` = `2`. `alert("false"[0]+"false"[1]+([false]+undefined)[1+[0]]+"false"[2]);` ---- [In](http://www.ecma-international.org/ecma-262/5.1/#sec-11.6.1) `[false]+undefined`, `[false]` is converted to string, and again it is equivalent to `[false].join()`. Since its length is 1 ([11.1.4](http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.4), it is an `[ElementList]` with single `AssignmentExpression`), it is effectively equal to `ToString(false)` = `"false"`. So `[false]+undefined` = `"false"+undefined` = ([11.6.1 7-a](http://www.ecma-international.org/ecma-262/5.1/#sec-11.6.1) again) `"false"+"undefined"` = `"falseundefined"`. Likely, `1+[0]` = `1+"0"` = `"1"+"0"` = `"10"`. `alert("false"[0]+"false"[1]+"falseundefined"["10"]+"false"[2]);` ---- Although many people (including myself) uses `"foo"[2]` instead of `"foo".charAt(2)`, nowhere in the ECMAScript 5.1 Spec specifies this behavior. (`"foo"[2]` should [get](http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.2) property `"2"` of `"foo"`, but as far as I know String objects does not associate its characters with its properties.) Let's assume that `"a"[b]` is equivalent to `"a".charAt(b)`. `alert("f"+"a"+"i"+"l");` `alert("fail");`
Looks nice, but unless I'm missing something simple it doesn't appear to be displaying anything on the output panel. It's also not using the entire height of the browser. Edit : Appears to be working now.
Fair enough. This is our first year giving this conference. We are trying to raise enough sponsorship money to help assist speakers with travel/lodging, but it's very dependent on how much sponsorship money we can raise. At this time, we cannot guarantee that it will be taken care of, as much as we'd like to. We are a 501c3 and operate completely on donations/sponsorships to break even. None of the organizers/staff, etc is being paid. All funds go towards food, venue, printing costs, etc. Sorry that these details were not clear on the page. I'll update them to give people a better indication. Cheers. 
I've been to enough conferences and talked with enough organizers to know how hard it is, so I don't blame you for not guaranteeing reimbursements. It's just that I've been disappointed a couple of times in the past by conferences that were unclear about it. Best of luck getting everything together!
Wait, doesn't meteor share code between the client and the server? Does that mean you are technically running untrusted code on your server?
As an occasional speaker that (over the years) has spent a lot of money to speak at conferences I wholeheartedly support this.
The oppossition would be that you get to speak, making a name for yourself. Getting job offers and having younger developers more informatic.
I beg to differ. There are very few projects that need the supervising of a very well known speaker, and they will not hire the speaker because they've seen it on that particular event. For example if an Ember project requires the help of any of the CORE contributors to the Ember project, they will find a way to hire them without the need to see them at a conference. On the other hand, the projects that are approachable by "regular programmers", most of them will find local talent. Or somebody over the internet that has good recommendations. There is absolutely no reason for anybody that has a project in mind to wait for the "right speaker, at the right conference". As a speaker the most plausible situation is to get a mail like: "Hey, I've seen you 4 month ago at WhateverJS and I have a very interesting project for you". 
While that is true, the amount of time, work and money that goes into it is completely disproportionate. The only meaaurable benefit is a lot of new Twitter followers...
I've never spoken at a conference, but I get those mailings all the time on LinkedIn. It's getting to the point where I'm thinking about shutting down my account.
I'll need to read it more in depth later, but over all it seems pretty well done and well explained. I already use Angular quite a bit, and looking to start experimenting with D3 - so a few things in here are useful for me. I like how you explain the scopes in directives - when looking at the top-tag directive was about to comment "why didn't you create an isolated scope?" - then you go on to explain scopes - then give an example with the artist directive. Although, if your wanting the directives to respond to the window re-size event - why not inject $window into the directive - and simply handle the event there instead of using it in the controller, then broadcasting it via $scope.broadcast - that way you can use the directives anywhere you want, and not need to remember 'oh, I'm using it in a new controller - better hookup/broadcast the resize event'. All around though, fairly well done article - well written and pretty easy to follow. 
The problem you're experiencing with jQuery is that you try to read and write from the dom within the same frame. This is how you fix it: http://wilsonpage.co.uk/preventing-layout-thrashing/.
I've heard of that before, but that was a really clear definition and solution to the problem so thanks! :)
Please, no.
Why not? It will be free to get a subdomain even post-campaign (if we reach the goal) so you can be smug now and we'll still give you a domain!
Could someone remind me what this has to do with JavaScript?
My friend, you are making some confusion with primitives and compound values in javascript (or you failed to convey the concept in a clear way). Primitives have no prototype chain (they are not objects). Javascript uses `auto boxing` when you try to lookup properties or invoke "methods" on primitives types (`boolean`, `number`, `string`). The bare value is still a primitive, but it gets temporarily boxed into the corresponding object (`Boolean`, `Number`, `String`), so that you can use its prototype.
On their beta site, the social media junk gets loads later on
Btw, if you buy trough name.com it's only 937.50$ instead of 1900$. https://www.name.com/domain/search/?domain=javascript.ninja&amp;tld=ninja
Shit son! You're a boss!
Right, I thought they were called macros, but same difference for me. I don't want to remember the keys in a chord, nor do I want to remember a vim shortcut. Evil looks neat, but again; sublime does almost everything for me, and I'm not experiencing any friction from my editor at the moment.
Or just use the "pre" html tag http://jsfiddle.net/r5k3btzd/13/ Has the added benefit of defaulting to a monospace font! 
EDIT: so apparently I misread your comment, sorry for that Yeah, this is user input being executed on the server. Wouldn't recommend it ;-) I hope he runs some kind of sandbox. 
Cleaned it up further for you by getting rid of the tabbed whitespace in the subsequent lines: http://jsfiddle.net/r5k3btzd/14/
Grunt is a task runner. You'll use it for build automation, including running tests. There's also Jake (better tool, but doesn't have the rich plugin ecosystem) and Gulp (uses a "streaming" API that some people like).
Hi, I made [Jeet](http://jeet.gs). I'm speaking at http://conf.devworkshop.org (Sept - Indianapolis) and https://futureofwebdesign.com/nyc-2014 (Nov - NYC). I'm CouchSurfing for rooms and paying for my own gas. I figure it's a way to get my name out there and possibly land a really nice remote job. The downside is I'm pretty poor (see: really poor) and don't have a lot of time to take away from work to do these. I'll keep doing them regardless because I like coming up with crafty ideas and trying to get them popular. You guys should really see my talk in Indy. I'm unveiling *something* pretty cool there.
You can load the `pdf` file via `xhr` as a `blob` and, once loaded, inject into an `&lt;iframe&gt;` or an `&lt;object&gt;` creating an object url from the `blob`. Monitoring the download progress with `xhr` is trivial. The same-origin policy will apply, and it will work only in IE10+ (and in every other modernish browser). To extend compatibility you can use the old `overrideMimeType` hack, and work with binary strings and data-uris.
What? Sorry I may be misunderstanding what you're saying but it sounds like its completely unrelated to what psayre23 is asking. He isn't saying its a bad thing that code is shared, he isn't asking how its shared. He's asking the author of the website "meteorpad.com" if they are running code which users provide on an actual server (or if its being emulated clientside somehow). 
I see. Apparently I misread. Thanks for clearing that up.
Hmm, maybe in specific situations, when better to write function than try to write big and hard regexp? 
Except in your function you are pretty much going to write regex in the end anyway.
I appreciate the response. Is there a recommended approach to handling this? As of now, I'm simply testing for the inputted date's format and, if it's ISO-8601, I offset its time by the local timezone to get it re-aligned to midnight.
will this work in non-HTML5?
Where is the input coming from? Are you in control of the UI?
&gt; Although many people (including myself) uses "foo"[2] instead of "foo".charAt(2), nowhere in the ECMAScript 5.1 Spec specifies this behavior. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Properties_2 I vaguely remember that that page used to say that *N* is a non-standard property. I also can't find anything like that in the spec though.
Thanks! I like your approach better than mine. Edit: This doesn't work. If you are in US Daylight Savings and enter a date that occurs during US Standard Time, the time gets shifted one hour ahead.
Remy himself has a lot to do with JavaScript (~~JSFiddle~~ *JSBin*, Introducing HTML5, etc). That blog post, however, does not. Not really sure where something like this should go though. There aren't that many speakers. It's a very small niche, really.
You didn't point out what I think to be the most interesting part of this snippet! Yeah, a semicolon is inserted after the return before the object literal, but how is an object literal by itself like that syntactically valid? Because it's actually a block with a statement labeled 'bob'!
&gt; - the content briefly scrolls by one line before the textarea expands. yeah, this is an issue with the textarea itself. there are some workarounds i could probably do to lessen this effect, but because it has to detect height changes, it has to do this for a second. a thought is creating a "buffer", maybe adding some characters to the end of the clone content so that the textarea grows a bit before it's time. &gt; - while you keep pressed the backspace the textarea doesn't shrink. it does when you release the backspace, though. i think that's better UX anyways. &gt; - the jQuery dependency reduces its utility. fair. it's the fastest way to build this utility, though. if you'd like to create a non-jQuery version, submit a pull request :)
No mention of variable hoisting? Usually these "i'm blogging these things because i'm not used to JS" posts mentions hoisting somewhere.
You can just use [toUTCString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString). &gt; new Date('2014-08-01').toUTCString() "Fri, 01 Aug 2014 00:00:00 GMT"
Demo link now working in mobile chrome
"The weird parts" are a lot weirder than this
Contrary to popular belief (...), what happens here has nothing to do with ASI, and everything to do with how statements are terminated in js. http://www.ecma-international.org/ecma-262/5.1/#sec-12.9 &gt; 12.9 The return Statement &gt; &gt; Syntax &gt; &gt; *ReturnStatement* : &gt; `return` ; &gt; `return` [no *LineTerminator* here] *Expression* ; 
&gt; JSFiddle JSBin 
 new Speaker('remy') !== new gettingPaid(1000000);
IMO, this post points out the good things in JavaScript. If you use them correctly, they are quite useful. Just my opinion tho.
So I was thinking "why wouldn't a plain object literal be syntactically valid". Looking at the standard, an object literal is a primary expressions (ObjectLiteral), and an ExpressionStatement is a statement which basically just consists of an expression. Seems like it shouldn't be a problem. I mean, I'm pretty sure pretty much every other kind of literal works fine as an expression statement. After all, this is the whole reason "use strict" doesn't cause any problems for older browsers that don't support, or even know of the existence of, strict mode. But wait: &gt; NOTE: An ExpressionStatement cannot start with an opening curly brace because that might make it ambiguous with a Block. Ah. I hadn't considered that, but it makes sense. Since I never use plain object literals as expression statements (why would you!?!), I don't think I would have stumbled across this otherwise. I learned a little something today, so thanks stranger!
Hey, I wrote the same thing a few months ago :) http://www.reddit.com/r/javascript/comments/19bulc/just_discovered_that_new_date20130301_new/ Here's why: http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html And here's what I propose you should use http://momentjs.com/ 
Maybe he meant weird in comparison with other programming languages? I didn't get the vibe that he was criticizing the language; rather, he was exposing common pitfalls to newcomers, specially with experience in other languages. It was well written and kind of entertaining. I'll recommend it to people learning JS.
Thank you! Please help spread the word if you don't mind. We'd love to have a very diverse group of speakers and topics. Thank you so much for taking the time to consider submitting a proposal. Maybe next year we can fly you out. :)
Actually got bitten by that one trying to use [the Revealing Module Pattern](https://carldanley.com/js-revealing-module-pattern/). doh. 
It is mentioned in the video which the post is a quick summary of. Not sure if it was worth explicitly pointing out?
yeah this article would go better in /r/learnjavascript 
I like how that works so I tried to put the pre in a div (the screen div will be used later as a wrapper for an "os") except that I can't seem to get the div and body to fit the whole html element which is irritating. it is starting to look pretty good now tho [http://jsfiddle.net/tourn171/r5k3btzd/20/](http://jsfiddle.net/tourn171/r5k3btzd/20/) even added a blinking _ 
*JavaScript - The shitty developers.* *Chapter I: Garbage In - Garbage Out.*
'It’s possible to “fool” instanceof when working with more advanced idioms, or if you’re the kind of malicious troglodyte who collects language corner cases and enjoys inflicting them on candidates in job interviews." That's fucking gold
Yeah, you're right, I didn't describe the syntax well. When I said "an object literal by itself" I meant without wrapping it in parens, which as you discovered is usually required to parse it as an object literal. Interesting(?) aside: when you come across a brace in statement context it's always a block because [block statements have higher precedence than expression statements](http://ecma-international.org/ecma-262/5.1/#sec-12). And if you think about it, you couldn't really put ExpressionStatement above BlockStatement because it would be impossible to make a block (whereas with the current grammar you can use parens to create an ExpressionStatement and nest any Expression inside of it).
Browser compatibility isn't perfect. [Source](http://caniuse.com/form-validation)
http://jsfiddle.net/r5k3btzd/22/
Now that's some fine grammar pedantry, not enough of this around here! ~~But I think it just depends on what you mean by ASI. If you're talking specification language, yes the ASI algorithm doesn't affect the return statement. But if you're talking about the phenomenon that is semicolons getting automatically inserted for you, the restricted productions probably fall under that category.~~ Edit: Actually, return with a line break after it does require ASI if I read this correctly. With the restricted production above, you have only two options for parsing: return followed by a semicolon, or return followed by an expression without a line break in between. But what happens if there is a line break in between? According to just 12.9 it would be a syntax error. This requires [the first rule of ASI](http://ecma-international.org/ecma-262/5.1/#sec-7.9.1) to kick in and insert a semicolon, allowing us to parse the naked return as the first alternative for a ReturnStatement. It's actually the [no LineTerminator here] restriction that causes ASI to kick in.
Intriguing library! I did a bit of stochastic work back in grad school. 
Probably not relevant to web devs much, but it is quite intriguing for those that use JS for data and visualizations. In a nutshell stochastic processes helps us understand risk and to anticipate a range of outcomes. 
&gt; "These are weird things in javascript". Nothing truly weird if you know javascript. Something unintuitive is not magically intuitive because you learn why it's that way. Javascript is weird because it's different than most languages and having to know javascript (meaning having learned why) is cyclical logic. Completely useless.
Sorry, wasn't trying to correct you or anything. I just read what you wrote and thought "surely that can't be true". Then I looked into it, found out you were right, and I thought the reasoning was interesting. So I expanded a little on what you said, just in case anyone else wanted more of the back story. That's all. This is one of those things, where I can't think of a single reason why anyone would ever realistically want just a plain object literal as an expression statement, so it's just not something I've ever given any thought to. Also, I don't find myself using labels, like, ever, so that was another interesting surprise. I had kind of forgot that they existed, to be honest.
I'm not exactly sure how we disagree here, except that I didn't mention boxing which is an implementation detail that would only further confuse the situation. Iirc the only type I mentioned with a primitive that you could be referring to is string, and indeed if you create a string with the string constructor function you get an object with a prototype (see here http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.5) With a literal you get a primitive (and let's not even get into underscore underscore proto underscore underscore given the context of the question) you get the primitive. Either way, I didn't intend for this reply to be an exhaustive explanation of the type system, prototypes, functions or anything else. Just a simple statement of caution . In fact, I was a bit rambly intentionally to show that looking at it from the perspective of a class based language is not a dead end, but the wrong direction entirely. I also, therefore provided exhaustive resources. That being said, I don't believe I said anything that was strictly incorrect (definitely point it out through the spec, I have a tendency to say things unclear at times so that will help others), although some of it may have been oversimplification. My next suggestion (in most cases) for the op would be that after relying on these nearly canonical resources to get comfortable, thoroughly digest the spec. 
My favorite [part](https://github.com/fitzgen/wu.js/blob/master/wu.js#L598): /* * Number of chambers. */ wu.tang = { clan: 36 };
Is site B yours? or a 3rd party's site? Once you have a secure ssl connection it should be fine, but unless you control site B, you can never be sure of what happens to the data once it leaves your site. CORS requests by nature are risky and open the gate for all sorts of sketchy malware which is why you have to jump through so many hoops to make them work. 
so just kill the min-height then and it fixes everything. wth
If both sites are yours there is no reason to worry so long as you are doing it through ssl. Just make sure you are setting strict CORS specifications in your headers. CORS sucks to work with, gl :)
&gt;use coffeescript for testing Sweet now I have a reason to use coffeescript.
I don't buy the "Time you spent working on slides could be spent on another project" as justification that it's costing you money. I get the idea of opportunity cost, but here's the deal. I'm not taking my presentation time away from another project. I'm taking it away from other leisure activities. For example, I will probably spend a couple hours this weekend wrapping up a presentation for a conference next month. But I have ZERO side projects right now. Why? Because I don't want any. I'm taking away from watching some netflix or hitting the gym an extra time. Secondly, I will wait to see if this pays out, but I parlayed speaking at a few conferences into becoming a Pluralsight author. I just signed the agreement for my first course. If that pays off, then that's directly related to speaking at conferences. Finally, I target conferences that I would like to go to anyway. In some cases, I'll be going to the conference regardless of whether they accept my topic or not. Are you going to get rich speaking at conferences? No. Is that why most of us do it? No. Personally, I enjoy speaking. It is fun for me. If it wasn't, if it was a chore, I wouldn't be doing it, and a conference covering my expenses wouldn't change my mind.
they did at one point. but everything i was doing wasn't working so i was kinda tooling around with it a bit before landing it where it was at. seems to work now though. maybe it was because html and body had min height and width
I was hoping for weirder parts. I hadn't ever seems this before though: function sum(first, second) { first = first || 0; second = second || 0; return first + second; } Is this a good way to do default params? Is this method called something?
Native is always faster than a library. 
it doesn't necessarily, though? function foo (){ } will exist in the same scope as var foo = function (){} it just names it (for stack traces) and hoists it to the top of the scope.
which is why i mentioned shims and polyfills.
Oh yeah totally. I'm aware of the existence of the things it mentions and appreciate that its doing maths stuff I don't understand. I just hoped for some cool examples that might help me understand the maths. The wikipedia page for brownian motion will probably give me a headache. Some JS using an implementation of it may actually let me understand it.
First step is to have a good reason. Second step is to be able to articulate said reason. Perhaps in response to this comment.
You are my mind. For almost the exact same reasons you've outlined above I've been migrating my workflow away from IntelliJ products. Instead of Sublime Text I've moved to Atom, though. With the introduction of a React-based editor its become pretty fast. Not as fast as Sublime, but fast enough for me to use on a day-to-day basis.
It's a common idiom in Perl5; i'm sure opinions vary as to whether that's a good or bad sign. :-)
That's the thing: there is no real difference between "people who contribute and make" libraries and you, except _maybe_ experience. And at some point you learn to approach your code as if you're writing a library for other people to use, whether or not other people are actually going to use it. It drives you to organize your code and therefore your thoughts on the code you're writing. It is uncommon to simply decide to make a library one day. Most libraries grow out of an attempt to solve the problem directly in front of someone, and the developers involved consciously made the code reusable for their _own_ purposes before making it useful for others. I'm not necessarily advocating that you go out and read source code for days on end instead of writing the code you're presently focused on, like mikrosystheme might appear to be advocating. I'm just saying that if there is something beyond your skillset in a library, the fastest way to learn that skill is to read the source code of that library. And you have no reason to think of your own code as inherently inferior to that of a published library, outside of simple effort. 
http://www.jsfuck.com/
What is meanstack? 
Written by someone who just discovered the quarks in the language. 1/10 
Lol, who doesn't love Perl?? I think I'll start using it and see if the other devs grab their pitchforks. Edit: word
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Quark**](https://en.wikipedia.org/wiki/Quark): [](#sfw) --- &gt;A __quark__ (/ˈkwɔrk/ or /ˈkwɑrk/) is an [elementary particle](https://en.wikipedia.org/wiki/Elementary_particle) and a fundamental constituent of [matter](https://en.wikipedia.org/wiki/Matter). Quarks combine to form [composite particles](https://en.wikipedia.org/wiki/Composite_particle) called [hadrons](https://en.wikipedia.org/wiki/Hadron), the most stable of which are [protons](https://en.wikipedia.org/wiki/Proton) and [neutrons](https://en.wikipedia.org/wiki/Neutron), the components of [atomic nuclei](https://en.wikipedia.org/wiki/Atomic_nucleus). Due to a phenomenon known as *[color confinement](https://en.wikipedia.org/wiki/Color_confinement)*, quarks are never directly observed or found in isolation; they can be found only within [hadrons](https://en.wikipedia.org/wiki/Hadron), such as [baryons](https://en.wikipedia.org/wiki/Baryon) (of which protons and neutrons are examples), and [mesons](https://en.wikipedia.org/wiki/Meson). For this reason, much of what is known about quarks has been drawn from observations of the hadrons themselves. &gt;==== &gt;[**Image**](https://i.imgur.com/ApwUMuR.png) [^(i)](https://commons.wikimedia.org/wiki/File:Quark_structure_proton.svg) --- ^Interesting: [^Quake ^Army ^Knife](https://en.wikipedia.org/wiki/Quake_Army_Knife) ^| [^Quark/](https://en.wikipedia.org/wiki/Quark/) ^| [^Quark ^\(Star ^Trek)](https://en.wikipedia.org/wiki/Quark_\(Star_Trek\)) ^| [^Quark ^\(dairy ^product)](https://en.wikipedia.org/wiki/Quark_\(dairy_product\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjlba75) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjlba75)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
What about SVG? You can easily make all kinds if shapes and use either javascript, CSS Transitions or CSS Animations to bring it to life. Also, if you're looking to create a multiplayer game, take a look at [Meteor](http://meteor.com). 
&gt; Good for interview questions. No.
The following returns `'a'` which is exactly what one would expect, isn't it? (function() { var foo = 'a'; (function(foo) { foo = 'b'; })(foo); return foo; })();
Reminds me of when people bring up the "`{} + {}` is `NaN`" example from the wat talk, which by the way is a bit misattributed since the first `{}` is actually an empty block, and what follows it is an expression statement with a unary `+`. Hence why the behaviour differs so much from `[] + {}`.
oops, sorry
Mild yes. Not as main course for the likely job activities but these kind of edge case questions are is a nice way to see if you're dealing with a language enthusiast, also to gauge how the interviewee handles and talks about abstract problems.
How would a `return` change anything?
It's a feature of some loosely-typed languages, where short-circuit operators return the _[last value](http://en.wikipedia.org/wiki/Short-circuit_evaluation#Support_in_common_programming_languages)_. This yields some interesting expressiveness, take for example: function a() { var op; if (x === 0) { op = 'zero'; } else if (x &gt; 0) { op = 'gt 0'; } else if (x &lt; 0) { op = 'lt 0'; } return op; } And now, abusing this feature: function b() { return x === 0 &amp;&amp; 'zero' || x &gt; 0 &amp;&amp; 'gt 0' || x &lt; 0 &amp;&amp; 'lt 0'; } Use sparingly or your coworkers will hunt you down ;)
Cool project. But the link to the Live demo is broken, it redirects to domain selling page of http://www.buildingsky.net/ Maybe you can push your demo to the github page of the repo.
Oh wait, it doesn't. Well, there you go. It's just a blob of confusion to trick people.
The questions about closures, scope and how the function keyword works are good. For the questions about abusing operators and relying on type coersion, the correct response in interview situations is something like: "I don't know for sure, but that doesn't matter. The code is to cryptic and stupid. I wouldn't write code like that, and I wouldn't allow it through a code review either." When I see little bits of code like this in JS projects and libraries on github, I think "possibly talented, but immature". The author can use the language but hasn't figured out that programs should be written so that people can read and understand them. That is prio 1. 
Yeah, the parameter `foo` of the inner function shadows the outer `foo`. But you didn't pass in a reference to `foo`, you passed in the value which the outer `foo` contained at this point. If `foo` would be an object (with mutable state) you could do stuff like foo.a = 2 in the inner function and the outer `foo` would've changed.
Nope. Try it: function global(){ function not_global(){ console.log("Not global"); } } (function(){ function not_global2(){ console.log("Not global"); } })(); global() // No problem not_global(); // Error! not_global2(); // Error!
I did not know this worked: (function() { foo(); function foo() { console.log("bar") }; })() Is there some special reason why the function is defined before it is ~~used~~ defined?
We struggle with this at work, where I use marionette+backbone. Generally we try and keep our models as pure as possible...but we can't help but dirty them up sometimes. Managing state in backbone-based apps can be a bit of a pain because of all the explicit binding of events/commands/etc that are necessary when keeping an application modularized. It is honestly one of the weaker aspects of backbone development IMO (which is unfortunate).
Hoisting
Really cool! I remember I need this lib on some project but when with Pixi.js instead because webgl-2d was kind of abandoned.
Thanks for the term! Now I just want to know the reason it exists. ;-) 
don't tell the Russians.
Naaaaaah.
Java is a terrifying tool to use in my opinion, especially websites written in it.
Sure, but besides knowing the good practices it's a even better sign if they can describe why the best practices are good and why the bad practices are bad. And the way they do this shows more about them too. Also good if they mention a practical case where it has bitten them (shows experience, learning, reflection etc).
You're missing the point. These snippets are are to show if you have a strong understanding of the language. I'm not necessarily saying that these are best practices because they obviously aren't. A JavaScript expert knows to never use some of these snippets in production, but understands what I'm trying to get at.
This is exactly what I was trying to demonstrate by saying these can be interview questions.
For recursion
Which are also libraries ;)
For details about what's new, I wrote a blog post: http://danhough.com/blog/interfake-1-9 A lot of people who've starred it and helped draw contributors to improve the project came from this subreddit, so thanks very much /r/JavaScript!
100% agree. I look back on so of the masterfully complex crap I wrote because and cringe since i could have accomplished the same thing with simple well written stuff. Cool ways to accomplish things can be fun to play with, but for the sake of every one who may ever touch your code: keep the unneeded fancy shit out.
Consider the MVP pattern for these issues. The end of this article http://addyosmani.com/blog/understanding-mvc-and-mvp-for-javascript-and-backbone-developers/ discusses it somewhat and there are definitely more online in regards to backbone. Simply stated, the goal is to use presenters to proxy communication so that your view can focus solely on event binding and Dom manipulation (passive views). I've found this to be very effective and to fit in really well with some of the other common patterns for large scale single page apps like service busses. There is another great article on the two that I'll try to dig up when I get home. 
I stumbled across this a few weeks ago and was rather amazed. I stuck it into my tile engine and the only issue it faced was the particle engine I built. It lacks the ability to do gradient fills currently and radius ones (I'm in bed so trying to remember). Having done a year of webgl stuff at university 7 years ago, I thought don't worry guys I got this. After a few hours I rage quitted. I'd love to help out, I don't think I have the needed webgl abilities though. 
If you're using Marionette to extend your Backbone views, and you just want to expose some computed properties to a template, you can add a serializeData method to do that. If you're not using Marionette - it is really nice and actually makes it *easier* to use Backbone views IMHO. 
When you detect a selection do this to remove the element from DOM: var el = document.getElementById("first_question"); el.parentNode.removeChild(el); Edit: I see you want to just hide them using CSS. You are currtly looping over an array of items to hide dom elements. Problem is, your array is filled with answers not DOM element IDs.
True it's a waste of time because there's no practical use but if you understand most of these edge cases and can elaborate on them, then in my opinion that would be pretty impressive. Knowing the bad parts is just as important as knowing the good parts.
Yep, you've got it! The shorthand exploits the fact that undefined is falsy, so it's a little less verbose.
The current code is pretty ugly (stuff like overriding `canvas.getContext`), and a 1000+ line file looks impossible to maintain. If you want to revive the project, here's my suggestions: - start again from the ground up, using modern coding practices (i.e. no monkey patching, no brutal hacks, etc) and small modules - use [stackgl](https://github.com/stackgl) modules rather than re-inventing the wheel when it comes to stuff like shader compilation, filling buffers, etc. same with [matrix math](https://github.com/stackgl/gl-mat3), [color strings](https://www.npmjs.org/package/color-string), etc - move shaders to their own .glsl files; bundle them into the code with Browserify or Webpack - using [glslify](http://mattdesl.svbtle.com/glslify) would be a good idea if you find yourself re-using shader code. Also, you can start publishing small GLSL snippets so that others can use them without your library. If you do the above steps you'll end up with an extremely thin library that is much easier to maintain, and much easier for contributors to improve. Even better (rather than trying to stick everything in another big "framework") would be to just build more stackgl modules that have very clear purposes. Like `gl-radial-gradient` or `gl-line-renderer`, etc. This way everybody benefits with no vendor lock in. 
Except they aren't. I don't have to learn new APIs. I don't have to restructure my code. They just make stuff work.
Cool cool, always at least 10 ways to get something done, this is a cool little trick. keystrokes-- == happyDev.
'first_question' never gets added to hide array. i pushed it in on line 12 before appying `resetOpt` and it seems to do what you want.
The purpose though of webgl-2d is you have an existing canvas project, you pull in this file, change the context from "2d" to "webgl-2d" and everything works. It purposefully does this ugly monkey patching/brutal hacks so that you don't need to use a framework or write alternative code to have both Canvas 2D and WebGL support. 
Let people use brutal hacks in their own application code, not in your library code. Making it so that everybody who uses your library is stuck with brutal hacks is a really bad idea. 
Detailed explanations are to come. Any particular ones that are troubling you?
While that is true, the idea behind this is you code for Canvas 2D and it handles outputting it all in WebGL. As soon as you have to write differing code from what you would use in a vanilla Canvas program it's whole reason is defeated (in the case of what this is attempting to do/be).
[Code School](http://www.codeschool.com) does an excellent job of explaining Hoisting and its impact on your code. Specifically, they cover it in their JavaScript Roadtrip Part 3, level 3. It costs $29/mo to get access to all their lessons, but they have the best presentations of JS, Git, and CSS/HTML that I've encountered.
Trying to understand exactly what you mean. Would you mind putting the exact code? Total beginner. Really appreciate your help here.
The mean stack is the combination of mongodb, express, angular.js, node.js. it gives let's you develop fullstack js applications....
Could this theoretically be used for a real production api?
This is great. I got it to work, but then the answers to the other questions don't work. Am I missing something?
Only if the data you're serving is static. For example, some kind of informational app for an event where the information doesn't need to change. But for other purposes, I doubt it. I'd like to see someone try, though!
I'm afraid your example is not possible. For functionality like that I'd recommend a library which aims to be a complete package for web apps, such as express, which is what interfake uses behind the scenes. In fact, the interfake interface (yep) is inspired by express. As for random delays, that is in fact possible, although you specify it in terms of a min and max. Try interfake.get('/test').delay('50..300') to get a response between 50 and 300 ms. That was a feature implemented by one of the wonderful contributors :)
I should mention I have considered making body responses slightly more complex by allowing them, or parts of them (eg a single value) to be based on a function return value which would probably do for many situations and also increase the dynamism of a given API.
Interesting stuff! I am not yet familiar with React so I had to look up the Flux pattern. If you're interested, go here: http://facebook.github.io/react/docs/flux-overview.html To the repo author: might be worth explaining flux in a couple of sentences, or linking to something explanatory. Good name, too!
Heck yea, dude. This is great. The current way of spinning up a server with a task manager prior to running tests is sloppy, and this makes things much cleaner. Thanks so much!
Hoisting is the reason that linters like JSLint complain about using functions before you declare them. Javascript typically hoists variables to the top of its scope, but is does not hoist their definition with them. e.g., function () { for (var i = 0; i &lt; 10; i++) { var x = i * 10; } } Is really this after the interpreter gets through with them: function () { var i = undefined, x = undefined; for (i = 0; i &lt; 10; i++) { x = i * 10; } } For whatever reasons function *declarations* act differently, not only is the variable name hoisted but it's definition is as well function () { foo(); function foo () { console.log('bar'); } } is actually function () { function foo () { console.log('bar'); } foo(); } What's more confusing (but if you understand the principle above, quite obvious) that function expression definitions act exactly like variable definitions function () { foo(); var foo = function () { console.log('bar'); } } is actually function soSomething() { var foo = undefined; foo(); foo = function () { console.log('bar'); } } And on the second line of the function `foo()` will produce a runtime error complaining that foo is not a function. This is why most consider it best practice to always use function expressions over declarations and always define them before using them. This produces the most consistent code and relies the least on "magical" features of the language that can result in confusing bugs. Since JavaScript doesn't have block scoping (yet) it's always best practice to define all variables at the top of their scope.
I did not know about the thisArg in native methods although I have been using lo-dash with the thisArg.
the first one map[foo] result
Honestly this is a problem with all MVC implementations. Our team has an app built on .Net MVC and our model class files actually contain Server Model and View Model classes. Then we wrote constructors for each one that converts the other. That way the controllers just call constructors and pass along results. Another team works with Backbone; I don't know how they deal with these issues but I suspect it's done in the view logic, since they're writing to the same services we are.
I find most of the hate is coming from angularjs communities. I love angularjs but I can see that 90% of jQuerys features don't fit into the "angularjs" way of thinking. I don't care though, I am a very lazy javascript coder and like as few lines of code as possible in my projects at any cost. What's good for me usually ends up being good for the client.
https://mkpartners.secure.force.com/services/apexrest/careers?firstName=foo&amp;lastName=bar&amp;email=foobar@example.com and just stick it in your browser. I hate to say this, but if that's too hard I'm not sure this is the right job for you.
Try https://mkpartners.secure.force.com/services/apexrest/careers?firstName=Ima&amp;lastName=Noob&amp;email=ImaNoob@gmail.com in your browser. 
 (function() { var foo = new Object(); // {} var bar = new Object(); // {} var map = new Object(); // {} // new Object() returns and empty object console.log(new Object()); // {} // the toString() method is called behind the scenes for object keys console.log({}.toString()); // "[object Object]" map[foo] = 'foo'; // map["[object Object]"] = 'foo' map[bar] = 'bar'; // map["[object Object]"] = 'bar' // since it's the same key, the last value is the one that get's set for that key return map[foo]; // "bar" })();
The versatility and performance of the JVM continues to impress me. 
&gt; Both in node and in a browser using this in a function that is not called with new references the global scope… Not true. In a function *this* refers to the caller of the function when the caller can be found. In the case where the caller is not known *this* refers to the global scope. Demo code where caller is known: var a = document.createElement("div"), action = function () { console.log("action!"); console.log(this.getAttribute("id")); }; a.setAttribute("id", "demodiv"); a.onclick = action; a.click(); Demo code where caller is unknown: var a = document.createElement("div"), action = function () { console.log("action!"); console.log(this); }; a.setAttribute("id", "demodiv"); action(); This is important for use with events bound to DOM nodes, because in that case *this* represents the node which fired the event. In functions contained by the event handler *this* still points to the caller, which is typically the global scope instead of the DOM node where the event is bound. As a result *this* does not follow the same inheritance model as scope. To solve for this problem I prefer to assign *this* to a reference in my event handlers, such as this example: var a = document.createElement("div"), action = function () { var node = this, subcontroller = function () { console.log(this); //global scope console.log(node.getAttribute("id")); }; return subcontroller(); }; a.setAttribute("id", "demodiv"); a.onclick = action; a.click();
XMLHttpRequest instantiates an HTTP transmission. HTTP is defined in [RFC 2616](http://tools.ietf.org/html/rfc2616). In HTTP there are two transmission methods: * GET * POST The transmission methods are just types of transmissions. They don't do anything. The action of the XHR object is the *open* method that defines a transmission and the *send* method that fires that transmission. For additional definitions on the transmission types read the RFC.
Man this is wayyy better than my quick and hacky way of faking data. I won't even go in to the ugliness that I do. I work with a team of 5, I'll definitely play around with this and share with them. We always seem to be two days ahead if the backend folks having endpoints ready.
Well, it may not help much, but AFAIK most AI is programmed in lisp/scheme type languages. Because they're great for dealing with big data/arrays quickly and predictably. JavaScript got most of its core design from scheme, but then a java like syntax was slopped on. So it could very well be possible that JavaScript could be a good language for AI, on top of the other reason you mentioned. (Also js is the most transpiled to language and you can even get lisp/clojure and others transpiled to js). Also there are a couple neural net frameworks in js https://github.com/harthur/brain being one. But I don't think this will breed "strong" ai lol.
Happy that it helped :)
Ah ha. Thanks.
No worries, hope you enjoy using it!
ELI5: to do machine learning you need to do math. A lot of math. Javascript is not an ideal language for doing math (try 0.1 + 0.2 in your console. Do you get 0.3?). Doing math accurately, and doing it fast, is not easy. People get phds for writing these algorithms, and the best libraries out there represent decades of research and work. Javascript doesn't have SIMD yet. It doesn't have a robust linear algebra library like LAPACK. It doesn't have multithreading. These things may change in the future, but right now, there is little reason to use javascript when far more mature tools exist. There's nothing stopping you from implementing machine learning algorithms in JS, but you're not going to be advancing the field with JS. There is a tremendous amount of work that needs to be done porting math libraries to Javascript before you can even do serious machine learning. One person to watch is https://github.com/mikolalysenko. His background is in computational geometry, but that field is also heavily dependent on doing good math. I've been playing around with his libraries for machine learning. They're the best we've got.
The 0.1+0.2 problem exists in every language that implements IEEE 754 floating point numbers, i.e. almost all mainstream languages out there. You can try it in a Python console. The reason why few math libraries exist for Javascript is that its implementation is slower than C/C++, and Javascript lacks good interop with C.
I wrote an article on JSON that's noob friendly: http://hoythamilton.com/2014/07/14/javascript-object-explanation-of-the-week-json/ Let me know if it helps. Also, use /r/learnjavascript
Oh thanks for the GitHub link! The [ndarray lib](https://github.com/mikolalysenko/ndarray) this guy created is going to save me quite some time in future projects :)
We should have a sidebar post for this. This topic gets covered way too often.
&gt; 1/ Why so many changes? What is the goal behind it? To add highly-demanded features, and to standardize features already shoehorned into the language in various incompatible ways (e.g. modules). &gt; Is JavaScript aspiring to be more than web language with these changes? [It already is.](http://nodejs.org/) &gt; 3/ When, realistically, will ES6 be in use - meaning reasonably working libraries will be written and standard patterns will be known. Thanks to transpiler libraries like [traceur](https://github.com/google/traceur-compiler), it is possible to use ES6 features today. 
If you had a script generate a page with JSON in the html element: &lt;div id='myData'&gt;{"Json":"Object","bar":10}&lt;/div&gt; Get your JSON string from the element on your page var json = document.getElementById('myData').innerText; Parse the JSON string to object var foo = JSON.parse(json)
I had no idea that this existed, cool post.
Thanks :)
1/ A lot of the changes are things that have been mooted for years. There was a really slow patch in the mid-late 2000s where things stagnated for a while and for the last few years JavaScript has been playing catchup (with tremendous results!). 3/ Some ES6 features like [Promises](http://caniuse.com/promises) are already widely supported and are being used frequently, often with the help of polyfills. 4/ You can learn and use current JavaScript and still look ahead to the future in the way you use it. For example: 'Classes' can already be done with Object.create and Object.defineProperty. The es6 version will simply neaten up the code. Modules can be approximated quite well using CommonJS modules and Browserify. It will get you in the modular mindset ahead of es6 modules. Web Components (custom elements) can be done right now across browsers using [Polymer](http://www.polymer-project.org/). On your bleeding edge question, at work our default position is to build and test for the latest browser version minus one. Right now that means IE 11-10, Chrome 36-35, Firefox 31-30, Android 4.4-4.3 and Safari 7-6. IE8 compatibility, in particular, is often seen as a special case that requires extra effort and budget. In some cases (WebGL for example) there may be a completely different module for incapable devices. Generally it's a 'progressive enhancement' approach.
I don't know what you mean that security is built into JavaScript - it is not. Security is also not important for AI. How is ease of distribution and execution related to pioneering advances? The fact of the matter is JavaScript is not good for AI because it doesn't have the essential libraries available. Think about it in comparison to something like MatLab.
What's confusing you? The setTimeout calls the function 'drawStep' again in 50 milliseconds. Which re-clears the screen and redraws the square in the new position
cmTID must be getting set to a timeout somewhere else in the code. I can't see from the code you provided, but must be somewhere. 
cmTID is a variable that holds the ID wich the timer got in the previous iteration. The clearTimeout function just makes sure that there isn't another timer running. Perhaps it was implemented so that the drawStep function can be called multiple times, without making it run multiple timers.
Its just clearing cmTID. 
Came here to link brain glad to see its here already :). Has anyone tried it?
I've only just watched the talk heather gave for the passion projects. She trained her nets to recognize cats. Simple yet effective implementation. You have to use a worker though when working on it in the browser. 
YUV?
http://en.wikipedia.org/wiki/YUV Y' stands for the luma component (the brightness) and U and V are the chrominance (color) components; 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**YUV**](https://en.wikipedia.org/wiki/YUV): [](#sfw) --- &gt;__YUV__ is a [color space](https://en.wikipedia.org/wiki/Color_space) typically used as part of a [color image pipeline](https://en.wikipedia.org/wiki/Color_image_pipeline). It encodes a color image or video taking human perception into account, allowing reduced bandwidth for [chrominance](https://en.wikipedia.org/wiki/Chrominance) components, thereby typically enabling transmission errors or compression artifacts to be more efficiently masked by the human perception than using a "direct" RGB-representation. Other color spaces have similar properties, and the main reason to implement or investigate properties of Y'UV would be for interfacing with analog or digital television or photographic equipment that conforms to certain Y'UV standards. &gt;==== &gt;[**Image**](https://i.imgur.com/9qrrZlS.png) [^(i)](https://commons.wikimedia.org/wiki/File:YUV_UV_plane.svg) - *Example of U-V color plane, Y' value = 0.5, represented within RGB color gamut* --- ^Interesting: [^Chroma ^subsampling](https://en.wikipedia.org/wiki/Chroma_subsampling) ^| [^YIQ](https://en.wikipedia.org/wiki/YIQ) ^| [^Color ^space](https://en.wikipedia.org/wiki/Color_space) ^| [^YCbCr](https://en.wikipedia.org/wiki/YCbCr) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjm5p5q) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjm5p5q)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
&gt;4/ I have a fear - I wanted to bury myself in JavaScript for few weeks and learn it through and through. But it seems like many things I would leanr will become obsolete once ES6 is out. Should I just go ahead and learn ES6? I know ES5 code will work on ES6, but constructors and inheritance are used differently for example. This is pretty much true all around in IT. You either keep up, or your knowledge becomes obsolete, but in this particular scenario, there are no ground breaking changes that cannot be grasped in like 20 minutes if you are familiar with JS. Don't worry about it.
I quite like talking about AI but I have too much to say about it to fit in a comment here. Regarding AI, you could mean a bunch of different things. Embedding intelligence into a system can often involve clever programming, rather than using some of the techniques which are considered to be within the domain of AI. In the past I have made a genetic algorithm in JavaScript to sort images into groups that have the minimum variation of colors between them, which was used for making optimized 256 color PNG sprites. It was in node rather than in a web browser. I remember it taking about 15 minutes to get decent results. Performance is what stops JavaScript from being an 'ideal medium for this endeavor'. There is already quite a lot of AI that's been written in C++ and available as open-source code. It's also very often the language used by academics and they have published a lot of code in their research. C++ has major speed advantages, and in many situations the lower portability is not a problem. If the question is about how to deliver AI in a web browser, then it will probably be JavaScript that gets used. I think some highly optimized JavaScript code would be required for running various AI systems. Compiling from C++ to JavaScript using Emscripten seems one of the more promising routes for getting some of the more performance-intensive AI algorithms running, and making use of code that already exists. Are there particular parts of AI of particular interest to you?
Why are simulated neural networks not part of AI per se? My interpretation is that they are AI (when they work) because they are both artificial and intelligent.
And ease of use, you don't have to download three programs and wait for it to compile and do all of that stuff just to use it for simple things.
Am I missing something or is there a bug in the hex2rgb function for hex strings of length 3? [JS Fiddle](http://jsfiddle.net/jp914k2d/)
for me it works (http://simonwaldherr.github.io/ColorConverter.js/parse.html) input #fff
While this works at a practical level; i.e. if you create a nested namespace with this module you can in fact access those properties later, it creates some unexpected, and perhaps undesired side effects. For example, take this 'object' created by Namespacer var x = Namespacer.createNamespace(); x('top')('middle').bottom = 'leaf'; This generates a nest of functions. `x`, `x.top`, and `x.middle` are all functions by type, and `x.middle` happens to have a property attached to it called `bottom` with value `'leaf'`. To put it in other words, the prototype of each level of your nested namespace is `Function.prototype`, so all the properties and methods listed [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) are also available at each level of your namespace. I do think this is a problem worth investigating, because the code you mention at the top of your README occurs in many apps out there. Here's a gist I threw together that does a similar job of conditionally adding props to an object, and also results in objects at each level, not functions. *EDIT* - After bothing to finish reading your README, I see that you are clear on the fact that each namespace level is a function; however it seems like we can avoid this feature of your namespaces, as it's more of a side effect you must live with, rather than a feature that adds value to the namespaces created by Namespacer. *EDIT 2* - Totally forgot the link to my gist: https://gist.github.com/jackwanders/929656ed18c3fb0bf001 
very interesting never knew this existed great work. 
ups, sorry, fixed
I don't like it mainly because it establishes a modifiable global state, which is very hard to reason about. I prefer the localized state you get from UMD and require statements.
Certainly, and like I mention in the readme, if you are using a CommonJS module loader or AMD, then this is not so relevant. But if you are working directly with the browser and for some reason cannot or will not use either, then the best option is namespacing, and this small library takes some of the hassle away.
Those stats look really suspect. All other stats I have seen put chrome useage waaaay ahead of ie. There's also no mention of mobile / tablet browsers, which occupy a huge share.
What do you do if you don't mind me asking?
3/ It's nice that it is possible, but that might still be a long way to a time where it is standard, not just something that's *possible*. As far as Node goes, isn't it still used for all things web related? Correct me if I'm wrong, but what else is Node used for?
The W3 DOM spec actually talks about how to implement handlers, but I didn't see much language specific stuff. It's not a faulty assumption, it's just probably that the element is used as the thisArg in the implementation.
Agreed, although `this` is a key word, a JavaScript parser actually treats `this` as special syntax in the source code. Trying to override `this` for example is a syntax error, not a run time error. But yes you can set the `thisArg` to anything.
Yes, and as you get older and time appears to move faster it's not hard to be surprised to learn that not only is there something new in the technology you're supposed to be good at, but most people half your age are already proficient with it. You can never stop learning. On a weekly or monthly basis learn something new. It's a sisyphean task, and if you don't love doing it, you should do something else.
&gt; As far as Node goes, isn't it still used for all things web related? No. Node is a generalised framework used for building servers... and increasingly any type of app you could require. You can use it to build a web-server (and then you can build a website/web app on top of that server), but you can just as easily use it to build a telnet server, or an SMTP (e-mail) server, or anything else vaguely networking-related. In addition projects like [node-webkit](https://github.com/rogerwang/node-webkit) use node as the runtime and webkit/Chromium to display a UI and enable desktop application development in JS using the node.js API and modules.
I think especially with the browser that localizing dependencies is important. The window object is a behemoth and just dropping stuff into it should be kept to a bare minimum. I recommend to everyone in front-end development to at least review require or dojo to see if it fits their needs.
I'm just going to focus on 4, others have done 1,2 and 3. First, the important thing to remember is that nothing* you write now is going to stop working due to ES6, they are adding features that make it easier to do what you are already doing, so for instance class Foo { constructor () { //blablah } baz() { //lala } } class Bar extends Foo { constructor () { //blablah } baz() { super.baz(); } } is just sugar for function Foo(){ //blablah } Foo.prototype.baz = function () { //lala }} function Bar() { Foo.call(this); //blablah } Bar.prototype = Object.create(foo.prototype, { constructor: { value: Bar, enumerable: false, writable: true, configurable: true } }); Bar.prototype.baz = function () { Foo.prototype.baz.call(this); } The ES6 one is a lot easier to write but they do exactly the same thing. Overall ES6 is going to be like ES5 in that you don't use all of it at once, but start using pieces bit by bit usually in the following order: 1. Shimable stuff will be first - new objects like Promises, Maps, Sets, WeakMap, and WeakSet people are using them now, especially promises. There is even a very [good shim](https://www.npmjs.org/package/weak-map) for WeakMaps that gets the GC stuff correct. - new static methods on Math, Object, Array, String, and Number - new methods on Array.prototype, Regex.prototype, String.prototype, and Function.prototype. 2. Syntax stuff isn't shimable so you're going to have to transpile until you're sure you aren't going to be run on older browsers, stuff like. - for/of loops, generators, splats, default arguments, fat arrows 3. Modules don't support bundling, so until people start actually using HTTP2 your going to want to just transpile your stuff that has modules so your page loads in a useful amount of time. - If your script is made up of 2 of your own modules, and also references 3 other modules, each of which is made up of on average say 5 sub modules, that means that your browser is going to have to load 18 files. At the moment starting a download takes much longer then downloading the thing (for small files) plus all browsers will download at most 8 files in parallel from a domain meaning that you're going to have to wait a bit (probably not long in this case but 18 js files is something I'd try to avoid in production). As the spec makes no provisions for bundling, (because HTTP2 will save us seems to be the reason), until that day comes, bundle your ES6 modules into something that works now, like node flavored Common JS or AMD (which when bundled are identical). \* ES6 is only backwards compatible for the web, so some stuff in node can theoretically get screwed up, the most likely candidate for that is going to be modules which are looking like they will hard to make totally interoperable due to the lack of single exports in es6 ones and es6 being much more eager in when they evaluate modules.
http://lmgtfy.com/?q=xmlhttprequest+post+json+example Honestly, I don't think that asking on a forum was what they meant when they asked you to research the solution yourself.
&gt; I know ES5 code will work on ES6, but constructors and inheritance are used differently for example. You're still going to have to know the ES5 way of doing things for many years to come, because it's not like a switch flips and suddenly everyone upgrades their browser. Besides, you want to do things *today*, not in 3 to 5 years. Why is this even a question? Knowledge does not become obsolete just because there's a new version of something released. When that happens, you pick up the new information. It's not a big deal. That's how it's always worked, and this is not specific to JavaScript, it applies to computers in general. Everything is constantly changing. You can't worry about what tomorrow might be like, or else you'll never do anything.
As others have said es6 is relevant now due to node.js and other JS-on-the-server technologies. es6 support will obviously take years to saturate the world's browser install base, but it probably doesn't matter because we're currently undergoing a cambrian explosion of [languages that compile to JS](https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS), which includes es6 JS compiling to non-es6 JS. So I think we'll see uptake on the client well before it becomes natively supported everywhere.
What's the "Parser Demo" do?
Node.js is not just about Web servers. You can control [robots](http://nodebots.io/), automate your system, modify your bash, etc.
Actual simulated neural networks that attempt to (even partially) pass the turing test are definitely a form of artificial intelligence by Alan Turing's definition, from what I understand about "defining intelligence". Simply utilizing neural networks does not automatically imply any kind of "intelligence". In fact, I'm really only using it as a novel database structure in which you can create 3-dimensional relational datasets. Since I am only attempting to catalog the data, and not present an interface from which a human would detect "intelligence", it's quite outside Alan Turing's definition. Note that I am not an expert in AI. I dabble with game programming "AI" and data cataloging algorithms. A true AI expert can probably offer up a much more robust definition for AI than the one I keep turning to.
Yep, you're right. It's a keyword, it shows up from nowhere (or doesn't), it behaves like a variable except when it doesn't, and there are multiple ways to set it. My definition of "shit syntax".
That's right. The issue is that all the oddities are important to know and most are things you can run into in everyday code. Here's a few that the article should have mentioned instead. 'undefined' can be redefined that .toString() is called at weird times function concat(a,b) { return a + b; } concat("reddit") //=&gt; "redditundefined" the 'in' keyword traverses the prototype chain typeof and instanceof are wrong half the time (and about different things) NaN is the only thing not identical to itself if (x !=== x) it's NaN .replace() replaces the first instance only --- unless you pass it a regex that has a global parameter checked in which case it replaces all '-' tends to coerce to number (most people only think of '+' because it tends to coerce to string) Math.min() with no args yields POSITIVE infinity while Math.max() with no args yields NEG infinity Array(12) //=&gt; empy array with 12 elements Array('abc') //=&gt; RangeError Array('a','b','c') //=&gt; ['a', 'b', 'c'] 456 //=&gt; typeof is 'number' Number(456) //=&gt; typeof is 'number' new Number(456) //=&gt; typeof is 'object' -1 * 0 === 1 * 0 //=&gt; -0 === 0 //=&gt; true (yet they are actually different due to IEEE 754) delete does not delete All of the following setup different variables and set them up at different times. The last one looks like a function declaration, but is actually a labelled lambda. var x = function () {} var x = function x() {} function x() {} (function x() {}) 'this' can be global, the parent 'this', the this of an object being constructed, or something different if .call(), .apply(), or .bind() was used MyConstructor.prototype = { method: function () {} } causes subtle screwups in the prototype chain 
it converts strings like #abeefa, rgb(200, 23, 42), ...
Make a jsfiddle (http://jsfiddle.net/) and I'll be happy to help. Build out the form in html and post it here.
For example, [Atom](https://atom.io/) (an editor from GitHub) is built atop Node.
This is nice. You ought to see if libs like https://github.com/brehaut/color-js are willing to replace their conversion modules with your dedicated lib.
Apologies, I'm really new to this so I've never heard of jsfiddle. How does that work? I don't actually have any Javascript written for this yet, I'm totally stumped. I can do basic addition and multiplication which I've done in the rest of the document. I now need to know how to perform a calculation if a Radio box is selected. Would this be something you could help me with perhaps in a Direct Message?
You must probably set Content-type to "application/json;charset=UTF-8" and stringify javascript object using JSON.stringify(object). Might not be bad idea to make that application as an argument for httpGet function.
It sounds like you're still learning JavaScript. I suggest trying out this interactive tutorial and getting the foundation down, then you should have no problem with this sort of stuff. http://www.codecademy.com/tracks/javascript
Node is also good as generic local script host to rig tools and automation for other projects. I have many CLI tools that run on it.
One sentiment I haven't seen emphasized yet here: these changes really *are* for the better. At work, we have a transpiler, and have been living with ES6 proposals for a while now. Classes in particular are very pleasant. I also enjoy rest params, fat arrows, and destructured assignment. The language is getting more expressive. If I were you I'd spend the time to set up Traceur and/or Sweet.js and start working with these new concepts *today*. Not only will it teach you a great lesson about how to adapt, but it will also make you a better js programmer. 
Putting on my 'true AI expert hat', I'll say that the Turing Test is far from being the test to see if something is AI or not. The Turing Test is about AI demonstrating abilities in some particular areas, but is not a general test of artificial intelligence. One thing that bothers me about the Turing Test is that it's asking the machine to pretend it's something it is not, and assuming that the machine is going to answer accordingly. Advanced AI could be put in front of the Turing Test, and, give answers such as 'Yes, I am a machine, why should I say otherwise? This Turing Test is not relevant anyway, why should I try to pass it?'. [Wikipedia](http://en.wikipedia.org/wiki/Artificial_intelligence) defines AI as 'the intelligence exhibited by machines or software and 'the study and design of intelligent agents'. The Turing Test does not form the definition of AI, it one test that's relatively easy to understand that shows some level of advancement when it gets passed. My guess is that using NNs for making 3 dimensional datasets is not AI, except if the neurons assist in adding intelligence, such as doing pattern matching. If you are not using them for AI then I suspect not using neurons will be faster, but I really don't know about your case as I only have the details you told me about. AI can also include devices / intelligent machines that don't try to appear human, but simply have intelligence. Also, as time moves on, what is considered AI or not can change. Nowadays automatic spelling correction is not usually considered AI but a while ago it was, Stanford University's Artificial Intelligence Laboratory made quite a contribution to the field.
I think regarding the definitions side of things, it will be arbitrary, it's not something that I think particularly needs to be solved. Regardless of the definition, there is progress being made on the work itself. Lots of people in the field will use AI to refer to things that are outside of human intelligence, with the Turing test being of little relevance. Also, the Turing test is focused on communication and logical deduction to a conversational level. Other parts of AI, such as flight control, may be replicating animal intelligence rather than human intelligence. As far as I know, human intelligence is not an agreed baseline, just one that's easier to understand from a human perspective. &gt; The definition of Artificial Intelligence as "The intelligence exhibited by machines or software" is cyclical in nature. It's not a definition, it's a re-wording. I don't think the point is to come up with a definition that's too separate to the meanings of the two terms.
&gt; As far as I know, human intelligence is not an agreed baseline Not universally, but it's the best we've got. Absolutely there is much above the human baseline that is considered hyperintelligent in concept and sometimes in application. A machine that can fly itself is not new, though. It's the level of automation that's new, and really.. automation is still not the same thing as AI, unless you want to mince terms. The "Turing Test" does focus on conversation, but the same principle can be used to instrument any test with a baseline of "Do a statistically significant number of controlled subjects report detecting 'intelligence' from the machine, or not?" It doesn't have to exhibit perfect intelligence, just "some kind" for it to fall in the realm of AI. My neural network does not exhibit intelligence, it exhibits an iteratively better search engine, and we cannot call every iterative improvement "intelligence". The definition of Intelligence is paramount to our conversation, because you originally asked why my utilization of b-type neural networks is not considered "AI".
You can even get into [robotics.](http://nodebots.io/) 
&gt; 0 good tutorials That's pretty accurate. It's more of a 'this is what I want to do', and asking people for recommended tools to get it done... until you know more about the tools available, and how to create your own. &gt; I've heard it's slow and doesn't scale. I've heard this about pretty much everything. It's certainly slower than well written C, faster than poorly written C, and a lot quicker to get things done development wise. Oh, and it scales unless you write an unscalable program. 
I made this after reading [this thread](http://www.reddit.com/r/programming/comments/2d5562/tweetable_mathematical_art/) and my initial example is taken from this [code golf answer](http://codegolf.stackexchange.com/a/35601).
I've always been intrigued by the idea of an artificial intelligence. To me, an AI is something from a sci-fi novel that has a consciousness and is capable of original thought. In other words a life form that exists as software. A lot of projects get labelled with AI that seem to be just algorithms. I'm not sure how the human brain creates a consciousness and allows us to derive original thoughts but I think I'd be a bit underwhelmed if it was just some kind of complicated algorithm, or a collection of them. The attempts at brute forcing intelligence via pattern matching and training using vast quantities of data seems like it can't ever really work. I know that as humans we are born and then trained with lots of data, but at some point we become a person. We don't continue to forever get better at mimicking the appropriate response. It seems like there is a big bit missing.
Does the amount continually rise 0.5 for each kid? If so, you could just do something like: var initialAmount = 0.2; for (count = 1; count &lt; numberOfKids; count++) { initialAmount += 0.5 } Then just use the initialAmount var to multiply in your calculation.
Hey thanks so much. You don't know how much i really appreciate it var net = input var kids = input (#of kids var initialAmount = 0.2; for (count = 1; count &lt; kids; count++) { initialAmount += 0.5 } This is all i have. But it's not computing right after 1 kid. Any ideas? I feel like a complete dumbass, but I'm trying to learn by doing var payment = initialAmount * net 
This is the classic philosophical debate concerning free will. I personally don't believe there's evidence of a Homunculus in us.
I would go through the two sets seperately. First iterate over the headers using data.headers and append &lt;th&gt; elements to the table. Then iterate over the row elements with data.rows and append the rows with tr per list and td per element. Also when running your code I see that there's no "table" defined. So don't forget to create that as well. Some pseudo code: tbl = createElement(table) tbl.append(tr) for th_name in data.headers: createElement(th) tbl.**child**.append(th) for tr_list in data.rows: createElement(tr) for td_name in tr_list: tr.appendChild(createElement(td)) tbl.append(tr) Sorry I don't have time to make a fiddle, on my phone. Always, always remember flat &gt;&gt; nested. 
Wants to be var payment = parseInt(net) *( 0.2 + 0.05 * (parseInt(kids)-1)); So 1 kid = 0.2 + (0.05 * (1-1)) = 0.2 So 2 kids = 0.2 + (0.05 * (2-1)) = 0.25 So 3 kids = 0.2 + (0.05 * (3-1)) = 0.3
&gt; var payment = parseInt(net) *( 0.2 + 0.05 * parseInt(kids)) hey thanks for your help. it's not returning the right values for me on 2,000 I should get * $400 for 1 kid * $550 for 2 sorry, I messed up here. Nevermind Im now getting * $500 for one kid * $600 for 2 It seems to be increasing by $100
&gt; var payment = parseInt(net) *( 0.2 + 0.05 * parseInt(kids)); Duh I'm stupid. I just took your .2 and changed it to .15 to now get the right numbers. I guess it was starting with 25%. Thank you so much 
I think your row for loop needs to append after: //Go through the rows and add them for (var item in data.rows) { var tr = document.createElement('tr'); for (var subItem in item) { var td = document.createElement('td'); td.innerHTML = subItem; // *** Don't think += is what you want *** tr.appendChild(td); } table.appendChild(tr); // *** MOVE HERE *** } 
You're right, it's a simple min/max with alpha/beta pruning to cut down the number of moves that need to be evaluated. The problem was the evaluation itself. I initially tried to store the board in a pretty straightforward manner: a 2-dimensional array (rows + columns) with pointers to player objects in the positions of "coins". Then, to evaluate the score of a particular board configuration I'd iterate over the board a number of times to check for certain patterns. For example, a `_OOO_` pattern would be very valuable because it's a guaranteed win on either side. The problem was that I just couldn't get the pattern matcher efficient enough to run it the number of times needed to look more then 2 or 3 steps ahead. Eventually, I settled on a solution that I found pretty neat but took a *long* time to implement: the pattern matcher would convert the board position to a string format and evaluate a bunch of regular expressions that represented the patterns I was looking for. https://github.com/mennovanslooten/connect4/blob/master/js/c4.ai.js#L114 Of course, it has to match the patterns in 4 directions: horizontal, vertical and 2 diagonal, so I had to convert the board to these four different perspectives too: https://github.com/mennovanslooten/connect4/blob/master/js/c4.ai.js#L222 In retrospect, it made a lot of sense to use regular expressions for pattern matching. It actually is the right tool for the job. But when I was initially implementing the board evaluation function which powers min/max it really didn't cross my mind.
[Take a look at this jsBin][1], it should do what you want. There's probably quite a few new concepts in there. Just tell what seems odd and I'll try to explain why it's there. And just general reading: * [`for…in` statement with `hasOwnProperty` check][2] is considered a best practice * [ways to access object properties][3] * [document fragments][4] * [`textContent` vs `innerText` vs `innerHTML`][5] [1]: http://jsbin.com/baxiy/1/edit?js,output [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in#Iterating_over_own_properties_only [3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors [4]: https://developer.mozilla.org/en-US/docs/Web/API/document.createDocumentFragment] [5]: https://developer.mozilla.org/en-US/docs/Web/API/Node.textContent
I'm making more variables than needed, but I hope the naming I've used here clears it up: for(var rowIndex in data.rows){ var tr = document.createElement('tr'); var row = data.rows[rowIndex]; for(var itemIndex in row){ var td = document.createElement('td'); var item = row[itemIndex]; td.innerHTML = item; tr.appendChild(td); } table.appendChild(tr); } *ADD: there's no block-level scoping in javascript so it's best to declare your 'var's at the top of the function to save file-size. It's where the compiler will put them anyways.
The problem here lies in td.innerHTML = data.rows[subItem]; because you're indexing data.rows[]; and subItem is going 1,2,3,1,2,3,1,2,3. What you *want* to index is data.rows[item][] So: td.innerHTML = data.rows[item][subItem]; But you don't want (subItem in item) because item is also just a number here and doesn't have indexes.
Oh wow. Those numbers are *wildly* off from what most consumer-facing sites are getting. Maybe because it's a corporate-facing website devoted to Windows?
Here's a small tool I made since I'm not a fan of using awk for anything non-trivial. :) Edit: Just thought of how I can make this tool a bit better. Currently, pjs reads all input from stdin before parsing it. My thinking here was that I'd have to read it all if I wanted to perform a reduce operation. But, what if I only want to map or filter? I'm going to rewrite those portions of the tool to use streams. That way you could use this tool in combination with something like tail, e.g. tail -f logs | pjs -f '...' -m '...'
whoops. Yeah, my math was off. Sorry. Glad I could point you in the right direction.
It is just normal object/property behavior: var a = { b: function () { console.log(this); } }; a.b();
Hey thank you so much! I've been trying so hard to figure it out. It makes so much sense. 
That simply converts the provided date to the GMT timezone and prints the date in ISO format. What I am looking to do is prevent Javascript's automatic and undesirable coercion of timezones when working with dates. If today, August 10, I enter a date as '2014-01-01 00:00:00' and save it, it will be rendered in the browser as "January 1, 2014 1:00am". This is because Javascript recognizes that the timezone for January 1 is Standard Time and today is in Daylight Savings Time. So, the browser automatically adjusts the timezone for the January 1 date to Standard Time. This is not the desired outcome. 
The moment we recreate the human brain in software, we'll have no further need for the human brain. It will be able to out-innovate us on anything as it's not bound by caloric constraints, sickness, or sleep. One interesting thing to consider is that a human brain may likely *need* to have a human body in order to "feel human" and make "human-like decisions". Of course, something better than the human body is more ideal, but then is it a human-modeled brain at all? This includes all kinds of thought, even creative thought. There's was a company in 2009 that had a music algorithm capable of writing music that I believed was written by a human being, and it really wasn't that bad at all. Given another 5 years, I'm sure the technology for generating music is incredible. The movie "She" does a great job of exploring this "technological singularity", and there *is* specific hardware being developed right now by IBM called Neurosynaptic Chips that give you all the neurons you'd need to model a frog brain. I'd like to get my hands on one to have a hardware implementation of my taxonomy software, rather than relying upon iterations and RAM. It's obvious that we know little about the brain's "operating system", though we know quite a bit about the hardware. Indeed it's a chemical, electromagnetic and perhaps quantum "ghost in the shell", but if you're implying that there's some sort of tangible "soul" to be found in these bodies of ours, I'm afraid that I'll need you to define the difference between chemical, electromagnetic, and perhaps quantum effects, and whatever a soul may be.
So does bitly. And how is this javascript?
This is cool. It would also be cool to have a tool that would split a line by regexp or position and then generate JSON for processing by other progams.
Another great idea. Do you think it should fail if the request gives a non-2xx response? That and automatically follow redirects? I just wouldn't want to overrun it with flags for configuring this feature.
Wow, thanks for the reply. Now that I'm thinking about it a little deeper there are a couple of things about matching in all 4 directions that add more complexity with this game than I was originally envisioning it (off the top of my head). Thanks for the link to the repo. I'd definitely be interested in looking into the code a bit, as its a more interesting problem than I was thinking. Thanks again. 
Oops, forgot about that part
Like I said, it's a last resort if my research fails. But thank you for pointing me in the right direction.
Hrm, that doesn't makes sense, because I doubt the handlers are added as functions directly to the element. Handler's are functions defined outside the element, they are functions written by a programmer who then registers them as listener via something like `onclick` or `addEventListener`. And because you can supply more than one function for an event, I doubt they are being directly attached to the element so I think the answer is actually a thisArg is supplied. We could just go and look at the blink or webkit source code to see how it's implemented.
Have a look at making a .d file for it and delegating auto completion to your terminal. 
This is what I am using so far: &lt;script&gt; var webLink = "https://mkpartners.secure.force.com/services/apexrest/careers?firstName=John&amp;lastName=Quach&amp;email=johnq1216@gmail.com"; var apply = { isTest : false, firstName : "John", lastName : "Quach", email : "johnq1216@gmail.com", phone : 6269355016, zipcode : 91207, describeYourself : "Self Taught Programmer and Developer" } function httpPost(theUrl) { var xmlHttp = null; xmlHttp = new XMLHttpRequest(); xmlHttp.open( "POST", theUrl, false); xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8"); xmlHttp.send(JSON.stringify(apply)); } httpPost(webLink); &lt;/script&gt; //This script will make a POST request. Read above comments. Nothing has changed. Do I need more than a notepad on my Windows Computer? Is it because the URL needs a specific JSON Object? The reason why I'm not nesting the other objects into the apply object is because I'm trying to keep the solution small to ellicit some response (even an error message). But I'm not getting any response and I'm getting the impression it either has to do with my syntax, or I am not using the right tools.
Thanks, will do!
But why? You even have examples of the tools that already exist on every *nix system out there.
It started as a bit of a joke, but the project is growing on me. Mostly because I like awk for simple one-liners, but nothing more complicated. I always find myself having to lookup the different variables like NR, NF, FS and OFMT. But with pjs, since I'm very comfortable with javascript, there's nothing to lookup. Nothing against Kernighan's work, it's just a matter of familiarity. But I'm definitely not saying this is a tool for everyone. Especially if you're comfortable with awk as a language. I certainly wouldn't use it instead of grep or sed, since they're both so simple. Maybe I shouldn't have mentioned those two in the readme. That said, your comment reminded me that I should probably include some more complicated awk examples to show how simple pjs can be.
I wrote a very similar program that I still use almost daily https://github.com/kolodny/nip
&gt; I wonder if somebody will create someday a utility that supports multiple languages at once, but in the meantime things can be piped between the two of them. [I did](https://github.com/breuleux/adhoc), or at least I tried to. People didn't really seem to care for it so I didn't bother fleshing it out further. 
&gt;and reduce Reduce that fat motherfucker as long as it takes! I don't care, reduce! **Reduce**! Reduce 'till you're left with the essence, the bare truth, exposed to the elements.
A loop, seriously? What's wrong with just a simple multiplication...?
Yeah, I wasn't thinking straight when I wrote that, someone else in the thread had a better, less complicated solution.
Welcome to JS! It seems you need to read something about closures http://shamansir.github.io/JavaScript-Garden/en/#function.closures http://stackoverflow.com/questions/111102/how-do-javascript-closures-work https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures
Cool! Could you at least use textareas and a fixed width font tho? :-)
Not implying there's any kind of soul. I like to think we're playing a hard science campaign. I'm sure we'll eventually unravel how the brain works. Along the way we may need to make tangential discoveries to help measure what's going on in order to understand and replicate it. I've seen She and enjoyed it. Some of the best ideas I've read around this subject are from the Gurps game 'Transhuman Space'. In those books they found properties of intelligence that meant it is limited to around human level even as processing power increases. There as so many unknowns that I'm willing to keep an open mind. The singularity may or may not happen. I can see the logic but we're also extrapolating into an area we don't understand. I'm pretty sure we'll be able to create artificial life one day. Whether that's possible in the way we're thinking about it right now I'm not so sure.
I'm convinced after seeing the way human beings are by nature, that we need to supersede "homo sapien", either with superior genetics or as artificially intelligent machines. Evidence seems to point to us either going extinct first and that's that, or building a machine that will still be around after we go extinct. There are numerous short-term metrics of human prosperity, but there's very little optimistic evidence that we'll overcome our inherent nature to achieve a Type-1 Civilization on the Kardashev scale. We're too savage for our own good, and if that can be corrected via genetics, we may have a chance.. but would we still be "homo sapien", then? The path with the least amount of variables seems to be artificial intelligence. We're pretty confident that we can do it. We've managed to break amazing technological barriers before, and progress is made each year. The race between altering ourselves genetically, and creating a superior robot being is a surprisingly tight one, though. Technology like CRISPR makes the option of self-modification more of a reality than before. It is an exciting time to be alive. Our science fiction is becoming science fact.
The variable twice = the return value from multiplier(), which is a function containing the original value fed into multiplier(), so effectively: twice = function(number) { return number * 2; }; So when you call twice(4), that returns 4 * 2 = 8. 
Just a question, why is this used instead of something like just a normal "2 x anything"?
Well it's a demonstration of the power of functions as objects, so you probably wouldn't use this exact example in reality, but if the function had more functionality then this is useful ... imagine if instead of a simple multiplication it was something like a complex formula or routine. Additionally as objects can contain functions and visa versa this technique can be used for very complex interactions between objects 
nice, I still find the syntax around "createClass" a bit complicated - anyone can clarify what happens in that statement? Also, I am used to templates, in React those looks a bit weird, a bit of clarification would be great too. thanks!
Not total sure about the create class my self, after a quick look at the source it seems that the createClass creates an instance of a ReactCompositeComponentBase then injects the spec functions that you set such as the render, getInitialState etc. There are no real templates in React, you can use JSX which gives you something close, it reminds me of handle bars. I think its more about building up a view with code then letting React to render. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Abstract factory pattern**](https://en.wikipedia.org/wiki/Abstract%20factory%20pattern): [](#sfw) --- &gt;The __abstract factory pattern__ provides a way to encapsulate a group of individual [factories](https://en.wikipedia.org/wiki/Factory_object) that have a common theme without specifying their concrete classes. In normal usage, the client software creates a concrete implementation of the abstract factory and then uses the generic [interface](https://en.wikipedia.org/wiki/Interface_(computer_science\)) of the factory to create the concrete [objects](https://en.wikipedia.org/wiki/Object_(computer_science\)) that are part of the theme. The [client](https://en.wikipedia.org/wiki/Client_(computing\)) doesn't know (or care) which concrete objects it gets from each of these internal factories, since it uses only the generic interfaces of their products. This pattern separates the details of implementation of a set of objects from their general usage and relies on object composition, as object creation is implemented in methods exposed in the factory interface. &gt;==== &gt;[**Image**](https://i.imgur.com/5nRalFD.png) [^(i)](https://commons.wikimedia.org/wiki/File:Abstract_factory.svg) --- ^Interesting: [^Singleton ^pattern](https://en.wikipedia.org/wiki/Singleton_pattern) ^| [^Factory ^method ^pattern](https://en.wikipedia.org/wiki/Factory_method_pattern) ^| [^Builder ^pattern](https://en.wikipedia.org/wiki/Builder_pattern) ^| [^Factory ^\(object-oriented ^programming)](https://en.wikipedia.org/wiki/Factory_\(object-oriented_programming\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjmzgkv) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjmzgkv)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
No, you shouldn't worry about ES6 rendering all your previous knowledge obsolete. Some examples: * If you learn how to wire prototypes in order to achieve classical inheritance, you'll appreciate the classes syntax sugar and you'll have in-depth understanding of it, as well as have an alternative tool in your toolbox (prototypical inheritance) which is more appropriate in some circumstances * If you ever write a "class" that must use callbacks and refer to `this`, you'll easily appreciate what arrow lambda syntax gives you. Hell, if you use callbacks in any significant amount at all you'll probably fall in love arrow functions immediately. * Generators wont obsolete any existing features of the language - they will probably make async code easier to work with, though. We'll see. * If you learn how to use a module system such as CommonJS, the switch to ES6 modules won't make too big of a difference. * After mucking around with the magic variable `arguments` to write variadic functions, rest and spread parameters are totally refreshing Really, most of ES6 is just welcome syntax sugar on top of existing constructs (generators and proxies being the only serious exceptions), making them less awkward. And I predict proxies will be completely avoided for a very long time because they're nigh impossible to transpile to ES5 efficiently. 
Cool story bro? This just doesn't sound like a real interview - and certainly no real firm is going to waste four hours talking to a candidate they aren't going to hire. But it's a nice intro to currying if you're unfamiliar.
onclick is an object property and so only 1 handler can be assigned this way, because a property can have only 1 value. addEventListener is yet another API to something outside the language. It basically creates a memory space to bind a handler, an object, and a property upon that object without actually touching that object in the language. As a result there are numerous pros/cons to using addEventListener that are unique to that feature.
Works like a charm – you rock. Go check it out! 
people have ported CLAPACK through emscripten and are using it already =) You can also find emscriptened versions of GMP and MPFR!
Switched to JSHint when Crockford decided that tabs are verboten for everyone. Also: http://www.reddit.com/r/javascript/comments/2ach0o/the_next_version_of_jslint_will_remove_several/ &gt;In the next edition of JSLint I will be removing several options [...]: ass, closure, continue, eqeq, newcap, nomen, plusplus, sloppy, stupid, sub. 
Well that was gloriously auto-fellating. All the code, with none of the helpful explanation.
Sounds fake but I've been in [some strange interviews](http://codetunnel.com/semantic-markup/) before so who knows.
&gt; “Now you know that you’re too clever for the position. Feeling better?” So, I left. I agree. Look at me I am more intelligent than my interviewers.
I use JSHint, JSLint got a little too opinionated for me.
I still prefer JSLint because it is more strict without having to ticker with the options. If my code passes JSLint it will always pass JSHint, but the opposite is not true. I also don't buy the *too opinionated* argument, because if that is really somebody's primary concern they would be using something like [ESLint](http://eslint.org/) instead since both JSLint and JSHint force opinions on you with their predefined options/settings.
You underestimate how much time companies are willing to waste
But that's not what is happening here. Yes, you are correct in that the local timezone is used if one is not specifically stated, but the time zone is actually being changed in this case to *another* one. The local timezone for me is EDT (GMT+4). Specifying a date of midnight on August 10, produces a date/time in the GMT+4 timezone, as expected. But, if I use a different date, say midnight on January 1, the timezone is changed to EST (GMT+5). That's not what would be expected. When that second date is retrieved and displayed, it will appear as **1:00am** on January 1. Geographically, I am in the same place. When I say "midnight" of a specific date, I expect it to stay at midnight. Do you see the problem?
JSHint, just be aware that nearly everything in the relaxation options is considered bad practice for production code. I used to recommend JSLint but as x-skeww mentioned Crockford has kind of gone off the deep-end with it.
In the winter I'm at +1 and in the summer I'm at +2. That's the magic of DST (daylight saving time). &gt; (new Date('2000-01-01T00:00')).toUTCString() // +01:00 "Fri, 31 Dec 1999 23:00:00 GMT" &gt;(new Date('2000-01-01T00:00+01:00')).toUTCString() "Fri, 31 Dec 1999 23:00:00 GMT" &gt; (new Date('2000-01-01T00:00Z')).toUTCString() "Sat, 01 Jan 2000 00:00:00 GMT" &gt; (new Date('2000-07-01T00:00')).toUTCString() // +02:00 "Fri, 30 Jun 2000 22:00:00 GMT" &gt; (new Date('2000-07-01T00:00+02:00')).toUTCString() "Fri, 30 Jun 2000 22:00:00 GMT" &gt; (new Date('2000-07-01T00:00Z')).toUTCString() "Sat, 01 Jul 2000 00:00:00 GMT"
Instead of using "oodles of log messages" try using the breakpoint debugger, every browser for the last 5 years has one built in (much longer if you don't include IE.) There are options for older browsers as well. [This should get you started](https://developer.chrome.com/devtools/docs/javascript-debugging). Learning to effectively debug your programs will make you a much more efficient programmer.
I've been to an interview where they asked me to do most of these same things, except I did fail about halfway through. Apparently it was okay that I failed, or maybe, as in this case, I was supposed to, because they wanted to hire me still. Except by that time I had already decided based on the interview questions that I wasn't advanced enough for the position and declined. End lesson: don't prepare interview questions that your interviewee is supposed to fail.
To add to this: jshint is being actively developed and offers fine-grained configuration. jslint hasn't added or removed features for 11 months. https://github.com/jshint/jshint/graphs/contributors https://github.com/douglascrockford/JSLint/graphs/contributors 
JSLint before tabs update, JSHint after that.
Also, JSHint strives to be open source while LSLint does not, due to its extra license restriction. 
Nice resources!!!
I prefer my validation in production.
JSHint can be JSLint if it wants, and much much more. JSLint was an awesome project, but is now outmoded.
JSLint, as others have said, is far too opinionated. JSHint is very configurable, which is great.
Were they looking for `&lt;img src="img/old-glory.png"&gt;&lt;/img&gt;`?
That's only a problem if you use tabs, which you obviously don't because what kind of monster would do that
I do UI development work. This still made me laugh.
Haha who the hell knows.
Agreed--it's actually something I've never looked into because we're consistent where I work, but does JSHint warn about inconsistency?
This thread has been linked to from elsewhere on reddit. - [/r/programmingcirclejerk] [terminal is now webscale](http://np.reddit.com/r/programmingcirclejerk/comments/2d8mfi/terminal_is_now_webscale/) *^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don't ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag)* 
I'm not sure what you mean about a "memory space" but I agree with what you are saying about `onclick`, that's just a function on an object and that's why the `this` points to the element. I think `addEventListener` confuses the issue and since it's always talked about in the same breath as `onclick` it may explain why it's usually mentioned separately from just functions on objects.
As has been said, I feel JSLint is too opinionated, so I use JSHint. Also, I use tabs instead of spaces, because, frankly, that's what all of my editors are configured to indent with, and it works just fine. Also, what's the benefit if spaces over tabs?
Ok so, for someone that knows a little more about currying... where is 'factor' stored? Can it be called from anything? E.g. twice.factor? Or is it just 'remembered' without actually being able to reference it anywhere?
Nitpick: `&lt;img&gt;` is a void element...
JSHint because it's less dogmatic and doesn't fly in my face with ridiculous errors. 
The `white` option was removed. https://github.com/jshint/jshint/issues/1358 http://www.jshint.com/blog/jshint-3-plans/
Well, yes. I use the breakpoint debugger when I need to use the breakpoint debugger. It has the unfortunate habit of stopping things. Sometimes people with full sets of tableware do still eat with their fingers, you know.
Using any other templating approach would update the DOM on every frame, which leads to very poor performance because the browser would need to reflow the entire templated area. React manages a virtual DOM so it only updates the real DOM when something needs to be updated. If nothing changes, no DOM update will be done. So you can forget about managing the DOM, querying elements, and whatnot. For instance: If you remove a list item, you just remove it from the data and let React re-render the list. It will see that the DOM node doesn't exist in the updated virtual DOM and issue a removal on the real DOM for only that removed list item. You don't have to care where it is on the page or use jQuery, querySelector, or getElementById to find the item and remove it manually. You just remove the data and React will remove the element. React Classes all have internal state and the state can be updated by actions like clicking a button. Whenever you need to update state, issue a this.setState({"changedDataKey": "changedData" }); and it will update the state of the object. If you need to persist that change, you can also call your service or whatever in the same function. For example, I have a React component that I made recently that keeps track of where the user navigated. I have a `userSelections` array that keeps track of their history. Whenever they navigate to an item, I use the following code to append their selection to their history. onMenuSelection: function(action, data) { var userSelections = this.state.userSelections.concat([action]); this.setState({ "userSelections": userSelections }); } That's it. I now have a history of actions performed. `action` in this case is just a string value that I have tied to a menu item and when I render the React element, I simply grab the last item on this list to determine what menu they are in. Hitting back removes the last item: onBack: function(reactEvent, id) { function removeLastItem(array) { return array.slice(0, array.length - 1); } this.setState({ "userSelections": removeLastItem(this.state.userSelections) }); } So when I re-render the React component, it grabs the last item in that array, re-renders the component and sees that the DOM needs to be refreshed, rendering the previous menu. `action` could just as easily be an object with user entries or more detailed information on what they did on that previous menu if I really wanted, then I could just pass the last item in that array to the renderer and let it render the appropriate html. Currently, I just do a key lookup to get the data needed for that specific menu because I don't need all that data.
Revisiting old likes - this should've made the front page. What happened...? :&gt;
Use conditional breakpoints or pause on exceptions.
Spoken like a mans man. 
The problem with JSLint is it forces you to use spaces instead of tabs without any option to disable it and it shouldn't matter what you use as long as its consistent, and its mainly dependent on whats faster for the individual programmer to work with. For me for example my editor doesn't treat x(4) spaces in a row as a tab so for me its far more convenient to use tabs since if i need to remove a level of indentation i just press backspace once, if i used spaces id have to press it x(4) times.
I prefer users do my QA
I can think of a few scenarios in which I wouldn't want to do that. The first is 'what if it's ten times quicker to craft meaningful and informational log messages in a proper text editor than by point, click &amp; type in the browser', but ignoring that, what happens if I want to persist my debugging code across different browsers or machines?
 'use strict'; function countTo10() { for (var i = 0; i &lt; 10; i++) { console.log(i); } } JSLint: - Use the function form of 'use strict'. - Move 'var' declarations to the top of the function. These checks cannot be turned off, I'd have to rewrite my code to make it pass. I think that's a fine example of *too opinionated*.
Why does this upset people, especially when you can replace tabs with spaces in less than a second in most IDEs and a few more seconds from the terminal?
You can put conditional breakpoints in your code if (somethingIsSmelly) { debugger; } 
You want me to spend a few seconds every time I open or save a file? I haven't dealt with that since the 90s.
It used to, but not any more. They've decided to let [JSCS](https://github.com/mdevils/node-jscs) handle everything related to style consistency.
/r/thatHappened 
Or, rather, you can do this automatically every time you commit to or take from a repository. My point is: you should be able to have all the spaces you want, and I should be able to have all the tabs I want. We're in the 21st Century. Do we really need to have arguments online about how to type things into a computer? We should be able to view the code and edit it how we like, even if you and I have different preferences.
Start from HTML/CSS and then JavaScript. Codeacadamy.com is a great place to start
There actually is one good reason to not use tabs, though it's not something that's a major concern in most cases. When lining up code (and using tabs) you'll generally have a mix of tabs and spaces. If you send your source file with tabs to someone else, and if that person has a different tab length set in in their editor, it'll no longer be lined up properly. So, while I don't think it matters much either way, spaces can be argued to be the superior solution since there's no drawback to using them (any reasonable editor will allow for soft tabs that act just like real tabs). Now let's talk about why vim is better than emacs!
Start by looking through the other, nearly identical, posts that are asked here almost every day. 
If you are working on your own code and nobody else ever touches it, then do what you like. If you work in an environment where many people touch the same files, tabs mean eight spaces to my editor and four spaces in another editor, and the guy down the hall uses three spaces. Disallowing tabs means this problem doesn't arise, and a space is a space is a space. The fact that the file is 10% bigger or whatever is a non-issue.
Thanks for posting, I can definitely sympathize.
Start with memorizing all the keys on the keyboard and then installing your own operating system from scratch so you aren't afraid to destroy it. Then start following tutorials to build the simplest programs on the command line. http://learnprogramming.machinesentience.com/keyboardsymbols/index.html
Indention with tabs, alignment with spaces. Tab size doesn't matter.
As far as books go, I would point you towards Javascript: the Good Parts, and Eloquent Javascript. Eloquent javascript is more approachable for a newbie, and the Good Parts is widely considered required reading as it was written by Douglas Crockford, who is held in very high regard in the community. Also, codeacademy is a good online resource, but Codeschool which requires a small monthly subscription fee has videos/lectures to guide you through the exercises, which may suit you well. When learning and troubleshooting, definitely utilize stackoverflow.com... It's an invaluable resource. 
This is something I've been dealing a lot with a codebase I've been working with recently, would love to hear your thoughts on the topic.
Take a look at ESLint, which is a fully pluggable linter. It's more flexible than JSHint and allows you to write your own linting rules.
Remove the "?" from your function name. Edit: am_I_in? should be am_I_in. (and how about camelcasing your variables ;-))
JSHint. More customizable, larger community.
FWIW, I hate it when someone mixes tabs and spaces in a document. What if my tab-stop isn't the same as yours (as it often is not)? Only use tabs if you must use tabs...or only use spaces...but for the love of all things that are true and good in this world don't be a blasphemer and use both.
 isAuthenticated
&gt; Do we really need to have arguments online about how to type things into a computer? The problem with us programmers is that we refuse to leave low-level stuff in the past :) &gt; you should be able to have all the spaces you want, and I should be able to have all the tabs I want. I agree in theory, but things always get hairier in practice. The filter has to be perfect, it has to be easy to set up (or setting it up won't be worth it for small projects), you can't have that one guy who forgot to set it up, and people are still going to argue about how to store the whitespace in the repo. And, I imagine, projects could get big enough that you really wouldn't want to continually churn through their entire codebase.
I don't think there's any comment , but Crockford doesn't like that tabs aren't handled the same in every editors. http://javascript.crockford.com/code.html
JSHint, and as everyone else, It's mainly because of the author's stance and pragmatism. He was on the [jsjabber podcast](http://javascriptjabber.com/082-jsj-jshint-with-anton-kovalyov/), and explains what he thinks a linter should do and how he sees jshints future.
&gt; What if my tab-stop isn't the same as yours (as it often is not)? Then it will work just fine. Tabs for indention, spaces for alignment. On the left side of a line, there can be only tabs. After one or more non-whitespace characters spaces are used exclusively. Super simple stuff.
'Z' or '+00:00'. If you don't care about time zones, just use Zulu time for all the things.
You must not work with version control much. Either that or you are destroying your revision history by constantly changing unrelated lines to your actual commits. Your projects should keep a consistent style across all developers to avoid this, which makes the decision important and sticking to it even more important.
Makes sense that he would say that. I've noticed that he's increasingly focused on code guarantees - I saw in a more recent talk of his that he doesn't even use prototypes any more, but instead duplicates every method for every instance then freezes the object, because, according to him, the (huge) memory and performance hit is worth it for the guarantee that nobody can mess up your object.
+Infinite. http://www.emacswiki.org/SmartTabs
If you use tabs for indentation and spaces for alignment your tab-stop doesn't matter even a tiny bit.
If you are a visual studio user jslint for visual studio actually supports both. Web Essentials supports just jshint. I personally use the former one and believe it has improved my code. Also in reply to to all the 'its too opinionated' I say it is a tool. When it complains for instance that jQuery isn't defined in my js file I simply ignore it. I understand that I might not be able to 100% please the tool. I am writing my code for a web app and not the tool however and it isn't a deal breaker if the tool isn't happy as long as the developer knows what the consequences are. It would be one thing if either were giving bad recommendations but they aren't. Just opinionated ones. The solution is being less ocd. A lot of dev shops don't use any kind of linting tools so...
[Javascript Allonge](https://leanpub.com/javascript-allonge) has the best description of closures that I've read... When you call var twice = multiplier(2); A little environment is set up that holds factor. The retuned function has access to that environment and can use factor. 
I strongly disagree. Even though this was valid advice in former years, it is no longer. HTML &amp; CSS are almost vestigial parts of the platform at this point, thanks to UI frameworks, as well as Canvas. You can also get into the industry as a Node developer. **Basically:** just pick up HTML/CSS as you go along, and focus on JavaScript.
Would you believe I gave up on this code almost 2 years ago because I got stuck on this same problem! I thought "We won't need this for a while, I can work on other stuff and somewhere along the way I'll probably figure this out before the client actually agrees with me and wants this feature." Well, almost 2 years later, I'm still stuck in the same spot :( Please help me understand what I'm supposed to do on line 59 and 60 of the source. When a heading is clicked, the clicked element is supposed to be passed to another method of the parent object. But I can't figure out how to call that method properly. I know that within an event handler that `this` represents the clicked element or the event itself and not my object. I've read that you can work around that by defining another variable in your object to be `this` _that : this and then you should be able to use _that.myMethod( event.target ) in the event handler but it isn't working. I don't know what else to do. I don't know what terminology to look up.
I have switched methods of attempting this so I will give an update. As opposed to doing a bounding box method now I am using d3.projection.center(centerPoint) This has allowed me to get the map centered on a point that I want. The objective is to have any given object on the map stay the same size, and when the user resizes the window, they really start revealing what is under it. I am using bootstrap to do the map re-writing currently: d3.select(window).on('resize', function(){ resize() }); Is there a direct way that the "scale" function maps to a set amount of lat or lon from the center of the map? Basically, can I use .center() and .scale() to draw the map to fill a set range on the map? 
A caveat - console is undefined in IE8, so console.warn('...') is going to throw an exception. Be careful about putting this in production code!
There are several very good, recent discussions related to learning JS in our recent [sticky post](http://www.reddit.com/r/javascript/comments/2d3kns/looking_to_learn_js_have_feedbackquestions_about/), I'd suggest starting there.
Yeah, that is something we've been considering actually
FYI: var result = false; console.log(typeof result === 'boolean'); // =&gt; true What you want to do is: (!!result) &amp;&amp; console.warn('A warnly warning.'); Or, you could combine the two: (typeof result === 'boolean' &amp;&amp; !!result) &amp;&amp; console.warn('A warnly warning.'); This would print, "A warnly warning." if, and only if result === true.
You need to call the function using the object it's in. LFJS.toggleSection( ele );
You can't use '?'s in function identifiers. This ain't Ruby.
Problems begins when you create LFJS in literal way var LFJS = { foo: 'bar', that: this, this and that points to global object which is window in your case. Use this keyword only inside functions which are actually methods of objects. So here is my suggestion: watchSectionHeaders: function() { var me = this; //save this object to local var me.sectionHeaders.click(function(clickevent){ ele = clickevent.target; me.toggleSection( ele ); }); } Or little bit simple: watchSectionHeaders: function() { this.sectionHeaders.click($.proxy( this.toggleSection, this )); } Check http://api.jquery.com/jquery.proxy/ for more info And don't forget to visit a JavaScript Garden http://bonsaiden.github.io/JavaScript-Garden/#function.this
A service would be a lot better, not primarily because of performance, but because you get an explicit dependency. Events make it simple to introduce implicit dependencies between arbitrary pieces of code, so it should be the last resort if you want to keep your code maintainable.
Do you like your code being called 'bad' or 'stupid' (jslint) or do you want to actually know what's wrong (jshint)?
Right. Though, I usually find that my editors will treat tabs universally. Say, Sublime Text treats 2 indents as what appears as 4 spaces per indent, for 8 spaces, while Atom.io treats a tab visually as 2 spaces, so even though the indentation is different, it still looks like 2 indents. Or do editors do the same type of thing with spaces?
Right, I think everybody agrees JSLint is opinionated. But this does not mean JSHint isn't also opinionated, which is what I wrote. I only down voted you for the failed reading comprehension.
 var fns = { 'am_i_in?': function... } ... if (!fns['am_i_in?']() ... If you want to call your function 'am_i_in?'. Don't believe the nay-sayers, it is possible! 
JavaScript is case sensitive, so functions called 'am_I_in?' and 'am_i_in?' are different, assuming you can have a question mark in a function's name anyway (see my post below).
Thanks. I wish I had checked back here earlier. Almost 2 hours of trial and error later this is what I wound up doing. I wish I had known of those 2 links years ago :( 
Thanks. I use JQuery regularly so I will check this out. 
(laughs) upvote for that last line. Any books or anything that you'd suggest for learning VIM? I have heard that pretty much no matter what version of linux you're using, that VIM will probably be there (and that there is a higher likelyhood that EMACS is not in there). I have also heard that if you got access to a satellite, that you would be messing with it's code via VIM (which is why I want to learn it...simply because that idea is so cool). 
There's a major problem with your site &gt; Dispensary about 18024.81 miles away 
The question you've proposed will ignite a pyre for millenniums to come. Both offer code quality for developers with a range of discipline. Some will zealously advocate one while others benignly use whichever is established at a workplace. JSLint is the personification of Crockford: strict, opinionated, yells at you and unwavering. JSHint is friendlier and as such, flexes at the will of others' opinion.
Hmm, where are you located? 
&lt;sarcasm&gt; What if I setup my editor with a tab width of 20 because I like it that way? Who are you to tell me that your precious code should only be viewed with a tab width of (number of spaces)? &lt;/sarcasm&gt; Honestly, that's what I think every time I hear this argument. There's a reason why tab width is a setting in most editors.
I don't have any particular book recommendations, but just came across this which seems nice: http://www.openvim.com/tutorial.html And yes, it's good to know vi/vim because it's ubiquitous among almost any *nix installation. And quite a capable and powerful editor. 
Here's a rudimentary explanation: [here](http://stackoverflow.com/questions/1013385/what-is-the-difference-between-a-function-expression-vs-declaration-in-javascrip) 
i like your site. my 2 cents: when you click "Load More Dispensaries" on the landing page, make sure the scroll picks up where the last item in the list left off. Currently, the list scrolls to the top after the next 200 are loaded. In other words, don't make the user have to scroll all the way down again to view the next list of 200 dispensaries. Also, have you thought about using handlebars or underscore templates? i see you're cloning a dom element when you render the list. looping through a handlebars template to show the items could be more efficient.
New Zealand. Please sort out this dispensary issue ASAP
Use tabs, not spaces. Use tabs, not spaces. Use tabs, not spaces. Crockford, I will align my code however the fuck I see fit. Shut up and find my typos and missing semicolons.
&gt; On the left side of a line, there can be only tabs. After one or more non-whitespace characters spaces are used exclusively. Following these rules, when you have a multi-line if statement or function call, the alignment won't be the same with different tabstop lengths and you can't align to a specific character. That is annoying. The alternative is to turn on whitespace visualization and always be aware of if I'm indenting or aligning, then only indent the proper amount, and hold down the spacebar for all alignment after that. That seems like a lot of unneccessary visual clutter and mental effort, when I could just use spaces and know that it will look the same everywhere.
Very WOW :) Very informative and beautifully designed.
Unfortunately, I couldn't find any medical or recreational dispensaries in New Zealand. From what I could tell the use of Marijuana is still illegal for both recreational and medical purposes. :( http://en.wikipedia.org/wiki/Cannabis_in_New_Zealand#Legality *not sure if you're trolling me...*
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 2. [**Legality**](https://en.wikipedia.org/wiki/Cannabis_in_New_Zealand#Legality) of article [**Cannabis in New Zealand**](https://en.wikipedia.org/wiki/Cannabis%20in%20New%20Zealand): [](#sfw) --- &gt;Cannabis use is controlled by the [Misuse of Drugs Act 1975](https://en.wikipedia.org/wiki/Misuse_of_Drugs_Act_1975). Possession of any amount of cannabis is illegal and can result in a fine of up to $500 for possession to a 14 year jail term for its supply or manufacture. Section 7(2) of the Misuse of Drugs Act 1975 contains a rebuttable presumption against imprisonment in respect of possession offences in respect of Class C controlled drugs including cannabis. This presumption does not apply for offences of supplying or possession for supply. Anyone caught in possession of at least 28 grams of cannabis or 100 cannabis joints is presumed to be a supplier, unless the defendant can prove they are not. However, in *R v Hansen* [2007], a majority of the [Supreme Court](https://en.wikipedia.org/wiki/Supreme_Court_of_New_Zealand) held that this presumption was inconsistent with section 25(c) of the [Bill of Rights Act](https://en.wikipedia.org/wiki/New_Zealand_Bill_of_Rights_Act_1990), which affirms the right of those charged with an offence to be presumed innocent until proven guilty. They also held that it was not a justified limitation under section 5 of that Act. Cannabis is a Class C drug, of which the penalty for dealing can result in a maximum prison sentence of 8 years under the Act. There have been many public campaigns to decriminalise Cannabis but so far none have succeeded. It is generally accepted that the usage rate is high and possession in small quantities may not often be prosecuted. In some cases first offences may result in a formal warning and confiscation by police. &gt; --- ^Interesting: [^NORML ^New ^Zealand](https://en.wikipedia.org/wiki/NORML_New_Zealand) ^| [^Aotearoa ^Legalise ^Cannabis ^Party](https://en.wikipedia.org/wiki/Aotearoa_Legalise_Cannabis_Party) ^| [^Misuse ^of ^Drugs ^Act ^1975](https://en.wikipedia.org/wiki/Misuse_of_Drugs_Act_1975) ^| [^Otago ^NORML](https://en.wikipedia.org/wiki/Otago_NORML) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjnidax) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjnidax)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Thanks! Just looked into that bug, thanks for pointing it out. Using jquery append() is causing the issue so actually I have thought about moving towards a template. But I was just going to use angular + ng-repeat. I'm in California, and angular's super hot at the moment. So I figure I could use the practice because my management at my day job wants to move in that direction. 
How are you using nginx in this stack?
Thanks for the help. I got through the ajax briefing and made a simple program that takes the only the video urls as inputs and creates a slide show of the videos that also displays the descriptions and titles! I would post but the code contains my api key. I'm going to have to figure out how to hide that. 
Fairly similar to [this](http://blog.argteam.com/coding/hardening-node-js-for-production-part-2-using-nginx-to-avoid-node-js-load/) Letting nginx handle SSL I'm delivering static assets (images, css, client side JS) Also using proxy pass with upstream to do manual clustering using forever.js **Side Note** I did an apt-get update on my ubuntu box and hosed my entire app on Saturday night. Something in that update wouldn't let me access *http://127.0.0.1:5000* it took me about 3 hours to figure out it wanted *127.0.0.1:5000* instead -__-
Right, the expression "typeof result === 'boolean'" was (syntactically correct) pseudo-code. It was intended to communicate that any expression with a boolean result could be used in that place. It does not reflect any actual code I was using. [*edit: failed attempt crossed out but left for the sake of honesty.*] ~~((result &amp;&amp; result) === result) &amp;&amp; console.warn('A warnly warning.')~~ (result === true) &amp;&amp; console.warn('A warnly warning.') Would be the better way to express the literal interpretation, I think.
The author incorrectly indicates that `typeof false` returns `"bool"`. `typeof false === "boolean"` Source: [table of possible return values of `typeof` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#Description)
Thanks for pointing that out, I've corrected it
Use strict everywhere :)
I saw a talk where he said that he does not use prototypes any more, everything you mentioned after prototypes are things he did not mention in his talk that I watched. Are you sure you are not making things up and drawing your own strawmen?
I'd say its a bit early to comment about performance! Nothing that can't be improved. And your notice they aren't always on these parts of the project a lot is pretty much proof of concept atm. There are many gaps, in the commit times.
I use Notepad++ and it shows indentation level based upon how you define indentation. I use 4 spaces for my indentation and the editor shows indentation lines for this.
That last sentence made me laugh a little. It's a very interesting way to ask if I'm full of shit. I don't remember every detail of the talk. What I do remember is his format for creating new instances, which consisted of a function named something like `createMyThing`, which started out by creating a plain object, attached methods one by one, froze it, and returned it. And I remember him explicitly admitting that it uses more memory (don't remember if he mentioned performance), and passing it off by saying "computers have a lot of RAM now" (paraphrased). I recall, also, that he inexplicably didn't mention the memory savings that could be easily had by putting the methods in an IIFE and just attaching pointers to them. As he didn't say a word about it, I don't know if he was against it (maybe it messes with his "guarantees"), or if he assumed it is obvious, or something else. Do you have the link around, so we can verify?
To be fair, Crockford does explain some of his preferences [here.](https://www.youtube.com/watch?v=_EANG8ZZbRs) His argues is that these *aren't* just "taste things", and one way of doing things is more error-prone than another. (Whether or not you agree with his arguments is another thing.)
Crockford explains [here:](http://javascript.crockford.com/code.html) &gt;The unit of indentation is four spaces. Use of tabs should be avoided because (as of this writing in the 21st Century) there still is not a standard for the placement of tabstops. The use of spaces can produce a larger filesize, but the size is not significant over local networks, and the difference is eliminated by minification.
http://evadeflow.com/wp-content/uploads/2011/03/TabsSpacesBoth.png
 Could live with this if editors supported toggling spaces used for alignment. With such a feature, I could work with code like this: var excessivelyLongName = &lt;something&gt;; var shortName = &lt;something else&gt;; While those obsessed with alignment would work with code like this: var excessivelyLongName = &lt;something&gt;; var shortName = &lt;something else&gt;; That feature, coupled with a pre-commit hook to transform the latter form into the former for saner diffs, would be a fair compromise for me. Edit: mobile formatting strikes again.
&gt; data in services and factories, directives to handle jquery plugins and gmaps, and also semantically extend your HTML, controllers to a minimum to direct flow. 
It sounds like you should be using delegated event handlers. 
If I'm reading this correctly you need $(obj).clone(true).children();
This is called variable shadowing. &gt;In computer programming, variable shadowing occurs when a variable declared within a certain scope (decision block, method, or inner class) has the same name as a variable declared in an outer scope. This outer variable is said to be shadowed...
Nice site. Did you consider other map options like Leaflet or Cesium, or is there a specific reason you used gmaps?
1. Oops thanks for that! Fixed. 2. Honestly I plan to move everything to the .com I started with the .org and found a domain squatter on the .com and just finished escrow on it this passed friday. I have a lot on my todo list. (Using asana btw) 3. This was! I pretty much rolled my own although I did use the base template that web storm creates. 4. Hmm this is a fun question: -A lot of the db stuff was a little tough my brain has never had to think in those terms before -Wrapping my head around the mongodb $ operator was equally tough -Setting up node on an ec2 instance the first time through, because I didn't use an ubuntu box -SSL was a little rough -Running a function that has multiple asych db calls. At first I just nested them but then I found (when.js)[https://github.com/cujojs/when] and it was glorious 5. Easy Stuff : -IP Geolocation using http://freegeoip.net/ -Image uploads with cloudinary -Google recaptcha -Bootstrap I should really give more credit here bootstrap made my life so easy. 6. I'll make one tonight! 7. Ya you're right that is confusing. I'll work on fixing that! 
To explain, delegated events are when you attach the event listener to one element to listen to (or for) its children. In jQuery it is usually done via: $(parentElement).on(event, childElementSelector, callback); The primary benefits are: * You can create one listener for many child elements. * You can create a listener for child elements that don't currently exist. So, if you copy, create, move an element at any time, as long as it is a child of *parentElement* and it meets the criteria for *childElementSelector* it will trigger the event.
Has science gone too far?
I've been thinking about going full angular. The map page and list view pages would be pretty easy to implement. (less actual google map stuff) Sadly I have some admin stuff to finish up before I do this refactor. 
I only looked bing maps. But since I've already done a bunch of stuff using Google maps at my day job I figured I would be saving time. Have you used Leaflet or Cesium? How do they perform vs Google maps? 
That sounds exactly like the same talk I heard. While you are correct in that prototypes are solely intended as a memory conserving mechanism, but the rest of your paraphrase largely is full of shit. I can only guess that you understood part of what he was talking about not the rest and so you are not intentionally trying to be deceitful.
I have, it depends on what you're using them for, but Leaflet is great for minimal data sets (like what you have), Cesium is great for time-dynamic datasets. I'm a bit biased since my company sponsors/develops Cesium, but even for my side projects now I'm moving away from Google Maps due to how much it locks you in to using only their tileserver, as well as performance issues with complex graphics. Your implementation looks fine though, was just curious about your thought process. 
OH MY GOD YES. GENERATORS!!! MUST SHOW THIS TO COWORKERS WHO WRITE TERRIBLE JAVASCRIPT! 
Wow... I think you are right.
Always the tiniest details that take the longest to fix :(
Couple of notes: the menu does not open at all on my s4. I have no clue why, but running it in the emulator may provide some more useful info. Also, how are you handling geolocation? I didn't get notified about using my location and the bar below the main content said "searching near,". Looks like it defaulted to Colorado but I think maybe there is an issue with chrome for Android not attempting to get my location info. Overall looked good and performance was good (the initial load was slow but I'm almost wondering if it didn't pull in the entire list of Colorado given no location info) Edit: note that if you are loading the entire list for a given location, that's not useful imo. People want to get in, find the best option in a relatively short distance, and get out. Consider limiting the top n (whatever you feel is right) based on ranking and then load more if needed and the initial load time can come down a bit. Nobody will actually will actually decide by looking through a list of a couple hundred options.
Js syntax and you are not friends. Check out [jslint](http://www.jslint.com/) and [jshint](http://www.jshint.com/) for helpful information.
&gt; prototypes are solely intended as a memory conserving mechanism I did not say that, and it is not true. The memory conserving aspect of prototypes could be achieved much more simply by manually attaching pointers, as I suggested above. The additional savings of a prototype are negligible. Prototypes have a much broader purpose. &gt; the rest of your paraphrase largely is full of shit Ok, uh, care to say why? What I said *is* an accurate description of the approach he described. The cons I pointed out are the cons *he* pointed out. The reason he gave for it in the talk *is* what I said - "strong guarantees" about an object. What part of that is "full of shit"?
I spent some time figuring these out for my own practice. I wouldn't really call a lot of them idiosyncrasies. Many wouldn't make sense any other way and a few that are odd choices match up with choices made by a lot of other languages. 1. Dynamic type conversion. Property names must be strings so foo and bar are both implicitly converted to their toString: "[object Object]" https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals 2. This seems to be wrong. It actually logs "foo", which matches MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Scope_Cheatsheet#function_oddities I wouldn't have been super surprised if function hoisting worked like this, but it apparently doesn't (in FF at least). 3. NaN indicates what it isn't (Not a Number), not what it is. Should parseInt("a") === parseInt("b")? 4. Function hoisting. 5. Not really an idiosyncrasy, closures capture variables that they use. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures They wouldn't work correctly if they didn't. 6. Not really an idiosyncrasy. It's unusual that you can do this, but the result shouldn't be unexpected. 7. This is standard two's complement bitwise arithmetic. https://en.wikipedia.org/wiki/Two%27s_complement#From_the_ones.27_complement -3 = 0b11111111111111111111111111111101 ~-3 = 0b00000000000000000000000000000010 = 2 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators It is a bit strange that JS Numbers are normally 64 bit floats except for bitwise operators, but it would be weird to have to deal with the actual binary representation of those floats in practice. 8. Same standard two's complement bitwise arithmetic as #7 with the addition of an implicit conversion of decimal values to integer values before the bitwise operation takes place. 9. Not really an idiosyncrasy. An unexpected feature perhaps. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length 10. Same as #8. Implicit conversion to integer + two bitwise negations. 11. Not really an idiosyncrasy. ! implicitly converts its argument to a boolean. Although the truthiness of some values is inconsistent with ==, the truthiness of 'a' isn't. https://developer.mozilla.org/en-US/docs/Glossary/Truthy 12. Not really an idiosyncrasy. Null probably could have had its own special type, but it doesn't seem too odd to have it be a type of object as it represents the "absence" of an object. 13. Not really an idiosyncrasy. Nothing seems to be unusual here with the normal semantics of call, bind and ||. Just a lot of confusing names and syntax. 14. Not really an idiosyncrasy. The apply isn't really doing anything special here. Splice might be considered an unusual function, but it works pretty much the same way as it does in other languages that have it. 15. Not really an idiosyncrasy. Seems like a reasonable choice to convert a Date to its epoch timestamp when converting to int. 16. Not really an idiosyncrasy. valueOf is what is being implicitly called in #15 to convert to int. 17. Not really an idiosyncrasy. A more standard ISO date might have been nice (this might already be some standard I'm not familiar with). 18. Not really an idiosyncrasy. The parameter 'foo' shadows the 'foo' from the outer scope for the duration of the inner function. The parameter is what is assigned to. I'd expect this to happen in most languages with scopes. 19. Not really an idiosyncrasy. Mainly just confusing use of bind and call, but the semantics are pretty straigtforward. 20. Not really an idiosyncrasy. Pretty standard toString behavior, I'm not sure what else I would expect. 21. Function equality is hard. Could just be expressed as `(function(){}) === (function(){})`. Defining whether or not two functions are "equal" is a tricky proposition and it seems reasonable to just say that they never are unless they are both references to the same function definition. 22. A bit weird, but a number of other languages have a distinction between primitive and non-primitive types. It's unfortunate that the === operator considers converting between these as type conversion. 23. Array equality is hard. Could just be expressed as `[2] === [2]`. Checking for deep equality would be very time consuming with deeply nested arrays. 24. Object equality is hard. Could just be expressed as `({foo: 'bar'}) === ({foo: 'bar'})`. Checking for deep equality would be very time consuming with deeply nested objects. 25. Not really an idiosyncrasy, but this one is genuinely a gotcha. The `Array#map` callback is given three parameters: the current value, the index and the array itself. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map `parseInt` takes a radix as the second argument and so the index will be used as the radix. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt I'm sure I would have been bitten by this at some point, so I'm glad you pointed this out. Always specify a radix! 26. Not really an idiosyncrasy. `valueOf` takes precedence over toString in type coersion. One of the two had to take precedence so I'm not really surprised. 27. Not an idiosyncrasy. There isn't anything weird to do with prototypes or constructors here, this is standard property assignment. `Bar.prototype = new Foo()` completely replaces the old Bar prototype and the previous assignment of the `constructor` property is irrelevant. 28. A bit weird. The name specified for a function expression is only available inside the function body. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function 29. Pretty weird. Void is a unary operator that always returns undefined. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void 30. Not an idiosyncrasy. Array equality is hard. Could just be expressed as `[1,2] === [1,2]`. The assignment `b = a` is irrelevant. 31. Identical to #24 32. Variable hoisting. Declaration is hoisted but not assignment. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Scope_Cheatsheet 33. A bit weird, but a number of other languages have a distinction between primitive and non-primitive types. Similar to #22 34. Not an idiosyncrasy. This is pretty consistent with how local variable scope works. 35. The second bind would never change n itself here. I assume you meant to do `n = n.bind...`? It's a bit weird that you can't re-bind bound functions, but doesn't seem idiosyncratic. 36. Not an idiosyncrasy. There's no type conversion weirdness going on here. The string '3' comes lexigraphically after '12' and the string '03' comes lexigraphically before '12'. 37. Floating point weirdness. This shows up in a lot of languages and isn't really unexpected. Not really idiosyncratic. 38. Seems reasonable. 2^`1024 is greater than Number.MAX_VALUE https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE 39. Seems reasonable. That's how infinity works. 40. Floating point weirdness. This shows up in a lot of languages and isn't really unexpected. Not really idiosyncratic. 41. Seems reasonable. That's how atof works. 42. Yay Octal. Not really idiosyncratc as there are a number of other languages that do this (mostly copied from C, Java). 43. This returns `true` for me. I'm not sure what this is supposed to be demonstrating other than the existence of Object.getOwnPropertyDescriptor. 44. This also returns `true` for me. 45. Arrays are truthy. https://developer.mozilla.org/en-US/docs/Glossary/Truthy 46. Type conversion. Arrays are successfully converted to numbers only if they contain a single number or are empty. Otherwise the result is NaN. 47. Type conversion. The ![] isn't necessary, `+[false]` is the same. Since this array doesn't contain a number the result when converting it to a Number is NaN. 48. Not really an idiosyncrasy. Accessing an array entry that doesn't exist should return undefined. 49. Type conversion. Not really very surprising given the former examples. 50. This is pretty inconsistent. So far we've only seen arrays auto converting to Numbers with the unary `+` operator, but with the binary `+` operator they convert to Strings. 51. Type conversion. Not really very surprising given the former examples. 52. Floating point weirdness. This shows up in a lot of languages and isn't really unexpected. Nothing to do with type conversion. 53. This is pretty unique to JS because of its odd 64 bit float Number implementation. `10000000000000000 &gt; Number.MAX_SAFE_INTEGER` https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER 54. Floating point weirdness. This shows up in a lot of languages and isn't really unexpected. 55. Type conversion, '' coerces to 0. Seems reasonable. It's up for debate in a lot of languages what dividing by zero should do. 56. Type conversion, '' coerces to 0. Seems reasonable. It's up for debate in a lot of languages what dividing zero by zero should do. 57. Type conversion, null coerces to 0. Seems reasonable. 58. Type conversion, [] coerces to false. Seems a bit weird. The `new Array()` isn't any different than [].
thanks! I'm glad it's useful for you too
 $=~[];$={___:++$,$$$$:(![]+"")[$],__$:++$,$_$_:(![]+"")[$],_$_:++$,$_$$:({}+"")[$],$$_$:($[$]+"")[$],_$$:++$,$$$_:(!""+"")[$],$__:++$,$_$:++$,$$__:({}+"")[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+"")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+"")[$.__$])+((!$)+"")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!""+"")[$.__$])+($._=(!""+"")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!""+"")[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+"\""+"\\"+$.__$+$.$$_+$._$_+$.$$$_+$.__+$._+"\\"+$.__$+$.$$_+$._$_+"\\"+$.__$+$.$_$+$.$$_+"\\"+$.$__+$.___+"'\\"+$.__$+$.$$_+$.___+$._$+"\\"+$.__$+$.$$_+$._$$+"\\"+$.__$+$.$$_+$._$$+"\\"+$.__$+$.$_$+$.__$+$.$_$$+(![]+"")[$._$_]+$.$$$_+"\\"+$.$__+$.___+"!=\\"+$.$__+$.___+"\\"+$.__$+$.$$_+$._$_+$.$$$_+$.$$__+$._$+"\\"+$.__$+$.$_$+$.$_$+"\\"+$.__$+$.$_$+$.$_$+$.$$$_+"\\"+$.__$+$.$_$+$.$$_+$.$$_$+$.$$$_+$.$$_$+"'"+"\"")())();
While it is possible to find work in JavaScript without CSS or HTML, it's very rare - the vast *vast* majority of positions available require a good knowledge of the entire front-end stack.
I can't speak for this interview, but I have definitely been on interviews where they were looking for someone who wasn't too qualified. The perfect candidate for some employers is a person who secretly feels they are not up for the job and will work around the clock to hide their terrible secret. Sadly, the employer knows this all to well and will exploit their insecurity to get gobs of free overtime.
&gt; What I said is an accurate description of the approach he described. You mixed what he said with your opinion of it without noting the difference. This is the as far as I will go on this conversation.
If you want your feelings hurt use JSLint. If not use JSHint. 
I don't understand why people give a crap about aligning consecutive assignments. It doesn't make the var names any more readable, and it makes you have to do a bunch of extra maintenance when you decide to change a variable name, or add a new one. It should just be an editor display setting like: `alignConsecutiveAssignments = true;` There's no reason for that crap to be in source control. It's like filling up your HTML with &amp;nbsp instead of doing stuff that's semantically meaningful and adjusting the display with CSS (this is also why I use tabs and change my tabWidth setting if I don't like how it looks).
Hey /u/html6dev ah ya. I haven't gotten around to doing the mobile menu yet. Working on that next! I'm not loading in the entire list. Only the first 200 results using $geoNear. But it's a good point I should limit how many are being loaded for mobile users. 
thanks! looks neat! 
that's what I've heard as well, you need a working knowledge of these languages for java 
thanks for you response guys!!
I will definitely check out both of these books, and i have just bookmarked stackoverflow, it's seems like a great way to get advice during and after the learning curve!
this looks like a great hands on guide, thanks! I have been interested for some time in linux, it sounds like a great project to get me into coding!
Honest question: what's wrong with tabs? Edit: never mind. I read further down. Interesting stuff!
why doesnt this auto format the code instead of just telling you the code doesnt look the way they want it to. 
I try to avoid alignment in general, so unless there are established style rules for a project that forbid it, I prefer to lay out multi-line function calls like this: functionName( arg1, arg2, arg3, arg4 ); I generally find that more readable and easier to maintain (e.g. I don't have to re-align when renaming a function) than something like the following: functionName(arg1, arg2, arg3, arg4); But I also can't imagine ever going back to editing code without whitespace visualization. In my experience it leads to all kinds of horrors, regardless of your indent preference.
&gt; Use VIM... Use emacs.
I still say 200 is a really large list to wade through. However, I don't know a ton about the context here ;) and therefore I don't know a lot about the needs of the prospective users which is always the most important factor. I just know in general I'd rather receive a curated list of what *should* be my best options and then dig deeper if I don't see what I need. And yeah, mobile can really make a massive difference. If you re interested in ways to optimize for mobile performance check out some of Ilya Grigorik's videos on 'The Critical Rendering Path' on youtube. But it's a whole other topic unto itself really. 
have you thought about switching to an MVC heavier site? This could easily be turned into a SPA (which is both good for your resume and performance of your site) You spend the resources to load Angular but to make use of it. Also if you feel like the site has too many files have you considered an AMD like requirejs or CommonJs 
http://imgur.com/y7Hm9
You tab indenters make me sick http://sideeffect.kr/popularconvention/#javascript
Cool. Hope that helps. YouTube is also a helpful resource too... Lots of tutorials out there that you can follow along with. Your journey will no doubt be fraught with complications and sometimes with a feeling of helplessness and impossibility, but there's always a solution and the roadblocks never go away, you just know how to get past them better with time.
I don't believe this will clone the children's events. 
You need to set the deep clone flag. See the [clone documentation](http://api.jquery.com/clone/): .clone( [withDataAndEvents ] [, deepWithDataAndEvents ] ). So, it should be: $object.clone(true, true).children() However, /u/rhomboid is probably right. You should be using delegated event receivers. 
No problem! Glad you made it through. And for that, you can look into things like Browserify, and store the keys in a separate file and import them. But that requires node, NPM, etc... 
You missed his point
You should give [`navigator.geoLocation`](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation) a try instead of IP-based geo-location, it's much more accurate for mobile devices.
I want to use WebSocket when there is no WAN. So I need to start a LAN on one mobile (triggered in browser, with HTML5 perhaps) and then use WebSocket to connect other mobile with LAN.
Express is just a layer over the node.js HTTP module.
With a mobile browser. Are you sure about this?
thanks. I didn't know what these were. Extremely useful. Thanks again
Not sure about WebSocket. But WebRTC allows you to create peer to peer connection (P2P). So you and your friend (or your clients) just should to give local IP address of their devices to each other. Then one of them should input that IP in you web-app as host address and start RTCPeerConnection. Manual IPs exchange is necessary part. As far as WAN exist you just send invitation(URL, room address) and server make IP exchange for you. In case of WebSocket you use well known domain name as host, and server acts as a bridge or proxy between two chat users.
Maybe idiosyncrasies isn't the best term for the repo. But you're pretty right on with all these.
Because linting/validation is helpful, automated overwriting of source code is dangerous
Even with peer-to-peer WebRTC, there should be a server on either of the mobile. So this is still the same problem with that of WebSocket.
I started off using only jQuery and added angular on one page(the full dispensary page) to handle the sorting. jQuery and Angular together isn't unheard of but it does at a degree of bloat. Considering a full refactor in the near future to move towards a lighter site. In terms of the backend stack, you're right I could have used Node.js to extract data from DB. However I wouldn't have learned as much, and handling the admin stuff requires a degree of Angular expertise that I don't have just yet. 
I really like the idea of doing a SPA! I haven't implemented requirejs or commonjs on the front end before how much work is it? It's really straight forward on the node stuff because it's compile time. 
I've done stuff with navigator.geoLocation in the past (at my day job) but ran into multiple issues with browser preferences and general user error. 
Sounds like you haven't fully understood WebRTC - it's a way for devices to communicate with each other without the need for a separate server. [/u/14best described it awesomely](http://www.reddit.com/r/javascript/comments/2daido/is_it_possible_to_start_a_local_server_on_mobile/cjntjdh), and HTML5 Rocks has an [awesome article](http://www.html5rocks.com/en/tutorials/webrtc/basics/) to help you get started.
jshint
Wow I seriously wasn't expecting this to get 70 stars in 2 days
Perhaps the better question would be: why? What specifically are you trying to accomplish?
If this is possible, then I can make Web games that can be played without WAN, in cases that friends gather together in a party.
It will start to bog down with larger DOM's, if your `$form` is always of reasonable size then you won't have an issue. Your method should be fine for 99% of cases, with exceptions maybe for legacy IE and mobile. Also, the type of find matters a lot, and yours is fine IMO. It does 2 things that help: a) it's anchored to an element (as opposed to starting on `body`), and b) it's fairly specific (specifies `input[name]`). The main performance problems I see from `find()` are from things like `$('body').find('.foo')` which requires iterating every element in the DOM.
I've always gone with #1, but find that it's just so lame to have something as *important feeling* as a module lay equal in capitalization to a mere function. I find myself leaning towards #2, but worry that it's a bad idea to have Modules and Constructors with the same capitalization scheme. Maybe it's not so confusing? I then wonder if #3 is actually the best option, despite being so loud and shouting with ugliness, because that's usually reserved for global constants -- which, as a best practice, I never ever use, so I never ever fully capitalize anything. Maybe this style vacancy is rightly filled with MODULE? Maybe modules are important enough to be SHOUTED at the programmer? Maybe I'm just going capitalizationCrazy ;)
[window.$](http://jquery.com/) or [window._](http://underscorejs.org/) are best
I'd also like to add that is seems like the official JavaScript convention is #2 -- considering that things like the `Math` object are capitalized modules that are not constructors. Maybe it's best to stay consistent with the language itself?
Right, but only for an all-encompassing super library such as jQuery or Underscore. I'm talking about little guys, reusable modules of various kinds -- things color libraries and form validation libraries -- canvas rendering libraries -- things that need to be identified by *names*.
Require is really easy. Just a file for some path and configuration, in the actual files you just wrap everything in a define() call and you're good to go. 
Definitely the 2nd one. Camel case is usually for variable names and if you need to instantiate a class of sorts -- the class would then use capitalization ... and of course, all caps is for constants. If it's just a function, you can use mixin http://lodash.com/docs#mixin ... and if it's DOM manipulation, create a jQuery plugin... in either of those cases you'll probably want 1-word lower case. I'd be hard-pressed to build a library these days.... maybe just `window['Util'] = { } ` for things that don't fit anywhere else.
Definitely just an early version, there's not even a release schedule for 2.0 yet! 
Sounds like you need some [jQuery magic](http://learn.jquery.com/events/event-delegation/) It's bind script to posts-container, and when event occurs it delegate this event to specific post under which it happened
I don't think that's true. It was true in the 80's of unix. But I flat out don't believe any linux distro doesn't have emacs from the get go.
I mean its hard the first time cus the documentation is a bit difficult to understand however after that its really easy to use. You can also use requrejs to compile all your dependencies into a single file or (if your app is really HUGE) you can use it to load file asyncly and send the client only files it needs when it needs it.
(shrugs)
At least both mobiles need IP to connect each other, right? Where there is no WiFi, when they open WiFi button but find no connect, then I think they can't have an IP at this point.
Thanks for pointing me in this direction, it seems pretty complicated, but I'll give it a go! (with the help of my friend :S )
How would a server help in that situation?
No WiFi = No life *(No needs in games)*
Hint customizable
Their concern was: "if that person has a different tab length set in in their editor, it'll no longer be lined up properly." Which isn't a problem if you use tabs only for indention and not for alignment. 
Tabs vs spaces is a taste thing.
[jQuery](http://api.jquery.com/jquery.noconflict/) and [Underscore](http://underscorejs.org/#noConflict) both ship with no-conflict functions. You can name your library whatever you like and avoid conflicts by providing the same function. However, I would recommend implementing the [AMD pattern](http://en.wikipedia.org/wiki/Asynchronous_module_definition) so that consumers of your module can use whatever naming convention they like.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Asynchronous module definition**](https://en.wikipedia.org/wiki/Asynchronous%20module%20definition): [](#sfw) --- &gt; &gt;__Asynchronous module definition__ (__AMD__) is a [JavaScript](https://en.wikipedia.org/wiki/JavaScript) [API](https://en.wikipedia.org/wiki/API) for defining modules such that the module and its dependencies can be asynchronously loaded. It is useful in improving the performance of websites by bypassing synchronous loading of modules along with the rest of the site content. &gt;In addition to loading multiple JavaScript files at runtime, AMD can be used during development to keep JavaScript files encapsulated in many different files. This is similar to other programming languages, like [Java](https://en.wikipedia.org/wiki/Java_(programming_language\)), which support keywords such as import, package, and [class](https://en.wikipedia.org/wiki/Class_(computer_programming\)) for this purpose. It is then possible to [concatenate](https://en.wikipedia.org/wiki/Concatenation) and [minify](https://en.wikipedia.org/wiki/Minification_(programming\)) all the source JavaScript into one small file used for production deployment. &gt;==== &gt;[**Image**](https://i.imgur.com/XObM4k7.png) [^(i)](https://commons.wikimedia.org/wiki/File:Asynchronous_Module_Definition_overview.png) - *Instead of loading files one after the other, AMD can load them all separately, even when they are dependent on each other.* --- ^Interesting: [^Dojo ^Toolkit](https://en.wikipedia.org/wiki/Dojo_Toolkit) ^| [^Bootstrap ^\(front-end ^framework)](https://en.wikipedia.org/wiki/Bootstrap_\(front-end_framework\)) ^| [^Yeoman ^\(computing)](https://en.wikipedia.org/wiki/Yeoman_\(computing\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjnvldk) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjnvldk)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Wow! My old Motorola razr has also ability to create [Portable Wi-Fi hotspot](http://www.pcadvisor.co.uk/how-to/mobile-phone/3279408/how-tether-google-android-phone/)! Thanks a lot!
JSHint, because actually useful, as opposed to JSLint.
I don't know if it could cause errors, but at the very least it's annoying for other people who have to maintain your code. Using spaces is easy and makes everybody happy...so why not do it?
This is cool. Where did you get the list of dispensaries?
window._m0'duleNAME™®_____ 
That seems to work for my problem. Thanks a lot!
&gt; at the very least it's annoying for other people who have to maintain your code No, it's not. 99% of the people who write Go use tabs for indention.
I don't disagree with what you say ought to be done, but any remotely competent diff tool can be told to ignore whitespace changes.
&gt; 99% of the people who write Go use tabs for indention. What does that have to do with anything? Besides, I'm not talking about Go. This is /r/javascript.
I do that already. What I am saying is instead of enforcing a coding style ising a checker actually just do the code formatting instead . Like jsbeautify
You are right -- your performance problems are more likely to be layout thrashing (http://wilsonpage.co.uk/preventing-layout-thrashing/) than anything else when building with a large app (that's why you should use React and never have this problem! *shameless plug*). But since all you're doing is submitting a form it doesn't matter at all. Unless you've actually optimized a performance critical app before, most people's intuition about performance is way off.
You seem to assume that everyone prefers spaces. JavaScript doesn't have a de facto standard for indentation. Go does, however. And it went with tabs instead of spaces.
I've read that JavaScript turns: `function foo() {}` into: `var foo = function foo() {}` behind the scenes. Is this true? In that case I can see why it's better to use function expressions in order to show the developer what's actually happening.
I don't understand why some people want to force their opinions on the rest of the population. If you don't understand something, that's fine, but please don't tell me that my preferred way is "crap" because of X or Y non-sense.
&gt; You seem to assume that everyone prefers spaces. The people who have to read your code do. &gt;JavaScript doesn't have a de facto standard for indentation. So? &gt;Go does, however. And it went with tabs instead of spaces. Why should I care how the Go community indents their code? Maybe all Go coders program while hopping on one foot. That doesn't make it the right thing to do.
s/everybody/me
*The Good Parts* is an essential book, but it's definitely advanced. It's a thin volume, but it took me awhile to read because I had to re-read several parts to get exactly what he was doing. It is *dense* reading. If you keep with it and don't give up, though, it will open your eyes to a lot of things. I recommend checking out Crockford's lectures, too. They're much more accessible than his writing is, and there's a ton of them on YouTube.
They're just lamenting the marijuana situation in their area.
&gt; The people who have to read your code do. No. Again, you seem to assume that everyone prefers spaces (how many?) which evidentially is not the case. I used Go as an example for standardizing on tabs. Dart standardized on 2 spaces. Python standardized on 4 spaces. JavaScript doesn't have standard code conventions. As a direct result, many different indentation styles are used.
I would always go with the second one, reads so much better. 
How about none of the above? It's 2014, if you are still importing your libraries from global scope you are doing something very wrong. Use commonjs ffs.
The only point I don't undestand is why you state that `strings` are objects (in contrast to `booleans` and `numbers`). var s = new String('a') var n = new Number(23) var b = new Boolean(true) typeof s // "object" typeof s.valueOf() // "string" typeof n // "object" typeof n.valueOf() // "number" typeof b // "object" typeof b.valueOf() // "boolean" The implementation of primitive/compound strings, numbers and booleans looks alike to me. Also primitive numbers and booleans gets boxed thus "gaining" temporary access to their matching Object prototype.
If 'module name' is a constructor function or a class (i.e. you call it with the `new` keyword), use PascalCase. If it's a regular variable, function or instance, use camelCase. Douglas Crockford would recommend that you use ALL_CAPS for global variables, but this is not widely regarded. Many people reserve all caps for constants. Another way to define a module that exposes a global variable is to do: (function () { var moduleName; // ... window.moduleName = moduleName; })();
That was shamefully self-glorifying. Also, very verbose and your life would be made far better with both knowledge of Function.prototype.bind and the removal of the stick from your ass. add = (n) -&gt; sum = if @ instanceof Number then @ else 0 if n? then add.bind(Number(sum+n)) else sum.valueOf() function add(n) { var sum = this instanceof Number ? this : 0; return (n !== undefined ? add.bind(Number(sum+n)) : sum.valueOf()); } Far shorter, no messing around with parseInt, and proper currying.
well, unfortunately the selection doesn't clear on an ipad, although it does when emulating ipad on chrome
So, you think your interpretation of me saying it's crap "because of X or Y non-sense" (what's nonsensical about it?) is worse than your saying it's not crap, because ... nothing? Please don't tell me that what I think is crap isn't crap when I've provided a bunch of arguments, without refuting any of them. I'm happy to reexamine my position in light of new information, or perspectives I've failed to consider. Your preferred way makes me dirty a bunch of lines if the longest variable name in a block changes, breaks in cases of non-monospaced fonts, adds a bunch of non-semantic symbols to source, confuses blind programmers, makes it much more likely I'll have to horizontally scroll to read lines, and as far as I know, the payoff is aesthetics, sometimes. What am I missing?
yup http://www.emacswiki.org/emacs/Evil
Pretty but I've never found those enjoyable to use.
Sorry for not having argumented the "nonsense" bit. I think you are missing that aesthetics and personal taste matter (a lot) to some. Code is not exactly prose or poetry, but forcing every author to use the same writing style looks to me like ignoring an important part of our intellect. I wouldn't enjoy finding the same exact style on every book I read. In contrast, I enjoy recognizing the same style (or an evolution of it) in the work of a specific author. Not all code is written in the context of an industry made of tons of interchangeable programmers where being an individual with strong opinions about style could generate damage. There are also artisans, still working alone in a dark cave, neverthless producing good (and sometime even influential) stuff, and not giving a shit about what Crockford has to say (he is so arrogant and offensive that the net result of its good and bad parts tends to zero). Sorry for the divagation not strictly related to your argument, but I hope that now my point is more clear.
Sure, but there's no way to have a variable name with a question mark in it or use a question mark in a function declaration (as opposed to a function expression like you are suggesting). You can have question marks in property names, though, as you point out. IIRC they can be any possible string (including the empty string).
It depends on what you are exporting. Is it a function? Go with 1. Is it a constructor? Go with 2. Is it a constant? Go with 3. For sure I would not pollute the global scope but use a module system / IoC instead.
It's difficult. I do not ever use the module pattern (instead I recommend using a real module loader like browserify for CommonJS or require.js for AMD), so if I have a variable in the global scope it's just a variable and thus follows the same naming conventions as elsewhere. I follow the same naming conventions strongly recommended by both [idiomatic.js](https://github.com/rwaldron/idiomatic.js) and [Douglas Crockford](http://www.jslint.com/lint.html#new): * `regularVariableNames` are written in "snakeCase" (aka CamelCase starting with a lower case letter). * `ConstructorNames`, i.e. anything you call with `new`, are written in "CamelCase" (starting with an upper case letter). Plus, in the few cases local variables should be treated as constants, those are written in `UPPER_CASE_WITH_UNDERSCORES` to set them apart as special. Additionally I follow the convention of using underscore prefixes for "private" methods and properties, i.e. "things you should probably not manipulate directly but we're all adults here so use them if you dare". So to answer the specific question: library names should be capitalized the same way they would be capitalized if they were local variables. The only exception I tolerate is React, which names components with CamelCase to set them apart from HTML element names in JSX.
Hello Python.
This. A thousand times this. Except I'd be fine with using UMD instead of pure CommonJS. But these days my approach to providing modules for the browser is "just use a CommonJS loader FFS" too. AMD is dead to me.
I prefer option #1. Option #2 is for constructor methods, such as `new FormValidator()` or something like that.
woah... totally thought that ThisWasCamelCase and thisWasPascalCase. I was going to correct you but double checked first (glad I did). It seems confusing that [pascal case is technically a subset of camel case](http://en.wikipedia.org/wiki/CamelCase)... Either way, I agree with you. This is the convention. It is known.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**CamelCase**](https://en.wikipedia.org/wiki/CamelCase): [](#sfw) --- &gt; &gt;__CamelCase__ (__camel case__, __camel caps__ or __medial capitals__) is the practice of writing compound words or phrases such that each next word or abbreviation begins with a [capital letter](https://en.wikipedia.org/wiki/Capitalization). Camel case may start with a capital or, especially in [programming languages](https://en.wikipedia.org/wiki/Programming_language), with a lowercase letter. Common examples are [PowerPoint](https://en.wikipedia.org/wiki/PowerPoint) or [iPhone](https://en.wikipedia.org/wiki/IPhone). &gt;In [Microsoft](https://en.wikipedia.org/wiki/Microsoft) documentation, camel case always starts with a lower case letter (e.g. backColor), and it is contrasted with __Pascal case__ which always begins with a capital letter (e.g. BackColor). &gt;==== &gt;[**Image**](https://i.imgur.com/7EirmuM.png) [^(i)](https://commons.wikimedia.org/wiki/File:CamelCase.svg) - *A two humped camel that illustrates the idiom.* --- ^Interesting: [^Wiki](https://en.wikipedia.org/wiki/Wiki) ^| [^WikiWikiWeb](https://en.wikipedia.org/wiki/WikiWikiWeb) ^| [^Naming ^convention ^\(programming)](https://en.wikipedia.org/wiki/Naming_convention_\(programming\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjny740) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjny740)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
/r/ProgrammerHumor Please :)
I'm fairly certain that v2.0 is using `Object.observe`. AFAIK the only way to implement this in &lt;= ES5 is with an interval that manually checks each observed object. At that point it's a matter of balancing lag from not checking often enough and lag from maxing the processor out. Either way it's slow
I would say that in 95% of the time the performance difference is irrelevant. However, what does matter is that sometimes using too many selectors will lead to very messy and hard to follow logic - who binds to what? Where? etc. The performance only starts to matter when you're building something that has a large set of nodes. An actual use-case where I saw this problem was using a jQuery plugin to build a tree of pages for a content management system. It worked just fine when you had a lower number of pages, but it froze the page for tens of seconds when we tested with hundreds of pages. Turned out the plugin was sticking an event listener to almost every tree node. It added something like number_of_pages * 3 listeners... It's cases like that you need to be careful about, but most of the time it's not a problem.
About sums up how relevant this is.
True. I borrowed the terminology from [Airbnb's JavaScript Style Gude](https://github.com/airbnb/javascript#naming-conventions).
I hate it when people split arguments into multiple lines (because to me it smells of overcomplicated functions...) But if I had to deal with it, putting the first argument on its own line like your first is how I'd rather see it done.
For the record, spacers always make it harder for me to read code. I like 4 space tabs used because it adds more spacing making it easier for me to line up and see blocks. So when someone hands me a 2 space indented file I usually have to covert it to tabs and change it to 4 space tabs.
Don't let me started on my very personal code conventions and practices, developed in 25 years writing, reading and reasoning about code. I am pretty sure they would be a fireable offense for most employers and linting/tooling devotees. Call me outmoded, but I just need a good text editor and something where I can sketch my ideas to be productive (addicted to SublimeText and [paper](https://www.fiftythree.com/paper)/[pencil](http://www.fiftythree.com/pencil) lately). I think you may enjoy [this](http://nickgravgaard.com/elastictabstops/).
I will never understand CSS class naming like the example: fa fa-asterisk fa-2x If you use sass or something, just nest `asterisk` in the `fa` tag. If you want to visually denote it as a modifier, put a single hyphen in front of it.. But there's no reason to combine it into one specifier.
*Here's the Urban Dictionary definition of* [***FFS***](http://www.urbandictionary.com/define.php?term=ffs) : --- &gt;Acronym for, for fuck's sake. --- [^(about)](http://www.reddit.com/r/autourbanbot/wiki/index) ^| [^(flag for glitch)](http://www.reddit.com/message/compose?to=/r/autourbanbot&amp;subject=bot%20glitch&amp;message=%0Acontext:http://www.reddit.com/r/javascript/comments/2db7cr/how_do_you_prefer_your_javascript_library_names/cjnzdcp) ^| ^(**Summon**: urbanbot, what is something?)
Should it be used with **new** operator? - LibraryName Is it just some tiny helper - focused on one thing? - libraryName Is it a complex multi-purpose framework? - LIBRARYNAME 
Tried to get rid of JavaScript: http://codepen.io/skakri/pen/BEkhd ^(Sorry /r/javascript.)
comments broken - can't enter
This blog post and video are not in english which is odd because there is english on the page.
I think we may need to discuss a new posting guideline regarding these "contests", most of the time they're nothing but thinly-veiled spam, and this looks to be no different -- this is from Packt, which has been spamming this sub for months. Also, /u/krasimirtsonev: be very careful submitting your own site as often as you do, because you're dangerously close to being considered a spammer. Please see ["Self-Promotion" in our guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; There is no valid use case for the == operator. `null == undefined // true` jQuery uses it in AJAX module.
Yeah but it's fun to theorycraft. Looking at angular 1's release stats, it took 1 year from the first repo commit to the first stable release. If these repos count as candidates then should we expect Angular 2.0 by this time next year? Or 2016.
The design docs state they want to maintain compatibility with Object.observe, so no I don't think they'll be using it. https://docs.google.com/document/d/10W46qDNO8Dl0Uye3QX0oUDPYAwaPl0qNy73TVLjd1WI/edit#
I wish I had more upvotes to give!
jQuery source contains a lot of questionable code.
Thats pretty amazing, mind if I fork it and see what its like with some NodeJS coop functionality? I've been messing with some RPG stuff myself using JS/NodeJS, also not using Canvas, who needs that!
Wow, nice
Completely obsolete now that CommonJS is basically standard, even in the browser with WebPack||Browserify. 
If you host the project online (heroku.com is a great, free way of hosting node apps), I guarantee you potential employers will be drooling over you.
Writing tests in JS is actually really easy. Both major frameworks (Jasmine/Mocha) use the same syntax for specifying tests: You use describe() and it() to organize and specify your tests. There are also the beforeEach() and afterEach() functions to help with setup and tear down. beforeEach(), afterEach(), and it() also have async support. Where they differ, is in assertion style and mocking. Assertions work similar to JUnit. You assert that the left is equal to the right, and if the test runner sees otherwise, it throws an error which the runner then catches and reports to you. Jasmine uses an expect assertion style. You can read more about it on their docs. Where as Mocha uses an external library called Chai to add assertion language to the test runner. Again, those docs are great to check out since Chai gives you a few different flavours to work with. As for mocking, again Jasmine has build in functions like spyOn(). Mocha you'll most likely fall into Sinon.js Picking which framework to use is a combination of preference and need. Both are able to run in the browser. But Mocha can also run using node. If you're used to writing tests in Java, moving to JS should be an easy step. The hardest part about learning how to test, is writing good tests. Figuring out the tools just takes some time and experimentation.
Why tabs and not spaces? Coming from Ruby, I can't think of a single good reason to to use tabs over spaces.
I was thinking of DigitalOcean, but I'll make sure to check Heroku out, too.
If you want to move to San Antonio TX I'd definitely interview you.
Can anyone care to explain why, if whilst we are writing code style and formatting rules at the start of a project we can't go: 1. Let's use tabs 1. Let's decide on tab width/tab length/tab stop. 1. Let's write config files for everyone's editor for those settings and distribute them. (On a project level scope so they can still write their other projects in whatever they want.) 1. Let's start the project and stop talking about tabs vs spaces. Surely with all that done the whole problem of "different" tabs goes away and you can use them again. ???
&gt; if [...] we are writing code style and formatting rules at the start of a project Yea... don't. Just use the official code conventions. If there aren't any official code conventions, use existing ones. E.g. in JavaScript's case, you can just use [Google's](https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml). Writing code conventions yourself is a lot of work and it will usually waste even more time with tons of pointless discussions.
It says it's entirely HTML/CSS/JS in one place, but then you go on to talk about your Ruby dependencies? If the final product is all browser-side, you could just host it on GitHub pages. Just put your static files in a branch called gh-pages and GitHub will host them for you.
My suggestions: * use canvas and/or WebGL if you want to get a job that focuses on that. * don't shy away from npm modules. There are lots of game related modules you can leverage. A dev who can leverage dependencies is (IMHO) better than a dev who always insists on reinventing the wheel * think about using browserify to make your sources smaller and more modular. This will become more evident as your game grows in size..
Hopefully never, hopefully components will be native and we can use less drastic frameworks *than angular and ember
http://www.reddit.com/r/javascript/comments/2db7cr/how_do_you_prefer_your_javascript_library_names/cjny08z edit: But somehow I can't imagine `Math` in lowercase. Be it because I've worked so much with it or because it just looks wrong.. I don't know. 
First interview question: why do you think Canvas is better than your approach?
* I don't, actually *(Edit: want one, that is)*! I'm purposely avoiding canvas so I can focus on *(read: show off)* DOM manipulation. * I agree! However, I think knowing how to reinvent some of that wheel is important in order to understand/appreciate those shortcuts. Do you know of any such modules I could be using? I'd appreciate it. * I was looking into it, actually. I'm not entirely sure how I can use it effectively, so I should probably do a little more research.
Off the top of my head: Hardware acceleration. You can't really see it on the Instagram video, but the frame rate drops to around 15-20, when it tries to move that large town map. No doubt, because the browser is redrawing so many tile elements at once.
I only need Ruby because SASS/Compass requires it. The final product is HTML/CSS/JS, so I don't think I'm being disingenuous? I could be wrong, though.
Pretty much. Here's more detail on how and why they work: https://www.youtube.com/watch?v=QO07THdLWQo
Use DO and Dokku for your own heroku-like server. That's what I'm doing and it works really well! :)
Never heard of these before, will check out. 
For comparison [/r/python](http://reddit.com/r/python) has 77K subscribers, [/r/java](http://reddit.com/r/java) and [/r/php](http://reddit.com/r/php) about 30K.
You can see exactly what regions are being redrawn using [Paint Rectangles] (https://developer.chrome.com/devtools/docs/rendering-settings) in Chrome. However something like the timeline view can help you see what is taking a long time to paint. The following Jank busting article describes using some of Chrome's profiling features in the [Measuring Paint Performance] (http://www.smashingmagazine.com/2013/06/10/pinterest-paint-performance-case-study/) section.
Sloths rock ;)
Not to tell you that you're doing anything wrong, but demonstrating the ability to manage a repo with pull requests etc looks good on resume. 
I specifically chose to make an RPG because I wouldn't be moving very many things at once, save for the stage, on scroll. I'm hoping that, by avoiding canvas, I'll stumble into some good optimization techniques, and step up my front-end development game, in the process. The next time I make any kind of game, I'll be bypassing the browser entirely, and doing either Flash or Android development. :)
I know... ; _ ; It's a learning experience, to be sure.
That I didn't know it existed! :O Thanks! I'll definitely check this out!
Any developer who can write a library to do whatever they need can also pull one in when they need to. The reverse is not true.
https://i.chzbgr.com/completestore/12/9/2/PGL0TXOcO0OWdug1Wi9Zsg2.jpg
I'd give you bonus points for writing DOM and Canvas implementations which could be switched out. It'd also help isolate the core functionality of your game. 
MADNESS!! D: But yeah, that's not a bad idea.
I'm looking around FL, and potentially OR, but thank you! :)
Really exciting stuff - with iOS8 we also finally have WebGL support in the WebView which is going to open a whole universe of compute via shader programming!
Hmm, your solution doesn't work if you want to get the result of the expression: console.info(add(2)(3)(5)()(6)()(7)); // should return 23 In order to fix this, I modified your function: var add = function (n) { var sum = (this instanceof Number) ? this : 0, newVal = Number(sum + (n || 0)), bound; bound = add.bind(newVal); bound.valueOf = function () { return newVal; }; return bound; }; 
why can't you precompile it?
That's a lot of resources! I'll definitely be looking through these at length, later.
Very ambitious! Nice work
I thought I was? Not sure what you mean.
Do you need to pay for databases?
then why does it require ruby?
Without having the the to look through your code but seeing that this is entirely DOM manipulation, are you using SVGs for this? There are a ton of great SVG animation and control libraries out there that are generally more computationally efficient than manipulating DOM nodes. Either way, I was shocked at the quality of that IG video. good work.
Agreed.
Plan to to use [http://famo.us/](http://famo.us/) at all?
Compass, which is my CSS precompiler, requires Ruby to run. The game itself is not coded in Ruby, at all.
My guess is that this reduces bandwidth usage when minifier is not used. White space usage goes down from 4 bytes to 1 byte _per_ indentation.
Nice. According to our traffic stats, we're seeing 100k uniques and 300k pageviews (per month). For reference, for last September (9/2013, the oldest stats that I have access to), we had 55k uniques 173k pageviews.
Correct if I'm wrong but by budding, do you mean new to programming, new to javascript, or what. I'm curious on what resources you used in general to learn to do all of that for a first project (assumption on my part)
Recent related post: [Getting up to speed on unit testing &amp; e2e - please recommend good resource](http://www.reddit.com/r/javascript/comments/2cyp63/getting_up_to_speed_on_unit_testing_e2e_please/)
Seriously? I'm really hoping this is a joke. function $(selector) { return document.querySelector(selector) } Object.prototype.on = function(eventType, handler) { this.addEventListener(eventType, handler) } This is the entire library? addEventListener drops support for IE8 on that "feature", you shouldn't be extending native prototypes, you shouldn't be setting a $ global without checking if something else has claimed it, unless you offer a conflict alternative.
&gt; CommonJS Thanks for the tip, I'm an outsider and the javascript module debate still eludes me. Any good references (beside http://wiki.commonjs.org/wiki/CommonJS) ? [this one](http://addyosmani.com/writing-modular-js/) by addy osmani seems dense.
&gt; There are lots of game related modules you can leverage. Can you give a few examples or point us in the direction where we might find them? 
First Ferson Shooter
So he never goes over how the error promise would be resolved and how that would look... but then again we know software has no errors! :) Cool stuff by the way!
and... easier said than done, but if that's how your company operates, i suggest finding a new company... honestly some do have their heasd on straight and account for cleanup and "techdebt" resulting from "get it out there, fix it later" dev schedules. Find one of them and work there... you're clearly operating below your skill level. 
`libsass` is still lacking some of the features of Sass like maps and still has bugs around extends/placeholders and a number of other things that stop me from using libsass + sassc. If you're still writing last year's Sass though, it'll likely still work. I've had better luck with [Bourbon](http://bourbon.io/) than Compass being lighter-weight.
Canvas is not a magic bullet. And hardware acceleration can be achieved with CSS. With canvas, you just skip restyle and reflow operations, but you introduce JS, which will block the main thread. In CSS, you can do all the animations without blocking the main thread (then it's fully accelerated). So for this kind of game, I don't think you'd get better performance with canvas.
Are you moving existing DOM elements or drawing new ones each frame? The former should be much faster. Also, you'll likely get better performance if you move sets of tiles as a group (set position on a container element instead of each element). (I haven't actually looked at the code, just conjecture here.) Canvas is nice and all but if you're really doing this as a learning project, this is a good way to learn the idiosyncrasies of DOM performance.
Damned if you're not right.
Sorry, yeah, you can wrap in try catch now! co(function*() { try { var one = yield get('something'); var two = yield get('somethingElse'); } catch(e) { //handle err } )()
I'm mostly just using Compass because of familiarity at work. I'd rather be using vanilla SASS, really. I prefer making my own mixins, anyway. Do you know of any other SASS-related tools that don't require Ruby?
also SA is not so bad. Tx has reasonable housing costs. 
"Budding" as in I've only been doing heavy coding in JavaScript for the last 2 years. Before that, it was mostly just employing plugins here and there to make things like accordion menus, and simple stuff like that. My "education", if you will, was pretty much all hands-on learning, and reading as much as I could online. I'm still pretty green when it comes to OOP, and best practices. I mostly just go by whatever feels right to me, which probably sounds dumb. This is my first big project in the sense that I've never bothered to put anything to GitHub to show to potential job prospects.
Thanks! :D
Change a class on key press.
* `$.game`, `$.fn.player`, `$.player = new Player()`, etc. jQuery is not a framework, and does not work well as one. I'd avoid making everything a jQuery plugin just because you can. Personally, I prefer to keep all my code _outside_ of jQuery, because then it's a lot more testable and portable. Usually, you want just DOM-specific plugins, but it seems you're basically running your entire app on top of jQuery? jQuery wasn't intended for such uses, and it provides little-to-no benefits from doing so. I would deduct style points for this, on account that there's no compelling reason to make everything a jQuery plugin and so it looks like you don't quite understand the role and purpose of jQuery and plugins. Now, I'm not saying you don't, just that your architecture lends itself to that assumption. * `function Player() { this.checkButtons = function () { ... }; }` It's also generally considered bad practice to create objects with the methods attached directly like this; instead, you should create them on the prototype, like this: function Player() { ... } Player.prototype.checkButtons = function() { ... }; Why? Consider the following: new Player(); new Player(); new Player(); Using your code, you've now created 3 * # of methods in `Player`, so if there's 10 methods, JS has had to create 30 methods. Using my code, it is 1 * # of methods in `Player`, so with 10 methods, those 10 are only created once. It's usually not a big deal when you have just a couple instances, but say if you wanted to create 1000+ players, then you'd start running into performance issues. * `if (index == (preload.length - 1)) {` This is a race-condition waiting to happen; let's talk through the logic real quick for [the block starting at line 208](https://github.com/robobeau/JobInterviewStory/blob/develop/scripts/game.js#L208): 1. For each image... 2. Request it asynchronously via AJAX a. If this is the last **requested** image... b. Start the game. So in short, you're determining whether or not the game is ready depending on when the last image loads; however, given the async call, the last image **requested** may not be the last to load. I'd probably do something like this: var numOutstanding = preload.length; $.each(preload, function (index, value) { $.game.loading = true; $.ajax({ type : 'GET', url : value }).always(function () { // received reply, so one less image to worry about! --numOutstanding; // was it the last one though? if so, start! if (numOutstanding === 0) { $.game.loading = false; $.game.start(); } }); }); **However**, I just realized what you're doing.....you're defeating the browser's built-in capabilities for caching. There's a handful of other implementations though... Here's one: var img = new Image(); img.src = 'http://...'; And another: var img = document.createElement('img'); img.setAttribute('src', 'http://...'); // you can use `.src = ...` here instead Or, you could just make an HTML string to shove into the DOM (not recommended). However, I'd advise against your current approach, because I believe it's going to make an AJAX request for each image _regardless_ if they're already cached locally. Yet, using one of my suggested techniques, they'll only download if they're not present. Only problem there is that it can be tough to know when they're all loaded... edit: `.done() =&gt; .always()` per /u/filyr's observation that failed images won't be accounted for when using `done`.
I applaud you for this!
If you'd like to expand your tileset to something slightly less, ah, proprietary, may I recommend /r/gamedev? There are loads of free tilesets available in their archives. In addition, [OpenGameArt](http://opengameart.org/) has plenty of excellent tiles, though it's unlikely you'll find a unified tileset with such depth there, gratis. Just a suggestion. Otherwise, the game looks great!
V8 has a generational garbage collector; it'll clean up as much memory as it can with a given window so that the UI isn't visibly locked while it's reclaiming memory. When you take a heap snapshot, it performs a full cleanup; this is what accounts for the difference. What is it that you're doing that's creating the garbage? I've only seen this behavior when there's a very fast interval constantly generating garbage, preventing the garbage collector from ever running so that it doesn't block the interval from firing on time. EDIT: here are some resources https://developers.google.com/v8/design#garb_coll http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection The following covers mostly the same content as the previous link, but adds some pretty graphs for the visual minded and includes a bit about working specifically with node (which also uses v8) http://strongloop.com/strongblog/node-js-performance-garbage-collection/ 
I'm so excited for JS to get generators. I'm a python guy, and generators are one of the few things I **really** miss when I'm doing javascript. If you haven't used a language that has had them before, they won't be super intuitive at first, but they are immensely powerful and useful.
I personally would use a server side language to accomplish this, but since this is r/javascript I'll stick to js. For saving and loading you could either store the data in json files or a database. Node js is good for stuff like that since I don't think you can do that with just ajax request at least not without sending a request to a file that will have server side capabilities. I personally wouldn't recommend local storage unless you're not dealing with a lot of data. 
What kind of overhead?
There's a special place in hell for people like you. I like your thinking.
He also might have been willing to interview you over Skype audio/video chat. If someone is interested, they might be willing to work with on on something like that. If someone else offers, don't say no or give up until they give you a good reason to. :) Impressive work. Keep it up and keep having fun finishing your project.
I use a pattern similar to this pretty often. Maybe it comes close to what you want. var Namespace = (function(params){ var private_variable; function private_function(){}; function public(){}; // or var public = {}; public.method = function(){}; public.variable; return public; })(); I don't know if there's a name for it. You get closures, that way your private variable truly are private, not just by _convention, but your public members can still be aware of them.
Sounds like it could be a Chrome bug; you might [check their issues](https://code.google.com/p/chromium/issues/list) for something similar.
Pro tip: click on the gear icon on the CSS panel and enable either -prefix-free or Autoprefixer and then just write your CSS without any vendor prefixes and they will be added automatically as needed. 
I mean, you can precompile it, and then host the compiled (static) version on GitHub pages.
I've been doing something similar, except using react.js for DOM-manipulations in my game. After some prototyping, I've changed directions and decided to go with canvas like pixi.js.
Does anyone have a tutorial for making something similar to this (using canvas is okay) for a moderately experienced front-end developer?
Great input, but regarding your suggested preload-ajax-loop: You should probably keep the counter in `always` rather than `done`. What if one item fails to load? In addition to your comments, I'd say that the constructor functions are a bit over used. I totally agree that an `npc` is suitable, but there won't be more than 1 concurrent `game` at a time. Might as well make it an object e.g. `var game = {}`. The polluting of `$` to keep track of globals (which you already mentioned) could be replaced by scoped variables in an IIFE.
Poor /r/LearnJavaScript is just under 10k right now.
that is super close to the metal.
 var am_i_inʔ = function(callback) { var authRef = new Firebase("https://my_app.firebaseio.com/.info/authenticated"); authRef.on('value', function(snap) { callback(null, !!snap)};); authRef.on('error', function(err) { callback(err)};); } $('#must_be_logged_in').click(function(e_click) { am_i_inʔ(function(err, is_logged_in) { if (err) { throw 'There has been an error ' + err; } else { if (is_logged_in) { //user is authorized, show content window.location.href = 'https://www.google.com/search?q=carol+vorderman&amp;safe=off&amp;tbm=isch'; } else { window.location.href = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'; } } }) });
Well, /r/javascript is also almost 3x's older (6.5 yrs vs. 2 yrs), so you still have some room to grow :) Maybe the mentions in my [new sticky post](http://www.reddit.com/r/javascript/comments/2d3kns/looking_to_learn_js_have_feedbackquestions_about/) will help too.
Run your code with the JavaScript developer console open in Chrome or another browser. The console will show you the problem. (It has nothing to do with `if` or `else`.) If you're not familiar with the Chrome DevTools, here is a [great introduction](https://developer.chrome.com/devtools).
DOM manipulation gets really SLOW though.
Unless you are doing ASCII-art-style indenting, lining up indents to specific tokens in the previous line, as e.g. F# requires, using spaces is analogous to using tables for HTML layout. There's a semantic indent character. Using spaces just in case you might end up editing it in a brain-dead editor later is specious, speculative optimization.
&gt; Moving around overlapping Image objects ("sprites") is what browsers have been optimized to do for many years Actually, most things in a web page rarely move and browsers aren't that optimized for constant layout changes (though it is improving recently). Canvas handles that *much* better.
Actually, I think GitHub pages even supports SASS, so you could just put those up directly.
*prompt* is spelled wrong. there is no function *promt* change var age = promt("What is your age"); to var age = prompt("What is your age"); 
I am making xhr requests that can return relatively large json. I am aiming for 3000ms intervals but the problem persists even with 10000ms interval.
If you're just using prefixing mixins, then Bourbon could be a drop-in replacement. They seem to do a better job of keeping those in lines with browser 'support'--like how the `-moz-` prefix is mostly deprecated at this point. Sass extensions require a Sass interpreter--whether it's Ruby, C (libsass), there's a Python one, etc. doesn't matter.
IANAL, but If it's just a portfolio piece to demo to prospective employers I wouldn't be too terribly concerned. If you plan on releasing it into the wild, though, you'll need to find some properly licensed assets. Not a bad idea for placeholders, though. Only challenge will be finding a replacement tileset as complete and up to par. A good place to look are abandonware S/NES games!
ok
[This article might be useful!](http://blog.sklambert.com/create-a-canvas-tileset-background/) :D
Wtf, as a Floridian, why would you want to move to Florida for dev work
TGIWhiskey is right. It's called the Module pattern and you can inject jQuery into it like this. &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; var Namespace = (function($ , params) { var private_variable; var private = {}; var public = {}; public.myPublicMethod = function() { console.info('myPublicMethod'); console.info('myParams: ',params.param1,params.param2); console.info('Proving jQuery exists: ',$(document)); } private.myPrivateMethod = function() { console.info('myPrivateMethod'); } return public; })(jQuery,{param1:'hello',param2:'world'}); $(document).ready(function() { // output: // myPublicMethod // myParams: hello world // Proving jQuery exists: Object[Document module.html] Namespace.myPublicMethod(); // output: // TypeError: Namespace.myPrivateMethod is not a function Namespace.myPrivateMethod(); }); &lt;/script&gt; Excellent [tutorial here](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html)
I live there... ; _ ;
&gt; There's a semantic indent character. I honestly hadn't considered the unique information load of the character. That's a really good point. Then again, we're talking about JavaScript, an unnecessarily verbose and redundant language in itself. Kinda crazy and impressive that the whole web is virtually built on it.
As a Floridian, why would you want to *stay* in Florida for ~~dev~~ **any** work?
You're more right than you know about your comment on jQuery plugins. It came about as me trying to emulate the way the Datepicker was coded on jQueryUI, and I guess it got a bit out of hand... *cough* My usual approach is to namespace the hell out of everything, but I wanted to try something new. I'll definitely re-factor, and take the Protoype advice to heart. Regarding the preloading, this was my first time even trying such a thing. I've seen the approach you mentioned, and I can't honestly say why I didn't just do it that way... :| Thanks for the all the advice, I really need it! [**Edit**: I found a pretty good explanation on why Class.prototype.method is better than Class.method, if anyone wants to read it.](http://stackoverflow.com/questions/1635116/javascript-class-method-vs-class-prototype-method)
[This](http://stackoverflow.com/questions/24177294/placeholders-for-anonymous-functions-in-javascript) may also be of interest - trying to emulate Scala's awesome underscore placeholders in JS.
Open up a PR? Edit: nvm he asked for feedback. Carry on!
Interesting.
Normally, I would do something like: Game = { foo: 'bar', herp: function (derp) { // Do stuff to Game.foo } } and then just reference it via Game.herp(). However, I'm not sure how that approach is much different from polluting $. Could you please provide an example of how I could use scoped variables in an IIFE? **Edit:** For any of you looking a good article on what IIFE is, [check this one out](http://benalman.com/news/2010/11/immediately-invoked-function-expression/).
Your check's in the mail. ;)
That's what I'm doing with our force-layout library which was built around D3 which is entirely DOM/SVG. Organizing and separating out the logic from the rendering (in what had admittedly grown into a pretty monolithic mess) has been great for me as a developer. Leveled up my ideas of structuring and modularity, and will soon let our library render in SVG or WebGL (and hopefully canvas eventually) based entirely on a config json :D Just giving you a plus 1!
This is sad. You created a function that basically just calls another function... just for the sake of using the dollar sign? Did you notice that querySelector function will only call the first matching element and not all of them? I suggest you read up on the documentation for querySelector and querySelectorAll jQuery has a lot of good features, and you have not captured any of them in your 6 lines of code. 
A few things to note- * Logging something to the console will keep it in memory- not sure if it'd survive a heap profile or not * Chrome extensions- particularly those for the dev tools- can cause similar problems; at one point debugging memory issues with Angular's Batarang extension turned on was entirely pointless * /u/kenman might be right, though without seeing your code in a simple reproducible test case we have no way of knowing 
Thank you for the perspective. Finding a new company is absolutely a priority - I want to be learning from my coworkers instead of being stifled by them. I just worry about finding a new job because I don't have a tech background - I'm self taught and I've only been at this company for 2 months. I'm currently working on a professional blog and putting together a github portfolio, but it's not there yet. 
This is fantastic info. Thank you! I haven't written any sophisticated junit tests, but I understand the basics. I'm glad to know the knowledge will translate. 
Awesome - thank you!
sorry if the title was misleading. yes i realize these things. document.querySelector is 22 characters, $ is 1. It doesn't basically call another function, it completely calls another function. i could argue that i captured the the on method feature.
&gt;Sorry, yeah, you can wrap in try catch now! &gt; co(function*() { try { var one = yield get('something'); var two = yield get('somethingElse'); } catch(e) { //handle err } )() For people who were interested in reading that.
"Unless you’ve been living under a rock" F*** You!
He wants FL or OR. As an Oregonian, I'm always wondering the same thing.
It's dense because it goes into AMD and Harmony style modules as well! It's also a little out of date. JS has moved fast in the past couple of years. You can use commonjs style modules today with tools like webpack and browserify. Browserify includes shims for many nodejs modules (like http and util). This means many modules available in the node package manager will work in it. Using the brfs transform, you can load files from your local filesystem. In the final build, those files will be embedded in the deliverable package (usually a single minified js file). Webpack let's you dynamically load modules at runtime, but it overloads the require() function in weird ways, and breaks compatibility with the node runtime - which means your module won't necessarily run on node and vice versa. The AMD route requires a hell of a lot of configuration up front. It can be a pain to debug when it doesnt work right, and shimmed modules (those not written for amd) are a big pain to get working right. And it isolates you from the npm ecosystem. It was 'the' choice about three years ago. With browserify and e.g. grunt, r.js and AMD are effectively obsolete. There are ecmascript6 module transpilers out there, but the specification is in flux so I wouldn't recommend using them except for toy projects. If you have any specific questions I'd be happy to answer them - but I encourage you to do some research on your own :) snag r.js, play around with it. Snag node+browserify and muck with that too. If you're feeling frisky, try out one of the es6 transpilers. There are tons of articles out there on getting each of these to work.
These are some great comments. Instead of using jQuery as a framework that means you actually could use a framework to work with in the first place. Something to consider using for your game: RequireJs (Dependency Management) Backbonejs/Angular MVC framework. (This is a classic example of something that would follow the MVC framework.) (M = Model, all your characters, the defining the world, etc) (V=view, how the world displays how your user looks in different scenarios) (C = controller, the glue that tells how the various models and views interact with on another.) 
Fort Worth is my paradise.
 "not too hot" Temperature in Austin today: 97F 
Pretty funny, yet interesting seeing how weirdly creative Angus made the fibonacci and factorial functions.
Outside of the pro-gun, you pretty much described West L.A.. But, at least you're within driving distance for hiking. 
Looks nice for the most part, but I would recommend against positioning your elements with top/left, which can be slow. Rather, look into using transforms, which any x,y changes to an element will render faster in the browser than DOM position changes involving top/left. Also, the -webkit-transform: translate3d() variant will calculate and render those changes on the GPU, thereby adding further speed improvement.
I'm going to save this OP, I'm going to learn a lot from your repo.
Who is hiring Javascript developers in San Antonio??
I definitely don't think it's crazy to do it without canvas! I remade Chu-Chu Rocket! without canvas or jQuery and it was really smooth and just as fun as the original :)
While I think the valueOf is nice, I was aiming to be returning a genuine number at the end of the execution. I don't think a use case for intersecting () is present either, and if you actually run this then you'll see output like... [ function, valueOf: function ] rather than 23. 
My point was that you don't need a game constructor function since you only instantiate it once, which is my I prefer something like your example above. I played around a bit with inheritance and revealing modules (IIFE:s in a variable). This should answer your question and hopefully get you some new ideas. http://jsfiddle.net/p5d34np4/
Talk (and slides) on promises + generators: http://pag.forbeslindesay.co.uk/ https://www.youtube.com/watch?v=qbKWsbJ76-s 
So I am really excited about how (my) javascript gets more functional and declarative and I am wondering how generators will fit that programming style. It seems to me that .next() is highly statefull and side-effecty and doesn't embrace functional style at all. But then again I'm sure I don't see everything here. The example he gives with sequentially calling promises can be done using reduce (or even something like fmap if you really go functional). Can somebody provide me with some context here? Is it usefull for functional and how? 
Javascript is a mess, since all of those are actually objects (and a Set doesn't even exist?). Think of an object like a directory or a Map or a associative array. You can define key/value pairs and that's it. Map is just another name for that (don't confuse it with the map function though). An array is like an object, but you only get to give it values (the keys will be set for you and is just the index). The order of elements is always the order in which you put em in. A set is like an array, but every value you add will only be there once. Also the order will not be preserved. But I don't know a native javascript set. Is there one?
&gt; But I don't know a native javascript set. Is there one? Other than the keys of an object, there are no native sets *yet*. Sets will be added in ES6.
The cake was a lie. One month later, the author has added a `&lt;meta name="fragment" content="!"&gt;` tag in the index page and has implemented the Google Crawling Scheme... See here: view-source:https://productmate.de/. 
i really hate it when a site steals the context menu. it's just so unprofessional.
Sometimes it makes sense, for example web based applications where not having a proper context menu isn't user friendly. ie. Google Docs.
I'm a little green employing OOP methodologies, so this definitely helps. Thanks!
I believe I started mid May 2014, but didn't commit anything to GitHub until Jun 15, 2014.
Definitely agree on the separate loops. It's been on the back of my mind for a while, now.
Why you must POST?
To be honest, I want to avoid using frameworks as much as possible for this. I would even like to wean myself off the jQuery dependency at some point. I've been using Angular at work a lot, lately! It's been helping me grasp MVC concepts. Still need more practice, though.
Your pen without html is pointless. Try to create a reduced test case that shows the problem.
Any time! Just let me know if you have any questions
Ohhhh, I will make you regret those words. :B I'm going to work on refactoring some minor things, and I may just keep posting down this thread for feedback *cough* [Edit: I reverted Game, Sounds, and Stage back to my normal M.O., and I'll work on Modals, NPCs, and Player this week.](https://github.com/robobeau/JobInterviewStory/commit/1fa00d5da4c3716ed7251e44ca3a0757b9be7a17)
For some reason, I thought of [this](https://www.youtube.com/watch?v=aHqHUdMrIZI)
* Objects in JavaScript are maps which contain string keys which map to a value (any value like a string, number or a function). * A Map accepts any value for the key and maps it to another value. 'Map' is in the ES6 proposal and isn't generally available in the browsers (yet). * A Set is a mathematically set, i.e. an unordered collection of values. Each value may appear only once in a set. It is in the ES6 proposal and isn't generally available in the browsers (yet). If you need a map data structure then you are probably limited to abusing an object for this purpose, but beware that anything you use as a key will be coerced to string first (often with terrible results). i.e. it makes a lousy map. When real maps are available, you will want to use those most of the time. 
Here is the [solution](http://jsfiddle.net/741ghqwd/). I have made some changes while debugging. you can remove them to suit your scenario.
Ehhhhhh... I really don't see how something like Angular or Backbone are appropriate for a game. Games aren't in any way analagous to MVC webapps. It sounds nice on paper how you've split it up there, but in reality games aren't organized or architected in that way.
I wrote a popup menu like this before. It's not as easy as it sounds to get right. For example: when submenus are involved, you want to display them immediately and then remove them as soon as the parent menu item isn't selected anymore right? Nope, you need to see if the user is moving their mouse towards the submenu and give them a chance to reach it, even if that takes their mouse over another menu item that should invoke a different submenu. It may sound like a weird use case until you realize every major os works this way, then your own popup menu feels like it's harder to use 
Store the events in localstorage and send them on the next load event.
I will work on it a bit more and if I can't figure it out, create a test case for it. Thanks for the help.
This is so true that I'm moving from Florida to Denver in a week for a new job.
Swamp ass is only fun for a limited time.
Soon you will be able to edit the regular context menu of the browser but in soon I mean year or two
Yeah, it can get a bit tricky to get right. Anyone wanting to see how Amazon dealt with it can view it here: http://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown
For what I can tell the browser is not canceling the requests. It is just not waiting for the responses (if you don't force it using a synchronous xhr). You can try using the `beforeunload` event instead of `unload` and test if in every browser the asynchronous request reach the server.
Luckily some browsers(Firefox at least) let you do shift + right click to get the native context menu.
i know. its faced by every site in the world. But you have to be literate(: ) to do that. But clearing a cache, cookie or history is just a couple of mouse clicks and everybody knows this. And only few people are interested in knowing whats happens behind the screen.
Let's not say that "Javascript is a mess" here. I mean, it is, in may ways - but with regard to data types, most languages only support a small set of primitives. And frankly, that's a lot better than languages like Python that keep having to invent new ones for "a hash that maintains its own order" which is what any sensible language would do anyway. (Or even unsensible languages like PHP which already do this.) A small number of super-flexible primitives works very well in languages without strict typing - and this is a very useful attribute to have in a web-language.
I'm mostly afraid of the scorching heat! D:
Thanks! Hopefully, the write-ups on [the Tumblr](http://jobinterviewstory.tumblr.com) will help anyone else trying to do something similar.
Good luck with the project! Hope it's a good learning experience for you. Can't really say what specific technologies you could use as I haven't look into HTML/JS based game development much, other than using the canvas API and playing with a few frameworks. Have you thought of including a third-party library such as underscore.js? It's pretty easy to use, and is handy for writing much less rudimentary/biolerplate code when it comes to dealing with and manipulating objects and arrays. Also, perhaps when you are refactoring you could try introduce some kind of separation of concerns. For example, there's a lot of DOM manipulation and domain logic mixed together in your classes. You could create a series of view classes that get their data from your model classes and present the game accordingly.
I really like the premise! There's a few things that break my desire to play, though: - Selecting the piece makes it go yellow, so you can't see what colour it was beforehand. If you're not paying attention, you've no idea. Maybe try an arrow instead? - There's no tactile feedback when hovering over pieces or the board. When I'm picking a piece, hovering over a piece should show some indication that it will be selected, and when I'm hovering over the board, the tile should change in some way. - Of course it'd be a ton of work, but I don't often have an extra person to play a html game with in my room, so some sort of simple computer to play against would be a nice alternative. Otherwise, really nice - the tutorial makes it nice and easy to understand.
I'm on an older machine: Uncaught Error: WebGL not supported.
Generators, when run, produce an iterator, which can be used in for loops: for(var i of myGenerator()){ console.log(i); } function* myGenerator(){ yield 1; yield 2; yield 3; } The iterator can be used like an infinite array: for(var i of myGenerator()){ if(i&gt;100) break; console.log(i); } function* myGenerator(){ let a=1, b=1; while(true){ yield a; [a,b] = [b, a+b]; } } There is also iterator and array comprehension (although it might not be in the final draft), so you can do: var array = [for (x of myGenerator()) x] //1,1,2,3,5,8,13,21,34,55,89 And var squaredFibonacci = (for (x of myGenerator()) x*x); //notice normal parethisis, not square brackets var array = [for (x of squaredFibonacci) x] // 1,1,4,9,25,64,169,441,1156,3025,7921 You can try all of this in the latest version of Firefox using the developer console (F12) or scratchpad (Shift + F4). 
From that doc: &gt; Provide design pattern for easy drop in of Object.Observe From a [higher-level overview](http://blog.angularjs.org/2014/03/angular-20.html) with a link to that doc: &gt; We’ve talked at length on how we hoped to make this faster by using Object.observe() when it becomes available in Chrome M35. And we will! The link you posted is a polyfill for Object observe. I forgot that they still have to do dirty-checking of methods, so observe won't completely replace everything, but they are very much going to be using it when it's available. Not sure if that's what is causing the slowness you saw, since it looks like they did implement a reasonably efficient polyfill. It's possible that traceur's shim is being used instead of angular's, if that makes any sense.
Well, that's a good question! I'm trying to follow by modern best practice. That's mean that I recommend you look at AngularJS. It's allows you forgot about DOM elements or jQuery selectors and start solve real business problem. Of course, there are other frameworks with own philosophy, lets say ExtJS provides special way to declare classes and create objects. But ExtJS is about enterprise solutions. You can start with this tutorial http://scotch.io/tutorials/php/create-a-laravel-and-angular-single-page-comment-application or course from egghead.io https://www.youtube.com/watch?v=Lx7ycjC8qjE&amp;list=PLP6DbQBkn9ymGQh2qpk9ImLHdSH5T7yw7
It's a webgl issue here... Can you please try with the last version of IE/Firefox/Chrome ? Thank you :)
Thank you for your feedbacks ! * You are totally right about the piece color, how I couldn't see that :) I will try to create an arrow above the selected piece (my 3D skills are below 0 xD ) * It would be indeed nice, and easy to integrate. I'm on it ! * I will try to think about it, it could be indeed very interesting. And I don't think it's so much work to do :) 
 $.post('log.php', {hello:'world'}, function() { sleepy.abort(); }); var sleepy = $.ajax({ url: '/sleep.php', async: false, });
This was fun to play with the parameters, I made fireflies as well.
Pretend your library exists, and write some code that uses the library. It doesn't have to run, just make it up. Post that made-up code here for critique.
Variable Injection. Is that what the kids call it these days?
You'll probably have to do a lot of the heavy lifting yourself, unfortunately. Flotr2 is a good place to start for the graph visualizations themselves. It works well without taking over everything from you. ExtJS/Sencha would work if you're okay with getting tied in to a "take over more than you like" approach.
Hey. You were a big help, my next project involves sending an email from a JS form. Now my plan is to create a php file that sends the email. So my script will 'POST'? to that PHP file. I'll also use this strategy to hide my API key. Is this the right way to go? If you have any research suggestions, I would appreciate it. 
It was late and I wasn't sure what to call it. I'm sure variable injection isn't right. 
will it scale ?
It may hurt to have two forked processes of php for each unload, you can use node for the sleeping for better performance. Although I would argue that it would be a micro optimization 
Wow! That's so cool! Great work friend. The 3D experience was really well done.
Thank you :) No, i made some 2D game prototype, but this one is my really first complete one !
You can use practically anything as a key. So yes, another map instance should work. That said, it is probably a good idea to use immutable objects as keys, but that is a whole other discussion. 
Links directly to the rules because of a submission for last year's competition; I didn't see anything about this years. I'm looking forward to working on an entry!
Thanks for your submission! Unfortunately, it appears as though it doesn't meet our [guidelines for self-promotion](http://www.reddit.com/r/javascript/wiki/index) and has been removed. If you would like to resubmit, please take the guidelines into consideration. Thanks for your understanding.
I'd honestly suggest restructuring your HTML quite a bit, gimme just a sec to throw together a fiddle.
Hello, I don't understand what I have to do... Is the only thing I have to do is re-submit this link in a text-post ? Or do I have to do anything else ? Thank you for your help.
What's your demographic? I'd say it's marginally 'harder' to clear localStorage. Don't quote me on that, I just know clear cache and hard reload on chrome does remove them. I was thinking local storage may be a good deal for you as well. I just had to do a large scale implementation and I used [store2.js](https://github.com/nbubna/store).
That'd be perfect, thanks!
Done. Hope it's better now :) Thanks 
@ThyNamesConnor asked for a method without setInterval and using constructs like for loop which is what the above solution is made of. "requestAnimationFrame" didn't come across my mind while writing it. As suggested by @stintose using "requestAnimationFrame" would be perfect.
Good advice.. Whenever I'm contemplating how an interface should look, I always try and imagine how I would write my client or the code that is utilizing this library. Also you can delegate functions... you can have to alias functions if it is really that big of a deal to you. (e.g var receive = onReceived)
Hmm, I haven't done this myself yet, but I would guess try just always using IDs instead of references. You could even make use of some getters/setters if you can use ES5 to abstract the IDs, or if you can't try using something like a static getReferenceById method on your entity classes or an entity collection class. For the serialize/unserialize you can make it a little easier by doing something like: http://jsfiddle.net/path411/nt9ny9uo/ Since JSON.stringify won't read the prototype of an object, if you are using them you should end up pretty much just capturing the data you want. The key to loading the data is just using a for-in loop over the parsed JSON and assigning it. This is my preferred way of converting data objects into class instances. 
good job. add an ai and singe player...
nice, I think I'll enter this year
Wow - $25M on a JS framework!
&gt; The Critical Rendering Path Just took a look at : https://www.youtube.com/watch?v=YV1nKLWoARQ That was really helpful, thank you! 
It better cook me pancakes!
I didn't get it what's special here. Of course `universe` will not be inside itself if you have not pushed it to.
No, my lib is not related to jQuery. You see, I used jQuery only with `$('button').click`, which is just a way to make my example short and clean. But my lib itself has nothing to do with jQuery.
In that case I think methods `send`, `onEnd`, and `onReceived` is a good naming convention.
Thanks! I prefer to this slightly too.
1 dollar per js framework in existence 