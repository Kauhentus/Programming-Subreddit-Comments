For some reason, I taught it was a standalone comment. &gt;S != JSON. I don't see anything about improving the parsing of JavaScript. &gt; &gt;Does React Native even use v8 under the hood? It can't (probably) on iOS at least. So my point is irrelevant now...
That you need to understand and use `this` to write effective javascript. The opposite is closer to the truth.
Actually technically JSON is _not_ a subset of JS. U+2028 and U+2029 are allowed in JSON strings, but not JS strings.
I started a very basic calendar with just vanilla javascript and some html and css: [https://codepen.io/Vosmonster/pen/KjZQXo](https://codepen.io/Vosmonster/pen/KjZQXo).
TIL!
I think that's overly optimistic/assumptive. I think you could maybe say that's true after a couple of years of dedicated JavaScript work, and assuming you've been programming otherwise for years. But don't forget that a good portion of the programming community hasn't reached a point where they understand any language that well just by virtue of being novice.
I believe you're correct. Look at it in an assignment context: var o = (Object.freeze || Object)(Object.prototype); o is either now A) a frozen object if .freeze is defined or B) a regular object. Obviously if your code absolutely requires .freeze support, this is a bad fail-safe mechanism. But for most cases, it's probably OK to prevent silly errors.
I'm fairly certain that the fetch API allows async and parallel parsing of json. On mobile and too lazy to verify right now.
I've recently gone down a rabbit hole of DeepCloning and JSON.parse performance and the fact that I didn't want to import a library to do it quicker. It just annoys me that in a language with some built in features that I have to call a weird translation to a string and back to an object to do easy deep cloning. I wrote something quickly that did it between 85-90% faster than JSON.parse and for my use case it's faster than loDash. It works for my cases (Data objects similar to JSON, mostly containing Array and basic Javascript objects). I want to spend some time working on the corner cases and accurately measuring performance (speed on object size, tree depth, and other metrics), as well as proper error handling. &amp;#x200B; If any one knows why, could they explain why they decided to add the spread operator and Object.assign but not create a Deep Copy version of either? Or why neither React or Vue felt it necessary to create one? (I know angular does). Don't know if my programming patterns are wrong, but a lot of what I develop allows users to update hierarchal information through a modify then save process. I don't want to update the state until they click save, which requires either using all primitives or copying the object.
I wrote a small library that implements asynchronous boundary detection with very high performance. This is used for stuff like lazy-loading images. &amp;#x200B; [https://github.com/ChrisCavs/bounds.js](https://github.com/ChrisCavs/bounds.js)
That asynchronicity is somehow a JS-unique concept that makes it more complicated than other languages.
It is no longer true for ES2019 [https://github.com/tc39/proposal-json-superset](https://github.com/tc39/proposal-json-superset)
Will definitely play with this soon. I do something similar but performs like shit when it loads 30 images at once
Deep copy isn’t always the best solution, and there isn’t a best way to do it generically due to the possibility of reference cycles in the object. Do you reconstruct them or not? How do you check for them? Sounds like you don’t have to worry about cycles so you can avoid the overhead of checking for them
How might one be write more effective JS without understanding &amp; using this? (I can see how using 'this' can often hurt ease of readability).
Anyone happen to know which languages are single threaded &amp; use an event loop for their async tasks?
Thanks for the valuable input. I amended the post by adding a link that explains why this might be a bad idea in some cases.
I've met quite a few surprisingly "senior" Devs who don't understand that JS is single-threaded, run-to-completion, and uses a prioritised task queue to queue async tasks for execution. The number of supposedly experienced devs who think async/await suddenly mean JavaScript is multi-threaded is truly astonishing. It was bad enough when they could only get confused by setTimeout/setInterval, but now with async/await and service workers (which *do* execute on a different thread to the main script) it seems to be confusing a lot of devs into sone really weird and firm misconceptions.
Yeah there wouldn't be any reference cycles. In my frustration I'm probably misusing the term DeepCopy. Circular references and function copies aren't in my structure, essentially I would like to copy just the data structure of the objects without having to resort to JSON.parse(JSON.stringify)) and in a faster way. A quick way to strip out the pass by reference of simple object and array structures. [https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns](https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns) &amp;#x200B; Now I could code updates to each individual primitive in the nested object if I know the structure ahead of time. But If I don't, my best bet is to copy the object, but to maintain immutability I would like to deep copy any objects and arrays. &amp;#x200B; Also forgive me if I'm missing something in React, I just started learning it a few weeks ago. I know Vue fairly well and I run into a lot of the same immutable data issues in which I have to use JSON parse or nested spread operators to not break the immutability of data in the Vuex state (while it's waiting for the user to save).
If you write functions instead of methods, you won't use this, and everyone's life will be greatly improved.
This will help dearly as my whole site depends on it to send and receive data
Brush up on devops skills, including container / docker stuff. Try to make a good unit test coverage for one project, using jest.
TIL method and function are a different thing?
Just this Thursday I found the comment `//setTimeout makes it execute in a different thread`. From someone who is an "architect". Days before he was explaining to me this amazing thing I could do to debug, which was to write `debugger;` in a JS file where I want it to pause execution. _"Did you know about this?"_ _\*sigh\*_
Yes. Function is the more broad definition. A method is specifically a function attached to an object. So "write functions instead of methods" means instead of: const obj = { foo: 'bar', logFoo: function() { console.log(this.foo); } } Write something like this: const logFoo = function(obj) { console.log(obj.foo); } It's not a universal rule or anything, but if you approach JS from a more functional approach, you rarely if ever need to use `this`.
at least 2 years ago when I looked into it, while the fetch API allows you to `await` the json parsing, it still blocks the main thread the same as if you just did `async function (str) { return JSON.parse(str) }` The only way out of blocking the main thread for a long time is to break up the parsing into chunks and provide some delay between each chunk to allow other processing. It still technically blocks the main thread, but it does so in small enough increments to not be noticable.
When people say method in javascript they basically just mean an object property that resolves to a function. `obj.x = function() { ... }` The distinction is more important in other languages (and arguably isn't a real distinction in js)
It does not use v8.
AFAIK v8 7,6 is used in node 12
It currently uses JavaScriptCore (Apple's JS engine) on iOS and a port of it on Android. When React Native reaches 1.0 you'll be able to switch out the JS engine.
Hi /u/GeekServerX, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/yukiiiiii2008, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ratataprogrammers, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Any love for Angular? Our dApp is written entirely on an Angular/Typescript framework because we believe, like another commenter, that these should be written with static type. I wrote up the Web3 into Angular services on our dApp but there is essentially nothing else online with a focus on this. Took me a while especially since I'm not a developer myself (energy engineer by trade). Would change the game for us to see this from you all!
That's what Typescript and Angular are for.
&gt; The number of supposedly experienced devs who think async/await suddenly mean JavaScript is multi-threaded (and, for example, a variable's value could be modified in the middle of a loop by some other async piece of code) is truly astonishing. That actually is astonishing. Like, uhh, have they heard of closures?
Thanks for this, I've been wondering if method was just a C# thing and it was the same as a function in JS.
Being relatively new to writing code, staying away from 'this' has helped me a lot, i think. Having to research ways to avoid using it has helped me write more durable code, i'm pretty sure. At this point, i only use it in events and this.state references in react. It's on my ever-growing list of things i should learn more about, but doubt i'll ever have time. It just seems to me that it's the least universal thing in the JS world. Nothing ever stops it from meaning something completely different and utterly unintuitive in some context, where one is pretty sure it \~should\~ mean some very specific thing. Whenever i'm 'borrowing' code from a writeup or stackOverflow thread, and it has "this" in it, i take the extra steps of figuring out what "this" refers to, and calling it explicitly. I find that otherwise the only way to service that code later is to google until i find the original source of the stolen code. :D
Project Page (?): https://github.com/rubjo/victor-mono *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
For context, I got it from a site telling me to update Firefox to the newest version, then threw this file at me. It's obviously some kind of malware or crypto miner, but I'd like to know more.
While I can't think of any language which bases its execution model on that, it's not really as much matter of the language as that of runtime, You can run Java on top of abstraction similar to reactor just like you have in JS (however multi-reactor is more popular, like in Vert.x, to leverage vertical scaling)
Sorry for the late reply, and thanks.
Pretty much any GUI will use an event loop. If it's multi-threaded, that makes it *more* complicated, not less.
Italics in editors, I will never get it..
Yeah man, And I will never go back from Italics, what works for you.
== checks value equality and === checks value and type. This is incorrect. They both check the type. == allows coercion if the types are different, === disallows it. When the types compared are the same, == and === literally do exactly the same thing. ---- Moreover, using === doesn't "protect" you the way crockford claimed. If you know the types being compared, and they not the same, === could never work anyway. Either you don't make the comparison in that case, or you have to use == so the types are converted in the comparison. === is a crutch that allows you to pretend that making comparisons of unknown types is OK and safe. If you don't know the types in a comparison, then your code is already faulty, regardless of == or ===. You should always know the types in a comparison. If you don't, fix the code ao you can. And if you do know the types, and they're the same, then == is the better and simpler choice. If you know the types and they're different, you have to use == to compare them (or just not make the comparison!). In other words, === should only be used as a last resort when you don't know the types and can't figure out anyway to change the code to fix that. It's a crutch and a code smell, not the "right way to compare" as is always claimed.
I was genuinely gobsmacked. You start trying to nudge them in the right direction by pointing out JS is single-threaded or asking about the async task queue, and get rebuffed with "JavaScript isn't single threaded!" and you just end up going down these amazing rabbit holes of fractal misconceptions. It turns out you can apparently get surprisingly far in a JS development career with only an "intuitive" understanding of tools like callbacks and async code and absolutely no real idea how things work under the hood. I was shocked and appalled the first time I ran into someone like this. These days I'm just appalled.
Js is multithreaded, the priority queue is there to synch other threads with he main thread. That's how you get non blocking IO. In node you even get a backing threadpool you can change the size of.
Would something like Normalizr (https://github.com/paularmstrong/normalizr) fit your use case? I tend to flatten nested objects and rehydrate them prior to save (with or without Normalizr), which makes Redux happier.
You might need to find smarter people to work with. On my team that would be met with two responses: puzzled looks and outright laughter.
Does it support Powerline users?
No, a bummer I too was really hoping for that.
This is so true. I have heard the same thing about value and type from a lot of people but thank goodness I have YDKJS and js spec to show them.
I agree. I turn off all theme italics in vscode
Hi /u/AwkwardLie, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
It's a 121-lines-of-code convenience wrapper over the intersection observer, why does this need to be yet another dependency, and not a medium article?
No problem
Haha - yeah - this was mostly in smaller companies with a lower calibre of dev. When I was recruiting and tech-leading multiple dev-teams for household-name multinationals we didn't have anyone like that in the department, though I still weeded out a few in the first rounds of interviews even then. You'd be *amazed* how many shitty devs there are out there, who often have no reservations at all about applying to places of Amazon or Microsoft calibre. You have the luxury of not knowing about them when you only live inside a skilled dev team - when you recruit you have to wade through a firehose of applicants who *haven't* passed whatever selection criteria your team has, and you rapidly realise: 1. How important *good* recruiters are, 2. How shameless some devs are at misrepresenting or misjudging their skills and abilities, and 3. How far down the bottom of the barrel *really* is
To summarise your entire post with examples; `==` (double) compares value equality. `'1' == 1` is true, `1 == 1` is true. `===` (triple) compare value and type equality. `'1' === 1` is false. `1 === 1` is true.
JS the language is not multi-threaded. You're speculating about the implementation of *one single* JS *interpreter* (node.js) but that's nothing to do with the features (or absence thereof) of the language itself.
 Can you two get a room. Nobody wants to watch this in public.
I exclusively use === and !==, because it's comparison without coercion. I just want to compare two values. That's all. If do type coercion on top of that, you made it more complicated. if (foo != null) { ... } This now has to be read as "if foo is null OR if foo is undefined". The inferred type of "foo" is now `whatever | null | undefined`. If you now rearrange the code, the type of foo has to remain `whatever | null | undefined` or it's a breaking change. All of that for just saving one '='? Totally not worth it.
I can only think of one time in the relatively recent past that I needed to perform a deep clone (was for test fixtures and I just ended up using [just-clone](https://npmjs.org/package/just-clone) for it). I think this is mostly because I stay away from deeply nested objects in the first place. There's usually a shallow alternative you can use that ends up being easier to manage (obvious exceptions are things like data requests)
It doesn't need to! It just needs to return driver outputs, so it could have returned an object with a new count and view. However, since the `Root` function already does that, `change` just calls it again. That's the beauty of it ;)
The mindset that comes with FP is a big part of it, and I agree with that. However, a new language makes it harder to integrate into existing projects — especially when the language is purely functional and may not play well with other modules. On top of that, Moon allows you to write custom drivers, which are where you can define how specific side effects run. These are impure and rely on the programmer being able to access the browser environment. While this could be done within an FP language with some sort of FFI or native JS access, I personally think that it would add too much complexity. Especially since there are a lot of tools for working with functional primitives in JS already, Moon is a "bring-your-own-FP" library, so you could use immer, Immutable.js, Rambda, a compile-to-js lang that supports native JS, etc.
Angular was released in 2016. People actually started using Vue after Chinese companies picked it up back in 2017. It was also released in 2015 so it's not that far off. TypeScript (not a framework, I know) is quite old, but people actually started using it around the time Angular was released for obvious reasons and it has become the de facto standard for a lot of new applications today. People like to pretend that things are not moving quickly, but the truth is that everything constantly evolves and even if you don't change your tools they will look nothing alike after a couple of years (remember when people wrote huge strings with loaders in webpack configs and it automagically applied them by implicitly adding a "-loader" suffix to each loader name?).
Looked at the source for it. It's very similar to what I wrote but I need to do some performance testing on it. I removed the for..in loop they use to iterate over keys and replaced it with object.keys and object.values iterating over the length. works better for small object cloning, for larger objects it looks like object.entries performs better. Thanks for informing me of this, it's another data point I can use.
Angular 2 was used prior to the first stable release, in 2015.
No worries! Also, you may already know this, but benchmarking in Javascript can be a bit misleading if not done properly. This is a great talk about that topic: https://youtu.be/uMuYaES4W3o
No one's confused on how async/promises work with things that would already be synchronous otherwise. People's confusions pretty much always stem from 'how is this blocking operation done in a non blocking way?' And saying that js is a run to completion single threaded language is only going to help so much. Js is like an embedded language and I think emphasizing that it can be in a multi threaded runtime and how regardless it gets synchronized with the main js thread goes a long way.
I do really like null == undefined and I think it's one of the only good practical use cases of two ==s. Of course reserved for situations like if (x == null) throw an error because something messed up.
I don't think it's a good idea to have code which produces different kinds of null-ish values under similar conditions. That's just poor design. Furthermore, I highly recommend to use TS and non-nullable types. Reduce the impact of the *billion dollar mistake* as much as you can.
async is the exact opposite to asynchronous.
&gt; No one's confused on how async/promises work with things that would already be synchronous otherwise. &gt; People's confusions pretty much always stem from 'how is this blocking operation done in a non blocking way?' That is the exact opposite of my experience. Most people in my experience don't give a shit about the way the nonblocking IO works under the hood (which is only even really a consideration in node, itself a minority of JS development). The scenario I kept running into that I was talking about when I started this thread is *exactly* the one that you think "no one's confused on".
Well, then I'll rephrase the question. Why does it return _a view_? I mean, having to produce a full view -or something that includes one- tightly ties it to the view. And IMO unnecessarily.
You return outputs to drivers. In this case, the view driver is responsible for updating the DOM and uses a virtual DOM under the hood. Since the `change` requires the view to change, it returns a new view. This is the equivalent of calling `ReactDOM.render` in React, or updating a model in Elm. It really makes the idea of your app being a function explicit — it could return outputs to any drivers, which could be related to views, audio, HTTP, animations, GraphQL, etc. A lot of frameworks do full redraws like this (see Mithril, Elm, Cycle, and even React in some cases). It's not wasteful or inefficient because your static nodes are hoisted out and created once anyway, and since components are pure they can be memoized. Let me know if I answered your question, because it really is a different way of thinking about UI :P
You said people think that multiple async functions might concurrently change the same variable. I feel like some people think async functions might be carried out in parallel becuase they know that with something like fetch it has to be doing something multithreaded somewhere but dont understand the actual fetching part wont be carried out in js and their callback is just something that will be out on the event loop with the result. I guess I dont see how someone that does understand the eventloop would think that there might be concurrency issues in the js code, and I dont see how you can properly explain the eventloop without talking about the js runtime.
Do you happen to create new instances in a react hook or render fn? We had something similar until we realized we’re dumbasses and cached the observer instance
VanillaJS is the most misunderstood concept. The term “JS”, if currently understood, should refer just to the **language** not to the browser ecosystem (including the web API). The web API is not part of JS. The so-coined “vanillaJS” implicitly does this wrong mix of JS the language and the web apis, it has already born wrong. Should be called “vanilla web API” instead, because most of it refers to the web API, not the language.
Actually I think scopes, closures, 'this', async functions, and actually A LOT of things as mentioned in previous comments, are there which are usually misunderstood in JavaScript. For understanding them properly, I would recommend studying some book like YDKJS or my favourite book: Eloquent JavaScript https://eloquentjavascript.net I hope that would help a lot of programmers interested in JS who haven't already read the above books. Thanks for reading!
Have you ever heard the word abstraction? I don't know why some ppl out there are expecting the IT world to be a replica of what's happening on 4 companies on California and Seattle. It's pretty unrealistic
Mmm... I'm not sure we're talking about the same thing... I'll pick on your comparison with React. Generally, you only call `ReactDOM.render` once, initially, to “mount” the component into the DOM. Thia could be akin to that last call to `Moon` in your code. After that, when an event ends up producing a new state, it's React itself who knows that it should call your component's `render` to update the view. So, an event handler only needs to concern itself with producimg a new state, not a new view. The same thing similarly applies to Elm. You update the model, and then the Elm engine will update the view. This separates cleanly the concerns of “updating model” (or state, if you prefer to use that nomenclature) and of “regenerating/updating the view”. Now, with your approach you're outting together both concerns into the aame function. `change` produces a function that not only generates a new state, but also becomes responsible for regenerating the view. It is this coupling that I have doubts about.
Because "my npm package has been downloaded ____ times!" looks better than "I wrote an article about how something works that get buried in google searches"
Because as people find improvements to this it is easier to have a centralized place to make those improvements in a reusable way.
&gt;Many think that async functions return an unsettled promise immediately. &amp;#x200B; It sounds like you may be having an argument over semantics. Sure, an `async` function doesn't return a promise *immediately*, but it returns one as soon as it reaches the first `await`. &amp;#x200B; For example, if I run this code in Chrome 75: const startTime = performance.now(); function echoTime(eventName) { console.log(eventName, performance.now() - startTime); } function runTest() { echoTime('runTest: start'); echoTime('runTest: requesting promise'); const promise = fetchTest(); echoTime('runTest: got promise'); promise.then(function () { echoTime('promise resolved'); }); echoTime('runTest: end'); } async function fetchTest() { echoTime('fetchTest: start'); const loopStart = performance.now(); echoTime('fetchTest: begin loop 1'); runLoop(500); echoTime('fetchTest: end loop 1'); echoTime('fetchTest: before await'); await fetch(urlThatWaitsOneSecond); echoTime('fetchTest: after await'); echoTime('fetchTest: begin loop 2'); runLoop(500); echoTime('fetchTest: end loop 2'); echoTime('fetchTest: end'); } function runLoop(msLoop) { const loopStart = performance.now(); while (performance.now() - loopStart &lt; msLoop); } runTest(); &amp;#x200B; I get this output: runTest: start 0.12500002048909664 runTest: requesting promise 0.4800001624971628 fetchTest: start 0.8600000292062759 fetchTest: begin loop 1 1.8400000408291817 fetchTest: end loop 1 502.2350000217557 fetchTest: before await 502.440000185743 runTest: got promise 503.32999997772276 runTest: end 504.1300000157207 fetchTest: after await 1520.530000096187 fetchTest: begin loop 2 1520.8400001283735 fetchTest: end loop 2 2022.4700001999736 fetchTest: end 2022.6600000169128 promise resolved 2022.9400000534952 You're correct that the promise doesn't get returned until after the first 500ms loop has completed, so it's not "immediate". &amp;#x200B; You don't usually have JS functions that run for 500ms though (I hope). Let's take a more normal example of an \`async\` function: &amp;#x200B; async function fetchTest() { echoTime('fetchTest: start'); echoTime('fetchTest: before await'); await fetch(urlThatWaitsOneSecond); echoTime('fetchTest: after await'); echoTime('fetchTest: end'); } &amp;#x200B; This one takes less than a millisecond to return a promise. The promise still takes a full second to resolve. When explaining to another dev how this works, I think one could be forgiven for saying it returns the promise immediately.
I implemented a reactive wrapper around the \`IntersectionObserver\` with RxJS. They give you a pretty clean little API to work with.
Ahh I think I get what you're saying now. That's one of the main concepts that I wanted to explore with this approach — having the view be just another output of your application, with no special properties of being magically updated when your data updates. In most cases, you could emulate React or Elm's behavior with the approach I used above (calling `Root` with new data). However, you could use it to your advantage and maybe have different view functions that you call on different routes, or split the view function out entirely and call it. At the most, it's just another function call and I don't think it would be too much of an issue. Even though I came up with the concepts, I'm still discovering how they work in practice. Maybe coupling the view with data updates could provide a cleaner interface for separating views and make things more explicit. Or it could make things too tightly coupled. To sum it all up: I'm not sure if having data and view updates being so tightly together is a good idea this point, and I think we'll find out with time and more experimenting.
&gt; [...] JavaScript's meta model to allow one to roll their own non-string subset-slicing API easier [...] If that allows a concise way to do it, I guess it would be preferable.
Yeah it surprises me how many developers don't know about this. We all tend to use it, but most don't realise it or know what to do when it breaks down. Everyone would benefit from learning some functional programming theory to understand the concepts which have leaked into their language.
Did people find improvements to left-pad yet?
Not to mention that just about every single assembly language out there implements some kind of event loop for basic I/O between components.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart
I don’t know a ton about C#, but I do know that some object-oriented languages will not provide an idiomatic way to write a simple function, and will instead force you to create an object with a method on it. So in those languages, a “function” in the traditional sense of being data-agnostic, simply means an object with a single method that operates on data, but does not necessarily “encapsulate” that data.
Kyle Simpson, writer of the You Don't Know JS series, has said something very similar. In fact he thinks coercion is one of the best things about js.
How is “this” a pain point for people? It’s extremely simple.
Avoiding use of the `this` keyword is probably helpful most of the time, because it forces you to be explicit about the objects you are interacting with inside your functions. That being said, it’s really not as complicated as many people like to make it seem: Every piece of code you write has a defined “scope”, along with a separate “execution context.” Scope: A function has access to its own scope and all the outer scopes that surround it. When you write a function, the scope is defined at the place of the function’s definition. So you can’t provide a function’s internal code with some new scope by calling it in a different location. It has access only to the chain of scopes at its place of initial definition. Context: A function has access to a variable called `this`, which I’ve always thought should just be called `context` for clarity, but I didn’t create JS... The context of a function is kind of like “scope,” in that it provides access to an object that may or may not have been declared *inside* the function as an internal variable or parameter. The main difference is that the value of the “context” variable can change depending on the call site, and can even be manipulated by the `.call`, `.apply` &amp; `.bind` methods on the Function prototype. So if you want the object you’re describing inside the function to be dependent upon which entity is calling it, you can use the `this` keyword. One way of describing context would be to pretend we have the following function: ``` function returnContext (this) { return this; } let context = {}; returnContext(context); ``` `this` is a reserved keyword, so you couldn’t name your function parameter `this`. But you can pretend that `this` is getting passed to each function call **implicitly**. If you want to pass the context value **explicitly**, you could use the `.call` method, e.g. `returnContext.call(context)`. There’s a little more to it, like understanding how prototype methods use `this` to refer to the specific object that called it, rather than actual prototype object it belongs to. Or the way “constructor" functions are really just defining the value of `this` within the function body. But by far the trickiest part is figuring out what the context’s value will be ahead of time, since all this stuff is working implicitly under the hood, and can change down the road.
I like innovation. New APIs etc. are good. But I hate when people pave the way for something new at a cost of mudslinging to old school techniques. The younger ones fall into it immediately. [https://jsfiddle.net/ibowankenobi/apjcxq1w/](https://jsfiddle.net/ibowankenobi/apjcxq1w/) The above loads 100Mb (yes 100Mb) of data to be rendered into thousands of svg boxes. It calls getBoundingClientRect ALL the time. It is not the method, it is how you use it. Someone who does not care to throttle getBoundingClientRect will go and crap all over the place with the whatever "soup of the day" cool API is on the menu that day. He will go register observers over and over again and it will bloat regardless of whether he is on main/macrotask/microtask. Async is good, innovation is good. That does not mean old school is shit and main thread is a dragon.
It's not the same thing
I don't understand why people feel the need to bitch about dependencies - nobody's forcing you to use it
&gt; will not provide an idiomatic way to write a simple function, and will instead force you to create an object with a method on it. This was true in C# until C# 3.0 (I think? this was years ago) got anonymous functions.
Unlike some overreacting drama queens in the thread I don't mind that it's relatively simple and short, it still requires effort to write and maintain. But I would think twice about using it because it has no tests
Thank you for explaining this better. OP really confused me with the "finished executing" thing. tl;dr for anyone who didn't read that whole comment: The function executes as much as it safely can synchronously, but once it sees an await it will pause execution, return a promise, and will execute the rest asynchronously once the await has been fulfilled.
You probably want to use couchdb or cloudant for the server side and pouch for the client. In either of those the server side is limited for you via the credentials. Both sync fine for pouchdb.
All I see is java
Link to codesandbox editor: [https://codesandbox.io/s/bottom-sheet-tqg7l](https://codesandbox.io/s/bottom-sheet-tqg7l)
Do you have any readings or resources to share regarding this performance stuff ? would love to improve my knowledge on performance cases.
and python
Of course they are. Indirect dependencies are a thing. When most packages use micro dependencies to find-out if a variable is a number you are forced to use it. Inb4 no you are not forced you can just not use the bigger dependency that uses it That logic is why people hate on js so much, of course Im not forced to use it, I can just not use js... But you are right, the people in the wrong are the ones using, not the ones publishing. They should just leave it to rot, but for some reason the community doesn't...
The real problem is the business culture surrounding JS development. The web dev industry prioritizes speed of development. When some other consulting firm says they can produce a working app with all the right features in 1 month, and then proceed to use `npx create-react-app` and load 10,000 NPM modules into their project, then I’m forced to compete with that. And to be clear, I’m not competing with them on the *soundness* of their design, or the long-term *maintainability* of their codebase, or the *security* measures they’ve taken. I’m competing with their raw development speed. So writing my own code is looked down upon, because it seems like a slower way to do things. And that point is well-taken. There is something to be said for development speed, and getting junior devs productive very quickly despite their lack of deep JS knowledge... Those are valuable things too. But tbh most of those modules are doing easy, simple things that anyone of us could do ourselves, but often just accounting for that extra 3% of edge cases. So there is really no need for all that bloat. It’s way easier than people think to write the code that underlies their favorite frameworks.
Hi /u/coolguy101111, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Can you talk more about how you cached the instances? Were you creating new instances that observed the same element?
1. Key words analyze 2. Search them in [caniuse.com](https://caniuse.com) 3. Combine them into a matrix
Yep.
I could wage war or come in peace like Ghandi
/r/LearnJavascript
I am he. Thanks. :)
https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics https://www.codecademy.com/learn/introduction-to-javascript https://www.learn-js.org/ https://www.udacity.com/course/intro-to-javascript--ud803 https://www.udemy.com/beginning-javascript/ https://www.coursera.org/courses?query=javascript https://javascript.info/ https://www.w3schools.com/js/ https://www.amazon.com/Eloquent-JavaScript-3rd-Introduction-Programming/dp/1593279507 https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742 https://www.amazon.com/s?k=you+don%27t+know+js&amp;crid=3CTP426AMFRY2&amp;sprefix=you+don%27t+know+%2Caps%2C208&amp;ref=nb_sb_ss_i_1_15
I don't care what features or clever interfaces you provide just _please_ write good documentation and TypeScript definitions.
It's not the firm producing an app that depends on those small libs (at least not only). It's the big libraries/frameworks that do that, they are supposed to be well funded enough to hire good developers. But they don't. Sure we can blame that inneficiency on capitalism, cause it does maximizes profit. But we have to ask ourselves why that's basically only a problem in js.
YouTube is your best friend brother you can learn everything you need to know off of there
Check https://webgems.io/javascript there are quite some resources to learn js :)
https://webgems.io/javascript
Free Code Camp. Also literally googling free udemy codes lmao.
This. I find it very hard to learn from certain instruction, and very easy to learn under other. Nothing beats the variety which YouTube offers.
I would just start trying to build a website (start with something simple like blog) and just look up solutions to problems as you run into them. Not saying you need to start or even host a blog obviously, just write the code to create one.
freecodecamp.org
SoloLearn HTML5 There's an app
MDN is maintaining a very extensive compatibility table here - https://github.com/mdn/browser-compat-data And it's also available as an npm package https://www.npmjs.com/package/mdn-browser-compat-data
May I suggest that you ditch the websites and rent a book instead. They tend to be more comprehensive, clearly written and your brain will remember more.
Hm. https://imgur.com/a/ezBhYsi
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/COkFE09.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)
The Odin project
Youtube is a good resource however sometimes I feel it takes more time to learn as not always follow your way of thinking and it's harder to move back and forth as the opposite with text resources. Wdyt?
[removed]
Udacity has a lot of free high quality content. That’s where I learned mostly. However, the MAJOR part of your actual learning is going to be from building projects. Do some courses as quickly as you can to learn the basics and get a grip on things. But start building projects on the side. I swear none of the shit I was learning meant anything in my mind until I put it to practice.
You learn how to use the most common functions and learn the different terms such as arrays and “if” “then” statements and etc . Then from there watch very specific tutorials example ... “ how can I set up a username and password bar “ take lots of notes and study until everything becomes second nature just like reading you should be able to read code just as fluently . It takes time there are no shortcuts you have to remember people pay good money to learn this because our future is so full of computers because of this YouTube is the best option it’s the best platform to learn for “free” . Otherwise expect to pay money 💴
The Net Ninja on YouTube.
Correct pluralization.
&gt;Also literally googling free udemy codes lmao. Maybe Op had never heard of use udemy lmao Maybe Op had heard of a few others but wanted opinions from people, and a discussion around it lmao Don't be an ass to people asking for help, if you want to get smart with 'just google it', then say it in your head and move on, instead of making smartarse comments.
Just wondering if you have a particular goal in mind, did you want to get into back-end, front-end, full-stack? Are you planning on going professional or just as a hobby or side-gig? I'm mostly self taught. As a teenager I'd try to make my own websites, would usually copy and paste source code from a website using 'view source' and then change things to see what it did and try to make my own site/blog from there. CSS scared me the first time I saw it, none of it made sense. When I ran into problems I'd Google. I still do that. Then the same with JavaScript. When I started making a full back-end/front end with php, I usually just followed tutorials I found through searching for 'how to do x in php' e.g. how to build a user sign up and login in php'. Not the free option by a long way but I studied cryptography at University until masters - I learned to code and learned maths but no web stuff, just a comp sci relates degree that got me my first graduate role at a web dev agency (didn't want to get into crypto). I learned so much on the job in my first few weeks, not only was it free but I was being paid to learn and the company was getting cheap labour and good results and eventually they got a senior developer out of me to train the next set of grads. So round about way - the best free way of learning is by doing, better still is to have someone pay to teach you. Start working in a team as a junior. Don't be put off if you're keen. Also, take a look here: https://github.com/kamranahmedse/developer-roadmap And egghead.io has lots of great videos for free and the paid membership could be a nice Xmas/bday pressie from a friend or family member :) Pm if you wanna ask anything directly - I'll see what I can help with.
Apologies if you thought I meant it that way. I intended to mirror my surprise when I googled for free codes and actually found working codes. As in if you want Udemy for free, googling free codes actually works! Who knew?
Hi, actually there are a lot of awesome websites for that: 1. https://w3schools.com (easy) 2. https://eloquentjavascript.com (difficult but damn so awesome!)
[removed]
Ahso, then my apologies but you came across as being quite facetious - good work on finding the free udemy codes then, and enjoy your Monday!
YouTube: TheNewBoston, The Net Ninja + tons of other great content. developer. mozzila.org is a great resource, w3schools. com is a good resource. You can get cheap (10€) courses on Udemy they have discounts regularly. These courses are great at the beginning, later on the learning curve gets to slow and it's better to use something less big and more specific.
Egh, I get your point but terrible is overstating things. Specifically, your assumption is that the OPTIONS request takes as long as other requests. If that is the case, something is going wrong and CORS will likely be the least of your worries.
Username checks out
It probably depends greatly on the size of the object structure... The JSON parser only has to parse a subset of the full JS engine... so it would be faster.
If you know you're in a supported browser, could use backtick to enclose the JSON string, then only have to escape backticks. ;-)
Thank you but I'm more likely to seeking a file analyzer, a webpack plugin which could give a compatibility coverage report.
Hi /u/daluf, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
you also need to take care of closing script tags. well, these are the things I know about. I rather make sure than accidentally open up my apps to xss attacks
Then there's this eslint plugin which uses the MDN compat data https://www.npmjs.com/package/eslint-plugin-compat That would report all of the compatibility issues through eslint, so simply running `eslint ./src` should do the trick. You could also integrate it in your IDE if that's your thing :) Unfortunately I'm not familiar with any webpack plugin/loader that utilizes it.
That’s very true. I don’t know why all the big frameworks tend to work this way. But on the other hand, if you disregard the aforementioned cost of relying on so many dependencies, it does improve the overall robustness and maintainability of the framework as a whole. It brings in more contributors indirectly, and will naturally cover more edge cases. That’s valuable in itself. As for why JS is so unique in its dependency explosion— 1. Sheer numbers. There are orders of magnitude more JS devs than their counterparts in other languages. 2. Accessibility. It’s pretty widely accepted that JS is one of the easiest languages to learn as a beginner, which invites a lot more contribution. 3. Lack of type safety. Really the lack of a compiler to assist us with writing correct code means we fundamentally **cannot trust** our own code. We often want to use OSS because we see it as better-tested, and more importantly, we can avoid personal blame when it breaks. 4. jQuery. Well, really all the crazy tools we grew up with when JS was still a very painful ecosystem to work with. We’ve gotten super comfortable using all kinds of custom abstractions over the raw language, and I still don’t think it’s sunk in yet that vanilla JS, along with modern web API’s, is quite easy to work with now. Most of those abstractions simply aren’t necessary anymore, especially with Babel...
[removed]
Performance tests should be updated all the time. Engines change. For performance related cases chrome dev tools with js heap ticked + gc collector is your friend. There are several blog sites which weekly discuss these as well, however I'd not advertise. For a start, you can look up for: \- layout trashing (there are many 'get' calls that trigger that) \- throttling These will lead to several places including mdn pages. Airbnb's javascript style guides has small reads for perf as well: [https://github.com/airbnb/javascript#performance](https://github.com/airbnb/javascript#performance)
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Thanks à lot I'll check that
As an interesting note: The Odin Project just pushed it's Tracks feature live yesterday. Now you can choose either a front-end track, the previous full stack with Ruby and Rails or a new full-stack with Node.js backend. Just another reason to check it out.
[removed]
its*
OPTIONS requests are a necessary evil when it comes to CORS, and they're usually extremely quick because they are just a pre-flight check - assuming the checks done on the server are properly implemented. Granted, it is unfortunate that they add an additional request to each call, so are also subject to the same issues as any http request, but once the call reaches the server they should be pretty much instant - if they're not, then you've done something wrong. And bear in mind that without pre-flight checks it would be far easier for someone else to query the API maliciously - not even necessarily to get data returned, but just to cause the server to do masses of extra unnecessary processing.
You must be fun at parties
What is a javascript sdk?
You must be fun at parties
Especially the DOM tutorial. Javascript became a whole new world for me after that.
youtube
Hi /u/appsmaven2014, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
fixed :)
https://scrimba.com/ You can code while you watch the videos! Freecodecamp even has a course on there and it's all free!
Is there specific reason to use a separate database for each user? Usually multi-tenant applications have a single database with \`user\_id\` field in each table (or whatever it's called in Mongo) and application logic to handle authorization.
That's the joke...
Thanks a lot! That's my thing!
"the business culture surrounding JS development" is just a strawman. It varies wildly and it's no different than any other stack.
Await wraps everything below it in a .then(), so it effectively reaches the end of the function (synchronous execution) immediately. Await itself does not 'return' a promise. This will confuse people. All functions in JS run to completion other than Generators
Incorrect. See my comment.
Yes I know mostly we use Single Database and each tenant gets 'user\_id', 'company\_id', or something like 'org\_id' to separate data. But we want to have separate databases so that we could easily rollback/backup data of each organisation and keep them secure. Data of each organisation is 5-10GB and it's growing rapidly. So we are refactoring our application and it's architecture. That's the reason we want separate DB's for each organisation.
Yes, I am. Thank you for noticing!
Did you seriously just create a reddit account to link to your website and think that would be a good idea? And to call it the best web development company?! Pretty high on yourself, aren't you?
Why free? You gonna earn from it so invest. People who invest in such paid learning platform get better benefits. Try Frontend Masters
Not understanding that once your code can't be preempted by other JS code once it starts running is not any kind of abstraction - it's a fundamental bit of knowledge about the language, without which you *can't* properly architect code, and will waste hours of debugging time worrying about impossible scenarios every time you hit a bug. My point about Amazon and Microsoft was that *I was recruiting for a company of that calibre*, and still seeing applications from people who could barely code, not that I would expect every company to hold people to that standard. That said, if you're a non-junior dev and don't understand something as fundamental as JS being single-threaded (and the implications of that for the control-flow of your code) then you have no business being yourself a non-junior dev.
Big plus one for the odin project. Although I never used ruby again after, the couple of month I needed to get through it were the biggest boost I had from going to casually learning programming on the side to being job ready. I have gone through dozens of tutorials in that period, and this is the one that stood out imo
&gt; I guess I dont see how someone that does understand the eventloop would think that there might be concurrency issues in the js code That's exactly my point - these devs *don't understand the event loop*.
I thought your rule of thumb was: Only use non-coercive comparison if either operand could be in this set: [0, empty-string, empty-array, true, false] Did I misunderstand?
I worked with a company that had a similar project (but they were using .NET and a different SQL database for each tenant). What they did was hard coding the database connection for each client in the application.json before hosting a version of the project for that client (I don't know if this is a good thing or not, I just know that they did that).
Check out [The Odin Project](https://www.theodinproject.com/). I think it's excellent. You could also try [The flask mega tutorial](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world) if you are proficient/are willing to learn some python. It's an easy language to pick up though.
 [freecodecamp.org](https://freecodecamp.org). Traversy media, Academic, Academind, Devtips, Wes Bos and Level Up Tuts On Youtube
I had to do the same thing for our project as well, and this is what I came with, and it's working perfectly in production for over a year now. We are using Mongoose schemas, and as you say yourself, connections are initialized at startup. So you need to create new connections on the fly and cache them. ``` let cache = { default: mongoose.model('SomeCollection', schema, 'some_collection') } module.exports = { for: function (user) { if (user &amp;&amp; user.is_tenant) { let dbName = user.db_name if (!cache[dbName]) { cache[dbName] = mongoose.connection.useDb(dbName).model('SomeCollection', schema, 'some_collection') } return cache[dbName] } return cache.default } } ``` Here you are not exporting the model, you are exporting `for()` function which will create a new connection to the specific database and cache that model. How you would use it, instead of ``` SomeCollection.findOne(...) ``` You do this ``` SomeCollection.for(user).findOne(...) ```
Thank you so much for sharing your experience and code snippet, I am gonna give it a try and will let you know if it works for me or not.
We use Pouch-Node for backend and Pouch-Client for the Client. The Node communicates (Replication) with Remote-Server to backup. I would recommend to use CouchDB as the RemoteServer. Its better maintained yet. But I am wondering you have no effect on permissions. Foreign Logins should deffintly not have access.
[removed]
For me it really helped when learning new framework / library to check academind channel on youtube.
Overview of the programming paradigm that has been spreading like wildfire the past year in JavaScript UI Frontends. Influenced React Hooks, is used by Svelte, and has gotten some recent attention in the recent Vue Function Components RFC. This article serves as an introduction to help make sense of this latest trend.
your comment made my smile merci
Brad Traversy
To write a website by yourself is the best way to learn web devleopment, I think. Use Google and stackoverflow when you have any questions during the development.
https://eloquentjavascript.net/ https://javascript.info/
If you want to learn React, Scrimba is THE place to go. Absolutely loved the interactive code method of teaching. https://scrimba.com
Traversy on YouTube
Just consider yourself lucky you never had problems installing ruby. Man oh man, somehow it likes programming languages hate me. Last time I had an error with a fresh install of Node.js on a mac, concerning EAccess, drove me nuts.
You should check out Traversy Media then. Net ninja got all of his subscribers by copying Traversy tutorials and making a 50 minute video into 6 5-minute videos.
I haven't used chrom storage but there is a " chrome.storage.sync " instead of " chrome.storage.local " so I guess the local is async. Meaning the return rtn; will return before the chrome.storage.local... runs its inner function to set the rtn.
Also Traversy Media and Fireship
You need to give some recommendations then. A lot of books I've had were basically just a ctrl+p website with horrible code formatting and code comparisons on the other side of the page. &amp;#x200B; A book I really loved was the HTML &amp; CSS book: [http://www.htmlandcssbook.com/](http://www.htmlandcssbook.com/) . I think they had a javascript version too. I mean, it didn't get very deep but it managed to be very good in transferring information.
Thanks for swift reply. Never changed the outcome using sync, but made me realise my logic procedure was all wrong. Now updating text box in get() callback function. &amp;#x200B; Still feel that I should be able to use a function though.
I really like Pluralsight, the style is “code along” for the beginner classes, then projects for the more advanced. I have been doing mostly JavaScript. $30 a month.
StackOverflow
you can learn web development here [w3school.com](https://w3school.com)
The Odin Project
I'm super excited by the NodeJS addition. Odin Project really help me things sink in for me. It's a read read/practice this, then feet to the fire &amp; build it approach. Freaking love it.
Stay awesome friend : )
No, he created the UI for one.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
I'm no expert but I believe your right with the your assumption with the async stuff. Easiest option would be to put the value set in the function getNewUser() { chrome.storage.local.get("temp", function(result) { $("#textbox").val( result.temp); }); } &amp;#x200B; or you could pass a function to call after the data as been retrieved &amp;#x200B; &amp;#x200B; getNewUser((dataVal) =&gt; { $("#textbox").val(dataVal); }); function getNewUser(callback) { chrome.storage.local.get("temp", function(result) { callback( result.temp); }); }
And barely 10% of that
DevEd94 and WebDevSimplified on YT
Yes
What is the proper javascript function I should call?
Writing the backend for a web app used by millions of users is not an easy thing, I reckon.
Some guy creates part of something, calls it complete, just like a real developer :D
You're onto something here! Still, for the sake of tutorials like this, it could have included some basic functionality by way of eg. Firebase.
Doing it for less then half a million is hard enough, most people have no clue what the problems are.
No
JS supports functions as first class citizens and arrow function notation make FP in JS very elegant. Beyond abstract talk, any specific example of anything achieved in any so-called FP langs that JS cannot do?
Brad of Traversy Media is the GOAT
edx.org lot of free courses, you only pay if you want a certificate
Absolutely freecodecamp. I used it as a base and augmented with udemy and other online courses and tutorials. Also built as many personal projects as possible, listened to podcasts, read everything I could, etc. Got my first job a year later. Now on my second. (This was a few years ago). By itself it may not be enough, but it provides a great roadmap to direct you on what to focus on.
I can’t recommend FCC enough. I got my first job because of Free Code Camp and they’re even more thorough and detailed in the two years since I went through it.
Google
If I look at where I get most of my knowledge from: stackoverflow :')
A.d.h.d.
[removed]
I’ve found MDN to be the most helpful
_w3schools.com_ You're welcome.
I don't think there is a website or a book you can read to learn. Go ahead and do those things, but the requirement is tons of time. I saw a post by the founder of Lambda School in which he said his students put in 3000 hours of hands on keyboard time in 9 months. That's a load of coding and I think it's the secret sauce of the school. Go ahead and just put things together, one step at a time, feeling stupid as you're banging your head against the wall trying to figure this stuff out. That's gold. That's learning. There's no substitute to the rewiring that your brain is going through as you're working that process. Only being in the experience of the process can you see the "why" behind what you're learning. If you can't see the why from direct experience, then you're just cargo-culting. But that process of "faking it until you make it" is necessary. Books and courses are only an extension of that process. It's the explanation after the light-bulb has already lit up. But you shouldn't go through all that effort unless getting to that level of understanding is the target you are setting out to achieve. Either way, you'll have to put in the time.
I think createUserWithEmailAndPassword automatically logs you in, regardless of whether it's verified or not. You should be able to get the user object and there check if the user has email validated or not (it's a property of the user object from firebase auth). With that check, you should be able to let your user in.
Maybe C#? Async and await
C# has async and await.
I know some of these have already been listed but: W3Schools Udemy Udacity has some Code Academy YouTube: Traversy media TheNewBoston at one point Freecodecamp.org Pretty printed
Thanks bro
And thought out the whole process.
I think the concept of it is fantastic, and one of the biggest barriers to entry is the tooling. AngularJS was wonderful as it allowed data-binding and the modern approach to development while not requiring any tooling at all. Then Angular and React happened and revolutionized the world at the cost of tooling requirements. I do have some concerns though. Performance - Transpiling takes time, and for every 1 second a user is waiting, their chance of leaving your site is increased drastically. While it may work well on our high-spec development machines, the average user system is much less powerful. CPU cycles are worth their weight in gold in their systems. CDN - Pulling in missing packages from a CDN seems like it has the potential to escalate security issues even further. If a 'loaded' package is pushed to a repo, we've got a huge problem every time a user visits. It would be even more difficult to detect if a package had been breached, since it would be easy to replace that breached package with a clean one, meaning that there's less chance of tracing where it came from. 1 second you're all good, the next second someone is stealing all your logins, and then a few moments later you're good again. Drive-by code injection would be a huge problem. If there is 1 feature I wouldn't ever want in a project like this, it's the ability to pull in code from unverified locations at runtime. Bundling code for production - what's the purpose of this package then? Why would I consider using this over a traditional tool chain?
Hi /u/rifaterdemsahin, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/eltegs, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/gaoryrt, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Abdul__codes, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Anything by sindresorhus on GitHub. Dude pumps out well documented libraries like a chicken lays eggs.
Hi /u/tazeg, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DragonSkyMusic, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
And Dev Ed on YouTube. He does really cool things like one video design a website in Figma or XD and then the next video he develops it in html css and js. He also does JavaScript and Python tutorials
And Dev Ed on YouTube. He does really cool things like one video design a website in Figma or XD and then the next video he develops it in html css and js. He also does JavaScript and Python tutorials
It's nice to see someone struggle with a problem for 5 minutes to find they misspelled image to be the problem. The struggle is real.
Most people don't even have a clue what the problems are for small-medium scale apps but with proper maintainability and security.
They use mongodb for sure, right guys? /s
May I ask: why on earth did no one thought this would happen? Was it not meant to be that way or is something you guys just figured out you done goofed?
Are we really measuring his speed to develop a tinder clone or his speed to retype a solution he already developed before he started recording? I mean par for the course for me is 3 days to work though all the issues and repeatedly rework a solution. ~60 minutes to walk through the final product once it's all set out.
Thanks for the comments! Addressing the concerns: Performance - during development, the first time you ever load the app, the transpile step will take some time (same as running a traditional toolchain would). Afterwards, only changed files need to be re-transpiled as the results are cached. This corresponds to running a watch task of some kind in a traditional toolchain. Before publishing the app for users, you bundle it (in the browser and save the result, or using Node.js). Afterwards, it loads as fast as after bundling with Webpack or similar. CDN - There will be support for package.lock (or similar) that ensures a particular version of every package is loaded. This avoids suddenly downloading new exploited versions of dependencies. Bundling for production avoids new exploits even if a CDN is compromised. Nothing new can get injected into the app bundle after the developer initially created it (hopefully using safe dependencies at that moment). Bundling code for production - the purpose is exactly the two concerns above. Differences from a traditional toolchain are: - Other developers don't need to set up a toolchain to contribute. - Node.js and everything that goes with it become optional. - Generally eliminate build system bloat. - Usually no configuration is needed. Bonus: - It's possible to write a CodeSandbox style IDE that runs entirely from a gh-pages branch without a backend...
just use the cloud bro
Nothing wrong with awaiting a promise and ignoring the result, if all you care about is its side-effect
One more difference from a traditional toolchain: If you only run the development toolchain through the browser, then any possible exploits to those tools are restricted to the browser's sandbox. They're unlikely do be able to do anything to your system, because they would target a Node.js environment and not include any browser exploits (unless this approach becomes wildly popular). I've already gotten TypeScript and PostCSS with autoprefixer and cssnano working as part of the in-browser toolchain.
I have promises in my code that don’t return anything.
Try r/learnjavascript
Press (x) to doubt.
What are the problems?
Mongodb is fast as fuck. If you don't need relational data, it would be a great choice.
The apps I only have experience in making are those that are used by a small team of engineers. I gotta be honest with you, I'm kinda retarded.
Post the URL to the 100% fully functioning thing. Or its utter BS.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/learnjavascript] [A Complete Beginners Guide To Javascript](https://www.reddit.com/r/learnjavascript/comments/c7tneb/a_complete_beginners_guide_to_javascript/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I don't generally use `await`, for I don't have much need of it. But that's just my way of doing things. So leaving that aside, I will tell you what you're doing with that use of `await` and you'll be the judge as to how much you like it or how good of an usage you think it is. Unfortunately though, this will turn out to be a long-ish explanation. I know some people here do not approve of long comments, so I later, after you've read it -or decided not to- I will delete it. So please, tell me when such a thing happens. So, you need to start with callbacks. I won't go into unneeded detail; you may know much of this, but it is necessary, so bear with me for a moment. Callbacks essentially means that a line of execution relinquishes execution control over some part of itself, giving it up to the function that receives the callback function. That is, in "my" code... // ... doThis(); doThat(); doThatOtherThingAndThenPlease(doThisOtherThing); // ... I'm giving the function `doThatOtherThingAndThenPlease` control of part of my execution flow. I'm saying "oh, do your thing and when _you_ consider appropriate, then please call `doThisOtherThing`. This is generally viewed as annoying. Some even consider it a problem. Especially when this giving up execution flow to someone else happens a number of times throughout a "full process". _One_ approach to solve this annoyance is to try to re-invert the control over the execution flow. This is famously done through Promises. _Usually_ -but not always, as we'll see in a moment-, these operations that required the use of callbacks, were operations that produced some sort of result. That result was passed, when finally available to the callback. Promises more or less give control over the execution flow back to the calling code. This is not completely accurate, mind you. What they do is, they pose as intermediaries over the calling code and the called code. So, instead of giving the called code the responsibility of executing the callback, you have this artefact in the middle that sort of says: "Use this to set up the rest of your execution flow and it will be executed when the result is finally produced (or there's an error, blabla)". As I said this, to some extent, returns back to a certain extent the control over the execution flow of the calling code. So now I know that if I do... //... doThis(); doThat(); let control = doThatOtherThing(); control.then(doThisOtherThing); //... ...it is now not `doThatOtherThing` the one responsible for continuing the execution of _my_ code. It's not completely me, as I have to do it through this Promise thing, but it's a good enough compromise. I do get better control as the Promise is a generic, standard mechanism. Things are kind of ok; they are better than before. But... there's still _some annoyance_ left because while my code has more control over it's execution flow, it still does not _read sequentially_. Some people find this annoying, and so we have `await`. It is a full scale but superficial transformation that allows you to write your code in a visually sequential way, but then your code will be transformed into the usage of Promises and the transformed code won't be necessarily sequential. Now, let's consider why one would want this _sequentiality_ in their code. There are two similar but different enough reasons. One is waiting for results, or depending on the availability of certain results to continue the process. The other is waiting, but not for a result; it's just coordination and synchronization. You want to perform operationB _after_ operationA, even if operationB does not depend on any data operationA produces. This second reason is the one you're presenting here. You're using `await` not because you need something produced by your `reset_password` function, but to arrange some synchronization. You note that the code "legitimately needs" to wait. _If_ that is so, then it may seem reasonable to use some synchronization mechanism, and `await` can work as such a mechanism. So, ultimately, it all boils down to this particular point: Is that correct? Does the code "legitimately need" to wait? But when answering this, it is probably a good idea to also ask the other question: Do you _need_ your code to be visually sequential?
Using variables to refer to things by different names should, intuitively, not affect behavior. The combination of how "this" changes depending on how you refer to the function, and that JS makes it very easy to refer to functions, makes it a very common stumbling block.
Yes it's fine, just learn what you find interesting, who cares about the rest.
I absolutely do this, and in certain circumstances (eg. sometimes in Selenium tests when the "wait until" stuff isn't enough) I'll even make a `sleep` function: const sleep = timeout =&gt; new Promise(resolve =&gt; setTimeout(resolve, timeout)); Then I can just do: await sleep(1000); to pause/wait for a (literal) second.
They use elastic search. Its flying...
w3schools is the most simplistic, progressive website for learning both front end and backend technologies
Of course you don’t need to know everything. And these are the ones I use regularly, to name a few. 1. Spread operator 2. Object destructuring 3. Promise / async await 4. Arrow functions 5. Const / let 6. Array methods(.map, .filter, .reduce)
I think when you make a new library that does something similar to existing stuff, it's important to clarify what niche your library serves that the others don't. For instance, there are tons of "GoToMyPC"/VNC solutions out there (ie. tools that let you remotely control your desktop). From your description I thought your project might be one of those. But, based on the GitHub page, it seems like it's more a visual FTP client, ie. a GUI for the command line commands `sftp` or `ssh` (but the latter if just used to do filesystem stuff). But even that doesn't tell me "why should I be interested in your project", and not just use one of the many existing visual (secure) FTP clients? Is it because your's has a web interface, and that's better? Is it because you're isn't meant to be used directly, it's just a proof of concept and others are meant to re-use the code in their own projects?
Usually you do need relational data
Thanks for using 500% more words to be 1% more correct about something I already understood. I was trying to keep it simple for newcomers.
Agree. I think you are alluding to this, but worth clarifying that by \`await\`ing you also ensure that an error "result" (rejected promise) wont go ignored. For example: \`\`\`javascript try { await resetPassword(user); } catch (err) { alertResetPasswordFailed(); } \`\`\`
Your target language/framework documentations website.
I think it's more important to understand the differences between vanilla and ES6 JS, than to be focused on using it at all times. For example, using arrow functions rather than vanilla functions. There is more than just syntax differences between the two. With arrow functions, you preserve the context of the keyword, "this". Therefore, using arrow functions inside React components allows you to bypass the step in which you have to bind a function to its component. This is just an example of how ES6 brings on more changes than simply syntax. So to answer your question, I would say learns and understand what makes ES6 different from Vanilla JS. Once you have the understanding of ES6, you yourself will understand when to use it. P.s. apart from arrow functions, I gotta say array functions like forEach and map are a Godsend!
I use the exact same feature set
Spread operators and object destructuring are really convenient once you master them. Definitely learn to use those. Arrow functions will also save a lot of typing.
Ok, first off, when you write: &gt; But there are some things I don't like for example It's customary to follow that with ... an example ;) But more importantly, for ANY question that fits the format "Should I use everything in _______ in JS, or just the parts I find useful?", the answer should *always* be "just the parts you find useful". For instance, I don't use getters/setters (they're really only useful for letting your testing library do that `expect.to.be.equal` stuff), generators, or the `++`/`--` operators (outside of `for` loops ... which I virtually never use unless doing a fizzbuzz). However, there's one very important caveat there, which is that you can't know whether something is useful unless you try it or at the very least see it used properly first. So as a dev I think you always want to be on the lookout for new and interesting ways to solve problems, including ways that come from _____ JS (eg. ES6 JS). By the same token, if I ever see an article with a cool new way to use generators/getters/setters/increment operators, I absolutely will start using them (and I'd probably be especially drawn to a Reddit article called "clever new way to use generators"). So 1) always only use what's useful, but 2) to improve at your craft, always be on the lookout for new useful things and new useful ways to use things you already know of.
sorry about that was a typo. LOL
Camel case cucks me every time and I am still blind to it.
Thanks for the thought out response, I'll have to dissect this later tonight
This has always been a great book to read for JS: [http://shop.oreilly.com/product/9780596517748.do](http://shop.oreilly.com/product/9780596517748.do) but it's getting old now so there may be better ones. Either way, it shouldn't be a difficult leap from CS to JS. The biggest mental barrier is not having super strong type checking. Typescript can help with that. But once you get over it and see it as an advantage, JS is so much easier to work with.
&gt; However, the MAJOR part of your actual learning is going to be from building projects. 100% Agree. I completed FEND through Grow with Google and it was great and put me in the right direction... but coming up with your own projects really is where it's at. Gluing together two APIs to make a cool toy, writing bots, making browser addons, what have you. When you get new tools you start coming up with so many interesting builds. That and working on open source projects... trying to parse someone else codebase and learning why they did something the way they did. You learn a lot of cool tricks (and a lot of bad ones to avoid) that way.
One more.. If you work with typescript this is really good: [https://basarat.gitbooks.io/typescript/](https://basarat.gitbooks.io/typescript/)
The other day I spent about 30 minutes trying to figure out why my css wasn't working the way I expected, only to eventually notice I'd written `styles` instead of `style`... Not my best moment
Funnily enough, had a friend do some dba work there, and i think they actually do.
&gt;http://shop.oreilly.com/product/9780596517748.do Crockford's getting REAALLY OLD now. &amp;#x200B; I would advise to go for [http://speakingjs.com/](http://speakingjs.com/)
I thought MongoDB was a meme.
My book may work for you: “[JavaScript for impatient programmers](https://exploringjs.com/impatient-js/toc.html)”
Why do you need to use everything in ES6? Do you know Vue still use \`var\` to declare variable? And I don't use any ES6 syntax in my pure js project, then I don't need babel to transform my code which keeps my file size small.
I've been working with Typescript since it's built into Angular, and I really like it, so I for sure will check this out... Thank you so much!
I read the book overview on the website, and it sounds exactly like what I need, thank you!
How/when is (function () { console.log("Hello World"); })(); different from just console.log("Hello World"); ?
Take a glance at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/String/split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split). const myString = 'Some decently long string separated by spaces'; const splitString = myString.split(' '); console.log(splitString); The value `splitString` will be an array of strings that you can work with.
Fortune 500s don't typically avoid using software because a select group of smug programmers think it's a meme
Hi /u/treyhuffine, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ThirdEye27, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/_jskod, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/blu875, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Literally0Nobody, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/UX_love, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Indeed. So it's almost like you should use the right tool for the job rather than be insecure and dis a random technology to validate yourself.
I decided to use it on something after not having used it in forever. It's great. Db atlas is also great. Not practical for most projects, but when it is, I've had zero issues with it.
This is entirely incorrect. Generators do not run-to-completion, and most engine implementations of async-await actually treat them like generators. When a yield is encountered, the generator is locally paused... literally. Await uses the same approach.
No, this is all incorrect nonsense. Most engines treat async-await like a generator, which definitely does localy pause at a yield. Wrapping promise.then() around subsequent code would be one of the most naive and inefficient ways to implement await. Even if an engine did that (most don't) that doesn't mean that's the proper mental. model. Local pausing like yield is the proper mental model.
Then don't claim to have done it in 60 minutes for views lol
It’s Web Scale.
After having used Sass/CSS-in-JS for years, never having written CSS for literally years, when I was teaching my noob friend the basics of HTML/CSS, I was writing Sass syntax in a CSS file, and was like "WTF WHY ISN'T THIS CUNT WORKING"
If you don't need the result, you don't need the result. You probably need *something* though. And *maybe* that something is best returned or thrown out of the promise. It makes code more self-evident and easier to read. But all that's in theory. In practice we do hairy shit to get things done sometimes.
And this is why I don't trust your promises.
I swear that they’re legit!
I actually made a Tinder like clone too last year and I learned so damn much from just that.
\+1 &amp;#x200B; Here's a free book to bring you up to speed with the entire ES6 and onwards syntax: [https://bubblin.io/cover/let-s-learn-es6-by-ryan-christiani#frontmatter](https://bubblin.io/cover/let-s-learn-es6-by-ryan-christiani#frontmatter)
I know that feel. NPM crate-react-app command not recognized took me way, way longer to spot than it should have.
I generally try to design my code to be reliant on passing things through parameters and return values. As such I mostly end up returning something, though you might have something like “deleteFromDatabase” that is async and just needs to not throw for it to be fine. I also prefer promise chaining over async/await but there are definitely some cases where trying to do it via a promise isn’t clean, in which case an await makes more sense. One thing about antipatterns and best practices is there are always considerations that can justify or invalidate them. Understanding the impact of what you are doing is ultimately what is important. But this is me going on a tangent
Being serious here, is there really a good time to use mongo? Can you provide some real world use cases?
CQRS. Read-only part of such a system can see speed improvements with NoSQL.
Am I the only one who read the last words as "other stack/overflow"? This was a missed opportunity lol
Fortune 500 use whatever their friend Larry is selling to them.
There is nothing wrong with this because you are using `await` to collect before proceeding to the next line of code. I don't hesitate to do this because it falls into the `tacit/point-free` style of writing. &amp;#x200B; Consider that: const poop = await fn(); causes JS to allocate `poop` into memory, so it is really a question of, are you going to use `poop`. If the answer is no, then don't allocate it in memory but still execute `fn()` and don't proceed to the next line until the promise is resolved.
I mostly agree. But there are definitely several important things that FP languages usually do that plain JS cannot do, and likely never will do. 1. Exhaustive pattern matching at compile time. 2. A REPL that will hot-patch your running code in automatically. (Hot module reloading is similar, but not the same thing. You still have to manually add the set-up/tear-down code that will run for each update. The REPL you see in Clojure, on the other hand, requires none of that. It compiles and alters your running code without writing any code for set-up/tear-down, and without restarting the program. It can only do this because it has robust knowledge of your abstract data types.) 3. End-to-end type-checking. It’s becoming much more possible with TypeScript, which I still consider to be “annotated JS” in most respects. 4. Higher-kinder types. Even Elm doesn’t have this, but it’s still a common FP language feature. 5. Idiomatic “tuple“ types. ... just to name a few. But on the whole, I agree that it’s possible to write in a highly functional style in JS. You just end up lacking a lot of the convenient features offered by compiled languages.
no mobile, no animation, its in no way tinder clone but ok
I know it's kinda late (almost 1 month, nearing this getting archived) but: [https://youtu.be/AdNJ3fydeao?t=1498](https://youtu.be/AdNJ3fydeao?t=1498) &amp;#x200B; I do also agree that we need more resources and real world production usage... and things getting bigger.
If I recall correctly, most of the performance hit was the call to `Object.freeze`, not necessarily the subsequent operations involving the frozen object. But I certainly could be wrong about that.
It’s pretty hard to encode circular objects as a string, because you lose the reference data, ending up with just brackets and strings. So encoding a circular reference as JSON is pretty much impossible, because it’s a lossy operation. If you wanted to deep clone a JS object to another JS object on the heap, you could keep a record of all encountered object references as it walks the object tree. Then, each time the algorithm encounters an object, it will only traverse that branch of the object reference is not found in the reference record. If it’s already seen that reference, it can just paste the corresponding object reference that represents the *copy* of that object. With the above strategy, all circular references can stay intact, while still keeping the cloned object tree 100% *referentially separate* from the original object tree.
100%. I'm using it in two services in production. One is for a comment service. There are some simple indexes (threads, and threads that are related) and because it's used in addition to another service (which houses the actual user data and the content) it's awesome. I don't want to bore you with the business requirements on what drove this, but actually use a db stream to create cached json for related comment threads (always viewed together) that are saved on s3. When comments are turned on and you are browsing around, the comment counts/threads load instantly. And then use a websocket to push live updates to anyone viewing that thread (actually section of threads). You could certainly use sql, but this was painless, quick, and fast. I don't need flexibility, I need embedded, fast, and little dev time as possible. Use Mongoose to define the schemas. And you do need to review best practices for modeling before you design, otherwise you'll run into query issues if you design like a sql db.
Not a DBA so take it with a grain of salt. Mongo works quite good anytime you may work around relations in _queries_. Documents in general is a more natural data representation. It also gives you instruments to form or denormalize data so you may end up eating seriously into storage but improving the read speed. It works well for CRMs, medical, finance, so on. On a higher level I guess it is more matter of habit, like procedural/functional or QWERTY/Dworak. You use what you are comfortable with and don’t run around for any regular project. And for a big one you better have a good DBA for consulting/initial setup at least.
Clouds are awesome. Right until you get the bill.
Hi /u/mugglesdomatter, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
&gt; Thanks for using 500% more words to be 1% more correct about something I already understood. I was trying to keep it simple for newcomers. Why bring ego into this u/partheseas ? If it is '1% more correct' &amp; this is a topic you understand, what is your take on u/getify's comment? Things that were not accurate in JS explanations led me astray as a newcomer to JS. Just trying to maximize information density without losing any precision.
Not quite sure what you are talking about. Do you have an example?
What would I google to learn more about how he set up the state management? I quite liked the 'redux-ish' style scaffolding he used.
what is different from how you run it local and on leetcode? not this code, but the driver code that invokes it?
Upvoted cause apparently I’m 12.
Exactly. This guy did about 5% of the work lol.
&gt; I thought MongoDB was a meme. I thought devs that don't what they're talking about, but still talking, are a meme.
&gt; The author is using `parseInt` to round a number, when it's not designed to do that TypeScript won't even accept the code for this reason - `parseInt` operates on `string`, not `number`.
And Tinder UI is like 2 screens. One picture and 3 buttons or whatever. Impressive.
... but but my clickbaity title
My friend used the free version of aws and got billed 500$
i actually annoyed
Incompetent developers on tight schedules, working with the hottest technology this week, overengineered microservices, microfrontends and microdicks. Taking three times as much time because what used to be a two man job now requires 9 people across 3 teams, each with a manager of their own, collaborating on delivering that sweet, sweet feature in which every person adds a dependency, writes 50 lines of code, 10 merge request comments, and a blog post. Yeah, the product is not profitable, but we have 95% test coverage and have replaced our CSS-in-JS solution three times already, which allows us to iterate, like, really fast man. Boom, another 80 million dollars investment to burn through. There are issues you wouldn't encounter in your toy project, mostly scaling, but the core of Tinder is nothing a team of several seasoned devs couldn't do in a reasonable amount of time.
I think this is the crux of the issue. That function has to have side effects. Maybe you're ok with that, if so carry on. On the other hand if you're trying to validate something maybe you'd be better off with a pure function 'validate' that returns the boolean. I generally prefer to reduce side effects when possible. They complicate code a lot. That being said there are very legitimate use cases for them.
&gt; Most engines treat async-await like a generator, which definitely does localy pause at a yield. Appreciate you contributing to getting clear on this. Any code to step through, ECMA spec link or other link/image that supports 'Local pausing like yield is the proper mental model.'? i.e. https://www.ecma-international.org/ecma-262/8.0/#sec-async-functions-abstract-operations-async-function-await or "After the await defers the continuation of its function, if this is the first await executed by the function, immediate execution also continues by returning to the function's caller a pending Promise for the completion of the await's function and resuming execution of that caller." from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await
I think we had been talking about cloning. You are right. Though I have used serializers that can deal with cycles, basically by adding extra data
I’m a beginner developer, I spent 6 hours debugging a bootcamp homework assignment. The issue? I had typed URL instead of URI in setting an environment variable, but the l was lowercase. 6 hours, and it was entirely my fault.
U might be right, geolocation data, maybe some objects documents. This is something mongo is good for. I was just mocking all the "MEAN stack" tutorials out there.
It dependw if you return something from the result, if it's nothing then I would just skip it because awaiting the async function already makes sure that the promise is fulfilled
So inside `async function1() =&gt; {....` `let x = await *expression*` `console.log(x)` is like being inside a function* generator() {.... `yield expression.then( function(resolvedExpressionUnwrapped) { console.log(howdy} )` under the hood?
The best book is, IMO, David Herman's *Effective Javascript: 68 Specific Ways to Harness the Power of Javascript*.
How you gonna make a clone of a mobile app that doesn't even work on mobile?
You cannot reduce the number of side effects in an application: side effects are how you make things happen: show some UI, read/write date, network, user input, etc. All you can do is push those side effects to the “edge” of your system so you can make the rest of your codebase easier to reason about, debug, combine, and even test. For example, in our app, we have a redux middleware that returns a promise for actions that have network side effects/async actions, so naturally, we do things like await dispatch(fetchUser()).
nice additions, could you tell me why they would be better than Jon Duckett?
You await an action response? That does not seem right, but explain a bit more if you can
Why?
This is hilarious and yet too real. Sometimes I wish I was a plumber instead.
Speaking as a front end dev, clickbait much?
Sure, we considered a few different approaches to doing async actions in our react-redux app, and we decided the best thing for us was to represent async actions no different than normal sync actions. Basically, they’re marker actions with only a type representing the thing we want to do, eg FETCH_USER. Then, we have a middleware we set up to “listen” for these actions, and perform the actual fetch. Based on the use case, we might also perform additional parsing or manipulation, to do things like normalization of arrays of objects into a “table.” We then dispatch a followup action that is called something like INSERT_USER to insert that object into the store. Motivation: we dabbled a bit with redux-thunk, but found that it makes it difficult to do record/replay and debugging/tracing, since you would only see the INSERT action, not the fetch itself. It also means we can turn off side effects, replay a set of actions, to get into a target state, then turn them back on, if needed. Regarding the technical, dispatch returns whatever your middlewares return (each middleware in sequence has the option of returning whatever the next one returns, or swallowing that return and giving back its own value). For this reason, in redux-thunk, if your thunk returns a promise, redux-thunk will just return it, which then is the return of your dispatch() call. We just basically copy this nice pattern so you can build more complex workflows out of multiple, simpler async dispatches.
For the book about JS, it goes in depth into JS's peculiar details and the book has a written foreword by JS's creator praising the book on how it translates well the ideas behind EcmaScript. For the book about HTML5 and CSS3, the books come from a great publisher (O'Reilly Media) whose books are always a great reference. They are thorough and technical. I also recommend their "cookbooks" which are basically tutorials on very frequent problems faced by developers or way to think around problems.
.
Eh you can turn regular old sql query into a geoJSON, it’s just an extension on POSTGRES
Websocket Geospatial Analysis (turf.js)
This is only true if you have the minimum number of side effects in your app already. Many developers introduce unnecessary side effects, which is what I was referring to. On the note of returning from redux actions/middleware, I would consider this an antipattern given that it breaks assumptions that redux makes such as the store being the source of truth for it's state. If you're going to return from the middleware why use redux at all? Just call a function that fetches the data for you...
playing devil's advocate, it doesn't break any rule of hooks, and there are similarly hacky implementations of hooks in userland like useInterval
Since you've already compromised on readability you could take this further. You can drop a lot of delimiters and keys, ideally there would be nothing there but a sequence of data. If you go all the way it would look like protobuf but based on information available in the json-schema.
The reason I'm hesitant to hard-wire such functionality into the base library is that there could be **tricky exception/deviation handling** such as what to do if there is an overlap. Let's say List B is intended to select a subset of List A. But what if List B has element X that is not in A? Should it merge, error out, or what? And what if they both have element Y in common, but List B has its own values/attributes in element Y? Should the command use B's version of the details, A's version, or error-out? Does it overwrite all the detail or just detail with values? The answer would typically be application- or framework-specific. The command could have optional parameters to specify how to deal with these cases, but convoluting the base libraries to handle all these variations bloats up a language too much in my opinion. See [Worse is Better](https://en.wikipedia.org/wiki/Worse_is_better).
Do you assign null a lot? I can't think of a place where I'd use that in Javascript.
`null` is used to signify the absence of a match or hit. &gt; document.querySelector('#_') null &gt; 'foobar'.match(/\d+/) null Personally, I try to avoid creating any null-ish values. If what I do might create one of those, I handle it right there instead of passing it around. Fortunately, TS' non-nullable types made that a lot easier.
redux-saga is a pretty good example where you’ll “yield” quite often without returning anything - there’s nothing wrong with this pattern, in fact the idea that your subsequent functions don’t rely on some variable from a previous success is actually a good sign as far as portability of those functions is concerned
Liked people, liked person, liked person image, liked people image, no this cannot be!
That's the problem on leetcode. The driver is: var list = new SinglyLinkedList() For example: list.push(100); list.push(201); list.push(250); list.push(350); list.push(999); Then list.reverse(); 999 -&gt; 350 -&gt; 250-&gt;201 -&gt; 100
&gt;That's the problem on leetcode. &gt; &gt;The driver is: &gt; &gt;var list = new SinglyLinkedList() &gt; &gt;For example: &gt; &gt;list.push(100); &gt; &gt;list.push(201); &gt; &gt;list.push(250); &gt; &gt;list.push(350); &gt; &gt;list.push(999); &gt; &gt;Then list.reverse(); &gt; &gt;999 -&gt; 350 -&gt; 250-&gt;201 -&gt; 100
the output is undefined in leetcode
I don't see a good case for using null ever. I'm literally stumped thinking about anything I've written that wouldn't have to be significantly refactored to even make a place for a null. Maybe something I copied out of a book in 1998?
There are definitely a lot of good use cases for Non-relational database in general. Personally, I always take the approach of defaulting to a solid SQL solution unless I have a reason not to. A solid RDBMS is rarely "wrong" and for 99.9% of applications, it will get you far enough that by the time it matters you should have enough money and experience with the data to implement whatever the optimal solution is. Whereas you can get yourself into some trouble fairly easily with a lot of Non-RDBMS solutions if it turns out to not be the optimal tool for the job, mongo being a prime example of this. I'm sure there are situations where Mongo is just going to be the obvious choice for reasons, but if you can have a debate about it, play it safe. No-SQL solutions can definitely get you in a tough spot if you made the wrong choice. So long as you have a good RDBMS person who makes sure you have your tables all normalized you will be able to go very far with an RDBMS before running into issues and again, at that point you're probably big enough to do something about it with minimal pain.
I wish I was half as good as he is in coding. It'd probably take me weeks to do what he did in an hour. LOL
I like how he said time doesn't start when setting up the project
The 1st step in every AWS guide is literally to create a billing alert to prevent this.
Just today I used `python -v` to check the version I had installed and it printed lots of nonsense on the screen. I immediately thought I had broken packages and started investigating what could possibly be wrong. It took me a few minutes to realize that the short form of `--version` is actually `-V`.
There’s nothing inherently wrong with that.
So, what would your querySelector implementation return?
This is the best explanation and advice. RDBMS is rarely, if ever going to get you into trouble when solving a problem needing a db (unless you design your models improperly). Mongo can get you into trouble easily when used for relational data, even if modeled properly. When you design Mongo schemas you have the option to embed or reference other document models. You can't really query/filter efficiently on referenced document properties but doing so on embedded documents is very fast. But for props that change often, it's inefficient to update all the related embedded docs. If you simply have self contained documents, Mongodb is fantastic when used with mongoose. IMO this can be perfect for little serverless services you need to spin up with lambda functions. You need to add a new model or prop? Just add the schema and deploy. Queries are stupid fast (it basically has redis functionality out of the box). Lambda functions obviously auto scale so you need to make sure your db can handle it. In my case the large queries are cached on s3 as json, otherwise I doubt I'll have enough traffic for Mongo to be a bottleneck for the other queries. That being said, I'm just recently getting back into Mongo. I have not used it in prod with an extreme amount of read/writes. But it's been a pleasure to work with. Using the Serverless Framework and dbatlas I can have an api up and running in minutes. And if you use strapi cms, you can have an admin up and running in addition to the api in minutes (though you can choose Mongodb, postgres, and even other ones when starting a new proj). Small services it can be great...large/complex stuff I would not consider using it for the sole store. Just always find it a shame when it's popular to dis a tech that can add amazing value, just because it's popular
I'm fairly positive Mongodb would be considerably faster for this use case. Sure you can redis anything, but you get that out of the box with Mongo.
So what do you say? Another 60 for the rest?
The problem with using Mongo at scale isn’t necessarily speed, a lack of an enforced schema can make it particularly unattractive for building databases for inter-team use.
"Keep betting on the language that I personally am synonymous with"
 "Keep betting on the language that I personally am synonymous with. Also, here's a bunch of FUD about things that aren't Javascript."
If the sort order of the object keys were consistent, arrays would work.
This is no different than ignoring the result of any other method call. The gotcha with await is that if the promise fails to resolve, it will fail silently unless captured by a try block.
Wait... you know some of the biggest tech companies in the world use it, right? I'm sure they've identified use cases and you can read all about them.
It's be neat to provide a mapping helper as well. So if key1 got transformed to k1 then the mapping object would contain a entry with k1 as key and key1 as value. This way they can translate back the original key into the mapped key if desired. That would help systems that cares about the key. It also saves data because repeated keys would only have one mapping. But all that is just simply more optimization. Probably unnecessary but fun ya ha.
Wasn't here for the downvotes, but the reason devs hate Mongo is because it was just straight up dog shit for the first few years of its existence. They had nothing speaking for them other than a stupid amount of marketing. The software was inconsistent, insecure and, frankly, misunderstood by the ones using it. Basically the PHP of databases. Such a reputation lingers. I can't speak for today's situation. With Redis and Postgres document store I couldn't think of a strong enough reason to give it a second chance for the past 5 years or so.
If you're going this far, you may as well just make it binary. It's completely unreadable to a human.
It's just the incomplete front-end though, he didn't do anything special. Even if it may take longer than it takes him, because he is doing this as a speed-coding challenge, it wouldn't take weeks.
Interesting, in my experience (with node) it's considered an uncaught promise error and the process definitely shits out a big warning to the console
Check out the return type in the leetcode statement. They aren't looking for a SinglyLinkedList type. What are you returning in the your solution. Btw when you post code, you should post the exact code you submitted. Not something similar but different. That makes it hard to see what you might have wrong.
First of all, I must thank for your good comment it helps me a lot. Actually, I start this project to learn Electron js and other JS frameworks, most of the time i use TeamViewer to browser files in my PC remotely but the thing is my mobile device has a very small screen. that's why i make this project to the dispaly hard drive in the web page ( in responsive layout). According to your comment, i understand is there are many things i need to add to my Readme.md file. " What I'm trying to get at is, if you (the maker of the tool) can't tell people why/when they should use it, then they're going to have a difficult time figuring it out themselves. " this section inspired me a lot. Sorry for my English language mistake. I'm still learning it. Thanks,
This is why I gave up
I returned the reversed linked list. It's the last line it's return this. Is there anyway I can submit my own definition of linked list in leetcode and then add the reverse function ?
Yo! This library does a lot of cool stuff :) It aims to solve all dynamic style motions you can want, using whatever you want. All wrapped up nicely in components. Here's some examples: \- [https://codesandbox.io/s/inverse-scale-motion-exd4g](https://codesandbox.io/s/inverse-scale-motion-exd4g) \- [https://codesandbox.io/s/collapsing-answers-motion-kf05t](https://codesandbox.io/s/collapsing-answers-motion-kf05t) \- [https://codesandbox.io/s/save-answer-inline-dialog-zb5ii](https://codesandbox.io/s/save-answer-inline-dialog-zb5ii) Also check the website out: [elementmotion.com](https://elementmotion.com) &amp;#x200B; What do you think?
I read it that way as well and had to go read the comment again to realize that’s not what is said..
&gt; working with the hottest technology this week To be fair, many of us don't like it either. That's why I got out of JS
It's trivial to transform a json-schema to a protobuf.
The client must necessarily reflect, and handle, the complexity of the back end logic. This has no back end whatsoever, so naturally this took 60min.
Big caveat right there.
I will use await in such situations when: 1. The function is doing a "Write" to a database (e.g. mysql) which affects program logic after the functions. So you have to wait for it to complete to get accurate data. 2. The function contains code that needs to be completed before subsequent logic can be run but does not necessarily have to return anything. (e.g. performing calculation on a global variable) Hope this helps.
Just started using psyllium husk and this post is relevant to my life. thanks
I've never really thought about it. Probably a Nothing. But if I were just returning a falsy value, I'd definitely go with `undefined`.
The hard part is getting people to use your site....
I also do exactly this.
&gt;I don't generally use await, for I don't have much need of it. &gt; &gt;But that's just my way of doing things. ...what do you use, then, for handling asynchronous processes?
Glad I could help :) Best of luck!
ng new tinder2
I’ve gravitated away from using `map`, `filter`, `reduce`, and wholeheartedly embraced iterators. The article is filled with code I would have considered okay in 2015 but bad today. Let me break it down. Here’s the example from the article which is used to motivate the need for higher-order functions: function createListWrapperFunction(elementType) { // Straight away, we return a function. return function wrap(children) { // Inside our wrap function, we can 'see' the elementType parameter. const parent = document.createElement(elementType); return [...children].reduce((parentEl, child) =&gt; { parentEl.appendChild(child); return parentEl; }, parent); } } ## Problem 1. It might feel cool to think that your `Array.prototype.reduce` callback is pure, except it’s not, it’s calling `parentEl.appendChild` which you already have available in the closure as `parent`. There’s no reason to use `reduce` over `Array.prototype.forEach`, and using `reduce` here simply exposes you to classes of bugs like 1. forgetting to return a value from `reduce` and 2. forgetting to pass `parent` to `reduce` as an initial argument. Here is the example with `forEach` function createListWrapperFunction(elementType) { // Straight away, we return a function. return function wrap(children) { // Inside our wrap function, we can 'see' the elementType parameter. const parent = document.createElement(elementType); children = [...children]; children.forEach((child) =&gt; { parent.appendChild(child); }); return parent; } } ## Problem 2. Why are we converting children to an array? When we use the array destructuring operator (`...`) we’re calling the `Symbol.iterator` method and collecting the results in an array, so we can get rid of the middle-man and write more idiomatic 2018 javascript by using a `for-of` loop. function createListWrapperFunction(elementType) { // Straight away, we return a function. return function wrap(children) { // Inside our wrap function, we can 'see' the elementType parameter. const parent = document.createElement(elementType); for (const child of children) { parent.appendChild(child); } return parent; } } ## Problem 3. Why are we returning a function here? `createListWrapperFunction` is a horrible name and a horrible API, if you want to use it without storing the intermediate function in another variable, you have to call it twice (`createListWrapperFunction("ul")(children)`). Thanks, I hate it. Rather than returning functions I have gravitated towards naming functions the natural way, and calling `Function.prototype.bind` whenever I need to curry arguments. function wrap(elementType, children) { const parent = document.createElement(elementType); for (const child of children) { parent.appendChild(child); } return parent; } const wrapWithUl = wrap.bind(null, "ul"); Now we don’t have to deal with this awkwardly named function which returns a function, and we can still return functions via bind. I almost never use `map`, `reduce` or `filter` anymore unless it’s a one-liner, because it’s almost always less clear than using iterators, creates intermediate arrays, and is less powerful in that we can’t `break`, `return` or `throw` from within the child function. Additionally, I rarely if ever return functions from functions because it’s really difficult to name these functions, and `bind` is almost always clearer. Don’t mean to rain on your parade, just quickly jotting down some of my thoughts when reading this. You are free to write code however you want, but as a programmer who came to javascript from Clojure and Scala, I really do think you should take a closer look at iterators and `for...of` loops because they’re so much easier to understand than any callback-based API.
Absolutely, a great example of this is when you are doing multiple async tasks but you are displaying a loader so the user knows the page isn’t frozen. You don’t need a result from the async tasks but you do need to know when they are done. So you use await for the task(s) then alter your loader and display the page.
It did have issues AND like all new paradigms/fads everyone used Mongo for EVERYTHING for a hot second. Then they blamed mongo for being awful instead of their decision to use Mongo (there were devops nightmares too). If you know redis and postgres very well then it might not ever make sense...but Mongo gives you way more flexibility than redis with redis like performance. So a great option if no sql fits for those who don't know redis. Especially for spinning up personal projects. A fast scalable cheap service can be created in very little time is niche but as someone who rarely has time or drive to whip up personal projects, it's been great.
I'd argue if you use Mongo without a schema, you're doing it wrong. Can't think if any reason why you wouldn't use one.
I love your username :D
Why so serious?? I was just emphasizing that he was fast and better than i by patronizing myself.. I didn't even watch the whole thing heh but what I saw impressed me that's all
Is there a set of "standard" heatmap palettes somewhere? I have always used custom gradients over the years. But it seems that there would be some standard sets that everyone would be familiar with.
I am learning JS and your post enlightened me. What books or resources do you use to become such of prominent programmer?
I know this is a JavaScript sub and all. And I don't get me wrong, I love it. But learn a server framework that isn't JavaScript. If nothing else it will broaden how you think about things. I'd try and go for something with stronger types like c#, elixer, go, or clojure.
JS is so fragile.. That's why TS is the future.
Finally somebody said it that all this functional programming concepts aren't always better than 'traditional' programming. I do however disagree with your argumentation thaz iterators are always better. Alot of cases you're better off with using map or filter (reduce at times) considering performance is not a huge factor. It simply makes code simpler to understand BUT nobody ever should nest or return functions or whatevercoolthingconcept FP offers inside a filter of map functions because jesus christ frankly it makes things harder to understand. It's probably a good thing to know because it's for one, brain jogging and for two, you know a different approach. But I don't believe that this kind of stuff should be utilized all the time if traditonal concepts do the same and better
That's good news. RoR dated this project immensely.
Hello There we are interested about your project let us know more about it and if you need any further help with that let us know by sending us email :- bhavya.g.codesquaretechnolab@gmail.com or on skype:- live:bhavya.g.codesquaretechnola
What are your thoughts on learning RoR at all at this point. I’m working through TOP now, and I’m falling into that trap of second guessing whether or not this track is going to be worth it in the end. I know that Rails jobs exist, and for those who are good at it, they pay quite well given the dearth of applicants, but part of me still feels like I should learn JS and start jumping into frameworks.
&gt; BUT nobody ever should nest or return functions or whatevercoolthingconcept FP offers inside a filter of map functions because jesus christ frankly it makes things harder to understand. That’s what `compose` and `pipe` are for, bro.
Can you write a post about using iterators instead of functions?
Good stuff! I'm glad you started with the mini-lesson on functions being first-class citizens in JavaScript. That's the key that helps with changing how we think about h.o. functions.
Still have a soft spot for Odin since it introduced me to web development, but I still remember struggling through the RoR portion of it as a beginner
Or just write functional code in JavaScript. There’s no reason to use a different language when the tools are right there. What a stupid take.
Ok so drunk me doesn't get it... Why do I feel like this is hipster programming? What problem are we solving? Why is this cool? Thank you for taking the time to upvote and respond to my ignorant question!
I’ll write a blog eventually 💆‍♂️ In the meantime I guess I’ll just be a dummy on reddit/github issues.
It‘s just new! It’s kinda frustrating that javascript keeps changing, but I think iterators are here to stay. When I found out that I could just do: \`\`\`js for (const elem of array) { console.log(elem); } \`\`\` instead of using a for index or \`Array.prototype.forEach\`, it really felt like magic and I’ve never gone back.
Plain JavaScript...that supports non spec compliant decorators? That’s not plain JavaScript
Or better a separate debit card which only have so much.
I went through the Rails track, then learned Node, and have been working as a dev for 2 years. In retrospect, I feel that Rails is far too automagical for a beginner. There’s a lot of writing code that you don’t understand, causing things to happen and you have no idea why. I remember there was a Rails tutorial that used the phrase “no real understanding” and this became a meme between my study partner and I, because that’s how we felt 90% of the time just following the tutorial. It’s hard to appreciate the Rails conventions without learning how to do things piecemeal first, and I think the obfuscation of what’s going on under the hood is terribly difficult to wrap your head around for someone trying to learn.
Are you planning to learn just server side or full stack? If you're doing full stack, you'll need to learn JS either way and in turn, NodeJS should be an easy server side language to pick up. Job-wise, learning a framework like React would be more beneficial than spending time on RoR (unless you have jobs around you that actually use RoR of course).
That’s a fair point, though the decorators are essentially TS decorators and have a wide range of a community support. Since the decorators spec has gone back to the drawing board yet again, this is the best anyone can do if you want this kind of meta programming until the final spec solidifies and we can move forward 😩 The good part is the champions have communicated that _consumption/usage_ of decorators is unlikely to change, it’s the _definition_ that’ll be changing. So, using decorators, you should be pretty safe overall.
&gt;I went through the Rails track, then learned Node, and have been working as a dev for 2 years. In retrospect, I feel that Rails is far too automagical for a beginner. I started programming with Rails as well. On the contrary, I feel it's one of the best ways to learn to build a website. It has everything you need out of the box (simple database queries, migrations, a nice way to write a backend...). It obviously obfuscates most of what's happening, but in retrospective, if I had to learn Node, then SQL queries, then build my own migration system, choose a test suite and a templating system, I probably never have launched my website. Yet, here I am 10 years later knowing how to build a website from scratch with Node/Go. &amp;#x200B; I'd say if you want to learn web programming, start with HTML / CSS and Vanilla Javascript. Then, learn Ruby and basic algorithmic and try Rails.
The leetcode test wants you to return a node*, not a reference to the linked list class. You have to comply with their spec. Use their node definition, it's like yours, just named differently.
Hi /u/bosslevel_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/epompa10, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I’m planning to go full-stack, as most of what I do now is front-end. HTML/CSS/Vanilla JS (though I’m not at all proficient at that last one yet). I’ve seen listings for Rails jobs in Chicago, and they pay pretty well. It just seems like cooler things are being made with React, Node, Vue, etc. Thanks for the suggestion. I feel I may need to listen to the part of me that keeps glancing over at React as I get closer to the Ruby section of TOP.
If you don’t mind my asking, how long did it take you to get through the Rails track?
Well it’s not meant to be user readable. It’s meant to save $.00000000002794 per request
Sure, you can make them consistent. Use the order from schema or just sort them.
Lol
And you could save that extra _teeny tiny bit_ by going full binary!
I'm not sure I follow. Do you mean that if it neither resolves or rejects? An error thrown in an awaited function will throw an error in the parent async function whether there's a try block or not. If the awaited function doesn't ever resolve or reject, then that function never proceeds, and the program will exit if that's the only function in the call stack. Having a try/catch block won't change that behaviour, as it's not an exception.
Perhaps unintended, but your code comes off as a bit harsh to me as you are calling other people's code bad, outdated and non-idiomatic in a non-requested code review. Because JavaScript developers come from a plethora of other languages and are on previous, current and future versions of the ES spec, I don't think you can say there is a single way of writing idiomatic JavaScript. Whereas some people prefer a functional style with higher order functions, function composition, recursion and abstract data types, others enjoy a more imperative approach with iterators, objects and state. Most people are in the middle and use the full spectrum available to them -- even though not always as clean, correct or pure as one would like. That being said, I agree, the examples in the post are more difficult to understand and less "pure" from a purely function perspective than necessary. However, still explains higher order functions in a way. For improvement, I don't think adopting an imperative style is necessary. Breaking up the logic in smaller, functions using function composition would help a lot. For people interested in FP in JS, I'd recommend looking at Ramda.js for learning functional composition and Folktale for abstract data types. It might also be interesting to look at the ES proposals for pipelines, composition, partial application and pattern matching. FP will one day be a bit more bearable in JS.
I could but generally I don't really find much of a need for running an async function just for its effects, the whole point of async is you need the code to wait for something to resolve.
It's not about saving a small fraction of traffic. The use case is more to save space in limited environments. For example when data is stored in the browser, there are low quotas down to only 5mb, depending on the browser. &amp;#x200B; [https://www.html5rocks.com/en/tutorials/offline/quota-research/](https://www.html5rocks.com/en/tutorials/offline/quota-research/)
The compression-table has both-side mappings of key1 -&gt; k1 and k1 -&gt; key1. Also there are functions to cmopress and decompress the object-paths. &amp;#x200B; [https://github.com/pubkey/jsonschema-key-compression?v=1.0.2#compressedpath](https://github.com/pubkey/jsonschema-key-compression?v=1.0.2#compressedpath)
This would only work if all fields are required. If you have optional fields, a single array would not contain enough information to know which attribute is missing.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/learn_javascript] [Vue custom form generator, support for generating forms using Json](https://www.reddit.com/r/Learn_JavaScript/comments/c86anm/vue_custom_form_generator_support_for_generating/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I don't understand what benefit `for x of y` brings over `forEach`. It's more characters and less performant at that to the tune of ~50% (https://jsperf.com/foreach-vs-const-of-vs-map). It doesn't even make things more readable from an English language point of view. I can understand not wanting to use map (I have a preference for it, but it's not the right tool for the job in every case) even if you take out the performance loss - `map`, in English, doesn't mean anything close to what it means in JS. I can definitely understand not using traditional `for` since the syntax of it is a horrible mess and it doesn't directly expose the item you want in a variable unless you create that variable yourself from `items[i]`.
[Parcel](https://parceljs.org) might be a good option for this. You can use it to bundle all kinds of things without having to mess with configuration files.
Try this one: [https://github.com/hodgef/js-library-boilerplate-basic](https://github.com/hodgef/js-library-boilerplate-basic)
[removed]
Thanks, I'm going to check them out!
You could (in case at least one optional element is missing) append a bit mask to the end of the array which represents the missing/existing optional elements.
\+1 for Parcel.
Nice and simple tutorial!
I don't see any information about databases. If you want to learn back end. Databases knowledge is a must!
I’m not so sure, we’d have to test it. Our user base peaks at only 200, so we don’t have to worry about a few ms. But Postgres also has functions to return pure geoJSON which should be pretty fast. Not sure how the speed compares with mongo though.
webpack does this almost ootb when you combine it with either babel or typescript. you now have modules, npm imports, etc.
I mean that if a promise rejects, async doesn't throw an exception ... unless you wrap it in a try block, in which case a rejection is handled by a catch.
Hint: 'return new Promise'
Rails is a great intro to programming because it rewards you with results early on. It's still a joy to work with if you are building any kind of crud app. I'd take Activerecord over the Django orm any day of the week. You still have to learn JS though because rails is a web technology and uses it on the front end
Hi /u/alexontheweb, this post was removed because your title included a URL. Please use the `submit a new link` option with a descriptive title. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Look a little closer baby
[removed]
Thanks for the details reply – very interesting thoughts. I’m interested to see canvas support :)
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
Very neat idea. I'll give it a try.
Lol
`replace(/\\&lt;/g, '\&amp;lt;')`
It is really frightening how much power owning a famous NPM package gives you
He added the option of using an environment variable to suppress it. I think it's ADBLOCK.
Ugh, I have those who send me an unsolicited Linkedin invitation and always report them, hope your bot won't reach me ;)
Credit where credit is due, but clogging the terminal and begging for patreons is another thing. There are other channels and imo the CLI should not be the place to demand your credit or take benefit from. &amp;#x200B; Yes we are benefiting from his package, people should be more thankful and should not take these things for granted, yet it doesn't justify to do it. A single package might be fine, but enjoy debugging when there is 500+ packages praising their sites or other.
Not at all! The Rails section took me about 5 weeks of full-time study. I spent 2 weeks on the final project Facebook clone. Full disclosure, while working on the TOP curriculum I also chose to join the immersive bootcamp created by its founder, so I ended up doing 3 months of intense guided study before job hunting for 2 months. I thought the TOP reading material was on par with the bootcamp material, but of course having instructors available day and night made a huge difference. My study partner continued to self learn and job hunt after TOP, and was also able to find a job after about 7 months.
Learning Rails in 2019 is like learning how to operate a steam engine.
Oh man, take it easy! Take the JS course in Codeacademy. Then I would recommend the ES6 course by Wes Bos. AFTER taking these 2 courses, take React. For React you have to know how ES6 works, and if you want to know ES6, you have to know the basics of JS. The JS cosdacademy course is a great start, you’ll learn the basics of object programming. Don’t worry, this takes time! Just enjoy the ride. PS. Wes Bos has a React course, still, I would take it after the first 2 courses. If you really want to understand how React works, that’s required.
I love your comment thank you stranger
Didn't we just have a conversation in this sub a week or so ago extolling the virtues of jamming up the log file with job advertising?
Thank you for this
https://javascript30.com This is a vanilla js course from wes bos . Try this i really liked it . For es6 and some advanced js concepts (promises , async await ,etc) there are many tutorial for these but on nodejs . You may want to take a look at that just neglect the nodejs related stuff.
I am doing it actually and this exercise with my questions which I posted here, is number 1 from there
Thanks for the info!
I did take the whole JS course in Codecademy actually and now I'm doing the ES6 course by Wes Bos - that's actually in the image which I posted here, it's the first one and I'm already struggling
Just wait until you begin seeing climate change activism and whatnot. You'll be pining for the halcyon days then.
Thank You. If you have any issues or feedback. Feel free to send a message
[https://github.com/lukebertram/jsdj](https://github.com/lukebertram/jsdj)
Power? He has a post-install message, which you can ignore.
Question 1: `const audio = document.querySelector(`audio[data-key='${e.keyCode}');` This is a data attribute selector, used in CSS too. You can learn more about it here: https://css-tricks.com/almanac/selectors/ This is selecting an audio element with a data attribute "data-key" that has a value of a JS object property (The event listener property, which in this case is the "key" that was pressed). Question 2: `e.Keycode` We are getting the event; The event is an "object", and this object has a "Keycode" property with a value. You can see what's inside this event object by doing console log to it. Ex: console.log(e) This is how you know what key was pressed. Every key in your keyboard has a code assigned. Question 3: `e.target.classList.` Because this is a default JS property. You can read more about it here: https://developer.mozilla.org/en-US/docs/Web/API/Element/classList What I mean with default is that, it's a property that Wes Bos didn't come up with, that's how JS works. Question 4: `e.propertyName !-- 'transform'` Same as Question 2. if you do a console.log(e), you'll see all properties and methods inside the e object. Question 5: `e.target.classList.remove('playing')` Correct, we are remove the 'playing' class from classList. You can see what's inside classList by doing `console.log(e.target.classList)`
&gt;https://truffleframework.com/ 502 Bad Gateway ???
AJAX is for frontend, and your code look like Node, which is backend. I think the data event returns a Buffer chunk, and you need to concat the chunks and convert to a string. You might have an easier time using a higher-level HTTP request library like Axios. If you post a sample of the data returned by the API, it would be easier for someone to help you parse it. You can use something like Insomnia or Postman to make requests for testing.
Thank you soo much. This is not what I asked for but something that I needed :D
Hey buddy, you need some reference material. e.keycode is referencing the keycode property on the event object. Use MDN (Mozilla developer network) as a great site that will give you the background you need. Basically whenever you are stuck on something search “your issue MDN” ex ( e.keycode MDN) and follow what MDN offers. It will give you tons of background on the DOM.
Why don't you use create-react-app? Just replace the index.js file with your own content and you are good to go...
for-of is nifty sometimes, but it imo you can't get any simpler than `array.forEach(console.log)` . Swap out for map if you want less text. And let your callback ignore the undesired arguments.
Right, because he only used a console.log. If he added something destructive in the post install script, in a few seconds thousands of computers would instantly download and execute it.
This is something I never thought of but sounds cool.
deskPicker doesn't take any parameters, so what's rhe point if passing desk?
Are you still receiving this error? It appears to work on my end.
Haha sorry I should have clarified. Someone else had already linked to Parcel (which is great and should definitely be your go-to option), so I was trying to provide an alternative if you still wanted to rely explicitly on Babel and webpack, but not do the initial setup.
This is a sample response shown in node, I wanted to limit it to, for example just the title, by doing output.items[0].title but is does not work :( { "code":"OK", "total":1, "offset":0, "items":[ { "ean":"0651986701933", "title":"Too Faced Hangover 3-in-1 Replenishing Primer &amp; Setting Spray", "description":"What it is: A weightless, three-in-one coconut water-infused mist that primes, sets, and refreshes makeup while it helps keep skin hydrated. What it does: This super hydrating, multitasking mist can be used as a primer before makeup, a setting spray to keep makeup in place all day, and a mid-day refresher anytime your skin needs a boost, serving as the perfect cure for a beauty hangover. Its unique blend of coconut water, probiotic-based ingredients, and skin revivers work together to hydrate and brighten ...", "upc":"651986701933", "brand":"TOO FACED", "model":"45346830018", "color":"Burgundy", "size":"", "dimension":"", "weight":"", "currency":"", "lowest_recorded_price":11.9, "highest_recorded_price":72.94, "images":[ "https://s7d9.scene7.com/is/image/JCPenney/DP0619201718003516M?wid=800&amp;hei=800&amp;op_sharpen=1", "https://slimages.macysassets.com/is/image/MCY/products/1/optimized/8716481_fpx.tif?wid=300&amp;fmt=jpeg&amp;qlt=100", "https://n.nordstrommedia.com/id/sr3/d5e51a9b-9411-43d8-95d4-2349e3e7c2be.jpeg", "https://images.qvc.com/is/image/a/10/a416810.001?$uslarge$" ], "offers":[ { "merchant":"QVC.com", "domain":"qvc.com", "title":"Too Faced Hangover Replenishing Setting Spray", "currency":"", "list_price":"", "price":32, "shipping":"3.00", "condition":"New", "availability":"", "link":"http://www.upcitemdb.com/norob/alink/?id=w2u233t233439494v2&amp;tid=1&amp;seq=1562077123&amp;plt=94eb48c82d94f0d55c44ff258d73532c", "updated_t":1560237148 }, { "merchant":"NORDSTROM.com", "domain":"nordstrom.com", "title":"Too Faced Hangover Setting Spray, Size 4 oz - No Color", "currency":"", "list_price":"", "price":32, "shipping":"Free Shipping", "condition":"New", "availability":"Out of Stock", "link":"http://www.upcitemdb.com/norob/alink/?id=v2x253v243236464t2&amp;tid=1&amp;seq=1562077123&amp;plt=6146c7a084a0710827eec96666170ebc", "updated_t":1561908267 }, { "merchant":"Macy's", "domain":"macys.com", "title":"Too Faced Hangover 3-In-1 Replenishing Primer &amp; Setting Spray", "currency":"", "list_price":"", "price":32, "shipping":"10.95", "condition":"New", "availability":"", "link":"http://www.upcitemdb.com/norob/alink/?id=v2t243232313f454z2&amp;tid=1&amp;seq=1562077123&amp;plt=8bb9fccde066206ed3531213442ce8b8", "updated_t":1561993193 }, { "merchant":"JCPenney", "domain":"jcpenney.com", "title":"Too Faced Hangover 3-in-1 Replenishing Primer &amp; Setting Spray", "currency":"", "list_price":"", "price":32, "shipping":"", "condition":"New", "availability":"", "link":"http://www.upcitemdb.com/norob/alink/?id=v2v233z2v2y294a4z2&amp;tid=1&amp;seq=1562077123&amp;plt=9c4fd8966f1e585a9596d1ae4384c0c4", "updated_t":1536268712 } ], "elid":"143143650228" } ] }
Hi /u/BeginningHunter, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/giuseppe58, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/muchmadeup, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I don't think it's morally questionably to staple your resume to something valuable you're giving away for free.
It feels like he talks about functional programming despite literally never using a functional programming language. Like disregarding the code itself, in which FP language is it acceptable to name a function `createListWrapperFunction`? That's probably the most imperative name you could come up with. Call it `wrapWith` or `wrapIn` or something like that, and chill with the weird attempt at currying. I just feel like if you're gonna have a blog about functional programming in JavaScript, you should probably get good at functional programming first, otherwise you're just adding noise and making it harder for everyone else to learn. Sorry for being overly critical but the whole thing just comes off as an amateur trying to sound more authoritative than they really are
You need to return deskPicker in your if (and why are you passing desk in?).
Drama on github, a couple months ago: https://github.com/zloirock/core-js/issues/548
I'm surprised this guy is getting downvoted so hard. Ads are annoying. Self promotion is annoying.
He said *imo.*
I personally like Rollup for the same purposes: https://rollupjs.org/guide/en/
This would have been so exciting 8 years ago ... !
Sorry, that had a typo. I meant this code: const desks = [1, 2, 3, 4, 5, 6, 8, 9, 10] const deskPicker = () =&gt; { const desk = Math.floor(Math.random() * 10 + 1) if (desks.includes(desk)) { deskPicker() } else return desk } let pickedDesk = deskPicker() console.log(pickedDesk) I tried it with a parameter, but I got a maximum call stack exceeded range error: const desks = [1, 2, 3, 4, 5, 6, 8, 9, 10] const randomDesk = Math.floor(Math.random() * 10 + 1) const deskPicker = (desk) =&gt; { if (desks.includes(desk)) { deskPicker(desk) } else return desk } let pickedDesk = deskPicker(randomDesk) console.log(pickedDesk) and still don't know why it returns undefined.
&gt;Thanks! Its always the simple ones.
I wouldn't bother if I were you, unless it is something that particularly excites you. Rails is in decline, so you'll find yourself competing with experienced Rails devs for the ever decreasing jobs. Node, Python, PHP, Java, C#, Scala, Go are safer options IMHO
If Ruby on Rails appeals to you give the Elixir's Phoenix framework a look, it has a similar look to Ruby on Rails, is incredibly powerful (performance and scalability) and easy to get started with.
I have no idea what the NEAT algorithm is, and the short README file doesn't sell it well enough to me to make me google what it means
I would still probably recommend forEach in your final implementation since it's a lot more natural unless you come from like a c++ background or something, but yeah this pretty much echos my sentiments. Fundamentally, you're working with a very imperative API, which means that you're going to have to write imperative code around it. Fucking around with reduce here just makes your code more complex and doesn't abstract out the fact that you're just repeatedly append children to the node. If there isn't a meaningful abstraction, don't bother making an abstraction I would probably end up with something like function wrapIn(children, parent) { children.forEach(child =&gt; parent.appendChild(child)) return parent } const wrapInDiv = children =&gt; wrapIn(children, document.createElement('div'))
Hey how do I convert bytes to bits? say I have payload in hexadecimal i need to access one character/byte from the payload and perform bitwise operations. //code// var payload = "100006351545F454CE"; if (payload[0] == 16){ ... }
&gt;Perhaps unintended, but your code comes off as a bit harsh to me as you are calling other people's code bad, outdated and non-idiomatic in a non-requested code review. &amp;#x200B; Fair point, my bad
You know what I have actually seen people use this in production. Very annoying. Their api is a hell. As output is always shortened keys. Unreadable without docs/front end code. Fun project, please do not use it seriously. It’s not worth it.
I don't think it's morally or ethically wrong to do that. But I do think it's annoying to many people and it wouldn't be how I'd want to advertise my brand. When looking for a job, annoying the community you'd work with seems like a really bad tactic. So while I wouldn't do it myself, I don't really fault him for doing it. You can even just set your log levels to "warn" (which seems like a good setting anyhow) to make the messages disappear if they're bothering you.
Hi /u/rob_moose, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/JessePinkmanInDaHous, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
If you're getting downvotes, these days it typically means you're right.
I ran the test you showed me and on safari `for...of` is the fastest. Performance changes when you use transpiler but for the most part, `for...of` is pretty fast. As far as benefits you get: - one less function closure - the ability to break out of loops early - no confusing (item, index, array) arguments which almost always makes it to javascript "wat" talks when someone inevitably maps `parseInt` over an array of strings - ability to define custom iterators using the iterator protocol/generators. - the ability to iterate lazily using `for...of`, `yield` and generators. Deprecate `forEach` IMO.
Yeah I didn't really had the time to write it well because I'm also a student &amp;#x200B; I will try to update it soon though &amp;#x200B; Thanks for the feedback
Take it slow, start from the fundamentals. Learn C firsts. Then learn Java. Once you understand programming fundamentals, interpreted languages like JavaScript will be much easier to understand.
Sorry to sound harsh, but there is so much stuff going on and trying to get our attention that you really need to spend some effort in trying to get people excited about what you do!
I mean it's better than a popup that shows after scrolling &gt;600px on a "how to" blog post...
&gt;(https://github.com/zloirock they can choose not to use his packages or any packages that used his packages. Go ahead and write their own code.
No one seem to realise that the reason they see so much messages is because 99% of their dependencies depend on this guy. Anyone who complain should just write his own "core-js" and get it over with. If you're too lazy to write your own and decide to use the work of someone else, then you shouldn't complain.
Ok, "morally" probably wasn't the correct word here. However, I don't think anyone would be happy seeing random popup alerts on the web saying: "THIS WEBSITE IS POWDERED BY JQUERY, GO TO HTTP://JAKE.WEARY.ME TO SUPPORT" The internet is held together by a few thousand more people's effort, seeing ads like this paint quite a noisy future.
Thanks for good tutorial. What can be improved: add links to specs for apis you are using.
This is some internet history happening right there. i didn't know of this, thanks for showing.
This has already happened atleast once, right? Or am I remembering things wrong?
You are right I just didn't really had the time &amp;#x200B; I am going to put some badges probably and add a LOT more explanation soon
&gt; Because this part is so trivial I didn’t have to write any unit tests for it. Trivial or not, unit tests are meant to ensure your code is functioning as you intended and to keep others from breaking that core functionality if the method is refactored. There are plenty of valid arguments why you might choose to skip a unit test, how trivial a method is really shouldn’t be one. If the method is trivial to write, so is the test. Honestly expected a bit more from Wix.
&gt;This is a sample response shown in node, I wanted to limit it to, for example just the title, by doing output.items[0].title but is does not work :( Assuming output is the parsed JSON object, it should work. Check that output is actually that object.
Just tried again, seems to work for now :)
[removed]
Oh yeah, multiple times: [https://www.theregister.co.uk/2018/07/12/npm\_eslint/](https://www.theregister.co.uk/2018/07/12/npm_eslint/)
this is highly dependent on your framework. Details?
&gt;The internet is held together by a few thousand more people's effort, seeing ads like this paint quite a noisy future. Lol, did you just wake up from a coma?
nevermind I think it was broken earlier
you can also just use log-level warn.
I'm not using it, however, imagine you use this package and suddenly you start seeing spammy self-promotion in your own logs. Now you're bugged and have to stop what you're doing and either mute the logs, or rewrite code to use another package, OR write your own? How about we just don't turn packages into begging platforms-- we have enough of those already.
This.
The ads are one thing, but it looks like these dopey logs that are begging people for money are literally breaking projects. Can't believe people bending over backwards in this thread defending advertisements in open source software.
Yes
How?
If I'm using it professionally, we usually have a team that will liaise with the original developers to purchase license for a "clean" set of code. If I'm using it to build my hobby projects, I don't really care about the commit message. If we can't do the above, I will probably write it from scratch.
.
I'm not saying it's good or bad, just that there was a conversation that took place and the gist was "it's good because it's not intrusive like big assed banner ads on the web." This week the wind might be blowing the other way.
How's your blog currently set up? From what I can gather, reading your post, you have 150+ individual static HTML documents, each being a single blog post. There's no behind-the-scenes templating or anything like that (if there was, you could add the button to the template), it's just a simple, old-school static webpage. If so, you're looking for a way to automate the process of adding said button to every single one of these 150+ HTML documents - again this is what I can gather from what you've written. This kind of automation can be done in a number of ways, one of which could be a small script written in JavaScript - or any other language, really. Depending on the complexity of your HTML documents, you could probably get away with doing a simple search-and-replace using `sed`, so long as there's a consistent string of text which appears where you intend to insert your button - otherwise you'd have to do some HTML parsing. It all comes down to how your blog posts markup look, really - give me an example and I'll see if I can make a regular expression for it. One way to avoid this problem in the future, would be by using some sort of templating system, such that your blog content and it's template aren't dependent upon each other. If you need your site to be static (pure HTML, no backend) then you can look into a static site generator like [Hugo](https://gohugo.io/) or [Jekyll](https://jekyllrb.com/).
Both sublime text and vs code have multi file, find-and-replace functions that could do this while limiting it to a specific scope of folders or file names (however you keep your blog posts organized). The classic solution to this would be a command line script. Here’s a stackoverflow answer that seems to be somewhat related. https://stackoverflow.com/questions/41735572/how-to-bulk-add-text-to-beginning-and-ending-of-multiple-files#41736722
Frankly I prefer webpack over parcel for a variety of reasons, not least because I’m used to it.
There's this: **[Project Foundation](https://github.com/gmattie/Project-Foundation)**
Hi /u/Danish_Kalim, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I would recommend getting into frameworks and databases, it’s a bit of a task to learn it, but it’s worth it. It makes it so you can edit one page and the results are instantly spread across all relevant pages.
you assume so many things
Add a script to your layout file. Check if it's a blog page from url, then add html via dom api. Alternatively, you could take some time to ask better questions if you want better answers.
Thank you for this. I'm self-learning web dev as I'm unable to go back to my studies. I've done the whole portion of HTML/CSS on freeCodeCamp and am not happy with what I've learnt. There are so many gaps in the course. I've also been doing the LinkedIn Learning Web Developer Learning Path, however this has also left many questions answered. I'm about to start Java on both courses above, but going to add doing this course as well hoping that there won't be so many gaps in my knowledge. If there's anything else that you can suggest, please do so.
Thank you, I will add the links to the article when I get a chance later today
Hi /u/noop_nadler, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
So do you. I worked with the information given.
I think the best way to teach yourself is simply by attempting to take on small,doable, but slightly challenging projects. You learn so much more by trying to figure stuff out on your own and if you don’t understand something just research. You just have to want to do it. Get inspiration from other websites and figure out how features/designs can be done.
Not meaning to discount these arguments but they still remain an abstract talk without specific examples. Any examples of concrete cases where these benefits can be properly evaluated vs the (considerable) overheads of installing, learning and maintaining another language?
Hi /u/DistinguishableSock, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It is a JS sub here, so what about comparing both langs to JS? :)
Yes, I would. That is all. :)
Awesome! thanks a lot.
Yeah, exactly. Since this is JavaScript, not Java, this thread is kind of off topic. Maybe the topic creator doesn't know the difference between the two languages or that they're completely different languages.
Would love it, to do in solo or as traditional hacks with a team of N people?
Why can’t it be deconstructed?
Ah again someone from HR who doesn’t know the difference between Java and Javascript 🤣
For starters I'm thinking solo, but if there are no issues I'm 100% open to teams too.
What's this have to do with Javascript?
I created a project like this a little while ago with React and Tone.js, its in a bit of a rough shape (perhaps an understatement lol) but most of the basic functionality is there. https://github.com/Adam-Campbell/ReactDAW Live demo here: https://react-daw.netlify.com/
I do think the article is teaching bad habits because it is doing mutation inside a reduce. That's a big no-no. Unfortunately, solutions to avoid what was done in example 1 include another loop because JS functional development is not lazy. I do not think iterators are the end-all be-all that the OP proclaims though.
Yeah, the blatant DOM manipulation in the example functions really hammers home the lack of functional knowledge.
This would be an awesome way to practice. I'm in!
Fair points. Especially the `parseInt` one - most people forget about the radix (though, hopefully more know about it now with the recent articles), and breaking out of loops early. I'd argue that having the option to have the item, index and array available but not needing them is more useful, but each to their own. It'd be nice if a destructuring-like syntax was available in the event you only need `item` and `array`, or even just `index`, was available for it. I'd also argue that the days of generators have passed with promises and async-await being commonplace now. Finally, unless I've overlooked something, you still have to keep a separate array variable if you're wanting to return results, whereas the function equivalents like `forEach` and `map` can implicitly return their results.
I figured it out. Thanks everyone!
Briefly looking at the code, `useStore` returns a Proxy, not a regular object. Presumably some of the fancy Proxy stuff breaks if you destructure it?
The overall concern is that `npm install` will [end up looking like a textual version of this](https://i.imgur.com/BnAX4nS.jpg).
It's using Proxies behind the scenes - which kind of need an object to attach onto `obj.prop = 'stuff'` the proxy will see that you are trying to set it on an object that (may not) have it defined yet - and can keep track of it. If you pull the value off of it - it's no longer part of the proxy/object. &amp;#x200B; Proxies are hard to properly polyfill in older browsers - while many modern JS features can be polyfilled/transpiled/etc - Proxies can't, and the current polyfills have some limitations (such as need to define all of the possible properties up front - adding new reactive ones later needs a few extra steps), which is why you don't see them used as often as some of the other newer language features. &amp;#x200B; Modern browsers support them (Chrome, FireFox, Edge+, Safari 10+) - so if those are your only target this is fine to use. But if you need to target older browsers - might not be the best fit. &amp;#x200B; This is using useState under the hood - so when you do `obj.prop = value` the proxy is calling setState which is what lets React keep track of things &amp;#x200B; `set (target, key, value) {` `let status = Reflect.set(target, key, value); // default behavior` `if (target[cache] &amp;&amp; target[cache][key]) {` `delete target[cache][key];` `}` `setStore(storeCopy); // call 'setStore' with the updated 'storeCopy' --- and is a state setter of the setState hook` `return status;` `};` &amp;#x200B; It's kind of neat - but not sure if the value of being able to directly \`mutate\` an object instead of calling a setter function is worth the tradeoffs - common patterns that people use frequently like destructuring don't work, limited polyfill/older browser support.
a panel of judges? :D
Why does it use proxies over simple getters/setters?
Totally into!
Count me in :)
Sounds like an amazing idea!
Hi /u/daveonions, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dernise, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/geongeorgek, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/maaqoul, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Mnock419, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/devolveinc, this post was removed. Well, this is awkward. This subreddit is for **javascript**, which is different than **Java**. In other words, `javascript !== java`. Maybe try one of these instead: * /r/Java * /r/JavaHelp * /r/LearnJava Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Do you think TOP helped much with landing a job? Also, did you have any qualifications when you were job hunting, or did you just have TOP and personal projects?
They do teach database, it should be under the full stack JavaScript, and the RoR path as well.
not the library author - so just taking a guess here. &amp;#x200B; With getters/setters - you need to define a getter/setter for every property on the object - where with Proxies, you can just write a single 'trap' - and any property access (read/write) will go through it. &amp;#x200B; With a little bit of effort, could probably make a version that doesn't use Proxies behind the scenes but keeps the same consumer-facing API. Would need to walk through all of the properties on the Initial state, then create a 'reactive' version of it using \`Object.defineProperty\` to create the getters/setters for it - which is basically what Vue 2.x does for it's reactivity system (+ some extra stuff to keep track of which properties depend on others so you can have things like computed fields / etc)
I'd be up for this
Nonsense. Any modern code editor can do these conversions automatically. This is not a case for tabs.
i recently use VS Code a lot, and these kinds of conversions are a total pain sure, once you trigger it via the UI, the conversion itself is "automatic" — but you have to open a file, tell it to convert to tabs, navigate that little dialog, then do your work, and finally reconvert the file to spaces before commit and yeah, they can go deep and find/write custom local git smudge filters to automate some stuff like this, but this isn't a fun or polite rabbit hole to ask them to go down for my perceived "consistency" — these guys need to get some actual work done too we ask them to run a mile because we don't want to lift a finger
Yes, that's the idea since you're already passing default props. Either way it seems like mobx lite. Might be good for simple apps, but then setState tends to be pretty clean for those too.
You heard it here, cripples! Who gives a fuck about just doing things a way that works for everyone because you can take a bunch of extra steps to cater to this guys desires instead of your physical limitations!
He does not deserve your upvotes he sounds like a fucking asshole about it
Like indentation size, you don't know what editor other coders use and you don't get to choose for them.
Totally
It's not just a "desire", there are good technical reasons to prefer spaces. You also have to consider all of the existing codebases that use spaces and aren't going to change, for historical reasons. I'm not sure what guilting OP is supposed to accomplish when there are better solutions, like instead fixing the code editors to make the conversion easier.
Good read
Converting it, then checking in or having to convert back in order to comply with the company's standard is a broken workflow. The first will make the diff functionality go haywire, while the second is prone for human error and thus defaults to problem one. And you dont want to set up all your gits with hooks that try to automatically replace all tabs to spaces in case skmeone forgot. Because someone could forget implementing the hook when setting up a new repo. So, all in all -- you need a standard way of doing things which should work uniformly for all people. And it seems like Tabs are the way to go for accessibility reasons. Plus: web needs tabs. Immediately. And configuration options for them, like editors.
Tabs. Because that's what they are for! We even have special key for it on the keyboard.
&gt;It's not just a "desire", there are good technical reasons to prefer spaces. &amp;#x200B; No there's not &amp;#x200B; &gt;You also have to consider all of the existing codebases that use spaces and aren't going to change, for historical reasons &amp;#x200B; Ok.... Considered..... But still going to do the right thing going forward
And what are these good technical reasons
omg this is such a breath of fresh air! In most of the other subreddits I frequent he would have been upvoted simply for his snarky attitude and someone like you would be downvoted to oblivion. What the hell is going on with reddit these days?
Don't fold so fast, and certainly don't upvote. You laid out in your *own post* that IDEs are only a fraction of the tools used to view code. I have to read code on GitHub, GitLab, blogs, in TFS on the web, in TFS in VS, in whatever the hell you call VS for Mac's stuff, in VSCode, and so on. All of those places have their own configurations, and not all of them will automatically convert tabs to spaces or back. Example: tell me right now how to configure TFS on the web to show you a Blame view with all spaces converted to tabs. Do any Git clients do this? The counter-argument is literally, "I shouldn't have to change my preferences because someone with disabilities wants to work with me. They should just work harder." I don't think you'd have made this post if you so readily agreed, "Oh yeah, shit, why should *I* have to do the work to support *them*?"
&gt;This is not a case for tabs. &amp;#x200B; What? Yes it is. One of the big points of tabs is controlling tab width. Just because you have a shit hack that involves your editor munging files, doesn't mean it negates the reason.
Sometimes its warranted, sometimes it isn't. People dont choose to have vision problems... but no, can't inconvenience someone and their poor little spaces
I'm really not sure why the whole world has, for the most part, switched to spaces, relatively recently. Using tabs 100% solves the entire "i like 4 spaces" "i like 8 spaces" "i like 1 space" "i like 200 spaces" problem. I have not come across any compelling reason, other than "gerrit shows all tabs as giant red error looking sections"
&gt; You also have to consider all of the existing codebases that use spaces and aren't going to change, for historical reasons. If I'm not going to touch a codebase, how does it's tab/space choice matter to me?
Bullshit
Spaces. This is a tooling problem.
Tabs for LIFE!
Hi /u/jay-random, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thank you for all your suggestion. I have found a way and updated the library. Also now it's available via cdn and I have updated the project structure
Dang, I hadn't thought about that before. Makes a lot of sense though. Here's hoping that maybe github and other source code previewers will get better at rendering these.
Look, I'm definitely a fucking asshole, but that's got nothing to fucking do with this. Tabs vs. Spaces is a solved problem. If someone wants a setting that is different than the team style, set your preferred tab style (tabs, spaces, count) and `editor.detectIndentation` to false. Then, with format on save enabled, just hit ctrl+s after opening a file. Your repo should have a hook to format the code to team style upon check-in. This really isn't that hard. Fuck, make your team style 8 tabs for all I fucking care. The point is that it's not an accessibility issue, and pointing that out doesn't make anyone a fucking asshole. Now get the fuck out of here, prick.
It's a solved problem. Tab settings + detectIndentation=false + format on save. No special configuration or tooling required. Except for automatic formatting on commit, but you should be doing that anyway if you have multiple people committing code.
&gt; No there's not After researching it some, yeah there isn't as good of an argument for spaces as I initially understood.
It matters if you need to read or use a chunk of it, for your own code.
History of bad development tools. Really. Long ago (1990), we still had source control (SourceSafe, CVS, and a few others), but some source control tools really didn't like tabs. No clue why. But the lore of the day was "tabs will corrupt source control"...really, it was that dumb back then. Plus the tooling/IDEs were not quite as good. You couldn't always set the indentation of a tab, and people were still fussy about their code looking "exactly the same everywhere". Their code was a work of art, you had to experience it the same way everywhere! (I've listened to similar diatribes from authors who hate digital books because they like the smell of books and don't care about your opinion on the matter -- paper book or nothing!).
There are enough polyfill-able traps to make Proxies a viable implementation of a reactive data store. https://github.com/GoogleChrome/proxy-polyfill
What's assholish about stating opinion? Has he called anyone names or something? You guys are overly sensitive even by my standards.... and I'm really sensitive.
If you are programming in 2019, you should have an editor that can handle indentation. If specific indentation is required for you to do your job and you choose to use an editor that can't accommodate your needs, I can definitely tell you to use a different code editor. Not sure what point you thought you were making, but you have failed spectacularly.
How does it feel to be a manifestation of what is considered the plague of the coding industry?
Wait what? You should NOT be converting tabs to spaces or vice-versa or you'll end up with a whole-file diff if you forget to convert back... Also, if you actually try setting up local auto-conversion, you'll quickly notice that some things become completely obnoxious (e.g. eslint squiggly lines everywhere) and others end up in an unusable configuration (e.g. prettier on save)
And don't forget that some of those l33t coders who liked to go bare metal plain text editor to prove how hardcore they were needed spaces as a way to force indentation. One of the few satisfactions of being in charge is the ability to say "fuck you, tabs is what we use".
The tab key inserts 4 spaces automatically... What maniac came up with that?
No.
You are wrong. You're welcome to have your opinion, but that doesn't make it right. Tabs vs. Spaces is a solved problem. Use whichever you like, but it literally does not matter.
Wow! I never realized that. I will never again use spaces. (I hated Go for using tabs but it seems they were onto something.)
I think this is less an argument for one over the other, and more of an example as to why nobody's conclusions will always work, all of the time, for everybody. Your team's style guide should be tailored to meet your team's needs. The point is to make the *team* efficient, after all. If tabs or spaces won't make much of a difference to most people on your team, but can make a huge difference for two team members, then it makes absolute sense to concede relative style guide rules to them. I'm visually impaired myself and have asked my team to follow a few different rules to help me, and they've been great about it. Either way, the guide and our linters keep us on the same page as a team, and that's really the goal anyway. You ask how this isn't seen as a part of the larger accessibility issue. People with visual impairments don't usually seek out work as programmers. Most of us were probably doing this before our sight started to go to crap and even then a lot of people try to pivot into something else. It's also not always a very apparent circumstance - your only hint that something might be wrong with my eyes would be that my nose is 2 inches away from my very large monitors when I work. But programmers are also pretty weird people sometimes (we have holy wars about tabs and spaces, for crying out loud) so it could just as easily be chalked up to that. It's not talked about because there aren't a lot of us, and the industry doesn't see it as something that needs a lot of talking about. We're also kinda used to it. This is a sighted world built for sighted people. That world tries to be accommodating to us but we still have to shape ourselves to fit in it. We get really good at adjusting. I can't tell you how huge it is when my boss does things to help me because she's decent, and not just because it's the law or an HR directive. I'm also a realist, and I see that we're in an environment where accessibility enforcement can depend on who wins an election. I appreciate help but never count on it, so it's not surprising to me when I have to take a couple of extra steps to get something set up. That's just how it is.
one of the reasons is that stupid GitHub shows tabs as 8 spaces, since it's the original default value of a tab. I just want GitHub to use different tab width per file type and/or allow me to configure that value at the repo level.
Again, why? Dealing with legacy code should be rare, so going through the conversion on those rare occasions isn't a big deal. The problem is when it interferes with every code commit you make in your normal daily workflow. So you seem to be saying I make my common tasks easier because that will make unusual tasks harder. That makes no sense.
Thanks for the reference post proving that space evangelists are cunts.
The reason i prefer spaces over tabs is alignments. e.g. function x(param1, param2, ...) if i were using tabs then it would end up a mix of tabs and spaces. which is the worst of both worlds. )
Thank you for being so considerate
What is then if it's not a third party extension?
&gt; Tabs vs. Spaces is a solved problem. A quick search on them internets suggests it's far from solved so it would be nice if you've offered some better explanation or a link to one. I've always used spaces (or rather tabs converted to spaces) and a 4-space tab seems to be a convention. It's really easy to find people and articles who argue for tabs though. Obiously team-style is important and IMO being consistent is way more important than any single style whether it's tabs or spaces.
I don't understand your point. Text Editors understand tabs just fine. Good text editors display whitespace, so tabs are obviously different than spaces too.
Your editor, seemlessly making this topic irrelevant by your personal config.
IMO tabs are better than spaces, and it would be nice if more conventions reflected that. But I never use tabs because convention is more important than a slight preference on my part. I never thought about the accessibility aspect, though. The only opposition I have to tabs, and which is probably the reason most conventions use spaces, is that the consistency of having one character per column is preferable in a lot of instances (although unicode messes that up a bit), and, more importantly, that having multiple horizontal whitespace characters gets confusing - so any convention which restricts the number of whitespace characters is a good thing, and you're never going to convention-out a standard space. Of course any decent editor will be able to show you what's a tab and what's a space and what's [all the other space characters](http://jkorpela.fi/chars/spaces.html), but some people prefer bare-bones.
In "the old days" plain text editors didn't cater for tabs visually. They had barely any configuration settings. Spaces force visual indentation.
&gt; Again, why? Dealing with legacy code should be rare, so going through the conversion on those rare occasions isn't a big deal. It's not just legacy code. Every emulation project whose source code I have referenced has used spaces. &gt; The problem is when it interferes with every code commit you make in your normal daily workflow. &gt; So you seem to be saying I make my common tasks easier because that will make unusual tasks harder. I'm not entirely sure what you mean, but ideally, tooling would be improved to where both scenarios here are handled better by conversions.
Why do you believe that a mix of tabs and spaces is bad? Seems like the ideal solution, especially given that they are intended to serve different purposes.
I don't get it. Can't you just set "use tabs as spaces" and set the tab with to whatever amount of spaces you want? And then use the tab button as if they were tabs? Never understood the problem...
I was a tab proponent for a very long time. Like anything else, I gave up my personal preference because of my workplace ... but it wasn't *just* that. For me (a Javascript coder) there are times when you want to indent by a non-indentation-level amount, for instance when chaining: $(foo).doSomething() .thenDoSomethingElse() .thenDoAFinalThing(); The only way to do that with tabs is with a mix of tabs and spaces, and if you're going to mix tabs and spaces why not just do all spaces and keep it simple? Obviously if you have visually-impaired people you might choose a different standard, but I'm curious what those people see when they look at a line like the one above. It must look awful, so then do those companies simply not indent "chains" of code the standard way?
I just gave you the explanation. Editor formats on save, repo formats on commit. This isn't a hard problem, dude. And a bunch of idiots on the Internet not being able to figure out something simple has nothing to do with the difficulty of that simple task.
If you have an .editorconfig github does actually pick up the tab_width from that and apply it via CSS
Regarding Github, you can set a default rendering tabstop with an [.editorconfig](https://editorconfig.org/) in a repository, and override with `?ts=&lt;value&gt;` in URLs.
Wow thank you for this !!
I'm not evangelizing spaces, cunt. I'm pointing out that it's not a fucking argument for tabs that some people might need them. Fuck, those people can *also* use spaces if they configure their editor properly. But thanks for reinforcing that tab evangelists are fucking illiterates in addition to being cunts.
maybe a bigger problem is if someone has configured their editor to have the tab width of say, 8 spaces length, then they will lose the alignment as well. but having is spaces only won't mess up the structure.
Why do you get to decide what editors people should and shouldn't use?
You shouldn't have so many parameters for this to be a problem. Use named parameters with config options. Or do the cleaner: F X( \tparam1 \tparam2 ){ \t... }
And you also have the advantage that most editors also pickup the settings automatically
Your argument makes complete sense, except there are cases where you can’t control the indent width of a tab. And as (bad) luck would have it, the defaults in these cases are usually weird (like 8 spaces to a tab). Even if we discount aesthetics, this can make something like a three-way diff almost impossible to read in some tools if the code uses tabs. There’s also the case of “hanging indent”, a formatting style popular in the Lisp family of languages. In hanging indent style, any item in a list form should be vertically aligned with respect to the opening paren / bracket. Spaces are a necessity for this kind of indentation style, as the opening paren may be anywhere in the line, ie it doesn’t map to any natural “tab stop”. So, unless you want *both* tabs and spaces in your Lisp source files then spaces it is. (Emacs - being the editor of choice for lispers- naturally supports this “frankentab” style of indentation. However, it will probably make most other editors freak out) Believe me, I long for a world where tabs would be the only sane option, but I choose spaces out of necessity.
There are multiple related but different things mixed together here. First thing is, is it practical to try to change an accepted code formatting policy at a new workplace? Usually its very impractical to attempt to do that. Second thing is related to worldviews and groups. People don't realize this, but worldviews are often largely adopted from social groups. In order to not be annoyed by being forced to use tabs and to integrate into the group, you need to adopt their worldview about tabs. That's normal. The third thing is about the actual reality here. Could the first guy make his font slightly less giant and then deal with two spaces? Yes he could. Could the second guy make his font slightly larger and then two spaces would be easier for him to see? Yes. But I am not saying you should try to change established practices and programming worldviews. You are probably just going to have to deal with tabs. The biggest issue for me is that multiline statements do not align properly. I guess I am crazy but it seems like it should be
100% agree. The answer in engineering is usually "it depends" and this is no different.
Prettier suggests function x( param1, param2, /* ... */ ) { /* ... */ ... which I kinda like better especially when arg lists are more complex (e.g. default values, type annotations)
That's why you convert to a standard format on commit, homie.
sorry, what do you mean to use config options ? A function can have as many parameters as needed. the function arguments in your example has the same level of indentation as the function body, which i don't find very readable.
I'm surprised we haven't figured out a 'standard' for this type of stuff where all editors basically automagically convert in to your local preferred format while the project format / default is stored in a config file. I personally couldn't care less whether anyone use tabs or spaces, I'd just like the 'standard' to be one or the other and not have to constantly deal with this shit any time more than one person gets involved in a project where someone will inevitably start using the 'wrong' one or import code which uses the 'wrong' one.
Consistency in codebase...
https://www.youtube.com/watch?v=SsoOG6ZeyUI
So what happens when you have to read code that someone else wrote with a different amount of spaces?
&gt; You ask how this isn't seen as a part of the larger accessibility issue. People with visual impairments don't usually seek out work as programmers. WTF is that argument. &gt; But programmers are also pretty weird people sometimes Naw, programmers just like to think they're special, and have a slight overrepresentation of "fuck you, I've got mine" attitude. &gt; We get really good at adjusting. I can't tell you how huge it is when my boss does things to help me because she's decent, and not just because it's the law or an HR directive. Cool, now what if she's not. What if she just took your arguments and told you to find a job for vision impaired people. But fine, you've got yours.
Why do you think people get to "choose" tools that don't allow them to do their job? And why do you further believe that this choice should impose upon everyone else on a team? The fact is that any modern editor can handle tabs or spaces just fine. If someone wants to use Microsoft notepad or some other dumb shit to write code, that's on them. You giys ever get tired of advertising how stupid you are?
I may be one of those idiots but all I can see is you pointing out why it's not an accessibility issue like OP puts it, how it's possible to automate the process. I can't see anything why spaces themselves should be chosen over tabs that could avoid this problemaltogether.
file indention is no harder to change than font size. there's no reason people can't adjust their workspace to fit their preference. converting a file to tabs on open is trivial. IDEs have it built in, or you can write a ~10 line bash script. converting back is automatic because your pre-commit hook should already ensure correct indentions. if you don't already use pre-commit hooks, you've got bigger problems. why try to change habits when changing code is so much easier...
We have figured it out. It's a solved problem for anyone who wants it solved.
Yep bingo
I can do my job with notepad or mono, and if I happen to be efficient enough to keep my velocity in part with them what's it to you what I use? You're just not getting it. What's good for you isn't necessarily good for someone else. It's their choice. And remember, this is about tabs VS spaces...
&gt; if you're going to mix tabs and spaces why not just do all spaces and keep it simple? Because tabbing is faster. Two button presses is typically 8 spacebar presses. People tab for speed and then realise "oh yeah, shit if i want to get it just right i need to cancel that last tab and add just one.. two... spaces, there we go" and then forget about what they've just done because it looks ok on screen...
Don't understand why we are still discussing this http://lea.verou.me/2012/01/why-tabs-are-clearly-superior/
you don't. you set a default for everyone at the start of the project, and that's that
I never claimed an argument for spaces. I just said accessibility isn't an argument for tabs, which it is not. Tabs vs. Spaces is a solved problem. There is tooling available to accommodate people who want either and to standardize the canonical version of the codebase.
Tabs for indentation, spaces for alignment.
it's consistent. you use the tab key to create a default, agreed, set of spaces, across the project
Yea and then you have a guy who likes to use 8-width tabs. So while their max long line is 90 characters wide in their editor, it's 50 in yours, and then you commit a 90 chars long line and it looks a fucklong line in their editor
In my opinion your coworkers are edge cases and should be accustomed to setting up their IDEs in a way that suits them best for how they like to work. If they take the time they can set up different types of local global git hooks to automatically ensure the files are formatted as they like before they work on them and when making commits. Once they've created these it'll be easier for them to pick up ANY project and contribute.
This post converted me to tabs. Thanks.
Wow, thanks, I had not known that. Tabs it is.
Thanks dawg.
But we have prettier for this! Format your code as *you* want and script will reformat it in consistent way on pre-commit hook.
Is tracking geolocation *changes* an actual use case?
No, the real reason nobody talks about it anymore is because it's largely a solved issue with auto-formatting.
Hi /u/RunningLowOnFucks, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
IsaywejustfixthisissuebyremovingTABSandSPACESalltogether,insteadofjustfightingallthetimeaboutit. &amp;#x200B; /s &amp;#x200B; But seriously, I use spaces for a few reasons: * Tab/Shift-Tab key is used to change focus of an element. * Sometimes you may want a non-standard alignment (While I'm against it personally, in JS it's common you align up your params with the opening bracket).
What are you going on about? &gt; WTF is that argument. It's *really* hard doing something that is very visually oriented when you are visually impaired, so how is it hard to imagine that someone might not want to be a programmer? I'm not saying it can't be done, it obviously can be, just that a lot of us would rather do something that's at least a little bit less of an uphill battle. I'm actively trying to pivot to something else because I'm sick of the headaches from the eye strain every day, even with all of the help I get. If people in a certain group avoid work in an industry, it makes sense to me that there's not more attention within that industry addressing that specific group. &gt; Cool, now what if she's not. What if she just took your arguments and told you to find a job for vision impaired people. But fine, you've got yours. Yeah, I'm happy to be in a supportive environment. What's wrong about that? I've turned down jobs from bigger places where they treat my condition like it's some kind of minefield that needs to be handled delicately. I'm pretty sure I didn't get offers to some jobs *because* of my impairment, but it was chalked up to not being a good fit or something else. A lot of why I'm still working where I am is because of the support. If that stopped, I would be aggressively seeking employment elsewhere.
You're worrying about the wrong thing. That said, I was once guilty of exactly what you are doing now. Then I realized that it doesn't matter that it all lines up. What matters is that I can tell how it's constructed and linked together. Lining up is pure visual fluff.
Wouldn't it be better as a context provider so it can be used in class components as well?
First off, "button presses saved" should be one of the lowest of all priorities for programmers in my opinion. Like great, you saved a few keystrokes by calling your variable "x" instead of "counterOfBlackThings" ... butt you lost a huge amount of code readability. That's not a win. But to your point of keypresses, if that is your concern most IDEs can be configured to add 2 (or 4) spaces when you press TAB.
The "I like my favorite style (not just indentation)" problem has been solved by auto-formatting in the team build pipeline. I don't like tabs because it's a "special" character aside from spaces and mixing tabs with spaces makes things harder.
On some level I agree, but I really think you're discounting the importance of code appearance. I honestly do believe: $(foo).doSomething() .thenDoSomethingElse() .thenDoAFinalThing(); is more readable (superior code) to: $(foo).doSomething() .thenDoSomethingElse() .thenDoAFinalThing(); not because the former is "prettier", but because our brains can parse the visual of the former more easily.
Probably gonna get murdered for this but I wholeheartedly believe we need to abandon a linear file for a markup file and let the editor handle the hard stuff. Then we could literally render it any way we want and never have to worry about this, and also the file can store meta-data and annotations. It's definitely gonna be a massive pain in the ass but it could give us an exponential benefit.
Tabs for indentation, spaces for alignment
Did you miss the entire conversation? This is about a couple of people with extreme needs that require specific and highly unusual indentation to do their jobs. They can't do their jobs without an accommodation for those needs. That accommodation is available via tooling. Tabs vs. Spaces is not an accessibility issue. It's a tooling issue that has been solved. If you can do your job just find in notepad, who cares? It's when you can't do it in notepad without forcing everyone else to do it your way that someone gets to choose for you because you're incapable of making good choices on your own.
So you just completely skipped over the original post of this thread?
es6 default params format ```javascript function x({ a = 2, b = 'bar' } = {}) { return b + a } x({b:'foo',a:'test'}) 'footest' x() 'bar2' ```
My argument with that is if you're brain isn't wired to already acknowledge the 2 space tab as being linked to the upper line, then you either need to work to adapt it or swap to a different definition for tab spacing such as 3 or 4.
&gt; What are you going on about? You being a terrible person, terrible person. &gt; It's really hard doing something that is very visually oriented when you are visually impaired, so how is it hard to imagine that someone might not want to be a programmer? Programming is only "visually oriented" because we made it so. And your post is literally whining about a small suggestion about how to maybe make the world a better place. *FOR YOURSELF* even. And I've heard that argument about almost every job, whenever I mention accessibility in various tools. Programming is _remarkably_ accessible for its pay grade, except for the issue with terrible people working in it. &gt; Yeah, I'm happy to be in a supportive environment. What's wrong about that? Nothing. There's something wrong with you proposing an attitude that assumes everyone can find one. &gt; If that stopped, I would be aggressively seeking employment elsewhere. You might get a rude surprise if/once that happens. But hey, find a job in a new field then, right? And anyway, getting laid off by the nice boss is something that happens to _other people_.
Editors can be configured to insert spaces when you press the tab key. I believe this is even the default in some editors depending on the language being used. So no, using spaces instead of tab doesn't result in any change in button presses. If anything, it results in less presses if you want to do aligning like this, as all you have to do is delete the desired number of spaces, rather than delete the tab then add the additional spaces.
It's not how I think, it's just the trap people fall in to. Start off using tabs and then inevitably end up having to add / remove a space for whatever reason which just confuses things but in the eyes of the developer it makes sense at the time because it 'looks' ok. By default, I think most IDEs are set to 3/4 spaces per tab and defaults rarely get changed which is how this becomes a thing.
That accommodation, sure. What about other accommodations? Again, this is about a simple standard that solves that instead of having to use specific tools. I'm not sure what's so difficult to understand about that.
Did you even read my first reply? I said there's no best, universal answer, and that style guides should be written so they make the whole team more efficient. The first half of what I wrote is specifically about supporting the team at large, not myself individually. What part of that is whining about a suggestion?
Just wanted to comment on that as well, that use of reduce seems very un-idiomatic. I'd probably settle on a forEach but that's mostly habit from the old days when for loops were dangerous. These functions can definitely improve readability when used right (i.e. using map to actually transform an array into another array, filter to remove some elements etc) while a for loop doesn't immediately tell you what kind of operation it performs.
I disagree. For me, the second snippet is more readable, because in your case every instance of chaining will have different indentations, which is less readable, in my opinion.
In JS-land, I prefer to use prettier and never try to "align."
What do you mean? If the dude needs 4 spaces, we'll use 4. If more, then more. This isn't really a common problem tho. OP is kinda blowing this out of proportions
Wow, that's hideous. Use prettier and stop thinking about this.
You're opposed to making a structure that would effectively _force_ teams to adopt more accessible policies, because a team might not have a disabled person in it. That's the whining there. Also, supporting the so vulnerable abled people, like, for reals? Does the boot taste that good? Don't answer, I won't read.
Prettier FTW. Solves \_all\_ of this bikeshedding.
\&gt; one of them uses tab-width 1 because he uses such a gigantic font-size So when he hits the 80 character limit, presumably he has already had to scroll the page that often and that much that whether it was a tab or space - its mostly irrelevant? Also, because the tab-width is 1, then the 80 character limit is ultimately meaningless, because for him its 1 + 79, but for the other guy its 8 + 72 due to their own optional values. &amp;#x200B; If spaces need to be changed for a specific environment - that is what tools like prettier are for. They are not different to having to customise your "tab-width" - however from a reusability level, the ability to lint and so forth - utilising these tools rather than a custom IDE setting (which may not replicate inside any sourcemaps in chrome or any other dev tool) - should be preferred surely?
``` $(foo) .doSomething() .thenDoSomethingElse() .thenDoAFinalThing(); ```
Try that! It prints something completely different from what you would expect. Another example, what is the result of `["10","10","10"].map(parseInt)`?
This is a really great point that I haven't heard before! Of course, if your workflow relies on a specific tab width, it might be a good idea to have a macro/shortcut to automatically convert things over before you commit. If I were to come up with a counter-argument, I'd say that I copy and paste snippets online or to coworkers quite often, and using tabs would be harder to read if I pasted them into Slack or Reddit. On our team, sharing code occurs more often than visually-impaired people read our code. If we were to hire a visually impaired person today, we would have to come up with a solution that allows them to read/write the existing codebase without messing up past commits, and that solution probably wouldn't be to begin using tabs. In the end, it probably is up to your team and their needs. Where does that leave Github and other public code repositories? Idk...
Honestly, these guys should have scripts that automatically convert to their desired format on checkout and push (or something like that). It isn't hard to do, and ensures they'll be happy regardless of the coding standards of any project/company. This may be an argument in favor of tabs, but it is unrealistic to expect established projects that are already using spaces to change coding style because of these edge cases. Changing coding style in an existing project is usually not worth it, imo, unless there are some serious bad practices in the style.
The reason is that Google and others made a good case for files to be editable in any environment. Spaces accomplishes that. Also, all modern editors can be treated to treat tabs like spaces and vice versa and to elongate them and auto convert.
I'm pretty sure that just about all modern editors can be treated to treat tabs like spaces and vice versa and to elongate them and auto convert between basically without issue.
iframe inception
Fricking tell me about it. Such a terrible design
What is your opinion on ``` $(foobarbaz).doSomething() .thenDoSomethingElse() .thenDoAFinalThing(); ``` vs ``` $(foobarbaz).doSomething() .thenDoSomethingElse() .thenDoAFinalThing(); ```
Tabs for identation, spaces for alignment.
Of course, I think TOP absolutely prepares someone for a dev role. Previously, I had a bachelors in art and some experience as a designer/illustrator, but I don’t think those qualifications mattered much. I’m also the worst at networking, so it was mostly the portfolio site for getting my foot in the door. I spent a lot of time using everything I learned to make that as good as possible. In my experience in NYC, startups and angellist were the best place to look for that first dev job. They seem to care less about a non-traditional background and more about if you can get shit done.
Tabs are the democratic way to handle white space. Anyone can set them up how they like them, if it sucks in the browser, get the browser to fix them, dont change it for them.
I use the codemaid extension in visual studio. Doesn't look like it has a setting for switching between tabs and spaces, but if it did, it would be a perfect solution to the problem. At least for visual studio users.
Yeah I’ve been a die hard spaces person for years, this is making me rethink some shit. If I can force github to show a tab as 2 spaces, I’m sold, and would happily switch.
&gt; First thing is, is it practical to try to change an accepted code formatting policy at a new workplace? Usually its very impractical to attempt to do that. that's a really good point — any significant change is naturally met with resistance by any group of people i'll add, that these two programmers with visual impairments were not directly on the team that worked with on the new repository, and so without them, my team agreed on spaces — right until we had a conversation with these two gentlemen — it was the sheer principal that somebody in their situation *might* work on the project in the future, that we decided to switch to tabs &gt; Could the first guy make his font slightly less giant and then deal with two spaces? Yes he could. no, he can't make his font any smaller — because he has trouble distinguishing the characters &gt; Could the second guy make his font slightly larger and then two spaces would be easier for him to see? Yes. no, he can't make it large enough for two-space to be sufficient "can't they just be like me?" — this is the kind of callousness i'm worried about
It really doesnt. 1 tab is 1 Unicode char. Your IDE is bunk.
Started learning JS few days ago, this is the first complete code I've created. I know it's simple af OK 😤. Oh, I would love to learn on how to shorten the path, cuz I feel like I overdid this. var John1, John2, John3, Mike1, Mike2, Mike3, Mary1, Mary2, Mary3; var avg_John, avg_Mike, avg_Mary; John1 = 20; John2 = 20; John3 = 20; Mike1 = 20; Mike2 = 20; Mike3 = 20; Mary1 = 30; Mary2 = 30; Mary3 = 30; avg_John = (John1 + John2 + John3) / 3; avg_Mike = (Mike1 + Mike2 + Mike3) / 3; avg_Mary = (Mary1 + Mary2 + Mary3) / 3; if (avg_John &gt; avg_Mike &amp;&amp; avg_John &gt; avg_Mary) { console.log ('John has the highest average of ' + avg_John + '.'); if (avg_Mike &gt; avg_Mary) { console.log ('Mike\'s team has second highest average of ' + avg_Mike + '.'); } else if ( avg_Mike = avg_Mary) { console.log ('mike=mary'); } else { console.log ('Mary\'s team has second highest average of ' + avg_Mary + '.') } } else if (avg_Mike &gt; avg_John &amp;&amp; avg_Mike &gt; avg_Mary) { console.log('Mike\'s team #1. AVG score = ' + avg_Mike + '.'); if (avg_John &gt; avg_Mary) { console.log('John\'s team # 2. AVG score = ' + avg_John +'.'); console.log('Mary\'s team # 3. AVG score = ' + avg_Mary +'.'); } else if (avg_Mary &gt; avg_John) { console.log('Mary\'s team # 3. AVG score = ' + avg_Mary +'.'); console.log('John\'s team # 2. AVG score = ' + avg_John +'.'); } else { console.log('#2 is shared between John and Mary'); } } else if (avg_Mary &gt; avg_John &amp;&amp; avg_Mary &gt; avg_Mike) { console.log ('Mary\'s team #1. AVG score = ' + avg_Mary + '.'); if (avg_John &gt; avg_Mike) { console.log('John - #2 ' + 'avg ' + avg_John); console.log('Mike - #3 ' + 'avg ' + avg_Mike); } else if (avg_John &lt; avg_Mike) { console.log('Mike - #2 ' + 'avg ' + avg_Mike); console.log('John - #3 ' + 'avg ' + avg_John); } else { console.log('#2 is shared'); } } else { console.log('#1 is shared between few of the participants. Averages included: ' + avg_John+'- John , '+avg_Mary+'- Mary.'+avg_Mike+'- Mike.'); } console.log('Mike - '+avg_Mike); console.log('John - '+avg_John); console.log('Mary - '+avg_Mary);
You can configure that behavior in most editors
&gt; If I can force github to show a tab as 2 spaces /u/alexendoo: &gt; .editorconfig github does actually pick up the tab_width from that and apply it via CSS
Thank you! I usually have it in my projects but it’s always set to use spaces so I’d never know
i prefer the former, using only one tab to indicate an indent, but not aligning for an aesthetic reason — it appeals to me that nesting always occupies one level of indentation, which looks consistent when many examples are near each other there is one circumstance where i like to mix tabs and spaces to achieve a special alignment — let me illustrate with visible whitespace — this example might actually be more confusing than clarifying, with so much going on, but let's try ``` function sweetAction() { → const myRegex = /really-cool-regex(?:-fancy)?/i → ·//···············↑················↑ → ·//··············[1]··············[2] → ·// [1]: only match really cool stuff → ·// [2]: and maybe it's fancy } ``` i only do that in rare cases, like with cryptic regular expressions that i can't otherwise break up across many lines to comment it more step-by-step i always enable visible whitespace, so when i mix tabs and spaces, i don't make mistakes, and regardless of the tab-width preference, the alignment will work correctly what do you think?
I like your confidence
 &gt; If I can force github to show a tab as 2 spaces, I’m sold, and would happily switch. This [Stackoverflow discussion](https://stackoverflow.com/questions/8833953/how-to-change-tab-size-on-github) helped me solve that. There are also several lightweight plugins for .editorconfig in browser (I used [RReverser](https://rreverser.com/gh-github-editorconfig/) before I think)
Did you even read their post?
You mean like MS Word? I see your point, but I really disagree, every time I have to work with Word I yearn for a direct format like Latex or Markdown. Annotations and metadata aren't a bad idea, but those can easily be stored in a separate file.
When I hit tab... my editor turns it into spaces. :mic drop: Sorry... the mic unintentionally fell out of my hands. Sweaty fingers.
Pretty solid and exciting that these optimizations are gonna be merged into the library. I’m curious the code example uses a loop label: ``` FIND_CHUNK: for (let i = 0; i &lt; chunksLength; i++) { const chunk = chunks[i]; for (let j = 0; j &lt; byteLength; j++) { if (chunk.bytes[j] !== bytes[inputOffset + j]) { continue FIND_CHUNK; } } return chunk.key; } ``` Does labeling the loop cause different behavior than if we were to just replace the `continue` statement with a `break` statement? In my eye these should be logically the same but I’m not 100% sure how labels work.
It really depends on the language. You'll have a bad time in Python since you'll inevitably be mixing the two and breaking the parser.
It doesn't look like you changed anything substantially. If ghostfacedcoder prefers their first example then they likely prefer your second example.
The problem with setting the indent size setting in editorconfig is that you're again forcing how the tabs are displayed. So everyone with different needs would have to configure their IDE to ignore the editorconfig, which defeats the whole purpose.
I have to disagree with you as well. I get your argument, but to me that only makes sense if you're jumping to the middle of a chain. Normally you'd be reading sequentially from the start of the file/function down. The line that starts the chain would be indented as expected (no issues). You read left to right across. Hit a `.`, then continue reading down. Its not like the indentation is changing every line.
VSCode: &lt;C-S-p&gt; Convert to ...
Good ole Python. 2 versions to rule them all!
I don't know about you, but I probably read as much or more code from other people's repositories as I do on my own. Luckily most people go for spaces these days (and usually at the right amount - i.e. 2 for JS), so code on GitHub looks great for me.
Yea that's fair but like we don't complain about opening websites in a browser. It'd be a little different but imagine the benefits. Maybe a bridge is just a markup embedded in documentation that an advanced ide could read although that'd be a nightmare for anyone without that capability.
Huh. Never thought of it that way. Thanks
Refined GitHub changes it to 4 spaces by default and you can set it to 2 yourself in the extension options.
We're definitely straying from "clear objectively better" determinations into "subjective preference" the deeper we go in this Reddit thread :) So I just want to acknowledge that and point out that holy wars in programming start precisely because there's no clear objective winner on either side, so people just dig into whatever their preference is, and that's how we get emacs vs. vi (or your favorite other holy war). But I do feel the latter is *slightly* better. It's extremely hard to metric, but if you look at that first one and then look at that second one I really feel like the first one takes milliseconds longer to parse or "grok", whereas the whitespace and "lined-up-edness" of the latter makes it faster to understand.
I'm gonna reformat this because reddit seems to dislike triple-backticks for code blocks function sweetAction() { → const myRegex = /really-cool-regex(?:-fancy)?/i → ·//···············↑················↑ → ·//··············[1]··············[2] → ·// [1]: only match really cool stuff → ·// [2]: and maybe it's fancy } I try to avoid whitespace for alignment. If you change the variable name or the pattern you also have to change the whitespace to keep things lined up. What if the change isn't deliberate and instead is the work of a linter or refactoring tool? (not to get started on whether it's appropriate to let tools automatically modify code)
Just don't use either and get you editor to auto format on save
Recall that \`parseInt\` takes two parameters, string and radix, while map passed in 3 arguments: the element, the index, and the array. Running \`\["10","10","10"\].map(parseInt)\` then reasonably returns \`\[10, NaN, 2\]\` because it is passing 0, 1, and 2 as the radix. &amp;#x200B; So if your callback function is a function built into the language, you need to know what it accepts as parameters and know what arguments the caller is sending it. If you are defining your own functions, you can let it have a single parameter and the rest will be discared.
That was my guess, too. I've worked with Python programmers who were absolutely fine with things like: return self.time_to_reference_a_long_method_name(argument_one, argument_two) In my opinion that's taking a stylistic pattern too far. "How far is too far" doesn't have a clear answer so I try to avoid the temptation of lining things up even when it looks good.
Just chiming to address some concerns people are raising. Some commenters have pointed out that I've used impure functions and some verbose function names. This isn't because I don't know about impure functions or general functional programming principles. And it's not how I would write function names in production code. This is an educational piece, so I've tried to choose practical examples that beginners will understand. Sometimes that means making compromises.I've written elsewhere about [functional purity][fppurity] and [general functional programming principles][introtofp], for anyone who might be interested. [introtofp]: https://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-intro/ [fppurity]: https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/
That's my point. You almost always want to wrap whatever you're passing into those `map`/`forEach` etc into an arrow function. Your example with `console.log` suffers from the same issue, because it's going to print indices along with the array contents.
There is also a library called "the-platform" (https://www.npmjs.com/package/the-platform) that implements many web apis as hooks, including geolocation.
I love map/reduce/filter, but I also really like your comment.
Spaces are for egotistical fools who want to dictate how others view their code. I haven’t seen a single convincing argument for their use but so many space people are so goddamned opinionated about it. Fuck Douglas Crawford.
Yeah but performance isn't really important unless you are specifically going to address it. Even then these methods of iterating over items are likely not going to be a meaningful change. &amp;#x200B; forEach should stay, it just indicates you are doing something with side effects and don't care about the return value.
2 spaces makes me feel claustrophobic
i use space and tab, i may indent badly , since when i tab i need to press space to make it even
I don't know anything about how GMail is built, but I know that Redux can be used without React
This works with tabs or spaces $(foo) .doSomething() .thenDoSomethingElse() .thenDoAFinalThing();
I don't really understand how it's possible to line up something with spaces if you don't know what size a tab will be.
Use prettier to standardize formatting. /thread
Mate, you mention in your comment that people can have their IDE ignore it. That's a choice you don't have with spaces and is kinda exactly the point of OP, give people choices!
These issues are trivially solved by a combination of existing scripts, tools and/or editors. There are many different disabilities that impair computer use. Rather than trying to design a one-size-fits-all solution for input devices, output devices and/or software that works for 100% of the population, specialized input devices, output devices and software exists to assist users with various disabilities. This situation really isn't much different, and only takes like 10-30 minutes one time to setup a workaround. Sure, if a team doesn't have a good reason to go with spaces over tabs, this issue is a great reason to choose tabs. But if the team has a valid reason to prefer spaces, I'm not sure this should override that.
In your loop it looks like you are selecting ALL list items as you are not specifying a class to target. Each loop iteration all li elements get the same title which ends on 'bop'. My guess at debugging.
Confession: My senior programmer uses return carriages over tabs or spaces. Imagine my frustration when I have to refactor his code. But I a tab guy, but this is good to know!
buuuuuuh! I think you're right!
tab size doesn't matter for alignment.
No.. the function will stop executing, and the console will log the reject message. Much the same as an unhandled error, except that it will call it an "unhandled promise rejection"
When were these olden days? Both vi and emacs have handled tabs correctly for decades.
You plebs with your tabs vs spaces debate, when real pros use newlines instead of tabs. function x() { if (l33t == true) { console.log("l33t"); } }
Any editor worth using can switch between the two with one or two clicks, not sure why a vision impaired developer would choose to suffer.
'consistency across environments' is exactly the problem for these guys, they have different needs &amp;#x200B; this sentiment is why we should focus on equity instead of equality in every area where we share space or resources with other humans. also tabs 4 lyfe.
Iterate over the class names. Use the class name in the selector and in the message. Also, put the semicolons were they are supposed to go. They might deduct some points otherwise.
It’s the *best* of both worlds. Indentation can be done according to preference, and alignment can be maintained however you like.
&gt; In my opinion that's taking a stylistic pattern too far. i agree entirely, and it's cases like these which lead me to abandon that kind of alignment altogether
Let me put it this way. The guy who advertise on his project is the creator and main maintainer of the project. If a rouge dev decides to join a project and make such a change, I would definitely be against it but because that guy has spent a significant portion of his life working on the project and ultimately it belongs to him, he can do whatever he wants. As a developer, I find it shocking that other developers are complaining instead of doing something about it. If you hate the message, you can simply do a fork of his code (it's open source, hello!), and make the changes to remove the post-build message. But no people rather whine and complain in this age of self-entitlement. &amp;#x200B; TL;DR - You don't want to pay him for using his project and you want to whine about his post-build 'advertisement'? Then you must be full of self-entitlement sir.
if your IDE doesn't convert to your favourite side of this argument when checking out and then committing again, you need to start using an IDE instead of notepad on steroids.
Awesome, thank you for your help!
I'm going to assume you dropped this. Here you go. /s
You should post this as an issue on airbnb's style guide repo. See what they say.
One of my best friends is a visually-impaired (legally blind) programmer and he prefers spaces. /shrug
[removed]
This level of micromanagement would piss me off and I’d walk away on principle.
I don’t think you explained well why does tab the settings were required for extra accessibility. I understand those coworkers had accessibility requirements. But those are better solved with larger displays and fonts. Not by tweaking the indentation of code slightly.
[removed]
Why would you add your editorconfig to the repo?
That subjectiveness IS the problem in itself. You are applying logic ONLY in certain occasions, which only helps to make your code more "dynamic" or edgy, different, unique, or whatever. Everything but consistent.
There you go: [https://www.outpan.com/hackathon](https://www.outpan.com/hackathon) :)
[https://www.outpan.com/hackathon](https://www.outpan.com/hackathon)
Let's do this! [https://www.outpan.com/hackathon](https://www.outpan.com/hackathon)
Agreed, it should be "tabs for indenting, spaces for separating words." Alignment is cool, nice, super readable but completely arbitrary and hard to maintain. callMyMethod(method, "hi") // What if I change a variable name or a parameter? .update() // Spaces will be added here .save() // Spaces will be added here
Honestly tabs probably ought to align to the next language-aware sensible alignment point. But of course there's that one person who exclusively works in `ed` over a telnet into a GE-635 mainframe, and don't you dare suggest they upgrade to a common plebian editor that any fool can operate, like `vim`.
i think i fixed the code block (strangely the backticks appeared to work on desktop reddit, maybe the app follow different markdown rules?) yes, great point you made about refactor command being devastating to spacebar alignments, they are very fragile if in my example, the variable name was changed significantly, the arrows would all be pointing to the wrong locations, and there'd be no way to know, and so they could actually end up quite misleading.. good reason to avoid spacebar alignments altogether
Because when you switch from IDE’s to online repos to blogs to chat shares to emails to notepads to vim to operating systems etc. there is a high chance that tab settings differ and tabs will break.
Obviously. Losing sight doesn’t effect your sense of taste
Was always on team Tab, but now I have a better argument than "I like it that way"
i mean we have the right alt key on the keyboard and aint nobody use that shit
How do you align if you don't know how many spaces are in a tab? function x(xparam1, xparam2) { function y(yparam1, yparam2) { ... } } If I understand correctly, that might be: function x(xparam1, \t\s\s\s\s\s\s\sxparam2) { \tfunction y(yparam1, \t\t\s\s\s\s\s\s\syparam2) { ... The coworker with 1 space tabs will see function x(xparam1, xparam2) { function y(yparam1, yparam2) { The coworker with 8 space tabs will see function x(xparam1, xparam2) { function y(yparam1, yparam2) {
&gt; But those are better solved with larger displays and fonts. Someone who needs to use size 48 font may not need (two, four, eight) size 48 spaces for indentation.
it seems like an aesthetically pleasing and logical option, but ultimately, space alignments are inconsistent and suffer a drawback abc().alpha() .bravo() .charlie() sweetActionAlphabetSoup(withParameters).alpha() .bravo() .charlie() even aesthetically, i don't like what happens in the extreme second case there, but more importantly note that if we use a refactor tool to rename 'sweetActionAlphabetSoup' to 'sweetAbc', the alignment easily ends up broken by accident; it's fragile sweetAbc(withParameters).alpha() .bravo() .charlie() that's an unfortunate outcome, and i've seen it alot — so that's one reason why i prefer to use one indent for these situations abc() .alpha() .bravo() .charlie() sweetActionAlphabetSoup(withParameters) .alpha() .bravo() .charlie() it seems to me rather simple, consistent, and pleasant to read, plus it doesn't have the refactor drawback ironically i'm using spaces in my code examples, because reddit doesn't let people choose their own tab-width ;)
[removed]
Hi /u/americancontrol, this comment was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
After a long development career, part of which has been opinionated on this issue. I have now come to the old and wise conclusion that it doesn't matter (the cynic in me, says that nothing really does). But for the love of Freyja, please be consistent about your choice. &amp;#x200B; Apart from that Tabs, when you want the reader to be in control the layout Spaces, when you want the author be in control the layout. &amp;#x200B; And in python, and other places where whitespaces has semantic meaning, just go with spaces. Because if an IDE messes up the conversion, it is not only an aesthetic issue.
Not only that, but I guarantee there's other developers out there that could make a similar claim about spaces being easier for them for some reason or another.
I use...wait a minute...shit I guess I don’t.
Indentation should be proportional to the text for it to be apparent. Also you literally cannot tell a tab and a space like this, so you commit code that looks like shit to your coworkers. I understand people have problems and develop weird workarounds to solve them. But the important thing here is to realize that not every such workaround is a good workaround. Just because a person has accessibility needs doesn’t mean that every idea they have is genius and is beyond criticism or suggestion for improvement.
I can't think of any advantages spaces have over tabs. This debate has always confused me.
 it's actually quite simple to use tabs, and still use spaces to align things you'll want to set visible whitespace in your editor so you can see what you're doing, here, i'll try to illustrate an example // tabbed source code with spacebar alignments action({details, info, blah, etc}) → .filterTransactions(/my-regex(-filters-stuff)?/i) → ··//················↑········↑ → ··//···············[1]······[2] → ··// [1] this regex is super important to the whole system, → ··//·····because of reasons → ··// [1] the capture group is also super important → .sealTheDeal() // rendered at tab-width 2 action({details, info, blah, etc}) ··.filterTransactions(/my-regex(-filters-stuff)?/i) ····//················↑········↑ ····//···············[1]······[2] ····// [1] this regex is super important to the whole system, ····//·····because of reasons ····// [1] the capture group is also super important ··.sealTheDeal() // rendered at tab-width 8 action({details, info, blah, etc}) ········.filterTransactions(/my-regex(-filters-stuff)?/i) ··········//················↑········↑ ··········//···············[1]······[2] ··········// [1] this regex is super important to the whole system, ··········//·····because of reasons ··········// [1] the capture group is also super important ········.sealTheDeal() no matter what tab-width you choose, the alignment is correctly maintained :) unfortunately, spacebar alignments should probably be avoided because they are really brittle and break down when you use refactor tools (somebody else in this thread pointed that out to me, it was a great point)
Can you show me an example of this? Im having a hard time visualizing this...
&gt; Sometimes you may want a non-standard alignment (While I'm against it personally, in JS it's common you align up your params with the opening bracket). That's why people use tabs for indenting (customisable for everyone) and spaces after that for extra aligning if needed. But everything is first indented to the same level.
Not super related to OP but does JS have tail recursion
This is pretty cool. It’d be cool if when it’s used with an async generator it would return a Promise of the reduced value.
This is covered in my universal style guide. [https://github.com/ioquatix/universal-style-guide#indentation](https://github.com/ioquatix/universal-style-guide#indentation) &amp;#x200B; Completely agree with you. I've taught blind people programming and algorithms at university.
He's probably talking about tail call optimization, which is in fact part of the ES6 spec. Not all recursion is a tail call, and in those cases, JS will still run into stack overflows. Typically if some code has a realistic risk of running into stack overflows, people will use an async function call to split the payload into multiple stack frames.
That is a clever way to work around it with async. I'm used to Haskell and I'm trying to use similar ideas in JS.
Isn’t this basically hyperapp
Github IMHO has quite a bad code viewer. Yes, you can use [`.editorconfig`](https://github.com/socketry/async/blob/master/.editorconfig), but it doesn't apply to issues, README.md, etc. There is discussion [here](https://github.com/isaacs/github/issues/170) and [here](https://github.com/isaacs/github/issues/1490) but it probably only gets resolved if lots of people email github support. They don't have a public issue tracker. I've emailed several times over the past year, but it doesn't seem like a priority. GitLab has a public issue tracker and there is active discussion about how to fix this: - https://gitlab.com/gitlab-org/gitlab-ce/issues/2479 - https://gitlab.com/gitlab-org/gitlab-ce/issues/45641 - https://gitlab.com/gitlab-org/gitlab-ce/issues/57758
Thank you! I never understood this debate — tabs are better than spaces in almost every aspect, giving control and flexibility to the developer.
I've always heard that it's for white space consistency.
It's similar, but there's one fundamental difference: Hyperapp separates views from actions, treating your view as a function of data and actions as functions that return new data and effects. On the other hand, Moon unifies these concepts and turns your app into a single function that takes driver inputs and returns driver outputs.
Same here. I've never participated in any tabs vs spaces debate because tabs can be set anyway you want in your environment, spaces force your whitespace on everyone, *I must be missing something, thats way too obvious for someone not to get*. Maybe I wasn't just completely ignorant after all?
Thats the neat thing about tabs, you can just choose how much whitespace equals a single tab! Don't like that the dev indents too much? Set your tabstop lower, problem solved. With spaces you're just stuck with it.
Slow down, go back, and reread the post.
Lol. Epic troll
Its a crying shame that devs in any language are miserable and abusive to other devs who have different reasons and ideas about how to do some small things. It just shows how small they really are.
2 spaces is nice for React + JSX, but I worry that on pure JS codebases that enables laziness about nesting code in gigantic `if` cascades
[removed]
That is the correct way to handle it. Tabs for indentation, spaces for alignment.
Talking about people with disabilities as "edge cases" is not only dehumanising, but obviously comes from a position of never having to personally deal with these issues. Do you think that we shouldn't bother with web accessibility because those with disabilities are a minority?
I think everyone has their personal preferences. But as with everything in programming, you need to be able to adapt your style to match the environment in which you're working. It's why things like linters and IDE configs exist. I personal use spaces, mostly because it's what I always use and it's what the internal tools at my company require. If I was working with devs like your coworkers, I'd gladly switch to accommodate. It all depends on your team.
thoughtful post
&gt;But seriously, I use spaces for a few reasons: &gt; &gt;Tab/Shift-Tab key is used to change focus of an element. What do you mean change the focus of an element, do you mean on a webpage's forms. Are you coding inside a form or did you mean element in another content? &gt;Sometimes you may want a non-standard alignment (While I'm against it personally, in JS it's common you align up your params with the opening bracket). It's not just JS, aligning things in every language is useful, and if people try to align say a list of human names with tabs, then they line up incorrectly on any editor. For example: let customers = [ { firstName: 'Brittany', lastName: 'Davis', orders: 5}, { firstName: 'Dan', lastName: 'Cray', orders: 5}, { firstName: 'Stephanie', lastName: 'McCormick', orders: 5} ]; This is why we do alignment with spaces to get a human-readable result that looks like this: let customers = [ { firstName: 'Brittany', lastName: 'Davis', orders: 5}, { firstName: 'Dan', lastName: 'Cray', orders: 5}, { firstName: 'Stephanie', lastName: 'McCormick', orders: 5} ]; That doesn't mean we stop using tabs altogether, we still use tabs for every bit of whitespace on the left of the first block of text so they will always align and be suited for the developer using them. Tabs for indentation, spaces for alignment.
I wouldn't suggest learning just basic programming (like with Java) before learning web development. Web development is going to be programming plus a bunch of other stuff and it's best to tackle one major problem at a time.
Github can't read it if it's not in the repo
Also when they see this post you are going to fail
...and then Emacs (default settings AFAIK) comes along and replaces every n spaces with tabs (yes, also alignment spaces). What the hell, Emacs.
I do. It gives access to various simbols like °, for instance
I use it for shortcuts, since nothing else uses it.
**Spaces**. Because you work for Megacorp, Inc. in the real world. And in this horrible place, some of your team members have never heard about code formatters, and will never understand or care about "tabs to indent and spaces to justify." They will use some stupid editor that you don't know how to configure, and they will use it to type in some random combination of tabs and spaces that looks good to them and comes across as utter nonsense for everyone else, and they won't care, and they're *right*, because really, just get over it. It doesn't really matter, spend your time on something else. And Gods help you if you turn on something insane like "show-trailing-whitespace" and start getting worked up over *that*.
I was a tabs fan in the 90’s but just relented under the weight of others in the 00’s. I’ll give it a go. You and your two colleagues should make a site advocating tabs similar to makeareadme.com
I think the issue here is xparam2 should not have a \t since it doesn't need to be indented (only aligned), and yparam2 should only have 1 \t (just like the line above it) since its indentation level is 1?
So that isn’t the alt right key? Phew!
Oh yasss such abreath of fucking give me a break. The only problem with Reddit is that people use manipulative BS to avoid making actual arguments. OP had a nice sentiment but it's a nice point the is well covered and appeals to emotion and brownie points won't cover it when formatters and IDEs can do the job. Whatever the convention, make it consistent.
You're such a good person, dude... Go back to Twitter.
It's the type of Twitter moron that wants to show "how good a person he is" by being an obnoxious moron. I'd say ignore them but it's better to just confront their BS and show their colors
The irony.
I've heard the "white space consistency" argument... but never understood why it was so mf-ing important to have "consistency across environments".
This is excellent. Thanks for sharing.
Holy fuck, one of those SJWs that are actually so discriminatory that they try hard to pretend they're not by projecting their shit unto others. Nice
Spaces make more money: https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/
Why would you end up mixing them?
...and then someone comes along and views my perfectly aligned 4-tabs and spaces code with 8-tabs
I like tabs but we use spaces at work and this argument doesn't make sense, they literally just need to change 1 value in their config. Both my vim config and jetbrains IDE recognize the spaces as indents and adjust the visual according to my preferences.
Thank you! I started work at a new place recently that uses 2 character spaces and I have to get so close to the monitor to tell if my code is lined up that I get headaches. I’m just waiting till I’m not quite so new to pick this fight there
Just format your source code mechanically. Users can view and edit it in whatever style they prefer, and it gets re-formatted before being incorporated upstream.
alt+enter is fullscreen in most emulators and a lot of video games. That's literally the only time I use the right alt.
Hhmm... because there are no valid reasons. Spaces rule!
...which results in tabs and spaces, mixed on one line. Something to be avoided
One tab is conceptually closer to one nesting/indentation. Using arbitrary spacing seems like more a tooling preference to me.
This is the single best argument I ever heard in the whole debate. Thank you.
One tab is conceptually closer to one nesting/indentation. Using an arbitrary number of spaces seems more like a tooling preference IMO.
Or you could show them the light. In my experience (12 years professional) I’ve found these types of people just don’t care - so make them install an auto-formatter (or better, activate via git-hook) and then it won’t matter (especially not to them). Each commit their code is formatted correctly, regardless of how they wrote it. But I’m also the type of guy who picks up other people’s rubbish when I go camping because I believe in leaving a place better than I found it. I treat codebases the same.
You obviously didn’t read the post.
That's not an ideal solution, look at OPs post, multiple coworkers with different tab widths. I use editor config at work but we intentionally omit tab width so each developer can choose what works best for them.
This is also an option, and arguably more readable: let customers = [ { firstName: 'Brittany', lastName: 'Davis', orders: 5 }, { firstName: 'Dan', lastName: 'Cray', orders: 5 }, { firstName: 'Stephanie', lastName: 'McCormick', orders: 5 } ];
Tab sizes can be configured individually, regardless of text size. This is not the case for spaces. Which is the exact point of the original post.
No it won't. You tab to reach the same indentation level and then use spaces to visually aign the code
Because OP is making a point that puts the frivolous points in that article to shame.
This is also my preference when you want to align something, but alignment isn't a big concern for me personally.
Dunno about Windows/Linux, but left Alt/Opt key works just fine on mac for °.
Yea, OP is talking about it as if accessibility for this kind of things ( blind programmers ) doesn't exist Fell asleep and the murican hate brigade appeared overnight to dislike. Guess the argument is over, cuz I can't talk with angry kids who get mad at questions
If you want alignment, you can always drop it to a new line and indent it.
You can tell your editor or a linter to let you know before that happens.
Other than for language constraints, I’ve never seen a solid argument for a team to use spaces over tabs. Tabs cater to personalisation. I also adjust my indentation depending on whether I’m working on widescreen monitors, or directly on my laptop. This change can and does happen several times daily. Tabs make this so much easier; I’ve tried with codebases which use spaces and it just gets messy very quickly - have yet to find an easy way to quickly make this adjustment without actually changing the white space (I typically use VSCode and WebStorm).
Found the English speaker. Seriously, in other languages with different layouts it gets used a lot.
 callMyMethod(method, "hi") .load() // What if I change a variable name or a parameter? .update() // Spaces will be added here .save() // Spaces will be added here
This argument never set with me: function name ( theseAll, lineUp, withTabs ) { return anotherName( andSo, do, these ); } chaining .also() .lines() .up() if ( this &amp;&amp; that || something &amp;&amp; isImportantEnough &amp;&amp; toMultiline &amp;&amp; JustDoIt() ) {
&gt; xparam2 should not have a \t since it doesn't need to be indented (only aligned) Probably a style difference. If parameters are on a new line I expect them to be indented: function foo(param1, param2, param3, param4 ) { so as I see it there's an indentation tab plus alignment spaces there.
I’ve always had a preference for spaces (unless I was coding in Go) but reading this made me change my mind. I’ll switch to tabs for all my future codebases. Thank you so much for sharing this!
&gt; alt I use it along with left/right arrow when browsing the internet
Given the choice between "Tabs and spaces" or "spaces", the former seems more complex.
 (lispers (do (this kind) (of thing)) (but better)) like: (do ((i 1 (1+ i)) (j (length l) (/ j 2))) ((= j 0) i) (iterate i j) (when (= (f x) 4) (setf *level-number* 0) (top-level x))) Those are different indentations
We don't yet have an official Angular integration library, but the redux store powering Drizzle is an observable and therefore can be consumed by a service in Angular. [Here's how we're doing it in Vue as a reference/starting point.](https://github.com/trufflesuite/drizzle-vue-plugin/blob/master/src/store/DrizzleAdapterService.js)
Damn this is good content
Default settings for emacs are straight from 1982. Hit the subreddit wiki for sane defaults, first thing anyone should do that's trying emacs.
\^ This is fine, when you only have 3 entries. Any more lines and you'll want to start storing them on a single line each. Any more than that and you want to read them from a file or server. But 4-10 lines of varying entries would probably be what you need to test out whatever conditional statements you're likely coding below.
\\n or \\r\\n?
The takeaway here is that you are willing to work with people instead of being a zealot. If more people did that, the world would be a better place.
I'm still kinda mad that we have *ancient* things like ASCII, and that the *old* tools failed to implement it properly. It's amazing how many times I've had to fuss with a data file because its some garbage .csv or .tsv happens to also have tabs or commas embedded in the data, when theres a character, *right in the ascii set* designed to be a record separator. (ASCII 28-31). Somebody had the design foresight to understand that we needed a record separator that would never appear in data naturally. And then some yokel was like "commas will just be easier".
Wouldn't it be possible to just auto convert back and forth in the IDE, in the build-process or something? &amp;#x200B; Have it check whats used in the file, save that, convert to whatever I like while I work on it or view, then convert back to whatever it was when you save. &amp;#x200B; At least in my IDE (netbeans) I can set it to be saved as tabs, but displayed as x spaces. &amp;#x200B; Why is this still a thing in 1019 somehow?
I'm one of those who can't proberly read code with two spaces. I'm not even really impaired other than having glasses. Still, two spaces and four spaces is the difference between a letter-salad and readable code for me. Don't use spaces, please. And if you really have to, don't make it less than 4.
Not at all, you will never have to worry about it. 1. Your editor already starts your line off at the right indentation level whenever you press enter to make a new line. 2. If anything sneaks by it will immediately become picked up by whatever linters you're using (either in your git hooks, build process or right there in your editor) 3. [Even your editor's extensions/themes can show mistakes](https://i.imgur.com/UljPZbn.jpg). &amp;#x200B; Even if you're on a dirt poor setup, turning on whitespace characters will immediately show you what is wrong. Our brains are so advanced and finely tuned for visual pattern matching that we can easily see what's wrong like it's the only thing there. \- - - - - - - - - . - - - - - Right there, I bet you spotted the mistake in the dashes above before you even realised what you were looking at.
Exactly.
I use a loop label here to continue the outer loop from the inner loop. If we'll remove the label it will just continue inside the inner loop. I need to stop the inner loop and start a new iteration of the outer loop.
thanks!
No one has tab blindness, genius. Making tabs as narrow as spaces will give you one. Next to saving you almost no space. You need at least 80 chars per line for code. Those three spaces you save? Do the fucking math.
I think there is a distinction somewhere involving the use of an anonymous function, such as if you did this: export default () =&gt; { return 'asdf'; } rather than this: const showAsdf = () =&gt; { return 'asdf'; } export default showAsdf &amp;#x200B; The difference there is in some diagnostic tools and possibly even `console.log()`, my first example doesn't show a name for the function, so if it appears alongside many other functions, you don't know which one is which, but the second example includes the name `showAsdf` alongside the function, so this can help in some cases. This isn't the type of thing that you would notice. I would consider it a fairly expert-grade nuance; maybe someone else can help me clarify what I'm trying to say. The main difference is that you cannot **overwrite** anything that is declared using `const`, so your first example acts as a signal to yourself later and to other programmers that your function is to be used immutably. It's relatively new syntax, and I might recommend using it simply because of the signal it sends to other developers. Try running this code and you will see the difference: function poop() { return 'test'; } poop = 'what'; typeof poop; console.log(poop); &amp;#x200B; Now run this code: const poop2 = () =&gt; 'test'; poop2 = 'rad'; console.log(poop2); The function declared with const cannot be "reassigned". It means you can never accidently overwrite the function, which would be a rare event but could maybe happen in a large file or in some cases where the function was visible inside a closure and then you tried to make a function of the same name inside that closure. Closure is a difficult topic for you to suddenly understand here now, but if you have a function, everything inside it is "in that closure". You will make a large jump in understanding once you gain confidence with "what closure is". A popular convention nowadays is to use `const` 100% of the time unless you physically can't because you need to reassign something. When that occurs, you can use `let`. &amp;#x200B; A good example of using let would be something like: let hasFriend; if (day === 'friday') { hasFriend = true; } else { hasFriend = false; } console.log(hasFriend ? 'ok cool' : 'not rad'); &amp;#x200B; You can change `let` to `const` and run that code and you will see that same reassignment warning. All of this has bearing on immutable JavaScript. `const` appears as a way to help enforce immutable patterns. My suggestion to you is to use `const` as much as you can, and use fat arrows (`=&gt;`) as much as you can because they will help lead you towards code patterns that you should be exposed to in 2019. Drive towards ES6 syntax and steer clear of ES5 syntax, but don't be scared of ES5. Try to understand both and be comfortable with both in case you inherit some code that is using ES5 syntax for any reason.
Eslint says no at my company :( Only 2 spaces for me...
Svelte is nice for personal projects but don't see my team using it anytime soon.
Can you just use continue 2?
Not in Js, as far as I know. Continue &lt;label&gt; is doing the same
But my code was *meant* to be read with two-space indentation! How dare you try to look at it differently! ^/s
I think you would enjoy watching Silicon Valley
i was exactly like you, coming into a new studio and talking about how spaces are the way to go. i hindsight my only real argument was "because everyone else does it like that" and because tabs are frowned upon. well thats both obviously bullshit and one of my new colleagues had the best explanation. a tab is a tab, and how wide it is rendered depends purely on settings of the given environment. since people prefer different widths (or require them as I've learned here), it makes no sense to enforce the width. we should only enforce that the code block is indented one indention unit and leave the visual part to the individual dev. this means that whether you do PR reviews or work on someone elses code, you'll never see their tab width preference. because your editor automatically shows the "one tab" in your preferred width. and its not even hard to implement on both web and editors. and "but our linter requires it" is not an argument because linter rules can and should be adapted to fit ALL your devs needs.
I suppose that if you were confronted with the choice of hiring two equally productive engineers of which one is visually impaired, and she required to change spaces for tabs, you would probably go for the other one.
Did you read the original posting?
\*slow clap\*
I get that OPs argument is more persuasive, since tabs literally enables people to do meaningful work, but it feels like this point from the 'frivolous' article: &gt; People can view your code in the way they feel comfortable with, not in the way *you* prefer.
I get that OPs argument is more persuasive, since tabs literally enables people to do meaningful work, but it feels like this point from the 'frivolous' article: &gt; People can view your code in the way they feel comfortable with, not in the way *you* prefer.
What I meant is continue 2 will continue the upper loops- however after looking at the code it seems like the loop needs to be started again?
Personally, I like to indent using braille so the amount of people able to read it is maximum.
We need to stop executing the inner loop and move to the next iteration of the outer loop. We are comparing byte arrays inside the inner loop and if loop completed it means that we found the cached record and we can return its value. If any byte between arrays if different we move to next cache chunk inside the outer loop
To make sure that the IDE of all devs working on the project use the same indentation, line endings, etc.
Then continue 2 is exactly what you need rather than a label
Except editorconfig does more than just set the indentation. They also keep line endings, trailing newlines, etc in sync between different devs and IDEs. So disabling the editorconfig isn't usually what you want when working on a project that uses it.
It can be overridden with a parameter in the URL on GitHub.
It doesn't supported in JS [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue)
That’s surprising as break 2 works - having said that it’s an old command as are Labels so the fact it works differently shouldn’t be surprising
Are you sure break 2 works in JS? The same syntax here [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break) I never saw break 2 in JS. I've seen it in other languages.
I could agree with this if there were a majority of visually impaired developers. Otherwise its optimizing for a minority at the cost of the majority.
why use space when tab do trick
their doc site is down
Each user can use their own $HOME/.editorconfig to override the repo-specific settings.
“Why don’t you just marry it then?!” - Amber Angulare, your current fiancée
I think it's one of those 'there is no good answer' problems. Their visual impairment shouldn't matter, but when it means potentially refactoring the entire codebase, it really does matter.
héü ñóå
Someone calls people prick, tell them to gtfo and self-defines as an asshole...not too big a stretch to achieve master level of cunt. So yeah, I guess I am. Thanks for asking such a profound question though. It's always good to get in touch with some existential angst to set the tone for the day.
I know it’s a mess, but that’s why I use tabs for indentation and spaces for alignment. So you tab to where the indentation is and space your way to make the alignment. Now when you want to view my code in tab stop 16, then it still lines up perfectly as intended. Because IDE’s are so bad at handling this, I usually have hidden characters enabled.
It's not much of an expense, though. Once you get used to tabs I imagine it will be no expense at all. But for that minority, it's night and day different.
Despite all the things the MS has done, the thing that still pisses me off most regularly on a daily basis is their decision to persist with \\r\\n. It's just so unnecessary, these machines aren't damn typewriters.
Hi /u/Hunorista, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Exactly, thanks for explaining the point I tried to make in detail :)
I prefer spaces myself, but with tools like prettier, husky and lint-staged you can fortunately have the cake and eat it, too. If I had to choose, though, I would, of course, opt for tabs if it made the lives of my colleagues or collaborators easier. &amp;#x200B; Having said that, I find it rather surprising how attached many developers are to dogma, given that most people that write code are fairly smart people. At work and in the wider community I have noticed that developers spend a disproportionate amount of time marrying themselves to certain ways of doing things while religiously trying to have other developers think exactly like they do, whether the issue at hand is the merit of destructuring objects vis-a-vis using name spaces because they make for more semantic code, or as in this case, moan and groan about spaces versus tabs and if you're on the side of spaces you will always find some asshat that thinks you're not using the correct number of spaces for indenting your code. &amp;#x200B; Consistency is great, but being a dogmatic asshole is not, and this is why I'm so happy about prettier being a thing in 2019... It sort of kills off the whole discussion, just having a set of rules that are enforced as part of the dev pipeline.
50!? God, how do you even live? I really Don't understand the standard of width 80, due to its just 1/3 of coding area width in my IDE. And here 50😱😱 We're in 2019, most screens are 16:9 full HD monitors or even wider, what the sence to use a standard made for 4:3 640x480 screens or even more narrow?!
I remapped the right alt key on my laptop to forward delete. Now I use it all the time.
By OOP I take it you are referring to Object Oriented Programming? &amp;#x200B; If that is not the case, please stop reading at this point while I crawl into a murky cave of my own choosing. &amp;#x200B; Object Oriented Programming involves the use of classes to encapsulate behaviour, broadly speaking; if you are going to go deeper than that things quickly become a bit confusing with JavaScript given that in JavaScript everything is an object, not to mention the fact that it is a prototype-based language. &amp;#x200B; As agm1984 points out, this is an anonymous function: const myFunction = function(){}; However, if you are writing object oriented code in JavaScript, unless you are writing ES5 code and using that syntax to type out a constructor function, you will not type out the method of a class as in the example above. Instead, you will use the syntax used in your second method in the context of a JavaScript class, like so: &amp;#x200B; \`\`\` class Human { constructor(name) { [this.name](https://this.name) = name; } &amp;#x200B; myFunction() { console.log(\`Hello, my name is ${this.name}\`); } } \`\`\` &amp;#x200B; You can only use that syntax for declaring a method in a JavaScript class. If you try to do so without one you will get an error. Similarly, if you tried to declare a method using the first example provided by yourself in a JavaScript class, you would get an error. &amp;#x200B; Please note that if you are declaring a method in an object literal, you can use a very similar syntax, but you have to append a comma, like so: &amp;#x200B; \`\`\` const human = { name: 'Bob', myFunction() { console.log(\`Hello, my name is ${this.name}\`); }, bodilyFunction() { console.log(\`${[this.name](https://this.name)} lets off a cracker of a fart!\`); } }; \`\`\`
You overreacted a little.
thank you so much i'm learning module patterns and my code already seems well organised in comparison to before, i do use Es6 syntax but i was told to work with the Es5 format of Object O Programming instead of ES6's type classes. So using const should be better then thanks.
I say hook it up with elastic search and kibana and you have all you need in the dashboard. No need to build from scratch.
Front-end bro
you'll have a bad time as soon as you open py file anyway
it's definitely a very quick and simply project, hence why it'd be good for someone wanting to practice. I was thinking of using chartjs for graphs
You need to choose between increasing the identation level with tabs or alignment with spaces without increasing the identation level. I prefer identation because if the lenght of the function name changes after refactory you will need to align all the parameters again.
Not to mention that what is trivial and what is not depends on the level of knowledge of the reader reading the article. When I started learning how to code I tore my hair out whenever I came across a tutorial where they would just skip something as it was deemed to be too "trivial" to be accounted for. If you are going to talk about things being trivial or non-trivial, at least provide an indication of what level of prerequisite knowledge is required to be able to follow a tutorial.
I guess you're right worth a try on Reddit Hope you do it if there are no takers sounds like a nice project
No. Let me explain again. When you use tabs, the width of the line depends on the width of the tab. So, if a guy who uses 8-spaces-wide tabs, commits lines that in his editor are 80-characters-wide, then in your editor those lines are going to look 50-spaces-wide (just an example, it could be 60 or 40). I was talking about the inconsistencies of the width of the lines when you use tabs. When coding I use 80-120 characters wide lines. Long lines are difficult to read because most of the time, they're long because you're passing multiple arguments in a function call, etc. But if a line is long because the function signature is long and arguments names are long then I allow 120 chars wide lines.
Ah, come on, that was funny.
When you use a clickbaity title like that, I expect a solid discussion as to why Svelte is the most beautiful web framework you have ever seen. Yes, it compiles to templates, or to shards of glass, but that does not tell me anything about its suitability for developing a scaleable and maintainable web application. Not saying Svelte is bad, I actually haven't tried it, but if you're going to make statements like that, at least back them up with a technical discussion and perhaps make some comparisons with already popular frameworks, so as to contextualize the points you're making.
I was continuing the joke, `over*React*ed`. :)
i like the first example thank you
I originally started with tabs because I also liked how customizable they are. I switched to spaces after the company I work at agreed on using spaces globally. There were more "pro tabs" people who were like "well, fine then". I don't know the argument though. What really convinced me though is YAML. This SO answer shares more information about it: https://stackoverflow.com/a/19976827/2496547 YAML is an indent based language and it doesn't allow tabs as indention because it causes some problems (Though I couldn't find the exact reasons, yet). What I just read in this SO answer is: A designer of the Python language also would force users to indent using spaces if he designed the language from scratch today, because "tabs cause headaches for many developers". But maybe it's a good idea to use one or the other depending on the language. And .editorconfig does allow that. But I'm also interested in the reasons for YAML and Python to forbid tabs and if it really only applies to indent based languages or all languages in general.
Ah, time for me to go and sit in the corner of shame, lol
Currently Im working on small side project: Todo List in VanillaJS. repo: [https://github.com/adbo/todo\_list](https://github.com/adbo/todo_list) demo: [https://adbo.github.io/todo\_list/](https://adbo.github.io/todo_list/) Please share your thoughts and ideas.
You get angry very easily. Chill out dude. Why should *any* programmers have to work at an indentation level against their preferences? Tabs facilitates that with minimal configuration; no need to set up conversions back and forth. Just because you can, doesn’t mean you *should*. Personally, I regularly adjust indentation levels of 2 and 4 spaces depending on whether I’m working widescreen monitors or directly on my laptop. My job requires me to move about, so this change happens multiple times a day for me. I haven’t found a way with any IDE to display 2 spaces as 4 spaces, or vice-versa - without reverting to converting white space to and fro. Using tabs I can quickly and easily toggle the tab width.
Wow amazing idea. I would like to save my lists somewhere and easy loading it when I need it, without storing files. Maybe localstorage or in the cloud storage?
Yep low quality post with subjective title
I found 80 chars width perfect for me and my team as we have two files opened in parallel, side by side. Adding the sidebar to that fits 1080p perfectly. Yes, there are 4K monitors but 1080p is still the most common resolution across teams. In a team that everybody uses 4K monitors I would set the width to 140 chars.
&gt;* so what would you do, spaces people, if you were in charge? overrule their pleas? As a practical matter, no. But tab characters are an inferior solution to the problem when we should have a better one. Consider all of the personal settings that define how your source file appears on the screen. Font size, font face, code folding toggles, etc. All these things that do not require altering the source file itself to define visual display features. Indent level should be like that. A file can have 2-space indent levels, and the editor should detect this and provide the ability override how it is *displayed* in my editor. Tab characters are indicating indent levels, when indent levels should be automatically detected by an editor parsing the file, and not require these special, manual demarcations. The solution should not be to have these competing whitespace characters. The goal should be to make every editor handle spaces-only files as if they had tab characters in them. There is zero reason an editor could not parse a file, determine the file's indent level spacing, and then treat those indents like tab characters.
I don't understand this argument. Here is the same code aligned with only tabs: let customers = [ { firstName: 'Brittany', lastName: 'Davis', orders: 5 }, { firstName: 'Dan', lastName: 'Cray', orders: 5 }, { firstName: 'Stephanie', lastName: 'McCormick', orders: 5 } ]; Is this any different from using lots of spaces?
That's pretty cool!
&gt; Why should any programmers have to work at an indentation level against their preferences? Because the practice is to have a team code style, not a *personal one*. If you have a personal indentation style, or indentation display, then everything you produce that's aligned (like doc comments) looks like garbage pretty much anywhere else. Including on GitHub which as far as I know doesn't have a tab width setting. Even if it did, you can't go change it personally on everyone's computer who has to view your code. Code is not just you talking to a computer. It's you talking to your teammates, and any person out there who might stumble onto your code, if it's open. maybe i have shity vision so i just stop using capitlas puntcuation and spell chekc my sentenencse why shlud i tuyp against my prefernses
mostly i like tabs because I tend to use my right hand on the arrow keys to move the cursor around the screen, while using my left hand to drink coffee. Spaces are annoying when you're trying to tap over 8 of them to the beginning of a line one-handed
You still need spaces for some things like alignment: myFunction( arg1, arg2 ); Because you can't use tabs in this case. So you end up with a mix of both, and since they look the same it can lead to confusion and inconsistency (what if you accidentally put some tabs in the example above?) I've actually never used tabs because every place I worked in had spaces required by style guide, and for personal projects spaces are a lot easier to work with. But if someone wants to use tabs they'd probably need some tooling to highlight incorrectly used spaces/tabs in a context sensitive way.
You still need spaces for some things like alignment: myFunction( arg1, arg2 ); Because you can't use tabs in this case. So you end up with a mix of both, and since they look the same it can lead to confusion and inconsistency (what if you accidentally put some tabs in the example above?) I've actually never used tabs because every place I worked in had spaces required by style guide, and for personal projects spaces are a lot easier to work with. But if someone wants to use tabs they'd probably need some tooling to highlight incorrectly used spaces/tabs in a context sensitive way.
they probably have automated this when working in projects with spaces, but it could still add an extra step, and cause problems if the automation isn’t perfect, making their commits touch lines that they didn’t manually edit. sounds like the issues described by op though could be possible to instead solve by using an editor that can detect indentation whether it’s tabs or spaces and display the user preferred indentation width. I wonder if there is a sublime plugin for that, I might want to use that myself. there could be situations of course where tabs would still be better than spaces too, depending on how the visual impairment work. I just like tabs myself so I’m happy for any reason to use them.
How would that work in a way that isn't tied to specific code formatting style? You can't just replace every 4 leading spaces with a tab and be done with it.