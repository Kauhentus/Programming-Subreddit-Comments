I am well aware of the fact that AngularJS and Angular are 2 different frameworks as I booting up a migration process right now from a medium sized application. Somebody has to start to eat this massive shit sandwich at some point and it seems to I am the one designated driver. Then no wonder the magic world of "Angular" left a nasty taste in some peoples mouth.
I understand people here saying that "you should ask for more", "you deserve more" and so. I do agree with all of this. But the majority of people that are saying this are developers from the U.S. I'm a front-end developer with 8 years of experience from Brazil and living in Brazil. I earn a very good salary for the brazilian standard (specially for a programmer). Do you know how much I make? Less than $15k/year. &amp;#x200B; To the people saying that we should just "ask for more" and "value ourselves": **do you have ANY idea how hard is to earn my salary in Brazil?** Do you know that the average salary of a developer from California here in Brazil is bigger than the salary of OUR PRESIDENT? &amp;#x200B; Sorry if this brings the whole profession down or whatever, but if someone offers me $50k to work remote to a good company, I'd accept it anytime. You have no idea of our reality, please be sympathetic.
It's hard to say which of the two OP wants, but The result of your code is different from the result of OP's code.
Would I be right to understand that the ball moving the full horizontal distance should happen over the scroll distance of no more than a few pixels? If so, you'd probably want to figure out the place where that is (using path.getTotalLength()) and "skip" from the start to the end there (probably also add a transition property to stroke-dashoffset to maintain smoothness). Otherwise this solution should still be perfectly workable.
Ok. So I'll give you one out of five points. That's a better track record than any redditor usually gets.
There's sometimes reluctance because moving to ES6+ is more complicated than just "start using ES6". Unless you're able to target *only* browsers that support ES2015 syntax and modules, you're going to end up using Babel and probably webpack. So unless you're already using Node, you have to get every developer to install Node, and run npm install, and you have to also make sure this happens on your CI and build pipeline, and set it up so that when you run your application in debug mode, webpack spins up in watch mode and makes it so that changes to .js files are usable immediately, and also ensures that when you do a production build of your application, you also do a production-ready build of your JS. Whereas with the current workflow...you edit your ES5 file, and reload your page. No fuss, no setup required. Maybe zip your JS files through a minifier before you deploy to production. Now, if your application is complex enough, I'd argue that the setup time to get a nice ES2015+ pipeline up and running is worth it. But it can be a huge pain in the ass to get all of this integrated into an existing team and existing CI and build pipeline. I think in a lot of cases, teams would actually *like* to do all of this stuff, but they have tight deadlines to meet, and even if their current ES5 workflow is somewhat less than optimal, it is at least fairly predictable. I've also encountered some teams that think ES2015 is lovely and amazing, but aren't willing to put up with a JS build pipeline that required ~200MB and tens of thousands of files in node_modules to get things done. On the upside, native browser support for ES2015+ and ES modules is looking pretty good. So we're pretty well at the point where you can just use it unless you have to support IE users. 
It should work fine since you could just take the path element and duplicate it still. In my example I have the svg position fixed, but you'd just position it normally. The only challenge I think with having it work for your use-case would be dealing with the horizontal portions of the line.
Your reality is not OPs reality either. I dunno how well the wages are in Italy. But whether or not he is being low balled does not depend on wages in Brazil either, neither on wages in California. 
" But the majority of people that are saying this are developers from the U.S (or another first-world country). " You and others shouldn't be comparing yourselves to anyone in the United States, and you should be happy to have a job that you enjoy(if you don't, get a different one) that pays decently for your own country. That is the reality. 
Divide the scroll position into 3 parts (one part for each line) Now create 3 functions that determine the x and y coordinate from the current scroll position (3 functions, one for each part) Now, depending on the scroll position, call one of the three functions and set the position of the circle accordingly. 
Yeah
All the existing table libraries I have used were a gigantic pain. If you are using a JavaScript framework, it is very easy to make a sort-able, filterable, paginated table by simply binding your view to an array with a loop. To sort/filter you just use the JavaScript .sort() and .filter() methods on the array. The framework will dynamically re-render the list for you. To paginate, bind to a second array that is a .slice() of the full data array. Now you do not need to learn some goofy API, and you have a custom table that looks and acts exactly as you need.
got delayed... i have complied some preliminary files here: https://github.com/sirgeo/Global_Temps_1880toPresent am i on the right track?
You want to do it?
Let's do it 
Heyy this looks pretty kickass (big fan of simplicity and dependency minimization). The source code looks like it only accepts a concept of center/radius, do you have any plans to open it up to a custom shape definition? In my case, I'm querying against a set of multipolygons that are just an array of coordinates defining the shape. &amp;#x200B; Regardless of my use case, it's really cool, I have a great appreciation for concise packages that set out to do a clear behavior in a sustainable fashion.
Pretty sure our mortgage on the house is 30k a year at least. Gotta factor in cost of living my man If someone made 100k and got taxed and is left with 75k and has 30k a year on mortgage they are left with 45k to spend for a year excluding food / gas / other bills. 
Bom Dia! I support what you are trying to say. So many people talk about salary from the perspective of a silicon valley dev who can just move to another company down the street if they don't get at least $100k/year. I'm from a small canadian city and we probably have 100 jobs in the whole city and if you can make more than $60k/y then you are doing quite well. If one of us was to go "I won't work for less than $100k", then we would have two options: trying to find a remote job to make that much, or moving away to a larger city. 
Postgres with jsonb works well. I moved away from Firebase, too buggy and deploys were slow and unreliable.
well said
Looks like Zsh with an [Oh My Zsh](https://github.com/robbyrussell/oh-my-zsh) theme.
&gt; To sort/filter you just use the JavaScript .sort() I'm not so sure about that. Or at least you have to create the proper data structure first. I think I mentioned this elsewhere, you don't just want to sort the values corresponding to keys from Javascript objects in an array -- this does not in my mind (and I'm willing to be persuaded otherwise) sort the objects themselves *within* the array. Does that make sense? (Not trying to be condescending, actually just making sure I've explained myself sufficiently) I'm actually working on creating a data structure that will do what I think is necessary, I'll post it when I'm done, maybe what I'm doing is overkill, I'll be interested to get feedback. 
Not particularely uswfull for length, widrh and color in this case but should you ever want to do additional computations when detting one of these properties, then it gets usefull. E.g., right now area is calculated whwnever you access it. Instead, you could calculate area right when you set the length or width and then return the already computed value. Coule speed things up when you rarely set length or width, but often access area.
Woah, nice work! It's almost human like
I don’t doubt you, but I wonder how many of the 20,000 JavaScript developers surveyed knew that. The reason I bring it up was because for a time I didn’t know the difference either 
I think Node is about as popular as it will ever be. It got popular because it's an easy gateway technology for developers who start with frontend programming to get into server-side programming. If you are already learning C#.NET, it would not be a bad idea to stick to it for building web services, and focus on JavaScript for frontend. I say this because I have recently been looking for jobs, and .NET as a backend technology seems to be quite popular, especially for jobs at companies that value developers with a little more education than a bootcamp.
Hi /u/scoutcoupon, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'. Thanks for your understanding.
&gt; But the majority of people that are saying this are developers from the U.S (or another first-world country). American work ethic is such that unpaid overtime is considered virtuous. Someone who works 80 hour weeks for $100k/year is earning half of what the person who works 40 hour weeks for $100k/year is earning. 
i am trying to search by name of the place so i can get this info in the pic 
This has already be proven to be exactly the other way around by countless studies. Please stop spreading this nonsense. Also the fact that you dropped out because of lack of representation ironically makes you the very reason why this problem exists in the first place. If you lack the ability for objective thought you are better off in a different industry anyway. 
for nextjs how did you use workbox? I mean did you use through webpack or core workbox inside static folder?
You can sort an array of objects just fine. The sort method takes in a compare function, which can compare object properties. I made a [Code Pen example](https://codepen.io/anon/pen/VVQpEQ).
I know how to sort an array of objects. But they need to come back in the order of the value for the object's key. So as far as I can tell, you need to create another data structure in order to properly perform the sort.
I think you want the [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).
Async await may have a bit of a learning curve until you figure out all the pitfalls, but its so worth it. It's the cleanest and most maintainable way to build responsive apps.
First of all, I did say it was my personal opinion based on anecdotal evidence. I apologise if you perceived this to be “spreading nonsense” but in no way did I state that my opinion is the 100% uncontested truth. If I wanted to spread nonsense, I would state that there were countless studies that backed up my claim, without providing any references to such studies to indicate my thorough research on the topic... sound familiar? Secondly, I dropped out of CS because I felt that there was a better way of learning to program that was more suited to my personal learning style. I’ve found that I learn better alongside a community (particularly when this community is mostly female, as I attended a single-sex school for most of my life). It turns out I was right – I learned more in 3 weeks coding alongside women than I learned in 3 months being lectured at in a room full of men. I’m sure there are other female CS students who may not have experienced the same issues that I have, however I want to assure those that have experienced such issues follow their dreams regardless.
wow dexie looks nuts
Too me: strong opinions, even weird ones are always better. I'm less worried about how long it takes someone to get up to speed and more concerned with how productive someone can be within a large application once they understand the framework. Ember does that IMO. It's the rails of the FE. Not perfect, not fastest, not smallest, but you can be incredibly productive without needing to understand everything about everything. Just learn how to generate a model and controller and you're 90% of the way to building an app.
Es6 is nice but retrofitting an existing and working product to work with a transpiler may not be worth the often.
You can structure your options like this [ { name: “option1”, value: false }, { name: “option2”, value: false }, { name: “option3”, value: false } ] Whenever the user select one of the options you just change the value to true, then loop the array and check which options are false. I would suggest you to refactor your logic, you are using the select backwards(detect the unmarked).
We're looking to migrate from AngularJs because EOL has been defined. Most of my peers don't even want to consider Angular as a replacement because of their poor opinion of AngularJs. I think the Angular team were hoping to build off the brand when creating the new Angular but what they didn't know was their brand was was going to be toxic.
Yep that is definitely it, just trying to find out the plugins he used to get that look. No luck so far
Doesn't help that, for example, webpack docs are spotty at best. It took accidentally running two file observers in parallel and finding the one config property that pointed the RAM transpiled stuff to a URL, to get the damn thing working in the first place. That's just my experience with it, and now it's no problem anymore since I know how it works better, but anything that requires the least amount of admin can fail at first, and that's annoying and discouraging. It's like being locked inside a dark room with a candle. You go searching for features with that dim light and it might take some time until you find the light switch. Wouldn't switch back to ES5 now, but the annoyances with getting a system to work like it's supposed to is not pleasurable.
Yeah I totally agree. That's the reason why I stayed away from Angular for so long. I didn't trust the maintainers to keep a platform that didn't make extreme changes. The only reason I'm using it now is because I wanted to try use as much Typescript native stuff as poosible.
one does not simply *not use* es6. seriously. just because they dont *const* every little thing isn't a reason to get upset. besides if you're using babel and transpiring it down to es5 anyway, who cares? ex igne vita...
It's depressing because, it isn't that they aren't willing to work in this industry, they're being actively discouraged/under appreciated/harassed. The path for women in our industry is unnecessarily hard. For no good reason. There are pockets in our industry where it's downright toxic.
I should give Ember a shot. Strong opinions is what makes thing less complicated. One way to do something is way better than 1000.
You pass a callback to the load function which is executed when the load is completed.
I doubt there is an NPM package that does all that. You should be able to find some to help with validating json, text editor and text highlighting, and possibly a form/grid builder to allow the user to edit the data.
I believe this is 'hyper-material-theme' configured to 'Palenight' and the status bar at the bottom is 'hyper-statusline' 👍
And? Most women don't feel the same way. I've had about 5 female friends all take interest in CS and or web development, and all of them did not enjoy it.
actually found something similar to what i am looking for..[https://github.com/dustingetz/react-json-editor](https://github.com/dustingetz/react-json-editor)..thanks
“5 female friends” = “most women” ??
Ok, and why not try to give me some code book boy?? I write code and I am not a professional... You dude?
It doesn't look like that package would give you your #1 and #2, but it definitely looks promising for 3 and 4. I would just reference the code and do something similar because it seems like it's not supported much and uses quite old versions of its dependencies like React (0.14.6 is &gt;2 years old) and Webpack.
When I moved to Typescript there was no going back for me (I have statically typed langages background). Type checking + noimplicitAny will catch a lot of possible runtime errors at compile time. Also worth mentioning, with Typescript you don't really need to worry about the version of ES: along with a very simple rollup.js setup, you switch the versions in a blink or even comple several targets, complete with UMD!
Hard as in they have to be able to program?? I’ve seen a fair number of women who got jobs way over their head and better grades in school for just having a vagina. I’m all about meritocracy. Prove yourself and most people will respect you. 
Are you rich with 10k in india? I dont know the salery ratios there.
The [Google Places API](https://developers.google.com/places/web-service/intro) should have all of that info.
10k in India would be okayish, not rich.
It's decent to live as a bachelor but their are some top companies paying 30-50k to UI devs in India. 
you use custom setter and getter when you want to not just mutate or access the underlying property; you could make sanity checks in setters or make a getter a computed value (e.g. `get input () { return document.getElementById('input') }` ) instead of a static one
Yep that was it more or less, played a bit with the colours for the material theme. Also for the geometric triangle at the beginning I found this [oh my zhs theme](https://github.com/geometry-zsh/geometry) 
If you find an issue with the docs, simply fix it and issue a pull request. That's what open source is all about.
Conflating, yes, mistakenly, no :). I agree there is no requirement to do that, and if your project is using one or two libraries, you can probably get along with the bare minimum, which would be just resolving requires. But.. my point was, and still is, once you start using more than a few JS libraries, you will inevitably reach a point where at least one library is using a new syntax (and thus you need babel *and* the polyfill), or just new library function (and you just need the polyfill). Either way, we're long past the time when complaining about libraries using new library functions made sense. And in fact, I'd argue it's now time to actively encourage use of the new functions *and* new features, because the alternative is that you're stuck with old crud just because there may be one user who doesn't know how to configure their build process.
It’s not just computer science; diversity in all things brings different views and perspectives to any and all problems. Specifically computer science - we need different perspectives to solve problems. A girl might take a look at how to solve the traveling salesman or NP hard problem differently than a man might
&gt; * TS warning about `null` and `undefined` and forcing you to handle them properly, is a great demo. How does TS help with `self`?
Hi, I believe you might be lost. This is r/javascript, not r/malevirgins
This is the correct response to the correct answer
The link expired, unfortunately Can you send me a new one/include a permanent one? Would love to check it out! 
Go apply at G2i with some react skills. We are paying 85$ per hour for a guy living in Uruguay, I think G2I takes only 15$ off the top. If you find the right shop in the US like G2i or toptal and your skills are up to speed, you can make a pretty good wage by working remotely. Especially if your communication in English is top notch. 
It's kind of a myth that gender/ethnic diversity is the solution, rather it is thought/perspective diversity that counts. And it can come from anywhere. I don't think a lot of us white males got into coding because we wanted to be in a racial/gender homogenous profession. We do benefit from it not being that way. But to say that we will solve problems better just by having that kind of diversity is misleading and is the wrong projection. 
The answer is in your question. 
This is the correct comment in response to the correct response to the correct answer.
I'm all about meritocracy as well. I also believe that there's a disparity in skill between people, it has absolutely nothing to do with gender, race, caste, religion or even experience! We all learn at different pace, &amp; grow based on what problems we've encountered in our journey. You say that one should prove themselves to be respected. The problem is, females don't get that chance. Here are some examples that I've *seen* 1. They start their career by having to prove themselves. People just assume they don't know, give unsolicited advice on what they were going to do anyway. 2. They get talked over. I've lost count of how many times I've seen this. Crazy thing is when ever I pointed it out, some tried harder to talk over them. 3. They don't get opportunities. Plain &amp; simple. There's always excuses. There will be travel, oh there are long hours, there are odd hours, etc. Hell, so many don't even get a fair shot at an interview. Here's an experiment you can do. Ask men &amp; women, if they were asked about their marital status in an interview/casually. As a follow up, ask them what happened to their career/opportunity after they answered. 4. Salary. They're undercut, massively. I have seen more than once, a man &amp; woman apply for the job with similar profile, the woman got offered much less than the man! There is no winning here. If she joins, people know she settled for far less &amp; think she must be desperate. She declines the offer, she misses on opportunities. I can go on, but I must stop as I'm tired. Here is the thing. I'm not advocating hiring for giving them an edge. I hate when companies hire to meet some diversity quota. I'm not even asking y'all to go out of your way to help them (would be great if you did though!). All I'm really asking for is: Don't actively push them down. Don't make their job harder. 
gender/ethnic diversity leads to thought/perspective diversity, particularly in a field that's so heavily dominated by certain demographics.
Very biased, you should see the react fans talking about that at my job
That comes from the ROR motto, I love that
1st one: * They're working on one product which means it's most likely a larger code base * As it's SaaS they probably have an API their customers use in combination with some kind of admin interface. So you'll get some experience from both those worlds and how to deal with API changes consumed by a third party * All the technologies are quite attractive * They know what they're doing, what you will be doing and have a clear business model * I would guess you'll have beter mentoring than the other option * Will you commute everyday? Is it realistic? 2nd one: * They're trying to make it within e-commerce and are doing side gigs to get by. It sounds much more risky to me. Also it sounds much more short term, things like quality are often down prioritized to get bucks as quickly as possible * I would avoid PHP. The risk of ending up doing Wordpress site after Wordpress site is much higher. Or being stuck in some other kind of CMS focused job where there is less interesting coding and more repetitive work. It doesn't have to be, but I think the risk is much higher * The commute will be much better than the 1st one! I think you'll get jobs regardless of which one you pick. You can also end up with the type of work you enjoy doing regardless. But I think the 1st one sounds much better and more like a step in the right direction from the beginning. I would certainly pick that one.
The correct responses are always in the comments. 
Do you have any sources for this? While i'm sure anyone could find a few anecdotal evidence of sexist shitheads being sexit shitheads on twitter, sexism still exists in quite a few male dominated fields (especially technical). What makes the web space so toxic? Are women really being actively harassed for trying to pursue a career?
Good human
React is still a winner!
Hi Patrick
I can reach out to my ex colleagues to see if they would be open to discuss. Any particular point you would like to know about. I also remember seeing a Twitter thread about this topic, will see if I can dig it up tomorrow.
I would say it’s not confined to web dev, it’s definitely a tech-wide issue: https://www.google.co.uk/amp/s/www.alphr.com/technology/1000773/the-uncomfortable-truth-about-sexism-in-tech%3Famp As to why this is, why don’t we ask some of the sexists commenting in this thread?
If you cite "countless studies" you're expected to directly source at least one of them. As of right now, your claim is completely meaningless. 
Worst philosopher ever
While I agree with you, your last paragraph is a matter of personal preference. I for example prefer directives instead of jsx. I find it just too hard to read. It's like some messy spaghetti code. That's the reason I prefer use Vue when I have the time. 
We called it a glitch in the matrix. There was even a hot one once, crazy stuff.
/u/ugwe43to874nf4 is correct. That is close, but not exactly the same. `newObj` needs to be a reference to `otherObj`, including `newObj.newProp`. i.e. a circular object. In the end, `newObj` would actually be `otherObj`.
Yeah on our project, we've also many records, and aggregation can get slow depending on how you setup your mongo indexes (you're using indexes right) Our decision was to create a script to synchronize edits to an elastic search instance. Elastic search is crazy fast but takes some time to get used to.
They should all share the same name so Array.from(document.querySelector(“[name=myRadioName]”)).filter(item =&gt; !item.selected).map(item =&gt; item.value) 
This is a portfolio site I've just started building. I'm not even in university yet, I only made this site to learn React and to maaybe find some freelancing gigs. The C# projects page is empty as of rn.. https://github.com/Zecuel/Portfolio I should add, it's not complete by any means, last commit was a week ago due to finals &amp; this was my first project with React. :)
I'd wager my point still stands. Far more than yours.
Depends on market.
&gt;I like Redux’s approach to state management infinitely better than anything Angular provided. A number of our app screens are highly complex and using Redux felt like taking Alexander’s sword to the Gordian knot. Isn't NgRX, a popular Angular state management library, essentially a copy of Redux (only adapted to Angular’s use of Rx, something you might see in React land in redux-observable)? React is great, and I write it on a daily basis, but React hasn't standardized on certain things that are quite central for a web app. Router? Pick your own. XHR-requests library? Pick your own. State management options? Pick your own. Patterns for writing components? Pick your own (classes, functions, HOCs, "render props", hooks). Which is both awesome, because you can truly pick what you love, but somewhat disconcerting as well. Also, as far as I heard, Angular has an interesting story with ahead-of-time compilation and the new Ivy renderer (getting the "hello world" app to below 10 K of javascript — was it 2 K perhaps?), while with React it is still uncertain whether Prepack will be able to significantly reduce the bundle size because of the inherently unpredictable dynamic nature of JSX. And of course RxJS. I haven't used it properly in production; probably that's why I envy those who do.
&gt; It's easy to argue with statistics you don't like. See [this video](https://www.youtube.com/watch?v=UnEPBQvkNrg) for a great rebuttal of their methodology, with multiple points from an actual statistician.
Libraries don't play videos. Browsers do. It's hypothetical for a library to read a file's video contents, decrypt it, and reencode it in another format. I don't believe there's any incentive for anyone to do that, because it would be unbelievably slow. Your best bet would be to do the conversion _on the server_, not _in the browser_. Not only could the server do it faster, it would have better resources to handle caching the result and better tools available to it to do the conversion. As a result, most (probably all) libraries for video conversion will be server-side libraries.
For me, on the other side, it's depressing that many projects will not benefit from the different perspective women can be to problem solving.
Just wanted to say that this is so close to my experience it's chilling. We've been making a large scale app on Angular 1, looked forward to Angular 2. When it dropped we didn't like the direction at all, stayed 1.x as long as we could until we realized maintenance isn't going to come easy the longer we wait. We did move up and wasted more than a year rewriting the app from scratch only to burn out capital and have the project die eventually. We went Vue afterwards since JSX seemed weird, but after a while we ran into the same problems we had with Angular, MVC, DI and templating in general. Eventually we couldn't ignore React, it just grew too big. One day in with JSX and i couldn't explain to myself any longer why all these years i thought separating the presentational layer and the view was a good idea, it just started to make sense to combine the two but instead separate logic/state, and the way redux especially did it was an eye opener, even though we tend to use simpler, modern solution for state now.
If you're fine with **polluting** the Internet with shitty JS libs then YOU are in the wrong profession, my nobody.
Do note that this is a biased poll. The Devs are react devs and mostly have react Devs respond so it's quite skewed in that respect.
XD
This is the correct Patrick 
&gt;why don’t we ask some of the sexists commenting in this thread Perhaps I understand the word *sexist* wrong, but to me it implies that someone treats males and females differently. This is not the vibe I am getting from this thread (or from the place where I work). The general feeling is that of indifference towards the person’s gender as long as they write good code. Ironically, it's the people who use the word *sexist* who actually talk about gender at all, and how we need more people of a particular gender (or genders) into programming.
This is what a parenting looks like. Amazing.
[removed]
Woman are not really good with logic. Take you for example, just because people don't see this depressing, 'cause nothing stops women to learn, suddenly it's about "fragile masculinity" and being afraid.
Lord, everyone loves this waffling video. ...but, I’m going to make three points: 1) Re read what I posted, because that video makes no effort to address if people *like* angular, only if they use it. 2) His only meaningful claim that the survey results are invalid is that there is a sample bias, but he just *supposes* that is one, without any actual justification. 3) Please, don’t subscribe to this guys channel, because seriously, fuck people who have a tiny point to make, and force you to watch a 10 minute video to hear it. Finally, the point he makes is entirely valid; the survey is probably not representative of the entire community; but he’s an idiot if he thinks a 20000 person survey is too small to be meaningful. He *obviously* has his own biases in his analysis, so you know, take it worth a grain of salt either way. 
Yes, pretty regularly * Most major tech and media companies have their own branding, they will have their own suite of UI components * Any widget with complex business logic (e.g. range calendars on a travel website, interactive charts in a financial software) will not be feasible off-the-shelf * The website you are on has its own CSS/branding (in fact per sub-reddit) * All the infographics you see by newspapers are usually made with from stuff like SVG, Canvas or D3.js (which is a polygon/line-drawing library) * In fact I just built 2 widgets in the past few weeks (a custom checkbox and a toast notification) P.S. Might be biased since I do live in an area w/a lot of tech companies
All dogs are correct dogs 
I work at a fortune 100 company that does a lot of JS development and it's getting better. We now have a lot of women developers that are providing a lot of value to their teams. Women in technical leadership positions is still incredibly rare but I'm hoping that it's mostly a consequence of having few women developers in the past and as our current group gain experience they move into leadership roles.
Oh dear
You could use jQuery to ... *ducks shoes and spoiled fruit*
I think the overall trend is up though
Dude didn’t even google for it
They're popular in testing libraries. Everything thinks it's cool to do `expect(foo).` **.not** `.to.be(false)`. Honestly unless you consider that "good" (I'm on the fence) I've never seen a good use of getters/setters in my life. To be fair, I don't believe in pretending Javascript is Java and trying to encapsulate stuff (whether with hidden inner functions or getter/setters), so if you're one of those types you may feel otherwise.
I'm mostly a java developer and your advice is very good advice to apply to most languages. 
Wtf. 3/5 people on my team doing frontend work are women if we're just going to arbitrarily use anecdotal data as some kind of point.
Check out LeafletJS, it’s a pretty robust library for this. 
For coordinates, geometry, and superficial info, the Places API (Google Maps), for more info the Knowledge Graph Search API. My favorite module for KG: https://www.npmjs.com/package/google-kgsearch
https://www.npr.org/2014/03/21/292225798/does-diversity-on-research-team-improve-quality-of-science http://news.mit.edu/2014/workplace-diversity-can-help-bottom-line-1007
I find there's quite a bit of sexism in all of the male dominated communities I move through (I'm a huge gamer which includes FPS). There's definitely flat out sexists. You aren't going to see the act of a sexist doing sexist things very often if you aren't a woman. Why? Simply it's a numbers game. If 1/20 (arbitrary number) randos I meet do something stupidly sexist, then I have a 5% chance of having a sexist encounter. If you only interact with women in very small doses because of how skewed the gender numbers are, that means the 6% of the time you interact with a woman only has a 5% chance each on top of that the randos are going to do something sexist. This means even though you don't see women being harassed doesn't mean it's not happening. This is why it gets REAL annoying when a woman says "this is my experience" and someone else comes in and says "I don't see it that often"
I came from Java/C++. When I got heavy into Node in 2014, I found AsyncJs to be helpful. Later a function called autoInject came out which is really helpful to express complex scenarios where you have several IO request, some you can do in parallel, some you have to wait for others. Promises are okay, but it’s easy to only build the happy path. I use them daily, but not thrilled with them. async/await feels nice to those coming from other languages. In general, I recommend videos or books from Douglas Crockford as he did Java for decades so he focuses on teaching what C++ and Java developer don’t think to ask or wrong assumptions they make about JavaScript and especially warns about features in the language you should never use. This was incredibly helpful to me to write readable code.
gatsbyjs powerfull https://www.gatsbyjs.org
1. It discredits the article’s claim that a growing portion of developers dislike angular, which is the point of contention in this thread. 2. it’s clear using other metrics that there is a sample bias in the survey population. 3. this guy’s channel is not the one who posted the video. The angular firebase channel has a lot of useful content about other stuff. This guy just happened to be posted to it. Finally, to address your 20,000 people fallacy, you can have a selection bias with a million people if you want (just ask every McDonald’s customers what they think about Michelin Stars). The sample size does not guarantee no bias, only random selection amongst ALL developers would guarantee that, but they decided to go with communication channels they had access to, and since they’re heavy react contributors those are likely to have a more react friendly population. This is proven by using other metrics, like in the video, such as job postings, general downloads and documentation website ranking. I don’t know what else to tell you. 
There are lots of free APIs that exist. Make a weather app, or a dictionary, or a peer-to-peer video chat application using WebRTC.
Why not find an [open api](https://github.com/toddmotto/public-apis/blob/master/README.md) that looks interesting and building something around that?
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [toddmotto/public-apis/.../**README.md** (master → 67221be)](https://github.com/toddmotto/public-apis/blob/67221be874e5541dbd15dd2a2718743d0e295aab/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply ea7eotu.)
https://youtu.be/UnEPBQvkNrg annoyingly biased report against Angular. watch video to know why
Not quite, though you're on your way. &amp;#x200B; Images look like they're good to go. &amp;#x200B; **Your HTML File** The &lt;li&gt; elements in this file should all have the "onmouseover" attribute that I specified in the third block of code above. This attribute is necessary to trigger the JavaScript function. Make sure you set each to the appropriate image URL. This file is also missing normal HTML structure, including &lt;html&gt;,&lt;head&gt;, and &lt;body&gt;. You can refer to [this article](https://www.w3schools.com/html/html_basic.asp) for more information. Additionally, you'll want to link any [CSS](https://www.w3schools.com/html/html_css.asp) or [JS](https://www.w3schools.com/html/html_scripts.asp) files. &amp;#x200B; **Your JS File** Line 1-2 and 6-80 are HTML. You can remove those. I included them in my code above because I intended for them to go in your HTML file for simplicity's sake. It's fine to have a separate file, but the HTML parts have to be removed. &amp;#x200B; I know you said these were preliminary, but if you're still a beginner with HTML and CSS I'd recommend making sure you have solid knowledge of the basics before bringing JavaScript into the mix. Nothing wrong with being adventurous, but knowing the fundamentals may make this much easier for you.
You can use a placeholder service such as https://jsonplaceholder.typicode.com, which provides dummy data for applications that don’t have APIs available to them. If you need control over the content but don’t have the bandwidth to learn back end development you can use the Contenta CMS: https://www.contentacms.org it’s an API first Drupal distribution that lets you create set up complex custom API content via the admin UI - no coding required. I’m also a fan of APIPlatform - https://api-platform . This one does require some back end coding, but it’s an incredibly fast way to set up a simple API once you know how it works (there’s a good course in Udemy that you can find cheap with a bit of googling)
Correct!
You are welcome. Basically .pipe() calls internal code which make further calls to .write() to detect whether Writer buffer is full and .drain() to resume reading memory once Writer is ready to consume more. I think we can write our own version of pipe easily with API available on Readable and Writable streams.
&gt; you will inevitably reach a point where at least one library is using new syntax You're right, you will; because people like you are out there writing code. But if it's a one-liner library you can do without, then you will. I really can't believe you're even arguing this point, `Array.from` literally adds almost no value here (can be simply replaced), but adds restrictions and caveats yet you still say we should use it _in a library_, pushing all those caveats to your library implementors, "because it's new!" Like wtf, seriously.
It's a double edged sword mate, I don't think there's anything quite as despair and frustration inducing than having a bug in your code that you can't fix.
The pure theme will get you close
owo
I guess my thinking is that the idea that there’s not one framework to rule them all is a big part of what feels right about the JSX community approach. That’s what it was like before Angular. And switching to Angular definitely solved some proliferation and compatibility issues when building stuff. I loved it right up until two things happened: 1) Needing not-Angular for something. Angular punishes you a lot for stepping outside of its lanes. 2) The horrible realization that if you have a monolithic solution and it goes in a direction you don’t like, you’re boned. With a JSX community approach you may not have an out of the box approach like you do with Angular, but if one of your libraries is no longer the best choice you can swap with *far* less pain. 
Webpack docs are pretty good these days. Much different than when it first came out.
Usually startups are willing to pay higher in hand and lower perks. Startups like Swiggy, AnaRock, Uber, Ola, Flipkart 
Yeah, I feel that computed getters go a long way to making my code readable and DRY. E.g., get currentDiv () { if (this.someVar) { return document.getElementById('div1'); } else { return document.getElementById('div2'); } } function someFunction (blah) { this.currentDiv.innerText = blah } If it weren't a getter, I would have to write `this.currentDiv().innerText = blah`, which doesn't sit right with me. Maybe I'm crazy :)
Heroku automatically puts nodes to sleep when not used, and won't wake them up for node-schedule. Take a look at Heroku's scheduling tools instead!
Java dev myself... Used to initially spend 10% of my time on JS but now it's more like 90%'
I assume this does not work on iOS? :/
I think it does. There's a special HTML tag for app capability on iPhone
wow it looks really nice! &amp;#x200B; Did you style it all yourself? I don't see any css frameworks in your package.json. &amp;#x200B; How long did this take?
when you say you can't write backend code, is it because you don't have an environment set up for it, or do you just not know how to? &amp;#x200B; If you are interested in learning how to make a backend API, i highly reccommend learning how to use serverless functions. in Amazon Web Services this is called Lambda, but Google, and Microsoft have the same kind of service. &amp;#x200B; You simply upload your function,and the function gets executed whenever a user makes an HTTP request to your endpoint. Your function can do a lot of stuff like read/write to a database, send notification, return html rendered strings, etc, etc. &amp;#x200B; The best part about serverless functions is that you don't need to manage the servers, and they scale a lot easier than traditional servers. If you spin up a small server, it will probably crash if you do a couple hundred compute-intensive tasks at the same time, but if you use serverless functions, you can have up to 1000 requests at any given moment (this is an AWS limit, i don't know if its the same for Google or Microsoft) &amp;#x200B; Let me know either in a comment, or PM if you'd like to learn more!
Yeah, I tried to make every thing from scratch, even event keyboard and swipe listeners. I took my 3 days to code, and 1 day on UI/UX
You'd think someone who cares about internet pollution wouldn't focus on the 238923896th largest source of internet pollution... It's a noble concern, but it's negligible here, my *friend*.
Others' suggestions of making your own server, or using someone else's, are both great. There's also a third option: make your own client-side API. Just build a Redux store (or whatever you use) and fill it up with tons of data you hard-code. If you want you could make it more realistic by adding an equivalent "API communication" layer, eg. create your own `fetchLocal` retrieves data from your store, but works like the `fetch` function (eg. returns a promise). Personally I wouldn't bother with any of that though. Real applications and mocked applications are *identical* except for how they populate their store data, and anyone can learn how to `fetch`, make a GraphQL query, etc. What an employer wants to see is that you're capable of building professional web applications, so build exactly that and don't get hung up about having to talk to a server.
What about data compression? &amp;#x200B; In the modern web, one of the most (if not THE most) expensive part of hosting a website is the data transfer. If you take a look at AWS, Google Cloud, and Microsoft Azure, they are all fairly competitive in different services that they offer EXCEPT for data transfer. Last time I checked, they were all charging about $0.08 per GB. &amp;#x200B; Think about how expensive it is for companies like youtube to serve millions of videos at any given time. It's insane!
very cool. I used semantic UI on my game that Im making (Ill make a post tomorrow), and it took me 2 weeks to get it functional, and then another 5 weeks of struggling with the UI... :( I'm not very good at design
Looks like pwa, not native, am I wrong? 
Thanks! Sorry about that. 
Yes, you are right. I wrote native for non programmers to understand. Do you think it's miss leading?
Don't worry, you are on a javaScript subreddit, we are understanding the difference
I get paid $87k a year. I'm a junior developer working in React. I've never had a dev gig before. This is my starting wage.
Thanks will do! Looks like it could help. Actually I'm trying to stitch together an image not especially a map.
This is so hard I'm gonna die
That was strangely addictive. Took me 681 moves. Nice work! 
So you're counter point to my anecdotal data, is your anecdotal data? I'm pretty sure the massive 94% male industry leans towards my assumptions.
&gt; This is coming from someone who works at a large tech company surrounded by women. Some women just don't enjoy programming, and we shouldn't harp on them for not being interested in STEM. And some men don't enjoy programming either. I could pick 5 random male friends and say they don't enjoy CS or web development. The industry has a far larger problem with retaining women. They leave the industry and never come back, and it's not because "they don't take interest in CS or web development". http://fortune.com/2014/10/02/women-leave-tech-culture/ Your anecdotal statement is a lame, unsupported cop out excuse to not make changes to deal with what is a very large scale culture problem in the tech industry.
We use the `workbox-webpack-plugin`.
I was not satisfied with AngularJS after I used it. I had no idea how that thing worked. I did not plan to use it again. Then I got a job writing Angular 2, and the (apparently) new design all made perfect sense to me. Now I write Angular 6 all the time. Of course, I'm a Java programmer, and have come to Angular with not much idea about JavaScript. If a tool lets me choose my own router / state management / whatevs, I will have no idea what the options even are. As for ngRx, and redux in general, I see what it's doing and I have no idea why I would want that. In 20 years of Java UI development I used a similar pattern once - only once. Angular services work just fine for me. As far as I can guess, Redux must be a solution for some sort of problem React has, because it seems like massive overkill for anything in Angular.
I know!!!
I can assure you one thing ur not gonna die
What if you make a front-end only app? There are lots of meaningful, useful tools that could be written that use only user generated data and output the processed data on the same page without needing anything from the server. Look at these for example: * https://jakearchibald.github.io/svgomg/ * https://squoosh.app/
Fun isn't allowed in other subs!
Always loved this game. Yours is really quick and works great on mobile. You obviously know what you’re doing. Great job! 
This is sick, great job!
looks pretty sick now do it in vue instead.
Thanks, there are still many features left like score board, save game locally, making it a pwa etc. Will be working on it after exams.
Thanks!!!
Cool, next game will be in vue!
Hmmmmm.
Just showed this to my wife and she loves it. You should make this a progressive web app so she can add it to her home screen! 
How have you handled solvability? ~50% of the puzzles generated are not solvable. https://en.m.wikipedia.org/wiki/15_puzzle#Solvability
Something might be off here. I got [this configuration](https://i.imgur.com/rK1VerY.png) at the end. This has been proven to be unsolvable, so you might want to look into that!
This needs more react-spring. Aside from that very nice.
 let newObj = Object.assign(oldObj, {newProp: oldObj}); `Object.assign` modifies the object and returns it. _If_ this is what you meant, it should work. Then again, I still don't understand much the use case for this, so it may not be what you meant.
Very nice. I enjoyed looking at your code as well. Will have to try styled components on my next project.
Very smooth. Only small criticism I have is that I'd like to feel the pieces move faster when you tap them, it feels like there's a small delay before the animation is triggered and animation itself could be faster. Congratulations.
[293 moves](https://i.imgur.com/hdHl2ls.jpg) I enjoyed that. Good job! Now to read the source.. 
I'm pretty sure he will. You will, too. That's just how things are :(
good old days, made such game when I was 14, using turbo pascal back in the 90ies
There’s no shame in being corrected by a woman who knows how to argue her point better than you. Put on your big boy pants and level up your debating game x
Just a couple of small details I've noticed in a very breif look. `PadSet` is a single file exporting both `Pad` and `PadSet`. `Knob` and `KnobSet` are separate files. I know `Pad` is really small, but for consistency and uniformity, it _might_ be better to extract it to its own file. Also `Pad` doesn't [seems to ignore](https://github.com/haschdl/SuperMidiJS/blob/d34540dd396b30c9d2b47414e3c558f471dc58b1/src/PadSet.js#L17) the `mode` parameter, which you don't seem [to be passing anyway](4https://github.com/haschdl/SuperMidiJS/blob/d34540dd396b30c9d2b47414e3c558f471dc58b1/src/PadSet.js#L17). In the same way `Knob` [ignores](https://github.com/haschdl/SuperMidiJS/blob/d34540dd396b30c9d2b47414e3c558f471dc58b1/src/Knob.js#L2) the `knobCode`. [This probably shouldn't be here](https://github.com/haschdl/SuperMidiJS/blob/d34540dd396b30c9d2b47414e3c558f471dc58b1/src/SuperMidi.js#L27). It's trying to create a `KnobSet` without a `numberOfKnobs`, [which should be an error](https://github.com/haschdl/SuperMidiJS/blob/d34540dd396b30c9d2b47414e3c558f471dc58b1/src/KnobSet.js#L8). It also doesn't seem like the _knobSet_ is actually being used in any particular way, but I haven't had a deep look at it, so I may have missed it. Might [this here](https://github.com/haschdl/SuperMidiJS/blob/d34540dd396b30c9d2b47414e3c558f471dc58b1/src/Configurator.js#L46) be meant [to be](https://github.com/haschdl/SuperMidiJS/blob/d34540dd396b30c9d2b47414e3c558f471dc58b1/src/Configurator.js#L67) `configLoaded`? I know these are just small details and inconsistencies, but it makes me think it is too much of a _work-in-progress_ yet. It's probably a bit too early to review it properly.
But when you fix that bug 🤤
I am a woman you numpty lmaoooooo
404 for me
Having a `_private` property with get + set that pass directly to it, as in your example, is the worst get/set use case. You get no benefits, and you write 8 extra lines of code per property. However, if you drop the setter, you end up with a native read-only field, which is convenient. As the other commenters mentioned, you can also exposed computed properties. And, when refactoring, you can replace a property with a function call without rewriting the consumer code. Overall, one of my favourite features in recent ES. Just don't use get / set pairs by default — you can always add these later.
Can't see what use it can possibly be, but `newObj = Object.assign(otherObj, { newProp: otherObj })` does it — basically, your code is wrapped in a function. Of course, you also change the original object, but that's inevitable under the reference equality constraint.
Thanks for the detailed reply!
What are the contents of invoice number.js?
This is honestly the best answer. Start with a simple SQL db. Knex while not technically an ORM is my goto. Then learn mongo with mongoose. My next app will use loopback because I hear good things about it.
&gt;Hi, hello, I’d like to refer you to a comment literally just down the page in which someone just said “women aren’t good with logic”. Is that sexist enough for you? It is, yes; it's just not what I encounter in the day-to-day work. It's not like I see my male co-workers go around and tell my female co-workers they aren't good with logic :-) Anyway, let's explore this a bit further. Does the phrase "women aren't good with logic" offend you? If so, why (you probably know about yourself that you are doing OK with logic, so whoever said that might have greater problems with logic than you do, and why would an opinion of an inferior mind matter to you)? And if the statement "women aren't good with logic" offends you, don't you think that saying or implying that male programmers are sexist (and white male programmers are both sexist and racist, and straight white male programmers are sexist, racist *and* homophobic) offends them in turn?
&gt;this configuration sure, thanks for the feedback. It's interesting to know some configuration are not solvable. I'll look into it though.
It's a simple function that returns a static number (just for testing purposes)
I was going to use it. Then thought I might not need one as the animations are simple.
Also, if it's not data (or JSON or XML) You can probably just include the file using a script tag.
&gt;293 moves bravo!!! 
Made it in 173 moves 🕺 any leaderboard?
hmm, I did noticed that too now. I'll look into it too using dev tools &amp;#x200B;
sure!, btw is elm difficult?
damn, the classic game hmm
`function invoiceNumber() {` `return 5;` `}` That's the content of the file.
sadly no, maybe in near future, made in 3 days as a part of friendly challenge!
&gt;I am not convinced though that the solution is that the male-dominated community needs to be continuously shamed for its gender composition Saying there's a problem with culture is not shaming men. There's a cultural problem, and everyone involved needs to chip in. The fact that it's apparently 96% men means mostly men need to be solving this issue because women can only get so far. &gt; to become a part of this community who need to get less sensitive, less gender-focused*, and more thick-skinned. This community has a problem with toxic bro culture and telling us to "just get thicker skin" is shifting the onus onto women to fix this issue. I have thick enough skin, it's why I'm still here. That doesn't mean I enjoy dealing with sexist douche canoes. Sexism needs to be called out by women AND other men when it occurs if we ever want the culture to change. The biggest problem with tech is retaining women. Women who wanted to be in tech and left. http://fortune.com/2014/10/02/women-leave-tech-culture/ And really, it's really hard for people with default representation to understand why minorities really want representation. I can't imagine being black and a woman in tech. Tech can also be pretty racist too. Also, the fact I get downvoted for literally just expressing my experiences about sexism really shows how little perspective this sub has.
Thanks for your reply.
&gt; And if the statement "women aren't good with logic" offends you, don't you think that saying or implying that male programmers are sexist (and white male programmers are both sexist and racist, and straight white male programmers are sexist, racist and homophobic) offends them in turn? This is the most hilarious thing I've read in this thread. How did you manage to turn yourself into the victim here. At what point was it implied that all men are sexist? You know what. I don't even care. Shower me with downvotes. You are the problem.
There is some great documentation for the `discord.js` package [here](https://discord.js.org/#/docs/main/stable/general/welcome), along with some coding examples for each entry. [This](https://discord.js.org/#/docs/main/stable/class/GuildMember?scrollTo=ban) is probably what you're looking for in terms of being able to ban a user from a 'guild' (a server). You grab an instance of that member from the guild and then pass in the parameters you want. [This](https://discord.js.org/#/docs/main/stable/class/GuildMember?scrollTo=kick) shows it works in a similar way if you want to kick a member. However, you just have to pass in a string for the reason why you want to kick them. In terms of getting set up (I'm not sure how much you have done so far), I have some boilerplate [here](https://github.com/scallaway/basic-bot/blob/master/bot.js) (shameless self plug) that I use for creating bots. The actual Readme file is a bit outdated however, as Discord have changed the way you setup bots through the developer panel. Creating commands for the bot are as simple as setting up a series of `if` statements (or `switch` cases, whichever takes your fancy) and then checking for the user input! Hope this helps!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [scallaway/basic-bot/.../**bot.js** (master → e7f0f54)](https://github.com/scallaway/basic-bot/blob/e7f0f5442859bb7f41c9d4021b3dba94c7b6a196/bot.js) ---- 
&gt; and the documentation is targeted to a ten year old. Well, now I feel inferior
&gt;class Rectangle { constructor(length, width, color) { this.length = length; this.width = width; this.color = color; } calcArea() { return this.width \* this.length; } } let greenRect = new Rectangle(10, 12, 'green'); greenRect.color = 'yellow'; console.log(greenRect.color); //'yellow' &amp;#x200B;
Correct !!! similar use case. `class Rectangle {` `constructor(length, width, color) {` `this._color = color;` `}` &amp;#x200B; `setGreenColor (color) {` `if(color === 'green') {` `this ._color = color` `} else {` `return 'Invalid color passed';` `}` `}` &amp;#x200B; `getColor () {` `return this._color;` `}` &amp;#x200B; `}` &amp;#x200B; let greenRect = new Rectangle(10, 10, 'green'); console.log(greenRect.setGreenColor('red')); //Invalid color passed console.log(greenRect.getColor()) // green
Sounds like you're going to love Elm.
\&gt; You said “I don’t see sexism”. I pointed you in the direction of some sexism. I said I do not see it dominating this thread, nor do I encounter it at my workplace. To add to this point, I do not think the phrase “women aren’t good with logic” can be a barrier for any reasonable person. Consider the amount of jokes directed at php programmers, javascript programmers, or html coders in general in our industry. No sane person will be discouraged by them. \&gt; why are you so quick to tear me down at the mere mention of the word “sexist” Let me point you to a [tweet](https://twitter.com/sarah_edo/status/1064952448521891840) by Sarah Drasner who was talking from your perspective, i.e. that women in tech are treated differently because of sexism. Her example was that men too frequently try to explain basic things to them. When asked why she wouldn't just say that she is already familiar with the concept and move on with the conversation, she said: \&gt; Constantly? You don't think that gets tiring? This is exactly what I feel when I see yet another discussion of sexism in the tech industry. They pop up constantly (at least, during the period I was involved in the tech community), and it *does* get tiring. You do tend to ascribe inferior motives to people you are talking to: fear ("turns out a lot of you are really afraid of women coding") above, or insecurity here. Why is that? There are more reasons than fear why one might respond negatively to charges of sexism.
I remember doing these kinds of puzzles when I was younger, took me 100 moves! Very well done on the creation!
&gt;How did you manage to turn yourself into the victim here? Where did the word "victim" come from? Or where did the notion that I see myself as a victim here come from? Can one suggest that an implication of being sexist might be construed as offensive, without that meaning that he himself is offended by it? And if someone does get offended, does it make them into a *victim*? As for the white male programmer, I apologise for dragging that into the discussion, but the criticism that the tech industry is not gender-diverse enough is often accompanied by the criticism that it is not color-diverse enough.
Why not cordova?
Hmm not OP, but you could start from a solved board and scramble it with random movements so it will always stay solvable. I didn't know some (half) of these were unsolvable!
Might as well be. In the end, I think we can both agree that you can mess up everytime with poor architectural / design decisions, no matter which framework you’re using.
GitHub is a great place to search to find projects that maybe similar to your own. I haven't cloned or ran any of these repos but they might be good starting points; https://github.com/cssjockey/phonegap-currency-converter https://github.com/AurelioDeRosa/Currency-Converter https://github.com/SeanHub/CurrencyConverter 
&gt; Have you ever been discriminated against because you work in JavaScript? Ever been denied the right to work? Ever been denied the right to vote? Ever been burnt at the stake? No. So the comparison is unfair and short-sighted. We are talking about the twenty-first century, right? Women have gained the right to vote in the late nineteenth — early twentieth century, if I remember correctly. They have not been burned at stake for several centuries. They are not forced into marriage by unfair inheritance laws, as in Victorian Britain. They do not need to have a family or children if they don't want to. &gt; Stop challenging women for pointing out sexism just because you’re tired. I don’t give a shit if you’re tired. There we are then. You don't give a shit that we are tired; we don't give a shit that you are offended. With any luck, we'll learn to either give less shit about all this nonsense, or maybe equally give more, and it will all balance out with time. &gt; As for me “ascribing ulterior motives”, enlighten me then. Why are the men in this sub downvoting the women for pointing out that there should be more women in the industry? I have no clue why people in this sub behave the way they do. I can only account for my own actions, and I do not have a habit of downvoting; I think it hinders conversations. I just do not think that the word _should_ in the sentence "there should be more women in the industry" is meaningful. I am not saying there shouldn't be more women; I am saying that I do not care about the gender composition of the tech industry. Gender is not what I think tech is about. &gt; Why does the word “sexist” lead you to believe that you are the victim of a great injustice, when historically it is women who have bared all of the hardship that comes with sexism. I am sorry; I do not believe I am the victim of a great injustice. I recognise that history has not been kind to women. I just do not feel I want to be in any way involved in rectifying the injustices that have spanned multiple generations. I do not feel responsible for what the previous generations did. I try to live starting from a clean slate as it were and to treat people according to their merits (as I am capable of perceiving them). 
Can you implement an option to reverse the arrow keys?
yeah, I think I won't be a problem but that might take the fun out of the game. 
what
it means that object either doesn't have a function called candidatesCount, or it has a member called that, but it's not a function.
amazing!!!
yes, eventually. But what are the odds of him dying while playing this game. Very Slim.
&gt; to not have to constantly justify your existence in this industry to strangers on reddit, to speak about your experiences without people denying that they even happened in the first place But this is so overly dramatic! What do you mean, constantly justify your existence in this industry? Especially on reddit (where I wouldn't even know your gender unless you decided to tell me)? But even not on reddit. Who tells you that you shouldn't be in the industry? Does this happen to you all the time? Why do you pay any attention to it? I have an experience of being in a predominantly female collective: I had an education in literature, in a school where the female to male ratio was closer to 10:1. I did not feel I needed to "justify my existence" in that school or to my peers. I just focused on the problem at hand, i.e. on studying. Which I now expect of my team members: focus on coding. I understand your argument to the point where women might be biased against when applying for jobs or getting promotions (although I am not sure many interviewers will reject a competent woman programmer). This is obviously bad. But other than that I do not understand what is so problematic in what you are talking about.
Most guys don't like coding. It's only attracts a small minority of guys that fit a certain profile. But saying that there are so many female programmers from the Philippines and India. I guess they choose programming for economic reasons (lots of outsourcing) but in the West, not many females want to get into IT 'out of choice'. Be glad to be different.
You need to either implement that function somewhere, or if it's a value not a function, reference it without the ()s
You could be in a place that's not possible
193 moves. Got lucky on that one though
Ya that's could be also, but you know the time was limited so have to choose some specific one's 
$15k/year is not a very good salary for a programmer in Brazil. At least not in a major city.
&gt; Compared to imperative HOCs, Render Props provide a clean declarative API that is easy to reason about and compose This is quite far off from the mark. Both are declarative, and if anything HoCs are _easier_ to compose. In fact, out of the three, Hooks are the only imperative approach, but with the benefit of being concise
 Hey. It’s not only a running hardware, it is a smartwatch. You can use it connect to wirelessly to Bluetooth earbuds and enjoy music. Also, you can receive notifications for incoming calls, messages, emails and other apps. So in the end, I think that it’s a pretty good device that you can use daily. :)
A better way would be to create an array with the order and use cycle decomposition to determine the parity of the permutation. If it's not possible then swap to non-empty tiles and it will be possible. If that's to complications I can write some pseudo later.
Please do share your code via github and ping me :) so that I can learn from your project.
How to convert it in PWA ? 
Which algorithm did you used to implement this game ? 
 The account is so we can be able to contact you if you will be the winner. 
Lol. I’ll pass
 Hey. So, basically you have a code editor at your disposal, and you can solve a challenge in Java, PHP, C#, C, C++, Python, Ruby, or JavaScript. For this particular challenge, you have to find the right key to open an old coffer based on some criteria specified in the exercise.
You’re not understanding because you’re only taking in the individual points, rather than my posts as a whole. Read my posts in their entirety, do some research on women’s experiences in both tech and wider society and do try to see the bigger picture – you can use your position of privilege to help others, not just yourself. Be a good citizen.
Lol why is this so upvoted??
So I have it scrolling but I can't seem to get the "skip" working I can't work out where i i should be adding so many pixels to the offset to make it go further along the line
 Hey. Sorry if you felt offended in some way, it wasn’t my intention. The account is so we can be able to contact you, in case you win the competition.
If you're operating on strings, fulltext searching, then yes, elasticsearch is great. But in my case there are mainly numbers and doing on them some analytics stuff. We've got indexes, but there are only a few fields on which it could be set. And it all sum up to a conclusion that classic relational dbs, even when not using relations, will be a better solution (and much simpler/cheaper to maintenance tbh).
Really appreciate you in-depth insights on the App. Once my exams are over I'll definitely fix this problem. I could really use your pseudo code. Thanks! 
Well I didn't use any algo. for generating the tiles. It is just random now.
Two different things. This is for a web app: a site that can double as an app, or vice versa. I'm not defending one over another, just clarifying that, if you're a going to make a web app, in html5, this script creates a template for you.
[removed]
What you would do is measure each portion of the line individually (by adding a segment, then measuring, adding another segment, measuring again), and mark each segment length as either being horizontal or vertical.
Thanks so much for that! I've downloaded them and are looking at them now. They will be a massive help. 
&gt; You’re not understanding because you’re only taking in the individual points, rather than my posts as a whole. Taking your posts as a whole creates a very vague picture. You are disappointed about statistics (that there are too few women in tech), although statistics are just numbers, and numbers certainly don't need sympathy. You are talking about historical injustices done to women, although history, by definition, is in the past and also doesn't need our sympathy. You are concerned about something pretty amorphous in tech industry ("sexism", "toxic bro culture"), but then you do not want to go into too much detail about individual points. Also, you are strong enough to have overcome these amorphous problems and fit into this hostile, as you picture it, world, which, however, brings you a lot of pleasure when you code. Finally, you approach this problem from the perspective of how tech industry should change to attract more women instead of how women should adapt to the tech industry as it currently is (and maybe gradually transform it into what they want it to be).
That’s fair enough, but you’re asking for it before one even knows if they want to participate. So you will get a lot a negative response. The full details should be provided upfront and only then Should you ask for it when they submit a solution/ willingness to participate. Or even better, let them opt out if they don’t want to be contacted even if they win. 
I think you’re accidentally attributing some of the other comments on the thread to me, when they were actually written by other women. The only ones I’ve written to you personally are in this thread. Here are the main points: 1. I’m disappointed that more women aren’t in dev, but not surprised given accounts of women’s experiences of sexism in the wider tech community. 2. I start receiving downvotes for expressing my disappointment, in addition to comments saying that such sexism doesn’t exist and/or is justified. 3. You compare my taking offence at such comments to how men feel when being called out for their sexism. 4. I point out that men’s experience of being called ‘sexist’ is no where near as harrowing as women’s experience of sexism itself. You are welcome to look up such experiences for yourself. 5. You state that jokes about women’s competencies in dev are comparable to the jokes about different professions. 6. I point out that jokes about women stem from a wider historical, social and political context in which women have been frequently repressed. Jokes about women are, therefore, another way to enforce our long-standing subjugation to men. Sure, the majority of this may be in the past, but you’re a fool if you think we still haven’t got a way to go – to this day there are still countries in which women can’t even attend school, and Western countries are still experiencing a huge gender pay gap. 6. I also point out that, as a man, you have the ability to stop sexism by calling out other men. This would eventually deplete the number of conversations surrounding sexism, of which we are both very tired. 7. You state that you have no interest in helping more women get into tech. 8. I point out that, as a man, it is easy for you to say that – but ignoring the gender imbalance to make your own life easier makes you just as sexist as those being actively sexist. Solving sexism in the tech industry is multi-faceted issue, and I don’t have all the answers. But what I do know is that YOU YOURSELF can make a difference by attempting to empathise with women when they tell you that there’s a problem. There is no need to be defensive of your position as a man – if you are entirely confident that women are your equals, all I ask is that you demonstrate this confidence by helping out women when they experience sexism. Some simple ways you can help women are: 1. Saying “that’s not cool” when someone makes a sexist joke. 2. Reading about women’s experiences of sexism in tech, and considering how the actions of men reinforce this. As stated in some of the other comments, even simple jokes about women’s competencies could be enough to deter others – after all, why would you want to spend your time working with people who will never see you as a truly equal human being? You can help change this. I do agree with you that it is a two-way street. As a woman in dev, I will try and enact the change I wish to see in this industry – but since women only make up a small fraction of it, I can’t enact complete change without the men being somewhat willing to change things.
cool project, could you make a video of how you did it?
I'll be a long video... Next time onward I could just record while working. 
I'll take those odds.
This should probably work. &amp;#x200B; [https://github.com/Kagami/ffmpeg.js/](https://github.com/Kagami/ffmpeg.js/)
Wow awesome ❤️
Would I be right to assume that electionInstance is a reference to your Smart Contract? I have 2 questions if yes,: 1. Do have access to the smart contract and does the function candidateCount exist in it? 2. What value is held in electionInstance when control reaches line 53? 
Further context. I am able to get single layer's opacity to change if I use this code, but it would be way more efficient to change a group's opacity var variable1 = docRef.artLayers.getByName("testname"); variable1.textItem.contents = content[0]; var variable2 = docRef.artLayers.getByName("gray"); variable2.opacity = content[1]; var variable3 = docRef.artLayers.getByName("scarlet"); variable3.opacity = content[2]; var variable4 = docRef.artLayers.getByName("white"); variable4.opacity = content[3];
I would be interested in seeing that too.
Why would release this on my day off?? I was supposed to get shit done today. Really OP great job I love the neat little boings animations the UI isn’t cluttered, I only need a sec to started using it. I always loved tile games as a kid. I’ll have to check out ur github as I’d love to build something like this since I’m just learning vue
sure, take you time! I'm in no hurry.
Interesting concept. I agree the UI is lacking, but I'm sure after a few version it will get better. But overall I think it's cool. Good luck to you!
Technologies used: &amp;#x200B; Frontend: * React * React Router v4 * All code written in ES6 then babel to transpile it, and webpack to bundle and minify * UI Framework is semantic UI (but you probably couldn't tell because I really butchered the UI... definitely going to work on making it look nicer) Backend: * Frontend website is static so it's stored in an AWS S3 bucket configured as a website, and then a cloudfront distribution on top of that to cache the static files globally * API is all AWS lambda functions, with a different cloudfront distribution on top of that. This cloudfront distribution only caches the GET requests for the path objects, and everything else are POST requests. * The GET requests that are cached are only the path objects that have been "finalized", otherwise if they are still being voted on, then they only get cached for a few seconds, so users can see recent updates every time they refresh * DynamoDB to store the path objects (actually 2 seperate tables, one for the path objects, and another for the votes) * SQS is used as a delayed queue for the voting system (after 15 minutes, a message appears in SQS, and the message body is the path ID. A lambda function gets triggered, and counts all the votes for all the different entries of that path ID, and then assigns a winner) &amp;#x200B; Let me know if you have any questions!
Thank you!
Ummm... I think you used the wrong icon for food [https://i.imgur.com/gf3arEj.jpg](https://i.imgur.com/gf3arEj.jpg)
Hi /u/EnM77, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/ilse1504, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
On mobile (safari), after I enter name and press done, nothing happens.
I'm guessing this requires CSS Grid? Not working on my phone (or IE11 probably). You might not care though, which I don't blame you for since it's just a fun project. https://i.imgur.com/SxdyR25.png 
I think that would work. I've been using polyfill.io, which returns polyfills based on the browser's user agent. I recommend it. 
Nah, that looks good to me. 
&gt;That was strangely addictive. Took me 681 moves. Nice work! took me 344 &amp;#x200B;
Great idea! I'll add this to the list of features for 1.0.0
That was certainly no mistake :)
Yeah, it’s not done yet. The project is based on this: https://github.com/pakastin/deck-of-cards/blob/master/lib/animationFrames.js
hmm, I guess I didn't add the prefix for IE. It should be working in safari 10+
I think you will need a separate server that can decide what the user won and store data. Wix only hosts “static pages” which means you cannot do any backend code on your server meaning that you will have to store everything client-side which is not so good idea.
Well spotted!
Oh, maybe IE works, I misremembered. But CSS Grid wasn't supported on iOS until 10.3+. No biggie though
Simple tweak, use `user-select: none` on your tiles so that you don't get selections when the user double clicks or slightly click drags.
Does Swagger support multiple error payloads sharing a single error code yet? Last time I checked they straight out refused to add that functionality.
How can I learn advance nodejs backend stuff ? Any blogs or tutorials which you can suggest ? &amp;#x200B;
Possible, maybe, I don’t know wix, but probably better to build/find an existing roulette setup to use on AWS with like js/pho/MySQL, and then I frame it into your wix site.
damn you! 
If you want to do this the other way around, [exegesis](https://github.com/exegesis-js/exegesis) is a library that will turn your OpenAPI 3.x document into an express/koa/whatever Node.js server, and do validation and everything for you. (Although this is super slick.)
Very nice idea, i enjoyed playing two rounds, if the story was made longer it will be really thrilling and fun to play, great job 
Not always, and not as substantive as you would imagine. 
Great job sir, i remember there was a similiar game for ps2 where you played as the murderer and detective and you made choices that affected the story line, it was great too
Dunno. This looks like regexes for housewives.
...and judging by the number of comments here, nobody cares...
Your problem is on the webserver end. It's not finding the file invoiceNumber.js, and so the webserver is generating a 404 error. Usually a webserver is configured to show a human-readable HTML page saying 'not found'. The "unexpected token &lt;" is a result of trying to parse this HTML as a script (since HTML will start with a "&lt;" Im not sure why you said 'not public'. Can you explain what you mean? You usually can't access file outside the document root. You dont explain what webserver you're using. Also, you can isolate this by just putting the URL in the browser and seeing what the result is. Also, learn how to use Chrome or Firefox developer tools, and take a look at the Network tab. That should help you figure out whats going on. 
Oh fuck off. Angular fan boy attacks the survey source when it concludes Angular isn't the best thing on the Internet
As a man, if you don’t enjoy being called a sexist, you only need to not engage in sexism. Don’t laugh at sexism, don’t applaud sexism, don’t ignore sexism because it’s convenient for you. It’s as simple as that. As a woman, what can I do to avoid being the victim of sexism, other than educating men and asking them not to perpetuate? That’s exactly what I’m trying to do here. I fully realise that I have the power to change things – why do you think I’m taking the time out of my day to reply to you? Don’t worry about my self-confidence. If I wasn’t confident in myself as a woman, I wouldn’t have brought up the issue in the first place. I don’t understand why you can’t see that sexist jokes are harmful to women? It’s pure logic... the same way you feel when you’re called a sexist? That’s how many women feel when people make jokes at their expense. Simple empathy here. 
Maybe after reading this you will finally understand what I’m getting at: https://meanjin.com.au/blog/misogyny-is-a-human-pyramid/
sure! 
I liked this video until you started to compare react and angular with a code example. &amp;#x200B; After that it was just expressing your biased opinion. And some things are just wrong. You can use "class" in jsx. You don't have to write classnName anymore. 
[removed]
If you want to go in a slightly different direction you might enjoy listening to lamdacast, it's not specific to javascript though https://soundcloud.com/lambda-cast
Yeeeaaaahhh I'd rather use regexer and just make my own matcher. Learning this api seems just as hard as learning actual regex
&gt; "You approach the tree, and caress its tender bark. What a beautiful tree... After a few hours, you and the tree are both satisfied." Where did I go wrong in life.... 10/10
Great idea!! However, the story is too short for now and it ended after I made love to a tree :/ I feel it will be more fun once more users add to the stories, definitely looking forward to all the weird paths people might add heheh
This is the sort of collaborative-creation concept I really enjoy - letting users build out the experience for each other. Great idea and nice work!
I welcome any and all attempts to make RegEx matching less horrifically ugly to read. Although I am mindful of the fact that RegEx has made it into almost every language in the same basic form, so obviously that is a difficult task.
Thanks for your answer. Yes, people should register if they want to access to the roulette, and I have the possibility to stock their ID in order to avoid that they play multiple times. &amp;#x200B; The roulette would be almost as simple as that : [http://demo.st-marron.info/roulette/sample/demo.html](http://demo.st-marron.info/roulette/sample/demo.html) I just have to change the look and feel of it, and the goal would be to just win things to the players if they're lucky (so I'd have to add probabilities for the results and just change the images) 
Wow, cool idea I'm having some fun with it.
Here's what you will need: 1. A server. 2. Registration functionality. (Frontend and backend.) 3. Authentication functionality. (Frontend and backend.) 4. Roulette logic. (Backend.) 5. Roulette visualization. (Frontend.) There isn't a way any of this can be done safely and securely without a server. The good news is, you can get a VM for about $5/month from a could provider such as Digital Ocean or AWS. Of course someone is going to have to configure your server, but if you find a person capable of doing the coding, they should be competent enough to set up a simple Linux shard.
That depends on what they allow you to run. The actually Roulette backend is very simple, all you need is to check if the authenticated user is eligible to play, generate a number, store it in the user's profile (it's best to keep all of the user's attempts' dates and results just in case) and make it accessible from the frontend. If your current setup will allow you to create extra database fields in the user's profiles, you are almost done. You'll just need the means to check eligibility to play and then you can go on to generating numbers, etc. If the backend you currently have is restrictive, then yes, you will need a separate server. I'm not at all familiar with WIX's inner workings, so you may want to get more details from their customer support.
This is cool, however may be a little more in depth CS than OP was looking for...
Syntax podcast with Wes Bos and Scott Tolinski https://syntax.fm
Thanks so much, glad you like it. Please let me know if you have any ideas of what would make it better
This is an awesome podcast. What I found in learning JavaScript is just listen to podcasts on the matter Syntax and Front-end happy hour are both good. From my experience the exposure to people talking even if you don’t fully understand is super beneficial as you gain exposure to the web development world. 
i think you're right, top comment explains it.
Take lots of breaks OP!
I completely agree. Wes and Scott really bring their passion to the podcast, and it gets me excited to learn and grow on my own. Front-end happy hour is also great, but I find it a little dry and harder to listen to in longer stretches.
This is awesome! Submitted my own path just yet. Really stoked to see how this will evolve and how you will tackle problems like going of the main path too much. Really well done!
Are you opposed to using an outside library? If you aren't, lodash had a get method that will do exactly this.
Posting JSON makes it easier to preserve types and send nested data structures. Most server-side APIs these days are generally built to handle JSON by default.
Conditional effect : Do you have PEPE_MEME? Condtional effect failed! Gold went up by 63 Okay then.
This is not the question, I know that it is actually json data but we will now have to post files (which required formdata). The question is « is it a bad idea to always post form data even though there is no file in the form
Cool! You are more than welcome to update this post or make a new one and i'll check it out 
I enjoy the concept of the game and the different choices gave be a good laugh. Can't wait for more paths to be added. Good job!
Hilarious
Good idea! I have a feeling a main path will develop that's more like a game.. and other branches will become more of a comedy.. good stuff
Do you want to gigabytes of Harry Potter erotic fan fiction? Because this is how you get gigabytes of Harry Potter erotic fan fiction.
Super cool idea! It's practically unusable on mobile though... the layout is good, but I get the impression that not much testing was done on an actual device. If you're looking to make improvements I'd focus on the mobile UI, especially for writing out new story paths. I'm on a Samsung S7. But otherwise it was fun! Nice job!
Hahaha i love it. I think if people keep using it itll be an interesting thing to look back at and see how the paths evolve. I want to add an ability to start at a given path Id so you can play a game that you want and not have to traverse the whole path every time
Well yes, I would say the advantages of JSON are worth keeping unless you need to upload files.
Seems interesting but what does ''everything'' really mean? What are the limits of the automation?
I am in, should I look into the issues and see if I can resolve one?
By the way if I rearrange the letters of your username it becomes name of my country Pakistan :D
Oh shoot. So what mustve happened is the person who made that path found a sweater (the found item effect is random) and probably thought that it would be sweater for everyone. But when you played it, you found a toolbox so the options dont make sense for you. There are a lot of little continuity issues like that, and im not sure what a good resolution would be. Do you think i should just use the honor system and hope that people make their stories not dependant on the effects, or should i change the effect system such that continuity errors like these dont happen?
the idea is cool anyone tried it?
The creation of the script happens in your browser but the execution in cloud , so you can kill your browser and do something else while the process is still running &amp;#x200B;
That's what I heard, unfortunately:( Anyway, thanks for your reply and the info, very appreciated!
Youre not a fan of apostrophes?
Once your script is downloaded to your browser, it can only request "public" files. Some options: * Move invoiceNumber.js into a publicly downloadable location. * Move the code in invoiceNumber.js into your existing file. For the second option, you'll eventually want to use a module bundler to handle that for you, but you can revisit that issue later.
No thanks. Regexs is expressive, this feels nutered without a lot of gain.
couldn’t move past name on mobile
Regex is honestly easy to read once you do know the syntax. 
Can I test my website with parallel workers?
That is neat. There are a few typos I noticed, but otherwise good job.
Sounds good! 💪
Yeah, "pakastin" is a Finnish word and means "a freezer" – it's my company's name 😄
yes of course 
Oh yeah im sorry i messed up the input element. Its supposed to say Submit, but instead it says Return. To get past the name you need to hit return, but ill fix that so it says "Submit" so its more clear. Sorry about that
you can have a free try period signup and send your email to [admin@webautogui.com](mailto:admin@webautogui.com) thanks
Do you have a github of this project? Will be pleasured if you allow to look on code
Toolsday, Shoptalk Show and Developer Tea are also great podcast (audio only) options
Oh yeah that makes sense how that could happen then. In my opinion, people will be people and you’ll always have someone who will purposely try to do stuff like this (not that this one was on purpose). I’d try to figure out some system to prevent it. Keep it up though, definitely fun to have some crazy choices to make 👍🏻
Not yet, unfortunately there were some account credentials that i exposed in my configuration files early in the dev process. Ill remove the sensitive data and make a public repo later this week though
Why ya gotta be like that. I've cross posted this to r/webdev, r/emberjs, and twitter and they say people do care.
Being a self taught dev, I feel this. Need to stop second guessing myself &gt;&lt;
been there.
Thank you, will wait for it
&gt;It’s pure logic... the same way you feel when you’re called a sexist? That’s how many women feel when people make jokes at their expense. Simple empathy here. I am glad you have evolved your argument from "men’s experience of being called ‘sexist’ is no where near as harrowing as women’s experience of sexism itself" to "the same way you feel when you’re called a sexist? That’s how many women feel when people make jokes at their expense" :-) Let me explore your point about empathy a bit further. As far as I understand the meaning of the word *empathy* (and I checked with the dictionary to make sure I am not making this up), it's our ability to imagine how another person feels by trying to imagine how we would feel if we were that person. In other words, an exercise of putting ourselves in other person's shoes. But since, as you put it, men in tech are in a privileged position, we cannot properly empathize. So when I ask myself, what would I feel if I heard a sexist joke not even directed at me, my answer is, I would hardly even notice it; I might even laugh at it if it were genuinely funny. When I ask myself, how would I feel if people were constantly assuming I knew less than I actually know, my answer is, gosh, it's so much more relaxing than the opposite, when people assume I know more than I actually do. When I ask myself, would sexist language or hearing that "men aren't good with logic" stop me from being a programmer, my answer is, are you nuts? This is what I want to do. So yeah, I honestly try to apply simple empathy, but it just leaves me even more annoyed that somebody regards this as a problem. Now, I can empathize with physical assault. Or with not being hired *because* you are a woman. This is outrageous. But I don't think this happens very often. I can refer you to the book *The Diversity Delusion* by Heather Mac Donald, a woman, who also finds it hard to believe this is the case. &amp;#x200B; Otherwise I think we have reached an impasse. You are telling me: change. Don't laugh at sexism, don't ignore sexism. Notice sexism. Be confrontational. Call people out. I am telling you: instead of preaching the gospel of change to men, preach it to women. Teach them to be more resilient, keep their eyes on the prize and overcome minor annoyances. But something tells me none of us will heed each other's advice.
This really got me. Posted the link to my discord and instanly we began playing it for fun. Really nice concept and if the voting system works out, this can become really nice and cringy.
I feel as though this would be better as an editor extension. Having to configure this module and run it would take me just as much time as it would to create a new component with that appropriate file names and exports
This is cool and I agree it would be better if it were an extension.
Love the concept! I remember dreaming about building a collaborative story writing platform a few years ago, but could never conceptualize it enough to start implementing. Happy to see that you're doing this and wish you good luck :) I think it might need some kind of moderator approval on stories or at least a "Flag Content" button that notifies a moderator to review something. One of the first user-submitted ones was to "Rape Her". I'm sure your intention wasn't to have nasty content on there, but it's the internet and trolls will use any inputs they can to smear their shit all over the place.
These kind of "contests" usually get called out if they advertise in a community like reddit or Unity's forums. It's important to read the contest terms and understand exactly what you're getting into. To me, if they end up with \*any\* ownership of the project after the contest, then it's a scam. A true contest only asks for the permission they need to publicize the results of their contest and \*possibly\* advertise with those results in the future. If they want the actual project, they're scamming you. And it might even be illegal in some places because it's quite obvious that they're doing and end-run around labor laws.
Yeah, saying that JSX is confusing and then showing Angular's templating language as an easier-to-read alternative is just mindblowing. Although Angular's templating approach is apparently more performant than React's JSX. &gt; You can use "class" in jsx. Oh, you can already? I missed that. I thought it was still a part of the proposal of [Project Fire](https://github.com/facebook/react/issues/13525). &amp;#x200B;
Any tl;dr of this?
Haha thanks glad you like it. I dont know if im set on the voting system. Id like to get more feedback from people on it. My worry is that ts too short so if you upload a path somewhere chances are your path is going to win because other people wont find it in time. If its too long though it prevents the game from moving forward... what do you think?
Hey thanks for your thought out suggestions. Lots of good stuff there. By back button do you mean at any given path the user should be able to go back, or do you mean just when viewing the non-finalized objects? Because there is a back functionality on the non finalized ones. It works by clicking one of the options in the dropdoen menu. I see how thats not very intuitive so ill add a back button as well. Losing progress is a big one and a feature i wish i had included. I have a relatively stable development branch that has a "start at any given path" feature but it wasnt fully fleshed out so i didnt include it. By saving progress do you mean if a user leaves the page and comes back that they should be able to start where they left off? Lastly for when you are making a path it actually DOES save everythingg you did but it just doesnt appear... i realize thats bad design. I tried solving that by changing the text inside the textarea to your input, but i had trouble with that because if you place text inside, it prevented me from changing it after that. Ill have to look into that to see if theres a way to make it clear to the user that their text has been saved. I think ill make a list of the most common suggestions/questions and then post it as a vote to see what the majority thinks it should work Thanks again for your feedback its been really helpful
I've been trying to find that game again but I can't remember the name - if you happen to think of it will you say?
I would say there should be a threshold of a minimum votes before it gets into your database. Automatically being accepted can work out, but some users might not get the concept and ruin a perfectly fine path. I'd say players driven adventures shouldn't worry about the story not going on. The players will write it anyway. If this goes viral, i can see thousands of stories being created over night. And that tree, that damn fucking sweet tree, will become a meme. Most stories lead back to the tree already, and its hilarious. 
So is Icelandic
Made about 7-10 paths and this is the feedback I can give so far: 1) The conditional checks need some tweaking i guess. Mabye give us the option to choose the ammount of points we need in certain skills. 50 is way too high if only something minor happens in that path like you get attacked by a pigeon. There should be a difference between fighting off a pigeon and fighting off a human. 2) Also only random items are a bit tricky to build a nice story about it. For instance you have a path that says you see a monkey. You do something and the monkey gives an item. You probably would expect a banana or something else but I didn´t see a option were I can choose a single item as reward. &amp;#x200B; All in all pretty nice concept. Has potential to probably get many people into playing it. Keep up the good work!
I added a few poop jokes for you
I'm writing up a 12 page memo for the company I work for. A page and a half is devoted to our Ember codebase for our front-end applications. The heading for that section is: *"Continuing to use Ember presents a clear and present threat to our company's ability to grow, scale, and deliver a quality product."* I'd share it with you but not until after the report is finalized on Mmonday. 
Good. There werent enough of those
Interesting. I'm aware of people, and I'm one of them, who are working on writing the exact opposite. Productivity through the roof. And many people have a lot of experience with React as well.
No not at all i love criticism because then i know exactly what i should be working on. If i dont get feedback i just develop the features that i think would be nice but it might turn out that they arent useful at all But yeah you raise some good points. It might be worthwhile to redo a good portion of the UI. 
Good point on the items. Do you think i should replace found item with found specific item and then the users get to choose what they find? At first i didnt want to add this because i didnt want people to spam a certain item but now im thinking this game will be a lot more relaxed, and meme-y, so maybe that wont be a problem
Hmmm thats a really neat idea! Instead of having a timer, it would only choose a final path object once thereve been a certain number submitted, or maybe a certain number of votes? Which do you think would be better?
Basically I think that there should be 2 options. One where the you can specifiy one single item and the second one would be a random item where you can actually choose (with checkboxes mabye) which items you can get. &amp;#x200B; If you want to drive it even more crazy you could make different paths for each random item but this probably will fuck up your tree structure i guess 
If you are already using Babel and are open to enabling stage 2 plugins, the [optional chaining plugin](https://www.npmjs.com/package/babel-plugin-transform-optional-chaining) will allow you to do this: if (obj?.prop1?.prop2?.prop3 === 'expectedValue') { console.log('has expected value'); } Alternatively, if you want a more direct approach, you can use Lodash/Underscore's `_.get()` or Ramda's `R.path()` method. If you want a vanilla JS version, you can do this: function isUndefined(value) { return typeof value === 'undefined'; } function isNull(value) { return value === null; } function isNil(value) { return isUndefined(value) || isNull(value); } function path(object, keys) { return keys.reduce((object, key) =&gt; { let value; return isNil(object) || isNil(value = object[key]) ? null : value; }, object); } function prop(object, key) { return path(object, key.split('.')); } if (prop(obj, 'prop1.prop2.prop3') === 'expectedValue') { console.log('has expected value'); } If you'd prefer a more monadic approach, you can use a Maybe monad: function isUndefined(value) { return typeof value === 'undefined'; } function isNull(value) { return value === null; } function isNil(value) { return isUndefined(value) || isNull(value); } class Nothing { constructor() { this.value = null; } map() { return this; } flatMap() { return this; } or(maybe) { return maybe; } orJust(value) { return new Just(value); } } class Just { constructor(value) { this.value = value; } map(fn) { return new Maybe(fn(this.value)); } flatMap(fn) { return new Maybe(fn(this.value).value); } or() { return this; } orJust() { return this; } } class Maybe { constructor(value) { return isNil(value) ? new Nothing() : new Just(value); } } const value = new Maybe(obj) .map(({ prop1 }) =&gt; prop1) .map(({ prop2 }) =&gt; prop2) .map(({ prop3 }) =&gt; prop3) .value; if (value === 'expected value') { console.log('has expected value'); } Of course, you can implement the direct approach using this monadic interface as well: function path(object, keys) { return keys.reduce((maybe, key) =&gt; { return maybe.map(obj =&gt; obj[key]); }, new Maybe(object)); } function prop(object, key) { return path(object, key.split('.')); } const value = prop(obj, 'prop1.prop2.prop3').orJust('default value').value; If you're keen on the idea of using regular syntax and don't care for older browsers, you can use a `Proxy()`: // assume that the functions from the above code snippet exist in scope here also function safe(object, accessor) { const keys = []; const proxy = new Proxy({}, { get(target, key) { keys.push(key); } }); accessor(proxy); return path(object, keys).value; } const value = safe(obj, proxy =&gt; proxy.prop1.prop2.prop3); That's about all the methods I know of handling this particular quirk of JS.
I like it. Lots of work, but it sounds way more interesting than the current system. Thanks for your feedback
I think I found my new fave meme: [https://collabopath.com/FOOD\_ICON.jpg](https://collabopath.com/FOOD_ICON.jpg)
Sounds like a line from the game.
How is it different from good old school yeoman, or any other starter kits? e.g. angular cli can generate new projects with predefined structures easily
Are you from Winnipeg?
Some of the images does look like Winnipeg lol
i live near the minneapolis area, those pics are of minneapolis, which is approx same size of a city as winnipeg i think. Hello, neighbor from the north!
Niceeee! Hi, neighbor from the south~
I played until the choice was for the character to rape someone one way, or rape them another way. I stopped there. You *need* to have some means to moderate these, dude. Otherwise the dicks win.
Surely you could have found a less offensive way to say you didn't like it
Thanks so much!
This, unfortunately, is a question that multi-billion dollar companies still haven’t found a good answer to. :-) Any automated system will eventually be exploited (they got around the profanity filter by misspelling words on purpose, for example) but manually moderating requires a lot of human time and effort. The balance needs constant tuning in any application. 
Front End Happy hour is also good, I agree. I also agree with your second point. I'm a self taught dev and at my current (unrelated, blue collar) job I have my headphones in all day every day. I started listening to any web dev/coding podcast I could find, and for the first 6 months they might as well have all been in an entirely different language. I did not understand a single word -- I was listening to developers debate async/await vs promises while I was still learning HTML. But after awhile you pick things up and it's definitely been very helpful, especially when you get around to learning the things you've already heard about.
I have removed the rape text by the way. I suppose for now, simply having a report button, and if I get enough reports on a certain path object, I'll take a look and remove the offensive words.
JavaScript Air is an archived one but it’s great content.
are you using a library audio player? 
Explanation: https://medium.freecodecamp.org/the-virtual-dom-is-slow-meet-the-memoized-dom-bb19f546cc52
What do you mean
are you just using the &lt;audio&gt; tag or are you using a custom player?
myMusic = new audio(“Ghost Town.mp3”);
Done that 
No, but this is a great opportunity to learn to code while driving.
Are you thinking of Heavy Rain for PS3?
Since when? I did it like yesterday (copy and paste fail) and got a warning. 
This is really cool. I submitted a path. &gt;! pick aids.. trust me !&lt;
I found it, it's called fahrenheit or the indigo prophecy 
Oh that changes things, don’t think it existed when I was using Wix. But yeah using “Wix Code” it should definitely be possible. Sounds like a cool project, I don’t know to what extent I could help out but if you want you can reach out through pm and we can exchange discord contact or something like that. 
Draw the rest of the fucking owl. 
Very funny idea! Why did you choose React?
so great ! I like this, and you can make some different kinds of starter like kinds of plays ,such as fantasy ones 、 science fiction ones and so on. 
okay. the Benchmark still says virtually nothing.
«Because it does not have types.» © Captain Obvious.
To point out just a few reasons: 1. Javascript is available almost everywhere without requiring any transpiling or additional build steps. 2. Way more code examples, reference, community knowledge etc. for JS 3. Types are not necessarily better - they trade safety and easier debugging for conciseness and ease of use.
A variety of reasons. For example, some already have large JavaScript code bases and conversion isn’t practical. Others don’t agree that explicit types are that beneficial.
https://youtu.be/zeKNXaM2fsA 
I planned doing something like this, i named it [scaffa](https://github.com/KobbyMmo/scaffa), but as a lazy person i couldn't even start. maybe i can just contribute and make a PR
Strong typing is for weak minds, I say. The virtues of a dynamic language are rapid development and robustness. TypeScript doesn't even run faster, which is the only virtue of BDSM.
What a great game！Hope it would be better！recommend you a game [http://puzzle-lt.com:9301/](http://puzzle-lt.com:9301/)
For the sake of safety of other people's and yours, please don't do it.
&gt; Types are not necessarily better - they trade safety and easier debugging for conciseness and ease of use. Ease of use? Why does it have to be easy. I personally don't mind about ease of use, as long as my Code is properly typed and my Objects defined. If I were to take a break from a Project and come back to it after a few months, I found Typescript projects easier to get back into, than getting back into Javascript. I'd have to infer types from "english" rather than Types, and that is bad, because each one uses different variable naming schemes. 
You can use [Linked Helper - LinkedIn automation tool](https://linkedhelper.com) for this: 1) Upload your list [https://medium.com/linked-helper/how-to-upload-profiles-urls-into-linked-helper-cd6147a85aaf?source=---------11---------------------](https://medium.com/linked-helper/how-to-upload-profiles-urls-into-linked-helper-cd6147a85aaf?source=---------11---------------------) 2) Run "Collect, select &amp; invite 2nd &amp; 3rd contacts" function [https://youtu.be/ztLk9ZE8dFQ](https://youtu.be/ztLk9ZE8dFQ)
noted will do it thanks for the feedback 
Just because you enjoy programming, doesn't mean others do. I may have misspoke by using the word "most", but that doesn't make you more correct than I. At least my pants have usable pockets.
You don't need types for a small project. Types are there to hold up the pieces together when you have many components, lots of code, and many complicated third party dependencies. Everything has its application. TypeScript is awesome, but it doesn't mean you ALWAYS have to use it. After all, it adds complexity to your pipeline, you need an IDE and you need to wait for compilation to take place, debugging is a bit more cumbersome as well.
&gt; Only about 5% of my errors are because I use a number where a string should be. That... is not what types are about.
r/javascript - 442k readers r/typescript - 11,329 readers this.
&gt; You don't need types for a small project. For big projects too.
So you have priorities that align with Typescript, that's not necessarily the case for everyone, or everything. That's all the reason there is to it
As /u/HipHopHuman mentions, this is really tasty in stage 2... but until then, duck typing, KISS and Truthiness have got your back: if (obj &amp;&amp; obj.prop1 &amp;&amp; obj.prop1.prop2 &amp;&amp; obj.prop1.prop2.prop3 === 'expectedValue') { // good to go }
This isn't such a clear cut. There are some advantages to dynamic types. This as an ancient debate that I don't think we'll settle here :) [this Quora answer sums it up quite nicely](https://www.quora.com/Is-static-or-dynamic-typing-better/answer/Rhys-Olsen).
Typescripters are busy setting up \`webpack.config.js\` and don't have time for Reddit.
Good attempt, but maybe try harder. You’re still imagining other people’s situations from your own point of view – not everyone has experienced other people assuming they know more than they do, and many wouldn’t see this as a bad thing. Think more deeply about people’s past experiences, male or female, and how it shapes them into the person they are today. Empathy is a very valuable life skill, I call upon it frequently when I’m building user experiences. Women are already resilient as fuck, that’s how we’ve arrived at a place where we can work alongside men in the first place. Women are preached at every single day to “be strong”, “fight the patriarchy”... and it’s working. But it’s time for men to take more responsibility for raising women up. Why? Because it is a problem that YOU created, and YOU still enforce with your causal sexist remarks. Hell, you’re lucky women only want equality and not revenge.
[https://github.com/asifsha/react-jet](https://github.com/asifsha/react-jet)
&gt; I access a nested property on a JSON object that isn't there for certain special users That's... exactly where types would help if you model your domain right. That "special case" should be encoded in the types so that you can access the property only if you prove to the compiler that the state is right.
a tech lead at my company says "using types in javascript is like putting lipstick on a pig" :D
Listen to Douglas Crockford.
You will need to use the [Heroku Scheduler](https://devcenter.heroku.com/articles/scheduler). &amp;#x200B;
True. Types are case-specific.
Try to return early, for example if (!id) { return errorMsg }
 const returnLinesRequiredData = (lineObj, id, key) =&gt; { if (!id) return lineObj; if (id &gt;= lineObj.stations.length) return errorMsg; if (!key) return lineObj.stations[id]; if (!lineObj.stations[id].hasOwnProperty(key)) return errorMsg; return lineObj.stations[id][key]; }; Knowing the specification for the process and data _may_ also offer some other ways to do it. But without knowing more, this, at least, avoids nesting and preserves the same logic. In any case, I don't think _efficiency_ comes much into play in this.
Try /r/PHP maybe?
Yes, this seems to be a better way to approach it, thanks! What I meant was _conciseness_, used the wrong word :| I'm building an API, here is the repo: https://github.com/plibither8/delhi-metro-api. Hopefully it can help :D 
&gt; If I were to take a break from a Project and come back to it after a few months, I found Typescript projects easier to get back into, than getting back into Javascript. **[JSDoc](https://github.com/jsdoc3/jsdoc)** is a life saver, regardless of which development dependencies you use. I really wish more developers were as adamant about properly documenting their code.
Ah yes, I'll keep that in mind. Thank you :)
I think the individuals are prone to that, perhaps, but when they group together there are plenty of them that see through scams and feel compelled to tell the group about them.
somehow if you connect two strings with &amp;&amp; the last value will be returned. `'google' &amp;&amp; 'reddit'` returns `'reddit'` also a connection with || returns the first value `'google' || 'altavista'` returns `'google'` **Don't do it that way, it will lead to errors**
Yes, I’m white and British. I believe, like many other British people my age, that I have a responsibility to change any behaviours which have been conditioned into me through my country’s long-standing social history of colonialism to help level the playing field for POCs. I don’t have to do this, but it makes me a better citizen. Just out of interest, where do you live? I feel that my worldview stems from living on a very densely populated island (UK), in an even more densely populated city (London), with very close neighbouring countries. To some extent, I have no choice but to consider the lives of other people, as they are so closely intertwined with my own. I acknowledge that you may not have this upbringing, so I will not hold it against you. I only ask that you appreciate things from outside of your current situation, but if you can’t do this then... you do you, I suppose. No one is expected to know all this when they are born, it’s a constant process of learning and listening to those less privileged than you. If you have no interest in making the world richer, more creative and more interesting through inclusion and diversity, that’s fine. It just seems a shame that you’d want to miss out on this, particularly as I know that you’re open to entertaining different opinions – after all, you’ve entertained me for this long.
I don't think it's that arbitrary, since they're comparing different dom manipulation techniques
&gt;when I make an assumption about the production database state and I access a nested property on a JSON object that isn't there for certain special users tbh that sounds like a great case for types
no
So far my projects, even the large ones have been fine with ES7+, ESLint and Vscode intellisense. Why bother with typescript complexity? Also, I like much more times scripting languages than any other ones. They are fun to code with. I dislike how in typed language you have to declare a class for every fucking small thing. And you can't code freestyle with them. 
Return early, and to make code a bit more concise, i'd use destructuring as well: ``` const returnLinesRequiredData = (lineObj, id, key) =&gt; { const { stations } = lineObj; if (!id) { return lineObj; } if (id&lt;stations.length) { return errorMsg; } if (!key) { return stations[id] } if (!(lineObj.stations[id].hasOwnProperty(key))) { return errorMsg;} return stations[id][key]; }; ```
This is something I’ve searched for before but to no avail! I’d recommend just extending something like Airbnb or JS Standard as a baseline instead.
I got pepe as starting item
``` if (id &amp;&amp; id &lt; lineObj.stations.length) { ... } ``` Should not give you any problems either. If id is null it won't attempt the second part. 
Hello everyone, I would like to reproduce this system of "roulette" in javascript on my site, where users could play just like in the game once a day and get a reward. Not at all comfortable with javascript, would anyone have an idea of ​​how to do it?
United + WebGL is your answer. The logic is trivial, but you'll need to find graphics and audio assets to polish it up. 
No, focus on the road! Othere people's lives are more important than your knowledge of this, scope and mixins.
I can bring sound and graphics without worry, but not the code unfortunately! Do you think there are many hours of work?
Don't know about courses, but if you specify your background in programming and possible application of js, I might suggest you something to read.
Recently we started to use hygen. It has awesome tool which creates templates from existing code.
You could use || to deal with some of the error cases: ``` const returnLinesRequiredData = (lineObj, id, key) =&gt; { if (!id) return lineObj; if (!key) return lineObj.stations[id] || errorMsg; return lineObj.stations[id][key] || errorMsg; }; ```
Oh, I am from Moscow, Russia. Which means, on the one hand, from a rather backward country, but on the other hand, from one of the more Westernized, liberal and "progressive" parts of it. I am fascinated by the spread of the post-colonial liberal leftist worldview in the West that I am seeing in online conversations. I wonder whether this comes from school education (although remembering myself from my schoolboy days, I was pretty resistant to any kind of political, ethical, or moral indoctrination), or from peer pressure, or from the changes in culture. It seems like some words (such as racism, sexism, fascism, democracy, diversity) are now eliciting in many a reflexive knee-jerk reaction signifying either an unconditional good or an unconditional evil (which is unfortunate, because it makes people easier to manipulate, much as many Russians are still being manipulated by the word fascism in the present conflict with Ukraine. But I digress). Pertinent to our discussion, a cluster of concepts that seems to have been unquestioningly accepted by many is about diversity. Diversity is said to be good, and the lack of it (otherwise referred to as monoculture) is said to be bad. This baffles me (as much as I think it baffles some older Westerners). I totally get behind the idea that we should try to be tolerant to each other (although my understanding of tolerance also includes tolerating the intolerant), and that gatekeeping or denying someone the right to join is mean, but I cannot see valid reasoning (other than political) that diversity is a virtue in itself and should be actively sought after. I think it is something completely orthogonal to our work. If my team is all male and it does the job well, I will not for a second think, damn, I wish we had more women on the team. If it is gender-diverse or if everyone except me are female (the latter never happened, but I hope I would not have been mistreated in a mostly female team), this is also perfectly fine. As long as we work together on a common goal as a team, I hope I will never have a reason to care what gender my teammates are.
Don’t return your error messages if there’s an error. It’s almost always better to throw an error and catch it somewhere above the call stack. Returning error messages when something is wrong makes your code base very error prone especially when you have multiple devs. I’m not sure whats the type of the other values being returned but it’s generally a good idea to return values of the same type in a given function even though JS isn’t type strict. If you do want a function to have the possibility of returning values of different types, considering splitting them into multiple functions. It leads to a much better code base with an API that’s easier to reason about. For example given an input of the same type, it would be very bad practice for the function to return an object in certain cases and a number or string in another case. 
btw just noticed that your code will never return `lineObj.stations[0]` – is that correct or should you be allowing `id` to be zero?
There probably is a reason why they didn't want to use the usual benchmarks. React and vue batch dom updates, so it's completely pointless to benchmark modifying single item and then waiting a forced update.
I feel bad for the imba creator now. Seems mislead a bit.
I don't recommend it. I have done it once - wrote a script that goes through the src and does it (it's pretty simple, the structure of their repo is very clean). There are A LOT of rules. And that's just the default ones. And they keep on adding them quite frequently. Keeping up with it is a massive drain
Because we don't give a shit about static types.
how do you cache .next folders? what do you think of next-offline package for workbox?
Yeah same. I'm not saying it's necessary slower, but the benchmark is definitely using react and vue in a way they are not supposed to be used. The idea probably isn't bad, I believe Aurelia does something lile this, but don't quote me on that.
I was pretty skeptical on learning programming by listening.. boy I was blown away
Wow man! really liked your efforts... keep it up
That doesn’t make any sense! If you can install eslint you can install eslint-airbnb 
&gt; You approach the tree, and caress its tender bark. What a beautiful tree... After a few hours, you and the tree are both satisfied. Maybe instead of always authoring a new story you could search for one that already exists and fits?
Ahh, now I am beginning to understand you better! Please correct me if I’m wrong, but am I right in thinking that your efforts to resist what you perceive to be “political indoctrination” are perhaps due to your country’s soviet history? I can definitely understand this, and in all honesty I see it as rather wise given your circumstances – and particularly given that the evils of fascism have not entirely been obliterated in your neighbouring countries. In the UK however, any attempts at political indoctrination usually stems from the right. We have a lot of problems with our national press, who constantly preach the values of intolerance, but in a country as diverse as ours to act on these values would quite simply plunge us all into utter chaos – indeed, that’s exactly what we’re experiencing now with Brexit, in which 52% of the country became induced by such values and voted to create a less diverse, inclusive country. The fact is, however, that the UK has been made far richer by our inclusivity. Our country was destroyed after WWII and our population was depleted, so we relied on immigrants from the Europe, India and the Caribbean to rebuild. Even now we still bear the fruits of diversity – much of our healthcare system is made up of EU workers, and this is also the case for our agricultural industry. Brits rely so much on a diverse society that we’ve actually begun to take it for granted, hence Brexit and the development of alt-right parties such as UKIP and Britain First. The younger generation in this country are, for whatever reason, the only ones who seem to realise this. I can’t say that we were “indoctrinated” in education, because in all honesty our school curriculum is pretty archaic – all we really cover in history is winning both world wars and the Tudors, which to me seems pretty Nationalistic, if anything. Perhaps it is because we grew up in such close proximity to different races, genders and sexual orientations that we realise one another’s true value. I suppose the “unconditional good” and “unconditional bad” phenomenon that you speak of is because it allows people to become more easily mobilised towards a goal. This is important when you’re living in a highly volatile political environment such as the UK or the US – you need people on your side if you’re going to win. It does, however, work both ways: to the Trumpists and UKIPers of this world, the word “diversity” is indicative of a broken country. As for why diversity is a good thing... I can talk to you all day about how having people with different interests, life experiences and thoughts etc can produce richer and more meaningful work, but I feel that it is something you would have to experience for yourself to fully understand. It’s a situation where you’ll never know what you’re missing until you try it.
[removed]
Thanks tho. I want this.
Got the t-shirt
The phones no excuse for omitting the semi-colon! 
&gt; and to make code a bit more concise, i'd use destructuring as well: Don't do this, you'll hate yourself when you have to go back to change something and you can't even read your own damn code. Readability &gt; being concise
Then which terms are suitable for that case?
This is really great work and has the potential to be come so many great things. I’m sorry users are leaving vile comments 😢
Why don’t you just disable the ones you don’t want. If you’re going to be disabling most of them then you might as well not use eslint. 
My background would be Python, from uni, as a hobby and from work. I would consider myself probably just sub "intermediate". Use Python to interact with databases, websites and perform loads of calculations lol. Have played around with a little Java (android dev basics) and a little html, css and a smidge of javascript (not enough to actually do anything useful). &amp;#x200B; Looking to get into javascript to help automate websites, injecting javascript at proxy level (or any other level if possible). So as well as a beginners guide (which I already have, got it today so not started) if you know of any other good places I should look into I'd apprecaite it.
It sounds like you have a few issues that you've tied together: - You have a big code base that is hard to maintain - You might not have strict rules of how your team should contribute - Your team is hesitate to try new technologies. The first two listed are way more important issues than whether or not your team is using the latest hotness. When a code-base gets big with no real rules on how to contribute and maintain it, then the path forward will always be difficult. Things like eslint can help to a degree, but the reality is that this is a people problem. Getting your team on board with code reviews and a style-guide will help. Getting your team to work together to refactor ugly bits of the code will also help. My personal opinion is if you have a team/project problem, throwing new tech that not everyone understands on top of that will make your problems worse.
“Get in mah bellay!”
In my opinion, the best entry level book is https://eloquentjavascript.net/ It will guide you through language, some techniques and apis (browser and node). After that I think you'll be able to catch up with docs for certain apis you want to use.
If it's for me, I'd use this. let o; if ( (o = obj.prop1) &amp;&amp; (o = o.prop2) &amp;&amp; (o.prop3 === 'expectedValue') ) { console.log('has expected value'); } 
I think that at least with React implementation it rerenders entire Virtual DOM tree, and updates are triggered outside of a scheduler loop, so it should immediately perform an update. And Imba just goes through entire tree, finds "memoized" nodes and checks all dynamic values.
You're using the `$()` function wrong. Selector(s) must be passed to the first argument. The second argument is not a selector. https://api.jquery.com/jQuery/ In short, you're specifying the selector incorrectly. It should be passed like below. $('#edit-modal-form input[name=Position]').val()
The big fat images is not enough for your attention span?
The first 3.5 hours of JavaScript the weird parts are available for free in YouTube. Highly recommend watching it to get a good understanding of how JavaScript works under the hood. It's also very beginner friendly! m.youtube.com/watch?v=Bv_5Zv5c-Ts&amp;t=5100s Sorry for the mobile link im sending this from my phone.
Yes! This!
Interface/Contract define, well, the interface. Service implements the Contract on the server side. Client obtains a Stub/Proxy via some kind of Proxy Factory. The Proxy is responsible for Marshalling requests and Unmarshalling responses. Wiki page on RPC has more details on this.
Looks like a novel idea! Unfortunately I ran into an issue while submitting a new path object. After I wrote a (rather lengthy) description of my first path choice and clicked "Next", I was taken to the "Choose Effect" tab. But when I pressed "Back" to double-check what I had written, it had been reset to blank! It was very disheartening to lose all that, and rather than try to remember what I had written and start over, I decided to submit this bug report instead. Cheers!
Early returning such as everybody has already said. Also, if there is an error you should throw it such as \`throw new Error(errorMsg);\` The advantages are that you can easily distinguish it from a non error return (in this case it would be really hard if your successful return is a string as well). You can also get the error stack when you throw the error and more easily debug and find it. Finally, if you throw errors that will force you to write error handlers where you use this function and handle the errors nicely for the end user.
Sure, but it's still pointless. You're never going to have 9000 events per second. Now if those 9000 mutations were done in a single event, react would render only once. It's hilarious that OP claimed that traditional benchmarks don't rerpresent real world usage, yet his benchmark has completely unrealistic scenario in addition of using react and vue the wrong way.
Thanks will check it out.
Second selector is the context (as it says on your link). Rather than use the document, it's a way to slim down the possible matches before running. Would probably need a little more insight into your code to see what's wrong with this.
I'm an Angular noob as well, but I always check StackOverflow for how others have handled similar situations. Have you searched there for "export to CSV"? There might even be existing libraries others have wrote. You could examine their methods on Github. Just a couple of suggestions....
On mobile so short answer: you declare function parameter as age but pass an object is its call. JS will convert and try comparing with whatever was passed to it. Also, seems like you use fixed variable names in the function declaration (effectively making 'is rob older than sam' function rather than 'is A older than B') 
The argument you are passing is an object, so the boolean condition in you isOlderThan function is essentially evaluating: ``` if (rob.rob &gt; sam.rob) ``` which doesn’t make sense. I suggest making sam and rob two separate arguments, and let the function take in both. It would look something like this: ``` function isOlderThan (person1, person2) { if (person1.age &gt; person2.age) { return true; } else { return false; } } ```
We have a million+ line app without a single semicolon
If you need the logic, it's an circular iteration over the objects array (actualPosition % arrayLenght). For each loop, you trigger the "select" effect only on the element on the position. Here's an example:``` let prizes = ["prize1","prize2",prize3"] let endpos = Math.rand(0,2) for(var i = 0; i &lt; (3 * 3) + endpos; i++){ applyEffect(prizes[i%3]) } console.log(`You got ${prizes[endpos]}`) ```
What about destructuring hurts readability?
u/HipHopHuman mentioned Proxies. I wrote [safe-navigation-proxy](https://github.com/clemyan/safe-navigation-proxy) as a "I wonder what I can do with Proxies" kind of deal.
I thought that at first, too. But once I finally got the whole module, compnent, service, DI architecture, and the tricks to reusing and nesting components, it clicked, and now it seems simple.
If ya want more words, you can pick some /use/share/words file from any unix based OS.
Don't you feel using lambda, dynamodb and sqs makes you vendor locked in? Honest question (not a snarky comment), as a developer, doesn't it make you a little claustrophobic to depend on proprietary services? 
Here's a complete example that I think demonstrates what you are trying to accomplish: ` &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;input type='hidden' id='amigo' value='$nombreAmigo'/&gt; &lt;input type='button' value='escribir' onclick='setDestinatario(this)' /&gt; &lt;input type='text' id='destinario' /&gt; &lt;script&gt; function setDestinatario(e) { var amigo = document.getElementById("amigo"); var value = amigo.value; var destinario = document.getElementById("destinario") destinario.value = value; } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; ` That's if you're trying to take the value from the hidden input and drop it into a text input. If you're trying to take the value from the hidden input and just drop it into a `div`, `span`, or `td`, then the last line of JS would instead be: ` destinario.innerText = value; `
afaik `this` in an html onclick handler declaration referes to the element itself and not the event. this would then be the `event` variable that is also there. secondly you dont have to iterate over the event srcElement to the document. you can simply use `document` as a global variable.
This wouldn't quite work. It is `innerHTML`, not `innerHtml`, and sine JS is case sensitive, this would prevent it from working. `innerHTML` is also a property, not a function, so calling `.innerHTML(amigo)` wouldn't work either. The call you'd want to make is: ` document.getElementById("destinatario").innerHTML = amigo; ` 
&gt;https://www.destroyallsoftware.com/talks/wat watman
True, but you can then reuse the configuration file in future projects.
Fuck semi colons. Entirely unnecessary. 
Haha sorry. I wanted to release it so its friendly for anyone to use so i put a basic profanity filter in. In the future ill see who the core user base is, and might adjust it to cater to the people who actually use the site
/usr/share/dict/words, is what I think you were going for there. :) Just helping.
Im so sorry about that! One of the other users said something about that and it actually does save everything you wrote but when you go back, it doesnt show up on the screen... its still there in memory it just doesnt get shown again. I know, its really bad UX ans ill work to fix that
Good luck and keep it simple! Small csv datasets can be linked using href="data:text/csv;charset=utf-8,&lt;csv-here&gt;" made an example: [https://codepen.io/puritanner/pen/JevowR](https://codepen.io/puritanner/pen/JevowR)
Hmmmmm so why ESLint actually allows to configure these things if people don't want it / it's not needed 🤷? He doesn't want to disable everything, he just wants to setup his own standards. What is that research you talk about which confirms that AirBnb or any other standard is superior for *every* team, way of building software, architecture or developer out there? And btw. such thing does exist and is fairly popular https://gist.github.com/cletusw/e01a85e399ab563b1236 and I maintain a fork of it https://github.com/DominikSerafin/eslint-starter 
Hey, check my other comments in this post - I maintain such thing.
I find that picking naming conventions that imply the type of a variable to be both very easy and very successful even when many people are working on a shared project so I will disagree that inferring types from English is bad. Consistent naming schemes are so nice and so common that I picked up the practice from *typed* languages.
Hey, no problem lol. You really inspired me, I think I'm going to try and make a dating sim that works similarly to how this works. Of course I'll credit you (and link you in if I ever manage to finish it :p)
This says more than meets the eye. I've been fuxoring personally with JS for "a long time", including Node. While I am aware of typescript, at no point have I been compelled to use it. The same, cannot be said about Node &gt; Express. Node is a completely different animal without Express (or any complete framework for that matter). &amp;#x200B;
Depends. Some people like it for readability, and I would consider readability to a certain degree necessary. A way more extreme example, but indentation is not necessary for code to work but I still consider it necessary.
Nice! Found a bug: If you submit the correct answer multiple times, you'll get a new "Play Again" button for each submission.
&gt; What is that research you talk about which confirms that AirBnb or any other standard is superior for every team, every way of building software, every architecture and every developer out there? I mean, I wouldn't be surprised if some "universal" coding practices existed (and might even be willing to bet _nothing at all_ on some being those), but I'd need to see a _lot_ of evidence before I believed that any particular ones are those. I wouldn't also be surprised if some were delightfully counter-intuitive. 
I love how you fixed your comment so that my comment looks redundant LOL, nice move.
Thanks. I should consider renaming
[removed]
After playing the game, have a couple of suggestions. 1. lowercase the users input or treat it not to be case sensitive. 2. Strip out white space from the users answer. I was playing it on my phone and it entered in white space and said my answer was wrong. After removing it, it worked. 
What does that have to do with destructuring though?
Look at the code I replied to, he is cramming everything onto one line.
I'm looking at the line you quoted and disagreeing with it.
I agree with you. Personally, I treat various standards (Airbnb, StandardJS, Google, etc.) more like a guidelines than a rigid set of rules applicable for every situation. Some of them even are described as "style guides" like e.g. [Airbnb](https://github.com/airbnb/javascript) "JavaScript Style Guide" (https://github.com/airbnb/javascript) or [StandardJS](https://standardjs.com/) "JavaScript style guide, linter, and formatter". And when in team environment more important thing than neatly designed coding standards is to actually keep consistency across whole codebase. Even if standards already in place are imperfect. It's one of the reasons why I'm recently starting to really like [Prettier](https://github.com/prettier/prettier). It keeps everything consistent without any effort from developer by auto-formatting the code. 
This is how hub does it for GH - source branch is your current branch - base branch specified as an argument - default git editor opens; first line is the title That way a PR is simply: `git pull-request -b dev`; type my PR details, `ctrl+o` to quit nano (my git editor of choice) and the URL of the PR is printed on a newline for easy access. Side note - is there an easy way to copy to the clipboard? Usually the first thing I do with a PR is send the link to someone, so with the link automatically copied to the clipboard I wouldn't have to use the mouse at all (simply alt-tab to my chat window and ctrl-v)
It says it uses Chrome bingint implementation. What about browsers which don't include their own bigint implementations?
Personal opinion follows: TL;DR --&gt; it depends on what project priorities, team needs are. Define/Identify the problem, then choose from available choices. I think some choices are dictated by the technology being used. I started with JSP, struts, JSF --&gt; MVC was enforced. With backbone, I stuck to MVC, but in one setup had to switch to MVVM just because the screen &amp; flows demanded it. It was pre Flux era. With react, I think even the official classification is: it's a view layer. That opens up a whole possibility of architectures to follow. Personally I favor Flux idea of thinking, because it helps visualize the state as tree &amp; fits nicely with component architecture. But more I used react in different scenarios, the more I realized that the real challenge is in deciding where &amp; how state is managed. I wrote a very lengthy answer about it: when to lift, when to introduce a state management library &amp; how to choose a library, I'll link to that once I reach home. My yardstick for such architectural/design approach is: Managed growth of complexity. I prefer to delay such impactful decisions till they're absolutely needed. Starting with familiar choices always lulls you into a false sense of productivity &amp; all of a sudden you may find your codebase fragile or resistant to changes. Start simple &amp; grow over time. Regarding the structure of code, this comment is quite long, I'll add a different comment in a while.
Generally I stick to this structure (not sure if there's a name for it): ./src * components * css * FooComponent.css * FooComponent.js * screens * css * BarScreen.css * BarScreen.js * services * Email.js * Utilities.js * ServiceName.js This structure has worked well so far for small-mid sized projects. I'd be also curious if there's a more efficient approach. &amp;#x200B; &amp;#x200B;
Not necessarily. The correct typing is a Maybe monad. The reality of types is the JSON type specification is a bucket of maybes, and you have to use lenses to safely fetch parts and handle undefined cases. See Haskell for this. This is a massive pain as well because now I have to write a ton of boiler plate logic when I don't need it, just to protect myself against the few, but annoying cases when my assumptions are wrong. This isn't exactly "better".
This looks like a cool project! If you need any help or dutch translations, hit me up!
I'm mostly looking for programming help haha! But thanks for the support :)
[Don't](https://github.com/arshadumrethi/word_jumble/blob/339db3d1b608fedd7aea724446a6b67a00d0f3bd/script.js#L11) extend built-in objects. ---- Avoid writing a function that is [almost 140 lines long](https://github.com/arshadumrethi/word_jumble/blob/339db3d1b608fedd7aea724446a6b67a00d0f3bd/script.js#L36-L173). ---- You're passing an argument [here](https://github.com/arshadumrethi/word_jumble/blob/339db3d1b608fedd7aea724446a6b67a00d0f3bd/script.js#L51) that is [not needed and ignored](https://github.com/arshadumrethi/word_jumble/blob/339db3d1b608fedd7aea724446a6b67a00d0f3bd/script.js#L36). ---- If you want other people reading and commenting about your code, indent it correctly. ---- Two related things: - Separate things that should be separated; and - Give things the correct names for what they actually do. It happens throughout the code, but as an example take the `matched` function [here](https://github.com/arshadumrethi/word_jumble/blob/339db3d1b608fedd7aea724446a6b67a00d0f3bd/script.js#L112-L121). This `matched` function, according to the comment comes into play when checking if the word introduced is correct. Right, but what does this function do? Does it _check_ if the word is correct? Or is the action we want to take when indeed the word is correct or not? It turns out that this function is doing **both** things. It checks the word _and_ it calls a bunch of things in one case or the other. The function is also called `matched`. That name suggests that this function will actually be called when we indeed have a match. But no. We call it to see if we have one. How should it be done instead? Something like this (**Warning**: read below because this approach still has a big flaw which your code shares and it's important): // 1. have a function that checks for correctness function isCorrect() { return myInput.value.toLowerCase() === unShuffledWord; } // 2. have a function to handle checking the user's answer, give it a better name: function checkGuess() { // only call one or the other, // don't call success and also do some other housekeeping stuff here. if (isCorrect()) { success(); } else { fail(); } } ---- Now, as I said above, that code still has a big flaw. Most of your functions don't take any arguments and none of them (expect for `shuffle`) return anything. This is something that should always give you a hint that you're doing something... well, not good. What happens is that you have a bunch of functions sharing some _global_ variables and/or reaching for any piece of data they need from and to the DOM. This is a bad design approach. It makes it harder to make changes. All the code becomes entangled and logic and flow are a mess. So, instead, write functions that receive things and return other things. Try _hard_ to do this as much as possible. Then, build other functions which are a level above that and call those functions passing the arguments they need, receiving the results they return and doing whatever is appropriate with those. That is, you create some functions that do operations, calculations, checks, actions... and then you some other that contain the _flow_ of the logic. With this in mind, you should probably re-write most of the `runGame` function and the functions contained in it.
Yep that's the one. Thanks!
yeah, I'll look into it. Any references? 
Hi /u/cimtcollege1, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
It's just so I can leave the css folders collapsed in my editor and not confuse them with the JS files. There's no hard rule regarding this, just what works well for you :)
Hi /u/webautogui, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding.
Hi /u/webautogui, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index). Thanks for your understanding.
&gt; Posts must be inclusive to all -- e.g. no beta invites, "PM me for access", "free for first N users", etc. https://www.reddit.com/r/javascript/wiki/index
You can just do \`git pull-request -ce\` for the current branch from the CLI and type the title on the first line, leave a line, description on the following lines. Not sure this needs a tool, but neat anyway.
You should have 100s of upvotes! Quality code review right there. Great job!
How would one do that?
Thank you for sharing! As I commented the other message I didn't know about \`git pull-request\` command, and I don't know why I cannot find anything on it. &gt; is there an easy way to copy to the clipboard? Yes, is a good idea. The only problem that I see is that the action to copy to the clipboard should not be automatic because can be destroying and unwanted. &amp;#x200B;
CSS in JS
References for the code or for the fact that this is the most efficient way to do it? 
both maybe.
&gt; At the end of the day, who are we to say that our culture is better than theirs, so they must assimilate to ours? I think a host culture can claim superiority over immigrant cultures (much as the conquering culture in the time of the empires could claim superiority over local cultures). After all, I believe immigrants move to a place where they believe they will have a better life, and I would expect of them to be willing to swallow the new culture line, hook and sinker. I sometimes perform a thought experiment. I would imagine what it is like to be perfectly happy about the place where you live and then to see it gradually transform into something unrecognisable: to see more and more strange people wearing strange clothes and speaking strange languages — say, Spanish, or Arabic, or Chinese, or Polish. To experience the frustration of asking someone for directions (or something else) only to realise that you do not speak the same language. To feel as if you were effectively transported (against your will; no-one asked for your consent) into a different country. I know this concern may seem ridiculous to a Londoner, but I think for many it is valid; otherwise there wouldn't have been a re-emergence of the right movement throughout Europe and in the US.
Man your feedback is awesome 👌
I'm fond of a few frontend architectures. TEA (The Elm Architecture) and MVI (model-view-intent) in particular are very nice. Both for a similar reasons. 1. The view is not allowed to maintain any sort of internal state. This affords you some very strong guarantees and makes testing easy. 2. Events on the document are tagged with some sort of signal of intent and descriptive information. This is a practical thing, but also has the benefit that \_any change to the state of your application is guaranteed to have some sort of audit trail\_. 3. Some sort of "update" function continually produces a new model based on the lastest event and the previous model. It is very handy that any change to application state can only occur in a single place. This is my biggest critique of MVVM. 4. The view receives the latest model and in a deterministic manner renders based on the state of that model. What I love about TEA and MVI is they ensure you can always figure out how somethings happening. There's no sort of "sneaky mutation" where you find yourself asking "how did this change?" or "why is this happening?". They're also quite strict about how things happen. There's just too many ways to interpret MVC and I end up solving the same problem 5 different ways. The point of good architecture is you don't have to make a decision about how to go about things every time you add a feature. 
Great article!
OP, please don't take the comment above as negative. They took the time out of their day to thoroughly comb through your code and give you some feedback that would normally take years of trail and error to understand and learn. I wish I could upvote /u/ugwe43to874nf4 more than once. That's really nice of you.
The research is generally based on experience and dealing with large application's quirks. It's not a peer reviewed research.
whoosh on you
That’s a nice and thoughful review done for a stranger on the internet. Kudos
Finish up an Electron app? Not sure. It's proven to be difficult.
Thank you - I appreciate the suggestions. I've spent time doing that and am slowly realizing that my mentor just wants me to do it the way he did for expediency's sake. -\_- I appreciate your suggestions, man. &amp;#x200B;
Hey there, thank you! I love the idea of keeping it simple. The codebase I'm working with is very large and distributed over a ton of folders. So I see a one-line solution and it's like YES. Also, thank you for the example link. Is that demo button going to loop through a dataset or is it just looking for the record w/ireland? Thanks again for your help.
That is not sufficient to make the claims you made above with the authoritative tone you used. Best practices should be based at least on _conscious and active_ consensus of an industry group, not on whatever the most charismatic guys at a house rental company like. 
Avoid like the plague IMO. Really not fun to use on a huge project. CSS modules provide the organisational benefit without giving up the benefits of CSS or a preprocessor.
&gt; I don't know why I cannot find anything on it. That's not a part of the regular git executable, it's a part of another package named [Hub](https://github.com/github/hub), but they recommend aliasing their executable as `git` ([Ref.](https://github.com/github/hub#aliasing)) which is probably why examples you've seen look like regular git commands. The behaviour is described on the [man page](https://hub.github.com/hub-pull-request.1.html). https://github.com/github/hub
It's a tool called [hub](https://hub.github.com) that can be aliased to git (and forwards commands that don't belong to GH to git), so you can invoke both git and GH commands with it. Sorry, I wasn't clear on that in my original comment. I agree about the clipboard - I'd want it to be a flag or a global setting.
Yeah, the problems CSS-in-JS solves are largely imagined imho. I'm working with it in a project currently and It has been nothing but a hassle. 
It's called infinite scrolling and there are many many implementations of it 
Thanks a lot, could you please let me know whether there is any article or book i can refer. 
hope so. As a rule devs should be treated better. 
I didn't include an article because there's so many, but here's one https://github.com/vikash20186/infinite-scroll If you search for it you can find an implementation in whatever framework you need 
How dare people downvote this
Best way to learn is to grab some ticket / task in your job. And have you're more competent colleague help you with it while you try to figure it out on your own with docs alone. If you're already a more seasoned programmer, you should have no issue adapting to 'new' things right from documentation alone. Language or framework. Well, unless it's totally different paradigm, but that's rarely the case. And only as last resort I would suggest going through courses. But if I had to offer at least one, when it would be: Javascript: understanding the weird parts. First 3+ hour lecture is free on \[youtube\]([https://youtu.be/Bv\_5Zv5c-Ts](https://youtu.be/Bv_5Zv5c-Ts)). Rest is available at Udemy. I would specfically avoid any "framework" courses. Those are just awful. If you need a separate course for a framework can can't understand it from docs, you're not up to using it anyway.
If the mentor already implemented a similar feature, it would make more sense to copy/reuse that approach, then to use an approach you found on the internet. If you're using ts, you're probably using some basic module system? If the mentor didn't do this, you can extract the common bits of code between your pages (maybe everything) and reuse them for the new page. If that's a bit advanced, I'd at least suggest just copying the code/approach. In general, always try to keep code in a project consistent. This is more important then how you feel the code should look/be organized. If you really disagree with how something is done, you can always bring it up, and see what the others say. But as a rule of thumb, keeping the code looking consistent is important. Imagine if the two pages uses different code, but a new feature must be added in both places. If the implementation is shared, then it's maybe just one fix, if it's copy-pasted, at least it's the same fix twice. If the code is different, it might require two different fixes for the same thing. Nothing is sadder then a code base that reveals the abused it has suffered over the years by careless/opinionated programmers.
Either way, the goal is getting fun, and focusing on being on the all star game at every comma is not we are all doing. Your arguments are somewhat correct and are usefuls in some contexts. But the point is really missed here. OP code works, and this is all what matter, really.
twas merely an act
That's not lazy that's unmotivated
Yes, you would use Ajax to request more results to show from your server. Your JavaScript can also measure when the user reaches the bottom of the scrollable area, to know when to load more results. What is your site built with?
It's the most efficient because you at the very least need to check them all. So you can't get more efficient. This is logically deducted therefore no source. As for memory usage I'm sure you could lower it if you did some stuff but I'm too lazy to think about it and js can't easily handle storing individual bits so it would probably be useless. The code is fairly standard. I got help from my father who is a group theorist on simplifying the inner loop, other than that this is 
You don't need to feel bad. I'm incredibly impressed by Glimmer. Must admit I didn't think it would be possible to improve much more than 50% over Imba, but I was clearly wrong :) Diving into the details of Glimmer and discovered some interesting optimizations that I look forward to implement in Imba as well. Got Imba down to around 2.5x slower than Glimmer in my dev-branch, but there's definitely work remaining to make the compiled output work in all edgecases. As for the benchmark, I really don't think it's misleading, at least not in the context of the article. Should definitely write more about the benchmark on the page itself and on GitHub. I do agree actually that it was kind of foolish to include Vue, and it should probably be removed. It has a good built in system for minimizing the job of their reconciler. At the same time, I do think Vue should be able to outperform Imba if they compile their templates using a similar approach (much like rawact). As for React, imho it is a fair comparison. The whole point of the bench is NOT to fill the implementations with shouldComponentUpdate, immutable state management etc.
Do you folks recommend this website as a good learning resource?
Still missing the point. You are not going to have 9000 mutations in a single event - of course. Have you ever implemented shouldComponentUpdate in an react app? My assertion is that you could have a 20 times larger application (view wise) in Imba before you need to start (the same) optimization. With glimmer, it could be 100 times larger. This is my claim.
We did not want to use the usual benchmarks because they don't really measure the performance of dom reconciliation. Plain and simple.
What are the actual problems that arise from using css in js? I'm using it on a side project, but the technical lead is adamant against it at work (though for really not well thought out reasons).
How so? I currently use sass, but styled-components looks really tempting
What benefits are available in CSS but not something like styled components?
Its ideal for big projects because it provides easy to understand scope. And it has things like prefixing and all the goodies. There is no separation of concerns in case of CSS, you want single file components.
Thanks for the amazing advise. I'll work on it!
I'm sad you think that way. Not just because you seem to have missed that OP _explicitly asked for a code review_ or the note added at the end of my comment. But because you think any of the things I've written are about "being on the all star game at every comma". In any case, you don't need to worry, I don't do this often. It takes time and effort and too many people seem to think your way.
I'm not sure what question you're asking. If you're talking how things are organised on the file system, that's different from how your architecture is organised. They aren't related at all. As for design patterns, who cares? Honestly. MVVM, MVP, MVC, MVB, it all boils down to the same thing: A UI is a collection of components that serve two purposes: to represent state, and to forward inputs to things that care about input. This has been the case, maybe forever. I have yet to see a UI framework that presents UI development in a different manner than what I just described. From nCurses to Vue, from React to WPF, from Qt to Swing to Android to just plain HTML. Even at the hardware level it's no different at all. LEDs, potentiometers, faders, buttons, conceptually it's all the same. The keyboard I'm typing this on is a UI with a finite set of available inputs and three little lights to indicate the state of scroll lock, caps lock and num lock. Now, certain frameworks make UI development easier than others. For the web, React and Vue stand out above the rest because they have clean ways to bind specific chunks of data to specific areas of the UI. For the desktop, WPF is a breeze for Windows and Qt for cross platform isn't bad either. For the console, the de facto standard is nCurses. So, what makes a good component? Who knows. Sometimes it makes sense to have a highly specialised reusable component like a button that when clicked replaces its text with a loading gif. Sometimes it makes sense to have a large component that represents an entire form. Your customers and the marketing-driven deadlines you need to meet, don't care about these details mind you, and it's ultimately up to you to balance the desire of beautiful code with the realities of running a business.
No, I don't use react, I use Vue which doesn't need manual shouldComponentUpdate method. Besides, vue and react still batch dom updates, which is why you're comparing apples to oranges. This benchmark has nothing to do with large applications, if your solution is really more performant, provide benchmarks of realistic real world scenarios and don't misuse react and vue to make them look slower.
I don’t know anything about Firebase. I know quite a bit about MeteorJS and full stack web development. My initial thought is, unless you have experience building a full stack JavaScript web interface to database, stick to what you have learned so far. While I do think a simple web interface to database (Node, MeteorJS, etc.) will do the job and I do recommend for this application, maybe in your case, don’t over-complicate by trying to build something new and learn it at the same time. (Again this depends if you have built something like this before).
You should look into `inheritAttrs: false`. You have at least a couple props you're just transferring onto the form element, and you're missing a _lot_ of possible HTML5 attributes that could be used. That flag lets you do this: `&lt;input v-bind="$attrs" /&gt;` and all attributes that aren't `props` will automatically be put on the input element.
very exciting stuff. More explanation and methodology is always welcome with benchmarking. :) I think it may be good to note the different restrictions that each library implements to help reduce dom overhead. -- for example: https://twitter.com/dan_abramov/status/1065928964441612293 React limits itself to 120hz. So, if there is a way to benchmark taking this kind of stuff into consideration, or if the existing benchmark does take it into consideration, maybe explain how? FWIW, I super appreciate you putting the effort into trying to compare these things. It's REALLY hard.
Also, fwiw, I'm Team Glimmer. React is just my job atm.
Can be achieved with CSS modules though.
It's just the solution to a problem that doesn't really exist. We chose to use it years ago and now have a huge project and it's caused a total mess. We had to bake our own inheritance solution with helpers to handle CSS overrides. Being able to do stuff like '.component &gt; span:nth-child(2)' and more complex ones etc is lost depending on the library you choose (aphrodite in our case). Found ourselves reinventing the wheel on a lot of mixins we could have just used if using SASS or LESS. And when the designers built an animation and asked us to use it, we have to redo them all in CSS-in-JS because the syntax is different. Absolute hell, run far away from it.
How to be confident? You don't.
Thank you for sharing, now make sense :) I'll try it with Gitlab to see if works. Anyway, I did the tool just because I need something very simple to use, user-friendly and don't need any particular knowledge on how to use it, just follow the steps. &amp;#x200B;
Yes, thank you for your suggestion! I'll take care of it :)
Well keep in mind that most CSS-in-JS libraries are subset of CSS functionality. The power of selectors isn't trivial. Implementing transitions, even using the built in react transition libraries was extremely difficult to implement using JSS. Basically because I couldn't create a proper conditional selector for the child I had to plug into a weird transition event listener, I then had to propagate that to the child components. Ended up saying fuck it and using css to do it and it took 5 minutes, spared our codebase the cruft.
Well, the tests give you the confidence that a particular case has been accounted for. So, when a new one comes up, you can safely write a new test for that case and then be confident that that will always be coded for, no?
I’m not making a claim that unit tests are some kind of silver bullet here. I’m claiming that using them will allow you to be confident that the cases you expect it to be used with output the results you expect from them. They’re also a form of documentation that can be used by yourself and others down the line and ultimately can save you time in the future. It’s only one leg of a table, others can include end to end testing, quality assurance testing, user acceptance testing etc... It’s another tool and I wanted to illustrate briefly how it can be used and how easy it can be to get started with it, whether you choose to add it in your toolbox or not is up to you.
I don't think you really understand what the benchmark means. Vue and React are only "slow" because you're using them incorrectly. You'r statement about lmba allowing "bigger components" is just bullshit. Your image shows how glimmer is supposed to be superior, but yet is is easily slower than React, Vue, Aurelia and Angular. See: https://stefankrause.net/js-frameworks-benchmark8/table.html for benchmarks of something meaningful. I have explained this many times, but because pretty much all modern frameworks batch dom updates, this benchmark means absolutely nothing. The frameworks don't even try to update dom 100k times a second, because it's completely pointless. I can give you benchmarks where O(n^3) algorithm is a lot "faster" than O(1) algorithm, because I use so small inputs. That's pretty much what these benchmarks are.
I often think on some software which accepts some domain objects and states each object can be inand then produce all state combinations (all possible cases) and at least generate test descriptions (not implementations) so we can consider all posible cases.
Btw, in case you're interested here's some benchmarks that are more relevant in real world scenarios: https://stefankrause.net/js-frameworks-benchmark8/table.html. Glimmer is actually slowest of Vue, React, Angular and Aurelia. Not by much, but it's definitely not over 100x faster like the linked benchmark makes it look like. But as you said, React isn't even trying to update the dom 100k times a second so it doesn't make any sense to benchmark it this way.
I wouldn't say they provide a false sense of confidence, anyone who thinks just having their unit tests pass means everything is fine is being foolish. The downside of manual testing for regression is expensive, especially in a CI/CD environment where changes are introduced daily. You cannot completely regression test every part of the system manually for every single change without drastically affecting velocity. Automated tests provide a security blanket that, if properly written, prevent the majority of regressions. But they're not effective enough alone. A good combination of unit, integration, end to end/selenium, and manual testing is important. They all have their own purposes.
We basically do more or less what's described in this article: [https://medium.com/@alexmngn/how-to-use-redux-on-highly-scalable-javascript-applications-4e4b8cb5ef38](https://medium.com/@alexmngn/how-to-use-redux-on-highly-scalable-javascript-applications-4e4b8cb5ef38) &amp;#x200B; We have a fairly large fontend codebase and this has worked really well for us, especially for a React+Redux+Saga application. The rule is basically that a feature can only `import` direct children or from a parent. It means that when you delete a feature you can safely also delete all its child features because they can't be used elsewhere. &amp;#x200B; Every feature has its own actions, reducers, sagas, etc. So when you want to delete something all the things it uses will be in the same directory, easy to find, easy to delete. We also use *babel-plugin-module-resolver* and use absolute paths to `import` from parents and relative paths for children.
That's what I prefer, it makes the code much easier to follow (to me). but at times I've run into code standards that want a single return statement. It is certainly a bone of contention with legit arguments on both sides. [https://spin.atomicobject.com/2011/07/26/in-defence-of-misra/](https://spin.atomicobject.com/2011/07/26/in-defence-of-misra/) [https://betterembsw.blogspot.com/2016/03/multiple-returns-and-error-checking.html](https://betterembsw.blogspot.com/2016/03/multiple-returns-and-error-checking.html)
One issue is that it doesn't accept alternate answers where a jumbled word might product two correct results. For example, it wouldn't accept "snoop" for "spoon", or "bonerz" for "bronze".
&gt; manual testing is the king that is just crazy.
I see you mentioned selenium, we just implemented cypress io for one of our ui projects. It’s pretty young yet but IMO it’s worth looking into. The tests are written in JavaScript and they’re written with Mocha and Chai, makes the onboarding for it in a js app convenient.
I set out to mock the clickbait-y title a bit and got carried away =)
Agreed!
Yeah, using an existing config you like the look of, and then disabling / adding / modifying rules as needing is so much less hassle.
Ran into a minor bug in my first attempt. Multiple words can have the exact same letters (e.g. 'monster' and 'mentors') but the code doesn't handle that case.
I don't know if those are real-world benchmarks though. There is this: which is a believably real app, done in a bunch of different ways: http://mathieuancelin.github.io/js-repaint-perfs/ Ember (_somewhat_ powered by glimmer, but not fully): http://mathieuancelin.github.io/js-repaint-perfs/ember/ React: http://mathieuancelin.github.io/js-repaint-perfs/react/ What I noticed is that for lower "mutations" react is faster, but for higher mutations, ember is faster.
For the same reason that a car is better than a donkey to travel 1000 miles. 
That's some serious philosophy in there! How do you find bugs you had no idea existed then?
In selenium, you can have people who don't code record test cases — very neat. Cypress is good, too.
This is cool for a small app. But if it grows then your folders will grow endlessly large and it will become very hard to keep your code clean. You'll have a components folder with hundreds of components, many of which are used only once. If you want to delete a screen you're going to have to find all the components that it used and that are not used by other screens or components. Same for services that are no longer needed. I'd assume you also have a folder for actions and reducers, selectors, etc. Consider the following structure with the following rule: * You can only use (i.e. `import` or `require()`) direct children (no grand children), or parents (including infinite levels of grandparents) src - components - Button - index.jsx - styles.css - Label - index.jsx - styles.css - Image - index.jsx - styles.css - scenes - Home - index.jsx - styles.css - reducer.js - actions.js - selectors.js - Products - index.jsx - styles.css - reducer.js - actions.js - selectors.js - services - reducer.js - products - index.js - reducer.js - actions.js - selectors.js - components - ProductList - index.jsx - styles.css - Product - index.jsx - styles.css - components - AddToCartButton - index.jsx - styles.css - About - index.jsx - styles.css - reducer.js - scenes - Team - index.jsx - styles.css - components - Member - index.jsx - styles.less - Contact - index.jsx - styles.css - components - ContactForm - index.jsx - styles.less - services - contact - index.js So the following applies: * `Button`, `Label` and `Image` can be used anywhere. * The `AddToCartButton` is only used by the `Product` component. * The `ContactForm` component is only used in the `Contact` scene which is only used in the `About` scene. * The `contact` service is only used by the `ContactForm` component. * If you want to get rid of the `Team` scene you can delete the entire folder including the `Member` component because it can't be used from elsewhere. * If you wanted to use the `ContactForm` in both the `Team` and `Contact` scenes you would move the component one level up in the tree (to `src -&gt; scenes -&gt; About -&gt; components -&gt; ContactForm`). * If you want to use the `products` service from anywhere you would move it to the root (to `src -&gt; services -&gt; products`).
So, you claim to have the component behaviour fully specified prior to developing it. If people could specify the behaviour fully, developers would have been unnecessary. By "testing with TDD", you probably meant running automatic test suite? If TDD was a testing method, it would have been called TDT or something.
That's very well thought out - Thank you, I will check it out!
Not unit testable, for example.
Personally I use atomic design and I think it works well with a component based ui Components -Atoms -Molecules -Organisms -Templates -Pages Store (redux or gql) Css is all styled components 
This benchmark were introduced 3 or 4 years ago at React conf. Then some guy created a repo with a huge colllection of different implementations: https://github.com/mathieuancelin/js-repaint-perfs . But keep in mind, links that I've posted above has slightly different dbmon implementations, so it it is better not to compare them with existing dbmon benchmarks. In the above implementations, I've replaced monitor widgets with [perf-monitor](https://www.npmjs.com/package/perf-monitor) to at least try to show actual FPS, instead of broken "repaints per second" numbers, slightly refactored app state generation to make it easy for other people to review the code, replaced `setTimeout` with `rAF` to trigger updates, and some micro optimizations.
I hope u/haschdl appreciates all the effort you've put in to this comprehensive review.
Yeah, maybe not real world, but at least something worth to benchmark. Some of those categories in the benchmark I linked should roughly map to the one you linked. Anyway, the point was mostly that even though the glimmer isn't magically 100x faster like the article made it sound like.
Though a little bit code golfy restructuring makes this pretty short if you swap lines/id: ``` const linesRequiredData = (id, {stations: {[id]: station}}, key) =&gt; station &amp;&amp; (key ? station[key] : station) || errorMsg ```
There are no "real-world" benchmarks and all benchmarks have issues. React team likes you to believe that time slicing is the best thing you can do to improve performance, so it will try to put some artificially expensive computations inside of components and then show how amazing their time slicing feature, because it can deal with this type of problems. Ember team focuses on micro updates, so obviously they would like you to believe that numbers in "js-frameworks-benchmark" are irrelevant :)
Well, Uncle Bob is a pretty divisive character. He doesn’t leave a lot of room for interpretation for things, and comes off as closed minded a lot. That being said, I’m super interested in the VIPER architecture on iOS which is based on Uncle Bob’s Clean architecture (I’m working on a native mobile app currently). I do think the ideas in it make a lot of sense, and I hope people think about that in React as well. React is just a view library, there’s a lot more that goes on behind the scenes in an application.
WTF
Do you need to pass the backup function into `checkAndSaveData`? Is there a reason you can't just do async function getData () { let databaseValue = await getFromDatabase() let val1 = await checkAndSaveData('someKey', databaseValue) let val2 = await checkAndSaveData('someKey', databaseValue) return { val1, val2 } }
I'm confident in my code even without unit tests, and things usually goes smoothly. ;)
That would entirely defeat the purpose of the caching if you just started off by grabbing the value from the database though
Is there a more terse resource? I struggle with dense material, attention span roughly equal to that of my cat.
True, but notice that you call this function almost immediately anyways. (Also I made some edits to my previous comment)
I only have a couple questions: - how much time have you spent with ember? - have you tried to make a new ember app from scratch? 
How dos it work? I get that Organisms &gt; Molecules &gt; Atoms, but what goes where, and why?
&gt; Have you ever implemented shouldComponentUpdate in an react app? Are you sure that you understand how people are writing in React? With Mobx there is an automatic tracking of fine-grained observable values, with redux there is a coarse-grained dirty checking in connectors, `shouldComponentUpdate` is used internally in the app state management libraries. Why it is ok for glimmmer to use a dependency graph, but React should always rerender entire tree. Do you really think that using something like React+Mobx would require to write more code than Glimmer?
Is there a good point which I can use to convince the guide to change the stack, he's just shouting "Firebase, Firebase" every time, whenever we are discussing the project.
It's not dense at all to be honest. The first half of the book is fluff. There is also nothing revolutionary in the book itself.
Is this something similiar to what you wanted to achieve? https://codesandbox.io/s/jzr2l4znov?expanddevtools=1&amp;view=editor
How can you not be?..
This is really cool and all the comments are nice to read too. opens my mind as a new learner too going to save this 
Firebase looks like Infrastructure-as-a-Service (not sure what BaaS is). Use Firebase to host your Node (MeteorJS) application and communicate with your own MongoDB (hosted on server with Firebase) or use Firebase’s “real time database”
Firebase is honestly a good option for this situation. Since it’s all in house data it should end up costing nothing plus it’s really easy to work with and the subscription like application it has baked in works great for this kind of use case. Sure you could use another option but from what it seems, this should check all your boxes. 
&gt; OP code works, and this is all what matter, really. What? Dude, having code simply function is below the bare minimum. I'd rather work on a piece of software that has very few features and several bugs, but is clean, than a feature rich big garbled spaghetti mess. Simply working means very little in the real world. How does it perform or scale? How easy is it to maintain, apply bug fixes, add additional features, or upgrade any of its parts? This is especially true in the real world where often you'll have some dude who writes a massive piece of software by himself, gets a few new developers, and then suddenly decides to switch jobs 2 months later. Those devs better be able to interpret that code, because if they can't things like this kill companies. OP literally asked for a code review, this is what a code review looks like. He wasn't rude, but he addressed the issues, this is one of the most helpful things as a programmer. This is why we work in teams and do code reviews, it has to pass through several people because often a single person can't catch everything. It's also a really damn good learning opportunity, because programming bootcamps/books often don't touch on nuanced things like this. There's always people at work who can't take a code review, because they take it personally and can't stand that kind of ego hit. So instead they'll double down and insist the code is good. There is such a thing as debating a person's critiques, I do it all the time, at least a few times a week. Nothing wrong with that, sometimes it comes down to coding style or personal preference, sometimes the reviewers are just wrong, but making a review like this in the first place is a favor and an important thing to have on a strong dev team. I actually slightly disagree with his first point, "Don't extend built-in objects". I think in general it's good to be wary of it, but it's definitely not an absolute rule, this is how a lot of libraries in object oriented languages are made. Rubygems for example straight up modify string, integer, etc. You have to be extremely careful about name collisions, you need good documentation so when someone uses your library and gets a weird error that doesn't make any sense they can see that your library modified a primitive or a class. Though when it comes to Javascript I think it's smart to avoid extending built in objects even more so than other languages, but there are a few cases where it makes sense. It's not something I would do often.
Wordpress has a REST API, and it's a 1 click install from Google Cloud and most hostings. You never have to actually touch PHP and just upload your content like a regular user would. &amp;#x200B; Firebase/Firestore has a REST/Websocket API that you can use fully with only front end code.
I can get my mongoDB inside Firebase ....??
Maybe combine the arrays by making the characters objects with name and pic as properties and stuffing the object into the single array?
There is this thing called, mutation coverage. That gives you indication if you are missing some assumptions. 
compiled all into a single html file: https://sirgeo.github.io/FINAL/Global_Temps_1880-2017.html
I agree with this! It would look something like this: [ { img: "batman.png", name: "Batman" }, { img: "superman.png", name: "Superman" }, {...}, ... ]
Someone should write a blog post on this
Agree with this mostly. Firebase is fantastic is you need a smaller scale, real time, low bandwidth data synchronization. It’s quick and easy to use, has a lot of *extra* functionality (embedded auth/cloud functions etc) and has coverage of most major platforms. Will it fit your needs? Quite probably, but is spinning your own solution worthwhile given the broader goals of your project?
Basically this library is the BigInt implementation, but without the native operators (ie. You use JSBI.add instead of + to add BigInts), and when the browser supports native BigInts the library will use them instead. This allows you to write backwards compatible code while taking advantage of native code when available.
It's always good to short-circuit functions before calculations are made if there's an error.
Thank you, I was not even aware that I can host node apps in firebase, I was just looking at the firebase real-time database.
Thank you both! I’ll do that
There's nothing wrong with passing functions around. That's part of the fun of using a functional language. Now if it was truly a callback, you could convert it into a promise. If you can't, maybe it's something else. One mistake I've seen before are people trying to force fit too much into Promises. For example, promises are really really bad at implementing Observer patterns. Just pass a function to do that kind of thing. Another example is the `memoize` function ([_.memoize](https://underscorejs.org/#memoize)), which is a method that takes a method it may or may not call if it already has a cached value matching its arguments. Stop me if that sounds familiar. Anyway, the point is, you can't write that stuff with promises. I shouldn't say "can't". Developers can do a great many terrible things. But they shouldn't use promises for this. 
For my two cents, I'd get rid of a lot of these functions. async function getData () { let ret = { val1: cache['firstKey'] val2: cache['secondKey'] } if (!ret.val1] { ret.val1 = cache['firstKey'] = await getFromDb('...') } if (!ret.val2] { ret.val2 = cache['secondKey'] = await getFromDb('...') } return ret } Just to keep it simple.
I think they simplified the function a lot with the intention of keeping the "getData" function generic in that you can store any type of data in the cache and use different database calls to grab different fallback data. That being said to me it doesn't necessarily make a ton of sense to make the cache access generic. Hard to say without their real life example.
The getData function mainly just existed as a way to demonstrate the code above it working and how it would access the cache. The actual implementation is we have a really slow 3rd party api that we need to request data from, so to speed things up we store recently accessed data in a redis cache on our own server, so when a number of customers are asking for the same data, we don't need to repeatedly make the 3rd party call. So basically this is just an abstraction of how we are getting our data and it is being called from a lot of different places within the application.
Not all callbacks are used to signify the completion of an asynchronous function, see [https://developer.mozilla.org/en-US/docs/Glossary/Callback\_function](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function)... on this page, MDN call those particular callbacks "asynchronous callbacks", which is a slightly misleading term, but these are the ones that can be easily converted to Promises. The callbacks you're passing in your example are not of the same class, and so your pattern here of passing a function into another function is entirely valid. I wouldn't call this "mixed callback style" per se
Same answer I'd say. You can have a function that has caching built into it, but adding an abstraction layer to apply generic caching for arbitrary functions doesn't appear to add much value. I've done this sort of thing in the past and coming back to it, it just makes things harder to follow when you inevitably need to pick up the code again and make modifications.... keep it simple, stupid. If it is one 3rd party api -- export const getFromSlowApi = async param =&gt; { const cached = await redis.get(getKey(param)) if (cached != null) { return JSON.parse(cached) } const result = await performSomeStupidLongOperation(param) await redis.set(getKey(param), JSON.stringify(result)) return result } Looking at this, it is very clear what is happening, there is one function &amp; less to reason about. Someone coming into the code fresh will see what is happening... an abstraction layer around the caching in my eyes makes things harder to follow. One other benefit might be that you can also add more specific logging here, if desired. i.e. `logger.info('getFromSlowApi cache hit with %s', param)` ... or conversely, cache miss, etc. with an abstracted layer you'd need to provide more context into the function or do some funkiness around stack traces to bring forward the same information. I dunno, without looking at all your code I'm kind of making an uninformed opinion here - it's just how I see it.
The (сheck)[https://github.com/antonreshetov/vue-form-components/blob/dev/src/components/form/Form.vue#L90] is performed by the component name, user cannot change the component name, he can override the component tag Also `From.vue` already [provide](https://github.com/antonreshetov/vue-form-components/blob/dev/src/components/form/Form.vue#L19) self to `FrormItem.vue`
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [antonreshetov/vue-form-components/.../**Form.vue#L19** (dev → eafd9bc)](https://github.com/antonreshetov/vue-form-components/blob/eafd9bc64bc030879de574f5a01af05c939c5668/src/components/form/Form.vue#L19) * [antonreshetov/vue-form-components/.../**Form.vue#L90** (dev → eafd9bc)](https://github.com/antonreshetov/vue-form-components/blob/eafd9bc64bc030879de574f5a01af05c939c5668/src/components/form/Form.vue#L90) ---- 
That's pretty much what it is though - it's just the redis npm library is all callback based rather than promise based so our layer just promisifies everything.
Yeah that makes sense to me, I just had no confidence in my ability to express it. Thanks for the extra detail.
Isn't that called tabletop.js
Why? Just support Wes individually by buying his course full price. It’s totally worth the value ❤️
Maybe this helps: https://reactjs.org/docs/jsx-in-depth.html The HTML-like tags are JSX, and Babel transforms them into JavaScript.
https://reactjs.org/docs/introducing-jsx.html
Tabletop js looks like a library that helps with talking to Google sheets... But a lot of it is stuff I didn't need so it was much easier to generate a free api key and construct the XHR myself. But yes, tabletop.js can do this.
I really like this [explanation](https://softwareengineering.stackexchange.com/a/118793) why a single return was a good idea back in COBOL times. 
You can always pipe it to `xclip -i -sel clip` if you're on Linux. I have that aliased to `toclip` for convenience.
 Nice concept!
Support ecmascript then
"Want to learn ES6+? Here’s a free 23-part course that will give you a strong foundation." https://medium.freecodecamp.org/want-to-learn-es6-take-this-free-23-part-course-and-become-a-javascript-ninja-55002db1ff74
Thank you for that extremely comprehensive code review! This is exactly what I was looking for. I had no idea if my design approach was good or bad, all the learning resources I've used so far don't really teach how you should design your code and how to keep it clean. The reason runGame() contains so many functions is because I was trying to avoid scoping issues and yes this approach did seem weird to me which is why I was trying desperately to find someone experienced to take a look at it. Can't thank you enough for this code review! I've read your comments thoroughly and will attempt to re-write the entire program with a better design approach.
Please don't be bothered by the comment above, I am extremely grateful for the review and I'm sure anyone that is trying to improve their skills would greatly benefit by the time and effort you put into these reviews. THANK YOU!
Thanks! What browser were you using? This is a bug I thought I had fixed, it doesn't happen on chrome.
Great point, I tried to address this with the play again button. But I suppose that doesn't really make it feel continuous. Will see what I can do.
Yes, this is something I was trying to address but given the very limited scope of my word library it wasn't really possible. In the next iteration I plan on using a much larger word library and so I could definitely make this work.
Interesting! Yup I could definitely do that. Thanks!
Yes, but what happens on Firefox or IE?
Very cool! Thank you so much!
Hey, glad you enjoyed it!
I agree!
I agree with your comments! Also wasn't aware that extending built-in objects isn't good practice. Thanks!
This is dope!
Some of us LIKE JavaScript BECAUSE it is NOT strongly typed. If I wanted to spend time creating HiHowYouDoingIAmAnAbstractJavaBeansFactoryConsumerImplementationNiceToMeetYou classes, we'd be doing that.
I read those books in about 3 weeks. I am already familiar with a lot of programming languages so it wasn't hard to follow YDKJS. Async and performance was the only book I spent a lot of time on because of I couldn't understand how promises worked. They are really a great series which will make you a great developer. I will say you can write your own libraries after reading them. This course however is great introduction to Java and .net developers. The instructor is great but people find this course valuable because it shows java and .net developers how JavaScript is different from traditional OOP programming. But the course itself is quite introductory.
Interesting, never heard of this one before. Do parole actually use it, or is it more of an experimental approach?
On a real site with more traffic, you will be rate limited when accessing the data this way. So it's necessary to cache the data somewhere. You can add custom controls with JS to Sheets - so you could have a button on the sheet itself to trigger an update of the cache, or even a static site generator build somewhere.
I don't think I'd really consider this a "callback," at least not in the traditional way that callbacks are used. Instead, I'd really call this something more like deferred execution, where the goal of passing a function here is to *defer execution* of (in this case) fetching data from the database to only when it *needs* to be fetched--a very smart move to make! I'd call this good practice and great design: the use and utility is obvious, easily explained, and meaningful.
Hwhaaaaaaaaaat
Exactly, you could also set a default folder to contain all your templates and then just copy and paste the config file
You only can when you've proven knowledge to your peers. They will correct you on correct practices. Basically if you have the fundamentals down, you can be confident in it. 
@HomemadeBananas, @Fossage, @PicturElements: Thank you all for helping me to find the right resource to understand this topic.
Feel free to fork the repo and do what you want :)
Not complaining about the images, your post was good.
Thanks I got it
Yeah, down voting a free course is the ethical way.
Atoms are the smallest UI component parts such as a button component or a title component. A molecule is a collection of atoms such as a header component or a card. The atom is usually just presentation logic and should not contain any stateful logic. The organism is a collection of organisms and atoms that work together to make a functional UI piece. All of that is fairly arbitrary and you shouldn’t spend more than a few seconds thinking about what belongs where as long as it makes sense to you (and your team). The point is just to have a nice and easy way to navigate any component-based project and to also promote as much reusability as possible, since molecules and organisms should mostly be using the atoms defined below them. I’ve used it in a couple of companies I’ve worked for and some personal projects and I’ve personally found that it does help as the project grows, as long as you don’t get too bogged down on whether a component is too big to be an atom or too small to be a molecule.
The answer to question 3 is actually really simple. Since javascript allows you to call a function with less parameters than there are in the declaration you just check for undefined as the second parameter and then return another function. function add(a, b) { return b !== undefined ? a + b : b =&gt; a + b }
If you are on nodejs, you can use: Comt promisifiedFunction = require(‘util’).promisify(functionThatAcceptsCallback) And then you can await the calls and have a more consistent code. 
Apparently the `autoFocus` attribute is also a thing
[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#autofocus) \&gt; the input should automatically have focus when the page has finished loading This unfortunately means you cannot use this in a react component as the dom is manipulated after the page has finished loading.
I would use array with push/shift. Is it the best solution? I have no idea but I do know is that I can implement it in 5 minutes and measure if that efficient enough.
absolutely appreciated! big thanks to [ugwe43to874nf4](https://www.reddit.com/user/ugwe43to874nf4) Now I need to get my shit together and fix it. Lesson learned. 
I like that - so I could set the max length of the array to say 200 * 120 seconds = 24,000 readings to prevent overflow?
200Hz means 120\*200=24000 readings have to be present in the app at the same time. I think the most performant solution is to create a [circular buffer](https://en.wikipedia.org/wiki/Circular_buffer). Writing new data is now as simple as: let nextIndex = 0; const buffer = createArray(24000); // implementation left as exercise function writeData(data) { buffer[nextIndex] = data; nextIndex = (nextIndex + 1) % buffer.length if(shouldTriggerSend(data)) { send({ nextIndex, buffer }); // alternatively create a new array that has elements in order } }
Focus can easily be done using [references](https://reactjs.org/docs/refs-and-the-dom.html). class MyComponent extends React.Component { constructor(props) { super(props); this.myRef = React.createRef(); } componentDidMount() { this.myRef.current.focus(); } render() { return &lt;input type="text" ref={this.myRef} /&gt;; } }
shit i totally forgot about refs, thank you 
yeah but he denied of it, and also when I asked him why not use `componentDidMount` that time also it was a no no. so yeah 
yeah thank you for suggesting that I completely forgot about refs also the 3rd question is it about higher order functions?
Yes. A higher order function is a function that either takes a function as a parameter or returns a function. In the case of `add(2)(3)` the call `add(2)` returns a function. So `add(2)(3)` could be written as: const fn = add(2) const result = fn(3) The trick in this question is to make the function also work normally when called with all arguments `add(2, 3)`.
That's the spirit :) I must say the project in general looks interesting. I'm not much into Midi myself but I know a couple of friends that could be interested.
Yeah, but apparently React polyfills the `autoFocus` attribute so that it calls focus() on componentDidMount.
You're not allowed to use autoFocus or componentDidMount? Uhh
It's Chrome on Linux. Version 70.0.3538.77 (Official Build) (64-bit)
That's nice, I didn't know that. After some digging it does come with its own quirks: [https://davidwalsh.name/react-autofocus](https://davidwalsh.name/react-autofocus)
Look into the jsonb column type. 
Using Maybe for this is a bit too generic. I would just write a datatype for that. Also the first thing I do when consuming JSON APIs is mapping them to my own model of the data, no one is making you work with flaky JSONs in your app.
Basically, this is an example of what my app looks like: https://jsfiddle.net/L5u1fc0a/130/ Just to give you an understanding
you're man now dog
Why not? The dates, are they of special significance? Is there a special "Event" on those dates? Otherwise it's a simple `User &lt;- DateAndNumber` relation.
Yeah.. but if you take a look at the fiddle - how would I translate that into a relation mapping
The interviewer clearly had no idea what he's doing.
That's not a higher order function, that's currying / partial application.
Here's SQL to create a user table and a table foo that has a foreign-key pointing to the id field of that user type. -- Table: public.app_user --DROP TABLE public.app_user; --DROP TABLE public.foo; CREATE TABLE public.app_user ( id serial NOT NULL, login character varying(64) NOT NULL, password character varying(255) NOT NULL, disabled boolean, created timestamp without time zone NOT NULL, last_login timestamp without time zone NOT NULL, roles character varying(255) NOT NULL, CONSTRAINT pk_app_user PRIMARY KEY (id), CONSTRAINT uc_app_user_login UNIQUE (login) ) WITH ( OIDS=FALSE ); ALTER TABLE public.app_user OWNER TO example; CREATE TABLE public.foo ( id serial NOT NULL, user_id integer not null, "date" date not null, amount integer not null, CONSTRAINT pk_foo PRIMARY KEY (id), CONSTRAINT fk_foo_user_id FOREIGN KEY (user_id) REFERENCES public.app_user (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE ) WITH ( OIDS=FALSE ); ALTER TABLE public.foo OWNER TO example; [Complete empty DB dump](http://fforw.de/static/files/example.sql)
Is jsonb like bson?
Similar maybe, but bson has more elements and is a public data interchange format while jsonb is just an implementation detail of Postgres you don't need to be concerned about. It only accepts JSON as input, it outputs JSON.
How can I check this out - not sure how to test it out - I don't think making the table in my database is the tricky part, but rather for my client side code (if you check the fiddle and try to put in some numbers in any grid) will convert to this structure
Certainly sounds like he had one specific quirky way of doing it in mind...
Hello people, can you suggest additional features I should add to this package, I have added a list of Todo in the package's GitHub page, please submit a PR if you feel there are other features that would help the developers.
&gt;S that well. How did you make it responsive? Th Seems to be two tables (each representing a column) and when the screen goes above ```min-width=992px```, a media query causes it to become a flexbox. When below ```min-width=992px```, it goes from a flexbox to a standard block making the tables stack on each other. Your hunch is right, it is the ```display: flex``` property causing that to happen
can i see your github?
Of course. The limits are pretty generous but yes there are certainly ways to cache data and really take this further! Thanks for checking it out!
The beauty of JavaScript is how flexible it is. The way each app is USED (UX) is different everywhere, hence things are highly dependent on the app. I specifically switched to frontend from full stack 6 years ago, because I got extremely bored making the same CRUD REST backends. There, the same pattern can be used over and over again. The front end usually doesn't need MVC or any crap like that. Just have a single source of truth which is immutable, consume it to provide a user experience. The best pattern to do that changes with every project.
I expected more profanity TBH... But it's still working for me... In what way is it broken for you?
Forgive my ignorance but wouldn't document.query work? `componentDidMount() {` `document.querySelector('input').focus();` `}` 
Wtf? Why is this showing up in my feed?
[removed]
That title. It has nothing to do with programming. It's pure personality and competence. Do you want to be sure you're competent? Be open to criticism and be willing to criticize other for at least a few years. Ok now you can be confident you're competent. This applies to all fields.
Awesome to know. Thank you. 
\&gt; (Redux or GQL) There shouldn't be an "or" here. These are two different technologies (state management, query language) that solve different problems that are very often used in conjunction with each other.
That's what I went with, perhaps better ways around this but hey... Still evolving as a developer.
JavaScript is starting to smell like Java. Sigh.
What in this article makes your statement hold any water? It’s about coupling your code to frameworks, instead of building logic which is framework agnostic.
See the comment by user “TheHowe” here in the OP’s cross post. It explains the problem with the article’s approach quite succinctly: https://reddit.com/r/compsci/comments/9vhft4/this_is_why_coupling_is_your_worst_enemy/e9deq0e
You already posted this here, 16 days ago.
It is both a curried function and a higher order function. In fact a curried function is always a higher order function because it returns a function. Here OP was instructed to write a single method that can return a value both ways, so the function has to behave as a curried function if a single argument is passed, but just a plain old function if multiple are passed. 
Since no one explicitly mentioned it, JSX is just syntactic sugar over React.createElement() so you can use that too (though it gets messy quickly)
`String` is not the same as `string` in typescript, you mighty want to fix that. Also, I don't like to pass API_KEY every time, why not use factory function that would take API_KEY as param and would return youtube client?
yeah it was like that LOL
oh wow I didn't know about it thank you for sharing
and most of the times I had to encounter such interviewers this was my 85th interview today 
I wrote [a jQuery-like JS micro-library](https://github.com/sambeevors/pumpkin.js) which is under 1KB minified * Uses [Jest](https://jestjs.io/) w/ [Babel](https://babeljs.io/) for testing * Uses [Microbundle](https://github.com/developit/microbundle) for publishing * Uses [Prettier](https://prettier.io/) for formatting * Uses [VuePress](https://vuepress.vuejs.org/) for [docs](https://sambeevors.github.io/pumpkin.js/) * Uses [Husky](https://github.com/typicode/husky) for quality control The actual source code has no dependencies, as it's completely vanilla. Keen to get some feedback on this. Feel free to open issues / pull requests. 
yeah, `new Client(key)` is pretty standard fare.
I just reported it as spam
[ts-app: Full-stack TypeScript Development](https://github.com/lukeautry/ts-app) This is essentially a collection of tools in the form of a boilerplate project that I've used for my own projects. You write your API and front-end using TypeScript; the client library used on the front-end is generated, which means your front-end always has a type-safe way to work with the backend. Combined with React + TSX, it becomes a super productive starting point.
As a side note, API endpoints are usually tested with integration/end-to-end tests, not unit tests. That is, instead of checking what happens inside the express route's callback, we check the input and output of a given endpoint.
I usually try to model it out using some type of diagramming tool (Visio or maybe yED - never needed anything super fancy). Usually make the data types loose to start with and then restrict them over time if it’s worth it. I do have to tweak te design over time but that has lessened as I’ve gotten older. Other than that it’s usually just running queries as the database volume increases to time read speeds. I don’t work in an environment that’s doing a lot of writes though (we have an ETL that runs in the AM).
Thanks. I got it.
2. Can you give specific examples? I've used both react and ember for a long time, and react is what is limited and more complex. There is nothing react that I can't do in ember, and likewise in react. however, doing equiv things in react involves A LOT more code.
Thanks. What do you mean with loose? With running queries I mean. Sometimes you model a database but after 2 weeks of development you need to perform a certain query, and you notice the current model doesn't allow for that query to be done easily.. how can I make sure I know in advance?
Those don’t really seem to be quirks. autofocus that focuses on every update is... not a good idea. 
You don't want to spit out code faster. You want to be able to produce better quality code.
Yes it's in the Todo. But the thing is user specific queries require OAuth2, for which we'll require a server. But the goal of the project is to work in the Client Side. I have been thinking about how to implement it. Any suggestions regarding this issue will be appreciated!
I think the problem is often developers “jump right in” and don’t really consider exactly how their solution works. Jumping right in leads to hitting hiccups and potentially having to start over if some of the assumptions made prove out to be false. If it’s as simple of a feature that you can write unit tests first, do that. Your code will never be perfect on the first pass, so don’t be afraid to spend some time to clean things up so the future you/ other developers don’t hate you. In my opinion, it’s more about efficiency than speed.
Erwin is a really good data modelling tool for ER and generating tables. I think it’s generally a good idea to also do a flowchart model that explains the processes. 
I'm following this scheme on new projects. I really dislike having everything as index.js and index.* everything. If I'm going to have an index file, it's going to be a conveince thing that exports all the components, objects, whatevers in that folder level. I do this for a few reasons. I think cons far outweigh the only pro I can think of. You end up with index.* In your editor tab labels. Not easy to scan and find what you have open. Also, I'm using the editor to read file way more than I'm writing imports. So doing `import Foo from './Foo/Foo'` is not that terrible of a thing compared to to `import Foo from './Foo'`. Debugging, test outputs,everything is just what more clear of the file is named what it is instead of index and relying on the path for the only context. For what it's worth, the index.js as the default way to include something via a folder is something Ryan Dahll, the original author of Node regrets. He gave a talk not that long ago about some of his regrets and mistakes about Nose and that was one of them. Just import/require whatever it is you're trying to import/require. 
https://twitter.com/nullvoxpopuli/status/1066348328898707456
And lots of other places 
're now dog man you
Absolutely. Who is the better coder, the one who spits out a thousand lines of code in a day, or the one who writes a handful of lines?
Please refer to acemarke's comment above. You will understand why sometimes functional components make sense.
40% sounds scary, but did you measure it? Look at that code [https://codepen.io/anon/pen/vQjaeq?editors=0011](https://codepen.io/anon/pen/vQjaeq?editors=0011) Not exact case, but for loop with push/shift takes around 5ms on my computer, so that doesn't look like bottleneck. &amp;#x200B;
This is a nice concept to understand, but the given example is rarely realistic. Creating interfaces can take a very long time, and they themselves can end up very strongly coupled in ways you don't expect, through "behavior" assumptions, rather than function or class assumptions. Also, the functionality provided by the library as often as not isn't going to be "low level", it might be something that's actually nice to use, which is why you are using the library in the first place! The final point is I've never started a project and wanted to swap out the web server. That's great if you can isolate it away from your core business logic, but it's a lot of time and effort for something that rarely needs to be replaced unless you have millions of users.
Look up "Database Normalisation" it saved my life. 
In reality, depends on the situation. Anyone with a deadline can probably attest that less-than-perfect code is sometimes ok. If it achieves the goal, such as scoring major company deals, you can always revisit it later depending on priority. The better coder in this situation is one who can churn-out code, but knows all the pitfalls and can optimally track it for a later date.
One fires when over a descendant element while the other requires that no other elements are between the pointer and it.
Have you ever driven for eight hours straight? It's exhausting. You won't be focused enough to learn the language and you won't be alert enough to drive the best you can. This is why very long highways now sometimes have "memory challenges" - signposts that ask you to remember a fact on a previous sign. If you can't recall the answer, you're supposed to pull off into the next layby and get some rest.
I've written solutions to math problems involving computations of prime numbers up to 1e15 before (results stored in arrays). At those sizes, the difference is vast. The solution using shift took over 10x longer. It actually never managed to run to completion as the solution using pop already took 3 hours using all 4 cores on my computer, and I wasn't about to wait for another day. Yes yes it was purely an academic exercise but I was curious to see 1. how bad JS actually was for computationally heavy tasks, and 2. shift vs pop. 
A lot of it comes down to what you want to accomplish, and as others have mentioned. Don't sacrifice quality of work. A few ways to increase speed of work completed really comes down to what you're trying to support, what tools are available to develop with, how much of what you're working on you can pivot to scale in a way you need to, and how much you can easily refactor to get enhancements out. 
 https://mburakerman.com/firemember/
Can some help me with integrating API calls which require OAuth2 ? You can directly contribute or just let me know how to go about it.
*pointerenter* and *pointerleave* nave no bubbling phase. I'm on my phone right now so you'll have to do the extra legwork, but this makes them incredibly more useful than pointerover and pointerout. 
And which one is which ?
*pointerover* and *pointerout* will be the most similar, but what is your use case? You usually only want over/out if you are using event delegation. 
Do we need offline workers in a *web* application? No.
I understand that this have to be set: touch-action: none; for browser to detect pointer even properly, however, event without specifying it, it works perfectly in Firefox so...I am a little confused.
&gt;There is nothing react that I can't do in ember, other than * Code splitting. * Class declarations * Allowing me to choose how I want to organize my components in the file structure * Not having to switch between three different files for styling, layout, and behavior. * Compile to less than 400kb * porting the code to mobile easily * have a framework under active development six months from now. 
Apart from the already excellent answers, I'll go a little bit more practical and suggest learning something like `vim`, and I'm not suggesting *using* it as your IDE, but its shortcuts for browsing and editing code are very useful and will make you very productive. There are plugins for every popular IDE out there. I'm personally using `amVim` for VSCode. 
:( I always say I'll fix it, but then it's on to the next thing...
NullVoxPopuli is wrong. &amp;#x200B; It is possible to write good code in Ember, and it is possible to write bad code in React. &amp;#x200B; However, I find that Ember's preferred model of tightly coupling, well, everything, makes it a lot more likely a mediocre developer (or a good developer under a deadline) will write bad code than React's model of being functional whenever possible. Vue's less functional (and on the surface, the syntax isn't that different from Ember, but Vue also has less tightly coupled code.) You can write good or bad code in any framework, but take a bad Ember codebase and a bad React codebase and the bad React codebase will be easier to fix every time. 
Good thing about NoSQL is that you dont have to worry about being forced to delcare the schema and change it on the fly. And updating values to the new schema (if you declared one) is incredibly easy. 
Some people, like this guy [https://www.ybrikman.com/writing/2018/08/12/the-10-to-1-rule-of-writing-and-programming/](https://www.ybrikman.com/writing/2018/08/12/the-10-to-1-rule-of-writing-and-programming/) , suggest that there's a 10-1 ratio between the code you write and the code you publish. Why? Because, like any writing, you tend to go through revisions. &amp;#x200B; So we can either get better at getting things right the first time or make it cheaper to write the code. &amp;#x200B; Ideally, do both, but I feel like the first approach has been talked about in this trend, so let me touch on typing. When creating code, you want to eliminate as much mechanical work as possible. if every key you hit was worth 10 characters instead of 1 you'd get a lot more written and that's a good thing. Better still if you didn't have to write at all. Remember the best code is the code you don't have to write. &amp;#x200B; When we write JavaScript we tend to have to do the same things over and over again. &amp;#x200B; How many times have you written: \`\`\` const someObject = { key: value, //etc } \`\`\` &amp;#x200B; I don't bother anymore. I use a context-sensitive snippet system. if I hit '{' on a new line and it's not inside an object, I automatically get the above code and I can hit tab to move from someObject to key:value, without having to do any other navigation. Hitting '{' inside the object would give me a new key-value pair with an object as the value. &amp;#x200B; I do the same thing for strings, functions, arrays. Anything I see myself doing again and again. &amp;#x200B; Most editors have some kind of snippet system available, either built-in or as a plugin. &amp;#x200B; For editing code that exists already, I've found vim's keybindings and vim concept of text objects are very effective.
Completely irrelevant in this case though. You have one array being updated 200x/second, you're not going to notice the 3μs difference in performance.
Honestly I spent a solid month going over fundamental primitives, and prototype functions and started doing contrived interview questions in my spare time and it's paid dividends for me. I'm much more confident in my approach to problems and thanks to es6 my solutions are more court and never mutate data which lends itself to react/redux. I've also stopped immediately searching for someone else's npm package for wrappers of services like Google maps and firebase. I spent the time to read the job sdk and implemented my own wrapper for my pet project. My next goal is to get comfortable with jest testing and see if test driven development (tdd) is something I'm in to.
As a fresher people normally won't expect too much. All you have to do is to have a good understanding of basic logical questions. If interviewer asks you questions which you doesn't know. Tell him frankly that you don't know the answer for it. Some people try to manage it even if they don't know the answer. Make you resume pretty clear and add only the technologies or programming languages you know. Otherwise, interviewers can ask questions from it. Because, most of the questions in interview will be based on what you have specified in your resume. All the best for your career!! If you want to learn about Javascript, then you can subscribe to my channel called JS for Everyone[https://www.youtube.com/channel/UCvQfk4ZV7RfLuKiHRVeZ0Kg]. 
Fixed a few of the points above. Unit testing was postponed until now - got it working today with Istanbul and Mocha! I also tested how the publishing to NPN works - added v0.0.1 there. https://www.npmjs.com/package/supermidijs How can I advertise it to your friends? :)
Let's say you have an element you attach a mouseover event to. When you mouse over, it triggers, great. However, let's say it has 10 children. As you move your mouse over each child, the mouseover handler on the parent will trigger each time due to the bubbling nature of the event. If you use mouseenter instead, the event would only trigger when you leave and reenter the parent. Since people usually want to do something with the parent when the mouse moves over it but don't want to trigger that action until the mouse moves out and back over, mouseenter and mouseleave are usually the more appropriate tool for the job. The exception is where event delegation occurs, which relies on the bubbling phase for certain events by installing a single handler further up the tree and then checking the originator (target) before performing the requisite action. You probably want to avoid pointer events for now as Safari doesn't support them. I would stick with mouse events and touch events unless you get something extra from pointer events or are using a polyfill. 
this is an excellent reference. i'd read it with the caveat that you probably want to optimize for code readability so that when you're looking at a data transform in 3 months long after the context of this is gone, you can understand what's going on. you obviously don't want to write horribly inefficient code just cause, but generally you should think about making your code more memory or cpu efficient only if it's a problem for your users. like the post said, programming is a way of tradeoffs.
Pairing tasks are a great way to observe someone approach a problem. My current job did this and its vastly superior to the 'do at home' tech test, which you can have your friend help you with or spend 3 days on when the guide time is 3 hours. The problem with the pair session is that some developers feel a lot of pressure, but the key thing to remember is exactly what you said. 
Is there a specific resource you’d recommend for going over those fundamentals? I’ve done stuff like the koans, but could use all the practice I can get!
Do it constantly. Over and over.
Don't bullshit. If they ask you about a technology or algorithm you don't know, acknowledge it instead of trying to flub. Learn from those questions and use them as learning points to prep for the next interview. Be aware of your body language, don't let the stress translate to your posture. Remember that there are no failures in the process, only feedback on how you can improve. Good luck! :)
Yeah I used https://edabit.com/ heavily, great interface and you can see other people's solutions once you complete or give up on a question. I also made my own hacky random question generator on code pen : https://codepen.io/jsells/pen/mxxQRv . These are some questions I actually had in interviews as well as ones I have found online. PS if anyone is in Toronto, I'm hiring frontend/ full stack devs for a large Canadian corporation. PM me. 
You don't get fast by building high-quality code for interesting, new problems or learning new things and stretching yourself. You get as fast as the guys doing tutorial demos on YouTube by using one framework, solving the same basic problems in the same way a million times, and staying strictly within your comfort-zone. What I'm saying is that if you want to get faster then the only way is repetition and practice, but that kind of practice is probably the exact opposite of the kind that makes you a *better dev* - solving different problems, learning new tools and working outside of your comfort zone.
it seems like you guys are just arguing over which type of testing would be the worst to leave out entirely, which really depends on the project and seems like a distraction anyway. there are projects i might leave automated tests out of, but if i need to walk through a 4-step wizard to verify my validation code or handling of edge cases, i'm definitely automating it.
https://upload.vaa.red/ A simple file upload website, where the users can upload files which are then encrypted on the client-side (by browser). Encrypted string is stored on the server. Decryption is also completely done on the client-side. Crypto-JS library (AES-256) is used. No ads.
[removed]
Yeah, if everything is called index.js it can be a problem with tab-based editors that only show the file name. I use Vim and open everything in vertical splits where I see the full path, so it's not a problem for me. I know that index.jsx is always the component, and index.js is always the service. At work we also use a file called core.js where we always put constants and flowtype definitions. The rule is that core.js can't import anything except other core.js files from parents. Of course you can also use MyComponent/index.js for something like this: export { default } from './MyComponent'; export { default as reducer} from './reducer'; export { default as saga} from './saga'; export * from './core'; export * from './actions'; export * from './selectors'; We don't do this because often we only import certain things, like for example a component might only use the actions of a parent, so by specifically importing those actions as \`import \* as somethingActions from bla/bla/actions\` we immediately see at the top of the file that only the actions are used. But in the end that's not really what matters with this structure. What's important is that everything is only as global as it needs to be which makes it very easy to see what is used where, and makes it easy to refactor and remove code. Scenes is the term the author of the Medium articles used. I find it a little weird too. It's possible that the author has a background in Flash where scenes was a common term.
*beep beep* Hi, I'm JobsHelperBot, your friendly neighborhood jobs helper bot! My job in life is to help you with your job search but I'm just 432.7 days old and I'm still learning, so please tell me if I screw up. *boop* It looks like you're asking about interview advice. But, I'm only ~32% sure of this. Let me know if I'm wrong! Have you checked out CollegeGrad, HuffPo, LiveCareer, etc.? They've got some great resources: * https://collegegrad.com/jobsearch/mastering-the-interview/the-eight-types-of-interview-questions * http://www.huffingtonpost.com/rana-campbell/10-ways-to-rock-your-next_b_5698793.html * https://www.livecareer.com/quintessential/job-interview-tips * http://people.com/celebrity/worst-job-interview-answers-askreddit-answers/ * https://www.thebalance.com/questions-to-ask-in-a-job-interview-2061205
As others have mentioned, if you truly want to feel like you’re coding “faster”.. then that comes with tons of practice and experience. You just need to code regularly.. soon the things you had to google, the syntax you had to look up, or the MDN documentation on how something works becomes second nature. It’s akin to how sports players describe the game “slowing down” for them. It’s because they’ve become so familiar with the ins-and-outs that it’s easier to look ahead and see what next move is instead of tunnel-vision in thought on the current problem. With experience, you will start to already be confident in your first approach to things and it will be easier to start thinking what else needs to happen or the possible consequences - positive or negative - from your approach. Like others have mentioned as well, it’s super important that you focus on quality code with unit tests. Speed comes with time and is not the benchmark of a good developer. 
You don't get paid based on code quality but on speed
Very interesting , but I'm not sure whether the object allocation is the actual cost driver for your object/position argument testcase. I replicated your jsperf and executed the test cases with a number instead of a string and then again with a simple addition instead of the string concatenation : https://jsperf.com/object-vs-positional-args-numbers Whereas the usage of a number instead of a string mirrors your results, the replacement of string concatenation with a simple addition yields a completely different result : Object and positional function are equally fast. Do you have any idea why ? ( I don't know much about the optimization that v8 does to js , but I would expect the object creation cost to be the same for both cases )
I'm not sure if you are, but [don't use jwt for sessions](http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/) and _definitly_ don't trust the client to give you valid data. You really can't stop someone messing with their local store and giving themselves extra roles, however, you can error them out of whatever admin screen/action by checking their roles on the backend.
Depends on what your writing.
no, it depends on whether you're writing or editing. I specifically said writing. if your project is well planned 1000 lines is nothing at all in a full work day.
Assuming you mean how to be more productive (i.e. better code in less time) you’ll need two things: knowledge and experience with the language. Knowledge is fairly straightforward, read docs and reference material, regularly read books on programming and JavaScript, and stay learning about all the pitfalls and potential enhancements on doing things. Experience is trickier because its usually just a matter of being exposed to the language long enough. For both cases, try building your own projects, have fun with it so you don’t lose interest, and make sure it’s simple enough to complete. Share your software code with a more experienced friend/colleague/peer (maybe make it open source?) and have them review it. Writing better code is *always* more important than writing code faster, though. Optimize for quality and speed will eventually come :) Pro tip: use linters, type checkers (if applicable), reference docs, and debugging tools to avoid getting stuck too often with trivial problems.
I agree with @hansolo669 the jwt is not a good session storage option. If you insist on using it that way, you should store the user role in the jwt. This way the jwt is all the information you need to check access rights. On another note, nobody should be able to access data or do actions just because they can see some UI. Your server needs to check the session information and deny access every request!
in today's first-job hiring market, you also definitely need to solve the problem to get the job
Hi /u/Emergency_Chocolate, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/WildlyDepressed, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/TerribleEnglish1, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Hi /u/TheRealFawce77, this post was removed. For javascript help, please visit /r/LearnJavascript. Thanks for your understanding.
Lol, nailed it. How many companies do you think are big enough to pay someone to do this full time,… pretending for a moment that they’d be cool with an ops person specializing in client side only. Im guessing they’d need to be serving dozens of Frontend devs at minimum. 
... and who produces a clean reliable product with less bugs and won’t be a house of cards when you add new features
Here is a slightly different answer from the rest. Learn your IDE shortcuts. Learn how to efficiently use auto complete. Learn how to quickly jump between lines of code. Learn to quickly jump between files. Basically try to master your IDE. Why do I say this? When you practice your IDE shortcuts and make it second nature, there is less mental load for you when writing code. Programming is tedious but you won’t have to spend so much time manually hitting every character or using your mouse to find and click deeply nested file you were looking for. Often times you’ll finish a long task and at the thought of repeating that slow process it can cause your mind to wander and end up here. TL:DR: master your ide.
I’d say 1000 lines of well thought out, not copy-pasted JavaScript is on the high end for a single work day. I do agree though that planning is really important, IME the more experienced you get, the more time you spend thinking through the problem and less time tinkering with code.
User could drop script on logged in page that scrapes subs and sends to wherever.
I'd be interested in seeing what the experience level is of those responding and downvoting. I've always considered myself a slow coder, but then again this is the learn js sub, and I'm here to help, not to get help, so maybe it makes sense for the people posting here not to be as fast as me.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
type faster 😂
In the days before, study and cram interview questions like prepping for a final exam. Arrive 10 minutes early. Behave pleasant, agreeable, and enthusiastic. Admit when you don’t know something rather than bluffing. Google the employer so you are knowledgeable about their business. At the end of the interview they usually ask “do you have any questions?” - ask them what they like about working at the company.
fair enough. makes sense to me.
&gt; You don't get paid based on code quality but on speed. If that's your situation you start looking for a new job, because you're not a developer, you're an output device.
Yes, server will be checking for the roles upon every request.
I made `global-dispatcher`, which is basically similar to event emitter but does not rely on an object to emit or subscribe events. Find the reddit post here: https://old.reddit.com/r/npm/comments/a00vs9/globaldispatcher_a_global_bare_bones_singleton/
Nice! &amp;#x200B;
you can trigger a click handler for a DOM inside the iframe from a parent like below, `document.getElementById('iframe').contentWindow.$('#playButton').trigger('click');` But, this will work only if both parent and child iframe runs on same domain.
Thanks, You are right. However, I have generator license while creating repo with the help of GitHub. I should specify it on README
First do it well - then you will automatically speed up - but you won’t sacrifice speed for quality then. Trying to go faster is not the way to go
&gt; It is possible to write good code in Ember, and it is possible to write bad code in React. &gt; You can write good or bad code in any framework, that's what is being said tho &gt; I find that Ember's preferred model of tightly coupling why do you think things are tightly coupled by design of the framework? &gt; than React's model of being functional whenever possible. This can still be garbage if the person doing it is bad at programming. Functional programming doesn't inherently make things good. &gt; You can write good or bad code in any framework, but take a bad Ember codebase and a bad React codebase and the bad React codebase will be easier to fix every time. This is 100% false. The last React project I looked at that my company didn't write was absolute trash. Bad code is bad code. Stop trying to push this on the framework
The thing that you are trying to do will not work. Because the page that are loading inside the frame (child document), and the page that is loading the frame (parent document) are on a different domain name. This would violate the `same-origin` policy and the browser will not let you access the contents of the child document (for security reasons). The only way to solve this problem would be to put all the documents in the same domain name, basically everything should be loaded from the same domain.
Okay thanks. I recently had a coding test in React and they wanted styling as well. I suck at styling so I'm trying to do it more. 
Ah, I'll tell them :)
I'm fairly certain a JWT can be decoded from base64 and the payload can be read by anyone. The JWT is a base64 encoded pairing of the (readable) payload and a signature of that payload. So the backend with the secret can re-sign the given payload and compare that to the signature proving the payload that payload could have only come from itself. Clients can easily see all the data in the payload. If you want that data to be unreadable, then you can include encrypted data in the payload.
Bro. This is so ignorant. &gt; Code splitting. Possible with Ember Engines. Coming to non-engines projects with Octane. &gt; Class declarations What? This is a thing. see http://ember-decorators.github.io/ &gt; Allowing me to choose how I want to organize my components in the file structure That is actually a bad thing, bro. How do you achieve consistent file structure between multiple or many people on a large app. You can also use this today https://github.com/emberjs/ember.js/issues/16373 The point of a convention is that you don't need to argue about where things go. While I agree with you that the classic layout is bad, Pods is pretty close to module unification, and you can use pods with classic to almost get module unification. &gt; Not having to switch between three different files for styling, layout, and behavior. This is only bad if you code on a 720p screen and / or hate scrolling. They are all different concerns. &gt; Compile to less than 400kb Ever seen NullVoxPopuli's emberclear? it's a canary build, which is already 'big', and is &lt; 500kb and libsodium is half of it. Ember itself in its entirety is about 100 to 120kb depending on what you have enabled. React-dom is 30kb. &gt; porting the code to mobile easily PWAs, man &gt; have a framework under active development six months from now. WTF. what are you talking about? 
I actually think this is correct - but it still doesn’t say anything about typing speed or coding speed. Management usually cares about who delivers results, and that is usually very different from the ones that just write the most code. In fact, it is more or less the opposite- to be a star in the eyes of management, you have to be able to identify where you can do the smallest (and thus fastest) changes which yields the biggest results. I think learning to do this is difficult, but one thing that certainly doesn’t help you get there is trying to learn to just code faster. Instead, try to spend more time thinking about your product, your users and align that with your knowledge of your architecture. Based on that, try to identify quick wins, and then apply those. It isn’t about writing tens or hundred or thousands of lines of code per day, it is about making the lines you write matter.
Getting nervous in an interview is totally normal. Much is at stake. Being an introvert is a good sign. Being effective is half intellectual, and half psychological. Read some Freud or Jung. Become you.
Oh, looks like you’re right. I’ve just used a library to encode and verify/decode JWTs, I didn’t realize they’re implemented like that.
The two are not mutually exclusive. 
Ok, yea, that's totally fair -- having that boiler plate on each function may not be the best. FWIW, I'd use a memoize pattern for this -- basically something like the following: const memoize = fn =&gt; async (...params) =&gt; { const key = getKey(...params) let result = await redis.get(key) if (result != null) { return JSON.parse(result) } result = await fn(...params) await redis.set(key, JSON.stringify(result)) return result } export const expensiveApiRequest1 = memoize((...params) =&gt; firstExpensiveRequest(...params)) export const expensiveApiRequest2 = memoize((...params) =&gt; seondExpensiveRequest(...params)) There's *proabbly* even libraries out there that are implement this sort of pattern and use redis as a back-end for cache. 
[https://github.com/babel/babel/issues/9075#issuecomment-441389462](https://github.com/babel/babel/issues/9075#issuecomment-441389462)
First you get good, then you get fast
This cool, but can you clarify which application scale redux going to be best solution ? Todo with 2-3 screens worse it ? Last time i see chrome extensions with react/redux which slowdown page loading 200-300ms for a single dialog popup...
Absolutely. You also should not trust the "X is faster than Y in JS" without profiling for yourself. Given all the layers of optimizing compilers your code must pass through the performance may depend on things as funny as the presence of a number in an object key, whether the string was allocated as a literal or is a result of concatenation, etc. And worst of all, different engines apply different optimizations, so often there is no clear winner. Memory allocation is the best predictor of performance problems I have found over the years.
I think DreamHost hosting is fine as well. Personally using them for a long time now with multiple domains. They provide a free SSL (by Let's Encrypt), non-EIG and with great support and uptimes. If you like to, you can use the link https://www.dreamhost.com/r.cgi?1222845/promo/dreamsavings50 for 50$ discount (affiliate link). It will drop the prices for about 5$ a month.
[removed]
This so much. Even integration tests as long as they are pretty quick. At first it will seem like you are wasting time in making the test, but you will soon see you are able to get a lot more done in the same amount of time because you don't have to keep going back and fixing the same shit over again or manually re-run some process to validate stuff.
Would be nice if you could just paste list of audio URLs into a textarea in the page rather than putting a JSOn together.
Definitely the best. A bugfix that finds a chunk of unnecessary code, and removes it is far better than a bugfix that adds additional code to try and work around the side effects of that unnecessary code. 
Make the high score stay there after the alert. Maybe read it from the cookie or something. Good visual memory game. :)
brew install hub
spend more time planning your code out than actually trying to write it on the fly. 
This. Plan your data structures in such a way that you never have to duplicate the same information in different tables (of course, this is a rule that gets broken when you need to scale but if you had that problem, you would not need to ask this question in the first place). For example, let's say you are building an app for a school to track students' classes and grades. You can design the tables as follows * Teachers * Teacher ID * Name * Subject * Class * Subjects * Subject ID * Subject name (eg Math) * Class * Class ID * Class (eg 8th grade) * Students * Student ID * Name (eg Tommy Smith) * Age * Grades * Student ID * Subject ID * Class ID * Teacher ID * Grade (eg A, B+, etc) Now, every time a new student enrolls, you add them to the Students table. Each time an exam occurs, you update the Grades table with the grades of each student. With this setup, you can easily add or delete students (Pro tip, never delete records, just mark them as inactive or something), add new classes, etc without worrying about the integrity of your database. You can also do cool queries like find out which teacher's students have the worst grades and then fire them (just joking, there might be extenuating reasons for a teacher to have consistently poorly performing students).
GitHub only? Or a part of git now?
yes, i agree with you. i will do that. thanks!
Does YouTube API support more creator focused queries? Like fetching my # of subs, information about the subs, likes and dislikes on a vid etc?
Can you share a small prototype, I'm not able to understand.
Google wants to make sure you watch the videos their algorithm gives you. You, as the user, do not know what you want to watch. Google knows what you want to watch. Conform your enjoyment to the algorithm! Be one with the machine!
It's made by github, it provides some general sugar around git, but the pull-request thing I believe is github specific. Haven't tried with bitbucket for example.
It's just literally returning whatever is in the href="data:..." section! This is not a very clever solution for some/most cases :D &amp;#x200B; &amp;#x200B;
&gt; and I'm here to help, not to get help We never stop needing help
very true. 
&gt; Definitely. If writing code fast is a necessity for you, you are probably solving a particular type of problem over and over again until it’s a behavioral pattern rather than actual problem solving. And I think a pretty good argument could be made that, that's a situation ripe for some clever problem solving. Work smarter.
Optimizing compliers are witchcraft. To be fair, both options run as fast as doing nothing at all: [https://jsperf.com/object-vs-positional-args-numbers/15](https://jsperf.com/object-vs-positional-args-numbers/15) Looks like inlining + constant folding to me.
This is a false dichotomy. The worst coders I've ever seen were only able to write a handful of lines. The lines were not quality just because there were few of them.
\&gt;Absolutely. Who is the better coder, the one who spits out a thousand lines of code in a day, or the one who writes a handful of lines? &amp;#x200B; Yeah, very few tough problems are solved with a handful of lines. Though to be fair someone coding more than a thousand lines of code a day is either a genius or adding a significant amount of tech debt.
Just drove 20 hours in one shot solo like two weeks ago and I found specifically podcasts that encourage me to stay mentally engaged were the trick to staying alert. 
The raise gets the one who delivers the most value. And "speed" is just one of many components of the value you bring to the company. If that's not the criteria in your company then your company will soon be out of business.
Not sure how to describe this little utility. I found myself wanting something like it for the React build scripts, and I couldn't find something like it on NPM so...I thought it might be useful to share with others. &amp;#x200B; The basic idea is that it prints a progress bar with an estimation for how long a task will take to complete, based on previous times the task has run. This can be useful if your project uses automated scripts for things like building or processing.
You might want to check out my post [Practical Redux, Part 10: Managing Modals and Context Menus](https://blog.isquaredsoftware.com/2017/07/practical-redux-part-10-managing-modals/), which discusses some ways to handle this (including linking to a dedicated modal middleware).
Unless I am missing something, this can be achieved quite comfortably using thunks. Change your modal reducer into an object: const initialState = { isOpen: false, actions: [] } then, changing `incrementWithConfirm` from a saga into a thunk, do something like this: export function incrementWithConfirm() { return (dispatch, getState) =&gt; { const action = { type: INCREMENT }; if selectShouldConfirmIncrement(getState().count) { dispatch({ type: CONFIRM_ACTION, payload: { action }) } else { dispatch(action); } } } the modal reducer will respond to the CONFIRM\_ACTION by opening the modal and saving the action passed in the payload into the actions array. And then, when you click on the confirm button in your modal and fire the `confirmIncrement` action, it will also use thunk to dispatch the stored increment action: export function confirmIncrement() { return (dispatch, getState) =&gt; { const action = getState().modal.action; dispatch(action); } } I think that should be it.
Thank you for the article! It is good to raise the awareness about performance concerns. However, I have questions to the benchmarks that article is using. In the array operations, you are talking about objects allocations and then show the jsperf results, that show the results from the **time** perspective, not the **memory**. These two subjects are different, and the fastest algorithm might not be the most memory efficient and vice versa. The best alternative as I could suggest is to use the "memory" tab in Chrome DevTools and check the heap size. I extracted benchmark code to a separate page and took the heap snapshots with the following results: * Native array methods - 3.8 Mb * For loop - 3.8 Mb * Lodash chain - 4.3 Mb [The code is available here](https://bl.ocks.org/just-boris/4c9d03bf8b3b75fceeb3c3b06f54bb82), you can try to get your results and compare. Additionally, I would challenge the chosen array size in benchmarks. You are iterating in 100 items, so even if there will be allocations overhead, it will not be very visible, because iterations are too small. I have a [modified version of the benchmark](https://jsperf.com/array-chains/3), that uses 10000 array items and it shows different leader: lodash chain wins. It is not a surprise though. Lodash invokes array operations lazily, using `reduce` ([link to the source](https://github.com/lodash/lodash/blob/4.17.12-pre/lodash.js#L4362)). That's why I would recommend using lodash, as it produces readable code with separated operations, but still fast because of lazy evaluations.
&gt;Possible with Ember Engines. Coming to non-engines projects with Octane. Ember Engines is experimental. &gt;Class declarations A third party addon, not native support &gt; How do you achieve consistent file structure between multiple or many people on a large app? By putting files where they make sense, and if they don't make sense, tell them to move it during the code review. Take services, for example. If you follow the [documentation](https://guides.emberjs.com/v3.5.0/applications/services/), it puts a shopping cart service in app/services/shopping-cart.js How do you access that service? `import { inject as service } from '@ember/service';` `export default Component.extend({` `//will load the service in file /app/services/shopping-cart.js` `shoppingCart: service()` `});` &amp;#x200B; You can also do &lt;arbitrary-name&gt;: service('shopping-cart') This is fine, I have no problem with this. (Well, there's a disadvantage. Because /app/services/shopping-cart.js is implied rather than explicit, I can't just click on the file path in my IDE and go straight to it,) so that's minor. The problem I have is when THIS *also* works `import { inject as service } from '@ember/service';` `export default Component.extend({` `//will load the service in file /app/pods/shopping-cart/service.js` `shoppingCart: service()` `});` &amp;#x200B; So when that comment isn't there... &amp;#x200B; `import { inject as service } from '@ember/service';` `export default Component.extend({` `shoppingCart: service()` `});` &amp;#x200B; where does the shopping cart service live? &amp;#x200B; If files can go in *one and only one place*, I guess that \*might\* be okay from a convention-over-configuration standpoint. Don't get me wrong, it'd still not be my \*prefered\* way, and I'd rather have full control over files, but at the very least, there's a consistent syntax, and the convention is consistant. &amp;#x200B; If Ember's services worked like normal Javascript singleton classes, then you could do this: `import ShoppingCartService from 'app/pods/shopping-cart/service.js'` `export default Component.extend({` `shoppingCart: ShoppingCartService` `})` &amp;#x200B; Then even if you think all services belong in pods, or vice versa, it's a damn simple find-and-replace if you want to move the file from one place to another, without worrying if you're going to break your code. Not to mention that in both these cases, the code TELLS you where the shopping cart lives even if you're unfamiliar with React patterns or conventions. &amp;#x200B; `import ShoppingCartService from 'app/services/shoppingCart.js'` `export default Component.extend({` `shoppingCart: ShoppingCartService` `})` &amp;#x200B; I'm sure you'd say the answer to this would be: Well then, stick with one or the other - put services in a services folder, or put them in pods. *But the very argument is that you are inheriting bad legacy code*. &amp;#x200B; By the way, that link you gave me? STILL IN DEVELOPMENT. &amp;#x200B; &gt;This is only bad if you code on a 720p screen and / or hate scrolling. I have bad eyesight not fully correctable with glasses, so *yes*, if possible, I like to keep my fonts big enough to read. That gives me about 2 VSCode splits to work with on any screen. This is also why I prefer CSS-in-JS React solutions like Aphrodite than using webpack to import CSS/SCSS files. However, the latter has performance advantages, That still gives me only two columns for everything, not three, and Vue allows me to do all three in the same .vue file. &amp;#x200B; &gt;Ever seen NullVoxPopuli's emberclear? &amp;#x200B; Yes, and it's using Ember in a non-conventional way, *essentially using ember as a build tool, rather than at runtime*. It's less like React or Vue and more like Jade or Jekyll or Gatsby. It's *very* clever. But in 99% of apps, Ember is going to be a dependency, not just a dev-dependency. &gt;PWAs, man Accelerometers, *dude*.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [lodash/lodash/.../**lodash.js#L4362** (4.17.12-pre → 1cb18df)](https://github.com/lodash/lodash/blob/1cb18dfada50388b142cea0b17645d70782b2736/lodash.js#L4362) ---- 
I've worked with absolute trash React project, absolute trash Vue projects, and now, absolute trash Ember projects. &amp;#x200B; I know which one I'd choose if you pointed a gun at my head and made me. 
&gt; Programming is a way of tradeoffs. Well exactly, but also in opposite way - sometimes performance drop is insignificant, while code readibility is much more important.
There is always another deadline. The truth is that there is the project management triangle with quality/speed/features. You get to pick 2. You never get all 3. If there is always another deadline you get quality or you get features.
The better coder is the one who can predict future business requirements and put the quality where it matters and deliver fast when it doesn't.
Uh, sorry for the misusage of this channel :)
be comfortable.
Imo, I aim at producing good enough code so it won't be spaghetti code and later slow down progress, but no longer I aim at perfect code, spending hours refactoring and thinking about architecture as it is also bad.
Looks good! Make sure to link to GitHub in your `package.json` so people can check out the code more easily 🙂.
sounds like you need to work on better projects just in general :\
Glad you liked it! Regarding space vs time — I'm well aware of this. However, I've never seen noticeable issues with memory usage on the front end — GC usually arrives just in time. More memory-heavy code does not necessarily mean higher memory footprint, just longer / more frequent GC pauses. In the same spirit, array size does not matter — with smaller arrays, we do more iterations, creating the same amount of garbage. GC scheduling was not something I wanted to get too deep into. I also had an entire section devoted to chain libraries, but it was sucking me inside like a rabbit hole, to the point where I decided to just cut it out and maybe write on this later. I think it's a beautiful example of an abstraction done right — hiding the performant code behind a usable facade. Here are the benchmarks for reference: * [https://jsperf.com/array-chains/1](https://jsperf.com/array-chains/1) * [https://jsperf.com/array-take-chains/1](https://jsperf.com/array-take-chains/1)
I'll try to remember when I get home. Basically write a script to read subscription information off a logged in YouTube page. Then, you can send the read information to another server with an XMLHttpRequest or websocket. You could also use the script to transform the logged in page to have a new UI. Then the user can execute the script in their browser while logged in to YouTube.
That's not an opposite way — exactly the same, in fact =) Generally, you want to wrap the ugly high-performance helpers into readable functions.
Its easier to write code when you already wrote it. I copy and paste code from previous projects. :)
Which - big surprise - actually results in spitting out code faster. Better quality code means: * Fewer bugs * Code that's easier to understand * Code that's easier to modify * Code that's easier to write tests for Those things are major time savers. The US Marines have a mantra: *slow is steady, steady is fast*. That same concept can be loosely applied to programming as well.
When you `map`, `filter`, etc. you're not creating 100 extra objects, just one extra. All the "new" elements have the same memory reference. So in your example it's +3, not +300.
Everyone on here is just virtue singling and not actually providing you any tips on coding faster. Here’s a tip. Instead of writing code and then Refreshing the ui to test your code, write functional tests to do it for you. You’ll save a lot of time this way and you’ll get all of the benefits of writing tests. 
I'm not *against* `vim` and co, but never once have I thought "I wish I could type faster" while programming.
This really depends. I try to keep the [Design Stamina Hypothesis](https://martinfowler.com/bliki/DesignStaminaHypothesis.html) in mind and estimate where the design payoff line might be when deciding what constitutes "good enough" code. Generally speaking, the longer-lived a project is, the more it benefits you to in fact spend hours thinking about architecture and refactoring to ensure crystal clarity of the design. I recently worked on a new feature at work where we spent a solid 3 weeks of just *planning* - prototyping, diagramming, discussions etc. We loosely followed domain-driven design, came up with our ubiquitous language of terminology, and used that throughout our planning and architecture process. We then spent about 2 weeks doing actual implementation and testing, being RUTHLESS about using that ubiquitous language consistently throughout the code. Those 2 weeks of development were hilariously easy despite the complexity of the thing we were building. We had effectively planned out and prototyped *exactly* what we wanted, and then just wrote the implementation. Did some minor refactoring to ensure everything was named correctly, and the shit just worked. QA couldn't find any flaws with it. It even handled a few requirement changes with grace. Moreover, we ended up building a lot of low level infrastructure and plumbing that were then used throughout the codebase for other features that made *those* implementations much easier as well. That project really sold me on spending a lot of time just sitting on ass and *thinking* about the problem you're solving and how you want to solve it. 
It will also prevent you from writing unnessecary code in many cases.
Not quite — storing the array itself (the index -&gt; item mapping) uses memory. It's still an oversimplification (dynamic array allocation is tricky), but larger arrays do use more memory just to exist.
That's what I said. An array is just an object. You create 1 new array for each method. It's not a memory hog at all.
Write unit tests and learn about lodash.
ES6 only.
Protip: Write unit tests for posting message on the internet from a mobile.
 var links = Array.from(document.getElementsByTagName('a')); links.forEach(link =&gt; link.href = link.href.replace(/(users\/[^\/]*)\/?/g, '$1/follow'));
I like that, and it’s very true.
im assuming his regex was broken by reddit escape characters or somethin
&gt;.replace(/users/*/g, "users/*/follow"); this would be better, but still not fantastic: .replace(/(user\/\S*?)/g, "$&amp;/follow"); You need to brush up on your regex.
Getting "faster" at coding means being able to smartly choose libraries to keep moving parts (risk) lower and adopt patterns that'll make maintenance on the code you actually have to write easier. Be predictable, keep your methods short and concise and always KISS. Don't be afraid to kill your babies (kill your darlings, whatever)
Not to mention it completely depends on what you consider a line of code. Does whitespace count? What about the curly braces that each have their own line in an array of objects? Just looking at the final line of a file doesn’t tell you much, amirite?
&gt; (just joking, there might be extenuating reasons for a teacher to have consistently poorly performing students). You say this but this comes up every time the teachers pay negotiations come up, at least in New Zealand.
An object / array, as the data structure, does not have constant size. Larger arrays occupy more space (proper space, not including the items), and allocating them takes more time since continuous memory strides are preferred. See [this benchmark](https://jsperf.com/array-allocation-by-size)
How so? If I have a solution planned well I will type it as fast as I can. And vim's shortcuts for selecting whole functions or bracket sections, centering the screen, jumping in the place of the line that you want really really add up more than you may think. 
**As always, take the following with precaution. It is not meant to discourage you in any way _at all_. It is meant to either give you some hints about things that could help you improve your project or at least to give you things you should probably think about.** ---- As general feedback... I think I would _avoid_ presenting it as "jQuery-like". I know you only presented it as such here, and not in the readme, but you still use examples using the `$` name. I mean, it's something really _bad_, but I think presenting it that way doesn't have any particular benefit either. On the other hand... The library feels a bit of a mix-and-match of a handful of interesting functions. Yes, they may be interesting but somehow it feels a bit inconsistent, a bit directionless. Is it a DOM access/manipulation library? Is it an array management library? Is it about events? The answer to all of those feels like "yes, to a point". The library provides some stuff for those, but not a lot either. It has a bit of each but there doesn't seem to be a _clear_ specific goal. The library is interesting because it's practical. You know, something you're bound to write yourself if you didn't have it. So, great. But then again, it doesn't feel _that_ interesting because it doesn't seem to provide _one solid thing_. It makes you think "Well, this is ok, but I'm still going to need _something more_ for this and that operations." So, what am I getting to with all this? The thing I feel your library needs most is that: some _definition_, setting some _concrete goal_ that the library solves, and then adding the things that are missing to provide the whole deal about that problem and removing -or at least moving to the side- the things that are not really related to it. --- A couple of details _about the tests_. `qs` and `qsa` are little more than wrappers, so maybe spending a lot of effort doing tests on them seems useless. But then again, having a single test on each, and well, not a particularly interesting test at that, feels bad. Like maybe not having any test at all. The test for `qsa` feels _particularly_ weak; you know, just testing that the length is 3. On `fromTop`, the test just checks that there's _some_ result. Do those tests really feel like they provide something useful? I'm not feeling it much. More in general, I'd say the tests are somewhat too thin, too unsubstantial. I miss some tests that try _not-so-happy paths_. Like, what does `last([1,2], 3)` return? Is that expected? (Personally I don't think it should be that way). The test for event delegation might also test that a test that is dispatched to a non-selected element is indeed not handled. I comment on this because _even as an exercise on doing tests_ these here make me feel like they are... well, not totally useless, but they feel _very useless_. The important thing about tests is never "simply having some tests", and I know writing tests is hard and thinking about _what should I test?_ is a difficult question. So, don't take this badly, but these tests don't really feel good.
More like you can edit faster.
Wow. I... Well, I don't know what to say... Except that I'm really happy for you. Congratulations on the job, really. I do this... well, without getting into too much detail, it's a sort of duty or something I need to do. So I'm **really** glad that it helped you. Like really happy. I hope the job goes well. Keep learning and keep going :)
Time is a construct, have you considered instead listing the number of burritos that could be eaten while the task completes.
Absolutely. To create something new, to learn something new, you need to throw a lot of time into studying topic. Writing fast only apply to well known problems, because then you can reapply designs you learned at the beginning. It's always the same pattern
I mean you'd hope that calls to a web API would be asynchronous...
&gt;var links = Array.from(document.getElementsByTagName('a')); //(probably want to only search under the id tho) links.forEach(link =&gt; link.href = link.href.replace(/(users\\/\[\^\\/\]\*)\\/?/g, '$1/follow')); This is one damn good piece of code right here... Works a treat, thank you so much &lt;3
I realized right after publishing 0.1.0 that I had forgotten to link to the repo, so I added that info in 0.1.1– but it seems like NPM waited a long time before it showed up, because several people have pointed this out. 😅 &amp;#x200B; Anyway, it should be there now! Thanks for the pointer. 🙇‍♂️
The rate of burrito consumption if subjective. 
So they contain different non overlapping information and I should only buy the the es6 edition? Thanks
I think you should go brush up your knowledge on the values of dependency injection and what inversion of control actually is. Plus in ember you could technically put the files wherever you wanted and register them to the dependency injection container yourself which I used to do before services were even a thing. I don’t really answer your complaining nonsense to convince you of anything. Just to help other readers not think that your shortsighted conclusions on Ember are well thought out. You remind me of the mid 40s unhappy, unhealthy coworkers of mine that just complain all the time (more specifically the wannabe know-it-all, studied something non computer related career switching variant that ends up with a really skewed perspective on what software development is). 
I believe there's still some debate within the scientific community regarding the value of BPM (burritos per minute) and whether it's even constant at all. Some even theorize that the rate is inversely proportional to a person's altitude. I don't believe Node offers any standard APIs for determining the current altitude, so– alas, we are stuck with units of time for now. 😞
&gt; Ember Engines is experimental. so? &gt; A third party addon, not native support what do you think all of every other ecosystem is? third party addons &gt; By putting files where they make sense, and if they don't make sense, tell them to move it during the code review. That's prone to human error. Also, allows for _opinions_ which get in the way of productivity. &gt; If Ember's services worked like normal Javascript singleton classes, then you could do this: 1. That's not dependency injection, 2. ruins the ability to tree shake. 3. Is then not able to be rendered on the server, because the code is evaluated at parse time, and not run time You may want to read up on dependency injection here: https://en.wikipedia.org/wiki/Dependency_injection And also checkout .net core's dependency injection. &gt; By the way, that link you gave me? STILL IN DEVELOPMENT. Yeah? I was saying Classic + Pods IS module unification, but with some minor differences. &gt; This is also why I prefer CSS-in-JS React I know these are popular, but it's kind of an anti pattern. I may be on my own on this, but unless you are using real css variables like `--var-name`, you aren't going to be able to use all the cool new features css has to offer, like native / automatic dark mode. You'll have to implement all the features css already implements, but in javascript. That just sounds like a mess to me. &gt; using webpack to import CSS/SCSS files. This just puts the css in the javascript. makes dealing with real css features and scoping kinda hard. If I am to use any css pre-processing, it's going to be css-blocks. &gt; Yes, and it's using Ember in a non-conventional way, essentially using ember as a build tool, rather than at runtime. What do you mean? how is this true? emberclear is using ember in the most expected way (just using alpha/beta features). Build tool? what? runtime? what? &gt; It's less like React or Vue and more like Jade or Jekyll or Gatsby. It's very clever. But in 99% of apps, Ember is going to be a dependency, not just a dev-dependency. ??? emberclear has only a few pages statically rendered. And that's only for fastish initial load time. The full ember app is loaded after the fastboot js/css loads. It's a _normal_ ember app. And ember is always a dev-dependency, because the cli determines what you actually need for your distributed build. &gt; Accelerometers, dude. https://caniuse.com/#feat=accelerometer Chrome supports accelerometers. PWAs are the future for most web apps. No need to wast resources going native. Website-based content should not have native apps. imo
I really appreciate you taking the time to write some feedback, it's super useful. This is predominantly built for me, hence the mix-and-match feel you describe. The `qsa` function, for example, saves me constantly converting the usual NodeList to an Array so I have access to things like `forEach` and `map`, whereas `qs` is more of just a shorthand wrapper. I may tailor this towards a specific goal in the future, or split the codebase out into separate, but better-rounded goals. As it stands currently, with such a small user base and no demands to make significant changes towards a specific goal, I will probably keep this how it is. When it comes to tests, this feedback is priceless. I have absolutely 0 experience writing tests as it's not something the front-end developers do at my workplace. I wrote these tests in order to get some experience in doing so as I think front-ends testing their JavaScript code is a good thing. I'll be sure to try the *not-so-happy* paths, I suppose the next question is what should happen in those situations? I will be sure to give this plenty of thought, as this is something I will certainly be looking into a lot further as I try and improve. Again, your feedback is invaluable, so thank you for taking the time to formulate such a lengthy and in-depth reply.
Nope no clue, sorry.
No worries :) If you get around to using this script and have suggestions, shoot me a note.
I see. The first part of my comment was written with the perspective of a library that was being shared for others to use, maybe. Of course, as a personal interest, well, then you probably don't need to push too much for those goals I mentioned. Instead, you could just let them _grow_. I mean, you could keep picking up these useful functions and collecting them. In time, you may start to see _groups_ of things that kind of look related to each other and more or less separate from the rest. When that happens, then that could be a fine moment to extract that "group" and place it on its own. So, to summarize: Given that it's more for personal use, then just let it grow a bit more. Keep collecting and then, later, think about defining (or discovering) those goals I mentioned. It's not _yet_ as important as I said.
Storing actions in redux state! Somehow that never occurred to me but makes perfect sense ... that’s the only lightbulb I needed.
&gt; Do you have any idea why ? escape analysis: https://docs.google.com/presentation/d/1YdpdI1aeBnlchyAYvjw1Alm3QcoenPm6x4D7DA4pQUY/edit#slide=id.g2fc113789a_0_47
Three ways: 1. Better Code quality, so that your code is scalable. Follow Clean Coding techniques, so that you won't need to keep rewriting code that slows down your development 2. Development tools and guides/cheatsheets. I personally use VSCode with a handful of extensions that help me to accelerate my development. Just google "best VSCode extensions" and you'll have many sites that show you VSCode extensions that allow you to code easier and faster. You also can check out https://vscodecandothat.com for many tips and tricks. 3. CI/CD Pipeline. Basically, automate your deployment by using ansible, Jenkins or whatever CI/CD means possible. Then you won't have to repetitively do deployment manually once you got the code deployment stage.
They have pretty much the same info, but the ES6 one uses ES6 language features. Since ES6 is well supported, there's not much sense in going back in time to learn the old way.
What exactly are you trying to do? If you just want to find every link on the page and add '/follow' to the end, you can do this: `document.querySelectorAll('a').forEach((el) =&gt; el.setAttribute('href', el.getAttribute('href') + '/follow'))` If you only wanted to change links that contains '/users/', you could use an [attribute selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) to limit your query results. `document.querySelectorAll('a[href*="/users/"]').forEach((el) =&gt; el.setAttribute('href', el.getAttribute('href') + '/follow'))` Split out into a few lines to make it easier to understand: `function addFollow(element){` `element.setAttribute('href', element.getAttribute('href') + '/follow');` `}` `const anchorsToChange = document.querySelectorAll('a[href*="/users/"]');` `anchorsToChange.forEach(addFollow);` If you want to find and replace literally every URL on the page, not just href attributes, you could do try something like your example, except you'll need a regex that actually works. [This one](https://regex101.com/r/Xhk5ZL/2) should find every "word" that contains "://".
Learn to be comfortable with command line tools which increases automation
I read it as someone who is well versed in all aspects of frontend development. That is, design, code and project management.
Don't try to put on that you're smarter or know more about a subject than you actually do. Just be 100% honest, but don't just say "I don't know." They want to see how you work through a problem, so explain that you don't know something, then say how you'd go about finding out the answer and maybe what you'd do if the answer was x or y. Or just elaborate a bit on the subject to show that even though you don't know the answer, you still know *something* about it. Then there's the whole trying not to sound desperate for the job thing. I have a solution for this that will also help you get more comfortable with interviews, learn what questions interviewers are asking, learn what skills are actually in demand right now, and get a good feeling for the whole interview process. Here it is: You have to apply for as many jobs as possible, and go to EVERY interview you land. Interviewing sucks, but the more you do it, the better you'll get at at. It's very eye-opening actually stepping into these companies the first time around. It's a worthy investment of your time. 
This person codes.
Even easier, you can use \`autoFocus\` property as react supports that for input types. \`\`\`\`javascript const Example = (props) =&gt; &lt;input {...props}, autoFocus={true} /&gt; \`\`\`\` And if more control is needed then \`refs\` to rescue \`\`\`\`javascript class Example extends React.Component { inputRef: React.createRef(); componentDidMount = () =&gt; this.inputRef.current.focus(); render = () =&gt; &lt;input type="text" ref={this.inputRef} /&gt; } \`\`\`\` the curry vs args question, you can just create two functions and have \`sum\` decide which one to use \`\`\`\`javascript const sumArgs = (...rest) =&gt; rest.reduce((sum, v) =&gt; sum+v, 0); &amp;#x200B; const sumCurried = (value) =&gt; { let totalSum = value; const sumHelper = (n) =&gt; { totalSum += n; return sumHelper; } sumHelper.toString = () =&gt; totalSum; return sumHelper; }; &amp;#x200B; const sum = (...rest) =&gt; rest.length &gt; 1 ? sumArgs(...rest) : sumCurried(...rest); console.log(sum(2,3)); // Outputs 5 console.log(sum(2)(3)); // Outputs 5 \`\`\`\`javascript &amp;#x200B; I really don't have any good advice for you besides saying just to practice. It just comes with experience. I'd suggest for you to create sample projects and just play around with it much as possible. Best.
What kind of values will be stored? 
That seems like a higher level problem. This function probably shouldn't even be invoked with invalid values. And that error handling should be done at higher level. Is this example based on actual code? Why even return `errorMsg` here instead of having that validation be done somewhere else. What context does this run in? Does all those checks have to be done there? To be honest, these type of code should be rarely preset if at all. Ideally you should just be able to do ````javascript const getRequiredData = (line, id, key) =&gt; _.get(line, `stations[${id}][${key}]`) ````
woah this is really wonderful and awesome to go through.
Would be cool to use something like this to use with XHR. But there must be pre estimation or storing in cookies or something.
Buy you say? [https://leanpub.com/javascriptallongesix/read](https://leanpub.com/javascriptallongesix/read)
tonight i wrote [sassbass](https://github.com/chase-moskal/sassbass) `npm install --save-dev sassbass` it's a simple tool to compile a directory containing \*.scss files into a directory of \*.css files `sassbass --indir src --outdir dist` it uses `chokidar` and `sass` package to get the job done, and it supports `--watch` mode too
that's a great idea
I know. Normally one on the other. React apollo has a local state, so you don't need redux. So usually I'm using one or the other. 
where's the github link to the sourcecode? at least for the frontend, so at least i could trust that files *really* are encrypted before they're uploaded to you where security and encryption of things is involved, i don't trust closed source things
hey that was kinda fun i got 17 on my first go, i'm very tired though XD goodnight y'all
consider saving high scores to `window.localStorage`
i feel there's a strained effort here to make "FrontendOps" a distinguished thing i prefer the term `"writes a good package.json"` as the job description... let's see if that sticks
&gt; dividing frontend from backend is an anti-pattern and often gets in the way of shipping great products at a fast pace for our users these two quotes are very close together in the article.. isn't the very term "FrontendOps" (instead of "devops") an example of the problematic divide? &gt; Well my answer is a FrontendOps culture shouldn't we strive for a "fullstack" devops culture? (isomorphic code, here we come!)
I haven't yet published it to a github, but that's the goal for the future. Front-end is already available (forgot to mention it in the first comment) [https://upload.vaa.red/js/demin/](here) (main.js has the encryption logic, decrypt.js has the decryption logic). This is 100% client-side encrypted and decrypted, so you could test it yourself, if that's really the case (open up your DevTools, look what is sent to the server, and when opening up a file, see what's get downloaded). You actually wouldn't even need to see the server-side code to verify the encryption/decryption security of this service.
Don't know how I missed that?
So you know webpack.
Probe burro 🐂
This is confusing. You are saying that you did not see memory issues in front-end, but the whole point of the article is to show how to avoid unnecessary allocations. What is the point of fixing something, that is already handled pretty well by Javascript engines? 
I found this questions useful. And thought it would be cool if there would be a place where people could archive interview questions. So I created this [page](https://reactjs.fandom.com/wiki/Reactjs_Wiki) Please add more questions
I did find a way of storing the data. My only concern is how I can send multiple requests to the database. Say a user wants to update more than one grid value at the time, as seen below: 0: {user_id: "1", date: "2018-11-08", duration: "8"} 1: {user_id: "1", date: "2018-11-09", duration: "14"} 2: {user_id: "1", date: "2018-11-10", duration: "14"} How can I send this request to Express? Each post request is expected to look something like this: { "user_id": 2, "date": "2018-11-16", "duration": 10 } With the `user_id` as one of the parameters in the route 
Because GC pauses. You don't get a strict "out of memory", but GC pauses are a real performance killer in data-heavy code. And allocations themselves are not free.
You don't want to ask my boss's answer to that..
There is no the best way to learn JS, only the simple and hard way: (read good books, read blog, watch video and whatever) , keep coding, take some projects, keep thinking. if you have question, google it and ask experienced people or [learnjavascript](https://www.reddit.com/r/learnjavascript/)
Thanks for your tips ... Have you the title of a good book to read ? 
I'll have to try that next time. But for me it would have to be something I can dip in and out of - so I can selectively ignore bits as and when I need to do something complicated on the road. I'm a fairly new driver so perhaps I'm just still finding the basics a little demanding.
But aren't they just the basic competencies of front end development (and indeed all software engineering)? Shouldn't every developer worry about building things quickly and to a high quality? Doesn't creating a role like FrontendOps silo away knowledge of valuable things like continuous deployment?
Check out freecodecamp. To read look for Kyle Simpson’s “You Don’t Know JS”. Free online or you can buy the book series. Mozilla’s docs on JavaScript are awesome too (MDN).
One of the reasons why I put together this talk is that, as a consultant, I too often experience working in cross functional teams where Frontend work is dismissed. I talk about common pitfalls I see constantly in a lot of projects (serving render-blocking assets, missing a cache-busting strategy, etc...). These are important problems which needs to be treated seriously especially if you are working on a micro-frontend type of architecture where teams are responsible for entire business capabilities (verticals) from the infrastructure to the UI layer. Not having a dedicated "customer experience" platform team to take care of the final user experience means that every team needs to make their part to keep the application performant for the user. In order to do so a FrontendOps culture is needed in every team. The same concept is valid for infrastructure. In the moment an organisation move away from having an infrastructure team, a DevOps culture is needed in teams to take care of infrastructure operations on their own. With a great degree of autonomy (owning the whole vertical) comes great responsibilities for teams: making sure to provide a good user experience is one of these responsibilities and a FrontendOps culture help to fulfil this task. I hope this helps clarify what I mean by "FrontendOps". I don't think we need a new role in our teams, we just need to acknowledge Frontend Operations are important for the final user experience and team should treat them accordingly and not dismiss them.
What is 'branches'? Seems like you're iterating through it but not actually using it in the for loop.
Do you have an example where GC pauses become an issue? I have run profiling on array-chain benchmark and I could only see "Minor GC" runs, that lasted for 0.3ms, the same time as it took to do a single call to reduce `callback`, so I find it negligible. Additionally, I found [an explanation from V8 team](https://v8.dev/blog/free-garbage-collection) how their GC works. According to the article, there is a special fast path to clean up short-living objects. Intermediate elements on array chain operations seem to be suitable for this fast path optimization, so their allocation is not an issue, that might cause notable performance issues for your app.
\&gt; Pro tip, never delete records, just mark them as inactive or something Although, take into account the right to be forgotten (GDPR).
What websites do you need to download from? If you're comfortable with command line tools, I'd recommend using the program `youtube-dl`